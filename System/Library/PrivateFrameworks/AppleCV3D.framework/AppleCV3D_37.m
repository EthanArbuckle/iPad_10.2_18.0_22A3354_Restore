BOOL sub_20F7F0E08(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

void sub_20F7F129C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  unsigned int v9;
  void *v10;
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double cosval;
  __double2 v19;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v38;
  double v39;
  const double *v40;
  double v41;
  float64x2_t v43;
  double v49;
  float64x2_t v50;
  int64x2_t v53;
  float64x2_t *v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int8x16_t v59;
  uint64_t v60;
  int v61;
  double *v62;
  uint64_t v63;
  double v64;
  double v67;
  __int128 v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  __int128 v75;
  uint64_t v76;
  float64x2x3_t v77;
  float64x2x3_t v78;

  v8 = *((unsigned int *)a4 + 4);
  v9 = v8;
  if ((_DWORD)v8 == *(_DWORD *)(a2 + 16))
  {
    v10 = *(void **)a2;
  }
  else
  {
    *(_DWORD *)(a2 + 16) = v8;
    v10 = *(void **)a2;
    if (*(_QWORD *)(a2 + 8) < v8)
    {
      if (v10)
      {
        MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
        v9 = *(_DWORD *)(a2 + 16);
      }
      v11 = (8 * v8 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v11 >> 3;
      v10 = operator new(v11, (std::align_val_t)0x20uLL);
      *(_QWORD *)a2 = v10;
    }
  }
  if (v9)
    bzero(v10, 8 * v9);
  if (*a3 != a3[1])
  {
    abort();
  }
  v13 = (_DWORD *)a3[3];
  v12 = (_DWORD *)a3[4];
  if (v13 != v12)
  {
    v14 = 0;
    v15 = *a4;
    v16 = *(_QWORD *)(a1 + 104);
    do
    {
      v16 -= 16;
      do
      {
        v61 = *(_DWORD *)(v16 + 16);
        v16 += 16;
      }
      while (*v13 != v61);
      v62 = (double *)(v15 + 8 * v14);
      v63 = *(_QWORD *)(v16 + 8);
      v64 = v62[2];
      _Q7 = *(_OWORD *)v62;
      _D13 = v62[1];
      __asm { FMLA            D0, D13, V7.D[1] }
      v67 = _D0 + v64 * v64;
      if (v67 >= 0.0000002635)
      {
        v17 = sqrt(v67);
        v68 = *(_OWORD *)v62;
        v19 = __sincos_stret(v17);
        cosval = v19.__cosval;
        *(_QWORD *)&_Q7 = v68;
        v21 = v19.__sinval / v17;
        v22 = 1.0 / v67 * (1.0 - v19.__cosval);
      }
      else
      {
        v22 = 0.5 - v67 * (v67 / -720.0 + 0.0416666667);
        v21 = 1.0 - v67 * (0.166666667 - v67 * (v67 / -5040.0 + 0.00833333333));
        cosval = 1.0 - v67 * v22;
      }
      v23 = *(double *)&_Q7 * v22;
      v24 = _D13 * v22;
      v25 = cosval + *(double *)&_Q7 * (*(double *)&_Q7 * v22);
      _D6 = cosval + _D13 * (_D13 * v22);
      v27 = cosval + v64 * (v64 * v22);
      v28 = _D13 * (*(double *)&_Q7 * v22);
      v29 = v64 * v23;
      v30 = v64 * v24;
      v31 = *(double *)&_Q7 * v21;
      v32 = _D13 * v21;
      v33 = v64 * v21;
      v34 = v28 - v33;
      v35 = v32 + v29;
      _D0 = v28 + v33;
      _D2 = v30 - v31;
      v38 = v29 - v32;
      v39 = v31 + v30;
      v40 = (const double *)(v63 + 32);
      v78 = vld3q_f64(v40);
      v41 = *(double *)(v63 + 96);
      _Q16 = *(_OWORD *)(v63 + 80);
      v43 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78.val[0], v25), v78.val[1], _D0), v78.val[2], v38);
      __asm { FMLA            D5, D0, V16.D[1] }
      v49 = _D5 + v41 * v38;
      v50 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78.val[0], v34), v78.val[1], _D6), v78.val[2], v39);
      __asm
      {
        FMLA            D5, D6, V16.D[1]
        FMLA            D6, D2, V16.D[1]
      }
      v70 = v49;
      v69 = v43;
      v72 = _D5 + v41 * v39;
      v71 = v50;
      v74 = _D6 + v41 * v27;
      v73 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78.val[0], v35), v78.val[1], _D2), v78.val[2], v27);
      v76 = 0;
      v75 = 0uLL;
      sub_20E9733B8(&v69, (double *)&v75);
      v77 = vld3q_f64(v40);
      v53.i64[0] = v76;
      v54 = (float64x2_t *)(v15 + 8 * (v14 + 3));
      _Q6 = *(float64x2_t *)(v63 + 80);
      v56.f64[0] = v54[1].f64[0];
      v57.f64[0] = *(float64_t *)(v63 + 120);
      *(_QWORD *)&v56.f64[0] = *(_OWORD *)&vsubq_f64(v56, v57);
      v58 = vsubq_f64(*v54, *(float64x2_t *)(v63 + 104));
      v59 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v77.val[0], v58.f64[0]), v77.val[1], v58, 1), v77.val[2], v56.f64[0]);
      v77.val[0] = vmulq_f64(_Q6, v58);
      v77.val[1].f64[0] = v58.f64[1];
      __asm { FMLA            D0, D1, V6.D[1] }
      v77.val[0].f64[0] = vmlad_n_f64(v77.val[0].f64[0], *(double *)(v63 + 96), v56.f64[0]);
      v60 = *(_QWORD *)a2 + 8 * v14;
      *(_OWORD *)v60 = v75;
      *(int64x2_t *)(v60 + 16) = vzip1q_s64(v53, (int64x2_t)v59);
      *(int8x16_t *)(v60 + 32) = vextq_s8(v59, (int8x16_t)v77.val[0], 8uLL);
      v14 += 6;
      ++v13;
    }
    while (v13 != v12);
  }
}

__n128 sub_20F7F1610(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  unint64_t v82;
  unint64_t v83;
  __n128 *v84;
  unint64_t v85;
  __n128 v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __n128 *v90;
  unint64_t v91;
  __n128 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  __n128 v97;
  unint64_t v98;
  __n128 *v99;
  unint64_t v100;
  __int128 v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  _OWORD *v139;
  __int128 v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  __n128 v147;
  unint64_t v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __int128 v153;
  __n128 v154;
  __n128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

BOOL sub_20F7F2214(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v73;
  uint64_t v74;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v13 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      if (v13 < *(_QWORD *)a1)
        goto LABEL_10;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 < *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
LABEL_10:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v12[1];
          *(__n128 *)a1 = *v12;
          *(__n128 *)(a1 + 16) = v20;
LABEL_11:
          *v12 = v19;
          v12[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v12->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v12[1];
          *v14 = *v12;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_11;
        }
        return 1;
      }
      if (v16 >= v15)
        return 1;
      v36 = *v14;
      v35 = *(__n128 *)(a1 + 48);
      v37 = v12[1];
      *v14 = *v12;
      *(__n128 *)(a1 + 48) = v37;
      *v12 = v36;
      v12[1] = v35;
      if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)a1)
        return 1;
LABEL_46:
      v71 = *(__n128 *)a1;
      v70 = *(__n128 *)(a1 + 16);
      v72 = v14[1];
      *(__n128 *)a1 = *v14;
      *(__n128 *)(a1 + 16) = v72;
      *v14 = v71;
      v14[1] = v70;
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_43;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_43:
      if (v24->n128_u64[0] < v22->n128_u64[0])
      {
        v65 = *v22;
        v64 = *(_OWORD *)(a1 + 80);
        v66 = *(_OWORD *)(a2 - 16);
        *v22 = *v24;
        *(_OWORD *)(a1 + 80) = v66;
        *v24 = v65;
        *(_OWORD *)(a2 - 16) = v64;
        if (v22->n128_u64[0] < v14->n128_u64[0])
        {
          v68 = *v14;
          v67 = *(_OWORD *)(a1 + 48);
          v69 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v69;
          *v22 = v68;
          *(_OWORD *)(a1 + 80) = v67;
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_20F3DD9E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = (__n128 *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 64);
      v6 = (__n128 *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)a1;
      if (v7 >= *(_QWORD *)a1)
      {
        if (v5 < v7)
        {
          v30 = *v6;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v31;
          *v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v6->n128_u64[0] < v8)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v6;
            *(_OWORD *)(a1 + 16) = v34;
            *v6 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v46;
          *v6 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v5 >= *(_QWORD *)(a1 + 32))
            goto LABEL_28;
          v10 = *v6;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(__n128 *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v4->n128_u64[0])
        {
          v73 = *(_OWORD *)(v48 + 8);
          v74 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_31;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_31:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v73;
          *(_QWORD *)(v51 + 24) = v74;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v4 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

__n128 sub_20F7F25D4(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 *v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  unint64_t v74;
  __n128 *v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  unint64_t v82;
  unint64_t v83;
  __n128 *v84;
  unint64_t v85;
  __n128 v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __n128 *v90;
  unint64_t v91;
  __n128 *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  __n128 v96;
  __n128 v97;
  unint64_t v98;
  __n128 *v99;
  unint64_t v100;
  __int128 v101;
  __n128 *v102;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  uint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  unint64_t v138;
  _OWORD *v139;
  __int128 v140;
  __n128 v141;
  __n128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  __n128 v147;
  unint64_t v148;
  __int128 v149;
  __n128 v150;
  __int128 v151;
  __n128 v152;
  __int128 v153;
  __n128 v154;
  __n128 v155;
  __int128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __int128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __n128 v202;
  __n128 v203;
  __n128 v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  __n128 v209;
  __n128 v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  __n128 v215;
  __int128 v216;
  unint64_t v217;
  __int128 v218;
  __int128 v219;
  __n128 v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

BOOL sub_20F7F31D8(uint64_t a1, uint64_t a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 v10;
  __int128 v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 *v24;
  unint64_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __n128 v57;
  __int128 v58;
  __n128 v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __n128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __int128 v73;
  uint64_t v74;

  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v13 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      if (v13 < *(_QWORD *)a1)
        goto LABEL_10;
      return 1;
    case 3:
      v14 = (__n128 *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a2 - 32);
      v12 = (__n128 *)(a2 - 32);
      v16 = v17;
      if (v15 < *(_QWORD *)a1)
      {
        if (v16 < v15)
        {
LABEL_10:
          v19 = *(__n128 *)a1;
          v18 = *(__n128 *)(a1 + 16);
          v20 = v12[1];
          *(__n128 *)a1 = *v12;
          *(__n128 *)(a1 + 16) = v20;
LABEL_11:
          *v12 = v19;
          v12[1] = v18;
          return 1;
        }
        v57 = *(__n128 *)a1;
        v56 = *(_OWORD *)(a1 + 16);
        v58 = *(_OWORD *)(a1 + 48);
        *(__n128 *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v58;
        *v14 = v57;
        *(_OWORD *)(a1 + 48) = v56;
        if (v12->n128_u64[0] < *(_QWORD *)(a1 + 32))
        {
          v19 = *v14;
          v18 = *(__n128 *)(a1 + 48);
          v59 = v12[1];
          *v14 = *v12;
          *(__n128 *)(a1 + 48) = v59;
          goto LABEL_11;
        }
        return 1;
      }
      if (v16 >= v15)
        return 1;
      v36 = *v14;
      v35 = *(__n128 *)(a1 + 48);
      v37 = v12[1];
      *v14 = *v12;
      *(__n128 *)(a1 + 48) = v37;
      *v12 = v36;
      v12[1] = v35;
      if (*(_QWORD *)(a1 + 32) >= *(_QWORD *)a1)
        return 1;
LABEL_46:
      v71 = *(__n128 *)a1;
      v70 = *(__n128 *)(a1 + 16);
      v72 = v14[1];
      *(__n128 *)a1 = *v14;
      *(__n128 *)(a1 + 16) = v72;
      *v14 = v71;
      v14[1] = v70;
      return 1;
    case 4:
      v14 = (__n128 *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (__n128 *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 64);
      v24 = (__n128 *)(a2 - 32);
      v25 = *(_QWORD *)a1;
      if (v21 >= *(_QWORD *)a1)
      {
        if (v23 < v21)
        {
          v39 = *v14;
          v38 = *(_OWORD *)(a1 + 48);
          v40 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v40;
          *v22 = v39;
          *(_OWORD *)(a1 + 80) = v38;
          if (v14->n128_u64[0] < v25)
          {
            v42 = *(__n128 *)a1;
            v41 = *(_OWORD *)(a1 + 16);
            v43 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v43;
            *v14 = v42;
            *(_OWORD *)(a1 + 48) = v41;
          }
        }
      }
      else
      {
        if (v23 >= v21)
        {
          v61 = *(__n128 *)a1;
          v60 = *(_OWORD *)(a1 + 16);
          v62 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v62;
          *v14 = v61;
          *(_OWORD *)(a1 + 48) = v60;
          if (v23 >= *(_QWORD *)(a1 + 32))
            goto LABEL_43;
          v27 = *v14;
          v26 = *(_OWORD *)(a1 + 48);
          v63 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v63;
        }
        else
        {
          v27 = *(__n128 *)a1;
          v26 = *(_OWORD *)(a1 + 16);
          v28 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v22;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *v22 = v27;
        *(_OWORD *)(a1 + 80) = v26;
      }
LABEL_43:
      if (v24->n128_u64[0] < v22->n128_u64[0])
      {
        v65 = *v22;
        v64 = *(_OWORD *)(a1 + 80);
        v66 = *(_OWORD *)(a2 - 16);
        *v22 = *v24;
        *(_OWORD *)(a1 + 80) = v66;
        *v24 = v65;
        *(_OWORD *)(a2 - 16) = v64;
        if (v22->n128_u64[0] < v14->n128_u64[0])
        {
          v68 = *v14;
          v67 = *(_OWORD *)(a1 + 48);
          v69 = *(_OWORD *)(a1 + 80);
          *v14 = *v22;
          *(_OWORD *)(a1 + 48) = v69;
          *v22 = v68;
          *(_OWORD *)(a1 + 80) = v67;
          if (*(_QWORD *)(a1 + 32) < *(_QWORD *)a1)
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_20F3DD9E4((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), (__n128 *)(a2 - 32), a3);
      return 1;
    default:
      v4 = (__n128 *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 64);
      v6 = (__n128 *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_QWORD *)a1;
      if (v7 >= *(_QWORD *)a1)
      {
        if (v5 < v7)
        {
          v30 = *v6;
          v29 = *(_OWORD *)(a1 + 48);
          v31 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v31;
          *v4 = v30;
          *(_OWORD *)(a1 + 80) = v29;
          if (v6->n128_u64[0] < v8)
          {
            v33 = *(__n128 *)a1;
            v32 = *(_OWORD *)(a1 + 16);
            v34 = *(_OWORD *)(a1 + 48);
            *(__n128 *)a1 = *v6;
            *(_OWORD *)(a1 + 16) = v34;
            *v6 = v33;
            *(_OWORD *)(a1 + 48) = v32;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v45 = *(__n128 *)a1;
          v44 = *(_OWORD *)(a1 + 16);
          v46 = *(_OWORD *)(a1 + 48);
          *(__n128 *)a1 = *v6;
          *(_OWORD *)(a1 + 16) = v46;
          *v6 = v45;
          *(_OWORD *)(a1 + 48) = v44;
          if (v5 >= *(_QWORD *)(a1 + 32))
            goto LABEL_28;
          v10 = *v6;
          v9 = *(_OWORD *)(a1 + 48);
          v47 = *(_OWORD *)(a1 + 80);
          *v6 = *v4;
          *(_OWORD *)(a1 + 48) = v47;
        }
        else
        {
          v10 = *(__n128 *)a1;
          v9 = *(_OWORD *)(a1 + 16);
          v11 = *(_OWORD *)(a1 + 80);
          *(__n128 *)a1 = *v4;
          *(_OWORD *)(a1 + 16) = v11;
        }
        *v4 = v10;
        *(_OWORD *)(a1 + 80) = v9;
      }
LABEL_28:
      v48 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      while (1)
      {
        v52 = *(_QWORD *)v48;
        if (*(_QWORD *)v48 < v4->n128_u64[0])
        {
          v73 = *(_OWORD *)(v48 + 8);
          v74 = *(_QWORD *)(v48 + 24);
          v53 = v49;
          do
          {
            v54 = a1 + v53;
            v55 = *(_OWORD *)(a1 + v53 + 80);
            *(_OWORD *)(v54 + 96) = *(_OWORD *)(a1 + v53 + 64);
            *(_OWORD *)(v54 + 112) = v55;
            if (v53 == -64)
            {
              v51 = a1;
              goto LABEL_31;
            }
            v53 -= 32;
          }
          while (v52 < *(_QWORD *)(v54 + 32));
          v51 = a1 + v53 + 96;
LABEL_31:
          *(_QWORD *)v51 = v52;
          *(_OWORD *)(v51 + 8) = v73;
          *(_QWORD *)(v51 + 24) = v74;
          if (++v50 == 8)
            return v48 + 32 == a2;
        }
        v4 = (__n128 *)v48;
        v49 += 32;
        v48 += 32;
        if (v48 == a2)
          return 1;
      }
  }
}

uint64_t sub_20F7F3598(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 640;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F7F3624(int64x2_t *a1, uint64_t *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  int64x2_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  int64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  char v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t *v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  unint64_t v133;
  char *v134;
  unint64_t *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unint64_t v150;
  unint64_t *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  unint64_t v162;
  unint64_t *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  char v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  char v174;
  __int128 v175;
  unint64_t v176;
  _BYTE *v177;
  __int128 v179;
  _BYTE v180[288];
  _BYTE v181[288];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  char v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  char v199;
  __int128 v200;
  char v201;
  unint64_t v202;
  __int128 v203;
  _BYTE v204[288];
  _BYTE v205[288];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  char v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  char v223;
  __int128 v224;
  char v225;
  unint64_t v226;
  char v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  _BYTE __src[288];
  _QWORD __dst[39];

  __dst[36] = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = (unint64_t *)a1[12].i64[1];
  v11 = (unint64_t *)a1[13].i64[0];
  if (v10 == v11)
  {
    v11 = (unint64_t *)a1[12].i64[1];
  }
  else if (*(v11 - 111) >= v9)
  {
    v12 = 0xB195E8EFDB195E8FLL * (v11 - v10);
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[111 * (v12 >> 1)];
      v15 = *v14;
      v16 = v14 + 111;
      v12 += ~(v12 >> 1);
      if (v15 < v9)
        v10 = v16;
      else
        v12 = v13;
    }
    while (v12);
    if (v10 != v11)
    {
      v11 = v10;
      if (*v10 == v9)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v179 = *(_OWORD *)a2;
  memcpy(v180, a2 + 2, sizeof(v180));
  memcpy(v181, a2 + 38, sizeof(v181));
  v20 = *((_OWORD *)a2 + 42);
  v186 = *((_OWORD *)a2 + 41);
  v187 = v20;
  v21 = *((_OWORD *)a2 + 44);
  v188 = *((_OWORD *)a2 + 43);
  v189 = v21;
  v22 = *((_OWORD *)a2 + 38);
  v182 = *((_OWORD *)a2 + 37);
  v183 = v22;
  v23 = *((_OWORD *)a2 + 40);
  v184 = *((_OWORD *)a2 + 39);
  v185 = v23;
  v190 = *((_BYTE *)a2 + 720);
  v191 = 0u;
  *(_QWORD *)&v200 = a4;
  *((_QWORD *)&v200 + 1) = a5;
  if (a5)
  {
    v24 = (unint64_t *)&a5->__shared_owners_;
    v25 = (uint64_t *)a1;
    do
      v26 = __ldxr(v24);
    while (__stxr(v26 + 1, v24));
    v198 = 0xBFF0000000000000;
    v199 = 0;
    v201 = 0;
    do
      v27 = __ldaxr(v24);
    while (__stlxr(v27 - 1, v24));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v198 = 0xBFF0000000000000;
    v199 = 0;
    v201 = 0;
    v25 = (uint64_t *)a1;
  }
  v28 = *a3;
  v29 = (char *)v25[1];
  v30 = (char *)v25[2];
  v31 = v29;
  if (v30 != v29)
  {
    v32 = (v30 - v29) >> 4;
    v31 = (char *)v25[1];
    do
    {
      v33 = v32 >> 1;
      v34 = (unsigned int *)&v31[16 * (v32 >> 1)];
      v36 = *v34;
      v35 = (char *)(v34 + 4);
      v32 += ~(v32 >> 1);
      if (v36 < v28)
        v31 = v35;
      else
        v32 = v33;
    }
    while (v32);
  }
  if (v31 == v30 || *(_DWORD *)v31 != v28)
    goto LABEL_44;
  v37 = *((_QWORD *)v31 + 1);
  *(_QWORD *)&v191 = v37;
  ++*(_DWORD *)(*((_QWORD *)v31 + 1) + 8);
  v38 = a3[1];
  if (v30 != v29)
  {
    v39 = (v30 - v29) >> 4;
    do
    {
      v40 = v39 >> 1;
      v41 = (unsigned int *)&v29[16 * (v39 >> 1)];
      v43 = *v41;
      v42 = (char *)(v41 + 4);
      v39 += ~(v39 >> 1);
      if (v43 < v38)
        v29 = v42;
      else
        v39 = v40;
    }
    while (v39);
  }
  if (v29 == v30 || *(_DWORD *)v29 != v38)
  {
LABEL_44:
    if ((_QWORD)v191)
      --*(_DWORD *)(v191 + 8);
    v17 = 0;
    if (*((_QWORD *)&v191 + 1))
      --*(_DWORD *)(*((_QWORD *)&v191 + 1) + 8);
  }
  else
  {
    v44 = *((_QWORD *)v29 + 1);
    *((_QWORD *)&v191 + 1) = v44;
    ++*(_DWORD *)(*((_QWORD *)v29 + 1) + 8);
    if (*(_BYTE *)(v37 + 20) || *(_BYTE *)(v44 + 20))
    {
      v45 = (unint64_t *)v25[26];
      v202 = v9;
      v203 = v179;
      memcpy(v204, v180, sizeof(v204));
      memcpy(v205, v181, sizeof(v205));
      v210 = v186;
      v211 = v187;
      v212 = v188;
      v213 = v189;
      v206 = v182;
      v207 = v183;
      v208 = v184;
      v209 = v185;
      v214 = v190;
      v217 = v193;
      v218 = v194;
      v215 = v191;
      v216 = v192;
      v220 = v196;
      v221 = v197;
      v219 = v195;
      v223 = v199;
      v222 = v198;
      v46 = v200;
      v224 = v200;
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
      v200 = 0uLL;
      v225 = v201;
      if (v45 == v11 || *v11 != v9)
      {
        v53 = a1[13].u64[1];
        v54 = (unint64_t *)a1[12].i64[1];
        v55 = (char *)v11 - (char *)v54;
        v56 = 0xB195E8EFDB195E8FLL * (v11 - v54);
        if ((unint64_t)v45 >= v53)
        {
          v101 = 0xB195E8EFDB195E8FLL * (v45 - v54) + 1;
          if (v101 > 0x49CD42E2049CD4)
            sub_20E867F44();
          v102 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v53 - (_QWORD)v54) >> 3);
          if (2 * v102 > v101)
            v101 = 2 * v102;
          if (v102 >= 0x24E6A171024E6ALL)
            v103 = 0x49CD42E2049CD4;
          else
            v103 = v101;
          __dst[4] = (char *)a1 + 216;
          v48 = a1;
          if (v103)
          {
            if (v103 > 0x49CD42E2049CD4)
              sub_20E877A38();
            v104 = (char *)((char *)v11 - (char *)v54);
            v105 = 0xB195E8EFDB195E8FLL * (v11 - v54);
            v106 = v54;
            v107 = (char *)operator new(888 * v103);
            v54 = v106;
            v56 = v105;
            v55 = (uint64_t)v104;
          }
          else
          {
            v107 = 0;
          }
          v121 = &v107[888 * v56];
          __dst[0] = v107;
          __dst[1] = v121;
          __dst[2] = v121;
          __dst[3] = &v107[888 * v103];
          if (v56 == v103)
          {
            if (v55 < 1)
            {
              if (v54 == v11)
                v123 = 1;
              else
                v123 = 2 * v56;
              if (v123 > 0x49CD42E2049CD4)
                sub_20E877A38();
              v124 = (char *)operator new(888 * v123);
              v121 = &v124[888 * (v123 >> 2)];
              __dst[0] = v124;
              __dst[1] = v121;
              __dst[3] = &v124[888 * v123];
              if (v107)
                operator delete(v107);
            }
            else
            {
              v122 = v56 + 2;
              if (v56 >= -1)
                v122 = v56 + 1;
              v121 -= 888 * (v122 >> 1);
              __dst[1] = v121;
            }
          }
          *(_QWORD *)v121 = v9;
          *(_OWORD *)(v121 + 8) = v179;
          memcpy(v121 + 24, v204, 0x120uLL);
          memcpy(v121 + 312, v205, 0x120uLL);
          v125 = v211;
          *(_OWORD *)(v121 + 664) = v210;
          *(_OWORD *)(v121 + 680) = v125;
          v126 = v213;
          *(_OWORD *)(v121 + 696) = v212;
          *(_OWORD *)(v121 + 712) = v126;
          v127 = v207;
          *(_OWORD *)(v121 + 600) = v206;
          *(_OWORD *)(v121 + 616) = v127;
          v128 = v209;
          *(_OWORD *)(v121 + 632) = v208;
          *(_OWORD *)(v121 + 648) = v128;
          v121[728] = v214;
          *((_OWORD *)v121 + 46) = v215;
          v129 = v216;
          v130 = v218;
          *((_OWORD *)v121 + 48) = v217;
          *((_OWORD *)v121 + 49) = v130;
          *((_OWORD *)v121 + 47) = v129;
          v131 = v219;
          v132 = v221;
          *((_OWORD *)v121 + 51) = v220;
          *((_OWORD *)v121 + 52) = v132;
          *((_OWORD *)v121 + 50) = v131;
          v133 = v222;
          v121[856] = v223;
          *((_QWORD *)v121 + 106) = v133;
          *((_OWORD *)v121 + 54) = v224;
          v224 = 0uLL;
          v121[880] = v225;
          v134 = v121 + 888;
          __dst[2] = v121 + 888;
          v135 = (unint64_t *)a1[12].i64[1];
          if (v135 != v11)
          {
            v136 = 0;
            do
            {
              v137 = &v121[v136 * 8];
              v138 = (char *)&v11[v136];
              *(_QWORD *)&v121[v136 * 8 - 888] = v11[v136 - 111];
              *(_OWORD *)&v121[v136 * 8 - 880] = *(_OWORD *)&v11[v136 - 110];
              memcpy(&v121[v136 * 8 - 864], &v11[v136 - 108], 0x120uLL);
              memcpy(&v121[v136 * 8 - 576], &v11[v136 - 72], 0x120uLL);
              v139 = &v121[v136 * 8 - 288];
              v140 = *(_OWORD *)&v11[v136 - 30];
              v142 = *(_OWORD *)&v11[v136 - 36];
              v141 = *(_OWORD *)&v11[v136 - 34];
              *((_OWORD *)v137 - 16) = *(_OWORD *)&v11[v136 - 32];
              *((_OWORD *)v137 - 15) = v140;
              *(_OWORD *)v139 = v142;
              *((_OWORD *)v139 + 1) = v141;
              v143 = *(_OWORD *)&v11[v136 - 22];
              v145 = *(_OWORD *)&v11[v136 - 28];
              v144 = *(_OWORD *)&v11[v136 - 26];
              *((_OWORD *)v137 - 12) = *(_OWORD *)&v11[v136 - 24];
              *((_OWORD *)v137 - 11) = v143;
              *((_OWORD *)v137 - 14) = v145;
              *((_OWORD *)v137 - 13) = v144;
              *(v137 - 160) = v11[v136 - 20];
              *(_OWORD *)(v137 - 152) = *(_OWORD *)&v11[v136 - 19];
              v146 = *(_OWORD *)&v11[v136 - 15];
              v147 = *(_OWORD *)&v11[v136 - 13];
              *(_OWORD *)(v137 - 136) = *(_OWORD *)&v11[v136 - 17];
              *(_OWORD *)(v137 - 104) = v147;
              *(_OWORD *)(v137 - 120) = v146;
              v148 = *(_OWORD *)&v11[v136 - 9];
              v149 = *(_OWORD *)&v11[v136 - 11];
              *(_OWORD *)(v137 - 56) = *(_OWORD *)&v11[v136 - 7];
              *(_OWORD *)(v137 - 88) = v149;
              *(_OWORD *)(v137 - 72) = v148;
              v150 = v11[v136 - 5];
              *(v137 - 32) = v11[v136 - 4];
              *((_QWORD *)v137 - 5) = v150;
              *(_OWORD *)(v137 - 24) = *(_OWORD *)&v11[v136 - 3];
              *((_QWORD *)v138 - 3) = 0;
              *((_QWORD *)v138 - 2) = 0;
              *(v137 - 8) = v11[v136 - 1];
              v136 -= 111;
            }
            while (&v11[v136] != v135);
            v121 += v136 * 8;
          }
          v151 = (unint64_t *)a1[13].i64[0];
          if (v151 != v11)
          {
            do
            {
              *(_QWORD *)v134 = *v11;
              *(_OWORD *)(v134 + 8) = *(_OWORD *)(v11 + 1);
              memcpy(v134 + 24, v11 + 3, 0x120uLL);
              memcpy(v134 + 312, v11 + 39, 0x120uLL);
              v152 = *(_OWORD *)(v11 + 81);
              v154 = *(_OWORD *)(v11 + 75);
              v153 = *(_OWORD *)(v11 + 77);
              *(_OWORD *)(v134 + 632) = *(_OWORD *)(v11 + 79);
              *(_OWORD *)(v134 + 648) = v152;
              *(_OWORD *)(v134 + 600) = v154;
              *(_OWORD *)(v134 + 616) = v153;
              v155 = *(_OWORD *)(v11 + 89);
              v157 = *(_OWORD *)(v11 + 83);
              v156 = *(_OWORD *)(v11 + 85);
              *(_OWORD *)(v134 + 696) = *(_OWORD *)(v11 + 87);
              *(_OWORD *)(v134 + 712) = v155;
              *(_OWORD *)(v134 + 664) = v157;
              *(_OWORD *)(v134 + 680) = v156;
              v134[728] = *((_BYTE *)v11 + 728);
              *((_OWORD *)v134 + 46) = *((_OWORD *)v11 + 46);
              v158 = *((_OWORD *)v11 + 49);
              v159 = *((_OWORD *)v11 + 47);
              *((_OWORD *)v134 + 48) = *((_OWORD *)v11 + 48);
              *((_OWORD *)v134 + 49) = v158;
              *((_OWORD *)v134 + 47) = v159;
              v160 = *((_OWORD *)v11 + 50);
              v161 = *((_OWORD *)v11 + 52);
              *((_OWORD *)v134 + 51) = *((_OWORD *)v11 + 51);
              *((_OWORD *)v134 + 52) = v161;
              *((_OWORD *)v134 + 50) = v160;
              v162 = v11[106];
              v134[856] = *((_BYTE *)v11 + 856);
              *((_QWORD *)v134 + 106) = v162;
              *((_OWORD *)v134 + 54) = *((_OWORD *)v11 + 54);
              *((_OWORD *)v11 + 54) = 0u;
              v134[880] = *((_BYTE *)v11 + 880);
              v134 += 888;
              v11 += 111;
            }
            while (v11 != v151);
            v11 = (unint64_t *)a1[13].i64[0];
          }
          v163 = (unint64_t *)a1[12].i64[1];
          a1[12].i64[1] = (uint64_t)v121;
          a1[13].i64[0] = (uint64_t)v134;
          v164 = a1[13].i64[1];
          a1[13].i64[1] = __dst[3];
          __dst[3] = v164;
          __dst[1] = v163;
          __dst[0] = v163;
          if (v11 != v163)
          {
            do
            {
              __dst[2] = v11 - 111;
              v165 = (std::__shared_weak_count *)*(v11 - 2);
              if (v165)
              {
                v166 = (unint64_t *)&v165->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              v11 = (unint64_t *)__dst[2];
            }
            while ((unint64_t *)__dst[2] != v163);
            v11 = (unint64_t *)__dst[0];
          }
          if (v11)
            operator delete(v11);
        }
        else
        {
          v171 = v190;
          v172 = v46;
          v173 = v47;
          v174 = v201;
          if (v11 == v45)
          {
            *v45 = v9;
            v108 = (char *)&v54[v11 - v54];
            *(_OWORD *)(v108 + 8) = v203;
            memcpy(v108 + 24, v204, 0x120uLL);
            memcpy(v108 + 312, v205, 0x120uLL);
            v109 = v206;
            v110 = v207;
            v111 = v209;
            *(_OWORD *)(v108 + 632) = v208;
            *(_OWORD *)(v108 + 648) = v111;
            *(_OWORD *)(v108 + 600) = v109;
            *(_OWORD *)(v108 + 616) = v110;
            v112 = v210;
            v113 = v211;
            v114 = v213;
            *(_OWORD *)(v108 + 696) = v212;
            *(_OWORD *)(v108 + 712) = v114;
            *(_OWORD *)(v108 + 664) = v112;
            *(_OWORD *)(v108 + 680) = v113;
            v108[728] = v171;
            *((_OWORD *)v108 + 46) = v215;
            v115 = v218;
            v116 = v216;
            *((_OWORD *)v108 + 48) = v217;
            *((_OWORD *)v108 + 49) = v115;
            *((_OWORD *)v108 + 47) = v116;
            v117 = v219;
            v118 = v221;
            *((_OWORD *)v108 + 51) = v220;
            *((_OWORD *)v108 + 52) = v118;
            *((_OWORD *)v108 + 50) = v117;
            v119 = v222;
            v108[856] = v223;
            *((_QWORD *)v108 + 106) = v119;
            *((_QWORD *)v108 + 108) = v172;
            *((_QWORD *)v108 + 109) = v173;
            v224 = 0uLL;
            v108[880] = v174;
            v120 = v45 + 111;
            v48 = a1;
            a1[13].i64[0] = (uint64_t)v120;
          }
          else
          {
            v176 = 0xB195E8EFDB195E8FLL * (v11 - v54);
            v177 = (_BYTE *)a1[12].i64[1];
            v228 = v179;
            memcpy(__dst, v180, 0x120uLL);
            memcpy(__src, v181, sizeof(__src));
            v239 = v186;
            v240 = v187;
            v241 = v188;
            v242 = v189;
            v235 = v182;
            v236 = v183;
            v237 = v184;
            v238 = v185;
            v175 = v215;
            v234 = v194;
            v233 = v193;
            v232 = v192;
            v231 = v197;
            v230 = v196;
            v229 = v195;
            v227 = v199;
            v226 = v198;
            v57 = v45 - 111;
            v58 = v45;
            v224 = 0uLL;
            if ((unint64_t)v45 >= 0x378)
            {
              v59 = v45 - 111;
              v58 = v45;
              do
              {
                *v58 = *v59;
                *(_OWORD *)(v58 + 1) = *(_OWORD *)(v59 + 1);
                memcpy(v58 + 3, v59 + 3, 0x120uLL);
                memcpy(v58 + 39, v59 + 39, 0x120uLL);
                v60 = *(_OWORD *)(v59 + 81);
                v62 = *(_OWORD *)(v59 + 75);
                v61 = *(_OWORD *)(v59 + 77);
                *(_OWORD *)(v58 + 79) = *(_OWORD *)(v59 + 79);
                *(_OWORD *)(v58 + 81) = v60;
                *(_OWORD *)(v58 + 75) = v62;
                *(_OWORD *)(v58 + 77) = v61;
                v63 = *(_OWORD *)(v59 + 89);
                v65 = *(_OWORD *)(v59 + 83);
                v64 = *(_OWORD *)(v59 + 85);
                *(_OWORD *)(v58 + 87) = *(_OWORD *)(v59 + 87);
                *(_OWORD *)(v58 + 89) = v63;
                *(_OWORD *)(v58 + 83) = v65;
                *(_OWORD *)(v58 + 85) = v64;
                *((_BYTE *)v58 + 728) = *((_BYTE *)v59 + 728);
                *((_OWORD *)v58 + 46) = *((_OWORD *)v59 + 46);
                v66 = *((_OWORD *)v59 + 49);
                v67 = *((_OWORD *)v59 + 47);
                *((_OWORD *)v58 + 48) = *((_OWORD *)v59 + 48);
                *((_OWORD *)v58 + 49) = v66;
                *((_OWORD *)v58 + 47) = v67;
                v68 = *((_OWORD *)v59 + 50);
                v69 = *((_OWORD *)v59 + 52);
                *((_OWORD *)v58 + 51) = *((_OWORD *)v59 + 51);
                *((_OWORD *)v58 + 52) = v69;
                *((_OWORD *)v58 + 50) = v68;
                v70 = v59[106];
                *((_BYTE *)v58 + 856) = *((_BYTE *)v59 + 856);
                v58[106] = v70;
                *((_OWORD *)v58 + 54) = *((_OWORD *)v59 + 54);
                *((_OWORD *)v59 + 54) = 0u;
                *((_BYTE *)v58 + 880) = *((_BYTE *)v59 + 880);
                v58 += 111;
                v59 += 111;
              }
              while (v59 < v45);
            }
            a1[13].i64[0] = (uint64_t)v58;
            if (v45 != v11 + 111)
            {
              do
              {
                v84 = v57 - 111;
                v85 = v45 - 111;
                *v85 = *(v57 - 111);
                *(_OWORD *)(v85 + 1) = *((_OWORD *)v57 - 55);
                memcpy(v45 - 108, v57 - 108, 0x120uLL);
                memcpy(v45 - 72, v57 - 72, 0x120uLL);
                v86 = *((_OWORD *)v57 - 12);
                v87 = *((_OWORD *)v57 - 11);
                v88 = *((_OWORD *)v57 - 13);
                *((_OWORD *)v45 - 14) = *((_OWORD *)v57 - 14);
                *((_OWORD *)v45 - 13) = v88;
                v89 = *((_OWORD *)v57 - 18);
                v90 = *((_OWORD *)v57 - 17);
                v91 = *((_OWORD *)v57 - 15);
                *((_OWORD *)v45 - 16) = *((_OWORD *)v57 - 16);
                *((_OWORD *)v45 - 15) = v91;
                *((_OWORD *)v45 - 18) = v89;
                *((_OWORD *)v45 - 17) = v90;
                *((_OWORD *)v45 - 12) = v86;
                *((_OWORD *)v45 - 11) = v87;
                *((_BYTE *)v45 - 160) = *((_BYTE *)v57 - 160);
                *(v45 - 19) = *(v57 - 19);
                *(v45 - 18) = *(v57 - 18);
                v92 = *(_OWORD *)(v57 - 13);
                v93 = *(_OWORD *)(v57 - 15);
                *(_OWORD *)(v45 - 17) = *(_OWORD *)(v57 - 17);
                *(_OWORD *)(v45 - 15) = v93;
                *(_OWORD *)(v45 - 13) = v92;
                v94 = *(_OWORD *)(v57 - 11);
                v95 = *(_OWORD *)(v57 - 9);
                *(_OWORD *)(v45 - 7) = *(_OWORD *)(v57 - 7);
                *(_OWORD *)(v45 - 9) = v95;
                *(_OWORD *)(v45 - 11) = v94;
                v96 = *(v57 - 5);
                *((_BYTE *)v45 - 32) = *((_BYTE *)v57 - 32);
                *(v45 - 5) = v96;
                v97 = *(_OWORD *)(v57 - 3);
                *(v57 - 3) = 0;
                *(v57 - 2) = 0;
                v98 = (std::__shared_weak_count *)*(v45 - 2);
                *(_OWORD *)(v45 - 3) = v97;
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
                *((_BYTE *)v45 - 8) = *((_BYTE *)v57 - 8);
                v45 -= 111;
                v57 -= 111;
              }
              while (v84 != v11);
            }
            *v11 = v9;
            v71 = &v177[888 * v176];
            *(_OWORD *)(v71 + 8) = v228;
            memcpy(v71 + 24, __dst, 0x120uLL);
            memcpy(v71 + 312, __src, 0x120uLL);
            v72 = v240;
            *(_OWORD *)(v71 + 664) = v239;
            *(_OWORD *)(v71 + 680) = v72;
            v73 = v242;
            *(_OWORD *)(v71 + 696) = v241;
            *(_OWORD *)(v71 + 712) = v73;
            v74 = v236;
            *(_OWORD *)(v71 + 600) = v235;
            *(_OWORD *)(v71 + 616) = v74;
            v75 = v238;
            *(_OWORD *)(v71 + 632) = v237;
            *(_OWORD *)(v71 + 648) = v75;
            v76 = v234;
            v77 = v232;
            *((_OWORD *)v71 + 48) = v233;
            *((_OWORD *)v71 + 49) = v76;
            v71[728] = v171;
            *((_OWORD *)v71 + 46) = v175;
            *((_OWORD *)v71 + 47) = v77;
            v78 = v231;
            v79 = v229;
            *((_OWORD *)v71 + 51) = v230;
            *((_OWORD *)v71 + 52) = v78;
            *((_OWORD *)v71 + 50) = v79;
            v71[856] = v227;
            *((_QWORD *)v71 + 106) = v226;
            *((_QWORD *)v71 + 108) = v172;
            v80 = (std::__shared_weak_count *)*((_QWORD *)v71 + 109);
            *((_QWORD *)v71 + 109) = v173;
            v48 = a1;
            v81 = v174;
            if (v80)
            {
              v82 = (unint64_t *)&v80->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
                v81 = v174;
              }
            }
            v177[888 * v176 + 880] = v81;
          }
        }
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
      }
      else
      {
        v48 = a1;
      }
      if (v47)
      {
        v168 = (unint64_t *)&v47->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          v170 = v47;
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      v48[17].i8[2] = 0;
      v48[17].i8[0] = 0;
      v48[16] = vaddq_s64(v48[16], (int64x2_t)xmmword_2103B2300);
      v17 = 1;
    }
    else
    {
      v17 = 0;
      --*(_DWORD *)(v37 + 8);
      --*(_DWORD *)(v44 + 8);
      v191 = 0uLL;
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
  if (*((_QWORD *)&v200 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v17;
}

void sub_20F7F449C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20F3E2ECC((uint64_t)&STACK[0x988]);
  sub_20F3C80B0((uint64_t)&STACK[0x3E8]);
  sub_20F3C8118((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7F44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20F3C80B0((uint64_t)&STACK[0x3E8]);
  sub_20F3C8118((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7F44DC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F7F486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7F4890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7F48A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

double *sub_20F7F48C8(uint64_t a1, double *a2, char a3)
{
  double *result;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;

  result = sub_20F7F5D08(a1, &v15, a2);
  if ((a3 & 1) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    v11 = 1.0;
    v12 = 1.0;
  }
  else
  {
    v12 = 1.0e20;
    v11 = 1.0e-10;
    v13 = 0x3DDB7CDFD9D7BDBBLL;
    v14 = 1.0e20;
    if (v15 > 0.0)
    {
      v13 = *(_QWORD *)&v15;
      v14 = 1.0 / (v15 * v15);
    }
    *(_QWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 16) = v14;
    if (v16 > 0.0)
    {
      v11 = v16;
      v12 = 1.0 / (v16 * v16);
    }
  }
  *(double *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 517) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  return result;
}

double *sub_20F7F4974(uint64_t a1, uint64_t a2, char a3)
{
  double *result;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;

  result = sub_20F7F5FDC(a1, &v15, a2);
  if ((a3 & 1) != 0)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    v11 = 1.0;
    v12 = 1.0;
  }
  else
  {
    v12 = 1.0e20;
    v11 = 1.0e-10;
    v13 = 0x3DDB7CDFD9D7BDBBLL;
    v14 = 1.0e20;
    if (v15 > 0.0)
    {
      v13 = *(_QWORD *)&v15;
      v14 = 1.0 / (v15 * v15);
    }
    *(_QWORD *)(a1 + 8) = v13;
    *(double *)(a1 + 16) = v14;
    if (v16 > 0.0)
    {
      v11 = v16;
      v12 = 1.0 / (v16 * v16);
    }
  }
  *(double *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 517) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  return result;
}

double sub_20F7F4A20(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double i;
  _OWORD *v29;
  _BOOL4 v30;
  uint64_t v31;
  __int128 v32;
  double v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  __int128 v46;
  double v47;
  uint64_t v48;
  float64x2_t v52;
  float64x2_t *v53;
  int8x16_t v57;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v73;
  uint64_t v74;
  double v75;
  double *v76;
  double v77;
  double v78;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;

  kdebug_trace();
  v4 = a2[66];
  if (v4 > 1)
    goto LABEL_9;
  if (a2[65] >= 2uLL)
  {
    v7 = (_QWORD *)a2[64];
  }
  else
  {
    a2[65] = 2;
    v5 = (_QWORD *)a2[64];
    v6 = (_QWORD *)operator new[]();
    v7 = v6;
    if (v4)
      *v6 = *v5;
    v8 = (_QWORD *)a2[64];
    if (v8 != a2 && v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    a2[64] = v7;
    v4 = a2[66];
    if (v4 > 1)
    {
LABEL_9:
      a2[66] = 2;
      if (*(_BYTE *)(a1 + 516))
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  bzero(&v7[v4], 16 - 8 * v4);
  a2[66] = 2;
  if (*(_BYTE *)(a1 + 516))
  {
LABEL_10:
    v10 = *(_QWORD *)(a1 + 240);
    v9 = *(_QWORD *)(a1 + 248);
    v11 = 0.0;
    v12 = 0.0;
    if (v10 == v9)
      goto LABEL_36;
    if (*(_BYTE *)(a1 + 515))
    {
      v13 = v9 - v10 - 888;
      if (v13 < 0x378)
      {
        v14 = *(_QWORD *)(a1 + 240);
        do
        {
LABEL_35:
          v12 = v12 + *(double *)(v14 + 848);
          v14 += 888;
        }
        while (v14 != v9);
        goto LABEL_36;
      }
      v62 = v13 / 0x378 + 1;
      v14 = v10 + 888 * (v62 & 0xFFFFFFFFFFFFFELL);
      v63 = v62 & 0xFFFFFFFFFFFFFELL;
      do
      {
        v12 = v12 + *(double *)(v10 + 848) + *(double *)(v10 + 1736);
        v10 += 1776;
        v63 -= 2;
      }
      while (v63);
      if (v62 != (v62 & 0xFFFFFFFFFFFFFELL))
        goto LABEL_35;
    }
    else
    {
      do
      {
        if (*(_BYTE *)(v10 + 856))
        {
          v15 = *(_OWORD *)(v10 + 768);
          *(_OWORD *)(v10 + 800) = *(_OWORD *)(v10 + 752);
          *(_OWORD *)(v10 + 816) = v15;
          _Q3 = *(_OWORD *)(v10 + 800);
          *(_OWORD *)(v10 + 832) = *(_OWORD *)(v10 + 784);
          _D6 = *((_QWORD *)&_Q3 + 1);
          __asm { FMLA            D5, D6, V3.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v10 + 824);
          __asm { FMLA            D5, D3, V4.D[1] }
          *(_QWORD *)&_Q3 = *(_QWORD *)(v10 + 840);
          __asm { FMLA            D5, D3, V1.D[1] }
          *(double *)&v15 = *(double *)(a1 + 16) * _D5;
          *(_QWORD *)(v10 + 848) = v15;
          v12 = v12 + *(double *)&v15;
        }
        v10 += 888;
      }
      while (v10 != v9);
    }
LABEL_36:
    v40 = (double *)a2[64];
    *v40 = v12 * 0.5;
    v65 = *(_QWORD *)(a1 + 264);
    v64 = *(_QWORD *)(a1 + 272);
    if (v65 != v64)
    {
      if (!*(_BYTE *)(a1 + 515))
      {
        v11 = 0.0;
        do
        {
          if (*(_BYTE *)(v65 + 608))
          {
            *(_QWORD *)(v65 + 592) = *(_QWORD *)(v65 + 552);
            v68 = *(_OWORD *)(v65 + 536);
            *(_OWORD *)(v65 + 560) = *(_OWORD *)(v65 + 520);
            *(_OWORD *)(v65 + 576) = v68;
            _Q4 = *(_OWORD *)(v65 + 560);
            _D6 = *(_QWORD *)(v65 + 568);
            __asm { FMLA            D5, D6, V4.D[1] }
            *(_QWORD *)&_Q4 = *(_QWORD *)(v65 + 584);
            __asm { FMLA            D5, D4, V3.D[1] }
            *(double *)&v68 = *(double *)(a1 + 32) * (_D5 + *(double *)(v65 + 592) * *(double *)(v65 + 592));
            *(_QWORD *)(v65 + 600) = v68;
            v11 = v11 + *(double *)&v68;
          }
          v65 += 640;
        }
        while (v65 != v64);
        v40 = (double *)a2[64];
        goto LABEL_49;
      }
      v66 = v64 - v65 - 640;
      v11 = 0.0;
      if (v66 >= 0x280)
      {
        v73 = v66 / 0x280 + 1;
        v67 = v65 + 640 * (v73 & 0xFFFFFFFFFFFFFELL);
        v74 = v73 & 0xFFFFFFFFFFFFFELL;
        do
        {
          v11 = v11 + *(double *)(v65 + 600) + *(double *)(v65 + 1240);
          v65 += 1280;
          v74 -= 2;
        }
        while (v74);
        if (v73 == (v73 & 0xFFFFFFFFFFFFFELL))
          goto LABEL_49;
      }
      else
      {
        v67 = *(_QWORD *)(a1 + 264);
      }
      do
      {
        v11 = v11 + *(double *)(v67 + 600);
        v67 += 640;
      }
      while (v67 != v64);
    }
LABEL_49:
    v27 = v11 * 0.5;
    goto LABEL_50;
  }
LABEL_19:
  v25 = *(_QWORD *)(a1 + 240);
  v26 = *(_QWORD *)(a1 + 248);
  v27 = 0.0;
  for (i = 0.0; v25 != v26; v25 += 888)
  {
    while (1)
    {
      v29 = (_OWORD *)(v25 + 800);
      v30 = sub_20F3E07E4(v25 + 8, (float64x2_t **)(v25 + 736), (float64x2_t *)(v25 + 800));
      *(_BYTE *)(v25 + 856) = v30;
      if (v30)
        break;
      *(_QWORD *)(v25 + 848) = 0;
      v25 += 888;
      if (v25 == v26)
        goto LABEL_26;
    }
    v31 = *(_QWORD *)(v25 + 864);
    if (v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 24))(v31, v25 + 800);
    v32 = *(_OWORD *)(v25 + 816);
    *(_OWORD *)(v25 + 752) = *v29;
    *(_OWORD *)(v25 + 768) = v32;
    _Q2 = *v29;
    _Q1 = *(_OWORD *)(v25 + 816);
    *(_OWORD *)(v25 + 784) = *(_OWORD *)(v25 + 832);
    _D4 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(_QWORD *)&_Q2 = *((_QWORD *)&_Q1 + 1);
    __asm { FMLA            D3, D2, V1.D[1] }
    *(_QWORD *)&_Q1 = *(_QWORD *)(v25 + 840);
    __asm { FMLA            D3, D1, V0.D[1] }
    v39 = *(double *)(a1 + 16) * _D3;
    *(double *)(v25 + 848) = v39;
    i = i + v39;
  }
LABEL_26:
  v40 = (double *)a2[64];
  *v40 = i * 0.5;
  v41 = *(_QWORD *)(a1 + 264);
  v42 = *(_QWORD *)(a1 + 272);
  if (v41 != v42)
  {
    v43 = v41 + 312;
    v44 = 0.0;
    do
    {
      sub_20F7F5754(v43 - 304, (int64x2_t **)(v43 + 176), (uint64_t)&v80);
      _Q7 = v81;
      _Q6 = v82;
      _Q16 = v80;
      v52 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v43 - 160), v80.f64[0]), *(float64x2_t *)(v43 - 120), v80, 1), *(float64x2_t *)(v43 - 80), v81.f64[0]), *(float64x2_t *)(v43 - 40), v81, 1), *(float64x2_t *)v43, v82.f64[0]), *(float64x2_t *)(v43 + 40), v82, 1);
      *(float64x2_t *)(v43 + 248) = v52;
      v53 = (float64x2_t *)(v43 + 248);
      _D3 = *(_QWORD *)(v43 - 88);
      _D18 = *(_QWORD *)(v43 - 8);
      _D22 = *(_QWORD *)(v43 + 72);
      v57 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v43 - 144), _Q16.f64[0]), *(float64x2_t *)(v43 - 104), _Q16, 1), *(float64x2_t *)(v43 - 64), _Q7.f64[0]), *(float64x2_t *)(v43 - 24), _Q7, 1), *(float64x2_t *)(v43 + 16), _Q6.f64[0]), *(float64x2_t *)(v43 + 56), _Q6, 1);
      __asm
      {
        FMLA            D2, D3, V16.D[1]
        FMLA            D2, D18, V7.D[1]
        FMLA            D2, D22, V6.D[1]
      }
      *(double *)(v43 + 280) = _D2;
      *(int8x16_t *)(v43 + 264) = v57;
      *(_BYTE *)(v43 + 296) = 1;
      v61 = *(_QWORD *)(v43 + 304);
      if (v61)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, v43 + 248);
        _D2 = *(double *)(v43 + 280);
        v52 = *v53;
        v57 = *(int8x16_t *)(v43 + 264);
      }
      v45 = *(double *)vextq_s8(v57, v57, 8uLL).i64;
      v46 = *(_OWORD *)(v43 + 264);
      *(float64x2_t *)(v43 + 208) = *v53;
      *(_OWORD *)(v43 + 224) = v46;
      *(_QWORD *)(v43 + 240) = *(_QWORD *)(v43 + 280);
      v52.f64[1] = *(double *)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).i64;
      v47 = *(double *)(a1 + 32)
          * (vmulq_f64(v52, v52).f64[0]
           + v52.f64[1] * v52.f64[1]
           + *(double *)v57.i64 * *(double *)v57.i64
           + v45 * v45
           + _D2 * _D2);
      *(double *)(v43 + 288) = v47;
      v44 = v44 + v47;
      v48 = v43 + 328;
      v43 += 640;
    }
    while (v48 != v42);
    v27 = v44 * 0.5;
    v40 = (double *)a2[64];
  }
LABEL_50:
  v40[1] = v27;
  *(_WORD *)(a1 + 515) = 257;
  v75 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v76 = (double *)a2[64];
  v77 = *v76;
  v78 = v76[1];
  kdebug_trace();
  return v75 + v77 + v78;
}

void sub_20F7F4FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F7F4FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F7F5008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F7F501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB42B8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

double *sub_20F7F5030(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  double *result;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD v14[64];
  double *v15;
  __int128 v16;
  uint64_t v17;

  v15 = (double *)v14;
  v16 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3)
     - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 7);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v16 = v6;
    v7 = (double *)operator new[]();
    if (v15 != (double *)v14 && v15)
      MEMORY[0x212BC6368]();
    v15 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v16 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v17 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v17, v14);
  }
  else
  {
    v17 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v17, v14);
  }
  if (*(_BYTE *)(a1 + 516))
  {
    v17 = a1 + 40;
    sub_20F7F527C((uint64_t)&v17, v14);
  }
  else
  {
    v17 = a1 + 40;
    sub_20F7F5468((uint64_t)&v17, v14);
  }
  v9 = *((_QWORD *)&v16 + 1);
  result = v15;
  if (!*((_QWORD *)&v16 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v16 + 1) = 0;
    if (result == (double *)v14)
      return result;
    goto LABEL_22;
  }
  v11 = *((_QWORD *)&v16 + 1) >> 1;
  sub_20E8FB210(v15, &v15[*((_QWORD *)&v16 + 1) >> 1], &v15[*((_QWORD *)&v16 + 1)]);
  result = v15;
  v12 = v15[v11];
  if ((v9 & 1) == 0)
  {
    v13 = v11 - 1;
    if (v13 != v9)
    {
      sub_20E8FB210(v15, &v15[v13], &v15[v9]);
      result = v15;
    }
    v12 = (v12 + result[v13]) * 0.5;
  }
  *a2 = v8 * sqrt(v12);
  *((_QWORD *)&v16 + 1) = 0;
  if (result != (double *)v14)
  {
LABEL_22:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F7F5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F7F527C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  double *v38;

  v4 = a2[66];
  v5 = v4
     - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0xCCCCCCCCCCCCCCCDLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
    if (v5 <= v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x3333333333333333
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  if (v28 != v27)
  {
    v29 = (__int128 *)(v28 + 520);
    do
    {
      if (*((_BYTE *)v29 + 88))
      {
        _Q2 = *v29;
        _D4 = *((_QWORD *)v29 + 1);
        __asm { FMLA            D3, D4, V2.D[1] }
        *(_QWORD *)&_Q2 = *((_QWORD *)v29 + 3);
        __asm { FMLA            D3, D2, V1.D[1] }
        *v26++ = _D3 + *((double *)v29 + 4) * *((double *)v29 + 4);
      }
      v30 = (uint64_t)v29 + 120;
      v29 += 40;
    }
    while (v30 != v27);
  }
  v38 = (double *)(v25 + 8 * v5);
  if (v26 != v38)
    a2[66] = v5 + ~((unint64_t)((char *)v38 - (char *)v26 - 8) >> 3);
}

void sub_20F7F5468(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v37;
  uint64_t v38;
  uint64_t v50;
  double *v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  char v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;

  v4 = a2[66];
  v5 = v4
     - 0x3333333333333333 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 < v5)
  {
    v7 = 2 * v6;
    if (v7 <= v5)
      v7 = v4
         - 0x3333333333333333
         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
    a2[65] = v7;
    v8 = a2[64];
    v9 = operator new[]();
    v10 = v9;
    if (v4)
    {
      v11 = 0;
      if (v4 < 4)
        goto LABEL_11;
      if ((unint64_t)(v9 - v8) < 0x20)
        goto LABEL_11;
      v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (_OWORD *)(v9 + 16);
      v13 = (__int128 *)(v8 + 16);
      v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v13;
        *(v12 - 1) = *(v13 - 1);
        *v12 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v4 != v11)
      {
LABEL_11:
        v16 = v4 - v11;
        v17 = 8 * v11;
        v18 = (uint64_t *)(v8 + 8 * v11);
        v19 = (_QWORD *)(v9 + v17);
        do
        {
          v20 = *v18++;
          *v19++ = v20;
          --v16;
        }
        while (v16);
      }
    }
    v21 = (_QWORD *)a2[64];
    if (v21 != a2 && v21 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v10;
    v23 = a2[66];
    v24 = v5 - v23;
    if (v5 <= v23)
      goto LABEL_22;
    goto LABEL_21;
  }
  v23 = a2[66];
  v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 232) - *(_QWORD *)(*(_QWORD *)a1 + 224)) >> 7);
  if (v5 > v4)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (double *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 224);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 232);
  if (v27 == v28)
    goto LABEL_31;
  v29 = v27 + 312;
  do
  {
    sub_20F7F5754(v29 - 304, (int64x2_t **)(v29 + 176), (uint64_t)&v61);
    _D3 = *(_QWORD *)(v29 - 88);
    _D17 = *(_QWORD *)(v29 - 8);
    _D23 = *(_QWORD *)(v29 + 72);
    _V27.D[1] = v62.f64[1];
    _V26.D[1] = v63.f64[1];
    _V28.D[1] = v61.f64[1];
    _Q0 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v29 - 160), v61.f64[0]), *(float64x2_t *)(v29 - 120), v61, 1), *(float64x2_t *)(v29 - 80), v62.f64[0]), *(float64x2_t *)(v29 - 40), v62, 1), *(float64x2_t *)v29, v63.f64[0]), *(float64x2_t *)(v29 + 40), v63, 1);
    _Q1 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v29 - 144), v61.f64[0]), *(float64x2_t *)(v29 - 104), v61, 1), *(float64x2_t *)(v29 - 64), v62.f64[0]), *(float64x2_t *)(v29 - 24), v62, 1), *(float64x2_t *)(v29 + 16), v63.f64[0]), *(float64x2_t *)(v29 + 56), v63, 1);
    __asm
    {
      FMLA            D2, D3, V28.D[1]
      FMLA            D2, D17, V27.D[1]
      FMLA            D2, D23, V26.D[1]
    }
    v57 = _Q0;
    v58 = _Q1;
    v59 = _D2;
    v60 = 1;
    v50 = *(_QWORD *)(v29 + 304);
    if (!v50)
    {
      _D4 = _Q0.f64[1];
      __asm { FMLA            D3, D4, V0.D[1] }
      _D0 = _Q1.f64[1];
      __asm { FMLA            D3, D0, V1.D[1] }
      v37 = _D3 + _D2 * _D2;
LABEL_25:
      *v26++ = v37;
      goto LABEL_26;
    }
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v50 + 24))(v50, &v57);
    if (v60)
    {
      _V2.D[1] = v57.f64[1];
      _D4 = v57.f64[1];
      __asm { FMLA            D3, D4, V2.D[1] }
      _D2 = v58.f64[1];
      __asm { FMLA            D3, D2, V1.D[1] }
      v37 = _D3 + v59 * v59;
      goto LABEL_25;
    }
LABEL_26:
    v38 = v29 + 328;
    v29 += 640;
  }
  while (v38 != v28);
  v25 = a2[64];
  v5 = a2[66];
LABEL_31:
  v56 = (double *)(v25 + 8 * v5);
  if (v26 != v56)
    a2[66] = v5 + ~((unint64_t)((char *)v56 - (char *)v26 - 8) >> 3);
}

float64x2_t sub_20F7F5754(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t v4;
  int64x2_t *v6;
  int64x2_t *v7;
  int64x2_t *v8;
  int64x2_t v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  float64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64_t v35;
  unint64_t v36;
  int8x16_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  unint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  double v98;
  float64x2_t v100;
  float64x2_t v102;
  int8x16_t v103;
  float64x2_t v106;
  int8x16_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  int8x16_t v116;
  double v117;
  int8x16_t v118;
  double v119;
  int8x16_t v120;
  unint64_t v121;
  double v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  float64x2_t v126;
  float64x2_t v127;
  unint64_t v128;
  float64x2_t v129;
  int8x16_t v130;
  int8x16_t v131;
  __int128 v132;
  float64x2_t v133;
  float64x2_t result;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  double v138;
  double v139;
  unint64_t v140;
  double v141;
  float64x2_t v142;
  float64_t v143;
  float64x2_t v144;
  float64x2_t v145;
  double v146;
  int8x16_t v147;
  double v148;
  int8x16_t v149;
  double v150;
  __int128 v151;
  uint64_t v152;

  v6 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  *(_QWORD *)&_Q4.f64[0] = (*a2)[3].i64[0];
  v10 = (*a2)[2];
  v11 = *(float64x2_t *)((char *)&(*a2)[3] + 8);
  _Q3 = (*a2)[5];
  v13 = (float64x2_t)vzip1q_s64(v10, (int64x2_t)v11);
  v14 = (float64x2_t)vzip2q_s64(v10, (int64x2_t)v11);
  *(_QWORD *)&_Q4.f64[1] = (*a2)[4].i64[1];
  *(_QWORD *)&v11.f64[0] = (*a2)[7].i64[1];
  v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, *(double *)&(*a2)[6].i64[1]), v14, *(float64x2_t *)((char *)&(*a2)[6] + 8), 1), _Q4, v11.f64[0]);
  _D5 = (*a2)[7].i64[0];
  __asm { FMLA            D7, D5, V3.D[1] }
  v4.f64[0] = _D7 + *(double *)(*a2)[6].i64 * v11.f64[0];
  v22 = (*a2)[5].i64[0];
  v23 = vextq_s8((int8x16_t)v14, (int8x16_t)vdupq_laneq_s64(_Q3, 1), 8uLL);
  *(_QWORD *)&v14.f64[1] = v23.i64[0];
  v24 = (*a2)[6].i64[0];
  __asm { FMOV            V0.2D, #1.0 }
  v26.f64[1] = _Q0.f64[1];
  *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vnegq_f64(v4);
  *(_QWORD *)&v11.f64[0] = v6[3].i64[0];
  v27 = v6[2];
  v28 = *(int64x2_t *)((char *)v6 + 56);
  _Q7 = v6[5];
  v30 = (float64x2_t)vzip1q_s64(v27, v28);
  v31 = (float64x2_t)vzip2q_s64(v27, v28);
  *(_QWORD *)&v11.f64[1] = v6[4].i64[1];
  *(_QWORD *)&v3.f64[0] = v6[7].i64[1];
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, *(double *)&v6[6].i64[1]), v31, *(float64x2_t *)((char *)&v6[6] + 8), 1), v11, v3.f64[0]);
  _D18 = v6[7].i64[0];
  __asm { FMLA            D27, D18, V7.D[1] }
  v3.f64[0] = _D27 + *(double *)v6[6].i64 * v3.f64[0];
  *(_QWORD *)&v35 = *(_OWORD *)&vnegq_f64(v3);
  v36 = v6[5].u64[0];
  v37 = vextq_s8((int8x16_t)v31, (int8x16_t)vdupq_laneq_s64(_Q7, 1), 8uLL);
  *(_QWORD *)&v31.f64[1] = v37.i64[0];
  _Q7.i64[0] = v6[6].i64[0];
  _Q0.f64[0] = v35;
  v38 = *(double *)v8[3].i64;
  v39 = (float64x2_t)v8[2];
  v40 = *(float64x2_t *)((char *)&v8[3] + 8);
  v41 = *(double *)v8[6].i64;
  _Q8 = (float64x2_t)v8[5];
  v43 = *(double *)&v8[7].i64[1];
  v44.f64[0] = v38;
  *(_QWORD *)&v44.f64[1] = v8[4].i64[1];
  v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v39, (int64x2_t)v40), *(double *)&v8[6].i64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v39, (int64x2_t)v40), *(float64x2_t *)((char *)&v8[6] + 8), 1), v44, v43);
  _D23 = v8[7].i64[0];
  __asm { FMLA            D28, D23, V8.D[1] }
  v44.f64[0] = _D28 + v41 * v43;
  v48 = vmlaq_n_f64(vmulq_n_f64(v13, v39.f64[0]), v14, v40.f64[0]);
  v49 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v22, v39.f64[0]), (float64x2_t)v23.u64[1], v40.f64[0]);
  v50 = vmlaq_laneq_f64(vmulq_laneq_f64(v13, v39, 1), v14, v40, 1);
  v51 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)(unint64_t)v22, v39, 1), (float64x2_t)v23.u64[1], v40, 1);
  v52 = vmulq_n_f64(v13, v38);
  v53 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)(unint64_t)v22, v38), (float64x2_t)v23.u64[1], v44.f64[1]);
  *(_QWORD *)&v54 = *(_OWORD *)&vnegq_f64(v45);
  v55 = vmlsq_laneq_f64(vmulq_n_f64(v13, v54), v14, v45, 1);
  v56 = *(double *)v7[3].i64;
  v57 = vmulq_n_f64((float64x2_t)(unint64_t)v22, v54);
  v58 = (float64x2_t)v7[2];
  v59 = vmlsq_laneq_f64(v57, (float64x2_t)v23.u64[1], v45, 1);
  v60 = *(double *)&v7[4].i64[1];
  v61 = *(float64x2_t *)((char *)&v7[3] + 8);
  v62 = vmlaq_n_f64(v48, _Q4, _Q8.f64[0]);
  v63 = vmlaq_n_f64(v49, (float64x2_t)(unint64_t)v24, _Q8.f64[0]);
  v64 = vmlaq_laneq_f64(v50, _Q4, _Q8, 1);
  v65 = vmlaq_laneq_f64(v51, (float64x2_t)(unint64_t)v24, _Q8, 1);
  _Q8 = (float64x2_t)v7[5];
  v67 = vmlaq_n_f64(vmlaq_n_f64(v52, v14, v44.f64[1]), _Q4, v41);
  v68 = vmlaq_n_f64(v53, (float64x2_t)(unint64_t)v24, v41);
  *(_QWORD *)&v14.f64[0] = v7[7].i64[1];
  v69 = vmlsq_lane_f64(v55, _Q4, v44.f64[0], 0);
  v70 = vmlsq_lane_f64(v59, (float64x2_t)(unint64_t)v24, v44.f64[0], 0);
  _Q24.f64[0] = v56;
  _Q24.f64[1] = v60;
  v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v58, (int64x2_t)v61), *(double *)&v7[6].i64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v58, (int64x2_t)v61), *(float64x2_t *)((char *)&v7[6] + 8), 1), _Q24, v14.f64[0]);
  *(_QWORD *)&_Q4.f64[0] = v7[7].i64[0];
  __asm { FMLA            D24, D4, V8.D[1] }
  *(_QWORD *)&_Q4.f64[0] = v7[6].i64[0];
  v44.f64[0] = _Q24.f64[0] + _Q4.f64[0] * v14.f64[0];
  v73 = (int64x2_t)vmlaq_f64(v63, (float64x2_t)0, v26);
  v74 = (int64x2_t)vmlaq_f64(v65, (float64x2_t)0, v26);
  *(_QWORD *)&v68.f64[0] = *(_OWORD *)&vmlaq_f64(v68, (float64x2_t)0, v26);
  v75 = vmlsq_f64(v62, (float64x2_t)0, v15);
  v76 = vmlsq_f64(v64, (float64x2_t)0, v15);
  _Q30 = vmlsq_f64(v67, (float64x2_t)0, v15);
  v78 = vsubq_f64(v69, v15);
  *(_QWORD *)&v79 = *(_OWORD *)&vsubq_f64(v70, v4);
  v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v56), v31, v60), v11, _Q4.f64[0]);
  v81 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v36, v56), (float64x2_t)v37.u64[1], v60), (float64x2_t)_Q7.u64[0], _Q4.f64[0]);
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vnegq_f64(v72);
  v82 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v30, v58.f64[0]), v31, v61.f64[0]), v11, _Q8.f64[0]), (float64x2_t)0, v32);
  v83 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v30, v58, 1), v31, v61, 1), v11, _Q8, 1), (float64x2_t)0, v32);
  v84 = vmlsq_f64(v80, (float64x2_t)0, v32);
  v85 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v30, _Q4.f64[0]), v31, v72, 1), v11, v44.f64[0], 0), v32);
  *(_QWORD *)&v30.f64[0] = *(_QWORD *)&v78.f64[0] ^ 0x8000000000000000;
  *(_QWORD *)&v79 ^= 0x8000000000000000;
  v86 = *(_QWORD *)&v78.f64[1] ^ 0x8000000000000000;
  v87 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v36, v58.f64[0]), (float64x2_t)v37.u64[1], v61.f64[0]), (float64x2_t)_Q7.u64[0], _Q8.f64[0]), (float64x2_t)0, _Q0);
  v88 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v36, v58, 1), (float64x2_t)v37.u64[1], v61, 1), (float64x2_t)_Q7.u64[0], _Q8, 1), (float64x2_t)0, _Q0);
  v89 = vmlaq_f64(v81, (float64x2_t)0, _Q0);
  _Q7 = vaddq_f64(_Q0, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v36, _Q4.f64[0]), (float64x2_t)v37.u64[1], v72, 1), (float64x2_t)_Q7.u64[0], v44.f64[0], 0));
  _Q16 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v75, (int64x2_t)v76), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v30.f64[0])), (float64x2_t)vdupq_n_s64(v86), (float64x2_t)vzip2q_s64((int64x2_t)v75, (int64x2_t)v76)), (float64x2_t)vdupq_n_s64(*(unint64_t *)&v79), (float64x2_t)vzip1q_s64(v73, v74));
  *(_QWORD *)&_Q0.f64[0] = v86;
  __asm { FMLA            D18, D0, V30.D[1] }
  v92 = vmlad_n_f64(_D18, v79, v68.f64[0]);
  v93 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v82, v75.f64[0]), v83, v76.f64[0]), v84, _Q30.f64[0]), (float64x2_t)0, v85);
  v94 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v75.f64[0]), v88, v76.f64[0]), v89, _Q30.f64[0]), (float64x2_t)0, _Q7);
  v95 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v82, v75, 1), v83, v76, 1), v84, _Q30, 1), (float64x2_t)0, v85);
  *(_QWORD *)&v96 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v87, v75, 1), v88, v76, 1), v89, _Q30, 1), (float64x2_t)0, _Q7);
  v97 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v82, *(double *)v73.i64), v83, *(double *)v74.i64), v84, v68.f64[0]), (float64x2_t)0, v85);
  *(_QWORD *)&v98 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, *(double *)v73.i64), v88, *(double *)v74.i64), v89, v68.f64[0]), (float64x2_t)0, _Q7);
  _Q17 = vaddq_f64(v85, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, _Q16.f64[0]), v83, _Q16, 1), v84, v92));
  v100 = vaddq_f64(_Q7, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87, _Q16.f64[0]), v88, _Q16, 1), v89, v92));
  _Q16.f64[0] = _Q17.f64[1];
  __asm { FMLA            D7, D16, V17.D[1] }
  _Q7.f64[0] = sqrt(vmlad_n_f64(_Q7.f64[0], v100.f64[0], v100.f64[0]));
  if (_Q7.f64[0] == 0.0)
    _Q7.f64[0] = 1.0;
  else
    _Q7.f64[0] = 1.0 / _Q7.f64[0];
  v102 = vmulq_f64(_Q7, v100);
  v144 = v102;
  v103 = (int8x16_t)vmulq_n_f64(_Q17, _Q7.f64[0]);
  v102.f64[0] = *(float64_t *)(a1 + 472);
  _Q18 = *(float64x2_t *)(a1 + 456);
  _D17 = vmuld_lane_f64(_Q7.f64[0], _Q17, 1);
  v100.f64[0] = _Q7.f64[0] * v100.f64[0];
  __asm { FMLA            D7, D17, V18.D[1] }
  v100.f64[0] = _Q7.f64[0] + v100.f64[0] * v102.f64[0];
  _Q7.f64[0] = 0.0;
  v106 = (float64x2_t)vcgtq_f64(_Q7, v100);
  v107 = vbslq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v106.f64[0], 0), (int8x16_t)vnegq_f64(_Q18), (int8x16_t)_Q18);
  *(int8x8_t *)&v106.f64[0] = vbsl_s8(*(int8x8_t *)&v106.f64[0], (int8x8_t)*(_OWORD *)&vnegq_f64(v102), *(int8x8_t *)&v102.f64[0]);
  v142 = v106;
  v143 = *(double *)v103.i64;
  v106.f64[0] = *(float64_t *)(a1 + 400);
  v108 = *(float64x2_t *)(a1 + 384);
  v109 = *(float64x2_t *)(a1 + 408);
  v110 = vmlaq_n_f64(vmulq_n_f64(v93, v108.f64[0]), v95, v109.f64[0]);
  v111 = vmlad_n_f64(vmuld_n_f64(v94.f64[0], v108.f64[0]), v109.f64[0], v96);
  v112 = vmlaq_laneq_f64(vmulq_laneq_f64(v93, v108, 1), v95, v109, 1);
  v113 = vmlad_n_f64(vmuld_lane_f64(v94.f64[0], v108, 1), *(double *)(a1 + 416), v96);
  v108.f64[0] = *(float64_t *)(a1 + 424);
  v114 = vmlaq_n_f64(vmulq_n_f64(v93, v106.f64[0]), v95, v108.f64[0]);
  v140 = vextq_s8(v103, v103, 8uLL).u64[0];
  v141 = *(double *)v107.i64;
  *(_QWORD *)&v139 = vextq_s8(v107, v107, 8uLL).u64[0];
  v115 = *(float64x2_t *)(a1 + 432);
  v116 = (int8x16_t)vmlaq_n_f64(v110, v97, v115.f64[0]);
  v117 = vmlad_n_f64(v111, v115.f64[0], v98);
  v118 = (int8x16_t)vmlaq_laneq_f64(v112, v97, v115, 1);
  v119 = vmlad_n_f64(v113, *(double *)(a1 + 440), v98);
  v115.f64[0] = *(float64_t *)(a1 + 448);
  v120 = (int8x16_t)vmlaq_n_f64(v114, v97, v115.f64[0]);
  v121 = vextq_s8(v116, v116, 8uLL).u64[0];
  v122 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v94, v106).f64[0], v108.f64[0], v96), v115.f64[0], v98);
  v123 = vextq_s8(v118, v118, 8uLL).u64[0];
  v124 = vextq_s8(v120, v120, 8uLL).u64[0];
  if (*(_BYTE *)(a1 + 136))
  {
    v146 = v117;
    v116.i64[1] = v121;
    v145 = (float64x2_t)v116;
    v148 = v119;
    v118.i64[1] = v123;
    v147 = v118;
    v150 = v122;
    v120.i64[1] = v124;
    v149 = v120;
    v152 = 0;
    v151 = 0uLL;
    sub_20E9733B8(&v145, (double *)&v151);
    v125 = v151;
    *(_QWORD *)(a3 + 16) = v152;
    *(_OWORD *)a3 = v125;
    v126.f64[0] = v141;
    v127 = v142;
    v128 = *(_QWORD *)&v139;
  }
  else
  {
    v146 = v117;
    *(_QWORD *)&v129.f64[0] = v116.i64[0];
    *(_QWORD *)&v129.f64[1] = v121;
    v145 = v129;
    v148 = v119;
    v130.i64[0] = v118.i64[0];
    v130.i64[1] = v123;
    v147 = v130;
    v150 = v122;
    v131.i64[0] = v120.i64[0];
    v131.i64[1] = v124;
    v149 = v131;
    v152 = 0;
    v151 = 0uLL;
    v135 = (float64x2_t)v116;
    v136 = (float64x2_t)v120;
    v137 = (float64x2_t)v118;
    v138 = v122;
    sub_20E9733B8(&v145, (double *)&v151);
    v132 = v151;
    *(_QWORD *)(a3 + 16) = v152;
    *(_OWORD *)a3 = v132;
    v127.f64[1] = v142.f64[1];
    v126 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v135, v141), v137, v139), v136, v142.f64[0]);
    v127.f64[0] = v117 * v141 + v119 * v139 + v138 * v142.f64[0];
    v128 = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u64[0];
  }
  *(_QWORD *)&v126.f64[1] = v128;
  v133.f64[0] = v143;
  *(_QWORD *)&v133.f64[1] = v140;
  result = vsubq_f64(v133, v126);
  *(float64x2_t *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 40) = *(_OWORD *)&vsubq_f64(v144, v127);
  return result;
}

double *sub_20F7F5D08(uint64_t a1, double *a2, double *a3)
{
  unint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double *result;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD v19[64];
  double *v20;
  __int128 v21;
  uint64_t v22;

  v20 = (double *)v19;
  v21 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3);
  if (v6 <= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 7))
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 7);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v21 = v6;
    v7 = (double *)operator new[]();
    if (v20 != (double *)v19 && v20)
      MEMORY[0x212BC6368]();
    v20 = v7;
  }
  v8 = *a3;
  *((_QWORD *)&v21 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v22 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v22, v19);
  }
  else
  {
    v22 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v22, v19);
  }
  v9 = *((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v10 = *((_QWORD *)&v21 + 1) >> 1;
    sub_20E8FB210(v20, &v20[*((_QWORD *)&v21 + 1) >> 1], &v20[*((_QWORD *)&v21 + 1)]);
    v11 = v20;
    v12 = v20[v10];
    if ((v9 & 1) == 0)
    {
      v13 = v10 - 1;
      if (v13 != v9)
      {
        sub_20E8FB210(v20, &v20[v13], &v20[v9]);
        v11 = v20;
      }
      v12 = (v12 + v11[v13]) * 0.5;
    }
    *a2 = v8 * sqrt(v12);
    *((_QWORD *)&v21 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
      goto LABEL_19;
  }
  else
  {
    *a2 = 1.0;
    *((_QWORD *)&v21 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
    {
LABEL_19:
      v22 = a1 + 40;
      sub_20F7F527C((uint64_t)&v22, v19);
      goto LABEL_22;
    }
  }
  v22 = a1 + 40;
  sub_20F7F5468((uint64_t)&v22, v19);
LABEL_22:
  v14 = *((_QWORD *)&v21 + 1);
  result = v20;
  if (!*((_QWORD *)&v21 + 1))
  {
    a2[1] = 1.0;
    *((_QWORD *)&v21 + 1) = 0;
    if (result == (double *)v19)
      return result;
    goto LABEL_30;
  }
  v16 = *((_QWORD *)&v21 + 1) >> 1;
  sub_20E8FB210(v20, &v20[*((_QWORD *)&v21 + 1) >> 1], &v20[*((_QWORD *)&v21 + 1)]);
  result = v20;
  v17 = v20[v16];
  if ((v14 & 1) == 0)
  {
    v18 = v16 - 1;
    if (v18 != v14)
    {
      sub_20E8FB210(v20, &v20[v18], &v20[v14]);
      result = v20;
    }
    v17 = (v17 + result[v18]) * 0.5;
  }
  a2[1] = v8 * sqrt(v17);
  *((_QWORD *)&v21 + 1) = 0;
  if (result != (double *)v19)
  {
LABEL_30:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F7F5FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double *sub_20F7F5FDC(uint64_t a1, double *a2, uint64_t a3)
{
  unint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double *result;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[64];
  double *v19;
  __int128 v20;
  uint64_t v21;

  v19 = (double *)v18;
  v20 = xmmword_210378040;
  v6 = 0xB195E8EFDB195E8FLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3);
  if (v6 <= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 7))
    v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 7);
  if (v6 >= 0x41)
  {
    if (v6 <= 0x80)
      v6 = 128;
    *(_QWORD *)&v20 = v6;
    v7 = (double *)operator new[]();
    if (v19 != (double *)v18 && v19)
      MEMORY[0x212BC6368]();
    v19 = v7;
  }
  *((_QWORD *)&v20 + 1) = 0;
  if (*(_BYTE *)(a1 + 516))
  {
    v21 = a1 + 40;
    sub_20F3E03A4((uint64_t)&v21, v18);
  }
  else
  {
    v21 = a1 + 40;
    sub_20F3E05A0((uint64_t)&v21, v18);
  }
  v8 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v9 = *((_QWORD *)&v20 + 1) >> 1;
    sub_20E8FB210(v19, &v19[*((_QWORD *)&v20 + 1) >> 1], &v19[*((_QWORD *)&v20 + 1)]);
    v10 = v19;
    v11 = v19[v9];
    if ((v8 & 1) == 0)
    {
      v12 = v9 - 1;
      if (v12 != v8)
      {
        sub_20E8FB210(v19, &v19[v12], &v19[v8]);
        v10 = v19;
      }
      v11 = (v11 + v10[v12]) * 0.5;
    }
    *a2 = sqrt(v11) * **(double **)a3;
    *((_QWORD *)&v20 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
      goto LABEL_19;
  }
  else
  {
    *a2 = 1.0;
    *((_QWORD *)&v20 + 1) = 0;
    if (*(_BYTE *)(a1 + 516))
    {
LABEL_19:
      v21 = a1 + 40;
      sub_20F7F527C((uint64_t)&v21, v18);
      goto LABEL_22;
    }
  }
  v21 = a1 + 40;
  sub_20F7F5468((uint64_t)&v21, v18);
LABEL_22:
  v13 = *((_QWORD *)&v20 + 1);
  result = v19;
  if (!*((_QWORD *)&v20 + 1))
  {
    a2[1] = 1.0;
    *((_QWORD *)&v20 + 1) = 0;
    if (result == (double *)v18)
      return result;
    goto LABEL_30;
  }
  v15 = *((_QWORD *)&v20 + 1) >> 1;
  sub_20E8FB210(v19, &v19[*((_QWORD *)&v20 + 1) >> 1], &v19[*((_QWORD *)&v20 + 1)]);
  result = v19;
  v16 = v19[v15];
  if ((v13 & 1) == 0)
  {
    v17 = v15 - 1;
    if (v17 != v13)
    {
      sub_20E8FB210(v19, &v19[v17], &v19[v13]);
      result = v19;
    }
    v16 = (v16 + result[v17]) * 0.5;
  }
  a2[1] = sqrt(v16) * *(double *)(*(_QWORD *)a3 + 8);
  *((_QWORD *)&v20 + 1) = 0;
  if (result != (double *)v18)
  {
LABEL_30:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F7F6288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F7F62C4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  if (*(_BYTE *)(result + 312))
    goto LABEL_2;
  v23 = *(_QWORD *)(result + 48);
  v24 = *(_QWORD *)(result + 56);
  if (v23 == v24)
  {
LABEL_25:
    v25 = *(_QWORD *)(result + 144);
    v26 = *(_QWORD *)(result + 152);
    if (v25 == v26)
    {
LABEL_2:
      v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(result + 272) - *(_QWORD *)(result + 264)) >> 7);
      goto LABEL_3;
    }
    while ((*(_BYTE *)(*(_QWORD *)(v25 + 8) + 4) & 6) == 0)
    {
      v25 += 16;
      if (v25 == v26)
        goto LABEL_2;
    }
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_25;
    }
  }
  v27 = *(_QWORD **)(result + 264);
  v28 = *(_QWORD **)(result + 272);
  if (v27 == v28)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v29 = 0;
    do
    {
      if ((*(_BYTE *)(v27[61] + 4) & 6) == 0
        && (*(_BYTE *)(v27[62] + 4) & 6) == 0
        && (*(_BYTE *)(v27[63] + 4) & 6) == 0
        && (*(_BYTE *)(v27[64] + 4) & 6) == 0)
      {
        v4 = ++v29;
      }
      v27 += 80;
    }
    while (v27 != v28);
  }
LABEL_3:
  *a3 += v4;
  v5 = a2[66];
  v6 = v5 + 1;
  v7 = a2[65];
  if (v5 + 1 <= v7)
  {
    v11 = a2[64];
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    a2[65] = v6;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_12;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_12;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_12:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v11;
    v5 = a2[66];
  }
  *(_QWORD *)(v11 + 8 * v5) = v4;
  ++a2[66];
  return result;
}

void sub_20F7F64E4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;

  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(_QWORD *)(a1 + 144);
    v9 = *(_QWORD *)(a1 + 152);
    if (v8 == v9)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(v11 + 4) & 6) == 0)
          v10 += *(unsigned __int8 *)(v11 + 20);
        v8 += 16;
      }
      while (v8 != v9);
    }
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (v12 == v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 144);
    v16 = *(_QWORD *)(a1 + 152);
    if (v15 != v16)
      goto LABEL_13;
LABEL_40:
    v10 = 0;
    if (!v14)
      goto LABEL_20;
    goto LABEL_41;
  }
  v14 = 0;
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 4) & 6) != 0)
      v14 = 1;
    v12 += 16;
  }
  while (v12 != v13);
  v15 = *(_QWORD *)(a1 + 144);
  v16 = *(_QWORD *)(a1 + 152);
  if (v15 == v16)
    goto LABEL_40;
LABEL_13:
  v10 = 0;
  do
  {
    v17 = *(_QWORD *)(v15 + 8);
    if ((*(_BYTE *)(v17 + 4) & 6) != 0)
      v14 = 1;
    v10 += *(unsigned __int8 *)(v17 + 20);
    v15 += 16;
  }
  while (v15 != v16);
  if (v14)
  {
LABEL_41:
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
    v37 = *(_QWORD *)(a1 + 240);
    v38 = *(_QWORD *)(a1 + 248);
    while (v37 != v38)
    {
      v39 = *(_QWORD *)(v37 + 736);
      if (*(_BYTE *)(v37 + 880)
        || (*(_BYTE *)(v39 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v37 + 744) + 4) & 6) != 0)
      {
        sub_20F394A20(a1 + 464, v39);
        sub_20F394A20(a1 + 464, *(_QWORD *)(v37 + 744));
      }
      v37 += 888;
    }
    sub_20F7EE458(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), (_QWORD *)(a1 + 464));
    v40 = (uint64_t)(*(_QWORD *)(a1 + 496) - *(_QWORD *)(a1 + 488)) >> 2;
    if (v40 <= v10)
      v10 -= v40;
    else
      v10 = 0;
    v41 = *(_QWORD *)(a1 + 240);
    v42 = *(_QWORD *)(a1 + 248);
    while (v41 != v42)
    {
      v43 = *(_QWORD *)(v41 + 736);
      if (*(_BYTE *)(v41 + 880)
        || (*(_BYTE *)(v43 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v41 + 744) + 4) & 6) != 0)
      {
        ++*(_DWORD *)(v43 + 8);
        ++*(_DWORD *)(*(_QWORD *)(v41 + 744) + 8);
      }
      v41 += 888;
    }
    v44 = *(_QWORD *)(a1 + 264);
    for (i = *(_QWORD *)(a1 + 272); v44 != i; v44 += 640)
    {
      v46 = *(_QWORD *)(v44 + 488);
      if (*(_BYTE *)(v44 + 632)
        || (*(_BYTE *)(v46 + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v44 + 496) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v44 + 504) + 4) & 6) != 0
        || (*(_BYTE *)(*(_QWORD *)(v44 + 512) + 4) & 6) != 0)
      {
        ++*(_DWORD *)(v46 + 8);
        v47 = *(_QWORD *)(v44 + 504);
        ++*(_DWORD *)(*(_QWORD *)(v44 + 496) + 8);
        ++*(_DWORD *)(v47 + 8);
        ++*(_DWORD *)(*(_QWORD *)(v44 + 512) + 8);
      }
    }
  }
LABEL_20:
  *a3 += v10;
  *a4 += 6 * v10;
  v18 = a2[66];
  v19 = v18 + 1;
  v20 = a2[65];
  if (v18 + 1 <= v20)
  {
    v24 = a2[64];
  }
  else
  {
    v21 = 2 * v20;
    if (v21 > v19)
      v19 = v21;
    a2[65] = v19;
    v22 = a2[64];
    v23 = operator new[]();
    v24 = v23;
    if (v18)
    {
      v25 = 0;
      if (v18 < 4)
        goto LABEL_29;
      if ((unint64_t)(v23 - v22) < 0x20)
        goto LABEL_29;
      v25 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = (_OWORD *)(v23 + 16);
      v27 = (__int128 *)(v22 + 16);
      v28 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v18 != v25)
      {
LABEL_29:
        v30 = v18 - v25;
        v31 = 8 * v25;
        v32 = (uint64_t *)(v22 + 8 * v25);
        v33 = (_QWORD *)(v23 + v31);
        do
        {
          v34 = *v32++;
          *v33++ = v34;
          --v30;
        }
        while (v30);
      }
    }
    v35 = (_QWORD *)a2[64];
    if (v35 != a2 && v35 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v24;
    v18 = a2[66];
  }
  *(_QWORD *)(v24 + 8 * v18) = v10;
  ++a2[66];
}

void sub_20F7F6898(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[30];
  v3 = v1[31];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 736);
    if (*(_BYTE *)(v2 + 880) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 744) + 8);
    }
    v2 += 888;
  }
  v5 = v1[33];
  v6 = v1[34];
  while (v5 != v6)
  {
    v8 = *(_QWORD *)(v5 + 488);
    if (*(_BYTE *)(v5 + 632)
      || (*(_BYTE *)(v8 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 496) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 504) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 512) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v8 + 8);
      v7 = *(_QWORD *)(v5 + 504);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 496) + 8);
      ++*(_DWORD *)(v7 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 512) + 8);
    }
    v5 += 640;
  }
  _Unwind_Resume(a1);
}

void sub_20F7F6994(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 *v36;
  unint64_t v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 312))
  {
    if (v7 == v8)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v10 + 4) & 6) == 0)
          v9 += *(unsigned __int8 *)(v10 + 20);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  else
  {
    if (v7 == v8)
    {
      v12 = 0;
      v9 = 0;
    }
    else
    {
      v12 = 0;
      v9 = 0;
      do
      {
        v13 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v13 + 4) & 6) != 0)
          v12 = 1;
        v9 += *(unsigned __int8 *)(v13 + 20);
        v7 += 16;
      }
      while (v7 != v8);
    }
    v14 = *(_QWORD *)(a1 + 144);
    for (i = *(_QWORD *)(a1 + 152); v14 != i; v14 += 16)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 8) + 4) & 6) != 0)
        v12 = 1;
    }
    if (v12)
    {
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a1 + 464);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a1 + 488);
      v16 = *(_QWORD *)(a1 + 240);
      v17 = *(_QWORD *)(a1 + 248);
      while (v16 != v17)
      {
        v18 = *(_QWORD *)(v16 + 736);
        if (*(_BYTE *)(v16 + 880)
          || (*(_BYTE *)(v18 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 744) + 4) & 6) != 0)
        {
          sub_20F394A20(a1 + 464, v18);
          sub_20F394A20(a1 + 464, *(_QWORD *)(v16 + 744));
        }
        v16 += 888;
      }
      sub_20F7EE458(*(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), (_QWORD *)(a1 + 464));
      v19 = (uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 2;
      if (v19 <= v9)
        v9 -= v19;
      else
        v9 = 0;
      v20 = *(_QWORD *)(a1 + 240);
      v21 = *(_QWORD *)(a1 + 248);
      while (v20 != v21)
      {
        v22 = *(_QWORD *)(v20 + 736);
        if (*(_BYTE *)(v20 + 880)
          || (*(_BYTE *)(v22 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v20 + 744) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v22 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v20 + 744) + 8);
        }
        v20 += 888;
      }
      v23 = *(_QWORD *)(a1 + 264);
      for (j = *(_QWORD *)(a1 + 272); v23 != j; v23 += 640)
      {
        v25 = *(_QWORD *)(v23 + 488);
        if (*(_BYTE *)(v23 + 632)
          || (*(_BYTE *)(v25 + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v23 + 496) + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v23 + 504) + 4) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v23 + 512) + 4) & 6) != 0)
        {
          ++*(_DWORD *)(v25 + 8);
          v26 = *(_QWORD *)(v23 + 504);
          ++*(_DWORD *)(*(_QWORD *)(v23 + 496) + 8);
          ++*(_DWORD *)(v26 + 8);
          ++*(_DWORD *)(*(_QWORD *)(v23 + 512) + 8);
        }
      }
    }
  }
  *a3 += v9;
  *a4 += 4 * v9;
  v27 = a2[66];
  v28 = v27 + 1;
  v29 = a2[65];
  if (v27 + 1 <= v29)
  {
    v33 = a2[64];
  }
  else
  {
    v30 = 2 * v29;
    if (v30 > v28)
      v28 = v30;
    a2[65] = v28;
    v31 = a2[64];
    v32 = operator new[]();
    v33 = v32;
    if (v27)
    {
      v34 = 0;
      if (v27 < 4)
        goto LABEL_55;
      if ((unint64_t)(v32 - v31) < 0x20)
        goto LABEL_55;
      v34 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      v35 = (_OWORD *)(v32 + 16);
      v36 = (__int128 *)(v31 + 16);
      v37 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *v36;
        *(v35 - 1) = *(v36 - 1);
        *v35 = v38;
        v35 += 2;
        v36 += 2;
        v37 -= 4;
      }
      while (v37);
      if (v27 != v34)
      {
LABEL_55:
        v39 = v27 - v34;
        v40 = 8 * v34;
        v41 = (uint64_t *)(v31 + 8 * v34);
        v42 = (_QWORD *)(v32 + v40);
        do
        {
          v43 = *v41++;
          *v42++ = v43;
          --v39;
        }
        while (v39);
      }
    }
    v44 = (_QWORD *)a2[64];
    if (v44 != a2 && v44 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v33;
    v27 = a2[66];
  }
  *(_QWORD *)(v33 + 8 * v27) = v9;
  ++a2[66];
}

void sub_20F7F6D2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[30];
  v3 = v1[31];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 736);
    if (*(_BYTE *)(v2 + 880) || (*(_BYTE *)(v4 + 4) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v2 + 744) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v4 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v2 + 744) + 8);
    }
    v2 += 888;
  }
  v5 = v1[33];
  v6 = v1[34];
  while (v5 != v6)
  {
    v8 = *(_QWORD *)(v5 + 488);
    if (*(_BYTE *)(v5 + 632)
      || (*(_BYTE *)(v8 + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 496) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 504) + 4) & 6) != 0
      || (*(_BYTE *)(*(_QWORD *)(v5 + 512) + 4) & 6) != 0)
    {
      ++*(_DWORD *)(v8 + 8);
      v7 = *(_QWORD *)(v5 + 504);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 496) + 8);
      ++*(_DWORD *)(v7 + 8);
      ++*(_DWORD *)(*(_QWORD *)(v5 + 512) + 8);
    }
    v5 += 640;
  }
  _Unwind_Resume(a1);
}

void sub_20F7F6E28(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(v2 + 1160);
  v5 = (_QWORD *)(v2 + 1152);
  sub_20F3E1DF8(*a1, (_QWORD *)(v2 + 1160), (_QWORD *)(v2 + 1152));
  sub_20F7F62C4(v3, v4, v5);
  v7 = *a1;
  v6 = (_QWORD *)a1[1];
  v8 = v6 + 214;
  v9 = v6 + 212;
  v10 = v6 + 213;
  sub_20F7F6994(v7, v6 + 214, v6 + 212, v6 + 213);
  sub_20F7F64E4(v7, v8, v9, v10);
}

unint64_t sub_20F7F6EAC(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  unint64_t v19;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 32);
  if (v2 != v3)
  {
    v5 = *(_QWORD *)result;
    v4 = *(int8x8_t *)(result + 8);
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = *(_QWORD *)&v4 + 0xFFFFFFFFLL;
    v8 = *(_QWORD *)&v4 - 1;
    do
    {
      v11 = *(unsigned int *)(v2 + 24);
      if ((_DWORD)v11 != -1)
      {
        if (!*(_QWORD *)&v4)
          goto LABEL_9;
        if (v6.u32[0] > 1uLL)
        {
          v12 = *(unsigned int *)(v2 + 24);
          if (*(_QWORD *)&v4 <= v11)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v7 & v11;
        }
        v14 = *(uint64_t ***)(v5 + 8 * v12);
        if (v14)
        {
          v15 = *v14;
          if (v15)
          {
            if (v6.u32[0] < 2uLL)
            {
              while (1)
              {
                v16 = v15[1];
                if (v16 == v11)
                {
                  result = *((unsigned int *)v15 + 4);
                  if ((_DWORD)result == (_DWORD)v11)
                    goto LABEL_3;
                }
                else
                {
                  result = v16 & v8;
                  if (result != v12)
                    goto LABEL_4;
                }
                v15 = (uint64_t *)*v15;
                if (!v15)
                  goto LABEL_4;
              }
            }
            do
            {
              result = v15[1];
              if (result == v11)
              {
                result = *((unsigned int *)v15 + 4);
                if ((_DWORD)result == (_DWORD)v11)
                {
LABEL_3:
                  *(_DWORD *)(v2 + 24) = *((_DWORD *)v15 + 5);
                  break;
                }
              }
              else
              {
                if (result >= *(_QWORD *)&v4)
                  result %= *(_QWORD *)&v4;
                if (result != v12)
                  break;
              }
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_4:
      v9 = *(unsigned int *)(v2 + 48);
      if ((_DWORD)v9 != -1 && *(_QWORD *)&v4 != 0)
      {
        if (v6.u32[0] > 1uLL)
        {
          v13 = *(unsigned int *)(v2 + 48);
          if (*(_QWORD *)&v4 <= v9)
            v13 = v9 % *(_QWORD *)&v4;
        }
        else
        {
          v13 = v7 & v9;
        }
        v17 = *(uint64_t ***)(v5 + 8 * v13);
        if (v17)
        {
          v18 = *v17;
          if (v18)
          {
            if (v6.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v18[1];
                if (v19 == v9)
                {
                  result = *((unsigned int *)v18 + 4);
                  if ((_DWORD)result == (_DWORD)v9)
                    goto LABEL_52;
                }
                else
                {
                  result = v19 & v8;
                  if (result != v13)
                    goto LABEL_9;
                }
                v18 = (uint64_t *)*v18;
                if (!v18)
                  goto LABEL_9;
              }
            }
            do
            {
              result = v18[1];
              if (result == v9)
              {
                result = *((unsigned int *)v18 + 4);
                if ((_DWORD)result == (_DWORD)v9)
                {
LABEL_52:
                  *(_DWORD *)(v2 + 48) = *((_DWORD *)v18 + 5);
                  break;
                }
              }
              else
              {
                if (result >= *(_QWORD *)&v4)
                  result %= *(_QWORD *)&v4;
                if (result != v13)
                  break;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
        }
      }
LABEL_9:
      v2 += 480;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_20F7F7078(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t *v34;
  unsigned int v35;
  __guard *v36;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  double v40;
  double v41;
  double v42;

  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v5 = 0;
    v6 = a2 + 88;
    while (1)
    {
      v37 = 3;
      v38 = v3 + 5;
      v39 = 0;
      v41 = 0.0;
      v42 = 0.0;
      v40 = 0.0;
      sub_20F053450(&v37, &v40);
      v8 = v40;
      v7 = v41;
      v9 = v42;
      switch(v5)
      {
        case 0:
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v10 = atomic_load((unsigned __int8 *)&qword_254A68D78);
            if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D78))
            {
              qword_254A69C28 = 0;
              qword_254A69C30 = 0;
              qword_254A69C38 = 0;
              sub_20EAC040C((char **)&qword_254A69C28, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69C28);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69C28, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68D78);
            }
            v11 = qword_254A69C28 + 2904;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69C28 + 2904), v8);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v11, v8);
          }
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v25 = atomic_load((unsigned __int8 *)&qword_254A68D80);
            if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D80))
            {
              qword_254A69C40 = 0;
              qword_254A69C48 = 0;
              qword_254A69C50 = 0;
              sub_20EAC040C((char **)&qword_254A69C40, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69C40);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69C40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68D80);
            }
            v26 = qword_254A69C40 + 2928;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69C40 + 2928), v7);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v26, v7);
          }
          if (!*(_BYTE *)(a2 + 80)
            && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
          {
            goto LABEL_121;
          }
          v29 = atomic_load((unsigned __int8 *)&qword_254A68D88);
          if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D88))
          {
            qword_254A69C58 = 0;
            qword_254A69C60 = 0;
            qword_254A69C68 = 0;
            sub_20EAC040C((char **)&qword_254A69C58, 0x147uLL);
            sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69C58);
            v34 = &qword_254A69C58;
            v36 = &qword_254A68D88;
            v35 = 123;
            goto LABEL_159;
          }
          v21 = (unsigned __int8 *)(qword_254A69C58 + 2952);
          if (*(_BYTE *)(a2 + 80))
            goto LABEL_116;
          goto LABEL_117;
        case 1:
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v16 = atomic_load((unsigned __int8 *)&qword_254A68D90);
            if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D90))
            {
              qword_254A69C70 = 0;
              qword_254A69C78 = 0;
              qword_254A69C80 = 0;
              sub_20EAC040C((char **)&qword_254A69C70, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69C70);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69C70, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68D90);
            }
            v17 = qword_254A69C70 + 2976;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69C70 + 2976), v8);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v17, v8);
          }
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v27 = atomic_load((unsigned __int8 *)&qword_254A68D98);
            if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D98))
            {
              qword_254A69C88 = 0;
              qword_254A69C90 = 0;
              qword_254A69C98 = 0;
              sub_20EAC040C((char **)&qword_254A69C88, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69C88);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69C88, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68D98);
            }
            v28 = qword_254A69C88 + 3000;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69C88 + 3000), v7);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v28, v7);
          }
          if (!*(_BYTE *)(a2 + 80)
            && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
          {
            goto LABEL_121;
          }
          v30 = atomic_load((unsigned __int8 *)&qword_254A68DA0);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DA0))
          {
            qword_254A69CA0 = 0;
            qword_254A69CA8 = 0;
            qword_254A69CB0 = 0;
            sub_20EAC040C((char **)&qword_254A69CA0, 0x147uLL);
            sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69CA0);
            v34 = &qword_254A69CA0;
            v36 = &qword_254A68DA0;
            v35 = 126;
            goto LABEL_159;
          }
          v21 = (unsigned __int8 *)(qword_254A69CA0 + 3024);
          if (!*(_BYTE *)(a2 + 80))
            goto LABEL_117;
          goto LABEL_116;
        case 2:
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v12 = atomic_load((unsigned __int8 *)&qword_254A68DA8);
            if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DA8))
            {
              qword_254A69CB8 = 0;
              qword_254A69CC0 = 0;
              qword_254A69CC8 = 0;
              sub_20EAC040C((char **)&qword_254A69CB8, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69CB8);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69CB8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68DA8);
            }
            v13 = qword_254A69CB8 + 3048;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69CB8 + 3048), v8);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v13, v8);
          }
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v18 = atomic_load((unsigned __int8 *)&qword_254A68DB0);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DB0))
            {
              qword_254A69CD0 = 0;
              qword_254A69CD8 = 0;
              qword_254A69CE0 = 0;
              sub_20EAC040C((char **)&qword_254A69CD0, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69CD0);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69CD0, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68DB0);
            }
            v19 = qword_254A69CD0 + 3072;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69CD0 + 3072), v7);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v19, v7);
          }
          if (!*(_BYTE *)(a2 + 80)
            && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
          {
            goto LABEL_121;
          }
          v20 = atomic_load((unsigned __int8 *)&qword_254A68DB8);
          if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DB8))
          {
            qword_254A69CE8 = 0;
            qword_254A69CF0 = 0;
            qword_254A69CF8 = 0;
            sub_20EAC040C((char **)&qword_254A69CE8, 0x147uLL);
            sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69CE8);
            v34 = &qword_254A69CE8;
            v36 = &qword_254A68DB8;
            v35 = 129;
            goto LABEL_159;
          }
          v21 = (unsigned __int8 *)(qword_254A69CE8 + 3096);
          if (*(_BYTE *)(a2 + 80))
            goto LABEL_116;
          goto LABEL_117;
        case 3:
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v14 = atomic_load((unsigned __int8 *)&qword_254A68DC0);
            if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DC0))
            {
              qword_254A69D00 = 0;
              qword_254A69D08 = 0;
              qword_254A69D10 = 0;
              sub_20EAC040C((char **)&qword_254A69D00, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69D00);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D00, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68DC0);
            }
            v15 = qword_254A69D00 + 3120;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69D00 + 3120), v8);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v15, v8);
          }
          if (*(_BYTE *)(a2 + 80)
            || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
          {
            v22 = atomic_load((unsigned __int8 *)&qword_254A68DC8);
            if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DC8))
            {
              qword_254A69D18 = 0;
              qword_254A69D20 = 0;
              qword_254A69D28 = 0;
              sub_20EAC040C((char **)&qword_254A69D18, 0x147uLL);
              sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69D18);
              __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D18, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68DC8);
            }
            v23 = qword_254A69D18 + 3144;
            if (*(_BYTE *)(a2 + 80))
              sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69D18 + 3144), v7);
            if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
              sub_210214860(v6, v23, v7);
          }
          if (!*(_BYTE *)(a2 + 80)
            && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
          {
            goto LABEL_121;
          }
          v24 = atomic_load((unsigned __int8 *)&qword_254A68DD0);
          if ((v24 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68DD0))
          {
            v21 = (unsigned __int8 *)(qword_254A69D30 + 3168);
            if (!*(_BYTE *)(a2 + 80))
              goto LABEL_117;
LABEL_116:
            sub_20FDBBC20(a2, v21, v9);
            goto LABEL_117;
          }
          qword_254A69D30 = 0;
          qword_254A69D38 = 0;
          qword_254A69D40 = 0;
          sub_20EAC040C((char **)&qword_254A69D30, 0x147uLL);
          sub_20F053F1C((uint64_t)&v40, (uint64_t)&v37, &qword_254A69D30);
          v34 = &qword_254A69D30;
          v36 = &qword_254A68DD0;
          v35 = 132;
LABEL_159:
          __cxa_atexit((void (*)(void *))sub_20E89FB98, v34, &dword_20E81F000);
          __cxa_guard_release(v36);
          v21 = (unsigned __int8 *)(*v34 + 24 * v35);
          if (*(_BYTE *)(a2 + 80))
            goto LABEL_116;
LABEL_117:
          if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
            sub_210214860(v6, (uint64_t)v21, v9);
LABEL_121:
          v31 = (_QWORD *)v3[1];
          if (v31)
          {
            do
            {
              v32 = v31;
              v31 = (_QWORD *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (_QWORD *)v3[2];
              v33 = *v32 == (_QWORD)v3;
              v3 = v32;
            }
            while (!v33);
          }
          ++v5;
          v3 = v32;
          if (v32 == v2)
            return;
          break;
        default:
          return;
      }
    }
  }
}

void sub_20F7F7C28(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69C58;
  if (!qword_254A69C58)
  {
    __cxa_guard_abort(&qword_254A68D88);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69C60;
  v4 = (void *)qword_254A69C58;
  if (qword_254A69C60 != qword_254A69C58)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69C58;
  }
  qword_254A69C60 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68D88);
  _Unwind_Resume(a1);
}

void sub_20F7F7D38(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69C88;
  if (!qword_254A69C88)
  {
    __cxa_guard_abort(&qword_254A68D98);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69C90;
  v4 = (void *)qword_254A69C88;
  if (qword_254A69C90 != qword_254A69C88)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69C88;
  }
  qword_254A69C90 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68D98);
  _Unwind_Resume(a1);
}

void sub_20F7F7DC4(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69C40;
  if (!qword_254A69C40)
  {
    __cxa_guard_abort(&qword_254A68D80);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69C48;
  v4 = (void *)qword_254A69C40;
  if (qword_254A69C48 != qword_254A69C40)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69C40;
  }
  qword_254A69C48 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68D80);
  _Unwind_Resume(a1);
}

void sub_20F7F7E50(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69D30;
  if (!qword_254A69D30)
  {
    __cxa_guard_abort(&qword_254A68DD0);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69D38;
  v4 = (void *)qword_254A69D30;
  if (qword_254A69D38 != qword_254A69D30)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69D30;
  }
  qword_254A69D38 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DD0);
  _Unwind_Resume(a1);
}

void sub_20F7F7ED8(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69D18;
  if (!qword_254A69D18)
  {
    __cxa_guard_abort(&qword_254A68DC8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69D20;
  v4 = (void *)qword_254A69D18;
  if (qword_254A69D20 != qword_254A69D18)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69D18;
  }
  qword_254A69D20 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DC8);
  _Unwind_Resume(a1);
}

void sub_20F7F7F64(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69CE8;
  if (!qword_254A69CE8)
  {
    __cxa_guard_abort(&qword_254A68DB8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69CF0;
  v4 = (void *)qword_254A69CE8;
  if (qword_254A69CF0 != qword_254A69CE8)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69CE8;
  }
  qword_254A69CF0 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DB8);
  _Unwind_Resume(a1);
}

void sub_20F7F7FEC(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69CD0;
  if (!qword_254A69CD0)
  {
    __cxa_guard_abort(&qword_254A68DB0);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69CD8;
  v4 = (void *)qword_254A69CD0;
  if (qword_254A69CD8 != qword_254A69CD0)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69CD0;
  }
  qword_254A69CD8 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DB0);
  _Unwind_Resume(a1);
}

void sub_20F7F8078(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69C70;
  if (!qword_254A69C70)
  {
    __cxa_guard_abort(&qword_254A68D90);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69C78;
  v4 = (void *)qword_254A69C70;
  if (qword_254A69C78 != qword_254A69C70)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69C70;
  }
  qword_254A69C78 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68D90);
  _Unwind_Resume(a1);
}

void sub_20F7F8104(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69D00;
  if (!qword_254A69D00)
  {
    __cxa_guard_abort(&qword_254A68DC0);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69D08;
  v4 = (void *)qword_254A69D00;
  if (qword_254A69D08 != qword_254A69D00)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69D00;
  }
  qword_254A69D08 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DC0);
  _Unwind_Resume(a1);
}

void sub_20F7F8190(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69CB8;
  if (!qword_254A69CB8)
  {
    __cxa_guard_abort(&qword_254A68DA8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69CC0;
  v4 = (void *)qword_254A69CB8;
  if (qword_254A69CC0 != qword_254A69CB8)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69CB8;
  }
  qword_254A69CC0 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DA8);
  _Unwind_Resume(a1);
}

void sub_20F7F821C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69C28;
  if (!qword_254A69C28)
  {
    __cxa_guard_abort(&qword_254A68D78);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69C30;
  v4 = (void *)qword_254A69C28;
  if (qword_254A69C30 != qword_254A69C28)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69C28;
  }
  qword_254A69C30 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68D78);
  _Unwind_Resume(a1);
}

BOOL sub_20F7F82A8(uint64_t a1, int *a2)
{
  _BOOL8 v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v10;
  uint64_t v11;
  char v12;
  char v13;

  __p = 0;
  v10 = 0;
  v11 = 0;
  sub_20EAC040C((char **)&__p, 0x147uLL);
  sub_20F053F1C((uint64_t)&v13, (uint64_t)&v12, (uint64_t *)&__p);
  v4 = sub_210213844(a2, a1, (std::string **)&__p);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v10;
    v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v10 = v5;
    operator delete(v7);
  }
  return v4;
}

void sub_20F7F835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20F7F8370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

void sub_20F7F8384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  _Unwind_Resume(a1);
}

double sub_20F7F8398@<D0>(uint64_t a1@<X8>)
{
  char v3;
  char v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20EAC040C((char **)a1, 0x147uLL);
  return sub_20F053F1C((uint64_t)&v4, (uint64_t)&v3, (uint64_t *)a1);
}

void sub_20F7F83E0(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E89FB98(v1);
  _Unwind_Resume(a1);
}

void sub_20F7F83F4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20E89FB98(v1);
  _Unwind_Resume(a1);
}

void sub_20F7F8408(_DWORD *a1, uint64_t a2)
{
  double v2;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  double v36;
  uint64_t v37;
  char v38;
  char v39;

  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  LODWORD(v2) = *a1;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A68A90);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A90))
    {
      qword_254A69370 = 0;
      qword_254A69378 = 0;
      qword_254A69380 = 0;
      sub_20EAC040C((char **)&qword_254A69370, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69370);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69370, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68A90);
    }
    v2 = (double)*(unint64_t *)&v2;
    v6 = qword_254A69370 + 1080;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69370 + 1080), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v6, v2);
  }
  LODWORD(v2) = a1[1];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254A68A98);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A98))
    {
      qword_254A69388 = 0;
      qword_254A69390 = 0;
      qword_254A69398 = 0;
      sub_20EAC040C((char **)&qword_254A69388, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69388);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69388, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68A98);
    }
    v2 = (double)*(unint64_t *)&v2;
    v8 = qword_254A69388 + 1176;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69388 + 1176), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v8, v2);
  }
  LODWORD(v2) = a1[2];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68AA0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AA0))
    {
      qword_254A693A0 = 0;
      qword_254A693A8 = 0;
      qword_254A693B0 = 0;
      sub_20EAC040C((char **)&qword_254A693A0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A693A0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A693A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AA0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v10 = qword_254A693A0 + 1272;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A693A0 + 1272), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v10, v2);
  }
  LODWORD(v2) = a1[3];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68AA8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AA8))
    {
      qword_254A693B8 = 0;
      qword_254A693C0 = 0;
      qword_254A693C8 = 0;
      sub_20EAC040C((char **)&qword_254A693B8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A693B8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A693B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AA8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v12 = qword_254A693B8 + 1368;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A693B8 + 1368), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v2);
  }
  LODWORD(v2) = a1[4];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A68AB0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AB0))
    {
      qword_254A693D0 = 0;
      qword_254A693D8 = 0;
      qword_254A693E0 = 0;
      sub_20EAC040C((char **)&qword_254A693D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A693D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A693D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AB0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v14 = qword_254A693D0 + 1104;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A693D0 + 1104), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v14, v2);
  }
  LODWORD(v2) = a1[5];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A68AB8);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AB8))
    {
      qword_254A693E8 = 0;
      qword_254A693F0 = 0;
      qword_254A693F8 = 0;
      sub_20EAC040C((char **)&qword_254A693E8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A693E8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A693E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AB8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v16 = qword_254A693E8 + 1200;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A693E8 + 1200), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v16, v2);
  }
  LODWORD(v2) = a1[6];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v17 = atomic_load((unsigned __int8 *)&qword_254A68AC0);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AC0))
    {
      qword_254A69400 = 0;
      qword_254A69408 = 0;
      qword_254A69410 = 0;
      sub_20EAC040C((char **)&qword_254A69400, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69400);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69400, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AC0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v18 = qword_254A69400 + 1296;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69400 + 1296), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v18, v2);
  }
  LODWORD(v2) = a1[7];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v19 = atomic_load((unsigned __int8 *)&qword_254A68AC8);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AC8))
    {
      qword_254A69418 = 0;
      qword_254A69420 = 0;
      qword_254A69428 = 0;
      sub_20EAC040C((char **)&qword_254A69418, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69418);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69418, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AC8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v20 = qword_254A69418 + 1392;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69418 + 1392), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v20, v2);
  }
  LODWORD(v2) = a1[8];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v21 = atomic_load((unsigned __int8 *)&qword_254A68AD0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AD0))
    {
      qword_254A69430 = 0;
      qword_254A69438 = 0;
      qword_254A69440 = 0;
      sub_20EAC040C((char **)&qword_254A69430, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69430);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69430, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AD0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v22 = qword_254A69430 + 1128;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69430 + 1128), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v22, v2);
  }
  LODWORD(v2) = a1[9];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v23 = atomic_load((unsigned __int8 *)&qword_254A68AD8);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AD8))
    {
      qword_254A69448 = 0;
      qword_254A69450 = 0;
      qword_254A69458 = 0;
      sub_20EAC040C((char **)&qword_254A69448, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69448);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69448, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AD8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v24 = qword_254A69448 + 1224;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69448 + 1224), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v24, v2);
  }
  LODWORD(v2) = a1[10];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v25 = atomic_load((unsigned __int8 *)&qword_254A68AE0);
    if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AE0))
    {
      qword_254A69460 = 0;
      qword_254A69468 = 0;
      qword_254A69470 = 0;
      sub_20EAC040C((char **)&qword_254A69460, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69460);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69460, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AE0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v26 = qword_254A69460 + 1320;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69460 + 1320), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v26, v2);
  }
  LODWORD(v2) = a1[11];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v27 = atomic_load((unsigned __int8 *)&qword_254A68AE8);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AE8))
    {
      qword_254A69478 = 0;
      qword_254A69480 = 0;
      qword_254A69488 = 0;
      sub_20EAC040C((char **)&qword_254A69478, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69478);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69478, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AE8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v28 = qword_254A69478 + 1416;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69478 + 1416), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v28, v2);
  }
  LODWORD(v2) = a1[12];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v29 = atomic_load((unsigned __int8 *)&qword_254A68AF0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AF0))
    {
      qword_254A69490 = 0;
      qword_254A69498 = 0;
      qword_254A694A0 = 0;
      sub_20EAC040C((char **)&qword_254A69490, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A69490);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69490, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AF0);
    }
    v2 = (double)*(unint64_t *)&v2;
    v30 = qword_254A69490 + 1152;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69490 + 1152), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v30, v2);
  }
  LODWORD(v2) = a1[13];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v31 = atomic_load((unsigned __int8 *)&qword_254A68AF8);
    if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A68AF8))
    {
      qword_254A694A8 = 0;
      qword_254A694B0 = 0;
      qword_254A694B8 = 0;
      sub_20EAC040C((char **)&qword_254A694A8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A694A8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A694A8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68AF8);
    }
    v2 = (double)*(unint64_t *)&v2;
    v32 = qword_254A694A8 + 1248;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A694A8 + 1248), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v32, v2);
  }
  LODWORD(v2) = a1[14];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v33 = atomic_load((unsigned __int8 *)&qword_254A68B00);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B00))
    {
      qword_254A694C0 = 0;
      qword_254A694C8 = 0;
      qword_254A694D0 = 0;
      sub_20EAC040C((char **)&qword_254A694C0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A694C0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A694C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B00);
    }
    v2 = (double)*(unint64_t *)&v2;
    v34 = qword_254A694C0 + 1344;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A694C0 + 1344), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v34, v2);
  }
  LODWORD(v2) = a1[15];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v35 = atomic_load((unsigned __int8 *)&qword_254A68B08);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B08))
    {
      qword_254A694D8 = 0;
      qword_254A694E0 = 0;
      qword_254A694E8 = 0;
      sub_20EAC040C((char **)&qword_254A694D8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A694D8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A694D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B08);
    }
    v36 = (double)*(unint64_t *)&v2;
    v37 = qword_254A694D8 + 1440;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A694D8 + 1440), v36);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v37, v36);
  }
}

void sub_20F7F9430(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[314];
  if (v3)
  {
    v4 = qword_254A694E0;
    v5 = (void *)v1[314];
    if (qword_254A694E0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A694D8;
    }
    v1[315] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7F99CC(_DWORD *a1, uint64_t a2)
{
  double v2;
  unsigned __int8 v5;
  uint64_t v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  double v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  kdebug_trace();
  LODWORD(v2) = *a1;
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A68B10);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B10))
    {
      qword_254A694F0 = 0;
      qword_254A694F8 = 0;
      qword_254A69500 = 0;
      sub_20EAC040C((char **)&qword_254A694F0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v16, (uint64_t)&v15, &qword_254A694F0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A694F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B10);
    }
    v2 = (double)*(unint64_t *)&v2;
    v6 = qword_254A694F0 + 1464;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A694F0 + 1464), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v6, v2);
  }
  LODWORD(v2) = a1[1];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68B18);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B18))
    {
      qword_254A69508 = 0;
      qword_254A69510 = 0;
      qword_254A69518 = 0;
      sub_20EAC040C((char **)&qword_254A69508, 0x147uLL);
      sub_20F053F1C((uint64_t)&v18, (uint64_t)&v17, &qword_254A69508);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69508, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B18);
    }
    v2 = (double)*(unint64_t *)&v2;
    v9 = qword_254A69508 + 1488;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69508 + 1488), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v2);
  }
  LODWORD(v2) = a1[2];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254A68B20);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B20))
    {
      qword_254A69520 = 0;
      qword_254A69528 = 0;
      qword_254A69530 = 0;
      sub_20EAC040C((char **)&qword_254A69520, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A69520);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69520, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B20);
    }
    v2 = (double)*(unint64_t *)&v2;
    v11 = qword_254A69520 + 1512;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69520 + 1512), v2);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v11, v2);
  }
  LODWORD(v2) = a1[3];
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A68B28);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B28))
    {
      qword_254A69538 = 0;
      qword_254A69540 = 0;
      qword_254A69548 = 0;
      sub_20EAC040C((char **)&qword_254A69538, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)&v21, &qword_254A69538);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69538, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B28);
    }
    v13 = (double)*(unint64_t *)&v2;
    v14 = qword_254A69538 + 1536;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69538 + 1536), v13);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v14, v13);
  }
}

void sub_20F7F9E20(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[322];
  if (v3)
  {
    v4 = qword_254A69540;
    v5 = (void *)v1[322];
    if (qword_254A69540 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69538;
    }
    v1[323] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7F9F94(unsigned int a1, unsigned int a2, uint64_t a3)
{
  double v4;
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v4 = (double)a1;
  v5 = (double)a2;
  kdebug_trace();
  if (*(_BYTE *)(a3 + 80)
    || (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
        !v8 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A68B30);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B30))
    {
      qword_254A69550 = 0;
      qword_254A69558 = 0;
      qword_254A69560 = 0;
      sub_20EAC040C((char **)&qword_254A69550, 0x147uLL);
      sub_20F053F1C((uint64_t)&v12, (uint64_t)&v11, &qword_254A69550);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69550, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B30);
    }
    v7 = qword_254A69550 + 1560;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69550 + 1560), v4);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v7, v4);
  }
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68B38);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B38))
    {
      qword_254A69568 = 0;
      qword_254A69570 = 0;
      qword_254A69578 = 0;
      sub_20EAC040C((char **)&qword_254A69568, 0x147uLL);
      sub_20F053F1C((uint64_t)&v14, (uint64_t)&v13, &qword_254A69568);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69568, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B38);
    }
    v10 = qword_254A69568 + 1584;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69568 + 1584), v5);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v10, v5);
  }
}

void sub_20F7FA1DC(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[326];
  if (v3)
  {
    v4 = qword_254A69570;
    v5 = (void *)v1[326];
    if (qword_254A69570 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69568;
    }
    v1[327] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7FA2A0(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;
  double v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_BYTE *)(a3 + 80)
    || (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
        !v8 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A68B40);
    if ((v5 & 1) == 0)
    {
      v11 = a1;
      v12 = __cxa_guard_acquire(&qword_254A68B40);
      a1 = v11;
      if (v12)
      {
        qword_254A69580 = 0;
        qword_254A69588 = 0;
        qword_254A69590 = 0;
        sub_20EAC040C((char **)&qword_254A69580, 0x147uLL);
        sub_20F053F1C((uint64_t)&v14, (uint64_t)&v13, &qword_254A69580);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69580, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68B40);
        a1 = v11;
      }
    }
    v6 = (double)a1;
    v7 = qword_254A69580 + 1608;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69580 + 1608), v6);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v7, v6);
  }
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68B48);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B48))
    {
      qword_254A69598 = 0;
      qword_254A695A0 = 0;
      qword_254A695A8 = 0;
      sub_20EAC040C((char **)&qword_254A69598, 0x147uLL);
      sub_20F053F1C((uint64_t)&v16, (uint64_t)&v15, &qword_254A69598);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69598, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B48);
    }
    v10 = qword_254A69598 + 1632;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69598 + 1632), (double)a2);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v10, (double)a2);
  }
}

void sub_20F7FA4E0(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[330];
  if (v3)
  {
    v4 = qword_254A695A0;
    v5 = (void *)v1[330];
    if (qword_254A695A0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69598;
    }
    v1[331] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7FA5A0(int a1, uint64_t a2)
{
  double v3;
  unsigned __int8 v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;

  v3 = (double)a1;
  kdebug_trace();
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v6 = *(_QWORD *)(a2 + 184) == 0) : (v6 = 1),
        !v6 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A54F28);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A54F28))
    {
      qword_254A54F10 = 0;
      qword_254A54F18 = 0;
      qword_254A54F20 = 0;
      sub_20EAC040C((char **)&qword_254A54F10, 0x147uLL);
      sub_20F053F1C((uint64_t)&v8, (uint64_t)&v7, &qword_254A54F10);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54F10, &dword_20E81F000);
      __cxa_guard_release(&qword_254A54F28);
    }
    v5 = qword_254A54F10 + 1656;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A54F10 + 1656), v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v5, v3);
  }
}

void sub_20F7FA6F0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54F10;
  if (qword_254A54F10)
  {
    v3 = qword_254A54F18;
    v4 = (void *)qword_254A54F10;
    if (qword_254A54F18 != qword_254A54F10)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54F10;
    }
    qword_254A54F18 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54F28);
  _Unwind_Resume(a1);
}

void sub_20F7FA760(int a1, uint64_t a2)
{
  double v3;
  unsigned __int8 v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;

  v3 = (double)a1;
  kdebug_trace();
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v6 = *(_QWORD *)(a2 + 184) == 0) : (v6 = 1),
        !v6 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A54F48);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A54F48))
    {
      qword_254A54F30 = 0;
      qword_254A54F38 = 0;
      qword_254A54F40 = 0;
      sub_20EAC040C((char **)&qword_254A54F30, 0x147uLL);
      sub_20F053F1C((uint64_t)&v8, (uint64_t)&v7, &qword_254A54F30);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54F30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A54F48);
    }
    v5 = qword_254A54F30 + 1680;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A54F30 + 1680), v3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v5, v3);
  }
}

void sub_20F7FA8B0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54F30;
  if (qword_254A54F30)
  {
    v3 = qword_254A54F38;
    v4 = (void *)qword_254A54F30;
    if (qword_254A54F38 != qword_254A54F30)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54F30;
    }
    qword_254A54F38 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54F48);
  _Unwind_Resume(a1);
}

void sub_20F7FA920(unsigned int a1, unsigned int a2, uint64_t a3)
{
  double v4;
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v4 = (double)a1;
  v5 = (double)a2;
  kdebug_trace();
  if (*(_BYTE *)(a3 + 80)
    || (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
        !v8 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A68B50);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B50))
    {
      qword_254A695B0 = 0;
      qword_254A695B8 = 0;
      qword_254A695C0 = 0;
      sub_20EAC040C((char **)&qword_254A695B0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v12, (uint64_t)&v11, &qword_254A695B0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A695B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B50);
    }
    v7 = qword_254A695B0 + 1704;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A695B0 + 1704), v4);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v7, v4);
  }
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68B58);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B58))
    {
      qword_254A695C8 = 0;
      qword_254A695D0 = 0;
      qword_254A695D8 = 0;
      sub_20EAC040C((char **)&qword_254A695C8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v14, (uint64_t)&v13, &qword_254A695C8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A695C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B58);
    }
    v10 = qword_254A695C8 + 1728;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A695C8 + 1728), v5);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v10, v5);
  }
}

void sub_20F7FAB68(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[334];
  if (v3)
  {
    v4 = qword_254A695D0;
    v5 = (void *)v1[334];
    if (qword_254A695D0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A695C8;
    }
    v1[335] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7FAC2C(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  _QWORD *v38;
  __uint64_t v39[2];
  uint64_t v40;
  void *v41;
  unsigned int v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  void *__p;
  char v53;
  uint64_t v54;

  v11 = (double)a1;
  v12 = (double)a2;
  v54 = *MEMORY[0x24BDAC8D0];
  v13 = (double)a5;
  kdebug_trace();
  v14 = (double)a3;
  v15 = (double)a4;
  kdebug_trace();
  v16 = atomic_load((unsigned __int8 *)&qword_254A68A70);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A70))
  {
    v38 = operator new(0x20uLL);
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = 0;
    *v38 = &off_24C9F8458;
    qword_254A69340 = (uint64_t)(v38 + 3);
    qword_254A69348 = (uint64_t)v38;
    dword_254A69350 = 2;
    __cxa_atexit((void (*)(void *))sub_20F09A968, &qword_254A69340, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68A70);
  }
  v17 = qword_254A69340;
  if (*(_BYTE *)(qword_254A69340 + 4) && *(int *)qword_254A69340 <= 0)
  {
    ++*(_DWORD *)qword_254A69340;
    goto LABEL_27;
  }
  *(_DWORD *)qword_254A69340 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = sub_210219C18();
  v19 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v20 = atomic_load(&qword_254A5A450);
  v21 = &xmmword_210385000;
  if (v20)
  {
    LODWORD(v40) = 67109632;
    HIDWORD(v40) = a1;
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = a2;
    HIWORD(v41) = 1024;
    v42 = a3;
    v22 = (char *)_os_log_send_and_compose_impl();
    v23 = strlen(v22);
    v39[0] = 0;
    pthread_threadid_np(0, v39);
    v24 = v39[0];
    timespec_get((timespec *)v39, 1);
    sub_210219E20(&v40, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v18 + 1), (__int128 *)(v18 + 5), "Map tracking. 2d->3D Matches Before Filter: %u, 2d->3D Matches:%u, Inlier Map Constraints:%u", 0x5CuLL, v22, v23, v24, v39);
    std::mutex::lock(&stru_254A5A410);
    v25 = qword_254A5A458;
    for (i = unk_254A5A460; v25 != i; v25 += 40)
    {
      v27 = *(_QWORD *)(v25 + 32);
      if (!v27)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v40);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v53 < 0)
    {
      operator delete(__p);
      v21 = &xmmword_210385000;
      if ((v51 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v49)
        {
LABEL_18:
          if (v46 && v45 < 0)
            operator delete(v44);
          if (v43 < 0)
            operator delete(v41);
          if (v22)
            free(v22);
          goto LABEL_25;
        }
LABEL_16:
        if (v48 < 0)
          operator delete(v47);
        goto LABEL_18;
      }
    }
    else
    {
      v21 = &xmmword_210385000;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_11;
    }
    operator delete(v50);
    if (!v49)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_25:
  if (os_signpost_enabled((os_log_t)*v18))
  {
    LODWORD(v40) = *((_QWORD *)v21 + 507);
    HIDWORD(v40) = a1;
    LOWORD(v41) = 1024;
    *(_DWORD *)((char *)&v41 + 2) = a2;
    HIWORD(v41) = 1024;
    v42 = a3;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_27:
  if (*(_BYTE *)(a6 + 80)
    || *(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
  {
    v28 = atomic_load((unsigned __int8 *)&qword_254A68B60);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B60))
    {
      qword_254A695E0 = 0;
      qword_254A695E8 = 0;
      qword_254A695F0 = 0;
      sub_20EAC040C((char **)&qword_254A695E0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v40, (uint64_t)v39, &qword_254A695E0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A695E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B60);
    }
    v29 = qword_254A695E0 + 792;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A695E0 + 792), v11);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v29, v11);
  }
  if (*(_BYTE *)(a6 + 80)
    || *(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_254A68B68);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B68))
    {
      qword_254A695F8 = 0;
      qword_254A69600 = 0;
      qword_254A69608 = 0;
      sub_20EAC040C((char **)&qword_254A695F8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v40, (uint64_t)v39, &qword_254A695F8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A695F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B68);
    }
    v31 = qword_254A695F8 + 816;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A695F8 + 816), v12);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v31, v12);
  }
  if (*(_BYTE *)(a6 + 80)
    || *(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
  {
    v32 = atomic_load((unsigned __int8 *)&qword_254A68B70);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B70))
    {
      qword_254A69610 = 0;
      qword_254A69618 = 0;
      qword_254A69620 = 0;
      sub_20EAC040C((char **)&qword_254A69610, 0x147uLL);
      sub_20F053F1C((uint64_t)&v40, (uint64_t)v39, &qword_254A69610);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69610, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B70);
    }
    v33 = qword_254A69610 + 408;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A69610 + 408), v14);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v33, v14);
  }
  if (*(_BYTE *)(a6 + 80)
    || *(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
  {
    v34 = atomic_load((unsigned __int8 *)&qword_254A68B78);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B78))
    {
      qword_254A69628 = 0;
      qword_254A69630 = 0;
      qword_254A69638 = 0;
      sub_20EAC040C((char **)&qword_254A69628, 0x147uLL);
      sub_20F053F1C((uint64_t)&v40, (uint64_t)v39, &qword_254A69628);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69628, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B78);
    }
    v35 = qword_254A69628 + 432;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A69628 + 432), v15);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v35, v15);
  }
  if (*(_BYTE *)(a6 + 80)
    || *(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
  {
    v36 = atomic_load((unsigned __int8 *)&qword_254A68B80);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B80))
    {
      qword_254A69640 = 0;
      qword_254A69648 = 0;
      qword_254A69650 = 0;
      sub_20EAC040C((char **)&qword_254A69640, 0x147uLL);
      sub_20F053F1C((uint64_t)&v40, (uint64_t)v39, &qword_254A69640);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69640, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B80);
    }
    v37 = qword_254A69640 + 768;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A69640 + 768), v13);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v37, v13);
  }
}

void sub_20F7FB4DC(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69640;
  if (qword_254A69640)
  {
    v3 = qword_254A69648;
    v4 = (void *)qword_254A69640;
    if (qword_254A69648 != qword_254A69640)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69640;
    }
    qword_254A69648 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68B80);
  _Unwind_Resume(a1);
}

void sub_20F7FB548(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69628;
  if (qword_254A69628)
  {
    v3 = qword_254A69630;
    v4 = (void *)qword_254A69628;
    if (qword_254A69630 != qword_254A69628)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69628;
    }
    qword_254A69630 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68B78);
  _Unwind_Resume(a1);
}

void sub_20F7FB5B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1552);
  if (v3)
  {
    v4 = qword_254A69618;
    v5 = *(void **)(v1 + 1552);
    if (qword_254A69618 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1552);
    }
    qword_254A69618 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68B70);
  _Unwind_Resume(a1);
}

void sub_20F7FB61C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1528);
  if (v3)
  {
    v4 = qword_254A69600;
    v5 = *(void **)(v1 + 1528);
    if (qword_254A69600 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1528);
    }
    qword_254A69600 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68B68);
  _Unwind_Resume(a1);
}

void sub_20F7FB684(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1504);
  if (v3)
  {
    v4 = qword_254A695E8;
    v5 = *(void **)(v1 + 1504);
    if (qword_254A695E8 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1504);
    }
    qword_254A695E8 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68B60);
  _Unwind_Resume(a1);
}

void sub_20F7FB6EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68A70);
  _Unwind_Resume(a1);
}

void sub_20F7FB704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F7FB7D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  void **v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  double v14;
  unsigned __int8 v15;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  uint64_t v19;
  double v20;
  unsigned __int8 v21;
  uint64_t v22;
  double v23;
  unsigned __int8 v24;
  uint64_t v25;
  double v26;
  unsigned __int8 v27;
  uint64_t v28;
  double v29;
  unsigned __int8 v30;
  uint64_t v31;
  double v32;
  unsigned __int8 v33;
  uint64_t v34;
  double v35;
  unsigned __int8 v36;
  uint64_t v37;
  double v38;
  unsigned __int8 v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  __uint64_t v43[2];
  int v44;
  _QWORD v45[3];
  char v46;
  void *v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  char v52;
  void *v53;
  char v54;
  void *__p;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 99))
    goto LABEL_29;
  v4 = sub_210219C18();
  sub_20FCCCE84((std::string *)(*(unsigned int *)(a1 + 93) | ((unint64_t)*(unsigned __int16 *)(a1 + 97) << 32)), (uint64_t)v41);
  if (v42 >= 0)
    v5 = v41;
  else
    v5 = (void **)v41[0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v44 = 136315138;
    v45[0] = v5;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v43[0] = 0;
    pthread_threadid_np(0, v43);
    v10 = v43[0];
    timespec_get((timespec *)v43, 1);
    sub_210219E20(&v44, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "REINIT:R:%s", 0xBuLL, v8, v9, v10, v43);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v44);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v56 < 0)
    {
      operator delete(__p);
      if ((v54 & 0x80000000) == 0)
      {
LABEL_12:
        if (!v52)
        {
LABEL_18:
          if (v49 && v48 < 0)
            operator delete(v47);
          if (v46 < 0)
            operator delete(*(void **)((char *)v45 + 4));
          if (v8)
            free(v8);
          goto LABEL_25;
        }
LABEL_16:
        if (v51 < 0)
          operator delete(v50);
        goto LABEL_18;
      }
    }
    else if ((v54 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v53);
    if (!v52)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_25:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    v44 = 136315138;
    v45[0] = v5;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (v42 < 0)
    operator delete(v41[0]);
LABEL_29:
  if (*(_BYTE *)(a1 + 8))
    v14 = *(double *)a1;
  else
    v14 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A68B88);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B88))
    {
      qword_254A69658 = 0;
      qword_254A69660 = 0;
      qword_254A69668 = 0;
      sub_20EAC040C((char **)&qword_254A69658, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A69658);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69658, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B88);
    }
    v16 = qword_254A69658 + 1752;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69658 + 1752), v14);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v16, v14);
  }
  if (*(_BYTE *)(a1 + 40))
    v17 = *(double *)(a1 + 32);
  else
    v17 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_254A68B90);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B90))
    {
      qword_254A69670 = 0;
      qword_254A69678 = 0;
      qword_254A69680 = 0;
      sub_20EAC040C((char **)&qword_254A69670, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A69670);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69670, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B90);
    }
    v19 = qword_254A69670 + 1776;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69670 + 1776), v17);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v19, v17);
  }
  if (*(_BYTE *)(a1 + 56))
    v20 = *(double *)(a1 + 48);
  else
    v20 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v21 = atomic_load((unsigned __int8 *)&qword_254A68B98);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A68B98))
    {
      qword_254A69688 = 0;
      qword_254A69690 = 0;
      qword_254A69698 = 0;
      sub_20EAC040C((char **)&qword_254A69688, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A69688);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69688, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68B98);
    }
    v22 = qword_254A69688 + 1800;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69688 + 1800), v20);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v22, v20);
  }
  if (*(_BYTE *)(a1 + 72))
    v23 = *(double *)(a1 + 64);
  else
    v23 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v24 = atomic_load((unsigned __int8 *)&qword_254A68BA0);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BA0))
    {
      qword_254A696A0 = 0;
      qword_254A696A8 = 0;
      qword_254A696B0 = 0;
      sub_20EAC040C((char **)&qword_254A696A0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A696A0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A696A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BA0);
    }
    v25 = qword_254A696A0 + 1824;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A696A0 + 1824), v23);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v25, v23);
  }
  if (*(_BYTE *)(a1 + 92))
    v26 = 1.0;
  else
    v26 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v27 = atomic_load((unsigned __int8 *)&qword_254A68BA8);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BA8))
    {
      qword_254A696B8 = 0;
      qword_254A696C0 = 0;
      qword_254A696C8 = 0;
      sub_20EAC040C((char **)&qword_254A696B8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A696B8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A696B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BA8);
    }
    v28 = qword_254A696B8 + 2016;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A696B8 + 2016), v26);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v28, v26);
  }
  if (*(_BYTE *)(a1 + 99))
    v29 = 1.0;
  else
    v29 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_254A68BB0);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BB0))
    {
      qword_254A696D0 = 0;
      qword_254A696D8 = 0;
      qword_254A696E0 = 0;
      sub_20EAC040C((char **)&qword_254A696D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A696D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A696D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BB0);
    }
    v31 = qword_254A696D0 + 2040;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A696D0 + 2040), v29);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v31, v29);
  }
  if (*(_BYTE *)(a1 + 100))
    v32 = 1.0;
  else
    v32 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v33 = atomic_load((unsigned __int8 *)&qword_254A68BB8);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BB8))
    {
      qword_254A696E8 = 0;
      qword_254A696F0 = 0;
      qword_254A696F8 = 0;
      sub_20EAC040C((char **)&qword_254A696E8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A696E8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A696E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BB8);
    }
    v34 = qword_254A696E8 + 2064;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A696E8 + 2064), v32);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v34, v32);
  }
  if (*(_BYTE *)(a1 + 101))
    v35 = 1.0;
  else
    v35 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v36 = atomic_load((unsigned __int8 *)&qword_254A68BC0);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BC0))
    {
      qword_254A69700 = 0;
      qword_254A69708 = 0;
      qword_254A69710 = 0;
      sub_20EAC040C((char **)&qword_254A69700, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A69700);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69700, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BC0);
    }
    v37 = qword_254A69700 + 2088;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69700 + 2088), v35);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v37, v35);
  }
  if (*(_BYTE *)(a1 + 112))
    v38 = 1.0;
  else
    v38 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v39 = atomic_load((unsigned __int8 *)&qword_254A68BC8);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BC8))
    {
      qword_254A69718 = 0;
      qword_254A69720 = 0;
      qword_254A69728 = 0;
      sub_20EAC040C((char **)&qword_254A69718, 0x147uLL);
      sub_20F053F1C((uint64_t)&v44, (uint64_t)v41, &qword_254A69718);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69718, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BC8);
    }
    v40 = qword_254A69718 + 7464;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69718 + 7464), v38);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v40, v38);
  }
}

void sub_20F7FC484(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69718;
  if (qword_254A69718)
  {
    v3 = qword_254A69720;
    v4 = (void *)qword_254A69718;
    if (qword_254A69720 != qword_254A69718)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69718;
    }
    qword_254A69720 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68BC8);
  _Unwind_Resume(a1);
}

void sub_20F7FC4F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1792);
  if (v3)
  {
    v4 = qword_254A69708;
    v5 = *(void **)(v1 + 1792);
    if (qword_254A69708 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1792);
    }
    qword_254A69708 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68BC0);
  _Unwind_Resume(a1);
}

void sub_20F7FC558(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1768);
  if (v3)
  {
    v4 = qword_254A696F0;
    v5 = *(void **)(v1 + 1768);
    if (qword_254A696F0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1768);
    }
    qword_254A696F0 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68BB8);
  _Unwind_Resume(a1);
}

void sub_20F7FC5C0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A696D0;
  if (qword_254A696D0)
  {
    v3 = qword_254A696D8;
    v4 = (void *)qword_254A696D0;
    if (qword_254A696D8 != qword_254A696D0)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A696D0;
    }
    qword_254A696D8 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68BB0);
  _Unwind_Resume(a1);
}

void sub_20F7FC62C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1720);
  if (v3)
  {
    v4 = qword_254A696C0;
    v5 = *(void **)(v1 + 1720);
    if (qword_254A696C0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1720);
    }
    qword_254A696C0 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68BA8);
  _Unwind_Resume(a1);
}

void sub_20F7FC694(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A696A0;
  if (qword_254A696A0)
  {
    v3 = qword_254A696A8;
    v4 = (void *)qword_254A696A0;
    if (qword_254A696A8 != qword_254A696A0)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A696A0;
    }
    qword_254A696A8 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68BA0);
  _Unwind_Resume(a1);
}

void sub_20F7FC700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1672);
  if (v3)
  {
    v4 = qword_254A69690;
    v5 = *(void **)(v1 + 1672);
    if (qword_254A69690 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1672);
    }
    qword_254A69690 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68B98);
  _Unwind_Resume(a1);
}

void sub_20F7FC768(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 1648);
  if (v3)
  {
    v4 = qword_254A69678;
    v5 = *(void **)(v1 + 1648);
    if (qword_254A69678 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 1648);
    }
    qword_254A69678 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68B90);
  _Unwind_Resume(a1);
}

void sub_20F7FC7D0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69658;
  if (qword_254A69658)
  {
    v3 = qword_254A69660;
    v4 = (void *)qword_254A69658;
    if (qword_254A69660 != qword_254A69658)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69658;
    }
    qword_254A69660 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68B88);
  _Unwind_Resume(a1);
}

void sub_20F7FC83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_20E96E218((uint64_t)&a22);
  if (v22)
    free(v22);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F7FC8A4(int a1, uint64_t a2)
{
  double v4;
  unsigned __int8 v5;
  uint64_t v6;
  BOOL v7;
  double v8;
  unsigned __int8 v9;
  uint64_t v10;
  double v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  kdebug_trace();
  if (a1)
    v4 = 0.0;
  else
    v4 = 1.0;
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A68BD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BD0))
    {
      qword_254A69730 = 0;
      qword_254A69738 = 0;
      qword_254A69740 = 0;
      sub_20EAC040C((char **)&qword_254A69730, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69730);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69730, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BD0);
    }
    v6 = qword_254A69730 + 1848;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69730 + 1848), v4);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v6, v4);
  }
  if (a1 == 1)
    v8 = 1.0;
  else
    v8 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68BD8);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BD8))
    {
      qword_254A69748 = 0;
      qword_254A69750 = 0;
      qword_254A69758 = 0;
      sub_20EAC040C((char **)&qword_254A69748, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69748);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69748, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BD8);
    }
    v10 = qword_254A69748 + 1872;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69748 + 1872), v8);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v10, v8);
  }
  if (a1 == 2)
    v11 = 1.0;
  else
    v11 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A68BE0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BE0))
    {
      qword_254A69760 = 0;
      qword_254A69768 = 0;
      qword_254A69770 = 0;
      sub_20EAC040C((char **)&qword_254A69760, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69760);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69760, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BE0);
    }
    v13 = qword_254A69760 + 1896;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69760 + 1896), v11);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v13, v11);
  }
}

void sub_20F7FCC08(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[368];
  if (v3)
  {
    v4 = qword_254A69768;
    v5 = (void *)v1[368];
    if (qword_254A69768 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69760;
    }
    v1[369] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7FCD24(_BYTE *a1, uint64_t a2)
{
  double v4;
  unsigned __int8 v5;
  uint64_t v6;
  BOOL v7;
  double v8;
  unsigned __int8 v9;
  uint64_t v10;
  double v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*a1)
    v4 = 0.0;
  else
    v4 = 1.0;
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_254A68BE8);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BE8))
    {
      qword_254A69778 = 0;
      qword_254A69780 = 0;
      qword_254A69788 = 0;
      sub_20EAC040C((char **)&qword_254A69778, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69778);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69778, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BE8);
    }
    v6 = qword_254A69778 + 1944;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69778 + 1944), v4);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v6, v4);
  }
  if (*a1 == 2)
    v8 = 1.0;
  else
    v8 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68BF0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BF0))
    {
      qword_254A69790 = 0;
      qword_254A69798 = 0;
      qword_254A697A0 = 0;
      sub_20EAC040C((char **)&qword_254A69790, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69790);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69790, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BF0);
    }
    v10 = qword_254A69790 + 1968;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69790 + 1968), v8);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v10, v8);
  }
  if (*a1 == 1)
    v11 = 1.0;
  else
    v11 = 0.0;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A68BF8);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A68BF8))
    {
      qword_254A697A8 = 0;
      qword_254A697B0 = 0;
      qword_254A697B8 = 0;
      sub_20EAC040C((char **)&qword_254A697A8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A697A8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A697A8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68BF8);
    }
    v13 = qword_254A697A8 + 1992;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A697A8 + 1992), v11);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v13, v11);
  }
}

void sub_20F7FD074(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[374];
  if (v3)
  {
    v4 = qword_254A697B0;
    v5 = (void *)v1[374];
    if (qword_254A697B0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A697A8;
    }
    v1[375] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F7FD18C(unsigned int a1, uint64_t a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned __int8 v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  __uint64_t v17[2];
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_24;
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v18[0] = 0x104000100;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v17[0] = 0;
    pthread_threadid_np(0, v17);
    v9 = v17[0];
    timespec_get((timespec *)v17, 1);
    sub_210219E20(v18, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "LargeCameraExtrinsicOffset:%d", 0x1DuLL, v7, v8, v9, v17);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v18);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_9:
        if (!v25)
        {
LABEL_15:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete((void *)v18[1]);
          if (v7)
            free(v7);
          goto LABEL_22;
        }
LABEL_13:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_15;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_22:
  if (os_signpost_enabled((os_log_t)*v4))
  {
    v18[0] = 0x104000100;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_24:
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v16 = *(_QWORD *)(a2 + 184) == 0) : (v16 = 1),
        !v16 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A68C00);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C00))
    {
      qword_254A697C0 = 0;
      qword_254A697C8 = 0;
      qword_254A697D0 = 0;
      sub_20EAC040C((char **)&qword_254A697C0, 0x147uLL);
      sub_20F053F1C((uint64_t)v18, (uint64_t)v17, &qword_254A697C0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A697C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C00);
    }
    v14 = (double)a1;
    v15 = qword_254A697C0 + 7200;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A697C0 + 7200), v14);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v15, v14);
  }
}

void sub_20F7FD560(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A697C0;
  if (qword_254A697C0)
  {
    v3 = qword_254A697C8;
    v4 = (void *)qword_254A697C0;
    if (qword_254A697C8 != qword_254A697C0)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A697C0;
    }
    qword_254A697C8 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68C00);
  _Unwind_Resume(a1);
}

void sub_20F7FD5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F7FD684(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unsigned __int8 v15;
  double v16;
  uint64_t v17;
  unsigned __int8 v18;
  double v19;
  uint64_t v20;
  __uint64_t v21[2];
  uint64_t v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  char v32;
  void *__p;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if ((a1 & 1) == 0 && !a2)
    goto LABEL_25;
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v22) = 67109376;
    HIDWORD(v22) = a1;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v21[0] = 0;
    pthread_threadid_np(0, v21);
    v11 = v21[0];
    timespec_get((timespec *)v21, 1);
    sub_210219E20(&v22, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "ICD:%d %d", 9uLL, v9, v10, v11, v21);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v22);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v34 < 0)
    {
      operator delete(__p);
      if ((v32 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v30)
        {
LABEL_16:
          if (v27 && v26 < 0)
            operator delete(v25);
          if (v24 < 0)
            operator delete(v23);
          if (v9)
            free(v9);
          goto LABEL_23;
        }
LABEL_14:
        if (v29 < 0)
          operator delete(v28);
        goto LABEL_16;
      }
    }
    else if ((v32 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v31);
    if (!v30)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LODWORD(v22) = 67109376;
    HIDWORD(v22) = a1;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_25:
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A68C08);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C08))
    {
      qword_254A697D8 = 0;
      qword_254A697E0 = 0;
      qword_254A697E8 = 0;
      sub_20EAC040C((char **)&qword_254A697D8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)v21, &qword_254A697D8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A697D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C08);
    }
    v16 = (double)a1;
    v17 = qword_254A697D8 + 7080;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A697D8 + 7080), v16);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v17, v16);
  }
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_254A68C10);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C10))
    {
      qword_254A697F0 = 0;
      qword_254A697F8 = 0;
      qword_254A69800 = 0;
      sub_20EAC040C((char **)&qword_254A697F0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)v21, &qword_254A697F0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A697F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C10);
    }
    v19 = (double)a2;
    v20 = qword_254A697F0 + 7128;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A697F0 + 7128), v19);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v20, v19);
  }
}

void sub_20F7FDB60(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A697F0;
  if (qword_254A697F0)
  {
    v3 = qword_254A697F8;
    v4 = (void *)qword_254A697F0;
    if (qword_254A697F8 != qword_254A697F0)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A697F0;
    }
    qword_254A697F8 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68C10);
  _Unwind_Resume(a1);
}

void sub_20F7FDBCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 2008);
  if (v3)
  {
    v4 = qword_254A697E0;
    v5 = *(void **)(v1 + 2008);
    if (qword_254A697E0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 2008);
    }
    qword_254A697E0 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68C08);
  _Unwind_Resume(a1);
}

void sub_20F7FDC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F7FDCEC(unsigned int a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned __int8 v62;
  double v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68[3];
  int v69;
  const char *v70;
  int v71;
  const char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *object;
  void *v79[2];
  __int128 v80;
  void *__p[2];
  unint64_t v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68A80);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A80))
    {
      sub_21021D3D8(v68);
      sub_20E8610C0(&object, "cv3d.vio");
      sub_20E8C4068(v68, (uint64_t)&object, &qword_254A68A78);
      if (SHIBYTE(v79[1]) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_254A68A80);
    }
    v75 = qword_254A68A78;
    if (**(int **)(qword_254A68A78 + 56) <= 3)
    {
      v5 = *(unsigned __int8 *)(qword_254A68A78 + 72);
      v6 = sub_20E8C31DC(qword_254A68A78, "OSLogSurrogateAppender", 1, 0);
      v7 = v6;
      if (v5 || v6 != 0)
      {
        v68[0] = &v75;
        v68[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
        v68[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
        v69 = 3;
        v70 = "unknown file";
        v71 = 291;
        v73 = 0;
        v74 = 0;
        v72 = "unknown function";
        v9 = *v68[0];
        v67 = *v68[0];
        if (*(char *)(*v68[0] + 39) < 0)
        {
          v11 = *(const char **)(v9 + 16);
          v10 = *(_QWORD *)(v9 + 24);
          v66 = *v68[0] + 16;
          v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v13 & 1) != 0)
            goto LABEL_12;
        }
        else
        {
          v10 = *(unsigned __int8 *)(*v68[0] + 39);
          v11 = (const char *)(*v68[0] + 16);
          v66 = (uint64_t)v11;
          v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v12 & 1) != 0)
            goto LABEL_12;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v80 && SHIBYTE(v79[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_12:
        if (byte_254A4A4F8[23] >= 0)
          v14 = byte_254A4A4F8;
        else
          v14 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v15 = byte_254A4A4F8[23];
        else
          v15 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v14, v11);
        v16 = v79;
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v15 >= 0x17)
        {
          v17 = v7;
          v18 = v11;
          v19 = v5;
          v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v20 = v15 | 7;
          v21 = v20 + 1;
          v16 = operator new(v20 + 1);
          v79[1] = (void *)v15;
          *(_QWORD *)&v80 = v21 | 0x8000000000000000;
          v79[0] = v16;
          v5 = v19;
          v11 = v18;
          v7 = v17;
        }
        else
        {
          BYTE7(v80) = v15;
          if (!v15)
          {
LABEL_26:
            *((_BYTE *)v16 + v15) = 0;
            BYTE8(v80) = 1;
            v22 = __p;
            if (v10 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v10 >= 0x17)
            {
              v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v10 | 7) != 0x17)
                v23 = v10 | 7;
              v24 = v23 + 1;
              v22 = operator new(v23 + 1);
              __p[1] = (void *)v10;
              v82 = v24 | 0x8000000000000000;
              __p[0] = v22;
            }
            else
            {
              HIBYTE(v82) = v10;
              if (!v10)
                goto LABEL_34;
            }
            memmove(v22, v11, v10);
LABEL_34:
            *((_BYTE *)v22 + v10) = 0;
            v83 = 1;
            v25 = object;
            if (SHIBYTE(v82) < 0)
              operator delete(__p[0]);
            if (BYTE8(v80) && SBYTE7(v80) < 0)
              operator delete(v79[0]);
            if (object)
              os_release(object);
            if (v7 && *(_QWORD *)(v7 + 24))
            {
              v26 = _os_log_pack_size();
              v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
              v28 = (std::__shared_weak_count *)operator new();
              v29 = v28;
              v28->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v28->__shared_weak_owners_ = 0;
              v28[1].__vftable = v27;
              object = v27;
              v79[0] = v27;
              v79[1] = v28;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
              v80 = 0uLL;
              __p[0] = 0;
              do
                v32 = __ldaxr(p_shared_owners);
              while (__stlxr(v32 - 1, p_shared_owners));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v29);
              }
              v33 = object;
              v34 = (_DWORD *)_os_log_pack_fill();
              *v34 = 67109120;
              v34[1] = 1;
              v35 = operator new();
              v36 = *(unsigned __int8 *)(v67 + 39);
              v37 = v66;
              if ((v36 & 0x80u) != 0)
              {
                v37 = *(_QWORD *)(v67 + 16);
                v36 = *(_QWORD *)(v67 + 24);
              }
              *(_QWORD *)v35 = v33;
              *(_OWORD *)(v35 + 8) = *(_OWORD *)v79;
              v79[0] = 0;
              v79[1] = 0;
              *(_OWORD *)(v35 + 24) = v80;
              v80 = 0uLL;
              *(_QWORD *)(v35 + 40) = v37;
              *(_QWORD *)(v35 + 48) = v36;
              *(_BYTE *)(v35 + 56) = 1;
              v76 = 0;
              v77 = v35;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v77);
              v38 = v77;
              v77 = 0;
              if (v38)
              {
                v39 = *(std::__shared_weak_count **)(v38 + 32);
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                v42 = *(std::__shared_weak_count **)(v38 + 16);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
                v45 = v76;
                v76 = 0;
                if (v45)
                {
                  v46 = *(std::__shared_weak_count **)(v45 + 32);
                  if (v46)
                  {
                    v47 = (unint64_t *)&v46->__shared_owners_;
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 - 1, v47));
                    if (!v48)
                    {
                      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                      std::__shared_weak_count::__release_weak(v46);
                    }
                  }
                  v49 = *(std::__shared_weak_count **)(v45 + 16);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
                }
              }
              v52 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
              if (*((_QWORD *)&v80 + 1))
              {
                v53 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                  std::__shared_weak_count::__release_weak(v52);
                }
              }
              v55 = (std::__shared_weak_count *)v79[1];
              if (v79[1])
              {
                v56 = (unint64_t *)((char *)v79[1] + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
            }
            else
            {
              os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
              object = (void *)0x104000100;
              v58 = (void *)_os_log_send_and_compose_impl();
              if (v58)
                free(v58);
            }
            if (v5)
            {
              sub_20E8C003C((uint64_t)v68, "ICDSV:%d", 1);
              sub_20E863570((uint64_t)v68);
            }
            sub_20E863570((uint64_t)v68);
            v59 = v74;
            if (v74)
            {
              v60 = (unint64_t *)&v74->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            goto LABEL_93;
          }
        }
        memmove(v16, v14, v15);
        goto LABEL_26;
      }
    }
  }
LABEL_93:
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v65 = *(_QWORD *)(a2 + 184) == 0) : (v65 = 1),
        !v65 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v62 = atomic_load((unsigned __int8 *)&qword_254A68C18);
    if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C18))
    {
      qword_254A69808 = 0;
      qword_254A69810 = 0;
      qword_254A69818 = 0;
      sub_20EAC040C((char **)&qword_254A69808, 0x147uLL);
      sub_20F053F1C((uint64_t)&object, (uint64_t)v68, &qword_254A69808);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69808, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C18);
    }
    v63 = (double)a1;
    v64 = qword_254A69808 + 7104;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69808 + 7104), v63);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v64, v63);
  }
}

void sub_20F7FE57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F7FE5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68A80);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68A80);
  _Unwind_Resume(a1);
}

void sub_20F7FE614(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69808;
  if (qword_254A69808)
  {
    v3 = qword_254A69810;
    v4 = (void *)qword_254A69808;
    if (qword_254A69810 != qword_254A69808)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69808;
    }
    qword_254A69810 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68C18);
  _Unwind_Resume(a1);
}

void sub_20F7FE680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7FE6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7FE6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F7FE6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F7FE770(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  __uint64_t v19[2];
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a1 & 1) == 0 && !a2)
    goto LABEL_25;
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v20) = 67109376;
    HIDWORD(v20) = a1;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v19[0] = 0;
    pthread_threadid_np(0, v19);
    v11 = v19[0];
    timespec_get((timespec *)v19, 1);
    sub_210219E20(&v20, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "VSDrift:%d,%d", 0xDuLL, v9, v10, v11, v19);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v20);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v32 < 0)
    {
      operator delete(__p);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v28)
        {
LABEL_16:
          if (v25 && v24 < 0)
            operator delete(v23);
          if (v22 < 0)
            operator delete(v21);
          if (v9)
            free(v9);
          goto LABEL_23;
        }
LABEL_14:
        if (v27 < 0)
          operator delete(v26);
        goto LABEL_16;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v29);
    if (!v28)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    LODWORD(v20) = 67109376;
    HIDWORD(v20) = a1;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_25:
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A68C20);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C20))
    {
      qword_254A69820 = 0;
      qword_254A69828 = 0;
      qword_254A69830 = 0;
      sub_20EAC040C((char **)&qword_254A69820, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)v19, &qword_254A69820);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69820, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C20);
    }
    v16 = qword_254A69820 + 7152;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69820 + 7152), (double)a2);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v16, (double)a2);
    v17 = atomic_load((unsigned __int8 *)&qword_254A68C28);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C28))
    {
      qword_254A69838 = 0;
      qword_254A69840 = 0;
      qword_254A69848 = 0;
      sub_20EAC040C((char **)&qword_254A69838, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)v19, &qword_254A69838);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69838, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C28);
    }
    v18 = qword_254A69838 + 7176;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69838 + 7176), (double)a1);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v18, (double)a1);
  }
}

void sub_20F7FEC24(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69838;
  if (qword_254A69838)
  {
    v3 = qword_254A69840;
    v4 = (void *)qword_254A69838;
    if (qword_254A69840 != qword_254A69838)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69838;
    }
    qword_254A69840 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68C28);
  _Unwind_Resume(a1);
}

void sub_20F7FEC90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 2080);
  if (v3)
  {
    v4 = qword_254A69828;
    v5 = *(void **)(v1 + 2080);
    if (qword_254A69828 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 2080);
    }
    qword_254A69828 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68C20);
  _Unwind_Resume(a1);
}

void sub_20F7FECF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F7FEDB0(unsigned int a1, uint64_t a2, double a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  double v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v5 = atomic_load((unsigned __int8 *)&qword_254A68C30);
  if ((v5 & 1) == 0)
  {
    v11 = a1;
    v12 = __cxa_guard_acquire(&qword_254A68C30);
    a1 = v11;
    if (v12)
    {
      qword_254A69850 = 0;
      qword_254A69858 = 0;
      qword_254A69860 = 0;
      sub_20EAC040C((char **)&qword_254A69850, 0x147uLL);
      sub_20F053F1C((uint64_t)&v14, (uint64_t)&v13, &qword_254A69850);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69850, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C30);
      a1 = v11;
    }
  }
  v6 = qword_254A69850 + 2112;
  v7 = (double)a1;
  if (*(_BYTE *)(a2 + 80))
    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69850 + 2112), v7);
  if (*(_BYTE *)(a2 + 200))
    v8 = *(_QWORD *)(a2 + 184) == 0;
  else
    v8 = 1;
  if (!v8 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
    sub_210214860(a2 + 88, v6, v7);
  v9 = atomic_load((unsigned __int8 *)&qword_254A68C38);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C38))
  {
    qword_254A69868 = 0;
    qword_254A69870 = 0;
    qword_254A69878 = 0;
    sub_20EAC040C((char **)&qword_254A69868, 0x147uLL);
    sub_20F053F1C((uint64_t)&v16, (uint64_t)&v15, &qword_254A69868);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69868, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C38);
  }
  v10 = qword_254A69868 + 2136;
  if (*(_BYTE *)(a2 + 80))
    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69868 + 2136), a3);
  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
    sub_210214860(a2 + 88, v10, a3);
}

void sub_20F7FEF88(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[390];
  if (v3)
  {
    v4 = qword_254A69870;
    v5 = (void *)v1[390];
    if (qword_254A69870 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69868;
    }
    v1[391] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point sub_20F7FF048(int a1, int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  _QWORD *v11;
  int v12;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  _QWORD *v24;
  __uint64_t v25[2];
  uint64_t v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a4 + 80))
  {
    if (a2)
    {
      v8 = atomic_load((unsigned __int8 *)&qword_254A68C40);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C40))
      {
        qword_254A69880 = 0;
        qword_254A69888 = 0;
        qword_254A69890 = 0;
        sub_20EAC040C((char **)&qword_254A69880, 0x147uLL);
        sub_20F053F1C((uint64_t)&v26, (uint64_t)v25, &qword_254A69880);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69880, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68C40);
      }
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69880 + 2424), 1.0);
    }
    v9 = atomic_load((unsigned __int8 *)&qword_254A68C48);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C48))
    {
      qword_254A69898 = 0;
      qword_254A698A0 = 0;
      qword_254A698A8 = 0;
      sub_20EAC040C((char **)&qword_254A69898, 0x147uLL);
      sub_20F053F1C((uint64_t)&v26, (uint64_t)v25, &qword_254A69898);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69898, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C48);
    }
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69898 + 2400), (double)a3);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_254A68A88);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68A88))
  {
    v24 = operator new(0x28uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &off_24C9C4340;
    *((_BYTE *)v24 + 24) = 0;
    *((_BYTE *)v24 + 32) = 0;
    qword_254A69358 = (uint64_t)(v24 + 3);
    qword_254A69360 = (uint64_t)v24;
    qword_254A69368 = 5000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A69358, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68A88);
  }
  v11 = (_QWORD *)qword_254A69358;
  v12 = *(unsigned __int8 *)(qword_254A69358 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v12)
  {
    if (result.__d_.__rep_ - *v11 < 5000000000)
      return result;
    v14 = (std::chrono::steady_clock::time_point *)qword_254A69358;
  }
  else
  {
    v14 = (std::chrono::steady_clock::time_point *)qword_254A69358;
    if (!*(_BYTE *)(qword_254A69358 + 8))
      *(_BYTE *)(qword_254A69358 + 8) = 1;
  }
  v14->__d_.__rep_ = result.__d_.__rep_;
  v15 = sub_210219C18();
  v16 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v26) = 67109376;
    HIDWORD(v26) = a1;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a2;
    v18 = (char *)_os_log_send_and_compose_impl();
    v19 = strlen(v18);
    v25[0] = 0;
    pthread_threadid_np(0, v25);
    v20 = v25[0];
    timespec_get((timespec *)v25, 1);
    sub_210219E20(&v26, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v15 + 1), (__int128 *)(v15 + 5), "Travel mode: %d, General visual SLAM: %d", 0x28uLL, v18, v19, v20, v25);
    std::mutex::lock(&stru_254A5A410);
    v21 = qword_254A5A458;
    for (i = unk_254A5A460; v21 != i; v21 += 40)
    {
      v23 = *(_QWORD *)(v21 + 32);
      if (!v23)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 48))(v23, &v26);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v38 < 0)
    {
      operator delete(__p);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_20:
        if (!v34)
        {
LABEL_26:
          if (v31 && v30 < 0)
            operator delete(v29);
          if (v28 < 0)
            operator delete(v27);
          if (v18)
            free(v18);
          goto LABEL_33;
        }
LABEL_24:
        if (v33 < 0)
          operator delete(v32);
        goto LABEL_26;
      }
    }
    else if ((v36 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v35);
    if (!v34)
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_33:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v15);
  if (LODWORD(result.__d_.__rep_))
  {
    LODWORD(v26) = 67109376;
    HIDWORD(v26) = a1;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a2;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F7FF528(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69880;
  if (qword_254A69880)
  {
    v3 = qword_254A69888;
    v4 = (void *)qword_254A69880;
    if (qword_254A69888 != qword_254A69880)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A69880;
    }
    qword_254A69888 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A68C40);
  _Unwind_Resume(a1);
}

void sub_20F7FF594(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(v1 + 2200);
  if (v3)
  {
    v4 = qword_254A698A0;
    v5 = *(void **)(v1 + 2200);
    if (qword_254A698A0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(v1 + 2200);
    }
    qword_254A698A0 = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(&qword_254A68C48);
  _Unwind_Resume(a1);
}

void sub_20F7FF5FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68A88);
  _Unwind_Resume(a1);
}

void sub_20F7FF614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F7FF6CC(int a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  double v15;
  unsigned __int8 v16;
  uint64_t v17;
  double v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  double v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  void **v32;
  unsigned __int8 v33;
  int v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  __uint64_t v47[2];
  uint64_t v48;
  _BYTE v49[10];
  __int16 v50;
  uint64_t v51;
  char v52;
  void *v53;
  char v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  void *v59;
  char v60;
  void *__p;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !(*(unsigned __int8 *)(a2 + 1) | *(unsigned __int8 *)(a2 + 2)))
    return;
  v10 = a5;
  v11 = atomic_load((unsigned __int8 *)&qword_254A68C50);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C50))
  {
    sub_20F7F8398((uint64_t)&qword_254A698B0);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A698B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C50);
  }
  v12 = qword_254A698B0 + 2184;
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A698B0 + 2184), 1.0);
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v12, 1.0);
  v13 = atomic_load((unsigned __int8 *)&qword_254A68C58);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C58))
  {
    sub_20F7F8398((uint64_t)&qword_254A698C8);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A698C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C58);
  }
  v14 = qword_254A698C8 + 2448;
  v15 = *(double *)(a2 + 8);
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A698C8 + 2448), *(double *)(a2 + 8));
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v14, v15);
  if (!*(_BYTE *)(a2 + 2))
    goto LABEL_29;
  v16 = atomic_load((unsigned __int8 *)&qword_254A68C60);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C60))
  {
    sub_20F7F8398((uint64_t)&qword_254A698E0);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A698E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C60);
  }
  v17 = qword_254A698E0 + 2496;
  a5 = 0.0;
  if (*(_BYTE *)(a2 + 2))
    v18 = 1.0;
  else
    v18 = 0.0;
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A698E0 + 2496), v18);
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v17, v18);
  if (!*(_BYTE *)(a2 + 2))
  {
LABEL_29:
    v19 = atomic_load((unsigned __int8 *)&qword_254A68C68);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C68))
    {
      sub_20F7F8398((uint64_t)&qword_254A698F8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A698F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68C68);
    }
    v20 = qword_254A698F8 + 2472;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A698F8 + 2472), 1.0);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v20, 1.0);
  }
  v21 = atomic_load((unsigned __int8 *)&qword_254A68C70);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C70))
  {
    sub_20F7F8398((uint64_t)&qword_254A69910);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69910, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C70);
  }
  v22 = qword_254A69910 + 2208;
  LOBYTE(a5) = *(_BYTE *)(a2 + 3);
  v23 = (double)*(unint64_t *)&a5;
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69910 + 2208), (double)*(unint64_t *)&a5);
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v22, v23);
  v24 = atomic_load((unsigned __int8 *)&qword_254A68C78);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C78))
  {
    sub_20F7F8398((uint64_t)&qword_254A69928);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69928, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C78);
  }
  v25 = qword_254A69928 + 7440;
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69928 + 7440), a6);
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v25, a6);
  v26 = atomic_load((unsigned __int8 *)&qword_254A68C80);
  if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A68C80))
  {
    sub_20F7F8398((uint64_t)&qword_254A69940);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69940, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68C80);
  }
  v27 = qword_254A69940 + 7416;
  if (*(_BYTE *)(a4 + 80))
    sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69940 + 7416), v10);
  if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
    sub_210214860(a4 + 88, v27, v10);
  if (*(_BYTE *)(a4 + 80))
  {
    switch(*(_BYTE *)(a2 + 3))
    {
      case 0:
        v28 = (unsigned __int8 *)sub_20F800114();
        goto LABEL_66;
      case 1:
        v28 = (unsigned __int8 *)sub_20F8001B8();
        goto LABEL_66;
      case 2:
        v28 = (unsigned __int8 *)sub_20F80025C();
        goto LABEL_66;
      case 3:
        v28 = (unsigned __int8 *)sub_20F800300();
        goto LABEL_66;
      case 4:
        v28 = (unsigned __int8 *)sub_20F8003A4();
        goto LABEL_66;
      case 5:
        v28 = (unsigned __int8 *)sub_20F800448();
        goto LABEL_66;
      case 6:
        v28 = (unsigned __int8 *)sub_20F8004EC();
LABEL_66:
        sub_20FDBBC20(a4, v28, 1.0);
        break;
      default:
        break;
    }
  }
  if (a3)
  {
    v29 = atomic_load((unsigned __int8 *)&qword_254A68CC0);
    if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CC0))
    {
      sub_20F7F8398((uint64_t)&qword_254A69A00);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68CC0);
    }
    v30 = qword_254A69A00 + 2160;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69A00 + 2160), 1.0);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v30, 1.0);
  }
  v31 = sub_210219C18();
  sub_210123194(*(_BYTE *)(a2 + 3), v45);
  if (v46 >= 0)
    v32 = v45;
  else
    v32 = (void **)v45[0];
  v33 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v35 = *(unsigned __int8 *)(a2 + 2);
    v36 = *(_QWORD *)(a2 + 8);
    LODWORD(v48) = 67109634;
    HIDWORD(v48) = v35;
    *(_WORD *)v49 = 2080;
    *(_QWORD *)&v49[2] = v32;
    v50 = 2048;
    v51 = v36;
    v37 = (char *)_os_log_send_and_compose_impl();
    v38 = strlen(v37);
    v47[0] = 0;
    pthread_threadid_np(0, v47);
    v39 = v47[0];
    timespec_get((timespec *)v47, 1);
    sub_210219E20(&v48, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v31 + 1), (__int128 *)(v31 + 5), "SENDHINT: MPC:%d:%s:%f", 0x16uLL, v37, v38, v39, v47);
    std::mutex::lock(&stru_254A5A410);
    v40 = qword_254A5A458;
    for (i = unk_254A5A460; v40 != i; v40 += 40)
    {
      v42 = *(_QWORD *)(v40 + 32);
      if (!v42)
        sub_20E86D37C();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 48))(v42, &v48);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v62 < 0)
    {
      operator delete(__p);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_85:
        if (!v58)
        {
LABEL_91:
          if (v55 && v54 < 0)
            operator delete(v53);
          if (v52 < 0)
            operator delete(*(void **)v49);
          if (v37)
            free(v37);
          goto LABEL_98;
        }
LABEL_89:
        if (v57 < 0)
          operator delete(v56);
        goto LABEL_91;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(v59);
    if (!v58)
      goto LABEL_91;
    goto LABEL_89;
  }
LABEL_98:
  if (os_signpost_enabled((os_log_t)*v31))
  {
    v43 = *(unsigned __int8 *)(a2 + 2);
    v44 = *(_QWORD *)(a2 + 8);
    LODWORD(v48) = 67109634;
    HIDWORD(v48) = v43;
    *(_WORD *)v49 = 2080;
    *(_QWORD *)&v49[2] = v32;
    v50 = 2048;
    v51 = v44;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  if (v46 < 0)
    operator delete(v45[0]);
}

void sub_20F800000(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68CC0);
  _Unwind_Resume(a1);
}

void sub_20F800018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C68);
  _Unwind_Resume(a1);
}

void sub_20F800030(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C60);
  _Unwind_Resume(a1);
}

void sub_20F800048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C80);
  _Unwind_Resume(a1);
}

void sub_20F800060(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C78);
  _Unwind_Resume(a1);
}

void sub_20F800078(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C70);
  _Unwind_Resume(a1);
}

void sub_20F800090(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C58);
  _Unwind_Resume(a1);
}

void sub_20F8000A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C50);
  _Unwind_Resume(a1);
}

void sub_20F8000C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_20E96E218((uint64_t)&a22);
  if (v22)
    free(v22);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20F800114()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68C88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68C88))
    return qword_254A69958 + 2376;
  sub_20F7F8398((uint64_t)&qword_254A69958);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69958, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68C88);
  return qword_254A69958 + 2376;
}

void sub_20F8001A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C88);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8001B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68C90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68C90))
    return qword_254A69970 + 2352;
  sub_20F7F8398((uint64_t)&qword_254A69970);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69970, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68C90);
  return qword_254A69970 + 2352;
}

void sub_20F800244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C90);
  _Unwind_Resume(a1);
}

uint64_t sub_20F80025C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68C98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68C98))
    return qword_254A69988 + 2232;
  sub_20F7F8398((uint64_t)&qword_254A69988);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69988, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68C98);
  return qword_254A69988 + 2232;
}

void sub_20F8002E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68C98);
  _Unwind_Resume(a1);
}

uint64_t sub_20F800300()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68CA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68CA0))
    return qword_254A699A0 + 2256;
  sub_20F7F8398((uint64_t)&qword_254A699A0);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A699A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68CA0);
  return qword_254A699A0 + 2256;
}

void sub_20F80038C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68CA0);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8003A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68CA8))
    return qword_254A699B8 + 2304;
  sub_20F7F8398((uint64_t)&qword_254A699B8);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A699B8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68CA8);
  return qword_254A699B8 + 2304;
}

void sub_20F800430(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68CA8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F800448()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68CB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68CB0))
    return qword_254A699D0 + 2280;
  sub_20F7F8398((uint64_t)&qword_254A699D0);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A699D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68CB0);
  return qword_254A699D0 + 2280;
}

void sub_20F8004D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68CB0);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8004EC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A68CB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68CB8))
    return qword_254A699E8 + 2328;
  sub_20F7F8398((uint64_t)&qword_254A699E8);
  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A699E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A68CB8);
  return qword_254A699E8 + 2328;
}

void sub_20F800578(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68CB8);
  _Unwind_Resume(a1);
}

void sub_20F800590(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  kdebug_trace();
  if (*(_BYTE *)(a3 + 80)
    || (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
        !v8 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A68CC8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CC8))
    {
      qword_254A69A18 = 0;
      qword_254A69A20 = 0;
      qword_254A69A28 = 0;
      sub_20EAC040C((char **)&qword_254A69A18, 0x147uLL);
      sub_20F053F1C((uint64_t)&v12, (uint64_t)&v11, &qword_254A69A18);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A18, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68CC8);
    }
    v7 = qword_254A69A18 + 6960;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69A18 + 6960), (double)a1);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v7, (double)a1);
  }
  if (*(_BYTE *)(a3 + 80)
    || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
  {
    v9 = atomic_load((unsigned __int8 *)&qword_254A68CD0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CD0))
    {
      qword_254A69A30 = 0;
      qword_254A69A38 = 0;
      qword_254A69A40 = 0;
      sub_20EAC040C((char **)&qword_254A69A30, 0x147uLL);
      sub_20F053F1C((uint64_t)&v14, (uint64_t)&v13, &qword_254A69A30);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68CD0);
    }
    v10 = qword_254A69A30 + 6984;
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69A30 + 6984), (double)a2);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v10, (double)a2);
  }
}

void sub_20F8007E8(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[428];
  if (v3)
  {
    v4 = qword_254A69A38;
    v5 = (void *)v1[428];
    if (qword_254A69A38 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A69A30;
    }
    v1[429] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F8008AC(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  char v6;

  if (*(_BYTE *)(a1 + 80)
    || (*(_BYTE *)(a1 + 200) ? (v4 = *(_QWORD *)(a1 + 184) == 0) : (v4 = 1),
        !v4 && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144)))
  {
    v2 = atomic_load((unsigned __int8 *)&qword_254A54F68);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A54F68))
    {
      qword_254A54F50 = 0;
      qword_254A54F58 = 0;
      qword_254A54F60 = 0;
      sub_20EAC040C((char **)&qword_254A54F50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v6, (uint64_t)&v5, &qword_254A54F50);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54F50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A54F68);
    }
    v3 = qword_254A54F50 + 576;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A54F50 + 576), 1.0);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v3, 1.0);
  }
}

void sub_20F8009E8(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54F50;
  if (qword_254A54F50)
  {
    v3 = qword_254A54F58;
    v4 = (void *)qword_254A54F50;
    if (qword_254A54F58 != qword_254A54F50)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54F50;
    }
    qword_254A54F58 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54F68);
  _Unwind_Resume(a1);
}

void sub_20F800A54(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  BOOL v13;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v7 = (double)a1;
  v8 = (double)a2;
  v9 = (double)a3;
  v10 = (double)a4;
  kdebug_trace();
  if (*(_BYTE *)(a5 + 80)
    || (*(_BYTE *)(a5 + 200) ? (v13 = *(_QWORD *)(a5 + 184) == 0) : (v13 = 1),
        !v13 && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144)))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68CD8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CD8))
    {
      qword_254A69A48 = 0;
      qword_254A69A50 = 0;
      qword_254A69A58 = 0;
      sub_20EAC040C((char **)&qword_254A69A48, 0x147uLL);
      sub_20F053F1C((uint64_t)&v21, (uint64_t)&v20, &qword_254A69A48);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A48, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68CD8);
    }
    v12 = qword_254A69A48 + 600;
    if (*(_BYTE *)(a5 + 80))
      sub_20FDBBC20(a5, (unsigned __int8 *)(qword_254A69A48 + 600), v7);
    if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
      sub_210214860(a5 + 88, v12, v7);
  }
  if (a1)
  {
    if (*(_BYTE *)(a5 + 80)
      || *(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    {
      v14 = atomic_load((unsigned __int8 *)&qword_254A68CE0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CE0))
      {
        qword_254A69A60 = 0;
        qword_254A69A68 = 0;
        qword_254A69A70 = 0;
        sub_20EAC040C((char **)&qword_254A69A60, 0x147uLL);
        sub_20F053F1C((uint64_t)&v23, (uint64_t)&v22, &qword_254A69A60);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A60, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68CE0);
      }
      v15 = qword_254A69A60 + 624;
      if (*(_BYTE *)(a5 + 80))
        sub_20FDBBC20(a5, (unsigned __int8 *)(qword_254A69A60 + 624), v8);
      if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
        sub_210214860(a5 + 88, v15, v8);
    }
    if (*(_BYTE *)(a5 + 80)
      || *(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
    {
      v16 = atomic_load((unsigned __int8 *)&qword_254A68CE8);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CE8))
      {
        qword_254A69A78 = 0;
        qword_254A69A80 = 0;
        qword_254A69A88 = 0;
        sub_20EAC040C((char **)&qword_254A69A78, 0x147uLL);
        sub_20F053F1C((uint64_t)&v25, (uint64_t)&v24, &qword_254A69A78);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A78, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68CE8);
      }
      v17 = qword_254A69A78 + 648;
      if (*(_BYTE *)(a5 + 80))
        sub_20FDBBC20(a5, (unsigned __int8 *)(qword_254A69A78 + 648), v9);
      if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
        sub_210214860(a5 + 88, v17, v9);
    }
  }
  if (*(_BYTE *)(a5 + 80)
    || *(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_254A68CF0);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CF0))
    {
      qword_254A69A90 = 0;
      qword_254A69A98 = 0;
      qword_254A69AA0 = 0;
      sub_20EAC040C((char **)&qword_254A69A90, 0x147uLL);
      sub_20F053F1C((uint64_t)&v27, (uint64_t)&v26, &qword_254A69A90);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69A90, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68CF0);
    }
    v19 = qword_254A69A90 + 672;
    if (*(_BYTE *)(a5 + 80))
      sub_20FDBBC20(a5, (unsigned __int8 *)(qword_254A69A90 + 672), v10);
    if (*(_BYTE *)(a5 + 200) && *(_QWORD *)(a5 + 184) && *(_QWORD *)(a5 + 136) != *(_QWORD *)(a5 + 144))
      sub_210214860(a5 + 88, v19, v10);
  }
}

void sub_20F800E8C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69A78;
  if (!qword_254A69A78)
  {
    __cxa_guard_abort(&qword_254A68CE8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69A80;
  v4 = (void *)qword_254A69A78;
  if (qword_254A69A80 != qword_254A69A78)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69A78;
  }
  qword_254A69A80 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68CE8);
  _Unwind_Resume(a1);
}

void sub_20F801060(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t **v11;
  int v12;
  int8x8_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  double v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  double v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  double v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  double v45;
  unsigned __int8 v46;
  uint64_t v47;
  double v48;
  unsigned __int8 v49;
  uint64_t v50;
  double v51;
  unsigned __int8 v52;
  uint64_t v53;
  double v54;
  unsigned __int8 v55;
  uint64_t v56;
  double v57;
  double *v58;
  unsigned __int8 v59;
  unsigned __int8 *v60;
  double v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t *v65;
  uint64_t **v66;
  BOOL v67;
  uint64_t *v68;
  unsigned int v69;
  __guard *v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  char v75;

  v72 = 0;
  v73 = 0;
  v71 = &v72;
  v2 = (uint64_t *)a1[2];
  if (v2)
  {
    do
    {
      v5 = v72;
      v6 = *((_DWORD *)v2 + 4);
      v7 = &v72;
      v8 = &v72;
      if (v72)
      {
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v5;
            v9 = *((_DWORD *)v5 + 7);
            if (v6 >= v9)
              break;
            v5 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_12;
          }
          if (v9 >= v6)
            break;
          v5 = v8[1];
          if (!v5)
          {
            v7 = v8 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        v10 = operator new(0x20uLL);
        v10[7] = v6;
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        *((_QWORD *)v10 + 2) = v8;
        *v7 = (uint64_t *)v10;
        if (*v71)
        {
          v71 = (uint64_t **)*v71;
          v10 = *v7;
        }
        sub_20E868578(v72, (uint64_t *)v10);
        ++v73;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
    v11 = v71;
    if (v71 != &v72)
    {
      v12 = 0;
LABEL_17:
      v13 = (int8x8_t)a1[1];
      if (!*(_QWORD *)&v13)
        goto LABEL_259;
      v14 = *((unsigned int *)v11 + 7);
      v15 = (uint8x8_t)vcnt_s8(v13);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = *((unsigned int *)v11 + 7);
        if (*(_QWORD *)&v13 <= v14)
          v16 = v14 % *(_QWORD *)&v13;
      }
      else
      {
        v16 = (v13.i32[0] - 1) & v14;
      }
      v17 = *(uint64_t ***)(*a1 + 8 * v16);
      if (!v17 || (v18 = *v17) == 0)
LABEL_259:
        sub_20E89FD20("unordered_map::at: key not found");
      if (v15.u32[0] < 2uLL)
      {
        v19 = *(_QWORD *)&v13 - 1;
        while (1)
        {
          v21 = v18[1];
          if (v21 == v14)
          {
            if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
              goto LABEL_37;
          }
          else if ((v21 & v19) != v16)
          {
            goto LABEL_259;
          }
          v18 = (uint64_t *)*v18;
          if (!v18)
            goto LABEL_259;
        }
      }
      while (1)
      {
        v20 = v18[1];
        if (v20 == v14)
        {
          if (*((_DWORD *)v18 + 4) == (_DWORD)v14)
          {
LABEL_37:
            switch(v12)
            {
              case 0:
                if (*((_BYTE *)v18 + 64))
                {
                  v22 = *((double *)v18 + 7) * *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_92;
                }
                else
                {
                  v22 = *((double *)v18 + 3);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_92;
                }
                if (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
                  goto LABEL_99;
LABEL_92:
                v36 = atomic_load((unsigned __int8 *)&qword_254A68CF8);
                if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A68CF8))
                {
                  qword_254A69AA8 = 0;
                  qword_254A69AB0 = 0;
                  qword_254A69AB8 = 0;
                  sub_20EAC040C((char **)&qword_254A69AA8, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69AA8);
                  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69AA8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A68CF8);
                }
                v37 = qword_254A69AA8 + 2520;
                if (*(_BYTE *)(a2 + 80))
                  sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69AA8 + 2520), v22);
                if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                  sub_210214860(a2 + 88, v37, v22);
LABEL_99:
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v38 = atomic_load((unsigned __int8 *)&qword_254A68D00);
                  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D00))
                  {
                    qword_254A69AC0 = 0;
                    qword_254A69AC8 = 0;
                    qword_254A69AD0 = 0;
                    sub_20EAC040C((char **)&qword_254A69AC0, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69AC0);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69AC0, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D00);
                  }
                  v39 = qword_254A69AC0 + 2544;
                  v40 = *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69AC0 + 2544), *((double *)v18 + 4));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v39, v40);
                }
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v52 = atomic_load((unsigned __int8 *)&qword_254A68D08);
                  if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D08))
                  {
                    qword_254A69AD8 = 0;
                    qword_254A69AE0 = 0;
                    qword_254A69AE8 = 0;
                    sub_20EAC040C((char **)&qword_254A69AD8, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69AD8);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69AD8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D08);
                  }
                  v53 = qword_254A69AD8 + 2568;
                  v54 = *((double *)v18 + 5);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69AD8 + 2568), *((double *)v18 + 5));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v53, v54);
                }
                if (!*(_BYTE *)(a2 + 80)
                  && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
                {
                  goto LABEL_202;
                }
                v58 = (double *)(v18 + 6);
                v63 = atomic_load((unsigned __int8 *)&qword_254A68D10);
                if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D10))
                {
                  qword_254A69AF0 = 0;
                  qword_254A69AF8 = 0;
                  qword_254A69B00 = 0;
                  sub_20EAC040C((char **)&qword_254A69AF0, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69AF0);
                  v68 = &qword_254A69AF0;
                  v70 = &qword_254A68D10;
                  v69 = 108;
                  goto LABEL_256;
                }
                v60 = (unsigned __int8 *)(qword_254A69AF0 + 2592);
                v61 = *v58;
                if (*(_BYTE *)(a2 + 80))
                  goto LABEL_197;
                goto LABEL_198;
              case 1:
                if (*((_BYTE *)v18 + 64))
                {
                  v25 = *((double *)v18 + 7) * *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_111;
                }
                else
                {
                  v25 = *((double *)v18 + 3);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_111;
                }
                if (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
                  goto LABEL_118;
LABEL_111:
                v41 = atomic_load((unsigned __int8 *)&qword_254A68D18);
                if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D18))
                {
                  qword_254A69B08 = 0;
                  qword_254A69B10 = 0;
                  qword_254A69B18 = 0;
                  sub_20EAC040C((char **)&qword_254A69B08, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B08);
                  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B08, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A68D18);
                }
                v42 = qword_254A69B08 + 2616;
                if (*(_BYTE *)(a2 + 80))
                  sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B08 + 2616), v25);
                if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                  sub_210214860(a2 + 88, v42, v25);
LABEL_118:
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v43 = atomic_load((unsigned __int8 *)&qword_254A68D20);
                  if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D20))
                  {
                    qword_254A69B20 = 0;
                    qword_254A69B28 = 0;
                    qword_254A69B30 = 0;
                    sub_20EAC040C((char **)&qword_254A69B20, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B20);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B20, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D20);
                  }
                  v44 = qword_254A69B20 + 2640;
                  v45 = *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B20 + 2640), *((double *)v18 + 4));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v44, v45);
                }
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v55 = atomic_load((unsigned __int8 *)&qword_254A68D28);
                  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D28))
                  {
                    qword_254A69B38 = 0;
                    qword_254A69B40 = 0;
                    qword_254A69B48 = 0;
                    sub_20EAC040C((char **)&qword_254A69B38, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B38);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B38, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D28);
                  }
                  v56 = qword_254A69B38 + 2664;
                  v57 = *((double *)v18 + 5);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B38 + 2664), *((double *)v18 + 5));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v56, v57);
                }
                if (!*(_BYTE *)(a2 + 80)
                  && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
                {
                  goto LABEL_202;
                }
                v58 = (double *)(v18 + 6);
                v64 = atomic_load((unsigned __int8 *)&qword_254A68D30);
                if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D30))
                {
                  qword_254A69B50 = 0;
                  qword_254A69B58 = 0;
                  qword_254A69B60 = 0;
                  sub_20EAC040C((char **)&qword_254A69B50, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B50);
                  v68 = &qword_254A69B50;
                  v70 = &qword_254A68D30;
                  v69 = 112;
                  goto LABEL_256;
                }
                v60 = (unsigned __int8 *)(qword_254A69B50 + 2688);
                v61 = *v58;
                if (!*(_BYTE *)(a2 + 80))
                  goto LABEL_198;
                goto LABEL_197;
              case 2:
                if (*((_BYTE *)v18 + 64))
                {
                  v23 = *((double *)v18 + 7) * *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_54;
                }
                else
                {
                  v23 = *((double *)v18 + 3);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_54;
                }
                if (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
                  goto LABEL_61;
LABEL_54:
                v26 = atomic_load((unsigned __int8 *)&qword_254A68D38);
                if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D38))
                {
                  qword_254A69B68 = 0;
                  qword_254A69B70 = 0;
                  qword_254A69B78 = 0;
                  sub_20EAC040C((char **)&qword_254A69B68, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B68);
                  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B68, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A68D38);
                }
                v27 = qword_254A69B68 + 2712;
                if (*(_BYTE *)(a2 + 80))
                  sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B68 + 2712), v23);
                if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                  sub_210214860(a2 + 88, v27, v23);
LABEL_61:
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v28 = atomic_load((unsigned __int8 *)&qword_254A68D40);
                  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D40))
                  {
                    qword_254A69B80 = 0;
                    qword_254A69B88 = 0;
                    qword_254A69B90 = 0;
                    sub_20EAC040C((char **)&qword_254A69B80, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B80);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B80, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D40);
                  }
                  v29 = qword_254A69B80 + 2736;
                  v30 = *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B80 + 2736), *((double *)v18 + 4));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v29, v30);
                }
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v46 = atomic_load((unsigned __int8 *)&qword_254A68D48);
                  if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D48))
                  {
                    qword_254A69B98 = 0;
                    qword_254A69BA0 = 0;
                    qword_254A69BA8 = 0;
                    sub_20EAC040C((char **)&qword_254A69B98, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69B98);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69B98, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D48);
                  }
                  v47 = qword_254A69B98 + 2760;
                  v48 = *((double *)v18 + 5);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69B98 + 2760), *((double *)v18 + 5));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v47, v48);
                }
                if (!*(_BYTE *)(a2 + 80)
                  && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
                {
                  goto LABEL_202;
                }
                v58 = (double *)(v18 + 6);
                v59 = atomic_load((unsigned __int8 *)&qword_254A68D50);
                if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D50))
                {
                  qword_254A69BB0 = 0;
                  qword_254A69BB8 = 0;
                  qword_254A69BC0 = 0;
                  sub_20EAC040C((char **)&qword_254A69BB0, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69BB0);
                  v68 = &qword_254A69BB0;
                  v70 = &qword_254A68D50;
                  v69 = 116;
                  goto LABEL_256;
                }
                v60 = (unsigned __int8 *)(qword_254A69BB0 + 2784);
                v61 = *v58;
                if (*(_BYTE *)(a2 + 80))
                  goto LABEL_197;
                goto LABEL_198;
              case 3:
                if (*((_BYTE *)v18 + 64))
                {
                  v24 = *((double *)v18 + 7) * *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_73;
                }
                else
                {
                  v24 = *((double *)v18 + 3);
                  if (*(_BYTE *)(a2 + 80))
                    goto LABEL_73;
                }
                if (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
                  goto LABEL_80;
LABEL_73:
                v31 = atomic_load((unsigned __int8 *)&qword_254A68D58);
                if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D58))
                {
                  qword_254A69BC8 = 0;
                  qword_254A69BD0 = 0;
                  qword_254A69BD8 = 0;
                  sub_20EAC040C((char **)&qword_254A69BC8, 0x147uLL);
                  sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69BC8);
                  __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69BC8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A68D58);
                }
                v32 = qword_254A69BC8 + 2808;
                if (*(_BYTE *)(a2 + 80))
                  sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69BC8 + 2808), v24);
                if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                  sub_210214860(a2 + 88, v32, v24);
LABEL_80:
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v33 = atomic_load((unsigned __int8 *)&qword_254A68D60);
                  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D60))
                  {
                    qword_254A69BE0 = 0;
                    qword_254A69BE8 = 0;
                    qword_254A69BF0 = 0;
                    sub_20EAC040C((char **)&qword_254A69BE0, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69BE0);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69BE0, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D60);
                  }
                  v34 = qword_254A69BE0 + 2832;
                  v35 = *((double *)v18 + 4);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69BE0 + 2832), *((double *)v18 + 4));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v34, v35);
                }
                if (*(_BYTE *)(a2 + 80)
                  || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                {
                  v49 = atomic_load((unsigned __int8 *)&qword_254A68D68);
                  if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_254A68D68))
                  {
                    qword_254A69BF8 = 0;
                    qword_254A69C00 = 0;
                    qword_254A69C08 = 0;
                    sub_20EAC040C((char **)&qword_254A69BF8, 0x147uLL);
                    sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69BF8);
                    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69BF8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A68D68);
                  }
                  v50 = qword_254A69BF8 + 2856;
                  v51 = *((double *)v18 + 5);
                  if (*(_BYTE *)(a2 + 80))
                    sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69BF8 + 2856), *((double *)v18 + 5));
                  if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                    sub_210214860(a2 + 88, v50, v51);
                }
                if (!*(_BYTE *)(a2 + 80)
                  && (!*(_BYTE *)(a2 + 200) || !*(_QWORD *)(a2 + 184) || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144)))
                {
                  goto LABEL_202;
                }
                v58 = (double *)(v18 + 6);
                v62 = atomic_load((unsigned __int8 *)&qword_254A68D70);
                if ((v62 & 1) != 0 || !__cxa_guard_acquire(&qword_254A68D70))
                {
                  v60 = (unsigned __int8 *)(qword_254A69C10 + 2880);
                  v61 = *v58;
                  if (!*(_BYTE *)(a2 + 80))
                    goto LABEL_198;
LABEL_197:
                  sub_20FDBBC20(a2, v60, v61);
                  goto LABEL_198;
                }
                qword_254A69C10 = 0;
                qword_254A69C18 = 0;
                qword_254A69C20 = 0;
                sub_20EAC040C((char **)&qword_254A69C10, 0x147uLL);
                sub_20F053F1C((uint64_t)&v75, (uint64_t)&v74, &qword_254A69C10);
                v68 = &qword_254A69C10;
                v70 = &qword_254A68D70;
                v69 = 120;
LABEL_256:
                __cxa_atexit((void (*)(void *))sub_20E89FB98, v68, &dword_20E81F000);
                __cxa_guard_release(v70);
                v60 = (unsigned __int8 *)(*v68 + 24 * v69);
                v61 = *v58;
                if (*(_BYTE *)(a2 + 80))
                  goto LABEL_197;
LABEL_198:
                if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
                  sub_210214860(a2 + 88, (uint64_t)v60, v61);
LABEL_202:
                v65 = v11[1];
                if (v65)
                {
                  do
                  {
                    v66 = (uint64_t **)v65;
                    v65 = (uint64_t *)*v65;
                  }
                  while (v65);
                }
                else
                {
                  do
                  {
                    v66 = (uint64_t **)v11[2];
                    v67 = *v66 == (uint64_t *)v11;
                    v11 = v66;
                  }
                  while (!v67);
                }
                ++v12;
                v11 = v66;
                if (v66 != &v72)
                  goto LABEL_17;
                goto LABEL_258;
              default:
                goto LABEL_258;
            }
          }
        }
        else
        {
          if (v20 >= *(_QWORD *)&v13)
            v20 %= *(_QWORD *)&v13;
          if (v20 != v16)
            goto LABEL_259;
        }
        v18 = (uint64_t *)*v18;
        if (!v18)
          goto LABEL_259;
      }
    }
  }
LABEL_258:
  sub_20E86872C((uint64_t)&v71, v72);
}

void sub_20F802210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B50;
  if (qword_254A69B50)
  {
    v14 = qword_254A69B58;
    v15 = (void *)qword_254A69B50;
    if (qword_254A69B58 != qword_254A69B50)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B50;
    }
    qword_254A69B58 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D30);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69AF0;
  if (qword_254A69AF0)
  {
    v14 = qword_254A69AF8;
    v15 = (void *)qword_254A69AF0;
    if (qword_254A69AF8 != qword_254A69AF0)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69AF0;
    }
    qword_254A69AF8 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D10);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B38;
  if (qword_254A69B38)
  {
    v14 = qword_254A69B40;
    v15 = (void *)qword_254A69B38;
    if (qword_254A69B40 != qword_254A69B38)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B38;
    }
    qword_254A69B40 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D28);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F80237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69AD8;
  if (qword_254A69AD8)
  {
    v14 = qword_254A69AE0;
    v15 = (void *)qword_254A69AD8;
    if (qword_254A69AE0 != qword_254A69AD8)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69AD8;
    }
    qword_254A69AE0 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D08);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8023F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B20;
  if (qword_254A69B20)
  {
    v14 = qword_254A69B28;
    v15 = (void *)qword_254A69B20;
    if (qword_254A69B28 != qword_254A69B20)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B20;
    }
    qword_254A69B28 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D20);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69AC0;
  if (qword_254A69AC0)
  {
    v14 = qword_254A69AC8;
    v15 = (void *)qword_254A69AC0;
    if (qword_254A69AC8 != qword_254A69AC0)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69AC0;
    }
    qword_254A69AC8 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D00);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8024F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69AA8;
  if (qword_254A69AA8)
  {
    v14 = qword_254A69AB0;
    v15 = (void *)qword_254A69AA8;
    if (qword_254A69AB0 != qword_254A69AA8)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69AA8;
    }
    qword_254A69AB0 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68CF8);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F80256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69C10;
  if (qword_254A69C10)
  {
    v14 = qword_254A69C18;
    v15 = (void *)qword_254A69C10;
    if (qword_254A69C18 != qword_254A69C10)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69C10;
    }
    qword_254A69C18 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D70);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8025E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69BB0;
  if (qword_254A69BB0)
  {
    v14 = qword_254A69BB8;
    v15 = (void *)qword_254A69BB0;
    if (qword_254A69BB8 != qword_254A69BB0)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69BB0;
    }
    qword_254A69BB8 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D50);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F80265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69BF8;
  if (qword_254A69BF8)
  {
    v14 = qword_254A69C00;
    v15 = (void *)qword_254A69BF8;
    if (qword_254A69C00 != qword_254A69BF8)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69BF8;
    }
    qword_254A69C00 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D68);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8026D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B98;
  if (qword_254A69B98)
  {
    v14 = qword_254A69BA0;
    v15 = (void *)qword_254A69B98;
    if (qword_254A69BA0 != qword_254A69B98)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B98;
    }
    qword_254A69BA0 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D48);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69BE0;
  if (qword_254A69BE0)
  {
    v14 = qword_254A69BE8;
    v15 = (void *)qword_254A69BE0;
    if (qword_254A69BE8 != qword_254A69BE0)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69BE0;
    }
    qword_254A69BE8 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D60);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8027D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B80;
  if (qword_254A69B80)
  {
    v14 = qword_254A69B88;
    v15 = (void *)qword_254A69B80;
    if (qword_254A69B88 != qword_254A69B80)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B80;
    }
    qword_254A69B88 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D40);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F80284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B08;
  if (qword_254A69B08)
  {
    v14 = qword_254A69B10;
    v15 = (void *)qword_254A69B08;
    if (qword_254A69B10 != qword_254A69B08)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B08;
    }
    qword_254A69B10 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D18);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8028C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69BC8;
  if (qword_254A69BC8)
  {
    v14 = qword_254A69BD0;
    v15 = (void *)qword_254A69BC8;
    if (qword_254A69BD0 != qword_254A69BC8)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69BC8;
    }
    qword_254A69BD0 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D58);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = qword_254A69B68;
  if (qword_254A69B68)
  {
    v14 = qword_254A69B70;
    v15 = (void *)qword_254A69B68;
    if (qword_254A69B70 != qword_254A69B68)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)qword_254A69B68;
    }
    qword_254A69B70 = v13;
    operator delete(v15);
  }
  __cxa_guard_abort(&qword_254A68D38);
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8029C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8029D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F8029F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_20E86872C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20F802A68(unsigned int a1, double *a2, double *a3, double *a4, double *a5, uint64_t a6)
{
  unsigned __int8 v11;
  double v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  char v17;
  char v18;

  if (*(_BYTE *)(a6 + 80)
    || (*(_BYTE *)(a6 + 200) ? (v14 = *(_QWORD *)(a6 + 184) == 0) : (v14 = 1),
        !v14 && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144)))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A54F88);
    if ((v11 & 1) == 0)
    {
      v15 = a1;
      v16 = __cxa_guard_acquire(&qword_254A54F88);
      a1 = v15;
      if (v16)
      {
        qword_254A54F70 = 0;
        qword_254A54F78 = 0;
        qword_254A54F80 = 0;
        sub_20EAC040C((char **)&qword_254A54F70, 0x147uLL);
        sub_20F053F1C((uint64_t)&v18, (uint64_t)&v17, &qword_254A54F70);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54F70, &dword_20E81F000);
        __cxa_guard_release(&qword_254A54F88);
        a1 = v15;
      }
    }
    v12 = (double)a1;
    v13 = qword_254A54F70 + 3192;
    if (*(_BYTE *)(a6 + 80))
      sub_20FDBBC20(a6, (unsigned __int8 *)(qword_254A54F70 + 3192), v12);
    if (*(_BYTE *)(a6 + 200) && *(_QWORD *)(a6 + 184) && *(_QWORD *)(a6 + 136) != *(_QWORD *)(a6 + 144))
      sub_210214860(a6 + 88, v13, v12);
  }
  sub_20F802C5C(a2, a6);
  sub_20F803130(a3, a6);
  sub_20F803604(a4, a6);
  sub_20F803AB8(a5, a6);
}

void sub_20F802BF0(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54F70;
  if (qword_254A54F70)
  {
    v3 = qword_254A54F78;
    v4 = (void *)qword_254A54F70;
    if (qword_254A54F78 != qword_254A54F70)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54F70;
    }
    qword_254A54F78 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54F88);
  _Unwind_Resume(a1);
}

void sub_20F802C5C(double *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  kdebug_trace();
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68DD8);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DD8))
    {
      qword_254A69D48 = 0;
      qword_254A69D50 = 0;
      qword_254A69D58 = 0;
      sub_20EAC040C((char **)&qword_254A69D48, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69D48);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D48, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68DD8);
    }
    v5 = qword_254A69D48 + 3216;
    v6 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69D48 + 3216), *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v5, v6);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68DE0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DE0))
    {
      qword_254A69D60 = 0;
      qword_254A69D68 = 0;
      qword_254A69D70 = 0;
      sub_20EAC040C((char **)&qword_254A69D60, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69D60);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68DE0);
    }
    v9 = qword_254A69D60 + 3240;
    v10 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69D60 + 3240), a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68DE8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DE8))
    {
      qword_254A69D78 = 0;
      qword_254A69D80 = 0;
      qword_254A69D88 = 0;
      sub_20EAC040C((char **)&qword_254A69D78, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69D78);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D78, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68DE8);
    }
    v12 = qword_254A69D78 + 3264;
    v13 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69D78 + 3264), a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v13);
  }
}

void sub_20F802F94(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69D78;
  if (!qword_254A69D78)
  {
    __cxa_guard_abort(&qword_254A68DE8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69D80;
  v4 = (void *)qword_254A69D78;
  if (qword_254A69D80 != qword_254A69D78)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69D78;
  }
  qword_254A69D80 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68DE8);
  _Unwind_Resume(a1);
}

void sub_20F803130(double *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  kdebug_trace();
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68E20);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E20))
    {
      qword_254A69E20 = 0;
      qword_254A69E28 = 0;
      qword_254A69E30 = 0;
      sub_20EAC040C((char **)&qword_254A69E20, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69E20);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E20);
    }
    v5 = qword_254A69E20 + 3432;
    v6 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E20 + 3432), *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v5, v6);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E28);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E28))
    {
      qword_254A69E38 = 0;
      qword_254A69E40 = 0;
      qword_254A69E48 = 0;
      sub_20EAC040C((char **)&qword_254A69E38, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69E38);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E28);
    }
    v9 = qword_254A69E38 + 3456;
    v10 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E38 + 3456), a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E30);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E30))
    {
      qword_254A69E50 = 0;
      qword_254A69E58 = 0;
      qword_254A69E60 = 0;
      sub_20EAC040C((char **)&qword_254A69E50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69E50);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E30);
    }
    v12 = qword_254A69E50 + 3480;
    v13 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E50 + 3480), a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v13);
  }
}

void sub_20F803468(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69E50;
  if (!qword_254A69E50)
  {
    __cxa_guard_abort(&qword_254A68E30);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69E58;
  v4 = (void *)qword_254A69E50;
  if (qword_254A69E58 != qword_254A69E50)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69E50;
  }
  qword_254A69E58 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E30);
  _Unwind_Resume(a1);
}

void sub_20F803604(double *a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  double v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68E38);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E38))
    {
      qword_254A69E68 = 0;
      qword_254A69E70 = 0;
      qword_254A69E78 = 0;
      sub_20EAC040C((char **)&qword_254A69E68, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69E68);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E68, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E38);
    }
    v5 = (unsigned __int8 *)(qword_254A69E68 + 3504);
    v6 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v5, *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v5, v6);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E40);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E40))
    {
      qword_254A69E80 = 0;
      qword_254A69E88 = 0;
      qword_254A69E90 = 0;
      sub_20EAC040C((char **)&qword_254A69E80, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69E80);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E80, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E40);
    }
    v9 = qword_254A69E80 + 3528;
    v10 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E80 + 3528), a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E48);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E48))
    {
      qword_254A69E98 = 0;
      qword_254A69EA0 = 0;
      qword_254A69EA8 = 0;
      sub_20EAC040C((char **)&qword_254A69E98, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69E98);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E98, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E48);
    }
    v12 = qword_254A69E98 + 3552;
    v13 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E98 + 3552), a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v13);
  }
}

void sub_20F803924(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69E98;
  if (!qword_254A69E98)
  {
    __cxa_guard_abort(&qword_254A68E48);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69EA0;
  v4 = (void *)qword_254A69E98;
  if (qword_254A69EA0 != qword_254A69E98)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69E98;
  }
  qword_254A69EA0 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E48);
  _Unwind_Resume(a1);
}

void sub_20F803AB8(double *a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  double v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68E50);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E50))
    {
      qword_254A69EB0 = 0;
      qword_254A69EB8 = 0;
      qword_254A69EC0 = 0;
      sub_20EAC040C((char **)&qword_254A69EB0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69EB0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69EB0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E50);
    }
    v5 = (unsigned __int8 *)(qword_254A69EB0 + 3576);
    v6 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v5, *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v5, v6);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E58);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E58))
    {
      qword_254A69EC8 = 0;
      qword_254A69ED0 = 0;
      qword_254A69ED8 = 0;
      sub_20EAC040C((char **)&qword_254A69EC8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69EC8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69EC8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E58);
    }
    v9 = qword_254A69EC8 + 3600;
    v10 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69EC8 + 3600), a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E60);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E60))
    {
      qword_254A69EE0 = 0;
      qword_254A69EE8 = 0;
      qword_254A69EF0 = 0;
      sub_20EAC040C((char **)&qword_254A69EE0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69EE0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69EE0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E60);
    }
    v12 = qword_254A69EE0 + 3624;
    v13 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69EE0 + 3624), a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v13);
  }
}

void sub_20F803DD8(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69EE0;
  if (!qword_254A69EE0)
  {
    __cxa_guard_abort(&qword_254A68E60);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69EE8;
  v4 = (void *)qword_254A69EE0;
  if (qword_254A69EE8 != qword_254A69EE0)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69EE0;
  }
  qword_254A69EE8 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E60);
  _Unwind_Resume(a1);
}

void sub_20F803F6C(double *a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  unsigned __int8 v10;
  uint64_t v11;
  double v12;
  unsigned __int8 v13;
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  if ((_BYTE)a2)
  {
    if (*(_BYTE *)(a3 + 80)
      || (*(_BYTE *)(a3 + 200) ? (v9 = *(_QWORD *)(a3 + 184) == 0) : (v9 = 1),
          !v9 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254A68DF0);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DF0))
      {
        qword_254A69D90 = 0;
        qword_254A69D98 = 0;
        qword_254A69DA0 = 0;
        sub_20EAC040C((char **)&qword_254A69D90, 0x147uLL);
        sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69D90);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69D90, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68DF0);
      }
      v7 = qword_254A69D90 + 3288;
      v8 = *a1;
      if (*(_BYTE *)(a3 + 80))
        sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69D90 + 3288), *a1);
      if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
        sub_210214860(a3 + 88, v7, v8);
    }
  }
  if ((a2 & 0xFF00) != 0
    && (*(_BYTE *)(a3 + 80)
     || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254A68DF8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68DF8))
    {
      qword_254A69DA8 = 0;
      qword_254A69DB0 = 0;
      qword_254A69DB8 = 0;
      sub_20EAC040C((char **)&qword_254A69DA8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69DA8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69DA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68DF8);
    }
    v11 = qword_254A69DA8 + 3312;
    v12 = a1[1];
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69DA8 + 3312), a1[1]);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v11, v12);
  }
  if ((*(_QWORD *)&a2 & 0xFF0000) != 0
    && (*(_BYTE *)(a3 + 80)
     || *(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A68E00);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E00))
    {
      qword_254A69DC0 = 0;
      qword_254A69DC8 = 0;
      qword_254A69DD0 = 0;
      sub_20EAC040C((char **)&qword_254A69DC0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v21, (uint64_t)&v20, &qword_254A69DC0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69DC0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E00);
    }
    v14 = qword_254A69DC0 + 3336;
    v15 = a1[2];
    if (*(_BYTE *)(a3 + 80))
      sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A69DC0 + 3336), a1[2]);
    if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
      sub_210214860(a3 + 88, v14, v15);
  }
}

void sub_20F8042A8(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69DC0;
  if (!qword_254A69DC0)
  {
    __cxa_guard_abort(&qword_254A68E00);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69DC8;
  v4 = (void *)qword_254A69DC0;
  if (qword_254A69DC8 != qword_254A69DC0)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69DC0;
  }
  qword_254A69DC8 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E00);
  _Unwind_Resume(a1);
}

void sub_20F804440(double *a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  double v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  double v10;
  unsigned __int8 v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  kdebug_trace();
  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v7 = *(_QWORD *)(a2 + 184) == 0) : (v7 = 1),
        !v7 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A68E08);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E08))
    {
      qword_254A69DD8 = 0;
      qword_254A69DE0 = 0;
      qword_254A69DE8 = 0;
      sub_20EAC040C((char **)&qword_254A69DD8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A69DD8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69DD8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E08);
    }
    v5 = qword_254A69DD8 + 3360;
    v6 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69DD8 + 3360), *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v5, v6);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E10);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E10))
    {
      qword_254A69DF0 = 0;
      qword_254A69DF8 = 0;
      qword_254A69E00 = 0;
      sub_20EAC040C((char **)&qword_254A69DF0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A69DF0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69DF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E10);
    }
    v9 = qword_254A69DF0 + 3384;
    v10 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69DF0 + 3384), a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E18);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E18))
    {
      qword_254A69E08 = 0;
      qword_254A69E10 = 0;
      qword_254A69E18 = 0;
      sub_20EAC040C((char **)&qword_254A69E08, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A69E08);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69E08, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E18);
    }
    v12 = qword_254A69E08 + 3408;
    v13 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A69E08 + 3408), a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v12, v13);
  }
}

void sub_20F804778(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69E08;
  if (!qword_254A69E08)
  {
    __cxa_guard_abort(&qword_254A68E18);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69E10;
  v4 = (void *)qword_254A69E08;
  if (qword_254A69E10 != qword_254A69E08)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69E08;
  }
  qword_254A69E10 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E18);
  _Unwind_Resume(a1);
}

void sub_20F804914(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 v7;
  double v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v13;
  unsigned __int8 v14;
  double v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  if (*(_BYTE *)(a4 + 80)
    || (*(_BYTE *)(a4 + 200) ? (v10 = *(_QWORD *)(a4 + 184) == 0) : (v10 = 1),
        !v10 && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144)))
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254A68E68);
    if ((v7 & 1) == 0)
    {
      v18 = a1;
      v17 = __cxa_guard_acquire(&qword_254A68E68);
      a1 = v18;
      if (v17)
      {
        qword_254A69EF8 = 0;
        qword_254A69F00 = 0;
        qword_254A69F08 = 0;
        sub_20EAC040C((char **)&qword_254A69EF8, 0x147uLL);
        sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A69EF8);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69EF8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68E68);
        a1 = v18;
      }
    }
    v8 = (double)a1;
    v9 = (unsigned __int8 *)(qword_254A69EF8 + 7704);
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, v9, v8);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, (uint64_t)v9, v8);
  }
  if (*(_BYTE *)(a4 + 80)
    || *(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E70);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E70))
    {
      qword_254A69F10 = 0;
      qword_254A69F18 = 0;
      qword_254A69F20 = 0;
      sub_20EAC040C((char **)&qword_254A69F10, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)&v21, &qword_254A69F10);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F10, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E70);
    }
    v12 = (double)a2;
    v13 = qword_254A69F10 + 7728;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69F10 + 7728), v12);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v13, v12);
  }
  if (*(_BYTE *)(a4 + 80)
    || *(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
  {
    v14 = atomic_load((unsigned __int8 *)&qword_254A68E78);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E78))
    {
      qword_254A69F28 = 0;
      qword_254A69F30 = 0;
      qword_254A69F38 = 0;
      sub_20EAC040C((char **)&qword_254A69F28, 0x147uLL);
      sub_20F053F1C((uint64_t)&v24, (uint64_t)&v23, &qword_254A69F28);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F28, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E78);
    }
    v15 = (double)a3;
    v16 = qword_254A69F28 + 7752;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A69F28 + 7752), v15);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v16, v15);
  }
}

void sub_20F804C58(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69F28;
  if (!qword_254A69F28)
  {
    __cxa_guard_abort(&qword_254A68E78);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69F30;
  v4 = (void *)qword_254A69F28;
  if (qword_254A69F30 != qword_254A69F28)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69F28;
  }
  qword_254A69F30 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E78);
  _Unwind_Resume(a1);
}

void sub_20F804DEC(uint64_t a1, double a2, double a3, double a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  BOOL v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 80)
    || (*(_BYTE *)(a1 + 200) ? (v10 = *(_QWORD *)(a1 + 184) == 0) : (v10 = 1),
        !v10 && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144)))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E80);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E80))
    {
      qword_254A69F40 = 0;
      qword_254A69F48 = 0;
      qword_254A69F50 = 0;
      sub_20EAC040C((char **)&qword_254A69F40, 0x147uLL);
      sub_20F053F1C((uint64_t)&v16, (uint64_t)&v15, &qword_254A69F40);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E80);
    }
    v9 = qword_254A69F40 + 3648;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69F40 + 3648), a2);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v9, a2);
  }
  if (*(_BYTE *)(a1 + 80)
    || *(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68E88);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E88))
    {
      qword_254A69F58 = 0;
      qword_254A69F60 = 0;
      qword_254A69F68 = 0;
      sub_20EAC040C((char **)&qword_254A69F58, 0x147uLL);
      sub_20F053F1C((uint64_t)&v18, (uint64_t)&v17, &qword_254A69F58);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F58, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E88);
    }
    v12 = qword_254A69F58 + 3672;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69F58 + 3672), a3);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v12, a3);
  }
  if (*(_BYTE *)(a1 + 80)
    || *(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A68E90);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E90))
    {
      qword_254A69F70 = 0;
      qword_254A69F78 = 0;
      qword_254A69F80 = 0;
      sub_20EAC040C((char **)&qword_254A69F70, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A69F70);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F70, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E90);
    }
    v14 = qword_254A69F70 + 3696;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69F70 + 3696), a4);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v14, a4);
  }
}

void sub_20F80512C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69F70;
  if (!qword_254A69F70)
  {
    __cxa_guard_abort(&qword_254A68E90);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69F78;
  v4 = (void *)qword_254A69F70;
  if (qword_254A69F78 != qword_254A69F70)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69F70;
  }
  qword_254A69F78 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68E90);
  _Unwind_Resume(a1);
}

void sub_20F8052C8(uint64_t a1, double a2, double a3, double a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  BOOL v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 80)
    || (*(_BYTE *)(a1 + 200) ? (v10 = *(_QWORD *)(a1 + 184) == 0) : (v10 = 1),
        !v10 && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144)))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68E98);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68E98))
    {
      qword_254A69F88 = 0;
      qword_254A69F90 = 0;
      qword_254A69F98 = 0;
      sub_20EAC040C((char **)&qword_254A69F88, 0x147uLL);
      sub_20F053F1C((uint64_t)&v16, (uint64_t)&v15, &qword_254A69F88);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69F88, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68E98);
    }
    v9 = qword_254A69F88 + 3720;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69F88 + 3720), a2);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v9, a2);
  }
  if (*(_BYTE *)(a1 + 80)
    || *(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A68EA0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EA0))
    {
      qword_254A69FA0 = 0;
      qword_254A69FA8 = 0;
      qword_254A69FB0 = 0;
      sub_20EAC040C((char **)&qword_254A69FA0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v18, (uint64_t)&v17, &qword_254A69FA0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69FA0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68EA0);
    }
    v12 = qword_254A69FA0 + 3744;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69FA0 + 3744), a3);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v12, a3);
  }
  if (*(_BYTE *)(a1 + 80)
    || *(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A68EA8);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EA8))
    {
      qword_254A69FB8 = 0;
      qword_254A69FC0 = 0;
      qword_254A69FC8 = 0;
      sub_20EAC040C((char **)&qword_254A69FB8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A69FB8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69FB8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68EA8);
    }
    v14 = qword_254A69FB8 + 3768;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A69FB8 + 3768), a4);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v14, a4);
  }
}

void sub_20F805608(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A69FB8;
  if (!qword_254A69FB8)
  {
    __cxa_guard_abort(&qword_254A68EA8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A69FC0;
  v4 = (void *)qword_254A69FB8;
  if (qword_254A69FC0 != qword_254A69FB8)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A69FB8;
  }
  qword_254A69FC0 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68EA8);
  _Unwind_Resume(a1);
}

void sub_20F8057A4(double *a1, uint64_t a2, double a3, double a4)
{
  unsigned __int8 v8;
  unsigned __int8 *v9;
  double v10;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  double v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  double v17;
  double v18;
  unsigned __int8 v20;
  double v26;
  unsigned __int8 *v27;
  unsigned __int8 v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (_ZF = *(_QWORD *)(a2 + 184) == 0) : (_ZF = 1),
        !_ZF && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254A68EB0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EB0))
    {
      qword_254A69FD0 = 0;
      qword_254A69FD8 = 0;
      qword_254A69FE0 = 0;
      sub_20EAC040C((char **)&qword_254A69FD0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v35, (uint64_t)&v34, &qword_254A69FD0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69FD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68EB0);
    }
    v9 = (unsigned __int8 *)(qword_254A69FD0 + 3792);
    v10 = *a1;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v9, *a1);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v9, v10);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A68EB8);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EB8))
    {
      qword_254A69FE8 = 0;
      qword_254A69FF0 = 0;
      qword_254A69FF8 = 0;
      sub_20EAC040C((char **)&qword_254A69FE8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v37, (uint64_t)&v36, &qword_254A69FE8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A69FE8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68EB8);
    }
    v13 = (unsigned __int8 *)(qword_254A69FE8 + 3816);
    v14 = a1[1];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v13, a1[1]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v13, v14);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A68EC0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EC0))
    {
      qword_254A6A000 = 0;
      qword_254A6A008 = 0;
      qword_254A6A010 = 0;
      sub_20EAC040C((char **)&qword_254A6A000, 0x147uLL);
      sub_20F053F1C((uint64_t)&v39, (uint64_t)&v38, &qword_254A6A000);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A000, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68EC0);
    }
    v16 = (unsigned __int8 *)(qword_254A6A000 + 3840);
    v17 = a1[2];
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v16, a1[2]);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v16, v17);
  }
  v18 = a1[2];
  _Q2 = *(_OWORD *)a1;
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v20 = atomic_load((unsigned __int8 *)&qword_254A68EC8);
    if ((v20 & 1) == 0)
    {
      v33 = *(_OWORD *)a1;
      v32 = __cxa_guard_acquire(&qword_254A68EC8);
      *((_QWORD *)&_Q2 + 1) = *((_QWORD *)&v33 + 1);
      if (v32)
      {
        qword_254A6A018 = 0;
        qword_254A6A020 = 0;
        qword_254A6A028 = 0;
        sub_20EAC040C((char **)&qword_254A6A018, 0x147uLL);
        sub_20F053F1C((uint64_t)&v41, (uint64_t)&v40, &qword_254A6A018);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A018, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68EC8);
        *((_QWORD *)&_Q2 + 1) = *((_QWORD *)&v33 + 1);
      }
    }
    _D1 = *((_QWORD *)&_Q2 + 1);
    __asm { FMLA            D0, D1, V2.D[1] }
    v26 = sqrt(_D0 + v18 * v18);
    v27 = (unsigned __int8 *)(qword_254A6A018 + 3864);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v27, v26);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v27, v26);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v28 = atomic_load((unsigned __int8 *)&qword_254A68ED0);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A68ED0))
    {
      qword_254A6A030 = 0;
      qword_254A6A038 = 0;
      qword_254A6A040 = 0;
      sub_20EAC040C((char **)&qword_254A6A030, 0x147uLL);
      sub_20F053F1C((uint64_t)&v43, (uint64_t)&v42, &qword_254A6A030);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A030, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68ED0);
    }
    v29 = qword_254A6A030 + 3888;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A6A030 + 3888), a3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v29, a3);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_254A68ED8);
    if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A68ED8))
    {
      qword_254A6A048 = 0;
      qword_254A6A050 = 0;
      qword_254A6A058 = 0;
      sub_20EAC040C((char **)&qword_254A6A048, 0x147uLL);
      sub_20F053F1C((uint64_t)&v45, (uint64_t)&v44, &qword_254A6A048);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A048, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68ED8);
    }
    v31 = qword_254A6A048 + 3912;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A6A048 + 3912), a4);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v31, a4);
  }
}

void sub_20F805DCC(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6A048;
  if (!qword_254A6A048)
  {
    __cxa_guard_abort(&qword_254A68ED8);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6A050;
  v4 = (void *)qword_254A6A048;
  if (qword_254A6A050 != qword_254A6A048)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6A048;
  }
  qword_254A6A050 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68ED8);
  _Unwind_Resume(a1);
}

void sub_20F8060EC(uint64_t a1, double a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;

  if (*(_BYTE *)(a1 + 80)
    || (*(_BYTE *)(a1 + 200) ? (v6 = *(_QWORD *)(a1 + 184) == 0) : (v6 = 1),
        !v6 && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144)))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A54FA8);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A54FA8))
    {
      qword_254A54F90 = 0;
      qword_254A54F98 = 0;
      qword_254A54FA0 = 0;
      sub_20EAC040C((char **)&qword_254A54F90, 0x147uLL);
      sub_20F053F1C((uint64_t)&v8, (uint64_t)&v7, &qword_254A54F90);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54F90, &dword_20E81F000);
      __cxa_guard_release(&qword_254A54FA8);
    }
    v5 = qword_254A54F90 + 7224;
    if (*(_BYTE *)(a1 + 80))
      sub_20FDBBC20(a1, (unsigned __int8 *)(qword_254A54F90 + 7224), a2);
    if (*(_BYTE *)(a1 + 200) && *(_QWORD *)(a1 + 184) && *(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 144))
      sub_210214860(a1 + 88, v5, a2);
  }
}

void sub_20F806224(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54F90;
  if (qword_254A54F90)
  {
    v3 = qword_254A54F98;
    v4 = (void *)qword_254A54F90;
    if (qword_254A54F98 != qword_254A54F90)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54F90;
    }
    qword_254A54F98 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54FA8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F806290(uint64_t *result, double a2, double a3, double a4)
{
  BOOL v4;
  uint64_t *v5;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  double v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  if (*((_BYTE *)result + 200))
    v4 = result[23] == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    if (result[17] != result[18])
    {
      v8 = atomic_load((unsigned __int8 *)&qword_254A68EE0);
      if ((v8 & 1) == 0)
      {
        v13 = a2;
        v12 = __cxa_guard_acquire(&qword_254A68EE0);
        a2 = v13;
        if (v12)
        {
          qword_254A6A060 = 0;
          qword_254A6A068 = 0;
          qword_254A6A070 = 0;
          sub_20EAC040C((char **)&qword_254A6A060, 0x147uLL);
          sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A6A060);
          __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A060, &dword_20E81F000);
          __cxa_guard_release(&qword_254A68EE0);
          a2 = v13;
        }
      }
      v9 = (uint64_t)(v5 + 11);
      sub_210214860(v9, qword_254A6A060 + 7488, a2);
      v10 = atomic_load((unsigned __int8 *)&qword_254A68EE8);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68EE8))
      {
        qword_254A6A078 = 0;
        qword_254A6A080 = 0;
        qword_254A6A088 = 0;
        sub_20EAC040C((char **)&qword_254A6A078, 0x147uLL);
        sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A6A078);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A078, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68EE8);
      }
      sub_210214860(v9, qword_254A6A078 + 7512, a3);
      v11 = atomic_load((unsigned __int8 *)&qword_254A68EF0);
      if ((v11 & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_254A68EF0))
        {
          qword_254A6A090 = 0;
          qword_254A6A098 = 0;
          qword_254A6A0A0 = 0;
          sub_20EAC040C((char **)&qword_254A6A090, 0x147uLL);
          sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A6A090);
          __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A090, &dword_20E81F000);
          __cxa_guard_release(&qword_254A68EF0);
        }
      }
      return sub_210214860(v9, qword_254A6A090 + 7536, a4);
    }
  }
  return result;
}

void sub_20F8064BC(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6A090;
  if (!qword_254A6A090)
  {
    __cxa_guard_abort(&qword_254A68EF0);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6A098;
  v4 = (void *)qword_254A6A090;
  if (qword_254A6A098 != qword_254A6A090)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6A090;
  }
  qword_254A6A098 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68EF0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F806650(uint64_t *result, uint64_t a2, double a3)
{
  BOOL v3;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  if (*(_BYTE *)(a2 + 200))
    v3 = *(_QWORD *)(a2 + 184) == 0;
  else
    v3 = 1;
  if (!v3 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v5 = result;
    LODWORD(a3) = *(_DWORD *)result;
    v6 = atomic_load((unsigned __int8 *)&qword_254A68EF8);
    v7 = &qword_254A6A000;
    if ((v6 & 1) == 0)
    {
      v20 = a3;
      v16 = __cxa_guard_acquire(&qword_254A68EF8);
      a3 = v20;
      v7 = &qword_254A6A000;
      if (v16)
      {
        qword_254A6A0A8 = 0;
        qword_254A6A0B0 = 0;
        qword_254A6A0B8 = 0;
        sub_20EAC040C((char **)&qword_254A6A0A8, 0x147uLL);
        sub_20F053F1C((uint64_t)&v25, (uint64_t)&v24, &qword_254A6A0A8);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A0A8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68EF8);
        v7 = &qword_254A6A000;
        a3 = v20;
      }
    }
    v8 = a2 + 88;
    sub_210214860(v8, v7[21] + 3936, (double)*(unint64_t *)&a3);
    LODWORD(v9) = *((_DWORD *)v5 + 1);
    v10 = atomic_load((unsigned __int8 *)&qword_254A68F00);
    v11 = &qword_254A6A000;
    if ((v10 & 1) == 0)
    {
      v21 = v9;
      v17 = __cxa_guard_acquire(&qword_254A68F00);
      v9 = v21;
      v11 = &qword_254A6A000;
      if (v17)
      {
        qword_254A6A0C0 = 0;
        qword_254A6A0C8 = 0;
        qword_254A6A0D0 = 0;
        sub_20EAC040C((char **)&qword_254A6A0C0, 0x147uLL);
        sub_20F053F1C((uint64_t)&v27, (uint64_t)&v26, &qword_254A6A0C0);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A0C0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68F00);
        v11 = &qword_254A6A000;
        v9 = v21;
      }
    }
    sub_210214860(v8, v11[24] + 3960, (double)v9);
    LODWORD(v12) = *((_DWORD *)v5 + 2);
    v13 = atomic_load((unsigned __int8 *)&qword_254A68F08);
    if ((v13 & 1) == 0)
    {
      v22 = v12;
      v18 = __cxa_guard_acquire(&qword_254A68F08);
      v12 = v22;
      if (v18)
      {
        qword_254A6A0D8 = 0;
        qword_254A6A0E0 = 0;
        qword_254A6A0E8 = 0;
        sub_20EAC040C((char **)&qword_254A6A0D8, 0x147uLL);
        sub_20F053F1C((uint64_t)&v29, (uint64_t)&v28, &qword_254A6A0D8);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A0D8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68F08);
        v12 = v22;
      }
    }
    sub_210214860(v8, qword_254A6A0D8 + 3984, (double)v12);
    LODWORD(v14) = *((_DWORD *)v5 + 3);
    v15 = atomic_load((unsigned __int8 *)&qword_254A68F10);
    if ((v15 & 1) == 0)
    {
      v23 = v14;
      v19 = __cxa_guard_acquire(&qword_254A68F10);
      v14 = v23;
      if (v19)
      {
        qword_254A6A0F0 = 0;
        qword_254A6A0F8 = 0;
        qword_254A6A100 = 0;
        sub_20EAC040C((char **)&qword_254A6A0F0, 0x147uLL);
        sub_20F053F1C((uint64_t)&v31, (uint64_t)&v30, &qword_254A6A0F0);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A0F0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A68F10);
        v14 = v23;
      }
    }
    return sub_210214860(v8, qword_254A6A0F0 + 4008, (double)v14);
  }
  return result;
}

void sub_20F80693C(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6A0F0;
  if (!qword_254A6A0F0)
  {
    __cxa_guard_abort(&qword_254A68F10);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6A0F8;
  v4 = (void *)qword_254A6A0F0;
  if (qword_254A6A0F8 != qword_254A6A0F0)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6A0F0;
  }
  qword_254A6A0F8 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A68F10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F806B64(uint64_t *result, uint64_t a2)
{
  uint64_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  uint64_t v10;
  double v11;
  __int128 v12;
  float64x2_t v19;
  double v20;
  unsigned __int8 v21;
  uint64_t *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  unsigned __int8 v27;
  uint64_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  uint64_t v34;
  double v35;
  __int128 v36;
  float64x2_t v40;
  double v41;
  unsigned __int8 v42;
  uint64_t *v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t *v46;
  unsigned __int8 v47;
  uint64_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t v53;
  uint64_t v54;
  double v55;
  __int128 v56;
  float64x2_t v60;
  double v61;
  unsigned __int8 v62;
  uint64_t *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  uint64_t *v66;
  unsigned __int8 v67;
  uint64_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t *v72;
  float64x2_t v73;
  uint64_t v74;
  double v75;
  __int128 v76;
  float64x2_t v80;
  double v81;
  unsigned __int8 v82;
  uint64_t *v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  uint64_t *v86;
  unsigned __int8 v87;
  uint64_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t *v92;
  float64x2_t v93;
  uint64_t v94;
  double v95;
  __int128 v96;
  float64x2_t v100;
  double v101;
  unsigned __int8 v102;
  uint64_t *v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  uint64_t *v106;
  unsigned __int8 v107;
  uint64_t *v108;
  float64x2_t *v109;
  float64x2_t *v110;
  float64x2_t v111;
  float64x2_t *v112;
  float64x2_t v113;
  uint64_t v114;
  double v115;
  __int128 v116;
  float64x2_t v120;
  double v121;
  unsigned __int8 v122;
  uint64_t *v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t *v126;
  unsigned __int8 v127;
  uint64_t *v128;
  char *v129;
  float64x2_t *v130;
  float64x2_t v131;
  float64x2_t *v132;
  float64x2_t v133;
  unsigned __int8 v134;
  uint64_t *v135;
  unsigned __int8 v136;
  uint64_t *v137;
  float64x2_t *v138;
  float64x2_t *v139;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  uint64_t v143;
  double v144;
  __int128 v145;
  float64x2_t v149;
  double v150;
  unsigned __int8 v151;
  uint64_t *v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  uint64_t *v155;
  unsigned __int8 v156;
  uint64_t *v157;
  float64x2_t *v158;
  float64x2_t *v159;
  float64x2_t v160;
  float64x2_t *v161;
  float64x2_t v162;
  uint64_t v163;
  double v164;
  __int128 v165;
  float64x2_t v169;
  double v170;
  unsigned __int8 v171;
  uint64_t *v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  uint64_t *v175;
  unsigned __int8 v176;
  uint64_t *v177;
  float64x2_t *v178;
  float64x2_t *v179;
  float64x2_t v180;
  float64x2_t *v181;
  float64x2_t v182;
  uint64_t v183;
  double v184;
  __int128 v185;
  float64x2_t v189;
  double v190;
  unsigned __int8 v191;
  uint64_t *v192;
  unsigned __int8 v193;
  unsigned __int8 v194;
  uint64_t *v195;
  unsigned __int8 v196;
  uint64_t *v197;
  float64x2_t *v198;
  float64x2_t *v199;
  float64x2_t v200;
  float64x2_t *v201;
  float64x2_t v202;
  uint64_t v203;
  double v204;
  __int128 v205;
  float64x2_t v209;
  double v210;
  unsigned __int8 v211;
  uint64_t *v212;
  unsigned __int8 v213;
  unsigned __int8 v214;
  uint64_t *v215;
  unsigned __int8 v216;
  uint64_t *v217;
  float64x2_t *v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t *v221;
  float64x2_t v222;
  uint64_t v223;
  double v224;
  __int128 v225;
  float64x2_t v229;
  double v230;
  unsigned __int8 v231;
  uint64_t *v232;
  unsigned __int8 v233;
  unsigned __int8 v234;
  uint64_t *v235;
  unsigned __int8 v236;
  uint64_t *v237;
  float64x2_t *v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t *v241;
  float64x2_t v242;
  uint64_t v243;
  double v244;
  __int128 v245;
  float64x2_t v249;
  double v250;
  unsigned __int8 v251;
  uint64_t *v252;
  unsigned __int8 v253;
  unsigned __int8 v254;
  uint64_t *v255;
  unsigned __int8 v256;
  uint64_t *v257;
  char *v258;
  float64x2_t *v259;
  float64x2_t v260;
  float64x2_t *v261;
  float64x2_t v262;
  unsigned __int8 v263;
  uint64_t *v264;
  unsigned __int8 v265;
  uint64_t *v266;
  float64x2_t *v267;
  float64x2_t *v268;
  float64x2_t v269;
  float64x2_t *v270;
  float64x2_t v271;
  uint64_t v272;
  double v273;
  __int128 v274;
  float64x2_t v278;
  double v279;
  unsigned __int8 v280;
  uint64_t *v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  uint64_t *v284;
  unsigned __int8 v285;
  uint64_t *v286;
  float64x2_t *v287;
  float64x2_t *v288;
  float64x2_t v289;
  float64x2_t *v290;
  float64x2_t v291;
  uint64_t v292;
  double v293;
  __int128 v294;
  float64x2_t v298;
  double v299;
  unsigned __int8 v300;
  uint64_t *v301;
  unsigned __int8 v302;
  unsigned __int8 v303;
  uint64_t *v304;
  unsigned __int8 v305;
  uint64_t *v306;
  float64x2_t *v307;
  float64x2_t *v308;
  float64x2_t v309;
  float64x2_t *v310;
  float64x2_t v311;
  uint64_t v312;
  double v313;
  __int128 v314;
  float64x2_t v318;
  double v319;
  unsigned __int8 v320;
  uint64_t *v321;
  unsigned __int8 v322;
  unsigned __int8 v323;
  uint64_t *v324;
  unsigned __int8 v325;
  uint64_t *v326;
  float64x2_t *v327;
  float64x2_t *v328;
  float64x2_t v329;
  float64x2_t *v330;
  float64x2_t v331;
  uint64_t v332;
  double v333;
  __int128 v334;
  float64x2_t v338;
  double v339;
  unsigned __int8 v340;
  uint64_t *v341;
  unsigned __int8 v342;
  unsigned __int8 v343;
  uint64_t *v344;
  unsigned __int8 v345;
  uint64_t *v346;
  float64x2_t *v347;
  float64x2_t *v348;
  float64x2_t v349;
  float64x2_t *v350;
  float64x2_t v351;
  uint64_t v352;
  double v353;
  __int128 v354;
  float64x2_t v358;
  double v359;
  unsigned __int8 v360;
  uint64_t *v361;
  unsigned __int8 v362;
  unsigned __int8 v363;
  uint64_t *v364;
  unsigned __int8 v365;
  uint64_t *v366;
  float64x2_t *v367;
  float64x2_t *v368;
  float64x2_t v369;
  float64x2_t *v370;
  float64x2_t v371;
  uint64_t v372;
  double v373;
  __int128 v374;
  float64x2_t v378;
  double v379;
  unsigned __int8 v380;
  uint64_t *v381;
  unsigned __int8 v382;
  unsigned __int8 v383;
  uint64_t *v384;
  unsigned __int8 v385;
  uint64_t *v386;
  char *v387;
  float64x2_t *v388;
  float64x2_t v389;
  float64x2_t *v390;
  float64x2_t v391;
  unsigned __int8 v392;
  uint64_t *v393;
  unsigned __int8 v394;
  uint64_t *v395;
  uint64_t v396;
  int8x16_t v397;
  unsigned __int8 v398;
  uint64_t *v399;
  unsigned __int8 v400;
  unsigned __int8 v401;
  uint64_t *v402;
  unsigned __int8 v403;
  uint64_t *v404;
  unsigned __int8 v405;
  uint64_t *v406;
  unsigned __int8 v407;
  uint64_t *v408;
  unsigned __int8 v409;
  uint64_t *v410;
  unsigned __int8 v411;
  uint64_t *v412;
  unsigned __int8 v413;
  uint64_t *v414;
  unsigned __int8 v415;
  uint64_t *v416;
  unsigned __int8 v417;
  uint64_t *v418;
  unsigned __int8 v419;
  uint64_t *v420;
  unsigned __int8 v421;
  uint64_t *v422;
  unsigned __int8 v423;
  uint64_t *v424;
  unsigned __int8 v425;
  uint64_t *v426;
  unsigned __int8 v427;
  uint64_t *v428;
  uint64_t v429;
  int8x16_t v430;
  unsigned __int8 v431;
  uint64_t *v432;
  unsigned __int8 v433;
  unsigned __int8 v434;
  uint64_t *v435;
  unsigned __int8 v436;
  uint64_t *v437;
  unsigned __int8 v438;
  uint64_t *v439;
  unsigned __int8 v440;
  uint64_t *v441;
  unsigned __int8 v442;
  uint64_t *v443;
  unsigned __int8 v444;
  uint64_t *v445;
  unsigned __int8 v446;
  uint64_t *v447;
  unsigned __int8 v448;
  uint64_t *v449;
  unsigned __int8 v450;
  uint64_t *v451;
  unsigned __int8 v452;
  uint64_t *v453;
  unsigned __int8 v454;
  uint64_t *v455;
  unsigned __int8 v456;
  uint64_t *v457;
  unsigned __int8 v458;
  uint64_t *v459;
  unsigned __int8 v460;
  uint64_t *v461;
  double *v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  unsigned __int8 v471;
  uint64_t *v472;
  unsigned __int8 v473;
  unsigned __int8 v474;
  uint64_t *v475;
  unsigned __int8 v476;
  uint64_t *v477;
  unsigned __int8 v478;
  uint64_t *v479;
  unsigned __int8 v480;
  uint64_t *v481;
  unsigned __int8 v482;
  uint64_t *v483;
  unsigned __int8 v484;
  uint64_t *v485;
  unsigned __int8 v486;
  uint64_t *v487;
  unsigned __int8 v488;
  uint64_t *v489;
  unsigned __int8 v490;
  uint64_t *v491;
  unsigned __int8 v492;
  uint64_t *v493;
  unsigned __int8 v494;
  uint64_t *v495;
  unsigned __int8 v496;
  uint64_t *v497;
  unsigned __int8 v498;
  uint64_t *v499;
  unsigned __int8 v500;
  uint64_t *v501;
  unsigned __int8 v502;
  uint64_t *v503;
  unsigned __int8 v504;
  uint64_t *v505;
  unsigned __int8 v506;
  uint64_t *v507;
  unsigned __int8 v508;
  uint64_t *v509;
  unsigned __int8 v510;
  uint64_t *v511;
  unsigned __int8 v512;
  uint64_t *v513;
  unsigned __int8 v514;
  uint64_t *v515;
  unsigned __int8 v516;
  uint64_t *v517;
  unsigned __int8 v518;
  uint64_t *v519;
  unsigned __int8 v520;
  uint64_t *v521;
  unsigned __int8 v522;
  uint64_t *v523;
  unsigned __int8 v524;
  uint64_t *v525;
  unsigned __int8 v526;
  uint64_t *v527;
  unsigned __int8 v528;
  uint64_t *v529;
  unsigned __int8 v530;
  uint64_t *v531;
  unsigned __int8 v532;
  unsigned __int8 v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  double v656;
  double v657;
  int8x16_t v658;
  int8x16_t v659;
  double v660;
  double v661;
  int8x16_t v662;
  int8x16_t v663;
  double v664;
  double v665;
  int8x16_t v666;
  int8x16_t v667;
  double v668;
  double v669;
  int8x16_t v670;
  int8x16_t v671;
  double v672;
  double v673;
  double v674;
  double v675;
  int8x16_t v676;
  int8x16_t v677;
  double v678;
  double v679;
  double v680;
  double v681;
  int8x16_t v682;
  int8x16_t v683;
  double v684;
  double v685;
  double v686;
  double v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  double v709;
  double v710;
  double v711;
  char v712;
  char v713;

  if (*(_BYTE *)(a2 + 200))
    _ZF = *(_QWORD *)(a2 + 184) == 0;
  else
    _ZF = 1;
  if (_ZF || *(_QWORD *)(a2 + 136) == *(_QWORD *)(a2 + 144))
    return result;
  v4 = result;
  v5 = (float64x2_t *)result[8];
  v6 = (float64x2_t *)result[9];
  if (v5 == v6)
  {
    v20 = 0.0;
    v19.f64[0] = 0.0;
    v23 = atomic_load((unsigned __int8 *)&qword_254A68F18);
    v22 = &qword_254A6A000;
    v688 = 0u;
    if ((v23 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v7 = 0uLL;
    v8 = (float64x2_t *)result[8];
    do
    {
      v9 = *v8++;
      v7 = vaddq_f64(v7, v9);
    }
    while (v8 != v6);
    v10 = v6 - v5;
    v11 = 0.0;
    do
    {
      v12 = (__int128)*v5++;
      _V4.D[1] = *((_QWORD *)&v12 + 1);
      _D6 = *((_QWORD *)&v12 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v11 = v11 + _D5;
    }
    while (v5 != v6);
    v19 = vmulq_n_f64(v7, 1.0 / (double)(unint64_t)v10);
    v20 = 0.5 / (double)(unint64_t)v10 * v11;
    v21 = atomic_load((unsigned __int8 *)&qword_254A68F18);
    v22 = &qword_254A6A000;
    v688 = v19;
    if ((v21 & 1) != 0)
      goto LABEL_14;
  }
  v534 = __cxa_guard_acquire(&qword_254A68F18);
  v19.f64[0] = v688.f64[0];
  v22 = &qword_254A6A000;
  if (v534)
  {
    qword_254A6A108 = 0;
    qword_254A6A110 = 0;
    qword_254A6A118 = 0;
    sub_20EAC040C((char **)&qword_254A6A108, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A108);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A108, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F18);
    v22 = &qword_254A6A000;
    v19.f64[0] = v688.f64[0];
  }
LABEL_14:
  v24 = a2 + 88;
  sub_210214860(v24, v22[33] + 4248, v19.f64[0]);
  v25 = atomic_load((unsigned __int8 *)&qword_254A68F20);
  v26 = &qword_254A6A000;
  if ((v25 & 1) == 0)
  {
    v535 = __cxa_guard_acquire(&qword_254A68F20);
    v26 = &qword_254A6A000;
    if (v535)
    {
      qword_254A6A120 = 0;
      qword_254A6A128 = 0;
      qword_254A6A130 = 0;
      sub_20EAC040C((char **)&qword_254A6A120, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A120);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A120, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F20);
      v26 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v26[36] + 4272, v688.f64[1]);
  v27 = atomic_load((unsigned __int8 *)&qword_254A68F28);
  v28 = &qword_254A6A000;
  if ((v27 & 1) == 0)
  {
    v536 = __cxa_guard_acquire(&qword_254A68F28);
    v28 = &qword_254A6A000;
    if (v536)
    {
      qword_254A6A138 = 0;
      qword_254A6A140 = 0;
      qword_254A6A148 = 0;
      sub_20EAC040C((char **)&qword_254A6A138, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A138);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A138, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F28);
      v28 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v28[39] + 4296, sqrt(v20));
  v29 = (float64x2_t *)v4[11];
  v30 = (float64x2_t *)v4[12];
  if (v29 == v30)
  {
    v41 = 0.0;
    v40.f64[0] = 0.0;
    v44 = atomic_load((unsigned __int8 *)&qword_254A68F30);
    v43 = &qword_254A6A000;
    v689 = 0u;
    if ((v44 & 1) != 0)
      goto LABEL_24;
  }
  else
  {
    v31 = 0uLL;
    v32 = (float64x2_t *)v4[11];
    do
    {
      v33 = *v32++;
      v31 = vaddq_f64(v31, v33);
    }
    while (v32 != v30);
    v34 = v30 - v29;
    v35 = 0.0;
    do
    {
      v36 = (__int128)*v29++;
      _V4.D[1] = *((_QWORD *)&v36 + 1);
      _D6 = *((_QWORD *)&v36 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v35 = v35 + _D5;
    }
    while (v29 != v30);
    v40 = vmulq_n_f64(v31, 1.0 / (double)(unint64_t)v34);
    v41 = 0.5 / (double)(unint64_t)v34 * v35;
    v42 = atomic_load((unsigned __int8 *)&qword_254A68F30);
    v43 = &qword_254A6A000;
    v689 = v40;
    if ((v42 & 1) != 0)
      goto LABEL_24;
  }
  v537 = __cxa_guard_acquire(&qword_254A68F30);
  v40.f64[0] = v689.f64[0];
  v43 = &qword_254A6A000;
  if (v537)
  {
    qword_254A6A150 = 0;
    qword_254A6A158 = 0;
    qword_254A6A160 = 0;
    sub_20EAC040C((char **)&qword_254A6A150, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A150);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A150, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F30);
    v43 = &qword_254A6A000;
    v40.f64[0] = v689.f64[0];
  }
LABEL_24:
  sub_210214860(v24, v43[42] + 4320, v40.f64[0]);
  v45 = atomic_load((unsigned __int8 *)&qword_254A68F38);
  v46 = &qword_254A6A000;
  if ((v45 & 1) == 0)
  {
    v538 = __cxa_guard_acquire(&qword_254A68F38);
    v46 = &qword_254A6A000;
    if (v538)
    {
      qword_254A6A168 = 0;
      qword_254A6A170 = 0;
      qword_254A6A178 = 0;
      sub_20EAC040C((char **)&qword_254A6A168, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A168);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A168, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F38);
      v46 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v46[45] + 4344, v689.f64[1]);
  v47 = atomic_load((unsigned __int8 *)&qword_254A68F40);
  v48 = &qword_254A6A000;
  if ((v47 & 1) == 0)
  {
    v539 = __cxa_guard_acquire(&qword_254A68F40);
    v48 = &qword_254A6A000;
    if (v539)
    {
      qword_254A6A180 = 0;
      qword_254A6A188 = 0;
      qword_254A6A190 = 0;
      sub_20EAC040C((char **)&qword_254A6A180, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A180);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A180, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F40);
      v48 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v48[48] + 4368, sqrt(v41));
  v49 = (float64x2_t *)v4[14];
  v50 = (float64x2_t *)v4[15];
  if (v49 == v50)
  {
    v61 = 0.0;
    v60.f64[0] = 0.0;
    v64 = atomic_load((unsigned __int8 *)&qword_254A68F48);
    v63 = &qword_254A6A000;
    v690 = 0u;
    if ((v64 & 1) != 0)
      goto LABEL_34;
  }
  else
  {
    v51 = 0uLL;
    v52 = (float64x2_t *)v4[14];
    do
    {
      v53 = *v52++;
      v51 = vaddq_f64(v51, v53);
    }
    while (v52 != v50);
    v54 = v50 - v49;
    v55 = 0.0;
    do
    {
      v56 = (__int128)*v49++;
      _V4.D[1] = *((_QWORD *)&v56 + 1);
      _D6 = *((_QWORD *)&v56 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v55 = v55 + _D5;
    }
    while (v49 != v50);
    v60 = vmulq_n_f64(v51, 1.0 / (double)(unint64_t)v54);
    v61 = 0.5 / (double)(unint64_t)v54 * v55;
    v62 = atomic_load((unsigned __int8 *)&qword_254A68F48);
    v63 = &qword_254A6A000;
    v690 = v60;
    if ((v62 & 1) != 0)
      goto LABEL_34;
  }
  v540 = __cxa_guard_acquire(&qword_254A68F48);
  v60.f64[0] = v690.f64[0];
  v63 = &qword_254A6A000;
  if (v540)
  {
    qword_254A6A198 = 0;
    qword_254A6A1A0 = 0;
    qword_254A6A1A8 = 0;
    sub_20EAC040C((char **)&qword_254A6A198, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A198);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A198, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F48);
    v63 = &qword_254A6A000;
    v60.f64[0] = v690.f64[0];
  }
LABEL_34:
  sub_210214860(v24, v63[51] + 4392, v60.f64[0]);
  v65 = atomic_load((unsigned __int8 *)&qword_254A68F50);
  v66 = &qword_254A6A000;
  if ((v65 & 1) == 0)
  {
    v541 = __cxa_guard_acquire(&qword_254A68F50);
    v66 = &qword_254A6A000;
    if (v541)
    {
      qword_254A6A1B0 = 0;
      qword_254A6A1B8 = 0;
      qword_254A6A1C0 = 0;
      sub_20EAC040C((char **)&qword_254A6A1B0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A1B0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A1B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F50);
      v66 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v66[54] + 4416, v690.f64[1]);
  v67 = atomic_load((unsigned __int8 *)&qword_254A68F58);
  v68 = &qword_254A6A000;
  if ((v67 & 1) == 0)
  {
    v542 = __cxa_guard_acquire(&qword_254A68F58);
    v68 = &qword_254A6A000;
    if (v542)
    {
      qword_254A6A1C8 = 0;
      qword_254A6A1D0 = 0;
      qword_254A6A1D8 = 0;
      sub_20EAC040C((char **)&qword_254A6A1C8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A1C8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A1C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F58);
      v68 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v68[57] + 4440, sqrt(v61));
  v69 = (float64x2_t *)v4[17];
  v70 = (float64x2_t *)v4[18];
  if (v69 == v70)
  {
    v81 = 0.0;
    v80.f64[0] = 0.0;
    v84 = atomic_load((unsigned __int8 *)&qword_254A68F60);
    v83 = &qword_254A6A000;
    v691 = 0u;
    if ((v84 & 1) != 0)
      goto LABEL_44;
  }
  else
  {
    v71 = 0uLL;
    v72 = (float64x2_t *)v4[17];
    do
    {
      v73 = *v72++;
      v71 = vaddq_f64(v71, v73);
    }
    while (v72 != v70);
    v74 = v70 - v69;
    v75 = 0.0;
    do
    {
      v76 = (__int128)*v69++;
      _V4.D[1] = *((_QWORD *)&v76 + 1);
      _D6 = *((_QWORD *)&v76 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v75 = v75 + _D5;
    }
    while (v69 != v70);
    v80 = vmulq_n_f64(v71, 1.0 / (double)(unint64_t)v74);
    v81 = 0.5 / (double)(unint64_t)v74 * v75;
    v82 = atomic_load((unsigned __int8 *)&qword_254A68F60);
    v83 = &qword_254A6A000;
    v691 = v80;
    if ((v82 & 1) != 0)
      goto LABEL_44;
  }
  v543 = __cxa_guard_acquire(&qword_254A68F60);
  v80.f64[0] = v691.f64[0];
  v83 = &qword_254A6A000;
  if (v543)
  {
    qword_254A6A1E0 = 0;
    qword_254A6A1E8 = 0;
    qword_254A6A1F0 = 0;
    sub_20EAC040C((char **)&qword_254A6A1E0, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A1E0);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A1E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F60);
    v83 = &qword_254A6A000;
    v80.f64[0] = v691.f64[0];
  }
LABEL_44:
  sub_210214860(v24, v83[60] + 4464, v80.f64[0]);
  v85 = atomic_load((unsigned __int8 *)&qword_254A68F68);
  v86 = &qword_254A6A000;
  if ((v85 & 1) == 0)
  {
    v544 = __cxa_guard_acquire(&qword_254A68F68);
    v86 = &qword_254A6A000;
    if (v544)
    {
      qword_254A6A1F8 = 0;
      qword_254A6A200 = 0;
      qword_254A6A208 = 0;
      sub_20EAC040C((char **)&qword_254A6A1F8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A1F8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A1F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F68);
      v86 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v86[63] + 4488, v691.f64[1]);
  v87 = atomic_load((unsigned __int8 *)&qword_254A68F70);
  v88 = &qword_254A6A000;
  if ((v87 & 1) == 0)
  {
    v545 = __cxa_guard_acquire(&qword_254A68F70);
    v88 = &qword_254A6A000;
    if (v545)
    {
      qword_254A6A210 = 0;
      qword_254A6A218 = 0;
      qword_254A6A220 = 0;
      sub_20EAC040C((char **)&qword_254A6A210, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A210);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A210, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F70);
      v88 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v88[66] + 4512, sqrt(v81));
  v89 = (float64x2_t *)v4[20];
  v90 = (float64x2_t *)v4[21];
  if (v89 == v90)
  {
    v101 = 0.0;
    v100.f64[0] = 0.0;
    v104 = atomic_load((unsigned __int8 *)&qword_254A68F78);
    v103 = &qword_254A6A000;
    v692 = 0u;
    if ((v104 & 1) != 0)
      goto LABEL_54;
  }
  else
  {
    v91 = 0uLL;
    v92 = (float64x2_t *)v4[20];
    do
    {
      v93 = *v92++;
      v91 = vaddq_f64(v91, v93);
    }
    while (v92 != v90);
    v94 = v90 - v89;
    v95 = 0.0;
    do
    {
      v96 = (__int128)*v89++;
      _V4.D[1] = *((_QWORD *)&v96 + 1);
      _D6 = *((_QWORD *)&v96 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v95 = v95 + _D5;
    }
    while (v89 != v90);
    v100 = vmulq_n_f64(v91, 1.0 / (double)(unint64_t)v94);
    v101 = 0.5 / (double)(unint64_t)v94 * v95;
    v102 = atomic_load((unsigned __int8 *)&qword_254A68F78);
    v103 = &qword_254A6A000;
    v692 = v100;
    if ((v102 & 1) != 0)
      goto LABEL_54;
  }
  v546 = __cxa_guard_acquire(&qword_254A68F78);
  v100.f64[0] = v692.f64[0];
  v103 = &qword_254A6A000;
  if (v546)
  {
    qword_254A6A228 = 0;
    qword_254A6A230 = 0;
    qword_254A6A238 = 0;
    sub_20EAC040C((char **)&qword_254A6A228, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A228);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A228, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F78);
    v103 = &qword_254A6A000;
    v100.f64[0] = v692.f64[0];
  }
LABEL_54:
  sub_210214860(v24, v103[69] + 4536, v100.f64[0]);
  v105 = atomic_load((unsigned __int8 *)&qword_254A68F80);
  v106 = &qword_254A6A000;
  if ((v105 & 1) == 0)
  {
    v547 = __cxa_guard_acquire(&qword_254A68F80);
    v106 = &qword_254A6A000;
    if (v547)
    {
      qword_254A6A240 = 0;
      qword_254A6A248 = 0;
      qword_254A6A250 = 0;
      sub_20EAC040C((char **)&qword_254A6A240, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A240);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A240, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F80);
      v106 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v106[72] + 4560, v692.f64[1]);
  v107 = atomic_load((unsigned __int8 *)&qword_254A68F88);
  v108 = &qword_254A6A000;
  if ((v107 & 1) == 0)
  {
    v548 = __cxa_guard_acquire(&qword_254A68F88);
    v108 = &qword_254A6A000;
    if (v548)
    {
      qword_254A6A258 = 0;
      qword_254A6A260 = 0;
      qword_254A6A268 = 0;
      sub_20EAC040C((char **)&qword_254A6A258, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A258);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A258, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F88);
      v108 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v108[75] + 4584, sqrt(v101));
  v109 = (float64x2_t *)v4[23];
  v110 = (float64x2_t *)v4[24];
  if (v109 == v110)
  {
    v121 = 0.0;
    v120.f64[0] = 0.0;
    v124 = atomic_load((unsigned __int8 *)&qword_254A68F90);
    v123 = &qword_254A6A000;
    v693 = 0u;
    if ((v124 & 1) != 0)
      goto LABEL_64;
  }
  else
  {
    v111 = 0uLL;
    v112 = (float64x2_t *)v4[23];
    do
    {
      v113 = *v112++;
      v111 = vaddq_f64(v111, v113);
    }
    while (v112 != v110);
    v114 = v110 - v109;
    v115 = 0.0;
    do
    {
      v116 = (__int128)*v109++;
      _V4.D[1] = *((_QWORD *)&v116 + 1);
      _D6 = *((_QWORD *)&v116 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v115 = v115 + _D5;
    }
    while (v109 != v110);
    v120 = vmulq_n_f64(v111, 1.0 / (double)(unint64_t)v114);
    v121 = 0.5 / (double)(unint64_t)v114 * v115;
    v122 = atomic_load((unsigned __int8 *)&qword_254A68F90);
    v123 = &qword_254A6A000;
    v693 = v120;
    if ((v122 & 1) != 0)
      goto LABEL_64;
  }
  v549 = __cxa_guard_acquire(&qword_254A68F90);
  v120.f64[0] = v693.f64[0];
  v123 = &qword_254A6A000;
  if (v549)
  {
    qword_254A6A270 = 0;
    qword_254A6A278 = 0;
    qword_254A6A280 = 0;
    sub_20EAC040C((char **)&qword_254A6A270, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A270);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A270, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68F90);
    v123 = &qword_254A6A000;
    v120.f64[0] = v693.f64[0];
  }
LABEL_64:
  sub_210214860(v24, v123[78] + 4608, v120.f64[0]);
  v125 = atomic_load((unsigned __int8 *)&qword_254A68F98);
  v126 = &qword_254A6A000;
  if ((v125 & 1) == 0)
  {
    v550 = __cxa_guard_acquire(&qword_254A68F98);
    v126 = &qword_254A6A000;
    if (v550)
    {
      qword_254A6A288 = 0;
      qword_254A6A290 = 0;
      qword_254A6A298 = 0;
      sub_20EAC040C((char **)&qword_254A6A288, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A288);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A288, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68F98);
      v126 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v126[81] + 4632, v693.f64[1]);
  v127 = atomic_load((unsigned __int8 *)&qword_254A68FA0);
  v128 = &qword_254A6A000;
  if ((v127 & 1) == 0)
  {
    v551 = __cxa_guard_acquire(&qword_254A68FA0);
    v128 = &qword_254A6A000;
    if (v551)
    {
      qword_254A6A2A0 = 0;
      qword_254A6A2A8 = 0;
      qword_254A6A2B0 = 0;
      sub_20EAC040C((char **)&qword_254A6A2A0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A2A0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A2A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FA0);
      v128 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v128[84] + 4656, sqrt(v121));
  v129 = (char *)v4[26];
  v130 = (float64x2_t *)v4[27];
  v131 = 0uLL;
  if (v129 != (char *)v130)
  {
    v132 = (float64x2_t *)v4[26];
    do
    {
      v133 = *v132++;
      v131 = vaddq_f64(v131, v133);
    }
    while (v132 != v130);
    v131 = vmulq_n_f64(vsqrtq_f64(v131), 1.0 / (double)(unint64_t)(((char *)v130 - v129) >> 4));
  }
  v134 = atomic_load((unsigned __int8 *)&qword_254A68FA8);
  v135 = &qword_254A6A000;
  v694 = v131;
  if ((v134 & 1) == 0)
  {
    v552 = __cxa_guard_acquire(&qword_254A68FA8);
    v131.f64[0] = v694.f64[0];
    v135 = &qword_254A6A000;
    if (v552)
    {
      qword_254A6A2B8 = 0;
      qword_254A6A2C0 = 0;
      qword_254A6A2C8 = 0;
      sub_20EAC040C((char **)&qword_254A6A2B8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A2B8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A2B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FA8);
      v135 = &qword_254A6A000;
      v131.f64[0] = v694.f64[0];
    }
  }
  sub_210214860(v24, v135[87] + 4680, v131.f64[0]);
  v136 = atomic_load((unsigned __int8 *)&qword_254A68FB0);
  v137 = &qword_254A6A000;
  if ((v136 & 1) == 0)
  {
    v553 = __cxa_guard_acquire(&qword_254A68FB0);
    v137 = &qword_254A6A000;
    if (v553)
    {
      qword_254A6A2D0 = 0;
      qword_254A6A2D8 = 0;
      qword_254A6A2E0 = 0;
      sub_20EAC040C((char **)&qword_254A6A2D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A2D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A2D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FB0);
      v137 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v137[90] + 4704, v694.f64[1]);
  v138 = (float64x2_t *)v4[35];
  v139 = (float64x2_t *)v4[36];
  if (v138 == v139)
  {
    v150 = 0.0;
    v149.f64[0] = 0.0;
    v153 = atomic_load((unsigned __int8 *)&qword_254A68FB8);
    v152 = &qword_254A6A000;
    v695 = 0u;
    if ((v153 & 1) != 0)
      goto LABEL_80;
  }
  else
  {
    v140 = 0uLL;
    v141 = (float64x2_t *)v4[35];
    do
    {
      v142 = *v141++;
      v140 = vaddq_f64(v140, v142);
    }
    while (v141 != v139);
    v143 = v139 - v138;
    v144 = 0.0;
    do
    {
      v145 = (__int128)*v138++;
      _V4.D[1] = *((_QWORD *)&v145 + 1);
      _D6 = *((_QWORD *)&v145 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v144 = v144 + _D5;
    }
    while (v138 != v139);
    v149 = vmulq_n_f64(v140, 1.0 / (double)(unint64_t)v143);
    v150 = 0.5 / (double)(unint64_t)v143 * v144;
    v151 = atomic_load((unsigned __int8 *)&qword_254A68FB8);
    v152 = &qword_254A6A000;
    v695 = v149;
    if ((v151 & 1) != 0)
      goto LABEL_80;
  }
  v554 = __cxa_guard_acquire(&qword_254A68FB8);
  v149.f64[0] = v695.f64[0];
  v152 = &qword_254A6A000;
  if (v554)
  {
    qword_254A6A2E8 = 0;
    qword_254A6A2F0 = 0;
    qword_254A6A2F8 = 0;
    sub_20EAC040C((char **)&qword_254A6A2E8, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A2E8);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A2E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68FB8);
    v152 = &qword_254A6A000;
    v149.f64[0] = v695.f64[0];
  }
LABEL_80:
  sub_210214860(v24, v152[93] + 4872, v149.f64[0]);
  v154 = atomic_load((unsigned __int8 *)&qword_254A68FC0);
  v155 = &qword_254A6A000;
  if ((v154 & 1) == 0)
  {
    v555 = __cxa_guard_acquire(&qword_254A68FC0);
    v155 = &qword_254A6A000;
    if (v555)
    {
      qword_254A6A300 = 0;
      qword_254A6A308 = 0;
      qword_254A6A310 = 0;
      sub_20EAC040C((char **)&qword_254A6A300, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A300);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A300, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FC0);
      v155 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v155[96] + 4896, v695.f64[1]);
  v156 = atomic_load((unsigned __int8 *)&qword_254A68FC8);
  v157 = &qword_254A6A000;
  if ((v156 & 1) == 0)
  {
    v556 = __cxa_guard_acquire(&qword_254A68FC8);
    v157 = &qword_254A6A000;
    if (v556)
    {
      qword_254A6A318 = 0;
      qword_254A6A320 = 0;
      qword_254A6A328 = 0;
      sub_20EAC040C((char **)&qword_254A6A318, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A318);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A318, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FC8);
      v157 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v157[99] + 4920, sqrt(v150));
  v158 = (float64x2_t *)v4[38];
  v159 = (float64x2_t *)v4[39];
  if (v158 == v159)
  {
    v170 = 0.0;
    v169.f64[0] = 0.0;
    v173 = atomic_load((unsigned __int8 *)&qword_254A68FD0);
    v172 = &qword_254A6A000;
    v696 = 0u;
    if ((v173 & 1) != 0)
      goto LABEL_90;
  }
  else
  {
    v160 = 0uLL;
    v161 = (float64x2_t *)v4[38];
    do
    {
      v162 = *v161++;
      v160 = vaddq_f64(v160, v162);
    }
    while (v161 != v159);
    v163 = v159 - v158;
    v164 = 0.0;
    do
    {
      v165 = (__int128)*v158++;
      _V4.D[1] = *((_QWORD *)&v165 + 1);
      _D6 = *((_QWORD *)&v165 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v164 = v164 + _D5;
    }
    while (v158 != v159);
    v169 = vmulq_n_f64(v160, 1.0 / (double)(unint64_t)v163);
    v170 = 0.5 / (double)(unint64_t)v163 * v164;
    v171 = atomic_load((unsigned __int8 *)&qword_254A68FD0);
    v172 = &qword_254A6A000;
    v696 = v169;
    if ((v171 & 1) != 0)
      goto LABEL_90;
  }
  v557 = __cxa_guard_acquire(&qword_254A68FD0);
  v169.f64[0] = v696.f64[0];
  v172 = &qword_254A6A000;
  if (v557)
  {
    qword_254A6A330 = 0;
    qword_254A6A338 = 0;
    qword_254A6A340 = 0;
    sub_20EAC040C((char **)&qword_254A6A330, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A330);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A330, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68FD0);
    v172 = &qword_254A6A000;
    v169.f64[0] = v696.f64[0];
  }
LABEL_90:
  sub_210214860(v24, v172[102] + 4944, v169.f64[0]);
  v174 = atomic_load((unsigned __int8 *)&qword_254A68FD8);
  v175 = &qword_254A6A000;
  if ((v174 & 1) == 0)
  {
    v558 = __cxa_guard_acquire(&qword_254A68FD8);
    v175 = &qword_254A6A000;
    if (v558)
    {
      qword_254A6A348 = 0;
      qword_254A6A350 = 0;
      qword_254A6A358 = 0;
      sub_20EAC040C((char **)&qword_254A6A348, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A348);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A348, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FD8);
      v175 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v175[105] + 4968, v696.f64[1]);
  v176 = atomic_load((unsigned __int8 *)&qword_254A68FE0);
  v177 = &qword_254A6A000;
  if ((v176 & 1) == 0)
  {
    v559 = __cxa_guard_acquire(&qword_254A68FE0);
    v177 = &qword_254A6A000;
    if (v559)
    {
      qword_254A6A360 = 0;
      qword_254A6A368 = 0;
      qword_254A6A370 = 0;
      sub_20EAC040C((char **)&qword_254A6A360, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A360);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A360, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FE0);
      v177 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v177[108] + 4992, sqrt(v170));
  v178 = (float64x2_t *)v4[41];
  v179 = (float64x2_t *)v4[42];
  if (v178 == v179)
  {
    v190 = 0.0;
    v189.f64[0] = 0.0;
    v193 = atomic_load((unsigned __int8 *)&qword_254A68FE8);
    v192 = &qword_254A6A000;
    v697 = 0u;
    if ((v193 & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v180 = 0uLL;
    v181 = (float64x2_t *)v4[41];
    do
    {
      v182 = *v181++;
      v180 = vaddq_f64(v180, v182);
    }
    while (v181 != v179);
    v183 = v179 - v178;
    v184 = 0.0;
    do
    {
      v185 = (__int128)*v178++;
      _V4.D[1] = *((_QWORD *)&v185 + 1);
      _D6 = *((_QWORD *)&v185 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v184 = v184 + _D5;
    }
    while (v178 != v179);
    v189 = vmulq_n_f64(v180, 1.0 / (double)(unint64_t)v183);
    v190 = 0.5 / (double)(unint64_t)v183 * v184;
    v191 = atomic_load((unsigned __int8 *)&qword_254A68FE8);
    v192 = &qword_254A6A000;
    v697 = v189;
    if ((v191 & 1) != 0)
      goto LABEL_100;
  }
  v560 = __cxa_guard_acquire(&qword_254A68FE8);
  v189.f64[0] = v697.f64[0];
  v192 = &qword_254A6A000;
  if (v560)
  {
    qword_254A6A378 = 0;
    qword_254A6A380 = 0;
    qword_254A6A388 = 0;
    sub_20EAC040C((char **)&qword_254A6A378, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A378);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A378, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68FE8);
    v192 = &qword_254A6A000;
    v189.f64[0] = v697.f64[0];
  }
LABEL_100:
  sub_210214860(v24, v192[111] + 5016, v189.f64[0]);
  v194 = atomic_load((unsigned __int8 *)&qword_254A68FF0);
  v195 = &qword_254A6A000;
  if ((v194 & 1) == 0)
  {
    v561 = __cxa_guard_acquire(&qword_254A68FF0);
    v195 = &qword_254A6A000;
    if (v561)
    {
      qword_254A6A390 = 0;
      qword_254A6A398 = 0;
      qword_254A6A3A0 = 0;
      sub_20EAC040C((char **)&qword_254A6A390, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A390);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A390, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FF0);
      v195 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v195[114] + 5040, v697.f64[1]);
  v196 = atomic_load((unsigned __int8 *)&qword_254A68FF8);
  v197 = &qword_254A6A000;
  if ((v196 & 1) == 0)
  {
    v562 = __cxa_guard_acquire(&qword_254A68FF8);
    v197 = &qword_254A6A000;
    if (v562)
    {
      qword_254A6A3A8 = 0;
      qword_254A6A3B0 = 0;
      qword_254A6A3B8 = 0;
      sub_20EAC040C((char **)&qword_254A6A3A8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A3A8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A3A8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A68FF8);
      v197 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v197[117] + 5064, sqrt(v190));
  v198 = (float64x2_t *)v4[44];
  v199 = (float64x2_t *)v4[45];
  if (v198 == v199)
  {
    v210 = 0.0;
    v209.f64[0] = 0.0;
    v213 = atomic_load((unsigned __int8 *)&qword_254A69000);
    v212 = &qword_254A6A000;
    v698 = 0u;
    if ((v213 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v200 = 0uLL;
    v201 = (float64x2_t *)v4[44];
    do
    {
      v202 = *v201++;
      v200 = vaddq_f64(v200, v202);
    }
    while (v201 != v199);
    v203 = v199 - v198;
    v204 = 0.0;
    do
    {
      v205 = (__int128)*v198++;
      _V4.D[1] = *((_QWORD *)&v205 + 1);
      _D6 = *((_QWORD *)&v205 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v204 = v204 + _D5;
    }
    while (v198 != v199);
    v209 = vmulq_n_f64(v200, 1.0 / (double)(unint64_t)v203);
    v210 = 0.5 / (double)(unint64_t)v203 * v204;
    v211 = atomic_load((unsigned __int8 *)&qword_254A69000);
    v212 = &qword_254A6A000;
    v698 = v209;
    if ((v211 & 1) != 0)
      goto LABEL_110;
  }
  v563 = __cxa_guard_acquire(&qword_254A69000);
  v209.f64[0] = v698.f64[0];
  v212 = &qword_254A6A000;
  if (v563)
  {
    qword_254A6A3C0 = 0;
    qword_254A6A3C8 = 0;
    qword_254A6A3D0 = 0;
    sub_20EAC040C((char **)&qword_254A6A3C0, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A3C0);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A3C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69000);
    v212 = &qword_254A6A000;
    v209.f64[0] = v698.f64[0];
  }
LABEL_110:
  sub_210214860(v24, v212[120] + 5088, v209.f64[0]);
  v214 = atomic_load((unsigned __int8 *)&qword_254A69008);
  v215 = &qword_254A6A000;
  if ((v214 & 1) == 0)
  {
    v564 = __cxa_guard_acquire(&qword_254A69008);
    v215 = &qword_254A6A000;
    if (v564)
    {
      qword_254A6A3D8 = 0;
      qword_254A6A3E0 = 0;
      qword_254A6A3E8 = 0;
      sub_20EAC040C((char **)&qword_254A6A3D8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A3D8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A3D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69008);
      v215 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v215[123] + 5112, v698.f64[1]);
  v216 = atomic_load((unsigned __int8 *)&qword_254A69010);
  v217 = &qword_254A6A000;
  if ((v216 & 1) == 0)
  {
    v565 = __cxa_guard_acquire(&qword_254A69010);
    v217 = &qword_254A6A000;
    if (v565)
    {
      qword_254A6A3F0 = 0;
      qword_254A6A3F8 = 0;
      qword_254A6A400 = 0;
      sub_20EAC040C((char **)&qword_254A6A3F0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A3F0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A3F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69010);
      v217 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v217[126] + 5136, sqrt(v210));
  v218 = (float64x2_t *)v4[47];
  v219 = (float64x2_t *)v4[48];
  if (v218 == v219)
  {
    v230 = 0.0;
    v229.f64[0] = 0.0;
    v233 = atomic_load((unsigned __int8 *)&qword_254A69018);
    v232 = &qword_254A6A000;
    v699 = 0u;
    if ((v233 & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v220 = 0uLL;
    v221 = (float64x2_t *)v4[47];
    do
    {
      v222 = *v221++;
      v220 = vaddq_f64(v220, v222);
    }
    while (v221 != v219);
    v223 = v219 - v218;
    v224 = 0.0;
    do
    {
      v225 = (__int128)*v218++;
      _V4.D[1] = *((_QWORD *)&v225 + 1);
      _D6 = *((_QWORD *)&v225 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v224 = v224 + _D5;
    }
    while (v218 != v219);
    v229 = vmulq_n_f64(v220, 1.0 / (double)(unint64_t)v223);
    v230 = 0.5 / (double)(unint64_t)v223 * v224;
    v231 = atomic_load((unsigned __int8 *)&qword_254A69018);
    v232 = &qword_254A6A000;
    v699 = v229;
    if ((v231 & 1) != 0)
      goto LABEL_120;
  }
  v566 = __cxa_guard_acquire(&qword_254A69018);
  v229.f64[0] = v699.f64[0];
  v232 = &qword_254A6A000;
  if (v566)
  {
    qword_254A6A408 = 0;
    qword_254A6A410 = 0;
    qword_254A6A418 = 0;
    sub_20EAC040C((char **)&qword_254A6A408, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A408);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A408, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69018);
    v232 = &qword_254A6A000;
    v229.f64[0] = v699.f64[0];
  }
LABEL_120:
  sub_210214860(v24, v232[129] + 5160, v229.f64[0]);
  v234 = atomic_load((unsigned __int8 *)&qword_254A69020);
  v235 = &qword_254A6A000;
  if ((v234 & 1) == 0)
  {
    v567 = __cxa_guard_acquire(&qword_254A69020);
    v235 = &qword_254A6A000;
    if (v567)
    {
      qword_254A6A420 = 0;
      qword_254A6A428 = 0;
      qword_254A6A430 = 0;
      sub_20EAC040C((char **)&qword_254A6A420, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A420);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A420, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69020);
      v235 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v235[132] + 5184, v699.f64[1]);
  v236 = atomic_load((unsigned __int8 *)&qword_254A69028);
  v237 = &qword_254A6A000;
  if ((v236 & 1) == 0)
  {
    v568 = __cxa_guard_acquire(&qword_254A69028);
    v237 = &qword_254A6A000;
    if (v568)
    {
      qword_254A6A438 = 0;
      qword_254A6A440 = 0;
      qword_254A6A448 = 0;
      sub_20EAC040C((char **)&qword_254A6A438, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A438);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A438, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69028);
      v237 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v237[135] + 5208, sqrt(v230));
  v238 = (float64x2_t *)v4[50];
  v239 = (float64x2_t *)v4[51];
  if (v238 == v239)
  {
    v250 = 0.0;
    v249.f64[0] = 0.0;
    v253 = atomic_load((unsigned __int8 *)&qword_254A69030);
    v252 = &qword_254A6A000;
    v700 = 0u;
    if ((v253 & 1) != 0)
      goto LABEL_130;
  }
  else
  {
    v240 = 0uLL;
    v241 = (float64x2_t *)v4[50];
    do
    {
      v242 = *v241++;
      v240 = vaddq_f64(v240, v242);
    }
    while (v241 != v239);
    v243 = v239 - v238;
    v244 = 0.0;
    do
    {
      v245 = (__int128)*v238++;
      _V4.D[1] = *((_QWORD *)&v245 + 1);
      _D6 = *((_QWORD *)&v245 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v244 = v244 + _D5;
    }
    while (v238 != v239);
    v249 = vmulq_n_f64(v240, 1.0 / (double)(unint64_t)v243);
    v250 = 0.5 / (double)(unint64_t)v243 * v244;
    v251 = atomic_load((unsigned __int8 *)&qword_254A69030);
    v252 = &qword_254A6A000;
    v700 = v249;
    if ((v251 & 1) != 0)
      goto LABEL_130;
  }
  v569 = __cxa_guard_acquire(&qword_254A69030);
  v249.f64[0] = v700.f64[0];
  v252 = &qword_254A6A000;
  if (v569)
  {
    qword_254A6A450 = 0;
    qword_254A6A458 = 0;
    qword_254A6A460 = 0;
    sub_20EAC040C((char **)&qword_254A6A450, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A450);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A450, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69030);
    v252 = &qword_254A6A000;
    v249.f64[0] = v700.f64[0];
  }
LABEL_130:
  sub_210214860(v24, v252[138] + 5232, v249.f64[0]);
  v254 = atomic_load((unsigned __int8 *)&qword_254A69038);
  v255 = &qword_254A6A000;
  if ((v254 & 1) == 0)
  {
    v570 = __cxa_guard_acquire(&qword_254A69038);
    v255 = &qword_254A6A000;
    if (v570)
    {
      qword_254A6A468 = 0;
      qword_254A6A470 = 0;
      qword_254A6A478 = 0;
      sub_20EAC040C((char **)&qword_254A6A468, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A468);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A468, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69038);
      v255 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v255[141] + 5256, v700.f64[1]);
  v256 = atomic_load((unsigned __int8 *)&qword_254A69040);
  v257 = &qword_254A6A000;
  if ((v256 & 1) == 0)
  {
    v571 = __cxa_guard_acquire(&qword_254A69040);
    v257 = &qword_254A6A000;
    if (v571)
    {
      qword_254A6A480 = 0;
      qword_254A6A488 = 0;
      qword_254A6A490 = 0;
      sub_20EAC040C((char **)&qword_254A6A480, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A480);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A480, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69040);
      v257 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v257[144] + 5280, sqrt(v250));
  v258 = (char *)v4[53];
  v259 = (float64x2_t *)v4[54];
  v260 = 0uLL;
  if (v258 != (char *)v259)
  {
    v261 = (float64x2_t *)v4[53];
    do
    {
      v262 = *v261++;
      v260 = vaddq_f64(v260, v262);
    }
    while (v261 != v259);
    v260 = vmulq_n_f64(vsqrtq_f64(v260), 1.0 / (double)(unint64_t)(((char *)v259 - v258) >> 4));
  }
  v263 = atomic_load((unsigned __int8 *)&qword_254A69048);
  v264 = &qword_254A6A000;
  v701 = v260;
  if ((v263 & 1) == 0)
  {
    v572 = __cxa_guard_acquire(&qword_254A69048);
    v260.f64[0] = v701.f64[0];
    v264 = &qword_254A6A000;
    if (v572)
    {
      qword_254A6A498 = 0;
      qword_254A6A4A0 = 0;
      qword_254A6A4A8 = 0;
      sub_20EAC040C((char **)&qword_254A6A498, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A498);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A498, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69048);
      v264 = &qword_254A6A000;
      v260.f64[0] = v701.f64[0];
    }
  }
  sub_210214860(v24, v264[147] + 5304, v260.f64[0]);
  v265 = atomic_load((unsigned __int8 *)&qword_254A69050);
  v266 = &qword_254A6A000;
  if ((v265 & 1) == 0)
  {
    v573 = __cxa_guard_acquire(&qword_254A69050);
    v266 = &qword_254A6A000;
    if (v573)
    {
      qword_254A6A4B0 = 0;
      qword_254A6A4B8 = 0;
      qword_254A6A4C0 = 0;
      sub_20EAC040C((char **)&qword_254A6A4B0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A4B0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A4B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69050);
      v266 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v266[150] + 5328, v701.f64[1]);
  v267 = (float64x2_t *)v4[60];
  v268 = (float64x2_t *)v4[61];
  if (v267 == v268)
  {
    v279 = 0.0;
    v278.f64[0] = 0.0;
    v282 = atomic_load((unsigned __int8 *)&qword_254A69058);
    v281 = &qword_254A6A000;
    v702 = 0u;
    if ((v282 & 1) != 0)
      goto LABEL_146;
  }
  else
  {
    v269 = 0uLL;
    v270 = (float64x2_t *)v4[60];
    do
    {
      v271 = *v270++;
      v269 = vaddq_f64(v269, v271);
    }
    while (v270 != v268);
    v272 = v268 - v267;
    v273 = 0.0;
    do
    {
      v274 = (__int128)*v267++;
      _V4.D[1] = *((_QWORD *)&v274 + 1);
      _D6 = *((_QWORD *)&v274 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v273 = v273 + _D5;
    }
    while (v267 != v268);
    v278 = vmulq_n_f64(v269, 1.0 / (double)(unint64_t)v272);
    v279 = 0.5 / (double)(unint64_t)v272 * v273;
    v280 = atomic_load((unsigned __int8 *)&qword_254A69058);
    v281 = &qword_254A6A000;
    v702 = v278;
    if ((v280 & 1) != 0)
      goto LABEL_146;
  }
  v574 = __cxa_guard_acquire(&qword_254A69058);
  v278.f64[0] = v702.f64[0];
  v281 = &qword_254A6A000;
  if (v574)
  {
    qword_254A6A4C8 = 0;
    qword_254A6A4D0 = 0;
    qword_254A6A4D8 = 0;
    sub_20EAC040C((char **)&qword_254A6A4C8, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A4C8);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A4C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69058);
    v281 = &qword_254A6A000;
    v278.f64[0] = v702.f64[0];
  }
LABEL_146:
  sub_210214860(v24, v281[153] + 5400, v278.f64[0]);
  v283 = atomic_load((unsigned __int8 *)&qword_254A69060);
  v284 = &qword_254A6A000;
  if ((v283 & 1) == 0)
  {
    v575 = __cxa_guard_acquire(&qword_254A69060);
    v284 = &qword_254A6A000;
    if (v575)
    {
      qword_254A6A4E0 = 0;
      qword_254A6A4E8 = 0;
      qword_254A6A4F0 = 0;
      sub_20EAC040C((char **)&qword_254A6A4E0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A4E0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A4E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69060);
      v284 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v284[156] + 5424, v702.f64[1]);
  v285 = atomic_load((unsigned __int8 *)&qword_254A69068);
  v286 = &qword_254A6A000;
  if ((v285 & 1) == 0)
  {
    v576 = __cxa_guard_acquire(&qword_254A69068);
    v286 = &qword_254A6A000;
    if (v576)
    {
      qword_254A6A4F8 = 0;
      qword_254A6A500 = 0;
      qword_254A6A508 = 0;
      sub_20EAC040C((char **)&qword_254A6A4F8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A4F8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69068);
      v286 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v286[159] + 5448, sqrt(v279));
  v287 = (float64x2_t *)v4[63];
  v288 = (float64x2_t *)v4[64];
  if (v287 == v288)
  {
    v299 = 0.0;
    v298.f64[0] = 0.0;
    v302 = atomic_load((unsigned __int8 *)&qword_254A69070);
    v301 = &qword_254A6A000;
    v703 = 0u;
    if ((v302 & 1) != 0)
      goto LABEL_156;
  }
  else
  {
    v289 = 0uLL;
    v290 = (float64x2_t *)v4[63];
    do
    {
      v291 = *v290++;
      v289 = vaddq_f64(v289, v291);
    }
    while (v290 != v288);
    v292 = v288 - v287;
    v293 = 0.0;
    do
    {
      v294 = (__int128)*v287++;
      _V4.D[1] = *((_QWORD *)&v294 + 1);
      _D6 = *((_QWORD *)&v294 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v293 = v293 + _D5;
    }
    while (v287 != v288);
    v298 = vmulq_n_f64(v289, 1.0 / (double)(unint64_t)v292);
    v299 = 0.5 / (double)(unint64_t)v292 * v293;
    v300 = atomic_load((unsigned __int8 *)&qword_254A69070);
    v301 = &qword_254A6A000;
    v703 = v298;
    if ((v300 & 1) != 0)
      goto LABEL_156;
  }
  v577 = __cxa_guard_acquire(&qword_254A69070);
  v298.f64[0] = v703.f64[0];
  v301 = &qword_254A6A000;
  if (v577)
  {
    qword_254A6A510 = 0;
    qword_254A6A518 = 0;
    qword_254A6A520 = 0;
    sub_20EAC040C((char **)&qword_254A6A510, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A510);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A510, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69070);
    v301 = &qword_254A6A000;
    v298.f64[0] = v703.f64[0];
  }
LABEL_156:
  sub_210214860(v24, v301[162] + 5472, v298.f64[0]);
  v303 = atomic_load((unsigned __int8 *)&qword_254A69078);
  v304 = &qword_254A6A000;
  if ((v303 & 1) == 0)
  {
    v578 = __cxa_guard_acquire(&qword_254A69078);
    v304 = &qword_254A6A000;
    if (v578)
    {
      qword_254A6A528 = 0;
      qword_254A6A530 = 0;
      qword_254A6A538 = 0;
      sub_20EAC040C((char **)&qword_254A6A528, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A528);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A528, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69078);
      v304 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v304[165] + 5496, v703.f64[1]);
  v305 = atomic_load((unsigned __int8 *)&qword_254A69080);
  v306 = &qword_254A6A000;
  if ((v305 & 1) == 0)
  {
    v579 = __cxa_guard_acquire(&qword_254A69080);
    v306 = &qword_254A6A000;
    if (v579)
    {
      qword_254A6A540 = 0;
      qword_254A6A548 = 0;
      qword_254A6A550 = 0;
      sub_20EAC040C((char **)&qword_254A6A540, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A540);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A540, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69080);
      v306 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v306[168] + 5520, sqrt(v299));
  v307 = (float64x2_t *)v4[66];
  v308 = (float64x2_t *)v4[67];
  if (v307 == v308)
  {
    v319 = 0.0;
    v318.f64[0] = 0.0;
    v322 = atomic_load((unsigned __int8 *)&qword_254A69088);
    v321 = &qword_254A6A000;
    v704 = 0u;
    if ((v322 & 1) != 0)
      goto LABEL_166;
  }
  else
  {
    v309 = 0uLL;
    v310 = (float64x2_t *)v4[66];
    do
    {
      v311 = *v310++;
      v309 = vaddq_f64(v309, v311);
    }
    while (v310 != v308);
    v312 = v308 - v307;
    v313 = 0.0;
    do
    {
      v314 = (__int128)*v307++;
      _V4.D[1] = *((_QWORD *)&v314 + 1);
      _D6 = *((_QWORD *)&v314 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v313 = v313 + _D5;
    }
    while (v307 != v308);
    v318 = vmulq_n_f64(v309, 1.0 / (double)(unint64_t)v312);
    v319 = 0.5 / (double)(unint64_t)v312 * v313;
    v320 = atomic_load((unsigned __int8 *)&qword_254A69088);
    v321 = &qword_254A6A000;
    v704 = v318;
    if ((v320 & 1) != 0)
      goto LABEL_166;
  }
  v580 = __cxa_guard_acquire(&qword_254A69088);
  v318.f64[0] = v704.f64[0];
  v321 = &qword_254A6A000;
  if (v580)
  {
    qword_254A6A558 = 0;
    qword_254A6A560 = 0;
    qword_254A6A568 = 0;
    sub_20EAC040C((char **)&qword_254A6A558, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A558);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A558, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69088);
    v321 = &qword_254A6A000;
    v318.f64[0] = v704.f64[0];
  }
LABEL_166:
  sub_210214860(v24, v321[171] + 5544, v318.f64[0]);
  v323 = atomic_load((unsigned __int8 *)&qword_254A69090);
  v324 = &qword_254A6A000;
  if ((v323 & 1) == 0)
  {
    v581 = __cxa_guard_acquire(&qword_254A69090);
    v324 = &qword_254A6A000;
    if (v581)
    {
      qword_254A6A570 = 0;
      qword_254A6A578 = 0;
      qword_254A6A580 = 0;
      sub_20EAC040C((char **)&qword_254A6A570, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A570);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A570, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69090);
      v324 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v324[174] + 5568, v704.f64[1]);
  v325 = atomic_load((unsigned __int8 *)&qword_254A69098);
  v326 = &qword_254A6A000;
  if ((v325 & 1) == 0)
  {
    v582 = __cxa_guard_acquire(&qword_254A69098);
    v326 = &qword_254A6A000;
    if (v582)
    {
      qword_254A6A588 = 0;
      qword_254A6A590 = 0;
      qword_254A6A598 = 0;
      sub_20EAC040C((char **)&qword_254A6A588, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A588);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A588, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69098);
      v326 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v326[177] + 5592, sqrt(v319));
  v327 = (float64x2_t *)v4[69];
  v328 = (float64x2_t *)v4[70];
  if (v327 == v328)
  {
    v339 = 0.0;
    v338.f64[0] = 0.0;
    v342 = atomic_load((unsigned __int8 *)&qword_254A690A0);
    v341 = &qword_254A6A000;
    v705 = 0u;
    if ((v342 & 1) != 0)
      goto LABEL_176;
  }
  else
  {
    v329 = 0uLL;
    v330 = (float64x2_t *)v4[69];
    do
    {
      v331 = *v330++;
      v329 = vaddq_f64(v329, v331);
    }
    while (v330 != v328);
    v332 = v328 - v327;
    v333 = 0.0;
    do
    {
      v334 = (__int128)*v327++;
      _V4.D[1] = *((_QWORD *)&v334 + 1);
      _D6 = *((_QWORD *)&v334 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v333 = v333 + _D5;
    }
    while (v327 != v328);
    v338 = vmulq_n_f64(v329, 1.0 / (double)(unint64_t)v332);
    v339 = 0.5 / (double)(unint64_t)v332 * v333;
    v340 = atomic_load((unsigned __int8 *)&qword_254A690A0);
    v341 = &qword_254A6A000;
    v705 = v338;
    if ((v340 & 1) != 0)
      goto LABEL_176;
  }
  v583 = __cxa_guard_acquire(&qword_254A690A0);
  v338.f64[0] = v705.f64[0];
  v341 = &qword_254A6A000;
  if (v583)
  {
    qword_254A6A5A0 = 0;
    qword_254A6A5A8 = 0;
    qword_254A6A5B0 = 0;
    sub_20EAC040C((char **)&qword_254A6A5A0, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A5A0);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A5A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A690A0);
    v341 = &qword_254A6A000;
    v338.f64[0] = v705.f64[0];
  }
LABEL_176:
  sub_210214860(v24, v341[180] + 5616, v338.f64[0]);
  v343 = atomic_load((unsigned __int8 *)&qword_254A690A8);
  v344 = &qword_254A6A000;
  if ((v343 & 1) == 0)
  {
    v584 = __cxa_guard_acquire(&qword_254A690A8);
    v344 = &qword_254A6A000;
    if (v584)
    {
      qword_254A6A5B8 = 0;
      qword_254A6A5C0 = 0;
      qword_254A6A5C8 = 0;
      sub_20EAC040C((char **)&qword_254A6A5B8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A5B8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A5B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690A8);
      v344 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v344[183] + 5640, v705.f64[1]);
  v345 = atomic_load((unsigned __int8 *)&qword_254A690B0);
  v346 = &qword_254A6A000;
  if ((v345 & 1) == 0)
  {
    v585 = __cxa_guard_acquire(&qword_254A690B0);
    v346 = &qword_254A6A000;
    if (v585)
    {
      qword_254A6A5D0 = 0;
      qword_254A6A5D8 = 0;
      qword_254A6A5E0 = 0;
      sub_20EAC040C((char **)&qword_254A6A5D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A5D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A5D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690B0);
      v346 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v346[186] + 5664, sqrt(v339));
  v347 = (float64x2_t *)v4[72];
  v348 = (float64x2_t *)v4[73];
  if (v347 == v348)
  {
    v359 = 0.0;
    v358.f64[0] = 0.0;
    v362 = atomic_load((unsigned __int8 *)&qword_254A690B8);
    v361 = &qword_254A6A000;
    v706 = 0u;
    if ((v362 & 1) != 0)
      goto LABEL_186;
  }
  else
  {
    v349 = 0uLL;
    v350 = (float64x2_t *)v4[72];
    do
    {
      v351 = *v350++;
      v349 = vaddq_f64(v349, v351);
    }
    while (v350 != v348);
    v352 = v348 - v347;
    v353 = 0.0;
    do
    {
      v354 = (__int128)*v347++;
      _V4.D[1] = *((_QWORD *)&v354 + 1);
      _D6 = *((_QWORD *)&v354 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v353 = v353 + _D5;
    }
    while (v347 != v348);
    v358 = vmulq_n_f64(v349, 1.0 / (double)(unint64_t)v352);
    v359 = 0.5 / (double)(unint64_t)v352 * v353;
    v360 = atomic_load((unsigned __int8 *)&qword_254A690B8);
    v361 = &qword_254A6A000;
    v706 = v358;
    if ((v360 & 1) != 0)
      goto LABEL_186;
  }
  v586 = __cxa_guard_acquire(&qword_254A690B8);
  v358.f64[0] = v706.f64[0];
  v361 = &qword_254A6A000;
  if (v586)
  {
    qword_254A6A5E8 = 0;
    qword_254A6A5F0 = 0;
    qword_254A6A5F8 = 0;
    sub_20EAC040C((char **)&qword_254A6A5E8, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A5E8);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A5E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A690B8);
    v361 = &qword_254A6A000;
    v358.f64[0] = v706.f64[0];
  }
LABEL_186:
  sub_210214860(v24, v361[189] + 5688, v358.f64[0]);
  v363 = atomic_load((unsigned __int8 *)&qword_254A690C0);
  v364 = &qword_254A6A000;
  if ((v363 & 1) == 0)
  {
    v587 = __cxa_guard_acquire(&qword_254A690C0);
    v364 = &qword_254A6A000;
    if (v587)
    {
      qword_254A6A600 = 0;
      qword_254A6A608 = 0;
      qword_254A6A610 = 0;
      sub_20EAC040C((char **)&qword_254A6A600, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A600);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A600, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690C0);
      v364 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v364[192] + 5712, v706.f64[1]);
  v365 = atomic_load((unsigned __int8 *)&qword_254A690C8);
  v366 = &qword_254A6A000;
  if ((v365 & 1) == 0)
  {
    v588 = __cxa_guard_acquire(&qword_254A690C8);
    v366 = &qword_254A6A000;
    if (v588)
    {
      qword_254A6A618 = 0;
      qword_254A6A620 = 0;
      qword_254A6A628 = 0;
      sub_20EAC040C((char **)&qword_254A6A618, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A618);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A618, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690C8);
      v366 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v366[195] + 5736, sqrt(v359));
  v367 = (float64x2_t *)v4[75];
  v368 = (float64x2_t *)v4[76];
  if (v367 == v368)
  {
    v379 = 0.0;
    v378.f64[0] = 0.0;
    v382 = atomic_load((unsigned __int8 *)&qword_254A690D0);
    v381 = &qword_254A6A000;
    v707 = 0u;
    if ((v382 & 1) != 0)
      goto LABEL_196;
  }
  else
  {
    v369 = 0uLL;
    v370 = (float64x2_t *)v4[75];
    do
    {
      v371 = *v370++;
      v369 = vaddq_f64(v369, v371);
    }
    while (v370 != v368);
    v372 = v368 - v367;
    v373 = 0.0;
    do
    {
      v374 = (__int128)*v367++;
      _V4.D[1] = *((_QWORD *)&v374 + 1);
      _D6 = *((_QWORD *)&v374 + 1);
      __asm { FMLA            D5, D6, V4.D[1] }
      v373 = v373 + _D5;
    }
    while (v367 != v368);
    v378 = vmulq_n_f64(v369, 1.0 / (double)(unint64_t)v372);
    v379 = 0.5 / (double)(unint64_t)v372 * v373;
    v380 = atomic_load((unsigned __int8 *)&qword_254A690D0);
    v381 = &qword_254A6A000;
    v707 = v378;
    if ((v380 & 1) != 0)
      goto LABEL_196;
  }
  v589 = __cxa_guard_acquire(&qword_254A690D0);
  v378.f64[0] = v707.f64[0];
  v381 = &qword_254A6A000;
  if (v589)
  {
    qword_254A6A630 = 0;
    qword_254A6A638 = 0;
    qword_254A6A640 = 0;
    sub_20EAC040C((char **)&qword_254A6A630, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A630);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A630, &dword_20E81F000);
    __cxa_guard_release(&qword_254A690D0);
    v381 = &qword_254A6A000;
    v378.f64[0] = v707.f64[0];
  }
LABEL_196:
  sub_210214860(v24, v381[198] + 5760, v378.f64[0]);
  v383 = atomic_load((unsigned __int8 *)&qword_254A690D8);
  v384 = &qword_254A6A000;
  if ((v383 & 1) == 0)
  {
    v590 = __cxa_guard_acquire(&qword_254A690D8);
    v384 = &qword_254A6A000;
    if (v590)
    {
      qword_254A6A648 = 0;
      qword_254A6A650 = 0;
      qword_254A6A658 = 0;
      sub_20EAC040C((char **)&qword_254A6A648, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A648);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A648, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690D8);
      v384 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v384[201] + 5784, v707.f64[1]);
  v385 = atomic_load((unsigned __int8 *)&qword_254A690E0);
  v386 = &qword_254A6A000;
  if ((v385 & 1) == 0)
  {
    v591 = __cxa_guard_acquire(&qword_254A690E0);
    v386 = &qword_254A6A000;
    if (v591)
    {
      qword_254A6A660 = 0;
      qword_254A6A668 = 0;
      qword_254A6A670 = 0;
      sub_20EAC040C((char **)&qword_254A6A660, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A660);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A660, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690E0);
      v386 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v386[204] + 5808, sqrt(v379));
  v387 = (char *)v4[78];
  v388 = (float64x2_t *)v4[79];
  v389 = 0uLL;
  if (v387 != (char *)v388)
  {
    v390 = (float64x2_t *)v4[78];
    do
    {
      v391 = *v390++;
      v389 = vaddq_f64(v389, v391);
    }
    while (v390 != v388);
    v389 = vmulq_n_f64(vsqrtq_f64(v389), 1.0 / (double)(unint64_t)(((char *)v388 - v387) >> 4));
  }
  v392 = atomic_load((unsigned __int8 *)&qword_254A690E8);
  v393 = &qword_254A6A000;
  v708 = v389;
  if ((v392 & 1) == 0)
  {
    v592 = __cxa_guard_acquire(&qword_254A690E8);
    v389.f64[0] = v708.f64[0];
    v393 = &qword_254A6A000;
    if (v592)
    {
      qword_254A6A678 = 0;
      qword_254A6A680 = 0;
      qword_254A6A688 = 0;
      sub_20EAC040C((char **)&qword_254A6A678, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A678);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A678, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690E8);
      v393 = &qword_254A6A000;
      v389.f64[0] = v708.f64[0];
    }
  }
  sub_210214860(v24, v393[207] + 5832, v389.f64[0]);
  v394 = atomic_load((unsigned __int8 *)&qword_254A690F0);
  v395 = &qword_254A6A000;
  if ((v394 & 1) == 0)
  {
    v593 = __cxa_guard_acquire(&qword_254A690F0);
    v395 = &qword_254A6A000;
    if (v593)
    {
      qword_254A6A690 = 0;
      qword_254A6A698 = 0;
      qword_254A6A6A0 = 0;
      sub_20EAC040C((char **)&qword_254A6A690, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A690);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A690, &dword_20E81F000);
      __cxa_guard_release(&qword_254A690F0);
      v395 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v395[210] + 5856, v708.f64[1]);
  if (*((_DWORD *)v4 + 196))
  {
    v396 = v4[96];
    v709 = *(double *)(v396 + 112);
    v682 = *(int8x16_t *)(v396 + 96);
    *(_QWORD *)&v685 = vextq_s8(v682, v682, 8uLL).u64[0];
    v397 = *(int8x16_t *)v396;
    v676 = *(int8x16_t *)(v396 + 80);
    *(_QWORD *)&v679 = vextq_s8(v676, v676, 8uLL).u64[0];
    v670 = *(int8x16_t *)(v396 + 64);
    *(_QWORD *)&v673 = vextq_s8(v670, v670, 8uLL).u64[0];
    v666 = *(int8x16_t *)(v396 + 48);
    *(_QWORD *)&v668 = vextq_s8(v666, v666, 8uLL).u64[0];
    v662 = *(int8x16_t *)(v396 + 32);
    *(_QWORD *)&v664 = vextq_s8(v662, v662, 8uLL).u64[0];
    v658 = *(int8x16_t *)(v396 + 16);
    *(_QWORD *)&v660 = vextq_s8(v658, v658, 8uLL).u64[0];
    *(_QWORD *)&v656 = vextq_s8(v397, v397, 8uLL).u64[0];
    v398 = atomic_load((unsigned __int8 *)&qword_254A690F8);
    v399 = &qword_254A6A000;
    if ((v398 & 1) != 0)
      goto LABEL_208;
  }
  else
  {
    v397.i64[0] = 0;
    v656 = 0.0;
    v658.i64[0] = 0;
    v660 = 0.0;
    v662.i64[0] = 0;
    v664 = 0.0;
    v666.i64[0] = 0;
    v668 = 0.0;
    v670.i64[0] = 0;
    v673 = 0.0;
    v676.i64[0] = 0;
    v679 = 0.0;
    v682.i64[0] = 0;
    v685 = 0.0;
    v709 = 0.0;
    v400 = atomic_load((unsigned __int8 *)&qword_254A690F8);
    v399 = &qword_254A6A000;
    if ((v400 & 1) != 0)
      goto LABEL_208;
  }
  v654 = v397.i64[0];
  v594 = __cxa_guard_acquire(&qword_254A690F8);
  v397.i64[0] = v654;
  v399 = &qword_254A6A000;
  if (v594)
  {
    qword_254A6A6A8 = 0;
    qword_254A6A6B0 = 0;
    qword_254A6A6B8 = 0;
    sub_20EAC040C((char **)&qword_254A6A6A8, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A6A8);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A6A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A690F8);
    v399 = &qword_254A6A000;
    v397.i64[0] = v654;
  }
LABEL_208:
  sub_210214860(v24, v399[213] + 5880, *(double *)v397.i64);
  v401 = atomic_load((unsigned __int8 *)&qword_254A69100);
  v402 = &qword_254A6A000;
  if ((v401 & 1) == 0)
  {
    v595 = __cxa_guard_acquire(&qword_254A69100);
    v402 = &qword_254A6A000;
    if (v595)
    {
      qword_254A6A6C0 = 0;
      qword_254A6A6C8 = 0;
      qword_254A6A6D0 = 0;
      sub_20EAC040C((char **)&qword_254A6A6C0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A6C0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A6C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69100);
      v402 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v402[216] + 5904, v656);
  v403 = atomic_load((unsigned __int8 *)&qword_254A69108);
  v404 = &qword_254A6A000;
  if ((v403 & 1) == 0)
  {
    v596 = __cxa_guard_acquire(&qword_254A69108);
    v404 = &qword_254A6A000;
    if (v596)
    {
      qword_254A6A6D8 = 0;
      qword_254A6A6E0 = 0;
      qword_254A6A6E8 = 0;
      sub_20EAC040C((char **)&qword_254A6A6D8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A6D8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A6D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69108);
      v404 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v404[219] + 5928, *(double *)v658.i64);
  v405 = atomic_load((unsigned __int8 *)&qword_254A69110);
  v406 = &qword_254A6A000;
  if ((v405 & 1) == 0)
  {
    v597 = __cxa_guard_acquire(&qword_254A69110);
    v406 = &qword_254A6A000;
    if (v597)
    {
      qword_254A6A6F0 = 0;
      qword_254A6A6F8 = 0;
      qword_254A6A700 = 0;
      sub_20EAC040C((char **)&qword_254A6A6F0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A6F0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A6F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69110);
      v406 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v406[222] + 5952, v660);
  v407 = atomic_load((unsigned __int8 *)&qword_254A69118);
  v408 = &qword_254A6A000;
  if ((v407 & 1) == 0)
  {
    v598 = __cxa_guard_acquire(&qword_254A69118);
    v408 = &qword_254A6A000;
    if (v598)
    {
      qword_254A6A708 = 0;
      qword_254A6A710 = 0;
      qword_254A6A718 = 0;
      sub_20EAC040C((char **)&qword_254A6A708, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A708);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A708, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69118);
      v408 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v408[225] + 5976, *(double *)v662.i64);
  v409 = atomic_load((unsigned __int8 *)&qword_254A69120);
  v410 = &qword_254A6A000;
  if ((v409 & 1) == 0)
  {
    v599 = __cxa_guard_acquire(&qword_254A69120);
    v410 = &qword_254A6A000;
    if (v599)
    {
      qword_254A6A720 = 0;
      qword_254A6A728 = 0;
      qword_254A6A730 = 0;
      sub_20EAC040C((char **)&qword_254A6A720, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A720);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A720, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69120);
      v410 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v410[228] + 6000, v664);
  v411 = atomic_load((unsigned __int8 *)&qword_254A69128);
  v412 = &qword_254A6A000;
  if ((v411 & 1) == 0)
  {
    v600 = __cxa_guard_acquire(&qword_254A69128);
    v412 = &qword_254A6A000;
    if (v600)
    {
      qword_254A6A738 = 0;
      qword_254A6A740 = 0;
      qword_254A6A748 = 0;
      sub_20EAC040C((char **)&qword_254A6A738, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A738);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A738, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69128);
      v412 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v412[231] + 6024, *(double *)v666.i64);
  v413 = atomic_load((unsigned __int8 *)&qword_254A69130);
  v414 = &qword_254A6A000;
  if ((v413 & 1) == 0)
  {
    v601 = __cxa_guard_acquire(&qword_254A69130);
    v414 = &qword_254A6A000;
    if (v601)
    {
      qword_254A6A750 = 0;
      qword_254A6A758 = 0;
      qword_254A6A760 = 0;
      sub_20EAC040C((char **)&qword_254A6A750, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A750);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A750, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69130);
      v414 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v414[234] + 6048, v668);
  v415 = atomic_load((unsigned __int8 *)&qword_254A69138);
  v416 = &qword_254A6A000;
  if ((v415 & 1) == 0)
  {
    v602 = __cxa_guard_acquire(&qword_254A69138);
    v416 = &qword_254A6A000;
    if (v602)
    {
      qword_254A6A768 = 0;
      qword_254A6A770 = 0;
      qword_254A6A778 = 0;
      sub_20EAC040C((char **)&qword_254A6A768, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A768);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A768, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69138);
      v416 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v416[237] + 6072, *(double *)v670.i64);
  v417 = atomic_load((unsigned __int8 *)&qword_254A69140);
  v418 = &qword_254A6A000;
  if ((v417 & 1) == 0)
  {
    v603 = __cxa_guard_acquire(&qword_254A69140);
    v418 = &qword_254A6A000;
    if (v603)
    {
      qword_254A6A780 = 0;
      qword_254A6A788 = 0;
      qword_254A6A790 = 0;
      sub_20EAC040C((char **)&qword_254A6A780, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A780);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A780, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69140);
      v418 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v418[240] + 6096, v673);
  v419 = atomic_load((unsigned __int8 *)&qword_254A69148);
  v420 = &qword_254A6A000;
  if ((v419 & 1) == 0)
  {
    v604 = __cxa_guard_acquire(&qword_254A69148);
    v420 = &qword_254A6A000;
    if (v604)
    {
      qword_254A6A798 = 0;
      qword_254A6A7A0 = 0;
      qword_254A6A7A8 = 0;
      sub_20EAC040C((char **)&qword_254A6A798, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A798);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A798, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69148);
      v420 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v420[243] + 6120, *(double *)v676.i64);
  v421 = atomic_load((unsigned __int8 *)&qword_254A69150);
  v422 = &qword_254A6A000;
  if ((v421 & 1) == 0)
  {
    v605 = __cxa_guard_acquire(&qword_254A69150);
    v422 = &qword_254A6A000;
    if (v605)
    {
      qword_254A6A7B0 = 0;
      qword_254A6A7B8 = 0;
      qword_254A6A7C0 = 0;
      sub_20EAC040C((char **)&qword_254A6A7B0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A7B0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A7B0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69150);
      v422 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v422[246] + 6144, v679);
  v423 = atomic_load((unsigned __int8 *)&qword_254A69158);
  v424 = &qword_254A6A000;
  if ((v423 & 1) == 0)
  {
    v606 = __cxa_guard_acquire(&qword_254A69158);
    v424 = &qword_254A6A000;
    if (v606)
    {
      qword_254A6A7C8 = 0;
      qword_254A6A7D0 = 0;
      qword_254A6A7D8 = 0;
      sub_20EAC040C((char **)&qword_254A6A7C8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A7C8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A7C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69158);
      v424 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v424[249] + 6168, *(double *)v682.i64);
  v425 = atomic_load((unsigned __int8 *)&qword_254A69160);
  v426 = &qword_254A6A000;
  if ((v425 & 1) == 0)
  {
    v607 = __cxa_guard_acquire(&qword_254A69160);
    v426 = &qword_254A6A000;
    if (v607)
    {
      qword_254A6A7E0 = 0;
      qword_254A6A7E8 = 0;
      qword_254A6A7F0 = 0;
      sub_20EAC040C((char **)&qword_254A6A7E0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A7E0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A7E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69160);
      v426 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v426[252] + 6192, v685);
  v427 = atomic_load((unsigned __int8 *)&qword_254A69168);
  v428 = &qword_254A6A000;
  if ((v427 & 1) == 0)
  {
    v608 = __cxa_guard_acquire(&qword_254A69168);
    v428 = &qword_254A6A000;
    if (v608)
    {
      qword_254A6A7F8 = 0;
      qword_254A6A800 = 0;
      qword_254A6A808 = 0;
      sub_20EAC040C((char **)&qword_254A6A7F8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A7F8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A7F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69168);
      v428 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v428[255] + 6216, v709);
  if (*((_DWORD *)v4 + 208))
  {
    v429 = v4[102];
    v710 = *(double *)(v429 + 112);
    v683 = *(int8x16_t *)(v429 + 96);
    *(_QWORD *)&v686 = vextq_s8(v683, v683, 8uLL).u64[0];
    v430 = *(int8x16_t *)v429;
    v677 = *(int8x16_t *)(v429 + 80);
    *(_QWORD *)&v680 = vextq_s8(v677, v677, 8uLL).u64[0];
    v671 = *(int8x16_t *)(v429 + 64);
    *(_QWORD *)&v674 = vextq_s8(v671, v671, 8uLL).u64[0];
    v667 = *(int8x16_t *)(v429 + 48);
    *(_QWORD *)&v669 = vextq_s8(v667, v667, 8uLL).u64[0];
    v663 = *(int8x16_t *)(v429 + 32);
    *(_QWORD *)&v665 = vextq_s8(v663, v663, 8uLL).u64[0];
    v659 = *(int8x16_t *)(v429 + 16);
    *(_QWORD *)&v661 = vextq_s8(v659, v659, 8uLL).u64[0];
    *(_QWORD *)&v657 = vextq_s8(v430, v430, 8uLL).u64[0];
    v431 = atomic_load((unsigned __int8 *)&qword_254A69170);
    v432 = &qword_254A6A000;
    if ((v431 & 1) != 0)
      goto LABEL_226;
  }
  else
  {
    v430.i64[0] = 0;
    v657 = 0.0;
    v659.i64[0] = 0;
    v661 = 0.0;
    v663.i64[0] = 0;
    v665 = 0.0;
    v667.i64[0] = 0;
    v669 = 0.0;
    v671.i64[0] = 0;
    v674 = 0.0;
    v677.i64[0] = 0;
    v680 = 0.0;
    v683.i64[0] = 0;
    v686 = 0.0;
    v710 = 0.0;
    v433 = atomic_load((unsigned __int8 *)&qword_254A69170);
    v432 = &qword_254A6A000;
    if ((v433 & 1) != 0)
      goto LABEL_226;
  }
  v655 = v430.i64[0];
  v609 = __cxa_guard_acquire(&qword_254A69170);
  v430.i64[0] = v655;
  v432 = &qword_254A6A000;
  if (v609)
  {
    qword_254A6A810 = 0;
    qword_254A6A818 = 0;
    qword_254A6A820 = 0;
    sub_20EAC040C((char **)&qword_254A6A810, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A810);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A810, &dword_20E81F000);
    __cxa_guard_release(&qword_254A69170);
    v432 = &qword_254A6A000;
    v430.i64[0] = v655;
  }
LABEL_226:
  sub_210214860(v24, v432[258] + 6240, *(double *)v430.i64);
  v434 = atomic_load((unsigned __int8 *)&qword_254A69178);
  v435 = &qword_254A6A000;
  if ((v434 & 1) == 0)
  {
    v610 = __cxa_guard_acquire(&qword_254A69178);
    v435 = &qword_254A6A000;
    if (v610)
    {
      qword_254A6A828 = 0;
      qword_254A6A830 = 0;
      qword_254A6A838 = 0;
      sub_20EAC040C((char **)&qword_254A6A828, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A828);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A828, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69178);
      v435 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v435[261] + 6264, v657);
  v436 = atomic_load((unsigned __int8 *)&qword_254A69180);
  v437 = &qword_254A6A000;
  if ((v436 & 1) == 0)
  {
    v611 = __cxa_guard_acquire(&qword_254A69180);
    v437 = &qword_254A6A000;
    if (v611)
    {
      qword_254A6A840 = 0;
      qword_254A6A848 = 0;
      qword_254A6A850 = 0;
      sub_20EAC040C((char **)&qword_254A6A840, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A840);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A840, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69180);
      v437 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v437[264] + 6288, *(double *)v659.i64);
  v438 = atomic_load((unsigned __int8 *)&qword_254A69188);
  v439 = &qword_254A6A000;
  if ((v438 & 1) == 0)
  {
    v612 = __cxa_guard_acquire(&qword_254A69188);
    v439 = &qword_254A6A000;
    if (v612)
    {
      qword_254A6A858 = 0;
      qword_254A6A860 = 0;
      qword_254A6A868 = 0;
      sub_20EAC040C((char **)&qword_254A6A858, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A858);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A858, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69188);
      v439 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v439[267] + 6312, v661);
  v440 = atomic_load((unsigned __int8 *)&qword_254A69190);
  v441 = &qword_254A6A000;
  if ((v440 & 1) == 0)
  {
    v613 = __cxa_guard_acquire(&qword_254A69190);
    v441 = &qword_254A6A000;
    if (v613)
    {
      qword_254A6A870 = 0;
      qword_254A6A878 = 0;
      qword_254A6A880 = 0;
      sub_20EAC040C((char **)&qword_254A6A870, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A870);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A870, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69190);
      v441 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v441[270] + 6336, *(double *)v663.i64);
  v442 = atomic_load((unsigned __int8 *)&qword_254A69198);
  v443 = &qword_254A6A000;
  if ((v442 & 1) == 0)
  {
    v614 = __cxa_guard_acquire(&qword_254A69198);
    v443 = &qword_254A6A000;
    if (v614)
    {
      qword_254A6A888 = 0;
      qword_254A6A890 = 0;
      qword_254A6A898 = 0;
      sub_20EAC040C((char **)&qword_254A6A888, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A888);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A888, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69198);
      v443 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v443[273] + 6360, v665);
  v444 = atomic_load((unsigned __int8 *)&qword_254A691A0);
  v445 = &qword_254A6A000;
  if ((v444 & 1) == 0)
  {
    v615 = __cxa_guard_acquire(&qword_254A691A0);
    v445 = &qword_254A6A000;
    if (v615)
    {
      qword_254A6A8A0 = 0;
      qword_254A6A8A8 = 0;
      qword_254A6A8B0 = 0;
      sub_20EAC040C((char **)&qword_254A6A8A0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A8A0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A8A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691A0);
      v445 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v445[276] + 6384, *(double *)v667.i64);
  v446 = atomic_load((unsigned __int8 *)&qword_254A691A8);
  v447 = &qword_254A6A000;
  if ((v446 & 1) == 0)
  {
    v616 = __cxa_guard_acquire(&qword_254A691A8);
    v447 = &qword_254A6A000;
    if (v616)
    {
      qword_254A6A8B8 = 0;
      qword_254A6A8C0 = 0;
      qword_254A6A8C8 = 0;
      sub_20EAC040C((char **)&qword_254A6A8B8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A8B8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A8B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691A8);
      v447 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v447[279] + 6408, v669);
  v448 = atomic_load((unsigned __int8 *)&qword_254A691B0);
  v449 = &qword_254A6A000;
  if ((v448 & 1) == 0)
  {
    v617 = __cxa_guard_acquire(&qword_254A691B0);
    v449 = &qword_254A6A000;
    if (v617)
    {
      qword_254A6A8D0 = 0;
      qword_254A6A8D8 = 0;
      qword_254A6A8E0 = 0;
      sub_20EAC040C((char **)&qword_254A6A8D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A8D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A8D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691B0);
      v449 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v449[282] + 6432, *(double *)v671.i64);
  v450 = atomic_load((unsigned __int8 *)&qword_254A691B8);
  v451 = &qword_254A6A000;
  if ((v450 & 1) == 0)
  {
    v618 = __cxa_guard_acquire(&qword_254A691B8);
    v451 = &qword_254A6A000;
    if (v618)
    {
      qword_254A6A8E8 = 0;
      qword_254A6A8F0 = 0;
      qword_254A6A8F8 = 0;
      sub_20EAC040C((char **)&qword_254A6A8E8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A8E8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A8E8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691B8);
      v451 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v451[285] + 6456, v674);
  v452 = atomic_load((unsigned __int8 *)&qword_254A691C0);
  v453 = &qword_254A6A000;
  if ((v452 & 1) == 0)
  {
    v619 = __cxa_guard_acquire(&qword_254A691C0);
    v453 = &qword_254A6A000;
    if (v619)
    {
      qword_254A6A900 = 0;
      qword_254A6A908 = 0;
      qword_254A6A910 = 0;
      sub_20EAC040C((char **)&qword_254A6A900, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A900);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A900, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691C0);
      v453 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v453[288] + 6480, *(double *)v677.i64);
  v454 = atomic_load((unsigned __int8 *)&qword_254A691C8);
  v455 = &qword_254A6A000;
  if ((v454 & 1) == 0)
  {
    v620 = __cxa_guard_acquire(&qword_254A691C8);
    v455 = &qword_254A6A000;
    if (v620)
    {
      qword_254A6A918 = 0;
      qword_254A6A920 = 0;
      qword_254A6A928 = 0;
      sub_20EAC040C((char **)&qword_254A6A918, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A918);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A918, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691C8);
      v455 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v455[291] + 6504, v680);
  v456 = atomic_load((unsigned __int8 *)&qword_254A691D0);
  v457 = &qword_254A6A000;
  if ((v456 & 1) == 0)
  {
    v621 = __cxa_guard_acquire(&qword_254A691D0);
    v457 = &qword_254A6A000;
    if (v621)
    {
      qword_254A6A930 = 0;
      qword_254A6A938 = 0;
      qword_254A6A940 = 0;
      sub_20EAC040C((char **)&qword_254A6A930, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A930);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A930, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691D0);
      v457 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v457[294] + 6528, *(double *)v683.i64);
  v458 = atomic_load((unsigned __int8 *)&qword_254A691D8);
  v459 = &qword_254A6A000;
  if ((v458 & 1) == 0)
  {
    v622 = __cxa_guard_acquire(&qword_254A691D8);
    v459 = &qword_254A6A000;
    if (v622)
    {
      qword_254A6A948 = 0;
      qword_254A6A950 = 0;
      qword_254A6A958 = 0;
      sub_20EAC040C((char **)&qword_254A6A948, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A948);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A948, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691D8);
      v459 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v459[297] + 6552, v686);
  v460 = atomic_load((unsigned __int8 *)&qword_254A691E0);
  v461 = &qword_254A6A000;
  if ((v460 & 1) == 0)
  {
    v623 = __cxa_guard_acquire(&qword_254A691E0);
    v461 = &qword_254A6A000;
    if (v623)
    {
      qword_254A6A960 = 0;
      qword_254A6A968 = 0;
      qword_254A6A970 = 0;
      sub_20EAC040C((char **)&qword_254A6A960, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A960);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A960, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691E0);
      v461 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v461[300] + 6576, v710);
  if (*((_DWORD *)v4 + 220))
  {
    v462 = (double *)v4[108];
    v463 = sqrt(*v462);
    v464 = sqrt(v462[1]);
    v465 = sqrt(v462[2]);
    v466 = sqrt(v462[3]);
    v467 = sqrt(v462[4]);
    v468 = sqrt(v462[5]);
    v469 = sqrt(v462[6]);
    v470 = sqrt(v462[7]);
    v672 = sqrt(v462[8]);
    v675 = sqrt(v462[9]);
    v678 = sqrt(v462[10]);
    v681 = sqrt(v462[11]);
    v684 = sqrt(v462[12]);
    v687 = sqrt(v462[13]);
    v711 = sqrt(v462[14]);
    v471 = atomic_load((unsigned __int8 *)&qword_254A691E8);
    v472 = &qword_254A6A000;
    if ((v471 & 1) == 0)
    {
LABEL_457:
      v624 = __cxa_guard_acquire(&qword_254A691E8);
      v472 = &qword_254A6A000;
      if (v624)
      {
        qword_254A6A978 = 0;
        qword_254A6A980 = 0;
        qword_254A6A988 = 0;
        sub_20EAC040C((char **)&qword_254A6A978, 0x147uLL);
        sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A978);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A978, &dword_20E81F000);
        __cxa_guard_release(&qword_254A691E8);
        v472 = &qword_254A6A000;
      }
    }
  }
  else
  {
    v463 = 0.0;
    v464 = 0.0;
    v465 = 0.0;
    v466 = 0.0;
    v467 = 0.0;
    v468 = 0.0;
    v469 = 0.0;
    v470 = 0.0;
    v672 = 0.0;
    v675 = 0.0;
    v678 = 0.0;
    v681 = 0.0;
    v684 = 0.0;
    v687 = 0.0;
    v711 = 0.0;
    v473 = atomic_load((unsigned __int8 *)&qword_254A691E8);
    v472 = &qword_254A6A000;
    if ((v473 & 1) == 0)
      goto LABEL_457;
  }
  sub_210214860(v24, v472[303] + 6600, v463);
  v474 = atomic_load((unsigned __int8 *)&qword_254A691F0);
  v475 = &qword_254A6A000;
  if ((v474 & 1) == 0)
  {
    v625 = __cxa_guard_acquire(&qword_254A691F0);
    v475 = &qword_254A6A000;
    if (v625)
    {
      qword_254A6A990 = 0;
      qword_254A6A998 = 0;
      qword_254A6A9A0 = 0;
      sub_20EAC040C((char **)&qword_254A6A990, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A990);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A990, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691F0);
      v475 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v475[306] + 6624, v464);
  v476 = atomic_load((unsigned __int8 *)&qword_254A691F8);
  v477 = &qword_254A6A000;
  if ((v476 & 1) == 0)
  {
    v626 = __cxa_guard_acquire(&qword_254A691F8);
    v477 = &qword_254A6A000;
    if (v626)
    {
      qword_254A6A9A8 = 0;
      qword_254A6A9B0 = 0;
      qword_254A6A9B8 = 0;
      sub_20EAC040C((char **)&qword_254A6A9A8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A9A8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A9A8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A691F8);
      v477 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v477[309] + 6648, v465);
  v478 = atomic_load((unsigned __int8 *)&qword_254A69200);
  v479 = &qword_254A6A000;
  if ((v478 & 1) == 0)
  {
    v627 = __cxa_guard_acquire(&qword_254A69200);
    v479 = &qword_254A6A000;
    if (v627)
    {
      qword_254A6A9C0 = 0;
      qword_254A6A9C8 = 0;
      qword_254A6A9D0 = 0;
      sub_20EAC040C((char **)&qword_254A6A9C0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A9C0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A9C0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69200);
      v479 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v479[312] + 6672, v466);
  v480 = atomic_load((unsigned __int8 *)&qword_254A69208);
  v481 = &qword_254A6A000;
  if ((v480 & 1) == 0)
  {
    v628 = __cxa_guard_acquire(&qword_254A69208);
    v481 = &qword_254A6A000;
    if (v628)
    {
      qword_254A6A9D8 = 0;
      qword_254A6A9E0 = 0;
      qword_254A6A9E8 = 0;
      sub_20EAC040C((char **)&qword_254A6A9D8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A9D8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A9D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69208);
      v481 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v481[315] + 6696, v467);
  v482 = atomic_load((unsigned __int8 *)&qword_254A69210);
  v483 = &qword_254A6A000;
  if ((v482 & 1) == 0)
  {
    v629 = __cxa_guard_acquire(&qword_254A69210);
    v483 = &qword_254A6A000;
    if (v629)
    {
      qword_254A6A9F0 = 0;
      qword_254A6A9F8 = 0;
      qword_254A6AA00 = 0;
      sub_20EAC040C((char **)&qword_254A6A9F0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6A9F0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6A9F0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69210);
      v483 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v483[318] + 6720, v468);
  v484 = atomic_load((unsigned __int8 *)&qword_254A69218);
  v485 = &qword_254A6A000;
  if ((v484 & 1) == 0)
  {
    v630 = __cxa_guard_acquire(&qword_254A69218);
    v485 = &qword_254A6A000;
    if (v630)
    {
      qword_254A6AA08 = 0;
      qword_254A6AA10 = 0;
      qword_254A6AA18 = 0;
      sub_20EAC040C((char **)&qword_254A6AA08, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA08);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA08, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69218);
      v485 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v485[321] + 6744, v469);
  v486 = atomic_load((unsigned __int8 *)&qword_254A69220);
  v487 = &qword_254A6A000;
  if ((v486 & 1) == 0)
  {
    v631 = __cxa_guard_acquire(&qword_254A69220);
    v487 = &qword_254A6A000;
    if (v631)
    {
      qword_254A6AA20 = 0;
      qword_254A6AA28 = 0;
      qword_254A6AA30 = 0;
      sub_20EAC040C((char **)&qword_254A6AA20, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA20);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69220);
      v487 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v487[324] + 6768, v470);
  v488 = atomic_load((unsigned __int8 *)&qword_254A69228);
  v489 = &qword_254A6A000;
  if ((v488 & 1) == 0)
  {
    v632 = __cxa_guard_acquire(&qword_254A69228);
    v489 = &qword_254A6A000;
    if (v632)
    {
      qword_254A6AA38 = 0;
      qword_254A6AA40 = 0;
      qword_254A6AA48 = 0;
      sub_20EAC040C((char **)&qword_254A6AA38, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA38);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69228);
      v489 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v489[327] + 6792, v672);
  v490 = atomic_load((unsigned __int8 *)&qword_254A69230);
  v491 = &qword_254A6A000;
  if ((v490 & 1) == 0)
  {
    v633 = __cxa_guard_acquire(&qword_254A69230);
    v491 = &qword_254A6A000;
    if (v633)
    {
      qword_254A6AA50 = 0;
      qword_254A6AA58 = 0;
      qword_254A6AA60 = 0;
      sub_20EAC040C((char **)&qword_254A6AA50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA50);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69230);
      v491 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v491[330] + 6816, v675);
  v492 = atomic_load((unsigned __int8 *)&qword_254A69238);
  v493 = &qword_254A6A000;
  if ((v492 & 1) == 0)
  {
    v634 = __cxa_guard_acquire(&qword_254A69238);
    v493 = &qword_254A6A000;
    if (v634)
    {
      qword_254A6AA68 = 0;
      qword_254A6AA70 = 0;
      qword_254A6AA78 = 0;
      sub_20EAC040C((char **)&qword_254A6AA68, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA68);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA68, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69238);
      v493 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v493[333] + 6840, v678);
  v494 = atomic_load((unsigned __int8 *)&qword_254A69240);
  v495 = &qword_254A6A000;
  if ((v494 & 1) == 0)
  {
    v635 = __cxa_guard_acquire(&qword_254A69240);
    v495 = &qword_254A6A000;
    if (v635)
    {
      qword_254A6AA80 = 0;
      qword_254A6AA88 = 0;
      qword_254A6AA90 = 0;
      sub_20EAC040C((char **)&qword_254A6AA80, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA80);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA80, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69240);
      v495 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v495[336] + 6864, v681);
  v496 = atomic_load((unsigned __int8 *)&qword_254A69248);
  v497 = &qword_254A6A000;
  if ((v496 & 1) == 0)
  {
    v636 = __cxa_guard_acquire(&qword_254A69248);
    v497 = &qword_254A6A000;
    if (v636)
    {
      qword_254A6AA98 = 0;
      qword_254A6AAA0 = 0;
      qword_254A6AAA8 = 0;
      sub_20EAC040C((char **)&qword_254A6AA98, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AA98);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AA98, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69248);
      v497 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v497[339] + 6888, v684);
  v498 = atomic_load((unsigned __int8 *)&qword_254A69250);
  v499 = &qword_254A6A000;
  if ((v498 & 1) == 0)
  {
    v637 = __cxa_guard_acquire(&qword_254A69250);
    v499 = &qword_254A6A000;
    if (v637)
    {
      qword_254A6AAB0 = 0;
      qword_254A6AAB8 = 0;
      qword_254A6AAC0 = 0;
      sub_20EAC040C((char **)&qword_254A6AAB0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AAB0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AAB0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69250);
      v499 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v499[342] + 6912, v687);
  v500 = atomic_load((unsigned __int8 *)&qword_254A69258);
  v501 = &qword_254A6A000;
  if ((v500 & 1) == 0)
  {
    v638 = __cxa_guard_acquire(&qword_254A69258);
    v501 = &qword_254A6A000;
    if (v638)
    {
      qword_254A6AAC8 = 0;
      qword_254A6AAD0 = 0;
      qword_254A6AAD8 = 0;
      sub_20EAC040C((char **)&qword_254A6AAC8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AAC8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AAC8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69258);
      v501 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v501[345] + 6936, v711);
  LODWORD(v469) = *(_DWORD *)v4;
  v502 = atomic_load((unsigned __int8 *)&qword_254A69260);
  v503 = &qword_254A6A000;
  if ((v502 & 1) == 0)
  {
    v639 = __cxa_guard_acquire(&qword_254A69260);
    v503 = &qword_254A6A000;
    if (v639)
    {
      qword_254A6AAE0 = 0;
      qword_254A6AAE8 = 0;
      qword_254A6AAF0 = 0;
      sub_20EAC040C((char **)&qword_254A6AAE0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AAE0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AAE0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69260);
      v503 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v503[348] + 4032, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 1);
  v504 = atomic_load((unsigned __int8 *)&qword_254A69268);
  v505 = &qword_254A6A000;
  if ((v504 & 1) == 0)
  {
    v640 = __cxa_guard_acquire(&qword_254A69268);
    v505 = &qword_254A6A000;
    if (v640)
    {
      qword_254A6AAF8 = 0;
      qword_254A6AB00 = 0;
      qword_254A6AB08 = 0;
      sub_20EAC040C((char **)&qword_254A6AAF8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AAF8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AAF8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69268);
      v505 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v505[351] + 4056, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 2);
  v506 = atomic_load((unsigned __int8 *)&qword_254A69270);
  v507 = &qword_254A6A000;
  if ((v506 & 1) == 0)
  {
    v641 = __cxa_guard_acquire(&qword_254A69270);
    v507 = &qword_254A6A000;
    if (v641)
    {
      qword_254A6AB10 = 0;
      qword_254A6AB18 = 0;
      qword_254A6AB20 = 0;
      sub_20EAC040C((char **)&qword_254A6AB10, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB10);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB10, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69270);
      v507 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v507[354] + 4080, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 3);
  v508 = atomic_load((unsigned __int8 *)&qword_254A69278);
  v509 = &qword_254A6A000;
  if ((v508 & 1) == 0)
  {
    v642 = __cxa_guard_acquire(&qword_254A69278);
    v509 = &qword_254A6A000;
    if (v642)
    {
      qword_254A6AB28 = 0;
      qword_254A6AB30 = 0;
      qword_254A6AB38 = 0;
      sub_20EAC040C((char **)&qword_254A6AB28, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB28);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB28, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69278);
      v509 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v509[357] + 4104, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 58);
  v510 = atomic_load((unsigned __int8 *)&qword_254A69280);
  v511 = &qword_254A6A000;
  if ((v510 & 1) == 0)
  {
    v643 = __cxa_guard_acquire(&qword_254A69280);
    v511 = &qword_254A6A000;
    if (v643)
    {
      qword_254A6AB40 = 0;
      qword_254A6AB48 = 0;
      qword_254A6AB50 = 0;
      sub_20EAC040C((char **)&qword_254A6AB40, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB40);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69280);
      v511 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v511[360] + 4728, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 59);
  v512 = atomic_load((unsigned __int8 *)&qword_254A69288);
  v513 = &qword_254A6A000;
  if ((v512 & 1) == 0)
  {
    v644 = __cxa_guard_acquire(&qword_254A69288);
    v513 = &qword_254A6A000;
    if (v644)
    {
      qword_254A6AB58 = 0;
      qword_254A6AB60 = 0;
      qword_254A6AB68 = 0;
      sub_20EAC040C((char **)&qword_254A6AB58, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB58);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB58, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69288);
      v513 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v513[363] + 4752, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 60);
  v514 = atomic_load((unsigned __int8 *)&qword_254A69290);
  v515 = &qword_254A6A000;
  if ((v514 & 1) == 0)
  {
    v645 = __cxa_guard_acquire(&qword_254A69290);
    v515 = &qword_254A6A000;
    if (v645)
    {
      qword_254A6AB70 = 0;
      qword_254A6AB78 = 0;
      qword_254A6AB80 = 0;
      sub_20EAC040C((char **)&qword_254A6AB70, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB70);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB70, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69290);
      v515 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v515[366] + 4776, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 61);
  v516 = atomic_load((unsigned __int8 *)&qword_254A69298);
  v517 = &qword_254A6A000;
  if ((v516 & 1) == 0)
  {
    v646 = __cxa_guard_acquire(&qword_254A69298);
    v517 = &qword_254A6A000;
    if (v646)
    {
      qword_254A6AB88 = 0;
      qword_254A6AB90 = 0;
      qword_254A6AB98 = 0;
      sub_20EAC040C((char **)&qword_254A6AB88, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AB88);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AB88, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69298);
      v517 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v517[369] + 4800, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 62);
  v518 = atomic_load((unsigned __int8 *)&qword_254A692A0);
  v519 = &qword_254A6A000;
  if ((v518 & 1) == 0)
  {
    v647 = __cxa_guard_acquire(&qword_254A692A0);
    v519 = &qword_254A6A000;
    if (v647)
    {
      qword_254A6ABA0 = 0;
      qword_254A6ABA8 = 0;
      qword_254A6ABB0 = 0;
      sub_20EAC040C((char **)&qword_254A6ABA0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6ABA0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ABA0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692A0);
      v519 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v519[372] + 4824, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 63);
  v520 = atomic_load((unsigned __int8 *)&qword_254A692A8);
  v521 = &qword_254A6A000;
  if ((v520 & 1) == 0)
  {
    v648 = __cxa_guard_acquire(&qword_254A692A8);
    v521 = &qword_254A6A000;
    if (v648)
    {
      qword_254A6ABB8 = 0;
      qword_254A6ABC0 = 0;
      qword_254A6ABC8 = 0;
      sub_20EAC040C((char **)&qword_254A6ABB8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6ABB8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ABB8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692A8);
      v521 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v521[375] + 4848, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 222);
  v522 = atomic_load((unsigned __int8 *)&qword_254A692B0);
  v523 = &qword_254A6A000;
  if ((v522 & 1) == 0)
  {
    v649 = __cxa_guard_acquire(&qword_254A692B0);
    v523 = &qword_254A6A000;
    if (v649)
    {
      qword_254A6ABD0 = 0;
      qword_254A6ABD8 = 0;
      qword_254A6ABE0 = 0;
      sub_20EAC040C((char **)&qword_254A6ABD0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6ABD0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ABD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692B0);
      v523 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v523[378] + 4152, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 223);
  v524 = atomic_load((unsigned __int8 *)&qword_254A692B8);
  v525 = &qword_254A6A000;
  if ((v524 & 1) == 0)
  {
    v650 = __cxa_guard_acquire(&qword_254A692B8);
    v525 = &qword_254A6A000;
    if (v650)
    {
      qword_254A6ABE8 = 0;
      qword_254A6ABF0 = 0;
      qword_254A6ABF8 = 0;
      sub_20EAC040C((char **)&qword_254A6ABE8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6ABE8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ABE8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692B8);
      v525 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v525[381] + 4176, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 224);
  v526 = atomic_load((unsigned __int8 *)&qword_254A692C0);
  v527 = &qword_254A6A000;
  if ((v526 & 1) == 0)
  {
    v651 = __cxa_guard_acquire(&qword_254A692C0);
    v527 = &qword_254A6A000;
    if (v651)
    {
      qword_254A6AC00 = 0;
      qword_254A6AC08 = 0;
      qword_254A6AC10 = 0;
      sub_20EAC040C((char **)&qword_254A6AC00, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AC00);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692C0);
      v527 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v527[384] + 4200, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 225);
  v528 = atomic_load((unsigned __int8 *)&qword_254A692C8);
  v529 = &qword_254A6A000;
  if ((v528 & 1) == 0)
  {
    v652 = __cxa_guard_acquire(&qword_254A692C8);
    v529 = &qword_254A6A000;
    if (v652)
    {
      qword_254A6AC18 = 0;
      qword_254A6AC20 = 0;
      qword_254A6AC28 = 0;
      sub_20EAC040C((char **)&qword_254A6AC18, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AC18);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC18, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692C8);
      v529 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v529[387] + 4224, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 226);
  v530 = atomic_load((unsigned __int8 *)&qword_254A692D0);
  v531 = &qword_254A6A000;
  if ((v530 & 1) == 0)
  {
    v653 = __cxa_guard_acquire(&qword_254A692D0);
    v531 = &qword_254A6A000;
    if (v653)
    {
      qword_254A6AC30 = 0;
      qword_254A6AC38 = 0;
      qword_254A6AC40 = 0;
      sub_20EAC040C((char **)&qword_254A6AC30, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AC30);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692D0);
      v531 = &qword_254A6A000;
    }
  }
  sub_210214860(v24, v531[390] + 4128, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 112);
  v532 = atomic_load((unsigned __int8 *)&qword_254A692D8);
  if ((v532 & 1) == 0 && __cxa_guard_acquire(&qword_254A692D8))
  {
    qword_254A6AC48 = 0;
    qword_254A6AC50 = 0;
    qword_254A6AC58 = 0;
    sub_20EAC040C((char **)&qword_254A6AC48, 0x147uLL);
    sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AC48);
    __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A692D8);
  }
  sub_210214860(v24, qword_254A6AC48 + 5352, (double)*(unint64_t *)&v469);
  LODWORD(v469) = *((_DWORD *)v4 + 113);
  v533 = atomic_load((unsigned __int8 *)&qword_254A692E0);
  if ((v533 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A692E0))
    {
      qword_254A6AC60 = 0;
      qword_254A6AC68 = 0;
      qword_254A6AC70 = 0;
      sub_20EAC040C((char **)&qword_254A6AC60, 0x147uLL);
      sub_20F053F1C((uint64_t)&v713, (uint64_t)&v712, &qword_254A6AC60);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692E0);
    }
  }
  return sub_210214860(v24, qword_254A6AC60 + 5376, (double)*(unint64_t *)&v469);
}

void sub_20F80C4D4(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6AC60;
  if (!qword_254A6AC60)
  {
    __cxa_guard_abort(&qword_254A692E0);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6AC68;
  v4 = (void *)qword_254A6AC60;
  if (qword_254A6AC68 != qword_254A6AC60)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6AC60;
  }
  qword_254A6AC68 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A692E0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F810784(uint64_t *result, uint64_t a2)
{
  BOOL v2;
  double *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  if (*(_BYTE *)(a2 + 200))
    v2 = *(_QWORD *)(a2 + 184) == 0;
  else
    v2 = 1;
  if (!v2 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v4 = (double *)result;
    v5 = atomic_load((unsigned __int8 *)&qword_254A692E8);
    v6 = &qword_254A6A000;
    if ((v5 & 1) == 0)
    {
      v12 = __cxa_guard_acquire(&qword_254A692E8);
      v6 = &qword_254A6A000;
      if (v12)
      {
        qword_254A6AC78 = 0;
        qword_254A6AC80 = 0;
        qword_254A6AC88 = 0;
        sub_20EAC040C((char **)&qword_254A6AC78, 0x147uLL);
        sub_20F053F1C((uint64_t)&v15, (uint64_t)&v14, &qword_254A6AC78);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC78, &dword_20E81F000);
        __cxa_guard_release(&qword_254A692E8);
        v6 = &qword_254A6A000;
      }
    }
    v7 = a2 + 88;
    sub_210214860(v7, v6[399] + 7248, *v4);
    v8 = atomic_load((unsigned __int8 *)&qword_254A692F0);
    v9 = &qword_254A6A000;
    if ((v8 & 1) == 0)
    {
      v13 = __cxa_guard_acquire(&qword_254A692F0);
      v9 = &qword_254A6A000;
      if (v13)
      {
        qword_254A6AC90 = 0;
        qword_254A6AC98 = 0;
        qword_254A6ACA0 = 0;
        sub_20EAC040C((char **)&qword_254A6AC90, 0x147uLL);
        sub_20F053F1C((uint64_t)&v17, (uint64_t)&v16, &qword_254A6AC90);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AC90, &dword_20E81F000);
        __cxa_guard_release(&qword_254A692F0);
        v9 = &qword_254A6A000;
      }
    }
    sub_210214860(v7, v9[402] + 7272, v4[1]);
    v10 = atomic_load((unsigned __int8 *)&qword_254A692F8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A692F8))
    {
      qword_254A6ACA8 = 0;
      qword_254A6ACB0 = 0;
      qword_254A6ACB8 = 0;
      sub_20EAC040C((char **)&qword_254A6ACA8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v19, (uint64_t)&v18, &qword_254A6ACA8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ACA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A692F8);
    }
    sub_210214860(v7, qword_254A6ACA8 + 7296, v4[2]);
    v11 = atomic_load((unsigned __int8 *)&qword_254A69300);
    if ((v11 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_254A69300))
      {
        qword_254A6ACC0 = 0;
        qword_254A6ACC8 = 0;
        qword_254A6ACD0 = 0;
        sub_20EAC040C((char **)&qword_254A6ACC0, 0x147uLL);
        sub_20F053F1C((uint64_t)&v21, (uint64_t)&v20, &qword_254A6ACC0);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ACC0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A69300);
      }
    }
    return sub_210214860(v7, qword_254A6ACC0 + 7320, v4[3]);
  }
  return result;
}

void sub_20F810A40(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6ACC0;
  if (!qword_254A6ACC0)
  {
    __cxa_guard_abort(&qword_254A69300);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6ACC8;
  v4 = (void *)qword_254A6ACC0;
  if (qword_254A6ACC8 != qword_254A6ACC0)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6ACC0;
  }
  qword_254A6ACC8 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A69300);
  _Unwind_Resume(a1);
}

void sub_20F810C68(unsigned int a1, uint64_t a2, double a3, double a4, double a5)
{
  unsigned __int8 v10;
  unsigned __int8 *v11;
  BOOL v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  double v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  if (*(_BYTE *)(a2 + 80)
    || (*(_BYTE *)(a2 + 200) ? (v12 = *(_QWORD *)(a2 + 184) == 0) : (v12 = 1),
        !v12 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144)))
  {
    v10 = atomic_load((unsigned __int8 *)&qword_254A69308);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A69308))
    {
      qword_254A6ACD8 = 0;
      qword_254A6ACE0 = 0;
      qword_254A6ACE8 = 0;
      sub_20EAC040C((char **)&qword_254A6ACD8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v21, (uint64_t)&v20, &qword_254A6ACD8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ACD8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69308);
    }
    v11 = (unsigned __int8 *)(qword_254A6ACD8 + 7560);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v11, a3);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v11, a3);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_254A69310);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A69310))
    {
      qword_254A6ACF0 = 0;
      qword_254A6ACF8 = 0;
      qword_254A6AD00 = 0;
      sub_20EAC040C((char **)&qword_254A6ACF0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v23, (uint64_t)&v22, &qword_254A6ACF0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6ACF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69310);
    }
    v14 = (unsigned __int8 *)(qword_254A6ACF0 + 7584);
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, v14, a4);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, (uint64_t)v14, a4);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_254A69318);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A69318))
    {
      qword_254A6AD08 = 0;
      qword_254A6AD10 = 0;
      qword_254A6AD18 = 0;
      sub_20EAC040C((char **)&qword_254A6AD08, 0x147uLL);
      sub_20F053F1C((uint64_t)&v25, (uint64_t)&v24, &qword_254A6AD08);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AD08, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69318);
    }
    v16 = (double)a1;
    v17 = qword_254A6AD08 + 7608;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A6AD08 + 7608), v16);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v17, v16);
  }
  if (*(_BYTE *)(a2 + 80)
    || *(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v18 = atomic_load((unsigned __int8 *)&qword_254A69320);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A69320))
    {
      qword_254A6AD20 = 0;
      qword_254A6AD28 = 0;
      qword_254A6AD30 = 0;
      sub_20EAC040C((char **)&qword_254A6AD20, 0x147uLL);
      sub_20F053F1C((uint64_t)&v27, (uint64_t)&v26, &qword_254A6AD20);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AD20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69320);
    }
    v19 = qword_254A6AD20 + 7632;
    if (*(_BYTE *)(a2 + 80))
      sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A6AD20 + 7632), a5);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      sub_210214860(a2 + 88, v19, a5);
  }
}

void sub_20F811094(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6AD20;
  if (!qword_254A6AD20)
  {
    __cxa_guard_abort(&qword_254A69320);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6AD28;
  v4 = (void *)qword_254A6AD20;
  if (qword_254A6AD28 != qword_254A6AD20)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6AD20;
  }
  qword_254A6AD28 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A69320);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F8112AC(uint64_t *result, uint64_t a2)
{
  BOOL v2;
  unsigned __int8 v4;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 200))
    v2 = *(_QWORD *)(a2 + 184) == 0;
  else
    v2 = 1;
  if (!v2 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    if ((_DWORD)result)
    {
      v5 = 0x3FF0000000000000;
      return sub_20F8113B0(a2 + 88, (double *)&v5);
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254A54FC8);
    if ((v4 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_254A54FC8))
      {
        sub_20F7F8398((uint64_t)&qword_254A54FB0);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54FB0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A54FC8);
      }
    }
    result = sub_20F8119D8((_QWORD *)(a2 + 96), qword_254A54FB0 + 7656);
    if (!result)
    {
      v5 = 0;
      return sub_20F8113B0(a2 + 88, (double *)&v5);
    }
  }
  return result;
}

void sub_20F811398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54FC8);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F8113B0(uint64_t a1, double *a2)
{
  unsigned __int8 v2;
  double *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A54FC8);
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    v4 = a2;
    v5 = __cxa_guard_acquire(&qword_254A54FC8);
    a2 = v4;
    v6 = v5;
    a1 = v7;
    if (v6)
    {
      qword_254A54FB0 = 0;
      qword_254A54FB8 = 0;
      qword_254A54FC0 = 0;
      sub_20EAC040C((char **)&qword_254A54FB0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v9, (uint64_t)&v8, &qword_254A54FB0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54FB0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A54FC8);
      a1 = v7;
      a2 = v4;
    }
  }
  return sub_210214860(a1, qword_254A54FB0 + 7656, *a2);
}

void sub_20F811494(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54FB0;
  if (qword_254A54FB0)
  {
    v3 = qword_254A54FB8;
    v4 = (void *)qword_254A54FB0;
    if (qword_254A54FB8 != qword_254A54FB0)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54FB0;
    }
    qword_254A54FB8 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54FC8);
  _Unwind_Resume(a1);
}

void sub_20F811500(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 v7;
  double v8;
  unsigned __int8 *v9;
  BOOL v10;
  unsigned __int8 v11;
  double v12;
  uint64_t v13;
  unsigned __int8 v14;
  double v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  if (*(_BYTE *)(a4 + 80)
    || (*(_BYTE *)(a4 + 200) ? (v10 = *(_QWORD *)(a4 + 184) == 0) : (v10 = 1),
        !v10 && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144)))
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254A69328);
    if ((v7 & 1) == 0)
    {
      v18 = a1;
      v17 = __cxa_guard_acquire(&qword_254A69328);
      a1 = v18;
      if (v17)
      {
        qword_254A6AD38 = 0;
        qword_254A6AD40 = 0;
        qword_254A6AD48 = 0;
        sub_20EAC040C((char **)&qword_254A6AD38, 0x147uLL);
        sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A6AD38);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AD38, &dword_20E81F000);
        __cxa_guard_release(&qword_254A69328);
        a1 = v18;
      }
    }
    v8 = (double)a1;
    v9 = (unsigned __int8 *)(qword_254A6AD38 + 7776);
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, v9, v8);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, (uint64_t)v9, v8);
  }
  if (*(_BYTE *)(a4 + 80)
    || *(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A69330);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A69330))
    {
      qword_254A6AD50 = 0;
      qword_254A6AD58 = 0;
      qword_254A6AD60 = 0;
      sub_20EAC040C((char **)&qword_254A6AD50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)&v21, &qword_254A6AD50);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AD50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69330);
    }
    v12 = (double)a2;
    v13 = qword_254A6AD50 + 7800;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A6AD50 + 7800), v12);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v13, v12);
  }
  if (*(_BYTE *)(a4 + 80)
    || *(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
  {
    v14 = atomic_load((unsigned __int8 *)&qword_254A69338);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A69338))
    {
      qword_254A6AD68 = 0;
      qword_254A6AD70 = 0;
      qword_254A6AD78 = 0;
      sub_20EAC040C((char **)&qword_254A6AD68, 0x147uLL);
      sub_20F053F1C((uint64_t)&v24, (uint64_t)&v23, &qword_254A6AD68);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A6AD68, &dword_20E81F000);
      __cxa_guard_release(&qword_254A69338);
    }
    v15 = (double)a3;
    v16 = qword_254A6AD68 + 7824;
    if (*(_BYTE *)(a4 + 80))
      sub_20FDBBC20(a4, (unsigned __int8 *)(qword_254A6AD68 + 7824), v15);
    if (*(_BYTE *)(a4 + 200) && *(_QWORD *)(a4 + 184) && *(_QWORD *)(a4 + 136) != *(_QWORD *)(a4 + 144))
      sub_210214860(a4 + 88, v16, v15);
  }
}

void sub_20F811844(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A6AD68;
  if (!qword_254A6AD68)
  {
    __cxa_guard_abort(&qword_254A69338);
    _Unwind_Resume(a1);
  }
  v3 = qword_254A6AD70;
  v4 = (void *)qword_254A6AD68;
  if (qword_254A6AD70 != qword_254A6AD68)
  {
    do
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    while (v3 != v2);
    v4 = (void *)qword_254A6AD68;
  }
  qword_254A6AD70 = v2;
  operator delete(v4);
  __cxa_guard_abort(&qword_254A69338);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F8119D8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_20E8D177C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void sub_20F811C04(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 136))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40);
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 != -1)
    {
      if (v3 > 7)
        return;
      goto LABEL_7;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_34:
      abort();
    }
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 <= 7)
    {
LABEL_7:
      if (v3 <= 3)
      {
        if (!v3)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        return;
      }
      if (v3 < 7)
        return;
      v4 = *(_QWORD **)(a1 + 128);
      if (!v4)
      {
LABEL_33:
        sub_20F811E38(a1);
        return;
      }
      while (1)
      {
        v8 = v4[5];
        v9 = *(_DWORD *)(v8 + 992);
        if (v9 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_34;
          }
          v9 = *(_DWORD *)(v8 + 992);
          if (v9 > 7)
          {
LABEL_23:
            if (v9 > 0xB)
            {
              if (v9 < 0xF)
                goto LABEL_15;
              v10 = v8 + 904;
            }
            else if (v9 > 9)
            {
              if (v9 == 10)
                goto LABEL_15;
              v10 = v8 + 680;
            }
            else
            {
              if (v9 != 9)
                goto LABEL_15;
              v10 = v8 + 512;
            }
            goto LABEL_14;
          }
        }
        else if (v9 > 7)
        {
          goto LABEL_23;
        }
        if (v9 <= 3)
        {
          if (!v9)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_15;
        }
        if (v9 >= 7)
        {
          v10 = v8 + 488;
LABEL_14:
          *(_OWORD *)v10 = *(_OWORD *)(a1 + 16);
          v5 = *(_OWORD *)(a1 + 32);
          v6 = *(_OWORD *)(a1 + 48);
          v7 = *(_OWORD *)(a1 + 64);
          *(_QWORD *)(v10 + 64) = *(_QWORD *)(a1 + 80);
          *(_OWORD *)(v10 + 32) = v6;
          *(_OWORD *)(v10 + 48) = v7;
          *(_OWORD *)(v10 + 16) = v5;
        }
LABEL_15:
        v4 = (_QWORD *)*v4;
        if (!v4)
          goto LABEL_33;
      }
    }
  }
}

void sub_20F811E38(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int64x2_t v7;
  float64x2_t v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t *v37;
  uint64_t v38;
  float64x2_t *v39;
  float64x2_t *v40;
  double *v41;
  uint64_t v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  char v46;
  double *v47;
  double *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  uint64_t v51;
  double *v52;
  float64x2_t *v53;
  uint64_t v54;
  double v55;
  int8x16_t v56;
  float64x2_t v57;
  __int128 v58;
  double v62;
  float64x2_t *v65;
  float64x2_t *v66;
  uint64_t v67;
  double v68;
  float64x2_t v69;
  float64_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;
  float64x2_t *v74;
  uint64_t v75;
  int64x2_t v76;
  float64_t v77;
  int64x2_t v78;
  float64_t v79;
  float64x2_t v80;
  uint64_t v81;
  float64x2_t v82;
  int8x16_t v83;
  int64x2_t v84;
  int64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  int8x16_t v88;
  float64_t v89;
  __int128 v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40);
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 != -1)
    {
      if (v3 > 7)
        return;
      goto LABEL_7;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 <= 7)
    {
LABEL_7:
      if (v3 <= 3)
      {
        if (!v3)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        return;
      }
      if (v3 < 7)
        return;
      v4 = *(_QWORD *)(a1 + 88);
      v5 = *(_QWORD *)(a1 + 96);
      if (v4 == v5)
      {
LABEL_117:
        *(_BYTE *)(a1 + 152) = 1;
        return;
      }
      while (1)
      {
        v17 = *(_QWORD *)(v4 + 8);
        v16 = *(_QWORD *)(v4 + 16);
        if (*(_BYTE *)(v16 + 58) && !*(_BYTE *)(v16 + 57))
          goto LABEL_15;
        v18 = sub_20E9DF85C((_QWORD *)(a1 + 112), (uint64_t *)(v16 + 32));
        v25 = *(float *)(v17 + 8);
        v26 = *(float *)(v17 + 12);
        v27 = v18[5];
        v28 = *(_DWORD *)(v27 + 992);
        if (v28 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v28 = *(_DWORD *)(v27 + 992);
          v29 = v25;
          v30 = v26;
          if (v28 <= 7)
          {
LABEL_20:
            if (!v28)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v21.i64[0] = *(_QWORD *)(v27 + 80);
            v94 = *(double *)(v27 + 88) + *(double *)(v27 + 72) * v29 + *(double *)v21.i64 * v30;
            v31 = *(double *)(v27 + 104);
            v20.i64[0] = *(_QWORD *)(v27 + 112);
            *(double *)v19.i64 = v31 * v30 + *(double *)v20.i64;
LABEL_25:
            v95 = v19.i64[0];
LABEL_26:
            v71 = &v69;
            v72 = (float64x2_t *)&v94;
            v74 = 0;
            v75 = 0;
            v73 = 0;
            if (v28 <= 7)
              goto LABEL_27;
            goto LABEL_68;
          }
        }
        else
        {
          v29 = v25;
          v30 = v26;
          if (v28 <= 7)
            goto LABEL_20;
        }
        v21.i64[0] = *(_QWORD *)(v27 + 80);
        v94 = *(double *)(v27 + 88) + *(double *)(v27 + 72) * v29 + *(double *)v21.i64 * v30;
        v31 = *(double *)(v27 + 104);
        v20.i64[0] = *(_QWORD *)(v27 + 112);
        *(double *)v19.i64 = v31 * v30 + *(double *)v20.i64;
        if (v28 < 0xE)
          goto LABEL_25;
        v95 = v19.i64[0];
        if (v28 == 14)
          goto LABEL_26;
        v36 = &v69;
        v37 = (float64x2_t *)&v94;
        v71 = &v69;
        v72 = (float64x2_t *)&v94;
        v74 = 0;
        v75 = 0;
        v73 = 0;
        if (v28 != -1)
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
LABEL_95:
          v46 = sub_20EB3CED8(v27, (uint64_t)v36, v37, v40, v39, v38);
          goto LABEL_115;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v28 = *(_DWORD *)(v27 + 992);
        if (v28 <= 7)
        {
LABEL_27:
          if (v28 > 3)
          {
            v42 = (uint64_t)v71;
            v41 = (double *)v72;
            v43 = v73;
            v44 = v74;
            v45 = v75;
            if (v28 > 5)
            {
              if (v28 == 6)
                v46 = sub_20EB41C58((double *)v27, (uint64_t)v71, v72->f64, v73, (uint64_t)v74, v75);
              else
                v46 = sub_20EB306CC(v27, (uint64_t)v71, v72, v73, (unint64_t)v74, v75, *(double *)v19.i64, v31, v20, (int8x16_t)v21, *(double *)v22.i64, v23.f64[0], v24);
            }
            else if (v28 == 5)
            {
              if (v73)
              {
                v73->f64[0] = 0.0;
                v43->f64[1] = 0.0;
                v43[1].f64[0] = 0.0;
              }
              if (v45)
              {
                *(_QWORD *)(v45 + 64) = 0;
                *(_OWORD *)(v45 + 32) = 0u;
                *(_OWORD *)(v45 + 48) = 0u;
                *(_OWORD *)v45 = 0u;
                *(_OWORD *)(v45 + 16) = 0u;
              }
              if (v44)
                v46 = sub_20EB28F10(v42, (uint64_t)v44, v41, v27 + 168, 5);
              else
                v46 = sub_20EB2886C(v42, v41, v27 + 168, 5);
            }
            else
            {
              if (v73)
              {
                v73->f64[0] = 0.0;
                v43->f64[1] = 0.0;
                v43[1].f64[0] = 0.0;
              }
              if (v45)
              {
                *(_QWORD *)(v45 + 64) = 0;
                v19 = 0uLL;
                *(_OWORD *)(v45 + 32) = 0u;
                *(_OWORD *)(v45 + 48) = 0u;
                *(_OWORD *)v45 = 0u;
                *(_OWORD *)(v45 + 16) = 0u;
              }
              if (v44)
              {
                if (!*(_BYTE *)(v27 + 468))
                {
                  v19.i64[0] = sub_20EB27C0C(v27 + 204, (double *)(v27 + 168), 0x32uLL, v19, v31, v20, (int8x16_t)v21).u64[0];
                  *(_BYTE *)(v27 + 468) = 1;
                }
                v46 = sub_20EA8D684(v42, (uint64_t)v41, (int64x2_t *)(v27 + 168), (float *)(v27 + 204), v44, 5, *(double *)v19.i64, v31, *(double *)v20.i64, *(double *)v21.i64, *(double *)v22.i64, v23.f64[0], v24);
              }
              else
              {
                if (!*(_BYTE *)(v27 + 468))
                {
                  v19.i64[0] = sub_20EB27C0C(v27 + 204, (double *)(v27 + 168), 0x32uLL, v19, v31, v20, (int8x16_t)v21).u64[0];
                  *(_BYTE *)(v27 + 468) = 1;
                }
                v46 = sub_20EA8D684(v42, (uint64_t)v41, (int64x2_t *)(v27 + 168), (float *)(v27 + 204), 0, 5, *(double *)v19.i64, v31, *(double *)v20.i64, *(double *)v21.i64, *(double *)v22.i64, v23.f64[0], v24);
              }
            }
          }
          else
          {
            if (v28 <= 1)
            {
              if (!v28)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v32 = (uint64_t)v71;
              v34 = v73;
              v33 = v74;
              v35 = v75;
              v8 = *v72;
              *v71 = *v72;
              *(_QWORD *)(v32 + 16) = 0x3FF0000000000000;
              if (v34)
              {
                v34->f64[0] = 0.0;
                v34->f64[1] = 0.0;
                v34[1].f64[0] = 0.0;
              }
              if (v33)
              {
                *v33 = (float64x2_t)xmmword_210312EC0;
                v33[1] = (float64x2_t)unk_210312ED0;
                v8.f64[1] = 0.0;
                v33[2] = (float64x2_t)xmmword_210312EE0;
              }
              if (v35)
              {
                *(_QWORD *)(v35 + 64) = 0;
                v8.f64[1] = 0.0;
                *(_OWORD *)(v35 + 32) = 0u;
                *(_OWORD *)(v35 + 48) = 0u;
                *(_OWORD *)v35 = 0u;
                *(_OWORD *)(v35 + 16) = 0u;
              }
              goto LABEL_14;
            }
            if (v28 == 2)
            {
              v46 = sub_20EA8D22C((uint64_t)&v71, v27);
            }
            else
            {
              v47 = (double *)v71;
              v48 = (double *)v72;
              v50 = v73;
              v49 = v74;
              v51 = v75;
              if (v73)
              {
                v73->f64[0] = 0.0;
                v50->f64[1] = 0.0;
                v50[1].f64[0] = 0.0;
              }
              if (v51)
              {
                *(_QWORD *)(v51 + 64) = 0;
                v19.i64[0] = 0;
                *(_OWORD *)(v51 + 32) = 0u;
                *(_OWORD *)(v51 + 48) = 0u;
                *(_OWORD *)v51 = 0u;
                *(_OWORD *)(v51 + 16) = 0u;
              }
              if (v49)
                v46 = sub_20EB27398(v47, (uint64_t)v49, v48, (int64x2_t *)(v27 + 168), 20, *(double *)v19.i64, v31, *(double *)v20.i64, *(double *)v21.i64, (int64x2_t)v22);
              else
                v46 = sub_20EB23DF0((uint64_t)v47, v48, (int64x2_t *)(v27 + 168), 20, *(double *)v19.i64, v31, *(double *)v20.i64, *(double *)v21.i64, (int64x2_t)v22, v23);
            }
          }
          goto LABEL_115;
        }
LABEL_68:
        v36 = v71;
        if (v28 > 0xB)
        {
          if (v28 <= 0xD)
          {
            if (v28 != 13)
            {
              v66 = v73;
              v65 = v74;
              v67 = v75;
              if (v73)
              {
                v73->f64[0] = 0.0;
                v66->f64[1] = 0.0;
                v66[1].f64[0] = 0.0;
              }
              if (v67)
              {
                *(_QWORD *)(v67 + 64) = 0;
                *(_OWORD *)(v67 + 32) = 0u;
                *(_OWORD *)(v67 + 48) = 0u;
                *(_OWORD *)v67 = 0u;
                *(_OWORD *)(v67 + 16) = 0u;
              }
              v36->f64[0] = 0.0;
              v36->f64[1] = 0.0;
              v36[1].f64[0] = 0.0;
              if (v65)
              {
                v65[1] = 0u;
                v65[2] = 0u;
                *v65 = 0u;
              }
LABEL_116:
              *(_WORD *)(v16 + 57) = 256;
              goto LABEL_15;
            }
            v46 = sub_20EB43734((double *)v27, (uint64_t)v71, (uint64_t)v72, v73, (uint64_t)v74, v75);
            goto LABEL_115;
          }
          v37 = v72;
          v40 = v73;
          v39 = v74;
          v38 = v75;
          if (v28 != 14)
            goto LABEL_95;
          if (v73)
          {
            v73->f64[0] = 0.0;
            v40->f64[1] = 0.0;
            v40[1].f64[0] = 0.0;
          }
          if (v38)
          {
            *(_QWORD *)(v38 + 64) = 0;
            *(_OWORD *)(v38 + 32) = 0u;
            *(_OWORD *)(v38 + 48) = 0u;
            *(_OWORD *)v38 = 0u;
            *(_OWORD *)(v38 + 16) = 0u;
          }
          v62 = (*(double *)v27 + *(double *)(v27 + 32)) * 0.5;
          v46 = sub_20EB253A0((uint64_t)v36, (uint64_t)v37, (double *)(v27 + 168), (double *)(v27 + 392), 0x14u, v62);
          if (v39)
          {
            if ((v46 & 1) == 0)
              goto LABEL_116;
            if (!sub_20EB2498C(&v82, (uint64_t)&v83, &v80, (uint64_t)v36, (double *)(v27 + 168), v62))
              goto LABEL_116;
            v56.i64[0] = *(_QWORD *)&v36[1].f64[0];
            v57 = *v36;
            *(_QWORD *)&v58 = v84.i64[0];
            _Q3 = v83;
            v86 = v57;
            v87 = v56.i64[0];
            v81 = 0;
            *(_QWORD *)&_Q5.f64[0] = v56.i64[0];
            _Q5.f64[1] = v57.f64[0];
            _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v85, _Q5), (float64x2_t)vzip2q_s64(v85, v84), (float64x2_t)vextq_s8(*(int8x16_t *)&v57, v56, 8uLL)).f64[1];
            __asm { FMLA            D6, D5, V3.D[1] }
            if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v84, v57), 1), (float64x2_t)v85, v57).f64[0], *(double *)v84.i64)) < 0.00000001)goto LABEL_116;
            goto LABEL_13;
          }
        }
        else
        {
          v52 = (double *)v72;
          v53 = v73;
          v39 = v74;
          v54 = v75;
          if (v28 > 9)
          {
            if (v28 == 10)
            {
              if (v73)
              {
                v73->f64[0] = 0.0;
                v53->f64[1] = 0.0;
                v53[1].f64[0] = 0.0;
              }
              if (v54)
              {
                *(_QWORD *)(v54 + 64) = 0;
                *(_OWORD *)(v54 + 32) = 0u;
                *(_OWORD *)(v54 + 48) = 0u;
                *(_OWORD *)v54 = 0u;
                *(_OWORD *)(v54 + 16) = 0u;
              }
              v55 = (*(double *)v27 + *(double *)(v27 + 32)) * 0.5;
              v46 = sub_20EB24F38((uint64_t)v36, (uint64_t)v52, v27 + 168, (double *)(v27 + 280), 0x14u, v55);
              if (v39)
              {
                if ((v46 & 1) == 0)
                  goto LABEL_116;
                if (!sub_20EB2450C(&v82, (uint64_t)&v83, &v80, (uint64_t)v36, (double *)(v27 + 168), v55))
                  goto LABEL_116;
                v56.i64[0] = *(_QWORD *)&v36[1].f64[0];
                v57 = *v36;
                *(_QWORD *)&v58 = v84.i64[0];
                _Q3 = v83;
                v86 = v57;
                v87 = v56.i64[0];
                v81 = 0;
                *(_QWORD *)&_Q5.f64[0] = v56.i64[0];
                _Q5.f64[1] = v57.f64[0];
                _Q5.f64[0] = vmlsq_f64(vmulq_f64(*(float64x2_t *)&v85, _Q5), (float64x2_t)vzip2q_s64(v85, v84), (float64x2_t)vextq_s8(*(int8x16_t *)&v57, v56, 8uLL)).f64[1];
                __asm { FMLA            D6, D5, V3.D[1] }
                if (fabs(vmlad_n_f64(_D6, vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v84, v57), 1), (float64x2_t)v85, v57).f64[0], *(double *)v84.i64)) < 0.00000001)goto LABEL_116;
LABEL_13:
                *(_QWORD *)&v6 = vextq_s8(v83, v83, 8uLL).u64[0];
                _Q3.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
                *((_QWORD *)&v6 + 1) = v85.i64[0];
                *((_QWORD *)&v58 + 1) = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
                v88 = _Q3;
                v89 = v57.f64[0];
                v91 = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
                v90 = v6;
                v93 = v56.i64[0];
                v92 = v58;
                sub_20E8BE424((uint64_t)&v76);
                v8.f64[0] = v77;
                v7 = vzip2q_s64(v76, v78);
                v8.f64[1] = v79;
                *(int64x2_t *)v39 = vzip1q_s64(v76, v78);
                v39[1] = (float64x2_t)v7;
                v39[2] = v8;
                goto LABEL_14;
              }
            }
            else
            {
              v46 = sub_20EB38E20(v27, (uint64_t)v71, v72, v73, v74, v75);
            }
          }
          else if (v28 == 9)
          {
            v46 = sub_20EB35004(v27, (uint64_t)v71, v72, v73, (unint64_t)v74, v75, *(double *)v19.i64, v31, *(double *)v20.i64, v21, v22);
          }
          else
          {
            if (v73)
            {
              v73->f64[0] = 0.0;
              v53->f64[1] = 0.0;
              v53[1].f64[0] = 0.0;
            }
            if (v54)
            {
              *(_QWORD *)(v54 + 64) = 0;
              v19.i64[0] = 0;
              *(_OWORD *)(v54 + 32) = 0u;
              *(_OWORD *)(v54 + 48) = 0u;
              *(_OWORD *)v54 = 0u;
              *(_OWORD *)(v54 + 16) = 0u;
            }
            if (v39)
            {
              v46 = sub_20EB277C4((uint64_t)v36, (uint64_t)v39, v52, v27 + 168, 20, *(double *)v19.i64, v31, *(double *)v20.i64, v21, v22);
            }
            else
            {
              v68 = sqrt(*v52 * *v52 + v52[1] * v52[1]);
              v46 = sub_20EB24018((uint64_t)v36, v52, (double *)(v27 + 168), 20, v68, v68, *(double *)v20.i64, v21, v22);
            }
          }
        }
LABEL_115:
        if ((v46 & 1) == 0)
          goto LABEL_116;
LABEL_14:
        v8.f64[0] = v70;
        _Q1 = v69;
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = v69.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v8.f64[0] * v8.f64[0]);
        v69 = vmulq_n_f64(v69, _Q2.f64[0]);
        *(_QWORD *)&v70 = *(_OWORD *)&vmulq_f64(v8, _Q2);
        *(float64x2_t *)(v16 + 64) = v69;
        *(float64_t *)(v16 + 80) = v70;
LABEL_15:
        v4 += 24;
        if (v4 == v5)
          goto LABEL_117;
      }
    }
  }
}

void sub_20F8127FC(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float32x2_t v18;
  unsigned int v19;
  float64x2_t v20;
  double v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t v28;
  _QWORD *f64;
  float64x2_t *v30;
  double *v31;
  float64x2_t *v32;
  uint64_t v33;
  char v34;
  double *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  uint64_t v39;
  double v40;
  float64x2_t *v41;
  double *v42;
  float64x2_t *v43;
  uint64_t v44;
  double v45;
  float64x2_t *v46;
  float64x2_t *v47;
  uint64_t v48;
  double *v49;
  double *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  uint64_t v53;
  double v54;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  uint64_t v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  double v84;
  _QWORD v85[2];
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;

  if (!*(_QWORD *)(a1 + 136))
    return;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 40);
  v3 = *(_DWORD *)(v2 + 992);
  if (v3 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 > 7)
      return;
  }
  else if (v3 > 7)
  {
    return;
  }
  if (v3 <= 3)
  {
    if (!v3)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    return;
  }
  if (v3 >= 7)
  {
    if (*(_BYTE *)(a1 + 4))
    {
      if (*(_BYTE *)(a1 + 152))
      {
        *(_BYTE *)(a1 + 152) = 0;
        v4 = *(_QWORD *)(a1 + 88);
        v5 = *(_QWORD *)(a1 + 96);
        if (v4 != v5)
        {
          v6 = (_QWORD *)(a1 + 112);
          do
          {
            v8 = *(float32x2_t **)(v4 + 8);
            v7 = *(_QWORD *)(v4 + 16);
            v9 = v7 + 304;
            if (*(_BYTE *)(v7 + 58) && !*(_BYTE *)(v7 + 57))
            {
              *(_QWORD *)(v7 + 368) = 0;
              *(_OWORD *)(v7 + 336) = 0u;
              *(_OWORD *)(v7 + 352) = 0u;
              *(_OWORD *)v9 = 0u;
              *(_OWORD *)(v7 + 320) = 0u;
              goto LABEL_16;
            }
            v10 = sub_20E9DF85C(v6, (uint64_t *)(v7 + 32))[5];
            v11 = operator new();
            sub_20E972DB4(v11, v10);
            memcpy((void *)(v11 + 1000), (const void *)(v10 + 1000), 0x1B8uLL);
            v86 = v11;
            v18 = v8[1];
            v19 = *(_DWORD *)(v11 + 992);
            if (v19 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_118;
              }
              v19 = *(_DWORD *)(v11 + 992);
              v20 = vcvtq_f64_f32(v18);
              if (v19 > 7)
                goto LABEL_25;
            }
            else
            {
              v20 = vcvtq_f64_f32(v18);
              if (v19 > 7)
                goto LABEL_25;
            }
            if (!v19)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_118:
              abort();
            }
LABEL_25:
            v21 = v20.f64[1];
            *(double *)v13.i64 = *(double *)(v11 + 88)
                               + *(double *)(v11 + 72) * v20.f64[0]
                               + vmuld_lane_f64(*(double *)(v11 + 80), v20, 1);
            v12.i64[0] = *(_QWORD *)(v11 + 112);
            v20.f64[0] = v20.f64[1] * *(double *)(v11 + 104) + *(double *)v12.i64;
            v85[0] = v13.i64[0];
            v85[1] = *(_QWORD *)&v20.f64[0];
            v22 = v86;
            v87 = &v83;
            v88 = (float64x2_t *)v85;
            v89 = 0;
            v90 = 0;
            v91 = &v77;
            v23 = *(_DWORD *)(v86 + 992);
            if (v23 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_116;
              }
              v23 = *(_DWORD *)(v22 + 992);
              if (v23 <= 7)
              {
LABEL_27:
                if (v23 > 3)
                {
                  v36 = (uint64_t)v87;
                  v35 = (double *)v88;
                  v37 = v89;
                  v38 = v90;
                  v39 = (uint64_t)v91;
                  if (v23 > 5)
                  {
                    if (v23 == 6)
                      v34 = sub_20EB41C58((double *)v22, (uint64_t)v87, v88->f64, v89, (uint64_t)v90, (uint64_t)v91);
                    else
                      v34 = sub_20EB306CC(v22, (uint64_t)v87, v88, v89, (unint64_t)v90, (uint64_t)v91, v20.f64[0], v21, v12, (int8x16_t)v13, *(double *)v14.i64, v15.f64[0], v16);
                  }
                  else if (v23 == 5)
                  {
                    if (v89)
                    {
                      v89->f64[0] = 0.0;
                      v37->f64[1] = 0.0;
                      v37[1].f64[0] = 0.0;
                    }
                    if (v39)
                    {
                      *(_QWORD *)(v39 + 64) = 0;
                      *(_OWORD *)(v39 + 32) = 0u;
                      *(_OWORD *)(v39 + 48) = 0u;
                      *(_OWORD *)v39 = 0u;
                      *(_OWORD *)(v39 + 16) = 0u;
                    }
                    if (v38)
                      v34 = sub_20EB28F10(v36, (uint64_t)v38, v35, v22 + 168, 5);
                    else
                      v34 = sub_20EB2886C(v36, v35, v22 + 168, 5);
                  }
                  else
                  {
                    if (v89)
                    {
                      v89->f64[0] = 0.0;
                      v37->f64[1] = 0.0;
                      v37[1].f64[0] = 0.0;
                    }
                    if (v39)
                    {
                      *(_QWORD *)(v39 + 64) = 0;
                      v20 = 0uLL;
                      *(_OWORD *)(v39 + 32) = 0u;
                      *(_OWORD *)(v39 + 48) = 0u;
                      *(_OWORD *)v39 = 0u;
                      *(_OWORD *)(v39 + 16) = 0u;
                    }
                    if (v38)
                    {
                      if (!*(_BYTE *)(v22 + 468))
                      {
                        *(_QWORD *)&v20.f64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, (int8x16_t)v20, v21, v12, (int8x16_t)v13).u64[0];
                        *(_BYTE *)(v22 + 468) = 1;
                      }
                      v34 = sub_20EA8D684(v36, (uint64_t)v35, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), v38, 5, v20.f64[0], v21, *(double *)v12.i64, *(double *)v13.i64, *(double *)v14.i64, v15.f64[0], v16);
                    }
                    else
                    {
                      if (!*(_BYTE *)(v22 + 468))
                      {
                        *(_QWORD *)&v20.f64[0] = sub_20EB27C0C(v22 + 204, (double *)(v22 + 168), 0x32uLL, (int8x16_t)v20, v21, v12, (int8x16_t)v13).u64[0];
                        *(_BYTE *)(v22 + 468) = 1;
                      }
                      v34 = sub_20EA8D684(v36, (uint64_t)v35, (int64x2_t *)(v22 + 168), (float *)(v22 + 204), 0, 5, v20.f64[0], v21, *(double *)v12.i64, *(double *)v13.i64, *(double *)v14.i64, v15.f64[0], v16);
                    }
                  }
                }
                else
                {
                  if (v23 <= 1)
                  {
                    if (!v23)
                    {
                      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_116:
                      abort();
                    }
                    v24 = (uint64_t)v87;
                    v26 = v89;
                    v25 = v90;
                    v27 = (uint64_t)v91;
                    v28 = *v88;
                    *v87 = *v88;
                    *(_QWORD *)(v24 + 16) = 0x3FF0000000000000;
                    if (v26)
                    {
                      v26->f64[0] = 0.0;
                      v26->f64[1] = 0.0;
                      v26[1].f64[0] = 0.0;
                    }
                    if (v25)
                    {
                      *v25 = (float64x2_t)xmmword_210312EC0;
                      v25[1] = (float64x2_t)unk_210312ED0;
                      v28.f64[1] = 0.0;
                      v25[2] = (float64x2_t)xmmword_210312EE0;
                    }
                    if (v27)
                    {
                      *(_QWORD *)(v27 + 64) = 0;
                      v28.f64[1] = 0.0;
                      *(_OWORD *)(v27 + 32) = 0u;
                      *(_OWORD *)(v27 + 48) = 0u;
                      *(_OWORD *)v27 = 0u;
                      *(_OWORD *)(v27 + 16) = 0u;
                    }
LABEL_109:
                    v28.f64[0] = v84;
                    _Q1 = v83;
                    _Q2 = vmulq_f64(_Q1, _Q1);
                    _D3 = v83.f64[1];
                    __asm { FMLA            D2, D3, V1.D[1] }
                    _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v28.f64[0] * v28.f64[0]);
                    v62 = vmulq_n_f64(v83, _Q2.f64[0]);
                    v63 = vmulq_f64(_Q2, vmulq_f64(v28, _Q2));
                    _Q5 = vmulq_n_f64(v62, _Q2.f64[0]);
                    _Q1.f64[0] = vmuld_lane_f64(_Q2.f64[0], v83, 1);
                    v16.f64[0] = vmuld_n_f64(v63.f64[0], v62.f64[0]);
                    v17.f64[0] = _Q1.f64[0] * v63.f64[0];
                    v63.f64[0] = v84 * _Q2.f64[0] * v63.f64[0];
                    v65.f64[0] = 0.0;
                    v65.f64[1] = _Q2.f64[0];
                    v66 = vsubq_f64((float64x2_t)0, v16);
                    _Q16 = vmlsq_lane_f64((float64x2_t)*(unint64_t *)&_Q2.f64[0], _Q5, v62.f64[0], 0);
                    *(_QWORD *)&v62.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v17);
                    _Q17 = vmlsq_lane_f64(v65, _Q5, _Q1.f64[0], 0);
                    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, v63);
                    _Q2 = vmlsq_lane_f64((float64x2_t)0, _Q5, v84 * _Q2.f64[0], 0);
                    v28.f64[0] = v78;
                    _Q5.f64[0] = v80;
                    _D18 = v82;
                    v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, _Q16.f64[0]), v79, _Q17.f64[0]), v81, _Q2.f64[0]);
                    v72 = vmlad_n_f64(vmlad_n_f64(v78 * _Q16.f64[0], v80, _Q17.f64[0]), v82, _Q2.f64[0]);
                    v73 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v77, _Q16, 1), v79, _Q17, 1), v81, _Q2, 1);
                    __asm
                    {
                      FMLA            D16, D5, V17.D[1]
                      FMLA            D16, D18, V2.D[1]
                    }
                    v74 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v77, v66.f64[0]), v79, v62.f64[0]), v81, _Q1.f64[0]);
                    v75 = vmlad_n_f64(vmulq_f64(v28, v66).f64[0], v80, v62.f64[0]);
                    *(float64x2_t *)v9 = v71;
                    *(double *)(v9 + 16) = v72;
                    *(float64x2_t *)(v9 + 24) = v73;
                    *(float64_t *)(v9 + 40) = _Q16.f64[0];
                    *(float64x2_t *)(v9 + 48) = v74;
                    *(double *)(v9 + 64) = vmlad_n_f64(v75, _D18, _Q1.f64[0]);
                    v76 = v86;
                    v86 = 0;
                    if (!v76)
                      goto LABEL_16;
LABEL_112:
                    sub_20E8E931C((uint64_t)&v86, v76);
                    goto LABEL_16;
                  }
                  if (v23 == 2)
                  {
                    v34 = sub_20EA8D22C((uint64_t)&v87, v22);
                  }
                  else
                  {
                    v49 = (double *)v87;
                    v50 = (double *)v88;
                    v52 = v89;
                    v51 = v90;
                    v53 = (uint64_t)v91;
                    if (v89)
                    {
                      v89->f64[0] = 0.0;
                      v52->f64[1] = 0.0;
                      v52[1].f64[0] = 0.0;
                    }
                    if (v53)
                    {
                      *(_QWORD *)(v53 + 64) = 0;
                      v20.f64[0] = 0.0;
                      *(_OWORD *)(v53 + 32) = 0u;
                      *(_OWORD *)(v53 + 48) = 0u;
                      *(_OWORD *)v53 = 0u;
                      *(_OWORD *)(v53 + 16) = 0u;
                    }
                    if (v51)
                      v34 = sub_20EB27398(v49, (uint64_t)v51, v50, (int64x2_t *)(v22 + 168), 20, v20.f64[0], v21, *(double *)v12.i64, *(double *)v13.i64, (int64x2_t)v14);
                    else
                      v34 = sub_20EB23DF0((uint64_t)v49, v50, (int64x2_t *)(v22 + 168), 20, v20.f64[0], v21, *(double *)v12.i64, *(double *)v13.i64, (int64x2_t)v14, v15);
                  }
                }
                goto LABEL_108;
              }
            }
            else if (v23 <= 7)
            {
              goto LABEL_27;
            }
            f64 = (_QWORD *)v87->f64;
            if (v23 > 0xB)
            {
              if (v23 > 0xD)
              {
                v42 = (double *)v88;
                v41 = v89;
                v43 = v90;
                v44 = (uint64_t)v91;
                if (v23 == 14)
                {
                  if (v89)
                  {
                    v89->f64[0] = 0.0;
                    v41->f64[1] = 0.0;
                    v41[1].f64[0] = 0.0;
                  }
                  if (v44)
                  {
                    *(_QWORD *)(v44 + 64) = 0;
                    *(_OWORD *)(v44 + 32) = 0u;
                    *(_OWORD *)(v44 + 48) = 0u;
                    *(_OWORD *)v44 = 0u;
                    *(_OWORD *)(v44 + 16) = 0u;
                  }
                  v45 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
                  if (v43)
                    v34 = sub_20EB251F0((uint64_t)f64, (uint64_t)v43, 0, (uint64_t)v42, (double *)(v22 + 168), (double *)(v22 + 392), 0x14u, v45);
                  else
                    v34 = sub_20EB253A0((uint64_t)f64, (uint64_t)v42, (double *)(v22 + 168), (double *)(v22 + 392), 0x14u, v45);
                }
                else
                {
                  v34 = sub_20EB3CED8(v22, (uint64_t)v87, v88, v89, v90, (uint64_t)v91);
                }
              }
              else
              {
                if (v23 != 13)
                {
                  v47 = v89;
                  v46 = v90;
                  v48 = (uint64_t)v91;
                  if (v89)
                  {
                    v89->f64[0] = 0.0;
                    v47->f64[1] = 0.0;
                    v47[1].f64[0] = 0.0;
                  }
                  if (v48)
                  {
                    *(_QWORD *)(v48 + 64) = 0;
                    *(_OWORD *)(v48 + 32) = 0u;
                    *(_OWORD *)(v48 + 48) = 0u;
                    *(_OWORD *)v48 = 0u;
                    *(_OWORD *)(v48 + 16) = 0u;
                  }
                  *f64 = 0;
                  f64[1] = 0;
                  f64[2] = 0;
                  if (v46)
                  {
                    v46[1] = 0u;
                    v46[2] = 0u;
                    *v46 = 0u;
                  }
                  goto LABEL_111;
                }
                v34 = sub_20EB43734((double *)v22, (uint64_t)v87, (uint64_t)v88, v89, (uint64_t)v90, (uint64_t)v91);
              }
            }
            else
            {
              v31 = (double *)v88;
              v30 = v89;
              v32 = v90;
              v33 = (uint64_t)v91;
              if (v23 > 9)
              {
                if (v23 == 10)
                {
                  if (v89)
                  {
                    v89->f64[0] = 0.0;
                    v30->f64[1] = 0.0;
                    v30[1].f64[0] = 0.0;
                  }
                  if (v33)
                  {
                    *(_QWORD *)(v33 + 64) = 0;
                    *(_OWORD *)(v33 + 32) = 0u;
                    *(_OWORD *)(v33 + 48) = 0u;
                    *(_OWORD *)v33 = 0u;
                    *(_OWORD *)(v33 + 16) = 0u;
                  }
                  v40 = (*(double *)v22 + *(double *)(v22 + 32)) * 0.5;
                  if (v32)
                    v34 = sub_20EB25044((uint64_t)f64, (uint64_t)v32, 0, (uint64_t)v31, (double *)(v22 + 168), (double *)(v22 + 280), 0x14u, v40);
                  else
                    v34 = sub_20EB24F38((uint64_t)f64, (uint64_t)v31, v22 + 168, (double *)(v22 + 280), 0x14u, v40);
                }
                else
                {
                  v34 = sub_20EB38E20(v22, (uint64_t)v87, v88, v89, v90, (uint64_t)v91);
                }
              }
              else if (v23 == 9)
              {
                v34 = sub_20EB35004(v22, (uint64_t)v87, v88, v89, (unint64_t)v90, (uint64_t)v91, v20.f64[0], v21, *(double *)v12.i64, v13, v14);
              }
              else
              {
                if (v89)
                {
                  v89->f64[0] = 0.0;
                  v30->f64[1] = 0.0;
                  v30[1].f64[0] = 0.0;
                }
                if (v33)
                {
                  *(_QWORD *)(v33 + 64) = 0;
                  v20.f64[0] = 0.0;
                  *(_OWORD *)(v33 + 32) = 0u;
                  *(_OWORD *)(v33 + 48) = 0u;
                  *(_OWORD *)v33 = 0u;
                  *(_OWORD *)(v33 + 16) = 0u;
                }
                if (v32)
                {
                  v34 = sub_20EB277C4((uint64_t)f64, (uint64_t)v32, v31, v22 + 168, 20, v20.f64[0], v21, *(double *)v12.i64, v13, v14);
                }
                else
                {
                  v54 = sqrt(*v31 * *v31 + v31[1] * v31[1]);
                  v34 = sub_20EB24018((uint64_t)f64, v31, (double *)(v22 + 168), 20, v54, v54, *(double *)v12.i64, v13, v14);
                }
              }
            }
LABEL_108:
            if ((v34 & 1) != 0)
              goto LABEL_109;
LABEL_111:
            *(_QWORD *)(v9 + 64) = 0;
            *(_OWORD *)(v9 + 32) = 0u;
            *(_OWORD *)(v9 + 48) = 0u;
            *(_OWORD *)v9 = 0u;
            *(_OWORD *)(v9 + 16) = 0u;
            v76 = v86;
            v86 = 0;
            if (v76)
              goto LABEL_112;
LABEL_16:
            v4 += 24;
          }
          while (v4 != v5);
        }
      }
    }
  }
}

void sub_20F8130B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25;

  v25 = a24;
  a24 = 0;
  if (!v25)
    _Unwind_Resume(exception_object);
  sub_20E8E931C((uint64_t)&a24, v25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F813110(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD *i;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!*(_QWORD *)(result + 136))
    return result;
  v1 = result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 128) + 40);
  v3 = *(_DWORD *)(v2 + 992);
  if (v3 == -1)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_38;
    v3 = *(_DWORD *)(v2 + 992);
    if (v3 > 7)
      return result;
  }
  else if (v3 > 7)
  {
    return result;
  }
  if (v3 <= 3)
  {
    if (!v3)
      goto LABEL_9;
    return result;
  }
  if (v3 < 7)
    return result;
  for (i = *(_QWORD **)(v1 + 128); i; i = (_QWORD *)*i)
  {
    v8 = i[5];
    v9 = *(_DWORD *)(v8 + 992);
    if (v9 == -1)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        goto LABEL_38;
      v9 = *(_DWORD *)(v8 + 992);
      if (v9 > 7)
      {
LABEL_22:
        if (v9 > 0xB)
        {
          if (v9 < 0xF)
            continue;
          v10 = v8 + 904;
        }
        else if (v9 > 9)
        {
          if (v9 == 10)
            continue;
          v10 = v8 + 680;
        }
        else
        {
          if (v9 != 9)
            continue;
          v10 = v8 + 512;
        }
        goto LABEL_13;
      }
    }
    else if (v9 > 7)
    {
      goto LABEL_22;
    }
    if (v9 <= 3)
    {
      if (!v9)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      continue;
    }
    if (v9 >= 7)
    {
      v10 = v8 + 488;
LABEL_13:
      *(_OWORD *)v10 = *(_OWORD *)(v1 + 16);
      v5 = *(_OWORD *)(v1 + 32);
      v6 = *(_OWORD *)(v1 + 48);
      v7 = *(_OWORD *)(v1 + 64);
      *(_QWORD *)(v10 + 64) = *(_QWORD *)(v1 + 80);
      *(_OWORD *)(v10 + 32) = v6;
      *(_OWORD *)(v10 + 48) = v7;
      *(_OWORD *)(v10 + 16) = v5;
    }
  }
  if (!*(_QWORD *)(v1 + 136))
    return result;
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 40);
  v12 = *(_DWORD *)(v11 + 992);
  if (v12 == -1)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0);
    if (!(_DWORD)result)
    {
      v12 = *(_DWORD *)(v11 + 992);
      goto LABEL_36;
    }
LABEL_38:
    abort();
  }
LABEL_36:
  if (!v12)
  {
LABEL_9:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20F813380(_QWORD *a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;

  v5 = a1 + 11;
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 11) = *(_OWORD *)a2;
  a1[13] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1[17])
  {
    v6 = *(_QWORD *)(a1[16] + 40);
    v7 = *(_DWORD *)(v6 + 992);
    if (v7 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102B1E73, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_10;
      }
      v7 = *(_DWORD *)(v6 + 992);
    }
    if (v7)
      return;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102B1E73, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_10:
    abort();
  }
}

uint64_t *sub_20F813468(uint64_t *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  *(uint64_t *)((char *)a1 + 21) = 0;
  sub_20F813734((uint64_t)(a1 + 4));
  a1[55] = 300;
  a1[56] = 0;
  a1[57] = 0;
  a1[58] = 0;
  v3 = (char *)operator new(0x960uLL);
  a1[56] = (uint64_t)v3;
  v4 = v3 + 2400;
  a1[58] = (uint64_t)(v3 + 2400);
  bzero(v3, 0x960uLL);
  a1[57] = (uint64_t)v4;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 69) = xmmword_210313B70;
  *(_OWORD *)(a1 + 71) = xmmword_2103B8220;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  v5 = (char *)operator new(0x960uLL);
  a1[73] = (uint64_t)v5;
  v6 = v5 + 2400;
  a1[75] = (uint64_t)(v5 + 2400);
  bzero(v5, 0x960uLL);
  a1[74] = (uint64_t)v6;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 43) = xmmword_210313B70;
  a1[88] = 0;
  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 40);
  if (v8)
  {
    if (v8 / 5 <= 1)
      v9 = 1;
    else
      v9 = v8 / 5;
    a1[72] = v9;
    sub_20F11D04C(a1 + 73, v9);
    a1[76] = 0;
    a1[77] = 0;
    a1[78] = 0;
    a1[88] = 0;
    *((_OWORD *)a1 + 41) = 0u;
    *((_OWORD *)a1 + 42) = 0u;
    *((_OWORD *)a1 + 43) = xmmword_210313B70;
    *((_DWORD *)a1 + 5) = 0;
    *((_DWORD *)a1 + 6) = 0;
    v7 = *a1;
  }
  else
  {
    *((_BYTE *)a1 + 28) = 1;
  }
  v10 = *(_DWORD *)(v7 + 44) / 5u;
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = v10;
  a1[4] = v11;
  sub_20F11D04C(a1 + 5, v11);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = xmmword_210313B70;
  v12 = *(_DWORD *)(*a1 + 44) / 5u;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  a1[20] = 0;
  a1[21] = v13;
  sub_20F11D04C(a1 + 22, v13);
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  a1[35] = 0xFFEFFFFFFFFFFFFFLL;
  a1[36] = 0x7FEFFFFFFFFFFFFFLL;
  v14 = *(_DWORD *)(*a1 + 44) / 5u;
  if (v14 <= 1)
    v15 = 1;
  else
    v15 = v14;
  a1[37] = 0;
  a1[38] = v15;
  sub_20F11D04C(a1 + 39, v15);
  a1[42] = 0;
  a1[43] = 0;
  a1[44] = 0;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = xmmword_210313B70;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  v16 = *(unsigned int *)(*a1 + 52);
  a1[54] = 0;
  a1[55] = v16;
  sub_20F11D04C(a1 + 56, v16);
  a1[59] = 0;
  a1[60] = 0;
  a1[61] = 0;
  a1[71] = 0;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 69) = xmmword_210313B70;
  return a1;
}

void sub_20F8136DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_20EAAB7E8(v2);
  sub_20F813898(v1);
  _Unwind_Resume(a1);
}

void sub_20F8136F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F813898(v1);
  _Unwind_Resume(a1);
}

void sub_20F81370C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_20EAAB7E8(v3);
  sub_20EAAB7E8(v2);
  sub_20F813898(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F813734(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_QWORD *)a1 = 300;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v2 = (char *)operator new(0x960uLL);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = v2 + 2400;
  *(_QWORD *)(a1 + 24) = v2 + 2400;
  bzero(v2, 0x960uLL);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = xmmword_210313B70;
  *(_OWORD *)(a1 + 128) = xmmword_2103B8220;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v4 = (char *)operator new(0x960uLL);
  *(_QWORD *)(a1 + 144) = v4;
  v5 = v4 + 2400;
  *(_QWORD *)(a1 + 160) = v4 + 2400;
  bzero(v4, 0x960uLL);
  *(_QWORD *)(a1 + 152) = v5;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = xmmword_210313B70;
  *(_OWORD *)(a1 + 264) = xmmword_2103B8220;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v6 = (char *)operator new(0x960uLL);
  *(_QWORD *)(a1 + 280) = v6;
  v7 = v6 + 2400;
  *(_QWORD *)(a1 + 296) = v6 + 2400;
  bzero(v6, 0x960uLL);
  *(_QWORD *)(a1 + 288) = v7;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_210313B70;
  *(_QWORD *)(a1 + 400) = 0;
  return a1;
}

void sub_20F813858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  while (1)
  {
    v4 = *(void **)(v2 - 80);
    if (v4)
    {
      *(_QWORD *)(v2 - 72) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 - 128);
    if (v5)
    {
      *(_QWORD *)(v2 - 120) = v5;
      operator delete(v5);
    }
    v2 -= 136;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *sub_20F813898(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[41];
  if (v2)
  {
    a1[42] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[35];
  if (v3)
  {
    a1[36] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F813918(uint64_t result, double a2)
{
  int v2;
  double v3;
  double v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;

  if (!*(_BYTE *)(result + 28))
  {
    v2 = *(_DWORD *)(result + 20) + 1;
    *(_DWORD *)(result + 20) = v2;
    if ((-858993459 * v2) <= 0x33333333)
    {
      *(double *)(result + 656) = *(double *)(result + 656) + a2;
      *(double *)(result + 664) = a2 * a2 + *(double *)(result + 664);
      ++*(_QWORD *)(result + 704);
      v3 = *(double *)(result + 672) + a2;
      *(double *)(result + 672) = v3;
      v4 = a2 * a2 + *(double *)(result + 680);
      *(double *)(result + 680) = v4;
      v5 = *(_QWORD *)(result + 624);
      v6 = *(_QWORD *)(result + 584);
      v7 = (*(_QWORD *)(result + 592) - v6) >> 3;
      if (v5 >= v7)
      {
        v8 = *(double *)(v6 + 8 * *(_QWORD *)(result + 608));
        *(double *)(result + 672) = v3 - v8;
        *(double *)(result + 680) = v4 - v8 * v8;
      }
      v9 = *(_QWORD *)(result + 616);
      *(double *)(v6 + 8 * v9) = a2;
      v10 = v9 + 1;
      if (v9 + 1 >= v7)
        v11 = v7;
      else
        v11 = 0;
      *(_QWORD *)(result + 616) = v10 - v11;
      if (v5 == v7)
      {
        v12 = *(_QWORD *)(result + 608) + 1;
        if (v12 < v5)
          v5 = 0;
        *(_QWORD *)(result + 608) = v12 - v5;
      }
      else
      {
        *(_QWORD *)(result + 624) = v5 + 1;
      }
      v13 = *(double *)(result + 688);
      if (v13 < a2)
        v13 = a2;
      *(double *)(result + 688) = v13;
      if (*(double *)(result + 696) <= a2)
        a2 = *(double *)(result + 696);
      *(double *)(result + 696) = a2;
    }
  }
  return result;
}

uint64_t *sub_20F813A2C(uint64_t *result, double **a2, double *a3)
{
  double *v3;
  uint64_t v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  double v47;

  if (!*((_BYTE *)result + 28))
  {
    v3 = *a2;
    v4 = *result;
    v5 = *(double *)(*result + 16);
    if (fabs(**a2) > v5)
    {
      v6 = *((_DWORD *)result + 2) + 1;
      *((_DWORD *)result + 2) = v6;
      if ((-858993459 * v6) <= 0x33333333)
      {
        v7 = *a3;
        v8 = v7 * v7 + *((double *)result + 15);
        *((double *)result + 14) = *a3 + *((double *)result + 14);
        *((double *)result + 15) = v8;
        ++result[20];
        v9 = v7 + *((double *)result + 16);
        v10 = v7 * v7 + *((double *)result + 17);
        *((double *)result + 16) = v9;
        *((double *)result + 17) = v10;
        v11 = result[10];
        v12 = result[5];
        v13 = (result[6] - v12) >> 3;
        if (v11 >= v13)
        {
          v14 = *(double *)(v12 + 8 * result[8]);
          *((double *)result + 16) = v9 - v14;
          *((double *)result + 17) = v10 - v14 * v14;
        }
        v15 = result[9];
        *(double *)(v12 + 8 * v15) = v7;
        v16 = v15 + 1;
        if (v15 + 1 >= v13)
          v17 = v13;
        else
          v17 = 0;
        result[9] = v16 - v17;
        if (v11 == v13)
        {
          v18 = result[8] + 1;
          if (v18 < v11)
            v11 = 0;
          result[8] = v18 - v11;
        }
        else
        {
          result[10] = v11 + 1;
        }
        v19 = *((double *)result + 18);
        if (v19 < v7)
          v19 = v7;
        if (*((double *)result + 19) <= v7)
          v7 = *((double *)result + 19);
        *((double *)result + 18) = v19;
        *((double *)result + 19) = v7;
        v5 = *(double *)(v4 + 16);
      }
    }
    if (fabs(v3[1]) > v5)
    {
      v20 = *((_DWORD *)result + 3) + 1;
      *((_DWORD *)result + 3) = v20;
      if ((-858993459 * v20) <= 0x33333333)
      {
        v21 = a3[1];
        v22 = v21 * v21 + *((double *)result + 32);
        *((double *)result + 31) = v21 + *((double *)result + 31);
        *((double *)result + 32) = v22;
        ++result[37];
        v23 = v21 + *((double *)result + 33);
        v24 = v21 * v21 + *((double *)result + 34);
        *((double *)result + 33) = v23;
        *((double *)result + 34) = v24;
        v25 = result[27];
        v26 = result[22];
        v27 = (result[23] - v26) >> 3;
        if (v25 >= v27)
        {
          v28 = *(double *)(v26 + 8 * result[25]);
          *((double *)result + 33) = v23 - v28;
          *((double *)result + 34) = v24 - v28 * v28;
        }
        v29 = result[26];
        *(double *)(v26 + 8 * v29) = v21;
        v30 = v29 + 1;
        if (v29 + 1 >= v27)
          v31 = v27;
        else
          v31 = 0;
        result[26] = v30 - v31;
        if (v25 == v27)
        {
          v32 = result[25] + 1;
          if (v32 < v25)
            v25 = 0;
          result[25] = v32 - v25;
        }
        else
        {
          result[27] = v25 + 1;
        }
        v33 = *((double *)result + 35);
        if (v33 < v21)
          v33 = v21;
        if (*((double *)result + 36) <= v21)
          v21 = *((double *)result + 36);
        *((double *)result + 35) = v33;
        *((double *)result + 36) = v21;
        v5 = *(double *)(v4 + 16);
      }
    }
    if (fabs(v3[2]) > v5)
    {
      v34 = *((_DWORD *)result + 4) + 1;
      *((_DWORD *)result + 4) = v34;
      if ((-858993459 * v34) <= 0x33333333)
      {
        v35 = a3[2];
        v36 = v35 * v35 + *((double *)result + 49);
        *((double *)result + 48) = v35 + *((double *)result + 48);
        *((double *)result + 49) = v36;
        ++result[54];
        v37 = v35 + *((double *)result + 50);
        v38 = v35 * v35 + *((double *)result + 51);
        *((double *)result + 50) = v37;
        *((double *)result + 51) = v38;
        v39 = result[44];
        v40 = result[39];
        v41 = (result[40] - v40) >> 3;
        if (v39 >= v41)
        {
          v42 = *(double *)(v40 + 8 * result[42]);
          *((double *)result + 50) = v37 - v42;
          *((double *)result + 51) = v38 - v42 * v42;
        }
        v43 = result[43];
        *(double *)(v40 + 8 * v43) = v35;
        v44 = v43 + 1;
        if (v43 + 1 >= v41)
          v45 = v41;
        else
          v45 = 0;
        result[43] = v44 - v45;
        if (v39 == v41)
        {
          v46 = result[42] + 1;
          if (v46 < v39)
            v39 = 0;
          result[42] = v46 - v39;
        }
        else
        {
          result[44] = v39 + 1;
        }
        v47 = *((double *)result + 52);
        if (v47 < v35)
          v47 = v35;
        if (*((double *)result + 53) <= v35)
          v35 = *((double *)result + 53);
        *((double *)result + 52) = v47;
        *((double *)result + 53) = v35;
      }
    }
  }
  return result;
}

unint64_t sub_20F813D38(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  size_t v20;
  void **p_dst;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  char *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  __int128 v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const char *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  double v104;
  double v105;
  double v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  double v115;
  int v116;
  unint64_t v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  size_t v125;
  void **v126;
  unint64_t v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  const char *v133;
  size_t v134;
  char *v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  const char *v138;
  size_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  size_t v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  size_t v150;
  size_t v151;
  _QWORD *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  char *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  __int128 v180;
  void *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  const char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  double v207;
  double *v208;
  unsigned int v209;
  unint64_t v210;
  double v211;
  BOOL v212;
  double v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  char v218;
  unint64_t v219;
  double v220;
  char v221;
  uint64_t v222;
  unint64_t v223;
  double v224;
  uint64_t v225;
  _BOOL4 v226;
  unint64_t v227;
  double v228;
  char v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  unint64_t result;
  unsigned __int8 v236;
  int v237;
  unint64_t v238;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  size_t v247;
  void **v248;
  unint64_t v249;
  const void **v250;
  const void *v251;
  uint64_t v252;
  uint64_t v253;
  void **v254;
  uint64_t v255;
  const char *v256;
  size_t v257;
  unsigned __int8 v258;
  unsigned __int8 v259;
  const char *v260;
  size_t v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  NSObject *v266;
  uint64_t v267;
  uint64_t v268;
  size_t v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  size_t v272;
  size_t v273;
  _QWORD *v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  char v279;
  _QWORD *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  char *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  __int128 v303;
  void *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  _QWORD *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  const char *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  void *v331;
  int v332;
  const char *v333;
  const char *v334;
  int v335;
  char *__s;
  char *__sa;
  char *__sb;
  int v339;
  const char *v340;
  const char *v341;
  uint64_t *v342;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v344;
  int v345;
  const char *v346;
  int v347;
  const char *v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  void **__dst;
  size_t v352;
  int64_t v353;
  void *v354[2];
  uint64_t v355;
  uint64_t v356;
  const void *v357;
  unint64_t v358;
  const void *v359;
  unint64_t v360;
  void *__p;
  char v362;
  unint64_t v363;
  int v364;
  _BYTE v365[152];
  unint64_t v366;
  void *v367[2];
  std::__shared_weak_count *v368;
  char *v369;
  std::__shared_weak_count *v370;
  _QWORD *v371;
  __int128 v372;
  _BYTE v373[24];
  __int128 v374;
  char *v375;
  size_t v376;
  unint64_t v377;
  char v378;
  _QWORD v379[5];

  v379[2] = *MEMORY[0x24BDAC8D0];
  sub_20F8167AC(&v366);
  v4 = MEMORY[0x24BEDB7F0];
  v5 = MEMORY[0x24BEDB848];
  v6 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Log/src/APILogging.cpp" + 36;
  if (**(int **)(v366 + 56) > 2)
    goto LABEL_143;
  v7 = *(unsigned __int8 *)(v366 + 72);
  v8 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  if (!v7 && v8 == 0)
    goto LABEL_143;
  sub_20E863438((uint64_t)v354);
  sub_20E86A980(&v355, (uint64_t)"Angular speed is : ", 19);
  _Q1 = *(_OWORD *)a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = sub_20E86A980(v17, (uint64_t)" ", 1);
  *(_QWORD *)v373 = a2;
  v19 = sub_20EB32EA4(v18, (__int128 **)v373);
  sub_20E86A980(v19, (uint64_t)" avg: ", 6);
  std::ostream::operator<<();
  v339 = v7;
  if ((v364 & 0x10) != 0)
  {
    v22 = v363;
    if (v363 < v360)
    {
      v363 = v360;
      v22 = v360;
    }
    v23 = v359;
    v20 = v22 - (_QWORD)v359;
    if (v22 - (unint64_t)v359 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v364 & 8) == 0)
    {
      v20 = 0;
      HIBYTE(v353) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_19;
    }
    v23 = v357;
    v20 = v358 - (_QWORD)v357;
    if (v358 - (unint64_t)v357 > 0x7FFFFFFFFFFFFFF7)
LABEL_64:
      sub_20E860B7C();
  }
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v352 = v20;
    v353 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_18;
  }
  HIBYTE(v353) = v20;
  p_dst = (void **)&__dst;
  if (v20)
LABEL_18:
    memmove(p_dst, v23, v20);
LABEL_19:
  *((_BYTE *)p_dst + v20) = 0;
  v342 = (uint64_t *)&v366;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v344 = std::chrono::system_clock::now().__d_.__rep_;
  v345 = 2;
  v346 = "unknown file";
  v347 = 91;
  v349 = 0;
  v350 = 0;
  v348 = "unknown function";
  if (v353 >= 0)
    v26 = (void **)&__dst;
  else
    v26 = __dst;
  v27 = *v342;
  v28 = (const char *)(*v342 + 16);
  v334 = v28;
  __s = (char *)v26;
  if (*(char *)(*v342 + 39) < 0)
  {
    v28 = *(const char **)(v27 + 16);
    v29 = *(_QWORD *)(v27 + 24);
    v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v31 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v29 = *(unsigned __int8 *)(*v342 + 39);
    v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v30 & 1) != 0)
      goto LABEL_26;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v373);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v373);
    if ((_BYTE)v374 && (v373[23] & 0x80000000) != 0)
      operator delete(*(void **)v373);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_26:
  if (byte_254A4A4F8[23] >= 0)
    v32 = byte_254A4A4F8;
  else
    v32 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v33 = byte_254A4A4F8[23];
  else
    v33 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v373 = os_log_create(v32, v28);
  v34 = &v373[8];
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    *(_QWORD *)&v373[16] = v33;
    *(_QWORD *)&v374 = v36 | 0x8000000000000000;
    *(_QWORD *)&v373[8] = v34;
    goto LABEL_39;
  }
  BYTE7(v374) = v33;
  if (v33)
LABEL_39:
    memmove(v34, v32, v33);
  v34[v33] = 0;
  BYTE8(v374) = 1;
  v37 = (char *)&v375;
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v6 = "s/AppleCV3D/library/Essentials/Log/src/APILogging.cpp";
  if (v29 >= 0x17)
  {
    v40 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v40 = v29 | 7;
    v41 = v40 + 1;
    v37 = (char *)operator new(v40 + 1);
    v376 = v29;
    v377 = v41 | 0x8000000000000000;
    v375 = v37;
    v4 = MEMORY[0x24BEDB7F0];
  }
  else
  {
    HIBYTE(v377) = v29;
    v4 = MEMORY[0x24BEDB7F0];
    if (!v29)
    {
      LOBYTE(v375) = 0;
      v378 = 1;
      v38 = *(NSObject **)v373;
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_50;
    }
  }
  memmove(v37, v28, v29);
  v37[v29] = 0;
  v378 = 1;
  v38 = *(NSObject **)v373;
  if ((SHIBYTE(v377) & 0x80000000) == 0)
  {
LABEL_44:
    v39 = v339;
    if (!BYTE8(v374))
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v375);
  v39 = v339;
  if (!BYTE8(v374))
    goto LABEL_53;
LABEL_51:
  if (SBYTE7(v374) < 0)
    operator delete(*(void **)&v373[8]);
LABEL_53:
  if (*(_QWORD *)v373)
    os_release(*(void **)v373);
  if (!v9 || !*(_QWORD *)(v9 + 24))
  {
    os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v373 = 136315138;
    *(_QWORD *)&v373[4] = __s;
    v48 = (void *)_os_log_send_and_compose_impl();
    v5 = MEMORY[0x24BEDB848];
    if (v48)
      free(v48);
    goto LABEL_129;
  }
  v42 = _os_log_pack_size();
  v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
  v44 = (std::__shared_weak_count *)operator new();
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44[1].__vftable = v43;
  v367[0] = v43;
  v367[1] = v43;
  v370 = 0;
  v368 = v44;
  v369 = 0;
  v45 = strlen(__s);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v49 = v45 | 7;
    v50 = v49 + 1;
    v47 = operator new(v49 + 1);
    *(_QWORD *)&v372 = v46;
    *((_QWORD *)&v372 + 1) = v50 | 0x8000000000000000;
    v371 = v47;
    v4 = MEMORY[0x24BEDB7F0];
    goto LABEL_68;
  }
  HIBYTE(v372) = v45;
  v47 = &v371;
  if (v45)
LABEL_68:
    memcpy(v47, __s, v46);
  *((_BYTE *)v47 + v46) = 0;
  v51 = v371;
  v379[0] = v372;
  *(_QWORD *)((char *)v379 + 7) = *(_QWORD *)((char *)&v372 + 7);
  v52 = HIBYTE(v372);
  v53 = operator new(0x38uLL);
  v53[1] = 0;
  v53[2] = 0;
  v53[3] = off_24C9ABC20;
  *v53 = &off_24C9ABBD0;
  v54 = v379[0];
  v53[4] = v51;
  v53[5] = v54;
  *(_QWORD *)((char *)v53 + 47) = *(_QWORD *)((char *)v379 + 7);
  *((_BYTE *)v53 + 55) = v52;
  v379[0] = 0;
  *(_QWORD *)((char *)v379 + 7) = 0;
  v55 = v370;
  v369 = (char *)(v53 + 3);
  v370 = (std::__shared_weak_count *)v53;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  *(_OWORD *)v373 = *(_OWORD *)v367;
  v58 = v369;
  *(_QWORD *)&v373[16] = v368;
  if (v368)
  {
    v59 = (unint64_t *)&v368->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = v370;
  *(_QWORD *)&v374 = v58;
  *((_QWORD *)&v374 + 1) = v370;
  if (v370)
  {
    v62 = (unint64_t *)&v370->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    v375 = v58;
    do
      v64 = __ldaxr(v62);
    while (__stlxr(v64 - 1, v62));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  else
  {
    v375 = v58;
  }
  v65 = v368;
  if (v368)
  {
    v66 = (unint64_t *)&v368->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(_QWORD *)v373;
  if (v375[31] >= 0)
    v69 = v375 + 8;
  else
    v69 = (char *)*((_QWORD *)v375 + 1);
  v70 = _os_log_pack_fill();
  *(_DWORD *)v70 = 136315138;
  *(_QWORD *)(v70 + 4) = v69;
  v71 = (char *)operator new();
  v72 = *(unsigned __int8 *)(v27 + 39);
  v73 = *(const char **)(v27 + 16);
  v74 = *(_QWORD *)(v27 + 24);
  v75 = v374;
  *(_OWORD *)(v71 + 8) = *(_OWORD *)&v373[8];
  if ((v72 & 0x80u) != 0)
    v72 = v74;
  else
    v73 = v334;
  *(_QWORD *)v71 = v68;
  *(_QWORD *)&v373[8] = 0;
  *(_QWORD *)&v373[16] = 0;
  *(_OWORD *)(v71 + 24) = v75;
  v374 = 0uLL;
  *((_QWORD *)v71 + 5) = v73;
  *((_QWORD *)v71 + 6) = v72;
  v71[56] = 2;
  v371 = 0;
  v367[0] = v71;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v367);
  v39 = v339;
  v76 = v367[0];
  v367[0] = 0;
  v5 = MEMORY[0x24BEDB848];
  if (v76)
  {
    v77 = (std::__shared_weak_count *)*((_QWORD *)v76 + 4);
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = (std::__shared_weak_count *)*((_QWORD *)v76 + 2);
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
    v83 = v371;
    v371 = 0;
    if (v83)
    {
      v84 = (std::__shared_weak_count *)v83[4];
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (std::__shared_weak_count *)v83[2];
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
  if (*((_QWORD *)&v374 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = *(std::__shared_weak_count **)&v373[16];
  if (*(_QWORD *)&v373[16])
  {
    v94 = (unint64_t *)(*(_QWORD *)&v373[16] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
LABEL_129:
  if (v39)
  {
    v96 = (const char *)&__dst;
    if (v353 < 0)
      v96 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v342, "%s", v96);
    sub_20E863570((uint64_t)&v342);
  }
  sub_20E863570((uint64_t)&v342);
  v97 = v350;
  if (v350)
  {
    v98 = (unint64_t *)&v350->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (SHIBYTE(v353) < 0)
    operator delete(__dst);
  v354[0] = *(void **)v4;
  v100 = *(_QWORD *)(v4 + 72);
  *(void **)((char *)v354 + *((_QWORD *)v354[0] - 3)) = *(void **)(v4 + 64);
  v355 = v100;
  v356 = v5 + 16;
  if (v362 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v365);
LABEL_143:
  _Q1 = *(_OWORD *)a2;
  _D3 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  v104 = sqrt(_D2 + a2[2] * a2[2]);
  *(double *)(a1 + 520) = *(double *)(a1 + 520) + v104;
  *(double *)(a1 + 528) = *(double *)(a1 + 528) + v104 * v104;
  ++*(_QWORD *)(a1 + 568);
  v105 = v104 + *(double *)(a1 + 536);
  *(double *)(a1 + 536) = v105;
  v106 = v104 * v104 + *(double *)(a1 + 544);
  *(double *)(a1 + 544) = v106;
  v107 = *(_QWORD *)(a1 + 488);
  v108 = *(_QWORD *)(a1 + 448);
  v109 = (*(_QWORD *)(a1 + 456) - v108) >> 3;
  if (v107 >= v109)
  {
    v110 = *(double *)(v108 + 8 * *(_QWORD *)(a1 + 472));
    *(double *)(a1 + 536) = v105 - v110;
    *(double *)(a1 + 544) = v106 - v110 * v110;
  }
  v111 = *(_QWORD *)(a1 + 480);
  *(double *)(v108 + 8 * v111) = v104;
  v112 = v111 + 1;
  if (v111 + 1 >= v109)
    v113 = v109;
  else
    v113 = 0;
  *(_QWORD *)(a1 + 480) = v112 - v113;
  if (v107 == v109)
  {
    v114 = *(_QWORD *)(a1 + 472) + 1;
    if (v114 < v107)
      v107 = 0;
    *(_QWORD *)(a1 + 472) = v114 - v107;
  }
  else
  {
    *(_QWORD *)(a1 + 488) = v107 + 1;
  }
  v115 = *(double *)(a1 + 552);
  if (v115 < v104)
    v115 = v104;
  *(double *)(a1 + 552) = v115;
  if (*(double *)(a1 + 560) <= v104)
    v104 = *(double *)(a1 + 560);
  *(double *)(a1 + 560) = v104;
  if (*(_BYTE *)(a1 + 28))
  {
    ++*(_DWORD *)(a1 + 24);
    goto LABEL_304;
  }
  sub_20F8167AC(&v366);
  if (**(int **)(v366 + 56) <= 2)
  {
    v116 = *(unsigned __int8 *)(v366 + 72);
    v117 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
    v118 = (char *)v117;
    if (v116 || v117)
    {
      sub_20E863438((uint64_t)v354);
      sub_20E86A980(&v355, (uint64_t)"Moving average of camera to IMU timeoffset: ", 44);
      v119 = (_QWORD *)std::ostream::operator<<();
      v120 = sub_20E86A980(v119, (uint64_t)" [ms] ", 6);
      sub_20E86A980(v120, (uint64_t)" moving std: ", 13);
      v121 = (_QWORD *)std::ostream::operator<<();
      v122 = sub_20E86A980(v121, (uint64_t)" [ms]", 5);
      sub_20E86A980(v122, (uint64_t)" std: ", 6);
      v123 = (_QWORD *)std::ostream::operator<<();
      v124 = sub_20E86A980(v123, (uint64_t)" [ms]", 5);
      sub_20E86A980(v124, (uint64_t)" counter: ", 10);
      std::ostream::operator<<();
      __sa = v118;
      if ((v364 & 0x10) != 0)
      {
        v127 = v363;
        if (v363 < v360)
        {
          v363 = v360;
          v127 = v360;
        }
        v128 = v359;
        v125 = v127 - (_QWORD)v359;
        if (v127 - (unint64_t)v359 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_219;
      }
      else
      {
        if ((v364 & 8) == 0)
        {
          v125 = 0;
          HIBYTE(v353) = 0;
          v126 = (void **)&__dst;
          goto LABEL_175;
        }
        v128 = v357;
        v125 = v358 - (_QWORD)v357;
        if (v358 - (unint64_t)v357 > 0x7FFFFFFFFFFFFFF7)
LABEL_219:
          sub_20E860B7C();
      }
      if (v125 >= 0x17)
      {
        v129 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v125 | 7) != 0x17)
          v129 = v125 | 7;
        v130 = v129 + 1;
        v126 = (void **)operator new(v129 + 1);
        v352 = v125;
        v353 = v130 | 0x8000000000000000;
        __dst = v126;
      }
      else
      {
        HIBYTE(v353) = v125;
        v126 = (void **)&__dst;
        if (!v125)
        {
LABEL_175:
          *((_BYTE *)v126 + v125) = 0;
          v342 = (uint64_t *)&v366;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v344 = std::chrono::system_clock::now().__d_.__rep_;
          v345 = 2;
          v346 = "unknown file";
          v347 = 103;
          v349 = 0;
          v350 = 0;
          v348 = "unknown function";
          v131 = (void **)&__dst;
          if (v353 < 0)
            v131 = __dst;
          v340 = (const char *)v131;
          v132 = *v342;
          v133 = (const char *)(*v342 + 16);
          v335 = v116;
          v333 = v133;
          if (*(char *)(*v342 + 39) < 0)
          {
            v133 = *(const char **)(v132 + 16);
            v134 = *(_QWORD *)(v132 + 24);
            v135 = v6;
            v137 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v137 & 1) != 0)
              goto LABEL_181;
          }
          else
          {
            v134 = *(unsigned __int8 *)(*v342 + 39);
            v135 = v6;
            v136 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v136 & 1) != 0)
              goto LABEL_181;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v373);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v373);
            if ((_BYTE)v374 && (v373[23] & 0x80000000) != 0)
              operator delete(*(void **)v373);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_181:
          if (byte_254A4A4F8[23] >= 0)
            v138 = byte_254A4A4F8;
          else
            v138 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v139 = byte_254A4A4F8[23];
          else
            v139 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v373 = os_log_create(v138, v133);
          v140 = &v373[8];
          if (v139 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v139 >= 0x17)
          {
            v141 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v139 | 7) != 0x17)
              v141 = v139 | 7;
            v142 = v141 + 1;
            v140 = operator new(v141 + 1);
            *(_QWORD *)&v373[16] = v139;
            *(_QWORD *)&v374 = v142 | 0x8000000000000000;
            *(_QWORD *)&v373[8] = v140;
          }
          else
          {
            BYTE7(v374) = v139;
            if (!v139)
            {
LABEL_195:
              v140[v139] = 0;
              BYTE8(v374) = 1;
              v143 = (char *)&v375;
              if (v134 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v6 = v135;
              if (v134 >= 0x17)
              {
                v144 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v134 | 7) != 0x17)
                  v144 = v134 | 7;
                v145 = v144 + 1;
                v143 = (char *)operator new(v144 + 1);
                v376 = v134;
                v377 = v145 | 0x8000000000000000;
                v375 = v143;
                v4 = MEMORY[0x24BEDB7F0];
              }
              else
              {
                HIBYTE(v377) = v134;
                v4 = MEMORY[0x24BEDB7F0];
                if (!v134)
                {
LABEL_203:
                  v143[v134] = 0;
                  v378 = 1;
                  v146 = *(NSObject **)v373;
                  if (SHIBYTE(v377) < 0)
                    operator delete(v375);
                  if (BYTE8(v374) && SBYTE7(v374) < 0)
                    operator delete(*(void **)&v373[8]);
                  if (*(_QWORD *)v373)
                    os_release(*(void **)v373);
                  if (!__sa || !*((_QWORD *)__sa + 3))
                  {
                    os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v373 = *((_QWORD *)v135 + 427);
                    *(_QWORD *)&v373[4] = v340;
                    v153 = (void *)_os_log_send_and_compose_impl();
                    v5 = MEMORY[0x24BEDB848];
                    if (v153)
                      free(v153);
                    goto LABEL_284;
                  }
                  v147 = _os_log_pack_size();
                  v148 = (std::__shared_weak_count_vtbl *)operator new(v147, (std::align_val_t)8uLL);
                  v149 = (std::__shared_weak_count *)operator new();
                  v149->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v149->__shared_owners_ = 0;
                  v149->__shared_weak_owners_ = 0;
                  v149[1].__vftable = v148;
                  v367[0] = v148;
                  v367[1] = v148;
                  v370 = 0;
                  v368 = v149;
                  v369 = 0;
                  v150 = strlen(v340);
                  if (v150 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v151 = v150;
                  if (v150 >= 0x17)
                  {
                    v154 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v150 | 7) != 0x17)
                      v154 = v150 | 7;
                    v155 = v154 + 1;
                    v152 = operator new(v154 + 1);
                    *(_QWORD *)&v372 = v151;
                    *((_QWORD *)&v372 + 1) = v155 | 0x8000000000000000;
                    v371 = v152;
                    v4 = MEMORY[0x24BEDB7F0];
                  }
                  else
                  {
                    HIBYTE(v372) = v150;
                    v152 = &v371;
                    if (!v150)
                    {
LABEL_224:
                      *((_BYTE *)v152 + v151) = 0;
                      v156 = v371;
                      v379[0] = v372;
                      *(_QWORD *)((char *)v379 + 7) = *(_QWORD *)((char *)&v372 + 7);
                      v157 = HIBYTE(v372);
                      v158 = operator new(0x38uLL);
                      v158[1] = 0;
                      v158[2] = 0;
                      v158[3] = off_24C9ABC20;
                      *v158 = &off_24C9ABBD0;
                      v159 = v379[0];
                      v158[4] = v156;
                      v158[5] = v159;
                      *(_QWORD *)((char *)v158 + 47) = *(_QWORD *)((char *)v379 + 7);
                      *((_BYTE *)v158 + 55) = v157;
                      v379[0] = 0;
                      *(_QWORD *)((char *)v379 + 7) = 0;
                      v160 = v370;
                      v369 = (char *)(v158 + 3);
                      v370 = (std::__shared_weak_count *)v158;
                      if (v160)
                      {
                        v161 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v162 = __ldaxr(v161);
                        while (__stlxr(v162 - 1, v161));
                        if (!v162)
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                      }
                      *(_OWORD *)v373 = *(_OWORD *)v367;
                      v163 = v369;
                      *(_QWORD *)&v373[16] = v368;
                      if (v368)
                      {
                        v164 = (unint64_t *)&v368->__shared_owners_;
                        do
                          v165 = __ldxr(v164);
                        while (__stxr(v165 + 1, v164));
                      }
                      v166 = v370;
                      *(_QWORD *)&v374 = v163;
                      *((_QWORD *)&v374 + 1) = v370;
                      if (v370)
                      {
                        v167 = (unint64_t *)&v370->__shared_owners_;
                        do
                          v168 = __ldxr(v167);
                        while (__stxr(v168 + 1, v167));
                        v375 = v163;
                        do
                          v169 = __ldaxr(v167);
                        while (__stlxr(v169 - 1, v167));
                        if (!v169)
                        {
                          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                          std::__shared_weak_count::__release_weak(v166);
                        }
                      }
                      else
                      {
                        v375 = v163;
                      }
                      v170 = v368;
                      if (v368)
                      {
                        v171 = (unint64_t *)&v368->__shared_owners_;
                        do
                          v172 = __ldaxr(v171);
                        while (__stlxr(v172 - 1, v171));
                        if (!v172)
                        {
                          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                          std::__shared_weak_count::__release_weak(v170);
                        }
                      }
                      v173 = *(_QWORD *)v373;
                      if (v375[31] >= 0)
                        v174 = v375 + 8;
                      else
                        v174 = (char *)*((_QWORD *)v375 + 1);
                      v175 = _os_log_pack_fill();
                      *(_DWORD *)v175 = *((_QWORD *)v135 + 427);
                      *(_QWORD *)(v175 + 4) = v174;
                      v176 = (char *)operator new();
                      v177 = *(unsigned __int8 *)(v132 + 39);
                      v178 = *(const char **)(v132 + 16);
                      v179 = *(_QWORD *)(v132 + 24);
                      v180 = v374;
                      *(_OWORD *)(v176 + 8) = *(_OWORD *)&v373[8];
                      if ((v177 & 0x80u) != 0)
                        v177 = v179;
                      else
                        v178 = v333;
                      *(_QWORD *)v176 = v173;
                      *(_QWORD *)&v373[8] = 0;
                      *(_QWORD *)&v373[16] = 0;
                      *(_OWORD *)(v176 + 24) = v180;
                      v374 = 0uLL;
                      *((_QWORD *)v176 + 5) = v178;
                      *((_QWORD *)v176 + 6) = v177;
                      v176[56] = 2;
                      v371 = 0;
                      v367[0] = v176;
                      (*(void (**)(_QWORD, void **))(**((_QWORD **)__sa + 3) + 40))(*((_QWORD *)__sa + 3), v367);
                      v181 = v367[0];
                      v367[0] = 0;
                      v5 = MEMORY[0x24BEDB848];
                      if (v181)
                      {
                        v182 = (std::__shared_weak_count *)*((_QWORD *)v181 + 4);
                        if (v182)
                        {
                          v183 = (unint64_t *)&v182->__shared_owners_;
                          do
                            v184 = __ldaxr(v183);
                          while (__stlxr(v184 - 1, v183));
                          if (!v184)
                          {
                            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                            std::__shared_weak_count::__release_weak(v182);
                          }
                        }
                        v185 = (std::__shared_weak_count *)*((_QWORD *)v181 + 2);
                        if (v185)
                        {
                          v186 = (unint64_t *)&v185->__shared_owners_;
                          do
                            v187 = __ldaxr(v186);
                          while (__stlxr(v187 - 1, v186));
                          if (!v187)
                          {
                            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                            std::__shared_weak_count::__release_weak(v185);
                          }
                        }
                        MEMORY[0x212BC6398](v181, 0x10F0C40B62ED6C6);
                        v188 = v371;
                        v371 = 0;
                        if (v188)
                        {
                          v189 = (std::__shared_weak_count *)v188[4];
                          if (v189)
                          {
                            v190 = (unint64_t *)&v189->__shared_owners_;
                            do
                              v191 = __ldaxr(v190);
                            while (__stlxr(v191 - 1, v190));
                            if (!v191)
                            {
                              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                              std::__shared_weak_count::__release_weak(v189);
                            }
                          }
                          v192 = (std::__shared_weak_count *)v188[2];
                          if (v192)
                          {
                            v193 = (unint64_t *)&v192->__shared_owners_;
                            do
                              v194 = __ldaxr(v193);
                            while (__stlxr(v194 - 1, v193));
                            if (!v194)
                            {
                              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                              std::__shared_weak_count::__release_weak(v192);
                            }
                          }
                          MEMORY[0x212BC6398](v188, 0x10F0C40B62ED6C6);
                        }
                      }
                      v195 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
                      if (*((_QWORD *)&v374 + 1))
                      {
                        v196 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
                        do
                          v197 = __ldaxr(v196);
                        while (__stlxr(v197 - 1, v196));
                        if (!v197)
                        {
                          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                          std::__shared_weak_count::__release_weak(v195);
                        }
                      }
                      v198 = *(std::__shared_weak_count **)&v373[16];
                      if (*(_QWORD *)&v373[16])
                      {
                        v199 = (unint64_t *)(*(_QWORD *)&v373[16] + 8);
                        do
                          v200 = __ldaxr(v199);
                        while (__stlxr(v200 - 1, v199));
                        if (!v200)
                        {
                          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                          std::__shared_weak_count::__release_weak(v198);
                        }
                      }
LABEL_284:
                      if (v335)
                      {
                        v201 = (const char *)&__dst;
                        if (v353 < 0)
                          v201 = (const char *)__dst;
                        sub_20E8C003C((uint64_t)&v342, "%s", v201);
                        sub_20E863570((uint64_t)&v342);
                      }
                      sub_20E863570((uint64_t)&v342);
                      v202 = v350;
                      if (v350)
                      {
                        v203 = (unint64_t *)&v350->__shared_owners_;
                        do
                          v204 = __ldaxr(v203);
                        while (__stlxr(v204 - 1, v203));
                        if (!v204)
                        {
                          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                          std::__shared_weak_count::__release_weak(v202);
                        }
                      }
                      if (SHIBYTE(v353) < 0)
                        operator delete(__dst);
                      v354[0] = *(void **)v4;
                      v205 = *(_QWORD *)(v4 + 72);
                      *(void **)((char *)v354 + *((_QWORD *)v354[0] - 3)) = *(void **)(v4 + 64);
                      v355 = v205;
                      v356 = v5 + 16;
                      if (v362 < 0)
                        operator delete(__p);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](v365);
                      goto LABEL_298;
                    }
                  }
                  memcpy(v152, v340, v151);
                  goto LABEL_224;
                }
              }
              memmove(v143, v133, v134);
              goto LABEL_203;
            }
          }
          memmove(v140, v138, v139);
          goto LABEL_195;
        }
      }
      memmove(v126, v128, v125);
      goto LABEL_175;
    }
  }
LABEL_298:
  v206 = *(_QWORD *)(a1 + 624);
  if (v206 == (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v207 = 0.0;
    if (v206 >= 2)
    {
      v207 = 1.0 / (double)v206 * *(double *)(a1 + 680)
           - 1.0 / (double)v206 * *(double *)(a1 + 672) * (1.0 / (double)v206 * *(double *)(a1 + 672));
      if (v207 < 0.0)
        v207 = 0.0;
    }
    if (v207 < **(double **)a1 * **(double **)a1)
      *(_BYTE *)(a1 + 28) = 1;
  }
LABEL_304:
  v208 = *(double **)a1;
  v209 = *(_DWORD *)(*(_QWORD *)a1 + 40);
  if (!v209 || !*(_BYTE *)(a1 + 28))
    goto LABEL_351;
  v210 = *(_QWORD *)(a1 + 488);
  if (v210 != (uint64_t)(*(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448)) >> 3)
  {
    v212 = 0;
    v213 = v208[3];
    if (fabs(*a2) > v213)
      goto LABEL_328;
LABEL_310:
    v214 = 0;
    if (fabs(a2[1]) <= v213)
      goto LABEL_311;
    goto LABEL_335;
  }
  if (v210)
    v211 = *(double *)(a1 + 536) / (double)v210;
  else
    v211 = -1.0;
  v212 = v211 > v208[4];
  v213 = v208[3];
  if (fabs(*a2) <= v213)
    goto LABEL_310;
LABEL_328:
  v222 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  if ((v222 >> 1) + (v222 >> 3) <= (unint64_t)*(unsigned int *)(a1 + 8))
  {
    v223 = *(_QWORD *)(a1 + 80);
    v224 = 0.0;
    if (v223 >= 2)
    {
      v224 = 1.0 / (double)v223 * *(double *)(a1 + 136)
           - 1.0 / (double)v223 * *(double *)(a1 + 128) * (1.0 / (double)v223 * *(double *)(a1 + 128));
      if (v224 < 0.0)
        v224 = 0.0;
    }
    v214 = v224 > v208[1] * v208[1];
    if (fabs(a2[1]) <= v213)
    {
LABEL_311:
      v215 = *(_DWORD *)(a1 + 24);
      v216 = *((_DWORD *)v208 + 12);
      if (fabs(a2[2]) > v213)
        goto LABEL_312;
LABEL_342:
      v229 = v215 >= v216 || v212;
      if ((v229 & 1) != 0)
        goto LABEL_347;
      goto LABEL_346;
    }
  }
  else
  {
    v214 = 1;
    if (fabs(a2[1]) <= v213)
      goto LABEL_311;
  }
LABEL_335:
  v225 = *(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176);
  if ((v225 >> 1) + (v225 >> 3) <= (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v227 = *(_QWORD *)(a1 + 216);
    v228 = 0.0;
    if (v227 >= 2)
    {
      v228 = 1.0 / (double)v227 * *(double *)(a1 + 272)
           - 1.0 / (double)v227 * *(double *)(a1 + 264) * (1.0 / (double)v227 * *(double *)(a1 + 264));
      if (v228 < 0.0)
        v228 = 0.0;
    }
    v226 = v228 > v208[1] * v208[1];
  }
  else
  {
    v226 = 1;
  }
  v214 |= v226;
  v215 = *(_DWORD *)(a1 + 24);
  v216 = *((_DWORD *)v208 + 12);
  if (fabs(a2[2]) <= v213)
    goto LABEL_342;
LABEL_312:
  v217 = *(_QWORD *)(a1 + 320) - *(_QWORD *)(a1 + 312);
  if ((v217 >> 1) + (v217 >> 3) <= (unint64_t)*(unsigned int *)(a1 + 16))
  {
    v219 = *(_QWORD *)(a1 + 352);
    v220 = 0.0;
    if (v219 >= 2)
    {
      v220 = 1.0 / (double)v219 * *(double *)(a1 + 408)
           - 1.0 / (double)v219 * *(double *)(a1 + 400) * (1.0 / (double)v219 * *(double *)(a1 + 400));
      if (v220 < 0.0)
        v220 = 0.0;
    }
    v214 |= v220 > v208[1] * v208[1];
    v221 = v215 >= v216 || v212;
    if ((v221 & 1) != 0)
      goto LABEL_347;
  }
  else
  {
    v214 |= 1u;
    v218 = v215 >= v216 || v212;
    if ((v218 & 1) != 0)
      goto LABEL_347;
  }
LABEL_346:
  if (v214)
  {
LABEL_347:
    *(_BYTE *)(a1 + 28) = 0;
    v230 = v209 / 5;
    if (v230 <= 1)
      v231 = 1;
    else
      v231 = v230;
    *(_QWORD *)(a1 + 576) = v231;
    sub_20F11D04C((_QWORD *)(a1 + 584), v231);
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 624) = 0;
    *(_QWORD *)(a1 + 704) = 0;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = xmmword_210313B70;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v232 = *(unsigned int *)(*(_QWORD *)a1 + 52);
    *(_QWORD *)(a1 + 440) = v232;
    sub_20F11D04C((_QWORD *)(a1 + 448), v232);
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 568) = 0;
    *(_OWORD *)(a1 + 520) = 0u;
    *(_OWORD *)(a1 + 536) = 0u;
    *(_OWORD *)(a1 + 552) = xmmword_210313B70;
  }
LABEL_351:
  v233 = 0;
  v330 = *(void **)(v4 + 64);
  v331 = *(void **)v4;
  v329 = *(_QWORD *)(v4 + 72);
  v234 = &qword_254A6A000;
  v332 = *((_QWORD *)v6 + 427);
  v328 = v5 + 16;
  do
  {
    v236 = atomic_load((unsigned __int8 *)&qword_254A6AD88);
    if ((v236 & 1) == 0 && __cxa_guard_acquire(&qword_254A6AD88))
    {
      sub_21021D3D8(v373);
      sub_20E8610C0(v354, "cv3d.vio");
      sub_20E8C4068((uint64_t **)v373, (uint64_t)v354, &qword_254A6AD80);
      if (SHIBYTE(v355) < 0)
        operator delete(v354[0]);
      __cxa_guard_release(&qword_254A6AD88);
      v234 = &qword_254A6A000;
    }
    result = v234[432];
    v366 = result;
    if (**(int **)(result + 56) <= 2)
    {
      v237 = *(unsigned __int8 *)(result + 72);
      result = sub_20E8C31DC(result, "OSLogSurrogateAppender", 1, 0);
      v238 = result;
      if (v237 || result != 0)
      {
        sub_20E863438((uint64_t)v354);
        sub_20E86A980(&v355, (uint64_t)"Moving average of gyro_scale[ ", 30);
        v240 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v240, (uint64_t)"]: ", 3);
        v241 = (_QWORD *)std::ostream::operator<<();
        v242 = sub_20E86A980(v241, (uint64_t)" ", 1);
        sub_20E86A980(v242, (uint64_t)" moving std: ", 13);
        v243 = (_QWORD *)std::ostream::operator<<();
        v244 = sub_20E86A980(v243, (uint64_t)" ", 1);
        sub_20E86A980(v244, (uint64_t)" std: ", 6);
        v245 = (_QWORD *)std::ostream::operator<<();
        v246 = sub_20E86A980(v245, (uint64_t)" ", 1);
        sub_20E86A980(v246, (uint64_t)" counter: ", 10);
        std::ostream::operator<<();
        if ((v364 & 0x10) != 0)
        {
          v249 = v363;
          v250 = &v359;
          if (v363 < v360)
          {
            v363 = v360;
            v249 = v360;
            v250 = &v359;
          }
        }
        else
        {
          if ((v364 & 8) == 0)
          {
            v247 = 0;
            HIBYTE(v353) = 0;
            v248 = (void **)&__dst;
            goto LABEL_374;
          }
          v249 = v358;
          v250 = &v357;
        }
        v251 = *v250;
        v247 = v249 - (_QWORD)*v250;
        if (v247 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v247 >= 0x17)
        {
          v252 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v247 | 7) != 0x17)
            v252 = v247 | 7;
          v253 = v252 + 1;
          v248 = (void **)operator new(v252 + 1);
          v352 = v247;
          v353 = v253 | 0x8000000000000000;
          __dst = v248;
        }
        else
        {
          HIBYTE(v353) = v249 - *(_BYTE *)v250;
          v248 = (void **)&__dst;
          if (!v247)
          {
LABEL_374:
            *((_BYTE *)v248 + v247) = 0;
            v342 = (uint64_t *)&v366;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v344 = std::chrono::system_clock::now().__d_.__rep_;
            v345 = 2;
            v346 = "unknown file";
            v347 = 127;
            v348 = "unknown function";
            v349 = 0;
            v350 = 0;
            if (v353 >= 0)
              v254 = (void **)&__dst;
            else
              v254 = __dst;
            v255 = *v342;
            v256 = (const char *)(*v342 + 16);
            __sb = (char *)v256;
            v341 = (const char *)v254;
            if (*(char *)(*v342 + 39) < 0)
            {
              v256 = *(const char **)(v255 + 16);
              v257 = *(_QWORD *)(v255 + 24);
              v259 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v259 & 1) != 0)
                goto LABEL_381;
            }
            else
            {
              v257 = *(unsigned __int8 *)(*v342 + 39);
              v258 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v258 & 1) != 0)
                goto LABEL_381;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v367);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v367);
              if ((_BYTE)v369 && SHIBYTE(v368) < 0)
                operator delete(v367[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_381:
            if (byte_254A4A4F8[23] >= 0)
              v260 = byte_254A4A4F8;
            else
              v260 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v261 = byte_254A4A4F8[23];
            else
              v261 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v373 = os_log_create(v260, v256);
            if (v261 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v261 >= 0x17)
            {
              v263 = (v261 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v261 | 7) != 0x17)
                v263 = v261 | 7;
              v264 = v263 + 1;
              v262 = operator new(v263 + 1);
              *(_QWORD *)&v373[16] = v261;
              *(_QWORD *)&v374 = v264 | 0x8000000000000000;
              *(_QWORD *)&v373[8] = v262;
            }
            else
            {
              BYTE7(v374) = v261;
              v262 = &v373[8];
              if (!v261)
              {
LABEL_395:
                v262[v261] = 0;
                BYTE8(v374) = 1;
                if (v257 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v257 >= 0x17)
                {
                  v267 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v257 | 7) != 0x17)
                    v267 = v257 | 7;
                  v268 = v267 + 1;
                  v265 = (char *)operator new(v267 + 1);
                  v376 = v257;
                  v377 = v268 | 0x8000000000000000;
                  v375 = v265;
                }
                else
                {
                  HIBYTE(v377) = v257;
                  v265 = (char *)&v375;
                  if (!v257)
                  {
                    LOBYTE(v375) = 0;
                    v378 = 1;
                    v266 = *(NSObject **)v373;
                    if ((SHIBYTE(v377) & 0x80000000) == 0)
                      goto LABEL_399;
                    goto LABEL_405;
                  }
                }
                memmove(v265, v256, v257);
                v265[v257] = 0;
                v378 = 1;
                v266 = *(NSObject **)v373;
                if ((SHIBYTE(v377) & 0x80000000) == 0)
                {
LABEL_399:
                  v234 = &qword_254A6A000;
                  if (!BYTE8(v374))
                    goto LABEL_408;
                  goto LABEL_406;
                }
LABEL_405:
                operator delete(v375);
                v234 = &qword_254A6A000;
                if (!BYTE8(v374))
                  goto LABEL_408;
LABEL_406:
                if (SBYTE7(v374) < 0)
                  operator delete(*(void **)&v373[8]);
LABEL_408:
                if (*(_QWORD *)v373)
                  os_release(*(void **)v373);
                if (!v238 || !*(_QWORD *)(v238 + 24))
                {
                  os_log_type_enabled(v266, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v373 = v332;
                  *(_QWORD *)&v373[4] = v341;
                  v275 = (void *)_os_log_send_and_compose_impl();
                  if (v275)
                    free(v275);
                  goto LABEL_483;
                }
                v269 = _os_log_pack_size();
                v270 = (std::__shared_weak_count_vtbl *)operator new(v269, (std::align_val_t)8uLL);
                v271 = (std::__shared_weak_count *)operator new();
                v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v271->__shared_owners_ = 0;
                v271->__shared_weak_owners_ = 0;
                v271[1].__vftable = v270;
                v367[0] = v270;
                v367[1] = v270;
                v368 = v271;
                v369 = 0;
                v370 = 0;
                v272 = strlen(v341);
                if (v272 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v273 = v272;
                if (v272 >= 0x17)
                {
                  v276 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v272 | 7) != 0x17)
                    v276 = v272 | 7;
                  v277 = v276 + 1;
                  v274 = operator new(v276 + 1);
                  *(_QWORD *)&v372 = v273;
                  *((_QWORD *)&v372 + 1) = v277 | 0x8000000000000000;
                  v371 = v274;
                }
                else
                {
                  HIBYTE(v372) = v272;
                  v274 = &v371;
                  if (!v272)
                    goto LABEL_422;
                }
                memcpy(v274, v341, v273);
LABEL_422:
                *((_BYTE *)v274 + v273) = 0;
                v278 = v371;
                v379[0] = v372;
                *(_QWORD *)((char *)v379 + 7) = *(_QWORD *)((char *)&v372 + 7);
                v279 = HIBYTE(v372);
                v280 = operator new(0x38uLL);
                v280[1] = 0;
                v280[2] = 0;
                v280[3] = off_24C9ABC20;
                *v280 = &off_24C9ABBD0;
                v281 = v379[0];
                v280[4] = v278;
                v280[5] = v281;
                *(_QWORD *)((char *)v280 + 47) = *(_QWORD *)((char *)v379 + 7);
                *((_BYTE *)v280 + 55) = v279;
                v379[0] = 0;
                *(_QWORD *)((char *)v379 + 7) = 0;
                v282 = v370;
                v369 = (char *)(v280 + 3);
                v370 = (std::__shared_weak_count *)v280;
                if (!v282)
                  goto LABEL_426;
                v283 = (unint64_t *)&v282->__shared_owners_;
                do
                  v284 = __ldaxr(v283);
                while (__stlxr(v284 - 1, v283));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                  std::__shared_weak_count::__release_weak(v282);
                  *(_OWORD *)v373 = *(_OWORD *)v367;
                  v285 = v369;
                  v286 = v368;
                  *(_QWORD *)&v373[16] = v368;
                  if (v368)
                  {
LABEL_427:
                    v287 = (unint64_t *)&v286->__shared_owners_;
                    do
                      v288 = __ldxr(v287);
                    while (__stxr(v288 + 1, v287));
                  }
                }
                else
                {
LABEL_426:
                  *(_OWORD *)v373 = *(_OWORD *)v367;
                  v285 = v369;
                  v286 = v368;
                  *(_QWORD *)&v373[16] = v368;
                  if (v368)
                    goto LABEL_427;
                }
                v289 = v370;
                *(_QWORD *)&v374 = v285;
                *((_QWORD *)&v374 + 1) = v370;
                if (v370)
                {
                  v290 = (unint64_t *)&v370->__shared_owners_;
                  do
                    v291 = __ldxr(v290);
                  while (__stxr(v291 + 1, v290));
                  v375 = v285;
                  do
                    v292 = __ldaxr(v290);
                  while (__stlxr(v292 - 1, v290));
                  if (!v292)
                  {
                    ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                    std::__shared_weak_count::__release_weak(v289);
                  }
                }
                else
                {
                  v375 = v285;
                }
                v293 = v368;
                if (v368)
                {
                  v294 = (unint64_t *)&v368->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                    std::__shared_weak_count::__release_weak(v293);
                  }
                }
                v296 = *(_QWORD *)v373;
                if (v375[31] >= 0)
                  v297 = v375 + 8;
                else
                  v297 = (char *)*((_QWORD *)v375 + 1);
                v298 = _os_log_pack_fill();
                *(_DWORD *)v298 = v332;
                *(_QWORD *)(v298 + 4) = v297;
                v299 = (char *)operator new();
                v300 = *(unsigned __int8 *)(v255 + 39);
                v301 = *(char **)(v255 + 16);
                v302 = *(_QWORD *)(v255 + 24);
                v303 = v374;
                *(_OWORD *)(v299 + 8) = *(_OWORD *)&v373[8];
                if ((v300 & 0x80u) != 0)
                  v300 = v302;
                else
                  v301 = __sb;
                *(_QWORD *)v299 = v296;
                *(_QWORD *)&v373[8] = 0;
                *(_QWORD *)&v373[16] = 0;
                *(_OWORD *)(v299 + 24) = v303;
                v374 = 0uLL;
                *((_QWORD *)v299 + 5) = v301;
                *((_QWORD *)v299 + 6) = v300;
                v299[56] = 2;
                v371 = 0;
                v367[0] = v299;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v238 + 24) + 40))(*(_QWORD *)(v238 + 24), v367);
                v304 = v367[0];
                v367[0] = 0;
                if (v304)
                {
                  v305 = (std::__shared_weak_count *)*((_QWORD *)v304 + 4);
                  if (v305)
                  {
                    v306 = (unint64_t *)&v305->__shared_owners_;
                    do
                      v307 = __ldaxr(v306);
                    while (__stlxr(v307 - 1, v306));
                    if (!v307)
                    {
                      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                      std::__shared_weak_count::__release_weak(v305);
                    }
                  }
                  v308 = (std::__shared_weak_count *)*((_QWORD *)v304 + 2);
                  if (v308)
                  {
                    v309 = (unint64_t *)&v308->__shared_owners_;
                    do
                      v310 = __ldaxr(v309);
                    while (__stlxr(v310 - 1, v309));
                    if (!v310)
                    {
                      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                      std::__shared_weak_count::__release_weak(v308);
                    }
                  }
                  MEMORY[0x212BC6398](v304, 0x10F0C40B62ED6C6);
                  v311 = v371;
                  v371 = 0;
                  if (v311)
                  {
                    v312 = (std::__shared_weak_count *)v311[4];
                    if (v312)
                    {
                      v313 = (unint64_t *)&v312->__shared_owners_;
                      do
                        v314 = __ldaxr(v313);
                      while (__stlxr(v314 - 1, v313));
                      if (!v314)
                      {
                        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                        std::__shared_weak_count::__release_weak(v312);
                      }
                    }
                    v315 = (std::__shared_weak_count *)v311[2];
                    if (v315)
                    {
                      v316 = (unint64_t *)&v315->__shared_owners_;
                      do
                        v317 = __ldaxr(v316);
                      while (__stlxr(v317 - 1, v316));
                      if (!v317)
                      {
                        ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                        std::__shared_weak_count::__release_weak(v315);
                      }
                    }
                    MEMORY[0x212BC6398](v311, 0x10F0C40B62ED6C6);
                  }
                }
                v318 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
                if (!*((_QWORD *)&v374 + 1))
                  goto LABEL_475;
                v319 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
                do
                  v320 = __ldaxr(v319);
                while (__stlxr(v320 - 1, v319));
                if (!v320)
                {
                  ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                  std::__shared_weak_count::__release_weak(v318);
                  v321 = *(std::__shared_weak_count **)&v373[16];
                  if (!*(_QWORD *)&v373[16])
                    goto LABEL_483;
                }
                else
                {
LABEL_475:
                  v321 = *(std::__shared_weak_count **)&v373[16];
                  if (!*(_QWORD *)&v373[16])
                    goto LABEL_483;
                }
                v322 = (unint64_t *)&v321->__shared_owners_;
                do
                  v323 = __ldaxr(v322);
                while (__stlxr(v323 - 1, v322));
                if (!v323)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
LABEL_483:
                if (v237)
                {
                  v324 = (const char *)&__dst;
                  if (v353 < 0)
                    v324 = (const char *)__dst;
                  sub_20E8C003C((uint64_t)&v342, "%s", v324);
                  sub_20E863570((uint64_t)&v342);
                }
                sub_20E863570((uint64_t)&v342);
                v325 = v350;
                if (!v350)
                  goto LABEL_491;
                v326 = (unint64_t *)&v350->__shared_owners_;
                do
                  v327 = __ldaxr(v326);
                while (__stlxr(v327 - 1, v326));
                if (!v327)
                {
                  ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                  std::__shared_weak_count::__release_weak(v325);
                  if ((SHIBYTE(v353) & 0x80000000) == 0)
                    goto LABEL_493;
                }
                else
                {
LABEL_491:
                  if ((SHIBYTE(v353) & 0x80000000) == 0)
                  {
LABEL_493:
                    v354[0] = v331;
                    *(void **)((char *)v354 + *((_QWORD *)v331 - 3)) = v330;
                    v355 = v329;
                    v356 = v328;
                    if (v362 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x212BC6290](v365);
                    goto LABEL_353;
                  }
                }
                operator delete(__dst);
                goto LABEL_493;
              }
            }
            memmove(v262, v260, v261);
            goto LABEL_395;
          }
        }
        memmove(v248, v251, v247);
        goto LABEL_374;
      }
    }
LABEL_353:
    ++v233;
  }
  while (v233 != 3);
  return result;
}

void sub_20F816458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50)
{
  uint64_t v50;

  if (*(_BYTE *)(v50 - 184) && *(char *)(v50 - 185) < 0)
    operator delete(*(void **)(v50 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a35);
  if (a49 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a50);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_20F8167AC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6AD88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6AD88))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6AD80);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6AD88);
  }
  *a1 = qword_254A6AD80;
}

void sub_20F816848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6AD88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6AD88);
  _Unwind_Resume(a1);
}

float64x2_t **sub_20F8168A0(float64x2_t **result, float64x2_t **a2)
{
  float64x2_t *v2;
  float64x2_t *v3;
  float64x2_t *v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  unint64_t v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t *v17;
  double v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v25;
  int64x2_t v26;
  float64x2_t v29;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t *v66;
  uint64_t v67;
  uint64_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  unint64_t v87;
  float64x2_t *v88;
  unint64_t v89;
  unint64_t v90;
  float64x2_t *v91;
  double v92;
  float64x2_t *v93;
  unint64_t v94;
  float64x2_t *v95;
  double v96;
  float64x2_t *v97;
  float64x2_t v98;
  int64x2_t v99;
  float64x2_t v101;
  float64x2_t v102;
  int8x16_t v104;
  int64x2_t v105;
  float64x2_t v108;
  unint64_t v111;
  uint64_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  int64x2_t v122;
  float64x2_t v123;
  int64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v132;
  float64x2_t v133;
  int8x16_t v135;
  int64x2_t v136;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  float64x2_t v143;
  double v144;
  float64x2_t v145;
  float64x2_t v147;
  float64x2_t v148;
  double v150;
  double cosval;
  __double2 v152;
  float64x2_t v153;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64_t v163;
  unint64_t v164;
  float64_t v165;
  float64_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64_t v171;
  double v172;
  float64_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  __int128 v212;
  int8x16_t v213;
  float64x2_t v214;
  float64x2_t v215;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  __double2 v225;
  double v226;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v232;
  float64x2_t v233;
  double v235;
  float64x2_t *v236;
  float64x2_t *v237;
  unint64_t v238;
  unint64_t v239;
  float64x2_t *v240;
  double v241;
  float64x2_t *v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v253;
  float64x2_t v254;
  int8x16_t v256;
  int64x2_t v257;
  float64x2_t v260;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t **v293;
  unint64_t v294;
  double v295;
  uint64_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  double v308;
  unint64_t v309;
  int8x16_t v310;
  float64x2_t v311;
  float64x2_t v312;
  unint64_t v313;
  double v314;
  float64x2_t v315;
  uint64_t v316;
  float64x2_t v317;
  float64x2_t v318;
  unint64_t v319;
  float64x2_t v320;
  float64x2_t v321;
  uint64_t v322;
  unint64_t v323;
  float64x2_t v324;
  float64_t v325;
  double v326;
  double v327;
  double v328;
  double v329;
  _OWORD v330[6];
  int8x16_t v331;
  float64_t v332;
  uint64_t v333;
  float64x2_t v334[3];
  double *v335[2];
  float64x2_t *v336[3];

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v2 = *a2;
  }
  else
  {
    v4 = *result;
    v5 = (char *)result[1] - (char *)*result;
    if (v5)
    {
      v7 = *v3;
      v6 = v3[1];
      v9 = v3[2];
      v8 = v3[3];
      v11 = v3[4];
      v10 = v3[5];
      v13 = v3[6];
      v12 = v3[7];
      v14 = 0x8E38E38E38E38E39 * (v5 >> 4);
      v15 = *result;
      do
      {
        v16 = v14 >> 1;
        v17 = &v15[9 * (v14 >> 1)];
        v18 = v17[8].f64[0];
        v19 = v17 + 9;
        v14 += ~(v14 >> 1);
        if (v18 < v3[8].f64[0])
          v15 = v19;
        else
          v14 = v16;
      }
      while (v14);
      if (v4 != v15)
      {
        v20.f64[0] = v15[1].f64[0];
        _Q19 = v15[2];
        v22 = v15[4];
        v23 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v15, (int64x2_t)_Q19);
        _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, (int64x2_t)_Q19);
        v20.f64[1] = v15[3].f64[0];
        v25 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64((int64x2_t)v22, 1), 8uLL);
        v26 = vzip1q_s64((int64x2_t)v22, (int64x2_t)_Q0);
        _D25 = v15[7].f64[0];
        _Q26 = v15[6];
        v29 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v23, vnegq_f64(_Q26).f64[0]), _Q0, _Q26, 1), v20, _D25, 0);
        _Q0.f64[0] = v15[4].f64[1];
        *(_QWORD *)&v22.f64[0] = vdupq_laneq_s64(v26, 1).u64[0];
        __asm { FMLS            D19, D0, V26.D[1] }
        *(_QWORD *)&v22.f64[1] = v25.i64[0];
        _D27 = *(_QWORD *)&v15[5].f64[0];
        v25.i64[0] = v26.i64[0];
        __asm { FMLS            D19, D21, V25.D[0] }
        _Q19.f64[1] = 1.0;
        v35 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v7.f64[0]), v22, v7, 1), v20, v6.f64[0]), v29, v6, 1);
        v36 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v26.u64[0], v7.f64[0]), (float64x2_t)v25.u64[1], v7, 1), (float64x2_t)_D27, v6.f64[0]), _Q19, v6, 1);
        v37 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v9.f64[0]), v22, v9, 1), v20, v8.f64[0]), v29, v8, 1);
        v38 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v26.u64[0], v9.f64[0]), (float64x2_t)v25.u64[1], v9, 1), (float64x2_t)_D27, v8.f64[0]), _Q19, v8, 1);
        v39 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v11.f64[0]), v22, v11, 1), v20, v10.f64[0]), v29, v10, 1);
        v40 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v25.u64[0], v11.f64[0]), (float64x2_t)v25.u64[1], v11, 1), (float64x2_t)_D27, v10.f64[0]), _Q19, v10, 1);
        v41 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v13.f64[0]), v22, v13, 1), v20, v12.f64[0]), v29, v12, 1);
        v42 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v25.u64[0], v13.f64[0]), (float64x2_t)v25.u64[1], v13, 1), (float64x2_t)_D27, v12.f64[0]), _Q19, v12, 1);
        v43 = (float64x2_t)vdupq_laneq_s64(v35, 1);
        v44 = (float64x2_t)vdupq_lane_s64(v36.i64[0], 0);
        v45 = (float64x2_t)vdupq_laneq_s64(v36, 1);
        v46 = (float64x2_t)vdupq_laneq_s64(v37, 1);
        v47 = (float64x2_t)vdupq_lane_s64(v38.i64[0], 0);
        v48 = (float64x2_t)vdupq_laneq_s64(v38, 1);
        v49 = (float64x2_t)vdupq_laneq_s64(v39, 1);
        v50 = (float64x2_t)vdupq_lane_s64(v40.i64[0], 0);
        v51 = (float64x2_t)vdupq_laneq_s64(v40, 1);
        v52 = (float64x2_t)vdupq_laneq_s64(v41, 1);
        v53 = (float64x2_t)vdupq_lane_s64(v42.i64[0], 0);
        v54 = (float64x2_t)vdupq_laneq_s64(v42, 1);
        do
        {
          v55 = v4[1];
          v57 = v4[2];
          v56 = v4[3];
          v59 = v4[4];
          v58 = v4[5];
          v61 = v4[6];
          v60 = v4[7];
          v62 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v4, *(double *)v37.i64), v46, v57), v47, v59), v48, v61);
          v63 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v4, *(double *)v39.i64), v49, v57), v50, v59), v51, v61);
          v64 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v4, *(double *)v41.i64), v52, v57), v53, v59), v54, v61);
          *v4 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v4, *(double *)v35.i64), v43, v57), v44, v59), v45, v61);
          v4[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v55, *(double *)v35.i64), v43, v56), v44, v58), v45, v60);
          v4[2] = v62;
          v4[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v55, *(double *)v37.i64), v46, v56), v47, v58), v48, v60);
          v4[4] = v63;
          v4[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v55, *(double *)v39.i64), v49, v56), v50, v58), v51, v60);
          v4[6] = v64;
          v4[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v55, *(double *)v41.i64), v52, v56), v53, v58), v54, v60);
          v4 += 9;
        }
        while (v4 != v15);
        v3 = *a2;
        v2 = a2[1];
      }
    }
  }
  v294 = 0x8E38E38E38E38E39 * (v2 - v3);
  if (v294 >= 2)
  {
    v65 = 1;
    v293 = result;
    while (1)
    {
      v66 = *result;
      v67 = (char *)result[1] - (char *)*result;
      if (v67)
      {
        v68 = (uint64_t)&(*a2)[9 * v65];
        v70 = *(float64x2_t *)(v68 - 144);
        v69 = *(float64x2_t *)(v68 - 128);
        v72 = *(float64x2_t *)(v68 - 112);
        v71 = *(float64x2_t *)(v68 - 96);
        v74 = *(float64x2_t *)(v68 - 80);
        v73 = *(float64x2_t *)(v68 - 64);
        v76 = *(float64x2_t *)(v68 - 48);
        v75 = *(float64x2_t *)(v68 - 32);
        v77 = *(double *)(v68 - 16);
        v79 = *(float64x2_t *)v68;
        v78 = *(float64x2_t *)(v68 + 16);
        v81 = *(float64x2_t *)(v68 + 32);
        v80 = *(float64x2_t *)(v68 + 48);
        v83 = *(float64x2_t *)(v68 + 64);
        v82 = *(float64x2_t *)(v68 + 80);
        v85 = *(float64x2_t *)(v68 + 96);
        v84 = *(float64x2_t *)(v68 + 112);
        v86 = *(double *)(v68 + 128);
        v87 = 0x8E38E38E38E38E39 * (v67 >> 4);
        v88 = *result;
        v89 = v87;
        do
        {
          v90 = v89 >> 1;
          v91 = &v88[9 * (v89 >> 1)];
          v92 = v91[8].f64[0];
          v93 = v91 + 9;
          v89 += ~(v89 >> 1);
          if (v92 < v77)
            v88 = v93;
          else
            v89 = v90;
        }
        while (v89);
        do
        {
          v94 = v87 >> 1;
          v95 = &v66[9 * (v87 >> 1)];
          v96 = v95[8].f64[0];
          v97 = v95 + 9;
          v87 += ~(v87 >> 1);
          if (v96 < v86)
            v66 = v97;
          else
            v87 = v94;
        }
        while (v87);
        if (v88 != v66)
          break;
      }
LABEL_15:
      ++v65;
      result = v293;
      if (v65 == v294)
      {
        v3 = *a2;
        v2 = a2[1];
        goto LABEL_43;
      }
    }
    v98.f64[0] = v66[1].f64[0];
    v99 = (int64x2_t)v66[2];
    _D31 = v66[5].f64[0];
    v101 = v66[4];
    v102 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v66, v99);
    _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v66, v99);
    v98.f64[1] = v66[3].f64[0];
    v104 = vextq_s8((int8x16_t)_Q7, (int8x16_t)vdupq_laneq_s64((int64x2_t)v101, 1), 8uLL);
    v105 = vzip1q_s64((int64x2_t)v101, (int64x2_t)_Q7);
    _D10 = v66[7].f64[0];
    _Q11 = v66[6];
    v108 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v102, vnegq_f64(_Q11).f64[0]), _Q7, _Q11, 1), v98, _D10, 0);
    _Q7.f64[0] = v66[4].f64[1];
    __asm { FMLS            D29, D7, V11.D[1] }
    *(_QWORD *)&v101.f64[0] = vdupq_laneq_s64(v105, 1).u64[0];
    __asm { FMLS            D29, D31, V10.D[0] }
    *(_QWORD *)&v101.f64[1] = v104.i64[0];
    v111 = *(_QWORD *)&_D31;
    v112 = v104.i64[1];
    _Q29.f64[1] = 1.0;
    v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v79.f64[0]), v101, v79, 1), v98, v78.f64[0]), v108, v78, 1);
    v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v105.u64[0], v79.f64[0]), (float64x2_t)v104.u64[1], v79, 1), (float64x2_t)v111, v78.f64[0]), _Q29, v78, 1);
    v115 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v81.f64[0]), v101, v81, 1), v98, v80.f64[0]), v108, v80, 1);
    v116 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v105.u64[0], v81.f64[0]), (float64x2_t)(unint64_t)v112, v81, 1), (float64x2_t)v111, v80.f64[0]), _Q29, v80, 1);
    v117 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v83.f64[0]), v101, v83, 1), v98, v82.f64[0]), v108, v82, 1);
    v118 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v105.u64[0], v83.f64[0]), (float64x2_t)(unint64_t)v112, v83, 1), (float64x2_t)v111, v82.f64[0]), _Q29, v82, 1);
    v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v102, v85.f64[0]), v101, v85, 1), v98, v84.f64[0]), v108, v84, 1);
    v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v105.u64[0], v85.f64[0]), (float64x2_t)(unint64_t)v112, v85, 1), (float64x2_t)v111, v84.f64[0]), _Q29, v84, 1);
    if (v88[8].f64[0] <= v77)
    {
      v129.f64[0] = v88[1].f64[0];
      _Q28 = v88[2];
      _D30 = *(_QWORD *)&v88[5].f64[0];
      v132 = v88[4];
      v133 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v88, (int64x2_t)_Q28);
      v129.f64[1] = v88[3].f64[0];
      _Q25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v88, (int64x2_t)_Q28);
      v135 = vextq_s8((int8x16_t)_Q25, (int8x16_t)vdupq_laneq_s64((int64x2_t)v132, 1), 8uLL);
      v136 = vzip1q_s64((int64x2_t)v132, (int64x2_t)_Q25);
      _D10 = v88[7].f64[0];
      _Q11 = v88[6];
      v139 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v133, vnegq_f64(_Q11).f64[0]), _Q25, _Q11, 1), v129, _D10, 0);
      _Q25.f64[0] = v88[4].f64[1];
      __asm
      {
        FMLS            D28, D25, V11.D[1]
        FMLS            D28, D30, V10.D[0]
      }
      *(_QWORD *)&v132.f64[0] = vdupq_laneq_s64(v136, 1).u64[0];
      *(_QWORD *)&v132.f64[1] = v135.i64[0];
      v135.i64[0] = v136.i64[0];
      _Q28.f64[1] = 1.0;
      v127 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, v70.f64[0]), v132, v70, 1), v129, v69.f64[0]), v139, v69, 1);
      v128 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v135.u64[0], v70.f64[0]), (float64x2_t)v135.u64[1], v70, 1), (float64x2_t)_D30, v69.f64[0]), _Q28, v69, 1);
      v125 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, v72.f64[0]), v132, v72, 1), v129, v71.f64[0]), v139, v71, 1);
      v126 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v135.u64[0], v72.f64[0]), (float64x2_t)v135.u64[1], v72, 1), (float64x2_t)_D30, v71.f64[0]), _Q28, v71, 1);
      v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, v74.f64[0]), v132, v74, 1), v129, v73.f64[0]), v139, v73, 1);
      v124 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v135.u64[0], v74.f64[0]), (float64x2_t)v135.u64[1], v74, 1), (float64x2_t)_D30, v73.f64[0]), _Q28, v73, 1);
      v141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v133, v76.f64[0]), v132, v76, 1), v129, v75.f64[0]);
      v123 = v140;
      _Q27 = vmlaq_laneq_f64(v141, v139, v75, 1);
      v122 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v135.u64[0], v76.f64[0]), (float64x2_t)v135.u64[1], v76, 1), (float64x2_t)_D30, v75.f64[0]), _Q28, v75, 1);
    }
    else
    {
      _Q27 = v119;
      v122 = (int64x2_t)v120;
      v123 = v117;
      v124 = (int64x2_t)v118;
      v125 = v115;
      v126 = (int64x2_t)v116;
      v127 = v113;
      v128 = v114;
    }
    v142 = v86 - v77;
    v143 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, v127.f64[0]), v115, v125.f64[0]), v117, v123.f64[0]);
    v144 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v114.f64[0], v127.f64[0]), v125.f64[0], v116.f64[0]), v123.f64[0], v118.f64[0]);
    v323 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
    v324 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v127, 1);
    v320 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v123, 1);
    v321 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1);
    v145 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v113, v127, 1), v115, v125, 1), v117, v123, 1);
    _D15 = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v114.f64[0], v127, 1), v125.f64[1], v116.f64[0]), v123.f64[1], v118.f64[0]);
    v318 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v128.f64[0], 0);
    v319 = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
    v317 = (float64x2_t)vdupq_lane_s64(v126.i64[0], 0);
    v147 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v113, v128.f64[0]), v115, *(double *)v126.i64), v117, *(double *)v124.i64);
    v313 = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u64[0];
    v314 = vmlad_n_f64(vmlad_n_f64(vmulq_f64(v114, v128).f64[0], *(double *)v126.i64, v116.f64[0]), *(double *)v124.i64, v118.f64[0]);
    v325 = v143.f64[0];
    v148 = vmulq_n_f64(v143, _Q27.f64[0]);
    _Q1 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q27, 1);
    v312 = _Q1;
    v322 = *(_QWORD *)&v145.f64[0];
    v315 = (float64x2_t)vdupq_lane_s64(v124.i64[0], 0);
    v316 = *(_QWORD *)&v147.f64[0];
    __asm { FMLA            D1, D15, V27.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v314, *(double *)v122.i64);
    v310 = (int8x16_t)vsubq_f64(v119, vmlaq_n_f64(vmlaq_laneq_f64(v148, v145, _Q27, 1), v147, *(double *)v122.i64));
    v311 = (float64x2_t)vdupq_lane_s64(v122.i64[0], 0);
    *(_QWORD *)&v308 = *(_OWORD *)&vsubq_f64(v120, _Q1);
    v309 = vextq_s8(v310, v310, 8uLL).u64[0];
    v306 = (float64x2_t)vdupq_laneq_s64(v126, 1);
    v307 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v128, 1);
    v304 = (float64x2_t)vdupq_laneq_s64(v122, 1);
    v305 = (float64x2_t)vdupq_laneq_s64(v124, 1);
    v328 = v125.f64[0];
    v329 = v127.f64[0];
    v326 = _Q27.f64[0];
    v327 = v123.f64[0];
    while (1)
    {
      v211 = v88[8].f64[0];
      *(float64_t *)&v212 = v325;
      *((_QWORD *)&v212 + 1) = v323;
      v330[0] = v212;
      v330[1] = *(unint64_t *)&v144;
      v213.i64[0] = v322;
      v213.i64[1] = v319;
      v330[2] = v213;
      v330[3] = *(unint64_t *)&_D15;
      v213.i64[0] = v316;
      v213.i64[1] = v313;
      v330[4] = v213;
      v330[5] = *(unint64_t *)&v314;
      v213.i64[0] = v310.i64[0];
      v213.i64[1] = v309;
      v331 = v213;
      v333 = 0x3FF0000000000000;
      v332 = v308;
      memset(v334, 0, sizeof(v334));
      v336[0] = (float64x2_t *)v330;
      v336[1] = 0;
      v335[0] = (double *)v334;
      v335[1] = 0;
      sub_20E95B988(v336, v335);
      v215.f64[0] = v334[1].f64[0];
      _Q20 = v334[0];
      _Q0 = vmulq_f64(_Q20, _Q20);
      _D1 = v334[0].f64[1];
      __asm { FMLA            D0, D1, V20.D[1] }
      v219 = _Q0.f64[0] + v215.f64[0] * v215.f64[0];
      if (v219 >= 0.0000002635)
      {
        v224 = sqrt(v219);
        v301 = v334[0];
        v303 = v334[1].f64[0];
        v225 = __sincos_stret(v224);
        _Q20 = v301;
        v215.f64[0] = v303;
        v221 = 1.0;
        v222 = v225.__sinval / v224;
        _Q0.f64[0] = 1.0 / v219 * (1.0 - v225.__cosval);
        v220 = 1.0 / v219 * (1.0 - v225.__sinval / v224);
        if (v219 >= 2.775e-15)
        {
LABEL_35:
          v223 = (_Q0.f64[0] * 0.5 - v220) / v222;
          _Q0.f64[0] = (_Q0.f64[0] + v222 * -0.5) / (v219 * _Q0.f64[0]);
          if (v219 <= 9.0)
            _Q0.f64[0] = v223;
          goto LABEL_40;
        }
      }
      else
      {
        _Q0.f64[0] = 0.5 - v219 * (v219 / -720.0 + 0.0416666667);
        v220 = 0.166666667 - v219 * (v219 / -5040.0 + 0.00833333333);
        v221 = 1.0;
        v222 = 1.0 - v219 * v220;
        if (v219 >= 2.775e-15)
          goto LABEL_35;
      }
      _Q0.f64[0] = v219 * 0.0000330687831 + v219 * 0.00138888889 + 0.0833333333;
LABEL_40:
      v226 = (v211 - v77) / v142;
      _Q2 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL);
      v214.f64[0] = v332;
      v228.f64[0] = _Q2.f64[0];
      v228.f64[1] = v215.f64[0];
      v229 = (float64x2_t)vextq_s8(v331, (int8x16_t)v214, 8uLL);
      v230 = vsubq_f64(vmulq_laneq_f64(_Q20, (float64x2_t)v331, 1), vmulq_f64(_Q2, (float64x2_t)v331));
      __asm { FMOV            V16.2D, #-0.5 }
      v232 = vaddq_f64(v214, vmulq_f64(v230, _Q16));
      *(_QWORD *)&v214.f64[1] = v331.i64[0];
      v215.f64[1] = _Q20.f64[0];
      v161 = vsubq_f64(vmulq_f64(v228, v214), vmulq_f64(v215, v229));
      v233 = (float64x2_t)vextq_s8((int8x16_t)v161, (int8x16_t)v230, 8uLL);
      v230.f64[1] = v161.f64[0];
      v160 = vmulq_f64(v215, v233);
      *(float64x2_t *)((char *)&v334[1] + 8) = vaddq_f64(vaddq_f64((float64x2_t)v331, vmulq_f64(v161, _Q16)), vmulq_n_f64(vsubq_f64(vmulq_f64(v228, v230), v160), _Q0.f64[0]));
      *(_QWORD *)&v334[2].f64[1] = *(_OWORD *)&vaddq_f64(v232, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q20, v161, 1), vmulq_f64(_Q2, v161))));
      v161.f64[1] = v334[0].f64[1];
      _Q28 = (int8x16_t)vmulq_n_f64(v334[0], v226);
      v157 = (float64x2_t)vextq_s8(_Q28, _Q28, 8uLL);
      v155 = vmulq_n_f64(v334[2], v226);
      v158 = vmulq_n_f64(v334[1], v226);
      v156.f64[0] = v155.f64[1];
      v153.f64[0] = v158.f64[1];
      _D0 = _Q28.i64[1];
      __asm { FMLA            D2, D0, V28.D[1] }
      v235 = vmlad_n_f64(_Q2.f64[0], v158.f64[0], v158.f64[0]);
      if (v235 >= 0.0000002635)
      {
        v150 = sqrt(v235);
        v300 = v158.f64[0];
        v302 = v157;
        v298 = v155;
        v299 = v156;
        v296 = _Q28.i64[0];
        v297 = v153;
        v295 = v235;
        v152 = __sincos_stret(v150);
        cosval = v152.__cosval;
        _Q28.i64[0] = v296;
        v153 = v297;
        v155 = v298;
        v156 = v299;
        v158.f64[0] = v300;
        v157 = v302;
        v159 = v152.__sinval / v150;
        v160.f64[0] = 1.0 / v295 * (1.0 - v152.__cosval);
        v161.f64[0] = 1.0 / v295 * (1.0 - v152.__sinval / v150);
      }
      else
      {
        v160.f64[0] = 0.5 - v235 * (v235 / -720.0 + 0.0416666667);
        v161.f64[0] = 0.166666667 - v235 * (v235 / -5040.0 + 0.00833333333);
        v159 = v221 - v235 * v161.f64[0];
        cosval = v221 - v235 * v160.f64[0];
      }
      v162.f64[0] = *(double *)_Q28.i64 * (*(double *)_Q28.i64 * v160.f64[0]) + cosval;
      v163 = v157.f64[0] * (v157.f64[0] * v160.f64[0]) + cosval;
      *(double *)&v164 = v158.f64[0] * (v158.f64[0] * v160.f64[0]) + cosval;
      v165 = v157.f64[0] * (*(double *)_Q28.i64 * v160.f64[0]);
      v166 = v158.f64[0] * (*(double *)_Q28.i64 * v160.f64[0]);
      v167.f64[0] = v165 - v158.f64[0] * v159;
      v162.f64[1] = v165 + v158.f64[0] * v159;
      v168.f64[1] = 0.0;
      v168.f64[0] = v166 - v157.f64[0] * v159;
      *(_QWORD *)&v169.f64[0] = _Q28.i64[0];
      v169.f64[1] = v157.f64[0];
      v170.f64[0] = v166 + v157.f64[0] * v159;
      v171 = v158.f64[0] * (v157.f64[0] * v160.f64[0]);
      v172 = *(double *)_Q28.i64 * v159;
      v167.f64[1] = v163;
      v173 = v171 - v172;
      v174.f64[1] = 0.0;
      v174.f64[0] = v171 + v172;
      v170.f64[1] = v173;
      v175 = (float64x2_t)v164;
      v176.f64[0] = v157.f64[0];
      v176.f64[1] = v158.f64[0];
      v177.f64[0] = v156.f64[0];
      v177.f64[1] = v153.f64[0];
      *(_QWORD *)&v158.f64[1] = _Q28.i64[0];
      v178.f64[0] = v155.f64[0];
      v178.f64[1] = v156.f64[0];
      v179 = vsubq_f64(vmulq_f64(v176, v177), vmulq_f64(v158, v178));
      v178.f64[0] = v153.f64[0];
      v178.f64[1] = v155.f64[0];
      v180 = vsubq_f64(vmulq_f64(v169, v155), vmulq_f64(v157, v153));
      v181 = vmulq_n_f64(v179, v160.f64[0]);
      v182 = vmulq_f64(v180, v160);
      v183 = vaddq_f64(v178, v181);
      v184 = (float64x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v180, 8uLL);
      v180.f64[1] = v179.f64[0];
      v185 = vaddq_f64(v183, vmulq_n_f64(vsubq_f64(vmulq_f64(v176, v180), vmulq_f64(v158, v184)), v161.f64[0]));
      *(_QWORD *)&v186 = *(_OWORD *)&vaddq_f64(vaddq_f64(v156, v182), vmulq_f64(vsubq_f64(vmulq_laneq_f64(v169, v179, 1), vmulq_f64(v157, v179)), v161));
      v187.f64[1] = 1.0;
      v187.f64[0] = v186;
      v188 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v162, v329), v324, v167), v318, v170), v307, v185);
      v189 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v168, v329), v324, v174), v318, v175), v307, v187);
      v190 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v162, v328), v321, v167), v317, v170), v306, v185);
      v191 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v168, v328), v321, v174), v317, v175), v306, v187);
      v192 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v162, v327), v320, v167), v315, v170), v305, v185);
      v193 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v168, v327), v320, v174), v315, v175), v305, v187);
      v194 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v162, v326), v312, v167), v311, v170), v304, v185);
      v195 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v168, v326), v312, v174), v311, v175), v304, v187);
      v196 = v88[1];
      v198 = v88[2];
      v197 = v88[3];
      v199 = vmlaq_laneq_f64(vmulq_n_f64(*v88, v188.f64[0]), v198, v188, 1);
      v200 = vmlaq_laneq_f64(vmulq_n_f64(v196, v188.f64[0]), v197, v188, 1);
      v201 = vmlaq_laneq_f64(vmulq_n_f64(*v88, v190.f64[0]), v198, v190, 1);
      v202 = vmlaq_laneq_f64(vmulq_n_f64(v196, v190.f64[0]), v197, v190, 1);
      v203 = vmlaq_laneq_f64(vmulq_n_f64(*v88, v192.f64[0]), v198, v192, 1);
      v204 = vmlaq_laneq_f64(vmulq_n_f64(v196, v192.f64[0]), v197, v192, 1);
      v205 = vmlaq_laneq_f64(vmulq_n_f64(*v88, v194.f64[0]), v198, v194, 1);
      v207 = v88[4];
      v206 = v88[5];
      v208 = vmlaq_laneq_f64(vmulq_n_f64(v196, v194.f64[0]), v197, v194, 1);
      v210 = v88[6];
      v209 = v88[7];
      *v88 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v207, v189.f64[0]), v210, v189, 1);
      v88[1] = vmlaq_laneq_f64(vmlaq_n_f64(v200, v206, v189.f64[0]), v209, v189, 1);
      v88[2] = vmlaq_laneq_f64(vmlaq_n_f64(v201, v207, v191.f64[0]), v210, v191, 1);
      v88[3] = vmlaq_laneq_f64(vmlaq_n_f64(v202, v206, v191.f64[0]), v209, v191, 1);
      v88[4] = vmlaq_laneq_f64(vmlaq_n_f64(v203, v207, v193.f64[0]), v210, v193, 1);
      v88[5] = vmlaq_laneq_f64(vmlaq_n_f64(v204, v206, v193.f64[0]), v209, v193, 1);
      v88[6] = vmlaq_laneq_f64(vmlaq_n_f64(v205, v207, v195.f64[0]), v210, v195, 1);
      v88[7] = vmlaq_laneq_f64(vmlaq_n_f64(v208, v206, v195.f64[0]), v209, v195, 1);
      v88 += 9;
      if (v88 == v66)
        goto LABEL_15;
    }
  }
LABEL_43:
  if (v3 != v2)
  {
    v236 = *result;
    v237 = result[1];
    if (v237 != *result)
    {
      v238 = 0x8E38E38E38E38E39 * (v237 - *result);
      do
      {
        v239 = v238 >> 1;
        v240 = &v236[9 * (v238 >> 1)];
        v241 = v240[8].f64[0];
        v242 = v240 + 9;
        v238 += ~(v238 >> 1);
        if (v241 < v2[-1].f64[0])
          v236 = v242;
        else
          v238 = v239;
      }
      while (v238);
    }
    if (v237 != v236)
    {
      v244 = v2[-9];
      v243 = v2[-8];
      v246 = v2[-7];
      v245 = v2[-6];
      v248 = v2[-5];
      v247 = v2[-4];
      v250 = v2[-3];
      v249 = v2[-2];
      v251.f64[0] = v236[1].f64[0];
      _Q17 = v236[2];
      v253 = v236[4];
      v254 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v236, (int64x2_t)_Q17);
      _Q0 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v236, (int64x2_t)_Q17);
      v251.f64[1] = v236[3].f64[0];
      v256 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64((int64x2_t)v253, 1), 8uLL);
      v257 = vzip1q_s64((int64x2_t)v253, (int64x2_t)_Q0);
      _D25 = v236[7].f64[0];
      _Q26 = v236[6];
      v260 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v254, vnegq_f64(_Q26).f64[0]), _Q0, _Q26, 1), v251, _D25, 0);
      _Q0.f64[0] = v236[4].f64[1];
      *(_QWORD *)&v253.f64[0] = vdupq_laneq_s64(v257, 1).u64[0];
      __asm { FMLS            D17, D0, V26.D[1] }
      *(_QWORD *)&v253.f64[1] = v256.i64[0];
      _D27 = *(_QWORD *)&v236[5].f64[0];
      v256.i64[0] = v257.i64[0];
      __asm { FMLS            D17, D21, V25.D[0] }
      _Q17.f64[1] = 1.0;
      v262 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v254, v244.f64[0]), v253, v244, 1), v251, v243.f64[0]), v260, v243, 1);
      v263 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v257.u64[0], v244.f64[0]), (float64x2_t)v256.u64[1], v244, 1), (float64x2_t)_D27, v243.f64[0]), _Q17, v243, 1);
      v264 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v254, v246.f64[0]), v253, v246, 1), v251, v245.f64[0]), v260, v245, 1);
      v265 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v257.u64[0], v246.f64[0]), (float64x2_t)v256.u64[1], v246, 1), (float64x2_t)_D27, v245.f64[0]), _Q17, v245, 1);
      v266 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v254, v248.f64[0]), v253, v248, 1), v251, v247.f64[0]), v260, v247, 1);
      v267 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v257.u64[0], v248.f64[0]), (float64x2_t)v256.u64[1], v248, 1), (float64x2_t)_D27, v247.f64[0]), _Q17, v247, 1);
      v268 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v254, v250.f64[0]), v253, v250, 1), v251, v249.f64[0]), v260, v249, 1);
      v269 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v256.u64[0], v250.f64[0]), (float64x2_t)v256.u64[1], v250, 1), (float64x2_t)_D27, v249.f64[0]), _Q17, v249, 1);
      v270 = (float64x2_t)vdupq_laneq_s64(v262, 1);
      v271 = (float64x2_t)vdupq_lane_s64(v263.i64[0], 0);
      v272 = (float64x2_t)vdupq_laneq_s64(v263, 1);
      v273 = (float64x2_t)vdupq_laneq_s64(v264, 1);
      v274 = (float64x2_t)vdupq_lane_s64(v265.i64[0], 0);
      v275 = (float64x2_t)vdupq_laneq_s64(v265, 1);
      v276 = (float64x2_t)vdupq_laneq_s64(v266, 1);
      v277 = (float64x2_t)vdupq_lane_s64(v267.i64[0], 0);
      v278 = (float64x2_t)vdupq_laneq_s64(v267, 1);
      v279 = (float64x2_t)vdupq_laneq_s64(v268, 1);
      v280 = (float64x2_t)vdupq_lane_s64(v269.i64[0], 0);
      v281 = (float64x2_t)vdupq_laneq_s64(v269, 1);
      do
      {
        v282 = v236[1];
        v284 = v236[2];
        v283 = v236[3];
        v286 = v236[4];
        v285 = v236[5];
        v288 = v236[6];
        v287 = v236[7];
        v289 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v236, *(double *)v264.i64), v273, v284), v274, v286), v275, v288);
        v290 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v236, *(double *)v266.i64), v276, v284), v277, v286), v278, v288);
        v291 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v236, *(double *)v268.i64), v279, v284), v280, v286), v281, v288);
        *v236 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v236, *(double *)v262.i64), v270, v284), v271, v286), v272, v288);
        v236[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v282, *(double *)v262.i64), v270, v283), v271, v285), v272, v287);
        v236[2] = v289;
        v236[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v282, *(double *)v264.i64), v273, v283), v274, v285), v275, v287);
        v236[4] = v290;
        v236[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v282, *(double *)v266.i64), v276, v283), v277, v285), v278, v287);
        v236[6] = v291;
        v236[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v282, *(double *)v268.i64), v279, v283), v280, v285), v281, v287);
        v236 += 9;
      }
      while (v236 != v237);
    }
  }
  return result;
}

uint64_t *sub_20F81779C(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  float64x2_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  uint64_t v32;
  void *v33;

  *a1 = 0;
  a1[1] = 0xBFF0000000000000;
  *((_BYTE *)a1 + 16) = 0;
  *((_BYTE *)a1 + 160) = 0;
  v5 = *a2;
  *(_OWORD *)(a1 + 23) = a2[1];
  *(_OWORD *)(a1 + 21) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_OWORD *)(a1 + 31) = a2[5];
  *(_OWORD *)(a1 + 29) = v8;
  *(_OWORD *)(a1 + 27) = v7;
  *(_OWORD *)(a1 + 25) = v6;
  v9 = (float64x2_t)a2[6];
  v10 = a2[7];
  v11 = a2[8];
  a1[39] = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a1 + 35) = v10;
  *(_OWORD *)(a1 + 37) = v11;
  *(float64x2_t *)(a1 + 33) = v9;
  v9.f64[0] = *(float64_t *)(a3 + 16);
  _Q1 = *(float64x2_t *)a3;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v9.f64[0] * v9.f64[0]);
  *((float64x2_t *)a1 + 20) = vmulq_n_f64(*(float64x2_t *)a3, _Q2.f64[0]);
  a1[42] = *(_OWORD *)&vmulq_f64(v9, _Q2);
  v19 = *((_QWORD *)a2 + 1);
  v20 = *((_QWORD *)a2 + 2);
  v21 = *((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 4);
  v23 = *((_QWORD *)a2 + 5);
  v24 = *((_QWORD *)a2 + 6);
  v25 = *((_QWORD *)a2 + 7);
  v26 = *((_QWORD *)a2 + 8);
  v27 = operator new();
  *(_QWORD *)v27 = v19;
  *(_QWORD *)(v27 + 8) = v20;
  *(_QWORD *)(v27 + 16) = v21;
  *(_QWORD *)(v27 + 24) = v22;
  *(_QWORD *)(v27 + 32) = v23;
  *(_QWORD *)(v27 + 40) = v24;
  *(_QWORD *)(v27 + 48) = v25;
  *(_QWORD *)(v27 + 56) = v26;
  *(_BYTE *)(v27 + 64) = 1;
  v28.f64[0] = *(float64_t *)(a3 + 16);
  _Q1 = *(float64x2_t *)a3;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v28.f64[0] * v28.f64[0]);
  *(float64x2_t *)(v27 + 72) = vmulq_n_f64(*(float64x2_t *)a3, _Q2.f64[0]);
  *(_QWORD *)(v27 + 88) = *(_OWORD *)&vmulq_f64(v28, _Q2);
  *(_QWORD *)(v27 + 104) = 0;
  *(_QWORD *)(v27 + 112) = 0;
  *(_QWORD *)(v27 + 96) = 0;
  v32 = *a1;
  *a1 = v27;
  if (v32)
  {
    v33 = *(void **)(v32 + 96);
    if (v33)
    {
      *(_QWORD *)(v32 + 104) = v33;
      operator delete(v33);
    }
    MEMORY[0x212BC6398](v32, 0x1020C408C878A71);
  }
  return a1;
}

void sub_20F817918(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  void *v5;

  if (*((_BYTE *)v1 + 160))
  {
    v3 = (void *)v1[17];
    if (v3)
    {
      v1[18] = (uint64_t)v3;
      operator delete(v3);
    }
  }
  v4 = *v1;
  *v1 = 0;
  if (v4)
  {
    v5 = *(void **)(v4 + 96);
    if (v5)
    {
      *(_QWORD *)(v4 + 104) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v4, 0x1020C408C878A71);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F817970(uint64_t a1@<X0>, _QWORD *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, float64x2_t a6@<Q1>, double a7@<D2>, __n128 a8@<Q3>, double a9@<D4>, float64x2_t a10@<Q5>, __n128 a11@<Q6>)
{
  unint64_t v15;
  double v17;
  _QWORD *v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  unsigned int *v25;
  unsigned int v26;
  float64x2_t *v27;
  unint64_t v33;
  double v34;
  int *v35;
  double v37;
  double v40;
  int *v41;
  char *v42;
  float64x2_t v43;
  int v48;
  unint64_t v49;
  double v50;
  double v52;
  double v53;
  uint64_t *v54;
  unsigned __int8 v55;
  float64x2_t v56;
  char *v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  _BYTE *v79;
  char *v80;
  double v81;
  double v82;
  uint64_t v83;
  int v84;
  int v85;
  __int128 v86;
  char **v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  size_t v100;
  __darwin_time_t tv_sec;
  uint64_t v102;
  uint64_t i;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  float64x2_t v108;
  float64x2_t v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  int v123;
  double v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  __uint64_t v128[2];
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  _BYTE *v142;
  uint64_t v143;
  timespec v144;
  int v145;
  _BYTE v146[38];
  __int16 v147;
  double v148;
  __int16 v149;
  int v150;
  __int16 v151;
  _BYTE v152[12];
  char v153;
  char v154;
  void *v155;
  char v156;
  void *__p;
  char v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  if (*(double *)(a1 + 256) < a6.f64[0])
  {
    sub_20F8187AC(a4, a1, a5);
    return;
  }
  v15 = *(_QWORD *)&a6.f64[0];
  v142 = 0;
  v141 = 0;
  v143 = 0;
  v17 = 0.0;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v18 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PlaneBasedPointTrackOutlierRejection.cpp", 71, (uint64_t)"rpf_", 4, (uint64_t)"Plane fitting instance not valid.", 33, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v18 = *(_QWORD **)a1;
  }
  if (!sub_20EB7C5B0(v18, &v137, &v135, &v141, a2, v17, a6, a7, a8, a9, a10, a11))
    goto LABEL_67;
  if (v141 == v142)
  {
    v24 = 0.0;
  }
  else
  {
    v19.f64[0] = v136;
    v21 = v135;
    v24 = 0.0;
    *(_QWORD *)&v21.f64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    v25 = (unsigned int *)v141;
    do
    {
      v26 = *v25++;
      v27 = *(float64x2_t **)(*a2 + 8 * v26);
      v23.f64[0] = v27[1].f64[0];
      v23 = vsubq_f64(v23, v19);
      _Q3 = vsubq_f64(*v27, v21);
      _D6 = _Q3.f64[1];
      __asm { FMLA            D5, D6, V3.D[1] }
      v24 = v24 + sqrt(vmlad_n_f64(_D5, v23.f64[0], v23.f64[0]));
    }
    while (v25 != (unsigned int *)v142);
  }
  v33 = (v142 - (_BYTE *)v141) >> 2;
  v34 = (double)v33;
  v21.f64[0] = v24 / (double)v33;
  v109 = v21;
  if (v21.f64[0] > *(double *)(a1 + 240))
    goto LABEL_67;
  v35 = *a3;
  _Q3.f64[0] = *((float64_t *)*a3 + 7);
  _V16.D[1] = v135.f64[1];
  __asm { FMLA            D1, D3, V16.D[1] }
  _Q1.f64[0] = _Q1.f64[0] + *((double *)*a3 + 11) * v136;
  _Q3.f64[0] = *((float64_t *)*a3 + 15);
  *(_QWORD *)&v37 = *(_OWORD *)&vaddq_f64(_Q1, _Q3);
  _D4 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(*a3 + 8), *(double *)&v135), *(float64x2_t *)(*a3 + 40), v135, 1), *(float64x2_t *)(*a3 + 72), v136), *(float64x2_t *)(*a3 + 104)).f64[1];
  __asm { FMLA            D3, D4, V2.D[1] }
  v40 = sqrt(vmlad_n_f64(_D3, v37, v37));
  if (v40 < *(double *)(a1 + 248))
  {
LABEL_67:
    sub_20F8187AC(a4, a1, a5);
    goto LABEL_68;
  }
  v106 = a4;
  v107 = a2;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v41 = a3[1];
  if (v41 == v35)
  {
    v80 = 0;
    v42 = 0;
    v79 = 0;
    goto LABEL_73;
  }
  if ((0xF0F0F0F0F0F0F0F1 * (((char *)v41 - (char *)v35) >> 3)) >> 59)
    sub_20E867F44();
  v42 = (char *)operator new(0x1E1E1E1E1E1E1E20 * (((char *)v41 - (char *)v35) >> 3));
  v132 = v42;
  v133 = v42;
  v134 = &v42[0x1E1E1E1E1E1E1E20 * (((char *)v41 - (char *)v35) >> 3)];
  _Q0.f64[1] = v109.f64[1];
  _Q1.f64[0] = v109.f64[0];
  _Q1.f64[1] = v109.f64[0];
  v108 = _Q1;
  do
  {
    _Q1.f64[0] = *((float64_t *)v35 + 7);
    v43.f64[0] = v136;
    _Q5 = v135;
    __asm { FMLA            D0, D1, V5.D[1] }
    _Q1.f64[0] = _Q0.f64[0] + *((double *)v35 + 11) * v136;
    _Q0.f64[0] = *((float64_t *)v35 + 15);
    _Q1 = vaddq_f64(_Q1, _Q0);
    _ZF = _Q1.f64[0] == 0.0;
    if (_Q1.f64[0] > 0.0)
    {
      v48 = *v35;
      v114 = *(float64x2_t *)(v35 + 2);
      v116 = *(float64x2_t *)(v35 + 10);
      v117 = *(float64x2_t *)(v35 + 18);
      v49 = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
      _Q1.f64[0] = 1.0 / _Q1.f64[0];
      if (_ZF)
        _Q1.f64[0] = 1.0;
      v119 = _Q1.f64[0];
      v120 = *(float64x2_t *)(v35 + 26);
      _Q1.f64[0] = *(float64_t *)(a1 + 336);
      v121 = v135;
      v124 = v136;
      *(_QWORD *)&_Q5.f64[1] = v49;
      *(_QWORD *)&v50 = *(_OWORD *)&vmlaq_f64(v43, v109, _Q1);
      _D2 = *((_QWORD *)v35 + 7);
      v112 = *(float64x2_t *)(v35 + 10);
      v113 = *(float64x2_t *)(v35 + 2);
      v118 = vmlaq_f64(_Q5, v108, *(float64x2_t *)(a1 + 320));
      __asm { FMLA            D1, D2, V5.D[1] }
      v115 = v50;
      _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *((double *)v35 + 11), v50);
      v52 = vaddq_f64(_Q0, _Q1).f64[0];
      if (v52 == 0.0)
        v53 = 1.0;
      else
        v53 = 1.0 / v52;
      v110 = v53;
      v111 = *(float64x2_t *)(v35 + 18);
      v54 = sub_210219C18();
      v55 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v56 = v120;
      _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v114, v121.f64[0]), v116, v121, 1), v117, v124), v120);
      *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      *(_QWORD *)&v56.f64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
      v125 = vmulq_n_f64(_Q0, v119);
      _Q1 = vmlsq_lane_f64(v125, vaddq_f64(v56, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, v118.f64[0]), v112, v118, 1), v111, v115)), v110, 0);
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q0.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D0, V1.D[1] }
      v122 = _Q2;
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_48:
        if (os_signpost_enabled((os_log_t)*v54))
        {
          v145 = 67109888;
          *(_DWORD *)v146 = v48;
          *(_WORD *)&v146[4] = 2048;
          *(float64_t *)&v146[6] = v125.f64[0];
          *(_WORD *)&v146[14] = 2048;
          *(float64_t *)&v146[16] = v125.f64[1];
          *(_WORD *)&v146[24] = 2048;
          *(float64_t *)&v146[26] = v122.f64[0];
          _os_signpost_emit_unreliably_with_name_impl();
        }
        v67 = v133;
        if (v133 < v134)
        {
          *(_DWORD *)v133 = v48;
          *(float64x2_t *)(v67 + 8) = v125;
          v42 = v67 + 32;
          _Q0.f64[1] = v122.f64[1];
          *((_QWORD *)v67 + 3) = *(_QWORD *)&v122.f64[0];
        }
        else
        {
          v68 = (char *)v132;
          v69 = (v133 - (_BYTE *)v132) >> 5;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 59)
            sub_20E867F44();
          v71 = v134 - (_BYTE *)v132;
          if ((v134 - (_BYTE *)v132) >> 4 > v70)
            v70 = v71 >> 4;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFE0)
            v72 = 0x7FFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72 >> 59)
            sub_20E877A38();
          v73 = (char *)operator new(32 * v72);
          v74 = &v73[32 * v69];
          *(_DWORD *)v74 = v48;
          *(float64x2_t *)(v74 + 8) = v125;
          _Q0.f64[1] = v122.f64[1];
          *((_QWORD *)v74 + 3) = *(_QWORD *)&v122.f64[0];
          if (v67 != v68)
          {
            v75 = 0;
            do
            {
              v76 = &v74[v75];
              *((_DWORD *)v76 - 8) = *(_DWORD *)&v67[v75 - 32];
              _Q0 = *(float64x2_t *)&v67[v75 - 24];
              *(float64x2_t *)(v76 - 24) = _Q0;
              *((_QWORD *)v76 - 1) = *(_QWORD *)&v67[v75 - 8];
              v75 -= 32;
            }
            while (&v67[v75] != v68);
            v77 = &v73[32 * v72];
            v42 = v74 + 32;
            v132 = &v74[v75];
            v133 = v74 + 32;
            v134 = v77;
            if (!v68)
              goto LABEL_19;
            goto LABEL_64;
          }
          v78 = &v73[32 * v72];
          v42 = v74 + 32;
          v132 = &v73[32 * v69];
          v133 = v74 + 32;
          v134 = v78;
          if (v68)
LABEL_64:
            operator delete(v68);
        }
LABEL_19:
        v133 = v42;
        goto LABEL_20;
      }
      v145 = 67109888;
      *(_DWORD *)v146 = v48;
      *(_WORD *)&v146[4] = 2048;
      *(float64_t *)&v146[6] = v125.f64[0];
      *(_WORD *)&v146[14] = 2048;
      *(float64_t *)&v146[16] = v125.f64[1];
      *(_WORD *)&v146[24] = 2048;
      *(float64_t *)&v146[26] = _Q2.f64[0];
      v61 = (char *)_os_log_send_and_compose_impl();
      v62 = strlen(v61);
      v128[0] = 0;
      pthread_threadid_np(0, v128);
      v63 = v128[0];
      timespec_get((timespec *)v128, 1);
      sub_210219E20(&v145, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v54 + 1), (__int128 *)(v54 + 5), "PBPTOR:ProjPlane SourceID:%u ProjCentroidX:%lf ProjCentroidY:%lf range:%lf", 0x4AuLL, v61, v62, v63, v128);
      std::mutex::lock(&stru_254A5A410);
      v64 = qword_254A5A458;
      v65 = unk_254A5A460;
      while (v64 != v65)
      {
        v66 = *(_QWORD *)(v64 + 32);
        if (!v66)
          sub_20E86D37C();
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v66 + 48))(v66, &v145);
        v64 += 40;
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v158 < 0)
      {
        operator delete(__p);
        if ((v156 & 0x80000000) == 0)
        {
LABEL_35:
          if (!v154)
          {
LABEL_41:
            if (BYTE2(v150) && SBYTE1(v150) < 0)
              operator delete(*(void **)&v146[28]);
            if ((v146[27] & 0x80000000) != 0)
              operator delete(*(void **)&v146[4]);
            if (v61)
              free(v61);
            goto LABEL_48;
          }
LABEL_39:
          if (v153 < 0)
            operator delete(*(void **)&v152[4]);
          goto LABEL_41;
        }
      }
      else if ((v156 & 0x80000000) == 0)
      {
        goto LABEL_35;
      }
      operator delete(v155);
      if (!v154)
        goto LABEL_41;
      goto LABEL_39;
    }
LABEL_20:
    v35 += 34;
  }
  while (v35 != v41);
  v79 = v132;
  v80 = v134;
  v33 = (v142 - (_BYTE *)v141) >> 2;
  v34 = (double)v33;
LABEL_73:
  v81 = (double)(unint64_t)((uint64_t)(v107[1] - *v107) >> 3);
  *(float64x2_t *)v128 = v137;
  v129 = v138;
  v130 = v139;
  v82 = v34 / v81;
  v83 = *((_QWORD *)&v140 + 1);
  v131 = v140;
  v126 = v135;
  v127 = v136;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  if (*(_BYTE *)(a1 + 288) && (v33 >= *(_QWORD *)(a1 + 304) || v82 >= *(double *)(a1 + 296)))
  {
    *(double *)(a1 + 8) = a5;
    v85 = *(unsigned __int8 *)(a1 + 160);
    v86 = v138;
    *(float64x2_t *)(a1 + 16) = v137;
    *(_OWORD *)(a1 + 32) = v86;
    *(_OWORD *)(a1 + 48) = v139;
    *(_QWORD *)(a1 + 64) = v140;
    *(_QWORD *)(a1 + 72) = v83;
    *(float64x2_t *)(a1 + 80) = v135;
    *(double *)(a1 + 96) = v136;
    *(float64_t *)(a1 + 104) = v109.f64[0];
    *(double *)(a1 + 112) = v40;
    *(double *)(a1 + 120) = v82;
    v87 = (char **)(a1 + 136);
    *(_DWORD *)(a1 + 128) = v33;
    if (v85)
    {
      sub_20F818BC0((char **)(a1 + 136), (uint64_t)v79, (uint64_t)v42, (v42 - v79) >> 5);
      v88 = *v87;
    }
    else
    {
      *v87 = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      v89 = v42 - v79;
      if (v42 == v79)
      {
        v88 = 0;
      }
      else
      {
        if (v89 < 0)
          sub_20E867F44();
        v88 = (char *)operator new(v42 - v79);
        v90 = 0;
        *(_QWORD *)(a1 + 136) = v88;
        *(_QWORD *)(a1 + 144) = v88;
        *(_QWORD *)(a1 + 152) = &v88[32 * (v89 >> 5)];
        do
        {
          v91 = &v79[v90];
          v92 = &v88[v90];
          *(_DWORD *)v92 = *(_DWORD *)&v79[v90];
          *(_OWORD *)(v92 + 8) = *(_OWORD *)&v79[v90 + 8];
          *((_QWORD *)v92 + 3) = *(_QWORD *)&v79[v90 + 24];
          v90 += 32;
        }
        while (v91 + 32 != v42);
        *(_QWORD *)(a1 + 144) = &v88[v90];
      }
      *(_BYTE *)(a1 + 160) = 1;
    }
    *(_QWORD *)(a1 + 144) = v88;
    v84 = 1;
  }
  else
  {
    v84 = 0;
  }
  v93 = sub_210219C18();
  v94 = v142 - (_BYTE *)v141;
  v95 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v96 = v94 >> 2;
  v97 = atomic_load(&qword_254A5A450);
  v98 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
  if (v97)
  {
    v145 = 134219520;
    *(_QWORD *)v146 = v94 >> 2;
    *(_WORD *)&v146[8] = 2048;
    *(double *)&v146[10] = v82;
    *(_WORD *)&v146[18] = 2048;
    *(double *)&v146[20] = v40;
    *(_WORD *)&v146[28] = 2048;
    *(float64_t *)&v146[30] = v109.f64[0];
    v147 = 2048;
    v148 = a5;
    v149 = 1024;
    v123 = v84;
    v150 = v84;
    v151 = 2048;
    *(_QWORD *)v152 = v15;
    v99 = (char *)_os_log_send_and_compose_impl();
    v100 = strlen(v99);
    v144.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v144);
    tv_sec = v144.tv_sec;
    timespec_get(&v144, 1);
    sub_210219E20(&v145, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v93 + 1), (__int128 *)(v93 + 5), "PBPTOR:EP InlierSize:%lu InlierRatio:%lf CenToCamDist:%lf AvgPtsToCenDist:%lf Time:%lf ToBePersisted:%d ASpeed:%lf", 0x72uLL, v99, v100, tv_sec, &v144);
    std::mutex::lock(&stru_254A5A410);
    v102 = qword_254A5A458;
    for (i = unk_254A5A460; v102 != i; v102 += 40)
    {
      v104 = *(_QWORD *)(v102 + 32);
      if (!v104)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v104 + 48))(v104, &v145);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v158 < 0)
    {
      operator delete(__p);
      v84 = v123;
      v98 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
      if (v156 < 0)
        goto LABEL_97;
LABEL_94:
      if (v154)
      {
LABEL_98:
        if (v153 < 0)
          operator delete(*(void **)&v152[4]);
      }
    }
    else
    {
      v84 = v123;
      v98 = "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" + 2;
      if ((v156 & 0x80000000) == 0)
        goto LABEL_94;
LABEL_97:
      operator delete(v155);
      if (v154)
        goto LABEL_98;
    }
    if (BYTE2(v150) && SBYTE1(v150) < 0)
      operator delete(*(void **)&v146[28]);
    if ((v146[27] & 0x80000000) != 0)
      operator delete(*(void **)&v146[4]);
    if (v99)
      free(v99);
  }
  if (os_signpost_enabled((os_log_t)*v93))
  {
    v145 = *((_QWORD *)v98 + 311);
    *(_QWORD *)v146 = v96;
    *(_WORD *)&v146[8] = 2048;
    *(double *)&v146[10] = v82;
    *(_WORD *)&v146[18] = 2048;
    *(double *)&v146[20] = v40;
    *(_WORD *)&v146[28] = 2048;
    *(float64_t *)&v146[30] = v109.f64[0];
    v147 = 2048;
    v148 = a5;
    v149 = 1024;
    v150 = v84;
    v151 = 2048;
    *(_QWORD *)v152 = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v105 = v129;
  *(_OWORD *)v106 = *(_OWORD *)v128;
  *(_OWORD *)(v106 + 16) = v105;
  *(_OWORD *)(v106 + 32) = v130;
  *(_QWORD *)(v106 + 48) = v131;
  *(_QWORD *)(v106 + 56) = v83;
  *(float64x2_t *)(v106 + 64) = v126;
  *(double *)(v106 + 80) = v127;
  *(float64_t *)(v106 + 88) = v109.f64[0];
  *(double *)(v106 + 96) = v40;
  *(double *)(v106 + 104) = v82;
  *(_DWORD *)(v106 + 112) = v33;
  *(_QWORD *)(v106 + 120) = v79;
  *(_QWORD *)(v106 + 128) = v42;
  *(_QWORD *)(v106 + 136) = v80;
  *(_BYTE *)(v106 + 144) = 1;
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
LABEL_68:
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
}

void sub_20F81869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  uint64_t v59;
  void **v60;
  void *v61;
  void *v63;
  void *v64;

  v63 = *v60;
  if (*v60)
  {
    *(_QWORD *)(v59 + 144) = v63;
    operator delete(v63);
  }
  if (v61)
    operator delete(v61);
  if (__p)
  {
    operator delete(__p);
    v64 = (void *)STACK[0x208];
    if (!STACK[0x208])
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    v64 = (void *)STACK[0x208];
    if (!STACK[0x208])
      goto LABEL_7;
  }
  STACK[0x210] = (unint64_t)v64;
  operator delete(v64);
  _Unwind_Resume(a1);
}

uint64_t sub_20F8187AC(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  __uint64_t v26[2];

  v3 = result;
  if (!*(_BYTE *)(a2 + 160) || a3 - *(double *)(a2 + 8) >= *(double *)(a2 + 312))
  {
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 144) = 0;
    return result;
  }
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v14[0]) = 0;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v26[0] = 0;
    pthread_threadid_np(0, v26);
    v10 = v26[0];
    timespec_get((timespec *)v26, 1);
    sub_210219E20(v14, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "PBPTOR:PersistentPlaneReturned", 0x1EuLL, v8, v9, v10, v26);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v14);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v21)
        {
LABEL_17:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(v14[1]);
          if (v8)
            free(v8);
          goto LABEL_24;
        }
LABEL_15:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_17;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  result = os_signpost_enabled((os_log_t)*v5);
  if ((_DWORD)result)
  {
    LOWORD(v14[0]) = 0;
    result = _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 144) = 0;
  if (*(_BYTE *)(a2 + 160))
    return (uint64_t)sub_20F13D804((_OWORD *)v3, a2 + 16);
  return result;
}

void sub_20F818A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  void *v47;

  if (*(_BYTE *)(v45 + 144))
  {
    v47 = *(void **)(v45 + 120);
    if (v47)
    {
      *(_QWORD *)(v45 + 128) = v47;
      operator delete(v47);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20F818B48(uint64_t a1, float64x2_t *a2, uint64_t a3, double a4, float64x2_t a5, double a6, double a7, double a8, float64x2_t a9)
{
  double v17;
  double v18;

  a5.f64[0] = a2[1].f64[0];
  _Q0 = *a2;
  _D2 = *(_QWORD *)(a3 + 40);
  __asm { FMLA            D3, D2, V0.D[1] }
  if (vabdd_f64(_D3 + a5.f64[0] * *(double *)(a3 + 48), *(double *)(a3 + 56)) > *(double *)(a1 + 264))
    return 0;
  a9.f64[0] = *(float64_t *)(a3 + 80);
  v17 = *(double *)(a3 + 88) * *(double *)(a1 + 272);
  *(_QWORD *)&v18 = *(_OWORD *)&vsubq_f64(a5, a9);
  *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  _D4 = vsubq_f64(_Q0, *(float64x2_t *)(a3 + 64)).f64[1];
  __asm { FMLA            D2, D4, V0.D[1] }
  return vmlad_n_f64(_D2, v18, v18) <= v17 * v17;
}

char *sub_20F818BC0(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = (v17 - result) >> 5;
    if (v18 >= __sz)
    {
      v22 = result;
      if (a2 != a3)
      {
        v23 = result;
        do
        {
          *(_DWORD *)v23 = *(_DWORD *)v6;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v6 + 8);
          *((_QWORD *)v23 + 3) = *(_QWORD *)(v6 + 24);
          v22 += 32;
          v6 += 32;
          v23 += 32;
        }
        while (v6 != a3);
      }
      *v16 = v22;
    }
    else
    {
      v19 = a2 + 32 * v18;
      if (v15 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *(_OWORD *)(result + 8) = *(_OWORD *)(v6 + 8);
          *((_QWORD *)result + 3) = *(_QWORD *)(v6 + 24);
          v6 += 32;
          result += 32;
        }
        while (v6 != v19);
        result = *v16;
      }
      v20 = result;
      if (v19 != a3)
      {
        v20 = result;
        v21 = result;
        do
        {
          *(_DWORD *)v21 = *(_DWORD *)v19;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v21 + 3) = *(_QWORD *)(v19 + 24);
          v20 += 32;
          v19 += 32;
          v21 += 32;
        }
        while (v19 != a3);
      }
      *v16 = v20;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_26;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_26:
      sub_20E867F44();
    v13 = 32 * v12;
    result = (char *)operator new(32 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_DWORD *)v14 = *(_DWORD *)v6;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + 8);
        *((_QWORD *)v14 + 3) = *(_QWORD *)(v6 + 24);
        v14 += 32;
        v6 += 32;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

double sub_20F818DB8(_QWORD *a1, unint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double result;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  __int128 v25;

  v3 = (void *)*a1;
  v2 = (void *)a1[1];
  if (0xEBE8AB1946A49E23 * (((uint64_t)v2 - *a1) >> 3) != a2)
  {
    if (a2)
    {
      v24 = 0;
      v25 = 0uLL;
      sub_20F821F08((void **)&v24, a2);
      v6 = v24;
      v7 = a1[5];
      if (v7 >= a2)
        v8 = a2;
      else
        v8 = a1[5];
      if (v7 <= a2)
      {
        if (v7)
        {
          v16 = 0;
          v17 = v24;
          do
          {
            sub_20F13D1BC((uint64_t)v17, *a1 + 3160 * ((v16 + a1[3]) % (0xEBE8AB1946A49E23 * ((uint64_t)(a1[1] - *a1) >> 3))));
            ++v16;
            v17 += 3160;
          }
          while (v16 != a1[5]);
        }
      }
      else
      {
        v9 = 1;
        v10 = v24;
        do
        {
          do
          {
            v11 = v9;
            sub_20F13D1BC((uint64_t)v10, *a1 + 3160 * ((v9 + a1[3] - 1) % (0xEBE8AB1946A49E23 * ((uint64_t)(a1[1] - *a1) >> 3))));
            v10 += 3160;
            v9 = v11 + 1;
          }
          while (v8 != v11);
        }
        while (v11 == a1[5]);
      }
      v18 = (void *)*a1;
      if (*a1)
      {
        v19 = (void *)a1[1];
        v20 = (void *)*a1;
        if (v19 != v18)
        {
          v21 = (uint64_t)v19 - 2736;
          do
          {
            if (*(_BYTE *)(v21 + 72))
            {
              v23 = *(void **)v21;
              if (*(_QWORD *)v21)
              {
                *(_QWORD *)(v21 + 8) = v23;
                operator delete(v23);
              }
            }
            v22 = (void *)(v21 - 424);
            v21 -= 3160;
          }
          while (v22 != v18);
          v20 = (void *)*a1;
        }
        a1[1] = v18;
        operator delete(v20);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *a1 = v6;
      result = *(double *)&v25;
      *(_OWORD *)(a1 + 1) = v25;
      a1[3] = 0;
      a1[4] = v8 % (0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)&result - (_QWORD)v6) >> 3));
      a1[5] = v8;
    }
    else
    {
      if (v2 != v3)
      {
        v12 = (uint64_t)v2 - 2736;
        do
        {
          if (*(_BYTE *)(v12 + 72))
          {
            v14 = *(void **)v12;
            if (*(_QWORD *)v12)
            {
              *(_QWORD *)(v12 + 8) = v14;
              operator delete(v14);
            }
          }
          v13 = (void *)(v12 - 424);
          v12 -= 3160;
        }
        while (v13 != v3);
      }
      a1[1] = v3;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20F819004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F819018((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20F819018(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 2736;
      do
      {
        if (*(_BYTE *)(v5 + 72))
        {
          v7 = *(void **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)(v5 + 8) = v7;
            operator delete(v7);
          }
        }
        v6 = (void *)(v5 - 424);
        v5 -= 3160;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F819098(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 3160))
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v2 = *(void **)(a1 + 424);
      if (v2)
      {
        *(_QWORD *)(a1 + 432) = v2;
        operator delete(v2);
      }
    }
  }
  return a1;
}

uint64_t sub_20F8190D8(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v13;
  char *v14;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v29;
  char *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  void *v81;
  char *v83;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 3160) = 0;
  v4 = (_QWORD *)(a1 + 3216);
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_QWORD *)(a1 + 3280) = 0;
  sub_20F818DB8((_QWORD *)(a1 + 3168), 2uLL);
  v5 = a2;
  sub_20F818DB8(v4, a2);
  v6 = *(char **)(a1 + 3264);
  if (0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(a1 + 3280) - (_QWORD)v6) >> 3) < v5)
  {
    v7 = *(_BYTE **)(a1 + 3272);
    v8 = (char *)operator new(3160 * v5);
    v9 = &v8[v7 - v6];
    if (v7 == v6)
    {
      *(_QWORD *)(a1 + 3264) = v9;
      *(_QWORD *)(a1 + 3272) = v9;
      *(_QWORD *)(a1 + 3280) = &v8[3160 * v5];
    }
    else
    {
      v83 = &v8[3160 * v5];
      v10 = 0;
      v11 = v7 - 6320;
      do
      {
        _X27 = &v11[v10];
        v13 = &v9[v10];
        v14 = &v7[v10];
        __asm { PRFM            #0, [X27] }
        *(_QWORD *)&v9[v10 - 3160] = *(_QWORD *)&v7[v10 - 3160];
        v20 = &v9[v10 - 3152];
        v21 = *(_OWORD *)&v11[v10 + 3168];
        v22 = *(_OWORD *)&v11[v10 + 3184];
        v23 = *(_OWORD *)&v11[v10 + 3216];
        *((_OWORD *)v20 + 2) = *(_OWORD *)&v11[v10 + 3200];
        *((_OWORD *)v20 + 3) = v23;
        *(_OWORD *)v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        v24 = *(_OWORD *)&v11[v10 + 3232];
        v25 = *(_OWORD *)&v11[v10 + 3248];
        v26 = *(_OWORD *)&v11[v10 + 3280];
        *((_OWORD *)v20 + 6) = *(_OWORD *)&v11[v10 + 3264];
        *((_OWORD *)v20 + 7) = v26;
        *((_OWORD *)v20 + 4) = v24;
        *((_OWORD *)v20 + 5) = v25;
        memcpy(&v9[v10 - 3024], &v11[v10 + 3296], 0x120uLL);
        *(v13 - 2736) = 0;
        *(v13 - 2664) = 0;
        __asm { PRFM            #0, [X27,#0x1F0] }
        if (v7[v10 - 2664])
        {
          _X10 = _X27 + 424;
          v29 = v14 - 2736;
          __asm { PRFM            #0, [X10] }
          *((_OWORD *)v13 - 171) = *((_OWORD *)v14 - 171);
          *((_QWORD *)v13 - 340) = *((_QWORD *)_X27 + 450);
          *((_QWORD *)v29 + 2) = 0;
          *(_OWORD *)v29 = 0u;
          v31 = v13 - 2712;
          v32 = *(_OWORD *)(_X27 + 3608);
          *((_QWORD *)v31 + 2) = *((_QWORD *)_X27 + 453);
          *(_OWORD *)v31 = v32;
          v33 = v13 - 2688;
          v34 = *((_OWORD *)_X27 + 227);
          *((_QWORD *)v33 + 2) = *((_QWORD *)_X27 + 456);
          *(_OWORD *)v33 = v34;
          *(v13 - 2664) = 1;
        }
        _X9 = _X27 + 3152;
        *(v13 - 2656) = 0;
        *(v13 - 8) = 0;
        __asm { PRFM            #0, [X9] }
        if (*(v14 - 8))
        {
          v37 = *(_OWORD *)&v11[v10 + 3664];
          *((_QWORD *)v13 - 330) = *(_QWORD *)&v11[v10 + 3680];
          *((_OWORD *)v13 - 166) = v37;
          v38 = (uint64_t)&v9[v10 - 2632];
          v39 = *(_OWORD *)&v11[v10 + 3688];
          *(_QWORD *)(v38 + 16) = *(_QWORD *)&v11[v10 + 3704];
          *(_OWORD *)v38 = v39;
          v40 = &v9[v10 - 2608];
          v41 = *(_OWORD *)&v11[v10 + 3728];
          *(_OWORD *)v40 = *(_OWORD *)&v11[v10 + 3712];
          *((_OWORD *)v40 + 1) = v41;
          v42 = (uint64_t)&v9[v10 - 2576];
          v43 = *(_OWORD *)&v11[v10 + 3776];
          v44 = *(_OWORD *)&v11[v10 + 3792];
          v45 = *(_OWORD *)&v11[v10 + 3760];
          *(_QWORD *)(v42 + 64) = *(_QWORD *)&v11[v10 + 3808];
          *(_OWORD *)(v42 + 32) = v43;
          *(_OWORD *)(v42 + 48) = v44;
          *(_OWORD *)(v42 + 16) = v45;
          *(_OWORD *)v42 = *(_OWORD *)&v11[v10 + 3744];
          v46 = (uint64_t)&v9[v10 - 2504];
          v48 = *(_OWORD *)&v11[v10 + 3848];
          v47 = *(_OWORD *)&v11[v10 + 3864];
          v49 = *(_OWORD *)&v11[v10 + 3832];
          *(_QWORD *)(v46 + 64) = *(_QWORD *)&v11[v10 + 3880];
          *(_OWORD *)(v46 + 32) = v48;
          *(_OWORD *)(v46 + 48) = v47;
          *(_OWORD *)(v46 + 16) = v49;
          *(_OWORD *)v46 = *(_OWORD *)&v11[v10 + 3816];
          v50 = (uint64_t)&v9[v10 - 2432];
          *(_OWORD *)v50 = *(_OWORD *)&v11[v10 + 3888];
          v51 = *(_OWORD *)&v11[v10 + 3904];
          v52 = *(_OWORD *)&v11[v10 + 3920];
          v53 = *(_OWORD *)&v11[v10 + 3936];
          *(_QWORD *)(v50 + 64) = *(_QWORD *)&v11[v10 + 3952];
          *(_OWORD *)(v50 + 32) = v52;
          *(_OWORD *)(v50 + 48) = v53;
          *(_OWORD *)(v50 + 16) = v51;
          v54 = (uint64_t)&v9[v10 - 2360];
          *(_OWORD *)v54 = *(_OWORD *)&v11[v10 + 3960];
          v55 = *(_OWORD *)&v11[v10 + 3976];
          v56 = *(_OWORD *)&v11[v10 + 3992];
          v57 = *(_OWORD *)&v11[v10 + 4008];
          *(_QWORD *)(v54 + 64) = *(_QWORD *)&v11[v10 + 4024];
          *(_OWORD *)(v54 + 32) = v56;
          *(_OWORD *)(v54 + 48) = v57;
          *(_OWORD *)(v54 + 16) = v55;
          v58 = (uint64_t)&v9[v10 - 2288];
          *(_OWORD *)v58 = *(_OWORD *)&v11[v10 + 4032];
          v59 = *(_OWORD *)&v11[v10 + 4048];
          v60 = *(_OWORD *)&v11[v10 + 4064];
          v61 = *(_OWORD *)&v11[v10 + 4080];
          *(_QWORD *)(v58 + 64) = *(_QWORD *)&v11[v10 + 4096];
          *(_OWORD *)(v58 + 32) = v60;
          *(_OWORD *)(v58 + 48) = v61;
          *(_OWORD *)(v58 + 16) = v59;
          v62 = (uint64_t)&v9[v10 - 2216];
          *(_OWORD *)v62 = *(_OWORD *)&v11[v10 + 4104];
          v63 = *(_OWORD *)&v11[v10 + 4120];
          v64 = *(_OWORD *)&v11[v10 + 4136];
          v65 = *(_OWORD *)&v11[v10 + 4152];
          *(_QWORD *)(v62 + 64) = *(_QWORD *)&v11[v10 + 4168];
          *(_OWORD *)(v62 + 32) = v64;
          *(_OWORD *)(v62 + 48) = v65;
          *(_OWORD *)(v62 + 16) = v63;
          v66 = (uint64_t)&v9[v10 - 2144];
          *(_OWORD *)v66 = *(_OWORD *)&v11[v10 + 4176];
          v67 = *(_OWORD *)&v11[v10 + 4192];
          v68 = *(_OWORD *)&v11[v10 + 4208];
          v69 = *(_OWORD *)&v11[v10 + 4224];
          *(_QWORD *)(v66 + 64) = *(_QWORD *)&v11[v10 + 4240];
          *(_OWORD *)(v66 + 32) = v68;
          *(_OWORD *)(v66 + 48) = v69;
          *(_OWORD *)(v66 + 16) = v67;
          v70 = (uint64_t)&v9[v10 - 2072];
          *(_OWORD *)v70 = *(_OWORD *)&v11[v10 + 4248];
          v71 = *(_OWORD *)&v11[v10 + 4264];
          v72 = *(_OWORD *)&v11[v10 + 4280];
          v73 = *(_OWORD *)&v11[v10 + 4296];
          *(_QWORD *)(v70 + 64) = *(_QWORD *)&v11[v10 + 4312];
          *(_OWORD *)(v70 + 32) = v72;
          *(_OWORD *)(v70 + 48) = v73;
          *(_OWORD *)(v70 + 16) = v71;
          memcpy(&v9[v10 - 2000], &v11[v10 + 4320], 0x288uLL);
          v74 = (uint64_t)&v9[v10 - 1352];
          v75 = *(_OWORD *)&v11[v10 + 4968];
          *(_QWORD *)(v74 + 16) = *(_QWORD *)&v11[v10 + 4984];
          *(_OWORD *)v74 = v75;
          v76 = (uint64_t)&v9[v10 - 1328];
          v77 = *(_QWORD *)&v11[v10 + 5008];
          *(_OWORD *)v76 = *(_OWORD *)&v11[v10 + 4992];
          *(_QWORD *)(v76 + 16) = v77;
          memcpy(&v9[v10 - 1304], &v11[v10 + 5016], 0x288uLL);
          memcpy(&v9[v10 - 656], &v11[v10 + 5664], 0x288uLL);
          *(v13 - 8) = 1;
        }
        v10 -= 3160;
      }
      while (&v7[v10] != v6);
      v6 = *(char **)(a1 + 3264);
      v78 = *(char **)(a1 + 3272);
      *(_QWORD *)(a1 + 3264) = &v9[v10];
      *(_QWORD *)(a1 + 3272) = v9;
      *(_QWORD *)(a1 + 3280) = v83;
      if (v78 != v6)
      {
        v79 = v78 - 2736;
        do
        {
          if (v79[72])
          {
            v81 = *(void **)v79;
            if (*(_QWORD *)v79)
            {
              *((_QWORD *)v79 + 1) = v81;
              operator delete(v81);
            }
          }
          v80 = v79 - 424;
          v79 -= 3160;
        }
        while (v80 != v6);
      }
    }
    if (v6)
      operator delete(v6);
  }
  return a1;
}

void sub_20F819550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;

  v5 = *(_QWORD *)(v1 + 3264);
  if (v5)
  {
    v8 = *(_QWORD *)(v1 + 3272);
    v9 = *(void **)(v1 + 3264);
    if (v8 != v5)
    {
      v10 = v8 - 2736;
      do
      {
        if (*(_BYTE *)(v10 + 72))
        {
          v12 = *(void **)v10;
          if (*(_QWORD *)v10)
          {
            *(_QWORD *)(v10 + 8) = v12;
            operator delete(v12);
          }
        }
        v11 = v10 - 424;
        v10 -= 3160;
      }
      while (v11 != v5);
      v9 = *(void **)(v1 + 3264);
    }
    *(_QWORD *)(v1 + 3272) = v5;
    operator delete(v9);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v13 = *(void **)(v1 + 3224);
  v14 = v6;
  if (v13 != v6)
  {
    v15 = (uint64_t)v13 - 2736;
    do
    {
      if (*(_BYTE *)(v15 + 72))
      {
        v17 = *(void **)v15;
        if (*(_QWORD *)v15)
        {
          *(_QWORD *)(v15 + 8) = v17;
          operator delete(v17);
        }
      }
      v16 = (void *)(v15 - 424);
      v15 -= 3160;
    }
    while (v16 != v6);
    v14 = *v3;
  }
  *(_QWORD *)(v1 + 3224) = v6;
  operator delete(v14);
  v7 = *v2;
  if (!*v2)
  {
LABEL_4:
    if (!*(_BYTE *)(v1 + 3160))
      goto LABEL_33;
    goto LABEL_30;
  }
LABEL_22:
  v18 = *(void **)(v1 + 3176);
  v19 = v7;
  if (v18 != v7)
  {
    v20 = (uint64_t)v18 - 2736;
    do
    {
      if (*(_BYTE *)(v20 + 72))
      {
        v22 = *(void **)v20;
        if (*(_QWORD *)v20)
        {
          *(_QWORD *)(v20 + 8) = v22;
          operator delete(v22);
        }
      }
      v21 = (void *)(v20 - 424);
      v20 -= 3160;
    }
    while (v21 != v7);
    v19 = *v2;
  }
  *(_QWORD *)(v1 + 3176) = v7;
  operator delete(v19);
  if (!*(_BYTE *)(v1 + 3160))
LABEL_33:
    _Unwind_Resume(exception_object);
LABEL_30:
  if (*(_BYTE *)(v1 + 496))
  {
    v23 = *(void **)(v1 + 424);
    if (v23)
    {
      *(_QWORD *)(v1 + 432) = v23;
      operator delete(v23);
    }
  }
  goto LABEL_33;
}

double sub_20F8196A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  void **v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  int v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77[9];
  char v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _BYTE v125[648];
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  _BYTE v130[648];
  _BYTE v131[648];
  char v132;
  _QWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  void *__p;
  void *v161;
  char v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _BYTE v209[648];
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  _BYTE v214[648];
  _BYTE v215[648];
  char v216;
  char v217;
  uint64_t v218;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v218 = *MEMORY[0x24BDAC8D0];
  v8 = (void **)(v0 + 3168);
  v9 = *(char **)(v0 + 3176);
  v10 = *(char **)(v0 + 3168);
  v11 = 0xEBE8AB1946A49E23 * ((v9 - v10) >> 3);
  if (v9 != v10)
  {
    v12 = v9 - 2736;
    do
    {
      if (v12[72])
      {
        v14 = *(void **)v12;
        if (*(_QWORD *)v12)
        {
          *((_QWORD *)v12 + 1) = v14;
          operator delete(v14);
        }
      }
      v13 = v12 - 424;
      v12 -= 3160;
    }
    while (v13 != v10);
    v9 = (char *)*v8;
  }
  *(_QWORD *)(v7 + 3176) = v10;
  v15 = 0xEBE8AB1946A49E23 * ((v10 - v9) >> 3);
  if (v11 <= v15)
  {
    if (v11 < v15)
    {
      v16 = &v9[3160 * v11];
      if (v10 != v16)
      {
        v17 = v10 - 2736;
        do
        {
          if (v17[72])
          {
            v19 = *(void **)v17;
            if (*(_QWORD *)v17)
            {
              *((_QWORD *)v17 + 1) = v19;
              operator delete(v19);
            }
          }
          v18 = v17 - 424;
          v17 -= 3160;
        }
        while (v18 != v16);
      }
      *(_QWORD *)(v7 + 3176) = v16;
    }
  }
  else
  {
    sub_20F821F08(v8, v11 - v15);
  }
  *(_QWORD *)(v7 + 3200) = 0;
  *(_QWORD *)(v7 + 3192) = 0;
  *(_QWORD *)(v7 + 3208) = 0;
  if (v6 && *(_BYTE *)(v7 + 3160))
  {
    if (v4)
    {
      sub_20F819EBC(v7, v2);
      return result;
    }
    LODWORD(v50) = *(_DWORD *)(v7 + 4);
    HIDWORD(v50) = (_DWORD)v50;
    v55 = xmmword_2103B8340;
    v56 = unk_2103B8350;
    v57 = xmmword_2103B8360;
    v58 = xmmword_2103B8370;
    v51 = xmmword_2103B8300;
    v52 = xmmword_2103B8310;
    v53 = xmmword_2103B8320;
    v54 = xmmword_2103B8330;
    v78 = 0;
    LOBYTE(v79) = 0;
    v132 = 0;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    LOBYTE(v77[0]) = 0;
    v32 = *(_QWORD *)(v7 + 3168);
    v133 = v50;
    v138 = xmmword_2103B8340;
    v139 = unk_2103B8350;
    v140 = xmmword_2103B8360;
    v141 = xmmword_2103B8370;
    v134 = xmmword_2103B8300;
    v135 = xmmword_2103B8310;
    v136 = xmmword_2103B8320;
    v137 = xmmword_2103B8330;
    v150 = 0u;
    v151 = 0u;
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    v159 = 0u;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0u;
    v149 = 0u;
    sub_20F13F604((uint64_t)&__p, (uint64_t *)v77);
    LOBYTE(v163) = 0;
    v216 = 0;
    if (v132)
    {
      v163 = v79;
      v164 = v80;
      v165 = v81;
      v166 = v82;
      v167 = v83;
      v168 = v84;
      v171 = v87;
      v172 = v88;
      v169 = v85;
      v170 = v86;
      v173 = v89;
      v178 = v94;
      v176 = v92;
      v177 = v93;
      v174 = v90;
      v175 = v91;
      v181 = v97;
      v182 = v98;
      v179 = v95;
      v180 = v96;
      v183 = v99;
      v188 = v104;
      v186 = v102;
      v187 = v103;
      v184 = v100;
      v185 = v101;
      v191 = v107;
      v192 = v108;
      v189 = v105;
      v190 = v106;
      v193 = v109;
      v198 = v114;
      v196 = v112;
      v197 = v113;
      v194 = v110;
      v195 = v111;
      v201 = v117;
      v202 = v118;
      v199 = v115;
      v200 = v116;
      v203 = v119;
      v204 = v120;
      v208 = v124;
      v207 = v123;
      v206 = v122;
      v205 = v121;
      memcpy(v209, v125, sizeof(v209));
      v210 = v126;
      v211 = v127;
      v212 = v128;
      v213 = v129;
      memcpy(v214, v130, sizeof(v214));
      memcpy(v215, v131, sizeof(v215));
      v216 = 1;
    }
    sub_20F13D1BC(v32, (uint64_t)&v133);
    if (v162 && __p)
    {
      v161 = __p;
      operator delete(__p);
    }
    v33 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - *(_QWORD *)(v7 + 3168)) >> 3);
    v34 = *(_QWORD *)(v7 + 3200) + 1;
    if (v34 >= v33)
      v35 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - *(_QWORD *)(v7 + 3168)) >> 3);
    else
      v35 = 0;
    *(_QWORD *)(v7 + 3200) = v34 - v35;
    v36 = *(_QWORD *)(v7 + 3208);
    if (v36 == v33)
    {
      v37 = *(_QWORD *)(v7 + 3192) + 1;
      if (v37 < v33)
        v33 = 0;
      *(_QWORD *)(v7 + 3192) = v37 - v33;
      if (!v78)
      {
LABEL_61:
        if (!*(_BYTE *)(v7 + 496))
          return result;
        v38 = *(_QWORD *)(v7 + 3200);
        if (v38)
        {
          v39 = (char *)*v8;
          v40 = (uint64_t)*v8 + 3160 * v38;
          v42 = *(unsigned __int8 *)(v40 - 8);
          v41 = (char *)(v40 - 8);
          if (v42)
          {
LABEL_65:
            if (!v38)
              v38 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - (_QWORD)v39) >> 3);
            v43 = &v39[3160 * v38];
            v44 = v43 - 2656;
            *((_OWORD *)v44 + 2) = 0u;
            *((_OWORD *)v44 + 3) = xmmword_2103B8380;
            v45 = v43 - 3160;
            *(_OWORD *)v44 = 0u;
            *((_OWORD *)v44 + 1) = 0u;
            *((_OWORD *)v44 + 4) = *(_OWORD *)algn_2103B8390;
            *((_OWORD *)v45 + 37) = 0u;
            *((_OWORD *)v45 + 38) = 0u;
            *((_OWORD *)v45 + 39) = 0u;
            *((_QWORD *)v45 + 80) = 0;
            *((_QWORD *)v45 + 73) = 0x3FF0000000000000;
            *((_QWORD *)v45 + 77) = 0x3FF0000000000000;
            *((_QWORD *)v45 + 81) = 0x3FF0000000000000;
            *((_OWORD *)v45 + 41) = 0u;
            *((_OWORD *)v45 + 42) = 0u;
            *((_OWORD *)v45 + 43) = 0u;
            *((_OWORD *)v45 + 44) = 0u;
            *((_OWORD *)v45 + 45) = 0u;
            *((_OWORD *)v45 + 46) = 0u;
            *((_OWORD *)v45 + 47) = 0u;
            *((_OWORD *)v45 + 48) = 0u;
            *((_OWORD *)v45 + 49) = 0u;
            *((_OWORD *)v45 + 50) = 0u;
            *((_OWORD *)v45 + 51) = 0u;
            *((_OWORD *)v45 + 52) = 0u;
            *((_OWORD *)v45 + 53) = 0u;
            *((_OWORD *)v45 + 54) = 0u;
            *((_OWORD *)v45 + 55) = 0u;
            *((_OWORD *)v45 + 56) = 0u;
            *((_OWORD *)v45 + 57) = 0u;
            *((_OWORD *)v45 + 58) = 0u;
            *((_OWORD *)v45 + 59) = 0u;
            *((_OWORD *)v45 + 60) = 0u;
            *((_OWORD *)v45 + 61) = 0u;
            *((_OWORD *)v45 + 62) = 0u;
            *((_OWORD *)v45 + 63) = 0u;
            *((_OWORD *)v45 + 64) = 0u;
            *((_OWORD *)v45 + 65) = 0u;
            *((_OWORD *)v45 + 66) = 0u;
            *((_OWORD *)v45 + 67) = 0u;
            *((_OWORD *)v45 + 68) = 0u;
            *((_OWORD *)v45 + 69) = 0u;
            *((_OWORD *)v45 + 70) = 0u;
            *((_OWORD *)v45 + 71) = 0u;
            *((_QWORD *)v45 + 144) = 0;
            v133 = 0;
            v50 = &v133;
            sub_20F29C68C((_QWORD *)v43 - 250, &v50);
            v46 = *(_OWORD *)(v7 + 448);
            *((_QWORD *)v44 + 165) = *(_QWORD *)(v7 + 464);
            *(_OWORD *)(v44 + 1304) = v46;
            v47 = *(_OWORD *)(v7 + 472);
            *((_QWORD *)v44 + 168) = *(_QWORD *)(v7 + 488);
            *((_OWORD *)v44 + 83) = v47;
            v50 = 0;
            v133 = &v50;
            sub_20F29C68C((_QWORD *)v44 + 169, &v133);
            *((_QWORD *)v44 + 169) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 179) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 189) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 199) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 209) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 219) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 229) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 239) = 0x3FF0000000000000;
            *((_QWORD *)v44 + 249) = 0x3FF0000000000000;
            v133 = 0;
            v50 = &v133;
            return sub_20F29C68C((_QWORD *)v44 + 250, &v50);
          }
        }
        else
        {
          v39 = *(char **)(v7 + 3168);
          v48 = &v39[8 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - (_QWORD)v39) >> 3)];
          v49 = *(v48 - 8);
          v41 = v48 - 8;
          if (v49)
            goto LABEL_65;
        }
        *v41 = 1;
        goto LABEL_65;
      }
    }
    else
    {
      *(_QWORD *)(v7 + 3208) = v36 + 1;
      if (!v78)
        goto LABEL_61;
    }
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    goto LABEL_61;
  }
  LOBYTE(v133) = 0;
  v217 = 0;
  sub_20F13CED8(v7, (uint64_t)&v133);
  if (v217 && v162 && __p)
  {
    v161 = __p;
    operator delete(__p);
  }
  v21 = *(_QWORD *)(v7 + 3224);
  v22 = *(_QWORD *)(v7 + 3216);
  v23 = 0xEBE8AB1946A49E23 * ((v21 - v22) >> 3);
  if (v21 != v22)
  {
    v24 = v21 - 2736;
    do
    {
      if (*(_BYTE *)(v24 + 72))
      {
        v26 = *(void **)v24;
        if (*(_QWORD *)v24)
        {
          *(_QWORD *)(v24 + 8) = v26;
          operator delete(v26);
        }
      }
      v25 = v24 - 424;
      v24 -= 3160;
    }
    while (v25 != v22);
    v21 = *(_QWORD *)(v7 + 3216);
  }
  *(_QWORD *)(v7 + 3224) = v22;
  v27 = 0xEBE8AB1946A49E23 * ((v22 - v21) >> 3);
  if (v23 <= v27)
  {
    if (v23 < v27)
    {
      v28 = v21 + 3160 * v23;
      if (v22 != v28)
      {
        v29 = v22 - 2736;
        do
        {
          if (*(_BYTE *)(v29 + 72))
          {
            v31 = *(void **)v29;
            if (*(_QWORD *)v29)
            {
              *(_QWORD *)(v29 + 8) = v31;
              operator delete(v31);
            }
          }
          v30 = v29 - 424;
          v29 -= 3160;
        }
        while (v30 != v28);
      }
      *(_QWORD *)(v7 + 3224) = v28;
    }
  }
  else
  {
    sub_20F821F08((void **)(v7 + 3216), v23 - v27);
  }
  *(_QWORD *)(v7 + 3248) = 0;
  *(_QWORD *)(v7 + 3240) = 0;
  *(_QWORD *)(v7 + 3256) = 0;
  return result;
}

void sub_20F819E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a71;

  if (a71)
  {
    if (__p)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F819EBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *__p;
  void *v52;
  char v53;
  char v54;
  char v55;
  _QWORD *v56;
  _QWORD *v57[3];

  v57[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 3160)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 258, (uint64_t)"last_relative_pose_and_cov_", 27, (uint64_t)"last_relative_pose_and_cov_ must exist", 38, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v29 = xmmword_2103B8340;
  v30 = unk_2103B8350;
  v31 = xmmword_2103B8360;
  v32 = xmmword_2103B8370;
  v25 = xmmword_2103B8300;
  v26 = xmmword_2103B8310;
  v27 = xmmword_2103B8320;
  v28 = xmmword_2103B8330;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  LOBYTE(__p) = 0;
  LODWORD(v24) = *(_DWORD *)a1;
  HIDWORD(v24) = v24;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v4 = (uint64_t *)(a1 + 3168);
  v33 = 0u;
  sub_20F8225B0((_QWORD *)(a1 + 3168), &v24);
  sub_20F8225B0((_QWORD *)(a1 + 3168), (uint64_t *)a1);
  if (!*(_BYTE *)(a1 + 496))
    goto LABEL_22;
  v5 = *(_QWORD *)(a1 + 3200);
  if (v5)
  {
    v6 = *v4;
    v7 = *v4 + 3160 * v5;
    v9 = *(unsigned __int8 *)(v7 - 8);
    v8 = (_BYTE *)(v7 - 8);
    if (v9)
      goto LABEL_7;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a1 + 3168);
  v20 = v6 + 8 * ((*(_QWORD *)(a1 + 3176) - v6) >> 3);
  v21 = *(unsigned __int8 *)(v20 - 8);
  v8 = (_BYTE *)(v20 - 8);
  if (!v21)
LABEL_6:
    *v8 = 1;
LABEL_7:
  if (!v5)
    v5 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 3176) - v6) >> 3);
  v10 = v6 + 3160 * v5;
  v11 = v10 - 2656;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = xmmword_2103B8380;
  v12 = v10 - 3160;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 64) = *(_OWORD *)algn_2103B8390;
  *(_OWORD *)(v12 + 592) = 0u;
  *(_OWORD *)(v12 + 608) = 0u;
  *(_OWORD *)(v12 + 624) = 0u;
  *(_QWORD *)(v12 + 640) = 0;
  *(_QWORD *)(v12 + 584) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 616) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 648) = 0x3FF0000000000000;
  *(_OWORD *)(v12 + 656) = 0u;
  *(_OWORD *)(v12 + 672) = 0u;
  *(_OWORD *)(v12 + 688) = 0u;
  *(_OWORD *)(v12 + 704) = 0u;
  *(_OWORD *)(v12 + 720) = 0u;
  *(_OWORD *)(v12 + 736) = 0u;
  *(_OWORD *)(v12 + 752) = 0u;
  *(_OWORD *)(v12 + 768) = 0u;
  *(_OWORD *)(v12 + 784) = 0u;
  *(_OWORD *)(v12 + 800) = 0u;
  *(_OWORD *)(v12 + 816) = 0u;
  *(_OWORD *)(v12 + 832) = 0u;
  *(_OWORD *)(v12 + 848) = 0u;
  *(_OWORD *)(v12 + 864) = 0u;
  *(_OWORD *)(v12 + 880) = 0u;
  *(_OWORD *)(v12 + 896) = 0u;
  *(_OWORD *)(v12 + 912) = 0u;
  *(_OWORD *)(v12 + 928) = 0u;
  *(_OWORD *)(v12 + 944) = 0u;
  *(_OWORD *)(v12 + 960) = 0u;
  *(_OWORD *)(v12 + 976) = 0u;
  *(_OWORD *)(v12 + 992) = 0u;
  *(_OWORD *)(v12 + 1008) = 0u;
  *(_OWORD *)(v12 + 1024) = 0u;
  *(_OWORD *)(v12 + 1040) = 0u;
  *(_OWORD *)(v12 + 1056) = 0u;
  *(_OWORD *)(v12 + 1072) = 0u;
  *(_OWORD *)(v12 + 1088) = 0u;
  *(_OWORD *)(v12 + 1104) = 0u;
  *(_OWORD *)(v12 + 1120) = 0u;
  *(_OWORD *)(v12 + 1136) = 0u;
  *(_QWORD *)(v12 + 1152) = 0;
  v56 = v57;
  v57[0] = 0;
  sub_20F29C68C((_QWORD *)(v10 - 2000), &v56);
  v13 = *(_OWORD *)(a1 + 448);
  *(_QWORD *)(v11 + 1320) = *(_QWORD *)(a1 + 464);
  *(_OWORD *)(v11 + 1304) = v13;
  v14 = *(_OWORD *)(a1 + 472);
  *(_QWORD *)(v11 + 1344) = *(_QWORD *)(a1 + 488);
  *(_OWORD *)(v11 + 1328) = v14;
  v56 = 0;
  v57[0] = &v56;
  sub_20F29C68C((_QWORD *)(v11 + 1352), v57);
  *(_QWORD *)(v11 + 1352) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1432) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1512) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1592) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1672) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1752) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1832) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1912) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 1992) = 0x3FF0000000000000;
  v56 = v57;
  v57[0] = 0;
  v15.f64[0] = sub_20F29C68C((_QWORD *)(v11 + 2000), &v56);
  v16 = *(_QWORD *)(a1 + 3200);
  if (!v16)
  {
    v17 = *(_QWORD *)(a1 + 3168) + 8 * ((uint64_t)(*(_QWORD *)(a1 + 3176) - *(_QWORD *)(a1 + 3168)) >> 3);
    if (*(_BYTE *)(v17 - 8))
      goto LABEL_11;
LABEL_17:
    sub_20E866B34();
  }
  v17 = *v4 + 3160 * v16;
  if (!*(_BYTE *)(v17 - 8))
    goto LABEL_17;
LABEL_11:
  sub_20F81DD10(a1, a2, v17 - 2656, v15);
  v18 = *(_QWORD *)(a1 + 3200);
  if (v18)
  {
    v19 = *v4 + 3160 * v18;
    if (!*(_BYTE *)(v19 - 2664))
      goto LABEL_22;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 3168) + 8 * ((uint64_t)(*(_QWORD *)(a1 + 3176) - *(_QWORD *)(a1 + 3168)) >> 3);
    if (!*(_BYTE *)(v19 - 2664))
      goto LABEL_22;
  }
  v22 = v19 - 2736;
  v23 = *(void **)(v19 - 2736);
  if (v23)
  {
    *(_QWORD *)(v19 - 2728) = v23;
    operator delete(v23);
  }
  *(_BYTE *)(v22 + 72) = 0;
LABEL_22:
  if (v53)
  {
    if (__p)
    {
      v52 = __p;
      operator delete(__p);
    }
  }
}

void sub_20F81A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a72;

  if (a72)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20F81A2C4(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v148;
  char *v149;
  _OWORD *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _OWORD *v162;
  char *v165;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  __int128 v173;
  uint64_t v174;
  __int128 v175;
  _OWORD *v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  void *v217;
  int v218;
  uint64_t v219;
  uint64_t i;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  int v231;
  char *v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  void *v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  double v250;
  float64x2_t v251;
  float64x2_t v253;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  _DWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  int v272;
  uint64_t v273;
  void **v274;
  _QWORD *v275;
  int v276;
  int v277;
  unint64_t *v278;
  _DWORD v279[2];
  _OWORD v280[8];
  _BYTE v281[288];
  void *v282;
  void *v283;
  char v284;
  char v285;
  char v286;
  uint64_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  _BYTE v296[288];
  void *v297[9];
  char v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  _BYTE v345[648];
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  _BYTE v350[648];
  _BYTE v351[648];
  char v352;
  uint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  void *__p;
  void *v381;
  char v382;
  char v383;
  char v384;

  v1 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v270 = v4;
  v6 = v5;
  v7 = (uint64_t)v1;
  v273 = v8;
  if (v1[401])
  {
    v9 = (void **)(v1 + 396);
    v10 = v1 + 399;
    v11 = *(_DWORD *)(v1[396] + 3160 * v1[399]);
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 43, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0)|| (v9 = (void **)(v7 + 3168), v10 = (_QWORD *)(v7 + 3192), v11 = *(_DWORD *)(*(_QWORD *)(v7 + 3168) + 3160 * *(_QWORD *)(v7 + 3192)), !*(_QWORD *)(v7 + 3208))&& (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 76, (uint64_t)"!accumulated_pos_and_cov_queue_.empty()", 39, (uint64_t)"Accumulated pose and cov cannot be empty", 40, (void (*)(void **))sub_21023DDB0)
          || !*(_QWORD *)(v7 + 3208)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 37, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  v272 = v3;
  v274 = v9;
  v271 = v10;
  if (v3)
  {
    v12 = (uint64_t)*v9 + 3160 * *v10;
  }
  else
  {
    v13 = *(_QWORD *)(v7 + 3200);
    if (v13)
    {
      v14 = *v9;
    }
    else
    {
      v14 = *(void **)(v7 + 3168);
      v13 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - (_QWORD)v14) >> 3);
    }
    v12 = (uint64_t)v14 + 3160 * v13 - 3160;
  }
  v287 = *(_QWORD *)v12;
  v15 = *(float64x2_t *)(v12 + 24);
  v16 = *(float64x2_t *)(v12 + 40);
  v17 = *(float64x2_t *)(v12 + 56);
  v288 = *(float64x2_t *)(v12 + 8);
  v291 = v17;
  v290 = v16;
  v289 = v15;
  v18 = *(float64x2_t *)(v12 + 88);
  v19 = *(float64x2_t *)(v12 + 104);
  v20 = *(float64x2_t *)(v12 + 120);
  v292 = *(float64x2_t *)(v12 + 72);
  v295 = v20;
  v294 = v19;
  v293 = v18;
  memcpy(v296, (const void *)(v12 + 136), sizeof(v296));
  sub_20F13F604((uint64_t)v297, (uint64_t *)(v12 + 424));
  LOBYTE(v299) = 0;
  v352 = 0;
  if (*(_BYTE *)(v12 + 3152))
  {
    v21 = *(_OWORD *)(v12 + 504);
    v300 = *(_QWORD *)(v12 + 520);
    v299 = v21;
    v22 = *(_OWORD *)(v12 + 528);
    v302 = *(_QWORD *)(v12 + 544);
    v301 = v22;
    v23 = *(_OWORD *)(v12 + 568);
    v303 = *(_OWORD *)(v12 + 552);
    v304 = v23;
    v305 = *(_OWORD *)(v12 + 584);
    v24 = *(_QWORD *)(v12 + 648);
    v25 = *(_OWORD *)(v12 + 632);
    v26 = *(_OWORD *)(v12 + 600);
    v307 = *(_OWORD *)(v12 + 616);
    v308 = v25;
    v306 = v26;
    v309 = v24;
    v310 = *(_OWORD *)(v12 + 656);
    v27 = *(_OWORD *)(v12 + 672);
    v28 = *(_OWORD *)(v12 + 688);
    v29 = *(_OWORD *)(v12 + 704);
    v314 = *(_QWORD *)(v12 + 720);
    v312 = v28;
    v313 = v29;
    v311 = v27;
    v315 = *(_OWORD *)(v12 + 728);
    v30 = *(_QWORD *)(v12 + 792);
    v31 = *(_OWORD *)(v12 + 744);
    v32 = *(_OWORD *)(v12 + 776);
    v317 = *(_OWORD *)(v12 + 760);
    v318 = v32;
    v316 = v31;
    v319 = v30;
    v320 = *(_OWORD *)(v12 + 800);
    v33 = *(_OWORD *)(v12 + 816);
    v34 = *(_OWORD *)(v12 + 832);
    v35 = *(_OWORD *)(v12 + 848);
    v324 = *(_QWORD *)(v12 + 864);
    v322 = v34;
    v323 = v35;
    v321 = v33;
    v325 = *(_OWORD *)(v12 + 872);
    v36 = *(_QWORD *)(v12 + 936);
    v37 = *(_OWORD *)(v12 + 888);
    v38 = *(_OWORD *)(v12 + 920);
    v327 = *(_OWORD *)(v12 + 904);
    v328 = v38;
    v326 = v37;
    v329 = v36;
    v330 = *(_OWORD *)(v12 + 944);
    v39 = *(_OWORD *)(v12 + 960);
    v40 = *(_OWORD *)(v12 + 976);
    v41 = *(_OWORD *)(v12 + 992);
    v334 = *(_QWORD *)(v12 + 1008);
    v332 = v40;
    v333 = v41;
    v331 = v39;
    v335 = *(_OWORD *)(v12 + 1016);
    v42 = *(_QWORD *)(v12 + 1080);
    v43 = *(_OWORD *)(v12 + 1032);
    v44 = *(_OWORD *)(v12 + 1064);
    v337 = *(_OWORD *)(v12 + 1048);
    v338 = v44;
    v336 = v43;
    v339 = v42;
    v340 = *(_OWORD *)(v12 + 1088);
    v45 = *(_OWORD *)(v12 + 1104);
    v46 = *(_OWORD *)(v12 + 1120);
    v47 = *(_OWORD *)(v12 + 1136);
    v344 = *(_QWORD *)(v12 + 1152);
    v343 = v47;
    v342 = v46;
    v341 = v45;
    memcpy(v345, (const void *)(v12 + 1160), sizeof(v345));
    v48 = *(_OWORD *)(v12 + 1808);
    v347 = *(_QWORD *)(v12 + 1824);
    v346 = v48;
    v49 = *(_QWORD *)(v12 + 1848);
    v348 = *(_OWORD *)(v12 + 1832);
    v349 = v49;
    memcpy(v350, (const void *)(v12 + 1856), sizeof(v350));
    memcpy(v351, (const void *)(v12 + 2504), sizeof(v351));
    v352 = 1;
  }
  if (v11 != (_DWORD)v287)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 83, (uint64_t)"prev_base_state_id == oldest_acc_pose_and_cov.state_id0", 55, (uint64_t)"Ensure the request is coming from the same base state ID", 56, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_150;
    }
    v11 = v287;
  }
  if (v6 - v11 > (v11 - v6)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 86, (uint64_t)"(new_base_state_id - oldest_acc_pose_and_cov.state_id0) <= (oldest_acc_pose_and_cov.state_id0 - new_base_state_id)", 114, (uint64_t)"Target state id is before oldest_acc_pose_and_cov.state_id0", 59, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v287) - v6 > (v6 - HIDWORD(v287))&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 89, (uint64_t)"(oldest_acc_pose_and_cov.state_id1 - new_base_state_id) <= (new_base_state_id - oldest_acc_pose_and_cov.state_id1)", 114, (uint64_t)"Target state id is after oldest_acc_pose_and_cov.state_id1", 58, (void (*)(void **))sub_21023DDB0))
  {
LABEL_150:
    abort();
  }
  v50 = *(_QWORD *)(v7 + 3272);
  v51 = *(_QWORD *)(v7 + 3264);
  if (v50 != v51)
  {
    v52 = v50 - 2736;
    do
    {
      if (*(_BYTE *)(v52 + 72))
      {
        v54 = *(void **)v52;
        if (*(_QWORD *)v52)
        {
          *(_QWORD *)(v52 + 8) = v54;
          operator delete(v54);
        }
      }
      v53 = v52 - 424;
      v52 -= 3160;
    }
    while (v53 != v51);
  }
  *(_QWORD *)(v7 + 3272) = v51;
  v55 = *(_QWORD *)(v7 + 3256);
  if (v55)
  {
    v56 = 0;
    v57 = 0;
    v278 = (unint64_t *)(v7 + 3280);
    v276 = v6;
    v275 = (_QWORD *)v7;
    do
    {
      v58 = *(_QWORD *)(v7 + 3216);
      v59 = (*(_QWORD *)(v7 + 3240) + v57) % (0xEBE8AB1946A49E23 * ((*(_QWORD *)(v7 + 3224) - v58) >> 3));
      v60 = (_DWORD *)(v58 + 3160 * v59);
      v56 |= *v60 == v6;
      if ((v56 & 1) == 0)
        goto LABEL_33;
      if (v51 < *v278)
      {
        *(_QWORD *)v51 = *(_QWORD *)v60;
        v61 = v58 + 3160 * v59;
        v62 = *(_OWORD *)(v61 + 8);
        v63 = *(_OWORD *)(v61 + 24);
        v64 = *(_OWORD *)(v61 + 40);
        *(_OWORD *)(v51 + 56) = *(_OWORD *)(v61 + 56);
        *(_OWORD *)(v51 + 40) = v64;
        *(_OWORD *)(v51 + 24) = v63;
        *(_OWORD *)(v51 + 8) = v62;
        v65 = *(_OWORD *)(v61 + 72);
        v66 = *(_OWORD *)(v61 + 88);
        v67 = *(_OWORD *)(v61 + 104);
        *(_OWORD *)(v51 + 120) = *(_OWORD *)(v61 + 120);
        *(_OWORD *)(v51 + 104) = v67;
        *(_OWORD *)(v51 + 88) = v66;
        *(_OWORD *)(v51 + 72) = v65;
        memcpy((void *)(v51 + 136), (const void *)(v61 + 136), 0x120uLL);
        sub_20F13F604(v51 + 424, (uint64_t *)(v61 + 424));
        *(_BYTE *)(v51 + 504) = 0;
        *(_BYTE *)(v51 + 3152) = 0;
        if (*(_BYTE *)(v61 + 3152))
        {
          v68 = v58 + 3160 * v59;
          v69 = *(_OWORD *)(v68 + 504);
          *(_QWORD *)(v51 + 520) = *(_QWORD *)(v68 + 520);
          *(_OWORD *)(v51 + 504) = v69;
          v70 = *(_OWORD *)(v68 + 528);
          *(_QWORD *)(v51 + 544) = *(_QWORD *)(v68 + 544);
          *(_OWORD *)(v51 + 528) = v70;
          v71 = *(_OWORD *)(v68 + 568);
          *(_OWORD *)(v51 + 552) = *(_OWORD *)(v68 + 552);
          *(_OWORD *)(v51 + 568) = v71;
          v73 = *(_OWORD *)(v68 + 616);
          v72 = *(_OWORD *)(v68 + 632);
          v74 = *(_OWORD *)(v68 + 600);
          *(_QWORD *)(v51 + 648) = *(_QWORD *)(v68 + 648);
          *(_OWORD *)(v51 + 616) = v73;
          *(_OWORD *)(v51 + 632) = v72;
          *(_OWORD *)(v51 + 600) = v74;
          *(_OWORD *)(v51 + 584) = *(_OWORD *)(v68 + 584);
          v76 = *(_OWORD *)(v68 + 688);
          v75 = *(_OWORD *)(v68 + 704);
          v77 = *(_OWORD *)(v68 + 672);
          *(_QWORD *)(v51 + 720) = *(_QWORD *)(v68 + 720);
          *(_OWORD *)(v51 + 688) = v76;
          *(_OWORD *)(v51 + 704) = v75;
          *(_OWORD *)(v51 + 672) = v77;
          *(_OWORD *)(v51 + 656) = *(_OWORD *)(v68 + 656);
          *(_OWORD *)(v51 + 728) = *(_OWORD *)(v68 + 728);
          v78 = *(_OWORD *)(v68 + 744);
          v79 = *(_OWORD *)(v68 + 760);
          v80 = *(_OWORD *)(v68 + 776);
          *(_QWORD *)(v51 + 792) = *(_QWORD *)(v68 + 792);
          *(_OWORD *)(v51 + 760) = v79;
          *(_OWORD *)(v51 + 776) = v80;
          *(_OWORD *)(v51 + 744) = v78;
          *(_OWORD *)(v51 + 800) = *(_OWORD *)(v68 + 800);
          v81 = *(_OWORD *)(v68 + 816);
          v82 = *(_OWORD *)(v68 + 832);
          v83 = *(_OWORD *)(v68 + 848);
          *(_QWORD *)(v51 + 864) = *(_QWORD *)(v68 + 864);
          *(_OWORD *)(v51 + 832) = v82;
          *(_OWORD *)(v51 + 848) = v83;
          *(_OWORD *)(v51 + 816) = v81;
          *(_OWORD *)(v51 + 872) = *(_OWORD *)(v68 + 872);
          v84 = *(_OWORD *)(v68 + 888);
          v85 = *(_OWORD *)(v68 + 904);
          v86 = *(_OWORD *)(v68 + 920);
          *(_QWORD *)(v51 + 936) = *(_QWORD *)(v68 + 936);
          *(_OWORD *)(v51 + 904) = v85;
          *(_OWORD *)(v51 + 920) = v86;
          *(_OWORD *)(v51 + 888) = v84;
          *(_OWORD *)(v51 + 944) = *(_OWORD *)(v68 + 944);
          v87 = *(_OWORD *)(v68 + 960);
          v88 = *(_OWORD *)(v68 + 976);
          v89 = *(_OWORD *)(v68 + 992);
          *(_QWORD *)(v51 + 1008) = *(_QWORD *)(v68 + 1008);
          *(_OWORD *)(v51 + 976) = v88;
          *(_OWORD *)(v51 + 992) = v89;
          *(_OWORD *)(v51 + 960) = v87;
          *(_OWORD *)(v51 + 1016) = *(_OWORD *)(v68 + 1016);
          v90 = *(_OWORD *)(v68 + 1032);
          v91 = *(_OWORD *)(v68 + 1048);
          v92 = *(_OWORD *)(v68 + 1064);
          *(_QWORD *)(v51 + 1080) = *(_QWORD *)(v68 + 1080);
          *(_OWORD *)(v51 + 1048) = v91;
          *(_OWORD *)(v51 + 1064) = v92;
          *(_OWORD *)(v51 + 1032) = v90;
          *(_OWORD *)(v51 + 1088) = *(_OWORD *)(v68 + 1088);
          v93 = *(_OWORD *)(v68 + 1104);
          v94 = *(_OWORD *)(v68 + 1120);
          v95 = *(_OWORD *)(v68 + 1136);
          *(_QWORD *)(v51 + 1152) = *(_QWORD *)(v68 + 1152);
          *(_OWORD *)(v51 + 1136) = v95;
          *(_OWORD *)(v51 + 1120) = v94;
          *(_OWORD *)(v51 + 1104) = v93;
          memcpy((void *)(v51 + 1160), (const void *)(v68 + 1160), 0x288uLL);
          v96 = *(_OWORD *)(v68 + 1808);
          *(_QWORD *)(v51 + 1824) = *(_QWORD *)(v68 + 1824);
          *(_OWORD *)(v51 + 1808) = v96;
          v97 = *(_QWORD *)(v68 + 1848);
          *(_OWORD *)(v51 + 1832) = *(_OWORD *)(v68 + 1832);
          *(_QWORD *)(v51 + 1848) = v97;
          memcpy((void *)(v51 + 1856), (const void *)(v68 + 1856), 0x288uLL);
          memcpy((void *)(v51 + 2504), (const void *)(v68 + 2504), 0x288uLL);
          *(_BYTE *)(v51 + 3152) = 1;
        }
        v51 += 3160;
        *(_QWORD *)(v7 + 3272) = v51;
        goto LABEL_32;
      }
      v98 = *(_QWORD *)(v7 + 3264);
      v99 = 0xEBE8AB1946A49E23 * ((uint64_t)(v51 - v98) >> 3);
      v100 = v99 + 1;
      if (v99 + 1 > 0x14BD3EDDA68FE0)
        sub_20E867F44();
      if (0xD7D156328D493C46 * ((uint64_t)(*v278 - v98) >> 3) > v100)
        v100 = 0xD7D156328D493C46 * ((uint64_t)(*v278 - v98) >> 3);
      if (0xEBE8AB1946A49E23 * ((uint64_t)(*v278 - v98) >> 3) >= 0xA5E9F6ED347F0)
        v101 = 0x14BD3EDDA68FE0;
      else
        v101 = v100;
      *((_QWORD *)&v355 + 1) = v278;
      v277 = v56;
      if (v101)
      {
        if (v101 > 0x14BD3EDDA68FE0)
          sub_20E877A38();
        v102 = (char *)operator new(3160 * v101);
      }
      else
      {
        v102 = 0;
      }
      v103 = &v102[3160 * v99];
      v353 = (uint64_t)v102;
      *(_QWORD *)&v354 = v103;
      *((_QWORD *)&v354 + 1) = v103;
      *(_QWORD *)&v355 = &v102[3160 * v101];
      *(_QWORD *)v103 = *(_QWORD *)v60;
      v104 = v58 + 3160 * v59;
      v105 = *(_OWORD *)(v104 + 8);
      v106 = *(_OWORD *)(v104 + 24);
      v107 = *(_OWORD *)(v104 + 40);
      *(_OWORD *)(v103 + 56) = *(_OWORD *)(v104 + 56);
      *(_OWORD *)(v103 + 40) = v107;
      *(_OWORD *)(v103 + 24) = v106;
      *(_OWORD *)(v103 + 8) = v105;
      v108 = *(_OWORD *)(v104 + 72);
      v109 = *(_OWORD *)(v104 + 88);
      v110 = *(_OWORD *)(v104 + 104);
      *(_OWORD *)(v103 + 120) = *(_OWORD *)(v104 + 120);
      *(_OWORD *)(v103 + 104) = v110;
      *(_OWORD *)(v103 + 88) = v109;
      *(_OWORD *)(v103 + 72) = v108;
      memcpy(v103 + 136, (const void *)(v104 + 136), 0x120uLL);
      sub_20F13F604((uint64_t)(v103 + 424), (uint64_t *)(v104 + 424));
      v103[504] = 0;
      v103[3152] = 0;
      if (*(_BYTE *)(v104 + 3152))
      {
        v111 = v58 + 3160 * v59;
        v112 = *(_OWORD *)(v111 + 504);
        *((_QWORD *)v103 + 65) = *(_QWORD *)(v111 + 520);
        *(_OWORD *)(v103 + 504) = v112;
        v113 = &v102[3160 * v99];
        v114 = *(_OWORD *)(v111 + 528);
        *((_QWORD *)v113 + 68) = *(_QWORD *)(v111 + 544);
        *((_OWORD *)v113 + 33) = v114;
        v115 = *(_OWORD *)(v111 + 568);
        *(_OWORD *)(v113 + 552) = *(_OWORD *)(v111 + 552);
        *(_OWORD *)(v113 + 568) = v115;
        v117 = *(_OWORD *)(v111 + 616);
        v116 = *(_OWORD *)(v111 + 632);
        v118 = *(_OWORD *)(v111 + 600);
        *((_QWORD *)v113 + 81) = *(_QWORD *)(v111 + 648);
        *(_OWORD *)(v113 + 616) = v117;
        *(_OWORD *)(v113 + 632) = v116;
        *(_OWORD *)(v113 + 600) = v118;
        *(_OWORD *)(v113 + 584) = *(_OWORD *)(v111 + 584);
        v120 = *(_OWORD *)(v111 + 688);
        v119 = *(_OWORD *)(v111 + 704);
        v121 = *(_OWORD *)(v111 + 672);
        *((_QWORD *)v113 + 90) = *(_QWORD *)(v111 + 720);
        *((_OWORD *)v113 + 43) = v120;
        *((_OWORD *)v113 + 44) = v119;
        *((_OWORD *)v113 + 42) = v121;
        *((_OWORD *)v113 + 41) = *(_OWORD *)(v111 + 656);
        *(_OWORD *)(v113 + 728) = *(_OWORD *)(v111 + 728);
        v122 = *(_OWORD *)(v111 + 744);
        v123 = *(_OWORD *)(v111 + 760);
        v124 = *(_OWORD *)(v111 + 776);
        *((_QWORD *)v113 + 99) = *(_QWORD *)(v111 + 792);
        *(_OWORD *)(v113 + 760) = v123;
        *(_OWORD *)(v113 + 776) = v124;
        *(_OWORD *)(v113 + 744) = v122;
        *((_OWORD *)v113 + 50) = *(_OWORD *)(v111 + 800);
        v125 = *(_OWORD *)(v111 + 816);
        v126 = *(_OWORD *)(v111 + 832);
        v127 = *(_OWORD *)(v111 + 848);
        *((_QWORD *)v113 + 108) = *(_QWORD *)(v111 + 864);
        *((_OWORD *)v113 + 52) = v126;
        *((_OWORD *)v113 + 53) = v127;
        *((_OWORD *)v113 + 51) = v125;
        *(_OWORD *)(v113 + 872) = *(_OWORD *)(v111 + 872);
        v128 = *(_OWORD *)(v111 + 888);
        v129 = *(_OWORD *)(v111 + 904);
        v130 = *(_OWORD *)(v111 + 920);
        *((_QWORD *)v113 + 117) = *(_QWORD *)(v111 + 936);
        *(_OWORD *)(v113 + 904) = v129;
        *(_OWORD *)(v113 + 920) = v130;
        *(_OWORD *)(v113 + 888) = v128;
        *((_OWORD *)v113 + 59) = *(_OWORD *)(v111 + 944);
        v131 = *(_OWORD *)(v111 + 960);
        v132 = *(_OWORD *)(v111 + 976);
        v133 = *(_OWORD *)(v111 + 992);
        *((_QWORD *)v113 + 126) = *(_QWORD *)(v111 + 1008);
        *((_OWORD *)v113 + 61) = v132;
        *((_OWORD *)v113 + 62) = v133;
        *((_OWORD *)v113 + 60) = v131;
        *(_OWORD *)(v113 + 1016) = *(_OWORD *)(v111 + 1016);
        v134 = *(_OWORD *)(v111 + 1032);
        v135 = *(_OWORD *)(v111 + 1048);
        v136 = *(_OWORD *)(v111 + 1064);
        *((_QWORD *)v113 + 135) = *(_QWORD *)(v111 + 1080);
        *(_OWORD *)(v113 + 1048) = v135;
        *(_OWORD *)(v113 + 1064) = v136;
        *(_OWORD *)(v113 + 1032) = v134;
        *((_OWORD *)v113 + 68) = *(_OWORD *)(v111 + 1088);
        v137 = *(_OWORD *)(v111 + 1104);
        v138 = *(_OWORD *)(v111 + 1120);
        v139 = *(_OWORD *)(v111 + 1136);
        *((_QWORD *)v113 + 144) = *(_QWORD *)(v111 + 1152);
        *((_OWORD *)v113 + 71) = v139;
        *((_OWORD *)v113 + 70) = v138;
        *((_OWORD *)v113 + 69) = v137;
        memcpy(v113 + 1160, (const void *)(v111 + 1160), 0x288uLL);
        v140 = *(_OWORD *)(v111 + 1808);
        *((_QWORD *)v113 + 228) = *(_QWORD *)(v111 + 1824);
        *((_OWORD *)v113 + 113) = v140;
        v141 = *(_QWORD *)(v111 + 1848);
        *(_OWORD *)(v113 + 1832) = *(_OWORD *)(v111 + 1832);
        *((_QWORD *)v113 + 231) = v141;
        memcpy(v113 + 1856, (const void *)(v111 + 1856), 0x288uLL);
        memcpy(v113 + 2504, (const void *)(v111 + 2504), 0x288uLL);
        v103[3152] = 1;
      }
      v142 = v354;
      v51 = *((_QWORD *)&v354 + 1) + 3160;
      v143 = *(char **)(v7 + 3272);
      v144 = *(char **)(v7 + 3264);
      if (v143 == v144)
      {
        *(_QWORD *)(v7 + 3264) = v354;
        *(_QWORD *)(v7 + 3272) = v51;
        *(_QWORD *)(v7 + 3280) = v355;
        v56 = v277;
        if (!v143)
          goto LABEL_32;
      }
      else
      {
        v145 = 0;
        v146 = v143 - 6320;
        do
        {
          _X28 = &v146[v145];
          v148 = v142 + v145;
          v149 = &v143[v145];
          __asm { PRFM            #0, [X28] }
          *(_QWORD *)(v142 + v145 - 3160) = *(_QWORD *)&v143[v145 - 3160];
          v155 = (_OWORD *)(v142 + v145 - 3152);
          v156 = *(_OWORD *)&v146[v145 + 3168];
          v157 = *(_OWORD *)&v146[v145 + 3184];
          v158 = *(_OWORD *)&v146[v145 + 3216];
          v155[2] = *(_OWORD *)&v146[v145 + 3200];
          v155[3] = v158;
          *v155 = v156;
          v155[1] = v157;
          v159 = *(_OWORD *)&v146[v145 + 3232];
          v160 = *(_OWORD *)&v146[v145 + 3248];
          v161 = *(_OWORD *)&v146[v145 + 3280];
          v155[6] = *(_OWORD *)&v146[v145 + 3264];
          v155[7] = v161;
          v155[4] = v159;
          v155[5] = v160;
          memcpy((void *)(v142 + v145 - 3024), &v146[v145 + 3296], 0x120uLL);
          v162 = (_OWORD *)(v148 - 2736);
          *(_BYTE *)(v148 - 2736) = 0;
          *(_BYTE *)(v148 - 2664) = 0;
          __asm { PRFM            #0, [X28,#0x1F0] }
          if (v143[v145 - 2664])
          {
            _X10 = _X28 + 424;
            v165 = v149 - 2736;
            *(_QWORD *)(v148 - 2720) = 0;
            *v162 = 0u;
            __asm { PRFM            #0, [X10] }
            *v162 = *((_OWORD *)v149 - 171);
            *(_QWORD *)(v148 - 2720) = *((_QWORD *)_X28 + 450);
            *((_QWORD *)v165 + 2) = 0;
            *(_OWORD *)v165 = 0u;
            v167 = v148 - 2712;
            v168 = *(_OWORD *)(_X28 + 3608);
            *(_QWORD *)(v167 + 16) = *((_QWORD *)_X28 + 453);
            *(_OWORD *)v167 = v168;
            v169 = v148 - 2688;
            v170 = *((_OWORD *)_X28 + 227);
            *(_QWORD *)(v169 + 16) = *((_QWORD *)_X28 + 456);
            *(_OWORD *)v169 = v170;
            *(_BYTE *)(v148 - 2664) = 1;
          }
          _X9 = _X28 + 3152;
          *(_BYTE *)(v148 - 2656) = 0;
          *(_BYTE *)(v148 - 8) = 0;
          __asm { PRFM            #0, [X9] }
          if (*(v149 - 8))
          {
            v173 = *(_OWORD *)&v146[v145 + 3664];
            *(_QWORD *)(v148 - 2640) = *(_QWORD *)&v146[v145 + 3680];
            *(_OWORD *)(v148 - 2656) = v173;
            v174 = v142 + v145 - 2632;
            v175 = *(_OWORD *)&v146[v145 + 3688];
            *(_QWORD *)(v174 + 16) = *(_QWORD *)&v146[v145 + 3704];
            *(_OWORD *)v174 = v175;
            v176 = (_OWORD *)(v142 + v145 - 2608);
            v177 = *(_OWORD *)&v146[v145 + 3728];
            *v176 = *(_OWORD *)&v146[v145 + 3712];
            v176[1] = v177;
            v178 = v142 + v145 - 2576;
            v179 = *(_OWORD *)&v146[v145 + 3776];
            v180 = *(_OWORD *)&v146[v145 + 3792];
            v181 = *(_OWORD *)&v146[v145 + 3760];
            *(_QWORD *)(v178 + 64) = *(_QWORD *)&v146[v145 + 3808];
            *(_OWORD *)(v178 + 32) = v179;
            *(_OWORD *)(v178 + 48) = v180;
            *(_OWORD *)(v178 + 16) = v181;
            *(_OWORD *)v178 = *(_OWORD *)&v146[v145 + 3744];
            v182 = v142 + v145 - 2504;
            v184 = *(_OWORD *)&v146[v145 + 3848];
            v183 = *(_OWORD *)&v146[v145 + 3864];
            v185 = *(_OWORD *)&v146[v145 + 3832];
            *(_QWORD *)(v182 + 64) = *(_QWORD *)&v146[v145 + 3880];
            *(_OWORD *)(v182 + 32) = v184;
            *(_OWORD *)(v182 + 48) = v183;
            *(_OWORD *)(v182 + 16) = v185;
            *(_OWORD *)v182 = *(_OWORD *)&v146[v145 + 3816];
            v186 = v142 + v145 - 2432;
            *(_OWORD *)v186 = *(_OWORD *)&v146[v145 + 3888];
            v187 = *(_OWORD *)&v146[v145 + 3904];
            v188 = *(_OWORD *)&v146[v145 + 3920];
            v189 = *(_OWORD *)&v146[v145 + 3936];
            *(_QWORD *)(v186 + 64) = *(_QWORD *)&v146[v145 + 3952];
            *(_OWORD *)(v186 + 32) = v188;
            *(_OWORD *)(v186 + 48) = v189;
            *(_OWORD *)(v186 + 16) = v187;
            v190 = v142 + v145 - 2360;
            *(_OWORD *)v190 = *(_OWORD *)&v146[v145 + 3960];
            v191 = *(_OWORD *)&v146[v145 + 3976];
            v192 = *(_OWORD *)&v146[v145 + 3992];
            v193 = *(_OWORD *)&v146[v145 + 4008];
            *(_QWORD *)(v190 + 64) = *(_QWORD *)&v146[v145 + 4024];
            *(_OWORD *)(v190 + 32) = v192;
            *(_OWORD *)(v190 + 48) = v193;
            *(_OWORD *)(v190 + 16) = v191;
            v194 = v142 + v145 - 2288;
            *(_OWORD *)v194 = *(_OWORD *)&v146[v145 + 4032];
            v195 = *(_OWORD *)&v146[v145 + 4048];
            v196 = *(_OWORD *)&v146[v145 + 4064];
            v197 = *(_OWORD *)&v146[v145 + 4080];
            *(_QWORD *)(v194 + 64) = *(_QWORD *)&v146[v145 + 4096];
            *(_OWORD *)(v194 + 32) = v196;
            *(_OWORD *)(v194 + 48) = v197;
            *(_OWORD *)(v194 + 16) = v195;
            v198 = v142 + v145 - 2216;
            *(_OWORD *)v198 = *(_OWORD *)&v146[v145 + 4104];
            v199 = *(_OWORD *)&v146[v145 + 4120];
            v200 = *(_OWORD *)&v146[v145 + 4136];
            v201 = *(_OWORD *)&v146[v145 + 4152];
            *(_QWORD *)(v198 + 64) = *(_QWORD *)&v146[v145 + 4168];
            *(_OWORD *)(v198 + 32) = v200;
            *(_OWORD *)(v198 + 48) = v201;
            *(_OWORD *)(v198 + 16) = v199;
            v202 = v142 + v145 - 2144;
            *(_OWORD *)v202 = *(_OWORD *)&v146[v145 + 4176];
            v203 = *(_OWORD *)&v146[v145 + 4192];
            v204 = *(_OWORD *)&v146[v145 + 4208];
            v205 = *(_OWORD *)&v146[v145 + 4224];
            *(_QWORD *)(v202 + 64) = *(_QWORD *)&v146[v145 + 4240];
            *(_OWORD *)(v202 + 32) = v204;
            *(_OWORD *)(v202 + 48) = v205;
            *(_OWORD *)(v202 + 16) = v203;
            v206 = v142 + v145 - 2072;
            *(_OWORD *)v206 = *(_OWORD *)&v146[v145 + 4248];
            v207 = *(_OWORD *)&v146[v145 + 4264];
            v208 = *(_OWORD *)&v146[v145 + 4280];
            v209 = *(_OWORD *)&v146[v145 + 4296];
            *(_QWORD *)(v206 + 64) = *(_QWORD *)&v146[v145 + 4312];
            *(_OWORD *)(v206 + 32) = v208;
            *(_OWORD *)(v206 + 48) = v209;
            *(_OWORD *)(v206 + 16) = v207;
            memcpy((void *)(v142 + v145 - 2000), &v146[v145 + 4320], 0x288uLL);
            v210 = v142 + v145 - 1352;
            v211 = *(_OWORD *)&v146[v145 + 4968];
            *(_QWORD *)(v210 + 16) = *(_QWORD *)&v146[v145 + 4984];
            *(_OWORD *)v210 = v211;
            v212 = v142 + v145 - 1328;
            v213 = *(_QWORD *)&v146[v145 + 5008];
            *(_OWORD *)v212 = *(_OWORD *)&v146[v145 + 4992];
            *(_QWORD *)(v212 + 16) = v213;
            memcpy((void *)(v142 + v145 - 1304), &v146[v145 + 5016], 0x288uLL);
            memcpy((void *)(v142 + v145 - 656), &v146[v145 + 5664], 0x288uLL);
            *(_BYTE *)(v148 - 8) = 1;
          }
          v145 -= 3160;
        }
        while (&v143[v145] != v144);
        v7 = (uint64_t)v275;
        v143 = (char *)v275[408];
        v214 = (char *)v275[409];
        v275[408] = v142 + v145;
        v275[409] = v51;
        v275[410] = v355;
        if (v214 == v143)
        {
          v6 = v276;
          v56 = v277;
        }
        else
        {
          v215 = v214 - 2736;
          v6 = v276;
          v56 = v277;
          do
          {
            if (v215[72])
            {
              v217 = *(void **)v215;
              if (*(_QWORD *)v215)
              {
                *((_QWORD *)v215 + 1) = v217;
                operator delete(v217);
              }
            }
            v216 = v215 - 424;
            v215 -= 3160;
          }
          while (v216 != v143);
        }
        if (!v143)
          goto LABEL_32;
      }
      operator delete(v143);
LABEL_32:
      *(_QWORD *)(v7 + 3272) = v51;
      v55 = *(_QWORD *)(v7 + 3256);
LABEL_33:
      ++v57;
    }
    while (v57 != v55);
  }
  if (*(_QWORD *)(v7 + 3264) != v51)
  {
    v218 = v272;
    sub_20F8196A0();
    v219 = *(_QWORD *)(v7 + 3264);
    for (i = *(_QWORD *)(v7 + 3272); v219 != i; v219 += 3160)
      sub_20F81BA20(v7);
    goto LABEL_134;
  }
  v221 = (uint64_t *)(v7 + 3216);
  v222 = *(_QWORD *)(v7 + 3248);
  v218 = v272;
  if (!v222)
  {
    v223 = *(_QWORD *)(v7 + 3216);
    v224 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(v7 + 3224) - v223) >> 3) - 1;
    if (*(_DWORD *)(v223 + 3160 * v224 + 4) == v6)
      goto LABEL_74;
LABEL_81:
    v231 = *(_DWORD *)(v223 + 3160 * *(_QWORD *)(v7 + 3240));
    if (v231 - v6 > (v6 - v231)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 131, (uint64_t)"(relative_pos_and_cov_queue_.front().state_id0 - new_base_state_id) <= (new_base_state_id - relative_pos_and_cov_queue_.front().state_id0)", 138, (uint64_t)"Target state id is not before relative_pos_and_cov_queue_.front().state_id0", 75, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_151;
    }
    v232 = *(char **)(v7 + 3176);
    v233 = *(char **)(v7 + 3168);
    v234 = 0xEBE8AB1946A49E23 * ((v232 - v233) >> 3);
    if (v232 != v233)
    {
      v235 = v232 - 2736;
      do
      {
        if (v235[72])
        {
          v237 = *(void **)v235;
          if (*(_QWORD *)v235)
          {
            *((_QWORD *)v235 + 1) = v237;
            operator delete(v237);
          }
        }
        v236 = v235 - 424;
        v235 -= 3160;
      }
      while (v236 != v233);
      v232 = (char *)*v274;
      v218 = v272;
    }
    *(_QWORD *)(v7 + 3176) = v233;
    v238 = 0xEBE8AB1946A49E23 * ((v233 - v232) >> 3);
    if (v234 <= v238)
    {
      v239 = v273;
      if (v234 < v238)
      {
        v241 = &v232[3160 * v234];
        if (v233 != v241)
        {
          v242 = v233 - 2736;
          do
          {
            if (v242[72])
            {
              v244 = *(void **)v242;
              if (*(_QWORD *)v242)
              {
                *((_QWORD *)v242 + 1) = v244;
                operator delete(v244);
              }
            }
            v243 = v242 - 424;
            v242 -= 3160;
          }
          while (v243 != v241);
        }
        *(_QWORD *)(v7 + 3176) = v241;
      }
    }
    else
    {
      sub_20F821F08(v274, v234 - v238);
      v239 = v273;
    }
    *v271 = 0;
    v271[1] = 0;
    v271[2] = 0;
    v284 = 0;
    v285 = 0;
    v286 = 0;
    memset(v281, 0, sizeof(v281));
    LOBYTE(v282) = 0;
    v279[0] = v6;
    v279[1] = HIDWORD(v287);
    _Q7.f64[0] = *(float64_t *)(v270 + 16);
    v250 = *(double *)(v270 + 48);
    v251 = *(float64x2_t *)(v270 + 32);
    _D2 = *(double *)(v270 + 80);
    v253 = *(float64x2_t *)(v270 + 64);
    _D16 = *(double *)(v270 + 112);
    _Q17 = *(float64x2_t *)(v270 + 96);
    v256 = vmulq_n_f64(v288, _Q7.f64[0]);
    v257 = vmulq_n_f64(v289, _Q7.f64[0]);
    _Q7.f64[1] = v250;
    v258 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v270, (int64x2_t)v251), vnegq_f64(_Q17).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v270, (int64x2_t)v251), _Q17, 1), _Q7, _D16, 0);
    _D19 = *(_QWORD *)(v270 + 72);
    __asm
    {
      FMLS            D7, D19, V17.D[1]
      FMLS            D7, D2, V16.D[0]
    }
    v260 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v288, *(double *)v270), v290, v251.f64[0]), v292, v253.f64[0]), (float64x2_t)0, v294);
    v261 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v288, *(float64x2_t *)v270, 1), v290, v251, 1), v292, v253, 1), (float64x2_t)0, v294);
    v262 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v289, *(float64x2_t *)v270, 1), v291, v251, 1), v293, v253, 1), (float64x2_t)0, v295);
    v280[1] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v289, *(double *)v270), v291, v251.f64[0]), v293, v253.f64[0]), (float64x2_t)0, v295);
    v280[0] = v260;
    v280[3] = v262;
    v280[2] = v261;
    v280[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v257, v291, v250), v293, _D2), (float64x2_t)0, v295);
    v280[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v256, v290, v250), v292, _D2), (float64x2_t)0, v294);
    v280[7] = vaddq_f64(v295, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v289, v258.f64[0]), v291, v258, 1), v293, _Q7.f64[0]));
    v280[6] = vaddq_f64(v294, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v288, v258.f64[0]), v290, v258, 1), v292, _Q7.f64[0]));
    sub_20EB70E00((uint64_t)v280);
    memcpy(v281, v296, sizeof(v281));
    sub_20F81D754(v7, (uint64_t)v279);
    sub_20F819EBC(v7, v239);
    v263 = *(_QWORD *)(v7 + 3248);
    if (v263)
    {
      v264 = *v221;
    }
    else
    {
      v264 = *(_QWORD *)(v7 + 3216);
      v263 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(v7 + 3224) - v264) >> 3);
    }
    sub_20F81D754(v7, v264 + 3160 * v263 - 3160);
    if (v218)
    {
      if (*(_DWORD *)v7 != HIDWORD(v287)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 167, (uint64_t)"last_relative_pose_and_cov_->state_id0 == oldest_acc_pose_and_cov.state_id1", 75, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v353 = -1;
      v358 = xmmword_2103B8340;
      v359 = unk_2103B8350;
      v360 = xmmword_2103B8360;
      v361 = xmmword_2103B8370;
      v354 = xmmword_2103B8300;
      v355 = xmmword_2103B8310;
      v356 = xmmword_2103B8320;
      v357 = xmmword_2103B8330;
      v382 = 0;
      v383 = 0;
      v384 = 0;
      v378 = 0u;
      v379 = 0u;
      v376 = 0u;
      v377 = 0u;
      v374 = 0u;
      v375 = 0u;
      v372 = 0u;
      v373 = 0u;
      v370 = 0u;
      v371 = 0u;
      LOBYTE(__p) = 0;
      v369 = 0u;
      v368 = 0u;
      v367 = 0u;
      v366 = 0u;
      v365 = 0u;
      v364 = 0u;
      v363 = 0u;
      v362 = 0u;
      v265 = *(_QWORD *)(v7 + 3248);
      if (v265)
      {
        v266 = *v221;
      }
      else
      {
        v266 = *(_QWORD *)(v7 + 3216);
        v265 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(v7 + 3224) - v266) >> 3);
      }
      sub_20F13D1BC(v266 + 3160 * v265 - 3160, (uint64_t)&v353);
      if (v382 && __p)
      {
        v381 = __p;
        operator delete(__p);
      }
      v267 = *(_QWORD *)(v7 + 3248);
      if (!v267)
        v267 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3224) - *(_QWORD *)(v7 + 3216)) >> 3);
      *(_QWORD *)(v7 + 3248) = v267 - 1;
      --*(_QWORD *)(v7 + 3256);
      if (!*(_BYTE *)(v7 + 3160))
        sub_20E866B34();
      sub_20F81BA20(v7);
    }
    if (v284 && v282)
    {
      v283 = v282;
      operator delete(v282);
    }
    goto LABEL_134;
  }
  v223 = *v221;
  v224 = v222 - 1;
  if (*(_DWORD *)(*v221 + 3160 * v224 + 4) != v6)
    goto LABEL_81;
LABEL_74:
  sub_20F81D754(v7, v223 + 3160 * v224);
  v225 = *(_QWORD *)(v7 + 3224);
  v226 = *(_QWORD *)(v7 + 3216);
  v227 = 0xEBE8AB1946A49E23 * ((v225 - v226) >> 3);
  if (v225 != v226)
  {
    v228 = v225 - 2736;
    do
    {
      if (*(_BYTE *)(v228 + 72))
      {
        v230 = *(void **)v228;
        if (*(_QWORD *)v228)
        {
          *(_QWORD *)(v228 + 8) = v230;
          operator delete(v230);
        }
      }
      v229 = v228 - 424;
      v228 -= 3160;
    }
    while (v229 != v226);
    v225 = *v221;
    v218 = v272;
  }
  *(_QWORD *)(v7 + 3224) = v226;
  v240 = 0xEBE8AB1946A49E23 * ((v226 - v225) >> 3);
  if (v227 <= v240)
  {
    if (v227 < v240)
    {
      v245 = v225 + 3160 * v227;
      if (v226 != v245)
      {
        v246 = v226 - 2736;
        do
        {
          if (*(_BYTE *)(v246 + 72))
          {
            v248 = *(void **)v246;
            if (*(_QWORD *)v246)
            {
              *(_QWORD *)(v246 + 8) = v248;
              operator delete(v248);
            }
          }
          v247 = v246 - 424;
          v246 -= 3160;
        }
        while (v247 != v245);
      }
      *(_QWORD *)(v7 + 3224) = v245;
    }
  }
  else
  {
    sub_20F821F08((void **)(v7 + 3216), v227 - v240);
  }
  *(_QWORD *)(v7 + 3248) = 0;
  *(_QWORD *)(v7 + 3240) = 0;
  *(_QWORD *)(v7 + 3256) = 0;
  if (!*(_BYTE *)(v7 + 3160))
    sub_20E866B34();
  sub_20F8225B0((_QWORD *)(v7 + 3216), (uint64_t *)v7);
  if (v218
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 120, (uint64_t)"!window_will_slide_in_next_iteration", 36, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_151;
  }
  sub_20F8196A0();
LABEL_134:
  if (!*(_QWORD *)(v7 + 3208)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 37, (uint64_t)"!this->accumulated_pos_and_cov_queue().empty()", 46, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_151;
  }
  if (!v218)
  {
    v268 = *(_QWORD *)(v7 + 3200);
    if (v268)
    {
      v269 = *v274;
    }
    else
    {
      v269 = *(_DWORD **)(v7 + 3168);
      v268 = 0xEBE8AB1946A49E23 * ((uint64_t)(*(_QWORD *)(v7 + 3176) - (_QWORD)v269) >> 3);
    }
    if (v269[790 * v268 - 790] == v6)
      goto LABEL_144;
LABEL_143:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 183, (uint64_t)"this->GetOldestStateAccumulatedPoseAndCov(window_will_slide_in_next_iteration).state_id0 == new_base_state_id", 109, (uint64_t)"inconsistent accumulated state_ID", 33, (void (*)(void **))sub_21023DDB0))goto LABEL_144;
LABEL_151:
    abort();
  }
  if (*((_DWORD *)*v274 + 790 * *v271) != v6)
    goto LABEL_143;
LABEL_144:
  if (v298)
  {
    if (v297[0])
    {
      v297[1] = v297[0];
      operator delete(v297[0]);
    }
  }
}

void sub_20F81B9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v73;

  if (LOBYTE(STACK[0x240]) && __p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(__p);
  }
  if (LOBYTE(STACK[0xE98]))
  {
    v73 = (void *)STACK[0xE50];
    if (STACK[0xE50])
    {
      STACK[0xE58] = (unint64_t)v73;
      operator delete(v73);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F81BA20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  uint64_t v125;
  int v126;
  float64x2_t *v127;
  float64_t v128;
  int8x16_t v129;
  float64_t v130;
  float64_t v131;
  int8x16_t v132;
  float64_t v133;
  float64x2_t v134;
  unint64_t v135;
  float64x2_t v136;
  BOOL v137;
  float64x2_t *v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  void *v185;
  __int128 v186;
  int v187;
  int v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  void *v218;
  __int128 v219;
  float64x2_t v220;
  char v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  int v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  uint64_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  _OWORD v243[18];
  void *v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  char v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  _BYTE v297[648];
  __int128 v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  _BYTE v302[648];
  _BYTE v303[648];
  unsigned __int8 v304;
  __int128 v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320[18];
  void *__p;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  __int128 v325;
  uint64_t v326;
  char v327;
  _BYTE v328[24];
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  uint64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  _BYTE v373[648];
  __int128 v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  _BYTE v378[648];
  _BYTE v379[648];
  unsigned __int8 v380;
  float64x2_t v381;
  _BYTE v382[32];
  float64x2_t v383;
  _BYTE v384[32];
  float64x2_t v385;
  _BYTE v386[32];
  float64x2_t v387;
  _BYTE v388[32];
  float64x2_t v389;
  _BYTE v390[32];
  float64x2_t v391;
  _BYTE v392[32];
  _BYTE v393[648];
  _BYTE v394[648];
  _BYTE v395[648];
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  uint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  uint64_t v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  uint64_t v435;
  _BYTE v436[23];
  __int128 v437;
  uint64_t v438;
  uint64_t v439;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v439 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned __int8 *)(v1 + 3160);
  *(_QWORD *)v1 = *(_QWORD *)v4;
  v8 = *(_OWORD *)(v4 + 72);
  v9 = *(_OWORD *)(v4 + 88);
  v10 = *(_OWORD *)(v4 + 104);
  *(_OWORD *)(v1 + 120) = *(_OWORD *)(v4 + 120);
  *(_OWORD *)(v1 + 104) = v10;
  *(_OWORD *)(v1 + 88) = v9;
  *(_OWORD *)(v1 + 72) = v8;
  v11 = *(_OWORD *)(v4 + 8);
  v12 = *(_OWORD *)(v4 + 24);
  v13 = *(_OWORD *)(v4 + 40);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v1 + 40) = v13;
  *(_OWORD *)(v1 + 24) = v12;
  *(_OWORD *)(v1 + 8) = v11;
  memcpy((void *)(v1 + 136), (const void *)(v4 + 136), 0x120uLL);
  v14 = v6 + 424;
  v15 = (uint64_t *)(v5 + 424);
  v16 = (_OWORD *)(v6 + 504);
  if (!v7)
  {
    sub_20F13F604(v14, v15);
    *(_BYTE *)(v6 + 504) = 0;
    *(_BYTE *)(v6 + 3152) = 0;
    if (*(_BYTE *)(v5 + 3152))
    {
      v47 = *(_OWORD *)(v5 + 504);
      *(_QWORD *)(v6 + 520) = *(_QWORD *)(v5 + 520);
      *v16 = v47;
      v48 = *(_OWORD *)(v5 + 528);
      *(_QWORD *)(v6 + 544) = *(_QWORD *)(v5 + 544);
      *(_OWORD *)(v6 + 528) = v48;
      v49 = *(_OWORD *)(v5 + 568);
      *(_OWORD *)(v6 + 552) = *(_OWORD *)(v5 + 552);
      *(_OWORD *)(v6 + 568) = v49;
      v51 = *(_OWORD *)(v5 + 616);
      v50 = *(_OWORD *)(v5 + 632);
      v52 = *(_OWORD *)(v5 + 600);
      *(_QWORD *)(v6 + 648) = *(_QWORD *)(v5 + 648);
      *(_OWORD *)(v6 + 616) = v51;
      *(_OWORD *)(v6 + 632) = v50;
      *(_OWORD *)(v6 + 600) = v52;
      *(_OWORD *)(v6 + 584) = *(_OWORD *)(v5 + 584);
      v54 = *(_OWORD *)(v5 + 688);
      v53 = *(_OWORD *)(v5 + 704);
      v55 = *(_OWORD *)(v5 + 672);
      *(_QWORD *)(v6 + 720) = *(_QWORD *)(v5 + 720);
      *(_OWORD *)(v6 + 688) = v54;
      *(_OWORD *)(v6 + 704) = v53;
      *(_OWORD *)(v6 + 672) = v55;
      *(_OWORD *)(v6 + 656) = *(_OWORD *)(v5 + 656);
      *(_OWORD *)(v6 + 728) = *(_OWORD *)(v5 + 728);
      v56 = *(_OWORD *)(v5 + 744);
      v57 = *(_OWORD *)(v5 + 760);
      v58 = *(_OWORD *)(v5 + 776);
      *(_QWORD *)(v6 + 792) = *(_QWORD *)(v5 + 792);
      *(_OWORD *)(v6 + 760) = v57;
      *(_OWORD *)(v6 + 776) = v58;
      *(_OWORD *)(v6 + 744) = v56;
      *(_OWORD *)(v6 + 800) = *(_OWORD *)(v5 + 800);
      v59 = *(_OWORD *)(v5 + 816);
      v60 = *(_OWORD *)(v5 + 832);
      v61 = *(_OWORD *)(v5 + 848);
      *(_QWORD *)(v6 + 864) = *(_QWORD *)(v5 + 864);
      *(_OWORD *)(v6 + 832) = v60;
      *(_OWORD *)(v6 + 848) = v61;
      *(_OWORD *)(v6 + 816) = v59;
      *(_OWORD *)(v6 + 872) = *(_OWORD *)(v5 + 872);
      v62 = *(_OWORD *)(v5 + 888);
      v63 = *(_OWORD *)(v5 + 904);
      v64 = *(_OWORD *)(v5 + 920);
      *(_QWORD *)(v6 + 936) = *(_QWORD *)(v5 + 936);
      *(_OWORD *)(v6 + 904) = v63;
      *(_OWORD *)(v6 + 920) = v64;
      *(_OWORD *)(v6 + 888) = v62;
      *(_OWORD *)(v6 + 944) = *(_OWORD *)(v5 + 944);
      v65 = *(_OWORD *)(v5 + 960);
      v66 = *(_OWORD *)(v5 + 976);
      v67 = *(_OWORD *)(v5 + 992);
      *(_QWORD *)(v6 + 1008) = *(_QWORD *)(v5 + 1008);
      *(_OWORD *)(v6 + 976) = v66;
      *(_OWORD *)(v6 + 992) = v67;
      *(_OWORD *)(v6 + 960) = v65;
      *(_OWORD *)(v6 + 1016) = *(_OWORD *)(v5 + 1016);
      v68 = *(_OWORD *)(v5 + 1032);
      v69 = *(_OWORD *)(v5 + 1048);
      v70 = *(_OWORD *)(v5 + 1064);
      *(_QWORD *)(v6 + 1080) = *(_QWORD *)(v5 + 1080);
      *(_OWORD *)(v6 + 1048) = v69;
      *(_OWORD *)(v6 + 1064) = v70;
      *(_OWORD *)(v6 + 1032) = v68;
      *(_OWORD *)(v6 + 1088) = *(_OWORD *)(v5 + 1088);
      v71 = *(_OWORD *)(v5 + 1104);
      v72 = *(_OWORD *)(v5 + 1120);
      v73 = *(_OWORD *)(v5 + 1136);
      *(_QWORD *)(v6 + 1152) = *(_QWORD *)(v5 + 1152);
      *(_OWORD *)(v6 + 1136) = v73;
      *(_OWORD *)(v6 + 1120) = v72;
      *(_OWORD *)(v6 + 1104) = v71;
      memcpy((void *)(v6 + 1160), (const void *)(v5 + 1160), 0x288uLL);
      v74 = *(_OWORD *)(v5 + 1808);
      *(_QWORD *)(v6 + 1824) = *(_QWORD *)(v5 + 1824);
      *(_OWORD *)(v6 + 1808) = v74;
      v75 = *(_QWORD *)(v5 + 1848);
      *(_OWORD *)(v6 + 1832) = *(_OWORD *)(v5 + 1832);
      *(_QWORD *)(v6 + 1848) = v75;
      memcpy((void *)(v6 + 1856), (const void *)(v5 + 1856), 0x288uLL);
      memcpy((void *)(v6 + 2504), (const void *)(v5 + 2504), 0x288uLL);
      *(_BYTE *)(v6 + 3152) = 1;
    }
    *(_BYTE *)(v6 + 3160) = 1;
    sub_20F8225B0((_QWORD *)(v6 + 3216), (uint64_t *)v5);
    if (!*(_QWORD *)(v6 + 3208))
      goto LABEL_43;
    goto LABEL_13;
  }
  sub_20F821D40(v14, (uint64_t)v15);
  v17 = (__int128 *)(v5 + 504);
  if (*(unsigned __int8 *)(v6 + 3152) != *(unsigned __int8 *)(v5 + 3152))
  {
    if (!*(_BYTE *)(v6 + 3152))
    {
      v189 = *v17;
      *(_QWORD *)(v6 + 520) = *(_QWORD *)(v5 + 520);
      *v16 = v189;
      v190 = *(_OWORD *)(v5 + 528);
      *(_QWORD *)(v6 + 544) = *(_QWORD *)(v5 + 544);
      *(_OWORD *)(v6 + 528) = v190;
      v191 = *(_OWORD *)(v5 + 568);
      *(_OWORD *)(v6 + 552) = *(_OWORD *)(v5 + 552);
      *(_OWORD *)(v6 + 568) = v191;
      v193 = *(_OWORD *)(v5 + 616);
      v192 = *(_OWORD *)(v5 + 632);
      v194 = *(_OWORD *)(v5 + 600);
      *(_QWORD *)(v6 + 648) = *(_QWORD *)(v5 + 648);
      *(_OWORD *)(v6 + 616) = v193;
      *(_OWORD *)(v6 + 632) = v192;
      *(_OWORD *)(v6 + 600) = v194;
      *(_OWORD *)(v6 + 584) = *(_OWORD *)(v5 + 584);
      v196 = *(_OWORD *)(v5 + 688);
      v195 = *(_OWORD *)(v5 + 704);
      v197 = *(_OWORD *)(v5 + 672);
      *(_QWORD *)(v6 + 720) = *(_QWORD *)(v5 + 720);
      *(_OWORD *)(v6 + 688) = v196;
      *(_OWORD *)(v6 + 704) = v195;
      *(_OWORD *)(v6 + 672) = v197;
      *(_OWORD *)(v6 + 656) = *(_OWORD *)(v5 + 656);
      *(_OWORD *)(v6 + 728) = *(_OWORD *)(v5 + 728);
      v198 = *(_OWORD *)(v5 + 744);
      v199 = *(_OWORD *)(v5 + 760);
      v200 = *(_OWORD *)(v5 + 776);
      *(_QWORD *)(v6 + 792) = *(_QWORD *)(v5 + 792);
      *(_OWORD *)(v6 + 760) = v199;
      *(_OWORD *)(v6 + 776) = v200;
      *(_OWORD *)(v6 + 744) = v198;
      *(_OWORD *)(v6 + 800) = *(_OWORD *)(v5 + 800);
      v201 = *(_OWORD *)(v5 + 816);
      v202 = *(_OWORD *)(v5 + 832);
      v203 = *(_OWORD *)(v5 + 848);
      *(_QWORD *)(v6 + 864) = *(_QWORD *)(v5 + 864);
      *(_OWORD *)(v6 + 832) = v202;
      *(_OWORD *)(v6 + 848) = v203;
      *(_OWORD *)(v6 + 816) = v201;
      *(_OWORD *)(v6 + 872) = *(_OWORD *)(v5 + 872);
      v204 = *(_OWORD *)(v5 + 888);
      v205 = *(_OWORD *)(v5 + 904);
      v206 = *(_OWORD *)(v5 + 920);
      *(_QWORD *)(v6 + 936) = *(_QWORD *)(v5 + 936);
      *(_OWORD *)(v6 + 904) = v205;
      *(_OWORD *)(v6 + 920) = v206;
      *(_OWORD *)(v6 + 888) = v204;
      *(_OWORD *)(v6 + 944) = *(_OWORD *)(v5 + 944);
      v207 = *(_OWORD *)(v5 + 960);
      v208 = *(_OWORD *)(v5 + 976);
      v209 = *(_OWORD *)(v5 + 992);
      *(_QWORD *)(v6 + 1008) = *(_QWORD *)(v5 + 1008);
      *(_OWORD *)(v6 + 976) = v208;
      *(_OWORD *)(v6 + 992) = v209;
      *(_OWORD *)(v6 + 960) = v207;
      *(_OWORD *)(v6 + 1016) = *(_OWORD *)(v5 + 1016);
      v210 = *(_OWORD *)(v5 + 1032);
      v211 = *(_OWORD *)(v5 + 1048);
      v212 = *(_OWORD *)(v5 + 1064);
      *(_QWORD *)(v6 + 1080) = *(_QWORD *)(v5 + 1080);
      *(_OWORD *)(v6 + 1048) = v211;
      *(_OWORD *)(v6 + 1064) = v212;
      *(_OWORD *)(v6 + 1032) = v210;
      *(_OWORD *)(v6 + 1088) = *(_OWORD *)(v5 + 1088);
      v213 = *(_OWORD *)(v5 + 1104);
      v214 = *(_OWORD *)(v5 + 1120);
      v215 = *(_OWORD *)(v5 + 1136);
      *(_QWORD *)(v6 + 1152) = *(_QWORD *)(v5 + 1152);
      *(_OWORD *)(v6 + 1136) = v215;
      *(_OWORD *)(v6 + 1120) = v214;
      *(_OWORD *)(v6 + 1104) = v213;
      memcpy((void *)(v6 + 1160), (const void *)(v5 + 1160), 0x288uLL);
      v216 = *(_OWORD *)(v5 + 1808);
      *(_QWORD *)(v6 + 1824) = *(_QWORD *)(v5 + 1824);
      *(_OWORD *)(v6 + 1808) = v216;
      v217 = *(_QWORD *)(v5 + 1848);
      *(_OWORD *)(v6 + 1832) = *(_OWORD *)(v5 + 1832);
      *(_QWORD *)(v6 + 1848) = v217;
      memcpy((void *)(v6 + 1856), (const void *)(v5 + 1856), 0x288uLL);
      memcpy((void *)(v6 + 2504), (const void *)(v5 + 2504), 0x288uLL);
      *(_BYTE *)(v6 + 3152) = 1;
      sub_20F8225B0((_QWORD *)(v6 + 3216), (uint64_t *)v5);
      if (*(_QWORD *)(v6 + 3208))
        goto LABEL_13;
LABEL_43:
      sub_20F819EBC(v6, v3);
      return;
    }
    *(_BYTE *)(v6 + 3152) = 0;
LABEL_12:
    sub_20F8225B0((_QWORD *)(v6 + 3216), (uint64_t *)v5);
    if (*(_QWORD *)(v6 + 3208))
      goto LABEL_13;
    goto LABEL_43;
  }
  if (!*(_BYTE *)(v6 + 3152))
    goto LABEL_12;
  v18 = *v17;
  *(_QWORD *)(v6 + 520) = *(_QWORD *)(v5 + 520);
  *v16 = v18;
  v19 = *(_OWORD *)(v5 + 528);
  *(_QWORD *)(v6 + 544) = *(_QWORD *)(v5 + 544);
  *(_OWORD *)(v6 + 528) = v19;
  v20 = *(_OWORD *)(v5 + 568);
  *(_OWORD *)(v6 + 552) = *(_OWORD *)(v5 + 552);
  *(_OWORD *)(v6 + 568) = v20;
  v22 = *(_OWORD *)(v5 + 616);
  v21 = *(_OWORD *)(v5 + 632);
  v23 = *(_OWORD *)(v5 + 600);
  *(_QWORD *)(v6 + 648) = *(_QWORD *)(v5 + 648);
  *(_OWORD *)(v6 + 616) = v22;
  *(_OWORD *)(v6 + 632) = v21;
  *(_OWORD *)(v6 + 600) = v23;
  *(_OWORD *)(v6 + 584) = *(_OWORD *)(v5 + 584);
  v25 = *(_OWORD *)(v5 + 688);
  v24 = *(_OWORD *)(v5 + 704);
  v26 = *(_OWORD *)(v5 + 672);
  *(_QWORD *)(v6 + 720) = *(_QWORD *)(v5 + 720);
  *(_OWORD *)(v6 + 688) = v25;
  *(_OWORD *)(v6 + 704) = v24;
  *(_OWORD *)(v6 + 672) = v26;
  *(_OWORD *)(v6 + 656) = *(_OWORD *)(v5 + 656);
  *(_OWORD *)(v6 + 728) = *(_OWORD *)(v5 + 728);
  v27 = *(_OWORD *)(v5 + 744);
  v28 = *(_OWORD *)(v5 + 760);
  v29 = *(_OWORD *)(v5 + 776);
  *(_QWORD *)(v6 + 792) = *(_QWORD *)(v5 + 792);
  *(_OWORD *)(v6 + 760) = v28;
  *(_OWORD *)(v6 + 776) = v29;
  *(_OWORD *)(v6 + 744) = v27;
  *(_OWORD *)(v6 + 800) = *(_OWORD *)(v5 + 800);
  v30 = *(_OWORD *)(v5 + 816);
  v31 = *(_OWORD *)(v5 + 832);
  v32 = *(_OWORD *)(v5 + 848);
  *(_QWORD *)(v6 + 864) = *(_QWORD *)(v5 + 864);
  *(_OWORD *)(v6 + 832) = v31;
  *(_OWORD *)(v6 + 848) = v32;
  *(_OWORD *)(v6 + 816) = v30;
  *(_OWORD *)(v6 + 872) = *(_OWORD *)(v5 + 872);
  v33 = *(_OWORD *)(v5 + 888);
  v34 = *(_OWORD *)(v5 + 904);
  v35 = *(_OWORD *)(v5 + 920);
  *(_QWORD *)(v6 + 936) = *(_QWORD *)(v5 + 936);
  *(_OWORD *)(v6 + 904) = v34;
  *(_OWORD *)(v6 + 920) = v35;
  *(_OWORD *)(v6 + 888) = v33;
  *(_OWORD *)(v6 + 944) = *(_OWORD *)(v5 + 944);
  v36 = *(_OWORD *)(v5 + 960);
  v37 = *(_OWORD *)(v5 + 976);
  v38 = *(_OWORD *)(v5 + 992);
  *(_QWORD *)(v6 + 1008) = *(_QWORD *)(v5 + 1008);
  *(_OWORD *)(v6 + 976) = v37;
  *(_OWORD *)(v6 + 992) = v38;
  *(_OWORD *)(v6 + 960) = v36;
  *(_OWORD *)(v6 + 1016) = *(_OWORD *)(v5 + 1016);
  v39 = *(_OWORD *)(v5 + 1032);
  v40 = *(_OWORD *)(v5 + 1048);
  v41 = *(_OWORD *)(v5 + 1064);
  *(_QWORD *)(v6 + 1080) = *(_QWORD *)(v5 + 1080);
  *(_OWORD *)(v6 + 1048) = v40;
  *(_OWORD *)(v6 + 1064) = v41;
  *(_OWORD *)(v6 + 1032) = v39;
  *(_OWORD *)(v6 + 1088) = *(_OWORD *)(v5 + 1088);
  v42 = *(_OWORD *)(v5 + 1104);
  v43 = *(_OWORD *)(v5 + 1120);
  v44 = *(_OWORD *)(v5 + 1136);
  *(_QWORD *)(v6 + 1152) = *(_QWORD *)(v5 + 1152);
  *(_OWORD *)(v6 + 1136) = v44;
  *(_OWORD *)(v6 + 1120) = v43;
  *(_OWORD *)(v6 + 1104) = v42;
  memcpy((void *)(v6 + 1160), (const void *)(v5 + 1160), 0x288uLL);
  v45 = *(_OWORD *)(v5 + 1808);
  *(_QWORD *)(v6 + 1824) = *(_QWORD *)(v5 + 1824);
  *(_OWORD *)(v6 + 1808) = v45;
  v46 = *(_QWORD *)(v5 + 1848);
  *(_OWORD *)(v6 + 1832) = *(_OWORD *)(v5 + 1832);
  *(_QWORD *)(v6 + 1848) = v46;
  memcpy((void *)(v6 + 1856), (const void *)(v5 + 1856), 0x288uLL);
  memcpy((void *)(v6 + 2504), (const void *)(v5 + 2504), 0x288uLL);
  sub_20F8225B0((_QWORD *)(v6 + 3216), (uint64_t *)v5);
  if (!*(_QWORD *)(v6 + 3208))
    goto LABEL_43;
LABEL_13:
  v76 = *(_QWORD *)(v6 + 3200);
  v77 = *(_QWORD *)(v6 + 3168);
  if (!v76)
    v76 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(v6 + 3176) - v77) >> 3);
  v78 = v76 - 1;
  v79 = v77 + 3160 * (v76 - 1);
  v311 = *(_QWORD *)v79;
  v80 = *(float64x2_t *)(v79 + 8);
  v81 = *(float64x2_t *)(v79 + 24);
  v82 = *(float64x2_t *)(v79 + 40);
  v315 = *(float64x2_t *)(v79 + 56);
  v314 = v82;
  v313 = v81;
  v312 = v80;
  v83 = *(float64x2_t *)(v79 + 72);
  v84 = *(float64x2_t *)(v79 + 88);
  v85 = *(float64x2_t *)(v79 + 104);
  v319 = *(float64x2_t *)(v79 + 120);
  v318 = v85;
  v317 = v84;
  v316 = v83;
  memcpy(v320, (const void *)(v79 + 136), sizeof(v320));
  sub_20F13F604((uint64_t)&__p, (uint64_t *)(v79 + 424));
  v328[0] = 0;
  v380 = 0;
  if (*(_BYTE *)(v77 + 3160 * v78 + 3152))
  {
    v86 = v77 + 3160 * v78;
    v87 = *(_OWORD *)(v86 + 504);
    *(_QWORD *)&v328[16] = *(_QWORD *)(v86 + 520);
    *(_OWORD *)v328 = v87;
    v88 = *(_OWORD *)(v86 + 528);
    v330 = *(_QWORD *)(v86 + 544);
    v329 = v88;
    v89 = *(_OWORD *)(v86 + 568);
    v331 = *(_OWORD *)(v86 + 552);
    v332 = v89;
    v90 = *(_QWORD *)(v86 + 648);
    v91 = *(_OWORD *)(v86 + 632);
    v92 = *(_OWORD *)(v86 + 600);
    v335 = *(_OWORD *)(v86 + 616);
    v336 = v91;
    v334 = v92;
    v333 = *(_OWORD *)(v86 + 584);
    v337 = v90;
    v94 = *(_OWORD *)(v86 + 688);
    v93 = *(_OWORD *)(v86 + 704);
    v95 = *(_OWORD *)(v86 + 672);
    v342 = *(_QWORD *)(v86 + 720);
    v340 = v94;
    v341 = v93;
    v339 = v95;
    v338 = *(_OWORD *)(v86 + 656);
    v343 = *(_OWORD *)(v86 + 728);
    v96 = *(_QWORD *)(v86 + 792);
    v97 = *(_OWORD *)(v86 + 744);
    v98 = *(_OWORD *)(v86 + 776);
    v345 = *(_OWORD *)(v86 + 760);
    v346 = v98;
    v344 = v97;
    v347 = v96;
    v348 = *(_OWORD *)(v86 + 800);
    v99 = *(_OWORD *)(v86 + 816);
    v100 = *(_OWORD *)(v86 + 832);
    v101 = *(_OWORD *)(v86 + 848);
    v352 = *(_QWORD *)(v86 + 864);
    v350 = v100;
    v351 = v101;
    v349 = v99;
    v353 = *(_OWORD *)(v86 + 872);
    v102 = *(_QWORD *)(v86 + 936);
    v103 = *(_OWORD *)(v86 + 888);
    v104 = *(_OWORD *)(v86 + 920);
    v355 = *(_OWORD *)(v86 + 904);
    v356 = v104;
    v354 = v103;
    v357 = v102;
    v358 = *(_OWORD *)(v86 + 944);
    v105 = *(_OWORD *)(v86 + 960);
    v106 = *(_OWORD *)(v86 + 976);
    v107 = *(_OWORD *)(v86 + 992);
    v362 = *(_QWORD *)(v86 + 1008);
    v361 = v107;
    v360 = v106;
    v359 = v105;
    v363 = *(_OWORD *)(v86 + 1016);
    v108 = *(_QWORD *)(v86 + 1080);
    v109 = *(_OWORD *)(v86 + 1032);
    v110 = *(_OWORD *)(v86 + 1064);
    v365 = *(_OWORD *)(v86 + 1048);
    v366 = v110;
    v364 = v109;
    v367 = v108;
    v368 = *(_OWORD *)(v86 + 1088);
    v111 = *(_OWORD *)(v86 + 1104);
    v112 = *(_OWORD *)(v86 + 1120);
    v113 = *(_OWORD *)(v86 + 1136);
    v372 = *(_QWORD *)(v86 + 1152);
    v371 = v113;
    v370 = v112;
    v369 = v111;
    memcpy(v373, (const void *)(v86 + 1160), sizeof(v373));
    v114 = *(_OWORD *)(v86 + 1808);
    v375 = *(_QWORD *)(v86 + 1824);
    v374 = v114;
    v115 = *(_QWORD *)(v86 + 1848);
    v376 = *(_OWORD *)(v86 + 1832);
    v377 = v115;
    memcpy(v378, (const void *)(v86 + 1856), sizeof(v378));
    memcpy(v379, (const void *)(v86 + 2504), sizeof(v379));
    v229 = 1;
    v380 = 1;
    v116 = v328[0];
    *(_OWORD *)v436 = *(_OWORD *)&v328[1];
    *(_QWORD *)&v436[15] = *(_QWORD *)&v328[16];
    v438 = v330;
    v437 = v329;
    v309 = v331;
    v310 = v332;
    v435 = v337;
    v433 = v335;
    v434 = v336;
    v431 = v333;
    v432 = v334;
    v430 = v342;
    v428 = v340;
    v429 = v341;
    v426 = v338;
    v427 = v339;
    v425 = v347;
    v423 = v345;
    v424 = v346;
    v421 = v343;
    v422 = v344;
    v420 = v352;
    v418 = v350;
    v419 = v351;
    v416 = v348;
    v417 = v349;
    v415 = v357;
    v413 = v355;
    v414 = v356;
    v411 = v353;
    v412 = v354;
    v410 = v362;
    v408 = v360;
    v409 = v361;
    v406 = v358;
    v407 = v359;
    v405 = v367;
    v403 = v365;
    v404 = v366;
    v401 = v363;
    v402 = v364;
    v400 = v372;
    v398 = v370;
    v399 = v371;
    v396 = v368;
    v397 = v369;
    memcpy(v395, v373, sizeof(v395));
    v307 = v374;
    v308 = v375;
    v305 = v376;
    v306 = v377;
    memcpy(v394, v378, sizeof(v394));
    memcpy(v393, v379, sizeof(v393));
    if (HIDWORD(v311) == *(_DWORD *)v5)
      goto LABEL_20;
  }
  else
  {
    v229 = 0;
    v116 = 0;
    if (HIDWORD(v311) == *(_DWORD *)v5)
      goto LABEL_20;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/VIOPoseFactorUtil.cpp", 334, (uint64_t)"rel_pose_and_cov1.state_id1 == rel_pose_and_cov2.state_id0", 58, (uint64_t)"Relative poses has to be consecutive", 36, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_20:
  v221 = v116;
  v250 = 0;
  LOBYTE(v251) = 0;
  v304 = 0;
  memset(v243, 0, sizeof(v243));
  LOBYTE(v244) = 0;
  LODWORD(v234) = v311;
  HIDWORD(v234) = *(_DWORD *)(v5 + 4);
  v117 = *(float64x2_t *)(v5 + 24);
  v118 = *(float64x2_t *)(v5 + 8);
  v119 = *(float64x2_t *)(v5 + 56);
  v120 = *(float64x2_t *)(v5 + 40);
  v121 = *(float64x2_t *)(v5 + 88);
  v122 = *(float64x2_t *)(v5 + 72);
  v123 = *(float64x2_t *)(v5 + 120);
  v124 = *(float64x2_t *)(v5 + 104);
  v236 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v312.f64[0]), v119, v312, 1), v121, v313.f64[0]), v123, v313, 1);
  v235 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v312.f64[0]), v120, v312, 1), v122, v313.f64[0]), v124, v313, 1);
  v238 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v314.f64[0]), v119, v314, 1), v121, v315.f64[0]), v123, v315, 1);
  v237 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v314.f64[0]), v120, v314, 1), v122, v315.f64[0]), v124, v315, 1);
  v240 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v316.f64[0]), v119, v316, 1), v121, v317.f64[0]), v123, v317, 1);
  v239 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v316.f64[0]), v120, v316, 1), v122, v317.f64[0]), v124, v317, 1);
  v242 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v117, v318.f64[0]), v119, v318, 1), v121, v319.f64[0]), v123, v319, 1);
  v241 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v118, v318.f64[0]), v120, v318, 1), v122, v319.f64[0]), v124, v319, 1);
  sub_20EB70E00((uint64_t)&v235);
  v125 = 0;
  v126 = 0;
  v127 = (float64x2_t *)(v5 + 280);
  v128 = *(double *)(v5 + 24);
  v129 = *(int8x16_t *)(v5 + 8);
  *(_QWORD *)&v130 = vextq_s8(v129, v129, 8uLL).u64[0];
  v131 = *(double *)(v5 + 56);
  v132 = *(int8x16_t *)(v5 + 40);
  v133 = *(double *)(v5 + 88);
  v134 = *(float64x2_t *)(v5 + 72);
  v135 = vextq_s8(v132, v132, 8uLL).u64[0];
  v136 = (float64x2_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL);
  *(float64_t *)v382 = v128;
  v381 = (float64x2_t)v129;
  *(float64_t *)v384 = v131;
  v383 = (float64x2_t)v132;
  *(float64_t *)v386 = v133;
  v385 = v134;
  do
  {
    v387.f64[v125] = 0.0;
    v137 = v126 < 2;
    if (v126 < 2)
      ++v126;
    else
      v126 = 0;
    if (v137)
      ++v125;
    else
      v125 += 4;
  }
  while (v125 != 18);
  v139 = *(float64x2_t *)(v5 + 232);
  v138 = (float64x2_t *)(v5 + 232);
  v140 = v138[-8];
  v141.f64[0] = v130;
  v141.f64[1] = v131;
  v142 = vmulq_f64(v141, v140);
  v141.f64[0] = v138[-7].f64[0];
  v143 = (float64x2_t)vzip1q_s64((int64x2_t)v141, (int64x2_t)v140);
  *(_QWORD *)&v144.f64[0] = v132.i64[0];
  *(_QWORD *)&v144.f64[1] = v135;
  v145 = vmulq_f64(v144, v143);
  v146 = (float64x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v141, 8uLL);
  v147.f64[0] = v128;
  *(_QWORD *)&v147.f64[1] = v129.i64[0];
  v148 = vmulq_f64(v147, v146);
  v147.f64[0] = v133;
  v147.f64[1] = v134.f64[0];
  v149.f64[0] = v136.f64[0];
  v149.f64[1] = v133;
  v150 = vmlsq_f64(vmulq_f64(v147, v146), v149, v143);
  v149.f64[0] = v130;
  v149.f64[1] = v128;
  v151 = vmlsq_f64(v148, v149, v143);
  v143.f64[0] = v131;
  *(_QWORD *)&v143.f64[1] = v132.i64[0];
  v152 = (int8x16_t)vmlsq_f64(v145, v143, v140);
  *(_QWORD *)&v143.f64[0] = v129.i64[0];
  *(_QWORD *)&v143.f64[1] = v135;
  v153 = (int8x16_t)vmlsq_f64(v142, v143, v146);
  *(float64x2_t *)&v382[8] = v151;
  *(_QWORD *)&v382[24] = v153.i64[0];
  *(float64x2_t *)&v386[8] = v150;
  *(_QWORD *)&v386[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v136, v140), v134, v140, 1);
  v132.i64[1] = v135;
  *(int8x16_t *)&v390[8] = v132;
  *(float64_t *)&v388[24] = v128;
  *(float64_t *)&v390[24] = v131;
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[0].f64[0]), v383, v320[0], 1), v385, v320[1].f64[0]), v387, v320[1], 1), v389, v320[2].f64[0]), v391, v320[2], 1);
  *(_QWORD *)&v384[24] = v152.i64[1];
  *(int8x16_t *)&v384[8] = vextq_s8(v153, v152, 8uLL);
  *(float64_t *)&v129.i64[1] = v130;
  *(int8x16_t *)&v388[8] = v129;
  v134.f64[1] = v136.f64[0];
  *(float64x2_t *)&v392[8] = v134;
  *(float64_t *)&v392[24] = v133;
  v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[0].f64[0]), *(float64x2_t *)v384, v320[0], 1), *(float64x2_t *)v386, v320[1].f64[0]), *(float64x2_t *)v388, v320[1], 1), *(float64x2_t *)v390, v320[2].f64[0]), *(float64x2_t *)v392, v320[2], 1);
  v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[0].f64[0]), *(float64x2_t *)&v384[16], v320[0], 1), *(float64x2_t *)&v386[16], v320[1].f64[0]), *(float64x2_t *)&v388[16], v320[1], 1), *(float64x2_t *)&v390[16], v320[2].f64[0]), *(float64x2_t *)&v392[16], v320[2], 1);
  v157 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[3].f64[0]), v383, v320[3], 1), v385, v320[4].f64[0]), v387, v320[4], 1), v389, v320[5].f64[0]), v391, v320[5], 1);
  v158 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[3].f64[0]), *(float64x2_t *)v384, v320[3], 1), *(float64x2_t *)v386, v320[4].f64[0]), *(float64x2_t *)v388, v320[4], 1), *(float64x2_t *)v390, v320[5].f64[0]), *(float64x2_t *)v392, v320[5], 1);
  v159 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[3].f64[0]), *(float64x2_t *)&v384[16], v320[3], 1), *(float64x2_t *)&v386[16], v320[4].f64[0]), *(float64x2_t *)&v388[16], v320[4], 1), *(float64x2_t *)&v390[16], v320[5].f64[0]), *(float64x2_t *)&v392[16], v320[5], 1);
  v228 = vmlaq_n_f64(vmulq_n_f64(v154, v381.f64[0]), v157, v383.f64[0]);
  v227 = vmlaq_n_f64(vmulq_n_f64(v155, v381.f64[0]), v158, v383.f64[0]);
  v226 = vmlaq_laneq_f64(vmulq_laneq_f64(v154, v381, 1), v157, v383, 1);
  v230 = vmlaq_laneq_f64(vmulq_laneq_f64(v155, v381, 1), v158, v383, 1);
  v225 = vmlaq_n_f64(vmulq_n_f64(v154, *(double *)v382), v157, *(double *)v384);
  v160 = vmlaq_n_f64(vmulq_n_f64(v155, *(double *)v382), v158, *(double *)v384);
  v161 = vmlaq_laneq_f64(vmulq_laneq_f64(v154, *(float64x2_t *)v382, 1), v157, *(float64x2_t *)v384, 1);
  v162 = vmlaq_laneq_f64(vmulq_laneq_f64(v155, *(float64x2_t *)v382, 1), v158, *(float64x2_t *)v384, 1);
  v163 = vmlaq_n_f64(vmulq_n_f64(v154, *(double *)&v382[16]), v157, *(double *)&v384[16]);
  v164 = vmlaq_laneq_f64(vmulq_laneq_f64(v154, *(float64x2_t *)&v382[16], 1), v157, *(float64x2_t *)&v384[16], 1);
  v165 = vmlaq_n_f64(vmulq_n_f64(v155, *(double *)&v382[16]), v158, *(double *)&v384[16]);
  v166 = vmlaq_laneq_f64(vmulq_laneq_f64(v155, *(float64x2_t *)&v382[16], 1), v158, *(float64x2_t *)&v384[16], 1);
  v167 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[6].f64[0]), v383, v320[6], 1), v385, v320[7].f64[0]), v387, v320[7], 1), v389, v320[8].f64[0]), v391, v320[8], 1);
  v168 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[6].f64[0]), *(float64x2_t *)v384, v320[6], 1), *(float64x2_t *)v386, v320[7].f64[0]), *(float64x2_t *)v388, v320[7], 1), *(float64x2_t *)v390, v320[8].f64[0]), *(float64x2_t *)v392, v320[8], 1);
  v222 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[6].f64[0]), *(float64x2_t *)&v384[16], v320[6], 1), *(float64x2_t *)&v386[16], v320[7].f64[0]), *(float64x2_t *)&v388[16], v320[7], 1), *(float64x2_t *)&v390[16], v320[8].f64[0]), *(float64x2_t *)&v392[16], v320[8], 1);
  v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[9].f64[0]), *(float64x2_t *)v384, v320[9], 1), *(float64x2_t *)v386, v320[10].f64[0]), *(float64x2_t *)v388, v320[10], 1), *(float64x2_t *)v390, v320[11].f64[0]), *(float64x2_t *)v392, v320[11], 1);
  v224 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[9].f64[0]), v383, v320[9], 1), v385, v320[10].f64[0]), v387, v320[10], 1), v389, v320[11].f64[0]), v391, v320[11], 1);
  v233 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[9].f64[0]), *(float64x2_t *)&v384[16], v320[9], 1), *(float64x2_t *)&v386[16], v320[10].f64[0]), *(float64x2_t *)&v388[16], v320[10], 1), *(float64x2_t *)&v390[16], v320[11].f64[0]), *(float64x2_t *)&v392[16], v320[11], 1);
  v231 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[12].f64[0]), *(float64x2_t *)v384, v320[12], 1), *(float64x2_t *)v386, v320[13].f64[0]), *(float64x2_t *)v388, v320[13], 1), *(float64x2_t *)v390, v320[14].f64[0]), *(float64x2_t *)v392, v320[14], 1);
  v232 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[12].f64[0]), v383, v320[12], 1), v385, v320[13].f64[0]), v387, v320[13], 1), v389, v320[14].f64[0]), v391, v320[14], 1);
  v169 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[12].f64[0]), *(float64x2_t *)&v384[16], v320[12], 1), *(float64x2_t *)&v386[16], v320[13].f64[0]), *(float64x2_t *)&v388[16], v320[13], 1), *(float64x2_t *)&v390[16], v320[14].f64[0]), *(float64x2_t *)&v392[16], v320[14], 1);
  v170 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v381, v320[15].f64[0]), v383, v320[15], 1), v385, v320[16].f64[0]), v387, v320[16], 1), v389, v320[17].f64[0]), v391, v320[17], 1);
  v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v382, v320[15].f64[0]), *(float64x2_t *)v384, v320[15], 1), *(float64x2_t *)v386, v320[16].f64[0]), *(float64x2_t *)v388, v320[16], 1), *(float64x2_t *)v390, v320[17].f64[0]), *(float64x2_t *)v392, v320[17], 1);
  v172 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&v382[16], v320[15].f64[0]), *(float64x2_t *)&v384[16], v320[15], 1), *(float64x2_t *)&v386[16], v320[16].f64[0]), *(float64x2_t *)&v388[16], v320[16], 1), *(float64x2_t *)&v390[16], v320[17].f64[0]), *(float64x2_t *)&v392[16], v320[17], 1);
  v173 = vaddq_f64(v138[-4], vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, v381.f64[0]), v159, v383.f64[0]), v222, v385.f64[0]), v233, v387.f64[0]), v169, v389.f64[0]), v172, v391.f64[0]));
  v174 = vaddq_f64(v138[-5], vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v227, v168, v385.f64[0]), v223, v387.f64[0]), v231, v389.f64[0]), v171, v391.f64[0]));
  v175 = vaddq_f64(v138[-3], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v226, v167, v385, 1), v224, v387, 1), v232, v389, 1), v170, v391, 1));
  v243[0] = vaddq_f64(v138[-6], vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v228, v167, v385.f64[0]), v224, v387.f64[0]), v232, v389.f64[0]), v170, v391.f64[0]));
  v243[1] = v174;
  v243[2] = v173;
  v243[3] = v175;
  v176 = v138[-1];
  v243[4] = vaddq_f64(v138[-2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v230, v168, v385, 1), v223, v387, 1), v231, v389, 1), v171, v391, 1));
  v243[5] = vaddq_f64(v176, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v156, v381, 1), v159, v383, 1), v222, v385, 1), v233, v387, 1), v169, v389, 1), v172, v391, 1));
  v177 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v163, v167, v150.f64[1]), v224, *(double *)&v129.i64[1]), v232, *(double *)&v132.i64[1]);
  v178 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v165, v168, v150.f64[1]), v223, *(double *)&v129.i64[1]), v231, *(double *)&v132.i64[1]);
  v179 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, *(double *)&v382[16]), v159, *(double *)&v384[16]), v222, v150.f64[1]), v233, *(double *)&v129.i64[1]), v169, *(double *)&v132.i64[1]);
  v180 = v138[1];
  v243[8] = vaddq_f64(v138[2], vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v156, *(double *)v382), v159, *(double *)v384), v222, *(double *)v386), v233, *(double *)v388), v169, *(double *)v390), v172, *(double *)v392));
  v243[6] = vaddq_f64(v139, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v225, v167, *(double *)v386), v224, *(double *)v388), v232, *(double *)v390), v170, *(double *)v392));
  v243[7] = vaddq_f64(v180, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v160, v168, *(double *)v386), v223, *(double *)v388), v231, *(double *)v390), v171, *(double *)v392));
  v181 = vaddq_f64(v127[1], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v162, v168, *(float64x2_t *)v386, 1), v223, *(float64x2_t *)v388, 1), v231, *(float64x2_t *)v390, 1), v171, *(float64x2_t *)v392, 1));
  v243[9] = vaddq_f64(*v127, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v161, v167, *(float64x2_t *)v386, 1), v224, *(float64x2_t *)v388, 1), v232, *(float64x2_t *)v390, 1), v170, *(float64x2_t *)v392, 1));
  v243[10] = v181;
  v182 = vaddq_f64(v127[3], vmlaq_n_f64(v177, v170, v134.f64[1]));
  v243[11] = vaddq_f64(v127[2], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v156, *(float64x2_t *)v382, 1), v159, *(float64x2_t *)v384, 1), v222, *(float64x2_t *)v386, 1), v233, *(float64x2_t *)v388, 1), v169, *(float64x2_t *)v390, 1), v172, *(float64x2_t *)v392, 1));
  v243[12] = v182;
  v183 = vaddq_f64(v127[5], vmlaq_n_f64(v179, v172, v134.f64[1]));
  v243[13] = vaddq_f64(v127[4], vmlaq_n_f64(v178, v171, v134.f64[1]));
  v243[14] = v183;
  v184 = vaddq_f64(v127[7], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v166, v168, *(float64x2_t *)&v386[16], 1), v223, *(float64x2_t *)&v388[16], 1), v231, *(float64x2_t *)&v390[16], 1), v171, *(float64x2_t *)&v392[16], 1));
  v243[15] = vaddq_f64(v127[6], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v164, v167, *(float64x2_t *)&v386[16], 1), v224, *(float64x2_t *)&v388[16], 1), v232, *(float64x2_t *)&v390[16], 1), v170, *(float64x2_t *)&v392[16], 1));
  v243[16] = v184;
  v243[17] = vaddq_f64(v127[8], vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v156, *(float64x2_t *)&v382[16], 1), v159, *(float64x2_t *)&v384[16], 1), v222, *(float64x2_t *)&v386[16], 1), v233, *(float64x2_t *)&v388[16], 1), v169, *(float64x2_t *)&v390[16], 1),
                 v172,
                 *(float64x2_t *)&v392[16],
                 1));
  v316 = v239;
  v317 = v240;
  v318 = v241;
  v319 = v242;
  v312 = v235;
  v313 = v236;
  v314 = v237;
  v315 = v238;
  v311 = v234;
  memcpy(v320, v243, sizeof(v320));
  if (v327 != v250)
  {
    if (!v327)
    {
      v218 = v244;
      v219 = v245;
      v245 = 0uLL;
      v244 = 0;
      v322 = v219;
      v323 = v246;
      __p = v218;
      v324 = v247;
      v325 = v248;
      v326 = v249;
      v327 = 1;
      v187 = v380;
      if (v380 == v304)
        goto LABEL_39;
LABEL_45:
      if (!v187)
      {
        *(_OWORD *)v328 = v251;
        *(_QWORD *)&v328[16] = v252;
        v329 = v253;
        v330 = v254;
        v331 = v255;
        v332 = v256;
        v335 = v259;
        v336 = v260;
        v333 = v257;
        v334 = v258;
        v337 = v261;
        v342 = v266;
        v340 = v264;
        v341 = v265;
        v338 = v262;
        v339 = v263;
        v345 = v269;
        v346 = v270;
        v343 = v267;
        v344 = v268;
        v347 = v271;
        v352 = v276;
        v350 = v274;
        v351 = v275;
        v348 = v272;
        v349 = v273;
        v355 = v279;
        v356 = v280;
        v353 = v277;
        v354 = v278;
        v357 = v281;
        v362 = v286;
        v360 = v284;
        v361 = v285;
        v358 = v282;
        v359 = v283;
        v365 = v289;
        v366 = v290;
        v363 = v287;
        v364 = v288;
        v367 = v291;
        v368 = v292;
        v372 = v296;
        v371 = v295;
        v370 = v294;
        v369 = v293;
        memcpy(v373, v297, sizeof(v373));
        v374 = v298;
        v375 = v299;
        v376 = v300;
        v377 = v301;
        memcpy(v378, v302, sizeof(v378));
        memcpy(v379, v303, sizeof(v379));
        v187 = 1;
        v380 = 1;
        v188 = v229;
        if (!v250)
          goto LABEL_50;
        goto LABEL_48;
      }
      v187 = 0;
      v380 = 0;
      goto LABEL_47;
    }
    if (__p)
    {
      *(_QWORD *)&v322 = __p;
      operator delete(__p);
    }
    v327 = 0;
LABEL_38:
    v187 = v380;
    if (v380 == v304)
      goto LABEL_39;
    goto LABEL_45;
  }
  if (!v327)
    goto LABEL_38;
  if (__p)
  {
    *(_QWORD *)&v322 = __p;
    operator delete(__p);
  }
  v185 = v244;
  v186 = v245;
  v245 = 0uLL;
  v244 = 0;
  v322 = v186;
  v323 = v246;
  __p = v185;
  v324 = v247;
  v325 = v248;
  v326 = v249;
  v187 = v380;
  if (v380 != v304)
    goto LABEL_45;
LABEL_39:
  if (v187)
  {
    *(_OWORD *)v328 = v251;
    *(_QWORD *)&v328[16] = v252;
    v329 = v253;
    v330 = v254;
    v331 = v255;
    v332 = v256;
    v335 = v259;
    v336 = v260;
    v333 = v257;
    v334 = v258;
    v337 = v261;
    v342 = v266;
    v340 = v264;
    v341 = v265;
    v338 = v262;
    v339 = v263;
    v345 = v269;
    v346 = v270;
    v343 = v267;
    v344 = v268;
    v347 = v271;
    v352 = v276;
    v350 = v274;
    v351 = v275;
    v348 = v272;
    v349 = v273;
    v355 = v279;
    v356 = v280;
    v353 = v277;
    v354 = v278;
    v357 = v281;
    v362 = v286;
    v360 = v284;
    v361 = v285;
    v358 = v282;
    v359 = v283;
    v365 = v289;
    v366 = v290;
    v363 = v287;
    v364 = v288;
    v367 = v291;
    v368 = v292;
    v372 = v296;
    v371 = v295;
    v370 = v294;
    v369 = v293;
    memcpy(v373, v297, sizeof(v373));
    v374 = v298;
    v375 = v299;
    v376 = v300;
    v377 = v301;
    memcpy(v378, v302, sizeof(v378));
    memcpy(v379, v303, sizeof(v379));
    v187 = 1;
    v188 = v229;
    if (!v250)
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  v188 = v229;
  if (!v250)
    goto LABEL_50;
LABEL_48:
  if (v244)
  {
    *(_QWORD *)&v245 = v244;
    operator delete(v244);
    v187 = v380;
  }
LABEL_50:
  if (v187 == v188)
  {
    if (!v187)
      goto LABEL_60;
    v328[0] = v221;
    *(_OWORD *)&v328[1] = *(_OWORD *)v436;
    *(_QWORD *)&v328[16] = *(_QWORD *)&v436[15];
    v329 = v437;
    v330 = v438;
    v331 = v309;
    v332 = v310;
    v335 = v433;
    v336 = v434;
    v333 = v431;
    v334 = v432;
    v337 = v435;
    v342 = v430;
    v340 = v428;
    v341 = v429;
    v338 = v426;
    v339 = v427;
    v345 = v423;
    v346 = v424;
    v343 = v421;
    v344 = v422;
    v347 = v425;
    v352 = v420;
    v350 = v418;
    v351 = v419;
    v348 = v416;
    v349 = v417;
    v355 = v413;
    v356 = v414;
    v353 = v411;
    v354 = v412;
    v357 = v415;
    v362 = v410;
    v360 = v408;
    v361 = v409;
    v358 = v406;
    v359 = v407;
    v365 = v403;
    v366 = v404;
    v363 = v401;
    v364 = v402;
    v367 = v405;
    v368 = v396;
    v372 = v400;
    v371 = v399;
    v370 = v398;
    v369 = v397;
    memcpy(v373, v395, sizeof(v373));
    v374 = v307;
    v375 = v308;
    v376 = v305;
    v377 = v306;
    memcpy(v378, v394, sizeof(v378));
    memcpy(v379, v393, sizeof(v379));
    if (!*(_BYTE *)(v6 + 496))
      goto LABEL_60;
LABEL_59:
    sub_20F81DD10(v6, v3, (uint64_t)v328, v220);
    goto LABEL_60;
  }
  if (v187)
  {
    v380 = 0;
    goto LABEL_60;
  }
  v328[0] = v221;
  *(_OWORD *)&v328[1] = *(_OWORD *)v436;
  *(_QWORD *)&v328[16] = *(_QWORD *)&v436[15];
  v329 = v437;
  v330 = v438;
  v331 = v309;
  v332 = v310;
  v335 = v433;
  v336 = v434;
  v333 = v431;
  v334 = v432;
  v337 = v435;
  v342 = v430;
  v340 = v428;
  v341 = v429;
  v338 = v426;
  v339 = v427;
  v345 = v423;
  v346 = v424;
  v343 = v421;
  v344 = v422;
  v347 = v425;
  v352 = v420;
  v350 = v418;
  v351 = v419;
  v348 = v416;
  v349 = v417;
  v355 = v413;
  v356 = v414;
  v353 = v411;
  v354 = v412;
  v357 = v415;
  v362 = v410;
  v360 = v408;
  v361 = v409;
  v358 = v406;
  v359 = v407;
  v365 = v403;
  v366 = v404;
  v363 = v401;
  v364 = v402;
  v367 = v405;
  v368 = v396;
  v372 = v400;
  v371 = v399;
  v370 = v398;
  v369 = v397;
  memcpy(v373, v395, sizeof(v373));
  v374 = v307;
  v375 = v308;
  v376 = v305;
  v377 = v306;
  memcpy(v378, v394, sizeof(v378));
  memcpy(v379, v393, sizeof(v379));
  v380 = 1;
  if (*(_BYTE *)(v6 + 496))
    goto LABEL_59;
LABEL_60:
  sub_20F8225B0((_QWORD *)(v6 + 3168), &v311);
  if (v327)
  {
    if (__p)
    {
      *(_QWORD *)&v322 = __p;
      operator delete(__p);
    }
  }
}

void sub_20F81D6FC(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  if (LOBYTE(STACK[0x3D8]))
  {
    v2 = (void *)STACK[0x390];
    if (STACK[0x390])
    {
      STACK[0x398] = (unint64_t)v2;
      operator delete(v2);
    }
  }
  if (LOBYTE(STACK[0x1090]))
  {
    v3 = (void *)STACK[0x1048];
    if (STACK[0x1048])
    {
      STACK[0x1050] = (unint64_t)v3;
      operator delete(v3);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F81D754(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v4 = *(unsigned __int8 *)(a1 + 3160);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_OWORD *)(a2 + 72);
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 8) = v8;
  memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0x120uLL);
  v11 = a1 + 424;
  v12 = (uint64_t *)(a2 + 424);
  v13 = (_OWORD *)(a1 + 504);
  if (v4)
  {
    sub_20F821D40(v11, (uint64_t)v12);
    v14 = (__int128 *)(a2 + 504);
    if (*(unsigned __int8 *)(a1 + 3152) == *(unsigned __int8 *)(a2 + 3152))
    {
      if (*(_BYTE *)(a1 + 3152))
      {
        v15 = *v14;
        *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
        *v13 = v15;
        v16 = *(_OWORD *)(a2 + 528);
        *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
        *(_OWORD *)(a1 + 528) = v16;
        v17 = *(_OWORD *)(a2 + 568);
        *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
        *(_OWORD *)(a1 + 568) = v17;
        v19 = *(_OWORD *)(a2 + 616);
        v18 = *(_OWORD *)(a2 + 632);
        v20 = *(_OWORD *)(a2 + 600);
        *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
        *(_OWORD *)(a1 + 616) = v19;
        *(_OWORD *)(a1 + 632) = v18;
        *(_OWORD *)(a1 + 600) = v20;
        *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
        v22 = *(_OWORD *)(a2 + 688);
        v21 = *(_OWORD *)(a2 + 704);
        v23 = *(_OWORD *)(a2 + 672);
        *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
        *(_OWORD *)(a1 + 688) = v22;
        *(_OWORD *)(a1 + 704) = v21;
        *(_OWORD *)(a1 + 672) = v23;
        *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
        *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
        v24 = *(_OWORD *)(a2 + 744);
        v25 = *(_OWORD *)(a2 + 760);
        v26 = *(_OWORD *)(a2 + 776);
        *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
        *(_OWORD *)(a1 + 760) = v25;
        *(_OWORD *)(a1 + 776) = v26;
        *(_OWORD *)(a1 + 744) = v24;
        *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
        v27 = *(_OWORD *)(a2 + 816);
        v28 = *(_OWORD *)(a2 + 832);
        v29 = *(_OWORD *)(a2 + 848);
        *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
        *(_OWORD *)(a1 + 832) = v28;
        *(_OWORD *)(a1 + 848) = v29;
        *(_OWORD *)(a1 + 816) = v27;
        *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
        v30 = *(_OWORD *)(a2 + 888);
        v31 = *(_OWORD *)(a2 + 904);
        v32 = *(_OWORD *)(a2 + 920);
        *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
        *(_OWORD *)(a1 + 904) = v31;
        *(_OWORD *)(a1 + 920) = v32;
        *(_OWORD *)(a1 + 888) = v30;
        *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
        v33 = *(_OWORD *)(a2 + 960);
        v34 = *(_OWORD *)(a2 + 976);
        v35 = *(_OWORD *)(a2 + 992);
        *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
        *(_OWORD *)(a1 + 976) = v34;
        *(_OWORD *)(a1 + 992) = v35;
        *(_OWORD *)(a1 + 960) = v33;
        *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
        v36 = *(_OWORD *)(a2 + 1032);
        v37 = *(_OWORD *)(a2 + 1048);
        v38 = *(_OWORD *)(a2 + 1064);
        *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
        *(_OWORD *)(a1 + 1048) = v37;
        *(_OWORD *)(a1 + 1064) = v38;
        *(_OWORD *)(a1 + 1032) = v36;
        *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
        v39 = *(_OWORD *)(a2 + 1104);
        v40 = *(_OWORD *)(a2 + 1120);
        v41 = *(_OWORD *)(a2 + 1136);
        *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
        *(_OWORD *)(a1 + 1136) = v41;
        *(_OWORD *)(a1 + 1120) = v40;
        *(_OWORD *)(a1 + 1104) = v39;
        memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
        v42 = *(_OWORD *)(a2 + 1808);
        *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
        *(_OWORD *)(a1 + 1808) = v42;
        v43 = *(_QWORD *)(a2 + 1848);
        *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
        *(_QWORD *)(a1 + 1848) = v43;
        memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
        memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
      }
      return a1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 3152))
      {
        *(_BYTE *)(a1 + 3152) = 0;
      }
      else
      {
        v74 = *v14;
        *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
        *v13 = v74;
        v75 = *(_OWORD *)(a2 + 528);
        *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
        *(_OWORD *)(a1 + 528) = v75;
        v76 = *(_OWORD *)(a2 + 568);
        *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
        *(_OWORD *)(a1 + 568) = v76;
        v78 = *(_OWORD *)(a2 + 616);
        v77 = *(_OWORD *)(a2 + 632);
        v79 = *(_OWORD *)(a2 + 600);
        *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
        *(_OWORD *)(a1 + 616) = v78;
        *(_OWORD *)(a1 + 632) = v77;
        *(_OWORD *)(a1 + 600) = v79;
        *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
        v81 = *(_OWORD *)(a2 + 688);
        v80 = *(_OWORD *)(a2 + 704);
        v82 = *(_OWORD *)(a2 + 672);
        *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
        *(_OWORD *)(a1 + 688) = v81;
        *(_OWORD *)(a1 + 704) = v80;
        *(_OWORD *)(a1 + 672) = v82;
        *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
        *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
        v83 = *(_OWORD *)(a2 + 744);
        v84 = *(_OWORD *)(a2 + 760);
        v85 = *(_OWORD *)(a2 + 776);
        *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
        *(_OWORD *)(a1 + 760) = v84;
        *(_OWORD *)(a1 + 776) = v85;
        *(_OWORD *)(a1 + 744) = v83;
        *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
        v86 = *(_OWORD *)(a2 + 816);
        v87 = *(_OWORD *)(a2 + 832);
        v88 = *(_OWORD *)(a2 + 848);
        *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
        *(_OWORD *)(a1 + 832) = v87;
        *(_OWORD *)(a1 + 848) = v88;
        *(_OWORD *)(a1 + 816) = v86;
        *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
        v89 = *(_OWORD *)(a2 + 888);
        v90 = *(_OWORD *)(a2 + 904);
        v91 = *(_OWORD *)(a2 + 920);
        *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
        *(_OWORD *)(a1 + 904) = v90;
        *(_OWORD *)(a1 + 920) = v91;
        *(_OWORD *)(a1 + 888) = v89;
        *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
        v92 = *(_OWORD *)(a2 + 960);
        v93 = *(_OWORD *)(a2 + 976);
        v94 = *(_OWORD *)(a2 + 992);
        *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
        *(_OWORD *)(a1 + 976) = v93;
        *(_OWORD *)(a1 + 992) = v94;
        *(_OWORD *)(a1 + 960) = v92;
        *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
        v95 = *(_OWORD *)(a2 + 1032);
        v96 = *(_OWORD *)(a2 + 1048);
        v97 = *(_OWORD *)(a2 + 1064);
        *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
        *(_OWORD *)(a1 + 1048) = v96;
        *(_OWORD *)(a1 + 1064) = v97;
        *(_OWORD *)(a1 + 1032) = v95;
        *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
        v98 = *(_OWORD *)(a2 + 1104);
        v99 = *(_OWORD *)(a2 + 1120);
        v100 = *(_OWORD *)(a2 + 1136);
        *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
        *(_OWORD *)(a1 + 1136) = v100;
        *(_OWORD *)(a1 + 1120) = v99;
        *(_OWORD *)(a1 + 1104) = v98;
        memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
        v101 = *(_OWORD *)(a2 + 1808);
        *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
        *(_OWORD *)(a1 + 1808) = v101;
        v102 = *(_QWORD *)(a2 + 1848);
        *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
        *(_QWORD *)(a1 + 1848) = v102;
        memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
        memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
        *(_BYTE *)(a1 + 3152) = 1;
      }
      return a1;
    }
  }
  else
  {
    sub_20F13F604(v11, v12);
    *(_BYTE *)(a1 + 504) = 0;
    *(_BYTE *)(a1 + 3152) = 0;
    if (*(_BYTE *)(a2 + 3152))
    {
      v45 = *(_OWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      *v13 = v45;
      v46 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v46;
      v47 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v47;
      v49 = *(_OWORD *)(a2 + 616);
      v48 = *(_OWORD *)(a2 + 632);
      v50 = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
      *(_OWORD *)(a1 + 616) = v49;
      *(_OWORD *)(a1 + 632) = v48;
      *(_OWORD *)(a1 + 600) = v50;
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      v52 = *(_OWORD *)(a2 + 688);
      v51 = *(_OWORD *)(a2 + 704);
      v53 = *(_OWORD *)(a2 + 672);
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v52;
      *(_OWORD *)(a1 + 704) = v51;
      *(_OWORD *)(a1 + 672) = v53;
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
      v54 = *(_OWORD *)(a2 + 744);
      v55 = *(_OWORD *)(a2 + 760);
      v56 = *(_OWORD *)(a2 + 776);
      *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v55;
      *(_OWORD *)(a1 + 776) = v56;
      *(_OWORD *)(a1 + 744) = v54;
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
      v57 = *(_OWORD *)(a2 + 816);
      v58 = *(_OWORD *)(a2 + 832);
      v59 = *(_OWORD *)(a2 + 848);
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 832) = v58;
      *(_OWORD *)(a1 + 848) = v59;
      *(_OWORD *)(a1 + 816) = v57;
      *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
      v60 = *(_OWORD *)(a2 + 888);
      v61 = *(_OWORD *)(a2 + 904);
      v62 = *(_OWORD *)(a2 + 920);
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 904) = v61;
      *(_OWORD *)(a1 + 920) = v62;
      *(_OWORD *)(a1 + 888) = v60;
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      v63 = *(_OWORD *)(a2 + 960);
      v64 = *(_OWORD *)(a2 + 976);
      v65 = *(_OWORD *)(a2 + 992);
      *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 976) = v64;
      *(_OWORD *)(a1 + 992) = v65;
      *(_OWORD *)(a1 + 960) = v63;
      *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
      v66 = *(_OWORD *)(a2 + 1032);
      v67 = *(_OWORD *)(a2 + 1048);
      v68 = *(_OWORD *)(a2 + 1064);
      *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 1048) = v67;
      *(_OWORD *)(a1 + 1064) = v68;
      *(_OWORD *)(a1 + 1032) = v66;
      *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
      v69 = *(_OWORD *)(a2 + 1104);
      v70 = *(_OWORD *)(a2 + 1120);
      v71 = *(_OWORD *)(a2 + 1136);
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 1136) = v71;
      *(_OWORD *)(a1 + 1120) = v70;
      *(_OWORD *)(a1 + 1104) = v69;
      memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
      v72 = *(_OWORD *)(a2 + 1808);
      *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
      *(_OWORD *)(a1 + 1808) = v72;
      v73 = *(_QWORD *)(a2 + 1848);
      *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
      *(_QWORD *)(a1 + 1848) = v73;
      memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
      memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
      *(_BYTE *)(a1 + 3152) = 1;
    }
    *(_BYTE *)(a1 + 3160) = 1;
    return a1;
  }
}

uint64_t sub_20F81DD10(uint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v20;
  float64x2_t v22;
  double v23;
  double v24;
  double v26;
  double v28;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  double v45;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  _BYTE v150[648];
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  _BYTE v155[648];
  _BYTE v156[648];
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  double v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  double v164;

  if (*(_BYTE *)(result + 496))
  {
    v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(result + 432) - *(_QWORD *)(result + 424)) >> 3);
    v5 = v4 - 1;
    if (v4 <= 1)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PoseAndCovarianceAccumulator.cpp", 349, (uint64_t)"num_imu_mnts >= 2", 17, (uint64_t)&unk_2102B2222, 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    else
    {
      v7 = 0;
      v8 = *(double *)(a2 + 120);
      v9 = *(double *)(a2 + 144);
      v10 = *(double *)(a2 + 152);
      v12 = *(double *)(a2 + 128);
      v11 = *(double *)(a2 + 136);
      v13 = *(double *)(a2 + 176);
      v14 = *(float64x2_t *)(a2 + 160);
      v15 = *(double *)(a2 + 200);
      v16 = *(float64x2_t *)(a2 + 184);
      v17 = *(double *)(a2 + 224);
      v18 = *(float64x2_t *)(a2 + 208);
      _Q22 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v14, *(double *)(a2 + 112)), (float64x2_t)0, v16), (float64x2_t)0, v18);
      v20 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v14, v11), v16, v8), (float64x2_t)0, v18);
      _D25 = v13 * v11 + v15 * v8 + v17 * 0.0;
      v22 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v9), v16, v10), v18, v12);
      v23 = v13 * v9 + v15 * v10 + v17 * v12;
      v24 = *(double *)(a2 + 248);
      _Q21 = *(float64x2_t *)(a2 + 232);
      v26 = *(double *)(a2 + 272);
      _Q18 = *(float64x2_t *)(a2 + 256);
      v28 = *(double *)(a2 + 296);
      _Q7 = *(float64x2_t *)(a2 + 280);
      v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q21.f64[0]), v20, _Q21, 1), v22, v24);
      __asm { FMLA            D28, D25, V21.D[1] }
      v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q18.f64[0]), v20, _Q18, 1), v22, v26);
      __asm { FMLA            D28, D25, V18.D[1] }
      _D9 = _D28 + v23 * v26;
      v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q22, _Q7.f64[0]), v20, _Q7, 1), v22, v28);
      __asm { FMLA            D22, D25, V7.D[1] }
      v37 = _Q22.f64[0] + v23 * v28;
      v38 = *(double *)(a2 + 72);
      v20.f64[0] = *(float64_t *)(a2 + 96);
      v39 = *(double *)(a2 + 104);
      v40 = *(double *)(a2 + 80);
      v22.f64[0] = *(float64_t *)(a2 + 88);
      v41 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v14, *(double *)(a2 + 64)), (float64x2_t)0, v16), (float64x2_t)0, v18);
      v42 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v14, v22.f64[0]), v16, v38), (float64x2_t)0, v18);
      _D17 = v13 * v22.f64[0] + v15 * v38 + v17 * 0.0;
      v44 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v20.f64[0]), v16, v39), v18, v40);
      v45 = v13 * v20.f64[0] + v15 * v39 + v17 * v40;
      v96 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q21.f64[0]), v42, _Q21, 1), v44, v24);
      __asm { FMLA            D2, D17, V21.D[1] }
      v95 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q18.f64[0]), v42, _Q18, 1), v44, v26);
      __asm { FMLA            D2, D17, V18.D[1] }
      _D12 = _D2 + v45 * v26;
      v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q7.f64[0]), v42, _Q7, 1), v44, v28);
      __asm { FMLA            D2, D17, V7.D[1] }
      v93 = a3 + 24;
      v92 = (_OWORD *)(a3 + 48);
      v91 = a3 + 80;
      v90 = a3 + 152;
      v89 = a3 + 224;
      v50 = a3 + 368;
      v51 = a3 + 440;
      v52 = a3 + 512;
      v53 = a3 + 584;
      v87 = (void *)(a3 + 656);
      v88 = a3 + 296;
      v86 = a3 + 1304;
      v85 = a3 + 1328;
      v84 = (void *)(a3 + 1352);
      v54 = _D2 + v45 * v28;
      v83 = (void *)(a3 + 2000);
      v100 = result;
      v101 = a2;
      do
      {
        v102 = v7;
        v103 = v5;
        v55 = *(_QWORD *)(result + 424) + v7;
        a4.f64[0] = *(float64_t *)(v55 + 24);
        _Q1 = *(float64x2_t *)(v55 + 8);
        __asm { FMLA            D3, D9, V1.D[1] }
        v163 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q1.f64[0]), v98, _Q1, 1), v97, a4.f64[0]);
        v164 = _D3 + v37 * a4.f64[0];
        a4.f64[0] = *(float64_t *)(v55 + 80);
        _Q1 = *(float64x2_t *)(v55 + 64);
        __asm { FMLA            D3, D9, V1.D[1] }
        v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q1.f64[0]), v98, _Q1, 1), v97, a4.f64[0]);
        v162 = _D3 + v37 * a4.f64[0];
        a4.f64[0] = *(float64_t *)(v55 + 48);
        _Q1 = *(float64x2_t *)(v55 + 32);
        __asm { FMLA            D3, D12, V1.D[1] }
        v159 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q1.f64[0]), v95, _Q1, 1), v94, a4.f64[0]);
        v160 = _D3 + v54 * a4.f64[0];
        a4.f64[0] = *(float64_t *)(v55 + 104);
        _Q1 = *(float64x2_t *)(v55 + 88);
        __asm { FMLA            D3, D12, V1.D[1] }
        v157 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q1.f64[0]), v95, _Q1, 1), v94, a4.f64[0]);
        v158 = _D3 + v54 * a4.f64[0];
        a4.f64[0] = *(double *)(v55 + 56) - *(double *)v55;
        sub_20F81FFC8(a3, 1, (uint64_t)&v104, a4, *(double *)a2, *(double *)(a2 + 16));
        *(_OWORD *)a3 = v104;
        *(_QWORD *)(a3 + 16) = v105;
        *(_OWORD *)v93 = v106;
        *(_QWORD *)(v93 + 16) = v107;
        v64 = v109;
        *v92 = v108;
        v92[1] = v64;
        v65 = v113;
        *(_OWORD *)(v91 + 32) = v112;
        *(_OWORD *)(v91 + 48) = v65;
        *(_QWORD *)(v91 + 64) = v114;
        v66 = v111;
        *(_OWORD *)v91 = v110;
        *(_OWORD *)(v91 + 16) = v66;
        v67 = v118;
        *(_OWORD *)(v90 + 32) = v117;
        *(_OWORD *)(v90 + 48) = v67;
        *(_QWORD *)(v90 + 64) = v119;
        v68 = v116;
        *(_OWORD *)v90 = v115;
        *(_OWORD *)(v90 + 16) = v68;
        v69 = v123;
        *(_OWORD *)(v89 + 32) = v122;
        *(_OWORD *)(v89 + 48) = v69;
        *(_QWORD *)(v89 + 64) = v124;
        v70 = v121;
        *(_OWORD *)v89 = v120;
        *(_OWORD *)(v89 + 16) = v70;
        *(_QWORD *)(v88 + 64) = v129;
        v71 = v128;
        *(_OWORD *)(v88 + 32) = v127;
        *(_OWORD *)(v88 + 48) = v71;
        v72 = v126;
        *(_OWORD *)v88 = v125;
        *(_OWORD *)(v88 + 16) = v72;
        *(_QWORD *)(v50 + 64) = v134;
        v73 = v133;
        *(_OWORD *)(v50 + 32) = v132;
        *(_OWORD *)(v50 + 48) = v73;
        v74 = v131;
        *(_OWORD *)v50 = v130;
        *(_OWORD *)(v50 + 16) = v74;
        *(_QWORD *)(v51 + 64) = v139;
        v75 = v138;
        *(_OWORD *)(v51 + 32) = v137;
        *(_OWORD *)(v51 + 48) = v75;
        v76 = v136;
        *(_OWORD *)v51 = v135;
        *(_OWORD *)(v51 + 16) = v76;
        *(_QWORD *)(v52 + 64) = v144;
        v77 = v143;
        *(_OWORD *)(v52 + 32) = v142;
        *(_OWORD *)(v52 + 48) = v77;
        v78 = v141;
        *(_OWORD *)v52 = v140;
        *(_OWORD *)(v52 + 16) = v78;
        v79 = v145;
        v80 = v146;
        v81 = v147;
        v82 = v148;
        *(_QWORD *)(v53 + 64) = v149;
        *(_OWORD *)(v53 + 32) = v81;
        *(_OWORD *)(v53 + 48) = v82;
        *(_OWORD *)v53 = v79;
        *(_OWORD *)(v53 + 16) = v80;
        memcpy(v87, v150, 0x288uLL);
        *(_OWORD *)v86 = v151;
        *(_QWORD *)(v86 + 16) = v152;
        *(_OWORD *)v85 = v153;
        *(_QWORD *)(v85 + 16) = v154;
        memcpy(v84, v155, 0x288uLL);
        memcpy(v83, v156, 0x288uLL);
        result = v100;
        a2 = v101;
        v7 = v102 + 56;
        v5 = v103 - 1;
      }
      while (v103 != 1);
    }
  }
  return result;
}

void sub_20F81E2A4(uint64_t a1, int a2, int a3, float64x2_t *a4, int a5)
{
  unint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  double v10;
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  int v40;
  float64x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  float64_t v44;
  float64_t v45;
  float64x2_t v46;
  BOOL v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  int8x16_t v176;
  int8x16_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  int8x16_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  unint64_t v278;
  uint64_t v279;
  unsigned __int8 v280;
  int v281;
  unint64_t v282;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  size_t v287;
  const char *v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  const char *v291;
  size_t v292;
  _BYTE *v293;
  unint64_t v294;
  const char *v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  NSObject *v304;
  size_t v305;
  std::__shared_weak_count_vtbl *v306;
  std::__shared_weak_count *v307;
  std::__shared_weak_count *v308;
  unint64_t *p_shared_owners;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  void *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  __int128 *v349;
  int v350;
  __int128 v351;
  uint64_t v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  _BYTE *v381;
  __int128 v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  uint64_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64_t v421;
  float64x2_t v422;
  float64_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  uint64_t *v462[3];
  int v463;
  const char *v464;
  int v465;
  const char *v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  _BYTE object[48];
  float64x2_t v473;
  _BYTE v474[32];
  float64x2_t v475;
  _BYTE v476[32];
  float64x2_t v477;
  _BYTE v478[32];
  float64x2_t v479;
  _BYTE v480[32];
  float64x2_t v481;
  _BYTE v482[32];

  if (!*(_QWORD *)(a1 + 3208) || !*(_BYTE *)(a1 + 3160))
    return;
  if (*(_DWORD *)a1 == a2 && *(_DWORD *)(a1 + 4) == a3)
  {
    v6 = *(_QWORD *)(a1 + 3200);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 3168);
      if (*(_DWORD *)(v7 + 3160 * v6 - 3156) == a3)
      {
LABEL_7:
        v8 = *(float64x2_t *)(a1 + 8);
        _Q6.f64[0] = *(float64_t *)(a1 + 24);
        v10 = *(double *)(a1 + 56);
        v11 = *(float64x2_t *)(a1 + 40);
        _D1 = *(double *)(a1 + 88);
        v13 = *(float64x2_t *)(a1 + 72);
        _D7 = *(double *)(a1 + 120);
        _Q17 = *(float64x2_t *)(a1 + 104);
        v16 = a4[1];
        v17 = vmulq_n_f64(*a4, _Q6.f64[0]);
        v18 = vmulq_n_f64(v16, _Q6.f64[0]);
        _Q6.f64[1] = v10;
        v19 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v8, (int64x2_t)v11), vnegq_f64(_Q17).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v8, (int64x2_t)v11), _Q17, 1), _Q6, _D7, 0);
        _D18 = *(_QWORD *)(a1 + 80);
        __asm
        {
          FMLS            D6, D18, V17.D[1]
          FMLS            D6, D1, V7.D[0]
        }
        v25 = a4[2];
        v24 = a4[3];
        v27 = a4[4];
        v26 = a4[5];
        v29 = a4[6];
        v28 = a4[7];
        v30 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a4, v8.f64[0]), v25, v11.f64[0]), v27, v13.f64[0]), (float64x2_t)0, v29);
        v31 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v16, v8.f64[0]), v24, v11.f64[0]), v26, v13.f64[0]), (float64x2_t)0, v28);
        v32 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*a4, v8, 1), v25, v11, 1), v27, v13, 1), (float64x2_t)0, v29);
        v33 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v16, v8, 1), v24, v11, 1), v26, v13, 1), (float64x2_t)0, v28);
        v34 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v17, v25, v10), v27, _D1), (float64x2_t)0, v29);
        v35 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v18, v24, v10), v26, _D1), (float64x2_t)0, v28);
        v36 = vaddq_f64(v29, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a4, v19.f64[0]), v25, v19, 1), v27, _Q6.f64[0]));
        v37 = vaddq_f64(v28, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v19.f64[0]), v24, v19, 1), v26, _Q6.f64[0]));
        v38 = (float64x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL);
        if (!v6)
          v6 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 3176) - v7) >> 3);
        v39 = 0;
        v40 = 0;
        v41 = (float64x2_t *)(a1 + 280);
        v42 = v6 - 1;
        *(float64x2_t *)object = v30;
        *(float64_t *)&object[16] = v31.f64[0];
        v43 = v7 + 3160 * v42 + 8;
        *(_QWORD *)&v44 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
        *(_QWORD *)&v45 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
        v46 = (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
        v473 = v32;
        *(float64_t *)v474 = v33.f64[0];
        v475 = v34;
        *(float64_t *)v476 = v35.f64[0];
        do
        {
          v477.f64[v39] = 0.0;
          v47 = v40 < 2;
          if (v40 < 2)
            ++v40;
          else
            v40 = 0;
          if (v47)
            ++v39;
          else
            v39 += 4;
        }
        while (v39 != 18);
        v48.f64[0] = v31.f64[0];
        v48.f64[1] = v30.f64[0];
        v49.f64[0] = v32.f64[0];
        v49.f64[1] = v45;
        v50.f64[0] = v44;
        v50.f64[1] = v33.f64[0];
        v51.f64[0] = v38.f64[0];
        v51.f64[1] = v37.f64[0];
        v52.f64[0] = v37.f64[0];
        v52.f64[1] = v36.f64[0];
        v53.f64[0] = v36.f64[0];
        v53.f64[1] = v38.f64[0];
        v54.f64[0] = v35.f64[0];
        v54.f64[1] = v34.f64[0];
        v55.f64[0] = v46.f64[0];
        v55.f64[1] = v35.f64[0];
        v56.f64[0] = v44;
        v56.f64[1] = v31.f64[0];
        v57 = vmlsq_f64(vmulq_f64(v54, v51), v55, v52);
        v55.f64[0] = v33.f64[0];
        v55.f64[1] = v32.f64[0];
        v58 = vmlsq_f64(vmulq_f64(v48, v51), v56, v52);
        v59 = (int8x16_t)vmlsq_f64(vmulq_f64(v49, v52), v55, v53);
        v52.f64[0] = v30.f64[0];
        v52.f64[1] = v45;
        v60 = (int8x16_t)vmlsq_f64(vmulq_f64(v50, v53), v52, v51);
        v419 = v38;
        v61 = v7 + 3160 * v42;
        *(_QWORD *)&v474[24] = v59.i64[1];
        *(float64x2_t *)&object[24] = v58;
        *(int8x16_t *)&v474[8] = vextq_s8(v60, v59, 8uLL);
        *(_QWORD *)&object[40] = v60.i64[0];
        *(_QWORD *)&v476[24] = *(_OWORD *)&vmlsq_f64(vmulq_f64(v46, v36), v34, v38);
        *(float64x2_t *)&v476[8] = v57;
        v58.f64[0] = v30.f64[0];
        v423 = v44;
        v58.f64[1] = v44;
        *(float64x2_t *)&v478[8] = v58;
        *(float64_t *)&v478[24] = v31.f64[0];
        *(float64_t *)&v480[24] = v33.f64[0];
        v58.f64[0] = v32.f64[0];
        v421 = v45;
        v58.f64[1] = v45;
        *(float64x2_t *)&v480[8] = v58;
        v58.f64[0] = v34.f64[0];
        v58.f64[1] = v46.f64[0];
        *(float64x2_t *)&v482[8] = v58;
        *(float64_t *)&v482[24] = v35.f64[0];
        v62 = *(float64x2_t *)(v43 + 16);
        v63 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, *(double *)v43), v32, *(float64x2_t *)v43, 1), v34, v62.f64[0]), v36, v62, 1);
        v64 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, *(double *)v43), v33, *(float64x2_t *)v43, 1), v35, v62.f64[0]), v37, v62, 1);
        v66 = *(float64x2_t *)(v43 + 32);
        v65 = *(float64x2_t *)(v43 + 48);
        v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v66.f64[0]), v32, v66, 1), v34, v65.f64[0]), v36, v65, 1);
        v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v66.f64[0]), v33, v66, 1), v35, v65.f64[0]), v37, v65, 1);
        v70 = *(float64x2_t *)(v43 + 64);
        v69 = *(float64x2_t *)(v43 + 80);
        v71 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v70.f64[0]), v32, v70, 1), v34, v69.f64[0]), v36, v69, 1);
        v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v70.f64[0]), v33, v70, 1), v35, v69.f64[0]), v37, v69, 1);
        v74 = *(float64x2_t *)(v43 + 96);
        v73 = *(float64x2_t *)(v43 + 112);
        *(float64x2_t *)v43 = v63;
        *(float64x2_t *)(v43 + 16) = v64;
        *(float64x2_t *)(v43 + 32) = v67;
        *(float64x2_t *)(v43 + 48) = v68;
        *(float64x2_t *)(v43 + 64) = v71;
        *(float64x2_t *)(v43 + 80) = v72;
        *(float64x2_t *)(v43 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v30, v74.f64[0]), v32, v74, 1), v34, v73.f64[0]), v36, v73, 1);
        *(float64x2_t *)(v43 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v31, v74.f64[0]), v33, v74, 1), v35, v73.f64[0]), v37, v73, 1);
        v75 = *(float64x2_t *)(v61 + 136);
        v61 += 136;
        v416 = v30;
        v417 = v31;
        v77 = *(float64x2_t *)(v61 + 16);
        v76 = *(float64x2_t *)(v61 + 32);
        v78 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v75.f64[0]), v473, v75, 1), v475, v77.f64[0]), v477, v77, 1), v479, v76.f64[0]), v481, v76, 1);
        v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v75.f64[0]), *(float64x2_t *)v474, v75, 1), *(float64x2_t *)v476, v77.f64[0]), *(float64x2_t *)v478, v77, 1), *(float64x2_t *)v480, v76.f64[0]), *(float64x2_t *)v482, v76, 1);
        v80 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v75.f64[0]), *(float64x2_t *)&v474[16], v75, 1), *(float64x2_t *)&v476[16], v77.f64[0]), *(float64x2_t *)&v478[16], v77, 1), *(float64x2_t *)&v480[16], v76.f64[0]), *(float64x2_t *)&v482[16], v76, 1);
        v82 = *(float64x2_t *)(v61 + 48);
        v81 = *(float64x2_t *)(v61 + 64);
        v414 = v34;
        v415 = v32;
        v83 = *(float64x2_t *)(v61 + 80);
        v84 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v82.f64[0]), v473, v82, 1), v475, v81.f64[0]), v477, v81, 1), v479, v83.f64[0]), v481, v83, 1);
        v412 = v33;
        v413 = v35;
        v85 = *(float64x2_t *)(v61 + 96);
        v86 = *(float64x2_t *)(v61 + 144);
        v87 = *(float64x2_t *)(v61 + 192);
        v88 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v82.f64[0]), *(float64x2_t *)v474, v82, 1), *(float64x2_t *)v476, v81.f64[0]), *(float64x2_t *)v478, v81, 1), *(float64x2_t *)v480, v83.f64[0]), *(float64x2_t *)v482, v83, 1);
        v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v82.f64[0]), *(float64x2_t *)&v474[16], v82, 1), *(float64x2_t *)&v476[16], v81.f64[0]), *(float64x2_t *)&v478[16], v81, 1), *(float64x2_t *)&v480[16], v83.f64[0]), *(float64x2_t *)&v482[16], v83, 1);
        v456 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v87.f64[0]), v473, v87, 1);
        v452 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v87.f64[0]), *(float64x2_t *)v474, v87, 1);
        v448 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v87.f64[0]), *(float64x2_t *)&v474[16], v87, 1);
        v90 = *(float64x2_t *)(v61 + 240);
        v91 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v90.f64[0]), *(float64x2_t *)v474, v90, 1);
        v92 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v90.f64[0]), *(float64x2_t *)&v474[16], v90, 1);
        v438 = vmlaq_n_f64(vmulq_n_f64(v78, *(double *)object), v84, v473.f64[0]);
        v440 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v90.f64[0]), v473, v90, 1);
        v436 = vmlaq_n_f64(vmulq_n_f64(v79, *(double *)object), v88, v473.f64[0]);
        v435 = vmlaq_n_f64(vmulq_n_f64(v80, *(double *)object), v89, v473.f64[0]);
        v93 = vmlaq_laneq_f64(vmulq_laneq_f64(v78, *(float64x2_t *)object, 1), v84, v473, 1);
        v434 = vmlaq_laneq_f64(vmulq_laneq_f64(v79, *(float64x2_t *)object, 1), v88, v473, 1);
        v432 = vmlaq_laneq_f64(vmulq_laneq_f64(v80, *(float64x2_t *)object, 1), v89, v473, 1);
        v431 = vmlaq_n_f64(vmulq_n_f64(v78, *(double *)&object[16]), v84, *(double *)v474);
        v429 = vmlaq_n_f64(vmulq_n_f64(v79, *(double *)&object[16]), v88, *(double *)v474);
        v94 = vmlaq_n_f64(vmulq_n_f64(v80, *(double *)&object[16]), v89, *(double *)v474);
        v95 = vmlaq_laneq_f64(vmulq_laneq_f64(v78, *(float64x2_t *)&object[16], 1), v84, *(float64x2_t *)v474, 1);
        v96 = vmlaq_laneq_f64(vmulq_laneq_f64(v79, *(float64x2_t *)&object[16], 1), v88, *(float64x2_t *)v474, 1);
        v97 = vmlaq_laneq_f64(vmulq_laneq_f64(v80, *(float64x2_t *)&object[16], 1), v89, *(float64x2_t *)v474, 1);
        v98 = vmlaq_n_f64(vmulq_n_f64(v78, *(double *)&object[32]), v84, *(double *)&v474[16]);
        v99 = vmlaq_laneq_f64(vmulq_laneq_f64(v78, *(float64x2_t *)&object[32], 1), v84, *(float64x2_t *)&v474[16], 1);
        v100 = vmlaq_n_f64(vmulq_n_f64(v79, *(double *)&object[32]), v88, *(double *)&v474[16]);
        v101 = vmlaq_laneq_f64(vmulq_laneq_f64(v79, *(float64x2_t *)&object[32], 1), v88, *(float64x2_t *)&v474[16], 1);
        v102 = vmlaq_n_f64(vmulq_n_f64(v80, *(double *)&object[32]), v89, *(double *)&v474[16]);
        v103 = vmlaq_laneq_f64(vmulq_laneq_f64(v80, *(float64x2_t *)&object[32], 1), v89, *(float64x2_t *)&v474[16], 1);
        v104 = *(float64x2_t *)(v61 + 112);
        v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v85.f64[0]), v473, v85, 1), v475, v104.f64[0]), v477, v104, 1);
        v106 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v85.f64[0]), *(float64x2_t *)v474, v85, 1), *(float64x2_t *)v476, v104.f64[0]), *(float64x2_t *)v478, v104, 1);
        v107 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v85.f64[0]), *(float64x2_t *)&v474[16], v85, 1), *(float64x2_t *)&v476[16], v104.f64[0]), *(float64x2_t *)&v478[16], v104, 1);
        v108 = *(float64x2_t *)(v61 + 128);
        v109 = vmlaq_laneq_f64(vmlaq_n_f64(v105, v479, v108.f64[0]), v481, v108, 1);
        v426 = vmlaq_laneq_f64(vmlaq_n_f64(v106, *(float64x2_t *)v480, v108.f64[0]), *(float64x2_t *)v482, v108, 1);
        v110 = vmlaq_laneq_f64(vmlaq_n_f64(v107, *(float64x2_t *)&v480[16], v108.f64[0]), *(float64x2_t *)&v482[16], v108, 1);
        v111 = *(float64x2_t *)(v61 + 160);
        v112 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v86.f64[0]), v473, v86, 1), v475, v111.f64[0]), v477, v111, 1);
        v113 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v86.f64[0]), *(float64x2_t *)v474, v86, 1), *(float64x2_t *)v476, v111.f64[0]), *(float64x2_t *)v478, v111, 1);
        v114 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v86.f64[0]), *(float64x2_t *)&v474[16], v86, 1), *(float64x2_t *)&v476[16], v111.f64[0]), *(float64x2_t *)&v478[16], v111, 1);
        v115 = *(float64x2_t *)(v61 + 176);
        v460 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v479, v115.f64[0]), v481, v115, 1);
        v427 = vmlaq_laneq_f64(vmlaq_n_f64(v113, *(float64x2_t *)v480, v115.f64[0]), *(float64x2_t *)v482, v115, 1);
        v116 = vmlaq_laneq_f64(vmlaq_n_f64(v114, *(float64x2_t *)&v480[16], v115.f64[0]), *(float64x2_t *)&v482[16], v115, 1);
        v117 = *(float64x2_t *)(v61 + 208);
        v457 = vmlaq_laneq_f64(vmlaq_n_f64(v456, v475, v117.f64[0]), v477, v117, 1);
        v453 = vmlaq_laneq_f64(vmlaq_n_f64(v452, *(float64x2_t *)v476, v117.f64[0]), *(float64x2_t *)v478, v117, 1);
        v449 = vmlaq_laneq_f64(vmlaq_n_f64(v448, *(float64x2_t *)&v476[16], v117.f64[0]), *(float64x2_t *)&v478[16], v117, 1);
        v118 = *(float64x2_t *)(v61 + 256);
        v119 = vmlaq_n_f64(v94, v110, *(double *)v476);
        v120 = vmlaq_laneq_f64(v97, v110, *(float64x2_t *)v476, 1);
        v121 = vmlaq_n_f64(v102, v110, *(double *)&v476[16]);
        v122 = vmlaq_laneq_f64(v103, v110, *(float64x2_t *)&v476[16], 1);
        v443 = vmlaq_laneq_f64(vmlaq_n_f64(v92, *(float64x2_t *)&v476[16], v118.f64[0]), *(float64x2_t *)&v478[16], v118, 1);
        v123 = vmlaq_laneq_f64(vmlaq_laneq_f64(v432, v110, v475, 1), v116, v477, 1);
        v124 = *(float64x2_t *)(v61 + 224);
        v125 = vmlaq_laneq_f64(vmlaq_n_f64(v457, v479, v124.f64[0]), v481, v124, 1);
        v126 = vmlaq_laneq_f64(vmlaq_n_f64(v453, *(float64x2_t *)v480, v124.f64[0]), *(float64x2_t *)v482, v124, 1);
        v127 = vmlaq_laneq_f64(vmlaq_n_f64(v449, *(float64x2_t *)&v480[16], v124.f64[0]), *(float64x2_t *)&v482[16], v124, 1);
        v128 = *(float64x2_t *)(v61 + 272);
        v129 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v436, v426, v475.f64[0]), v427, v477.f64[0]), v126, v479.f64[0]);
        v130 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v435, v110, v475.f64[0]), v116, v477.f64[0]), v127, v479.f64[0]);
        v131 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v434, v426, v475, 1), v427, v477, 1), v126, v479, 1);
        v132 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v429, v426, *(double *)v476), v427, *(double *)v478), v126, *(double *)v480);
        v133 = vmlaq_n_f64(vmlaq_n_f64(v119, v116, *(double *)v478), v127, *(double *)v480);
        v134 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v96, v426, *(float64x2_t *)v476, 1), v427, *(float64x2_t *)v478, 1), v126, *(float64x2_t *)v480, 1);
        v135 = vmlaq_laneq_f64(vmlaq_laneq_f64(v120, v116, *(float64x2_t *)v478, 1), v127, *(float64x2_t *)v480, 1);
        v136 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v100, v426, *(double *)&v476[16]), v427, *(double *)&v478[16]), v126, *(double *)&v480[16]);
        v137 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v101, v426, *(float64x2_t *)&v476[16], 1), v427, *(float64x2_t *)&v478[16], 1), v126, *(float64x2_t *)&v480[16], 1);
        v138 = vmlaq_n_f64(vmlaq_n_f64(v121, v116, *(double *)&v478[16]), v127, *(double *)&v480[16]);
        v139 = vmlaq_laneq_f64(vmlaq_laneq_f64(v122, v116, *(float64x2_t *)&v478[16], 1), v127, *(float64x2_t *)&v480[16], 1);
        v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v440, v475, v118.f64[0]), v477, v118, 1), v479, v128.f64[0]), v481, v128, 1);
        v141 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v91, *(float64x2_t *)v476, v118.f64[0]), *(float64x2_t *)v478, v118, 1), *(float64x2_t *)v480, v128.f64[0]), *(float64x2_t *)v482, v128, 1);
        v142 = vmlaq_laneq_f64(vmlaq_n_f64(v443, *(float64x2_t *)&v480[16], v128.f64[0]), *(float64x2_t *)&v482[16], v128, 1);
        v143 = vmlaq_n_f64(v129, v141, v481.f64[0]);
        v144 = vmlaq_n_f64(v130, v142, v481.f64[0]);
        v145 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v93, v109, v475, 1), v460, v477, 1), v125, v479, 1), v140, v481, 1);
        v146 = vmlaq_laneq_f64(v131, v141, v481, 1);
        v147 = vmlaq_laneq_f64(vmlaq_laneq_f64(v123, v127, v479, 1), v142, v481, 1);
        v148 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v431, v109, *(double *)v476), v460, *(double *)v478), v125, *(double *)v480), v140, *(double *)v482);
        v149 = vmlaq_n_f64(v132, v141, *(double *)v482);
        v150 = vmlaq_n_f64(v133, v142, *(double *)v482);
        v151 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v95, v109, *(float64x2_t *)v476, 1), v460, *(float64x2_t *)v478, 1), v125, *(float64x2_t *)v480, 1), v140, *(float64x2_t *)v482, 1);
        v152 = vmlaq_laneq_f64(v134, v141, *(float64x2_t *)v482, 1);
        v153 = vmlaq_laneq_f64(v135, v142, *(float64x2_t *)v482, 1);
        v154 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v98, v109, *(double *)&v476[16]), v460, *(double *)&v478[16]), v125, *(double *)&v480[16]), v140, *(double *)&v482[16]);
        v155 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v99, v109, *(float64x2_t *)&v476[16], 1), v460, *(float64x2_t *)&v478[16], 1), v125, *(float64x2_t *)&v480[16], 1), v140, *(float64x2_t *)&v482[16], 1);
        v156 = vmlaq_n_f64(v136, v141, *(double *)&v482[16]);
        v157 = vmlaq_laneq_f64(v137, v141, *(float64x2_t *)&v482[16], 1);
        v158 = vmlaq_n_f64(v138, v142, *(double *)&v482[16]);
        v159 = vmlaq_laneq_f64(v139, v142, *(float64x2_t *)&v482[16], 1);
        *(float64x2_t *)v61 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v438, v109, v475.f64[0]), v460, v477.f64[0]), v125, v479.f64[0]), v140, v481.f64[0]);
        *(float64x2_t *)(v61 + 16) = v143;
        *(float64x2_t *)(v61 + 32) = v144;
        *(float64x2_t *)(v61 + 48) = v145;
        *(float64x2_t *)(v61 + 64) = v146;
        *(float64x2_t *)(v61 + 80) = v147;
        *(float64x2_t *)(v61 + 96) = v148;
        *(float64x2_t *)(v61 + 112) = v149;
        *(float64x2_t *)(v61 + 128) = v150;
        *(float64x2_t *)(v61 + 144) = v151;
        *(float64x2_t *)(v61 + 160) = v152;
        *(float64x2_t *)(v61 + 176) = v153;
        *(float64x2_t *)(v61 + 192) = v154;
        *(float64x2_t *)(v61 + 208) = v156;
        *(float64x2_t *)(v61 + 224) = v158;
        *(float64x2_t *)(v61 + 240) = v155;
        *(float64x2_t *)(v61 + 256) = v157;
        *(float64x2_t *)(v61 + 272) = v159;
        if (a5)
        {
          v160 = 0;
          v161 = 0;
          *(float64x2_t *)object = v416;
          *(float64_t *)&object[16] = v417.f64[0];
          v473 = v415;
          *(float64_t *)v474 = v412.f64[0];
          v475 = v414;
          *(float64_t *)v476 = v413.f64[0];
          do
          {
            v477.f64[v160] = 0.0;
            v162 = v161 < 2;
            if (v161 < 2)
              ++v161;
            else
              v161 = 0;
            if (v162)
              ++v160;
            else
              v160 += 4;
          }
          while (v160 != 18);
          v163.f64[0] = v423;
          v163.f64[1] = v412.f64[0];
          v164.f64[0] = v36.f64[0];
          v164.f64[1] = v419.f64[0];
          v165 = vmulq_f64(v164, v163);
          v163.f64[0] = v415.f64[0];
          v163.f64[1] = v421;
          v164.f64[0] = v37.f64[0];
          v164.f64[1] = v36.f64[0];
          v166 = vmulq_f64(v164, v163);
          v164.f64[0] = v413.f64[0];
          v164.f64[1] = v414.f64[0];
          v167.f64[0] = v417.f64[0];
          v167.f64[1] = v416.f64[0];
          v168.f64[0] = v419.f64[0];
          v168.f64[1] = v37.f64[0];
          v169 = vmulq_f64(v168, v167);
          v170 = vmulq_f64(v168, v164);
          v164.f64[0] = v46.f64[0];
          v164.f64[1] = v413.f64[0];
          v171.f64[0] = v423;
          v171.f64[1] = v417.f64[0];
          v172.f64[0] = v37.f64[0];
          v172.f64[1] = v36.f64[0];
          v173.f64[0] = v37.f64[0];
          v173.f64[1] = v36.f64[0];
          v174 = vmlsq_f64(v170, v173, v164);
          v175 = vmlsq_f64(v169, v172, v171);
          v164.f64[0] = v412.f64[0];
          v164.f64[1] = v415.f64[0];
          v171.f64[0] = v36.f64[0];
          v171.f64[1] = v419.f64[0];
          v176 = (int8x16_t)vmlsq_f64(v166, v171, v164);
          v164.f64[0] = v416.f64[0];
          v164.f64[1] = v421;
          v171.f64[0] = v419.f64[0];
          v171.f64[1] = v37.f64[0];
          v177 = (int8x16_t)vmlsq_f64(v165, v171, v164);
          v178 = *(float64x2_t *)(a1 + 136);
          v180 = *(float64x2_t *)(a1 + 8);
          v179 = *(float64x2_t *)(a1 + 24);
          v447 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v416, v180.f64[0]), v415, v180, 1), v414, v179.f64[0]), v36, v179, 1);
          v446 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v417, v180.f64[0]), v412, v180, 1), v413, v179.f64[0]), v37, v179, 1);
          v182 = *(float64x2_t *)(a1 + 40);
          v181 = *(float64x2_t *)(a1 + 56);
          v445 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v416, v182.f64[0]), v415, v182, 1), v414, v181.f64[0]), v36, v181, 1);
          v444 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v417, v182.f64[0]), v412, v182, 1), v413, v181.f64[0]), v37, v181, 1);
          v184 = *(float64x2_t *)(a1 + 72);
          v183 = *(float64x2_t *)(a1 + 88);
          v442 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v416, v184.f64[0]), v415, v184, 1), v414, v183.f64[0]), v36, v183, 1);
          v185 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v417, v184.f64[0]), v412, v184, 1), v413, v183.f64[0]), v37, v183, 1);
          v186 = vextq_s8(v177, v176, 8uLL);
          *(float64x2_t *)&object[24] = v175;
          *(float64x2_t *)&v476[8] = v174;
          *(_QWORD *)&object[40] = v177.i64[0];
          *(_QWORD *)&v476[24] = *(_OWORD *)&vmlsq_f64(vmulq_f64(v36, v46), v419, v414);
          *(float64_t *)&v478[24] = v417.f64[0];
          *(float64_t *)&v480[24] = v412.f64[0];
          v177.i64[0] = *(_QWORD *)&v415.f64[0];
          v188 = *(float64x2_t *)(a1 + 104);
          v187 = *(float64x2_t *)(a1 + 120);
          *(float64_t *)&v177.i64[1] = v421;
          *(int8x16_t *)&v480[8] = v177;
          v439 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v416, v188.f64[0]), v415, v188, 1), v414, v187.f64[0]), v36, v187, 1);
          v441 = v185;
          v437 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v417, v188.f64[0]), v412, v188, 1), v413, v187.f64[0]), v37, v187, 1);
          v190 = *(float64x2_t *)(a1 + 152);
          v189 = *(float64x2_t *)(a1 + 168);
          v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v178.f64[0]), v473, v178, 1), v475, v190.f64[0]), v477, v190, 1), v479, v189.f64[0]), v481, v189, 1);
          *(_QWORD *)&v474[24] = v176.i64[1];
          *(int8x16_t *)&v474[8] = v186;
          v176.i64[0] = *(_QWORD *)&v416.f64[0];
          *(float64_t *)&v176.i64[1] = v423;
          *(int8x16_t *)&v478[8] = v176;
          v176.i64[0] = *(_QWORD *)&v414.f64[0];
          v176.i64[1] = *(_QWORD *)&v46.f64[0];
          *(int8x16_t *)&v482[8] = v176;
          *(float64_t *)&v482[24] = v413.f64[0];
          v192 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v178.f64[0]), *(float64x2_t *)v474, v178, 1), *(float64x2_t *)v476, v190.f64[0]), *(float64x2_t *)v478, v190, 1), *(float64x2_t *)v480, v189.f64[0]), *(float64x2_t *)v482, v189, 1);
          v193 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v178.f64[0]), *(float64x2_t *)&v474[16], v178, 1), *(float64x2_t *)&v476[16], v190.f64[0]), *(float64x2_t *)&v478[16], v190, 1), *(float64x2_t *)&v480[16], v189.f64[0]), *(float64x2_t *)&v482[16], v189, 1);
          v194 = *(float64x2_t *)(a1 + 184);
          v195 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v194.f64[0]), v473, v194, 1);
          v196 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v194.f64[0]), *(float64x2_t *)v474, v194, 1);
          v197 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v194.f64[0]), *(float64x2_t *)&v474[16], v194, 1);
          v198 = *(float64x2_t *)(a1 + 200);
          v199 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v475, v198.f64[0]), v477, v198, 1);
          v200 = vmlaq_laneq_f64(vmlaq_n_f64(v196, *(float64x2_t *)v476, v198.f64[0]), *(float64x2_t *)v478, v198, 1);
          v201 = vmlaq_laneq_f64(vmlaq_n_f64(v197, *(float64x2_t *)&v476[16], v198.f64[0]), *(float64x2_t *)&v478[16], v198, 1);
          v202 = *(float64x2_t *)(a1 + 216);
          v203 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v479, v202.f64[0]), v481, v202, 1);
          v204 = vmlaq_laneq_f64(vmlaq_n_f64(v200, *(float64x2_t *)v480, v202.f64[0]), *(float64x2_t *)v482, v202, 1);
          v205 = vmlaq_laneq_f64(vmlaq_n_f64(v201, *(float64x2_t *)&v480[16], v202.f64[0]), *(float64x2_t *)&v482[16], v202, 1);
          v206 = *(float64x2_t *)(a1 + 232);
          v207 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v206.f64[0]), v473, v206, 1);
          v208 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v206.f64[0]), *(float64x2_t *)v474, v206, 1);
          v209 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v206.f64[0]), *(float64x2_t *)&v474[16], v206, 1);
          v210 = *(float64x2_t *)(a1 + 328);
          v458 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v210.f64[0]), v473, v210, 1);
          v454 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v210.f64[0]), *(float64x2_t *)v474, v210, 1);
          v450 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v210.f64[0]), *(float64x2_t *)&v474[16], v210, 1);
          v211 = *(float64x2_t *)(a1 + 376);
          v433 = vmlaq_n_f64(vmulq_n_f64(v191, *(double *)object), v203, v473.f64[0]);
          v430 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)object), v204, v473.f64[0]);
          v428 = vmlaq_n_f64(vmulq_n_f64(v193, *(double *)object), v205, v473.f64[0]);
          v425 = vmlaq_laneq_f64(vmulq_laneq_f64(v191, *(float64x2_t *)object, 1), v203, v473, 1);
          v424 = vmlaq_laneq_f64(vmulq_laneq_f64(v192, *(float64x2_t *)object, 1), v204, v473, 1);
          v422 = vmlaq_n_f64(vmulq_n_f64(v191, *(double *)&object[16]), v203, *(double *)v474);
          v212 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)&object[16]), v204, *(double *)v474);
          v213 = vmlaq_laneq_f64(vmulq_laneq_f64(v191, *(float64x2_t *)&object[16], 1), v203, *(float64x2_t *)v474, 1);
          v214 = vmlaq_laneq_f64(vmulq_laneq_f64(v192, *(float64x2_t *)&object[16], 1), v204, *(float64x2_t *)v474, 1);
          v215 = vmlaq_n_f64(vmulq_n_f64(v191, *(double *)&object[32]), v203, *(double *)&v186.i64[1]);
          v216 = vmlaq_laneq_f64(vmulq_laneq_f64(v191, *(float64x2_t *)&object[32], 1), v203, *(float64x2_t *)&v474[16], 1);
          v217 = vmlaq_n_f64(vmulq_n_f64(v192, *(double *)&object[32]), v204, *(double *)&v186.i64[1]);
          v218 = vmlaq_laneq_f64(vmulq_laneq_f64(v192, *(float64x2_t *)&object[32], 1), v204, *(float64x2_t *)&v474[16], 1);
          v219 = vmlaq_n_f64(vmulq_n_f64(v193, *(double *)&object[32]), v205, *(double *)&v186.i64[1]);
          v220 = *(float64x2_t *)(a1 + 248);
          v221 = vmlaq_laneq_f64(vmlaq_n_f64(v207, v475, v220.f64[0]), v477, v220, 1);
          v222 = vmlaq_laneq_f64(vmlaq_n_f64(v208, *(float64x2_t *)v476, v220.f64[0]), *(float64x2_t *)v478, v220, 1);
          v223 = vmlaq_laneq_f64(vmlaq_n_f64(v209, *(float64x2_t *)&v476[16], v220.f64[0]), *(float64x2_t *)&v478[16], v220, 1);
          v224 = *(float64x2_t *)(a1 + 264);
          v225 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v479, v224.f64[0]), v481, v224, 1);
          v418 = vmlaq_laneq_f64(vmlaq_n_f64(v222, *(float64x2_t *)v480, v224.f64[0]), *(float64x2_t *)v482, v224, 1);
          v226 = vmlaq_laneq_f64(vmlaq_n_f64(v223, *(float64x2_t *)&v480[16], v224.f64[0]), *(float64x2_t *)&v482[16], v224, 1);
          v227 = *(float64x2_t *)(a1 + 296);
          v228 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v41->f64[0]), v473, *v41, 1), v475, v227.f64[0]), v477, v227, 1);
          v229 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v41->f64[0]), *(float64x2_t *)v474, *v41, 1), *(float64x2_t *)v476, v227.f64[0]), *(float64x2_t *)v478, v227, 1);
          v230 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v41->f64[0]), *(float64x2_t *)&v474[16], *v41, 1), *(float64x2_t *)&v476[16], v227.f64[0]), *(float64x2_t *)&v478[16], v227, 1);
          v231 = *(float64x2_t *)(a1 + 312);
          v232 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v479, v231.f64[0]), v481, v231, 1);
          v420 = vmlaq_laneq_f64(vmlaq_n_f64(v229, *(float64x2_t *)v480, v231.f64[0]), *(float64x2_t *)v482, v231, 1);
          v233 = vmlaq_laneq_f64(vmlaq_n_f64(v230, *(float64x2_t *)&v480[16], v231.f64[0]), *(float64x2_t *)&v482[16], v231, 1);
          v234 = *(float64x2_t *)(a1 + 344);
          v459 = vmlaq_laneq_f64(vmlaq_n_f64(v458, v475, v234.f64[0]), v477, v234, 1);
          v461 = v232;
          v455 = vmlaq_laneq_f64(vmlaq_n_f64(v454, *(float64x2_t *)v476, v234.f64[0]), *(float64x2_t *)v478, v234, 1);
          v451 = vmlaq_laneq_f64(vmlaq_n_f64(v450, *(float64x2_t *)&v476[16], v234.f64[0]), *(float64x2_t *)&v478[16], v234, 1);
          v235 = *(float64x2_t *)(a1 + 392);
          v236 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v193, *(float64x2_t *)object, 1), v205, v473, 1), v226, v475, 1);
          v237 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v193, *(double *)&object[16]), v205, *(double *)v474), v226, *(double *)v476);
          v238 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v193, *(float64x2_t *)&object[16], 1), v205, *(float64x2_t *)v474, 1), v226, *(float64x2_t *)v476, 1);
          v239 = vmlaq_n_f64(v219, v226, *(double *)&v476[16]);
          v240 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v193, *(float64x2_t *)&object[32], 1), v205, *(float64x2_t *)&v474[16], 1), v226, *(float64x2_t *)&v476[16], 1);
          v241 = vmlaq_laneq_f64(vmlaq_laneq_f64(v425, v225, v475, 1), v232, v477, 1);
          v242 = vmlaq_n_f64(vmlaq_n_f64(v422, v225, *(double *)v476), v232, *(double *)v478);
          v243 = vmlaq_laneq_f64(vmlaq_laneq_f64(v213, v225, *(float64x2_t *)v476, 1), v232, *(float64x2_t *)v478, 1);
          v244 = vmlaq_n_f64(vmlaq_n_f64(v215, v225, *(double *)&v476[16]), v232, *(double *)&v478[16]);
          v245 = vmlaq_laneq_f64(vmlaq_laneq_f64(v216, v225, *(float64x2_t *)&v476[16], 1), v232, *(float64x2_t *)&v478[16], 1);
          v246 = *(float64x2_t *)(a1 + 360);
          v247 = vmlaq_laneq_f64(vmlaq_n_f64(v459, v479, v246.f64[0]), v481, v246, 1);
          v248 = vmlaq_laneq_f64(vmlaq_n_f64(v455, *(float64x2_t *)v480, v246.f64[0]), *(float64x2_t *)v482, v246, 1);
          v249 = vmlaq_laneq_f64(vmlaq_n_f64(v451, *(float64x2_t *)&v480[16], v246.f64[0]), *(float64x2_t *)&v482[16], v246, 1);
          v250 = *(float64x2_t *)(a1 + 408);
          v251 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v433, v225, v475.f64[0]), v461, v477.f64[0]), v247, v479.f64[0]);
          v252 = vmlaq_laneq_f64(v241, v247, v479, 1);
          v253 = vmlaq_n_f64(v242, v247, *(double *)v480);
          v254 = vmlaq_laneq_f64(v243, v247, *(float64x2_t *)v480, 1);
          v255 = vmlaq_n_f64(v244, v247, *(double *)&v480[16]);
          v256 = vmlaq_laneq_f64(v245, v247, *(float64x2_t *)&v480[16], 1);
          v257 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v211.f64[0]), v473, v211, 1), v475, v235.f64[0]), v477, v235, 1), v479, v250.f64[0]), v481, v250, 1);
          v258 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v211.f64[0]), *(float64x2_t *)v474, v211, 1), *(float64x2_t *)v476, v235.f64[0]), *(float64x2_t *)v478, v235, 1), *(float64x2_t *)v480, v250.f64[0]), *(float64x2_t *)v482, v250, 1);
          v259 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[32], v211.f64[0]), *(float64x2_t *)&v474[16], v211, 1), *(float64x2_t *)&v476[16], v235.f64[0]), *(float64x2_t *)&v478[16], v235, 1), *(float64x2_t *)&v480[16], v250.f64[0]), *(float64x2_t *)&v482[16], v250, 1);
          v260 = vmlaq_n_f64(v251, v257, v481.f64[0]);
          v261 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v430, v418, v475.f64[0]), v420, v477.f64[0]), v248, v479.f64[0]), v258, v481.f64[0]);
          v262 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v428, v226, v475.f64[0]), v233, v477.f64[0]), v249, v479.f64[0]), v259, v481.f64[0]);
          v263 = vmlaq_laneq_f64(v252, v257, v481, 1);
          v264 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v424, v418, v475, 1), v420, v477, 1), v248, v479, 1), v258, v481, 1);
          v265 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v236, v233, v477, 1), v249, v479, 1), v259, v481, 1);
          v266 = vmlaq_n_f64(v253, v257, *(double *)v482);
          v267 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v212, v418, *(double *)v476), v420, *(double *)v478), v248, *(double *)v480), v258, *(double *)v482);
          v268 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v237, v233, *(double *)v478), v249, *(double *)v480), v259, *(double *)v482);
          v269 = vmlaq_laneq_f64(v254, v257, *(float64x2_t *)v482, 1);
          v270 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v214, v418, *(float64x2_t *)v476, 1), v420, *(float64x2_t *)v478, 1), v248, *(float64x2_t *)v480, 1), v258, *(float64x2_t *)v482, 1);
          v271 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v238, v233, *(float64x2_t *)v478, 1), v249, *(float64x2_t *)v480, 1), v259, *(float64x2_t *)v482, 1);
          v272 = vmlaq_n_f64(v255, v257, *(double *)&v482[16]);
          v273 = vmlaq_laneq_f64(v256, v257, *(float64x2_t *)&v482[16], 1);
          v274 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v217, v418, *(double *)&v476[16]), v420, *(double *)&v478[16]), v248, *(double *)&v480[16]), v258, *(double *)&v482[16]);
          v275 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v218, v418, *(float64x2_t *)&v476[16], 1), v420, *(float64x2_t *)&v478[16], 1), v248, *(float64x2_t *)&v480[16], 1), v258, *(float64x2_t *)&v482[16], 1);
          v276 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v239, v233, *(double *)&v478[16]), v249, *(double *)&v480[16]), v259, *(double *)&v482[16]);
          v277 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v240, v233, *(float64x2_t *)&v478[16], 1), v249, *(float64x2_t *)&v480[16], 1), v259, *(float64x2_t *)&v482[16], 1);
          *(float64x2_t *)(a1 + 8) = v447;
          *(float64x2_t *)(a1 + 24) = v446;
          *(float64x2_t *)(a1 + 40) = v445;
          *(float64x2_t *)(a1 + 56) = v444;
          *(float64x2_t *)(a1 + 72) = v442;
          *(float64x2_t *)(a1 + 88) = v441;
          *(float64x2_t *)(a1 + 104) = v439;
          *(float64x2_t *)(a1 + 120) = v437;
          *(float64x2_t *)(a1 + 136) = v260;
          *(float64x2_t *)(a1 + 152) = v261;
          *(float64x2_t *)(a1 + 168) = v262;
          *(float64x2_t *)(a1 + 184) = v263;
          *(float64x2_t *)(a1 + 200) = v264;
          *(float64x2_t *)(a1 + 216) = v265;
          *(float64x2_t *)(a1 + 232) = v266;
          *(float64x2_t *)(a1 + 248) = v267;
          *(float64x2_t *)(a1 + 264) = v268;
          *v41 = v269;
          *(float64x2_t *)(a1 + 296) = v270;
          *(float64x2_t *)(a1 + 312) = v271;
          *(float64x2_t *)(a1 + 328) = v272;
          *(float64x2_t *)(a1 + 344) = v274;
          *(float64x2_t *)(a1 + 360) = v276;
          *(float64x2_t *)(a1 + 376) = v273;
          *(float64x2_t *)(a1 + 392) = v275;
          *(float64x2_t *)(a1 + 408) = v277;
          v278 = *(_QWORD *)(a1 + 3248);
          v279 = *(_QWORD *)(a1 + 3216);
          if (!v278)
            v278 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 3224) - v279) >> 3);
          v340 = v278 - 1;
          v341 = v279 + 3160 * (v278 - 1);
          *(_QWORD *)v341 = *(_QWORD *)a1;
          v342 = *(_OWORD *)(a1 + 8);
          v343 = *(_OWORD *)(a1 + 24);
          v344 = *(_OWORD *)(a1 + 40);
          *(_OWORD *)(v341 + 56) = *(_OWORD *)(a1 + 56);
          *(_OWORD *)(v341 + 40) = v344;
          *(_OWORD *)(v341 + 24) = v343;
          *(_OWORD *)(v341 + 8) = v342;
          v345 = *(_OWORD *)(a1 + 72);
          v346 = *(_OWORD *)(a1 + 88);
          v347 = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(v341 + 120) = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(v341 + 104) = v347;
          *(_OWORD *)(v341 + 88) = v346;
          *(_OWORD *)(v341 + 72) = v345;
          memcpy((void *)(v341 + 136), (const void *)(a1 + 136), 0x120uLL);
          sub_20F821D40(v341 + 424, a1 + 424);
          v348 = v341 + 504;
          v349 = (__int128 *)(a1 + 504);
          v350 = *(unsigned __int8 *)(v341 + 3152);
          if (v350 == *(unsigned __int8 *)(a1 + 3152))
          {
            if (*(_BYTE *)(v341 + 3152))
            {
              v351 = *v349;
              *(_QWORD *)(v341 + 520) = *(_QWORD *)(a1 + 520);
              *(_OWORD *)v348 = v351;
              v352 = v279 + 3160 * v340;
              v353 = *(_OWORD *)(a1 + 528);
              *(_QWORD *)(v352 + 544) = *(_QWORD *)(a1 + 544);
              *(_OWORD *)(v352 + 528) = v353;
              v354 = *(_OWORD *)(a1 + 568);
              *(_OWORD *)(v352 + 552) = *(_OWORD *)(a1 + 552);
              *(_OWORD *)(v352 + 568) = v354;
              v356 = *(_OWORD *)(a1 + 616);
              v355 = *(_OWORD *)(a1 + 632);
              v357 = *(_OWORD *)(a1 + 600);
              *(_QWORD *)(v352 + 648) = *(_QWORD *)(a1 + 648);
              *(_OWORD *)(v352 + 616) = v356;
              *(_OWORD *)(v352 + 632) = v355;
              *(_OWORD *)(v352 + 600) = v357;
              *(_OWORD *)(v352 + 584) = *(_OWORD *)(a1 + 584);
              v359 = *(_OWORD *)(a1 + 688);
              v358 = *(_OWORD *)(a1 + 704);
              v360 = *(_OWORD *)(a1 + 672);
              *(_QWORD *)(v352 + 720) = *(_QWORD *)(a1 + 720);
              *(_OWORD *)(v352 + 688) = v359;
              *(_OWORD *)(v352 + 704) = v358;
              *(_OWORD *)(v352 + 672) = v360;
              *(_OWORD *)(v352 + 656) = *(_OWORD *)(a1 + 656);
              *(_OWORD *)(v352 + 728) = *(_OWORD *)(a1 + 728);
              v361 = *(_OWORD *)(a1 + 744);
              v362 = *(_OWORD *)(a1 + 760);
              v363 = *(_OWORD *)(a1 + 776);
              *(_QWORD *)(v352 + 792) = *(_QWORD *)(a1 + 792);
              *(_OWORD *)(v352 + 760) = v362;
              *(_OWORD *)(v352 + 776) = v363;
              *(_OWORD *)(v352 + 744) = v361;
              *(_OWORD *)(v352 + 800) = *(_OWORD *)(a1 + 800);
              v364 = *(_OWORD *)(a1 + 816);
              v365 = *(_OWORD *)(a1 + 832);
              v366 = *(_OWORD *)(a1 + 848);
              *(_QWORD *)(v352 + 864) = *(_QWORD *)(a1 + 864);
              *(_OWORD *)(v352 + 832) = v365;
              *(_OWORD *)(v352 + 848) = v366;
              *(_OWORD *)(v352 + 816) = v364;
              *(_OWORD *)(v352 + 872) = *(_OWORD *)(a1 + 872);
              v367 = *(_OWORD *)(a1 + 888);
              v368 = *(_OWORD *)(a1 + 904);
              v369 = *(_OWORD *)(a1 + 920);
              *(_QWORD *)(v352 + 936) = *(_QWORD *)(a1 + 936);
              *(_OWORD *)(v352 + 904) = v368;
              *(_OWORD *)(v352 + 920) = v369;
              *(_OWORD *)(v352 + 888) = v367;
              *(_OWORD *)(v352 + 944) = *(_OWORD *)(a1 + 944);
              v370 = *(_OWORD *)(a1 + 960);
              v371 = *(_OWORD *)(a1 + 976);
              v372 = *(_OWORD *)(a1 + 992);
              *(_QWORD *)(v352 + 1008) = *(_QWORD *)(a1 + 1008);
              *(_OWORD *)(v352 + 976) = v371;
              *(_OWORD *)(v352 + 992) = v372;
              *(_OWORD *)(v352 + 960) = v370;
              *(_OWORD *)(v352 + 1016) = *(_OWORD *)(a1 + 1016);
              v373 = *(_OWORD *)(a1 + 1032);
              v374 = *(_OWORD *)(a1 + 1048);
              v375 = *(_OWORD *)(a1 + 1064);
              *(_QWORD *)(v352 + 1080) = *(_QWORD *)(a1 + 1080);
              *(_OWORD *)(v352 + 1048) = v374;
              *(_OWORD *)(v352 + 1064) = v375;
              *(_OWORD *)(v352 + 1032) = v373;
              *(_OWORD *)(v352 + 1088) = *(_OWORD *)(a1 + 1088);
              v376 = *(_OWORD *)(a1 + 1104);
              v377 = *(_OWORD *)(a1 + 1120);
              v378 = *(_OWORD *)(a1 + 1136);
              *(_QWORD *)(v352 + 1152) = *(_QWORD *)(a1 + 1152);
              *(_OWORD *)(v352 + 1136) = v378;
              *(_OWORD *)(v352 + 1120) = v377;
              *(_OWORD *)(v352 + 1104) = v376;
              memcpy((void *)(v352 + 1160), (const void *)(a1 + 1160), 0x288uLL);
              v379 = *(_OWORD *)(a1 + 1808);
              *(_QWORD *)(v352 + 1824) = *(_QWORD *)(a1 + 1824);
              *(_OWORD *)(v352 + 1808) = v379;
              v380 = *(_QWORD *)(a1 + 1848);
              *(_OWORD *)(v352 + 1832) = *(_OWORD *)(a1 + 1832);
              *(_QWORD *)(v352 + 1848) = v380;
              memcpy((void *)(v352 + 1856), (const void *)(a1 + 1856), 0x288uLL);
              memcpy((void *)(v352 + 2504), (const void *)(a1 + 2504), 0x288uLL);
            }
          }
          else
          {
            v381 = (_BYTE *)(v341 + 3152);
            if (v350)
            {
              *v381 = 0;
            }
            else
            {
              v382 = *v349;
              *(_QWORD *)(v348 + 16) = *(_QWORD *)(a1 + 520);
              *(_OWORD *)v348 = v382;
              v383 = v279 + 3160 * v340;
              v384 = *(_OWORD *)(a1 + 528);
              *(_QWORD *)(v383 + 544) = *(_QWORD *)(a1 + 544);
              *(_OWORD *)(v383 + 528) = v384;
              v385 = *(_OWORD *)(a1 + 568);
              *(_OWORD *)(v383 + 552) = *(_OWORD *)(a1 + 552);
              *(_OWORD *)(v383 + 568) = v385;
              v387 = *(_OWORD *)(a1 + 616);
              v386 = *(_OWORD *)(a1 + 632);
              v388 = *(_OWORD *)(a1 + 600);
              *(_QWORD *)(v383 + 648) = *(_QWORD *)(a1 + 648);
              *(_OWORD *)(v383 + 616) = v387;
              *(_OWORD *)(v383 + 632) = v386;
              *(_OWORD *)(v383 + 600) = v388;
              *(_OWORD *)(v383 + 584) = *(_OWORD *)(a1 + 584);
              v390 = *(_OWORD *)(a1 + 688);
              v389 = *(_OWORD *)(a1 + 704);
              v391 = *(_OWORD *)(a1 + 672);
              *(_QWORD *)(v383 + 720) = *(_QWORD *)(a1 + 720);
              *(_OWORD *)(v383 + 688) = v390;
              *(_OWORD *)(v383 + 704) = v389;
              *(_OWORD *)(v383 + 672) = v391;
              *(_OWORD *)(v383 + 656) = *(_OWORD *)(a1 + 656);
              *(_OWORD *)(v383 + 728) = *(_OWORD *)(a1 + 728);
              v392 = *(_OWORD *)(a1 + 744);
              v393 = *(_OWORD *)(a1 + 760);
              v394 = *(_OWORD *)(a1 + 776);
              *(_QWORD *)(v383 + 792) = *(_QWORD *)(a1 + 792);
              *(_OWORD *)(v383 + 760) = v393;
              *(_OWORD *)(v383 + 776) = v394;
              *(_OWORD *)(v383 + 744) = v392;
              *(_OWORD *)(v383 + 800) = *(_OWORD *)(a1 + 800);
              v395 = *(_OWORD *)(a1 + 816);
              v396 = *(_OWORD *)(a1 + 832);
              v397 = *(_OWORD *)(a1 + 848);
              *(_QWORD *)(v383 + 864) = *(_QWORD *)(a1 + 864);
              *(_OWORD *)(v383 + 832) = v396;
              *(_OWORD *)(v383 + 848) = v397;
              *(_OWORD *)(v383 + 816) = v395;
              *(_OWORD *)(v383 + 872) = *(_OWORD *)(a1 + 872);
              v398 = *(_OWORD *)(a1 + 888);
              v399 = *(_OWORD *)(a1 + 904);
              v400 = *(_OWORD *)(a1 + 920);
              *(_QWORD *)(v383 + 936) = *(_QWORD *)(a1 + 936);
              *(_OWORD *)(v383 + 904) = v399;
              *(_OWORD *)(v383 + 920) = v400;
              *(_OWORD *)(v383 + 888) = v398;
              *(_OWORD *)(v383 + 944) = *(_OWORD *)(a1 + 944);
              v401 = *(_OWORD *)(a1 + 960);
              v402 = *(_OWORD *)(a1 + 976);
              v403 = *(_OWORD *)(a1 + 992);
              *(_QWORD *)(v383 + 1008) = *(_QWORD *)(a1 + 1008);
              *(_OWORD *)(v383 + 976) = v402;
              *(_OWORD *)(v383 + 992) = v403;
              *(_OWORD *)(v383 + 960) = v401;
              *(_OWORD *)(v383 + 1016) = *(_OWORD *)(a1 + 1016);
              v404 = *(_OWORD *)(a1 + 1032);
              v405 = *(_OWORD *)(a1 + 1048);
              v406 = *(_OWORD *)(a1 + 1064);
              *(_QWORD *)(v383 + 1080) = *(_QWORD *)(a1 + 1080);
              *(_OWORD *)(v383 + 1048) = v405;
              *(_OWORD *)(v383 + 1064) = v406;
              *(_OWORD *)(v383 + 1032) = v404;
              *(_OWORD *)(v383 + 1088) = *(_OWORD *)(a1 + 1088);
              v407 = *(_OWORD *)(a1 + 1104);
              v408 = *(_OWORD *)(a1 + 1120);
              v409 = *(_OWORD *)(a1 + 1136);
              *(_QWORD *)(v383 + 1152) = *(_QWORD *)(a1 + 1152);
              *(_OWORD *)(v383 + 1136) = v409;
              *(_OWORD *)(v383 + 1120) = v408;
              *(_OWORD *)(v383 + 1104) = v407;
              memcpy((void *)(v383 + 1160), (const void *)(a1 + 1160), 0x288uLL);
              v410 = *(_OWORD *)(a1 + 1808);
              *(_QWORD *)(v383 + 1824) = *(_QWORD *)(a1 + 1824);
              *(_OWORD *)(v383 + 1808) = v410;
              v411 = *(_QWORD *)(a1 + 1848);
              *(_OWORD *)(v383 + 1832) = *(_OWORD *)(a1 + 1832);
              *(_QWORD *)(v383 + 1848) = v411;
              memcpy((void *)(v383 + 1856), (const void *)(a1 + 1856), 0x288uLL);
              memcpy((void *)(v383 + 2504), (const void *)(a1 + 2504), 0x288uLL);
              *v381 = 1;
            }
          }
        }
        return;
      }
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 3168);
      if (*(_DWORD *)(v7 + 8 * ((*(_QWORD *)(a1 + 3176) - v7) >> 3) - 3156) == a3)
        goto LABEL_7;
    }
  }
  v280 = atomic_load((unsigned __int8 *)qword_254A6AD98);
  if ((v280 & 1) == 0 && __cxa_guard_acquire(qword_254A6AD98))
  {
    sub_21021D3D8(v462);
    sub_20E8610C0(object, "cv3d.vio");
    sub_20E8C4068(v462, (uint64_t)object, &qword_254A6AD90);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(qword_254A6AD98);
  }
  v469 = qword_254A6AD90;
  if (**(int **)(qword_254A6AD90 + 56) <= 4)
  {
    v281 = *(unsigned __int8 *)(qword_254A6AD90 + 72);
    v282 = sub_20E8C31DC(qword_254A6AD90, "OSLogSurrogateAppender", 1, 0);
    if (v281 || v282 != 0)
    {
      v284 = v282;
      v462[0] = &v469;
      v462[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v462[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v463 = 4;
      v464 = "unknown file";
      v465 = 234;
      v468 = 0;
      v466 = "unknown function";
      v467 = 0;
      v285 = *v462[0];
      v286 = *v462[0] + 16;
      if (*(char *)(*v462[0] + 39) < 0)
      {
        v288 = *(const char **)(v285 + 16);
        v287 = *(_QWORD *)(v285 + 24);
        v290 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v290 & 1) != 0)
          goto LABEL_39;
      }
      else
      {
        v287 = *(unsigned __int8 *)(*v462[0] + 39);
        v288 = (const char *)(*v462[0] + 16);
        v289 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v289 & 1) != 0)
          goto LABEL_39;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_39:
      if (byte_254A4A4F8[23] >= 0)
        v291 = byte_254A4A4F8;
      else
        v291 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v292 = byte_254A4A4F8[23];
      else
        v292 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v291, v288);
      v293 = &object[8];
      if (v292 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v292 >= 0x17)
      {
        v294 = v284;
        v295 = v288;
        v296 = v285;
        v297 = v281;
        v298 = v286;
        v299 = (v292 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v292 | 7) != 0x17)
          v299 = v292 | 7;
        v300 = v299 + 1;
        v293 = operator new(v299 + 1);
        *(_QWORD *)&object[24] = v300 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v293;
        *(_QWORD *)&object[16] = v292;
        v286 = v298;
        v281 = v297;
        v285 = v296;
        v288 = v295;
        v284 = v294;
      }
      else
      {
        object[31] = v292;
        if (!v292)
        {
LABEL_53:
          v293[v292] = 0;
          object[32] = 1;
          v301 = &object[40];
          if (v287 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v287 >= 0x17)
          {
            v302 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v287 | 7) != 0x17)
              v302 = v287 | 7;
            v303 = v302 + 1;
            v301 = operator new(v302 + 1);
            *(_QWORD *)&v473.f64[1] = v303 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v301;
            *(_QWORD *)&v473.f64[0] = v287;
          }
          else
          {
            HIBYTE(v473.f64[1]) = v287;
            if (!v287)
              goto LABEL_61;
          }
          memmove(v301, v288, v287);
LABEL_61:
          v301[v287] = 0;
          v474[0] = 1;
          v304 = *(NSObject **)object;
          if (SHIBYTE(v473.f64[1]) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v284 && *(_QWORD *)(v284 + 24))
          {
            v305 = _os_log_pack_size();
            v306 = (std::__shared_weak_count_vtbl *)operator new(v305, (std::align_val_t)8uLL);
            v307 = (std::__shared_weak_count *)operator new();
            v308 = v307;
            v307->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v307->__shared_owners_;
            v307->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v307->__shared_weak_owners_ = 0;
            v307[1].__vftable = v306;
            *(_QWORD *)object = v306;
            *(_QWORD *)&object[8] = v306;
            *(_QWORD *)&object[16] = v307;
            do
              v310 = __ldxr(p_shared_owners);
            while (__stxr(v310 + 1, p_shared_owners));
            memset(&object[24], 0, 24);
            do
              v311 = __ldaxr(p_shared_owners);
            while (__stlxr(v311 - 1, p_shared_owners));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
              std::__shared_weak_count::__release_weak(v308);
            }
            v312 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v313 = operator new();
            v314 = *(unsigned __int8 *)(v285 + 39);
            if ((v314 & 0x80u) == 0)
              v315 = v286;
            else
              v315 = *(_QWORD *)(v285 + 16);
            if ((v314 & 0x80u) != 0)
              v314 = *(_QWORD *)(v285 + 24);
            *(_QWORD *)v313 = v312;
            *(_OWORD *)(v313 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v313 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v313 + 40) = v315;
            *(_QWORD *)(v313 + 48) = v314;
            *(_BYTE *)(v313 + 56) = 16;
            v470 = 0;
            v471 = v313;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v284 + 24) + 40))(*(_QWORD *)(v284 + 24), &v471);
            v316 = v471;
            v471 = 0;
            if (v316)
            {
              v317 = *(std::__shared_weak_count **)(v316 + 32);
              if (v317)
              {
                v318 = (unint64_t *)&v317->__shared_owners_;
                do
                  v319 = __ldaxr(v318);
                while (__stlxr(v319 - 1, v318));
                if (!v319)
                {
                  ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                  std::__shared_weak_count::__release_weak(v317);
                }
              }
              v320 = *(std::__shared_weak_count **)(v316 + 16);
              if (v320)
              {
                v321 = (unint64_t *)&v320->__shared_owners_;
                do
                  v322 = __ldaxr(v321);
                while (__stlxr(v322 - 1, v321));
                if (!v322)
                {
                  ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                  std::__shared_weak_count::__release_weak(v320);
                }
              }
              MEMORY[0x212BC6398](v316, 0x10F0C40B62ED6C6);
              v323 = v470;
              v470 = 0;
              if (v323)
              {
                v324 = *(std::__shared_weak_count **)(v323 + 32);
                if (v324)
                {
                  v325 = (unint64_t *)&v324->__shared_owners_;
                  do
                    v326 = __ldaxr(v325);
                  while (__stlxr(v326 - 1, v325));
                  if (!v326)
                  {
                    ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                    std::__shared_weak_count::__release_weak(v324);
                  }
                }
                v327 = *(std::__shared_weak_count **)(v323 + 16);
                if (v327)
                {
                  v328 = (unint64_t *)&v327->__shared_owners_;
                  do
                    v329 = __ldaxr(v328);
                  while (__stlxr(v329 - 1, v328));
                  if (!v329)
                  {
                    ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                    std::__shared_weak_count::__release_weak(v327);
                  }
                }
                MEMORY[0x212BC6398](v323, 0x10F0C40B62ED6C6);
              }
            }
            v330 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v331 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                std::__shared_weak_count::__release_weak(v330);
              }
            }
            v333 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v334 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
          }
          else
          {
            os_log_type_enabled(v304, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v336 = (void *)_os_log_send_and_compose_impl();
            if (v336)
              free(v336);
          }
          if (v281)
          {
            sub_20E8C003C((uint64_t)v462, "Incompatible relative pose");
            sub_20E863570((uint64_t)v462);
          }
          sub_20E863570((uint64_t)v462);
          v337 = v468;
          if (v468)
          {
            v338 = (unint64_t *)&v468->__shared_owners_;
            do
              v339 = __ldaxr(v338);
            while (__stlxr(v339 - 1, v338));
            if (!v339)
            {
              ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
              std::__shared_weak_count::__release_weak(v337);
            }
          }
          return;
        }
      }
      memmove(v293, v291, v292);
      goto LABEL_53;
    }
  }
}

void sub_20F81FE70(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2B8]))
  {
    if (SLOBYTE(STACK[0x2B7]) < 0)
      operator delete((void *)STACK[0x2A0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20F81FEB0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
  {
    operator delete((void *)STACK[0x2A0]);
    __cxa_guard_abort(qword_254A6AD98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A6AD98);
  _Unwind_Resume(a1);
}

void sub_20F81FEF4(_Unwind_Exception *a1)
{
  sub_20E86E8C4((uint64_t *)&STACK[0x298]);
  sub_20E86E8C4((uint64_t *)&STACK[0x290]);
  sub_20E86E658((uint64_t)&STACK[0x2A0]);
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20F81FF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20F81FF54(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20F81FF70(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20F81FF84(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2C0]) && SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (STACK[0x2A0])
    os_release((void *)STACK[0x2A0]);
  sub_20E863714((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void *sub_20F81FFC8@<X0>(uint64_t a1@<X4>, int a2@<W7>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v10;
  float64x2_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void *v41;
  void *result;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v86;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  double v117;
  double v124;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  uint64_t v132;
  double v137;
  int8x16_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v220;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v244;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v276;
  float64x2_t v278;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  double v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  double v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64_t v383;
  float64x2_t v384;
  double v385;
  float64x2_t *v386;
  float64x2_t v387;
  float64x2_t v388;
  double v389;
  double v390;
  float64x2_t v391;
  float64x2_t v392;
  double v393;
  double v394;
  float64x2_t v395;
  double v396;
  double v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  double v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  double v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  double v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  uint64_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  uint64_t v431;
  float64x2_t v432;
  float64x2_t *__src;
  double v434;
  double v435;
  double v436;
  double v437;
  float64x2_t v438;
  _OWORD *v439;
  double v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  uint64_t v445;
  double v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  double v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v454;
  void *__dst;
  double __dsta;
  float64x2_t __dstb;
  float64x2_t v459;
  float64x2_t v460;
  __int128 v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  uint64_t v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  uint64_t v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  uint64_t v481;
  __int128 v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  uint64_t v486;
  float64x2_t v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  uint64_t v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  uint64_t v506;
  _BYTE v507[648];
  __int128 v508;
  uint64_t v509;
  __int128 v510;
  uint64_t v511;

  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  __src = (float64x2_t *)(a1 + 2000);
  v10 = a1 + 368;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a1 + 40);
  v11 = (float64x2_t *)(a3 + 368);
  v431 = a3 + 24;
  v439 = (_OWORD *)(a3 + 48);
  v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = v12;
  *(_QWORD *)(a3 + 144) = *(_QWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a3 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 128) = v13;
  v14 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 96) = v14;
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a1 + 152);
  v15 = *(_OWORD *)(a1 + 168);
  v16 = *(_OWORD *)(a1 + 184);
  v17 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a3 + 216) = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a3 + 200) = v17;
  *(_OWORD *)(a3 + 184) = v16;
  *(_OWORD *)(a3 + 168) = v15;
  v427 = a3 + 224;
  v18 = *(_OWORD *)(a1 + 224);
  v19 = *(_OWORD *)(a1 + 240);
  v20 = *(_OWORD *)(a1 + 256);
  v21 = *(_OWORD *)(a1 + 272);
  *(_QWORD *)(a3 + 288) = *(_QWORD *)(a1 + 288);
  *(_OWORD *)(a3 + 256) = v20;
  *(_OWORD *)(a3 + 272) = v21;
  *(_OWORD *)(a3 + 224) = v18;
  *(_OWORD *)(a3 + 240) = v19;
  v22 = *(_OWORD *)(a1 + 296);
  v23 = *(_OWORD *)(a1 + 312);
  v24 = *(_OWORD *)(a1 + 328);
  v25 = *(_OWORD *)(a1 + 344);
  *(_QWORD *)(a3 + 360) = *(_QWORD *)(a1 + 360);
  *(_OWORD *)(a3 + 328) = v24;
  *(_OWORD *)(a3 + 344) = v25;
  *(_OWORD *)(a3 + 296) = v22;
  *(_OWORD *)(a3 + 312) = v23;
  v26 = *(_OWORD *)(a1 + 368);
  v27 = *(_OWORD *)(a1 + 384);
  v28 = *(_OWORD *)(a1 + 400);
  v29 = *(_OWORD *)(a1 + 416);
  *(_QWORD *)(a3 + 432) = *(_QWORD *)(a1 + 432);
  *(_OWORD *)(a3 + 400) = v28;
  *(_OWORD *)(a3 + 416) = v29;
  *(_OWORD *)(a3 + 368) = v26;
  *(_OWORD *)(a3 + 384) = v27;
  v30 = *(_OWORD *)(a1 + 440);
  v31 = *(_OWORD *)(a1 + 456);
  v32 = *(_OWORD *)(a1 + 472);
  v33 = *(_OWORD *)(a1 + 488);
  *(_QWORD *)(a3 + 504) = *(_QWORD *)(a1 + 504);
  *(_OWORD *)(a3 + 472) = v32;
  *(_OWORD *)(a3 + 488) = v33;
  *(_OWORD *)(a3 + 440) = v30;
  *(_OWORD *)(a3 + 456) = v31;
  v445 = a3 + 512;
  v34 = *(_OWORD *)(a1 + 512);
  v35 = *(_OWORD *)(a1 + 528);
  v36 = *(_OWORD *)(a1 + 544);
  v37 = *(_OWORD *)(a1 + 560);
  *(_QWORD *)(a3 + 576) = *(_QWORD *)(a1 + 576);
  *(_OWORD *)(a3 + 544) = v36;
  *(_OWORD *)(a3 + 560) = v37;
  *(_OWORD *)(a3 + 512) = v34;
  *(_OWORD *)(a3 + 528) = v35;
  *(_OWORD *)(a3 + 584) = *(_OWORD *)(a1 + 584);
  v38 = *(_OWORD *)(a1 + 600);
  v39 = *(_OWORD *)(a1 + 616);
  v40 = *(_OWORD *)(a1 + 632);
  *(_QWORD *)(a3 + 648) = *(_QWORD *)(a1 + 648);
  *(_OWORD *)(a3 + 632) = v40;
  *(_OWORD *)(a3 + 616) = v39;
  *(_OWORD *)(a3 + 600) = v38;
  __dst = (void *)(a3 + 656);
  memcpy((void *)(a3 + 656), (const void *)(a1 + 656), 0x288uLL);
  *(_OWORD *)(a3 + 1304) = *(_OWORD *)(a1 + 1304);
  *(_QWORD *)(a3 + 1320) = *(_QWORD *)(a1 + 1320);
  *(_OWORD *)(a3 + 1328) = *(_OWORD *)(a1 + 1328);
  *(_QWORD *)(a3 + 1344) = *(_QWORD *)(a1 + 1344);
  memcpy((void *)(a3 + 1352), (const void *)(a1 + 1352), 0x288uLL);
  v386 = (float64x2_t *)(a3 + 2000);
  memcpy((void *)(a3 + 2000), __src, 0x288uLL);
  if (a2)
    memcpy(__dst, __src, 0x288uLL);
  sub_20F8228A8();
  *(_OWORD *)a3 = v461;
  *(_QWORD *)(a3 + 16) = v462;
  *(_OWORD *)v431 = v463;
  *(_QWORD *)(v431 + 16) = v464;
  *v439 = v465;
  v439[1] = v466;
  *(_OWORD *)(a3 + 112) = v469;
  *(_OWORD *)(a3 + 128) = v470;
  *(_QWORD *)(a3 + 144) = v471;
  *(_OWORD *)(a3 + 80) = v467;
  *(_OWORD *)(a3 + 96) = v468;
  *(_QWORD *)(a3 + 216) = v476;
  *(_OWORD *)(a3 + 184) = v474;
  *(_OWORD *)(a3 + 200) = v475;
  *(_OWORD *)(a3 + 152) = v472;
  *(_OWORD *)(a3 + 168) = v473;
  *(_QWORD *)(v427 + 64) = v481;
  *(_OWORD *)(v427 + 32) = v479;
  *(_OWORD *)(v427 + 48) = v480;
  *(_OWORD *)v427 = v477;
  *(_OWORD *)(v427 + 16) = v478;
  *(_QWORD *)(a3 + 360) = v486;
  *(_OWORD *)(a3 + 328) = v484;
  *(_OWORD *)(a3 + 344) = v485;
  *(_OWORD *)(a3 + 296) = v482;
  *(_OWORD *)(a3 + 312) = v483;
  *(_QWORD *)(a3 + 432) = v491;
  *(_OWORD *)(a3 + 400) = v489;
  *(_OWORD *)(a3 + 416) = v490;
  *v11 = v487;
  *(_OWORD *)(a3 + 384) = v488;
  *(_QWORD *)(a3 + 504) = v496;
  *(_OWORD *)(a3 + 472) = v494;
  *(_OWORD *)(a3 + 488) = v495;
  *(_OWORD *)(a3 + 440) = v492;
  *(_OWORD *)(a3 + 456) = v493;
  *(_QWORD *)(v445 + 64) = v501;
  *(_OWORD *)(v445 + 32) = v499;
  *(_OWORD *)(v445 + 48) = v500;
  *(_OWORD *)v445 = v497;
  *(_OWORD *)(v445 + 16) = v498;
  *(_QWORD *)(a3 + 648) = v506;
  *(_OWORD *)(a3 + 616) = v504;
  *(_OWORD *)(a3 + 632) = v505;
  *(_OWORD *)(a3 + 584) = v502;
  *(_OWORD *)(a3 + 600) = v503;
  v41 = __dst;
  result = memcpy(__dst, v507, 0x288uLL);
  *(_OWORD *)(a3 + 1304) = v508;
  *(_QWORD *)(a3 + 1320) = v509;
  *(_OWORD *)(a3 + 1328) = v510;
  *(_QWORD *)(a3 + 1344) = v511;
  v450 = a6;
  __dsta = a5;
  v49 = a4;
  if (a4.f64[0] <= 0.0)
  {
    result = (void *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/InertialSensor/include/VIO/InertialSensor/PreintegratePropagatorArithmetic.hpp", 374, (uint64_t)"dt > 0", 6, (uint64_t)"The time difference cannot be negative", 38, (void (*)(void **))sub_21023DDB0);
    v49 = a4;
    if ((_DWORD)result)
      abort();
  }
  v50 = *(double *)(a3 + 48);
  v51 = *(double *)(a3 + 56);
  v43.f64[0] = v50 * v50;
  v52 = v50 * v51;
  v53 = *(double *)(a3 + 64);
  v54 = *(double *)(a3 + 72);
  v55 = v50 * v53;
  v56 = v50 * v54;
  v44.f64[0] = v51 * v51;
  v57 = v51 * v53;
  v58 = v51 * v54;
  v59 = v53 * v53;
  v60 = v53 * v54;
  v61 = v54 * v54;
  v62.f64[0] = v43.f64[0] + v44.f64[0] - v59 - v61;
  v62.f64[1] = v57 - v56 + v57 - v56;
  v63 = v55 + v58 + v55 + v58;
  v64.f64[0] = v57 + v56 + v57 + v56;
  v64.f64[1] = v43.f64[0] - v44.f64[0] + v59 - v61;
  v65 = v60 - v52 + v60 - v52;
  v66.f64[0] = v58 - v55 + v58 - v55;
  v66.f64[1] = v52 + v60 + v52 + v60;
  v67 = v43.f64[0] - v44.f64[0] - v59 + v61;
  v68 = *(double *)(a1 + 48);
  v69 = *(double *)(a1 + 56);
  v70 = v68 * v69;
  v43.f64[0] = *(float64_t *)(a1 + 64);
  v71 = *(double *)(a1 + 72);
  v72 = v68 * v43.f64[0];
  v73 = v69 * v43.f64[0];
  v47.f64[0] = v69 * v71;
  v74 = v43.f64[0] * v43.f64[0];
  v48.f64[0] = v43.f64[0] * v71;
  v75 = v71 * v71;
  v76 = v68 * v68 + v69 * v69 - v43.f64[0] * v43.f64[0] - v71 * v71;
  v43.f64[0] = v69 * v43.f64[0] - v68 * v71 + v69 * v43.f64[0] - v68 * v71;
  v77 = v72 + v69 * v71 + v72 + v69 * v71;
  v44.f64[0] = v73 + v68 * v71 + v73 + v68 * v71;
  v78 = v68 * v68 - v69 * v69;
  v79 = v78 + v74 - v71 * v71;
  v80 = v48.f64[0] - v68 * v69 + v48.f64[0] - v68 * v69;
  v81 = v47.f64[0] - v72 + v47.f64[0] - v72;
  v45.f64[0] = v70 + v48.f64[0] + v70 + v48.f64[0];
  v82 = v78 - v74 + v75;
  v398 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v76), v64, v44.f64[0]), v66, v81);
  v434 = v63 * v76 + v65 * v44.f64[0] + v67 * v81;
  v83 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v43.f64[0]), v64, v79), v66, v45.f64[0]);
  v435 = v63 * v43.f64[0] + v65 * v79 + v67 * v45.f64[0];
  v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v77), v64, v80), v66, v82);
  v436 = v63 * v77 + v65 * v80 + v67 * v82;
  v46.f64[0] = *(float64_t *)(a3 + 384);
  v47.f64[0] = *(float64_t *)(a3 + 408);
  v48.f64[0] = *(float64_t *)(a3 + 432);
  v66.f64[0] = *(float64_t *)(v10 + 16);
  _Q22 = *(float64x2_t *)v10;
  v64.f64[0] = *(float64_t *)(v10 + 40);
  v86 = *(float64x2_t *)(v10 + 24);
  v62.f64[0] = *(float64_t *)(v10 + 64);
  _Q3 = *(float64x2_t *)(v10 + 48);
  v88 = vsubq_f64(v46, v66);
  v89 = vsubq_f64(*v11, *(float64x2_t *)v10);
  v90 = vsubq_f64(v47, v64);
  v91 = vsubq_f64(*(float64x2_t *)(a3 + 392), v86);
  v92 = vsubq_f64(v48, v62);
  v93 = vsubq_f64(*(float64x2_t *)(a3 + 416), _Q3);
  v142 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v76), v91, v44.f64[0]), v93, v81);
  v94 = vmlad_n_f64(vmlad_n_f64(v76 * v88.f64[0], v44.f64[0], v90.f64[0]), v81, v92.f64[0]);
  v95 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v43.f64[0]), v91, v79), v93, v45.f64[0]);
  _D10 = vmlad_n_f64(vmlad_n_f64(v43.f64[0] * v88.f64[0], v79, v90.f64[0]), v45.f64[0], v92.f64[0]);
  v97 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v89, v77), v91, v80), v93, v82);
  v98 = vmlad_n_f64(vmlad_n_f64(v77 * v88.f64[0], v80, v90.f64[0]), v82, v92.f64[0]);
  v88.f64[0] = *(float64_t *)(a3 + 600);
  v90.f64[0] = *(float64_t *)(a3 + 624);
  v92.f64[0] = *(float64_t *)(v10 + 232);
  v99 = vsubq_f64(v88, v92);
  v100 = *(float64x2_t *)(v10 + 216);
  v101 = vsubq_f64(*(float64x2_t *)(a3 + 584), v100);
  v100.f64[0] = *(float64_t *)(v10 + 256);
  v102 = vsubq_f64(v90, v100);
  v103 = *(float64x2_t *)(v10 + 240);
  v104 = vsubq_f64(*(float64x2_t *)(a3 + 608), v103);
  v103.f64[0] = *(float64_t *)(a3 + 648);
  v93.f64[0] = *(float64_t *)(v10 + 280);
  v105 = vmlsq_f64(v99, v49, v66);
  v106 = vmlsq_lane_f64(v101, *(float64x2_t *)v10, v49.f64[0], 0);
  *(_QWORD *)&v102.f64[0] = *(_OWORD *)&vmlsq_f64(v102, v49, v64);
  v107 = vmlsq_lane_f64(v104, v86, v49.f64[0], 0);
  *(_QWORD *)&v103.f64[0] = *(_OWORD *)&vmlsq_f64(vsubq_f64(v103, v93), v49, v62);
  v108 = vmlsq_lane_f64(vsubq_f64(*(float64x2_t *)(a3 + 632), *(float64x2_t *)(v10 + 264)), _Q3, v49.f64[0], 0);
  v109 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v106, v76), v107, v44.f64[0]), v108, v81);
  _Q22.f64[0] = vmlad_n_f64(vmlad_n_f64(v76 * v105.f64[0], v44.f64[0], v102.f64[0]), v81, v103.f64[0]);
  v110 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v106, v43.f64[0]), v107, v79), v108, v45.f64[0]);
  _Q3.f64[0] = vmlad_n_f64(vmlad_n_f64(v43.f64[0] * v105.f64[0], v79, v102.f64[0]), v45.f64[0], v103.f64[0]);
  v111 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v106, v77), v107, v80), v108, v82);
  v105.f64[0] = vmlad_n_f64(vmlad_n_f64(v77 * v105.f64[0], v80, v102.f64[0]), v82, v103.f64[0]);
  v112.f64[0] = *(float64_t *)(a3 + 1568);
  v112.f64[1] = *(float64_t *)(a3 + 1648);
  v43.f64[0] = *(float64_t *)(a3 + 1728);
  v113 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49.f64[0], 0), v112);
  *(float64_t *)(a3 + 1568) = v113.f64[0];
  *(float64_t *)(a3 + 1648) = v113.f64[1];
  *(_QWORD *)(a3 + 1728) = *(_OWORD *)&vaddq_f64(v49, v43);
  v44.f64[0] = *(float64_t *)(a3 + 1824);
  v114 = *(float64x2_t *)(a3 + 1808);
  v108.f64[0] = *(float64_t *)(a3 + 1896);
  v115 = *(float64x2_t *)(a3 + 1880);
  _Q0 = *(float64x2_t *)(a3 + 1832);
  v117 = *(double *)(a3 + 1848);
  __asm { FMLA            D2, D3, V0.D[1] }
  v45.f64[0] = _D2 + v105.f64[0] * v117;
  _Q2 = *(float64x2_t *)(a3 + 1904);
  v124 = *(double *)(a3 + 1920);
  __asm { FMLA            D4, D3, V2.D[1] }
  v86.f64[0] = _D4 + v105.f64[0] * v124;
  _Q4 = *(float64x2_t *)(a3 + 1976);
  v66.f64[0] = *(float64_t *)(a3 + 1800);
  _Q18 = vaddq_f64(v66, vmlaq_f64(v45, v49, v44));
  v128 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109, _Q0.f64[0]), v110, _Q0, 1), v111, v117), v114, v49.f64[0]);
  v129 = vaddq_f64(*(float64x2_t *)(a3 + 1784), v128);
  v128.f64[0] = *(float64_t *)(a3 + 1872);
  *(_QWORD *)&v86.f64[0] = *(_OWORD *)&vaddq_f64(v128, vmlaq_f64(v86, v49, v108));
  v130 = vaddq_f64(*(float64x2_t *)(a3 + 1856), vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109, _Q2.f64[0]), v110, _Q2, 1), v111, v124), v115, v49.f64[0]));
  v446 = _Q22.f64[0];
  v394 = _Q3.f64[0];
  v395 = v110;
  __asm { FMLA            D22, D3, V4.D[1] }
  v128.f64[0] = *(float64_t *)(a3 + 1992);
  v397 = v105.f64[0];
  _Q22.f64[0] = _Q22.f64[0] + v105.f64[0] * v128.f64[0];
  v105.f64[0] = *(float64_t *)(a3 + 1968);
  v106.f64[0] = *(float64_t *)(a3 + 1944);
  *(_QWORD *)&_Q22.f64[0] = *(_OWORD *)&vaddq_f64(v106, vmlaq_f64(_Q22, v49, v105));
  v420 = v109;
  v392 = v111;
  v141 = *(float64x2_t *)(a3 + 1952);
  v131 = vaddq_f64(*(float64x2_t *)(a3 + 1928), vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109, _Q4.f64[0]), v110, _Q4, 1), v111, v128.f64[0]), v141, v49.f64[0]));
  *(float64x2_t *)(a3 + 1784) = v129;
  *(float64_t *)(a3 + 1800) = _Q18.f64[0];
  *(float64x2_t *)(a3 + 1856) = v130;
  *(float64_t *)(a3 + 1872) = v86.f64[0];
  *(float64x2_t *)(a3 + 1928) = v131;
  *(float64_t *)(a3 + 1944) = _Q22.f64[0];
  __asm { FMLA            D18, D10, V0.D[1] }
  _Q18.f64[0] = _Q18.f64[0] + v98 * v117;
  v132 = *(_OWORD *)&vaddq_f64(v44, _Q18);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, _Q0.f64[0]), v95, _Q0, 1), v97, v117);
  _Q16 = vaddq_f64(v114, _Q18);
  __asm { FMLA            D18, D10, V2.D[1] }
  _Q18.f64[0] = _Q18.f64[0] + v98 * v124;
  *(_QWORD *)&v110.f64[0] = *(_OWORD *)&vaddq_f64(v108, _Q18);
  _Q18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, _Q2.f64[0]), v95, _Q2, 1), v97, v124);
  _Q6 = vaddq_f64(v115, _Q18);
  v137 = _D10;
  __asm { FMLA            D18, D10, V4.D[1] }
  v393 = v98;
  _Q18.f64[0] = _Q18.f64[0] + v98 * v128.f64[0];
  v138 = (int8x16_t)v142;
  *(float64x2_t *)(a3 + 1808) = _Q16;
  *(_QWORD *)(a3 + 1824) = v132;
  *(float64x2_t *)(a3 + 1880) = _Q6;
  *(float64_t *)(a3 + 1896) = v110.f64[0];
  *(float64x2_t *)(a3 + 1952) = vaddq_f64(v141, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v142, _Q4.f64[0]), v95, _Q4, 1), v97, v128.f64[0]));
  *(_QWORD *)(a3 + 1968) = *(_OWORD *)&vaddq_f64(v105, _Q18);
  v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v398, _Q0.f64[0]), v83, _Q0, 1), v84, v117);
  _Q16.f64[0] = v435;
  __asm { FMLA            D6, D16, V0.D[1] }
  _Q0.f64[0] = _Q6.f64[0] + v436 * v117;
  v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v398, _Q2.f64[0]), v83, _Q2, 1), v84, v124);
  __asm { FMLA            D6, D16, V2.D[1] }
  _Q2.f64[0] = _Q6.f64[0] + v436 * v124;
  v141.f64[0] = v398.f64[0];
  v142.f64[0] = v83.f64[0];
  __asm { FMLA            D6, D16, V4.D[1] }
  *(float64_t *)(a3 + 1848) = _Q0.f64[0];
  *(float64x2_t *)(a3 + 1832) = v139;
  *(float64_t *)(a3 + 1920) = _Q2.f64[0];
  *(float64x2_t *)(a3 + 1904) = v140;
  *(double *)(a3 + 1992) = _Q6.f64[0] + v436 * v128.f64[0];
  *(float64x2_t *)(a3 + 1976) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v398, _Q4.f64[0]), v83, _Q4, 1), v84, v128.f64[0]);
  if (a2)
  {
    v143.f64[0] = *(float64_t *)(a3 + 656);
    v143.f64[1] = *(float64_t *)(a3 + 736);
    v144.f64[0] = *(float64_t *)(a3 + 816);
    v144.f64[1] = *(float64_t *)(a3 + 896);
    v145.f64[0] = *(float64_t *)(a3 + 976);
    v145.f64[1] = *(float64_t *)(a3 + 1056);
    v146.f64[0] = *(float64_t *)(a3 + 1136);
    v146.f64[1] = *(float64_t *)(a3 + 1216);
    v147 = (float64x2_t)vdupq_lane_s64(0x7FF8000000000000, 0);
    v147.f64[0] = *(float64_t *)(a3 + 1296);
    if (vminnmvq_f64(vminnmq_f64(vminnmq_f64(vminnmq_f64(v143, v147), v145), vminnmq_f64(v144, v146))) > 0.0)
      return memcpy(v386, v41, 0x288uLL);
  }
  _Q0 = vaddq_f64(*__src, (float64x2_t)0);
  _D10 = 0;
  _Q1 = vaddq_f64(__src[1], (float64x2_t)0);
  v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q0.f64[0]), (float64x2_t)xmmword_2102DD520, _Q0, 1), (float64x2_t)0, _Q1.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q1, 1);
  v152 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q0.f64[0]), (float64x2_t)0, _Q0, 1);
  v153 = vmlaq_laneq_f64(vmlaq_n_f64(v152, (float64x2_t)xmmword_21030D320, _Q1.f64[0]), (float64x2_t)xmmword_2102DD520, _Q1, 1);
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(v152, (float64x2_t)0, _Q1.f64[0]), (float64x2_t)0, _Q1, 1);
  __asm
  {
    FMLA            D28, D10, V0.D[1]
    FMLA            D28, D10, V1.D[1]
  }
  *(_QWORD *)&v141.f64[1] = vextq_s8((int8x16_t)v398, (int8x16_t)v398, 8uLL).u64[0];
  _Q2 = vaddq_f64(__src[2], (float64x2_t)0);
  _Q0.f64[0] = 0.0;
  _Q0.f64[1] = a4.f64[0];
  v432 = _Q0;
  v158 = vmlaq_laneq_f64(vmlaq_n_f64(v151, _Q0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  v159 = vmlaq_laneq_f64(vmlaq_n_f64(v153, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q2, 1);
  v160 = vmlaq_laneq_f64(vmlaq_n_f64(v154, (float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1);
  v161 = vmlaq_laneq_f64(vmlaq_n_f64(v154, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  __asm { FMLA            D28, D10, V2.D[1] }
  v379 = v83;
  *(_QWORD *)&v142.f64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
  _Q2 = vaddq_f64(__src[3], (float64x2_t)0);
  _Q1.f64[0] = v394;
  _Q19 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v420, _Q2.f64[0]), v395, _Q2, 1);
  _Q0.f64[0] = v446;
  v382 = (float64x2_t)v138;
  *(_QWORD *)&_Q0.f64[1] = v138.i64[0];
  v442 = _Q0;
  v165 = vmlaq_n_f64(v159, _Q0, _Q2.f64[0]);
  *(_QWORD *)&_Q0.f64[0] = vextq_s8(v138, v138, 8uLL).u64[0];
  _Q0.f64[1] = v94;
  v361 = _Q0;
  v384 = v95;
  v385 = v137;
  _Q1.f64[1] = v95.f64[0];
  v166 = vmlaq_laneq_f64(v165, _Q1, _Q2, 1);
  *(_QWORD *)&v158.f64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
  v158.f64[1] = v137;
  v167 = vmlaq_laneq_f64(vmlaq_n_f64(v160, _Q0, _Q2.f64[0]), v158, _Q2, 1);
  v168 = v158;
  _Q0 = v141;
  v424 = v141;
  v428 = v142;
  _Q3 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v141, _Q2.f64[0]), v142, _Q2, 1);
  _D30 = v435;
  __asm { FMLA            D28, D30, V2.D[1] }
  _Q25.f64[0] = v84.f64[0];
  v380 = v84;
  v174 = (float64x2_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL);
  _Q25.f64[1] = v174.f64[0];
  v174.f64[0] = __src[4].f64[0];
  *(_QWORD *)&v174.f64[0] = *(_OWORD *)&vaddq_f64(v174, (float64x2_t)0);
  v399 = vmlaq_n_f64(_Q19, v111, v174.f64[0]);
  v175.f64[0] = v397;
  v377 = v97;
  v175.f64[1] = v97.f64[0];
  v373 = vmlaq_n_f64(v166, v175, v174.f64[0]);
  v391 = v175;
  *(_QWORD *)&v176.f64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
  v176.f64[1] = v393;
  v415 = vmlaq_n_f64(v167, v176, v174.f64[0]);
  v422 = vmlaq_n_f64(_Q3, _Q25, v174.f64[0]);
  v401 = vmlad_n_f64(_D28, v436, v174.f64[0]);
  _Q2 = vaddq_f64(*(float64x2_t *)((char *)__src + 72), (float64x2_t)0);
  v178 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1);
  v179 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  __asm { FMLA            D3, D10, V2.D[1] }
  _Q2 = vaddq_f64(*(float64x2_t *)((char *)__src + 88), (float64x2_t)0);
  v181 = vmlaq_laneq_f64(vmlaq_n_f64(v178, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q2, 1);
  v182 = vmlaq_laneq_f64(vmlaq_n_f64(v179, (float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1);
  v183 = vmlaq_laneq_f64(vmlaq_n_f64(v179, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  __asm { FMLA            D3, D10, V2.D[1] }
  _Q2 = vaddq_f64(*(float64x2_t *)((char *)__src + 104), (float64x2_t)0);
  v185 = vmlaq_laneq_f64(vmlaq_n_f64(v181, v432, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  v186 = vmlaq_laneq_f64(vmlaq_n_f64(v182, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q2, 1);
  v187 = vmlaq_laneq_f64(vmlaq_n_f64(v183, (float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1);
  v188 = vmlaq_laneq_f64(vmlaq_n_f64(v183, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  __asm { FMLA            D3, D10, V2.D[1] }
  _Q2.f64[0] = v450 * v450 * a4.f64[0];
  _Q18 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)_Q2, 8uLL), *(float64x2_t *)((char *)__src + 232));
  _Q17 = vaddq_f64((float64x2_t)*(unint64_t *)&_Q2.f64[0], __src[20]);
  _Q5 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)*(unint64_t *)&_Q2.f64[0], 8uLL), *(float64x2_t *)((char *)__src + 392));
  _Q2 = vaddq_f64(*(float64x2_t *)((char *)__src + 120), (float64x2_t)0);
  _Q20 = vmlaq_laneq_f64(vmlaq_n_f64(v185, v420, _Q2.f64[0]), v395, _Q2, 1);
  v194 = vmlaq_laneq_f64(vmlaq_n_f64(v186, v442, _Q2.f64[0]), _Q1, _Q2, 1);
  v195 = vmlaq_laneq_f64(vmlaq_n_f64(v187, v361, _Q2.f64[0]), v168, _Q2, 1);
  v196 = vmlaq_laneq_f64(vmlaq_n_f64(v188, _Q0, _Q2.f64[0]), v142, _Q2, 1);
  __asm { FMLA            D19, D30, V2.D[1] }
  _Q2.f64[0] = __src[8].f64[1];
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vaddq_f64(_Q2, (float64x2_t)0);
  v443 = vmlaq_n_f64(_Q20, v392, _Q2.f64[0]);
  v197 = vmlaq_n_f64(v194, v175, _Q2.f64[0]);
  v375 = v197;
  v376 = vmlaq_n_f64(v195, v176, _Q2.f64[0]);
  v378 = vmlaq_n_f64(v196, _Q25, _Q2.f64[0]);
  v440 = vmlad_n_f64(_Q19.f64[0], v436, _Q2.f64[0]);
  _Q2 = vaddq_f64(__src[9], (float64x2_t)0);
  v199 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1);
  v200 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  __asm { FMLA            D8, D10, V2.D[1] }
  v197.f64[0] = __dsta * __dsta * a4.f64[0];
  v381 = v197;
  _Q2.f64[0] = v197.f64[0];
  _Q3 = vaddq_f64((float64x2_t)*(unint64_t *)&v197.f64[0], __src[30]);
  v369 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)*(unint64_t *)&_Q2.f64[0], 8uLL), *(float64x2_t *)((char *)__src + 552));
  _Q19 = vaddq_f64(__src[10], (float64x2_t)0);
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(v199, (float64x2_t)0, _Q19.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q19, 1);
  v205 = vmlaq_laneq_f64(vmlaq_n_f64(v200, (float64x2_t)xmmword_21030D320, _Q19.f64[0]), (float64x2_t)xmmword_2102DD520, _Q19, 1);
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(v200, (float64x2_t)0, _Q19.f64[0]), (float64x2_t)0, _Q19, 1);
  __asm { FMLA            D8, D10, V19.D[1] }
  _Q19 = vaddq_f64(__src[11], (float64x2_t)0);
  v209 = vmlaq_laneq_f64(vmlaq_n_f64(v204, v432, _Q19.f64[0]), (float64x2_t)0, _Q19, 1);
  v210 = vmlaq_laneq_f64(vmlaq_n_f64(v205, (float64x2_t)0, _Q19.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q19, 1);
  v211 = vmlaq_laneq_f64(vmlaq_n_f64(v206, (float64x2_t)xmmword_21030D320, _Q19.f64[0]), (float64x2_t)xmmword_2102DD520, _Q19, 1);
  v212 = vmlaq_laneq_f64(vmlaq_n_f64(v206, (float64x2_t)0, _Q19.f64[0]), (float64x2_t)0, _Q19, 1);
  __asm { FMLA            D8, D10, V19.D[1] }
  _Q19 = vaddq_f64(__src[12], (float64x2_t)0);
  v215 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v420, _Q19.f64[0]), v395, _Q19, 1);
  v216 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v442, _Q19.f64[0]), _Q1, _Q19, 1);
  v217 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v361, _Q19.f64[0]), v168, _Q19, 1);
  _Q13 = vmlaq_laneq_f64(vmlaq_n_f64(v212, v424, _Q19.f64[0]), v428, _Q19, 1);
  _Q2.f64[0] = v435;
  __asm { FMLA            D8, D2, V19.D[1] }
  _Q19.f64[0] = __src[13].f64[0];
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vaddq_f64(_Q19, (float64x2_t)0);
  v220 = vmlaq_n_f64(v215, v392, _Q19.f64[0]);
  v358 = vmlaq_n_f64(v216, v175, _Q19.f64[0]);
  v360 = vmlaq_n_f64(v217, v176, _Q19.f64[0]);
  v363 = vmlaq_n_f64(_Q13, _Q25, _Q19.f64[0]);
  v437 = vmlad_n_f64(_D8, v436, _Q19.f64[0]);
  _Q19 = vaddq_f64(*(float64x2_t *)((char *)__src + 216), (float64x2_t)0);
  v222 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q19.f64[0]), (float64x2_t)0, _Q19, 1);
  __asm { FMLA            D20, D10, V19.D[1] }
  v223 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q19.f64[0]), (float64x2_t)xmmword_2102DD520, _Q19, 1), (float64x2_t)0, _Q18.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q18, 1);
  v224 = vmlaq_laneq_f64(vmlaq_n_f64(v222, (float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
  v225 = vmlaq_laneq_f64(vmlaq_n_f64(v222, (float64x2_t)0, _Q18.f64[0]), (float64x2_t)0, _Q18, 1);
  __asm { FMLA            D20, D10, V18.D[1] }
  _Q18 = vaddq_f64((float64x2_t)0, *(float64x2_t *)((char *)__src + 248));
  v227 = vmlaq_laneq_f64(vmlaq_n_f64(v223, v432, _Q18.f64[0]), (float64x2_t)0, _Q18, 1);
  v228 = vmlaq_laneq_f64(vmlaq_n_f64(v224, (float64x2_t)0, _Q18.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q18, 1);
  v229 = vmlaq_laneq_f64(vmlaq_n_f64(v225, (float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
  v230 = vmlaq_laneq_f64(vmlaq_n_f64(v225, (float64x2_t)0, _Q18.f64[0]), (float64x2_t)0, _Q18, 1);
  __asm { FMLA            D20, D10, V18.D[1] }
  _Q18 = vaddq_f64(*(float64x2_t *)((char *)__src + 264), (float64x2_t)0);
  _Q28 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v420, _Q18.f64[0]), v395, _Q18, 1);
  v233 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v442, _Q18.f64[0]), _Q1, _Q18, 1);
  v234 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v361, _Q18.f64[0]), v168, _Q18, 1);
  v235 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v424, _Q18.f64[0]), v428, _Q18, 1);
  __asm { FMLA            D20, D2, V18.D[1] }
  _D21 = v435;
  _Q18.f64[0] = __src[17].f64[1];
  *(_QWORD *)&_Q18.f64[0] = *(_OWORD *)&vaddq_f64(_Q18, (float64x2_t)0);
  v409 = vmlaq_n_f64(_Q28, v392, _Q18.f64[0]);
  v413 = vmlaq_n_f64(v233, v175, _Q18.f64[0]);
  v355 = vmlaq_n_f64(v234, v176, _Q18.f64[0]);
  v356 = vmlaq_n_f64(v235, _Q25, _Q18.f64[0]);
  v411 = vmlad_n_f64(_Q20.f64[0], v436, _Q18.f64[0]);
  _Q18 = vaddq_f64(__src[18], (float64x2_t)0);
  v238 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
  v239 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q18.f64[0]), (float64x2_t)0, _Q18, 1);
  __asm { FMLA            D28, D10, V18.D[1] }
  _Q18 = vaddq_f64(__src[19], (float64x2_t)0);
  v241 = vmlaq_laneq_f64(vmlaq_n_f64(v239, (float64x2_t)xmmword_21030D320, _Q18.f64[0]), (float64x2_t)xmmword_2102DD520, _Q18, 1);
  v242 = vmlaq_laneq_f64(vmlaq_n_f64(v239, (float64x2_t)0, _Q18.f64[0]), (float64x2_t)0, _Q18, 1);
  __asm
  {
    FMLA            D28, D10, V18.D[1]
    FMLA            D28, D10, V17.D[1]
  }
  _Q6 = vaddq_f64(__src[21], (float64x2_t)0);
  v244 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v238, (float64x2_t)0, _Q18.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q18, 1), v432, _Q17.f64[0]), (float64x2_t)0, _Q17, 1), v420, _Q6.f64[0]), v395, _Q6, 1);
  _Q20 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v241, (float64x2_t)0, _Q17.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q17, 1), v442, _Q6.f64[0]), _Q1, _Q6, 1);
  v246 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v242, (float64x2_t)xmmword_21030D320, _Q17.f64[0]), (float64x2_t)xmmword_2102DD520, _Q17, 1), v361, _Q6.f64[0]), v168, _Q6, 1);
  v247 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v242, (float64x2_t)0, _Q17.f64[0]), (float64x2_t)0, _Q17, 1), v424, _Q6.f64[0]), v428, _Q6, 1);
  __asm { FMLA            D28, D21, V6.D[1] }
  _Q6.f64[0] = __src[22].f64[0];
  *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vaddq_f64(_Q6, (float64x2_t)0);
  v451 = vmlaq_n_f64(v244, v392, _Q6.f64[0]);
  v351 = vmlaq_n_f64(_Q20, v175, _Q6.f64[0]);
  v352 = vmlaq_n_f64(v246, v176, _Q6.f64[0]);
  v354 = vmlaq_n_f64(v247, _Q25, _Q6.f64[0]);
  v405 = vmlad_n_f64(_Q28.f64[0], v436, _Q6.f64[0]);
  _Q6 = vaddq_f64(*(float64x2_t *)((char *)__src + 360), (float64x2_t)0);
  v249 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q6.f64[0]), (float64x2_t)xmmword_2102DD520, _Q6, 1);
  v250 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q6.f64[0]), (float64x2_t)0, _Q6, 1);
  _Q20.f64[0] = 0.0;
  __asm { FMLA            D28, D20, V6.D[1] }
  _Q6 = vaddq_f64(*(float64x2_t *)((char *)__src + 376), (float64x2_t)0);
  v252 = vmlaq_laneq_f64(vmlaq_n_f64(v250, (float64x2_t)xmmword_21030D320, _Q6.f64[0]), (float64x2_t)xmmword_2102DD520, _Q6, 1);
  v253 = vmlaq_laneq_f64(vmlaq_n_f64(v250, (float64x2_t)0, _Q6.f64[0]), (float64x2_t)0, _Q6, 1);
  __asm
  {
    FMLA            D28, D20, V6.D[1]
    FMLA            D28, D20, V5.D[1]
  }
  _Q2.f64[0] = 0.0;
  _Q4 = vaddq_f64((float64x2_t)0, *(float64x2_t *)((char *)__src + 408));
  v255 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v249, (float64x2_t)0, _Q6.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q6, 1), v432, _Q5.f64[0]), (float64x2_t)0, _Q5, 1), v420, _Q4.f64[0]), v395, _Q4, 1);
  v256 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v252, (float64x2_t)0, _Q5.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q5, 1), v442, _Q4.f64[0]), _Q1, _Q4, 1);
  v257 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v253, (float64x2_t)xmmword_21030D320, _Q5.f64[0]), (float64x2_t)xmmword_2102DD520, _Q5, 1), v361, _Q4.f64[0]), v168, _Q4, 1);
  v258 = v168;
  _Q18 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v253, (float64x2_t)0, _Q5.f64[0]), (float64x2_t)0, _Q5, 1), v424, _Q4.f64[0]), v428, _Q4, 1);
  __asm { FMLA            D28, D21, V4.D[1] }
  _Q4.f64[0] = __src[26].f64[1];
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vaddq_f64(_Q4, (float64x2_t)0);
  v448 = vmlaq_n_f64(v255, v392, _Q4.f64[0]);
  v403 = vmlaq_n_f64(v256, v175, _Q4.f64[0]);
  v406 = vmlaq_n_f64(v257, v176, _Q4.f64[0]);
  v408 = vmlaq_n_f64(_Q18, _Q25, _Q4.f64[0]);
  v390 = vmlad_n_f64(_Q28.f64[0], v436, _Q4.f64[0]);
  _Q4 = vaddq_f64(__src[27], (float64x2_t)0);
  v261 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q4.f64[0]), (float64x2_t)xmmword_2102DD520, _Q4, 1);
  v262 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  __asm { FMLA            D18, D2, V4.D[1] }
  _Q4 = vaddq_f64(__src[28], (float64x2_t)0);
  v264 = vmlaq_laneq_f64(vmlaq_n_f64(v261, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q4, 1);
  v265 = vmlaq_laneq_f64(vmlaq_n_f64(v262, (float64x2_t)xmmword_21030D320, _Q4.f64[0]), (float64x2_t)xmmword_2102DD520, _Q4, 1);
  v266 = vmlaq_laneq_f64(vmlaq_n_f64(v262, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1);
  __asm { FMLA            D18, D2, V4.D[1] }
  _Q4 = vaddq_f64(__src[29], (float64x2_t)0);
  __asm { FMLA            D18, D2, V4.D[1] }
  v268 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v264, v432, _Q4.f64[0]), (float64x2_t)0, _Q4, 1), v420, _Q3.f64[0]), v395, _Q3, 1);
  v269 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v265, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q4, 1), v442, _Q3.f64[0]), _Q1, _Q3, 1);
  v270 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v266, (float64x2_t)xmmword_21030D320, _Q4.f64[0]), (float64x2_t)xmmword_2102DD520, _Q4, 1), v361, _Q3.f64[0]), v168, _Q3, 1);
  v271 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v266, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1), v424, _Q3.f64[0]), v428, _Q3, 1);
  __asm { FMLA            D18, D21, V3.D[1] }
  _Q3.f64[0] = __src[31].f64[0];
  *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vaddq_f64(_Q3, (float64x2_t)0);
  v421 = vmlaq_n_f64(v268, v392, _Q3.f64[0]);
  v418 = vmlaq_n_f64(v269, v175, _Q3.f64[0]);
  v371 = v176;
  v372 = _Q25;
  v387 = vmlaq_n_f64(v270, v176, _Q3.f64[0]);
  v388 = vmlaq_n_f64(v271, _Q25, _Q3.f64[0]);
  v389 = vmlad_n_f64(_Q18.f64[0], v436, _Q3.f64[0]);
  _Q3 = vaddq_f64(*(float64x2_t *)((char *)__src + 504), (float64x2_t)0);
  v273 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  v274 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D18, D2, V3.D[1] }
  _Q3 = vaddq_f64(*(float64x2_t *)((char *)__src + 520), (float64x2_t)0);
  v276 = vmlaq_laneq_f64(vmlaq_n_f64(v273, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q3, 1);
  _Q19 = vmlaq_laneq_f64(vmlaq_n_f64(v274, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  v278 = vmlaq_laneq_f64(vmlaq_n_f64(v274, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  __asm { FMLA            D18, D2, V3.D[1] }
  _Q3 = vaddq_f64(*(float64x2_t *)((char *)__src + 536), (float64x2_t)0);
  v280 = vmlaq_laneq_f64(vmlaq_n_f64(v278, (float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1);
  __asm { FMLA            D18, D2, V3.D[1] }
  _Q2.f64[1] = v369.f64[1];
  v281 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v278, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1), v424, v369.f64[0]), v428, v369, 1);
  __asm { FMLA            D18, D21, V2.D[1] }
  _Q2.f64[0] = __src[35].f64[1];
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)0, _Q2);
  v367 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q19, (float64x2_t)0, _Q3.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q3, 1), v442, v369.f64[0]), _Q1, v369, 1), v175, _Q2.f64[0]);
  v368 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v280, v361, v369.f64[0]), v258, v369, 1), v176, _Q2.f64[0]);
  v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v276, v432, _Q3.f64[0]), (float64x2_t)0, _Q3, 1), v420, v369.f64[0]), v395, v369, 1), v392, _Q2.f64[0]);
  v364 = vmlaq_n_f64(v281, _Q25, _Q2.f64[0]);
  v366 = vmlad_n_f64(_Q18.f64[0], v436, _Q2.f64[0]);
  _Q2 = vaddq_f64(__src[37], (float64x2_t)0);
  _Q3 = vaddq_f64(__src[36], (float64x2_t)0);
  _Q4 = vaddq_f64(__src[38], (float64x2_t)0);
  v285 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, _Q3.f64[0]), (float64x2_t)0, _Q3, 1);
  v286 = vaddq_f64(__src[39], (float64x2_t)0);
  v365 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v285, (float64x2_t)xmmword_21030D320, _Q2.f64[0]), (float64x2_t)xmmword_2102DD520, _Q2, 1), (float64x2_t)0, _Q4.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q4, 1), v442, v286.f64[0]), _Q1, v286, 1);
  v287 = vmlaq_laneq_f64(vmlaq_n_f64(v285, (float64x2_t)0, _Q2.f64[0]), (float64x2_t)0, _Q2, 1);
  v362 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v287, (float64x2_t)xmmword_21030D320, _Q4.f64[0]), (float64x2_t)xmmword_2102DD520, _Q4, 1), v361, v286.f64[0]), v258, v286, 1);
  v359 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v287, (float64x2_t)0, _Q4.f64[0]), (float64x2_t)0, _Q4, 1), v424, v286.f64[0]), v428, v286, 1);
  _Q1.f64[0] = 0.0;
  __asm
  {
    FMLA            D0, D1, V3.D[1]
    FMLA            D0, D1, V2.D[1]
    FMLA            D0, D1, V4.D[1]
  }
  v357 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, _Q3.f64[0]), (float64x2_t)xmmword_2102DD520, _Q3, 1), (float64x2_t)0, _Q2.f64[0]), (float64x2_t)*(unint64_t *)&a4.f64[0], _Q2, 1), v432, _Q4.f64[0]), (float64x2_t)0, _Q4, 1),
           v420,
           v286.f64[0]);
  v288 = vmulq_f64(v399, (float64x2_t)0);
  v353 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v399, (float64x2_t)0, v443), (float64x2_t)0, v220), v409, a4.f64[0]), (float64x2_t)0, v451), (float64x2_t)0, v448), v421, v420.f64[0]);
  v289 = vmulq_f64(v373, (float64x2_t)0);
  v374 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v373, (float64x2_t)0, v375), (float64x2_t)0, v358), v413, a4.f64[0]), (float64x2_t)0, v351), (float64x2_t)0, v403), v418, v420.f64[0]);
  _Q1.f64[1] = v420.f64[1];
  v290 = vmulq_f64(v415, (float64x2_t)0);
  v350 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v415, (float64x2_t)0, v376), (float64x2_t)0, v360), v355, a4.f64[0]), (float64x2_t)0, v352), (float64x2_t)0, v406), v387, v420.f64[0]);
  _Q2 = vmulq_f64(v422, (float64x2_t)0);
  v349 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v422, (float64x2_t)0, v378), (float64x2_t)0, v363), v356, a4.f64[0]), (float64x2_t)0, v354), (float64x2_t)0, v408), v388, v420.f64[0]);
  _Q25.f64[0] = v389;
  v348 = vmlad_n_f64(v401 + v440 * 0.0 + v437 * 0.0 + v411 * a4.f64[0] + v405 * 0.0 + v390 * 0.0, v389, v420.f64[0]);
  v416 = vmlaq_laneq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v443, v288), (float64x2_t)0, v220), (float64x2_t)0, v409), v451, a4.f64[0]), (float64x2_t)0, v448), v421, v420, 1);
  v429 = vmlaq_laneq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v375, v289), (float64x2_t)0, v358), (float64x2_t)0, v413), v351, a4.f64[0]), (float64x2_t)0, v403), v418, v420, 1);
  v423 = vmlaq_laneq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v378, _Q2), (float64x2_t)0, v363), (float64x2_t)0, v356), v354, a4.f64[0]), (float64x2_t)0, v408), v388, v420, 1);
  v425 = vmlaq_laneq_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vaddq_f64(v376, v290), (float64x2_t)0, v360), (float64x2_t)0, v355), v352, a4.f64[0]), (float64x2_t)0, v406), v387, v420, 1);
  __asm { FMLA            D0, D25, V1.D[1] }
  v292 = vmlaq_f64(v288, (float64x2_t)0, v443);
  _Q15 = vmlaq_f64(v289, (float64x2_t)0, v375);
  v294 = vmlaq_f64(v290, (float64x2_t)0, v376);
  v295 = vmlaq_f64(_Q2, (float64x2_t)0, v378);
  v296 = vaddq_f64(v220, v292);
  v297 = vmlaq_f64(v292, (float64x2_t)0, v220);
  v298 = vmlaq_f64(_Q15, (float64x2_t)0, v358);
  v299 = vaddq_f64(v360, v294);
  v300 = vmlaq_f64(v294, (float64x2_t)0, v360);
  v301 = vaddq_f64(v363, v295);
  v302 = vmlaq_f64(v295, (float64x2_t)0, v363);
  v303 = vaddq_f64(v409, v297);
  v304 = vmlaq_f64(v297, (float64x2_t)0, v409);
  v305 = vmlaq_f64(vaddq_f64(v358, _Q15), (float64x2_t)0, v413);
  _Q15.f64[1] = v83.f64[1];
  _Q13.f64[1] = v398.f64[1];
  v306 = vaddq_f64(v413, v298);
  v307 = vmlaq_f64(v298, (float64x2_t)0, v413);
  v308 = vaddq_f64(v355, v300);
  v309 = vmlaq_f64(v300, (float64x2_t)0, v355);
  v310 = vaddq_f64(v356, v302);
  v311 = vmlaq_f64(v302, (float64x2_t)0, v356);
  v312 = vmlaq_f64(v303, (float64x2_t)0, v451);
  v313 = vaddq_f64(v451, v304);
  v314 = vmlaq_f64(v304, (float64x2_t)0, v451);
  v315 = vaddq_f64(v351, v307);
  v316 = vmlaq_f64(v307, (float64x2_t)0, v351);
  _Q17 = vaddq_f64(v352, v309);
  v318 = vmlaq_f64(v309, (float64x2_t)0, v352);
  v319 = vmlaq_f64(v311, (float64x2_t)0, v354);
  v320 = vaddq_f64(v448, v314);
  v444 = vmlaq_f64(v314, (float64x2_t)0, v448);
  v321 = vmlaq_f64(vmlaq_f64(v306, (float64x2_t)0, v351), (float64x2_t)0, v403);
  _Q25 = vmlaq_f64(v315, (float64x2_t)0, v403);
  v323 = vaddq_f64(v403, v316);
  v459 = vmlaq_f64(v316, (float64x2_t)0, v403);
  v324 = vaddq_f64(v406, v318);
  __dstb = vmlaq_f64(v318, (float64x2_t)0, v406);
  v325 = vmlaq_f64(vaddq_f64(v354, v311), (float64x2_t)0, v408);
  v326 = vaddq_f64(v408, v319);
  v327 = vmlaq_f64(v319, (float64x2_t)0, v408);
  _Q0.f64[0] = v401 * 0.0 + v440 * 0.0;
  v328 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v296, (float64x2_t)0, v409), (float64x2_t)0, v451), v448, a4.f64[0]), v421, v446);
  v404 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(v305, (float64x2_t)0, v351), v403, a4.f64[0]), v418, v446);
  v329 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v299, (float64x2_t)0, v355), (float64x2_t)0, v352), v406, a4.f64[0]), v387, v446);
  v330 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v301, (float64x2_t)0, v356), (float64x2_t)0, v354), v408, a4.f64[0]), v388, v446);
  _Q19.f64[0] = v389;
  v378.f64[0] = v437 + _Q0.f64[0] + v411 * 0.0 + v405 * 0.0 + v390 * a4.f64[0] + v389 * v446;
  _Q0.f64[0] = _Q0.f64[0] + v437 * 0.0;
  _Q1.f64[0] = v411 + _Q0.f64[0];
  _Q0.f64[0] = _Q0.f64[0] + v411 * 0.0;
  _Q4.f64[1] = v382.f64[1];
  v400 = vmlaq_n_f64(v321, v418, v382.f64[0]);
  v402 = vmlaq_n_f64(vmlaq_f64(v312, (float64x2_t)0, v448), v421, v382.f64[0]);
  v412 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v308, (float64x2_t)0, v352), (float64x2_t)0, v406), v387, v382.f64[0]);
  v410 = vmlaq_n_f64(vmlaq_f64(vmlaq_f64(v310, (float64x2_t)0, v354), (float64x2_t)0, v408), v388, v382.f64[0]);
  v408.f64[0] = vmlad_n_f64(_Q1.f64[0] + v405 * 0.0 + v390 * 0.0, v389, v382.f64[0]);
  _Q10 = vmlaq_laneq_f64(vmlaq_f64(v313, (float64x2_t)0, v448), v421, v382, 1);
  v452 = vmlaq_laneq_f64(_Q25, v418, v382, 1);
  v407 = vmlaq_laneq_f64(vmlaq_f64(_Q17, (float64x2_t)0, v406), v387, v382, 1);
  v454 = vmlaq_laneq_f64(v325, v388, v382, 1);
  __asm { FMLA            D1, D19, V4.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v405 * 0.0;
  _Q2.f64[0] = _Q0.f64[0] + v390 * 0.0;
  v447 = vmlaq_n_f64(v320, v421, v94);
  v449 = vmlaq_n_f64(v323, v418, v94);
  v332 = vmlaq_n_f64(v324, v387, v94);
  v438 = vmlaq_n_f64(v326, v388, v94);
  v383 = _Q2.f64[0] + v389 * v434;
  v323.f64[0] = vmlad_n_f64(_Q2.f64[0], v389, v398.f64[0]);
  __asm { FMLA            D1, D19, V13.D[1] }
  v333 = vmlaq_n_f64(v459, v418, v398.f64[0]);
  v334 = vmlaq_laneq_f64(v459, v418, v398, 1);
  v460 = vmlaq_n_f64(v459, v418, v434);
  _Q0.f64[1] = v286.f64[1];
  _Q13.f64[1] = v395.f64[1];
  v335 = vmlaq_laneq_f64(v357, v395, v286, 1);
  _Q25.f64[0] = v435;
  __asm { FMLA            D1, D25, V0.D[1] }
  v432.f64[0] = _Q1.f64[0];
  v336 = vmlaq_n_f64(v353, v370, v395.f64[0]);
  v337 = vmlaq_n_f64(v374, v367, v395.f64[0]);
  _Q29 = vmlaq_n_f64(v350, v368, v395.f64[0]);
  v339 = vmlaq_n_f64(v349, v364, v395.f64[0]);
  _Q17.f64[0] = v366;
  v312.f64[0] = vmlad_n_f64(v348, v366, v395.f64[0]);
  v417 = vmlaq_laneq_f64(v416, v370, v395, 1);
  v430 = vmlaq_laneq_f64(v429, v367, v395, 1);
  v426 = vmlaq_laneq_f64(v425, v368, v395, 1);
  v340 = vmlaq_laneq_f64(v423, v364, v395, 1);
  __asm { FMLA            D2, D17, V13.D[1] }
  v419 = vmlaq_n_f64(v328, v370, v394);
  _Q14 = vmlaq_n_f64(v329, v368, v394);
  v414 = vmlaq_n_f64(v330, v364, v394);
  _Q13.f64[1] = v384.f64[1];
  v441 = vmlaq_laneq_f64(_Q10, v370, v384, 1);
  __asm { FMLA            D10, D17, V13.D[1] }
  v396 = v390 + _Q0.f64[0] + v389 * v94 + v366 * v385;
  __asm { FMLA            D10, D17, V15.D[1] }
  _Q15.f64[0] = __src[40].f64[0];
  *(_QWORD *)&_Q15.f64[0] = *(_OWORD *)&vaddq_f64(v381, _Q15);
  v342 = vmlaq_n_f64(v365, v391, _Q15.f64[0]);
  v343 = vmlaq_n_f64(v362, v371, _Q15.f64[0]);
  v344 = vmlaq_n_f64(v359, v372, _Q15.f64[0]);
  _Q0.f64[1] = v392.f64[1];
  v345 = vmlaq_n_f64(v335, v392, _Q15.f64[0]);
  _Q25.f64[0] = vmlad_n_f64(v432.f64[0], v436, _Q15.f64[0]);
  v346 = vmlaq_n_f64(_Q29, v343, v392.f64[0]);
  __asm { FMLA            D2, D25, V0.D[1] }
  v347 = vmlaq_n_f64(_Q14, v343, v397);
  _Q0.f64[1] = v377.f64[1];
  __asm { FMLA            D29, D25, V0.D[1] }
  _Q14.f64[1] = v380.f64[1];
  __asm { FMLA            D0, D25, V14.D[1] }
  *v386 = vmlaq_n_f64(v336, v345, v392.f64[0]);
  *(float64x2_t *)(a3 + 2016) = vmlaq_n_f64(v337, v342, v392.f64[0]);
  *(double *)(a3 + 2064) = vmlad_n_f64(v312.f64[0], _Q25.f64[0], v392.f64[0]);
  *(float64x2_t *)(a3 + 2032) = v346;
  *(float64x2_t *)(a3 + 2048) = vmlaq_n_f64(v339, v344, v392.f64[0]);
  *(float64x2_t *)(a3 + 2104) = vmlaq_laneq_f64(v426, v343, v392, 1);
  *(float64x2_t *)(a3 + 2088) = vmlaq_laneq_f64(v430, v342, v392, 1);
  *(float64x2_t *)(a3 + 2072) = vmlaq_laneq_f64(v417, v345, v392, 1);
  *(float64_t *)(a3 + 2136) = _Q2.f64[0];
  *(float64x2_t *)(a3 + 2120) = vmlaq_laneq_f64(v340, v344, v392, 1);
  *(float64x2_t *)(a3 + 2144) = vmlaq_n_f64(v419, v345, v397);
  *(float64x2_t *)(a3 + 2160) = vmlaq_n_f64(vmlaq_n_f64(v404, v367, v394), v342, v397);
  *(double *)(a3 + 2208) = v378.f64[0] + v366 * v394 + _Q25.f64[0] * v397;
  *(float64x2_t *)(a3 + 2176) = v347;
  *(float64x2_t *)(a3 + 2192) = vmlaq_n_f64(v414, v344, v397);
  *(float64x2_t *)(a3 + 2248) = vmlaq_n_f64(vmlaq_n_f64(v412, v368, v384.f64[0]), v343, v377.f64[0]);
  *(float64x2_t *)(a3 + 2232) = vmlaq_n_f64(vmlaq_n_f64(v400, v367, v384.f64[0]), v342, v377.f64[0]);
  *(double *)(a3 + 2280) = vmlad_n_f64(vmlad_n_f64(v408.f64[0], v366, v384.f64[0]), _Q25.f64[0], v377.f64[0]);
  *(float64x2_t *)(a3 + 2216) = vmlaq_n_f64(vmlaq_n_f64(v402, v370, v384.f64[0]), v345, v377.f64[0]);
  *(float64x2_t *)(a3 + 2264) = vmlaq_n_f64(vmlaq_n_f64(v410, v364, v384.f64[0]), v344, v377.f64[0]);
  *(float64x2_t *)(a3 + 2288) = vmlaq_laneq_f64(v441, v345, v377, 1);
  *(float64x2_t *)(a3 + 2304) = vmlaq_laneq_f64(vmlaq_laneq_f64(v452, v367, v384, 1), v342, v377, 1);
  *(float64_t *)(a3 + 2352) = _Q29.f64[0];
  *(float64x2_t *)(a3 + 2320) = vmlaq_laneq_f64(vmlaq_laneq_f64(v407, v368, v384, 1), v343, v377, 1);
  *(float64x2_t *)(a3 + 2336) = vmlaq_laneq_f64(vmlaq_laneq_f64(v454, v364, v384, 1), v344, v377, 1);
  *(float64x2_t *)(a3 + 2360) = vmlaq_n_f64(vmlaq_n_f64(v447, v370, v385), v345, v393);
  *(float64x2_t *)(a3 + 2376) = vmlaq_n_f64(vmlaq_n_f64(v449, v367, v385), v342, v393);
  *(double *)(a3 + 2424) = v396 + _Q25.f64[0] * v393;
  *(float64x2_t *)(a3 + 2392) = vmlaq_n_f64(vmlaq_n_f64(v332, v368, v385), v343, v393);
  *(float64x2_t *)(a3 + 2408) = vmlaq_n_f64(vmlaq_n_f64(v438, v364, v385), v344, v393);
  *(float64x2_t *)(a3 + 2432) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v444, v421, v398.f64[0]), v370, v379.f64[0]), v345, v380.f64[0]);
  *(float64x2_t *)(a3 + 2448) = vmlaq_n_f64(vmlaq_n_f64(v333, v367, v379.f64[0]), v342, v380.f64[0]);
  *(double *)(a3 + 2496) = vmlad_n_f64(vmlad_n_f64(v323.f64[0], v366, v379.f64[0]), _Q25.f64[0], v380.f64[0]);
  *(float64x2_t *)(a3 + 2464) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(__dstb, v387, v398.f64[0]), v368, v379.f64[0]), v343, v380.f64[0]);
  *(float64x2_t *)(a3 + 2480) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v327, v388, v398.f64[0]), v364, v379.f64[0]), v344, v380.f64[0]);
  *(float64x2_t *)(a3 + 2504) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v444, v421, v398, 1), v370, v379, 1), v345, v380, 1);
  *(float64x2_t *)(a3 + 2520) = vmlaq_laneq_f64(vmlaq_laneq_f64(v334, v367, v379, 1), v342, v380, 1);
  *(float64_t *)(a3 + 2568) = _Q0.f64[0];
  *(float64x2_t *)(a3 + 2536) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(__dstb, v387, v398, 1), v368, v379, 1), v343, v380, 1);
  *(float64x2_t *)(a3 + 2552) = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v327, v388, v398, 1), v364, v379, 1), v344, v380, 1);
  *(float64x2_t *)(a3 + 2576) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v444, v421, v434), v370, v435), v345, v436);
  *(float64x2_t *)(a3 + 2592) = vmlaq_n_f64(vmlaq_n_f64(v460, v367, v435), v342, v436);
  *(float64_t *)(a3 + 2640) = v383 + v366 * v435 + _Q25.f64[0] * v436;
  *(float64x2_t *)(a3 + 2608) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(__dstb, v387, v434), v368, v435), v343, v436);
  *(float64x2_t *)(a3 + 2624) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v327, v388, v434), v364, v435), v344, v436);
  return result;
}

uint64_t sub_20F821CCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3160;
      *(_QWORD *)(a1 + 16) = v2 - 3160;
      if (*(_BYTE *)(v2 - 2664))
      {
        v6 = *(void **)(v2 - 2736);
        if (v6)
        {
          *(_QWORD *)(v2 - 2728) = v6;
          operator delete(v6);
          v5 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20F821D40(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __n128 result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      if (a1 != a2)
        sub_20EE62A1C((char **)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
      v4 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
      result = *(__n128 *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(__n128 *)(a1 + 48) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    v6 = *(char **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = v8 - *(_QWORD *)a2;
    if (v8 != *(_QWORD *)a2)
    {
      v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
      if (v10 >= 0x492492492492493)
        sub_20EABADD4();
      v11 = (char *)operator new(v9);
      v12 = 0;
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = &v11[56 * v10];
      do
      {
        v13 = v7 + v12;
        v14 = &v11[v12];
        *(_QWORD *)v14 = *(_QWORD *)(v7 + v12);
        v15 = *(_OWORD *)(v7 + v12 + 8);
        *((_QWORD *)v14 + 3) = *(_QWORD *)(v7 + v12 + 24);
        *(_OWORD *)(v14 + 8) = v15;
        v16 = *(_OWORD *)(v7 + v12 + 32);
        *((_QWORD *)v14 + 6) = *(_QWORD *)(v7 + v12 + 48);
        *((_OWORD *)v14 + 2) = v16;
        v12 += 56;
      }
      while (v13 + 56 != v8);
      *(_QWORD *)(a1 + 8) = &v11[v12];
    }
    v17 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v17;
    result = *(__n128 *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(__n128 *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void sub_20F821EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F821F08(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  _OWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _OWORD *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v27;
  char *v28;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v44;
  char *v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  void *v96;
  char *v97;
  char *v98;

  v5 = a1[1];
  v4 = a1[2];
  if (0xEBE8AB1946A49E23 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[3160 * a2];
      v12 = 3160 * a2;
      do
      {
        bzero(v5 + 424, 0xAB0uLL);
        *(_QWORD *)v5 = -1;
        *(_OWORD *)(v5 + 72) = xmmword_2103B8340;
        *(_OWORD *)(v5 + 88) = unk_2103B8350;
        *(_OWORD *)(v5 + 104) = xmmword_2103B8360;
        *(_OWORD *)(v5 + 120) = xmmword_2103B8370;
        *(_OWORD *)(v5 + 8) = xmmword_2103B8300;
        *(_OWORD *)(v5 + 24) = xmmword_2103B8310;
        *(_OWORD *)(v5 + 40) = xmmword_2103B8320;
        *(_OWORD *)(v5 + 56) = xmmword_2103B8330;
        *(_OWORD *)(v5 + 152) = 0u;
        *(_OWORD *)(v5 + 168) = 0u;
        *(_OWORD *)(v5 + 184) = 0u;
        *(_OWORD *)(v5 + 200) = 0u;
        *(_OWORD *)(v5 + 216) = 0u;
        *(_OWORD *)(v5 + 232) = 0u;
        *(_OWORD *)(v5 + 248) = 0u;
        v5[424] = 0;
        v13 = v5 + 3160;
        *(_OWORD *)(v5 + 136) = 0u;
        v14 = v5 + 136;
        v14[8] = 0u;
        v14[9] = 0u;
        v14[10] = 0u;
        v14[11] = 0u;
        v14[12] = 0u;
        v14[13] = 0u;
        v14[14] = 0u;
        v14[15] = 0u;
        v14[16] = 0u;
        v14[17] = 0u;
        v5 = v13;
        v12 -= 3160;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xEBE8AB1946A49E23 * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x14BD3EDDA68FE0)
      sub_20E867F44();
    v8 = 0xEBE8AB1946A49E23 * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xA5E9F6ED347F0)
      v9 = 0x14BD3EDDA68FE0;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x14BD3EDDA68FE0)
        sub_20E877A38();
      v10 = (char *)operator new(3160 * v9);
    }
    else
    {
      v10 = 0;
    }
    v15 = &v10[3160 * v6];
    v16 = 3160 * a2;
    v17 = &v15[v16];
    v18 = v15;
    do
    {
      bzero(v18 + 424, 0xAB0uLL);
      *(_QWORD *)v18 = -1;
      *(_OWORD *)(v18 + 72) = xmmword_2103B8340;
      *(_OWORD *)(v18 + 88) = unk_2103B8350;
      *(_OWORD *)(v18 + 104) = xmmword_2103B8360;
      *(_OWORD *)(v18 + 120) = xmmword_2103B8370;
      *(_OWORD *)(v18 + 8) = xmmword_2103B8300;
      *(_OWORD *)(v18 + 24) = xmmword_2103B8310;
      *(_OWORD *)(v18 + 40) = xmmword_2103B8320;
      *(_OWORD *)(v18 + 56) = xmmword_2103B8330;
      *(_OWORD *)(v18 + 152) = 0u;
      *(_OWORD *)(v18 + 168) = 0u;
      *(_OWORD *)(v18 + 184) = 0u;
      *(_OWORD *)(v18 + 200) = 0u;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_OWORD *)(v18 + 248) = 0u;
      v18[424] = 0;
      v19 = v18 + 3160;
      *(_OWORD *)(v18 + 136) = 0u;
      v20 = v18 + 136;
      v20[8] = 0u;
      v20[9] = 0u;
      v20[10] = 0u;
      v20[11] = 0u;
      v20[12] = 0u;
      v20[13] = 0u;
      v20[14] = 0u;
      v20[15] = 0u;
      v20[16] = 0u;
      v20[17] = 0u;
      v18 = v19;
      v16 -= 3160;
    }
    while (v16);
    v21 = &v10[3160 * v9];
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    if (v22 == *a1)
    {
      *a1 = v15;
      a1[1] = v17;
      a1[2] = v21;
    }
    else
    {
      v97 = v21;
      v98 = v17;
      v24 = 0;
      v25 = v22 - 6320;
      do
      {
        _X28 = &v25[v24];
        v27 = &v15[v24];
        v28 = &v22[v24];
        __asm { PRFM            #0, [X28] }
        *(_QWORD *)&v15[v24 - 3160] = *(_QWORD *)&v22[v24 - 3160];
        v34 = &v15[v24 - 3152];
        v35 = *(_OWORD *)&v25[v24 + 3168];
        v36 = *(_OWORD *)&v25[v24 + 3184];
        v37 = *(_OWORD *)&v25[v24 + 3216];
        *((_OWORD *)v34 + 2) = *(_OWORD *)&v25[v24 + 3200];
        *((_OWORD *)v34 + 3) = v37;
        *(_OWORD *)v34 = v35;
        *((_OWORD *)v34 + 1) = v36;
        v38 = *(_OWORD *)&v25[v24 + 3232];
        v39 = *(_OWORD *)&v25[v24 + 3248];
        v40 = *(_OWORD *)&v25[v24 + 3280];
        *((_OWORD *)v34 + 6) = *(_OWORD *)&v25[v24 + 3264];
        *((_OWORD *)v34 + 7) = v40;
        *((_OWORD *)v34 + 4) = v38;
        *((_OWORD *)v34 + 5) = v39;
        memcpy(&v15[v24 - 3024], &v25[v24 + 3296], 0x120uLL);
        v41 = v27 - 2736;
        *(v27 - 2736) = 0;
        *(v27 - 2664) = 0;
        __asm { PRFM            #0, [X28,#0x1F0] }
        if (v22[v24 - 2664])
        {
          _X10 = _X28 + 424;
          v44 = v28 - 2736;
          *((_QWORD *)v27 - 340) = 0;
          *(_OWORD *)v41 = 0u;
          __asm { PRFM            #0, [X10] }
          *(_OWORD *)v41 = *((_OWORD *)v28 - 171);
          *((_QWORD *)v27 - 340) = *((_QWORD *)_X28 + 450);
          *((_QWORD *)v44 + 2) = 0;
          *(_OWORD *)v44 = 0u;
          v46 = v27 - 2712;
          v47 = *(_OWORD *)(_X28 + 3608);
          *((_QWORD *)v46 + 2) = *((_QWORD *)_X28 + 453);
          *(_OWORD *)v46 = v47;
          v48 = v27 - 2688;
          v49 = *((_OWORD *)_X28 + 227);
          *((_QWORD *)v48 + 2) = *((_QWORD *)_X28 + 456);
          *(_OWORD *)v48 = v49;
          *(v27 - 2664) = 1;
        }
        _X9 = _X28 + 3152;
        *(v27 - 2656) = 0;
        *(v27 - 8) = 0;
        __asm { PRFM            #0, [X9] }
        if (*(v28 - 8))
        {
          v52 = *(_OWORD *)&v25[v24 + 3664];
          *((_QWORD *)v27 - 330) = *(_QWORD *)&v25[v24 + 3680];
          *((_OWORD *)v27 - 166) = v52;
          v53 = (uint64_t)&v15[v24 - 2632];
          v54 = *(_OWORD *)&v25[v24 + 3688];
          *(_QWORD *)(v53 + 16) = *(_QWORD *)&v25[v24 + 3704];
          *(_OWORD *)v53 = v54;
          v55 = &v15[v24 - 2608];
          v56 = *(_OWORD *)&v25[v24 + 3728];
          *(_OWORD *)v55 = *(_OWORD *)&v25[v24 + 3712];
          *((_OWORD *)v55 + 1) = v56;
          v57 = (uint64_t)&v15[v24 - 2576];
          v58 = *(_OWORD *)&v25[v24 + 3776];
          v59 = *(_OWORD *)&v25[v24 + 3792];
          v60 = *(_OWORD *)&v25[v24 + 3760];
          *(_QWORD *)(v57 + 64) = *(_QWORD *)&v25[v24 + 3808];
          *(_OWORD *)(v57 + 32) = v58;
          *(_OWORD *)(v57 + 48) = v59;
          *(_OWORD *)(v57 + 16) = v60;
          *(_OWORD *)v57 = *(_OWORD *)&v25[v24 + 3744];
          v61 = (uint64_t)&v15[v24 - 2504];
          v63 = *(_OWORD *)&v25[v24 + 3848];
          v62 = *(_OWORD *)&v25[v24 + 3864];
          v64 = *(_OWORD *)&v25[v24 + 3832];
          *(_QWORD *)(v61 + 64) = *(_QWORD *)&v25[v24 + 3880];
          *(_OWORD *)(v61 + 32) = v63;
          *(_OWORD *)(v61 + 48) = v62;
          *(_OWORD *)(v61 + 16) = v64;
          *(_OWORD *)v61 = *(_OWORD *)&v25[v24 + 3816];
          v65 = (uint64_t)&v15[v24 - 2432];
          *(_OWORD *)v65 = *(_OWORD *)&v25[v24 + 3888];
          v66 = *(_OWORD *)&v25[v24 + 3904];
          v67 = *(_OWORD *)&v25[v24 + 3920];
          v68 = *(_OWORD *)&v25[v24 + 3936];
          *(_QWORD *)(v65 + 64) = *(_QWORD *)&v25[v24 + 3952];
          *(_OWORD *)(v65 + 32) = v67;
          *(_OWORD *)(v65 + 48) = v68;
          *(_OWORD *)(v65 + 16) = v66;
          v69 = (uint64_t)&v15[v24 - 2360];
          *(_OWORD *)v69 = *(_OWORD *)&v25[v24 + 3960];
          v70 = *(_OWORD *)&v25[v24 + 3976];
          v71 = *(_OWORD *)&v25[v24 + 3992];
          v72 = *(_OWORD *)&v25[v24 + 4008];
          *(_QWORD *)(v69 + 64) = *(_QWORD *)&v25[v24 + 4024];
          *(_OWORD *)(v69 + 32) = v71;
          *(_OWORD *)(v69 + 48) = v72;
          *(_OWORD *)(v69 + 16) = v70;
          v73 = (uint64_t)&v15[v24 - 2288];
          *(_OWORD *)v73 = *(_OWORD *)&v25[v24 + 4032];
          v74 = *(_OWORD *)&v25[v24 + 4048];
          v75 = *(_OWORD *)&v25[v24 + 4064];
          v76 = *(_OWORD *)&v25[v24 + 4080];
          *(_QWORD *)(v73 + 64) = *(_QWORD *)&v25[v24 + 4096];
          *(_OWORD *)(v73 + 32) = v75;
          *(_OWORD *)(v73 + 48) = v76;
          *(_OWORD *)(v73 + 16) = v74;
          v77 = (uint64_t)&v15[v24 - 2216];
          *(_OWORD *)v77 = *(_OWORD *)&v25[v24 + 4104];
          v78 = *(_OWORD *)&v25[v24 + 4120];
          v79 = *(_OWORD *)&v25[v24 + 4136];
          v80 = *(_OWORD *)&v25[v24 + 4152];
          *(_QWORD *)(v77 + 64) = *(_QWORD *)&v25[v24 + 4168];
          *(_OWORD *)(v77 + 32) = v79;
          *(_OWORD *)(v77 + 48) = v80;
          *(_OWORD *)(v77 + 16) = v78;
          v81 = (uint64_t)&v15[v24 - 2144];
          *(_OWORD *)v81 = *(_OWORD *)&v25[v24 + 4176];
          v82 = *(_OWORD *)&v25[v24 + 4192];
          v83 = *(_OWORD *)&v25[v24 + 4208];
          v84 = *(_OWORD *)&v25[v24 + 4224];
          *(_QWORD *)(v81 + 64) = *(_QWORD *)&v25[v24 + 4240];
          *(_OWORD *)(v81 + 32) = v83;
          *(_OWORD *)(v81 + 48) = v84;
          *(_OWORD *)(v81 + 16) = v82;
          v85 = (uint64_t)&v15[v24 - 2072];
          *(_OWORD *)v85 = *(_OWORD *)&v25[v24 + 4248];
          v86 = *(_OWORD *)&v25[v24 + 4264];
          v87 = *(_OWORD *)&v25[v24 + 4280];
          v88 = *(_OWORD *)&v25[v24 + 4296];
          *(_QWORD *)(v85 + 64) = *(_QWORD *)&v25[v24 + 4312];
          *(_OWORD *)(v85 + 32) = v87;
          *(_OWORD *)(v85 + 48) = v88;
          *(_OWORD *)(v85 + 16) = v86;
          memcpy(&v15[v24 - 2000], &v25[v24 + 4320], 0x288uLL);
          v89 = (uint64_t)&v15[v24 - 1352];
          v90 = *(_OWORD *)&v25[v24 + 4968];
          *(_QWORD *)(v89 + 16) = *(_QWORD *)&v25[v24 + 4984];
          *(_OWORD *)v89 = v90;
          v91 = (uint64_t)&v15[v24 - 1328];
          v92 = *(_QWORD *)&v25[v24 + 5008];
          *(_OWORD *)v91 = *(_OWORD *)&v25[v24 + 4992];
          *(_QWORD *)(v91 + 16) = v92;
          memcpy(&v15[v24 - 1304], &v25[v24 + 5016], 0x288uLL);
          memcpy(&v15[v24 - 656], &v25[v24 + 5664], 0x288uLL);
          *(v27 - 8) = 1;
        }
        v24 -= 3160;
      }
      while (&v22[v24] != v23);
      v22 = (char *)*a1;
      v93 = (char *)a1[1];
      *a1 = &v15[v24];
      a1[1] = v98;
      a1[2] = v97;
      if (v93 != v22)
      {
        v94 = v93 - 2736;
        do
        {
          if (v94[72])
          {
            v96 = *(void **)v94;
            if (*(_QWORD *)v94)
            {
              *((_QWORD *)v94 + 1) = v96;
              operator delete(v96);
            }
          }
          v95 = v94 - 424;
          v94 -= 3160;
        }
        while (v95 != v22);
      }
    }
    if (v22)
      operator delete(v22);
  }
}

void sub_20F8225B0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[288];
  void *__p[3];
  char v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _QWORD v98[87];
  _BYTE v99[648];
  _BYTE v100[648];
  char v101;

  v4 = *a1 + 3160 * a1[4];
  v40 = *a2;
  v5 = *(_OWORD *)(a2 + 11);
  v45 = *(_OWORD *)(a2 + 9);
  v46 = v5;
  v6 = *(_OWORD *)(a2 + 15);
  v47 = *(_OWORD *)(a2 + 13);
  v48 = v6;
  v7 = *(_OWORD *)(a2 + 3);
  v41 = *(_OWORD *)(a2 + 1);
  v42 = v7;
  v8 = *(_OWORD *)(a2 + 7);
  v43 = *(_OWORD *)(a2 + 5);
  v44 = v8;
  memcpy(v49, a2 + 17, sizeof(v49));
  sub_20F13F604((uint64_t)__p, a2 + 53);
  LOBYTE(v52) = 0;
  v101 = 0;
  if (*((_BYTE *)a2 + 3152))
  {
    v53 = a2[65];
    v52 = *(_OWORD *)(a2 + 63);
    v54 = *((_OWORD *)a2 + 33);
    v55 = a2[68];
    v9 = *(_OWORD *)(a2 + 71);
    v56 = *(_OWORD *)(a2 + 69);
    v57 = v9;
    v10 = *(_OWORD *)(a2 + 79);
    v60 = *(_OWORD *)(a2 + 77);
    v61 = v10;
    v11 = *(_OWORD *)(a2 + 75);
    v58 = *(_OWORD *)(a2 + 73);
    v59 = v11;
    v62 = a2[81];
    v67 = a2[90];
    v12 = *((_OWORD *)a2 + 43);
    v66 = *((_OWORD *)a2 + 44);
    v65 = v12;
    v13 = *((_OWORD *)a2 + 42);
    v63 = *((_OWORD *)a2 + 41);
    v64 = v13;
    v14 = *(_OWORD *)(a2 + 97);
    v70 = *(_OWORD *)(a2 + 95);
    v71 = v14;
    v15 = *(_OWORD *)(a2 + 93);
    v68 = *(_OWORD *)(a2 + 91);
    v69 = v15;
    v72 = a2[99];
    v16 = *((_OWORD *)a2 + 50);
    v17 = *((_OWORD *)a2 + 51);
    v18 = *((_OWORD *)a2 + 52);
    v19 = *((_OWORD *)a2 + 53);
    v77 = a2[108];
    v76 = v19;
    v75 = v18;
    v73 = v16;
    v74 = v17;
    v20 = a2[117];
    v21 = *(_OWORD *)(a2 + 109);
    v22 = *(_OWORD *)(a2 + 111);
    v23 = *(_OWORD *)(a2 + 115);
    v80 = *(_OWORD *)(a2 + 113);
    v81 = v23;
    v78 = v21;
    v79 = v22;
    v82 = v20;
    v24 = *((_OWORD *)a2 + 59);
    v25 = *((_OWORD *)a2 + 60);
    v26 = *((_OWORD *)a2 + 61);
    v27 = *((_OWORD *)a2 + 62);
    v87 = a2[126];
    v86 = v27;
    v85 = v26;
    v83 = v24;
    v84 = v25;
    v28 = a2[135];
    v29 = *(_OWORD *)(a2 + 127);
    v30 = *(_OWORD *)(a2 + 129);
    v31 = *(_OWORD *)(a2 + 133);
    v90 = *(_OWORD *)(a2 + 131);
    v91 = v31;
    v88 = v29;
    v89 = v30;
    v92 = v28;
    v93 = *((_OWORD *)a2 + 68);
    v32 = *((_OWORD *)a2 + 69);
    v33 = *((_OWORD *)a2 + 70);
    v34 = *((_OWORD *)a2 + 71);
    v97 = a2[144];
    v96 = v34;
    v95 = v33;
    v94 = v32;
    memcpy(v98, a2 + 145, sizeof(v98));
    memcpy(v99, a2 + 232, sizeof(v99));
    memcpy(v100, a2 + 313, sizeof(v100));
    v101 = 1;
  }
  sub_20F13D1BC(v4, (uint64_t)&v40);
  if (v51 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v35 = 0xEBE8AB1946A49E23 * ((uint64_t)(a1[1] - *a1) >> 3);
  v36 = a1[5];
  v37 = a1[4] + 1;
  if (v37 >= v35)
    v38 = 0xEBE8AB1946A49E23 * ((uint64_t)(a1[1] - *a1) >> 3);
  else
    v38 = 0;
  a1[4] = v37 - v38;
  if (v36 == v35)
  {
    v39 = a1[3] + 1;
    if (v39 < v35)
      v35 = 0;
    a1[3] = v39 - v35;
  }
  else
  {
    a1[5] = v36 + 1;
  }
}

void *sub_20F8228A8()
{
  float64x2_t **v0;
  float64_t v1;
  float64x2_t v2;
  uint64_t v3;
  float64x2_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t **v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v17;
  uint64_t v18;
  double v22;
  double v23;

  v0 = (float64x2_t **)MEMORY[0x24BDAC7A8]();
  v2.f64[0] = v1;
  v4.f64[0] = *(float64_t *)(*(_QWORD *)v3 + 16);
  v6.f64[0] = *(float64_t *)(*(_QWORD *)v5 + 16);
  v7 = vsubq_f64(v4, v6);
  v7.f64[0] = (*v8)[1].f64[0];
  v6.f64[0] = (*v0)[1].f64[0];
  v9 = **v0;
  v10 = vsubq_f64(v7, v6);
  v11 = vsubq_f64(**v8, v9);
  __asm { FMOV            V0.2D, #0.5 }
  v17 = vmlaq_f64(v9, v11, _Q0);
  v11.f64[0] = *(float64_t *)(v18 + 1320);
  _Q1 = vsubq_f64(vmlaq_f64(v6, v10, _Q0), v11);
  _Q2 = vsubq_f64(v17, *(float64x2_t *)(v18 + 1304));
  _Q4 = vmulq_n_f64(_Q2, v2.f64[0]);
  *(_QWORD *)&v22 = *(_OWORD *)&vmulq_f64(v2, _Q1);
  _Q2.f64[0] = vmuld_lane_f64(v2.f64[0], _Q2, 1);
  v17.f64[0] = v2.f64[0] * _Q1.f64[0];
  __asm { FMLA            D1, D2, V4.D[1] }
  v23 = vmlad_n_f64(_Q1.f64[0], v17.f64[0], v22);
  if (v23 <= 1.0e-20)
  {
    __asm { FMOV            V2.2D, #1.0 }
  }
  else
  {
    __sincos_stret(sqrt(v23));
    __asm { FMOV            V4.2D, #1.0 }
  }
  return sub_20F822C00();
}

void *sub_20F822C00()
{
  float64x2_t v0;
  float64x2_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  float64x2_t *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  float64x2_t *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  float64x2_t *v111;
  float64x2_t v112;
  __int128 v113;
  uint64_t v114;
  float64x2_t v115;
  float64x2_t v117;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  double v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  uint64_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  float64x2_t v272;
  __int128 v273;
  uint64_t v274;
  float64x2_t v275;
  float64x2_t v277;
  float64x2_t v282;
  float64x2_t *v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t *v287;
  float64x2_t *v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  __int128 v426;
  uint64_t v427;
  float64x2_t v428;
  float64x2_t v430;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t *v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  int v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  float64x2_t v817;
  int8x16_t v818;
  int8x16_t v819;
  int8x16_t v820;
  int8x16_t v821;
  int8x16_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  float64_t v833;
  unint64_t v834;
  unint64_t v835;
  float64x2_t v836;
  float64x2_t *v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  int8x16_t v898;
  int8x16_t v899;
  int8x16_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int8x16_t v903;
  int8x16_t v904;
  int8x16_t v905;
  int8x16_t v906;
  int8x16_t v907;
  int8x16_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  int8x16_t v917;
  int8x16_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int8x16_t v921;
  int8x16_t v922;
  float64x2_t v923;
  int8x16_t v924;
  int8x16_t v925;
  int8x16_t v926;
  unint64_t v927;
  float64x2_t v928;
  unint64_t v929;
  unint64_t v930;
  unint64_t v931;
  unint64_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  __int128 v1034;
  __int128 v1035;
  __int128 v1036;
  __int128 v1037;
  __int128 v1038;
  __int128 v1039;
  __int128 v1040;
  __int128 v1041;
  __int128 v1042;
  __int128 v1043;
  __int128 v1044;
  __int128 v1045;
  __int128 v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  void *result;
  float64x2_t v1051;
  __int128 v1052;
  uint64_t v1053;
  float64x2_t v1054;
  float64x2_t v1056;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  float64x2_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  float64x2_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  uint64_t v1132;
  unint64_t v1133;
  unint64_t v1134;
  unint64_t v1135;
  unint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  unint64_t v1145;
  unint64_t v1146;
  unint64_t v1147;
  unint64_t v1148;
  unint64_t v1149;
  unint64_t v1150;
  unint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  unint64_t v1154;
  unint64_t v1155;
  unint64_t v1156;
  float64_t v1157;
  unint64_t v1158;
  unint64_t v1159;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  unint64_t v1163;
  unint64_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  float64x2_t v1169;
  unint64_t v1170;
  float64x2_t v1171;
  unint64_t v1172;
  float64x2_t v1173;
  unint64_t v1174;
  float64x2_t v1175;
  unint64_t v1176;
  float64x2_t v1177;
  unint64_t v1178;
  float64x2_t v1179;
  unint64_t v1180;
  float64x2_t v1181;
  unint64_t v1182;
  float64x2_t v1183;
  unint64_t v1184;
  float64x2_t v1185;
  unint64_t v1186;
  float64x2_t v1187;
  unint64_t v1188;
  float64x2_t v1189;
  unint64_t v1190;
  float64x2_t v1191;
  unint64_t v1192;
  unint64_t v1193;
  unint64_t v1194;
  unint64_t v1195;
  unint64_t v1196;
  unint64_t v1197;
  unint64_t v1198;
  unint64_t v1199;
  unint64_t v1200;
  unint64_t v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  unint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  unint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  unint64_t v1215;
  unint64_t v1216;
  unint64_t v1217;
  unint64_t v1218;
  unint64_t v1219;
  unint64_t v1220;
  unint64_t v1221;
  unint64_t v1222;
  unint64_t v1223;
  unint64_t v1224;
  unint64_t v1225;
  unint64_t v1226;
  unint64_t v1227;
  unint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  unint64_t v1235;
  unint64_t v1236;
  unint64_t v1237;
  unint64_t v1238;
  unint64_t v1239;
  unint64_t v1240;
  unint64_t v1241;
  unint64_t v1242;
  unint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t v1246;
  unint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  unint64_t v1250;
  unint64_t v1251;
  unint64_t v1252;
  unint64_t v1253;
  unint64_t v1254;
  unint64_t v1255;
  unint64_t v1256;
  unint64_t v1257;
  unint64_t v1258;
  unint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  unint64_t v1267;
  float64x2_t v1268;
  unint64_t v1269;
  float64x2_t v1270;
  unint64_t v1271;
  float64x2_t v1272;
  unint64_t v1273;
  float64x2_t v1274;
  unint64_t v1275;
  float64x2_t v1276;
  unint64_t v1277;
  float64x2_t v1278;
  unint64_t v1279;
  float64x2_t v1280;
  unint64_t v1281;
  float64x2_t v1282;
  unint64_t v1283;
  float64x2_t v1284;
  unint64_t v1285;
  float64x2_t v1286;
  unint64_t v1287;
  float64x2_t v1288;
  unint64_t v1289;
  float64x2_t v1290;
  unint64_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  uint64_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  uint64_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64_t v1339;
  unint64_t v1340;
  float64x2_t v1341;
  float64x2_t v1342;
  unint64_t v1343;
  float64x2_t v1344;
  float64x2_t v1345;
  unint64_t v1346;
  float64x2_t v1347;
  float64x2_t v1348;
  float64x2_t v1349;
  float64x2_t *v1350;
  int8x16_t v1351;
  float64x2_t v1352;
  unint64_t v1353;
  int8x16_t v1354;
  float64_t v1355;
  unint64_t v1356;
  int8x16_t v1357;
  float64_t v1358;
  unint64_t v1359;
  int8x16_t v1360;
  float64x2_t v1361;
  unint64_t v1362;
  int8x16_t v1363;
  float64x2_t v1364;
  unint64_t v1365;
  int8x16_t v1366;
  float64x2_t v1367;
  unint64_t v1368;
  int8x16_t v1369;
  float64x2_t v1370;
  unint64_t v1371;
  int8x16_t v1372;
  float64x2_t v1373;
  unint64_t v1374;
  int8x16_t v1375;
  unint64_t v1376;
  int8x16_t v1377;
  unint64_t v1378;
  int8x16_t v1379;
  unint64_t v1380;
  int8x16_t v1381;
  unint64_t v1382;
  int8x16_t v1383;
  unint64_t v1384;
  int8x16_t v1385;
  unint64_t v1386;
  int8x16_t v1387;
  unint64_t v1388;
  int8x16_t v1389;
  unint64_t v1390;
  int8x16_t v1391;
  unint64_t v1392;
  int8x16_t v1393;
  unint64_t v1394;
  int8x16_t v1395;
  unint64_t v1396;
  int8x16_t v1397;
  unint64_t v1398;
  int8x16_t v1399;
  unint64_t v1400;
  int8x16_t v1401;
  unint64_t v1402;
  int8x16_t v1403;
  unint64_t v1404;
  int8x16_t v1405;
  unint64_t v1406;
  float64x2_t v1407;
  unint64_t v1408;
  float64x2_t v1409;
  unint64_t v1410;
  int8x16_t v1411;
  unint64_t v1412;
  int8x16_t v1413;
  unint64_t v1414;
  int8x16_t v1415;
  unint64_t v1416;
  float64x2_t v1417;
  unint64_t v1418;
  int8x16_t v1419;
  unint64_t v1420;
  int8x16_t v1421;
  int8x16_t v1422;
  unint64_t v1423;
  int8x16_t v1424;
  unint64_t v1425;
  int8x16_t v1426;
  int8x16_t v1427;
  unint64_t v1428;
  float64x2_t v1429;
  unint64_t v1430;
  int8x16_t v1431;
  unint64_t v1432;
  int8x16_t v1433;
  int8x16_t v1434;
  unint64_t v1435;
  int8x16_t v1436;
  unint64_t v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  unint64_t v1440;
  int8x16_t v1441;
  unint64_t v1442;
  int8x16_t v1443;
  unint64_t v1444;
  float64x2_t v1445;
  unint64_t v1446;
  int8x16_t v1447;
  unint64_t v1448;
  int8x16_t v1449;
  float64x2_t v1450;
  int8x16_t v1451;
  float64x2_t v1452;
  int8x16_t v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  int8x16_t v1456;
  int8x16_t v1457;
  int8x16_t v1458;
  int8x16_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int8x16_t v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  float64x2_t *v1467;
  uint64_t v1468;
  uint64_t v1469;
  float64x2_t v1470;
  uint64_t v1471;
  float64x2_t *v1472;
  float64x2_t *v1473;
  int8x16_t v1474;
  float64x2_t v1475;
  int8x16_t v1476;
  float64x2_t v1477;
  int8x16_t v1478;
  float64x2_t v1479;
  int8x16_t v1480;
  float64x2_t v1481;
  float64x2_t *v1482;
  float64x2_t *v1483;
  float64x2_t *v1484;
  float64_t v1485;
  uint64_t v1486;
  _OWORD *v1487;
  _OWORD *v1488;
  _OWORD *v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  _OWORD *v1494;
  _OWORD *v1495;
  uint64_t v1496;
  uint64_t v1497;
  _OWORD *v1498;
  uint64_t v1499;
  _OWORD *v1500;
  void *__src;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  _OWORD *v1505;
  float64x2_t *v1506;
  int8x16_t v1507;
  float64x2_t v1508;
  unint64_t v1509;
  int8x16_t v1510;
  float64x2_t v1511;
  unint64_t v1512;
  int8x16_t v1513;
  float64x2_t v1514;
  unint64_t v1515;
  int8x16_t v1516;
  float64x2_t v1517;
  unint64_t v1518;
  int8x16_t v1519;
  float64x2_t v1520;
  unint64_t v1521;
  int8x16_t v1522;
  float64x2_t v1523;
  unint64_t v1524;
  int8x16_t v1525;
  float64x2_t v1526;
  unint64_t v1527;
  int8x16_t v1528;
  float64x2_t v1529;
  unint64_t v1530;
  int8x16_t v1531;
  float64x2_t v1532;
  unint64_t v1533;
  int8x16_t v1534;
  float64x2_t v1535;
  unint64_t v1536;
  int8x16_t v1537;
  float64x2_t v1538;
  unint64_t v1539;
  int8x16_t v1540;
  float64x2_t v1541;
  unint64_t v1542;
  int8x16_t v1543;
  float64x2_t v1544;
  unint64_t v1545;
  int8x16_t v1546;
  float64x2_t v1547;
  unint64_t v1548;
  int8x16_t v1549;
  float64x2_t v1550;
  unint64_t v1551;
  int8x16_t v1552;
  float64x2_t v1553;
  unint64_t v1554;
  int8x16_t v1555;
  float64x2_t v1556;
  float64_t v1557;
  int8x16_t v1558;
  int8x16_t v1559;
  float64x2_t v1560;
  float64_t v1561;
  int8x16_t v1562;
  int8x16_t v1563;
  float64x2_t v1564;
  float64_t v1565;
  int8x16_t v1566;
  int8x16_t v1567;
  float64x2_t v1568;
  float64_t v1569;
  int8x16_t v1570;
  int8x16_t v1571;
  float64x2_t v1572;
  unint64_t v1573;
  int8x16_t v1574;
  float64x2_t v1575;
  uint64_t v1576;
  unint64_t v1577;
  int8x16_t v1578;
  float64x2_t v1579;
  uint64_t v1580;
  float64x2_t v1581;
  unint64_t v1582;
  int8x16_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  int8x16_t v1586;
  float64x2_t v1587;
  uint64_t v1588;
  float64x2_t v1589;
  float64_t v1590;
  int8x16_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  int8x16_t v1594;
  float64x2_t v1595;
  uint64_t v1596;
  float64x2_t v1597;
  float64_t v1598;
  int8x16_t v1599;
  float64x2_t v1600;
  float64x2_t v1601;
  int8x16_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  int8x16_t v1605;
  float64x2_t v1606;
  uint64_t v1607;
  float64x2_t v1608;
  float64_t v1609;
  int8x16_t v1610;
  float64x2_t v1611;
  float64_t v1612;
  int8x16_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  int8x16_t v1616;
  float64x2_t v1617;
  uint64_t v1618;
  float64x2_t v1619;
  float64_t v1620;
  int8x16_t v1621;
  float64x2_t v1622;
  float64_t v1623;
  int8x16_t v1624;
  float64x2_t v1625;
  uint64_t v1626;
  float64x2_t v1627;
  float64_t v1628;
  int8x16_t v1629;
  float64x2_t v1630;
  float64_t v1631;
  int8x16_t v1632;
  float64x2_t v1633;
  uint64_t v1634;
  float64x2_t v1635;
  float64_t v1636;
  int8x16_t v1637;
  float64x2_t v1638;
  float64_t v1639;
  int8x16_t v1640;
  float64x2_t v1641;
  uint64_t v1642;
  float64x2_t v1643;
  float64_t v1644;
  int8x16_t v1645;
  float64x2_t v1646;
  float64_t v1647;
  int8x16_t v1648;
  float64x2_t v1649;
  uint64_t v1650;
  float64x2_t v1651;
  uint64_t v1652;
  float64x2_t v1653;
  int8x16_t v1654;
  float64x2_t v1655;
  uint64_t v1656;
  float64x2_t v1657;
  uint64_t v1658;
  float64x2_t v1659;
  int8x16_t v1660;
  float64x2_t v1661;
  uint64_t v1662;
  float64x2_t v1663;
  int8x16_t v1664;
  float64x2_t v1665;
  uint64_t v1666;
  int8x16_t v1667;
  float64x2_t v1668;
  uint64_t v1669;
  float64x2_t v1670;
  uint64_t v1671;
  float64x2_t v1672;
  int8x16_t v1673;
  float64x2_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  float64x2_t v1677;
  int8x16_t v1678;
  float64x2_t v1679;
  uint64_t v1680;
  float64x2_t v1681;
  int8x16_t v1682;
  float64x2_t v1683;
  int8x16_t v1684;
  float64x2_t v1685;
  uint64_t v1686;
  float64x2_t v1687;
  uint64_t v1688;
  float64x2_t v1689;
  int8x16_t v1690;
  float64x2_t v1691;
  uint64_t v1692;
  float64x2_t v1693;
  uint64_t v1694;
  float64x2_t v1695;
  int8x16_t v1696;
  float64x2_t v1697;
  int8x16_t v1698;
  float64x2_t v1699;
  uint64_t v1700;
  float64x2_t v1701;
  int8x16_t v1702;
  float64x2_t v1703;
  uint64_t v1704;
  float64x2_t v1705;
  int8x16_t v1706;
  float64x2_t v1707;
  int8x16_t v1708;
  float64x2_t v1709;
  float64_t v1710;
  float64x2_t v1711;
  uint64_t v1712;
  float64x2_t v1713;
  int8x16_t v1714;
  float64x2_t v1715;
  int8x16_t v1716;
  float64x2_t v1717;
  uint64_t v1718;
  float64x2_t v1719;
  int8x16_t v1720;
  float64x2_t v1721;
  int8x16_t v1722;
  float64x2_t v1723;
  uint64_t v1724;
  float64x2_t v1725;
  float64_t v1726;
  float64x2_t v1727;
  int8x16_t v1728;
  float64x2_t v1729;
  int8x16_t v1730;
  float64x2_t v1731;
  uint64_t v1732;
  float64x2_t v1733;
  float64x2_t v1734;
  float64x2_t v1735;
  float64x2_t v1736;
  int8x16_t v1737;
  float64x2_t v1738;
  float64x2_t v1739;
  float64x2_t v1740;
  float64x2_t v1741;
  int8x16_t v1742;
  float64x2_t v1743;
  float64x2_t v1744;
  float64x2_t v1745;
  float64x2_t v1746;
  int8x16_t v1747;
  uint64_t v1748;
  float64x2_t v1749;
  uint64_t v1750;
  float64x2_t v1751;
  float64x2_t v1752;
  float64x2_t v1753;
  float64x2_t v1754;
  float64x2_t v1755;
  int8x16_t v1756;
  float64x2_t v1757;
  float64x2_t v1758;
  float64x2_t v1759;
  float64x2_t v1760;
  float64x2_t v1761;
  float64x2_t v1762;
  int8x16_t v1763;
  float64x2_t v1764;
  float64x2_t v1765;
  float64x2_t v1766;
  float64x2_t v1767;
  float64x2_t v1768;
  float64x2_t v1769;
  int8x16_t v1770;
  float64x2_t v1771;
  int8x16_t v1772;
  float64x2_t v1773;
  float64x2_t v1774;
  float64x2_t v1775;
  float64x2_t v1776;
  float64x2_t v1777;
  float64x2_t v1778;
  float64x2_t v1779;
  float64x2_t v1780;
  int8x16_t v1781;
  float64x2_t v1782;
  float64x2_t v1783;
  float64x2_t v1784;
  float64x2_t v1785;
  float64x2_t v1786;
  float64x2_t v1787;
  float64x2_t v1788;
  int8x16_t v1789;
  float64x2_t v1790;
  uint64_t v1791;
  float64x2_t v1792;
  float64x2_t v1793;
  float64x2_t v1794;
  float64x2_t v1795;
  float64x2_t v1796;
  float64x2_t v1797;
  float64x2_t v1798;
  float64x2_t v1799;
  float64x2_t v1800;
  int8x16_t v1801;
  float64x2_t v1802;
  float64x2_t v1803;
  float64x2_t v1804;
  float64x2_t v1805;
  float64x2_t v1806;
  float64_t v1807;
  float64x2_t v1808;
  float64x2_t v1809;
  int8x16_t v1810;
  float64x2_t v1811;
  float64x2_t v1812;
  float64x2_t v1813;
  float64x2_t v1814;
  float64x2_t v1815;
  float64x2_t v1816;
  int8x16_t v1817;
  float64x2_t v1818;
  float64x2_t v1819;
  float64x2_t v1820;
  double v1821;
  float64x2_t v1822;
  float64x2_t v1823;
  float64x2_t v1824;
  int8x16_t v1825;
  float64x2_t v1826;
  float64x2_t v1827;
  float64x2_t v1828;
  float64x2_t *v1829;
  float64x2_t v1830;
  float64x2_t v1831;
  int8x16_t v1832;
  float64x2_t v1833;
  float64x2_t v1834;
  float64x2_t v1835;
  float64x2_t v1836;
  float64x2_t v1837;
  float64x2_t v1838;
  float64x2_t v1839;
  int8x16_t v1840;
  float64x2_t v1841;
  float64x2_t v1842;
  float64x2_t v1843;
  float64x2_t v1844;
  float64x2_t v1845;
  float64x2_t v1846;
  float64x2_t v1847;
  int8x16_t v1848;
  float64x2_t v1849;
  uint64_t v1850;
  float64x2_t v1851;
  uint64_t v1852;
  float64x2_t v1853;
  float64x2_t v1854;
  int8x16_t v1855;
  float64x2_t v1856;
  float64x2_t v1857;
  float64x2_t *v1858;
  int8x16_t v1859;
  float64x2_t v1860;
  float64_t v1861;
  _BYTE *v1862;

  v2 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v6 = v5;
  v1862 = v7;
  v8 = v2;
  v1836 = v9;
  v11 = v10.f64[0];
  v12 = v3 + 584;
  v13 = v3 + 296;
  v14 = v5 + 584;
  v15 = (float64x2_t *)(v5 + 296);
  v1852 = v16;
  sub_20F828414(v16, v2, v5, v10, v9, v17, v18, v19, v20, v21, v22);
  v23.f64[0] = *(float64_t *)(v6 + 16);
  v24.f64[0] = v1836.f64[0] * 0.5;
  v25 = vmulq_n_f64(*(float64x2_t *)v6, v1836.f64[0] * 0.5);
  *(float64x2_t *)v6 = v25;
  *(_QWORD *)(v6 + 16) = *(_OWORD *)&vmulq_f64(v24, v23);
  v25.f64[0] = *(float64_t *)(v6 + 40);
  *(float64x2_t *)(v6 + 24) = vmulq_n_f64(*(float64x2_t *)(v6 + 24), v1836.f64[0] * 0.5);
  *(_QWORD *)(v6 + 40) = *(_OWORD *)&vmulq_f64(v24, v25);
  v26 = vmulq_n_f64(*(float64x2_t *)(v6 + 64), v1836.f64[0] * 0.5);
  v27 = vmulq_n_f64(*(float64x2_t *)(v6 + 48), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 48) = v27;
  *(float64x2_t *)(v6 + 64) = v26;
  v27.f64[0] = *(float64_t *)(v6 + 144);
  v28 = vmulq_f64(v24, v27);
  v29 = vmulq_n_f64(*(float64x2_t *)(v6 + 128), v1836.f64[0] * 0.5);
  v30 = vmulq_n_f64(*(float64x2_t *)(v6 + 112), v1836.f64[0] * 0.5);
  v31 = vmulq_n_f64(*(float64x2_t *)(v6 + 96), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 80) = vmulq_n_f64(*(float64x2_t *)(v6 + 80), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 96) = v31;
  *(float64x2_t *)(v6 + 112) = v30;
  *(float64x2_t *)(v6 + 128) = v29;
  *(float64_t *)(v6 + 144) = v28.f64[0];
  v28.f64[0] = *(float64_t *)(v6 + 216);
  v32 = vmulq_f64(v24, v28);
  v33 = vmulq_n_f64(*(float64x2_t *)(v6 + 200), v1836.f64[0] * 0.5);
  v34 = vmulq_n_f64(*(float64x2_t *)(v6 + 184), v1836.f64[0] * 0.5);
  v35 = vmulq_n_f64(*(float64x2_t *)(v6 + 168), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 152) = vmulq_n_f64(*(float64x2_t *)(v6 + 152), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 168) = v35;
  *(float64x2_t *)(v6 + 184) = v34;
  *(float64x2_t *)(v6 + 200) = v33;
  *(float64_t *)(v6 + 216) = v32.f64[0];
  v32.f64[0] = *(float64_t *)(v6 + 288);
  v36 = vmulq_f64(v24, v32);
  v37 = vmulq_n_f64(*(float64x2_t *)(v6 + 272), v1836.f64[0] * 0.5);
  v38 = vmulq_n_f64(*(float64x2_t *)(v6 + 256), v1836.f64[0] * 0.5);
  v39 = vmulq_n_f64(*(float64x2_t *)(v6 + 240), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 224) = vmulq_n_f64(*(float64x2_t *)(v6 + 224), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 240) = v39;
  *(float64x2_t *)(v6 + 256) = v38;
  *(float64x2_t *)(v6 + 272) = v37;
  *(float64_t *)(v6 + 288) = v36.f64[0];
  v36.f64[0] = *(float64_t *)(v6 + 360);
  v40 = vmulq_f64(v24, v36);
  v41 = vmulq_n_f64(v15[3], v1836.f64[0] * 0.5);
  v42 = vmulq_n_f64(v15[2], v1836.f64[0] * 0.5);
  v43 = vmulq_n_f64(v15[1], v1836.f64[0] * 0.5);
  *v15 = vmulq_n_f64(*v15, v1836.f64[0] * 0.5);
  v15[1] = v43;
  v15[2] = v42;
  v15[3] = v41;
  *(float64_t *)(v6 + 360) = v40.f64[0];
  v40.f64[0] = *(float64_t *)(v6 + 432);
  v44 = vmulq_f64(v24, v40);
  v45 = vmulq_n_f64(*(float64x2_t *)(v6 + 416), v1836.f64[0] * 0.5);
  v46 = vmulq_n_f64(*(float64x2_t *)(v6 + 400), v1836.f64[0] * 0.5);
  v47 = vmulq_n_f64(*(float64x2_t *)(v6 + 384), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 368) = vmulq_n_f64(*(float64x2_t *)(v6 + 368), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v6 + 384) = v47;
  *(float64x2_t *)(v6 + 400) = v46;
  *(float64x2_t *)(v6 + 416) = v45;
  *(float64_t *)(v6 + 432) = v44.f64[0];
  v44.f64[0] = *(float64_t *)(v6 + 504);
  v48 = vmulq_f64(v24, v44);
  v49 = vmulq_n_f64(v15[12], v1836.f64[0] * 0.5);
  v50 = vmulq_n_f64(v15[11], v1836.f64[0] * 0.5);
  v51 = vmulq_n_f64(v15[10], v1836.f64[0] * 0.5);
  v15[9] = vmulq_n_f64(v15[9], v1836.f64[0] * 0.5);
  v15[10] = v51;
  v15[11] = v50;
  v15[12] = v49;
  v1829 = v15;
  *(float64_t *)(v6 + 504) = v48.f64[0];
  v48.f64[0] = *(float64_t *)(v6 + 576);
  v52 = vmulq_f64(v24, v48);
  v53 = vmulq_n_f64(*(float64x2_t *)(v6 + 512), v1836.f64[0] * 0.5);
  v54 = vmulq_n_f64(*(float64x2_t *)(v6 + 528), v1836.f64[0] * 0.5);
  v55 = vmulq_n_f64(*(float64x2_t *)(v6 + 544), v1836.f64[0] * 0.5);
  v56 = vmulq_n_f64(*(float64x2_t *)(v6 + 560), v1836.f64[0] * 0.5);
  *(float64_t *)(v6 + 576) = v52.f64[0];
  *(float64x2_t *)(v6 + 544) = v55;
  *(float64x2_t *)(v6 + 560) = v56;
  *(float64x2_t *)(v6 + 512) = v53;
  *(float64x2_t *)(v6 + 528) = v54;
  v52.f64[0] = *(float64_t *)(v6 + 648);
  v57 = vmulq_n_f64(*(float64x2_t *)v14, v1836.f64[0] * 0.5);
  v58 = vmulq_n_f64(*(float64x2_t *)(v14 + 16), v1836.f64[0] * 0.5);
  v59 = vmulq_n_f64(*(float64x2_t *)(v14 + 48), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v14 + 32) = vmulq_n_f64(*(float64x2_t *)(v14 + 32), v1836.f64[0] * 0.5);
  *(float64x2_t *)(v14 + 48) = v59;
  *(float64x2_t *)v14 = v57;
  *(float64x2_t *)(v14 + 16) = v58;
  *(_QWORD *)(v6 + 648) = *(_OWORD *)&vmulq_f64(v24, v52);
  if (*(_BYTE *)(v6 + 1304))
  {
    v60 = *(float64x2_t *)(v14 + 72);
    v61 = vmulq_n_f64(*(float64x2_t *)(v14 + 696), v24.f64[0]);
    *(float64x2_t *)(v14 + 680) = vmulq_n_f64(*(float64x2_t *)(v14 + 680), v24.f64[0]);
    *(float64x2_t *)(v14 + 696) = v61;
    v62 = vmulq_n_f64(*(float64x2_t *)(v14 + 664), v24.f64[0]);
    *(float64x2_t *)(v14 + 648) = vmulq_n_f64(*(float64x2_t *)(v14 + 648), v24.f64[0]);
    *(float64x2_t *)(v14 + 664) = v62;
    v63 = vmulq_n_f64(*(float64x2_t *)(v14 + 632), v24.f64[0]);
    *(float64x2_t *)(v14 + 616) = vmulq_n_f64(*(float64x2_t *)(v14 + 616), v24.f64[0]);
    *(float64x2_t *)(v14 + 632) = v63;
    v64 = vmulq_n_f64(*(float64x2_t *)(v14 + 600), v24.f64[0]);
    *(float64x2_t *)(v14 + 584) = vmulq_n_f64(*(float64x2_t *)(v14 + 584), v24.f64[0]);
    *(float64x2_t *)(v14 + 600) = v64;
    v65 = vmulq_n_f64(*(float64x2_t *)(v14 + 568), v24.f64[0]);
    *(float64x2_t *)(v14 + 552) = vmulq_n_f64(*(float64x2_t *)(v14 + 552), v24.f64[0]);
    *(float64x2_t *)(v14 + 568) = v65;
    v66 = vmulq_n_f64(*(float64x2_t *)(v14 + 536), v24.f64[0]);
    *(float64x2_t *)(v14 + 520) = vmulq_n_f64(*(float64x2_t *)(v14 + 520), v24.f64[0]);
    *(float64x2_t *)(v14 + 536) = v66;
    v67 = vmulq_n_f64(*(float64x2_t *)(v14 + 504), v24.f64[0]);
    *(float64x2_t *)(v14 + 488) = vmulq_n_f64(*(float64x2_t *)(v14 + 488), v24.f64[0]);
    *(float64x2_t *)(v14 + 504) = v67;
    v68 = vmulq_n_f64(*(float64x2_t *)(v14 + 472), v24.f64[0]);
    *(float64x2_t *)(v14 + 456) = vmulq_n_f64(*(float64x2_t *)(v14 + 456), v24.f64[0]);
    *(float64x2_t *)(v14 + 472) = v68;
    v69 = vmulq_n_f64(*(float64x2_t *)(v14 + 440), v24.f64[0]);
    *(float64x2_t *)(v14 + 424) = vmulq_n_f64(*(float64x2_t *)(v14 + 424), v24.f64[0]);
    *(float64x2_t *)(v14 + 440) = v69;
    v70 = vmulq_n_f64(*(float64x2_t *)(v14 + 408), v24.f64[0]);
    *(float64x2_t *)(v14 + 392) = vmulq_n_f64(*(float64x2_t *)(v14 + 392), v24.f64[0]);
    *(float64x2_t *)(v14 + 408) = v70;
    v71 = vmulq_n_f64(*(float64x2_t *)(v14 + 376), v24.f64[0]);
    *(float64x2_t *)(v14 + 360) = vmulq_n_f64(*(float64x2_t *)(v14 + 360), v24.f64[0]);
    *(float64x2_t *)(v14 + 376) = v71;
    v72 = vmulq_n_f64(*(float64x2_t *)(v14 + 344), v24.f64[0]);
    *(float64x2_t *)(v14 + 328) = vmulq_n_f64(*(float64x2_t *)(v14 + 328), v24.f64[0]);
    *(float64x2_t *)(v14 + 344) = v72;
    v73 = vmulq_n_f64(*(float64x2_t *)(v14 + 312), v24.f64[0]);
    *(float64x2_t *)(v14 + 296) = vmulq_n_f64(*(float64x2_t *)(v14 + 296), v24.f64[0]);
    *(float64x2_t *)(v14 + 312) = v73;
    v74 = vmulq_n_f64(*(float64x2_t *)(v14 + 280), v24.f64[0]);
    *(float64x2_t *)(v14 + 264) = vmulq_n_f64(*(float64x2_t *)(v14 + 264), v24.f64[0]);
    *(float64x2_t *)(v14 + 280) = v74;
    v75 = vmulq_n_f64(*(float64x2_t *)(v14 + 248), v24.f64[0]);
    *(float64x2_t *)(v14 + 232) = vmulq_n_f64(*(float64x2_t *)(v14 + 232), v24.f64[0]);
    *(float64x2_t *)(v14 + 248) = v75;
    v76 = vmulq_n_f64(*(float64x2_t *)(v14 + 216), v24.f64[0]);
    *(float64x2_t *)(v14 + 200) = vmulq_n_f64(*(float64x2_t *)(v14 + 200), v24.f64[0]);
    *(float64x2_t *)(v14 + 216) = v76;
    v77 = vmulq_n_f64(*(float64x2_t *)(v14 + 184), v24.f64[0]);
    *(float64x2_t *)(v14 + 168) = vmulq_n_f64(*(float64x2_t *)(v14 + 168), v24.f64[0]);
    *(float64x2_t *)(v14 + 184) = v77;
    v78 = vmulq_n_f64(*(float64x2_t *)(v14 + 152), v24.f64[0]);
    *(float64x2_t *)(v14 + 136) = vmulq_n_f64(*(float64x2_t *)(v14 + 136), v24.f64[0]);
    *(float64x2_t *)(v14 + 152) = v78;
    v79 = *(float64x2_t *)(v14 + 88);
    v80 = vmulq_n_f64(*(float64x2_t *)(v14 + 120), v24.f64[0]);
    *(float64x2_t *)(v14 + 104) = vmulq_n_f64(*(float64x2_t *)(v14 + 104), v24.f64[0]);
    *(float64x2_t *)(v14 + 120) = v80;
    v81 = vmulq_n_f64(v60, v24.f64[0]);
    *(float64x2_t *)(v14 + 72) = v81;
    *(float64x2_t *)(v14 + 88) = vmulq_n_f64(v79, v24.f64[0]);
    v81.f64[0] = *(float64_t *)(v14 + 712);
    *(_QWORD *)(v14 + 712) = *(_OWORD *)&vmulq_f64(v24, v81);
  }
  v1844 = v24;
  v1468 = v14;
  v82 = *(_OWORD *)v8;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v4 = v82;
  v83 = *(_OWORD *)(v8 + 24);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v8 + 40);
  *(_OWORD *)(v4 + 24) = v83;
  v84 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v4 + 64) = v84;
  v85 = (float64x2_t *)(v4 + 80);
  v87 = *(_OWORD *)(v8 + 112);
  v86 = *(_OWORD *)(v8 + 128);
  v88 = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v8 + 144);
  *(_OWORD *)(v4 + 112) = v87;
  *(_OWORD *)(v4 + 128) = v86;
  *(_OWORD *)(v4 + 96) = v88;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(v8 + 80);
  v89 = (float64x2_t *)(v4 + 152);
  v90 = *(_OWORD *)(v8 + 184);
  v91 = *(_OWORD *)(v8 + 200);
  v92 = *(_QWORD *)(v8 + 216);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(v8 + 168);
  *(_QWORD *)(v4 + 216) = v92;
  *(_OWORD *)(v4 + 200) = v91;
  *(_OWORD *)(v4 + 184) = v90;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(v8 + 152);
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(v8 + 224);
  v93 = *(_OWORD *)(v8 + 240);
  v94 = *(_OWORD *)(v8 + 256);
  v95 = *(_OWORD *)(v8 + 272);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v8 + 288);
  *(_OWORD *)(v4 + 256) = v94;
  *(_OWORD *)(v4 + 272) = v95;
  *(_OWORD *)(v4 + 240) = v93;
  *(_OWORD *)v13 = *(_OWORD *)(v8 + 296);
  v96 = *(_OWORD *)(v8 + 312);
  v97 = *(_OWORD *)(v8 + 328);
  v1504 = v8 + 296;
  v98 = *(_OWORD *)(v8 + 344);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v8 + 360);
  *(_OWORD *)(v13 + 32) = v97;
  *(_OWORD *)(v13 + 48) = v98;
  *(_OWORD *)(v13 + 16) = v96;
  *(_OWORD *)(v13 + 72) = *(_OWORD *)(v8 + 368);
  v99 = *(_OWORD *)(v8 + 384);
  v100 = *(_OWORD *)(v8 + 400);
  v101 = *(_OWORD *)(v8 + 416);
  *(_QWORD *)(v13 + 136) = *(_QWORD *)(v8 + 432);
  *(_OWORD *)(v13 + 120) = v101;
  *(_OWORD *)(v13 + 104) = v100;
  *(_OWORD *)(v13 + 88) = v99;
  *(_OWORD *)(v13 + 144) = *(_OWORD *)(v8 + 440);
  v102 = *(_OWORD *)(v8 + 456);
  v103 = *(_OWORD *)(v8 + 472);
  v1503 = v8 + 440;
  v104 = *(_OWORD *)(v8 + 488);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)(v8 + 504);
  *(_OWORD *)(v13 + 176) = v103;
  *(_OWORD *)(v13 + 192) = v104;
  *(_OWORD *)(v13 + 160) = v102;
  *(_OWORD *)(v13 + 216) = *(_OWORD *)(v8 + 512);
  v105 = *(_OWORD *)(v8 + 528);
  v106 = *(_OWORD *)(v8 + 544);
  v107 = *(_OWORD *)(v8 + 560);
  *(_QWORD *)(v13 + 280) = *(_QWORD *)(v8 + 576);
  v1505 = (_OWORD *)(v13 + 216);
  *(_OWORD *)(v13 + 264) = v107;
  *(_OWORD *)(v13 + 248) = v106;
  *(_OWORD *)(v13 + 232) = v105;
  *(_OWORD *)v12 = *(_OWORD *)(v8 + 584);
  v108 = *(_OWORD *)(v8 + 600);
  v109 = *(_OWORD *)(v8 + 616);
  v1502 = v8 + 584;
  v110 = *(_OWORD *)(v8 + 632);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v8 + 648);
  *(_OWORD *)(v12 + 32) = v109;
  *(_OWORD *)(v12 + 48) = v110;
  *(_OWORD *)(v12 + 16) = v108;
  v111 = (float64x2_t *)(v12 + 72);
  __src = (void *)(v8 + 656);
  memcpy((void *)(v12 + 72), (const void *)(v8 + 656), 0x288uLL);
  v1499 = v8 + 1304;
  v113 = *(_OWORD *)(v8 + 1304);
  *(_QWORD *)(v4 + 1320) = *(_QWORD *)(v8 + 1320);
  v1500 = (_OWORD *)(v4 + 1304);
  *(_OWORD *)(v4 + 1304) = v113;
  v114 = *(_QWORD *)(v8 + 1344);
  v115 = *(float64x2_t *)(v8 + 1328);
  *(float64x2_t *)(v4 + 1328) = v115;
  *(_QWORD *)(v4 + 1344) = v114;
  v115.f64[0] = *(float64_t *)(v4 + 16);
  _Q2.f64[0] = *(float64_t *)(v6 + 16);
  v117 = vaddq_f64(v115, _Q2);
  *(float64x2_t *)v4 = vaddq_f64(*(float64x2_t *)v4, *(float64x2_t *)v6);
  *(float64_t *)(v4 + 16) = v117.f64[0];
  v117.f64[0] = *(float64_t *)(v4 + 40);
  _Q2.f64[0] = *(float64_t *)(v6 + 40);
  *(float64x2_t *)(v4 + 24) = vaddq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v6 + 24));
  *(_QWORD *)(v4 + 40) = *(_OWORD *)&vaddq_f64(v117, _Q2);
  _Q1 = vaddq_f64(*(float64x2_t *)(v4 + 64), *(float64x2_t *)(v6 + 64));
  _Q0 = vaddq_f64(*(float64x2_t *)(v4 + 48), *(float64x2_t *)(v6 + 48));
  _D3 = _Q0.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  v126 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(float64x2_t *)(v4 + 48) = v126;
  *(float64x2_t *)(v4 + 64) = vmulq_n_f64(_Q1, _Q2.f64[0]);
  if (!*v1862)
  {
    v126.f64[0] = *(float64_t *)(v4 + 144);
    v112.f64[0] = *(float64_t *)(v6 + 144);
    v127 = vaddq_f64(*(float64x2_t *)(v4 + 128), *(float64x2_t *)(v6 + 128));
    v128 = vaddq_f64(*(float64x2_t *)(v4 + 112), *(float64x2_t *)(v6 + 112));
    v129 = vaddq_f64(*(float64x2_t *)(v4 + 96), *(float64x2_t *)(v6 + 96));
    *v85 = vaddq_f64(*v85, *(float64x2_t *)(v6 + 80));
    *(float64x2_t *)(v4 + 96) = v129;
    *(float64x2_t *)(v4 + 112) = v128;
    *(float64x2_t *)(v4 + 128) = v127;
    *(_QWORD *)(v4 + 144) = *(_OWORD *)&vaddq_f64(v126, v112);
  }
  v1484 = (float64x2_t *)(v6 + 1896);
  v1858 = (float64x2_t *)(v6 + 1608);
  v130 = (float64x2_t *)(v6 + 1312);
  v131.f64[1] = v1844.f64[1];
  v132 = v1844.f64[0] + v11;
  v131.f64[0] = *(float64_t *)(v4 + 216);
  v112.f64[0] = *(float64_t *)(v6 + 216);
  v133 = vaddq_f64(v131, v112);
  v134 = vaddq_f64(*(float64x2_t *)(v4 + 200), *(float64x2_t *)(v6 + 200));
  v135 = vaddq_f64(*(float64x2_t *)(v4 + 184), *(float64x2_t *)(v6 + 184));
  v136 = vaddq_f64(*(float64x2_t *)(v4 + 168), *(float64x2_t *)(v6 + 168));
  *v89 = vaddq_f64(*v89, *(float64x2_t *)(v6 + 152));
  *(float64x2_t *)(v4 + 168) = v136;
  *(float64x2_t *)(v4 + 184) = v135;
  *(float64x2_t *)(v4 + 200) = v134;
  *(float64_t *)(v4 + 216) = v133.f64[0];
  v133.f64[0] = *(float64_t *)(v4 + 288);
  v112.f64[0] = *(float64_t *)(v6 + 288);
  v137 = vaddq_f64(v133, v112);
  v138 = vaddq_f64(*(float64x2_t *)(v4 + 272), *(float64x2_t *)(v6 + 272));
  v139 = vaddq_f64(*(float64x2_t *)(v4 + 256), *(float64x2_t *)(v6 + 256));
  v140 = vaddq_f64(*(float64x2_t *)(v4 + 240), *(float64x2_t *)(v6 + 240));
  *(float64x2_t *)(v4 + 224) = vaddq_f64(*(float64x2_t *)(v4 + 224), *(float64x2_t *)(v6 + 224));
  *(float64x2_t *)(v4 + 240) = v140;
  *(float64x2_t *)(v4 + 256) = v139;
  *(float64x2_t *)(v4 + 272) = v138;
  v1506 = (float64x2_t *)(v4 + 224);
  *(float64_t *)(v4 + 288) = v137.f64[0];
  v137.f64[0] = *(float64_t *)(v13 + 64);
  v112.f64[0] = v1829[4].f64[0];
  v141 = vaddq_f64(v137, v112);
  v142 = vaddq_f64(*(float64x2_t *)(v13 + 48), v1829[3]);
  v143 = vaddq_f64(*(float64x2_t *)(v13 + 32), v1829[2]);
  v144 = vaddq_f64(*(float64x2_t *)(v13 + 16), v1829[1]);
  *(float64x2_t *)v13 = vaddq_f64(*(float64x2_t *)v13, *v1829);
  *(float64x2_t *)(v13 + 16) = v144;
  *(float64x2_t *)(v13 + 32) = v143;
  *(float64x2_t *)(v13 + 48) = v142;
  *(float64_t *)(v13 + 64) = v141.f64[0];
  v141.f64[0] = *(float64_t *)(v13 + 136);
  v112.f64[0] = v1829[8].f64[1];
  v145 = vaddq_f64(v141, v112);
  v146 = vaddq_f64(*(float64x2_t *)(v13 + 120), *(float64x2_t *)((char *)v1829 + 120));
  v147 = vaddq_f64(*(float64x2_t *)(v13 + 104), *(float64x2_t *)((char *)v1829 + 104));
  v148 = vaddq_f64(*(float64x2_t *)(v13 + 88), *(float64x2_t *)((char *)v1829 + 88));
  *(float64x2_t *)(v13 + 72) = vaddq_f64(*(float64x2_t *)(v13 + 72), *(float64x2_t *)((char *)v1829 + 72));
  *(float64x2_t *)(v13 + 88) = v148;
  *(float64x2_t *)(v13 + 104) = v147;
  *(float64x2_t *)(v13 + 120) = v146;
  *(float64_t *)(v13 + 136) = v145.f64[0];
  v145.f64[0] = *(float64_t *)(v13 + 208);
  v112.f64[0] = v1829[13].f64[0];
  v149 = v1829[9];
  v150 = vaddq_f64(*(float64x2_t *)(v13 + 192), v1829[12]);
  v151 = vaddq_f64(*(float64x2_t *)(v13 + 176), v1829[11]);
  v152 = vaddq_f64(*(float64x2_t *)(v13 + 160), v1829[10]);
  v153 = vaddq_f64(*(float64x2_t *)(v13 + 144), v149);
  *(float64x2_t *)(v13 + 144) = v153;
  *(float64x2_t *)(v13 + 160) = v152;
  *(float64x2_t *)(v13 + 176) = v151;
  *(float64x2_t *)(v13 + 192) = v150;
  *(_QWORD *)(v13 + 208) = *(_OWORD *)&vaddq_f64(v145, v112);
  v153.f64[0] = *(float64_t *)(v13 + 280);
  v149.f64[0] = v1829[17].f64[1];
  v156 = vaddq_f64(*(float64x2_t *)(v13 + 232), *(float64x2_t *)((char *)v1829 + 232));
  v154 = vaddq_f64(*(float64x2_t *)(v13 + 264), *(float64x2_t *)((char *)v1829 + 264));
  v155 = vaddq_f64(*(float64x2_t *)(v13 + 216), *(float64x2_t *)((char *)v1829 + 216));
  *(float64x2_t *)(v13 + 248) = vaddq_f64(*(float64x2_t *)(v13 + 248), *(float64x2_t *)((char *)v1829 + 248));
  *(float64x2_t *)(v13 + 264) = v154;
  *(float64x2_t *)(v13 + 216) = v155;
  *(float64x2_t *)(v13 + 232) = v156;
  *(_QWORD *)(v13 + 280) = *(_OWORD *)&vaddq_f64(v153, v149);
  v155.f64[0] = *(float64_t *)(v12 + 64);
  v156.f64[0] = *(float64_t *)(v1468 + 64);
  v158 = *(float64x2_t *)(v1468 + 32);
  v157 = *(float64x2_t *)(v1468 + 48);
  v159 = vaddq_f64(v155, v156);
  v160 = vaddq_f64(*(float64x2_t *)v12, *(float64x2_t *)v1468);
  v161 = vaddq_f64(*(float64x2_t *)(v12 + 16), *(float64x2_t *)(v1468 + 16));
  v162 = vaddq_f64(*(float64x2_t *)(v12 + 32), v158);
  v163 = vaddq_f64(*(float64x2_t *)(v12 + 48), v157);
  *(float64x2_t *)(v12 + 32) = v162;
  *(float64x2_t *)(v12 + 48) = v163;
  *(float64x2_t *)v12 = v160;
  *(float64x2_t *)(v12 + 16) = v161;
  *(float64_t *)(v12 + 64) = v159.f64[0];
  v1821 = v132;
  if (*(_BYTE *)(v6 + 1304))
  {
    v157.f64[0] = *(float64_t *)(v12 + 712);
    v1.f64[0] = *(float64_t *)(v1468 + 712);
    v1805 = vaddq_f64(v157, v1);
    v1795 = vaddq_f64(*(float64x2_t *)(v12 + 88), *(float64x2_t *)(v1468 + 88));
    v1784 = vaddq_f64(*(float64x2_t *)(v12 + 104), *(float64x2_t *)(v1468 + 104));
    v1775 = vaddq_f64(*(float64x2_t *)(v12 + 120), *(float64x2_t *)(v1468 + 120));
    v1765 = vaddq_f64(*(float64x2_t *)(v12 + 136), *(float64x2_t *)(v1468 + 136));
    v1758 = vaddq_f64(*(float64x2_t *)(v12 + 152), *(float64x2_t *)(v1468 + 152));
    v1752 = vaddq_f64(*(float64x2_t *)(v12 + 168), *(float64x2_t *)(v1468 + 168));
    v1744 = vaddq_f64(*(float64x2_t *)(v12 + 184), *(float64x2_t *)(v1468 + 184));
    v1739 = vaddq_f64(*(float64x2_t *)(v12 + 200), *(float64x2_t *)(v1468 + 200));
    v1734 = vaddq_f64(*(float64x2_t *)(v12 + 216), *(float64x2_t *)(v1468 + 216));
    v164 = vaddq_f64(*(float64x2_t *)(v12 + 232), *(float64x2_t *)(v1468 + 232));
    v165 = vaddq_f64(*(float64x2_t *)(v12 + 248), *(float64x2_t *)(v1468 + 248));
    v166 = vaddq_f64(*(float64x2_t *)(v12 + 264), *(float64x2_t *)(v1468 + 264));
    v167 = vaddq_f64(*(float64x2_t *)(v12 + 280), *(float64x2_t *)(v1468 + 280));
    v168 = vaddq_f64(*(float64x2_t *)(v12 + 296), *(float64x2_t *)(v1468 + 296));
    v169 = vaddq_f64(*(float64x2_t *)(v12 + 312), *(float64x2_t *)(v1468 + 312));
    v170 = vaddq_f64(*(float64x2_t *)(v12 + 328), *(float64x2_t *)(v1468 + 328));
    v171 = vaddq_f64(*(float64x2_t *)(v12 + 344), *(float64x2_t *)(v1468 + 344));
    v172 = vaddq_f64(*(float64x2_t *)(v12 + 360), *(float64x2_t *)(v1468 + 360));
    v173 = vaddq_f64(*(float64x2_t *)(v12 + 376), *(float64x2_t *)(v1468 + 376));
    v174 = vaddq_f64(*(float64x2_t *)(v12 + 392), *(float64x2_t *)(v1468 + 392));
    v158 = vaddq_f64(*(float64x2_t *)(v12 + 408), *(float64x2_t *)(v1468 + 408));
    v156 = vaddq_f64(*(float64x2_t *)(v12 + 424), *(float64x2_t *)(v1468 + 424));
    v160 = vaddq_f64(*(float64x2_t *)(v12 + 440), *(float64x2_t *)(v1468 + 440));
    v161 = vaddq_f64(*(float64x2_t *)(v12 + 456), *(float64x2_t *)(v1468 + 456));
    v162 = vaddq_f64(*(float64x2_t *)(v12 + 472), *(float64x2_t *)(v1468 + 472));
    v163 = vaddq_f64(*(float64x2_t *)(v12 + 488), *(float64x2_t *)(v1468 + 488));
    v159 = vaddq_f64(*(float64x2_t *)(v12 + 504), *(float64x2_t *)(v1468 + 504));
    v0 = vaddq_f64(*(float64x2_t *)(v12 + 520), *(float64x2_t *)(v1468 + 520));
    v175 = vaddq_f64(*(float64x2_t *)(v12 + 536), *(float64x2_t *)(v1468 + 536));
    v157 = vaddq_f64(*(float64x2_t *)(v12 + 552), *(float64x2_t *)(v1468 + 552));
    v176 = vaddq_f64(*(float64x2_t *)(v12 + 568), *(float64x2_t *)(v1468 + 568));
    v177 = vaddq_f64(*(float64x2_t *)(v12 + 584), *(float64x2_t *)(v1468 + 584));
    v178 = vaddq_f64(*(float64x2_t *)(v12 + 600), *(float64x2_t *)(v1468 + 600));
    v179 = vaddq_f64(*(float64x2_t *)(v12 + 616), *(float64x2_t *)(v1468 + 616));
    v180 = vaddq_f64(*(float64x2_t *)(v12 + 632), *(float64x2_t *)(v1468 + 632));
    v181 = vaddq_f64(*(float64x2_t *)(v12 + 648), *(float64x2_t *)(v1468 + 648));
    v182 = vaddq_f64(*(float64x2_t *)(v12 + 664), *(float64x2_t *)(v1468 + 664));
    v183 = vaddq_f64(*(float64x2_t *)(v12 + 696), *(float64x2_t *)(v1468 + 696));
    v184 = vaddq_f64(*v111, *(float64x2_t *)(v1468 + 72));
    *(float64x2_t *)(v12 + 680) = vaddq_f64(*(float64x2_t *)(v12 + 680), *(float64x2_t *)(v1468 + 680));
    *(float64x2_t *)(v12 + 696) = v183;
    *(float64x2_t *)(v12 + 648) = v181;
    *(float64x2_t *)(v12 + 664) = v182;
    *(float64x2_t *)(v12 + 616) = v179;
    *(float64x2_t *)(v12 + 632) = v180;
    *(float64x2_t *)(v12 + 584) = v177;
    *(float64x2_t *)(v12 + 600) = v178;
    *(float64x2_t *)(v12 + 552) = v157;
    *(float64x2_t *)(v12 + 568) = v176;
    *(float64x2_t *)(v12 + 520) = v0;
    *(float64x2_t *)(v12 + 536) = v175;
    *(float64x2_t *)(v12 + 488) = v163;
    *(float64x2_t *)(v12 + 504) = v159;
    *(float64x2_t *)(v12 + 456) = v161;
    *(float64x2_t *)(v12 + 472) = v162;
    *(float64x2_t *)(v12 + 424) = v156;
    *(float64x2_t *)(v12 + 440) = v160;
    *(float64x2_t *)(v12 + 392) = v174;
    *(float64x2_t *)(v12 + 408) = v158;
    *(float64x2_t *)(v12 + 360) = v172;
    *(float64x2_t *)(v12 + 376) = v173;
    *(float64x2_t *)(v12 + 328) = v170;
    *(float64x2_t *)(v12 + 344) = v171;
    *(float64x2_t *)(v12 + 296) = v168;
    *(float64x2_t *)(v12 + 312) = v169;
    *(float64x2_t *)(v12 + 264) = v166;
    *(float64x2_t *)(v12 + 280) = v167;
    *(float64x2_t *)(v12 + 232) = v164;
    *(float64x2_t *)(v12 + 248) = v165;
    *(float64x2_t *)(v12 + 216) = v1734;
    *(float64x2_t *)(v12 + 200) = v1739;
    *(float64x2_t *)(v12 + 184) = v1744;
    *(float64x2_t *)(v12 + 168) = v1752;
    *(float64x2_t *)(v12 + 152) = v1758;
    *(float64x2_t *)(v12 + 136) = v1765;
    *(float64x2_t *)(v12 + 120) = v1775;
    *(float64x2_t *)(v12 + 104) = v1784;
    *v111 = v184;
    *(float64x2_t *)(v12 + 88) = v1795;
    v159.f64[1] = v1805.f64[1];
    *(float64_t *)(v12 + 712) = v1805.f64[0];
  }
  v1488 = (_OWORD *)(v4 + 24);
  v1486 = v8 + 24;
  v1489 = (_OWORD *)(v4 + 48);
  v1487 = (_OWORD *)(v8 + 48);
  v1490 = v8 + 80;
  v1491 = v8 + 152;
  v1492 = v8 + 224;
  v1494 = (_OWORD *)(v13 + 72);
  v1493 = v8 + 368;
  v1495 = (_OWORD *)(v13 + 144);
  v1496 = v8 + 512;
  v1498 = (_OWORD *)(v4 + 1328);
  v1497 = v8 + 1328;
  v159.f64[0] = v132;
  sub_20F828414(v1852, v4, v6 + 1312, v159, v163, v162, v161.f64[0], v160, v156.f64[0], v157, v158);
  v185.f64[0] = *(float64_t *)(v6 + 1328);
  v186 = vmulq_f64(v1844, v185);
  v187.f64[0] = v1844.f64[0];
  v187.f64[1] = v1844.f64[0];
  *v130 = vmulq_f64(v187, *v130);
  *(float64_t *)(v6 + 1328) = v186.f64[0];
  v186.f64[0] = *(float64_t *)(v6 + 1352);
  *(float64x2_t *)(v6 + 1336) = vmulq_f64(v187, *(float64x2_t *)(v6 + 1336));
  *(_QWORD *)(v6 + 1352) = *(_OWORD *)&vmulq_f64(v1844, v186);
  v188 = vmulq_n_f64(*(float64x2_t *)(v6 + 1376), v1844.f64[0]);
  v189 = vmulq_n_f64(*(float64x2_t *)(v6 + 1360), v1844.f64[0]);
  *(float64x2_t *)(v6 + 1360) = v189;
  *(float64x2_t *)(v6 + 1376) = v188;
  v189.f64[0] = *(float64_t *)(v6 + 1456);
  v190 = *(_OWORD *)&vmulq_f64(v1844, v189);
  v189.f64[0] = v1844.f64[0];
  v189.f64[1] = v1844.f64[0];
  v191 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1440));
  v188.f64[0] = v1844.f64[0];
  v188.f64[1] = v1844.f64[0];
  v192 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1424));
  v187.f64[0] = v1844.f64[0];
  v187.f64[1] = v1844.f64[0];
  v193 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1408));
  v194.f64[0] = v1844.f64[0];
  v194.f64[1] = v1844.f64[0];
  v195 = vmulq_f64(v194, *(float64x2_t *)(v6 + 1392));
  *(float64x2_t *)(v6 + 1392) = v195;
  *(float64x2_t *)(v6 + 1408) = v193;
  *(float64x2_t *)(v6 + 1424) = v192;
  *(float64x2_t *)(v6 + 1440) = v191;
  *(_QWORD *)(v6 + 1456) = v190;
  v195.f64[0] = *(float64_t *)(v6 + 1528);
  v196 = vmulq_f64(v1844, v195);
  v197 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1512));
  v198 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1496));
  v199 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1480));
  *(float64x2_t *)(v6 + 1464) = vmulq_f64(v194, *(float64x2_t *)(v6 + 1464));
  *(float64x2_t *)(v6 + 1480) = v199;
  *(float64x2_t *)(v6 + 1496) = v198;
  *(float64x2_t *)(v6 + 1512) = v197;
  *(float64_t *)(v6 + 1528) = v196.f64[0];
  v196.f64[0] = *(float64_t *)(v6 + 1600);
  v200 = vmulq_f64(v1844, v196);
  v201 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1584));
  v202 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1568));
  v203 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1552));
  *(float64x2_t *)(v6 + 1536) = vmulq_f64(v194, *(float64x2_t *)(v6 + 1536));
  *(float64x2_t *)(v6 + 1552) = v203;
  *(float64x2_t *)(v6 + 1568) = v202;
  *(float64x2_t *)(v6 + 1584) = v201;
  *(float64_t *)(v6 + 1600) = v200.f64[0];
  v200.f64[0] = *(float64_t *)(v6 + 1672);
  v204 = vmulq_f64(v1844, v200);
  v205 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1656));
  v206 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1640));
  v207 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1624));
  *v1858 = vmulq_f64(v194, *v1858);
  *(float64x2_t *)(v6 + 1624) = v207;
  *(float64x2_t *)(v6 + 1640) = v206;
  *(float64x2_t *)(v6 + 1656) = v205;
  *(float64_t *)(v6 + 1672) = v204.f64[0];
  v204.f64[0] = *(float64_t *)(v6 + 1744);
  v208 = vmulq_f64(v1844, v204);
  v209 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1728));
  v210 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1712));
  v211 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1696));
  *(float64x2_t *)(v6 + 1680) = vmulq_f64(v194, *(float64x2_t *)(v6 + 1680));
  *(float64x2_t *)(v6 + 1696) = v211;
  *(float64x2_t *)(v6 + 1712) = v210;
  *(float64x2_t *)(v6 + 1728) = v209;
  *(float64_t *)(v6 + 1744) = v208.f64[0];
  v208.f64[0] = *(float64_t *)(v6 + 1816);
  v212 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1800));
  v213 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1784));
  v214 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1768));
  v215 = vmulq_f64(v194, *(float64x2_t *)(v6 + 1752));
  *(float64x2_t *)(v6 + 1752) = v215;
  *(float64x2_t *)(v6 + 1768) = v214;
  *(float64x2_t *)(v6 + 1784) = v213;
  *(float64x2_t *)(v6 + 1800) = v212;
  *(_QWORD *)(v6 + 1816) = *(_OWORD *)&vmulq_f64(v1844, v208);
  v215.f64[0] = *(float64_t *)(v6 + 1888);
  v216 = vmulq_f64(v194, *(float64x2_t *)(v6 + 1824));
  v217 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1840));
  v218 = vmulq_f64(v188, *(float64x2_t *)(v6 + 1856));
  v219 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1872));
  *(_QWORD *)(v6 + 1888) = *(_OWORD *)&vmulq_f64(v1844, v215);
  *(float64x2_t *)(v6 + 1872) = v219;
  *(float64x2_t *)(v6 + 1856) = v218;
  *(float64x2_t *)(v6 + 1840) = v217;
  *(float64x2_t *)(v6 + 1824) = v216;
  v216.f64[0] = *(float64_t *)(v6 + 1960);
  v220 = vmulq_f64(v194, *v1484);
  v221 = vmulq_f64(v187, *(float64x2_t *)(v6 + 1912));
  v222 = vmulq_f64(v189, *(float64x2_t *)(v6 + 1944));
  *(float64x2_t *)(v6 + 1928) = vmulq_f64(v188, *(float64x2_t *)(v6 + 1928));
  *(float64x2_t *)(v6 + 1944) = v222;
  *v1484 = v220;
  *(float64x2_t *)(v6 + 1912) = v221;
  *(_QWORD *)(v6 + 1960) = *(_OWORD *)&vmulq_f64(v1844, v216);
  if (*(_BYTE *)(v6 + 2616))
  {
    v223 = *(float64x2_t *)(v6 + 1968);
    v224 = vmulq_n_f64(*(float64x2_t *)(v6 + 2592), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2576) = vmulq_n_f64(*(float64x2_t *)(v6 + 2576), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2592) = v224;
    v225 = vmulq_n_f64(*(float64x2_t *)(v6 + 2560), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2544) = vmulq_n_f64(*(float64x2_t *)(v6 + 2544), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2560) = v225;
    v226 = vmulq_n_f64(*(float64x2_t *)(v6 + 2528), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2512) = vmulq_n_f64(*(float64x2_t *)(v6 + 2512), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2528) = v226;
    v227 = vmulq_n_f64(*(float64x2_t *)(v6 + 2496), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2480) = vmulq_n_f64(*(float64x2_t *)(v6 + 2480), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2496) = v227;
    v228 = vmulq_n_f64(*(float64x2_t *)(v6 + 2464), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2448) = vmulq_n_f64(*(float64x2_t *)(v6 + 2448), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2464) = v228;
    v229 = vmulq_n_f64(*(float64x2_t *)(v6 + 2432), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2416) = vmulq_n_f64(*(float64x2_t *)(v6 + 2416), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2432) = v229;
    v230 = vmulq_n_f64(*(float64x2_t *)(v6 + 2400), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2384) = vmulq_n_f64(*(float64x2_t *)(v6 + 2384), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2400) = v230;
    v231 = vmulq_n_f64(*(float64x2_t *)(v6 + 2368), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2352) = vmulq_n_f64(*(float64x2_t *)(v6 + 2352), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2368) = v231;
    v232 = vmulq_n_f64(*(float64x2_t *)(v6 + 2336), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2320) = vmulq_n_f64(*(float64x2_t *)(v6 + 2320), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2336) = v232;
    v233 = vmulq_n_f64(*(float64x2_t *)(v6 + 2304), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2288) = vmulq_n_f64(*(float64x2_t *)(v6 + 2288), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2304) = v233;
    v234 = vmulq_n_f64(*(float64x2_t *)(v6 + 2272), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2256) = vmulq_n_f64(*(float64x2_t *)(v6 + 2256), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2272) = v234;
    v235 = vmulq_n_f64(*(float64x2_t *)(v6 + 2240), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2224) = vmulq_n_f64(*(float64x2_t *)(v6 + 2224), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2240) = v235;
    v236 = vmulq_n_f64(*(float64x2_t *)(v6 + 2208), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2192) = vmulq_n_f64(*(float64x2_t *)(v6 + 2192), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2208) = v236;
    v237 = vmulq_n_f64(*(float64x2_t *)(v6 + 2176), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2160) = vmulq_n_f64(*(float64x2_t *)(v6 + 2160), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2176) = v237;
    v238 = vmulq_n_f64(*(float64x2_t *)(v6 + 2144), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2128) = vmulq_n_f64(*(float64x2_t *)(v6 + 2128), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2144) = v238;
    v239 = vmulq_n_f64(*(float64x2_t *)(v6 + 2112), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2096) = vmulq_n_f64(*(float64x2_t *)(v6 + 2096), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2112) = v239;
    v240 = vmulq_n_f64(*(float64x2_t *)(v6 + 2080), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2064) = vmulq_n_f64(*(float64x2_t *)(v6 + 2064), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2080) = v240;
    v241 = vmulq_n_f64(*(float64x2_t *)(v6 + 2048), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2032) = vmulq_n_f64(*(float64x2_t *)(v6 + 2032), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2048) = v241;
    v242 = *(float64x2_t *)(v6 + 1984);
    v243 = vmulq_n_f64(*(float64x2_t *)(v6 + 2016), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2000) = vmulq_n_f64(*(float64x2_t *)(v6 + 2000), v1844.f64[0]);
    *(float64x2_t *)(v6 + 2016) = v243;
    v244 = vmulq_n_f64(v223, v1844.f64[0]);
    *(float64x2_t *)(v6 + 1968) = v244;
    *(float64x2_t *)(v6 + 1984) = vmulq_n_f64(v242, v1844.f64[0]);
    v244.f64[0] = *(float64_t *)(v6 + 2608);
    *(_QWORD *)(v6 + 2608) = *(_OWORD *)&vmulq_f64(v1844, v244);
  }
  v245 = *(_OWORD *)v8;
  v1471 = v8;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v4 = v245;
  v246 = *(_OWORD *)v1486;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v8 + 40);
  *v1488 = v246;
  v247 = *(_OWORD *)(v8 + 64);
  *v1489 = *v1487;
  *(_OWORD *)(v4 + 64) = v247;
  v249 = *(_OWORD *)(v8 + 112);
  v248 = *(_OWORD *)(v8 + 128);
  v250 = *(_OWORD *)(v8 + 96);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v8 + 144);
  *(_OWORD *)(v4 + 112) = v249;
  *(_OWORD *)(v4 + 128) = v248;
  *(_OWORD *)(v4 + 96) = v250;
  *v85 = *(float64x2_t *)v1490;
  v252 = *(_OWORD *)(v8 + 184);
  v251 = *(_OWORD *)(v8 + 200);
  v253 = *(_OWORD *)(v8 + 168);
  *(_QWORD *)(v4 + 216) = *(_QWORD *)(v8 + 216);
  *(_OWORD *)(v4 + 184) = v252;
  *(_OWORD *)(v4 + 200) = v251;
  *(_OWORD *)(v4 + 168) = v253;
  *v89 = *(float64x2_t *)v1491;
  *v1506 = *(float64x2_t *)v1492;
  v254 = *(_OWORD *)(v8 + 240);
  v255 = *(_OWORD *)(v8 + 256);
  v256 = *(_OWORD *)(v8 + 272);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v8 + 288);
  *(_OWORD *)(v4 + 256) = v255;
  *(_OWORD *)(v4 + 272) = v256;
  *(_OWORD *)(v4 + 240) = v254;
  *(_OWORD *)v13 = *(_OWORD *)v1504;
  v257 = *(_OWORD *)(v8 + 312);
  v258 = *(_OWORD *)(v8 + 328);
  v259 = *(_OWORD *)(v8 + 344);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v8 + 360);
  *(_OWORD *)(v13 + 32) = v258;
  *(_OWORD *)(v13 + 48) = v259;
  *(_OWORD *)(v13 + 16) = v257;
  *v1494 = *(_OWORD *)v1493;
  v260 = *(_OWORD *)(v8 + 384);
  v261 = *(_OWORD *)(v8 + 400);
  v262 = *(_OWORD *)(v8 + 416);
  *(_QWORD *)(v13 + 136) = *(_QWORD *)(v8 + 432);
  *(_OWORD *)(v13 + 104) = v261;
  *(_OWORD *)(v13 + 120) = v262;
  *(_OWORD *)(v13 + 88) = v260;
  *v1495 = *(_OWORD *)v1503;
  v263 = *(_OWORD *)(v8 + 456);
  v264 = *(_OWORD *)(v8 + 472);
  v265 = *(_OWORD *)(v8 + 488);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)(v8 + 504);
  *(_OWORD *)(v13 + 176) = v264;
  *(_OWORD *)(v13 + 192) = v265;
  *(_OWORD *)(v13 + 160) = v263;
  *v1505 = *(_OWORD *)v1496;
  v266 = *(_OWORD *)(v8 + 528);
  v267 = *(_OWORD *)(v8 + 544);
  v268 = *(_OWORD *)(v8 + 560);
  *(_QWORD *)(v13 + 280) = *(_QWORD *)(v8 + 576);
  *(_OWORD *)(v13 + 248) = v267;
  *(_OWORD *)(v13 + 264) = v268;
  *(_OWORD *)(v13 + 232) = v266;
  *(_OWORD *)v12 = *(_OWORD *)v1502;
  v269 = *(_OWORD *)(v8 + 600);
  v270 = *(_OWORD *)(v8 + 616);
  v271 = *(_OWORD *)(v8 + 632);
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v8 + 648);
  *(_OWORD *)(v12 + 32) = v270;
  *(_OWORD *)(v12 + 48) = v271;
  *(_OWORD *)(v12 + 16) = v269;
  memcpy((void *)(v12 + 72), __src, 0x288uLL);
  v273 = *(_OWORD *)v1499;
  *(_QWORD *)(v4 + 1320) = *(_QWORD *)(v8 + 1320);
  *v1500 = v273;
  v274 = *(_QWORD *)(v8 + 1344);
  v275 = *(float64x2_t *)v1497;
  *v1498 = *(_OWORD *)v1497;
  *(_QWORD *)(v4 + 1344) = v274;
  v275.f64[0] = *(float64_t *)(v4 + 16);
  _Q2.f64[0] = *(float64_t *)(v6 + 1328);
  v277 = vaddq_f64(v275, _Q2);
  *(float64x2_t *)v4 = vaddq_f64(*(float64x2_t *)v4, *v130);
  *(float64_t *)(v4 + 16) = v277.f64[0];
  v277.f64[0] = *(float64_t *)(v4 + 40);
  _Q2.f64[0] = *(float64_t *)(v6 + 1352);
  *(float64x2_t *)(v4 + 24) = vaddq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v6 + 1336));
  *(_QWORD *)(v4 + 40) = *(_OWORD *)&vaddq_f64(v277, _Q2);
  _Q1 = vaddq_f64(*(float64x2_t *)(v4 + 64), *(float64x2_t *)(v6 + 1376));
  _Q0 = vaddq_f64(*(float64x2_t *)(v4 + 48), *(float64x2_t *)(v6 + 1360));
  _D3 = _Q0.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  v282 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(float64x2_t *)(v4 + 48) = v282;
  *(float64x2_t *)(v4 + 64) = vmulq_n_f64(_Q1, _Q2.f64[0]);
  v283 = (float64x2_t *)v12;
  if (!*v1862)
  {
    v282.f64[0] = *(float64_t *)(v4 + 144);
    v272.f64[0] = *(float64_t *)(v6 + 1456);
    v282 = vaddq_f64(v282, v272);
    v284 = vaddq_f64(*(float64x2_t *)(v4 + 128), *(float64x2_t *)(v6 + 1440));
    v285 = vaddq_f64(*(float64x2_t *)(v4 + 112), *(float64x2_t *)(v6 + 1424));
    v286 = vaddq_f64(*(float64x2_t *)(v4 + 96), *(float64x2_t *)(v6 + 1408));
    *v85 = vaddq_f64(*v85, *(float64x2_t *)(v6 + 1392));
    *(float64x2_t *)(v4 + 96) = v286;
    *(float64x2_t *)(v4 + 112) = v285;
    *(float64x2_t *)(v4 + 128) = v284;
    *(float64_t *)(v4 + 144) = v282.f64[0];
  }
  v1473 = (float64x2_t *)(v4 + 80);
  v1483 = (float64x2_t *)(v6 + 3208);
  v287 = (float64x2_t *)(v6 + 2920);
  v288 = (float64x2_t *)(v6 + 2624);
  v282.f64[0] = *(float64_t *)(v4 + 216);
  v272.f64[0] = *(float64_t *)(v6 + 1528);
  v289 = vaddq_f64(v282, v272);
  v290 = vaddq_f64(*(float64x2_t *)(v4 + 200), *(float64x2_t *)(v6 + 1512));
  v291 = vaddq_f64(*(float64x2_t *)(v4 + 184), *(float64x2_t *)(v6 + 1496));
  v292 = vaddq_f64(*(float64x2_t *)(v4 + 168), *(float64x2_t *)(v6 + 1480));
  *v89 = vaddq_f64(*v89, *(float64x2_t *)(v6 + 1464));
  *(float64x2_t *)(v4 + 168) = v292;
  *(float64x2_t *)(v4 + 184) = v291;
  *(float64x2_t *)(v4 + 200) = v290;
  *(float64_t *)(v4 + 216) = v289.f64[0];
  v289.f64[0] = *(float64_t *)(v4 + 288);
  v272.f64[0] = *(float64_t *)(v6 + 1600);
  v293 = vaddq_f64(v289, v272);
  v294 = vaddq_f64(*(float64x2_t *)(v4 + 272), *(float64x2_t *)(v6 + 1584));
  v295 = vaddq_f64(*(float64x2_t *)(v4 + 256), *(float64x2_t *)(v6 + 1568));
  v296 = vaddq_f64(*(float64x2_t *)(v4 + 240), *(float64x2_t *)(v6 + 1552));
  *v1506 = vaddq_f64(*v1506, *(float64x2_t *)(v6 + 1536));
  *(float64x2_t *)(v4 + 240) = v296;
  *(float64x2_t *)(v4 + 256) = v295;
  *(float64x2_t *)(v4 + 272) = v294;
  *(float64_t *)(v4 + 288) = v293.f64[0];
  v293.f64[0] = *(float64_t *)(v13 + 64);
  v272.f64[0] = *(float64_t *)(v6 + 1672);
  v297 = vaddq_f64(v293, v272);
  v298 = vaddq_f64(*(float64x2_t *)(v13 + 48), *(float64x2_t *)(v6 + 1656));
  v299 = vaddq_f64(*(float64x2_t *)(v13 + 32), *(float64x2_t *)(v6 + 1640));
  v300 = vaddq_f64(*(float64x2_t *)(v13 + 16), *(float64x2_t *)(v6 + 1624));
  *(float64x2_t *)v13 = vaddq_f64(*(float64x2_t *)v13, *v1858);
  *(float64x2_t *)(v13 + 16) = v300;
  *(float64x2_t *)(v13 + 32) = v299;
  *(float64x2_t *)(v13 + 48) = v298;
  *(float64_t *)(v13 + 64) = v297.f64[0];
  v297.f64[0] = *(float64_t *)(v13 + 136);
  v272.f64[0] = *(float64_t *)(v6 + 1744);
  v301 = vaddq_f64(v297, v272);
  v302 = vaddq_f64(*(float64x2_t *)(v13 + 120), *(float64x2_t *)(v6 + 1728));
  v303 = vaddq_f64(*(float64x2_t *)(v13 + 104), *(float64x2_t *)(v6 + 1712));
  v304 = vaddq_f64(*(float64x2_t *)(v13 + 88), *(float64x2_t *)(v6 + 1696));
  *(float64x2_t *)(v13 + 72) = vaddq_f64(*(float64x2_t *)(v13 + 72), *(float64x2_t *)(v6 + 1680));
  *(float64x2_t *)(v13 + 88) = v304;
  *(float64x2_t *)(v13 + 104) = v303;
  *(float64x2_t *)(v13 + 120) = v302;
  *(float64_t *)(v13 + 136) = v301.f64[0];
  v301.f64[0] = *(float64_t *)(v13 + 208);
  v272.f64[0] = *(float64_t *)(v6 + 1816);
  v305 = *(float64x2_t *)(v6 + 1752);
  v306 = vaddq_f64(*(float64x2_t *)(v13 + 192), *(float64x2_t *)(v6 + 1800));
  v307 = vaddq_f64(*(float64x2_t *)(v13 + 176), *(float64x2_t *)(v6 + 1784));
  v308 = vaddq_f64(*(float64x2_t *)(v13 + 160), *(float64x2_t *)(v6 + 1768));
  v309 = vaddq_f64(*(float64x2_t *)(v13 + 144), v305);
  *(float64x2_t *)(v13 + 144) = v309;
  *(float64x2_t *)(v13 + 160) = v308;
  *(float64x2_t *)(v13 + 176) = v307;
  *(float64x2_t *)(v13 + 192) = v306;
  *(_QWORD *)(v13 + 208) = *(_OWORD *)&vaddq_f64(v301, v272);
  v309.f64[0] = *(float64_t *)(v13 + 280);
  v305.f64[0] = *(float64_t *)(v6 + 1888);
  v312 = vaddq_f64(*(float64x2_t *)(v13 + 232), *(float64x2_t *)(v6 + 1840));
  v310 = vaddq_f64(*(float64x2_t *)(v13 + 264), *(float64x2_t *)(v6 + 1872));
  v311 = vaddq_f64(*(float64x2_t *)(v13 + 216), *(float64x2_t *)(v6 + 1824));
  *(float64x2_t *)(v13 + 248) = vaddq_f64(*(float64x2_t *)(v13 + 248), *(float64x2_t *)(v6 + 1856));
  *(float64x2_t *)(v13 + 264) = v310;
  *(float64x2_t *)(v13 + 216) = v311;
  *(float64x2_t *)(v13 + 232) = v312;
  *(_QWORD *)(v13 + 280) = *(_OWORD *)&vaddq_f64(v309, v305);
  v311.f64[0] = v283[4].f64[0];
  v312.f64[0] = *(float64_t *)(v6 + 1960);
  v314 = *(float64x2_t *)(v6 + 1928);
  v313 = *(float64x2_t *)(v6 + 1944);
  v315 = vaddq_f64(v311, v312);
  v316 = vaddq_f64(*v283, *v1484);
  v317 = vaddq_f64(v283[1], *(float64x2_t *)(v6 + 1912));
  v318 = vaddq_f64(v283[2], v314);
  v319 = vaddq_f64(v283[3], v313);
  v283[2] = v318;
  v283[3] = v319;
  *v283 = v316;
  v283[1] = v317;
  v1472 = v283;
  v283[4].f64[0] = v315.f64[0];
  if (*(_BYTE *)(v6 + 2616))
  {
    v313.f64[0] = v111[40].f64[0];
    v0.f64[0] = *(float64_t *)(v6 + 2608);
    v1806 = vaddq_f64(v313, v0);
    v1796 = vaddq_f64(v111[1], *(float64x2_t *)(v6 + 1984));
    v1785 = vaddq_f64(v111[2], *(float64x2_t *)(v6 + 2000));
    v1776 = vaddq_f64(v111[3], *(float64x2_t *)(v6 + 2016));
    v1766 = vaddq_f64(v111[4], *(float64x2_t *)(v6 + 2032));
    v1759 = vaddq_f64(v111[5], *(float64x2_t *)(v6 + 2048));
    v1753 = vaddq_f64(v111[6], *(float64x2_t *)(v6 + 2064));
    v1745 = vaddq_f64(v111[7], *(float64x2_t *)(v6 + 2080));
    v1740 = vaddq_f64(v111[8], *(float64x2_t *)(v6 + 2096));
    v1735 = vaddq_f64(v111[9], *(float64x2_t *)(v6 + 2112));
    v320 = vaddq_f64(v111[10], *(float64x2_t *)(v6 + 2128));
    v321 = vaddq_f64(v111[11], *(float64x2_t *)(v6 + 2144));
    v322 = vaddq_f64(v111[12], *(float64x2_t *)(v6 + 2160));
    v323 = vaddq_f64(v111[13], *(float64x2_t *)(v6 + 2176));
    v324 = vaddq_f64(v111[14], *(float64x2_t *)(v6 + 2192));
    v325 = vaddq_f64(v111[15], *(float64x2_t *)(v6 + 2208));
    v326 = vaddq_f64(v111[16], *(float64x2_t *)(v6 + 2224));
    v327 = vaddq_f64(v111[17], *(float64x2_t *)(v6 + 2240));
    v328 = vaddq_f64(v111[18], *(float64x2_t *)(v6 + 2256));
    v329 = vaddq_f64(v111[19], *(float64x2_t *)(v6 + 2272));
    v330 = vaddq_f64(v111[20], *(float64x2_t *)(v6 + 2288));
    v314 = vaddq_f64(v111[21], *(float64x2_t *)(v6 + 2304));
    v312 = vaddq_f64(v111[22], *(float64x2_t *)(v6 + 2320));
    v316 = vaddq_f64(v111[23], *(float64x2_t *)(v6 + 2336));
    v317 = vaddq_f64(v111[24], *(float64x2_t *)(v6 + 2352));
    v318 = vaddq_f64(v111[25], *(float64x2_t *)(v6 + 2368));
    v319 = vaddq_f64(v111[26], *(float64x2_t *)(v6 + 2384));
    v315 = vaddq_f64(v111[27], *(float64x2_t *)(v6 + 2400));
    v0 = vaddq_f64(v111[28], *(float64x2_t *)(v6 + 2416));
    v331 = vaddq_f64(v111[29], *(float64x2_t *)(v6 + 2432));
    v313 = vaddq_f64(v111[30], *(float64x2_t *)(v6 + 2448));
    v332 = vaddq_f64(v111[31], *(float64x2_t *)(v6 + 2464));
    v333 = vaddq_f64(v111[32], *(float64x2_t *)(v6 + 2480));
    v334 = vaddq_f64(v111[33], *(float64x2_t *)(v6 + 2496));
    v335 = vaddq_f64(v111[34], *(float64x2_t *)(v6 + 2512));
    v336 = vaddq_f64(v111[35], *(float64x2_t *)(v6 + 2528));
    v337 = vaddq_f64(v111[36], *(float64x2_t *)(v6 + 2544));
    v338 = vaddq_f64(v111[37], *(float64x2_t *)(v6 + 2560));
    v339 = vaddq_f64(v111[39], *(float64x2_t *)(v6 + 2592));
    v340 = vaddq_f64(*v111, *(float64x2_t *)(v6 + 1968));
    v111[38] = vaddq_f64(v111[38], *(float64x2_t *)(v6 + 2576));
    v111[39] = v339;
    v111[36] = v337;
    v111[37] = v338;
    v111[34] = v335;
    v111[35] = v336;
    v111[32] = v333;
    v111[33] = v334;
    v111[30] = v313;
    v111[31] = v332;
    v111[28] = v0;
    v111[29] = v331;
    v111[26] = v319;
    v111[27] = v315;
    v111[24] = v317;
    v111[25] = v318;
    v111[22] = v312;
    v111[23] = v316;
    v111[20] = v330;
    v111[21] = v314;
    v111[18] = v328;
    v111[19] = v329;
    v111[16] = v326;
    v111[17] = v327;
    v111[14] = v324;
    v111[15] = v325;
    v111[12] = v322;
    v111[13] = v323;
    v111[10] = v320;
    v111[11] = v321;
    v132 = v1821;
    v111[9] = v1735;
    v111[8] = v1740;
    v111[7] = v1745;
    v111[6] = v1753;
    v111[5] = v1759;
    v111[4] = v1766;
    v111[3] = v1776;
    v111[2] = v1785;
    *v111 = v340;
    v111[1] = v1796;
    v315.f64[1] = v1806.f64[1];
    v111[40].f64[0] = v1806.f64[0];
  }
  v315.f64[0] = v132;
  sub_20F828414(v1852, v4, v6 + 2624, v315, v319, v318, v317.f64[0], v316, v312.f64[0], v313, v314);
  v341.f64[0] = *(float64_t *)(v6 + 2640);
  v342 = vmulq_f64(v1836, v341);
  *v288 = vmulq_n_f64(*v288, v1836.f64[0]);
  *(float64_t *)(v6 + 2640) = v342.f64[0];
  v342.f64[0] = *(float64_t *)(v6 + 2664);
  *(float64x2_t *)(v6 + 2648) = vmulq_n_f64(*(float64x2_t *)(v6 + 2648), v1836.f64[0]);
  *(_QWORD *)(v6 + 2664) = *(_OWORD *)&vmulq_f64(v1836, v342);
  v343 = vmulq_n_f64(*(float64x2_t *)(v6 + 2688), v1836.f64[0]);
  v344 = vmulq_n_f64(*(float64x2_t *)(v6 + 2672), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2672) = v344;
  *(float64x2_t *)(v6 + 2688) = v343;
  v344.f64[0] = *(float64_t *)(v6 + 2768);
  v345 = vmulq_f64(v1836, v344);
  v346 = vmulq_n_f64(*(float64x2_t *)(v6 + 2752), v1836.f64[0]);
  v347 = vmulq_n_f64(*(float64x2_t *)(v6 + 2736), v1836.f64[0]);
  v348 = vmulq_n_f64(*(float64x2_t *)(v6 + 2720), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2704) = vmulq_n_f64(*(float64x2_t *)(v6 + 2704), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2720) = v348;
  *(float64x2_t *)(v6 + 2736) = v347;
  *(float64x2_t *)(v6 + 2752) = v346;
  *(float64_t *)(v6 + 2768) = v345.f64[0];
  v345.f64[0] = *(float64_t *)(v6 + 2840);
  v349 = vmulq_f64(v1836, v345);
  v350 = vmulq_n_f64(*(float64x2_t *)(v6 + 2824), v1836.f64[0]);
  v351 = vmulq_n_f64(*(float64x2_t *)(v6 + 2808), v1836.f64[0]);
  v352 = vmulq_n_f64(*(float64x2_t *)(v6 + 2792), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2776) = vmulq_n_f64(*(float64x2_t *)(v6 + 2776), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2792) = v352;
  *(float64x2_t *)(v6 + 2808) = v351;
  *(float64x2_t *)(v6 + 2824) = v350;
  *(float64_t *)(v6 + 2840) = v349.f64[0];
  v349.f64[0] = *(float64_t *)(v6 + 2912);
  v353 = vmulq_f64(v1836, v349);
  v354 = vmulq_n_f64(*(float64x2_t *)(v6 + 2896), v1836.f64[0]);
  v355 = vmulq_n_f64(*(float64x2_t *)(v6 + 2880), v1836.f64[0]);
  v356 = vmulq_n_f64(*(float64x2_t *)(v6 + 2864), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2848) = vmulq_n_f64(*(float64x2_t *)(v6 + 2848), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2864) = v356;
  *(float64x2_t *)(v6 + 2880) = v355;
  *(float64x2_t *)(v6 + 2896) = v354;
  *(float64_t *)(v6 + 2912) = v353.f64[0];
  v353.f64[0] = *(float64_t *)(v6 + 2984);
  v357 = vmulq_f64(v1836, v353);
  v358 = vmulq_n_f64(*(float64x2_t *)(v6 + 2968), v1836.f64[0]);
  v359 = vmulq_n_f64(*(float64x2_t *)(v6 + 2952), v1836.f64[0]);
  v360 = vmulq_n_f64(*(float64x2_t *)(v6 + 2936), v1836.f64[0]);
  *v287 = vmulq_n_f64(*v287, v1836.f64[0]);
  *(float64x2_t *)(v6 + 2936) = v360;
  *(float64x2_t *)(v6 + 2952) = v359;
  *(float64x2_t *)(v6 + 2968) = v358;
  *(float64_t *)(v6 + 2984) = v357.f64[0];
  v357.f64[0] = *(float64_t *)(v6 + 3056);
  v361 = vmulq_f64(v1836, v357);
  v362 = vmulq_n_f64(*(float64x2_t *)(v6 + 3040), v1836.f64[0]);
  v363 = vmulq_n_f64(*(float64x2_t *)(v6 + 3024), v1836.f64[0]);
  v364 = vmulq_n_f64(*(float64x2_t *)(v6 + 3008), v1836.f64[0]);
  *(float64x2_t *)(v6 + 2992) = vmulq_n_f64(*(float64x2_t *)(v6 + 2992), v1836.f64[0]);
  *(float64x2_t *)(v6 + 3008) = v364;
  *(float64x2_t *)(v6 + 3024) = v363;
  *(float64x2_t *)(v6 + 3040) = v362;
  *(float64_t *)(v6 + 3056) = v361.f64[0];
  v361.f64[0] = *(float64_t *)(v6 + 3128);
  v365 = vmulq_n_f64(*(float64x2_t *)(v6 + 3112), v1836.f64[0]);
  v366 = vmulq_n_f64(*(float64x2_t *)(v6 + 3096), v1836.f64[0]);
  v367 = vmulq_n_f64(*(float64x2_t *)(v6 + 3080), v1836.f64[0]);
  v368 = vmulq_n_f64(*(float64x2_t *)(v6 + 3064), v1836.f64[0]);
  *(float64x2_t *)(v6 + 3064) = v368;
  *(float64x2_t *)(v6 + 3080) = v367;
  *(float64x2_t *)(v6 + 3096) = v366;
  *(float64x2_t *)(v6 + 3112) = v365;
  *(_QWORD *)(v6 + 3128) = *(_OWORD *)&vmulq_f64(v1836, v361);
  v368.f64[0] = *(float64_t *)(v6 + 3200);
  v369 = vmulq_n_f64(*(float64x2_t *)(v6 + 3136), v1836.f64[0]);
  v370 = vmulq_n_f64(*(float64x2_t *)(v6 + 3152), v1836.f64[0]);
  v371 = vmulq_n_f64(*(float64x2_t *)(v6 + 3168), v1836.f64[0]);
  v372 = vmulq_n_f64(*(float64x2_t *)(v6 + 3184), v1836.f64[0]);
  *(_QWORD *)(v6 + 3200) = *(_OWORD *)&vmulq_f64(v1836, v368);
  *(float64x2_t *)(v6 + 3184) = v372;
  *(float64x2_t *)(v6 + 3168) = v371;
  *(float64x2_t *)(v6 + 3152) = v370;
  *(float64x2_t *)(v6 + 3136) = v369;
  v369.f64[0] = *(float64_t *)(v6 + 3272);
  v373 = vmulq_n_f64(*v1483, v1836.f64[0]);
  v374 = vmulq_n_f64(*(float64x2_t *)(v6 + 3224), v1836.f64[0]);
  v375 = vmulq_n_f64(*(float64x2_t *)(v6 + 3256), v1836.f64[0]);
  *(float64x2_t *)(v6 + 3240) = vmulq_n_f64(*(float64x2_t *)(v6 + 3240), v1836.f64[0]);
  *(float64x2_t *)(v6 + 3256) = v375;
  *v1483 = v373;
  *(float64x2_t *)(v6 + 3224) = v374;
  *(_QWORD *)(v6 + 3272) = *(_OWORD *)&vmulq_f64(v1836, v369);
  if (*(_BYTE *)(v6 + 3928))
  {
    v376 = *(float64x2_t *)(v6 + 3280);
    v377 = vmulq_n_f64(*(float64x2_t *)(v6 + 3904), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3888) = vmulq_n_f64(*(float64x2_t *)(v6 + 3888), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3904) = v377;
    v378 = vmulq_n_f64(*(float64x2_t *)(v6 + 3872), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3856) = vmulq_n_f64(*(float64x2_t *)(v6 + 3856), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3872) = v378;
    v379 = vmulq_n_f64(*(float64x2_t *)(v6 + 3840), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3824) = vmulq_n_f64(*(float64x2_t *)(v6 + 3824), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3840) = v379;
    v380 = vmulq_n_f64(*(float64x2_t *)(v6 + 3808), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3792) = vmulq_n_f64(*(float64x2_t *)(v6 + 3792), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3808) = v380;
    v381 = vmulq_n_f64(*(float64x2_t *)(v6 + 3776), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3760) = vmulq_n_f64(*(float64x2_t *)(v6 + 3760), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3776) = v381;
    v382 = vmulq_n_f64(*(float64x2_t *)(v6 + 3744), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3728) = vmulq_n_f64(*(float64x2_t *)(v6 + 3728), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3744) = v382;
    v383 = vmulq_n_f64(*(float64x2_t *)(v6 + 3712), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3696) = vmulq_n_f64(*(float64x2_t *)(v6 + 3696), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3712) = v383;
    v384 = vmulq_n_f64(*(float64x2_t *)(v6 + 3680), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3664) = vmulq_n_f64(*(float64x2_t *)(v6 + 3664), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3680) = v384;
    v385 = vmulq_n_f64(*(float64x2_t *)(v6 + 3648), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3632) = vmulq_n_f64(*(float64x2_t *)(v6 + 3632), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3648) = v385;
    v386 = vmulq_n_f64(*(float64x2_t *)(v6 + 3616), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3600) = vmulq_n_f64(*(float64x2_t *)(v6 + 3600), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3616) = v386;
    v387 = vmulq_n_f64(*(float64x2_t *)(v6 + 3584), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3568) = vmulq_n_f64(*(float64x2_t *)(v6 + 3568), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3584) = v387;
    v388 = vmulq_n_f64(*(float64x2_t *)(v6 + 3552), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3536) = vmulq_n_f64(*(float64x2_t *)(v6 + 3536), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3552) = v388;
    v389 = vmulq_n_f64(*(float64x2_t *)(v6 + 3520), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3504) = vmulq_n_f64(*(float64x2_t *)(v6 + 3504), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3520) = v389;
    v390 = vmulq_n_f64(*(float64x2_t *)(v6 + 3488), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3472) = vmulq_n_f64(*(float64x2_t *)(v6 + 3472), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3488) = v390;
    v391 = vmulq_n_f64(*(float64x2_t *)(v6 + 3456), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3440) = vmulq_n_f64(*(float64x2_t *)(v6 + 3440), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3456) = v391;
    v392 = vmulq_n_f64(*(float64x2_t *)(v6 + 3424), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3408) = vmulq_n_f64(*(float64x2_t *)(v6 + 3408), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3424) = v392;
    v393 = vmulq_n_f64(*(float64x2_t *)(v6 + 3392), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3376) = vmulq_n_f64(*(float64x2_t *)(v6 + 3376), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3392) = v393;
    v394 = vmulq_n_f64(*(float64x2_t *)(v6 + 3360), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3344) = vmulq_n_f64(*(float64x2_t *)(v6 + 3344), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3360) = v394;
    v395 = *(float64x2_t *)(v6 + 3296);
    v396 = vmulq_n_f64(*(float64x2_t *)(v6 + 3328), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3312) = vmulq_n_f64(*(float64x2_t *)(v6 + 3312), v1836.f64[0]);
    *(float64x2_t *)(v6 + 3328) = v396;
    v397 = vmulq_n_f64(v376, v1836.f64[0]);
    *(float64x2_t *)(v6 + 3280) = v397;
    *(float64x2_t *)(v6 + 3296) = vmulq_n_f64(v395, v1836.f64[0]);
    v397.f64[0] = *(float64_t *)(v6 + 3920);
    *(_QWORD *)(v6 + 3920) = *(_OWORD *)&vmulq_f64(v1836, v397);
  }
  v1467 = (float64x2_t *)(v6 + 4520);
  v1482 = (float64x2_t *)(v6 + 4232);
  v398 = *(_OWORD *)v1471;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1471 + 16);
  *(_OWORD *)v4 = v398;
  v399 = *(_OWORD *)v1486;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v1486 + 16);
  *v1488 = v399;
  v400 = v1487[1];
  *v1489 = *v1487;
  *(_OWORD *)(v4 + 64) = v400;
  v402 = *(_OWORD *)(v1490 + 32);
  v401 = *(_OWORD *)(v1490 + 48);
  v403 = *(_OWORD *)(v1490 + 16);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v1490 + 64);
  *(_OWORD *)(v4 + 112) = v402;
  *(_OWORD *)(v4 + 128) = v401;
  *(_OWORD *)(v4 + 96) = v403;
  *v1473 = *(float64x2_t *)v1490;
  v405 = *(_OWORD *)(v1491 + 32);
  v404 = *(_OWORD *)(v1491 + 48);
  v406 = *(_OWORD *)(v1491 + 16);
  *(_QWORD *)(v4 + 216) = *(_QWORD *)(v1491 + 64);
  *(_OWORD *)(v4 + 184) = v405;
  *(_OWORD *)(v4 + 200) = v404;
  *(_OWORD *)(v4 + 168) = v406;
  *v89 = *(float64x2_t *)v1491;
  *v1506 = *(float64x2_t *)v1492;
  v407 = *(_OWORD *)(v1492 + 16);
  v408 = *(_OWORD *)(v1492 + 32);
  v409 = *(_OWORD *)(v1492 + 48);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v1492 + 64);
  *(_OWORD *)(v4 + 256) = v408;
  *(_OWORD *)(v4 + 272) = v409;
  *(_OWORD *)(v4 + 240) = v407;
  *(_OWORD *)v13 = *(_OWORD *)v1504;
  v410 = *(_OWORD *)(v1504 + 16);
  v411 = *(_OWORD *)(v1504 + 32);
  v412 = *(_OWORD *)(v1504 + 48);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v1504 + 64);
  *(_OWORD *)(v13 + 32) = v411;
  *(_OWORD *)(v13 + 48) = v412;
  *(_OWORD *)(v13 + 16) = v410;
  *v1494 = *(_OWORD *)v1493;
  v413 = *(_OWORD *)(v1493 + 16);
  v414 = *(_OWORD *)(v1493 + 32);
  v415 = *(_OWORD *)(v1493 + 48);
  *(_QWORD *)(v13 + 136) = *(_QWORD *)(v1493 + 64);
  *(_OWORD *)(v13 + 104) = v414;
  *(_OWORD *)(v13 + 120) = v415;
  *(_OWORD *)(v13 + 88) = v413;
  *v1495 = *(_OWORD *)v1503;
  v416 = *(_OWORD *)(v1503 + 16);
  v417 = *(_OWORD *)(v1503 + 32);
  v418 = *(_OWORD *)(v1503 + 48);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)(v1503 + 64);
  *(_OWORD *)(v13 + 176) = v417;
  *(_OWORD *)(v13 + 192) = v418;
  *(_OWORD *)(v13 + 160) = v416;
  *v1505 = *(_OWORD *)v1496;
  v419 = *(_OWORD *)(v1496 + 16);
  v420 = *(_OWORD *)(v1496 + 32);
  v421 = *(_OWORD *)(v1496 + 48);
  *(_QWORD *)(v13 + 280) = *(_QWORD *)(v1496 + 64);
  *(_OWORD *)(v13 + 248) = v420;
  *(_OWORD *)(v13 + 264) = v421;
  *(_OWORD *)(v13 + 232) = v419;
  *v1472 = *(float64x2_t *)v1502;
  v422 = *(float64x2_t *)(v1502 + 16);
  v423 = *(float64x2_t *)(v1502 + 32);
  v424 = *(float64x2_t *)(v1502 + 48);
  v1472[4].f64[0] = *(float64_t *)(v1502 + 64);
  v1472[2] = v423;
  v1472[3] = v424;
  v1472[1] = v422;
  memcpy(v111, __src, 0x288uLL);
  v426 = *(_OWORD *)v1499;
  *(_QWORD *)(v4 + 1320) = *(_QWORD *)(v1499 + 16);
  *v1500 = v426;
  v427 = *(_QWORD *)(v1497 + 16);
  v428 = *(float64x2_t *)v1497;
  *v1498 = *(_OWORD *)v1497;
  *(_QWORD *)(v4 + 1344) = v427;
  v428.f64[0] = *(float64_t *)(v4 + 16);
  _Q2.f64[0] = *(float64_t *)(v6 + 2640);
  v430 = vaddq_f64(v428, _Q2);
  *(float64x2_t *)v4 = vaddq_f64(*(float64x2_t *)v4, *v288);
  *(float64_t *)(v4 + 16) = v430.f64[0];
  v430.f64[0] = *(float64_t *)(v4 + 40);
  _Q2.f64[0] = *(float64_t *)(v6 + 2664);
  *(float64x2_t *)(v4 + 24) = vaddq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v6 + 2648));
  *(_QWORD *)(v4 + 40) = *(_OWORD *)&vaddq_f64(v430, _Q2);
  _Q1 = vaddq_f64(*(float64x2_t *)(v4 + 64), *(float64x2_t *)(v6 + 2688));
  _Q0 = vaddq_f64(*(float64x2_t *)(v4 + 48), *(float64x2_t *)(v6 + 2672));
  _D3 = _Q0.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  v435 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(float64x2_t *)(v4 + 48) = v435;
  *(float64x2_t *)(v4 + 64) = vmulq_n_f64(_Q1, _Q2.f64[0]);
  if (!*v1862)
  {
    v435.f64[0] = *(float64_t *)(v4 + 144);
    v425.f64[0] = *(float64_t *)(v6 + 2768);
    v436 = vaddq_f64(*(float64x2_t *)(v4 + 128), *(float64x2_t *)(v6 + 2752));
    v437 = vaddq_f64(*(float64x2_t *)(v4 + 112), *(float64x2_t *)(v6 + 2736));
    v438 = vaddq_f64(*(float64x2_t *)(v4 + 96), *(float64x2_t *)(v6 + 2720));
    *v1473 = vaddq_f64(*v1473, *(float64x2_t *)(v6 + 2704));
    *(float64x2_t *)(v4 + 96) = v438;
    *(float64x2_t *)(v4 + 112) = v437;
    *(float64x2_t *)(v4 + 128) = v436;
    *(_QWORD *)(v4 + 144) = *(_OWORD *)&vaddq_f64(v435, v425);
  }
  v439 = (float64x2_t *)(v6 + 3936);
  v440.f64[1] = v1836.f64[1];
  v440.f64[0] = v1836.f64[0] * 0.166666667;
  v1837 = v440;
  v440.f64[0] = *(float64_t *)(v4 + 216);
  v425.f64[0] = *(float64_t *)(v6 + 2840);
  v441 = vaddq_f64(v440, v425);
  v442 = vaddq_f64(*(float64x2_t *)(v4 + 200), *(float64x2_t *)(v6 + 2824));
  v443 = vaddq_f64(*(float64x2_t *)(v4 + 184), *(float64x2_t *)(v6 + 2808));
  v444 = vaddq_f64(*(float64x2_t *)(v4 + 168), *(float64x2_t *)(v6 + 2792));
  *(float64x2_t *)(v4 + 152) = vaddq_f64(*(float64x2_t *)(v4 + 152), *(float64x2_t *)(v6 + 2776));
  *(float64x2_t *)(v4 + 168) = v444;
  *(float64x2_t *)(v4 + 184) = v443;
  *(float64x2_t *)(v4 + 200) = v442;
  v1350 = (float64x2_t *)(v4 + 152);
  *(float64_t *)(v4 + 216) = v441.f64[0];
  v441.f64[0] = *(float64_t *)(v4 + 288);
  v425.f64[0] = *(float64_t *)(v6 + 2912);
  v445 = vaddq_f64(v441, v425);
  v446 = vaddq_f64(*(float64x2_t *)(v4 + 272), *(float64x2_t *)(v6 + 2896));
  v447 = vaddq_f64(*(float64x2_t *)(v4 + 256), *(float64x2_t *)(v6 + 2880));
  v448 = vaddq_f64(*(float64x2_t *)(v4 + 240), *(float64x2_t *)(v6 + 2864));
  *v1506 = vaddq_f64(*v1506, *(float64x2_t *)(v6 + 2848));
  *(float64x2_t *)(v4 + 240) = v448;
  *(float64x2_t *)(v4 + 256) = v447;
  *(float64x2_t *)(v4 + 272) = v446;
  *(float64_t *)(v4 + 288) = v445.f64[0];
  v445.f64[0] = *(float64_t *)(v13 + 64);
  v425.f64[0] = *(float64_t *)(v6 + 2984);
  v449 = vaddq_f64(v445, v425);
  v450 = vaddq_f64(*(float64x2_t *)(v13 + 48), *(float64x2_t *)(v6 + 2968));
  v451 = vaddq_f64(*(float64x2_t *)(v13 + 32), *(float64x2_t *)(v6 + 2952));
  v452 = vaddq_f64(*(float64x2_t *)(v13 + 16), *(float64x2_t *)(v6 + 2936));
  *(float64x2_t *)v13 = vaddq_f64(*(float64x2_t *)v13, *v287);
  *(float64x2_t *)(v13 + 16) = v452;
  *(float64x2_t *)(v13 + 32) = v451;
  *(float64x2_t *)(v13 + 48) = v450;
  *(float64_t *)(v13 + 64) = v449.f64[0];
  v449.f64[0] = *(float64_t *)(v13 + 136);
  v425.f64[0] = *(float64_t *)(v6 + 3056);
  v453 = vaddq_f64(v449, v425);
  v454 = vaddq_f64(*(float64x2_t *)(v13 + 120), *(float64x2_t *)(v6 + 3040));
  v455 = vaddq_f64(*(float64x2_t *)(v13 + 104), *(float64x2_t *)(v6 + 3024));
  v456 = vaddq_f64(*(float64x2_t *)(v13 + 88), *(float64x2_t *)(v6 + 3008));
  *(float64x2_t *)(v13 + 72) = vaddq_f64(*(float64x2_t *)(v13 + 72), *(float64x2_t *)(v6 + 2992));
  *(float64x2_t *)(v13 + 88) = v456;
  *(float64x2_t *)(v13 + 104) = v455;
  *(float64x2_t *)(v13 + 120) = v454;
  *(float64_t *)(v13 + 136) = v453.f64[0];
  v453.f64[0] = *(float64_t *)(v13 + 208);
  v425.f64[0] = *(float64_t *)(v6 + 3128);
  v457 = *(float64x2_t *)(v6 + 3064);
  v458 = vaddq_f64(*(float64x2_t *)(v13 + 192), *(float64x2_t *)(v6 + 3112));
  v459 = vaddq_f64(*(float64x2_t *)(v13 + 176), *(float64x2_t *)(v6 + 3096));
  v460 = vaddq_f64(*(float64x2_t *)(v13 + 160), *(float64x2_t *)(v6 + 3080));
  v461 = vaddq_f64(*(float64x2_t *)(v13 + 144), v457);
  *(float64x2_t *)(v13 + 144) = v461;
  *(float64x2_t *)(v13 + 160) = v460;
  *(float64x2_t *)(v13 + 176) = v459;
  *(float64x2_t *)(v13 + 192) = v458;
  *(_QWORD *)(v13 + 208) = *(_OWORD *)&vaddq_f64(v453, v425);
  v461.f64[0] = *(float64_t *)(v13 + 280);
  v457.f64[0] = *(float64_t *)(v6 + 3200);
  v464 = vaddq_f64(*(float64x2_t *)(v13 + 232), *(float64x2_t *)(v6 + 3152));
  v462 = vaddq_f64(*(float64x2_t *)(v13 + 264), *(float64x2_t *)(v6 + 3184));
  v463 = vaddq_f64(*(float64x2_t *)(v13 + 216), *(float64x2_t *)(v6 + 3136));
  *(float64x2_t *)(v13 + 248) = vaddq_f64(*(float64x2_t *)(v13 + 248), *(float64x2_t *)(v6 + 3168));
  *(float64x2_t *)(v13 + 264) = v462;
  *(float64x2_t *)(v13 + 216) = v463;
  *(float64x2_t *)(v13 + 232) = v464;
  *(_QWORD *)(v13 + 280) = *(_OWORD *)&vaddq_f64(v461, v457);
  v463.f64[0] = v1472[4].f64[0];
  v464.f64[0] = *(float64_t *)(v6 + 3272);
  v466 = *(float64x2_t *)(v6 + 3240);
  v465 = *(float64x2_t *)(v6 + 3256);
  v467 = vaddq_f64(*v1472, *v1483);
  v468 = vaddq_f64(v1472[1], *(float64x2_t *)(v6 + 3224));
  v469 = vaddq_f64(v1472[2], v466);
  v470 = vaddq_f64(v1472[3], v465);
  v1472[2] = v469;
  v1472[3] = v470;
  *v1472 = v467;
  v1472[1] = v468;
  *(_QWORD *)&v1472[4].f64[0] = *(_OWORD *)&vaddq_f64(v463, v464);
  if (*(_BYTE *)(v6 + 3928))
  {
    v465.f64[0] = v111[40].f64[0];
    v0.f64[0] = *(float64_t *)(v6 + 3920);
    *(_QWORD *)&v1807 = *(_OWORD *)&vaddq_f64(v465, v0);
    v1797 = vaddq_f64(v111[1], *(float64x2_t *)(v6 + 3296));
    v1786 = vaddq_f64(v111[2], *(float64x2_t *)(v6 + 3312));
    v1777 = vaddq_f64(v111[3], *(float64x2_t *)(v6 + 3328));
    v1767 = vaddq_f64(v111[4], *(float64x2_t *)(v6 + 3344));
    v1760 = vaddq_f64(v111[5], *(float64x2_t *)(v6 + 3360));
    v1754 = vaddq_f64(v111[6], *(float64x2_t *)(v6 + 3376));
    v1746 = vaddq_f64(v111[7], *(float64x2_t *)(v6 + 3392));
    v1741 = vaddq_f64(v111[8], *(float64x2_t *)(v6 + 3408));
    v1736 = vaddq_f64(v111[9], *(float64x2_t *)(v6 + 3424));
    v471 = vaddq_f64(v111[10], *(float64x2_t *)(v6 + 3440));
    v472 = vaddq_f64(v111[11], *(float64x2_t *)(v6 + 3456));
    v473 = vaddq_f64(v111[12], *(float64x2_t *)(v6 + 3472));
    v474 = vaddq_f64(v111[13], *(float64x2_t *)(v6 + 3488));
    v475 = vaddq_f64(v111[14], *(float64x2_t *)(v6 + 3504));
    v476 = vaddq_f64(v111[15], *(float64x2_t *)(v6 + 3520));
    v477 = vaddq_f64(v111[16], *(float64x2_t *)(v6 + 3536));
    v478 = vaddq_f64(v111[17], *(float64x2_t *)(v6 + 3552));
    v479 = vaddq_f64(v111[18], *(float64x2_t *)(v6 + 3568));
    v480 = vaddq_f64(v111[19], *(float64x2_t *)(v6 + 3584));
    v481 = vaddq_f64(v111[20], *(float64x2_t *)(v6 + 3600));
    v466 = vaddq_f64(v111[21], *(float64x2_t *)(v6 + 3616));
    v464 = vaddq_f64(v111[22], *(float64x2_t *)(v6 + 3632));
    v467 = vaddq_f64(v111[23], *(float64x2_t *)(v6 + 3648));
    v468 = vaddq_f64(v111[24], *(float64x2_t *)(v6 + 3664));
    v469 = vaddq_f64(v111[25], *(float64x2_t *)(v6 + 3680));
    v470 = vaddq_f64(v111[26], *(float64x2_t *)(v6 + 3696));
    v482 = vaddq_f64(v111[27], *(float64x2_t *)(v6 + 3712));
    v483 = vaddq_f64(v111[28], *(float64x2_t *)(v6 + 3728));
    v484 = vaddq_f64(v111[29], *(float64x2_t *)(v6 + 3744));
    v465 = vaddq_f64(v111[30], *(float64x2_t *)(v6 + 3760));
    v485 = vaddq_f64(v111[31], *(float64x2_t *)(v6 + 3776));
    v486 = vaddq_f64(v111[32], *(float64x2_t *)(v6 + 3792));
    v487 = vaddq_f64(v111[33], *(float64x2_t *)(v6 + 3808));
    v488 = vaddq_f64(v111[34], *(float64x2_t *)(v6 + 3824));
    v489 = vaddq_f64(v111[35], *(float64x2_t *)(v6 + 3840));
    v490 = vaddq_f64(v111[36], *(float64x2_t *)(v6 + 3856));
    v491 = vaddq_f64(v111[37], *(float64x2_t *)(v6 + 3872));
    v492 = vaddq_f64(v111[39], *(float64x2_t *)(v6 + 3904));
    v493 = vaddq_f64(*v111, *(float64x2_t *)(v6 + 3280));
    v111[38] = vaddq_f64(v111[38], *(float64x2_t *)(v6 + 3888));
    v111[39] = v492;
    v111[36] = v490;
    v111[37] = v491;
    v111[34] = v488;
    v111[35] = v489;
    v111[32] = v486;
    v111[33] = v487;
    v111[30] = v465;
    v111[31] = v485;
    v111[28] = v483;
    v111[29] = v484;
    v111[26] = v470;
    v111[27] = v482;
    v111[24] = v468;
    v111[25] = v469;
    v111[22] = v464;
    v111[23] = v467;
    v111[20] = v481;
    v111[21] = v466;
    v111[18] = v479;
    v111[19] = v480;
    v111[16] = v477;
    v111[17] = v478;
    v111[14] = v475;
    v111[15] = v476;
    v111[12] = v473;
    v111[13] = v474;
    v111[10] = v471;
    v111[11] = v472;
    v132 = v1821;
    v111[9] = v1736;
    v111[8] = v1741;
    v111[7] = v1746;
    v111[6] = v1754;
    v111[5] = v1760;
    v111[4] = v1767;
    v111[3] = v1777;
    v111[2] = v1786;
    *v111 = v493;
    v111[1] = v1797;
    v111[40].f64[0] = v1807;
  }
  v494.f64[1] = v1844.f64[1];
  v494.f64[0] = v1844.f64[0] + v132;
  sub_20F828414(v1852, v4, v6 + 3936, v494, v470, v469, v468.f64[0], v467, v464.f64[0], v465, v466);
  v496.f64[0] = *(float64_t *)(v6 + 3952);
  v497 = vmulq_f64(v1837, v496);
  v1397 = (int8x16_t)vmulq_n_f64(*v439, v1837.f64[0]);
  *v439 = (float64x2_t)v1397;
  v1299 = v497;
  *(float64_t *)(v6 + 3952) = v497.f64[0];
  v497.f64[0] = *(float64_t *)(v6 + 3976);
  v1395 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 3960), v1837.f64[0]);
  *(int8x16_t *)(v6 + 3960) = v1395;
  v1296 = vmulq_f64(v1837, v497);
  *(float64_t *)(v6 + 3976) = v1296.f64[0];
  v498 = vmulq_n_f64(*(float64x2_t *)(v6 + 4000), v1837.f64[0]);
  v499 = vmulq_n_f64(*(float64x2_t *)(v6 + 3984), v1837.f64[0]);
  v1292 = v499;
  *(float64x2_t *)(v6 + 3984) = v499;
  *(float64x2_t *)(v6 + 4000) = v498;
  v1294 = v498;
  v499.f64[0] = *(float64_t *)(v6 + 4080);
  v500 = vmulq_f64(v1837, v499);
  v501 = vmulq_n_f64(*(float64x2_t *)(v6 + 4064), v1837.f64[0]);
  v502 = vmulq_n_f64(*(float64x2_t *)(v6 + 4048), v1837.f64[0]);
  v503 = vmulq_n_f64(*(float64x2_t *)(v6 + 4032), v1837.f64[0]);
  v1391 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 4016), v1837.f64[0]);
  *(int8x16_t *)(v6 + 4016) = v1391;
  *(float64x2_t *)(v6 + 4032) = v503;
  v1393 = (int8x16_t)v503;
  v1399 = (int8x16_t)v502;
  *(float64x2_t *)(v6 + 4048) = v502;
  *(float64x2_t *)(v6 + 4064) = v501;
  v1403 = (int8x16_t)v501;
  v1302 = v500;
  *(float64_t *)(v6 + 4080) = v500.f64[0];
  v500.f64[0] = *(float64_t *)(v6 + 4152);
  v504 = vmulq_f64(v1837, v500);
  v505 = vmulq_n_f64(*(float64x2_t *)(v6 + 4136), v1837.f64[0]);
  v506 = vmulq_n_f64(*(float64x2_t *)(v6 + 4120), v1837.f64[0]);
  v507 = vmulq_n_f64(*(float64x2_t *)(v6 + 4104), v1837.f64[0]);
  v1401 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 4088), v1837.f64[0]);
  *(int8x16_t *)(v6 + 4088) = v1401;
  v1405 = (int8x16_t)v507;
  *(float64x2_t *)(v6 + 4104) = v507;
  v1415 = (int8x16_t)v506;
  *(float64x2_t *)(v6 + 4120) = v506;
  v1421 = (int8x16_t)v505;
  *(float64x2_t *)(v6 + 4136) = v505;
  v1307 = v504;
  *(float64_t *)(v6 + 4152) = v504.f64[0];
  v504.f64[0] = *(float64_t *)(v6 + 4224);
  v508 = vmulq_f64(v1837, v504);
  v509 = vmulq_n_f64(*(float64x2_t *)(v6 + 4208), v1837.f64[0]);
  v510 = vmulq_n_f64(*(float64x2_t *)(v6 + 4192), v1837.f64[0]);
  v511 = vmulq_n_f64(*(float64x2_t *)(v6 + 4176), v1837.f64[0]);
  v1419 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 4160), v1837.f64[0]);
  *(int8x16_t *)(v6 + 4160) = v1419;
  *(float64x2_t *)(v6 + 4176) = v511;
  v1426 = (int8x16_t)v511;
  v1433 = (int8x16_t)v510;
  *(float64x2_t *)(v6 + 4192) = v510;
  *(float64x2_t *)(v6 + 4208) = v509;
  v1438 = (int8x16_t)v509;
  v1310 = v508;
  *(float64_t *)(v6 + 4224) = v508.f64[0];
  v508.f64[0] = *(float64_t *)(v6 + 4296);
  v512 = vmulq_f64(v1837, v508);
  v513 = vmulq_n_f64(*(float64x2_t *)(v6 + 4280), v1837.f64[0]);
  v514 = vmulq_n_f64(*(float64x2_t *)(v6 + 4264), v1837.f64[0]);
  v515 = vmulq_n_f64(*(float64x2_t *)(v6 + 4248), v1837.f64[0]);
  v1563 = (int8x16_t)vmulq_n_f64(*v1482, v1837.f64[0]);
  *v1482 = (float64x2_t)v1563;
  *(float64x2_t *)(v6 + 4248) = v515;
  v1567 = (int8x16_t)v515;
  v1574 = (int8x16_t)v514;
  *(float64x2_t *)(v6 + 4264) = v514;
  *(float64x2_t *)(v6 + 4280) = v513;
  v1586 = (int8x16_t)v513;
  v1313 = v512;
  *(float64_t *)(v6 + 4296) = v512.f64[0];
  v512.f64[0] = *(float64_t *)(v6 + 4368);
  v516 = vmulq_f64(v1837, v512);
  v517 = vmulq_n_f64(*(float64x2_t *)(v6 + 4352), v1837.f64[0]);
  v518 = vmulq_n_f64(*(float64x2_t *)(v6 + 4336), v1837.f64[0]);
  v519 = vmulq_n_f64(*(float64x2_t *)(v6 + 4320), v1837.f64[0]);
  v1578 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 4304), v1837.f64[0]);
  *(int8x16_t *)(v6 + 4304) = v1578;
  v1594 = (int8x16_t)v519;
  *(float64x2_t *)(v6 + 4320) = v519;
  v1605 = (int8x16_t)v518;
  *(float64x2_t *)(v6 + 4336) = v518;
  v1624 = (int8x16_t)v517;
  *(float64x2_t *)(v6 + 4352) = v517;
  v1318 = v516;
  *(float64_t *)(v6 + 4368) = v516.f64[0];
  v516.f64[0] = *(float64_t *)(v6 + 4440);
  v520 = vmulq_f64(v1837, v516);
  v521 = vmulq_n_f64(*(float64x2_t *)(v6 + 4424), v1837.f64[0]);
  v522 = vmulq_n_f64(*(float64x2_t *)(v6 + 4408), v1837.f64[0]);
  v523 = vmulq_n_f64(*(float64x2_t *)(v6 + 4392), v1837.f64[0]);
  v524 = vmulq_n_f64(*(float64x2_t *)(v6 + 4376), v1837.f64[0]);
  v1616 = (int8x16_t)v524;
  *(float64x2_t *)(v6 + 4376) = v524;
  *(float64x2_t *)(v6 + 4392) = v523;
  v1632 = (int8x16_t)v523;
  v1640 = (int8x16_t)v522;
  *(float64x2_t *)(v6 + 4408) = v522;
  *(float64x2_t *)(v6 + 4424) = v521;
  v1654 = (int8x16_t)v521;
  v1328 = v520;
  *(float64_t *)(v6 + 4440) = v520.f64[0];
  v524.f64[0] = *(float64_t *)(v6 + 4512);
  v525 = vmulq_f64(v1837, v524);
  v526 = vmulq_n_f64(*(float64x2_t *)(v6 + 4480), v1837.f64[0]);
  v527 = vmulq_n_f64(*(float64x2_t *)(v6 + 4464), v1837.f64[0]);
  v528 = vmulq_n_f64(*(float64x2_t *)(v6 + 4448), v1837.f64[0]);
  v529 = vmulq_n_f64(*(float64x2_t *)(v6 + 4496), v1837.f64[0]);
  v1334 = v525;
  *(float64_t *)(v6 + 4512) = v525.f64[0];
  v1690 = (int8x16_t)v529;
  *(float64x2_t *)(v6 + 4496) = v529;
  v1673 = (int8x16_t)v526;
  *(float64x2_t *)(v6 + 4480) = v526;
  v1667 = (int8x16_t)v527;
  *(float64x2_t *)(v6 + 4464) = v527;
  v1648 = (int8x16_t)v528;
  *(float64x2_t *)(v6 + 4448) = v528;
  v529.f64[0] = *(float64_t *)(v6 + 4584);
  v530 = vmulq_f64(v1837, v529);
  v531 = vmulq_n_f64(*(float64x2_t *)(v6 + 4552), v1837.f64[0]);
  v532 = vmulq_n_f64(*(float64x2_t *)(v6 + 4536), v1837.f64[0]);
  v533 = vmulq_n_f64(*v1467, v1837.f64[0]);
  v1747 = (int8x16_t)vmulq_n_f64(*(float64x2_t *)(v6 + 4568), v1837.f64[0]);
  *(float64x2_t *)(v6 + 4552) = v531;
  *(int8x16_t *)(v6 + 4568) = v1747;
  v1722 = (int8x16_t)v531;
  v1708 = (int8x16_t)v532;
  *v1467 = v533;
  *(float64x2_t *)(v6 + 4536) = v532;
  v1684 = (int8x16_t)v533;
  v1338 = v530;
  *(float64_t *)(v6 + 4584) = v530.f64[0];
  v534 = *(unsigned __int8 *)(v6 + 5240);
  if (*(_BYTE *)(v6 + 5240))
  {
    v530.f64[0] = *(float64_t *)(v6 + 5232);
    v1845 = vmulq_f64(v1837, v530);
    v1822 = vmulq_n_f64(*(float64x2_t *)(v6 + 4608), v1837.f64[0]);
    v1814 = vmulq_n_f64(*(float64x2_t *)(v6 + 4624), v1837.f64[0]);
    v1808 = vmulq_n_f64(*(float64x2_t *)(v6 + 4640), v1837.f64[0]);
    v1798 = vmulq_n_f64(*(float64x2_t *)(v6 + 4656), v1837.f64[0]);
    v1787 = vmulq_n_f64(*(float64x2_t *)(v6 + 4672), v1837.f64[0]);
    v1778 = vmulq_n_f64(*(float64x2_t *)(v6 + 4688), v1837.f64[0]);
    v1768 = vmulq_n_f64(*(float64x2_t *)(v6 + 4704), v1837.f64[0]);
    v1761 = vmulq_n_f64(*(float64x2_t *)(v6 + 4720), v1837.f64[0]);
    v1755 = vmulq_n_f64(*(float64x2_t *)(v6 + 4736), v1837.f64[0]);
    v535 = vmulq_n_f64(*(float64x2_t *)(v6 + 4752), v1837.f64[0]);
    v536 = vmulq_n_f64(*(float64x2_t *)(v6 + 4768), v1837.f64[0]);
    v537 = vmulq_n_f64(*(float64x2_t *)(v6 + 4784), v1837.f64[0]);
    v538 = vmulq_n_f64(*(float64x2_t *)(v6 + 4800), v1837.f64[0]);
    v539 = vmulq_n_f64(*(float64x2_t *)(v6 + 4816), v1837.f64[0]);
    v540 = vmulq_n_f64(*(float64x2_t *)(v6 + 4832), v1837.f64[0]);
    v541 = vmulq_n_f64(*(float64x2_t *)(v6 + 4848), v1837.f64[0]);
    v542 = vmulq_n_f64(*(float64x2_t *)(v6 + 4864), v1837.f64[0]);
    v543 = vmulq_n_f64(*(float64x2_t *)(v6 + 4880), v1837.f64[0]);
    v544 = vmulq_n_f64(*(float64x2_t *)(v6 + 4896), v1837.f64[0]);
    v545 = vmulq_n_f64(*(float64x2_t *)(v6 + 4912), v1837.f64[0]);
    v546 = vmulq_n_f64(*(float64x2_t *)(v6 + 4928), v1837.f64[0]);
    v547 = vmulq_n_f64(*(float64x2_t *)(v6 + 4944), v1837.f64[0]);
    v548 = vmulq_n_f64(*(float64x2_t *)(v6 + 4960), v1837.f64[0]);
    v549 = vmulq_n_f64(*(float64x2_t *)(v6 + 4976), v1837.f64[0]);
    v550 = vmulq_n_f64(*(float64x2_t *)(v6 + 4992), v1837.f64[0]);
    v551 = vmulq_n_f64(*(float64x2_t *)(v6 + 5008), v1837.f64[0]);
    v552 = vmulq_n_f64(*(float64x2_t *)(v6 + 5024), v1837.f64[0]);
    v553 = vmulq_n_f64(*(float64x2_t *)(v6 + 5040), v1837.f64[0]);
    v554 = vmulq_n_f64(*(float64x2_t *)(v6 + 5056), v1837.f64[0]);
    v555 = vmulq_n_f64(*(float64x2_t *)(v6 + 5072), v1837.f64[0]);
    v533 = vmulq_n_f64(*(float64x2_t *)(v6 + 5088), v1837.f64[0]);
    v556 = vmulq_n_f64(*(float64x2_t *)(v6 + 5104), v1837.f64[0]);
    v557 = vmulq_n_f64(*(float64x2_t *)(v6 + 5120), v1837.f64[0]);
    v558 = vmulq_n_f64(*(float64x2_t *)(v6 + 5136), v1837.f64[0]);
    v559 = vmulq_n_f64(*(float64x2_t *)(v6 + 5152), v1837.f64[0]);
    v560 = vmulq_n_f64(*(float64x2_t *)(v6 + 5168), v1837.f64[0]);
    v561 = vmulq_n_f64(*(float64x2_t *)(v6 + 5184), v1837.f64[0]);
    v562 = vmulq_n_f64(*(float64x2_t *)(v6 + 5216), v1837.f64[0]);
    v495 = vmulq_n_f64(*(float64x2_t *)(v6 + 4592), v1837.f64[0]);
    *(float64x2_t *)(v6 + 5200) = vmulq_n_f64(*(float64x2_t *)(v6 + 5200), v1837.f64[0]);
    *(float64x2_t *)(v6 + 5216) = v562;
    *(float64x2_t *)(v6 + 5168) = v560;
    *(float64x2_t *)(v6 + 5184) = v561;
    *(float64x2_t *)(v6 + 5136) = v558;
    *(float64x2_t *)(v6 + 5152) = v559;
    *(float64x2_t *)(v6 + 5104) = v556;
    *(float64x2_t *)(v6 + 5120) = v557;
    *(float64x2_t *)(v6 + 5072) = v555;
    *(float64x2_t *)(v6 + 5088) = v533;
    *(float64x2_t *)(v6 + 5040) = v553;
    *(float64x2_t *)(v6 + 5056) = v554;
    *(float64x2_t *)(v6 + 5008) = v551;
    *(float64x2_t *)(v6 + 5024) = v552;
    *(float64x2_t *)(v6 + 4976) = v549;
    *(float64x2_t *)(v6 + 4992) = v550;
    *(float64x2_t *)(v6 + 4944) = v547;
    *(float64x2_t *)(v6 + 4960) = v548;
    *(float64x2_t *)(v6 + 4912) = v545;
    *(float64x2_t *)(v6 + 4928) = v546;
    *(float64x2_t *)(v6 + 4880) = v543;
    *(float64x2_t *)(v6 + 4896) = v544;
    *(float64x2_t *)(v6 + 4848) = v541;
    *(float64x2_t *)(v6 + 4864) = v542;
    *(float64x2_t *)(v6 + 4816) = v539;
    *(float64x2_t *)(v6 + 4832) = v540;
    *(float64x2_t *)(v6 + 4784) = v537;
    *(float64x2_t *)(v6 + 4800) = v538;
    *(float64x2_t *)(v6 + 4752) = v535;
    *(float64x2_t *)(v6 + 4768) = v536;
    *(float64x2_t *)(v6 + 4736) = v1755;
    *(float64x2_t *)(v6 + 4720) = v1761;
    *(float64x2_t *)(v6 + 4704) = v1768;
    *(float64x2_t *)(v6 + 4688) = v1778;
    *(float64x2_t *)(v6 + 4672) = v1787;
    *(float64x2_t *)(v6 + 4656) = v1798;
    *(float64x2_t *)(v6 + 4640) = v1808;
    *(float64x2_t *)(v6 + 4624) = v1814;
    *(float64x2_t *)(v6 + 4592) = v495;
    *(float64x2_t *)(v6 + 4608) = v1822;
    v533.f64[1] = v1845.f64[1];
    *(float64_t *)(v6 + 5232) = v1845.f64[0];
  }
  v533.f64[0] = *(float64_t *)(v6 + 16);
  v495.f64[0] = 0.333333333;
  v563 = vmulq_f64(v533, v495);
  v564 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
  v1360 = (int8x16_t)vmulq_f64(*(float64x2_t *)v6, v564);
  *(int8x16_t *)v6 = v1360;
  v1274 = v563;
  *(float64_t *)(v6 + 16) = v563.f64[0];
  v563.f64[0] = *(float64_t *)(v6 + 40);
  v1357 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 24), v564);
  *(int8x16_t *)(v6 + 24) = v1357;
  v1272 = vmulq_f64(v563, v495);
  *(float64_t *)(v6 + 40) = v1272.f64[0];
  v565 = vmulq_f64(*(float64x2_t *)(v6 + 64), v564);
  v566 = vmulq_f64(*(float64x2_t *)(v6 + 48), v564);
  v1268 = v566;
  *(float64x2_t *)(v6 + 48) = v566;
  *(float64x2_t *)(v6 + 64) = v565;
  v1270 = v565;
  v566.f64[0] = *(float64_t *)(v6 + 144);
  v567 = vmulq_f64(v566, v495);
  v568 = vmulq_f64(*(float64x2_t *)(v6 + 128), v564);
  v569 = vmulq_f64(*(float64x2_t *)(v6 + 112), v564);
  v570 = vmulq_f64(*(float64x2_t *)(v6 + 96), v564);
  v1351 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 80), v564);
  *(int8x16_t *)(v6 + 80) = v1351;
  *(float64x2_t *)(v6 + 96) = v570;
  v1354 = (int8x16_t)v570;
  v1363 = (int8x16_t)v569;
  *(float64x2_t *)(v6 + 112) = v569;
  *(float64x2_t *)(v6 + 128) = v568;
  v1369 = (int8x16_t)v568;
  v1276 = v567;
  *(float64_t *)(v6 + 144) = v567.f64[0];
  v567.f64[0] = *(float64_t *)(v6 + 216);
  v571 = vmulq_f64(*(float64x2_t *)(v6 + 200), v564);
  v572 = vmulq_f64(*(float64x2_t *)(v6 + 184), v564);
  v573 = vmulq_f64(*(float64x2_t *)(v6 + 168), v564);
  v574 = vmulq_f64(*(float64x2_t *)(v6 + 152), v564);
  v1366 = (int8x16_t)v574;
  *(float64x2_t *)(v6 + 152) = v574;
  v1372 = (int8x16_t)v573;
  *(float64x2_t *)(v6 + 168) = v573;
  v1375 = (int8x16_t)v572;
  *(float64x2_t *)(v6 + 184) = v572;
  v1379 = (int8x16_t)v571;
  *(float64x2_t *)(v6 + 200) = v571;
  v1278 = vmulq_f64(v567, v495);
  *(float64_t *)(v6 + 216) = v1278.f64[0];
  v574.f64[0] = *(float64_t *)(v6 + 288);
  v575 = *(float64x2_t *)(v6 + 224);
  v576 = vmulq_f64(v574, v495);
  v577 = vmulq_f64(*(float64x2_t *)(v6 + 272), v564);
  v578 = vmulq_f64(*(float64x2_t *)(v6 + 256), v564);
  v579 = vmulq_f64(*(float64x2_t *)(v6 + 240), v564);
  v1377 = (int8x16_t)vmulq_f64(v575, v564);
  *(int8x16_t *)(v6 + 224) = v1377;
  *(float64x2_t *)(v6 + 240) = v579;
  v1381 = (int8x16_t)v579;
  v1383 = (int8x16_t)v578;
  *(float64x2_t *)(v6 + 256) = v578;
  *(float64x2_t *)(v6 + 272) = v577;
  v1387 = (int8x16_t)v577;
  v1280 = v576;
  *(float64_t *)(v6 + 288) = v576.f64[0];
  v575.f64[0] = v1829[4].f64[0];
  v580 = *v1829;
  v581 = v1829[1];
  v582 = vmulq_f64(v1829[3], v564);
  v583 = vmulq_f64(v1829[2], v564);
  v584 = vmulq_f64(v581, v564);
  v1385 = (int8x16_t)vmulq_f64(*v1829, v564);
  *v1829 = (float64x2_t)v1385;
  v1829[1] = v584;
  v1389 = (int8x16_t)v584;
  v1519 = (int8x16_t)v583;
  v1829[2] = v583;
  v1829[3] = v582;
  v1525 = (int8x16_t)v582;
  v1282 = vmulq_f64(v575, v495);
  v1829[4].f64[0] = v1282.f64[0];
  v580.f64[0] = v1829[8].f64[1];
  v585 = vmulq_f64(v580, v495);
  v580.f64[0] = v1829[13].f64[0];
  v586 = vmulq_f64(v580, v495);
  v580.f64[0] = v1829[17].f64[1];
  v587 = vmulq_f64(v580, v495);
  v580.f64[0] = *(float64_t *)(v1468 + 64);
  v588 = vmulq_f64(v580, v495);
  v589 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 120), v564);
  v590 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 104), v564);
  v591 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 88), v564);
  v1507 = (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)v1829 + 72), v564);
  *(int8x16_t *)((char *)v1829 + 72) = v1507;
  v1510 = (int8x16_t)v591;
  *(float64x2_t *)((char *)v1829 + 88) = v591;
  v1513 = (int8x16_t)v590;
  *(float64x2_t *)((char *)v1829 + 104) = v590;
  v1516 = (int8x16_t)v589;
  *(float64x2_t *)((char *)v1829 + 120) = v589;
  v1284 = v585;
  v1829[8].f64[1] = v585.f64[0];
  v592 = vmulq_f64(v1829[12], v564);
  v593 = vmulq_f64(v1829[11], v564);
  v594 = vmulq_f64(v1829[10], v564);
  v1522 = (int8x16_t)vmulq_f64(v1829[9], v564);
  v1829[9] = (float64x2_t)v1522;
  v1829[10] = v594;
  v1528 = (int8x16_t)v594;
  v1531 = (int8x16_t)v593;
  v1829[11] = v593;
  v1829[12] = v592;
  v1534 = (int8x16_t)v592;
  v1286 = v586;
  v1829[13].f64[0] = v586.f64[0];
  v595 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 248), v564);
  v596 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 232), v564);
  v597 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 216), v564);
  v598 = vmulq_f64(*(float64x2_t *)((char *)v1829 + 264), v564);
  v1288 = v587;
  v1829[17].f64[1] = v587.f64[0];
  v1546 = (int8x16_t)v598;
  *(float64x2_t *)((char *)v1829 + 264) = v598;
  v1543 = (int8x16_t)v595;
  *(float64x2_t *)((char *)v1829 + 248) = v595;
  v1540 = (int8x16_t)v596;
  *(float64x2_t *)((char *)v1829 + 232) = v596;
  v1537 = (int8x16_t)v597;
  *(float64x2_t *)((char *)v1829 + 216) = v597;
  v599 = vmulq_f64(*(float64x2_t *)(v1468 + 32), v564);
  v600 = vmulq_f64(*(float64x2_t *)(v1468 + 16), v564);
  v601 = *(float64x2_t *)v1468;
  v602 = vmulq_f64(*(float64x2_t *)v1468, v564);
  v1559 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v1468 + 48), v564);
  *(float64x2_t *)(v1468 + 32) = v599;
  *(int8x16_t *)(v1468 + 48) = v1559;
  v1555 = (int8x16_t)v599;
  v1552 = (int8x16_t)v600;
  *(float64x2_t *)v1468 = v602;
  *(float64x2_t *)(v1468 + 16) = v600;
  v1549 = (int8x16_t)v602;
  v1290 = v588;
  *(float64_t *)(v1468 + 64) = v588.f64[0];
  if (*(_BYTE *)(v6 + 1304))
  {
    v601.f64[0] = *(float64_t *)(v1468 + 712);
    v581.f64[0] = 0.333333333;
    v1846 = vmulq_f64(*(float64x2_t *)(v1468 + 88), v564);
    v1853 = vmulq_f64(v601, v581);
    v1830 = vmulq_f64(*(float64x2_t *)(v1468 + 120), v564);
    v1838 = vmulq_f64(*(float64x2_t *)(v1468 + 104), v564);
    v1823 = vmulq_f64(*(float64x2_t *)(v1468 + 136), v564);
    v1815 = vmulq_f64(*(float64x2_t *)(v1468 + 152), v564);
    v1799 = vmulq_f64(*(float64x2_t *)(v1468 + 168), v564);
    v1788 = vmulq_f64(*(float64x2_t *)(v1468 + 184), v564);
    v1779 = vmulq_f64(*(float64x2_t *)(v1468 + 200), v564);
    v1769 = vmulq_f64(*(float64x2_t *)(v1468 + 216), v564);
    v603 = vmulq_f64(*(float64x2_t *)(v1468 + 232), v564);
    v604 = vmulq_f64(*(float64x2_t *)(v1468 + 248), v564);
    v605 = vmulq_f64(*(float64x2_t *)(v1468 + 264), v564);
    v606 = vmulq_f64(*(float64x2_t *)(v1468 + 280), v564);
    v607 = vmulq_f64(*(float64x2_t *)(v1468 + 296), v564);
    v608 = vmulq_f64(*(float64x2_t *)(v1468 + 312), v564);
    v609 = vmulq_f64(*(float64x2_t *)(v1468 + 328), v564);
    v610 = vmulq_f64(*(float64x2_t *)(v1468 + 344), v564);
    v611 = vmulq_f64(*(float64x2_t *)(v1468 + 360), v564);
    v588 = vmulq_f64(*(float64x2_t *)(v1468 + 376), v564);
    v612 = vmulq_f64(*(float64x2_t *)(v1468 + 392), v564);
    v613 = vmulq_f64(*(float64x2_t *)(v1468 + 408), v564);
    v614 = vmulq_f64(*(float64x2_t *)(v1468 + 424), v564);
    v615 = vmulq_f64(*(float64x2_t *)(v1468 + 440), v564);
    v616 = vmulq_f64(*(float64x2_t *)(v1468 + 456), v564);
    v617 = vmulq_f64(*(float64x2_t *)(v1468 + 472), v564);
    v618 = vmulq_f64(*(float64x2_t *)(v1468 + 488), v564);
    v619 = vmulq_f64(*(float64x2_t *)(v1468 + 504), v564);
    v620 = vmulq_f64(*(float64x2_t *)(v1468 + 520), v564);
    v621 = vmulq_f64(*(float64x2_t *)(v1468 + 536), v564);
    v601 = vmulq_f64(*(float64x2_t *)(v1468 + 552), v564);
    v622 = vmulq_f64(*(float64x2_t *)(v1468 + 568), v564);
    v623 = vmulq_f64(*(float64x2_t *)(v1468 + 584), v564);
    v624 = vmulq_f64(*(float64x2_t *)(v1468 + 600), v564);
    v625 = vmulq_f64(*(float64x2_t *)(v1468 + 616), v564);
    v626 = vmulq_f64(*(float64x2_t *)(v1468 + 632), v564);
    v627 = vmulq_f64(*(float64x2_t *)(v1468 + 648), v564);
    v628 = vmulq_f64(*(float64x2_t *)(v1468 + 664), v564);
    v629 = vmulq_f64(*(float64x2_t *)(v1468 + 680), v564);
    v630 = vmulq_f64(*(float64x2_t *)(v1468 + 696), v564);
    v631 = vmulq_f64(*(float64x2_t *)(v1468 + 72), v564);
    *(float64x2_t *)(v1468 + 680) = v629;
    *(float64x2_t *)(v1468 + 696) = v630;
    *(float64x2_t *)(v1468 + 648) = v627;
    *(float64x2_t *)(v1468 + 664) = v628;
    *(float64x2_t *)(v1468 + 616) = v625;
    *(float64x2_t *)(v1468 + 632) = v626;
    *(float64x2_t *)(v1468 + 584) = v623;
    *(float64x2_t *)(v1468 + 600) = v624;
    *(float64x2_t *)(v1468 + 552) = v601;
    *(float64x2_t *)(v1468 + 568) = v622;
    *(float64x2_t *)(v1468 + 520) = v620;
    *(float64x2_t *)(v1468 + 536) = v621;
    *(float64x2_t *)(v1468 + 488) = v618;
    *(float64x2_t *)(v1468 + 504) = v619;
    *(float64x2_t *)(v1468 + 456) = v616;
    *(float64x2_t *)(v1468 + 472) = v617;
    *(float64x2_t *)(v1468 + 424) = v614;
    *(float64x2_t *)(v1468 + 440) = v615;
    *(float64x2_t *)(v1468 + 392) = v612;
    *(float64x2_t *)(v1468 + 408) = v613;
    *(float64x2_t *)(v1468 + 360) = v611;
    *(float64x2_t *)(v1468 + 376) = v588;
    *(float64x2_t *)(v1468 + 328) = v609;
    *(float64x2_t *)(v1468 + 344) = v610;
    *(float64x2_t *)(v1468 + 296) = v607;
    *(float64x2_t *)(v1468 + 312) = v608;
    *(float64x2_t *)(v1468 + 264) = v605;
    *(float64x2_t *)(v1468 + 280) = v606;
    *(float64x2_t *)(v1468 + 232) = v603;
    *(float64x2_t *)(v1468 + 248) = v604;
    *(float64x2_t *)(v1468 + 216) = v1769;
    *(float64x2_t *)(v1468 + 200) = v1779;
    *(float64x2_t *)(v1468 + 184) = v1788;
    *(float64x2_t *)(v1468 + 168) = v1799;
    *(float64x2_t *)(v1468 + 152) = v1815;
    *(float64x2_t *)(v1468 + 136) = v1823;
    *(float64x2_t *)(v1468 + 120) = v1830;
    *(float64x2_t *)(v1468 + 104) = v1838;
    *(float64x2_t *)(v1468 + 72) = v631;
    *(float64x2_t *)(v1468 + 88) = v1846;
    v588.f64[1] = v1853.f64[1];
    *(float64_t *)(v1468 + 712) = v1853.f64[0];
  }
  v588.f64[0] = *(float64_t *)(v6 + 1328);
  v601.f64[0] = 0.666666667;
  v632 = vmulq_f64(v588, v601);
  v633 = (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL);
  v1413 = (int8x16_t)vmulq_f64(*v130, v633);
  *v130 = (float64x2_t)v1413;
  v1305 = v632;
  *(float64_t *)(v6 + 1328) = v632.f64[0];
  v632.f64[0] = *(float64_t *)(v6 + 1352);
  v1417 = vmulq_f64(v632, v601);
  v1411 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 1336), v633);
  *(int8x16_t *)(v6 + 1336) = v1411;
  v1409 = vmulq_f64(*(float64x2_t *)(v6 + 1376), v633);
  v634 = vmulq_f64(*(float64x2_t *)(v6 + 1360), v633);
  v1407 = v634;
  v634.f64[0] = *(float64_t *)(v6 + 1456);
  v1429 = vmulq_f64(v634, v601);
  v1480 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 1440), v633);
  v1478 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 1424), v633);
  v1476 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 1408), v633);
  v635 = vmulq_f64(*(float64x2_t *)(v6 + 1392), v633);
  v1474 = (int8x16_t)v635;
  v635.f64[0] = *(float64_t *)(v6 + 1528);
  v636 = vmulq_f64(v635, v601);
  v1445 = v636;
  v637 = vmulq_f64(*(float64x2_t *)(v6 + 1512), v633);
  v638 = vmulq_f64(*(float64x2_t *)(v6 + 1496), v633);
  v639 = vmulq_f64(*(float64x2_t *)(v6 + 1480), v633);
  v640 = vmulq_f64(*(float64x2_t *)(v6 + 1464), v633);
  v636.f64[0] = *(float64_t *)(v6 + 1600);
  v641 = vmulq_f64(v636, v601);
  v642 = vmulq_f64(*(float64x2_t *)(v6 + 1584), v633);
  v643 = vmulq_f64(*(float64x2_t *)(v6 + 1568), v633);
  v644 = vmulq_f64(*(float64x2_t *)(v6 + 1552), v633);
  v645 = vmulq_f64(*(float64x2_t *)(v6 + 1536), v633);
  v636.f64[0] = *(float64_t *)(v6 + 1672);
  v646 = vmulq_f64(v636, v601);
  v647 = vmulq_f64(*(float64x2_t *)(v6 + 1656), v633);
  v648 = vmulq_f64(*(float64x2_t *)(v6 + 1640), v633);
  v649 = vmulq_f64(*(float64x2_t *)(v6 + 1624), v633);
  v650 = vmulq_f64(*v1858, v633);
  v636.f64[0] = *(float64_t *)(v6 + 1744);
  v651 = vmulq_f64(v636, v601);
  v636.f64[0] = *(float64_t *)(v6 + 1816);
  v652 = vmulq_f64(v636, v601);
  v636.f64[0] = *(float64_t *)(v6 + 1888);
  v653 = vmulq_f64(v636, v601);
  v636.f64[0] = *(float64_t *)(v6 + 1960);
  v654 = vmulq_f64(v636, v601);
  v655 = vmulq_f64(*(float64x2_t *)(v6 + 1728), v633);
  v656 = vmulq_f64(*(float64x2_t *)(v6 + 1712), v633);
  v657 = vmulq_f64(*(float64x2_t *)(v6 + 1696), v633);
  v658 = vmulq_f64(*(float64x2_t *)(v6 + 1680), v633);
  v659 = vmulq_f64(*(float64x2_t *)(v6 + 1800), v633);
  v660 = vmulq_f64(*(float64x2_t *)(v6 + 1784), v633);
  v661 = vmulq_f64(*(float64x2_t *)(v6 + 1768), v633);
  v662 = vmulq_f64(*(float64x2_t *)(v6 + 1752), v633);
  v663 = vmulq_f64(*(float64x2_t *)(v6 + 1856), v633);
  v664 = vmulq_f64(*(float64x2_t *)(v6 + 1840), v633);
  *(float64_t *)(v6 + 1352) = v1417.f64[0];
  *(float64x2_t *)(v6 + 1360) = v1407;
  *(float64x2_t *)(v6 + 1376) = v1409;
  *(int8x16_t *)(v6 + 1392) = v1474;
  *(int8x16_t *)(v6 + 1408) = v1476;
  *(int8x16_t *)(v6 + 1424) = v1478;
  *(int8x16_t *)(v6 + 1440) = v1480;
  *(float64_t *)(v6 + 1456) = v1429.f64[0];
  v1424 = (int8x16_t)v640;
  *(float64x2_t *)(v6 + 1464) = v640;
  v1431 = (int8x16_t)v639;
  *(float64x2_t *)(v6 + 1480) = v639;
  v1436 = (int8x16_t)v638;
  *(float64x2_t *)(v6 + 1496) = v638;
  v1443 = (int8x16_t)v637;
  *(float64x2_t *)(v6 + 1512) = v637;
  *(float64_t *)(v6 + 1528) = v1445.f64[0];
  v1441 = (int8x16_t)v645;
  *(float64x2_t *)(v6 + 1536) = v645;
  *(float64x2_t *)(v6 + 1552) = v644;
  v1447 = (int8x16_t)v644;
  v1449 = (int8x16_t)v643;
  *(float64x2_t *)(v6 + 1568) = v643;
  *(float64x2_t *)(v6 + 1584) = v642;
  v1451 = (int8x16_t)v642;
  v1316 = v641;
  *(float64_t *)(v6 + 1600) = v641.f64[0];
  v665 = vmulq_f64(*(float64x2_t *)(v6 + 1824), v633);
  v666 = vmulq_f64(*(float64x2_t *)(v6 + 1872), v633);
  v667 = vmulq_f64(*(float64x2_t *)(v6 + 1944), v633);
  v668 = vmulq_f64(*(float64x2_t *)(v6 + 1928), v633);
  v669 = vmulq_f64(*(float64x2_t *)(v6 + 1912), v633);
  v670 = vmulq_f64(*v1484, v633);
  v1591 = (int8x16_t)v650;
  *v1858 = v650;
  *(float64x2_t *)(v6 + 1624) = v649;
  v1602 = (int8x16_t)v649;
  v1613 = (int8x16_t)v648;
  *(float64x2_t *)(v6 + 1640) = v648;
  *(float64x2_t *)(v6 + 1656) = v647;
  v1629 = (int8x16_t)v647;
  v1322 = v646;
  *(float64_t *)(v6 + 1672) = v646.f64[0];
  v1571 = (int8x16_t)v658;
  *(float64x2_t *)(v6 + 1680) = v658;
  v1583 = (int8x16_t)v657;
  *(float64x2_t *)(v6 + 1696) = v657;
  v1599 = (int8x16_t)v656;
  *(float64x2_t *)(v6 + 1712) = v656;
  v1610 = (int8x16_t)v655;
  *(float64x2_t *)(v6 + 1728) = v655;
  v1331 = v651;
  *(float64_t *)(v6 + 1744) = v651.f64[0];
  v1621 = (int8x16_t)v662;
  *(float64x2_t *)(v6 + 1752) = v662;
  *(float64x2_t *)(v6 + 1768) = v661;
  v1637 = (int8x16_t)v661;
  v1645 = (int8x16_t)v660;
  *(float64x2_t *)(v6 + 1784) = v660;
  *(float64x2_t *)(v6 + 1800) = v659;
  v1660 = (int8x16_t)v659;
  v1336 = v652;
  *(float64_t *)(v6 + 1816) = v652.f64[0];
  v1342 = v653;
  *(float64_t *)(v6 + 1888) = v653.f64[0];
  v1698 = (int8x16_t)v666;
  *(float64x2_t *)(v6 + 1872) = v666;
  v1702 = (int8x16_t)v663;
  *(float64x2_t *)(v6 + 1856) = v663;
  v1678 = (int8x16_t)v664;
  *(float64x2_t *)(v6 + 1840) = v664;
  v1664 = (int8x16_t)v665;
  *(float64x2_t *)(v6 + 1824) = v665;
  v1789 = (int8x16_t)v667;
  *(float64x2_t *)(v6 + 1928) = v668;
  *(float64x2_t *)(v6 + 1944) = v667;
  v1770 = (int8x16_t)v668;
  v1730 = (int8x16_t)v669;
  *v1484 = v670;
  *(float64x2_t *)(v6 + 1912) = v669;
  v1716 = (int8x16_t)v670;
  v1345 = v654;
  *(float64_t *)(v6 + 1960) = v654.f64[0];
  v1174 = vextq_s8(v1395, v1395, 8uLL).u64[0];
  v1188 = vextq_s8(v1403, v1403, 8uLL).u64[0];
  v1180 = vextq_s8(v1399, v1399, 8uLL).u64[0];
  v1170 = vextq_s8(v1397, v1397, 8uLL).u64[0];
  v1172 = vextq_s8(v1393, v1393, 8uLL).u64[0];
  v1196 = vextq_s8(v1421, v1421, 8uLL).u64[0];
  v1186 = vextq_s8(v1415, v1415, 8uLL).u64[0];
  v1178 = vextq_s8(v1405, v1405, 8uLL).u64[0];
  v1167 = vextq_s8(v1391, v1391, 8uLL).u64[0];
  v1168 = vextq_s8(v1401, v1401, 8uLL).u64[0];
  v1194 = vextq_s8(v1433, v1433, 8uLL).u64[0];
  v1184 = vextq_s8(v1426, v1426, 8uLL).u64[0];
  v1176 = vextq_s8(v1419, v1419, 8uLL).u64[0];
  v1212 = vextq_s8(v1586, v1586, 8uLL).u64[0];
  v1202 = vextq_s8(v1574, v1574, 8uLL).u64[0];
  v1204 = vextq_s8(v1438, v1438, 8uLL).u64[0];
  v1182 = vextq_s8(v1563, v1563, 8uLL).u64[0];
  v1220 = vextq_s8(v1624, v1624, 8uLL).u64[0];
  v1210 = vextq_s8(v1605, v1605, 8uLL).u64[0];
  v1200 = vextq_s8(v1594, v1594, 8uLL).u64[0];
  v1190 = vextq_s8(v1578, v1578, 8uLL).u64[0];
  v1192 = vextq_s8(v1567, v1567, 8uLL).u64[0];
  v1226 = vextq_s8(v1654, v1654, 8uLL).u64[0];
  v1216 = vextq_s8(v1640, v1640, 8uLL).u64[0];
  v1206 = vextq_s8(v1632, v1632, 8uLL).u64[0];
  v1198 = vextq_s8(v1616, v1616, 8uLL).u64[0];
  v1228 = vextq_s8(v1673, v1673, 8uLL).u64[0];
  v1218 = vextq_s8(v1667, v1667, 8uLL).u64[0];
  v1208 = vextq_s8(v1648, v1648, 8uLL).u64[0];
  v1224 = vextq_s8(v1690, v1690, 8uLL).u64[0];
  v1232 = vextq_s8(v1747, v1747, 8uLL).u64[0];
  v1230 = vextq_s8(v1722, v1722, 8uLL).u64[0];
  v1222 = vextq_s8(v1708, v1708, 8uLL).u64[0];
  v1214 = vextq_s8(v1684, v1684, 8uLL).u64[0];
  v1137 = vextq_s8(v1357, v1357, 8uLL).u64[0];
  v1144 = vextq_s8(v1369, v1369, 8uLL).u64[0];
  v1140 = vextq_s8(v1363, v1363, 8uLL).u64[0];
  v1136 = vextq_s8(v1354, v1354, 8uLL).u64[0];
  v1133 = vextq_s8(v1360, v1360, 8uLL).u64[0];
  v1134 = vextq_s8(v1351, v1351, 8uLL).u64[0];
  v1143 = vextq_s8(v1375, v1375, 8uLL).u64[0];
  v1139 = vextq_s8(v1372, v1372, 8uLL).u64[0];
  v1135 = vextq_s8(v1366, v1366, 8uLL).u64[0];
  v1152 = vextq_s8(v1387, v1387, 8uLL).u64[0];
  v1147 = vextq_s8(v1383, v1383, 8uLL).u64[0];
  v1148 = vextq_s8(v1379, v1379, 8uLL).u64[0];
  v1138 = vextq_s8(v1377, v1377, 8uLL).u64[0];
  v1156 = vextq_s8(v1525, v1525, 8uLL).u64[0];
  v1151 = vextq_s8(v1519, v1519, 8uLL).u64[0];
  v1146 = vextq_s8(v1389, v1389, 8uLL).u64[0];
  v1141 = vextq_s8(v1385, v1385, 8uLL).u64[0];
  v1142 = vextq_s8(v1381, v1381, 8uLL).u64[0];
  v1160 = vextq_s8(v1516, v1516, 8uLL).u64[0];
  v1155 = vextq_s8(v1513, v1513, 8uLL).u64[0];
  v1145 = vextq_s8(v1507, v1507, 8uLL).u64[0];
  v1163 = vextq_s8(v1534, v1534, 8uLL).u64[0];
  v1158 = vextq_s8(v1531, v1531, 8uLL).u64[0];
  v1153 = vextq_s8(v1528, v1528, 8uLL).u64[0];
  v1149 = vextq_s8(v1522, v1522, 8uLL).u64[0];
  v1150 = vextq_s8(v1510, v1510, 8uLL).u64[0];
  v1159 = vextq_s8(v1540, v1540, 8uLL).u64[0];
  v1154 = vextq_s8(v1537, v1537, 8uLL).u64[0];
  v1162 = vextq_s8(v1546, v1546, 8uLL).u64[0];
  v1166 = vextq_s8(v1559, v1559, 8uLL).u64[0];
  v1164 = vextq_s8(v1543, v1543, 8uLL).u64[0];
  v1165 = vextq_s8(v1555, v1555, 8uLL).u64[0];
  v1161 = vextq_s8(v1552, v1552, 8uLL).u64[0];
  v671 = (float64x2_t)vextq_s8(v1549, v1549, 8uLL);
  v1157 = v671.f64[0];
  if (*(_BYTE *)(v6 + 2616))
  {
    v654.f64[0] = *(float64_t *)(v6 + 2608);
    v638.f64[0] = 0.666666667;
    v1854 = vmulq_f64(v654, v638);
    v1839 = vmulq_f64(*(float64x2_t *)(v6 + 2000), v633);
    v1847 = vmulq_f64(*(float64x2_t *)(v6 + 1984), v633);
    v1831 = vmulq_f64(*(float64x2_t *)(v6 + 2016), v633);
    v1824 = vmulq_f64(*(float64x2_t *)(v6 + 2032), v633);
    v1816 = vmulq_f64(*(float64x2_t *)(v6 + 2048), v633);
    v1809 = vmulq_f64(*(float64x2_t *)(v6 + 2064), v633);
    v1800 = vmulq_f64(*(float64x2_t *)(v6 + 2080), v633);
    v1780 = vmulq_f64(*(float64x2_t *)(v6 + 2096), v633);
    v1762 = vmulq_f64(*(float64x2_t *)(v6 + 2112), v633);
    v672 = vmulq_f64(*(float64x2_t *)(v6 + 2128), v633);
    v673 = vmulq_f64(*(float64x2_t *)(v6 + 2144), v633);
    v674 = vmulq_f64(*(float64x2_t *)(v6 + 2160), v633);
    v675 = vmulq_f64(*(float64x2_t *)(v6 + 2176), v633);
    v676 = vmulq_f64(*(float64x2_t *)(v6 + 2192), v633);
    v677 = vmulq_f64(*(float64x2_t *)(v6 + 2208), v633);
    v678 = vmulq_f64(*(float64x2_t *)(v6 + 2224), v633);
    v679 = vmulq_f64(*(float64x2_t *)(v6 + 2240), v633);
    v660 = vmulq_f64(*(float64x2_t *)(v6 + 2256), v633);
    v680 = vmulq_f64(*(float64x2_t *)(v6 + 2272), v633);
    v681 = vmulq_f64(*(float64x2_t *)(v6 + 2288), v633);
    v682 = vmulq_f64(*(float64x2_t *)(v6 + 2304), v633);
    v683 = vmulq_f64(*(float64x2_t *)(v6 + 2320), v633);
    v684 = vmulq_f64(*(float64x2_t *)(v6 + 2336), v633);
    v685 = vmulq_f64(*(float64x2_t *)(v6 + 2352), v633);
    v686 = vmulq_f64(*(float64x2_t *)(v6 + 2368), v633);
    v687 = vmulq_f64(*(float64x2_t *)(v6 + 2384), v633);
    v688 = vmulq_f64(*(float64x2_t *)(v6 + 2400), v633);
    v689 = vmulq_f64(*(float64x2_t *)(v6 + 2416), v633);
    v690 = vmulq_f64(*(float64x2_t *)(v6 + 2432), v633);
    v671 = vmulq_f64(*(float64x2_t *)(v6 + 2448), v633);
    v691 = vmulq_f64(*(float64x2_t *)(v6 + 2464), v633);
    v692 = vmulq_f64(*(float64x2_t *)(v6 + 2480), v633);
    v693 = vmulq_f64(*(float64x2_t *)(v6 + 2496), v633);
    v694 = vmulq_f64(*(float64x2_t *)(v6 + 2512), v633);
    v695 = vmulq_f64(*(float64x2_t *)(v6 + 2528), v633);
    v696 = vmulq_f64(*(float64x2_t *)(v6 + 2544), v633);
    v697 = vmulq_f64(*(float64x2_t *)(v6 + 2560), v633);
    v698 = vmulq_f64(*(float64x2_t *)(v6 + 2576), v633);
    v699 = vmulq_f64(*(float64x2_t *)(v6 + 2592), v633);
    v700 = vmulq_f64(*(float64x2_t *)(v6 + 1968), v633);
    *(float64x2_t *)(v6 + 2576) = v698;
    *(float64x2_t *)(v6 + 2592) = v699;
    *(float64x2_t *)(v6 + 2544) = v696;
    *(float64x2_t *)(v6 + 2560) = v697;
    *(float64x2_t *)(v6 + 2512) = v694;
    *(float64x2_t *)(v6 + 2528) = v695;
    *(float64x2_t *)(v6 + 2480) = v692;
    *(float64x2_t *)(v6 + 2496) = v693;
    *(float64x2_t *)(v6 + 2448) = v671;
    *(float64x2_t *)(v6 + 2464) = v691;
    *(float64x2_t *)(v6 + 2416) = v689;
    *(float64x2_t *)(v6 + 2432) = v690;
    *(float64x2_t *)(v6 + 2384) = v687;
    *(float64x2_t *)(v6 + 2400) = v688;
    *(float64x2_t *)(v6 + 2352) = v685;
    *(float64x2_t *)(v6 + 2368) = v686;
    *(float64x2_t *)(v6 + 2320) = v683;
    *(float64x2_t *)(v6 + 2336) = v684;
    *(float64x2_t *)(v6 + 2288) = v681;
    *(float64x2_t *)(v6 + 2304) = v682;
    *(float64x2_t *)(v6 + 2256) = v660;
    *(float64x2_t *)(v6 + 2272) = v680;
    *(float64x2_t *)(v6 + 2224) = v678;
    *(float64x2_t *)(v6 + 2240) = v679;
    *(float64x2_t *)(v6 + 2192) = v676;
    *(float64x2_t *)(v6 + 2208) = v677;
    *(float64x2_t *)(v6 + 2160) = v674;
    *(float64x2_t *)(v6 + 2176) = v675;
    *(float64x2_t *)(v6 + 2128) = v672;
    *(float64x2_t *)(v6 + 2144) = v673;
    *(float64x2_t *)(v6 + 2112) = v1762;
    *(float64x2_t *)(v6 + 2096) = v1780;
    *(float64x2_t *)(v6 + 2080) = v1800;
    *(float64x2_t *)(v6 + 2064) = v1809;
    *(float64x2_t *)(v6 + 2048) = v1816;
    *(float64x2_t *)(v6 + 2032) = v1824;
    *(float64x2_t *)(v6 + 2016) = v1831;
    *(float64x2_t *)(v6 + 2000) = v1839;
    *(float64x2_t *)(v6 + 1968) = v700;
    *(float64x2_t *)(v6 + 1984) = v1847;
    v671.f64[1] = v1854.f64[1];
    *(float64_t *)(v6 + 2608) = v1854.f64[0];
  }
  v671.f64[0] = *(float64_t *)(v6 + 2640);
  v660.f64[0] = 0.333333333;
  v701 = vmulq_f64(v671, v660);
  v702 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
  v1456 = (int8x16_t)vmulq_f64(*v288, v702);
  *v288 = (float64x2_t)v1456;
  v1326 = v701;
  *(float64_t *)(v6 + 2640) = v701.f64[0];
  v701.f64[0] = *(float64_t *)(v6 + 2664);
  v1455 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 2648), v702);
  *(int8x16_t *)(v6 + 2648) = v1455;
  v1325 = vmulq_f64(v701, v660);
  *(float64_t *)(v6 + 2664) = v1325.f64[0];
  v703 = vmulq_f64(*(float64x2_t *)(v6 + 2688), v702);
  v704 = vmulq_f64(*(float64x2_t *)(v6 + 2672), v702);
  v1321 = v704;
  *(float64x2_t *)(v6 + 2672) = v704;
  *(float64x2_t *)(v6 + 2688) = v703;
  v1324 = v703;
  v704.f64[0] = *(float64_t *)(v6 + 2768);
  v705 = vmulq_f64(v704, v660);
  v706 = vmulq_f64(*(float64x2_t *)(v6 + 2752), v702);
  v707 = vmulq_f64(*(float64x2_t *)(v6 + 2736), v702);
  v708 = vmulq_f64(*(float64x2_t *)(v6 + 2720), v702);
  v1458 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 2704), v702);
  *(int8x16_t *)(v6 + 2704) = v1458;
  *(float64x2_t *)(v6 + 2720) = v708;
  v1457 = (int8x16_t)v708;
  v1454 = (int8x16_t)v707;
  *(float64x2_t *)(v6 + 2736) = v707;
  *(float64x2_t *)(v6 + 2752) = v706;
  v1453 = (int8x16_t)v706;
  v1327 = v705;
  *(float64_t *)(v6 + 2768) = v705.f64[0];
  v705.f64[0] = *(float64_t *)(v6 + 2840);
  v709 = vmulq_f64(v705, v660);
  v710 = vmulq_f64(*(float64x2_t *)(v6 + 2824), v702);
  v711 = vmulq_f64(*(float64x2_t *)(v6 + 2808), v702);
  v712 = vmulq_f64(*(float64x2_t *)(v6 + 2792), v702);
  v1462 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 2776), v702);
  *(int8x16_t *)(v6 + 2776) = v1462;
  v1461 = (int8x16_t)v712;
  *(float64x2_t *)(v6 + 2792) = v712;
  v1460 = (int8x16_t)v711;
  *(float64x2_t *)(v6 + 2808) = v711;
  v1459 = (int8x16_t)v710;
  *(float64x2_t *)(v6 + 2824) = v710;
  v1333 = v709;
  *(float64_t *)(v6 + 2840) = v709.f64[0];
  v709.f64[0] = *(float64_t *)(v6 + 2912);
  v713 = vmulq_f64(v709, v660);
  v714 = vmulq_f64(*(float64x2_t *)(v6 + 2896), v702);
  v715 = vmulq_f64(*(float64x2_t *)(v6 + 2880), v702);
  v716 = vmulq_f64(*(float64x2_t *)(v6 + 2864), v702);
  v1466 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v6 + 2848), v702);
  *(int8x16_t *)(v6 + 2848) = v1466;
  *(float64x2_t *)(v6 + 2864) = v716;
  v1465 = (int8x16_t)v716;
  v1464 = (int8x16_t)v715;
  *(float64x2_t *)(v6 + 2880) = v715;
  *(float64x2_t *)(v6 + 2896) = v714;
  v1463 = (int8x16_t)v714;
  v1337 = v713;
  *(float64_t *)(v6 + 2912) = v713.f64[0];
  v713.f64[0] = *(float64_t *)(v6 + 2984);
  v717 = vmulq_f64(v713, v660);
  v718 = vmulq_f64(*(float64x2_t *)(v6 + 2968), v702);
  v719 = vmulq_f64(*(float64x2_t *)(v6 + 2952), v702);
  v720 = vmulq_f64(*(float64x2_t *)(v6 + 2936), v702);
  v721 = vmulq_f64(*v287, v702);
  v1756 = (int8x16_t)v721;
  *v287 = v721;
  *(float64x2_t *)(v6 + 2936) = v720;
  v1737 = (int8x16_t)v720;
  v721.f64[0] = *(float64_t *)(v6 + 3056);
  v722 = vmulq_f64(v721, v660);
  v721.f64[0] = *(float64_t *)(v6 + 3128);
  v723 = vmulq_f64(v721, v660);
  v721.f64[0] = *(float64_t *)(v6 + 3200);
  v724 = vmulq_f64(v721, v660);
  v721.f64[0] = *(float64_t *)(v6 + 3272);
  v725 = vmulq_f64(v721, v660);
  v726 = vmulq_f64(*(float64x2_t *)(v6 + 3040), v702);
  v727 = vmulq_f64(*(float64x2_t *)(v6 + 3024), v702);
  v728 = vmulq_f64(*(float64x2_t *)(v6 + 3008), v702);
  v729 = vmulq_f64(*(float64x2_t *)(v6 + 2992), v702);
  v730 = vmulq_f64(*(float64x2_t *)(v6 + 3112), v702);
  v731 = vmulq_f64(*(float64x2_t *)(v6 + 3096), v702);
  v732 = vmulq_f64(*(float64x2_t *)(v6 + 3080), v702);
  v733 = vmulq_f64(*(float64x2_t *)(v6 + 3064), v702);
  v734 = vmulq_f64(*(float64x2_t *)(v6 + 3168), v702);
  v735 = vmulq_f64(*(float64x2_t *)(v6 + 3152), v702);
  v736 = vmulq_f64(*(float64x2_t *)(v6 + 3136), v702);
  v737 = vmulq_f64(*(float64x2_t *)(v6 + 3184), v702);
  v738 = vmulq_f64(*(float64x2_t *)(v6 + 3256), v702);
  v739 = vmulq_f64(*(float64x2_t *)(v6 + 3240), v702);
  v740 = vmulq_f64(*(float64x2_t *)(v6 + 3224), v702);
  v741 = vmulq_f64(*v1483, v702);
  v1728 = (int8x16_t)v719;
  *(float64x2_t *)(v6 + 2952) = v719;
  *(float64x2_t *)(v6 + 2968) = v718;
  v1714 = (int8x16_t)v718;
  v1341 = v717;
  *(float64_t *)(v6 + 2984) = v717.f64[0];
  v1720 = (int8x16_t)v729;
  *(float64x2_t *)(v6 + 2992) = v729;
  v1706 = (int8x16_t)v728;
  *(float64x2_t *)(v6 + 3008) = v728;
  v1696 = (int8x16_t)v727;
  *(float64x2_t *)(v6 + 3024) = v727;
  v1682 = (int8x16_t)v726;
  *(float64x2_t *)(v6 + 3040) = v726;
  v1344 = v722;
  *(float64_t *)(v6 + 3056) = v722.f64[0];
  v1801 = (int8x16_t)v733;
  *(float64x2_t *)(v6 + 3064) = v733;
  *(float64x2_t *)(v6 + 3080) = v732;
  v1781 = (int8x16_t)v732;
  v1763 = (int8x16_t)v731;
  *(float64x2_t *)(v6 + 3096) = v731;
  *(float64x2_t *)(v6 + 3112) = v730;
  v1742 = (int8x16_t)v730;
  v1347 = v723;
  *(float64_t *)(v6 + 3128) = v723.f64[0];
  v1348 = v724;
  *(float64_t *)(v6 + 3200) = v724.f64[0];
  v1810 = (int8x16_t)v737;
  *(float64x2_t *)(v6 + 3184) = v737;
  v1825 = (int8x16_t)v734;
  *(float64x2_t *)(v6 + 3168) = v734;
  v1832 = (int8x16_t)v735;
  *(float64x2_t *)(v6 + 3152) = v735;
  v1817 = (int8x16_t)v736;
  *(float64x2_t *)(v6 + 3136) = v736;
  v1840 = (int8x16_t)v738;
  v1848 = (int8x16_t)v739;
  *(float64x2_t *)(v6 + 3240) = v739;
  *(float64x2_t *)(v6 + 3256) = v738;
  v1855 = (int8x16_t)v740;
  v1859 = (int8x16_t)v741;
  *v1483 = v741;
  *(float64x2_t *)(v6 + 3224) = v740;
  v1349 = v725;
  *(float64_t *)(v6 + 3272) = v725.f64[0];
  v1234 = vextq_s8(v1413, v1413, 8uLL).u64[0];
  v1238 = vextq_s8(v1411, v1411, 8uLL).u64[0];
  v1245 = vextq_s8(v1480, v1480, 8uLL).u64[0];
  v1241 = vextq_s8(v1478, v1478, 8uLL).u64[0];
  v1237 = vextq_s8(v1476, v1476, 8uLL).u64[0];
  v1235 = vextq_s8(v1474, v1474, 8uLL).u64[0];
  v1249 = vextq_s8(v1443, v1443, 8uLL).u64[0];
  v1244 = vextq_s8(v1436, v1436, 8uLL).u64[0];
  v1240 = vextq_s8(v1431, v1431, 8uLL).u64[0];
  v1236 = vextq_s8(v1424, v1424, 8uLL).u64[0];
  v1253 = vextq_s8(v1451, v1451, 8uLL).u64[0];
  v1248 = vextq_s8(v1449, v1449, 8uLL).u64[0];
  v1243 = vextq_s8(v1447, v1447, 8uLL).u64[0];
  v1239 = vextq_s8(v1441, v1441, 8uLL).u64[0];
  v1257 = vextq_s8(v1629, v1629, 8uLL).u64[0];
  v1252 = vextq_s8(v1613, v1613, 8uLL).u64[0];
  v1247 = vextq_s8(v1602, v1602, 8uLL).u64[0];
  v1242 = vextq_s8(v1591, v1591, 8uLL).u64[0];
  v1261 = vextq_s8(v1610, v1610, 8uLL).u64[0];
  v1256 = vextq_s8(v1599, v1599, 8uLL).u64[0];
  v1251 = vextq_s8(v1583, v1583, 8uLL).u64[0];
  v1246 = vextq_s8(v1571, v1571, 8uLL).u64[0];
  v1264 = vextq_s8(v1660, v1660, 8uLL).u64[0];
  v1259 = vextq_s8(v1645, v1645, 8uLL).u64[0];
  v1254 = vextq_s8(v1637, v1637, 8uLL).u64[0];
  v1250 = vextq_s8(v1621, v1621, 8uLL).u64[0];
  v1265 = vextq_s8(v1702, v1702, 8uLL).u64[0];
  v1260 = vextq_s8(v1678, v1678, 8uLL).u64[0];
  v1255 = vextq_s8(v1664, v1664, 8uLL).u64[0];
  v1263 = vextq_s8(v1698, v1698, 8uLL).u64[0];
  v1267 = vextq_s8(v1789, v1789, 8uLL).u64[0];
  v1266 = vextq_s8(v1770, v1770, 8uLL).u64[0];
  v1262 = vextq_s8(v1730, v1730, 8uLL).u64[0];
  v1258 = vextq_s8(v1716, v1716, 8uLL).u64[0];
  if (*(_BYTE *)(v6 + 3928))
  {
    v725.f64[0] = *(float64_t *)(v6 + 3920);
    v717.f64[0] = 0.333333333;
    v1132 = *(_OWORD *)&vmulq_f64(v725, v717);
    v1131 = vmulq_f64(*(float64x2_t *)(v6 + 3296), v702);
    v1130 = vmulq_f64(*(float64x2_t *)(v6 + 3312), v702);
    v1129 = vmulq_f64(*(float64x2_t *)(v6 + 3328), v702);
    v1128 = vmulq_f64(*(float64x2_t *)(v6 + 3344), v702);
    v1127 = vmulq_f64(*(float64x2_t *)(v6 + 3360), v702);
    v1126 = vmulq_f64(*(float64x2_t *)(v6 + 3376), v702);
    v1125 = vmulq_f64(*(float64x2_t *)(v6 + 3392), v702);
    v1124 = vmulq_f64(*(float64x2_t *)(v6 + 3408), v702);
    v1123 = vmulq_f64(*(float64x2_t *)(v6 + 3424), v702);
    v742 = vmulq_f64(*(float64x2_t *)(v6 + 3440), v702);
    v743 = vmulq_f64(*(float64x2_t *)(v6 + 3456), v702);
    v744 = vmulq_f64(*(float64x2_t *)(v6 + 3472), v702);
    v745 = vmulq_f64(*(float64x2_t *)(v6 + 3488), v702);
    v746 = vmulq_f64(*(float64x2_t *)(v6 + 3504), v702);
    v747 = vmulq_f64(*(float64x2_t *)(v6 + 3520), v702);
    v748 = vmulq_f64(*(float64x2_t *)(v6 + 3536), v702);
    v749 = vmulq_f64(*(float64x2_t *)(v6 + 3552), v702);
    v750 = vmulq_f64(*(float64x2_t *)(v6 + 3568), v702);
    v751 = vmulq_f64(*(float64x2_t *)(v6 + 3584), v702);
    v752 = vmulq_f64(*(float64x2_t *)(v6 + 3600), v702);
    v753 = vmulq_f64(*(float64x2_t *)(v6 + 3616), v702);
    v754 = vmulq_f64(*(float64x2_t *)(v6 + 3632), v702);
    v755 = vmulq_f64(*(float64x2_t *)(v6 + 3648), v702);
    v756 = vmulq_f64(*(float64x2_t *)(v6 + 3664), v702);
    v757 = vmulq_f64(*(float64x2_t *)(v6 + 3680), v702);
    v758 = vmulq_f64(*(float64x2_t *)(v6 + 3696), v702);
    v759 = vmulq_f64(*(float64x2_t *)(v6 + 3712), v702);
    v760 = vmulq_f64(*(float64x2_t *)(v6 + 3728), v702);
    v761 = vmulq_f64(*(float64x2_t *)(v6 + 3744), v702);
    v762 = vmulq_f64(*(float64x2_t *)(v6 + 3760), v702);
    v763 = vmulq_f64(*(float64x2_t *)(v6 + 3776), v702);
    v764 = vmulq_f64(*(float64x2_t *)(v6 + 3792), v702);
    v765 = vmulq_f64(*(float64x2_t *)(v6 + 3808), v702);
    v766 = vmulq_f64(*(float64x2_t *)(v6 + 3824), v702);
    v767 = vmulq_f64(*(float64x2_t *)(v6 + 3840), v702);
    v768 = vmulq_f64(*(float64x2_t *)(v6 + 3856), v702);
    v769 = vmulq_f64(*(float64x2_t *)(v6 + 3872), v702);
    v770 = vmulq_f64(*(float64x2_t *)(v6 + 3904), v702);
    v771 = vmulq_f64(*(float64x2_t *)(v6 + 3280), v702);
    *(float64x2_t *)(v6 + 3888) = vmulq_f64(*(float64x2_t *)(v6 + 3888), v702);
    *(float64x2_t *)(v6 + 3904) = v770;
    *(float64x2_t *)(v6 + 3856) = v768;
    *(float64x2_t *)(v6 + 3872) = v769;
    *(float64x2_t *)(v6 + 3824) = v766;
    *(float64x2_t *)(v6 + 3840) = v767;
    *(float64x2_t *)(v6 + 3792) = v764;
    *(float64x2_t *)(v6 + 3808) = v765;
    *(float64x2_t *)(v6 + 3760) = v762;
    *(float64x2_t *)(v6 + 3776) = v763;
    *(float64x2_t *)(v6 + 3728) = v760;
    *(float64x2_t *)(v6 + 3744) = v761;
    *(float64x2_t *)(v6 + 3696) = v758;
    *(float64x2_t *)(v6 + 3712) = v759;
    *(float64x2_t *)(v6 + 3664) = v756;
    *(float64x2_t *)(v6 + 3680) = v757;
    *(float64x2_t *)(v6 + 3632) = v754;
    *(float64x2_t *)(v6 + 3648) = v755;
    *(float64x2_t *)(v6 + 3600) = v752;
    *(float64x2_t *)(v6 + 3616) = v753;
    *(float64x2_t *)(v6 + 3568) = v750;
    *(float64x2_t *)(v6 + 3584) = v751;
    *(float64x2_t *)(v6 + 3536) = v748;
    *(float64x2_t *)(v6 + 3552) = v749;
    *(float64x2_t *)(v6 + 3504) = v746;
    *(float64x2_t *)(v6 + 3520) = v747;
    *(float64x2_t *)(v6 + 3472) = v744;
    *(float64x2_t *)(v6 + 3488) = v745;
    *(float64x2_t *)(v6 + 3440) = v742;
    *(float64x2_t *)(v6 + 3456) = v743;
    *(float64x2_t *)(v6 + 3424) = v1123;
    *(float64x2_t *)(v6 + 3408) = v1124;
    *(float64x2_t *)(v6 + 3392) = v1125;
    *(float64x2_t *)(v6 + 3376) = v1126;
    *(float64x2_t *)(v6 + 3360) = v1127;
    *(float64x2_t *)(v6 + 3344) = v1128;
    *(float64x2_t *)(v6 + 3328) = v1129;
    *(float64x2_t *)(v6 + 3280) = v771;
    *(float64x2_t *)(v6 + 3296) = v1131;
    *(float64x2_t *)(v6 + 3312) = v1130;
    *(_QWORD *)(v6 + 3920) = v1132;
  }
  *(_QWORD *)&v772.f64[0] = v1360.i64[0];
  *(_QWORD *)&v772.f64[1] = v1133;
  *(_QWORD *)&v773.f64[0] = v1397.i64[0];
  *(_QWORD *)&v773.f64[1] = v1170;
  *(_QWORD *)&v774.f64[0] = v1357.i64[0];
  *(_QWORD *)&v774.f64[1] = v1137;
  *(_QWORD *)&v775.f64[0] = v1395.i64[0];
  *(_QWORD *)&v775.f64[1] = v1174;
  *(_QWORD *)&v776.f64[0] = v1351.i64[0];
  *(_QWORD *)&v776.f64[1] = v1134;
  *(_QWORD *)&v777.f64[0] = v1391.i64[0];
  *(_QWORD *)&v777.f64[1] = v1167;
  *(_QWORD *)&v778.f64[0] = v1354.i64[0];
  *(_QWORD *)&v778.f64[1] = v1136;
  *(_QWORD *)&v779.f64[0] = v1393.i64[0];
  *(_QWORD *)&v779.f64[1] = v1172;
  *(_QWORD *)&v780.f64[0] = v1363.i64[0];
  *(_QWORD *)&v780.f64[1] = v1140;
  *(_QWORD *)&v781.f64[0] = v1399.i64[0];
  *(_QWORD *)&v781.f64[1] = v1180;
  *(_QWORD *)&v782.f64[0] = v1369.i64[0];
  *(_QWORD *)&v782.f64[1] = v1144;
  *(_QWORD *)&v783.f64[0] = v1403.i64[0];
  *(_QWORD *)&v783.f64[1] = v1188;
  *(_QWORD *)&v784.f64[0] = v1366.i64[0];
  *(_QWORD *)&v784.f64[1] = v1135;
  *(_QWORD *)&v785.f64[0] = v1401.i64[0];
  *(_QWORD *)&v785.f64[1] = v1168;
  *(_QWORD *)&v786.f64[0] = v1372.i64[0];
  *(_QWORD *)&v786.f64[1] = v1139;
  *(_QWORD *)&v787.f64[0] = v1405.i64[0];
  *(_QWORD *)&v787.f64[1] = v1178;
  *(_QWORD *)&v788.f64[0] = v1375.i64[0];
  *(_QWORD *)&v788.f64[1] = v1143;
  *(_QWORD *)&v789.f64[0] = v1415.i64[0];
  *(_QWORD *)&v789.f64[1] = v1186;
  *(_QWORD *)&v790.f64[0] = v1379.i64[0];
  *(_QWORD *)&v790.f64[1] = v1148;
  *(_QWORD *)&v791.f64[0] = v1421.i64[0];
  *(_QWORD *)&v791.f64[1] = v1196;
  *(_QWORD *)&v792.f64[0] = v1377.i64[0];
  *(_QWORD *)&v792.f64[1] = v1138;
  *(_QWORD *)&v793.f64[0] = v1419.i64[0];
  *(_QWORD *)&v793.f64[1] = v1176;
  *(_QWORD *)&v794.f64[0] = v1381.i64[0];
  *(_QWORD *)&v794.f64[1] = v1142;
  *(_QWORD *)&v795.f64[0] = v1426.i64[0];
  *(_QWORD *)&v795.f64[1] = v1184;
  *(_QWORD *)&v796.f64[0] = v1383.i64[0];
  *(_QWORD *)&v796.f64[1] = v1147;
  *(_QWORD *)&v797.f64[0] = v1433.i64[0];
  *(_QWORD *)&v797.f64[1] = v1194;
  *(_QWORD *)&v798.f64[0] = v1387.i64[0];
  *(_QWORD *)&v798.f64[1] = v1152;
  *(_QWORD *)&v799.f64[0] = v1438.i64[0];
  *(_QWORD *)&v799.f64[1] = v1204;
  *(_QWORD *)&v800.f64[0] = v1385.i64[0];
  *(_QWORD *)&v800.f64[1] = v1141;
  *(_QWORD *)&v801.f64[0] = v1563.i64[0];
  *(_QWORD *)&v801.f64[1] = v1182;
  v1564 = v801;
  *(_QWORD *)&v802.f64[0] = v1389.i64[0];
  *(_QWORD *)&v802.f64[1] = v1146;
  *(_QWORD *)&v801.f64[0] = v1567.i64[0];
  *(_QWORD *)&v801.f64[1] = v1192;
  v1568 = v801;
  *(_QWORD *)&v801.f64[0] = v1519.i64[0];
  *(_QWORD *)&v801.f64[1] = v1151;
  v1520 = v801;
  *(_QWORD *)&v801.f64[0] = v1574.i64[0];
  *(_QWORD *)&v801.f64[1] = v1202;
  v1575 = v801;
  *(_QWORD *)&v801.f64[0] = v1525.i64[0];
  *(_QWORD *)&v801.f64[1] = v1156;
  v1526 = v801;
  *(_QWORD *)&v801.f64[0] = v1586.i64[0];
  *(_QWORD *)&v801.f64[1] = v1212;
  v1587 = v801;
  *(_QWORD *)&v801.f64[0] = v1507.i64[0];
  *(_QWORD *)&v801.f64[1] = v1145;
  v1508 = v801;
  *(_QWORD *)&v801.f64[0] = v1578.i64[0];
  *(_QWORD *)&v801.f64[1] = v1190;
  v1579 = v801;
  *(_QWORD *)&v801.f64[0] = v1510.i64[0];
  *(_QWORD *)&v801.f64[1] = v1150;
  v1511 = v801;
  *(_QWORD *)&v801.f64[0] = v1594.i64[0];
  *(_QWORD *)&v801.f64[1] = v1200;
  v1595 = v801;
  *(_QWORD *)&v801.f64[0] = v1513.i64[0];
  *(_QWORD *)&v801.f64[1] = v1155;
  v1514 = v801;
  *(_QWORD *)&v801.f64[0] = v1605.i64[0];
  *(_QWORD *)&v801.f64[1] = v1210;
  v1606 = v801;
  *(_QWORD *)&v801.f64[0] = v1516.i64[0];
  *(_QWORD *)&v801.f64[1] = v1160;
  v1517 = v801;
  *(_QWORD *)&v801.f64[0] = v1624.i64[0];
  *(_QWORD *)&v801.f64[1] = v1220;
  v1625 = v801;
  *(_QWORD *)&v801.f64[0] = v1522.i64[0];
  *(_QWORD *)&v801.f64[1] = v1149;
  v1523 = v801;
  *(_QWORD *)&v801.f64[0] = v1616.i64[0];
  *(_QWORD *)&v801.f64[1] = v1198;
  v1617 = v801;
  *(_QWORD *)&v801.f64[0] = v1528.i64[0];
  *(_QWORD *)&v801.f64[1] = v1153;
  v1529 = v801;
  *(_QWORD *)&v801.f64[0] = v1632.i64[0];
  *(_QWORD *)&v801.f64[1] = v1206;
  v1633 = v801;
  *(_QWORD *)&v801.f64[0] = v1531.i64[0];
  *(_QWORD *)&v801.f64[1] = v1158;
  v1532 = v801;
  *(_QWORD *)&v801.f64[0] = v1640.i64[0];
  *(_QWORD *)&v801.f64[1] = v1216;
  v1641 = v801;
  *(_QWORD *)&v801.f64[0] = v1534.i64[0];
  *(_QWORD *)&v801.f64[1] = v1163;
  v1535 = v801;
  *(_QWORD *)&v801.f64[0] = v1654.i64[0];
  *(_QWORD *)&v801.f64[1] = v1226;
  v1655 = v801;
  *(_QWORD *)&v801.f64[0] = v1537.i64[0];
  *(_QWORD *)&v801.f64[1] = v1154;
  v1538 = v801;
  *(_QWORD *)&v801.f64[0] = v1648.i64[0];
  *(_QWORD *)&v801.f64[1] = v1208;
  v1649 = v801;
  *(_QWORD *)&v801.f64[0] = v1540.i64[0];
  *(_QWORD *)&v801.f64[1] = v1159;
  v1541 = v801;
  *(_QWORD *)&v801.f64[0] = v1667.i64[0];
  *(_QWORD *)&v801.f64[1] = v1218;
  v1668 = v801;
  *(_QWORD *)&v801.f64[0] = v1543.i64[0];
  *(_QWORD *)&v801.f64[1] = v1164;
  v1544 = v801;
  *(_QWORD *)&v801.f64[0] = v1673.i64[0];
  *(_QWORD *)&v801.f64[1] = v1228;
  v1674 = v801;
  *(_QWORD *)&v801.f64[0] = v1546.i64[0];
  *(_QWORD *)&v801.f64[1] = v1162;
  v1547 = v801;
  *(_QWORD *)&v801.f64[0] = v1690.i64[0];
  *(_QWORD *)&v801.f64[1] = v1224;
  v1691 = v801;
  *(_QWORD *)&v801.f64[0] = v1549.i64[0];
  v801.f64[1] = v1157;
  v1550 = v801;
  *(_QWORD *)&v801.f64[0] = v1684.i64[0];
  *(_QWORD *)&v801.f64[1] = v1214;
  v1685 = v801;
  *(_QWORD *)&v801.f64[0] = v1552.i64[0];
  *(_QWORD *)&v801.f64[1] = v1161;
  v1553 = v801;
  *(_QWORD *)&v801.f64[0] = v1708.i64[0];
  *(_QWORD *)&v801.f64[1] = v1222;
  v1709 = v801;
  *(_QWORD *)&v801.f64[0] = v1555.i64[0];
  *(_QWORD *)&v801.f64[1] = v1165;
  v1556 = v801;
  *(_QWORD *)&v801.f64[0] = v1722.i64[0];
  *(_QWORD *)&v801.f64[1] = v1230;
  v1723 = v801;
  *(_QWORD *)&v801.f64[0] = v1559.i64[0];
  *(_QWORD *)&v801.f64[1] = v1166;
  v1560 = v801;
  *(_QWORD *)&v801.f64[0] = v1747.i64[0];
  *(_QWORD *)&v801.f64[1] = v1232;
  v1439 = (int8x16_t)vaddq_f64(v773, v772);
  v1367 = vaddq_f64(v1299, v1274);
  v1434 = (int8x16_t)vaddq_f64(v775, v774);
  v1364 = vaddq_f64(v1296, v1272);
  v1373 = vaddq_f64(v1292, v1268);
  v1370 = vaddq_f64(v1294, v1270);
  v1427 = (int8x16_t)vaddq_f64(v777, v776);
  v1422 = (int8x16_t)vaddq_f64(v779, v778);
  v803 = (int8x16_t)vaddq_f64(v781, v780);
  v804 = (int8x16_t)vaddq_f64(v783, v782);
  v1361 = vaddq_f64(v1302, v1276);
  v805 = (int8x16_t)vaddq_f64(v785, v784);
  v806 = (int8x16_t)vaddq_f64(v787, v786);
  v807 = (int8x16_t)vaddq_f64(v789, v788);
  v808 = (int8x16_t)vaddq_f64(v791, v790);
  v1352 = vaddq_f64(v1307, v1278);
  v809 = (int8x16_t)vaddq_f64(v793, v792);
  v810 = (int8x16_t)vaddq_f64(v795, v794);
  v811 = (int8x16_t)vaddq_f64(v797, v796);
  v812 = (int8x16_t)vaddq_f64(v799, v798);
  v1311 = vaddq_f64(v1310, v1280);
  v813 = (int8x16_t)vaddq_f64(v1564, v800);
  v814 = (int8x16_t)vaddq_f64(v1568, v802);
  v815 = (int8x16_t)vaddq_f64(v1575, v1520);
  v816 = (int8x16_t)vaddq_f64(v1587, v1526);
  v1303 = vaddq_f64(v1313, v1282);
  v817 = vaddq_f64(v1579, v1508);
  v818 = (int8x16_t)vaddq_f64(v1595, v1511);
  v819 = (int8x16_t)vaddq_f64(v1606, v1514);
  v820 = (int8x16_t)vaddq_f64(v1625, v1517);
  v1300 = vaddq_f64(v1318, v1284);
  v821 = (int8x16_t)vaddq_f64(v1617, v1523);
  v822 = (int8x16_t)vaddq_f64(v1633, v1529);
  v823 = (int8x16_t)vaddq_f64(v1641, v1532);
  v824 = (int8x16_t)vaddq_f64(v1655, v1535);
  v1297 = vaddq_f64(v1328, v1286);
  v825 = (int8x16_t)vaddq_f64(v1649, v1538);
  v826 = (int8x16_t)vaddq_f64(v1668, v1541);
  v827 = (int8x16_t)vaddq_f64(v1674, v1544);
  v828 = (int8x16_t)vaddq_f64(v1691, v1547);
  v1295 = vaddq_f64(v1334, v1288);
  v829 = (int8x16_t)vaddq_f64(v1685, v1550);
  v830 = (int8x16_t)vaddq_f64(v1709, v1553);
  v831 = (int8x16_t)vaddq_f64(v1723, v1556);
  v832 = (int8x16_t)vaddq_f64(v801, v1560);
  v1293 = vaddq_f64(v1338, v1290);
  v1376 = vextq_s8(v1456, v1456, 8uLL).u64[0];
  v1378 = vextq_s8(v1455, v1455, 8uLL).u64[0];
  v1380 = vextq_s8(v1453, v1453, 8uLL).u64[0];
  v1382 = vextq_s8(v1454, v1454, 8uLL).u64[0];
  v1384 = vextq_s8(v1457, v1457, 8uLL).u64[0];
  v1386 = vextq_s8(v1458, v1458, 8uLL).u64[0];
  v1388 = vextq_s8(v1459, v1459, 8uLL).u64[0];
  v1390 = vextq_s8(v1460, v1460, 8uLL).u64[0];
  v1392 = vextq_s8(v1461, v1461, 8uLL).u64[0];
  v1394 = vextq_s8(v1462, v1462, 8uLL).u64[0];
  v1396 = vextq_s8(v1463, v1463, 8uLL).u64[0];
  v1398 = vextq_s8(v1464, v1464, 8uLL).u64[0];
  v1400 = vextq_s8(v1465, v1465, 8uLL).u64[0];
  v1402 = vextq_s8(v1466, v1466, 8uLL).u64[0];
  v1404 = vextq_s8(v1714, v1714, 8uLL).u64[0];
  v1406 = vextq_s8(v1728, v1728, 8uLL).u64[0];
  v1416 = vextq_s8(v1737, v1737, 8uLL).u64[0];
  v1420 = vextq_s8(v1756, v1756, 8uLL).u64[0];
  v1509 = vextq_s8(v1682, v1682, 8uLL).u64[0];
  v1512 = vextq_s8(v1696, v1696, 8uLL).u64[0];
  v1518 = vextq_s8(v1706, v1706, 8uLL).u64[0];
  v1521 = vextq_s8(v1720, v1720, 8uLL).u64[0];
  v1524 = vextq_s8(v1742, v1742, 8uLL).u64[0];
  v1527 = vextq_s8(v1763, v1763, 8uLL).u64[0];
  v1530 = vextq_s8(v1781, v1781, 8uLL).u64[0];
  v1536 = vextq_s8(v1801, v1801, 8uLL).u64[0];
  v1548 = vextq_s8(v1825, v1825, 8uLL).u64[0];
  v1554 = vextq_s8(v1832, v1832, 8uLL).u64[0];
  v1533 = vextq_s8(v1817, v1817, 8uLL).u64[0];
  v1515 = vextq_s8(v1810, v1810, 8uLL).u64[0];
  v1539 = vextq_s8(v1840, v1840, 8uLL).u64[0];
  v1542 = vextq_s8(v1848, v1848, 8uLL).u64[0];
  v1545 = vextq_s8(v1855, v1855, 8uLL).u64[0];
  v1551 = vextq_s8(v1859, v1859, 8uLL).u64[0];
  v1197 = vextq_s8(v1439, v1439, 8uLL).u64[0];
  *(_QWORD *)&v833 = vextq_s8(v1434, v1434, 8uLL).u64[0];
  v1199 = vextq_s8(v1427, v1427, 8uLL).u64[0];
  v1201 = vextq_s8(v1422, v1422, 8uLL).u64[0];
  v1569 = *(double *)v803.i64;
  v1203 = vextq_s8(v803, v803, 8uLL).u64[0];
  v1565 = *(double *)v804.i64;
  v1205 = vextq_s8(v804, v804, 8uLL).u64[0];
  v1561 = *(double *)v805.i64;
  v1207 = vextq_s8(v805, v805, 8uLL).u64[0];
  v1557 = *(double *)v806.i64;
  v1209 = vextq_s8(v806, v806, 8uLL).u64[0];
  v1358 = *(double *)v807.i64;
  v1211 = vextq_s8(v807, v807, 8uLL).u64[0];
  v1355 = *(double *)v808.i64;
  v1213 = vextq_s8(v808, v808, 8uLL).u64[0];
  v1339 = *(double *)v809.i64;
  v834 = vextq_s8(v809, v809, 8uLL).u64[0];
  v1335 = *(double *)v810.i64;
  v1215 = vextq_s8(v810, v810, 8uLL).u64[0];
  v1329 = *(double *)v811.i64;
  v835 = vextq_s8(v811, v811, 8uLL).u64[0];
  v1319 = *(double *)v812.i64;
  v1217 = vextq_s8(v812, v812, 8uLL).u64[0];
  v1314 = *(double *)v813.i64;
  v1219 = vextq_s8(v813, v813, 8uLL).u64[0];
  v1748 = v814.i64[0];
  v1221 = vextq_s8(v814, v814, 8uLL).u64[0];
  v1308 = v815.i64[0];
  v1223 = vextq_s8(v815, v815, 8uLL).u64[0];
  v1724 = v816.i64[0];
  v1225 = vextq_s8(v816, v816, 8uLL).u64[0];
  v1710 = v817.f64[0];
  v1227 = vextq_s8((int8x16_t)v817, (int8x16_t)v817, 8uLL).u64[0];
  v1692 = v818.i64[0];
  v1229 = vextq_s8(v818, v818, 8uLL).u64[0];
  v1686 = v819.i64[0];
  v1231 = vextq_s8(v819, v819, 8uLL).u64[0];
  v1675 = v820.i64[0];
  v1233 = vextq_s8(v820, v820, 8uLL).u64[0];
  v1669 = v821.i64[0];
  v1269 = vextq_s8(v821, v821, 8uLL).u64[0];
  v1656 = v822.i64[0];
  v1271 = vextq_s8(v822, v822, 8uLL).u64[0];
  v1650 = v823.i64[0];
  v1273 = vextq_s8(v823, v823, 8uLL).u64[0];
  v1642 = v824.i64[0];
  v1275 = vextq_s8(v824, v824, 8uLL).u64[0];
  v1634 = v825.i64[0];
  v1277 = vextq_s8(v825, v825, 8uLL).u64[0];
  v1626 = v826.i64[0];
  v1279 = vextq_s8(v826, v826, 8uLL).u64[0];
  v1618 = v827.i64[0];
  v1281 = vextq_s8(v827, v827, 8uLL).u64[0];
  v1607 = v828.i64[0];
  v1283 = vextq_s8(v828, v828, 8uLL).u64[0];
  v1596 = v829.i64[0];
  v1285 = vextq_s8(v829, v829, 8uLL).u64[0];
  v1588 = v830.i64[0];
  v1287 = vextq_s8(v830, v830, 8uLL).u64[0];
  v1580 = v831.i64[0];
  v1289 = vextq_s8(v831, v831, 8uLL).u64[0];
  v1576 = v832.i64[0];
  v1291 = vextq_s8(v832, v832, 8uLL).u64[0];
  if (v534)
  {
    v1191 = *(float64x2_t *)(v6 + 4592);
    v836.f64[1] = *(float64_t *)(v6 + 4600);
    v1193 = v834;
    v836.f64[0] = *(float64_t *)(v6 + 5232);
    v1195 = v835;
    v837 = (float64x2_t *)(v1468 + 72);
    v1183 = *(float64x2_t *)(v1468 + 72);
    v817.f64[0] = *(float64_t *)(v1468 + 712);
    v1469 = *(_OWORD *)&vaddq_f64(v836, v817);
    v1189 = vaddq_f64(*(float64x2_t *)(v6 + 4608), v837[1]);
    v1185 = vaddq_f64(*(float64x2_t *)(v6 + 4640), v837[3]);
    v1187 = vaddq_f64(*(float64x2_t *)(v6 + 4624), v837[2]);
    v1181 = vaddq_f64(*(float64x2_t *)(v6 + 4656), v837[4]);
    v1177 = vaddq_f64(*(float64x2_t *)(v6 + 4688), v837[6]);
    v1179 = vaddq_f64(*(float64x2_t *)(v6 + 4672), v837[5]);
    v1173 = vaddq_f64(*(float64x2_t *)(v6 + 4720), v837[8]);
    v1175 = vaddq_f64(*(float64x2_t *)(v6 + 4704), v837[7]);
    v1169 = vaddq_f64(*(float64x2_t *)(v6 + 4752), v837[10]);
    v1171 = vaddq_f64(*(float64x2_t *)(v6 + 4736), v837[9]);
    v838 = vaddq_f64(*(float64x2_t *)(v6 + 4768), v837[11]);
    v839 = vaddq_f64(*(float64x2_t *)(v6 + 4784), v837[12]);
    v840 = vaddq_f64(*(float64x2_t *)(v6 + 4800), v837[13]);
    v841 = vaddq_f64(*(float64x2_t *)(v6 + 4816), v837[14]);
    v842 = vaddq_f64(*(float64x2_t *)(v6 + 4832), v837[15]);
    v843 = vaddq_f64(*(float64x2_t *)(v6 + 4848), v837[16]);
    v844 = vaddq_f64(*(float64x2_t *)(v6 + 4864), v837[17]);
    v845 = vaddq_f64(*(float64x2_t *)(v6 + 4880), v837[18]);
    v846 = vaddq_f64(*(float64x2_t *)(v6 + 4896), v837[19]);
    v847 = vaddq_f64(*(float64x2_t *)(v6 + 4912), v837[20]);
    v848 = vaddq_f64(*(float64x2_t *)(v6 + 4928), v837[21]);
    v849 = vaddq_f64(*(float64x2_t *)(v6 + 4944), v837[22]);
    v850 = vaddq_f64(*(float64x2_t *)(v6 + 4960), v837[23]);
    v851 = vaddq_f64(*(float64x2_t *)(v6 + 4976), v837[24]);
    v852 = vaddq_f64(*(float64x2_t *)(v6 + 4992), v837[25]);
    v853 = vaddq_f64(*(float64x2_t *)(v6 + 5008), v837[26]);
    v854 = vaddq_f64(*(float64x2_t *)(v6 + 5024), v837[27]);
    v855 = vaddq_f64(*(float64x2_t *)(v6 + 5040), v837[28]);
    v856 = vaddq_f64(*(float64x2_t *)(v6 + 5056), v837[29]);
    v857 = vaddq_f64(*(float64x2_t *)(v6 + 5072), v837[30]);
    v858 = vaddq_f64(*(float64x2_t *)(v6 + 5088), v837[31]);
    v859 = vaddq_f64(*(float64x2_t *)(v6 + 5104), v837[32]);
    v860 = vaddq_f64(*(float64x2_t *)(v6 + 5120), v837[33]);
    v836.f64[0] = v833;
    v861 = vaddq_f64(*(float64x2_t *)(v6 + 5136), v837[34]);
    v862 = vaddq_f64(*(float64x2_t *)(v6 + 5152), v837[35]);
    v863 = vaddq_f64(*(float64x2_t *)(v6 + 5168), v837[36]);
    v864 = vaddq_f64(*(float64x2_t *)(v6 + 5184), v837[37]);
    v865 = vaddq_f64(*(float64x2_t *)(v6 + 5216), v837[39]);
    *(float64x2_t *)(v6 + 5200) = vaddq_f64(*(float64x2_t *)(v6 + 5200), v837[38]);
    *(float64x2_t *)(v6 + 5216) = v865;
    *(float64x2_t *)(v6 + 5168) = v863;
    *(float64x2_t *)(v6 + 5184) = v864;
    *(float64x2_t *)(v6 + 5136) = v861;
    *(float64x2_t *)(v6 + 5152) = v862;
    v833 = v836.f64[0];
    *(float64x2_t *)(v6 + 5104) = v859;
    *(float64x2_t *)(v6 + 5120) = v860;
    *(float64x2_t *)(v6 + 5072) = v857;
    *(float64x2_t *)(v6 + 5088) = v858;
    v834 = v1193;
    v835 = v1195;
    *(float64x2_t *)(v6 + 5040) = v855;
    *(float64x2_t *)(v6 + 5056) = v856;
    *(float64x2_t *)(v6 + 5008) = v853;
    *(float64x2_t *)(v6 + 5024) = v854;
    *(float64x2_t *)(v6 + 4976) = v851;
    *(float64x2_t *)(v6 + 4992) = v852;
    *(float64x2_t *)(v6 + 4944) = v849;
    *(float64x2_t *)(v6 + 4960) = v850;
    *(float64x2_t *)(v6 + 4912) = v847;
    *(float64x2_t *)(v6 + 4928) = v848;
    *(float64x2_t *)(v6 + 4880) = v845;
    *(float64x2_t *)(v6 + 4896) = v846;
    *(float64x2_t *)(v6 + 4848) = v843;
    *(float64x2_t *)(v6 + 4864) = v844;
    *(float64x2_t *)(v6 + 4816) = v841;
    *(float64x2_t *)(v6 + 4832) = v842;
    *(float64x2_t *)(v6 + 4784) = v839;
    *(float64x2_t *)(v6 + 4800) = v840;
    *(float64x2_t *)(v6 + 4752) = v1169;
    *(float64x2_t *)(v6 + 4768) = v838;
    *(float64x2_t *)(v6 + 4720) = v1173;
    *(float64x2_t *)(v6 + 4736) = v1171;
    *(float64x2_t *)(v6 + 4688) = v1177;
    *(float64x2_t *)(v6 + 4704) = v1175;
    *(float64x2_t *)(v6 + 4656) = v1181;
    *(float64x2_t *)(v6 + 4672) = v1179;
    *(float64x2_t *)(v6 + 4624) = v1187;
    *(float64x2_t *)(v6 + 4640) = v1185;
    *(float64x2_t *)(v6 + 4592) = vaddq_f64(v1191, v1183);
    *(float64x2_t *)(v6 + 4608) = v1189;
    *(_QWORD *)(v6 + 5232) = v1469;
  }
  *(_QWORD *)&v866.f64[0] = v1413.i64[0];
  *(_QWORD *)&v866.f64[1] = v1234;
  *(_QWORD *)&v867.f64[0] = v1439.i64[0];
  *(_QWORD *)&v867.f64[1] = v1197;
  *(_QWORD *)&v868.f64[0] = v1411.i64[0];
  *(_QWORD *)&v868.f64[1] = v1238;
  *(_QWORD *)&v869.f64[0] = v1434.i64[0];
  v869.f64[1] = v833;
  *(_QWORD *)&v870.f64[0] = v1474.i64[0];
  *(_QWORD *)&v870.f64[1] = v1235;
  *(_QWORD *)&v871.f64[0] = v1427.i64[0];
  *(_QWORD *)&v871.f64[1] = v1199;
  *(_QWORD *)&v872.f64[0] = v1476.i64[0];
  *(_QWORD *)&v872.f64[1] = v1237;
  *(_QWORD *)&v873.f64[0] = v1422.i64[0];
  *(_QWORD *)&v873.f64[1] = v1201;
  *(_QWORD *)&v874.f64[0] = v1478.i64[0];
  *(_QWORD *)&v874.f64[1] = v1241;
  v875.f64[0] = v1569;
  *(_QWORD *)&v875.f64[1] = v1203;
  *(_QWORD *)&v876.f64[0] = v1480.i64[0];
  *(_QWORD *)&v876.f64[1] = v1245;
  v877.f64[0] = v1565;
  *(_QWORD *)&v877.f64[1] = v1205;
  *(_QWORD *)&v878.f64[0] = v1424.i64[0];
  *(_QWORD *)&v878.f64[1] = v1236;
  v879.f64[0] = v1561;
  *(_QWORD *)&v879.f64[1] = v1207;
  *(_QWORD *)&v880.f64[0] = v1431.i64[0];
  *(_QWORD *)&v880.f64[1] = v1240;
  v881.f64[0] = v1557;
  *(_QWORD *)&v881.f64[1] = v1209;
  *(_QWORD *)&v882.f64[0] = v1436.i64[0];
  *(_QWORD *)&v882.f64[1] = v1244;
  v883.f64[0] = v1358;
  *(_QWORD *)&v883.f64[1] = v1211;
  *(_QWORD *)&v884.f64[0] = v1443.i64[0];
  *(_QWORD *)&v884.f64[1] = v1249;
  v885.f64[0] = v1355;
  *(_QWORD *)&v885.f64[1] = v1213;
  *(_QWORD *)&v886.f64[0] = v1441.i64[0];
  *(_QWORD *)&v886.f64[1] = v1239;
  v887.f64[0] = v1339;
  *(_QWORD *)&v887.f64[1] = v834;
  *(_QWORD *)&v888.f64[0] = v1447.i64[0];
  *(_QWORD *)&v888.f64[1] = v1243;
  v889.f64[0] = v1335;
  *(_QWORD *)&v889.f64[1] = v1215;
  *(_QWORD *)&v890.f64[0] = v1449.i64[0];
  *(_QWORD *)&v890.f64[1] = v1248;
  v891.f64[0] = v1329;
  *(_QWORD *)&v891.f64[1] = v835;
  *(_QWORD *)&v892.f64[0] = v1451.i64[0];
  *(_QWORD *)&v892.f64[1] = v1253;
  v893.f64[0] = v1319;
  *(_QWORD *)&v893.f64[1] = v1217;
  *(_QWORD *)&v894.f64[0] = v1591.i64[0];
  *(_QWORD *)&v894.f64[1] = v1242;
  v1592 = v894;
  v895.f64[0] = v1314;
  *(_QWORD *)&v895.f64[1] = v1219;
  *(_QWORD *)&v894.f64[0] = v1602.i64[0];
  *(_QWORD *)&v894.f64[1] = v1247;
  v1603 = v894;
  *(_QWORD *)&v896.f64[0] = v1748;
  *(_QWORD *)&v896.f64[1] = v1221;
  v1749 = v896;
  *(_QWORD *)&v894.f64[0] = v1613.i64[0];
  *(_QWORD *)&v894.f64[1] = v1252;
  v1614 = v894;
  *(_QWORD *)&v896.f64[0] = v1308;
  *(_QWORD *)&v896.f64[1] = v1223;
  *(_QWORD *)&v894.f64[0] = v1629.i64[0];
  *(_QWORD *)&v894.f64[1] = v1257;
  v1630 = v894;
  *(_QWORD *)&v897.f64[0] = v1724;
  *(_QWORD *)&v897.f64[1] = v1225;
  v1725 = v897;
  *(_QWORD *)&v894.f64[0] = v1571.i64[0];
  *(_QWORD *)&v894.f64[1] = v1246;
  v1572 = v894;
  v897.f64[0] = v1710;
  *(_QWORD *)&v897.f64[1] = v1227;
  v1711 = v897;
  *(_QWORD *)&v894.f64[0] = v1583.i64[0];
  *(_QWORD *)&v894.f64[1] = v1251;
  v1584 = v894;
  *(_QWORD *)&v897.f64[0] = v1692;
  *(_QWORD *)&v897.f64[1] = v1229;
  v1693 = v897;
  *(_QWORD *)&v894.f64[0] = v1599.i64[0];
  *(_QWORD *)&v894.f64[1] = v1256;
  v1600 = v894;
  *(_QWORD *)&v897.f64[0] = v1686;
  *(_QWORD *)&v897.f64[1] = v1231;
  v1687 = v897;
  *(_QWORD *)&v894.f64[0] = v1610.i64[0];
  *(_QWORD *)&v894.f64[1] = v1261;
  v1611 = v894;
  *(_QWORD *)&v897.f64[0] = v1675;
  *(_QWORD *)&v897.f64[1] = v1233;
  *(_QWORD *)&v894.f64[0] = v1621.i64[0];
  *(_QWORD *)&v894.f64[1] = v1250;
  v1622 = v894;
  *(_QWORD *)&v894.f64[0] = v1669;
  *(_QWORD *)&v894.f64[1] = v1269;
  v1670 = v894;
  *(_QWORD *)&v894.f64[0] = v1637.i64[0];
  *(_QWORD *)&v894.f64[1] = v1254;
  v1638 = v894;
  *(_QWORD *)&v894.f64[0] = v1656;
  *(_QWORD *)&v894.f64[1] = v1271;
  v1657 = v894;
  *(_QWORD *)&v894.f64[0] = v1645.i64[0];
  *(_QWORD *)&v894.f64[1] = v1259;
  v1646 = v894;
  *(_QWORD *)&v894.f64[0] = v1650;
  *(_QWORD *)&v894.f64[1] = v1273;
  v1651 = v894;
  *(_QWORD *)&v894.f64[0] = v1660.i64[0];
  *(_QWORD *)&v894.f64[1] = v1264;
  v1661 = v894;
  *(_QWORD *)&v894.f64[0] = v1642;
  *(_QWORD *)&v894.f64[1] = v1275;
  v1643 = v894;
  *(_QWORD *)&v894.f64[0] = v1664.i64[0];
  *(_QWORD *)&v894.f64[1] = v1255;
  v1665 = v894;
  *(_QWORD *)&v894.f64[0] = v1634;
  *(_QWORD *)&v894.f64[1] = v1277;
  v1635 = v894;
  *(_QWORD *)&v894.f64[0] = v1678.i64[0];
  *(_QWORD *)&v894.f64[1] = v1260;
  v1679 = v894;
  *(_QWORD *)&v894.f64[0] = v1626;
  *(_QWORD *)&v894.f64[1] = v1279;
  v1627 = v894;
  *(_QWORD *)&v894.f64[0] = v1702.i64[0];
  *(_QWORD *)&v894.f64[1] = v1265;
  v1703 = v894;
  *(_QWORD *)&v894.f64[0] = v1618;
  *(_QWORD *)&v894.f64[1] = v1281;
  v1619 = v894;
  *(_QWORD *)&v894.f64[0] = v1698.i64[0];
  *(_QWORD *)&v894.f64[1] = v1263;
  v1699 = v894;
  *(_QWORD *)&v894.f64[0] = v1607;
  *(_QWORD *)&v894.f64[1] = v1283;
  v1608 = v894;
  *(_QWORD *)&v894.f64[0] = v1716.i64[0];
  *(_QWORD *)&v894.f64[1] = v1258;
  v1717 = v894;
  *(_QWORD *)&v894.f64[0] = v1596;
  *(_QWORD *)&v894.f64[1] = v1285;
  v1597 = v894;
  *(_QWORD *)&v894.f64[0] = v1730.i64[0];
  *(_QWORD *)&v894.f64[1] = v1262;
  v1731 = v894;
  *(_QWORD *)&v894.f64[0] = v1588;
  *(_QWORD *)&v894.f64[1] = v1287;
  v1589 = v894;
  *(_QWORD *)&v894.f64[0] = v1770.i64[0];
  *(_QWORD *)&v894.f64[1] = v1266;
  v1771 = v894;
  *(_QWORD *)&v894.f64[0] = v1580;
  *(_QWORD *)&v894.f64[1] = v1289;
  v1581 = v894;
  *(_QWORD *)&v894.f64[0] = v1789.i64[0];
  *(_QWORD *)&v894.f64[1] = v1267;
  v1790 = v894;
  *(_QWORD *)&v894.f64[0] = v1576;
  *(_QWORD *)&v894.f64[1] = v1291;
  v1562 = (int8x16_t)vaddq_f64(v867, v866);
  v1477 = vaddq_f64(v1367, v1305);
  v1558 = (int8x16_t)vaddq_f64(v869, v868);
  v1475 = vaddq_f64(v1364, v1417);
  v1481 = vaddq_f64(v1373, v1407);
  v1479 = vaddq_f64(v1370, v1409);
  v1570 = (int8x16_t)vaddq_f64(v871, v870);
  v1566 = (int8x16_t)vaddq_f64(v873, v872);
  v898 = (int8x16_t)vaddq_f64(v875, v874);
  v899 = (int8x16_t)vaddq_f64(v877, v876);
  v1470 = vaddq_f64(v1361, v1429);
  v900 = (int8x16_t)vaddq_f64(v879, v878);
  v901 = (int8x16_t)vaddq_f64(v881, v880);
  v902 = (int8x16_t)vaddq_f64(v883, v882);
  v903 = (int8x16_t)vaddq_f64(v885, v884);
  v1452 = vaddq_f64(v1352, v1445);
  v904 = (int8x16_t)vaddq_f64(v887, v886);
  v905 = (int8x16_t)vaddq_f64(v889, v888);
  v906 = (int8x16_t)vaddq_f64(v891, v890);
  v907 = (int8x16_t)vaddq_f64(v893, v892);
  v1450 = vaddq_f64(v1311, v1316);
  v908 = (int8x16_t)vaddq_f64(v895, v1592);
  v909 = (int8x16_t)vaddq_f64(v1749, v1603);
  v910 = (int8x16_t)vaddq_f64(v896, v1614);
  v911 = (int8x16_t)vaddq_f64(v1725, v1630);
  v1615 = vaddq_f64(v1303, v1322);
  v912 = (int8x16_t)vaddq_f64(v1693, v1584);
  v913 = (int8x16_t)vaddq_f64(v1687, v1600);
  v914 = (int8x16_t)vaddq_f64(v897, v1611);
  v1604 = vaddq_f64(v1300, v1331);
  v915 = (int8x16_t)vaddq_f64(v1670, v1622);
  v916 = (int8x16_t)vaddq_f64(v1657, v1638);
  v917 = (int8x16_t)vaddq_f64(v1651, v1646);
  v918 = (int8x16_t)vaddq_f64(v1643, v1661);
  v1601 = vaddq_f64(v1297, v1336);
  v919 = (int8x16_t)vaddq_f64(v1635, v1665);
  v920 = (int8x16_t)vaddq_f64(v1627, v1679);
  v921 = (int8x16_t)vaddq_f64(v1619, v1703);
  v922 = (int8x16_t)vaddq_f64(v1608, v1699);
  v1593 = vaddq_f64(v1295, v1342);
  v923 = vaddq_f64(v1597, v1717);
  v924 = (int8x16_t)vaddq_f64(v1589, v1731);
  v925 = (int8x16_t)vaddq_f64(v1581, v1771);
  v926 = (int8x16_t)vaddq_f64(v894, v1790);
  v1585 = vaddq_f64(v1293, v1345);
  v1356 = vextq_s8(v1562, v1562, 8uLL).u64[0];
  v1359 = vextq_s8(v1558, v1558, 8uLL).u64[0];
  v1371 = vextq_s8(v1570, v1570, 8uLL).u64[0];
  v1362 = vextq_s8(v1566, v1566, 8uLL).u64[0];
  v1631 = *(double *)v898.i64;
  v927 = vextq_s8(v898, v898, 8uLL).u64[0];
  v1623 = *(double *)v899.i64;
  v1353 = vextq_s8(v899, v899, 8uLL).u64[0];
  v1647 = *(double *)v900.i64;
  v1410 = vextq_s8(v900, v900, 8uLL).u64[0];
  v1639 = *(double *)v901.i64;
  v928 = (float64x2_t)vextq_s8(v901, v901, 8uLL);
  v1628 = *(double *)v902.i64;
  v929 = vextq_s8(v902, v902, 8uLL).u64[0];
  v1609 = *(double *)v903.i64;
  v930 = vextq_s8(v903, v903, 8uLL).u64[0];
  v1644 = *(double *)v904.i64;
  v1423 = vextq_s8(v904, v904, 8uLL).u64[0];
  v1636 = *(double *)v905.i64;
  v931 = vextq_s8(v905, v905, 8uLL).u64[0];
  v1620 = *(double *)v906.i64;
  v1368 = vextq_s8(v906, v906, 8uLL).u64[0];
  v1598 = *(double *)v907.i64;
  v932 = vextq_s8(v907, v907, 8uLL).u64[0];
  v1791 = v908.i64[0];
  v1432 = vextq_s8(v908, v908, 8uLL).u64[0];
  v1732 = v909.i64[0];
  v1418 = vextq_s8(v909, v909, 8uLL).u64[0];
  v1612 = *(double *)v910.i64;
  v1408 = vextq_s8(v910, v910, 8uLL).u64[0];
  v1590 = *(double *)v911.i64;
  v1365 = vextq_s8(v911, v911, 8uLL).u64[0];
  v1772 = (int8x16_t)vaddq_f64(v1711, v1572);
  v1440 = vextq_s8(v1772, v1772, 8uLL).u64[0];
  v1718 = v912.i64[0];
  v1430 = vextq_s8(v912, v912, 8uLL).u64[0];
  v1688 = v913.i64[0];
  v1414 = vextq_s8(v913, v913, 8uLL).u64[0];
  v1666 = v914.i64[0];
  v1374 = vextq_s8(v914, v914, 8uLL).u64[0];
  v1750 = v915.i64[0];
  v1448 = vextq_s8(v915, v915, 8uLL).u64[0];
  v1704 = v916.i64[0];
  v1437 = vextq_s8(v916, v916, 8uLL).u64[0];
  v1676 = v917.i64[0];
  v1428 = vextq_s8(v917, v917, 8uLL).u64[0];
  v1662 = v918.i64[0];
  v1412 = vextq_s8(v918, v918, 8uLL).u64[0];
  v1700 = v919.i64[0];
  v1446 = vextq_s8(v919, v919, 8uLL).u64[0];
  v1712 = v920.i64[0];
  v1573 = vextq_s8(v920, v920, 8uLL).u64[0];
  v1680 = v921.i64[0];
  v1442 = vextq_s8(v921, v921, 8uLL).u64[0];
  v1658 = v922.i64[0];
  v1425 = vextq_s8(v922, v922, 8uLL).u64[0];
  v1726 = v923.f64[0];
  v1582 = vextq_s8((int8x16_t)v923, (int8x16_t)v923, 8uLL).u64[0];
  v1694 = v924.i64[0];
  v1577 = vextq_s8(v924, v924, 8uLL).u64[0];
  v1671 = v925.i64[0];
  v1444 = vextq_s8(v925, v925, 8uLL).u64[0];
  v1652 = v926.i64[0];
  v1435 = vextq_s8(v926, v926, 8uLL).u64[0];
  if (v534)
  {
    v1332 = *(float64x2_t *)(v6 + 4592);
    v923.f64[0] = *(float64_t *)(v6 + 5232);
    v1343 = v929;
    v1340 = v932;
    v1346 = v931;
    v1330 = *(float64x2_t *)(v6 + 1968);
    v1485 = v928.f64[0];
    v928.f64[0] = *(float64_t *)(v6 + 2608);
    v1323 = *(_OWORD *)&vaddq_f64(v923, v928);
    v1320 = vaddq_f64(*(float64x2_t *)(v6 + 4608), *(float64x2_t *)(v6 + 1984));
    v1317 = vaddq_f64(*(float64x2_t *)(v6 + 4624), *(float64x2_t *)(v6 + 2000));
    v1315 = vaddq_f64(*(float64x2_t *)(v6 + 4640), *(float64x2_t *)(v6 + 2016));
    v1312 = vaddq_f64(*(float64x2_t *)(v6 + 4656), *(float64x2_t *)(v6 + 2032));
    v1309 = vaddq_f64(*(float64x2_t *)(v6 + 4672), *(float64x2_t *)(v6 + 2048));
    v1306 = vaddq_f64(*(float64x2_t *)(v6 + 4688), *(float64x2_t *)(v6 + 2064));
    v1304 = vaddq_f64(*(float64x2_t *)(v6 + 4704), *(float64x2_t *)(v6 + 2080));
    v1301 = vaddq_f64(*(float64x2_t *)(v6 + 4720), *(float64x2_t *)(v6 + 2096));
    v1298 = vaddq_f64(*(float64x2_t *)(v6 + 4736), *(float64x2_t *)(v6 + 2112));
    v933 = vaddq_f64(*(float64x2_t *)(v6 + 4752), *(float64x2_t *)(v6 + 2128));
    v934 = vaddq_f64(*(float64x2_t *)(v6 + 4768), *(float64x2_t *)(v6 + 2144));
    v935 = vaddq_f64(*(float64x2_t *)(v6 + 4784), *(float64x2_t *)(v6 + 2160));
    v936 = vaddq_f64(*(float64x2_t *)(v6 + 4800), *(float64x2_t *)(v6 + 2176));
    v937 = vaddq_f64(*(float64x2_t *)(v6 + 4816), *(float64x2_t *)(v6 + 2192));
    v938 = vaddq_f64(*(float64x2_t *)(v6 + 4832), *(float64x2_t *)(v6 + 2208));
    v939 = vaddq_f64(*(float64x2_t *)(v6 + 4848), *(float64x2_t *)(v6 + 2224));
    v940 = vaddq_f64(*(float64x2_t *)(v6 + 4864), *(float64x2_t *)(v6 + 2240));
    v941 = vaddq_f64(*(float64x2_t *)(v6 + 4880), *(float64x2_t *)(v6 + 2256));
    v942 = vaddq_f64(*(float64x2_t *)(v6 + 4896), *(float64x2_t *)(v6 + 2272));
    v943 = vaddq_f64(*(float64x2_t *)(v6 + 4912), *(float64x2_t *)(v6 + 2288));
    v944 = vaddq_f64(*(float64x2_t *)(v6 + 4928), *(float64x2_t *)(v6 + 2304));
    v945 = vaddq_f64(*(float64x2_t *)(v6 + 4944), *(float64x2_t *)(v6 + 2320));
    v946 = vaddq_f64(*(float64x2_t *)(v6 + 4960), *(float64x2_t *)(v6 + 2336));
    v947 = vaddq_f64(*(float64x2_t *)(v6 + 4976), *(float64x2_t *)(v6 + 2352));
    v948 = vaddq_f64(*(float64x2_t *)(v6 + 4992), *(float64x2_t *)(v6 + 2368));
    v949 = vaddq_f64(*(float64x2_t *)(v6 + 5008), *(float64x2_t *)(v6 + 2384));
    v928 = vaddq_f64(*(float64x2_t *)(v6 + 5024), *(float64x2_t *)(v6 + 2400));
    v950 = vaddq_f64(*(float64x2_t *)(v6 + 5040), *(float64x2_t *)(v6 + 2416));
    v951 = vaddq_f64(*(float64x2_t *)(v6 + 5056), *(float64x2_t *)(v6 + 2432));
    v952 = vaddq_f64(*(float64x2_t *)(v6 + 5072), *(float64x2_t *)(v6 + 2448));
    v953 = vaddq_f64(*(float64x2_t *)(v6 + 5088), *(float64x2_t *)(v6 + 2464));
    v954 = vaddq_f64(*(float64x2_t *)(v6 + 5104), *(float64x2_t *)(v6 + 2480));
    v955 = vaddq_f64(*(float64x2_t *)(v6 + 5120), *(float64x2_t *)(v6 + 2496));
    v956 = vaddq_f64(*(float64x2_t *)(v6 + 5136), *(float64x2_t *)(v6 + 2512));
    v957 = vaddq_f64(*(float64x2_t *)(v6 + 5152), *(float64x2_t *)(v6 + 2528));
    v958 = vaddq_f64(*(float64x2_t *)(v6 + 5168), *(float64x2_t *)(v6 + 2544));
    v959 = vaddq_f64(*(float64x2_t *)(v6 + 5184), *(float64x2_t *)(v6 + 2560));
    v960 = vaddq_f64(*(float64x2_t *)(v6 + 5216), *(float64x2_t *)(v6 + 2592));
    *(float64x2_t *)(v6 + 5200) = vaddq_f64(*(float64x2_t *)(v6 + 5200), *(float64x2_t *)(v6 + 2576));
    *(float64x2_t *)(v6 + 5216) = v960;
    *(float64x2_t *)(v6 + 5168) = v958;
    *(float64x2_t *)(v6 + 5184) = v959;
    *(float64x2_t *)(v6 + 5136) = v956;
    *(float64x2_t *)(v6 + 5152) = v957;
    *(float64x2_t *)(v6 + 5104) = v954;
    *(float64x2_t *)(v6 + 5120) = v955;
    *(float64x2_t *)(v6 + 5072) = v952;
    *(float64x2_t *)(v6 + 5088) = v953;
    *(float64x2_t *)(v6 + 5040) = v950;
    *(float64x2_t *)(v6 + 5056) = v951;
    v929 = v1343;
    *(float64x2_t *)(v6 + 5008) = v949;
    *(float64x2_t *)(v6 + 5024) = v928;
    v928.f64[0] = v1485;
    *(float64x2_t *)(v6 + 4976) = v947;
    *(float64x2_t *)(v6 + 4992) = v948;
    *(float64x2_t *)(v6 + 4944) = v945;
    *(float64x2_t *)(v6 + 4960) = v946;
    *(float64x2_t *)(v6 + 4912) = v943;
    *(float64x2_t *)(v6 + 4928) = v944;
    *(float64x2_t *)(v6 + 4880) = v941;
    *(float64x2_t *)(v6 + 4896) = v942;
    *(float64x2_t *)(v6 + 4848) = v939;
    *(float64x2_t *)(v6 + 4864) = v940;
    *(float64x2_t *)(v6 + 4816) = v937;
    *(float64x2_t *)(v6 + 4832) = v938;
    *(float64x2_t *)(v6 + 4784) = v935;
    *(float64x2_t *)(v6 + 4800) = v936;
    v932 = v1340;
    *(float64x2_t *)(v6 + 4752) = v933;
    *(float64x2_t *)(v6 + 4768) = v934;
    v931 = v1346;
    *(float64x2_t *)(v6 + 4736) = v1298;
    *(float64x2_t *)(v6 + 4720) = v1301;
    *(float64x2_t *)(v6 + 4704) = v1304;
    *(float64x2_t *)(v6 + 4688) = v1306;
    *(float64x2_t *)(v6 + 4672) = v1309;
    *(float64x2_t *)(v6 + 4656) = v1312;
    *(float64x2_t *)(v6 + 4640) = v1315;
    *(float64x2_t *)(v6 + 4624) = v1317;
    *(float64x2_t *)(v6 + 4592) = vaddq_f64(v1332, v1330);
    *(float64x2_t *)(v6 + 4608) = v1320;
    *(_QWORD *)(v6 + 5232) = v1323;
  }
  *(_QWORD *)&v961.f64[0] = v1456.i64[0];
  *(_QWORD *)&v961.f64[1] = v1376;
  *(_QWORD *)&v993.f64[0] = v1562.i64[0];
  *(_QWORD *)&v993.f64[1] = v1356;
  *(_QWORD *)&v962.f64[0] = v1455.i64[0];
  *(_QWORD *)&v962.f64[1] = v1378;
  *(_QWORD *)&v963.f64[0] = v1558.i64[0];
  *(_QWORD *)&v963.f64[1] = v1359;
  *(_QWORD *)&v964.f64[0] = v1453.i64[0];
  *(_QWORD *)&v964.f64[1] = v1380;
  v965.f64[0] = v1623;
  *(_QWORD *)&v965.f64[1] = v1353;
  *(_QWORD *)&v966.f64[0] = v1454.i64[0];
  *(_QWORD *)&v966.f64[1] = v1382;
  v967.f64[0] = v1631;
  *(_QWORD *)&v967.f64[1] = v927;
  *(_QWORD *)&v968.f64[0] = v1457.i64[0];
  *(_QWORD *)&v968.f64[1] = v1384;
  *(_QWORD *)&v969.f64[0] = v1566.i64[0];
  *(_QWORD *)&v969.f64[1] = v1362;
  *(_QWORD *)&v970.f64[0] = v1458.i64[0];
  *(_QWORD *)&v970.f64[1] = v1386;
  *(_QWORD *)&v971.f64[0] = v1570.i64[0];
  *(_QWORD *)&v971.f64[1] = v1371;
  *(_QWORD *)&v972.f64[0] = v1459.i64[0];
  *(_QWORD *)&v972.f64[1] = v1388;
  v973.f64[0] = v1609;
  *(_QWORD *)&v973.f64[1] = v930;
  *(_QWORD *)&v974.f64[0] = v1460.i64[0];
  *(_QWORD *)&v974.f64[1] = v1390;
  v975.f64[0] = v1628;
  *(_QWORD *)&v975.f64[1] = v929;
  *(_QWORD *)&v976.f64[0] = v1461.i64[0];
  *(_QWORD *)&v976.f64[1] = v1392;
  v977.f64[0] = v1639;
  v977.f64[1] = v928.f64[0];
  *(_QWORD *)&v978.f64[0] = v1462.i64[0];
  *(_QWORD *)&v978.f64[1] = v1394;
  v979.f64[0] = v1647;
  *(_QWORD *)&v979.f64[1] = v1410;
  *(_QWORD *)&v980.f64[0] = v1463.i64[0];
  *(_QWORD *)&v980.f64[1] = v1396;
  v981.f64[0] = v1598;
  *(_QWORD *)&v981.f64[1] = v932;
  *(_QWORD *)&v982.f64[0] = v1464.i64[0];
  *(_QWORD *)&v982.f64[1] = v1398;
  v983.f64[0] = v1620;
  *(_QWORD *)&v983.f64[1] = v1368;
  *(_QWORD *)&v984.f64[0] = v1465.i64[0];
  *(_QWORD *)&v984.f64[1] = v1400;
  v985.f64[0] = v1636;
  *(_QWORD *)&v985.f64[1] = v931;
  *(_QWORD *)&v986.f64[0] = v1466.i64[0];
  *(_QWORD *)&v986.f64[1] = v1402;
  v987.f64[0] = v1644;
  *(_QWORD *)&v987.f64[1] = v1423;
  *(_QWORD *)&v988.f64[0] = v1714.i64[0];
  *(_QWORD *)&v988.f64[1] = v1404;
  v1715 = v988;
  v989.f64[0] = v1590;
  *(_QWORD *)&v989.f64[1] = v1365;
  *(_QWORD *)&v988.f64[0] = v1728.i64[0];
  *(_QWORD *)&v988.f64[1] = v1406;
  v1729 = v988;
  v990.f64[0] = v1612;
  *(_QWORD *)&v990.f64[1] = v1408;
  *(_QWORD *)&v988.f64[0] = v1737.i64[0];
  *(_QWORD *)&v988.f64[1] = v1416;
  v1738 = v988;
  *(_QWORD *)&v991.f64[0] = v1732;
  *(_QWORD *)&v991.f64[1] = v1418;
  v1733 = v991;
  *(_QWORD *)&v988.f64[0] = v1756.i64[0];
  *(_QWORD *)&v988.f64[1] = v1420;
  v1757 = v988;
  *(_QWORD *)&v991.f64[0] = v1791;
  *(_QWORD *)&v991.f64[1] = v1432;
  v1792 = v991;
  *(_QWORD *)&v988.f64[0] = v1682.i64[0];
  *(_QWORD *)&v988.f64[1] = v1509;
  v1683 = v988;
  *(_QWORD *)&v991.f64[0] = v1666;
  *(_QWORD *)&v991.f64[1] = v1374;
  *(_QWORD *)&v988.f64[0] = v1696.i64[0];
  *(_QWORD *)&v988.f64[1] = v1512;
  v1697 = v988;
  *(_QWORD *)&v988.f64[0] = v1688;
  *(_QWORD *)&v988.f64[1] = v1414;
  v1689 = v988;
  *(_QWORD *)&v988.f64[0] = v1706.i64[0];
  *(_QWORD *)&v988.f64[1] = v1518;
  v1707 = v988;
  *(_QWORD *)&v988.f64[0] = v1718;
  *(_QWORD *)&v988.f64[1] = v1430;
  v1719 = v988;
  *(_QWORD *)&v988.f64[0] = v1720.i64[0];
  *(_QWORD *)&v988.f64[1] = v1521;
  v1721 = v988;
  *(_QWORD *)&v988.f64[0] = v1772.i64[0];
  *(_QWORD *)&v988.f64[1] = v1440;
  v1773 = v988;
  *(_QWORD *)&v988.f64[0] = v1742.i64[0];
  *(_QWORD *)&v988.f64[1] = v1524;
  v1743 = v988;
  *(_QWORD *)&v988.f64[0] = v1662;
  *(_QWORD *)&v988.f64[1] = v1412;
  v1663 = v988;
  *(_QWORD *)&v988.f64[0] = v1763.i64[0];
  *(_QWORD *)&v988.f64[1] = v1527;
  v1764 = v988;
  *(_QWORD *)&v988.f64[0] = v1676;
  *(_QWORD *)&v988.f64[1] = v1428;
  v1677 = v988;
  *(_QWORD *)&v988.f64[0] = v1781.i64[0];
  *(_QWORD *)&v988.f64[1] = v1530;
  v1782 = v988;
  *(_QWORD *)&v988.f64[0] = v1704;
  *(_QWORD *)&v988.f64[1] = v1437;
  v1705 = v988;
  *(_QWORD *)&v988.f64[0] = v1801.i64[0];
  *(_QWORD *)&v988.f64[1] = v1536;
  v1802 = v988;
  *(_QWORD *)&v988.f64[0] = v1750;
  *(_QWORD *)&v988.f64[1] = v1448;
  v1751 = v988;
  *(_QWORD *)&v988.f64[0] = v1810.i64[0];
  *(_QWORD *)&v988.f64[1] = v1515;
  v1811 = v988;
  *(_QWORD *)&v988.f64[0] = v1658;
  *(_QWORD *)&v988.f64[1] = v1425;
  v1659 = v988;
  *(_QWORD *)&v988.f64[0] = v1817.i64[0];
  *(_QWORD *)&v988.f64[1] = v1533;
  v1818 = v988;
  *(_QWORD *)&v988.f64[0] = v1700;
  *(_QWORD *)&v988.f64[1] = v1446;
  v1701 = v988;
  *(_QWORD *)&v988.f64[0] = v1825.i64[0];
  *(_QWORD *)&v988.f64[1] = v1548;
  v1826 = v988;
  *(_QWORD *)&v988.f64[0] = v1680;
  *(_QWORD *)&v988.f64[1] = v1442;
  v1681 = v988;
  *(_QWORD *)&v988.f64[0] = v1832.i64[0];
  *(_QWORD *)&v988.f64[1] = v1554;
  v1833 = v988;
  *(_QWORD *)&v988.f64[0] = v1712;
  *(_QWORD *)&v988.f64[1] = v1573;
  v1713 = v988;
  *(_QWORD *)&v988.f64[0] = v1840.i64[0];
  *(_QWORD *)&v988.f64[1] = v1539;
  v1841 = v988;
  *(_QWORD *)&v988.f64[0] = v1652;
  *(_QWORD *)&v988.f64[1] = v1435;
  v1653 = v988;
  *(_QWORD *)&v988.f64[0] = v1848.i64[0];
  *(_QWORD *)&v988.f64[1] = v1542;
  v1849 = v988;
  *(_QWORD *)&v988.f64[0] = v1671;
  *(_QWORD *)&v988.f64[1] = v1444;
  v1672 = v988;
  *(_QWORD *)&v988.f64[0] = v1855.i64[0];
  *(_QWORD *)&v988.f64[1] = v1545;
  v1856 = v988;
  *(_QWORD *)&v988.f64[0] = v1694;
  *(_QWORD *)&v988.f64[1] = v1577;
  v1695 = v988;
  *(_QWORD *)&v988.f64[0] = v1859.i64[0];
  *(_QWORD *)&v988.f64[1] = v1551;
  v1860 = v988;
  v988.f64[0] = v1726;
  *(_QWORD *)&v988.f64[1] = v1582;
  v1727 = v988;
  v992 = vaddq_f64(v993, v961);
  v993.f64[1] = v1477.f64[1];
  *v439 = v992;
  *(_QWORD *)(v6 + 3952) = *(_OWORD *)&vaddq_f64(v1477, v1326);
  *(float64x2_t *)(v6 + 3960) = vaddq_f64(v963, v962);
  *(_QWORD *)(v6 + 3976) = *(_OWORD *)&vaddq_f64(v1475, v1325);
  *(float64x2_t *)(v6 + 3984) = vaddq_f64(v1481, v1321);
  *(float64x2_t *)(v6 + 4000) = vaddq_f64(v1479, v1324);
  *(float64x2_t *)(v6 + 4016) = vaddq_f64(v971, v970);
  *(float64x2_t *)(v6 + 4032) = vaddq_f64(v969, v968);
  *(float64x2_t *)(v6 + 4048) = vaddq_f64(v967, v966);
  *(float64x2_t *)(v6 + 4064) = vaddq_f64(v965, v964);
  *(_QWORD *)(v6 + 4080) = *(_OWORD *)&vaddq_f64(v1470, v1327);
  *(float64x2_t *)(v6 + 4088) = vaddq_f64(v979, v978);
  *(float64x2_t *)(v6 + 4104) = vaddq_f64(v977, v976);
  *(float64x2_t *)(v6 + 4120) = vaddq_f64(v975, v974);
  *(float64x2_t *)(v6 + 4136) = vaddq_f64(v973, v972);
  *(_QWORD *)(v6 + 4152) = *(_OWORD *)&vaddq_f64(v1452, v1333);
  *(float64x2_t *)(v6 + 4160) = vaddq_f64(v987, v986);
  *(float64x2_t *)(v6 + 4176) = vaddq_f64(v985, v984);
  *(float64x2_t *)(v6 + 4192) = vaddq_f64(v983, v982);
  *(float64x2_t *)(v6 + 4208) = vaddq_f64(v981, v980);
  *(_QWORD *)(v6 + 4224) = *(_OWORD *)&vaddq_f64(v1450, v1337);
  *v1482 = vaddq_f64(v1792, v1757);
  *(float64x2_t *)(v6 + 4248) = vaddq_f64(v1733, v1738);
  *(float64x2_t *)(v6 + 4264) = vaddq_f64(v990, v1729);
  *(float64x2_t *)(v6 + 4280) = vaddq_f64(v989, v1715);
  *(_QWORD *)(v6 + 4296) = *(_OWORD *)&vaddq_f64(v1615, v1341);
  *(float64x2_t *)(v6 + 4304) = vaddq_f64(v1773, v1721);
  *(float64x2_t *)(v6 + 4320) = vaddq_f64(v1719, v1707);
  *(float64x2_t *)(v6 + 4336) = vaddq_f64(v1689, v1697);
  *(float64x2_t *)(v6 + 4352) = vaddq_f64(v991, v1683);
  *(_QWORD *)(v6 + 4368) = *(_OWORD *)&vaddq_f64(v1604, v1344);
  *(float64x2_t *)(v6 + 4376) = vaddq_f64(v1751, v1802);
  *(float64x2_t *)(v6 + 4392) = vaddq_f64(v1705, v1782);
  *(float64x2_t *)(v6 + 4408) = vaddq_f64(v1677, v1764);
  *(float64x2_t *)(v6 + 4424) = vaddq_f64(v1663, v1743);
  *(_QWORD *)(v6 + 4440) = *(_OWORD *)&vaddq_f64(v1601, v1347);
  *(float64x2_t *)(v6 + 4464) = vaddq_f64(v1713, v1833);
  *(float64x2_t *)(v6 + 4480) = vaddq_f64(v1681, v1826);
  *(float64x2_t *)(v6 + 4448) = vaddq_f64(v1701, v1818);
  *(float64x2_t *)(v6 + 4496) = vaddq_f64(v1659, v1811);
  *(_QWORD *)(v6 + 4512) = *(_OWORD *)&vaddq_f64(v1593, v1348);
  *v1467 = vaddq_f64(v1727, v1860);
  *(float64x2_t *)(v6 + 4536) = vaddq_f64(v1695, v1856);
  *(float64x2_t *)(v6 + 4552) = vaddq_f64(v1672, v1849);
  *(float64x2_t *)(v6 + 4568) = vaddq_f64(v1653, v1841);
  *(_QWORD *)(v6 + 4584) = *(_OWORD *)&vaddq_f64(v1585, v1349);
  if (v534)
  {
    v993.f64[0] = *(float64_t *)(v6 + 5232);
    v978.f64[0] = *(float64_t *)(v6 + 3920);
    v1850 = *(_OWORD *)&vaddq_f64(v993, v978);
    v1834 = vaddq_f64(*(float64x2_t *)(v6 + 4624), *(float64x2_t *)(v6 + 3312));
    v1842 = vaddq_f64(*(float64x2_t *)(v6 + 4608), *(float64x2_t *)(v6 + 3296));
    v1827 = vaddq_f64(*(float64x2_t *)(v6 + 4640), *(float64x2_t *)(v6 + 3328));
    v1819 = vaddq_f64(*(float64x2_t *)(v6 + 4656), *(float64x2_t *)(v6 + 3344));
    v1812 = vaddq_f64(*(float64x2_t *)(v6 + 4672), *(float64x2_t *)(v6 + 3360));
    v1803 = vaddq_f64(*(float64x2_t *)(v6 + 4688), *(float64x2_t *)(v6 + 3376));
    v1793 = vaddq_f64(*(float64x2_t *)(v6 + 4704), *(float64x2_t *)(v6 + 3392));
    v1783 = vaddq_f64(*(float64x2_t *)(v6 + 4720), *(float64x2_t *)(v6 + 3408));
    v1774 = vaddq_f64(*(float64x2_t *)(v6 + 4736), *(float64x2_t *)(v6 + 3424));
    v994 = vaddq_f64(*(float64x2_t *)(v6 + 4752), *(float64x2_t *)(v6 + 3440));
    v995 = vaddq_f64(*(float64x2_t *)(v6 + 4768), *(float64x2_t *)(v6 + 3456));
    v996 = vaddq_f64(*(float64x2_t *)(v6 + 4784), *(float64x2_t *)(v6 + 3472));
    v997 = vaddq_f64(*(float64x2_t *)(v6 + 4800), *(float64x2_t *)(v6 + 3488));
    v998 = vaddq_f64(*(float64x2_t *)(v6 + 4816), *(float64x2_t *)(v6 + 3504));
    v999 = vaddq_f64(*(float64x2_t *)(v6 + 4832), *(float64x2_t *)(v6 + 3520));
    v1000 = vaddq_f64(*(float64x2_t *)(v6 + 4848), *(float64x2_t *)(v6 + 3536));
    v1001 = vaddq_f64(*(float64x2_t *)(v6 + 4864), *(float64x2_t *)(v6 + 3552));
    v1002 = vaddq_f64(*(float64x2_t *)(v6 + 4880), *(float64x2_t *)(v6 + 3568));
    v1003 = vaddq_f64(*(float64x2_t *)(v6 + 4896), *(float64x2_t *)(v6 + 3584));
    v1004 = vaddq_f64(*(float64x2_t *)(v6 + 4912), *(float64x2_t *)(v6 + 3600));
    v1005 = vaddq_f64(*(float64x2_t *)(v6 + 4928), *(float64x2_t *)(v6 + 3616));
    v1006 = vaddq_f64(*(float64x2_t *)(v6 + 4944), *(float64x2_t *)(v6 + 3632));
    v1007 = vaddq_f64(*(float64x2_t *)(v6 + 4960), *(float64x2_t *)(v6 + 3648));
    v1008 = vaddq_f64(*(float64x2_t *)(v6 + 4976), *(float64x2_t *)(v6 + 3664));
    v1009 = vaddq_f64(*(float64x2_t *)(v6 + 4992), *(float64x2_t *)(v6 + 3680));
    v1010 = vaddq_f64(*(float64x2_t *)(v6 + 5008), *(float64x2_t *)(v6 + 3696));
    v1011 = vaddq_f64(*(float64x2_t *)(v6 + 5024), *(float64x2_t *)(v6 + 3712));
    v978 = vaddq_f64(*(float64x2_t *)(v6 + 5040), *(float64x2_t *)(v6 + 3728));
    v1012 = vaddq_f64(*(float64x2_t *)(v6 + 5056), *(float64x2_t *)(v6 + 3744));
    v1013 = vaddq_f64(*(float64x2_t *)(v6 + 5072), *(float64x2_t *)(v6 + 3760));
    v1014 = vaddq_f64(*(float64x2_t *)(v6 + 5088), *(float64x2_t *)(v6 + 3776));
    v1015 = vaddq_f64(*(float64x2_t *)(v6 + 5104), *(float64x2_t *)(v6 + 3792));
    v1016 = vaddq_f64(*(float64x2_t *)(v6 + 5120), *(float64x2_t *)(v6 + 3808));
    v1017 = vaddq_f64(*(float64x2_t *)(v6 + 5136), *(float64x2_t *)(v6 + 3824));
    v1018 = vaddq_f64(*(float64x2_t *)(v6 + 5152), *(float64x2_t *)(v6 + 3840));
    v1019 = vaddq_f64(*(float64x2_t *)(v6 + 5168), *(float64x2_t *)(v6 + 3856));
    v1020 = vaddq_f64(*(float64x2_t *)(v6 + 5184), *(float64x2_t *)(v6 + 3872));
    v1021 = vaddq_f64(*(float64x2_t *)(v6 + 5216), *(float64x2_t *)(v6 + 3904));
    v1022 = vaddq_f64(*(float64x2_t *)(v6 + 4592), *(float64x2_t *)(v6 + 3280));
    *(float64x2_t *)(v6 + 5200) = vaddq_f64(*(float64x2_t *)(v6 + 5200), *(float64x2_t *)(v6 + 3888));
    *(float64x2_t *)(v6 + 5216) = v1021;
    *(float64x2_t *)(v6 + 5168) = v1019;
    *(float64x2_t *)(v6 + 5184) = v1020;
    *(float64x2_t *)(v6 + 5136) = v1017;
    *(float64x2_t *)(v6 + 5152) = v1018;
    *(float64x2_t *)(v6 + 5104) = v1015;
    *(float64x2_t *)(v6 + 5120) = v1016;
    *(float64x2_t *)(v6 + 5072) = v1013;
    *(float64x2_t *)(v6 + 5088) = v1014;
    *(float64x2_t *)(v6 + 5040) = v978;
    *(float64x2_t *)(v6 + 5056) = v1012;
    *(float64x2_t *)(v6 + 5008) = v1010;
    *(float64x2_t *)(v6 + 5024) = v1011;
    *(float64x2_t *)(v6 + 4976) = v1008;
    *(float64x2_t *)(v6 + 4992) = v1009;
    *(float64x2_t *)(v6 + 4944) = v1006;
    *(float64x2_t *)(v6 + 4960) = v1007;
    *(float64x2_t *)(v6 + 4912) = v1004;
    *(float64x2_t *)(v6 + 4928) = v1005;
    *(float64x2_t *)(v6 + 4880) = v1002;
    *(float64x2_t *)(v6 + 4896) = v1003;
    *(float64x2_t *)(v6 + 4848) = v1000;
    *(float64x2_t *)(v6 + 4864) = v1001;
    *(float64x2_t *)(v6 + 4816) = v998;
    *(float64x2_t *)(v6 + 4832) = v999;
    *(float64x2_t *)(v6 + 4784) = v996;
    *(float64x2_t *)(v6 + 4800) = v997;
    *(float64x2_t *)(v6 + 4752) = v994;
    *(float64x2_t *)(v6 + 4768) = v995;
    *(float64x2_t *)(v6 + 4736) = v1774;
    *(float64x2_t *)(v6 + 4720) = v1783;
    *(float64x2_t *)(v6 + 4704) = v1793;
    *(float64x2_t *)(v6 + 4688) = v1803;
    *(float64x2_t *)(v6 + 4672) = v1812;
    *(float64x2_t *)(v6 + 4656) = v1819;
    *(float64x2_t *)(v6 + 4640) = v1827;
    *(float64x2_t *)(v6 + 4624) = v1834;
    *(float64x2_t *)(v6 + 4592) = v1022;
    *(float64x2_t *)(v6 + 4608) = v1842;
    *(_QWORD *)(v6 + 5232) = v1850;
  }
  v1023 = *(_OWORD *)v1471;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1471 + 16);
  *(_OWORD *)v4 = v1023;
  v1024 = *(_OWORD *)v1486;
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(v1486 + 16);
  *v1488 = v1024;
  v1025 = v1487[1];
  *v1489 = *v1487;
  *(_OWORD *)(v4 + 64) = v1025;
  v1027 = *(_OWORD *)(v1490 + 32);
  v1026 = *(_OWORD *)(v1490 + 48);
  v1028 = *(_OWORD *)(v1490 + 16);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v1490 + 64);
  *(_OWORD *)(v4 + 112) = v1027;
  *(_OWORD *)(v4 + 128) = v1026;
  *(_OWORD *)(v4 + 96) = v1028;
  *v1473 = *(float64x2_t *)v1490;
  v1030 = *(_OWORD *)(v1491 + 32);
  v1029 = *(_OWORD *)(v1491 + 48);
  v1031 = *(_OWORD *)(v1491 + 16);
  *(_QWORD *)(v4 + 216) = *(_QWORD *)(v1491 + 64);
  *(_OWORD *)(v4 + 184) = v1030;
  *(_OWORD *)(v4 + 200) = v1029;
  *(_OWORD *)(v4 + 168) = v1031;
  *v1350 = *(float64x2_t *)v1491;
  *v1506 = *(float64x2_t *)v1492;
  v1032 = *(_OWORD *)(v1492 + 16);
  v1033 = *(_OWORD *)(v1492 + 32);
  v1034 = *(_OWORD *)(v1492 + 48);
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(v1492 + 64);
  *(_OWORD *)(v4 + 256) = v1033;
  *(_OWORD *)(v4 + 272) = v1034;
  *(_OWORD *)(v4 + 240) = v1032;
  *(_OWORD *)v13 = *(_OWORD *)v1504;
  v1035 = *(_OWORD *)(v1504 + 16);
  v1036 = *(_OWORD *)(v1504 + 32);
  v1037 = *(_OWORD *)(v1504 + 48);
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(v1504 + 64);
  *(_OWORD *)(v13 + 32) = v1036;
  *(_OWORD *)(v13 + 48) = v1037;
  *(_OWORD *)(v13 + 16) = v1035;
  *v1494 = *(_OWORD *)v1493;
  v1038 = *(_OWORD *)(v1493 + 16);
  v1039 = *(_OWORD *)(v1493 + 32);
  v1040 = *(_OWORD *)(v1493 + 48);
  *(_QWORD *)(v13 + 136) = *(_QWORD *)(v1493 + 64);
  *(_OWORD *)(v13 + 104) = v1039;
  *(_OWORD *)(v13 + 120) = v1040;
  *(_OWORD *)(v13 + 88) = v1038;
  *v1495 = *(_OWORD *)v1503;
  v1041 = *(_OWORD *)(v1503 + 16);
  v1042 = *(_OWORD *)(v1503 + 32);
  v1043 = *(_OWORD *)(v1503 + 48);
  *(_QWORD *)(v13 + 208) = *(_QWORD *)(v1503 + 64);
  *(_OWORD *)(v13 + 176) = v1042;
  *(_OWORD *)(v13 + 192) = v1043;
  *(_OWORD *)(v13 + 160) = v1041;
  *v1505 = *(_OWORD *)v1496;
  v1044 = *(_OWORD *)(v1496 + 16);
  v1045 = *(_OWORD *)(v1496 + 32);
  v1046 = *(_OWORD *)(v1496 + 48);
  *(_QWORD *)(v13 + 280) = *(_QWORD *)(v1496 + 64);
  *(_OWORD *)(v13 + 248) = v1045;
  *(_OWORD *)(v13 + 264) = v1046;
  *(_OWORD *)(v13 + 232) = v1044;
  *v1472 = *(float64x2_t *)v1502;
  v1047 = *(float64x2_t *)(v1502 + 16);
  v1048 = *(float64x2_t *)(v1502 + 32);
  v1049 = *(float64x2_t *)(v1502 + 48);
  v1472[4].f64[0] = *(float64_t *)(v1502 + 64);
  v1472[2] = v1048;
  v1472[3] = v1049;
  v1472[1] = v1047;
  result = memcpy(v111, __src, 0x288uLL);
  v1052 = *(_OWORD *)v1499;
  *(_QWORD *)(v4 + 1320) = *(_QWORD *)(v1499 + 16);
  *v1500 = v1052;
  v1053 = *(_QWORD *)(v1497 + 16);
  v1054 = *(float64x2_t *)v1497;
  *v1498 = *(_OWORD *)v1497;
  *(_QWORD *)(v4 + 1344) = v1053;
  v1054.f64[0] = *(float64_t *)(v4 + 16);
  _Q2.f64[0] = *(float64_t *)(v6 + 3952);
  v1056 = vaddq_f64(v1054, _Q2);
  *(float64x2_t *)v4 = vaddq_f64(*(float64x2_t *)v4, *v439);
  *(float64_t *)(v4 + 16) = v1056.f64[0];
  v1056.f64[0] = *(float64_t *)(v4 + 40);
  _Q2.f64[0] = *(float64_t *)(v6 + 3976);
  *(float64x2_t *)(v4 + 24) = vaddq_f64(*(float64x2_t *)(v4 + 24), *(float64x2_t *)(v6 + 3960));
  *(_QWORD *)(v4 + 40) = *(_OWORD *)&vaddq_f64(v1056, _Q2);
  _Q1 = vaddq_f64(*(float64x2_t *)(v4 + 64), *(float64x2_t *)(v6 + 4000));
  _Q0 = vaddq_f64(*(float64x2_t *)(v4 + 48), *(float64x2_t *)(v6 + 3984));
  _D3 = _Q0.f64[1];
  __asm { FMLA            D2, D3, V0.D[1] }
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0]);
  v1061 = vmulq_n_f64(_Q0, _Q2.f64[0]);
  *(float64x2_t *)(v4 + 48) = v1061;
  *(float64x2_t *)(v4 + 64) = vmulq_n_f64(_Q1, _Q2.f64[0]);
  if (!*v1862)
  {
    v1061.f64[0] = *(float64_t *)(v4 + 144);
    v1051.f64[0] = *(float64_t *)(v6 + 4080);
    v1061 = vaddq_f64(v1061, v1051);
    v1062 = vaddq_f64(*(float64x2_t *)(v4 + 128), *(float64x2_t *)(v6 + 4064));
    v1063 = vaddq_f64(*(float64x2_t *)(v4 + 112), *(float64x2_t *)(v6 + 4048));
    v1064 = vaddq_f64(*(float64x2_t *)(v4 + 96), *(float64x2_t *)(v6 + 4032));
    *v1473 = vaddq_f64(*v1473, *(float64x2_t *)(v6 + 4016));
    *(float64x2_t *)(v4 + 96) = v1064;
    *(float64x2_t *)(v4 + 112) = v1063;
    *(float64x2_t *)(v4 + 128) = v1062;
    *(float64_t *)(v4 + 144) = v1061.f64[0];
  }
  v1061.f64[0] = *(float64_t *)(v4 + 216);
  v1051.f64[0] = *(float64_t *)(v6 + 4152);
  v1065 = vaddq_f64(v1061, v1051);
  v1066 = vaddq_f64(*(float64x2_t *)(v4 + 200), *(float64x2_t *)(v6 + 4136));
  v1067 = vaddq_f64(*(float64x2_t *)(v4 + 184), *(float64x2_t *)(v6 + 4120));
  v1068 = vaddq_f64(*(float64x2_t *)(v4 + 168), *(float64x2_t *)(v6 + 4104));
  *v1350 = vaddq_f64(*v1350, *(float64x2_t *)(v6 + 4088));
  *(float64x2_t *)(v4 + 168) = v1068;
  *(float64x2_t *)(v4 + 184) = v1067;
  *(float64x2_t *)(v4 + 200) = v1066;
  *(float64_t *)(v4 + 216) = v1065.f64[0];
  v1065.f64[0] = *(float64_t *)(v4 + 288);
  v1051.f64[0] = *(float64_t *)(v6 + 4224);
  v1069 = vaddq_f64(v1065, v1051);
  v1070 = vaddq_f64(*(float64x2_t *)(v4 + 272), *(float64x2_t *)(v6 + 4208));
  v1071 = vaddq_f64(*(float64x2_t *)(v4 + 256), *(float64x2_t *)(v6 + 4192));
  v1072 = vaddq_f64(*(float64x2_t *)(v4 + 240), *(float64x2_t *)(v6 + 4176));
  *v1506 = vaddq_f64(*v1506, *(float64x2_t *)(v6 + 4160));
  *(float64x2_t *)(v4 + 240) = v1072;
  *(float64x2_t *)(v4 + 256) = v1071;
  *(float64x2_t *)(v4 + 272) = v1070;
  *(float64_t *)(v4 + 288) = v1069.f64[0];
  v1069.f64[0] = *(float64_t *)(v13 + 64);
  v1051.f64[0] = *(float64_t *)(v6 + 4296);
  v1073 = vaddq_f64(v1069, v1051);
  v1074 = vaddq_f64(*(float64x2_t *)(v13 + 48), *(float64x2_t *)(v6 + 4280));
  v1075 = vaddq_f64(*(float64x2_t *)(v13 + 32), *(float64x2_t *)(v6 + 4264));
  v1076 = vaddq_f64(*(float64x2_t *)(v13 + 16), *(float64x2_t *)(v6 + 4248));
  *(float64x2_t *)v13 = vaddq_f64(*(float64x2_t *)v13, *v1482);
  *(float64x2_t *)(v13 + 16) = v1076;
  *(float64x2_t *)(v13 + 32) = v1075;
  *(float64x2_t *)(v13 + 48) = v1074;
  *(float64_t *)(v13 + 64) = v1073.f64[0];
  v1073.f64[0] = *(float64_t *)(v13 + 136);
  v1051.f64[0] = *(float64_t *)(v6 + 4368);
  v1077 = vaddq_f64(v1073, v1051);
  v1078 = vaddq_f64(*(float64x2_t *)(v13 + 120), *(float64x2_t *)(v6 + 4352));
  v1079 = vaddq_f64(*(float64x2_t *)(v13 + 104), *(float64x2_t *)(v6 + 4336));
  v1080 = vaddq_f64(*(float64x2_t *)(v13 + 88), *(float64x2_t *)(v6 + 4320));
  *(float64x2_t *)(v13 + 72) = vaddq_f64(*(float64x2_t *)(v13 + 72), *(float64x2_t *)(v6 + 4304));
  *(float64x2_t *)(v13 + 88) = v1080;
  *(float64x2_t *)(v13 + 104) = v1079;
  *(float64x2_t *)(v13 + 120) = v1078;
  *(float64_t *)(v13 + 136) = v1077.f64[0];
  v1077.f64[0] = *(float64_t *)(v13 + 208);
  v1051.f64[0] = *(float64_t *)(v6 + 4440);
  v1081 = *(float64x2_t *)(v6 + 4376);
  v1082 = vaddq_f64(*(float64x2_t *)(v13 + 192), *(float64x2_t *)(v6 + 4424));
  v1083 = vaddq_f64(*(float64x2_t *)(v13 + 176), *(float64x2_t *)(v6 + 4408));
  v1084 = vaddq_f64(*(float64x2_t *)(v13 + 160), *(float64x2_t *)(v6 + 4392));
  v1085 = vaddq_f64(*(float64x2_t *)(v13 + 144), v1081);
  *(float64x2_t *)(v13 + 144) = v1085;
  *(float64x2_t *)(v13 + 160) = v1084;
  *(float64x2_t *)(v13 + 176) = v1083;
  *(float64x2_t *)(v13 + 192) = v1082;
  *(_QWORD *)(v13 + 208) = *(_OWORD *)&vaddq_f64(v1077, v1051);
  v1085.f64[0] = *(float64_t *)(v13 + 280);
  v1081.f64[0] = *(float64_t *)(v6 + 4512);
  v1086 = vaddq_f64(*(float64x2_t *)(v13 + 232), *(float64x2_t *)(v6 + 4464));
  v1087 = vaddq_f64(*(float64x2_t *)(v13 + 264), *(float64x2_t *)(v6 + 4496));
  v1088 = vaddq_f64(*(float64x2_t *)(v13 + 216), *(float64x2_t *)(v6 + 4448));
  *(float64x2_t *)(v13 + 248) = vaddq_f64(*(float64x2_t *)(v13 + 248), *(float64x2_t *)(v6 + 4480));
  *(float64x2_t *)(v13 + 264) = v1087;
  *(float64x2_t *)(v13 + 216) = v1088;
  *(float64x2_t *)(v13 + 232) = v1086;
  *(_QWORD *)(v13 + 280) = *(_OWORD *)&vaddq_f64(v1085, v1081);
  v1088.f64[0] = v1472[4].f64[0];
  v1086.f64[0] = *(float64_t *)(v6 + 4584);
  v1089 = *(float64x2_t *)(v6 + 4568);
  v1090 = vaddq_f64(*v1472, *v1467);
  v1091 = vaddq_f64(v1472[1], *(float64x2_t *)(v6 + 4536));
  v1092 = vaddq_f64(v1472[3], v1089);
  v1472[2] = vaddq_f64(v1472[2], *(float64x2_t *)(v6 + 4552));
  v1472[3] = v1092;
  *v1472 = v1090;
  v1472[1] = v1091;
  *(_QWORD *)&v1472[4].f64[0] = *(_OWORD *)&vaddq_f64(v1088, v1086);
  if (*(_BYTE *)(v6 + 5240))
  {
    v1089.f64[0] = v111[40].f64[0];
    v978.f64[0] = *(float64_t *)(v6 + 5232);
    *(_QWORD *)&v1861 = *(_OWORD *)&vaddq_f64(v1089, v978);
    v1857 = vaddq_f64(v111[1], *(float64x2_t *)(v6 + 4608));
    v1851 = vaddq_f64(v111[2], *(float64x2_t *)(v6 + 4624));
    v1843 = vaddq_f64(v111[3], *(float64x2_t *)(v6 + 4640));
    v1835 = vaddq_f64(v111[4], *(float64x2_t *)(v6 + 4656));
    v1828 = vaddq_f64(v111[5], *(float64x2_t *)(v6 + 4672));
    v1820 = vaddq_f64(v111[6], *(float64x2_t *)(v6 + 4688));
    v1813 = vaddq_f64(v111[7], *(float64x2_t *)(v6 + 4704));
    v1804 = vaddq_f64(v111[8], *(float64x2_t *)(v6 + 4720));
    v1794 = vaddq_f64(v111[9], *(float64x2_t *)(v6 + 4736));
    v1093 = vaddq_f64(v111[10], *(float64x2_t *)(v6 + 4752));
    v1094 = vaddq_f64(v111[11], *(float64x2_t *)(v6 + 4768));
    v1095 = vaddq_f64(v111[12], *(float64x2_t *)(v6 + 4784));
    v1096 = vaddq_f64(v111[13], *(float64x2_t *)(v6 + 4800));
    v1097 = vaddq_f64(v111[14], *(float64x2_t *)(v6 + 4816));
    v1098 = vaddq_f64(v111[15], *(float64x2_t *)(v6 + 4832));
    v1099 = vaddq_f64(v111[16], *(float64x2_t *)(v6 + 4848));
    v1100 = vaddq_f64(v111[17], *(float64x2_t *)(v6 + 4864));
    v1101 = vaddq_f64(v111[18], *(float64x2_t *)(v6 + 4880));
    v1102 = vaddq_f64(v111[19], *(float64x2_t *)(v6 + 4896));
    v1103 = vaddq_f64(v111[20], *(float64x2_t *)(v6 + 4912));
    v1104 = vaddq_f64(v111[21], *(float64x2_t *)(v6 + 4928));
    v1105 = vaddq_f64(v111[22], *(float64x2_t *)(v6 + 4944));
    v1106 = vaddq_f64(v111[23], *(float64x2_t *)(v6 + 4960));
    v1107 = vaddq_f64(v111[24], *(float64x2_t *)(v6 + 4976));
    v1108 = vaddq_f64(v111[25], *(float64x2_t *)(v6 + 4992));
    v1109 = vaddq_f64(v111[26], *(float64x2_t *)(v6 + 5008));
    v1110 = vaddq_f64(v111[27], *(float64x2_t *)(v6 + 5024));
    v1111 = vaddq_f64(v111[28], *(float64x2_t *)(v6 + 5040));
    v1112 = vaddq_f64(v111[29], *(float64x2_t *)(v6 + 5056));
    v1113 = vaddq_f64(v111[30], *(float64x2_t *)(v6 + 5072));
    v1114 = vaddq_f64(v111[31], *(float64x2_t *)(v6 + 5088));
    v1115 = vaddq_f64(v111[32], *(float64x2_t *)(v6 + 5104));
    v1116 = vaddq_f64(v111[33], *(float64x2_t *)(v6 + 5120));
    v1117 = vaddq_f64(v111[34], *(float64x2_t *)(v6 + 5136));
    v1118 = vaddq_f64(v111[35], *(float64x2_t *)(v6 + 5152));
    v1119 = vaddq_f64(v111[36], *(float64x2_t *)(v6 + 5168));
    v1120 = vaddq_f64(v111[37], *(float64x2_t *)(v6 + 5184));
    v1121 = vaddq_f64(v111[39], *(float64x2_t *)(v6 + 5216));
    v1122 = vaddq_f64(*v111, *(float64x2_t *)(v6 + 4592));
    v111[38] = vaddq_f64(v111[38], *(float64x2_t *)(v6 + 5200));
    v111[39] = v1121;
    v111[36] = v1119;
    v111[37] = v1120;
    v111[34] = v1117;
    v111[35] = v1118;
    v111[32] = v1115;
    v111[33] = v1116;
    v111[30] = v1113;
    v111[31] = v1114;
    v111[28] = v1111;
    v111[29] = v1112;
    v111[26] = v1109;
    v111[27] = v1110;
    v111[24] = v1107;
    v111[25] = v1108;
    v111[22] = v1105;
    v111[23] = v1106;
    v111[20] = v1103;
    v111[21] = v1104;
    v111[18] = v1101;
    v111[19] = v1102;
    v111[16] = v1099;
    v111[17] = v1100;
    v111[14] = v1097;
    v111[15] = v1098;
    v111[12] = v1095;
    v111[13] = v1096;
    v111[10] = v1093;
    v111[11] = v1094;
    v111[9] = v1794;
    v111[8] = v1804;
    v111[7] = v1813;
    v111[6] = v1820;
    v111[5] = v1828;
    v111[4] = v1835;
    v111[3] = v1843;
    v111[2] = v1851;
    *v111 = v1122;
    v111[1] = v1857;
    v111[40].f64[0] = v1861;
  }
  return result;
}

void sub_20F828414(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t **v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v39;
  float64_t v40;
  float64_t v41;
  float64_t v42;
  float64_t v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v63;
  unint64_t v65;
  double v66;
  double v67;
  double v69;
  __double2 v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  int8x16_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  int64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  unint64_t v88;
  float64x2_t v89;
  int8x16_t v90;
  float64x2_t v91;
  unint64_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  int8x16_t v95;
  float64x2_t v96;
  float64x2_t v97;
  unint64_t v98;
  float64x2_t v99;
  int8x16_t v100;
  unint64_t v104;
  float64x2_t v105;
  double v106;
  double v107;
  __double2 v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  unint64_t v130;
  float64x2_t v131;
  float64x2_t v132;
  unint64_t v133;
  float64x2_t v134;
  unint64_t v135;
  float64x2_t v136;
  unint64_t v137;
  unint64_t v138;
  float64x2_t v139;
  int8x16_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  float64x2_t v151;
  float64x2_t *v152;
  float64x2_t v153;
  float64x2_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float64x2_t v157;
  float64x2_t v158;
  int8x16_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int8x16_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  int64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  float64x2_t v188;
  double v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  unint64_t v198;
  __int128 v199;
  int64x2_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v211;
  int v212;
  BOOL v213;
  __int128 v238;
  float64x2_t v240;
  float64x2_t v284;
  float64x2_t v286;
  float64x2_t v288;
  float64x2_t v292;
  float64x2_t v294;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  double v354;
  double v355;
  double v356;
  double v357;
  float64x2_t v358;
  float64x2_t v359;
  double v360;
  double v361;
  float64x2_t v362;
  double v363;
  float64x2_t v364;
  double v365;
  float64x2_t v366;
  double v367;
  double v368;
  float64x2_t v369;
  float64x2_t v370;
  __int128 v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  double v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  double v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  double v408;
  float64x2_t v409;
  __int128 v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  float64x2_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  double v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  unint64_t v437;
  float64x2_t v438;
  float64_t v439;
  float64x2_t v440;
  unint64_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  unint64_t v453;
  float64x2_t v454;
  double v455;
  unint64_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  double v462;
  unint64_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  unint64_t v468;
  float64x2_t v469;
  float64x2_t v470;
  double v471;
  unint64_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64_t v481;
  float64x2_t v482;
  float64x2_t v483;
  double v484;
  float64x2_t v485;
  float64_t v486;
  float64_t v487;
  float64x2_t v488;
  float64_t v489;
  double v490;
  float64x2_t v491;
  float64_t v492;
  float64_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  double v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  double v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  double v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  uint64_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  double v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  double v524;
  float64x2_t v525;
  _BYTE v526[32];
  float64x2_t v527;
  double v528;
  float64x2_t v529;
  _BYTE v530[32];
  __int128 v531;
  float64_t v532;
  float64x2_t v533;
  _BYTE v534[32];
  float64x2_t v535;
  uint64_t v536;

  v14 = a3 + 296;
  v15 = *(float64x2_t **)(a1 + 16);
  v16 = *(float64x2_t ***)(a1 + 24);
  a6.f64[0] = v15[1].f64[0];
  a5.f64[0] = **(double **)a1 * a4.f64[0];
  v17 = **(float64x2_t ***)(a1 + 8);
  a8.f64[0] = v17[1].f64[0];
  v18 = vmlaq_f64(a8, a5, a6);
  a6.f64[0] = *(float64_t *)(a2 + 1344);
  v19 = vsubq_f64(v18, a6);
  v20 = vsubq_f64(vmlaq_n_f64(*v17, *v15, a5.f64[0]), *(float64x2_t *)(a2 + 1328));
  v21 = (float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
  v22 = *(float64x2_t **)(a1 + 32);
  a6.f64[0] = v22[1].f64[0];
  v18.f64[0] = (*v16)[1].f64[0];
  v23 = vmlaq_f64(v18, a5, a6);
  v24 = vmlaq_n_f64(**v16, *v22, a5.f64[0]);
  a5.f64[0] = *(float64_t *)(a2 + 1320);
  v25 = vsubq_f64(v23, a5);
  v26 = vsubq_f64(v24, *(float64x2_t *)(a2 + 1304));
  v27 = (float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
  v28 = *(float64x2_t *)(a2 + 24);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 40);
  *(float64x2_t *)a3 = v28;
  v28.f64[0] = *(float64_t *)(a2 + 64);
  v29 = *(double *)(a2 + 72);
  v30.f64[0] = v28.f64[0] * v19.f64[0] - vmuld_lane_f64(v29, v20, 1);
  a10.f64[0] = *(float64_t *)(a2 + 48);
  v24.f64[0] = *(float64_t *)(a2 + 56);
  a11.f64[0] = vmuld_lane_f64(v24.f64[0], v20, 1) - v28.f64[0] * v20.f64[0];
  v30.f64[1] = v29 * v20.f64[0] - v24.f64[0] * v19.f64[0];
  v31 = vaddq_f64(v30, v30);
  v32 = vaddq_f64(a11, a11);
  v33.f64[0] = v28.f64[0] * v32.f64[0] - vmuld_lane_f64(v29, v31, 1);
  v28.f64[0] = vmuld_lane_f64(v24.f64[0], v31, 1) - v28.f64[0] * v31.f64[0];
  v33.f64[1] = v29 * v31.f64[0] - v24.f64[0] * v32.f64[0];
  v44 = vaddq_f64(vmlaq_n_f64(v20, v31, a10.f64[0]), v33);
  *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(vmlaq_f64(v19, a10, v32), v28);
  *(float64x2_t *)(a3 + 24) = v44;
  *(double *)(a3 + 48) = *(double *)(a2 + 48) * 0.0
                       - *(double *)(a2 + 56) * v26.f64[0]
                       - vmuld_lane_f64(*(double *)(a2 + 64), v26, 1)
                       - *(double *)(a2 + 72) * v25.f64[0];
  *(double *)(a3 + 56) = *(double *)(a2 + 48) * v26.f64[0]
                       + *(double *)(a2 + 56) * 0.0
                       + *(double *)(a2 + 64) * v25.f64[0]
                       - vmuld_lane_f64(*(double *)(a2 + 72), v26, 1);
  *(double *)(a3 + 64) = vmuld_lane_f64(*(double *)(a2 + 48), v26, 1)
                       - *(double *)(a2 + 56) * v25.f64[0]
                       + *(double *)(a2 + 64) * 0.0
                       + *(double *)(a2 + 72) * v26.f64[0];
  *(double *)(a3 + 72) = *(double *)(a2 + 48) * v25.f64[0]
                       + vmuld_lane_f64(*(double *)(a2 + 56), v26, 1)
                       - *(double *)(a2 + 64) * v26.f64[0]
                       + *(double *)(a2 + 72) * 0.0;
  __asm { FMOV            V20.2D, #0.5 }
  v39 = vmulq_f64(*(float64x2_t *)(a3 + 64), _Q20);
  v50 = vmulq_f64(*(float64x2_t *)(a3 + 48), _Q20);
  *(float64x2_t *)(a3 + 48) = v50;
  *(float64x2_t *)(a3 + 64) = v39;
  v50.f64[0] = *(float64_t *)(a2 + 48);
  v39.f64[0] = *(float64_t *)(a2 + 56);
  v44.f64[0] = *(float64_t *)(a2 + 64);
  v32.f64[0] = *(float64_t *)(a2 + 72);
  v24.f64[0] = v50.f64[0] * v50.f64[0];
  v40 = -(v39.f64[0] * v50.f64[0]);
  v33.f64[0] = -(v44.f64[0] * v50.f64[0]);
  v50.f64[0] = -(v32.f64[0] * v50.f64[0]);
  v41 = v39.f64[0] * v39.f64[0];
  v42 = v39.f64[0] * v44.f64[0];
  v39.f64[0] = v39.f64[0] * v32.f64[0];
  v43 = v44.f64[0] * v44.f64[0];
  v44.f64[0] = v44.f64[0] * v32.f64[0];
  v45 = v32.f64[0] * v32.f64[0];
  v46 = v24.f64[0] + v41 - v43;
  v47 = v42 - v50.f64[0];
  v48 = v33.f64[0] + v39.f64[0] + v33.f64[0] + v39.f64[0];
  v50.f64[0] = v42 + v50.f64[0] + v42 + v50.f64[0];
  *(double *)v49.i64 = v48;
  v49.i64[1] = *(_QWORD *)&v50.f64[0];
  v50.f64[0] = v24.f64[0] - v41;
  _Q5.f64[0] = v24.f64[0] - v41 + v43 - v32.f64[0] * v32.f64[0];
  v489 = v48;
  *(_QWORD *)&v51.f64[0] = vextq_s8(v49, v49, 8uLL).u64[0];
  v492 = _Q5.f64[0];
  _Q5.f64[1] = v44.f64[0] - v40 + v44.f64[0] - v40;
  v486 = _Q5.f64[0];
  *(_QWORD *)&v53 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  v54 = v39.f64[0] - v33.f64[0];
  v55 = v40 + v44.f64[0];
  v56 = v50.f64[0] - v43;
  if (!**(_BYTE **)(a1 + 40))
  {
    if (**(_BYTE **)(a1 + 48))
    {
      v50.f64[0] = 1.0e-10;
      v460 = v50;
      a4.f64[0] = (a4.f64[0] + 1.0e-10) * **(double **)a1;
      v57 = *(float64x2_t **)(a1 + 32);
      v50.f64[0] = v57[1].f64[0];
      v58 = **(float64x2_t ***)(a1 + 24);
      v44.f64[0] = v58[1].f64[0];
      v59 = vmlaq_f64(v44, v50, a4);
      v60 = vmlaq_n_f64(*v58, *v57, a4.f64[0]);
      a4.f64[0] = *(float64_t *)(a2 + 1320);
      _Q0 = vsubq_f64(v59, a4);
      _Q1 = vsubq_f64(v60, *(float64x2_t *)(a2 + 1304));
      a10.f64[0] = **(float64_t **)(a1 + 56);
      v63 = vmulq_f64(_Q0, a10);
      _Q3 = vmulq_n_f64(_Q1, a10.f64[0]);
      v65 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      _Q1.f64[0] = vmuld_lane_f64(a10.f64[0], _Q1, 1);
      v66 = a10.f64[0] * _Q0.f64[0];
      __asm { FMLA            D0, D1, V3.D[1] }
      v67 = vmlad_n_f64(_Q0.f64[0], v66, v63.f64[0]);
      __asm { FMOV            V5.2D, #1.0 }
      v407 = v26;
      v399 = v27;
      v405 = v25;
      v480 = v19;
      v477 = v21;
      v475 = v20;
      v471 = v48;
      v462 = v46;
      v483 = _Q5;
      if (_NF ^ _VF | _ZF)
      {
        *(_QWORD *)&_Q3.f64[1] = v65;
        v98 = *(_OWORD *)&vmulq_f64(v63, _Q20);
        v99 = vmulq_f64(_Q3, _Q20);
        v100 = (int8x16_t)vnegq_f64(v99);
        v458 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v99, v100, 8uLL), (float64x2_t)0);
        v456 = vextq_s8((int8x16_t)v458, (int8x16_t)v458, 8uLL).u64[0];
        v93 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v99, 8uLL), (float64x2_t)xmmword_21030D320);
        v453 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
        v91 = vaddq_f64((float64x2_t)vextq_s8(v100, (int8x16_t)vnegq_f64((float64x2_t)v98), 8uLL), (float64x2_t)0);
        v92 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
        v89 = vaddq_f64((float64x2_t)0, _Q5);
        v87 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL), (float64x2_t)xmmword_21030D320);
        v88 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
      }
      else
      {
        v69 = sqrt(v67);
        v450 = _Q20;
        v446 = a10;
        v452 = _Q3;
        v458 = v63;
        v455 = *(double *)&v65;
        v70 = __sincos_stret(v69);
        v25 = v405;
        v27 = v399;
        v26 = v407;
        v71.f64[0] = (1.0 - v70.__cosval) / (v69 * v69);
        v72.f64[0] = v452.f64[0];
        v72.f64[1] = v455;
        v73 = vmulq_n_f64(v72, v71.f64[0]);
        *(_QWORD *)&v71.f64[0] = *(_OWORD *)&vmulq_f64(v458, v71);
        v74 = (int8x16_t)vnegq_f64(v73);
        v75.f64[0] = (v69 - v70.__sinval) / (v69 * (v69 * v69));
        v76 = vmulq_n_f64(v72, v75.f64[0]);
        v77 = vmulq_f64(v458, v75);
        v78 = vnegq_f64(v76);
        *(_QWORD *)&v79.f64[0] = *(_OWORD *)&vnegq_f64(v77);
        v79.f64[1] = v76.f64[1];
        v80.f64[0] = v458.f64[0];
        v80.f64[1] = v452.f64[0];
        v81 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v78, (int8x16_t)v76, 8uLL), v455);
        v82 = vmulq_f64(v80, v76);
        v83 = vmulq_n_f64(v72, v77.f64[0]);
        v84 = vmulq_n_f64(v79, v458.f64[0]);
        v85 = (int64x2_t)vmulq_f64(v72, v76);
        *(_QWORD *)&v77.f64[0] = *(_OWORD *)&vmulq_f64(v458, v77);
        v76.f64[0] = v81.f64[0];
        v76.f64[1] = v84.f64[0];
        *(_QWORD *)&v77.f64[1] = v85.i64[0];
        v86 = vsubq_f64(v76, v77);
        v84.f64[0] = v86.f64[1];
        v81.f64[0] = v86.f64[0];
        v87 = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v71.f64[0], (int8x16_t)*(unint64_t *)&v71.f64[0], 8uLL), (float64x2_t)xmmword_21030D320), v81);
        v88 = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
        v89 = vaddq_f64(vaddq_f64((float64x2_t)0, v483), vsubq_f64(vmulq_f64(v452, v78), (float64x2_t)vdupq_laneq_s64(v85, 1)));
        v90 = (int8x16_t)vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v73, v74, 8uLL), (float64x2_t)0), v83);
        a10 = v446;
        _Q20 = v450;
        *(_QWORD *)&v458.f64[0] = v90.i64[0];
        v456 = vextq_s8(v90, v90, 8uLL).u64[0];
        v91 = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8(v74, (int8x16_t)vnegq_f64((float64x2_t)*(unint64_t *)&v71.f64[0]), 8uLL), (float64x2_t)0), v82);
        v92 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
        v93 = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v71.f64[0], (int8x16_t)v73, 8uLL), (float64x2_t)xmmword_21030D320), v84);
        v453 = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      }
      _Q0.f64[0] = a10.f64[0];
      _Q0.f64[1] = a10.f64[0];
      _Q1.f64[0] = v26.f64[0];
      _Q1.f64[1] = v27.f64[0];
      _Q3 = vmulq_f64(_Q1, _Q0);
      v104 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      v105 = vmulq_f64(v25, a10);
      _Q1.f64[0] = v27.f64[0] * a10.f64[0];
      __asm { FMLA            D0, D1, V3.D[1] }
      v106 = vmlad_n_f64(_Q0.f64[0], v25.f64[0] * a10.f64[0], v105.f64[0]);
      if (v106 <= 1.0e-20)
      {
        *(_QWORD *)&_Q3.f64[1] = v104;
        v138 = *(_OWORD *)&vmulq_f64(v105, _Q20);
        v139 = vmulq_f64(_Q3, _Q20);
        v140 = (int8x16_t)vnegq_f64(v139);
        v141 = (float64x2_t)vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL);
        v132 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v139, v140, 8uLL), (float64x2_t)0);
        v133 = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
        v136 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v138, (int8x16_t)v139, 8uLL), (float64x2_t)xmmword_21030D320);
        v137 = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
        v134 = vaddq_f64((float64x2_t)vextq_s8(v140, (int8x16_t)vnegq_f64((float64x2_t)v138), 8uLL), (float64x2_t)0);
        v135 = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
        v131 = vaddq_f64((float64x2_t)0, v483);
        v129 = vaddq_f64(v141, (float64x2_t)xmmword_21030D320);
        v130 = vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u64[0];
      }
      else
      {
        v107 = sqrt(v106);
        v451 = v89;
        v447 = v91.f64[0];
        v444 = v87.f64[0];
        v441 = v92;
        v439 = v93.f64[0];
        v437 = v88;
        v433 = _Q3;
        v435 = v105;
        v432 = *(double *)&v104;
        v108 = __sincos_stret(v107);
        v88 = v437;
        v93.f64[0] = v439;
        v92 = v441;
        v87.f64[0] = v444;
        v89 = v451;
        v25 = v405;
        v27 = v399;
        v26 = v407;
        v109.f64[0] = (1.0 - v108.__cosval) / (v107 * v107);
        v110.f64[0] = v433.f64[0];
        v110.f64[1] = v432;
        v111 = vmulq_n_f64(v110, v109.f64[0]);
        *(_QWORD *)&v109.f64[0] = *(_OWORD *)&vmulq_f64(v435, v109);
        v112 = (int8x16_t)vnegq_f64(v111);
        v113 = (float64x2_t)vextq_s8((int8x16_t)v111, v112, 8uLL);
        v114 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v109.f64[0], (int8x16_t)v111, 8uLL), (float64x2_t)xmmword_21030D320);
        v115 = vaddq_f64((float64x2_t)vextq_s8(v112, (int8x16_t)vnegq_f64((float64x2_t)*(unint64_t *)&v109.f64[0]), 8uLL), (float64x2_t)0);
        v116 = vaddq_f64(v113, (float64x2_t)0);
        v117.f64[0] = (v107 - v108.__sinval) / (v107 * (v107 * v107));
        v118 = vmulq_n_f64(v110, v117.f64[0]);
        v119 = vmulq_f64(v435, v117);
        v120 = vnegq_f64(v118);
        *(_QWORD *)&v121.f64[0] = *(_OWORD *)&vnegq_f64(v119);
        v121.f64[1] = v118.f64[1];
        v122.f64[0] = v435.f64[0];
        v122.f64[1] = v433.f64[0];
        v123 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v120, (int8x16_t)v118, 8uLL), v432);
        v91 = vmulq_f64(v122, v118);
        v124 = vmulq_n_f64(v110, v119.f64[0]);
        v125 = vmulq_n_f64(v121, v435.f64[0]);
        v126 = (int64x2_t)vmulq_f64(v110, v118);
        *(_QWORD *)&v119.f64[0] = *(_OWORD *)&vmulq_f64(v435, v119);
        v118.f64[0] = v123.f64[0];
        v118.f64[1] = v125.f64[0];
        *(_QWORD *)&v119.f64[1] = v126.i64[0];
        v127 = vsubq_f64(v118, v119);
        v123.f64[0] = v127.f64[0];
        v128 = vsubq_f64(vmulq_f64(v433, v120), (float64x2_t)vdupq_laneq_s64(v126, 1));
        v125.f64[0] = v127.f64[1];
        v129 = vaddq_f64(vaddq_f64((float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v109.f64[0], (int8x16_t)*(unint64_t *)&v109.f64[0], 8uLL), (float64x2_t)xmmword_21030D320), v123);
        v130 = vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u64[0];
        v131 = vaddq_f64(vaddq_f64((float64x2_t)0, v483), v128);
        v132 = vaddq_f64(v116, v124);
        v133 = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
        v134 = vaddq_f64(v115, v91);
        v91.f64[0] = v447;
        v135 = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
        v136 = vaddq_f64(v114, v125);
        v137 = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
      }
      v19 = v480;
      v21 = v477;
      v20 = v475;
      v48 = v471;
      v46 = v462;
      *(_QWORD *)&v132.f64[1] = v133;
      v142.f64[0] = v458.f64[0];
      *(_QWORD *)&v142.f64[1] = v456;
      v143 = vsubq_f64(v142, v132);
      *(_QWORD *)&v136.f64[1] = v137;
      *(_QWORD *)&v93.f64[1] = v453;
      *(_QWORD *)&v129.f64[1] = v130;
      *(_QWORD *)&v87.f64[1] = v88;
      v144 = vsubq_f64(v93, v136);
      v145 = vsubq_f64(v87, v129);
      *(_QWORD *)&v134.f64[1] = v135;
      *(_QWORD *)&v91.f64[1] = v92;
      v146 = vsubq_f64(v91, v134);
      v147.f64[0] = v145.f64[0];
      v147.f64[1] = v146.f64[1];
      v146.f64[1] = v144.f64[1];
      v144.f64[1] = v143.f64[1];
      v143.f64[1] = v145.f64[1];
      v148 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      _Q5 = vdivq_f64(v143, v148);
      *(_QWORD *)(a3 + 144) = *(_OWORD *)&vdivq_f64(vsubq_f64(v89, v131), v460);
      a4 = vdivq_f64(v147, v148);
      *(float64x2_t *)(a3 + 112) = vdivq_f64(v144, v148);
      *(float64x2_t *)(a3 + 128) = vdivq_f64(v146, v148);
      *(float64x2_t *)(a3 + 80) = a4;
      *(float64x2_t *)(a3 + 96) = _Q5;
    }
    else
    {
      v94 = *(float64x2_t **)(a1 + 32);
      v50.f64[0] = v94[1].f64[0];
      v95 = (int8x16_t)vnegq_f64(*v94);
      v96 = (float64x2_t)vextq_s8((int8x16_t)v50, *(int8x16_t *)v94, 8uLL);
      __asm { FMOV            V5.2D, #-0.5 }
      v97 = vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)v94, v95, 8uLL), _Q5);
      *(_QWORD *)(a3 + 144) = *(_OWORD *)&vmulq_f64((float64x2_t)0, _Q5);
      *(float64x2_t *)(a3 + 112) = vmulq_f64(v96, _Q5);
      *(float64x2_t *)(a3 + 128) = v97;
      a4 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), _Q5);
      *(float64x2_t *)(a3 + 80) = a4;
      *(float64x2_t *)(a3 + 96) = vmulq_f64((float64x2_t)vextq_s8(v95, (int8x16_t)vnegq_f64(v50), 8uLL), _Q5);
    }
  }
  v149.f64[0] = v46 - v45;
  v150 = v47 + v47;
  v151.f64[0] = v54 + v54;
  a4.f64[0] = v56 + v45;
  if (**(_BYTE **)(a1 + 40))
    v152 = *(float64x2_t **)(a1 + 64);
  else
    v152 = (float64x2_t *)(a2 + 80);
  v153.f64[0] = v489;
  v154.f64[0] = v486;
  _Q5.f64[0] = *(float64_t *)(a2 + 216);
  v155 = *(int8x16_t *)(a2 + 152);
  v156 = *(int8x16_t *)(a2 + 184);
  v157 = *(float64x2_t *)(a2 + 200);
  v158 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v157.f64[0], 0);
  v158.f64[0] = _Q5.f64[0];
  v159 = *(int8x16_t *)(a2 + 168);
  v160 = (float64x2_t)vextq_s8(v159, v156, 8uLL);
  v161.f64[1] = *(float64_t *)(a2 + 176);
  v162.f64[0] = *(float64_t *)(a2 + 168);
  v162.f64[1] = *(float64_t *)(a2 + 152);
  v163 = (float64x2_t)vextq_s8(v155, v159, 8uLL);
  v164.f64[0] = v26.f64[0];
  v164.f64[1] = v27.f64[0];
  v165 = (float64x2_t)vzip2q_s64((int64x2_t)v155, (int64x2_t)v156);
  v166.f64[0] = v27.f64[0];
  v166.f64[1] = v25.f64[0];
  v167.f64[0] = v25.f64[0];
  v167.f64[1] = v26.f64[0];
  v161.f64[0] = *(float64_t *)(a2 + 192);
  v168 = (float64x2_t)vzip1q_s64((int64x2_t)v155, (int64x2_t)v156);
  v169 = vmulq_f64(v167, v163);
  v170 = vmulq_f64(v164, v161);
  v171 = vsubq_f64(vmulq_f64(v167, (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v157, 1), (int64x2_t)_Q5)), vmulq_f64(v166, v158));
  v172 = vsubq_f64(v170, vmulq_f64(v167, v160));
  v170.f64[0] = v152[4].f64[0];
  v173 = vsubq_f64(vsubq_f64(v169, vmulq_f64(v166, v162)), *v152);
  v174 = vsubq_f64(vsubq_f64(vmulq_f64(v166, v168), vmulq_f64(v164, v165)), v152[1]);
  v175 = vsubq_f64(v172, v152[2]);
  v176 = vsubq_f64(v171, v152[3]);
  *(_QWORD *)(a3 + 216) = *(_OWORD *)&vsubq_f64(vsubq_f64(vmulq_f64(v27, v157), vmulq_laneq_f64(v26, v157, 1)), v170);
  *(float64x2_t *)(a3 + 200) = v176;
  *(float64x2_t *)(a3 + 184) = v175;
  *(float64x2_t *)(a3 + 168) = v174;
  *(float64x2_t *)(a3 + 152) = v173;
  v176.f64[0] = v151.f64[0];
  v176.f64[1] = v55 + v55;
  v177 = (int8x16_t)vnegq_f64(v176);
  v154.f64[1] = v53;
  v178 = vnegq_f64(v154);
  v153.f64[1] = v51.f64[0];
  v179 = vnegq_f64(v153);
  v175.f64[0] = v149.f64[0];
  v175.f64[1] = v150;
  v180 = vnegq_f64(v175);
  v181 = (int64x2_t)vnegq_f64(a4);
  *(float64x2_t *)(a3 + 224) = v180;
  *(float64x2_t *)(a3 + 240) = v179;
  *(float64x2_t *)(a3 + 256) = v178;
  *(int8x16_t *)(a3 + 272) = v177;
  *(_QWORD *)(a3 + 288) = v181.i64[0];
  v182 = (float64x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v178, 8uLL);
  v183 = (float64x2_t)vextq_s8((int8x16_t)v178, v177, 8uLL);
  v184 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v177, 1), v181);
  v185 = (float64x2_t)vextq_s8((int8x16_t)v180, (int8x16_t)v179, 8uLL);
  v186 = vmlaq_n_f64(vmulq_n_f64(v176, v21.f64[0]), v182, v19.f64[0]);
  *(_QWORD *)&v187 = *(_OWORD *)&vmlaq_f64(vmulq_f64(v21, a4), v19, v183);
  v188 = vmlsq_lane_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v183, (int8x16_t)v184, 8uLL), v20.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v180.f64[0], 0), (int8x16_t)v185, 8uLL), v19.f64[0], 0);
  *(_QWORD *)&v189 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v20, v184, 1), v19, v185, 1);
  *(_QWORD *)&v190 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v21, v179), v20, v178, 1);
  v191 = vmlsq_lane_f64(vmulq_n_f64(v180, v21.f64[0]), v182, v20.f64[0], 0);
  v176.f64[0] = *(float64_t *)(a2 + 168);
  v192 = *(float64x2_t *)(a2 + 152);
  v178.f64[0] = *(float64_t *)(a2 + 192);
  v193 = *(float64x2_t *)(a2 + 176);
  v180.f64[0] = *(float64_t *)(a2 + 216);
  v194 = *(float64x2_t *)(a2 + 200);
  v195 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v192.f64[0]), v188, v192, 1), v191, v176.f64[0]);
  v183.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v187, v192.f64[0]), *(double *)(a2 + 160), v189), v176.f64[0], v190);
  v196 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v193.f64[0]), v188, v193, 1), v191, v178.f64[0]);
  v192.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v187, v193.f64[0]), *(double *)(a2 + 184), v189), v178.f64[0], v190);
  v193.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v187, v194.f64[0]), *(double *)(a2 + 208), v189), v180.f64[0], v190);
  *(float64x2_t *)v14 = v195;
  *(float64_t *)(v14 + 16) = v183.f64[0];
  *(float64x2_t *)(v14 + 24) = v196;
  *(float64_t *)(v14 + 40) = v192.f64[0];
  *(float64x2_t *)(v14 + 48) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v194.f64[0]), v188, v194, 1), v191, v180.f64[0]);
  *(float64_t *)(v14 + 64) = v193.f64[0];
  v149.f64[1] = v150;
  v51.f64[1] = v492;
  v151.f64[1] = v55 + v55;
  v197 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v149, v20.f64[0]), v51, v21.f64[0]), v151, v19.f64[0]);
  *(double *)&v198 = v48 * v20.f64[0] + v53 * v21.f64[0] + a4.f64[0] * v19.f64[0];
  *(_QWORD *)&v199 = 0;
  *((_QWORD *)&v199 + 1) = *(_OWORD *)&vnegq_f64((float64x2_t)v198);
  v200 = (int64x2_t)vnegq_f64(v197);
  *(_OWORD *)(v14 + 72) = v199;
  *(float64_t *)(v14 + 88) = v197.f64[1];
  *(_OWORD *)(v14 + 96) = v198;
  *(_QWORD *)(v14 + 112) = v200.i64[0];
  *(int64x2_t *)(v14 + 120) = vzip1q_s64(vdupq_laneq_s64(v200, 1), (int64x2_t)v197);
  *(_QWORD *)(v14 + 136) = 0;
  *(_OWORD *)(a3 + 440) = *(_OWORD *)(a2 + 224);
  v201 = *(_OWORD *)(a2 + 240);
  v202 = *(_OWORD *)(a2 + 256);
  v203 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a3 + 504) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a3 + 472) = v202;
  *(_OWORD *)(a3 + 488) = v203;
  *(_OWORD *)(a3 + 456) = v201;
  v205 = *(_OWORD *)(a2 + 328);
  v204 = *(_OWORD *)(a2 + 344);
  v206 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a3 + 576) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a3 + 544) = v205;
  *(_OWORD *)(a3 + 560) = v204;
  *(_OWORD *)(a3 + 528) = v206;
  *(_OWORD *)(a3 + 512) = *(_OWORD *)(a2 + 296);
  v208 = *(_OWORD *)(a2 + 400);
  v207 = *(_OWORD *)(a2 + 416);
  v209 = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a3 + 648) = *(_QWORD *)(a2 + 432);
  *(_OWORD *)(a3 + 616) = v208;
  *(_OWORD *)(a3 + 632) = v207;
  *(_OWORD *)(a3 + 600) = v209;
  *(_OWORD *)(a3 + 584) = *(_OWORD *)(a2 + 368);
  if (**(double **)(a1 + 72) <= 0.0 || **(double **)(a1 + 80) <= 0.0)
  {
    *(_BYTE *)(a3 + 1304) = 0;
  }
  else
  {
    v484 = v189;
    v490 = v190;
    v367 = **(double **)(a1 + 80);
    v368 = **(double **)(a1 + 72);
    v406 = v25;
    v400 = v27.f64[0];
    v478 = v26.f64[1];
    v408 = v26.f64[0];
    v481 = v186.f64[0];
    v463 = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u64[0];
    v487 = v188.f64[0];
    v468 = vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL).u64[0];
    v493 = v191.f64[0];
    v472 = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
    bzero(&v495, 0x288uLL);
    v211 = 0;
    v212 = 0;
    do
    {
      v510.f64[v211] = 0.0;
      v213 = v212 < 2;
      if (v212 < 2)
        ++v212;
      else
        v212 = 0;
      if (v213)
        ++v211;
      else
        v211 += 7;
    }
    while (v211 != 27);
    *(_BYTE *)(a3 + 1304) = 1;
    _Q26 = *(float64x2_t *)(a2 + 656);
    *(double *)&_Q0 = v504;
    __asm { FMLA            D4, D0, V26.D[1] }
    _D30 = v504;
    *(_QWORD *)&_Q0 = v514;
    v438 = *(float64x2_t *)(a2 + 672);
    __asm { FMLA            D4, D0, V2.D[1] }
    _Q2 = _Q0;
    v515.f64[1] = 1.0;
    _Q14 = *(float64x2_t *)(a2 + 688);
    _Q5 = *(float64x2_t *)(a2 + 704);
    v521.f64[0] = 1.0;
    _D0 = v524;
    __asm { FMLA            D4, D0, V14.D[1] }
    _D1 = v524;
    v411 = _Q5;
    v465 = *(float64x2_t *)(a2 + 728);
    __asm { FMLA            D7, D30, V4.D[1] }
    v434 = *(float64x2_t *)(a2 + 744);
    __asm { FMLA            D7, D2, V4.D[1] }
    _Q8 = *(float64x2_t *)(a2 + 760);
    __asm { FMLA            D7, D1, V8.D[1] }
    _Q5.f64[0] = v524;
    v431 = *(float64x2_t *)(a2 + 776);
    *(double *)&v526[24] = v187;
    *(float64_t *)&_Q4 = v481;
    *((_QWORD *)&_Q4 + 1) = v463;
    _Q23 = *(float64x2_t *)(a2 + 800);
    _Q21 = *(float64x2_t *)(a2 + 816);
    __asm
    {
      FMLA            D0, D30, V23.D[1]
      FMLA            D0, D2, V21.D[1]
    }
    *(_OWORD *)&v526[8] = _Q4;
    *(double *)&v530[24] = v484;
    _Q9 = *(float64x2_t *)(a2 + 832);
    __asm { FMLA            D0, D5, V9.D[1] }
    v369 = *(float64x2_t *)(a2 + 848);
    *(float64_t *)&_Q0 = v487;
    *((_QWORD *)&_Q0 + 1) = v468;
    *(_OWORD *)&v530[8] = _Q0;
    _Q29 = *(float64x2_t *)(a2 + 872);
    __asm { FMLA            D27, D30, V29.D[1] }
    *(double *)&v534[24] = v490;
    *(float64_t *)&v238 = v493;
    *((_QWORD *)&v238 + 1) = v472;
    _Q7.f64[0] = v408;
    _Q7.f64[1] = v478;
    *(_OWORD *)&v534[8] = v238;
    v240.f64[0] = 0.0;
    *(_QWORD *)&v240.f64[1] = *(_OWORD *)&vnegq_f64((float64x2_t)*(unint64_t *)&v406.f64[0]);
    *(float64_t *)&_Q0 = _Q5.f64[1];
    __asm { FMLS            D18, D0, V7.D[0] }
    v357 = _D18;
    *(float64_t *)&_Q0 = v431.f64[1];
    __asm { FMLS            D24, D0, V7.D[0] }
    v381 = _D24;
    *(float64_t *)&_Q0 = v369.f64[1];
    __asm { FMLS            D4, D0, V7.D[0] }
    v361 = *(double *)&_Q4;
    _Q31 = *(float64x2_t *)(a2 + 888);
    __asm { FMLA            D27, D2, V31.D[1] }
    _Q12 = *(float64x2_t *)(a2 + 904);
    __asm { FMLA            D27, D5, V12.D[1] }
    v442 = *(float64x2_t *)(a2 + 920);
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 928);
    __asm { FMLS            D27, D0, V7.D[0] }
    v365 = _D27;
    _Q24 = *(float64x2_t *)(a2 + 944);
    _Q15 = *(float64x2_t *)(a2 + 960);
    _D16 = v504;
    __asm
    {
      FMLA            D13, D16, V24.D[1]
      FMLA            D13, D2, V15.D[1]
    }
    v494 = *(float64x2_t *)(a2 + 976);
    __asm { FMLA            D13, D5, V0.D[1] }
    _D3 = v524;
    v491 = *(float64x2_t *)(a2 + 992);
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 1000);
    __asm { FMLS            D13, D0, V7.D[0] }
    v363 = _D13;
    _Q13 = *(float64x2_t *)(a2 + 1016);
    __asm { FMLA            D1, D16, V13.D[1] }
    v469 = *(float64x2_t *)(a2 + 1032);
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q18 = *(float64x2_t *)(a2 + 1048);
    __asm { FMLA            D1, D3, V18.D[1] }
    v440 = *(float64x2_t *)(a2 + 1064);
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 1072);
    __asm { FMLS            D1, D0, V7.D[0] }
    v360 = _D1;
    _Q17 = *(float64x2_t *)(a2 + 1088);
    __asm { FMLA            D1, D16, V17.D[1] }
    _D19 = v504;
    _Q6 = *(float64x2_t *)(a2 + 1104);
    _Q16 = *(float64x2_t *)(a2 + 1120);
    __asm { FMLA            D1, D2, V6.D[1] }
    *(_QWORD *)&_Q5.f64[0] = _Q2;
    __asm { FMLA            D1, D3, V16.D[1] }
    v485 = *(float64x2_t *)(a2 + 1136);
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 1144);
    __asm { FMLS            D1, D0, V7.D[0] }
    v356 = _D1;
    _Q10 = *(float64x2_t *)(a2 + 1160);
    __asm { FMLA            D1, D19, V10.D[1] }
    _D25 = v504;
    _Q19 = *(float64x2_t *)(a2 + 1176);
    _Q30 = *(float64x2_t *)(a2 + 1192);
    v371 = _Q2;
    v372 = _Q7;
    __asm { FMLA            D1, D5, V19.D[1] }
    *(double *)&_Q4 = v524;
    __asm { FMLA            D1, D4, V30.D[1] }
    v488 = *(float64x2_t *)(a2 + 1208);
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 1216);
    __asm { FMLS            D1, D0, V7.D[0] }
    v355 = _D1;
    _Q28 = *(float64x2_t *)(a2 + 1232);
    _Q1 = *(float64x2_t *)(a2 + 1248);
    __asm
    {
      FMLA            D2, D25, V28.D[1]
      FMLA            D2, D5, V1.D[1]
    }
    _Q3 = *(float64x2_t *)(a2 + 1264);
    __asm { FMLA            D2, D4, V3.D[1] }
    *(_QWORD *)&_Q0 = *(_QWORD *)(a2 + 1288);
    v482 = *(float64x2_t *)(a2 + 1280);
    __asm { FMLS            D2, D0, V7.D[0] }
    v354 = *(double *)&_Q2;
    v527 = v240;
    v413 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q26.f64[0]), v503, _Q26, 1), v508, v438.f64[0]), v513, v438, 1), v518, _Q14.f64[0]), v523, _Q14, 1), v240, v411.f64[0]);
    v418 = _Q8;
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, v465.f64[0]), v503, v465, 1), v508, v434.f64[0]), v513, v434, 1), v518, _Q8.f64[0]), v523, _Q8, 1), v240, v431.f64[0]);
    v401 = _Q21;
    v409 = _Q9;
    v396 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q23.f64[0]), v503, _Q23, 1), v508, _Q21.f64[0]), v513, _Q21, 1), v518, _Q9.f64[0]), v523, _Q9, 1), v240, v369.f64[0]);
    v473 = _Q12;
    v346 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q29.f64[0]), v503, _Q29, 1), v508, _Q31.f64[0]), v513, _Q31, 1), v518, _Q12.f64[0]), v523, _Q12, 1), v240, v442.f64[0]);
    v348 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q24.f64[0]), v503, _Q24, 1), v508, _Q15.f64[0]), v513, _Q15, 1), v518, v494.f64[0]), v523, v494, 1), v240, v491.f64[0]);
    v448 = _Q18;
    v350 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q13.f64[0]), v503, _Q13, 1), v508, v469.f64[0]), v513, v469, 1), v518, _Q18.f64[0]), v523, _Q18, 1), v240, v440.f64[0]);
    v351 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q17.f64[0]), v503, _Q17, 1), v508, _Q6.f64[0]), v513, _Q6, 1), v518, _Q16.f64[0]), v523, _Q16, 1), v240, v485.f64[0]);
    v459 = _Q10;
    v457 = _Q19;
    v479 = _Q30;
    v352 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q10.f64[0]), v503, _Q10, 1), v508, _Q19.f64[0]), v513, _Q19, 1), v518, _Q30.f64[0]), v523, _Q30, 1), v240, v488.f64[0]);
    v454 = _Q28;
    v445 = _Q1;
    v476 = _Q3;
    v353 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, _Q28.f64[0]), v503, _Q28, 1), v508, _Q1.f64[0]), v513, _Q1, 1), v518, _Q3.f64[0]), v523, _Q3, 1), v240, v482.f64[0]);
    v335 = _Q23;
    v338 = _Q29;
    v425 = _Q24;
    v404 = _Q13;
    v436 = _Q17;
    v344 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q26, v498, 1), v465, v503, 1), _Q23, v508, 1), _Q29, v513, 1), _Q24, v518, 1), _Q13, v523, 1), _Q17, v240, 1);
    v424 = _Q31;
    v403 = _Q15;
    v461 = _Q6;
    v343 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v438, v498, 1), v434, v503, 1), _Q21, v508, 1), _Q31, v513, 1), _Q15, v518, 1), v469, v523, 1), _Q6, v240, 1);
    v464 = _Q16;
    v342 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q14, v498, 1), _Q8, v503, 1), _Q9, v508, 1), _Q12, v513, 1), v494, v518, 1), _Q18, v523, 1), _Q16, v240, 1);
    v341 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v411, v498, 1), v431, v503, 1), v369, v508, 1), v442, v513, 1), v491, v518, 1), v440, v523, 1), v485, v240, 1);
    v428 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q26, v498.f64[0]), v465, v503.f64[0]), _Q23, v508.f64[0]), _Q29, v513.f64[0]), _Q24, v518.f64[0]), _Q13, v523.f64[0]), (float64x2_t)0, _Q17);
    v390 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v438, v498.f64[0]), v434, v503.f64[0]), _Q21, v508.f64[0]), _Q31, v513.f64[0]), _Q15, v518.f64[0]), v469, v523.f64[0]), (float64x2_t)0, _Q6);
    _Q17.f64[1] = v503.f64[1];
    v388 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v411, v498.f64[0]), v431, v503.f64[0]), v369, v508.f64[0]), v442, v513.f64[0]), v491, v518.f64[0]), v440, v523.f64[0]), (float64x2_t)0, v485);
    _Q31.f64[0] = *(float64_t *)(a2 + 720);
    _D27 = *(double *)(a2 + 792);
    __asm { FMLA            D0, D27, V17.D[1] }
    _Q11 = vmlaq_n_f64(vmulq_n_f64(_Q26, v495.f64[0]), v465, v500.f64[0]);
    _Q29.f64[1] = v496.f64[1];
    _Q6.f64[1] = v502.f64[1];
    v510.f64[0] = 1.0;
    v284 = vmlaq_laneq_f64(_Q4, (float64x2_t)*(unint64_t *)&v406.f64[0], v431, 1);
    *((_QWORD *)&_Q2 + 1) = *(_QWORD *)&v406.f64[1];
    v340 = vnegq_f64(_Q7);
    v391 = vmlaq_n_f64(vmlaq_n_f64(v390, _Q19, v406.f64[0]), _Q1, v340.f64[1]);
    v389 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q14, v498.f64[0]), _Q8, v503.f64[0]), _Q9, v508.f64[0]), _Q12, v513.f64[0]), v494, v518.f64[0]), _Q18, v523.f64[0]), (float64x2_t)0, _Q16), _Q30, v406.f64[0]), _Q3, v340.f64[1]);
    _Q1.f64[0] = v340.f64[1];
    _Q1.f64[1] = v408;
    v412 = _Q1;
    _Q24.f64[1] = v533.f64[1];
    *(_QWORD *)&_Q4.f64[1] = v238;
    _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, _Q26.f64[0]), v500, _Q26, 1), v505, v438.f64[0]), v510, v438, 1), v515, _Q14.f64[0]), v520, _Q14, 1), v525, v411.f64[0]), v529, v411, 1),
            v533,
            _Q31.f64[0]);
    v402 = _Q0;
    v286 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, _Q26.f64[0]), v501, _Q26, 1), v506, v438.f64[0]), v511, v438, 1), v516, _Q14.f64[0]), v521, _Q14, 1), *(float64x2_t *)v526, v411.f64[0]), *(float64x2_t *)v530, v411, 1),
             *(float64x2_t *)v534,
             _Q31.f64[0]);
    _Q8 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, _Q26.f64[0]), v502, _Q26, 1), v507, v438.f64[0]), v512, v438, 1), v517, _Q14.f64[0]), v522, _Q14, 1), *(float64x2_t *)&v526[16], v411.f64[0]), *(float64x2_t *)&v530[16], v411, 1),
            *(float64x2_t *)&v534[16],
            _Q31.f64[0]);
    v288 = vmlaq_n_f64(vmlaq_laneq_f64(v413, (float64x2_t)*(unint64_t *)&v406.f64[0], v411, 1), _Q1, _Q31.f64[0]);
    v414 = v288;
    _Q0.f64[0] = v357 + _Q31.f64[0] * 0.0;
    v327 = _Q0;
    v329 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v465.f64[0]), v501, v465, 1), v506, v434.f64[0]), v511, v434, 1), v516, v418.f64[0]), v521, v418, 1), *(float64x2_t *)v526, v431.f64[0]), *(float64x2_t *)v530, v431, 1),
             *(float64x2_t *)v534,
             _D27);
    v331 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v465.f64[0]), v500, v465, 1), v505, v434.f64[0]), v510, v434, 1), v515, v418.f64[0]), v520, v418, 1), v525, v431.f64[0]), v529, v431, 1),
             v533,
             _D27);
    v358 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v465.f64[0]), v502, v465, 1), v507, v434.f64[0]), v512, v434, 1), v517, v418.f64[0]), v522, v418, 1), *(float64x2_t *)&v526[16], v431.f64[0]), *(float64x2_t *)&v530[16], v431, 1),
             *(float64x2_t *)&v534[16],
             _D27);
    v394 = vmlaq_n_f64(v284, _Q1, _D27);
    _Q0.f64[0] = v381 + _D27 * 0.0;
    v328 = _Q0;
    _Q0.f64[1] = v500.f64[1];
    _Q1.f64[0] = vmlad_n_f64(_Q31.f64[0] * v495.f64[0], _D27, v500.f64[0]);
    __asm { FMLA            D4, D27, V0.D[1] }
    _Q21.f64[1] = v501.f64[1];
    v288.f64[0] = vmlad_n_f64(_Q31.f64[0] * v496.f64[0], _D27, v501.f64[0]);
    __asm { FMLA            D24, D27, V15.D[1] }
    _Q29.f64[0] = vmlad_n_f64(_Q31.f64[0] * v497.f64[0], _D27, v502.f64[0]);
    __asm { FMLA            D0, D27, V6.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a2 + 864);
    _Q0.f64[1] = v508.f64[1];
    __asm { FMLA            D31, D2, V0.D[1] }
    _Q30.f64[1] = v505.f64[1];
    _Q6.f64[1] = v506.f64[1];
    _Q10 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v438, v495, 1), v434, v500, 1), v401, v505, 1);
    v373 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v438, v496.f64[0]), v434, v501.f64[0]), v401, v506.f64[0]);
    v379 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v438, v496, 1), v434, v501, 1), v401, v506, 1);
    v384 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v438, v497.f64[0]), v434, v502.f64[0]), v401, v507.f64[0]);
    v386 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v438, v497, 1), v434, v502, 1), v401, v507, 1);
    _Q21.f64[1] = v507.f64[1];
    v393 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v438, v499), v434, v504), v401, v509);
    _Q20 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q14, v495.f64[0]), v418, v500.f64[0]), _Q9, v505.f64[0]);
    _Q23 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q14, v495, 1), v418, v500, 1), _Q9, v505, 1);
    v292 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q14, v496.f64[0]), v418, v501.f64[0]), _Q9, v506.f64[0]);
    _Q13 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q14, v496, 1), v418, v501, 1), _Q9, v506, 1);
    v377 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q14, v497.f64[0]), v418, v502.f64[0]), _Q9, v507.f64[0]);
    v382 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q14, v497, 1), v418, v502, 1), _Q9, v507, 1);
    v392 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q14, v499), v418, v504), _Q9, v509);
    v294 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v411, v495, 1), v431, v500, 1), v369, v505, 1);
    _Q19 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v411, v496.f64[0]), v431, v501.f64[0]), v369, v506.f64[0]);
    _Q25 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v411, v496, 1), v431, v501, 1), v369, v506, 1);
    _Q9 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v411, v497.f64[0]), v431, v502.f64[0]), v369, v507.f64[0]);
    v375 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v411, v497, 1), v431, v502, 1), v369, v507, 1);
    v426 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v411, v499), v431, v504), v369, v509);
    _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v335.f64[0]), v500, v335, 1), v505, v401.f64[0]), v510, v401, 1), v515, v409.f64[0]), v520, v409, 1), v525, v369.f64[0]), v529, v369, 1),
             v533,
             *(double *)&_Q2);
    _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v335.f64[0]), v501, v335, 1), v506, v401.f64[0]), v511, v401, 1), v516, v409.f64[0]), v521, v409, 1), *(float64x2_t *)v526, v369.f64[0]), *(float64x2_t *)v530, v369, 1),
            *(float64x2_t *)v534,
            *(double *)&_Q2);
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v335.f64[0]), v502, v335, 1), v507, v401.f64[0]), v512, v401, 1), v517, v409.f64[0]), v522, v409, 1), *(float64x2_t *)&v526[16], v369.f64[0]), *(float64x2_t *)&v530[16], v369, 1),
            *(float64x2_t *)&v534[16],
            *(double *)&_Q2);
    _Q0.f64[1] = v412.f64[1];
    v397 = vmlaq_n_f64(vmlaq_laneq_f64(v396, (float64x2_t)*(unint64_t *)&v406.f64[0], v369, 1), v412, *(double *)&_Q2);
    _Q0.f64[0] = v361 + *(double *)&_Q2 * 0.0;
    v326 = _Q0;
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)&_Q2, v505.f64[0]);
    __asm { FMLA            D4, D2, V30.D[1] }
    v288.f64[0] = vmlad_n_f64(v288.f64[0], *(double *)&_Q2, v506.f64[0]);
    __asm { FMLA            D24, D2, V6.D[1] }
    _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], *(double *)&_Q2, v507.f64[0]);
    __asm { FMLA            D0, D2, V21.D[1] }
    *(_QWORD *)&_Q2 = *(_QWORD *)(a2 + 936);
    v410 = _Q2;
    _Q0.f64[1] = v513.f64[1];
    __asm { FMLA            D31, D2, V0.D[1] }
    _Q6 = vmlaq_laneq_f64(vmulq_n_f64(v495, v338.f64[0]), v500, v338, 1);
    _Q5 = vmlaq_laneq_f64(vmulq_n_f64(v496, v338.f64[0]), v501, v338, 1);
    _Q2 = vmlaq_laneq_f64(vmulq_n_f64(v497, v338.f64[0]), v502, v338, 1);
    _Q21 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q26, v495, 1), v465, v500, 1), v335, v505, 1), v338, v510, 1);
    v416 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q26, v496.f64[0]), v465, v501.f64[0]), v335, v506.f64[0]), v338, v511.f64[0]);
    v421 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q26, v496, 1), v465, v501, 1), v335, v506, 1), v338, v511, 1);
    v419 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q26, v497.f64[0]), v465, v502.f64[0]), v335, v507.f64[0]), v338, v512.f64[0]);
    v429 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q26, v497, 1), v465, v502, 1), v335, v507, 1), v338, v512, 1);
    v466 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q26, v499), v465, v504), v335, v509), v338, *(double *)&v371);
    _Q14.f64[1] = v525.f64[1];
    _Q15.f64[1] = v529.f64[1];
    v334 = vaddq_f64(v414, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v411, v495.f64[0]), v431, v500.f64[0]), v369, v505.f64[0]), v442, 1.0), v491, v515.f64[0]), v440, v520.f64[0]), v485, v525.f64[0]), v488, v529.f64[0]), v482,
               v533.f64[0]));
    v333 = vaddq_f64(_Q8, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q20, v473, 1.0), v494, v515.f64[0]), v448, v520.f64[0]), _Q16, v525.f64[0]), v479, v529.f64[0]), v476, v533.f64[0]));
    v370 = vaddq_f64(v286, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v438, v495.f64[0]), v434, v500.f64[0]), v401, v505.f64[0]), v424, 1.0), v403, v515.f64[0]), v469, v520.f64[0]), v461, v525.f64[0]), v457, v529.f64[0]), v445,
               v533.f64[0]));
    v362 = vaddq_f64(v402, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q11, v335, v505.f64[0]), v338, 1.0), v425, v515.f64[0]), v404, v520.f64[0]), v436, v525.f64[0]), v459, v529.f64[0]), v454, v533.f64[0]));
    _Q0.f64[1] = *((float64_t *)&v410 + 1);
    _D27 = *(double *)(a2 + 1008);
    v401.f64[0] = *(float64_t *)(a2 + 1080);
    v431.f64[0] = *(float64_t *)(a2 + 1152);
    v402.f64[0] = *(float64_t *)(a2 + 1224);
    _Q0.f64[0] = *(float64_t *)(a2 + 1296);
    v415 = _Q0;
    _Q1.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q1.f64[0], *(double *)&v410, 1.0), _D27, v515.f64[0]), v401.f64[0], v520.f64[0]), v431.f64[0], v525.f64[0]), v402.f64[0], v529.f64[0]), _Q0.f64[0], v533.f64[0]);
    v339 = vaddq_f64(v327, _Q1);
    v337 = vaddq_f64(v394, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v294, v442, v510, 1), v491, v515, 1), v440, v520, 1), v485, v525, 1), v488, v529, 1), v482, v533, 1));
    _Q0.f64[1] = 1.0;
    v359 = vaddq_f64(v358, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q23, v473, v510, 1), v494, v515, 1), v448, v520, 1), _Q16, v525, 1), v479, v529, 1), v476, v533, 1));
    v395 = vaddq_f64(v329, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q10, v424, v510, 1), v403, v515, 1), v469, v520, 1), v461, v525, 1), v457, v529, 1), v445, v533, 1));
    _Q26.f64[1] = v520.f64[1];
    _Q1.f64[1] = v533.f64[1];
    v423 = vaddq_f64(v331, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q21, v425, v515, 1), v404, v520, 1), v436, v525, 1), v459, v529, 1), v454, v533, 1));
    *(_QWORD *)&_Q21.f64[0] = v410;
    _Q30.f64[1] = v510.f64[1];
    __asm
    {
      FMLA            D4, D21, V30.D[1]
      FMLA            D4, D27, V0.D[1]
    }
    _Q0.f64[0] = v401.f64[0];
    __asm { FMLA            D4, D0, V26.D[1] }
    _Q0.f64[0] = v431.f64[0];
    __asm { FMLA            D4, D0, V14.D[1] }
    _Q0.f64[0] = v402.f64[0];
    __asm { FMLA            D4, D0, V15.D[1] }
    _Q0.f64[0] = v415.f64[0];
    __asm { FMLA            D4, D0, V1.D[1] }
    v345 = vaddq_f64(v328, _Q4);
    _Q10.f64[1] = v511.f64[1];
    v398 = vaddq_f64(v397, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q19, v442, v511.f64[0]), v491, v516.f64[0]), v440, 1.0), v485, *(double *)v526), v488, *(double *)v530), v482, *(double *)v534));
    v336 = vaddq_f64(_Q3, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v292, v473, v511.f64[0]), v494, v516.f64[0]), v448, 1.0), _Q16, *(double *)v526), v479, *(double *)v530), v476, *(double *)v534));
    v374 = vaddq_f64(_Q7, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v373, v424, v511.f64[0]), v403, v516.f64[0]), v469, 1.0), v461, *(double *)v526), v457, *(double *)v530), v445, *(double *)v534));
    _Q8.f64[1] = v521.f64[1];
    _Q11.f64[1] = *(float64_t *)&v530[8];
    v417 = vaddq_f64(_Q17, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v416, v425, v516.f64[0]), v404, 1.0), v436, *(double *)v526), v459, *(double *)v530), v454, *(double *)v534));
    *(_QWORD *)&_Q20.f64[0] = v410;
    _Q23.f64[1] = v516.f64[1];
    _Q17.f64[1] = *(float64_t *)&v526[8];
    v288.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(v288.f64[0], *(double *)&v410, v511.f64[0]), _D27, v516.f64[0]), v401.f64[0], 1.0), v431.f64[0], *(double *)v526), v402.f64[0], *(double *)v530), v415.f64[0], *(double *)v534);
    v332 = vaddq_f64(v326, v288);
    v347 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v346, (float64x2_t)*(unint64_t *)&v406.f64[0], v442, 1), v412, *(double *)&v410), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q25, v442, v511, 1), v491, v516, 1), v440, v521, 1), v485, *(float64x2_t *)v526, 1), v488, *(float64x2_t *)v530, 1), v482, *(float64x2_t *)v534, 1));
    v330 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q2, v507, v424.f64[0]), v512, v424, 1), v517, v473.f64[0]), v522, v473, 1), *(float64x2_t *)&v526[16], v442.f64[0]), *(float64x2_t *)&v530[16], v442, 1), *(float64x2_t *)&v534[16], *(double *)&v410), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(_Q13, v473, v511, 1), v494, v516, 1), v448, v521, 1),
                   _Q16,
                   *(float64x2_t *)v526,
                   1),
                 v479,
                 *(float64x2_t *)v530,
                 1),
               v476,
               *(float64x2_t *)v534,
               1));
    _Q19.f64[1] = *(float64_t *)&v534[8];
    v380 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q5, v506, v424.f64[0]), v511, v424, 1), v516, v473.f64[0]), v521, v473, 1), *(float64x2_t *)v526, v442.f64[0]), *(float64x2_t *)v530, v442, 1), *(float64x2_t *)v534, *(double *)&v410), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v379, v424, v511, 1), v403, v516, 1), v469, v521, 1),
                   v461,
                   *(float64x2_t *)v526,
                   1),
                 v457,
                 *(float64x2_t *)v530,
                 1),
               v445,
               *(float64x2_t *)v534,
               1));
    _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(_Q6, v505, v424.f64[0]), v510, v424, 1), v515, v473.f64[0]), v520, v473, 1), v525, v442.f64[0]), v529, v442, 1), v533, *(double *)&v410), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v421, v425, v516, 1), v404, v521, 1),
                  v436,
                  *(float64x2_t *)v526,
                  1),
                v459,
                *(float64x2_t *)v530,
                1),
              v454,
              *(float64x2_t *)v534,
              1));
    v422 = _Q0;
    _Q0.f64[0] = v365 + *(double *)&v410 * 0.0;
    __asm
    {
      FMLA            D24, D20, V10.D[1]
      FMLA            D24, D27, V23.D[1]
    }
    _Q1.f64[0] = v401.f64[0];
    _Q25.f64[0] = v402.f64[0];
    __asm { FMLA            D24, D1, V8.D[1] }
    _Q1.f64[0] = v431.f64[0];
    __asm
    {
      FMLA            D24, D1, V17.D[1]
      FMLA            D24, D25, V11.D[1]
    }
    _Q1.f64[0] = v415.f64[0];
    __asm { FMLA            D24, D1, V19.D[1] }
    v366 = vaddq_f64(_Q0, _Q24);
    v349 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v348, (float64x2_t)*(unint64_t *)&v406.f64[0], v491, 1), v412, _D27), vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(_Q9, v442, v512.f64[0]), v491, v517.f64[0]), v440, v522.f64[0]), v485, *(double *)&v526[16]), v488, *(double *)&v530[16]), v482, *(double *)&v534[16]));
    _Q26.f64[1] = *(float64_t *)&v530[24];
    _Q30.f64[1] = *(float64_t *)&v534[24];
    v378 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v425.f64[0]), v502, v425, 1), v507, v403.f64[0]), v512, v403, 1), v517, v494.f64[0]), v522, v494, 1), *(float64x2_t *)&v526[16], v491.f64[0]), *(float64x2_t *)&v530[16], v491,
                 1),
               *(float64x2_t *)&v534[16],
               _D27),
             vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v377, v473, v512.f64[0]), v494, v517.f64[0]), v448, v522.f64[0]), _Q16, *(double *)&v526[16]), v479, *(double *)&v530[16]), v476, *(double *)&v534[16]));
    v385 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v425.f64[0]), v501, v425, 1), v506, v403.f64[0]), v511, v403, 1), v516, v494.f64[0]), v521, v494, 1), *(float64x2_t *)v526, v491.f64[0]), *(float64x2_t *)v530, v491,
                 1),
               *(float64x2_t *)v534,
               _D27),
             vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v384, v424, v512.f64[0]), v403, v517.f64[0]), v469, v522.f64[0]), v461, *(double *)&v526[16]), v457, *(double *)&v530[16]), v445, *(double *)&v534[16]));
    v307 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v425.f64[0]), v500, v425, 1), v505, v403.f64[0]), v510, v403, 1), v515, v494.f64[0]), v520, v494, 1), v525, v491.f64[0]), v529, v491,
                 1),
               v533,
               _D27),
             vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v419, v425, v517.f64[0]), v404, v522.f64[0]), v436, *(double *)&v526[16]), v459, *(double *)&v530[16]), v454, *(double *)&v534[16]));
    v420 = v307;
    v307.f64[0] = v363 + _D27 * 0.0;
    _Q29.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q29.f64[0], *(double *)&v410, v512.f64[0]), _D27, v517.f64[0]), v401.f64[0], v522.f64[0]), v431.f64[0], *(double *)&v526[16]), v402.f64[0], *(double *)&v530[16]), v415.f64[0], *(double *)&v534[16]);
    v364 = vaddq_f64(v307, _Q29);
    v376 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v350, (float64x2_t)*(unint64_t *)&v406.f64[0], v440, 1), v412, v401.f64[0]), vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v375, v442, v512, 1), v491, v517, 1), v440, v522, 1), v485, *(float64x2_t *)&v526[16], 1), v488, *(float64x2_t *)&v530[16], 1), v482, *(float64x2_t *)&v534[16], 1));
    _Q13.f64[1] = v512.f64[1];
    _Q9.f64[1] = v522.f64[1];
    v383 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v404.f64[0]), v502, v404, 1), v507, v469.f64[0]), v512, v469, 1), v517, v448.f64[0]), v522, v448, 1), *(float64x2_t *)&v526[16], v440.f64[0]), *(float64x2_t *)&v530[16], v440,
                 1),
               *(float64x2_t *)&v534[16],
               v401.f64[0]),
             vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v382, v473, v512, 1), v494, v517, 1), v448, v522, 1), _Q16, *(float64x2_t *)&v526[16], 1), v479, *(float64x2_t *)&v530[16], 1), v476, *(float64x2_t *)&v534[16], 1));
    _Q21.f64[1] = v517.f64[1];
    v387 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v404.f64[0]), v501, v404, 1), v506, v469.f64[0]), v511, v469, 1), v516, v448.f64[0]), v521, v448, 1), *(float64x2_t *)v526, v440.f64[0]), *(float64x2_t *)v530, v440,
                 1),
               *(float64x2_t *)v534,
               v401.f64[0]),
             vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v386, v424, v512, 1), v403, v517, 1), v469, v522, 1), v461, *(float64x2_t *)&v526[16], 1), v457, *(float64x2_t *)&v530[16], 1), v445, *(float64x2_t *)&v534[16], 1));
    v288.f64[1] = v436.f64[1];
    _Q31.f64[1] = *(float64_t *)&v526[24];
    v430 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v404.f64[0]), v500, v404, 1), v505, v469.f64[0]), v510, v469, 1), v515, v448.f64[0]), v520, v448, 1), v525, v440.f64[0]), v529, v440,
                 1),
               v533,
               v401.f64[0]),
             vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v429, v425, v517, 1), v404, v522, 1), v436, *(float64x2_t *)&v526[16], 1), v459, *(float64x2_t *)&v530[16], 1), v454, *(float64x2_t *)&v534[16], 1));
    v307.f64[1] = *((float64_t *)&v371 + 1);
    *(_QWORD *)&_Q3.f64[0] = v410;
    __asm { FMLA            D7, D3, V13.D[1] }
    _Q3.f64[1] = v518.f64[1];
    __asm
    {
      FMLA            D2, D27, V3.D[1]
      FMLA            D7, D27, V21.D[1]
    }
    _Q0.f64[1] = v523.f64[1];
    _Q17.f64[0] = v401.f64[0];
    __asm { FMLA            D2, D17, V0.D[1] }
    v467 = vmlaq_n_f64(vmlaq_n_f64(v466, v425, v519), v404, v524);
    v308 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v393, v424, *(double *)&v371), v403, v519), v469, v524);
    v309 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v392, v473, *(double *)&v371), v494, v519), v448, v524);
    v427 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v426, v442, *(double *)&v371), v491, v519), v440, v524);
    v307.f64[0] = v360 + v401.f64[0] * 0.0;
    _Q0.f64[1] = v496.f64[1];
    __asm { FMLA            D0, D17, V9.D[1] }
    _Q5.f64[0] = v431.f64[0];
    __asm { FMLA            D0, D5, V31.D[1] }
    _Q17.f64[0] = v402.f64[0];
    __asm { FMLA            D0, D17, V26.D[1] }
    _Q10 = v415;
    __asm { FMLA            D0, D10, V30.D[1] }
    v474 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v436.f64[0]), v502, v436, 1), v507, v461.f64[0]), v512, v461, 1), v517, v464.f64[0]), v522, v464, 1), *(float64x2_t *)&v526[16], v485.f64[0]), *(float64x2_t *)&v530[16], v485,
                 1),
               *(float64x2_t *)&v534[16],
               v431.f64[0]),
             v389);
    v470 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v436.f64[0]), v501, v436, 1), v506, v461.f64[0]), v511, v461, 1), v516, v464.f64[0]), v521, v464, 1), *(float64x2_t *)v526, v485.f64[0]), *(float64x2_t *)v530, v485,
                 1),
               *(float64x2_t *)v534,
               v431.f64[0]),
             v391);
    _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v436.f64[0]), v500, v436, 1), v505, v461.f64[0]), v510, v461, 1), v515, v464.f64[0]), v520, v464, 1), v525, v485.f64[0]), v529, v485, 1),
            v533,
            v431.f64[0]);
    v449 = vaddq_f64(_Q7, vmlaq_n_f64(vmlaq_n_f64(v428, v459, v406.f64[0]), v454, v340.f64[1]));
    _Q15 = v372;
    __asm { FMLS            D7, D10, V15.D[1] }
    v288.f64[0] = v356 + v431.f64[0] * 0.0;
    v443 = vaddq_f64(v288, _Q7);
    v288.f64[1] = v459.f64[1];
    v313 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v459.f64[0]), v500, v459, 1), v505, v457.f64[0]), v510, v457, 1), v515, v479.f64[0]), v520, v479, 1), v525, v488.f64[0]), v529, v488, 1),
             v533,
             v402.f64[0]);
    v314 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, v454.f64[0]), v500, v454, 1), v505, v445.f64[0]), v510, v445, 1), v515, v476.f64[0]), v520, v476, 1), v525, v482.f64[0]), v529, v482, 1),
             v533,
             v415.f64[0]);
    v315 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v454.f64[0]), v501, v454, 1), v506, v445.f64[0]), v511, v445, 1), v516, v476.f64[0]), v521, v476, 1), *(float64x2_t *)v526, v482.f64[0]), *(float64x2_t *)v530, v482, 1),
             *(float64x2_t *)v534,
             v415.f64[0]);
    v316 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v454.f64[0]), v502, v454, 1), v507, v445.f64[0]), v512, v445, 1), v517, v476.f64[0]), v522, v476, 1), *(float64x2_t *)&v526[16], v482.f64[0]), *(float64x2_t *)&v530[16], v482, 1),
             *(float64x2_t *)&v534[16],
             v415.f64[0]);
    _Q2.f64[0] = v406.f64[0];
    _Q16.f64[0] = v431.f64[0];
    __asm
    {
      FMLS            D6, D16, V4.D[0]
      FMLS            D4, D17, V15.D[0]
    }
    v288.f64[0] = v355 + v402.f64[0] * 0.0;
    _Q9.f64[0] = v354 + v415.f64[0] * 0.0;
    _Q10.f64[0] = _Q4.f64[0] + v415.f64[0] * 0.0;
    v528 = v400;
    v531 = *(unint64_t *)&v406.f64[0];
    v532 = v340.f64[0];
    v317 = vmlaq_n_f64(vmlaq_laneq_f64(v353, (float64x2_t)*(unint64_t *)&v406.f64[0], v482, 1), v412, v415.f64[0]);
    v318 = v317;
    v535 = v412;
    v317.f64[0] = _Q6.f64[0] + v402.f64[0] * 0.0 + v415.f64[0] * v408;
    v319 = vaddq_f64(v288, v317);
    v320 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v497, v459.f64[0]), v502, v459, 1), v507, v457.f64[0]), v512, v457, 1), v517, v479.f64[0]), v522, v479, 1), *(float64x2_t *)&v526[16], v488.f64[0]), *(float64x2_t *)&v530[16], v488,
                 1),
               *(float64x2_t *)&v534[16],
               v402.f64[0]),
             vmlaq_n_f64(vmlaq_f64(v342, (float64x2_t)0, v479), v476, v408));
    v321 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, v459.f64[0]), v501, v459, 1), v506, v457.f64[0]), v511, v457, 1), v516, v479.f64[0]), v521, v479, 1), *(float64x2_t *)v526, v488.f64[0]), *(float64x2_t *)v530, v488,
                 1),
               *(float64x2_t *)v534,
               v402.f64[0]),
             vmlaq_n_f64(vmlaq_f64(v343, (float64x2_t)0, v457), v445, v408));
    *(float64x2_t *)(a3 + 688) = vaddq_f64(v333, (float64x2_t)0);
    *(float64x2_t *)(a3 + 704) = vaddq_f64(v334, (float64x2_t)0);
    *(float64x2_t *)(a3 + 656) = vaddq_f64(v362, (float64x2_t)0);
    *(float64x2_t *)(a3 + 672) = vaddq_f64(v370, (float64x2_t)0);
    *(_QWORD *)(a3 + 720) = *(_OWORD *)&vaddq_f64(v339, (float64x2_t)0);
    *(float64x2_t *)(a3 + 776) = vaddq_f64(v337, (float64x2_t)0);
    v322 = vaddq_f64(v313, vmlaq_n_f64(vmlaq_f64(v344, (float64x2_t)0, v459), v454, v408));
    v323 = vaddq_f64(v318, vmlaq_f64(vmlsq_lane_f64(vmlaq_n_f64(v427, v485, v400), v488, v372.f64[0], 0), (float64x2_t)0, v482));
    v324 = vaddq_f64(v316, vmlaq_f64(vmlsq_lane_f64(vmlaq_n_f64(v309, v464, v400), v479, v372.f64[0], 0), (float64x2_t)0, v476));
    *(float64x2_t *)(a3 + 760) = vaddq_f64(v359, (float64x2_t)0);
    v316.f64[0] = v367 * v367;
    *(float64x2_t *)(a3 + 744) = vaddq_f64(v395, (float64x2_t)0);
    *(float64x2_t *)(a3 + 728) = vaddq_f64(v423, (float64x2_t)0);
    *(_QWORD *)(a3 + 792) = *(_OWORD *)&vaddq_f64(v345, (float64x2_t)0);
    *(float64x2_t *)(a3 + 832) = vaddq_f64(v336, (float64x2_t)0);
    *(float64x2_t *)(a3 + 848) = vaddq_f64(v398, (float64x2_t)0);
    *(float64x2_t *)(a3 + 800) = vaddq_f64(v417, (float64x2_t)0);
    *(float64x2_t *)(a3 + 816) = vaddq_f64(v374, (float64x2_t)0);
    *(_QWORD *)(a3 + 864) = *(_OWORD *)&vaddq_f64(v332, (float64x2_t)0);
    *(float64x2_t *)(a3 + 904) = vaddq_f64((float64x2_t)0, v330);
    *(float64x2_t *)(a3 + 888) = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)v316, 8uLL), v380);
    *(float64x2_t *)(a3 + 872) = vaddq_f64(v422, (float64x2_t)0);
    *(float64x2_t *)(a3 + 920) = vaddq_f64(v347, (float64x2_t)0);
    *(_QWORD *)(a3 + 936) = *(_OWORD *)&vaddq_f64(v366, (float64x2_t)0);
    *(float64x2_t *)(a3 + 976) = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v367 * v367), v378);
    *(float64x2_t *)(a3 + 992) = vaddq_f64(v349, (float64x2_t)0);
    *(float64x2_t *)(a3 + 944) = vaddq_f64(v420, (float64x2_t)0);
    *(float64x2_t *)(a3 + 960) = vaddq_f64(v385, (float64x2_t)0);
    *(_QWORD *)(a3 + 1008) = *(_OWORD *)&vaddq_f64(v364, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1048) = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)COERCE_UNSIGNED_INT64(v367 * v367), 8uLL), v383);
    *(float64x2_t *)(a3 + 1064) = vaddq_f64((float64x2_t)0, v376);
    v325 = vaddq_f64(v387, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1016) = vaddq_f64(v430, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1032) = v325;
    *(_QWORD *)(a3 + 1080) = *(_OWORD *)&vaddq_f64(vaddq_f64(v307, _Q0), (float64x2_t)0);
    v325.f64[0] = v368 * v368;
    *(float64x2_t *)(a3 + 1120) = vaddq_f64(v474, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1136) = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v368 * v368), vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v351, (float64x2_t)*(unint64_t *)&v406.f64[0], v485, 1), v412, v431.f64[0]), vmlaq_n_f64(vmlaq_n_f64(v388, v488, v406.f64[0]), v482, v340.f64[1])));
    *(float64x2_t *)(a3 + 1088) = vaddq_f64(v449, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1104) = vaddq_f64(v470, (float64x2_t)0);
    *(_QWORD *)(a3 + 1152) = *(_OWORD *)&vaddq_f64(v443, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1192) = vaddq_f64(v320, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1208) = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)0, (int8x16_t)COERCE_UNSIGNED_INT64(v368 * v368), 8uLL), vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v352, (float64x2_t)*(unint64_t *)&v406.f64[0], v488, 1), v412, v402.f64[0]), vmlaq_n_f64(vmlaq_f64(v341, (float64x2_t)0, v488), v482, v408)));
    *(float64x2_t *)(a3 + 1160) = vaddq_f64(v322, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1176) = vaddq_f64(v321, (float64x2_t)0);
    *(_QWORD *)(a3 + 1224) = *(_OWORD *)&vaddq_f64((float64x2_t)0, v319);
    *(float64x2_t *)(a3 + 1264) = vaddq_f64(v324, (float64x2_t)0);
    *(float64x2_t *)(a3 + 1280) = vaddq_f64(v323, (float64x2_t)0);
    v536 = 0;
    *(float64x2_t *)(a3 + 1232) = vaddq_f64(vaddq_f64(v314, vmlaq_f64(vmlsq_lane_f64(vmlaq_n_f64(v467, v436, v400), v459, v372.f64[0], 0), (float64x2_t)0, v454)), (float64x2_t)0);
    *(float64x2_t *)(a3 + 1248) = vaddq_f64(vaddq_f64(v315, vmlaq_f64(vmlsq_lane_f64(vmlaq_n_f64(v308, v461, v400), v457, v372.f64[0], 0), (float64x2_t)0, v445)), (float64x2_t)0);
    *(_QWORD *)(a3 + 1296) = *(_OWORD *)&vaddq_f64(v325, vaddq_f64(_Q9, _Q10));
  }
}

void sub_20F82AD68(char **a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  BOOL v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  if (v3 != a2)
  {
    v4 = a2;
    if (a2)
    {
      if (a2 >= 0x155555555555556)
        sub_20E867F44();
      v6 = 192 * a2;
      v7 = (char *)operator new(192 * a2);
      v8 = &v7[v6];
      v9 = 192 * ((v6 - 192) / 0xC0uLL) + 192;
      bzero(v7, v9);
      v10 = (unint64_t)a1[5];
      v11 = v10 > v4;
      if (v10 < v4)
        v4 = (unint64_t)a1[5];
      if (v11)
      {
        v12 = a1[3];
        v13 = v4 - 1;
        v14 = v10 - 1;
        v15 = v7;
        do
        {
          v16 = v13;
          v17 = &v2[192 * ((unint64_t)v12 % v3)];
          v18 = *(_OWORD *)v17;
          v19 = *((_OWORD *)v17 + 2);
          *((_OWORD *)v15 + 1) = *((_OWORD *)v17 + 1);
          *((_OWORD *)v15 + 2) = v19;
          *(_OWORD *)v15 = v18;
          v20 = *((_OWORD *)v17 + 3);
          v21 = *((_OWORD *)v17 + 4);
          v22 = *((_OWORD *)v17 + 6);
          *((_OWORD *)v15 + 5) = *((_OWORD *)v17 + 5);
          *((_OWORD *)v15 + 6) = v22;
          *((_OWORD *)v15 + 3) = v20;
          *((_OWORD *)v15 + 4) = v21;
          v23 = *((_OWORD *)v17 + 7);
          v24 = *((_OWORD *)v17 + 8);
          v25 = *((_OWORD *)v17 + 9);
          *((_QWORD *)v15 + 20) = *((_QWORD *)v17 + 20);
          *((_OWORD *)v15 + 8) = v24;
          *((_OWORD *)v15 + 9) = v25;
          *((_OWORD *)v15 + 7) = v23;
          v26 = *(_OWORD *)(v17 + 168);
          v27 = v14-- != 0;
          *((_QWORD *)v15 + 23) = *((_QWORD *)v17 + 23);
          *(_OWORD *)(v15 + 168) = v26;
          v28 = v27;
          v13 = v16 - 1;
          ++v12;
          v15 += 192;
        }
        while (v16 || (v28 & 1) == 0);
      }
      else if (v10)
      {
        v29 = a1[3];
        v30 = v7;
        do
        {
          v31 = &v2[192 * ((unint64_t)v29 % v3)];
          v32 = *(_OWORD *)v31;
          v33 = *((_OWORD *)v31 + 2);
          *((_OWORD *)v30 + 1) = *((_OWORD *)v31 + 1);
          *((_OWORD *)v30 + 2) = v33;
          *(_OWORD *)v30 = v32;
          v34 = *((_OWORD *)v31 + 3);
          v35 = *((_OWORD *)v31 + 4);
          v36 = *((_OWORD *)v31 + 6);
          *((_OWORD *)v30 + 5) = *((_OWORD *)v31 + 5);
          *((_OWORD *)v30 + 6) = v36;
          *((_OWORD *)v30 + 3) = v34;
          *((_OWORD *)v30 + 4) = v35;
          v37 = *((_OWORD *)v31 + 7);
          v38 = *((_OWORD *)v31 + 8);
          v39 = *((_OWORD *)v31 + 9);
          *((_QWORD *)v30 + 20) = *((_QWORD *)v31 + 20);
          *((_OWORD *)v30 + 8) = v38;
          *((_OWORD *)v30 + 9) = v39;
          *((_OWORD *)v30 + 7) = v37;
          v40 = *(_OWORD *)(v31 + 168);
          *((_QWORD *)v30 + 23) = *((_QWORD *)v31 + 23);
          *(_OWORD *)(v30 + 168) = v40;
          ++v29;
          v30 += 192;
          --v10;
        }
        while (v10);
      }
      else if (!v2)
      {
LABEL_23:
        *a1 = v7;
        a1[1] = &v7[v9];
        a1[2] = v8;
        a1[3] = 0;
        a1[4] = (char *)(v4 % (0xAAAAAAAAAAAAAAABLL * (v9 >> 6)));
        a1[5] = (char *)v4;
        return;
      }
      a1[1] = v2;
      operator delete(v2);
      goto LABEL_23;
    }
    a1[1] = v2;
    a1[4] = 0;
    a1[5] = 0;
    a1[3] = 0;
  }
}

void sub_20F82AF8C(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, float64x2_t *a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v51[10];
  uint64_t v52;

  v10 = *a2;
  v11 = (a2[1] - *a2) >> 2;
  if (a1[1] >= (unint64_t)(v11 - 1))
    v12 = v11 - 1;
  else
    v12 = a1[1];
  v13 = v11 + ~v12;
  v14 = (v11 - 1);
  v15 = *(_QWORD *)(*a3 + 8 * v13);
  v16 = *(_QWORD *)(*a3 + 8 * v14);
  v17 = *(_DWORD *)(v10 + 4 * v13);
  v18 = *(_DWORD *)(v10 + 4 * v14);
  v19 = a1[4] + 192 * a1[8];
  memmove((void *)v19, (const void *)(*a4 + 168 * v13), 0xA8uLL);
  *(_QWORD *)(v19 + 168) = v15;
  *(_QWORD *)(v19 + 176) = v16;
  *(_DWORD *)(v19 + 184) = v17;
  *(_DWORD *)(v19 + 188) = v18;
  v22 = a1[4];
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - v22) >> 6);
  v24 = a1[9];
  v25 = a1[8] + 1;
  if (v25 >= v23)
    v26 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - v22) >> 6);
  else
    v26 = 0;
  a1[8] = v25 - v26;
  if (v24 == v23)
  {
    v27 = a1[7] + 1;
    if (v27 >= v23)
      v28 = v23;
    else
      v28 = 0;
    a1[7] = v27 - v28;
    if ((_DWORD)v14 == (_DWORD)v13)
      return;
  }
  else
  {
    a1[9] = v24 + 1;
    if ((_DWORD)v14 == (_DWORD)v13)
      return;
  }
  if (v25 != v26)
    v23 = v25 - v26;
  v29 = v22 + 192 * v23 - 192;
  v30 = v11 - v12;
  if (v14 >= (int)v11 - (int)v12)
  {
    v32 = *(_DWORD *)(*a2 + 4 * v13);
    while (1)
    {
      v31 = v30;
      v33 = *(_DWORD *)(*a2 + 4 * v30);
      v35 = *a7;
      v34 = a7[1];
      if (v34 != *a7)
      {
        v36 = 0x80BFA02FE80BFA03 * ((v34 - *a7) >> 4);
        do
        {
          v37 = v36 >> 1;
          v38 = v35 + 2736 * (v36 >> 1);
          if (!*(_QWORD *)v38 && *(_DWORD *)(v38 + 8) < v33)
          {
            v35 = v38 + 2736;
            v37 = v36 + ~v37;
          }
          v36 = v37;
        }
        while (v37);
      }
      if (v35 == v34)
        break;
      if (*(_QWORD *)v35)
      {
        v31 = v13;
        if ((_DWORD)v13 != (_DWORD)v14)
          goto LABEL_37;
        return;
      }
      if (*(_DWORD *)(v35 + 8) != v33)
        break;
      if ((*(_QWORD *)(v35 + 16) || *(_DWORD *)(v35 + 24) != v32)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PropagatedPoseAccumulator.cpp", 82, (uint64_t)"iter->second.state_id0 == prev_state_id", 39, (uint64_t)&unk_2102B27AE, 0, (void (*)(void **))sub_21023DDB0)|| (*(_QWORD *)(v35 + 32) || *(_DWORD *)(v35 + 40) != v33)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PropagatedPoseAccumulator.cpp", 83, (uint64_t)"iter->second.state_id1 == next_state_id", 39, (uint64_t)&unk_2102B27AE, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v20.f64[0] = *(double *)(*a3 + 8 * v31) - *(double *)(*a3 + 8 * v13);
      sub_20FDB59B0(v35 + 48, a6 + 2, v29, (uint64_t)v51, v20, v21);
      v39 = v51[0];
      v40 = v51[2];
      *(_OWORD *)(v29 + 16) = v51[1];
      *(_OWORD *)(v29 + 32) = v40;
      *(_OWORD *)v29 = v39;
      v41 = v51[3];
      v42 = v51[4];
      v43 = v51[6];
      *(_OWORD *)(v29 + 80) = v51[5];
      *(_OWORD *)(v29 + 96) = v43;
      *(_OWORD *)(v29 + 48) = v41;
      *(_OWORD *)(v29 + 64) = v42;
      v20 = (float64x2_t)v51[7];
      v44 = v51[8];
      v21 = (float64x2_t)v51[9];
      *(_QWORD *)(v29 + 160) = v52;
      *(_OWORD *)(v29 + 128) = v44;
      *(float64x2_t *)(v29 + 144) = v21;
      *(float64x2_t *)(v29 + 112) = v20;
      v30 = v31 + 1;
      LODWORD(v13) = v31;
      v32 = v33;
      if (v31 + 1 > v14)
      {
        if (v31 == (_DWORD)v14)
          return;
        goto LABEL_37;
      }
    }
  }
  v31 = v13;
  if ((_DWORD)v13 != (_DWORD)v14)
  {
LABEL_37:
    v46 = a1[10];
    v45 = a1 + 10;
    v45[1] = v46;
    sub_20FD33470(a5, (uint64_t)v45, *(double *)(*a3 + 8 * v31), *(double *)(*a3 + 8 * v14));
    v47 = v45[1];
    if (*v45 != v47 && *(double *)*v45 < *(double *)(v47 - 56))
      sub_20F4BA010(v29, (uint64_t)a6, v45);
  }
}

void sub_20F82B2FC(_QWORD *a1, int a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v12;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  double v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double **v26;
  double *v27;
  double *v28;
  unint64_t v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  _OWORD v43[10];
  uint64_t v44;

  if (!a1[9])
    return;
  v12 = a7.f64[0];
  if (*(_BYTE *)(a6 + 1384))
  {
    if (*(_DWORD *)(a6 + 8) != a2
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PropagatedPoseAccumulator.cpp", 131, (uint64_t)"opt_state_ids_and_preint_imu->first.first.key() == prev_state_id", 64, (uint64_t)&unk_2102B27AE, 0, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a6 + 24) != a3&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/PropagatedPoseAccumulator.cpp", 132, (uint64_t)"opt_state_ids_and_preint_imu->first.second.key() == propagates_state_id", 71, (uint64_t)&unk_2102B27AE, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (a1[9])
    {
      v15 = 0;
      v16 = a6 + 32;
      v17 = (float64x2_t *)(a5 + 32);
      v18 = a8 - v12;
      do
      {
        v19 = a1[4] + 192 * ((v15 + a1[7]) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 6)));
        *(_DWORD *)(v19 + 188) = a3;
        *(double *)(v19 + 176) = a8;
        a7.f64[0] = v18;
        sub_20FDB59B0(v16, v17, v19, (uint64_t)v43, a7, a9);
        v20 = v43[0];
        v21 = v43[2];
        *(_OWORD *)(v19 + 16) = v43[1];
        *(_OWORD *)(v19 + 32) = v21;
        *(_OWORD *)v19 = v20;
        v22 = v43[3];
        v23 = v43[4];
        v24 = v43[6];
        *(_OWORD *)(v19 + 80) = v43[5];
        *(_OWORD *)(v19 + 96) = v24;
        *(_OWORD *)(v19 + 48) = v22;
        *(_OWORD *)(v19 + 64) = v23;
        a7 = (float64x2_t)v43[7];
        v25 = v43[8];
        a9 = (float64x2_t)v43[9];
        *(_QWORD *)(v19 + 160) = v44;
        *(_OWORD *)(v19 + 128) = v25;
        *(float64x2_t *)(v19 + 144) = a9;
        *(float64x2_t *)(v19 + 112) = a7;
        ++v15;
      }
      while (v15 != a1[9]);
    }
    return;
  }
  v26 = (double **)(a1 + 10);
  a1[11] = a1[10];
  sub_20FD33470(a4, (uint64_t)(a1 + 10), a7.f64[0], a8);
  v27 = *v26;
  v28 = (double *)a1[11];
  v29 = 0x6DB6DB6DB6DB6DB7 * (v28 - *v26);
  if (v29 >= 2)
  {
    v30 = v27 + 7;
    if (v27[7] - *v27 < 0.0001)
    {
      if (v27 + 14 != v28)
      {
        v31 = v27 + 11;
        do
        {
          *(v31 - 4) = v31[3];
          *(_OWORD *)(v31 - 3) = *((_OWORD *)v31 + 2);
          *(v31 - 1) = v31[6];
          *(_OWORD *)v31 = *(_OWORD *)(v31 + 7);
          v31[2] = v31[9];
          v32 = v31 + 10;
          v31 += 7;
          v30 += 7;
        }
        while (v32 != v28);
        v27 = *v26;
      }
      a1[11] = v30;
      v29 = 0x6DB6DB6DB6DB6DB7 * (v30 - v27);
      if (v29 < 3)
        goto LABEL_26;
      goto LABEL_20;
    }
    v30 = v26[1];
    if (v29 >= 3)
    {
LABEL_20:
      v33 = &v27[7 * v29];
      v35 = *(v33 - 14);
      v34 = v33 - 14;
      if (*(v30 - 7) - v35 < 0.0001)
      {
        if (v34 + 7 != v30)
        {
          v36 = 112 - (_QWORD)v27;
          v37 = 7 * v29;
          do
          {
            v38 = &v27[v37];
            *(v38 - 14) = v27[v37 - 7];
            *(_OWORD *)(v38 - 13) = *(_OWORD *)&v27[v37 - 6];
            *(v38 - 11) = v27[v37 - 4];
            *((_OWORD *)v38 - 5) = *(_OWORD *)&v27[v37 - 3];
            *(v38 - 8) = v27[v37 - 1];
            v36 -= 56;
            v27 += 7;
          }
          while (&v27[v37 - 7] != v30);
          v34 = (double *)(56 * v29 - v36);
        }
        a1[11] = v34;
      }
    }
  }
LABEL_26:
  if (a1[9])
  {
    v39 = 0;
    do
    {
      v40 = a1[4] + 192 * ((v39 + a1[7]) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - a1[4]) >> 6)));
      *(_DWORD *)(v40 + 188) = a3;
      *(double *)(v40 + 176) = a8;
      v41 = (double *)a1[10];
      v42 = (double *)a1[11];
      if (v41 != v42 && *v41 < *(v42 - 7))
        sub_20F4BA010(v40, a5, a1 + 10);
      ++v39;
    }
    while (v39 != a1[9]);
  }
}

double sub_20F82B6B4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q1>, float64x2_t a4@<Q2>)
{
  float64x2_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float64x2_t v15;
  float64x2_t v17;
  double v18;
  double v20;
  double v22;
  float64x2_t v23;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double result;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  double v48;
  __int128 v49;
  double v50;

  if (a1[9])
  {
    v7 = a1[4];
    v8 = a1[8];
    v9 = v7 + 192 * a1[7];
    if (!v8)
      v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - v7) >> 6);
    v10 = v7 + 192 * v8;
    a3.f64[0] = *(float64_t *)(v10 - 32);
    a4.f64[0] = *(float64_t *)(v9 + 160);
    *(_QWORD *)&v11 = *(_OWORD *)&vsubq_f64(a3, a4);
    _Q0 = vsubq_f64(*(float64x2_t *)(v10 - 48), *(float64x2_t *)(v9 + 144));
    a4.f64[0] = *(float64_t *)(v10 - 176);
    _Q3 = *(float64x2_t *)(v10 - 192);
    _D4 = *(double *)(v10 - 152);
    v15 = *(float64x2_t *)(v10 - 168);
    _D6 = *(double *)(v10 - 128);
    v17 = *(float64x2_t *)(v10 - 144);
    v4.f64[0] = *(float64_t *)(v9 + 16);
    v18 = *(double *)(v9 + 40);
    _Q19 = *(float64x2_t *)(v9 + 24);
    v20 = *(double *)(v9 + 64);
    _Q21 = *(float64x2_t *)(v9 + 48);
    v22 = vmlad_n_f64(vmlad_n_f64(a4.f64[0] * *(double *)v9, _D4, _Q19.f64[0]), _D6, _Q21.f64[0]);
    v23 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q3, *(float64x2_t *)v9, 1), v15, _Q19, 1), v17, _Q21, 1);
    __asm
    {
      FMLA            D17, D4, V19.D[1]
      FMLA            D17, D6, V21.D[1]
    }
    v43 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q3, *(double *)v9), v15, _Q19.f64[0]), v17, _Q21.f64[0]);
    v44 = v22;
    v45 = v23;
    v46 = _D17;
    v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q3, v4.f64[0]), v15, v18), v17, v20);
    v48 = vmulq_f64(a4, v4).f64[0] + _D4 * v18 + _D6 * v20;
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D2, D3, V0.D[1] }
    *(double *)a2 = sqrt(vmlad_n_f64(_D2, v11, v11));
    v49 = 0uLL;
    v50 = 0.0;
    sub_20E9733B8(&v43, (double *)&v49);
    _V1.D[1] = *((_QWORD *)&v49 + 1);
    _D3 = *((_QWORD *)&v49 + 1);
    __asm { FMLA            D2, D3, V1.D[1] }
    v34 = a1[4];
    v35 = a1[7];
    v36 = a1[8];
    v37 = *(double *)(v34 + 192 * v35 + 168);
    *(double *)(a2 + 8) = sqrt(_D2 + v50 * v50) * 180.0 / 3.14159265;
    *(double *)(a2 + 16) = v37;
    if (!v36)
      v36 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - v34) >> 6);
    v38 = v34 + 192 * v35;
    v39 = *(_DWORD *)(v38 + 184);
    v40 = v34 + 192 * v36;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v40 - 16);
    LODWORD(v40) = *(_DWORD *)(v40 - 4);
    *(_DWORD *)(a2 + 32) = v39;
    *(_DWORD *)(a2 + 36) = v40;
    result = *(double *)(v38 + 176) - v37;
    *(double *)(a2 + 40) = result;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 16) = _Q0;
    result = NAN;
    *(_QWORD *)(a2 + 32) = -1;
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

uint64_t sub_20F82B8B4(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int32x4_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const double *v39;
  int32x4_t v40;
  const double *v41;
  const double *v42;
  const double *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  int64x2_t v76;
  _BYTE *v82;
  _QWORD *v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  int16x8_t v90;
  uint64_t v91;
  _BOOL4 v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  _BOOL4 v101;
  double v103;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v110;
  int8x16_t v111;
  int64x2_t v113;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int16x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  uint8x8_t v121;
  double v122;
  _BOOL4 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  size_t v136;
  void **p_dst;
  unint64_t v138;
  const void *v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  uint64_t v143;
  size_t v144;
  const char *v145;
  unsigned __int8 v146;
  const char *v147;
  size_t v148;
  _BYTE *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  const char *v154;
  unint64_t v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  size_t v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  size_t v162;
  size_t v163;
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char v169;
  _QWORD *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  const char *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  void *v222;
  void *v223;
  uint64_t v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  size_t v230;
  void **v231;
  unint64_t v232;
  const void **v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  void **v237;
  uint64_t v238;
  size_t v239;
  const char *v240;
  unsigned __int8 v241;
  const char *v242;
  size_t v243;
  _BYTE *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  const char *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  NSObject *v253;
  size_t v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  size_t v257;
  size_t v258;
  _QWORD *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  char v264;
  _QWORD *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  char *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  _QWORD *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  const char *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  unsigned int v313;
  double v314;
  __int128 v315;
  uint64_t *v316;
  uint64_t *v317;
  _QWORD *v318;
  uint64_t v319;
  __int128 v320;
  __int128 v321;
  _QWORD *v322;
  void *v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t *v330;
  uint64_t *v331;
  void *v332;
  uint64_t v333;
  void *v334;
  uint64_t v336;
  uint64_t v337;
  __int128 *v338;
  uint64_t *v339;
  uint64_t **v341;
  uint64_t **v342;
  void **v343;
  _QWORD *v345;
  uint64_t *v346;
  void **v347;
  char *v348;
  float64x2_t v351;
  uint64_t v352;
  uint64_t v353;
  float64x2_t v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t *v357;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v359;
  int v360;
  const char *v361;
  int v362;
  const char *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  void **__dst;
  size_t v367;
  int64_t v368;
  _QWORD v369[2];
  uint64_t v370;
  uint64_t v371;
  const void *v372;
  unint64_t v373;
  const void *v374;
  unint64_t v375;
  void *__p;
  char v377;
  unint64_t v378;
  int v379;
  _BYTE v380[152];
  uint64_t v381;
  __int128 v382;
  std::__shared_weak_count *v383;
  char *v384;
  std::__shared_weak_count *v385;
  _QWORD *v386;
  __int128 v387;
  _BYTE v388[24];
  __int128 v389;
  char *v390;
  size_t v391;
  unint64_t v392;
  char v393;
  _QWORD v394[5];
  float64x2x4_t v395;
  float64x2x4_t v396;
  float64x2x4_t v397;
  float64x2x4_t v398;

  v394[2] = *MEMORY[0x24BDAC8D0];
  v12 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 16) = v12;
  v13 = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a5 + 56);
  v14 = *(_OWORD *)(a5 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 64) = v14;
  v15 = *(_OWORD *)(a5 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 88) = v15;
  v16 = *(_OWORD *)(a5 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a5 + 128);
  *(_OWORD *)(a1 + 112) = v16;
  v17 = *(_OWORD *)(a5 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a5 + 152);
  *(_OWORD *)(a1 + 136) = v17;
  v19 = *(_OWORD *)(a5 + 192);
  v18 = *(_OWORD *)(a5 + 208);
  v20 = *(_OWORD *)(a5 + 176);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a5 + 224);
  *(_OWORD *)(a1 + 192) = v19;
  *(_OWORD *)(a1 + 208) = v18;
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a5 + 160);
  v21 = (__int128 *)(a1 + 232);
  v22 = *(_OWORD *)(a5 + 248);
  v23 = *(_OWORD *)(a5 + 264);
  v24 = *(_OWORD *)(a5 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a5 + 296);
  *(_OWORD *)(a1 + 264) = v23;
  *(_OWORD *)(a1 + 280) = v24;
  *(_OWORD *)(a1 + 248) = v22;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a5 + 232);
  v25 = a1 + 304;
  v26 = 0uLL;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  v27 = (char **)(a1 + 392);
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(v25 + 172) = 0u;
  v29 = *a4;
  v28 = a4[1];
  v338 = v21;
  if (*a4 == v28)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  else
  {
    v30 = v28 - v29 - 32;
    if (v30 >= 0x100)
    {
      v36 = (v30 >> 5) + 1;
      v37 = v36 & 7;
      if ((v36 & 7) == 0)
        v37 = 8;
      v38 = v36 - v37;
      v32 = v29 + 32 * v38;
      v39 = (const double *)(v29 + 136);
      v40 = 0uLL;
      do
      {
        v41 = v39 - 16;
        v42 = v39 - 8;
        v395 = vld4q_f64(v41);
        v396 = vld4q_f64(v42);
        v43 = v39;
        v397 = vld4q_f64(v43);
        v43 += 8;
        v398 = vld4q_f64(v43);
        v395.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v395.val[1], (int64x2_t)v395.val[0]);
        v395.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v396.val[1], (int64x2_t)v396.val[0]), 7uLL);
        *(_QWORD *)&v395.val[1].f64[0] = (-991146299 * LODWORD(v395.val[1].f64[0]));
        v395.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v395.val[0], 7uLL);
        v395.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v397.val[1], (int64x2_t)v397.val[0]), 7uLL);
        *(_QWORD *)&v395.val[2].f64[0] = (-991146299 * LODWORD(v395.val[2].f64[0]));
        *(_QWORD *)&v395.val[2].f64[1] = (-991146299 * LODWORD(v395.val[2].f64[1]));
        *(_QWORD *)&v395.val[1].f64[1] = (-991146299 * LODWORD(v395.val[1].f64[1]));
        *(_QWORD *)&v395.val[0].f64[0] = (-991146299 * LODWORD(v395.val[0].f64[0]));
        v395.val[3] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v398.val[1], (int64x2_t)v398.val[0]), 7uLL);
        *(_QWORD *)&v395.val[0].f64[1] = (-991146299 * LODWORD(v395.val[0].f64[1]));
        *(_QWORD *)&v395.val[3].f64[0] = (-991146299 * LODWORD(v395.val[3].f64[0]));
        *(_QWORD *)&v395.val[3].f64[1] = (-991146299 * LODWORD(v395.val[3].f64[1]));
        v26 = vaddq_s32(v26, vuzp1q_s32((int32x4_t)v395.val[0], (int32x4_t)v395.val[1]));
        v40 = vaddq_s32(v40, vuzp1q_s32((int32x4_t)v395.val[2], (int32x4_t)v395.val[3]));
        v39 += 32;
        v38 -= 8;
      }
      while (v38);
      LODWORD(v31) = vaddvq_s32(vaddq_s32(v40, v26));
    }
    else
    {
      LODWORD(v31) = 0;
      v32 = *a4;
    }
    do
    {
      v31 = v31 - 991146299 * ((*(_QWORD *)(v32 + 16) - *(_QWORD *)(v32 + 8)) >> 7);
      v32 += 32;
    }
    while (v32 != v28);
    *(_DWORD *)(a1 + 488) = v31;
    if ((_DWORD)v31)
    {
      sub_20F27C7D8(v27, v31);
      v33 = *(_DWORD *)(a1 + 488);
      v35 = *(_BYTE **)(a1 + 416);
      v34 = *(char **)(a1 + 424);
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
    }
  }
  v44 = (v33 + 1);
  v45 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 5);
  v46 = v44 - v45;
  if (v44 <= v45)
  {
    if (v44 < v45)
      *(_QWORD *)(a1 + 424) = &v35[96 * v44];
    v52 = *(char **)(a1 + 440);
    v53 = *(char **)(a1 + 448);
    v54 = (v53 - v52) >> 4;
    _CF = v44 >= v54;
    v56 = v44 - v54;
    if (v44 <= v54)
      goto LABEL_49;
  }
  else
  {
    v47 = *(_QWORD *)(a1 + 432);
    if (0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v34) >> 5) >= v46)
    {
      bzero(v34, 96 * ((96 * v46 - 96) / 0x60) + 96);
      *(_QWORD *)(a1 + 424) = &v34[96 * ((96 * v46 - 96) / 0x60) + 96];
    }
    else
    {
      v48 = v46 - 0x5555555555555555 * ((v34 - v35) >> 5);
      if (v48 > 0x2AAAAAAAAAAAAAALL)
        sub_20E867F44();
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v35) >> 5);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x155555555555555)
        v50 = 0x2AAAAAAAAAAAAAALL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 > 0x2AAAAAAAAAAAAAALL)
          goto LABEL_439;
        v51 = (char *)operator new(96 * v50);
      }
      else
      {
        v51 = 0;
      }
      v64 = &v51[32 * ((v34 - v35) >> 5)];
      v65 = &v51[96 * v50];
      bzero(v64, 96 * ((96 * v46 - 96) / 0x60) + 96);
      v66 = &v64[96 * ((96 * v46 - 96) / 0x60) + 96];
      if (v34 != v35)
      {
        do
        {
          v67 = *((_OWORD *)v34 - 5);
          *((_OWORD *)v64 - 6) = *((_OWORD *)v34 - 6);
          *((_OWORD *)v64 - 5) = v67;
          v68 = *((_OWORD *)v34 - 4);
          v69 = *((_OWORD *)v34 - 3);
          v70 = *((_OWORD *)v34 - 1);
          *((_OWORD *)v64 - 2) = *((_OWORD *)v34 - 2);
          *((_OWORD *)v64 - 1) = v70;
          *((_OWORD *)v64 - 4) = v68;
          *((_OWORD *)v64 - 3) = v69;
          v64 -= 96;
          v34 -= 96;
        }
        while (v34 != v35);
        v34 = *(char **)(a1 + 416);
      }
      *(_QWORD *)(a1 + 416) = v64;
      *(_QWORD *)(a1 + 424) = v66;
      *(_QWORD *)(a1 + 432) = v65;
      if (v34)
        operator delete(v34);
    }
    v33 = *(_DWORD *)(a1 + 488);
    v44 = (v33 + 1);
    v52 = *(char **)(a1 + 440);
    v53 = *(char **)(a1 + 448);
    v54 = (v53 - v52) >> 4;
    _CF = v44 >= v54;
    v56 = v44 - v54;
    if (v44 <= v54)
    {
LABEL_49:
      if (_CF)
        goto LABEL_52;
      v63 = &v52[16 * v44];
      goto LABEL_51;
    }
  }
  v57 = *(_QWORD *)(a1 + 456);
  if (v56 <= (v57 - (uint64_t)v53) >> 4)
  {
    v63 = &v53[16 * v56];
LABEL_51:
    *(_QWORD *)(a1 + 448) = v63;
    goto LABEL_52;
  }
  v58 = v57 - (_QWORD)v52;
  if (v58 >> 3 > v44)
    v44 = v58 >> 3;
  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
    v59 = 0xFFFFFFFFFFFFFFFLL;
  else
    v59 = v44;
  if (v59 >> 60)
LABEL_439:
    sub_20E877A38();
  v60 = (char *)operator new(16 * v59);
  v61 = &v60[16 * v54];
  v62 = &v61[16 * v56];
  if (v53 != v52)
  {
    do
    {
      *((_OWORD *)v61 - 1) = *((_OWORD *)v53 - 1);
      v61 -= 16;
      v53 -= 16;
    }
    while (v53 != v52);
    v53 = v52;
  }
  *(_QWORD *)(a1 + 440) = v61;
  *(_QWORD *)(a1 + 448) = v62;
  *(_QWORD *)(a1 + 456) = &v60[16 * v59];
  if (v53)
  {
    operator delete(v53);
    v33 = *(_DWORD *)(a1 + 488);
  }
LABEL_52:
  v71 = (2 * v33 + 2);
  v72 = *(_QWORD *)(a1 + 464);
  v73 = (*(_QWORD *)(a1 + 472) - v72) >> 3;
  if (v71 <= v73)
  {
    if (v71 < v73)
      *(_QWORD *)(a1 + 472) = v72 + 8 * v71;
  }
  else
  {
    sub_20EA6462C((void **)(a1 + 464), v71 - v73);
  }
  sub_20E86BA1C(a1 + 496, a2);
  *(_BYTE *)(a1 + 2272) = a3;
  *(_OWORD *)(a1 + 2276) = 0u;
  *(_OWORD *)(a1 + 2292) = 0u;
  *(_OWORD *)(a1 + 2308) = 0u;
  *(_OWORD *)(a1 + 2324) = 0u;
  *(_OWORD *)(a1 + 2340) = 0u;
  *(_OWORD *)(a1 + 2356) = 0u;
  *(_OWORD *)(a1 + 2372) = 0u;
  *(_OWORD *)(a1 + 2388) = 0u;
  *(_OWORD *)(a1 + 2404) = 0u;
  *(_OWORD *)(a1 + 2420) = 0u;
  *(_OWORD *)(a1 + 2436) = 0u;
  *(_OWORD *)(a1 + 2452) = 0u;
  *(_QWORD *)(a1 + 2468) = 0x200000000;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_BYTE *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2640) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_QWORD *)(a1 + 2648) = 0;
  v74 = operator new(0x120uLL);
  *(_QWORD *)(a1 + 2632) = v74;
  *(_QWORD *)(a1 + 2648) = v74 + 18;
  *v74 = 0u;
  v74[1] = 0u;
  v74[2] = 0u;
  v74[3] = 0u;
  v74[4] = 0u;
  v74[5] = 0u;
  v74[6] = 0u;
  v74[7] = 0u;
  v74[8] = 0u;
  v74[9] = 0u;
  v74[10] = 0u;
  v74[11] = 0u;
  v74[12] = 0u;
  v74[13] = 0u;
  v74[14] = 0u;
  v74[15] = 0u;
  v74[16] = 0u;
  v74[17] = 0u;
  *(_QWORD *)(a1 + 2640) = v74 + 18;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2784) = 0u;
  *(_OWORD *)(a1 + 2800) = 0u;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  *(_DWORD *)(a1 + 2848) = 2;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_BYTE *)(a1 + 3000) = 0;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_QWORD *)(a1 + 3016) = 0;
  *(_QWORD *)(a1 + 3008) = 0;
  *(_QWORD *)(a1 + 3024) = 0;
  v75 = operator new(0x120uLL);
  *(_QWORD *)(a1 + 3008) = v75;
  *(_QWORD *)(a1 + 3024) = v75 + 18;
  *v75 = 0u;
  v75[1] = 0u;
  v75[2] = 0u;
  v75[3] = 0u;
  v75[4] = 0u;
  v75[5] = 0u;
  v75[6] = 0u;
  v75[7] = 0u;
  v75[8] = 0u;
  v75[9] = 0u;
  v75[10] = 0u;
  v75[11] = 0u;
  v75[12] = 0u;
  v75[13] = 0u;
  v75[14] = 0u;
  v75[15] = 0u;
  v75[16] = 0u;
  v75[17] = 0u;
  *(_QWORD *)(a1 + 3016) = v75 + 18;
  *(_QWORD *)(a1 + 3032) = 0;
  *(_QWORD *)(a1 + 3048) = 0;
  *(_QWORD *)(a1 + 3040) = 0;
  sub_20EE88C3C(a1 + 3032, *a4, a4[1], (a4[1] - *a4) >> 5);
  *(_BYTE *)(a1 + 4744) = 0;
  *(_QWORD *)(a1 + 3056) = 0;
  v337 = a1 + 3080;
  *(_BYTE *)(a1 + 3080) = 0;
  v347 = (void **)(a1 + 3056);
  *(_OWORD *)(a1 + 3064) = 0u;
  v76 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 4752) = v76;
  *(int64x2_t *)(a1 + 4768) = v76;
  *(int64x2_t *)(a1 + 4784) = v76;
  *(_OWORD *)(a1 + 4800) = xmmword_2102DB700;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 4816) = _Q0;
  *(_QWORD *)(a1 + 4832) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 4840) = 0;
  *(_OWORD *)(a1 + 4848) = 0u;
  *(_OWORD *)(a1 + 4864) = _Q0;
  *(_QWORD *)(a1 + 4880) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_QWORD *)(a1 + 4968) = 0;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_QWORD *)(a1 + 4912) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 4944) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5024) = 0u;
  *(_QWORD *)(a1 + 5040) = 0;
  *(_OWORD *)(a1 + 4976) = _Q0;
  *(_QWORD *)(a1 + 5016) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 5048) = 0x3FF0000000000000;
  v346 = (uint64_t *)(a1 + 5264);
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 5072) = 0u;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5260) = 0u;
  *(_QWORD *)(a1 + 5288) = -1;
  *(_QWORD *)(a1 + 5280) = -1;
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_DWORD *)(a1 + 5312) = 65793;
  *(_BYTE *)(a1 + 5316) = 1;
  *(_QWORD *)(a1 + 5320) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 5344) = 0;
  *(_OWORD *)(a1 + 5328) = 0u;
  *(_BYTE *)(a1 + 5447) = 7;
  strcpy((char *)(a1 + 5424), "NOT SET");
  *(_BYTE *)(a1 + 5471) = 7;
  strcpy((char *)(a1 + 5448), "NOT SET");
  *(_QWORD *)(a1 + 5472) = 0;
  *(_DWORD *)(a1 + 5480) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v354 = _Q0;
  *(float64x2_t *)(a1 + 5488) = _Q0;
  *(_QWORD *)(a1 + 6016) = a1 + 5504;
  *(_QWORD *)(a1 + 6024) = 64;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_QWORD *)(a1 + 6552) = a1 + 6040;
  *(_QWORD *)(a1 + 6560) = 64;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_QWORD *)(a1 + 7096) = a1 + 6584;
  *(_QWORD *)(a1 + 7104) = 64;
  *(_QWORD *)(a1 + 7128) = 0;
  *(_OWORD *)(a1 + 7112) = 0u;
  *(_QWORD *)(a1 + 7648) = a1 + 7136;
  *(_QWORD *)(a1 + 7656) = 64;
  *(_OWORD *)(a1 + 7696) = 0u;
  *(_OWORD *)(a1 + 7712) = 0u;
  *(_WORD *)(a1 + 7688) = 0;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(_QWORD *)(a1 + 7680) = 0;
  *(_DWORD *)(a1 + 7728) = 1065353216;
  *(_OWORD *)(a1 + 7736) = 0u;
  *(_OWORD *)(a1 + 7752) = 0u;
  *(_DWORD *)(a1 + 7768) = 1065353216;
  v348 = (char *)(a1 + 4744);
  *(_BYTE *)(a1 + 7944) = 0;
  *(_OWORD *)(a1 + 7952) = 0u;
  *(_QWORD *)(a1 + 7976) = 0;
  *(_QWORD *)(a1 + 7984) = 0;
  *(_BYTE *)(a1 + 7888) = 0;
  *(_OWORD *)(a1 + 7872) = 0u;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7840) = 0u;
  *(_OWORD *)(a1 + 7824) = 0u;
  *(_OWORD *)(a1 + 7808) = 0u;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(_OWORD *)(a1 + 7776) = 0u;
  *(_QWORD *)(a1 + 7968) = a1 + 7976;
  sub_20FB44854(a1 + 7992);
  *(_QWORD *)(a1 + 8048) = 0;
  *(_QWORD *)(a1 + 8040) = 0;
  *(_QWORD *)(a1 + 8032) = 1000;
  *(_QWORD *)(a1 + 8168) = 0;
  *(_OWORD *)(a1 + 8056) = 0u;
  *(_OWORD *)(a1 + 8072) = 0u;
  *(_OWORD *)(a1 + 8088) = 0u;
  *(_OWORD *)(a1 + 8104) = 0u;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_OWORD *)(a1 + 8136) = 0u;
  *(_OWORD *)(a1 + 8152) = 0u;
  *(_QWORD *)(a1 + 8176) = 0xFFFFFFFF00000002;
  *(_QWORD *)(a1 + 8184) = 0;
  *(_QWORD *)(a1 + 8200) = 0;
  *(_QWORD *)(a1 + 0x2000) = 0;
  *(_QWORD *)(a1 + 8208) = 0xFFFFFFFF00000002;
  v82 = (_BYTE *)operator new();
  bzero(v82, 0x6C0uLL);
  *v82 = 1;
  *((_QWORD *)v82 + 1) = 0;
  *((_QWORD *)v82 + 2) = 0;
  sub_20EE81D98((uint64_t)(v82 + 24));
  sub_20EE81D98((uint64_t)(v82 + 864));
  v82[1720] = 0;
  *(_OWORD *)(v82 + 1704) = 0u;
  *(_QWORD *)(a1 + 8216) = v82;
  *(_QWORD *)(a1 + 8224) = a8;
  *(_BYTE *)(a1 + 11536) = 0;
  *(_BYTE *)(a1 + 11544) = 0;
  v343 = (void **)(a1 + 11544);
  *(_BYTE *)(a1 + 11600) = 0;
  *(_BYTE *)(a1 + 11608) = 0;
  *(_BYTE *)(a1 + 11632) = 0;
  *(_OWORD *)(a1 + 8232) = 0u;
  *(_OWORD *)(a1 + 8248) = 0u;
  *(_OWORD *)(a1 + 8264) = 0u;
  *(_OWORD *)(a1 + 8280) = 0u;
  *(_OWORD *)(a1 + 8296) = 0u;
  *(_OWORD *)(a1 + 8312) = 0u;
  *(_OWORD *)(a1 + 8328) = 0u;
  *(_OWORD *)(a1 + 8344) = 0u;
  *(_OWORD *)(a1 + 8360) = 0u;
  *(_BYTE *)(a1 + 8376) = 0;
  *(_BYTE *)(a1 + 11664) = 0;
  *(_QWORD *)(a1 + 11656) = 0;
  *(_OWORD *)(a1 + 11640) = 0u;
  *(_DWORD *)(a1 + 11668) = -1;
  *(_BYTE *)(a1 + 11672) = 0;
  *(_DWORD *)(a1 + 11676) = -1;
  *(_BYTE *)(a1 + 11680) = 0;
  *(_QWORD *)(a1 + 11688) = 1;
  *(_DWORD *)(a1 + 11696) = 5;
  *(_OWORD *)(a1 + 11704) = xmmword_2102DCC90;
  *(_QWORD *)(a1 + 11720) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 11728) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 11760) = 0;
  *(_QWORD *)(a1 + 11792) = 0;
  *(_DWORD *)(a1 + 11800) = 0;
  v342 = (uint64_t **)(a1 + 11808);
  *(_QWORD *)(a1 + 11936) = 0;
  *(_OWORD *)(a1 + 11920) = 0u;
  *(_OWORD *)(a1 + 11904) = 0u;
  *(_OWORD *)(a1 + 11888) = 0u;
  *(_OWORD *)(a1 + 11872) = 0u;
  *(_OWORD *)(a1 + 11856) = 0u;
  *(_OWORD *)(a1 + 11840) = 0u;
  *(_OWORD *)(a1 + 11824) = 0u;
  *(_OWORD *)(a1 + 11808) = 0u;
  *(_QWORD *)(a1 + 11944) = &unk_2102DAFF0;
  *(_OWORD *)(a1 + 11968) = 0u;
  *(_OWORD *)(a1 + 11952) = 0u;
  *(_QWORD *)(a1 + 11984) = &unk_2102DAFF0;
  *(_OWORD *)(a1 + 12040) = 0u;
  *(_OWORD *)(a1 + 12024) = 0u;
  *(_OWORD *)(a1 + 12008) = 0u;
  *(_OWORD *)(a1 + 11992) = 0u;
  *(_DWORD *)(a1 + 12056) = 1065353216;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_DWORD *)(a1 + 12096) = 1065353216;
  *(_OWORD *)(a1 + 12104) = 0u;
  *(_OWORD *)(a1 + 12120) = 0u;
  *(_DWORD *)(a1 + 12136) = 1065353216;
  *(_OWORD *)(a1 + 12144) = 0u;
  *(_OWORD *)(a1 + 12160) = 0u;
  *(_DWORD *)(a1 + 12176) = 1065353216;
  *(_OWORD *)(a1 + 12200) = 0u;
  *(_OWORD *)(a1 + 12184) = 0u;
  *(_DWORD *)(a1 + 12216) = 1065353216;
  *(_OWORD *)(a1 + 12240) = 0u;
  *(_OWORD *)(a1 + 12224) = 0u;
  *(_OWORD *)(a1 + 12280) = 0u;
  *(_OWORD *)(a1 + 12264) = 0u;
  *(_QWORD *)(a1 + 12296) = -1;
  v83 = operator new(0x68uLL);
  v83[1] = 0;
  v83[2] = 0;
  *v83 = &off_24CA04560;
  v83[3] = 850045863;
  *((_OWORD *)v83 + 2) = 0u;
  *((_OWORD *)v83 + 3) = 0u;
  *((_OWORD *)v83 + 4) = 0u;
  v83[10] = 0;
  v83[11] = a1 + 12256;
  *(_QWORD *)(a1 + 12304) = v83 + 3;
  *(_QWORD *)(a1 + 12312) = v83;
  *(_OWORD *)(a1 + 12328) = 0u;
  *(_OWORD *)(a1 + 12344) = 0u;
  *(_QWORD *)(a1 + 12360) = -1;
  v84 = operator new(0x68uLL);
  v84[1] = 0;
  v84[2] = 0;
  *v84 = &off_24CA045B0;
  v84[3] = 850045863;
  *((_OWORD *)v84 + 2) = 0u;
  *((_OWORD *)v84 + 3) = 0u;
  *((_OWORD *)v84 + 4) = 0u;
  v84[10] = 0;
  v84[11] = a1 + 12320;
  *(_QWORD *)(a1 + 12368) = v84 + 3;
  *(_QWORD *)(a1 + 12376) = v84;
  v85 = (std::__shared_weak_count *)operator new(0x58uLL);
  v85->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v85->__shared_owners_;
  v85->__shared_weak_owners_ = 0;
  v85->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA044C0;
  *(_OWORD *)&v85[1].__shared_owners_ = 0u;
  v85[2].std::__shared_count = 0u;
  v85[2].__shared_weak_owners_ = -1;
  v87 = (char *)operator new(0x68uLL);
  v345 = (_QWORD *)(a1 + 32);
  v336 = a5 + 32;
  *((_QWORD *)v87 + 1) = 0;
  *((_QWORD *)v87 + 2) = 0;
  *(_QWORD *)v87 = &off_24CA04510;
  *((_OWORD *)v87 + 2) = 0u;
  *((_OWORD *)v87 + 3) = 0u;
  *((_OWORD *)v87 + 4) = 0u;
  *((_QWORD *)v87 + 10) = 0;
  *((_QWORD *)v87 + 11) = v85 + 1;
  *((_QWORD *)v87 + 3) = 850045863;
  v85[3].__vftable = (std::__shared_weak_count_vtbl *)(v87 + 24);
  v85[3].__shared_owners_ = (uint64_t)v87;
  *(_QWORD *)(a1 + 12384) = v85 + 1;
  *(_QWORD *)(a1 + 12392) = v85;
  do
    v88 = __ldxr(p_shared_owners);
  while (__stxr(v88 + 1, p_shared_owners));
  do
    v89 = __ldaxr(p_shared_owners);
  while (__stlxr(v89 - 1, p_shared_owners));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  *(_BYTE *)(a1 + 12512) = 0;
  *(_BYTE *)(a1 + 13720) = 0;
  v339 = (uint64_t *)(a1 + 12440);
  *(_OWORD *)(a1 + 12400) = 0u;
  *(_OWORD *)(a1 + 12416) = 0u;
  *(_OWORD *)(a1 + 12432) = 0u;
  *(_OWORD *)(a1 + 12441) = 0u;
  *(_QWORD *)(a1 + 12464) = 0;
  *(_QWORD *)(a1 + 12480) = 0;
  *(_QWORD *)(a1 + 12472) = 0;
  *(_BYTE *)(a1 + 12488) = 0;
  *(_OWORD *)(a1 + 12520) = 0u;
  *(_OWORD *)(a1 + 12536) = 0u;
  *(_OWORD *)(a1 + 12552) = 0u;
  sub_20F813734(a1 + 13728);
  v90.i64[1] = 0;
  *(_OWORD *)(a1 + 14136) = 0u;
  *(_OWORD *)(a1 + 14152) = 0u;
  *(_DWORD *)(a1 + 14168) = 1065353216;
  *(_OWORD *)(a1 + 14176) = 0u;
  *(_OWORD *)(a1 + 14192) = 0u;
  *(_DWORD *)(a1 + 14208) = 1065353216;
  *(_BYTE *)(a1 + 14376) = 0;
  *(_OWORD *)(a1 + 14384) = 0u;
  *(_OWORD *)(a1 + 14400) = 0u;
  *(_OWORD *)(a1 + 14416) = 0u;
  *(_QWORD *)(a1 + 14432) = 0;
  *(_OWORD *)(a1 + 14216) = 0u;
  *(_BYTE *)(a1 + 14232) = 0;
  *(_DWORD *)(a1 + 14440) = 1065353216;
  *(_OWORD *)(a1 + 14448) = 0u;
  *(_OWORD *)(a1 + 14464) = 0u;
  *(_OWORD *)(a1 + 14480) = 0u;
  *(_OWORD *)(a1 + 14496) = 0u;
  *(_OWORD *)(a1 + 14512) = 0u;
  *(_OWORD *)(a1 + 14528) = 0u;
  *(_OWORD *)(a1 + 14544) = 0u;
  *(_QWORD *)(a1 + 14560) = 0;
  *(_QWORD *)(a1 + 14568) = 1;
  *(_DWORD *)(a1 + 14576) = 5;
  *(_QWORD *)(a1 + 14584) = 0;
  *(_OWORD *)(a1 + 14592) = xmmword_2103B83A0;
  *(_QWORD *)(a1 + 14608) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 14616) = 0;
  *(_BYTE *)(a1 + 14624) = 0;
  *(_OWORD *)(a1 + 14632) = 0u;
  *(_OWORD *)(a1 + 14648) = 0u;
  *(_DWORD *)(a1 + 14664) = 1065353216;
  *(_BYTE *)(a1 + 14672) = 0;
  *(_QWORD *)(a1 + 14696) = 0;
  *(_OWORD *)(a1 + 14680) = 0u;
  *(_QWORD *)(a1 + 14704) = 1;
  *(_DWORD *)(a1 + 14712) = 5;
  *(_OWORD *)(a1 + 14720) = xmmword_2102DCC90;
  *(_OWORD *)(a1 + 14736) = xmmword_2103853D0;
  *(_QWORD *)(a1 + 14752) = 0;
  *(_BYTE *)(a1 + 14760) = 0;
  *(_OWORD *)(a1 + 14768) = 0u;
  *(_OWORD *)(a1 + 14784) = 0u;
  *(_DWORD *)(a1 + 14800) = 1065353216;
  *(_BYTE *)(a1 + 14808) = 0;
  *(_OWORD *)(a1 + 14816) = 0u;
  *(_OWORD *)(a1 + 14832) = 0u;
  *(_OWORD *)(a1 + 14848) = 0u;
  *(_OWORD *)(a1 + 14864) = 0u;
  *(_OWORD *)(a1 + 14880) = 0u;
  *(_OWORD *)(a1 + 14896) = 0u;
  *(_OWORD *)(a1 + 14912) = 0u;
  *(_OWORD *)(a1 + 14928) = 0u;
  *(_OWORD *)(a1 + 14944) = 0u;
  *(_OWORD *)(a1 + 14960) = 0u;
  *(_QWORD *)(a1 + 14976) = 0;
  *(_QWORD *)(a1 + 14984) = 1;
  *(_DWORD *)(a1 + 14992) = 5;
  *(_QWORD *)(a1 + 15000) = 0;
  *(_OWORD *)(a1 + 15008) = xmmword_2103B83A0;
  *(_QWORD *)(a1 + 15024) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 15032) = 0;
  *(_BYTE *)(a1 + 15040) = 0;
  *(_OWORD *)(a1 + 15048) = 0u;
  *(_OWORD *)(a1 + 15064) = 0u;
  *(_DWORD *)(a1 + 15080) = 1065353216;
  *(_BYTE *)(a1 + 15088) = 0;
  *(_QWORD *)(a1 + 15096) = 1;
  *(_DWORD *)(a1 + 15104) = 5;
  *(_QWORD *)(a1 + 15112) = 0;
  *(_OWORD *)(a1 + 15120) = xmmword_2103B83A0;
  *(_QWORD *)(a1 + 15136) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 15144) = 0;
  *(_BYTE *)(a1 + 15152) = 0;
  *(_OWORD *)(a1 + 15160) = 0u;
  *(_OWORD *)(a1 + 15176) = 0u;
  *(_DWORD *)(a1 + 15192) = 1065353216;
  *(_BYTE *)(a1 + 15200) = 0;
  *(_QWORD *)(a1 + 15336) = 0;
  *(_OWORD *)(a1 + 15304) = 0u;
  *(_OWORD *)(a1 + 15320) = 0u;
  *(_OWORD *)(a1 + 15272) = 0u;
  *(_OWORD *)(a1 + 15288) = 0u;
  *(_OWORD *)(a1 + 15240) = 0u;
  *(_OWORD *)(a1 + 15256) = 0u;
  *(_OWORD *)(a1 + 15208) = 0u;
  *(_OWORD *)(a1 + 15224) = 0u;
  *(float64x2_t *)(a1 + 15344) = v354;
  *(_QWORD *)(a1 + 15360) = -1;
  *(_QWORD *)(a1 + 15440) = 0;
  *(_QWORD *)(a1 + 15398) = 0;
  *(_OWORD *)(a1 + 15384) = 0u;
  *(_OWORD *)(a1 + 15368) = 0u;
  *(_QWORD *)(a1 + 15416) = 0;
  *(_QWORD *)(a1 + 15408) = 0;
  *(_QWORD *)(a1 + 15429) = 0;
  *(_QWORD *)(a1 + 15424) = 0;
  *(_BYTE *)(a1 + 15448) = 1;
  *(_QWORD *)(a1 + 15488) = 0;
  *(_OWORD *)(a1 + 15472) = 0u;
  *(_OWORD *)(a1 + 15456) = 0u;
  *(_DWORD *)(a1 + 15496) = 1065353216;
  *(_DWORD *)(a1 + 15504) = 0;
  *(_QWORD *)(a1 + 15520) = 0;
  *(_QWORD *)(a1 + 15512) = 0;
  *(_DWORD *)(a1 + 15528) = 0;
  *(_DWORD *)(a1 + 15536) = 0;
  *(_QWORD *)(a1 + 15552) = 0;
  *(_QWORD *)(a1 + 15544) = 0;
  *(_DWORD *)(a1 + 15560) = 0;
  *(_OWORD *)(a1 + 15584) = 0u;
  *(_OWORD *)(a1 + 15568) = 0u;
  *(_DWORD *)(a1 + 15600) = 1065353216;
  *(_OWORD *)(a1 + 15608) = 0u;
  *(_OWORD *)(a1 + 15624) = 0u;
  *(_DWORD *)(a1 + 15640) = 1065353216;
  *(_QWORD *)(a1 + 15656) = 0;
  *(_QWORD *)(a1 + 15648) = 0;
  *(_WORD *)(a1 + 15672) = 0;
  v91 = *(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 15664) = 0;
  v92 = v91 < 0x7FF0000000000000;
  *(_QWORD *)(a1 + 15680) = a7;
  if (v91 <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v92 = (*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v92 = (*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if ((*(_QWORD *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        v92 = (*(_QWORD *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    }
  }
  v341 = (uint64_t **)(a1 + 14224);
  if (!v92)
    goto LABEL_70;
  v93 = (*v345 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if ((*v345 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v93 = (*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v93 = (*(_QWORD *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v93)
  {
LABEL_70:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 191, (uint64_t)"init_inertial_sensor_model_.validate()", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_93;
    }
  }
  v95 = *a4;
  v94 = a4[1];
  if (*a4 != v94)
  {
    v351 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    while (1)
    {
      v97 = *(_QWORD *)(v95 + 8);
      v96 = *(_QWORD *)(v95 + 16);
      if (v97 == v96)
        goto LABEL_92;
      v98 = 1;
      do
      {
        v100 = 0;
        do
        {
          v101 = (*(_QWORD *)(v97 + v100) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
          if ((*(_QWORD *)(v97 + v100) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            break;
          _ZF = v100 == 64;
          v100 += 8;
        }
        while (!_ZF);
        v99 = 0;
        if (v101)
        {
          _Q3 = *(float64x2_t *)(v97 + 24);
          v103 = *(double *)(v97 + 64);
          _Q5 = *(float64x2_t *)(v97 + 48);
          _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v97, (int64x2_t)_Q3);
          v105 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v97, (int64x2_t)_Q3);
          v106.f64[0] = *(float64_t *)(v97 + 16);
          v106.f64[1] = *(float64_t *)(v97 + 40);
          v107 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)v97), v105, *(float64x2_t *)v97, 1), v106, v106.f64[0]);
          _D1 = *(_QWORD *)(v97 + 8);
          __asm { FMLA            D18, D1, V5.D[1] }
          v110.f64[0] = _D18 + v103 * v106.f64[0];
          v111 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q3.f64[0]), v105, _Q3, 1), v106, v106.f64[1]);
          _Q3.f64[0] = *(float64_t *)(v97 + 32);
          __asm { FMLA            D0, D3, V5.D[1] }
          *(double *)v90.i64 = _D0 + v103 * v106.f64[1];
          v113 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q5.f64[0]), v105, _Q5, 1), v106, v103);
          _Q6.f64[0] = *(float64_t *)(v97 + 56);
          __asm { FMLA            D3, D6, V5.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + v103 * v103;
          v115 = vaddq_f64((float64x2_t)vextq_s8(v111, (int8x16_t)v107, 8uLL), v354);
          v107.f64[0] = _Q3.f64[0] + -1.0;
          *(_QWORD *)&v110.f64[1] = v111.i64[0];
          v116 = vabsq_f64(v115);
          v117 = vabsq_f64(v107);
          v118 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v351, vabsq_f64(v110)), (int32x4_t)vcgtq_f64(v351, vabsq_f64((float64x2_t)vzip1q_s64((int64x2_t)v90, v113))));
          v119 = (int32x4_t)vcgtq_f64(v351, v116);
          v120 = (int32x4_t)vcgtq_f64(v351, v117);
          v90 = (int16x8_t)vuzp1q_s32(v119, v120);
          v121 = (uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16(v90, v118)));
          v121.i8[0] = vmaxv_u8(v121);
          if ((v121.i8[0] & 1) == 0)
          {
            v122 = fabs(*(double *)&v113.i64[1]);
            if (v122 < 0.00001)
            {
              v123 = (*(_QWORD *)(v97 + 72) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if ((*(_QWORD *)(v97 + 72) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                v123 = (*(_QWORD *)(v97 + 80) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                if ((*(_QWORD *)(v97 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                  v123 = (*(_QWORD *)(v97 + 88) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              }
              if (v123 && *(_BYTE *)(v97 + 1536))
                v99 = sub_20EA82D10(v97 + 96, v122, *(double *)&v121, *(double *)v90.i64, *(double *)v120.i64, (int64x2_t)v117, v351, _Q6);
              else
                v99 = 0;
            }
          }
        }
        v98 &= v99;
        v97 += 1664;
      }
      while (v97 != v96);
      if ((v98 & 1) == 0)
      {
LABEL_92:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 193, (uint64_t)"camera_set_sensor_model.validate()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
      }
      v95 += 32;
      if (v95 == v94)
        goto LABEL_94;
    }
LABEL_93:
    abort();
  }
LABEL_94:
  v124 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 4752) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 4768) = v124;
  *(_OWORD *)(a1 + 4784) = *(_OWORD *)v345;
  *(_QWORD *)(a1 + 4800) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 4808) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 4816) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 4832) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 4856) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 4840) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 4880) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 4864) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 4904) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 4888) = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 4976) = *(_QWORD *)(a1 + 224);
  v125 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 4944) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 4960) = v125;
  v126 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 4912) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 4928) = v126;
  v127 = *v338;
  v128 = v338[1];
  v129 = v338[2];
  v130 = v338[3];
  *(_QWORD *)(a1 + 5048) = *((_QWORD *)v338 + 8);
  *(_OWORD *)(a1 + 5016) = v129;
  *(_OWORD *)(a1 + 5032) = v130;
  *(_OWORD *)(a1 + 4984) = v127;
  *(_OWORD *)(a1 + 5000) = v128;
  if (v347 != (void **)a4)
    sub_20F04F4F0(v347, (uint64_t *)*a4, (uint64_t *)a4[1], (a4[1] - *a4) >> 5);
  if (*v348 == *(_BYTE *)(a6 + 1664))
  {
    if (*v348)
      sub_20EB8200C(v337, a6);
  }
  else
  {
    if (*v348)
    {
      sub_20EB8188C(v337);
      v131 = 0;
    }
    else
    {
      sub_20EB81E74(v337, a6);
      v131 = 1;
    }
    *v348 = v131;
  }
  sub_20FC8CA7C(*(unsigned __int8 **)(a1 + 8216), a1 + 768);
  *(_DWORD *)(a1 + 2276) = 1;
  sub_20F82FD50(&v381);
  if (**(int **)(v381 + 56) > 3)
    goto LABEL_243;
  v132 = *(unsigned __int8 *)(v381 + 72);
  v133 = sub_20E8C31DC(v381, "OSLogSurrogateAppender", 1, 0);
  v134 = v133;
  if (!v132 && !v133)
    goto LABEL_243;
  sub_20E863438((uint64_t)v369);
  v135 = sub_20E86A980(&v370, (uint64_t)"IMU noise sigma: ", 17);
  *(_QWORD *)v388 = a1 + 4752;
  sub_20EA94E38(v135, (__int128 **)v388);
  v355 = v134;
  if ((v379 & 0x10) != 0)
  {
    v138 = v378;
    if (v378 < v375)
    {
      v378 = v375;
      v138 = v375;
    }
    v139 = v374;
    v136 = v138 - (_QWORD)v374;
    if (v138 - (unint64_t)v374 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_164;
  }
  else
  {
    if ((v379 & 8) == 0)
    {
      v136 = 0;
      HIBYTE(v368) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_119;
    }
    v139 = v372;
    v136 = v373 - (_QWORD)v372;
    if (v373 - (unint64_t)v372 > 0x7FFFFFFFFFFFFFF7)
LABEL_164:
      sub_20E860B7C();
  }
  if (v136 >= 0x17)
  {
    v140 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v136 | 7) != 0x17)
      v140 = v136 | 7;
    v141 = v140 + 1;
    p_dst = (void **)operator new(v140 + 1);
    v368 = v141 | 0x8000000000000000;
    __dst = p_dst;
    v367 = v136;
    goto LABEL_118;
  }
  HIBYTE(v368) = v136;
  p_dst = (void **)&__dst;
  if (v136)
LABEL_118:
    memmove(p_dst, v139, v136);
LABEL_119:
  *((_BYTE *)p_dst + v136) = 0;
  v357 = &v381;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v359 = std::chrono::system_clock::now().__d_.__rep_;
  v360 = 3;
  v361 = "unknown file";
  v362 = 200;
  v365 = 0;
  v363 = "unknown function";
  v364 = 0;
  if (v368 >= 0)
    v142 = (void **)&__dst;
  else
    v142 = __dst;
  v143 = *v357;
  if (*(char *)(*v357 + 39) < 0)
  {
    v145 = *(const char **)(v143 + 16);
    v144 = *(_QWORD *)(v143 + 24);
  }
  else
  {
    v144 = *(unsigned __int8 *)(*v357 + 39);
    v145 = (const char *)(*v357 + 16);
  }
  v352 = *v357 + 16;
  v146 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v146 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v388);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v388);
    if ((_BYTE)v389 && (v388[23] & 0x80000000) != 0)
      operator delete(*(void **)v388);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v147 = byte_254A4A4F8;
  else
    v147 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v148 = byte_254A4A4F8[23];
  else
    v148 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v388 = os_log_create(v147, v145);
  v149 = &v388[8];
  if (v148 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v148 >= 0x17)
  {
    v150 = v132;
    v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v148 | 7) != 0x17)
      v151 = v148 | 7;
    v152 = v151 + 1;
    v149 = operator new(v151 + 1);
    *(_QWORD *)&v388[16] = v148;
    *(_QWORD *)&v389 = v152 | 0x8000000000000000;
    *(_QWORD *)&v388[8] = v149;
    v132 = v150;
    goto LABEL_139;
  }
  BYTE7(v389) = v148;
  if (v148)
LABEL_139:
    memmove(v149, v147, v148);
  v149[v148] = 0;
  BYTE8(v389) = 1;
  v153 = (char *)&v390;
  if (v144 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v154 = (const char *)v142;
  if (v144 >= 0x17)
  {
    v157 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v157 = v144 | 7;
    v158 = v157 + 1;
    v155 = v355;
    v153 = (char *)operator new(v157 + 1);
    v391 = v144;
    v392 = v158 | 0x8000000000000000;
    v390 = v153;
  }
  else
  {
    HIBYTE(v392) = v144;
    v155 = v355;
    if (!v144)
    {
      LOBYTE(v390) = 0;
      v393 = 1;
      v156 = *(NSObject **)v388;
      if ((SHIBYTE(v392) & 0x80000000) == 0)
        goto LABEL_144;
      goto LABEL_150;
    }
  }
  memmove(v153, v145, v144);
  v153[v144] = 0;
  v393 = 1;
  v156 = *(NSObject **)v388;
  if ((SHIBYTE(v392) & 0x80000000) == 0)
  {
LABEL_144:
    if (!BYTE8(v389))
      goto LABEL_153;
    goto LABEL_151;
  }
LABEL_150:
  operator delete(v390);
  if (!BYTE8(v389))
    goto LABEL_153;
LABEL_151:
  if (SBYTE7(v389) < 0)
    operator delete(*(void **)&v388[8]);
LABEL_153:
  if (*(_QWORD *)v388)
    os_release(*(void **)v388);
  if (!v155 || !*(_QWORD *)(v155 + 24))
  {
    os_log_type_enabled(v156, OS_LOG_TYPE_INFO);
    *(_DWORD *)v388 = 136315138;
    *(_QWORD *)&v388[4] = v154;
    v165 = (void *)_os_log_send_and_compose_impl();
    if (v165)
      free(v165);
    goto LABEL_229;
  }
  v159 = _os_log_pack_size();
  v160 = (std::__shared_weak_count_vtbl *)operator new(v159, (std::align_val_t)8uLL);
  v161 = (std::__shared_weak_count *)operator new();
  v161->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v161->__shared_owners_ = 0;
  v161->__shared_weak_owners_ = 0;
  v161[1].__vftable = v160;
  *(_QWORD *)&v382 = v160;
  *((_QWORD *)&v382 + 1) = v160;
  v385 = 0;
  v383 = v161;
  v384 = 0;
  v162 = strlen(v154);
  if (v162 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v163 = v162;
  if (v162 >= 0x17)
  {
    v166 = (v162 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v162 | 7) != 0x17)
      v166 = v162 | 7;
    v167 = v166 + 1;
    v164 = operator new(v166 + 1);
    *(_QWORD *)&v387 = v163;
    *((_QWORD *)&v387 + 1) = v167 | 0x8000000000000000;
    v386 = v164;
    goto LABEL_168;
  }
  HIBYTE(v387) = v162;
  v164 = &v386;
  if (v162)
LABEL_168:
    memcpy(v164, v154, v163);
  *((_BYTE *)v164 + v163) = 0;
  v168 = v386;
  v394[0] = v387;
  *(_QWORD *)((char *)v394 + 7) = *(_QWORD *)((char *)&v387 + 7);
  v169 = HIBYTE(v387);
  v170 = operator new(0x38uLL);
  v170[1] = 0;
  v170[2] = 0;
  v170[3] = off_24C9ABC20;
  *v170 = &off_24C9ABBD0;
  v171 = v394[0];
  v170[4] = v168;
  v170[5] = v171;
  *(_QWORD *)((char *)v170 + 47) = *(_QWORD *)((char *)v394 + 7);
  *((_BYTE *)v170 + 55) = v169;
  v394[0] = 0;
  *(_QWORD *)((char *)v394 + 7) = 0;
  v172 = v385;
  v384 = (char *)(v170 + 3);
  v385 = (std::__shared_weak_count *)v170;
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  *(_OWORD *)v388 = v382;
  v175 = v384;
  *(_QWORD *)&v388[16] = v383;
  if (v383)
  {
    v176 = (unint64_t *)&v383->__shared_owners_;
    do
      v177 = __ldxr(v176);
    while (__stxr(v177 + 1, v176));
  }
  v178 = v385;
  *(_QWORD *)&v389 = v175;
  *((_QWORD *)&v389 + 1) = v385;
  if (v385)
  {
    v179 = (unint64_t *)&v385->__shared_owners_;
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
    v390 = v175;
    do
      v181 = __ldaxr(v179);
    while (__stlxr(v181 - 1, v179));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  else
  {
    v390 = v175;
  }
  v182 = v383;
  if (v383)
  {
    v183 = (unint64_t *)&v383->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = *(_QWORD *)v388;
  if (v390[31] >= 0)
    v186 = v390 + 8;
  else
    v186 = (char *)*((_QWORD *)v390 + 1);
  v187 = _os_log_pack_fill();
  *(_DWORD *)v187 = 136315138;
  *(_QWORD *)(v187 + 4) = v186;
  v188 = operator new();
  v189 = *(unsigned __int8 *)(v143 + 39);
  v190 = *(_QWORD *)(v143 + 16);
  v191 = *(_QWORD *)(v143 + 24);
  v192 = v389;
  *(_OWORD *)(v188 + 8) = *(_OWORD *)&v388[8];
  if ((v189 & 0x80u) != 0)
    v189 = v191;
  else
    v190 = v352;
  *(_QWORD *)v188 = v185;
  *(_QWORD *)&v388[8] = 0;
  *(_QWORD *)&v388[16] = 0;
  *(_OWORD *)(v188 + 24) = v192;
  v389 = 0uLL;
  *(_QWORD *)(v188 + 40) = v190;
  *(_QWORD *)(v188 + 48) = v189;
  *(_BYTE *)(v188 + 56) = 1;
  v386 = 0;
  *(_QWORD *)&v382 = v188;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v155 + 24) + 40))(*(_QWORD *)(v155 + 24), &v382);
  v193 = v382;
  *(_QWORD *)&v382 = 0;
  if (v193)
  {
    v194 = *(std::__shared_weak_count **)(v193 + 32);
    if (v194)
    {
      v195 = (unint64_t *)&v194->__shared_owners_;
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    v197 = *(std::__shared_weak_count **)(v193 + 16);
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    MEMORY[0x212BC6398](v193, 0x10F0C40B62ED6C6);
    v200 = v386;
    v386 = 0;
    if (v200)
    {
      v201 = (std::__shared_weak_count *)v200[4];
      if (v201)
      {
        v202 = (unint64_t *)&v201->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      v204 = (std::__shared_weak_count *)v200[2];
      if (v204)
      {
        v205 = (unint64_t *)&v204->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      MEMORY[0x212BC6398](v200, 0x10F0C40B62ED6C6);
    }
  }
  v207 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
  if (*((_QWORD *)&v389 + 1))
  {
    v208 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = *(std::__shared_weak_count **)&v388[16];
  if (*(_QWORD *)&v388[16])
  {
    v211 = (unint64_t *)(*(_QWORD *)&v388[16] + 8);
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
LABEL_229:
  if (v132)
  {
    v213 = (const char *)&__dst;
    if (v368 < 0)
      v213 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v357, "%s", v213);
    sub_20E863570((uint64_t)&v357);
  }
  sub_20E863570((uint64_t)&v357);
  v214 = v365;
  if (v365)
  {
    v215 = (unint64_t *)&v365->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  if (SHIBYTE(v368) < 0)
    operator delete(__dst);
  v369[0] = *MEMORY[0x24BEDB7F0];
  v217 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v369 + *(_QWORD *)(v369[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v370 = v217;
  v371 = MEMORY[0x24BEDB848] + 16;
  if (v377 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v380);
LABEL_243:
  switch(*(_DWORD *)(a1 + 744))
  {
    case 0:
      LODWORD(v369[0]) = 0;
      v218 = operator new();
      sub_20FDB66F8(v218, v369);
      goto LABEL_249;
    case 1:
      LODWORD(v369[0]) = 1;
      v218 = operator new();
      sub_20FDB66F8(v218, v369);
      goto LABEL_249;
    case 2:
      LODWORD(v369[0]) = 2;
      v218 = operator new();
      sub_20FDB66F8(v218, v369);
      goto LABEL_249;
    case 3:
      LODWORD(v369[0]) = 3;
      v218 = operator new();
      sub_20FDB66F8(v218, v369);
      goto LABEL_249;
    case 4:
      LODWORD(v369[0]) = 4;
      v218 = operator new();
      sub_20FDB66F8(v218, v369);
LABEL_249:
      v219 = *v346;
      *v346 = v218;
      if (v219)
      {
        v220 = sub_20FB40740(v219);
        MEMORY[0x212BC6398](v220, 0x10A0C40BBD844B3);
      }
      v221 = *(double *)(a1 + 752);
      if (v221 > 0.0)
        *(double *)(*v346 + 408) = v221;
      if (*v348)
      {
        if (*(_BYTE *)(a1 + 11600))
        {
          v222 = *(void **)(a1 + 11568);
          if (v222)
          {
            *(_QWORD *)(a1 + 11576) = v222;
            operator delete(v222);
          }
          v223 = *v343;
          if (*v343)
          {
            *(_QWORD *)(a1 + 11552) = v223;
            operator delete(v223);
          }
        }
        v224 = *(_QWORD *)(a1 + 624);
        *(_OWORD *)v343 = 0u;
        *(_OWORD *)(a1 + 11560) = 0u;
        *(_OWORD *)(a1 + 11576) = 0u;
        *(_QWORD *)(a1 + 11592) = v224;
        *(_BYTE *)(a1 + 11600) = 1;
      }
      if (!*(_BYTE *)(a1 + 1552))
        goto LABEL_406;
      if ((byte_254A6AE00 & 1) != 0)
        goto LABEL_403;
      if (*(_DWORD *)(a1 + 1948) < 0x321u)
        goto LABEL_403;
      byte_254A6AE00 = 1;
      sub_20F82FD50(&v381);
      if (**(int **)(v381 + 56) > 3)
        goto LABEL_403;
      v225 = *(unsigned __int8 *)(v381 + 72);
      v226 = sub_20E8C31DC(v381, "OSLogSurrogateAppender", 1, 0);
      v227 = v226;
      if (!v225 && !v226)
        goto LABEL_403;
      sub_20E863438((uint64_t)v369);
      sub_20E86A980(&v370, (uint64_t)"Reducing the max_num_map_constraints from ", 42);
      v228 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v228, (uint64_t)" to ", 4);
      v229 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v229, (uint64_t)" for LPFG.", 10);
      v356 = v227;
      if ((v379 & 0x10) != 0)
      {
        v232 = v378;
        if (v378 < v375)
        {
          v378 = v375;
          v232 = v375;
        }
        v233 = &v374;
      }
      else
      {
        if ((v379 & 8) == 0)
        {
          v230 = 0;
          HIBYTE(v368) = 0;
          v231 = (void **)&__dst;
          goto LABEL_281;
        }
        v233 = &v372;
        v232 = v373;
      }
      v234 = *v233;
      v230 = v232 - (_QWORD)*v233;
      if (v230 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v230 >= 0x17)
      {
        v235 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v230 | 7) != 0x17)
          v235 = v230 | 7;
        v236 = v235 + 1;
        v231 = (void **)operator new(v235 + 1);
        v368 = v236 | 0x8000000000000000;
        __dst = v231;
        v367 = v230;
      }
      else
      {
        HIBYTE(v368) = v232 - *(_BYTE *)v233;
        v231 = (void **)&__dst;
        if (!v230)
          goto LABEL_281;
      }
      memmove(v231, v234, v230);
LABEL_281:
      *((_BYTE *)v231 + v230) = 0;
      v357 = &v381;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v359 = std::chrono::system_clock::now().__d_.__rep_;
      v360 = 3;
      v361 = "unknown file";
      v362 = 249;
      v365 = 0;
      v363 = "unknown function";
      v364 = 0;
      if (v368 >= 0)
        v237 = (void **)&__dst;
      else
        v237 = __dst;
      v238 = *v357;
      if (*(char *)(*v357 + 39) < 0)
      {
        v240 = *(const char **)(v238 + 16);
        v239 = *(_QWORD *)(v238 + 24);
      }
      else
      {
        v239 = *(unsigned __int8 *)(*v357 + 39);
        v240 = (const char *)(*v357 + 16);
      }
      v353 = *v357 + 16;
      v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v241 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v388);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v388);
        if ((_BYTE)v389 && (v388[23] & 0x80000000) != 0)
          operator delete(*(void **)v388);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v242 = byte_254A4A4F8;
      else
        v242 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v243 = byte_254A4A4F8[23];
      else
        v243 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v388 = os_log_create(v242, v240);
      v244 = &v388[8];
      if (v243 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v243 >= 0x17)
      {
        v245 = v225;
        v246 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v243 | 7) != 0x17)
          v246 = v243 | 7;
        v247 = v246 + 1;
        v244 = operator new(v246 + 1);
        *(_QWORD *)&v388[16] = v243;
        *(_QWORD *)&v389 = v247 | 0x8000000000000000;
        *(_QWORD *)&v388[8] = v244;
        v225 = v245;
      }
      else
      {
        BYTE7(v389) = v243;
        if (!v243)
          goto LABEL_302;
      }
      memmove(v244, v242, v243);
LABEL_302:
      v244[v243] = 0;
      BYTE8(v389) = 1;
      v248 = (char *)&v390;
      if (v239 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v249 = (const char *)v237;
      if (v239 >= 0x17)
      {
        v251 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v239 | 7) != 0x17)
          v251 = v239 | 7;
        v252 = v251 + 1;
        v250 = v356;
        v248 = (char *)operator new(v251 + 1);
        v391 = v239;
        v392 = v252 | 0x8000000000000000;
        v390 = v248;
      }
      else
      {
        HIBYTE(v392) = v239;
        v250 = v356;
        if (!v239)
          goto LABEL_310;
      }
      memmove(v248, v240, v239);
LABEL_310:
      v248[v239] = 0;
      v393 = 1;
      v253 = *(NSObject **)v388;
      if (SHIBYTE(v392) < 0)
        operator delete(v390);
      if (BYTE8(v389) && SBYTE7(v389) < 0)
        operator delete(*(void **)&v388[8]);
      if (*(_QWORD *)v388)
        os_release(*(void **)v388);
      if (v250 && *(_QWORD *)(v250 + 24))
      {
        v254 = _os_log_pack_size();
        v255 = (std::__shared_weak_count_vtbl *)operator new(v254, (std::align_val_t)8uLL);
        v256 = (std::__shared_weak_count *)operator new();
        v256->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v256->__shared_owners_ = 0;
        v256->__shared_weak_owners_ = 0;
        v256[1].__vftable = v255;
        *(_QWORD *)&v382 = v255;
        *((_QWORD *)&v382 + 1) = v255;
        v385 = 0;
        v383 = v256;
        v384 = 0;
        v257 = strlen(v249);
        if (v257 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v258 = v257;
        if (v257 >= 0x17)
        {
          v261 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v257 | 7) != 0x17)
            v261 = v257 | 7;
          v262 = v261 + 1;
          v259 = operator new(v261 + 1);
          *(_QWORD *)&v387 = v258;
          *((_QWORD *)&v387 + 1) = v262 | 0x8000000000000000;
          v386 = v259;
        }
        else
        {
          HIBYTE(v387) = v257;
          v259 = &v386;
          if (!v257)
          {
LABEL_329:
            *((_BYTE *)v259 + v258) = 0;
            v263 = v386;
            v394[0] = v387;
            *(_QWORD *)((char *)v394 + 7) = *(_QWORD *)((char *)&v387 + 7);
            v264 = HIBYTE(v387);
            v265 = operator new(0x38uLL);
            v265[1] = 0;
            v265[2] = 0;
            v265[3] = off_24C9ABC20;
            *v265 = &off_24C9ABBD0;
            v266 = v394[0];
            v265[4] = v263;
            v265[5] = v266;
            *(_QWORD *)((char *)v265 + 47) = *(_QWORD *)((char *)v394 + 7);
            *((_BYTE *)v265 + 55) = v264;
            v394[0] = 0;
            *(_QWORD *)((char *)v394 + 7) = 0;
            v267 = v385;
            v384 = (char *)(v265 + 3);
            v385 = (std::__shared_weak_count *)v265;
            if (v267)
            {
              v268 = (unint64_t *)&v267->__shared_owners_;
              do
                v269 = __ldaxr(v268);
              while (__stlxr(v269 - 1, v268));
              if (!v269)
              {
                ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                std::__shared_weak_count::__release_weak(v267);
              }
            }
            *(_OWORD *)v388 = v382;
            v270 = v384;
            *(_QWORD *)&v388[16] = v383;
            if (v383)
            {
              v271 = (unint64_t *)&v383->__shared_owners_;
              do
                v272 = __ldxr(v271);
              while (__stxr(v272 + 1, v271));
            }
            v273 = v385;
            *(_QWORD *)&v389 = v270;
            *((_QWORD *)&v389 + 1) = v385;
            if (v385)
            {
              v274 = (unint64_t *)&v385->__shared_owners_;
              do
                v275 = __ldxr(v274);
              while (__stxr(v275 + 1, v274));
              v390 = v270;
              do
                v276 = __ldaxr(v274);
              while (__stlxr(v276 - 1, v274));
              if (!v276)
              {
                ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                std::__shared_weak_count::__release_weak(v273);
              }
            }
            else
            {
              v390 = v270;
            }
            v277 = v383;
            if (v383)
            {
              v278 = (unint64_t *)&v383->__shared_owners_;
              do
                v279 = __ldaxr(v278);
              while (__stlxr(v279 - 1, v278));
              if (!v279)
              {
                ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                std::__shared_weak_count::__release_weak(v277);
              }
            }
            v280 = *(_QWORD *)v388;
            if (v390[31] >= 0)
              v281 = v390 + 8;
            else
              v281 = (char *)*((_QWORD *)v390 + 1);
            v282 = _os_log_pack_fill();
            *(_DWORD *)v282 = 136315138;
            *(_QWORD *)(v282 + 4) = v281;
            v283 = operator new();
            v284 = *(unsigned __int8 *)(v238 + 39);
            v285 = *(_QWORD *)(v238 + 16);
            v286 = *(_QWORD *)(v238 + 24);
            v287 = v389;
            *(_OWORD *)(v283 + 8) = *(_OWORD *)&v388[8];
            if ((v284 & 0x80u) != 0)
              v284 = v286;
            else
              v285 = v353;
            *(_QWORD *)v283 = v280;
            *(_QWORD *)&v388[8] = 0;
            *(_QWORD *)&v388[16] = 0;
            *(_OWORD *)(v283 + 24) = v287;
            v389 = 0uLL;
            *(_QWORD *)(v283 + 40) = v285;
            *(_QWORD *)(v283 + 48) = v284;
            *(_BYTE *)(v283 + 56) = 1;
            v386 = 0;
            *(_QWORD *)&v382 = v283;
            (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v250 + 24) + 40))(*(_QWORD *)(v250 + 24), &v382);
            v288 = v382;
            *(_QWORD *)&v382 = 0;
            if (v288)
            {
              v289 = *(std::__shared_weak_count **)(v288 + 32);
              if (v289)
              {
                v290 = (unint64_t *)&v289->__shared_owners_;
                do
                  v291 = __ldaxr(v290);
                while (__stlxr(v291 - 1, v290));
                if (!v291)
                {
                  ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                  std::__shared_weak_count::__release_weak(v289);
                }
              }
              v292 = *(std::__shared_weak_count **)(v288 + 16);
              if (v292)
              {
                v293 = (unint64_t *)&v292->__shared_owners_;
                do
                  v294 = __ldaxr(v293);
                while (__stlxr(v294 - 1, v293));
                if (!v294)
                {
                  ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                  std::__shared_weak_count::__release_weak(v292);
                }
              }
              MEMORY[0x212BC6398](v288, 0x10F0C40B62ED6C6);
              v295 = v386;
              v386 = 0;
              if (v295)
              {
                v296 = (std::__shared_weak_count *)v295[4];
                if (v296)
                {
                  v297 = (unint64_t *)&v296->__shared_owners_;
                  do
                    v298 = __ldaxr(v297);
                  while (__stlxr(v298 - 1, v297));
                  if (!v298)
                  {
                    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                    std::__shared_weak_count::__release_weak(v296);
                  }
                }
                v299 = (std::__shared_weak_count *)v295[2];
                if (v299)
                {
                  v300 = (unint64_t *)&v299->__shared_owners_;
                  do
                    v301 = __ldaxr(v300);
                  while (__stlxr(v301 - 1, v300));
                  if (!v301)
                  {
                    ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                    std::__shared_weak_count::__release_weak(v299);
                  }
                }
                MEMORY[0x212BC6398](v295, 0x10F0C40B62ED6C6);
              }
            }
            v302 = (std::__shared_weak_count *)*((_QWORD *)&v389 + 1);
            if (*((_QWORD *)&v389 + 1))
            {
              v303 = (unint64_t *)(*((_QWORD *)&v389 + 1) + 8);
              do
                v304 = __ldaxr(v303);
              while (__stlxr(v304 - 1, v303));
              if (!v304)
              {
                ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                std::__shared_weak_count::__release_weak(v302);
              }
            }
            v305 = *(std::__shared_weak_count **)&v388[16];
            if (*(_QWORD *)&v388[16])
            {
              v306 = (unint64_t *)(*(_QWORD *)&v388[16] + 8);
              do
                v307 = __ldaxr(v306);
              while (__stlxr(v307 - 1, v306));
              if (!v307)
              {
                ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                std::__shared_weak_count::__release_weak(v305);
              }
            }
            goto LABEL_389;
          }
        }
        memcpy(v259, v249, v258);
        goto LABEL_329;
      }
      os_log_type_enabled(v253, OS_LOG_TYPE_INFO);
      *(_DWORD *)v388 = 136315138;
      *(_QWORD *)&v388[4] = v249;
      v260 = (void *)_os_log_send_and_compose_impl();
      if (v260)
        free(v260);
LABEL_389:
      if (v225)
      {
        v308 = (const char *)&__dst;
        if (v368 < 0)
          v308 = (const char *)__dst;
        sub_20E8C003C((uint64_t)&v357, "%s", v308);
        sub_20E863570((uint64_t)&v357);
      }
      sub_20E863570((uint64_t)&v357);
      v309 = v365;
      if (v365)
      {
        v310 = (unint64_t *)&v365->__shared_owners_;
        do
          v311 = __ldaxr(v310);
        while (__stlxr(v311 - 1, v310));
        if (!v311)
        {
          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
          std::__shared_weak_count::__release_weak(v309);
        }
      }
      if (SHIBYTE(v368) < 0)
        operator delete(__dst);
      v369[0] = *MEMORY[0x24BEDB7F0];
      v312 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v369 + *(_QWORD *)(v369[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v370 = v312;
      v371 = MEMORY[0x24BEDB848] + 16;
      if (v377 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x212BC6290](v380);
LABEL_403:
      v313 = *(_DWORD *)(a1 + 1948);
      if (v313 >= 0x320)
        v313 = 800;
      *(_DWORD *)(a1 + 1948) = v313;
LABEL_406:
      v314 = *(double *)(a1 + 656);
      if (v314 != 0.0
        && v314 >= *(double *)(a1 + 648)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 149, (uint64_t)"config_.conservative_tracking_speeds_m_s_sq[2] < config_.conservative_tracking_speeds_m_s_sq[1] || ExactlyEqual(config_.conservative_tracking_speeds_m_s_sq[2], 0.0)", 164, (uint64_t)"Threshold of conservative mode #2 should be smaller than that of mode #1, or mode #2 is disabled.", 97, (void (*)(void **))sub_21023DDB0)|| (*(double *)(a1 + 680) <= 0.0 || *(double *)(a1 + 688) <= 0.0 || *(double *)(a1 + 696) <= 0.0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 153, (uint64_t)"std::all_of(config_.conservative_tracking_feature_inlier_threshold_scale.begin(), config_.conservative_tracking_feature_inlier_threshold_scale.end(), [](const double d) { return d > 0.0; }) && \"c"
                      "onservative_tracking_feature_inlier_threshold_scale must be greater than 0.\"",
             271,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_93;
      }
      v315 = *(_OWORD *)(a1 + 1152);
      *(_OWORD *)(a1 + 11688) = *(_OWORD *)(a1 + 1136);
      *(_OWORD *)(a1 + 11704) = v315;
      *(_OWORD *)(a1 + 11720) = *(_OWORD *)(a1 + 1168);
      if (*(_BYTE *)(a1 + 728) && *(_BYTE *)(a1 + 11680) != 2)
        *(_OWORD *)(a1 + 11704) = xmmword_2102DCC90;
      v316 = (uint64_t *)operator new();
      sub_20F813468(v316, a1 + 1640);
      v317 = *v342;
      *v342 = v316;
      if (v317)
      {
        v318 = sub_20FB402E0(v317);
        MEMORY[0x212BC6398](v318, 0x10E0C40D3649541);
      }
      v319 = operator new();
      v320 = *(_OWORD *)(a1 + 1608);
      v321 = *(_OWORD *)(a1 + 1624);
      *(_OWORD *)(v319 + 32) = 0u;
      *(_OWORD *)v319 = v320;
      *(_OWORD *)(v319 + 16) = v321;
      *(_OWORD *)(v319 + 48) = 0u;
      *(_OWORD *)(v319 + 64) = 0u;
      *(_OWORD *)(v319 + 80) = 0u;
      *(_QWORD *)(v319 + 96) = 0;
      sub_20F82AD68((char **)(v319 + 32), *(_QWORD *)v319);
      v322 = (_QWORD *)*v339;
      *v339 = v319;
      if (v322)
      {
        v323 = (void *)v322[10];
        if (v323)
        {
          v322[11] = v323;
          operator delete(v323);
        }
        v324 = (void *)v322[4];
        if (v324)
        {
          v322[5] = v324;
          operator delete(v324);
        }
        MEMORY[0x212BC6398](v322, 0x1020C40637D9F4FLL);
      }
      v325 = operator new();
      *(_QWORD *)v325 = a1 + 1696;
      *(_WORD *)(v325 + 8) = 0;
      *(_QWORD *)(v325 + 12) = -1;
      if (!*(_DWORD *)(a1 + 1716)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquares/include/VIO/BatchLeastSquares/AbruptStopMotionIndicator.h", 37, (uint64_t)"config_.lag_ba_counts_to_reset_abrupt_stop_flag > 0", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v326 = *(_QWORD *)(a1 + 11816);
      *(_QWORD *)(a1 + 11816) = v325;
      if (v326)
        MEMORY[0x212BC6398](v326, 0x1060C4076F66C1CLL);
      v327 = *(unsigned int *)(a1 + 2036);
      *(_QWORD *)(a1 + 13728) = v327;
      sub_20F11D04C((_QWORD *)(a1 + 13736), v327);
      *(_QWORD *)(a1 + 13768) = 0;
      *(_QWORD *)(a1 + 13760) = 0;
      *(_QWORD *)(a1 + 13776) = 0;
      *(_QWORD *)(a1 + 13856) = 0;
      *(_OWORD *)(a1 + 13808) = 0u;
      *(_OWORD *)(a1 + 13824) = 0u;
      *(_OWORD *)(a1 + 13840) = xmmword_210313B70;
      v328 = *(unsigned int *)(a1 + 2036);
      *(_QWORD *)(a1 + 13864) = v328;
      sub_20F11D04C((_QWORD *)(a1 + 13872), v328);
      *(_QWORD *)(a1 + 13904) = 0;
      *(_QWORD *)(a1 + 13896) = 0;
      *(_QWORD *)(a1 + 13912) = 0;
      *(_QWORD *)(a1 + 13992) = 0;
      *(_OWORD *)(a1 + 13944) = 0u;
      *(_OWORD *)(a1 + 13960) = 0u;
      *(_QWORD *)(a1 + 13976) = 0xFFEFFFFFFFFFFFFFLL;
      *(_QWORD *)(a1 + 13984) = 0x7FEFFFFFFFFFFFFFLL;
      v329 = *(unsigned int *)(a1 + 2036);
      *(_QWORD *)(a1 + 14000) = v329;
      sub_20F11D04C((_QWORD *)(a1 + 14008), v329);
      *(_QWORD *)(a1 + 14040) = 0;
      *(_QWORD *)(a1 + 14032) = 0;
      *(_QWORD *)(a1 + 14048) = 0;
      *(_QWORD *)(a1 + 14128) = 0;
      *(_OWORD *)(a1 + 14080) = 0u;
      *(_OWORD *)(a1 + 14096) = 0u;
      *(_OWORD *)(a1 + 14112) = xmmword_210313B70;
      if (*(_BYTE *)(a1 + 2104))
      {
        v330 = (uint64_t *)operator new();
        sub_20F81779C(v330, (__int128 *)(a1 + 2104), v336);
        v331 = *v341;
        *v341 = v330;
        if (v331)
        {
          if (*((_BYTE *)v331 + 160))
          {
            v332 = (void *)v331[17];
            if (v332)
            {
              v331[18] = (uint64_t)v332;
              operator delete(v332);
            }
          }
          v333 = *v331;
          *v331 = 0;
          if (v333)
          {
            v334 = *(void **)(v333 + 96);
            if (v334)
            {
              *(_QWORD *)(v333 + 104) = v334;
              operator delete(v334);
            }
            MEMORY[0x212BC6398](v333, 0x1020C408C878A71);
          }
          MEMORY[0x212BC6398](v331, 0x1020C403C65F4F4);
        }
      }
      return a1;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 225, (uint64_t)"", 0, (uint64_t)"Unknown health module.", 22, (void (*)(void **))sub_21023DDB0);
      goto LABEL_93;
  }
}

void sub_20F82E754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,_QWORD *a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,_QWORD *a54,uint64_t **a55,_QWORD **a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *a64;
  void **a65;
  _BYTE *a66;
  uint64_t a67;
  uint64_t v67;
  uint64_t v68;
  void **v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;

  if (*(_BYTE *)(v68 - 184) && *(char *)(v68 - 185) < 0)
    operator delete(*(void **)(v68 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x200]);
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  sub_20E863784((uint64_t)&STACK[0x260]);
  v70 = (void **)(v67 + 14816);
  sub_20F82F1DC((_QWORD *)(v67 + 15232));
  v71 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v67 + 15216) = v71;
    operator delete(v71);
  }
  sub_20F25CF20(a13);
  sub_20FB403A0(v67 + 14840);
  if (*v70)
    operator delete(*v70);
  sub_20F82F20C(a14);
  sub_20FB40448(a15);
  if (*(_BYTE *)(a67 + 2840))
  {
    v72 = *(void **)(v67 + 14352);
    if (v72)
    {
      *(_QWORD *)(v67 + 14360) = v72;
      operator delete(v72);
    }
  }
  sub_20F82F144(a55);
  sub_20E8C25A8(v67 + 14176);
  sub_20E8C25A8(a16);
  sub_20F813898(a17);
  v73 = *(void **)(v67 + 12544);
  if (v73)
  {
    operator delete(v73);
    v74 = *a18;
    if (!*a18)
    {
LABEL_15:
      sub_20F82F0E0(a54);
      v75 = *a19;
      if (!*a19)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v74 = *a18;
    if (!*a18)
      goto LABEL_15;
  }
  *(_QWORD *)(v67 + 12528) = v74;
  operator delete(v74);
  sub_20F82F0E0(a54);
  v75 = *a19;
  if (!*a19)
  {
LABEL_17:
    sub_20E86665C(a20);
    sub_20FB44BBC(a21);
    sub_20FB44AB8(a22);
    sub_20FB40538(a23);
    sub_20E8C25A8(v67 + 12024);
    if (*(_QWORD *)(v67 + 12008))
    {
      operator delete(*(void **)(v67 + 11984));
      *(_QWORD *)(v67 + 11984) = &unk_2102DAFF0;
      *a11 = 0u;
      a11[1] = 0u;
      if (!*(_QWORD *)(v67 + 11968))
      {
LABEL_19:
        v76 = *(void **)(v67 + 11920);
        if (!v76)
          goto LABEL_20;
        goto LABEL_30;
      }
    }
    else if (!*(_QWORD *)(v67 + 11968))
    {
      goto LABEL_19;
    }
    operator delete(*(void **)(v67 + 11944));
    *(_QWORD *)(v67 + 11944) = &unk_2102DAFF0;
    *(_OWORD *)(v67 + 11952) = 0u;
    *(_OWORD *)(v67 + 11968) = 0u;
    v76 = *(void **)(v67 + 11920);
    if (!v76)
    {
LABEL_20:
      v77 = *(void **)(v67 + 11896);
      if (!v77)
        goto LABEL_21;
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v76);
    v77 = *(void **)(v67 + 11896);
    if (!v77)
    {
LABEL_21:
      v78 = *(void **)(v67 + 11872);
      if (!v78)
        goto LABEL_22;
      goto LABEL_32;
    }
LABEL_31:
    *(_QWORD *)(v67 + 11904) = v77;
    operator delete(v77);
    v78 = *(void **)(v67 + 11872);
    if (!v78)
    {
LABEL_22:
      v79 = *(void **)(v67 + 11848);
      if (!v79)
        goto LABEL_23;
      goto LABEL_33;
    }
LABEL_32:
    *(_QWORD *)(v67 + 11880) = v78;
    operator delete(v78);
    v79 = *(void **)(v67 + 11848);
    if (!v79)
    {
LABEL_23:
      v80 = *(void **)(v67 + 11824);
      if (!v80)
        goto LABEL_24;
      goto LABEL_34;
    }
LABEL_33:
    *(_QWORD *)(v67 + 11856) = v79;
    operator delete(v79);
    v80 = *(void **)(v67 + 11824);
    if (!v80)
    {
LABEL_24:
      v81 = (_QWORD *)(v67 + 11768);
      v82 = *(_QWORD *)(v67 + 11816);
      *(_QWORD *)(v67 + 11816) = 0;
      if (!v82)
        goto LABEL_26;
      goto LABEL_25;
    }
LABEL_34:
    *(_QWORD *)(v67 + 11832) = v80;
    operator delete(v80);
    v81 = (_QWORD *)(v67 + 11768);
    v82 = *(_QWORD *)(v67 + 11816);
    *(_QWORD *)(v67 + 11816) = 0;
    if (!v82)
    {
LABEL_26:
      sub_20F82F09C(a56);
      v83 = *(_QWORD **)(v67 + 11792);
      if (v83 == v81)
      {
        v84 = 4;
        v83 = v81;
      }
      else
      {
        if (!v83)
          goto LABEL_39;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_39:
      v85 = *(_QWORD **)(v67 + 11760);
      if (v85 == (_QWORD *)(v67 + 11736))
      {
        v86 = 4;
        v85 = (_QWORD *)(v67 + 11736);
      }
      else
      {
        if (!v85)
        {
          v87 = v67 + 8376;
          v88 = *a24;
          if (*a24)
            goto LABEL_50;
          goto LABEL_43;
        }
        v86 = 5;
      }
      (*(void (**)(void))(*v85 + 8 * v86))();
      v87 = v67 + 8376;
      v88 = *a24;
      if (*a24)
      {
LABEL_50:
        MEMORY[0x212BC6368](v88, 0x1000C8000313F17);
        v89 = a67;
        if (!*(_BYTE *)(a67 + 96))
          goto LABEL_53;
LABEL_51:
        v90 = *(_QWORD *)(v89 + 72);
        if (v90)
          MEMORY[0x212BC6368](v90, 0x1000C8000313F17);
LABEL_53:
        sub_20F82F264(a57);
        sub_20F819098(v87);
        v91 = *(void **)(v67 + 8352);
        if (v91)
        {
          *(_QWORD *)(v67 + 8360) = v91;
          operator delete(v91);
          v92 = *(void **)(v67 + 8328);
          if (!v92)
          {
LABEL_55:
            v93 = *(void **)(v67 + 8304);
            if (!v93)
              goto LABEL_56;
            goto LABEL_69;
          }
        }
        else
        {
          v92 = *(void **)(v67 + 8328);
          if (!v92)
            goto LABEL_55;
        }
        *(_QWORD *)(v67 + 8336) = v92;
        operator delete(v92);
        v93 = *(void **)(v67 + 8304);
        if (!v93)
        {
LABEL_56:
          v94 = *(void **)(v67 + 8280);
          if (!v94)
            goto LABEL_57;
          goto LABEL_70;
        }
LABEL_69:
        *(_QWORD *)(v67 + 8312) = v93;
        operator delete(v93);
        v94 = *(void **)(v67 + 8280);
        if (!v94)
        {
LABEL_57:
          v95 = (uint64_t *)(v67 + 8216);
          v96 = *(void **)(v67 + 8256);
          if (!v96)
            goto LABEL_58;
          goto LABEL_71;
        }
LABEL_70:
        *(_QWORD *)(v67 + 8288) = v94;
        operator delete(v94);
        v95 = (uint64_t *)(v67 + 8216);
        v96 = *(void **)(v67 + 8256);
        if (!v96)
        {
LABEL_58:
          v97 = *a25;
          if (!*a25)
            goto LABEL_60;
          goto LABEL_59;
        }
LABEL_71:
        *(_QWORD *)(v67 + 8264) = v96;
        operator delete(v96);
        v97 = *a25;
        if (!*a25)
        {
LABEL_60:
          sub_20F82F2AC(v95);
          v98 = *(_QWORD *)(v67 + 8184);
          if (v98)
            MEMORY[0x212BC6368](v98, 0x1000C8000313F17);
          v99 = *(_QWORD *)(v67 + 8152);
          if (v99)
            MEMORY[0x212BC6368](v99, 0x1000C8000313F17);
          sub_20EBCBAD8(a26);
          sub_20F82F2F0(v67 + 7968);
          sub_20E86665C(v67 + 7952);
          sub_20EBCBAD8(a27);
          sub_20E8C25A8(a28);
          sub_20E8C25A8(v67 + 7696);
          sub_20F82F358(a29);
          sub_20F82F39C(a64);
          sub_20F0E71B8(a30);
          if (*a66)
            sub_20EB8188C(a38);
          sub_20EA896D4(a65);
          sub_20EA896D4(a31);
          sub_20F103380(a32);
          sub_20F103380(a33);
          sub_20E869D64(a34);
          sub_20F0E0C74(a36);
          sub_20F82F3E0(a35);
          _Unwind_Resume(a1);
        }
LABEL_59:
        *(_QWORD *)(v67 + 8240) = v97;
        operator delete(v97);
        goto LABEL_60;
      }
LABEL_43:
      v89 = a67;
      if (!*(_BYTE *)(a67 + 96))
        goto LABEL_53;
      goto LABEL_51;
    }
LABEL_25:
    MEMORY[0x212BC6398](v82, 0x1060C4076F66C1CLL);
    goto LABEL_26;
  }
LABEL_16:
  *(_QWORD *)(v67 + 12408) = v75;
  operator delete(v75);
  goto LABEL_17;
}

_QWORD **sub_20F82F09C(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FB402E0(v2);
    MEMORY[0x212BC6398](v3, 0x10E0C40D3649541);
  }
  return a1;
}

_QWORD *sub_20F82F0E0(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[10];
    if (v3)
    {
      v2[11] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[4];
    if (v4)
    {
      v2[5] = v4;
      operator delete(v4);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40637D9F4FLL);
  }
  return a1;
}

uint64_t **sub_20F82F144(uint64_t **a1)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)v2 + 160))
    {
      v3 = (void *)v2[17];
      if (v3)
      {
        v2[18] = (uint64_t)v3;
        operator delete(v3);
      }
    }
    v4 = *v2;
    *v2 = 0;
    if (v4)
    {
      v5 = *(void **)(v4 + 96);
      if (v5)
      {
        *(_QWORD *)(v4 + 104) = v5;
        operator delete(v5);
      }
      MEMORY[0x212BC6398](v4, 0x1020C408C878A71);
    }
    MEMORY[0x212BC6398](v2, 0x1020C403C65F4F4);
  }
  return a1;
}

_QWORD *sub_20F82F1DC(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[52];
  if (v2)
  {
    a1[53] = v2;
    operator delete(v2);
  }
  return sub_20F04F084(a1);
}

uint64_t sub_20F82F20C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F82F264(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t *sub_20F82F2AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FB405F8(v2);
    MEMORY[0x212BC6398](v3, 0x1032C40599FD789);
  }
  return a1;
}

uint64_t sub_20F82F2F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_20E8E90DC(a1 + 24);
  sub_20EE7D0A8(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_20F82F358(uint64_t a1)
{
  uint64_t v2;

  sub_20F2C524C(a1 + 112);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  return a1;
}

uint64_t *sub_20F82F39C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20FB40740(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C40BBD844B3);
  }
  return a1;
}

uint64_t sub_20F82F3E0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 40);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20F82F448(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  _QWORD *v111;
  _QWORD *v112;
  void *v113;
  void *v114;

  v2 = (_QWORD *)(a1 + 15232);
  v3 = *(void **)(a1 + 15648);
  if (v3)
  {
    *(_QWORD *)(a1 + 15656) = v3;
    operator delete(v3);
  }
  sub_20F04F084(v2);
  v4 = *(void **)(a1 + 15208);
  if (v4)
  {
    *(_QWORD *)(a1 + 15216) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 15176);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 15160);
  *(_QWORD *)(a1 + 15160) = 0;
  if (v7)
    operator delete(v7);
  sub_20FB403A0(a1 + 14840);
  v8 = *(void **)(a1 + 14816);
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 14784);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 14768);
  *(_QWORD *)(a1 + 14768) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void **)(a1 + 14680);
  if (v12)
  {
    *(_QWORD *)(a1 + 14688) = v12;
    operator delete(v12);
  }
  sub_20FB40448(a1 + 14384);
  if (*(_BYTE *)(a1 + 14376))
  {
    v13 = *(void **)(a1 + 14352);
    if (v13)
    {
      *(_QWORD *)(a1 + 14360) = v13;
      operator delete(v13);
    }
  }
  v14 = *(uint64_t **)(a1 + 14224);
  *(_QWORD *)(a1 + 14224) = 0;
  if (v14)
  {
    if (*((_BYTE *)v14 + 160))
    {
      v15 = (void *)v14[17];
      if (v15)
      {
        v14[18] = (uint64_t)v15;
        operator delete(v15);
      }
    }
    v16 = *v14;
    *v14 = 0;
    if (v16)
    {
      v17 = *(void **)(v16 + 96);
      if (v17)
      {
        *(_QWORD *)(v16 + 104) = v17;
        operator delete(v17);
      }
      MEMORY[0x212BC6398](v16, 0x1020C408C878A71);
    }
    MEMORY[0x212BC6398](v14, 0x1020C403C65F4F4);
  }
  v18 = *(_QWORD **)(a1 + 14192);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = *(void **)(a1 + 14176);
  *(_QWORD *)(a1 + 14176) = 0;
  if (v20)
    operator delete(v20);
  v21 = *(_QWORD **)(a1 + 14152);
  if (v21)
  {
    do
    {
      v22 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  v23 = *(void **)(a1 + 14136);
  *(_QWORD *)(a1 + 14136) = 0;
  if (v23)
    operator delete(v23);
  v24 = *(void **)(a1 + 14056);
  if (v24)
  {
    *(_QWORD *)(a1 + 14064) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 14008);
  if (v25)
  {
    *(_QWORD *)(a1 + 14016) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 13920);
  if (v26)
  {
    *(_QWORD *)(a1 + 13928) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 13872);
  if (v27)
  {
    *(_QWORD *)(a1 + 13880) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 13784);
  if (v28)
  {
    *(_QWORD *)(a1 + 13792) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 13736);
  if (v29)
  {
    *(_QWORD *)(a1 + 13744) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 12544);
  if (v30)
    operator delete(v30);
  v31 = *(void **)(a1 + 12520);
  if (v31)
  {
    *(_QWORD *)(a1 + 12528) = v31;
    operator delete(v31);
  }
  v32 = *(_QWORD **)(a1 + 12440);
  *(_QWORD *)(a1 + 12440) = 0;
  if (v32)
  {
    v33 = (void *)v32[10];
    if (v33)
    {
      v32[11] = v33;
      operator delete(v33);
    }
    v34 = (void *)v32[4];
    if (v34)
    {
      v32[5] = v34;
      operator delete(v34);
    }
    MEMORY[0x212BC6398](v32, 0x1020C40637D9F4FLL);
  }
  v35 = *(void **)(a1 + 12400);
  if (v35)
  {
    *(_QWORD *)(a1 + 12408) = v35;
    operator delete(v35);
  }
  v36 = *(std::__shared_weak_count **)(a1 + 12392);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_20FB44BBC(a1 + 12320);
  sub_20FB44AB8(a1 + 12256);
  sub_20FB40538(a1 + 12064);
  v39 = *(_QWORD **)(a1 + 12040);
  if (v39)
  {
    do
    {
      v40 = (_QWORD *)*v39;
      operator delete(v39);
      v39 = v40;
    }
    while (v40);
  }
  v41 = *(void **)(a1 + 12024);
  *(_QWORD *)(a1 + 12024) = 0;
  if (v41)
    operator delete(v41);
  if (*(_QWORD *)(a1 + 12008))
  {
    operator delete(*(void **)(a1 + 11984));
    *(_QWORD *)(a1 + 11984) = &unk_2102DAFF0;
    *(_OWORD *)(a1 + 11992) = 0u;
    *(_OWORD *)(a1 + 12008) = 0u;
  }
  if (*(_QWORD *)(a1 + 11968))
  {
    operator delete(*(void **)(a1 + 11944));
    *(_QWORD *)(a1 + 11944) = &unk_2102DAFF0;
    *(_OWORD *)(a1 + 11952) = 0u;
    *(_OWORD *)(a1 + 11968) = 0u;
  }
  v42 = *(void **)(a1 + 11920);
  if (v42)
    operator delete(v42);
  v43 = *(void **)(a1 + 11896);
  if (v43)
  {
    *(_QWORD *)(a1 + 11904) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(a1 + 11872);
  if (v44)
  {
    *(_QWORD *)(a1 + 11880) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(a1 + 11848);
  if (v45)
  {
    *(_QWORD *)(a1 + 11856) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(a1 + 11824);
  if (v46)
  {
    *(_QWORD *)(a1 + 11832) = v46;
    operator delete(v46);
  }
  v47 = *(_QWORD *)(a1 + 11816);
  *(_QWORD *)(a1 + 11816) = 0;
  if (v47)
    MEMORY[0x212BC6398](v47, 0x1060C4076F66C1CLL);
  v48 = *(_QWORD **)(a1 + 11808);
  *(_QWORD *)(a1 + 11808) = 0;
  if (v48)
  {
    v49 = sub_20FB402E0(v48);
    MEMORY[0x212BC6398](v49, 0x10E0C40D3649541);
  }
  v50 = *(_QWORD **)(a1 + 11792);
  if (v50 == (_QWORD *)(a1 + 11768))
  {
    v51 = 4;
    v50 = (_QWORD *)(a1 + 11768);
  }
  else
  {
    if (!v50)
      goto LABEL_93;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_93:
  v52 = *(_QWORD **)(a1 + 11760);
  if (v52 == (_QWORD *)(a1 + 11736))
  {
    v53 = 4;
    v52 = (_QWORD *)(a1 + 11736);
  }
  else
  {
    if (!v52)
      goto LABEL_98;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_98:
  v54 = *(_QWORD *)(a1 + 11640);
  if (v54)
    MEMORY[0x212BC6368](v54, 0x1000C8000313F17);
  if (*(_BYTE *)(a1 + 11632))
  {
    v55 = *(_QWORD *)(a1 + 11608);
    if (v55)
      MEMORY[0x212BC6368](v55, 0x1000C8000313F17);
  }
  if (*(_BYTE *)(a1 + 11600))
  {
    v56 = *(void **)(a1 + 11568);
    if (v56)
    {
      *(_QWORD *)(a1 + 11576) = v56;
      operator delete(v56);
    }
    v57 = *(void **)(a1 + 11544);
    if (v57)
    {
      *(_QWORD *)(a1 + 11552) = v57;
      operator delete(v57);
    }
  }
  if (*(_BYTE *)(a1 + 11536))
  {
    if (*(_BYTE *)(a1 + 8872))
    {
      v58 = *(void **)(a1 + 8800);
      if (v58)
      {
        *(_QWORD *)(a1 + 8808) = v58;
        operator delete(v58);
      }
    }
  }
  v59 = *(void **)(a1 + 8352);
  if (v59)
  {
    *(_QWORD *)(a1 + 8360) = v59;
    operator delete(v59);
  }
  v60 = *(void **)(a1 + 8328);
  if (v60)
  {
    *(_QWORD *)(a1 + 8336) = v60;
    operator delete(v60);
  }
  v61 = *(void **)(a1 + 8304);
  if (v61)
  {
    *(_QWORD *)(a1 + 8312) = v61;
    operator delete(v61);
  }
  v62 = *(void **)(a1 + 8280);
  if (v62)
  {
    *(_QWORD *)(a1 + 8288) = v62;
    operator delete(v62);
  }
  v63 = *(void **)(a1 + 8256);
  if (v63)
  {
    *(_QWORD *)(a1 + 8264) = v63;
    operator delete(v63);
  }
  v64 = *(void **)(a1 + 8232);
  if (v64)
  {
    *(_QWORD *)(a1 + 8240) = v64;
    operator delete(v64);
  }
  v65 = *(_QWORD *)(a1 + 8216);
  *(_QWORD *)(a1 + 8216) = 0;
  if (v65)
  {
    v66 = sub_20FB405F8(v65);
    MEMORY[0x212BC6398](v66, 0x1032C40599FD789);
  }
  v67 = *(_QWORD *)(a1 + 8184);
  if (v67)
    MEMORY[0x212BC6368](v67, 0x1000C8000313F17);
  v68 = *(_QWORD *)(a1 + 8152);
  if (v68)
    MEMORY[0x212BC6368](v68, 0x1000C8000313F17);
  v69 = *(void **)(a1 + 8104);
  if (v69)
  {
    *(_QWORD *)(a1 + 8112) = v69;
    operator delete(v69);
  }
  v70 = *(void **)(a1 + 8056);
  if (v70)
  {
    *(_QWORD *)(a1 + 8064) = v70;
    operator delete(v70);
  }
  v71 = *(std::__shared_weak_count **)(a1 + 8048);
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_20E8E90DC(a1 + 7992);
  sub_20EE7D0A8(*(_QWORD **)(a1 + 7976));
  v74 = *(std::__shared_weak_count **)(a1 + 7960);
  if (!v74)
    goto LABEL_143;
  v75 = (unint64_t *)&v74->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (v76)
  {
LABEL_143:
    v77 = *(void **)(a1 + 7824);
    if (!v77)
      goto LABEL_145;
    goto LABEL_144;
  }
  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
  std::__shared_weak_count::__release_weak(v74);
  v77 = *(void **)(a1 + 7824);
  if (v77)
  {
LABEL_144:
    *(_QWORD *)(a1 + 7832) = v77;
    operator delete(v77);
  }
LABEL_145:
  v78 = *(void **)(a1 + 7776);
  if (v78)
  {
    *(_QWORD *)(a1 + 7784) = v78;
    operator delete(v78);
  }
  v79 = *(_QWORD **)(a1 + 7752);
  if (v79)
  {
    do
    {
      v80 = (_QWORD *)*v79;
      operator delete(v79);
      v79 = v80;
    }
    while (v80);
  }
  v81 = *(void **)(a1 + 7736);
  *(_QWORD *)(a1 + 7736) = 0;
  if (v81)
    operator delete(v81);
  v82 = *(_QWORD **)(a1 + 7712);
  if (v82)
  {
    do
    {
      v83 = (_QWORD *)*v82;
      operator delete(v82);
      v82 = v83;
    }
    while (v83);
  }
  v84 = *(void **)(a1 + 7696);
  *(_QWORD *)(a1 + 7696) = 0;
  if (v84)
    operator delete(v84);
  sub_20F2C524C(a1 + 5424);
  v85 = *(_QWORD *)(a1 + 5328);
  if (v85)
    MEMORY[0x212BC6368](v85, 0x1000C8000313F17);
  v86 = *(_QWORD *)(a1 + 5264);
  *(_QWORD *)(a1 + 5264) = 0;
  if (v86)
  {
    v87 = sub_20FB40740(v86);
    MEMORY[0x212BC6398](v87, 0x10A0C40BBD844B3);
  }
  v88 = *(void **)(a1 + 5176);
  if (v88)
  {
    *(_QWORD *)(a1 + 5184) = v88;
    operator delete(v88);
  }
  v89 = *(void **)(a1 + 5152);
  if (v89)
  {
    *(_QWORD *)(a1 + 5160) = v89;
    operator delete(v89);
  }
  v90 = *(void **)(a1 + 5128);
  if (v90)
  {
    *(_QWORD *)(a1 + 5136) = v90;
    operator delete(v90);
  }
  v91 = *(void **)(a1 + 5104);
  if (v91)
  {
    *(_QWORD *)(a1 + 5112) = v91;
    operator delete(v91);
  }
  v92 = *(void **)(a1 + 5080);
  if (v92)
  {
    *(_QWORD *)(a1 + 5088) = v92;
    operator delete(v92);
  }
  v93 = *(void **)(a1 + 5056);
  if (v93)
  {
    *(_QWORD *)(a1 + 5064) = v93;
    operator delete(v93);
  }
  if (*(_BYTE *)(a1 + 4744))
    sub_20EB8188C(a1 + 3080);
  v94 = *(_QWORD *)(a1 + 3056);
  if (v94)
  {
    v95 = *(_QWORD *)(a1 + 3064);
    v96 = *(void **)(a1 + 3056);
    if (v95 != v94)
    {
      do
      {
        v97 = *(_QWORD *)(v95 - 24);
        if (v97)
        {
          v98 = *(_QWORD *)(v95 - 16);
          v99 = *(void **)(v95 - 24);
          if (v98 != v97)
          {
            do
              v98 = sub_20EB8188C(v98 - 1664);
            while (v98 != v97);
            v99 = *(void **)(v95 - 24);
          }
          *(_QWORD *)(v95 - 16) = v97;
          operator delete(v99);
        }
        v95 -= 32;
      }
      while (v95 != v94);
      v96 = *(void **)(a1 + 3056);
    }
    *(_QWORD *)(a1 + 3064) = v94;
    operator delete(v96);
  }
  v100 = *(_QWORD *)(a1 + 3032);
  if (v100)
  {
    v101 = *(_QWORD *)(a1 + 3040);
    v102 = *(void **)(a1 + 3032);
    if (v101 != v100)
    {
      do
      {
        v103 = *(_QWORD *)(v101 - 24);
        if (v103)
        {
          v104 = *(_QWORD *)(v101 - 16);
          v105 = *(void **)(v101 - 24);
          if (v104 != v103)
          {
            do
              v104 = sub_20EB8188C(v104 - 1664);
            while (v104 != v103);
            v105 = *(void **)(v101 - 24);
          }
          *(_QWORD *)(v101 - 16) = v103;
          operator delete(v105);
        }
        v101 -= 32;
      }
      while (v101 != v100);
      v102 = *(void **)(a1 + 3032);
    }
    *(_QWORD *)(a1 + 3040) = v100;
    operator delete(v102);
  }
  sub_20F103380((_QWORD *)(a1 + 2656));
  sub_20F103380((_QWORD *)(a1 + 2280));
  sub_20E869D64(a1 + 496);
  v106 = *(void **)(a1 + 464);
  if (v106)
  {
    *(_QWORD *)(a1 + 472) = v106;
    operator delete(v106);
  }
  v107 = *(void **)(a1 + 440);
  if (v107)
  {
    *(_QWORD *)(a1 + 448) = v107;
    operator delete(v107);
  }
  v108 = *(void **)(a1 + 416);
  if (v108)
  {
    *(_QWORD *)(a1 + 424) = v108;
    operator delete(v108);
  }
  v109 = *(void **)(a1 + 392);
  if (v109)
  {
    *(_QWORD *)(a1 + 400) = v109;
    operator delete(v109);
  }
  v110 = *(void **)(a1 + 368);
  if (v110)
  {
    *(_QWORD *)(a1 + 376) = v110;
    operator delete(v110);
  }
  v111 = *(_QWORD **)(a1 + 344);
  if (v111)
  {
    do
    {
      v112 = (_QWORD *)*v111;
      operator delete(v111);
      v111 = v112;
    }
    while (v112);
  }
  v113 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v113)
    operator delete(v113);
  v114 = *(void **)(a1 + 304);
  if (v114)
  {
    *(_QWORD *)(a1 + 312) = v114;
    operator delete(v114);
  }
  return a1;
}

void sub_20F82FD50(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6B860);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6B860))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.batch_least_squares_unsanitized");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A6B858);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A6B860);
  }
  *a1 = qword_254A6B858;
}

void sub_20F82FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A6B860);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A6B860);
  _Unwind_Resume(a1);
}

uint64_t sub_20F82FE44(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, char **a5, char **a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  const char *v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v94;
  char v95;
  unsigned __int8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v107;
  void **p_object;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v125;
  float64x2_t *v126;
  float64x2_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const double *v140;
  int32x4_t v141;
  int32x4_t v142;
  const double *v143;
  const double *v144;
  const double *v145;
  uint64_t *v146;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v147;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  __int16 v153;
  uint64_t result;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  char **v161;
  char **v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  void *object;
  void *v173[2];
  __int128 v174;
  void *__p[2];
  unint64_t v176;
  char v177;
  void **v178;
  __int128 v179;
  uint64_t *v180;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v182;
  uint64_t v183;
  const char *v184;
  int v185;
  const char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  float64x2x4_t v192;
  float64x2x4_t v193;
  float64x2x4_t v194;
  float64x2x4_t v195;

  v11 = a1;
  if ((*(_DWORD *)(a1 + 2276) - 1) >= 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 315, (uint64_t)"state_ == State::ReadyForUpdate || state_ == State::Configured", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_239;
  }
  v12 = (a5[1] - *a5) >> 2;
  if (v12 != 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 316, (uint64_t)"frame_ids.size() == states.num_frames()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_239;
    }
    v12 = (a5[1] - *a5) >> 2;
  }
  v161 = a5;
  v162 = a6;
  v163 = a3;
  v158 = a4;
  if (v12 != (a6[1] - *a6) >> 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 317, (uint64_t)"frame_ids.size() == frame_timestamps.size()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_239:
    abort();
  }
  sub_20F82FD50(&v189);
  v169 = v11;
  v164 = (uint64_t)a2;
  if (**(int **)(v189 + 56) <= 2)
  {
    v13 = *(unsigned __int8 *)(v189 + 72);
    v14 = sub_20E8C31DC(v189, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (v13 || v14 != 0)
    {
      v180 = &v189;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v182 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v183) = 2;
      v184 = "unknown file";
      v185 = 318;
      v187 = 0;
      v188 = 0;
      v186 = "unknown function";
      v17 = v189;
      v18 = v189 + 16;
      if (*(char *)(v189 + 39) < 0)
      {
        v20 = *(const char **)(v189 + 16);
        v19 = *(_QWORD *)(v189 + 24);
        v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v22 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        v19 = *(unsigned __int8 *)(v189 + 39);
        v20 = (const char *)(v189 + 16);
        v21 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v21 & 1) != 0)
          goto LABEL_17;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v174 && SHIBYTE(v173[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_17:
      if (byte_254A4A4F8[23] >= 0)
        v23 = byte_254A4A4F8;
      else
        v23 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8[23];
      else
        v24 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v23, v20);
      v25 = v173;
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v24 >= 0x17)
      {
        v26 = v15;
        v27 = v20;
        v28 = v17;
        v29 = v13;
        v30 = v18;
        v31 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v31 = v24 | 7;
        v32 = v31 + 1;
        v25 = operator new(v31 + 1);
        v173[1] = (void *)v24;
        *(_QWORD *)&v174 = v32 | 0x8000000000000000;
        v173[0] = v25;
        v18 = v30;
        v13 = v29;
        v17 = v28;
        v20 = v27;
        v15 = v26;
      }
      else
      {
        BYTE7(v174) = v24;
        if (!v24)
        {
LABEL_31:
          *((_BYTE *)v25 + v24) = 0;
          BYTE8(v174) = 1;
          v33 = __p;
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v19 >= 0x17)
          {
            v35 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v35 = v19 | 7;
            v36 = v35 + 1;
            v33 = operator new(v35 + 1);
            __p[1] = (void *)v19;
            v176 = v36 | 0x8000000000000000;
            __p[0] = v33;
          }
          else
          {
            HIBYTE(v176) = v19;
            if (!v19)
            {
              LOBYTE(__p[0]) = 0;
              v177 = 1;
              v34 = object;
              if ((SHIBYTE(v176) & 0x80000000) == 0)
                goto LABEL_35;
              goto LABEL_41;
            }
          }
          memmove(v33, v20, v19);
          *((_BYTE *)v33 + v19) = 0;
          v177 = 1;
          v34 = object;
          if ((SHIBYTE(v176) & 0x80000000) == 0)
          {
LABEL_35:
            if (!BYTE8(v174))
              goto LABEL_44;
            goto LABEL_42;
          }
LABEL_41:
          operator delete(__p[0]);
          if (!BYTE8(v174))
          {
LABEL_44:
            if (object)
              os_release(object);
            if (v15 && *(_QWORD *)(v15 + 24))
            {
              v37 = _os_log_pack_size();
              v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
              v39 = (std::__shared_weak_count *)operator new();
              v40 = v39;
              v39->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v39->__shared_weak_owners_ = 0;
              v39[1].__vftable = v38;
              object = v38;
              v173[0] = v38;
              v173[1] = v39;
              do
                v42 = __ldxr(p_shared_owners);
              while (__stxr(v42 + 1, p_shared_owners));
              v174 = 0uLL;
              __p[0] = 0;
              do
                v43 = __ldaxr(p_shared_owners);
              while (__stlxr(v43 - 1, p_shared_owners));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v40);
              }
              v44 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v45 = operator new();
              v46 = *(unsigned __int8 *)(v17 + 39);
              if ((v46 & 0x80u) == 0)
                v47 = v18;
              else
                v47 = *(_QWORD *)(v17 + 16);
              if ((v46 & 0x80u) != 0)
                v46 = *(_QWORD *)(v17 + 24);
              *(_QWORD *)v45 = v44;
              *(_OWORD *)(v45 + 8) = *(_OWORD *)v173;
              v173[0] = 0;
              v173[1] = 0;
              *(_OWORD *)(v45 + 24) = v174;
              v174 = 0uLL;
              *(_QWORD *)(v45 + 40) = v47;
              *(_QWORD *)(v45 + 48) = v46;
              *(_BYTE *)(v45 + 56) = 2;
              v190 = 0;
              v191 = v45;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v191);
              v48 = v191;
              v191 = 0;
              v11 = v169;
              a2 = (uint64_t *)v164;
              if (v48)
              {
                v49 = *(std::__shared_weak_count **)(v48 + 32);
                if (v49)
                {
                  v50 = (unint64_t *)&v49->__shared_owners_;
                  do
                    v51 = __ldaxr(v50);
                  while (__stlxr(v51 - 1, v50));
                  if (!v51)
                  {
                    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                    std::__shared_weak_count::__release_weak(v49);
                  }
                }
                v52 = *(std::__shared_weak_count **)(v48 + 16);
                if (v52)
                {
                  v53 = (unint64_t *)&v52->__shared_owners_;
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                MEMORY[0x212BC6398](v48, 0x10F0C40B62ED6C6);
                v55 = v190;
                v190 = 0;
                if (v55)
                {
                  v56 = *(std::__shared_weak_count **)(v55 + 32);
                  if (v56)
                  {
                    v57 = (unint64_t *)&v56->__shared_owners_;
                    do
                      v58 = __ldaxr(v57);
                    while (__stlxr(v58 - 1, v57));
                    if (!v58)
                    {
                      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                      std::__shared_weak_count::__release_weak(v56);
                    }
                  }
                  v59 = *(std::__shared_weak_count **)(v55 + 16);
                  if (v59)
                  {
                    v60 = (unint64_t *)&v59->__shared_owners_;
                    do
                      v61 = __ldaxr(v60);
                    while (__stlxr(v61 - 1, v60));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                      std::__shared_weak_count::__release_weak(v59);
                    }
                  }
                  MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
                }
              }
              v62 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
              if (*((_QWORD *)&v174 + 1))
              {
                v63 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              v65 = (std::__shared_weak_count *)v173[1];
              if (v173[1])
              {
                v66 = (unint64_t *)((char *)v173[1] + 8);
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                  std::__shared_weak_count::__release_weak(v65);
                }
              }
            }
            else
            {
              os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
              LOWORD(object) = 0;
              v68 = (void *)_os_log_send_and_compose_impl();
              v11 = v169;
              a2 = (uint64_t *)v164;
              if (v68)
                free(v68);
            }
            if (v13)
            {
              sub_20E8C003C((uint64_t)&v180, "Initializing");
              sub_20E863570((uint64_t)&v180);
            }
            sub_20E863570((uint64_t)&v180);
            v69 = v188;
            if (v188)
            {
              v70 = (unint64_t *)&v188->__shared_owners_;
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
            goto LABEL_101;
          }
LABEL_42:
          if (SBYTE7(v174) < 0)
            operator delete(v173[0]);
          goto LABEL_44;
        }
      }
      memmove(v25, v23, v24);
      goto LABEL_31;
    }
  }
LABEL_101:
  v156 = *a2;
  v157 = a2[1];
  v72 = (v157 - *a2) >> 3;
  if ((unint64_t)(0x2492492492492493 * v72) <= 0xE
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 323, (uint64_t)"sz >= cv_types::InertialState::kDof", 35, (uint64_t)"prior size empty!", 17, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_239;
  }
  v73 = *(_QWORD *)(v11 + 8216);
  v74 = *(unsigned __int8 *)(v73 + 1720);
  v75 = v73 + 864;
  v76 = v73 + 24;
  if (v74)
    v76 = v75;
  v160 = 0x2492492492492493 * v72;
  v155 = v72;
  if (!*(_BYTE *)(v76 + 416))
  {
    sub_20FD308EC(v11 + 5056, 1uLL, 0, 0, 0);
    v78 = *(_QWORD *)(v11 + 3056);
    v159 = 0x2492492492492493 * v72;
    v165 = *(_QWORD *)(v11 + 3064);
    if (v78 == v165)
      goto LABEL_172;
    goto LABEL_109;
  }
  v159 = 0x2492492492492493 * v72 + 6;
  sub_20FD308EC(v11 + 5056, 1uLL, 1uLL, 0, 0);
  v77 = *(_QWORD **)(v11 + 5080);
  v78 = *(_QWORD *)(v11 + 3056);
  v79 = *(_QWORD **)(v78 + 8);
  *v77 = *v79;
  v77[1] = v79[1];
  v77[2] = v79[2];
  v77[3] = v79[3];
  v77[4] = v79[4];
  v77[5] = v79[5];
  v77[6] = v79[6];
  v77[7] = v79[7];
  v77[8] = v79[8];
  v77[9] = v79[9];
  v77[10] = v79[10];
  v77[11] = v79[11];
  v165 = *(_QWORD *)(v11 + 3064);
  if (v78 != v165)
  {
LABEL_109:
    v168 = v11 + 7696;
    v167 = v11 + 7736;
    do
    {
      v80 = *(_DWORD *)v78;
      if (*(_DWORD *)v78 >= 0x10000u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_239;
      }
      v166 = v78;
      v171 = -991146299 * ((*(_QWORD *)(v78 + 16) - *(_QWORD *)(v78 + 8)) >> 7);
      if (v171)
      {
        v81 = 0;
        v170 = v80 << 16;
        do
        {
          v82 = *(_BYTE *)(v11 + 1198);
          if (v80 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v83 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v85 = qword_254A6DE40;
              v84 = qword_254A6DE48;
              while (v85 != v84)
              {
                v87 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v85;
                v86 = *(_QWORD *)(v85 + 8);
                v85 += 16;
                v87(v86, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
            }
            v88 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_239;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v81 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v91 = qword_254A6DE40;
              v90 = qword_254A6DE48;
              while (v91 != v90)
              {
                v93 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v91;
                v92 = *(_QWORD *)(v91 + 8);
                v91 += 16;
                v93(v92, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v94 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_239;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          LODWORD(object) = (unsigned __int16)v81 | v170;
          *((_BYTE *)sub_20FB44CC0(v168, object, &object) + 20) = v82;
          v95 = *(_BYTE *)(v11 + 1199);
          if (v80 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v96 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v97 = qword_254A6DE40;
              v98 = qword_254A6DE48;
              while (v97 != v98)
              {
                v100 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v97;
                v99 = *(_QWORD *)(v97 + 8);
                v97 += 16;
                v100(v99, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
            }
            v101 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v11 = v169;
            if (!byte_254A6DE68)
              goto LABEL_239;
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          if (v81 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v102 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v103 = qword_254A6DE40;
              v104 = qword_254A6DE48;
              while (v103 != v104)
              {
                v106 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v103;
                v105 = *(_QWORD *)(v103 + 8);
                v103 += 16;
                v106(v105, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
            }
            v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v11 = v169;
            if (!byte_254A6DE68)
              goto LABEL_239;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          LODWORD(object) = (unsigned __int16)v81 | v170;
          *((_BYTE *)sub_20FB44CC0(v167, object, &object) + 20) = v95;
          ++v81;
        }
        while (v81 != v171);
      }
      v78 = v166 + 32;
    }
    while (v166 + 32 != v165);
  }
LABEL_172:
  if ((char **)(v11 + 2480) != v161)
    sub_20F0E80A4((_QWORD *)(v11 + 2480), *v161, v161[1], (v161[1] - *v161) >> 2);
  if ((char **)(v11 + 2504) != v162)
    sub_20E86811C((_QWORD *)(v11 + 2504), *v162, v162[1], (v162[1] - *v162) >> 3);
  *(_QWORD *)(v11 + 2584) = *(_QWORD *)(v11 + 2576);
  *(_QWORD *)(v11 + 2608) = *(_QWORD *)(v11 + 2600);
  sub_20F1329F0(v11 + 2280, v164);
  *(_QWORD *)(v11 + 8336) = *(_QWORD *)(v11 + 8328);
  *(_QWORD *)(v11 + 8312) = *(_QWORD *)(v11 + 8304);
  *(_QWORD *)(v11 + 8288) = *(_QWORD *)(v11 + 8280);
  p_object = &object;
  v178 = &object;
  v179 = xmmword_2103B83B0;
  v109 = v159 * v159;
  if (v159 * v159)
  {
    if (v109 < 0xE2)
    {
      v111 = 0;
      p_object = &object;
      v112 = v159 * v159;
      if (!v109)
        goto LABEL_187;
    }
    else
    {
      v110 = 450;
      if (v109 > 0x1C2)
        v110 = v159 * v159;
      *(_QWORD *)&v179 = v110;
      p_object = (void **)operator new[]();
      if (v178 != &object && v178)
        MEMORY[0x212BC6368](v178, 0x1000C8000313F17);
      v178 = p_object;
      v111 = *((_QWORD *)&v179 + 1);
      v112 = v109 - *((_QWORD *)&v179 + 1);
      if (v109 <= *((_QWORD *)&v179 + 1))
        goto LABEL_187;
    }
    bzero(&p_object[v111], 8 * v112);
  }
LABEL_187:
  *((_QWORD *)&v179 + 1) = v159 * v159;
  v113 = *(_QWORD *)(v11 + 8216);
  v114 = *(unsigned __int8 *)(v113 + 1720);
  v115 = v113 + 864;
  v116 = v113 + 24;
  if (v114)
    v116 = v115;
  if (*(_BYTE *)(v116 + 416))
  {
    if (*(double *)(v11 + 1840) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 376, (uint64_t)"config_.extrinsics_orientation_prior_covariance_x > 0.0", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(v11 + 1848) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 377, (uint64_t)"config_.extrinsics_orientation_prior_covariance_y > 0.0", 55, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(v11 + 1856) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp",
           378,
           (uint64_t)"config_.extrinsics_orientation_prior_covariance_z > 0.0",
           55,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0)
      || *(double *)(v11 + 1864) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 380, (uint64_t)"config_.extrinsics_position_prior_covariance_x > 0.0", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(v11 + 1872) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 381, (uint64_t)"config_.extrinsics_position_prior_covariance_y > 0.0", 52, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(v11 + 1880) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp",
           382,
           (uint64_t)"config_.extrinsics_position_prior_covariance_z > 0.0",
           52,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    p_object = v178;
    v117 = (v159 + 1) * v160;
    *(double *)&v178[v117] = 1.0 / *(double *)(v11 + 1840);
    *((double *)&p_object[v159 + 1] + v117) = 1.0 / *(double *)(v11 + 1848);
    *(double *)&p_object[(v159 + 1) * (v160 + 2)] = 1.0 / *(double *)(v11 + 1856);
    *(double *)&p_object[(v159 + 1) * (v160 + 3)] = 1.0 / *(double *)(v11 + 1864);
    *(double *)&p_object[(v159 + 1) * (v160 + 4)] = 1.0 / *(double *)(v11 + 1872);
    *(double *)&p_object[(v159 + 1) * (v160 + 5)] = 1.0 / *(double *)(v11 + 1880);
  }
  if (v157 != v156)
  {
    v118 = 0;
    v119 = 0x2492492492492498 * v155;
    v120 = 8 * v159;
    v121 = p_object;
    v122 = v163;
    do
    {
      if (v160 >= 4)
      {
        v123 = 0;
        if ((unint64_t)v121 >= v163 + v119 + v119 * v118
          || v122 >= (unint64_t)&p_object[(unint64_t)v119 / 8] + v120 * v118)
        {
          v125 = v160 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v126 = (float64x2_t *)((char *)v121 + v123);
            v127 = vaddq_f64(*(float64x2_t *)(v122 + v123 + 16), *(float64x2_t *)((char *)v121 + v123 + 16));
            *v126 = vaddq_f64(*(float64x2_t *)(v122 + v123), *(float64x2_t *)((char *)v121 + v123));
            v126[1] = v127;
            v123 += 32;
            v125 -= 4;
          }
          while (v125);
          v123 = v160 & 0xFFFFFFFFFFFFFFFCLL;
          if (v160 == (v160 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_205;
        }
      }
      else
      {
        v123 = 0;
      }
      do
      {
        *(double *)&v121[v123] = *(double *)(v122 + 8 * v123) + *(double *)&v121[v123];
        ++v123;
      }
      while (v160 != v123);
LABEL_205:
      v121 = (void **)((char *)v121 + v120);
      v122 += v119;
      ++v118;
    }
    while (v118 != v160);
  }
  *(_DWORD *)(v11 + 2276) = 2;
  *(_DWORD *)(v11 + 5272) = 0;
  v128 = *(_QWORD *)(v11 + 8216);
  v129 = *(unsigned __int8 *)(v128 + 1720);
  v130 = v128 + 864;
  v131 = v128 + 24;
  if (v129)
    v131 = v130;
  if (!*(_BYTE *)(v131 + 416) || (v132 = *(_QWORD *)(v11 + 3056), v133 = *(_QWORD *)(v11 + 3064), v132 == v133))
  {
    v135 = 0;
  }
  else
  {
    v134 = v133 - v132 - 32;
    if (v134 >= 0x100)
    {
      v137 = (v134 >> 5) + 1;
      v138 = v137 & 7;
      if ((v137 & 7) == 0)
        v138 = 8;
      v139 = v137 - v138;
      v136 = v132 + 32 * v139;
      v140 = (const double *)(v132 + 136);
      v141 = 0uLL;
      v142 = 0uLL;
      do
      {
        v143 = v140 - 16;
        v144 = v140 - 8;
        v192 = vld4q_f64(v143);
        v193 = vld4q_f64(v144);
        v145 = v140;
        v194 = vld4q_f64(v145);
        v145 += 8;
        v195 = vld4q_f64(v145);
        v192.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v192.val[1], (int64x2_t)v192.val[0]);
        v192.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v193.val[1], (int64x2_t)v193.val[0]), 7uLL);
        *(_QWORD *)&v192.val[1].f64[0] = (-991146299 * LODWORD(v192.val[1].f64[0]));
        v192.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v192.val[0], 7uLL);
        v192.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v194.val[1], (int64x2_t)v194.val[0]), 7uLL);
        *(_QWORD *)&v192.val[2].f64[0] = (-991146299 * LODWORD(v192.val[2].f64[0]));
        *(_QWORD *)&v192.val[2].f64[1] = (-991146299 * LODWORD(v192.val[2].f64[1]));
        *(_QWORD *)&v192.val[1].f64[1] = (-991146299 * LODWORD(v192.val[1].f64[1]));
        *(_QWORD *)&v192.val[0].f64[0] = (-991146299 * LODWORD(v192.val[0].f64[0]));
        v192.val[3] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v195.val[1], (int64x2_t)v195.val[0]), 7uLL);
        *(_QWORD *)&v192.val[0].f64[1] = (-991146299 * LODWORD(v192.val[0].f64[1]));
        *(_QWORD *)&v192.val[3].f64[0] = (-991146299 * LODWORD(v192.val[3].f64[0]));
        *(_QWORD *)&v192.val[3].f64[1] = (-991146299 * LODWORD(v192.val[3].f64[1]));
        v141 = vaddq_s32(v141, vuzp1q_s32((int32x4_t)v192.val[0], (int32x4_t)v192.val[1]));
        v142 = vaddq_s32(v142, vuzp1q_s32((int32x4_t)v192.val[2], (int32x4_t)v192.val[3]));
        v140 += 32;
        v139 -= 8;
      }
      while (v139);
      v135 = vaddvq_s32(vaddq_s32(v142, v141));
    }
    else
    {
      v135 = 0;
      v136 = *(_QWORD *)(v11 + 3056);
    }
    do
    {
      v135 -= 991146299 * ((*(_QWORD *)(v136 + 16) - *(_QWORD *)(v136 + 8)) >> 7);
      v136 += 32;
    }
    while (v136 != v133);
  }
  sub_20FC8A664((uint64_t)p_object, sqrt((double)*((unint64_t *)&v179 + 1)), v135, (uint64_t)&v180);
  v146 = *(uint64_t **)(v11 + 8152);
  v147 = rep;
  *(_QWORD *)(v11 + 8152) = v180;
  v148 = *(_QWORD *)(v11 + 8160);
  *(_QWORD *)(v11 + 8160) = v147;
  v180 = v146;
  rep = v148;
  *(_QWORD *)(v11 + 8168) = v182;
  v182 = 0;
  v149 = v183;
  *(_QWORD *)(v11 + 8176) = v183;
  if (v146)
  {
    MEMORY[0x212BC6368](v146, 0x1000C8000313F17);
    v149 = *(_DWORD *)(v11 + 8176);
  }
  if (v149 != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 421, (uint64_t)"bundle_prior_info_.type == BundlePriorInformationType::InertialStatePriorInfo", 77, (uint64_t)"At initialization, the prior info must be inertial-based (Inertial part can, though, be invalid)", 96, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v150 = *(_QWORD *)(v11 + 5176);
  v151 = *v158;
  v152 = *((_DWORD *)v158 + 2);
  v153 = *((_WORD *)v158 + 6);
  *(_BYTE *)(v150 + 14) = *((_BYTE *)v158 + 14);
  *(_WORD *)(v150 + 12) = v153;
  *(_DWORD *)(v150 + 8) = v152;
  *(_QWORD *)v150 = v151;
  *(_QWORD *)(v11 + 5296) = 0;
  *(_QWORD *)(v11 + 5280) = -1;
  *(_DWORD *)(v11 + 5288) = -1;
  *((_QWORD *)&v179 + 1) = 0;
  result = (uint64_t)v178;
  if (v178 != &object)
  {
    if (v178)
      return MEMORY[0x212BC6368](v178, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F8314AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v33 - 184);
  _Unwind_Resume(a1);
}

void sub_20F8314EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 96));
  sub_20E86E8C4((uint64_t *)(v27 - 104));
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714(v27 - 184);
  _Unwind_Resume(a1);
}

void sub_20F831518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E658((uint64_t)&a27);
  sub_20E863714(v27 - 184);
  _Unwind_Resume(a1);
}

void sub_20F831534(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 184);
  _Unwind_Resume(a1);
}

void sub_20F831560(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20F83157C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_20F831590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v34 - 184);
  _Unwind_Resume(a1);
}

void sub_20F8315D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  unint64_t v28;

  STACK[0x7A8] = 0;
  v28 = STACK[0x798];
  if ((char *)STACK[0x798] != &a27)
  {
    if (v28)
      MEMORY[0x212BC6368](v28, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

double sub_20F831618(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = a2[3];
  if (!v2)
    return 0.0;
  if (!a1)
    return (double)0 / (double)v2;
  v3 = a2[1];
  if (v3)
  {
    v4 = *a2;
    v5 = v3 - 1;
    if ((v3 & (v3 - 1)) != 0)
    {
      v6 = 0;
      do
      {
        v13 = *((unsigned int *)a1 + 4);
        v14 = v13;
        if (v3 <= v13)
          v14 = v13 % v3;
        v12 = *(uint64_t **)(v4 + 8 * v14);
        if (v12)
        {
          while (1)
          {
            v12 = (uint64_t *)*v12;
            if (!v12)
              break;
            v15 = v12[1];
            if (v15 == v13)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v13)
                break;
            }
            else
            {
              if (v15 >= v3)
                v15 %= v3;
              if (v15 != v14)
              {
                v12 = 0;
                break;
              }
            }
          }
        }
        if (v12)
          ++v6;
        a1 = (uint64_t **)*a1;
      }
      while (a1);
    }
    else
    {
      v6 = 0;
      v7 = v3 + 0xFFFFFFFF;
      do
      {
        v10 = *((unsigned int *)a1 + 4);
        v9 = *(uint64_t **)(v4 + 8 * (v7 & v10));
        if (v9)
        {
          while (1)
          {
            v9 = (uint64_t *)*v9;
            if (!v9)
              break;
            v11 = v9[1];
            if (v11 == v10)
            {
              if (*((_DWORD *)v9 + 4) == (_DWORD)v10)
                break;
            }
            else if ((v11 & v5) != (v7 & v10))
            {
              v9 = 0;
              break;
            }
          }
        }
        if (v9)
          ++v6;
        a1 = (uint64_t **)*a1;
      }
      while (a1);
    }
  }
  else
  {
    do
      a1 = (uint64_t **)*a1;
    while (a1);
    v6 = 0;
  }
  return (double)v6 / (double)v2;
}

void sub_20F83175C(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t ii;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v18;
  double v19;
  float64x2_t v20;
  int64x2_t v21;
  double v22;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v36;
  double v37;
  double v38;
  __double2 v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t *v47;
  unsigned __int8 v48;
  char *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  const char *v60;
  size_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  const char *v64;
  size_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __uint64_t v82;
  __uint64_t v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v116;
  unsigned __int8 v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  size_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t j;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  const char *v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  int v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t *v193;
  unsigned __int8 v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  size_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t k;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  size_t v212;
  const char *v213;
  unsigned __int8 v214;
  unsigned __int8 v215;
  const char *v216;
  size_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  size_t v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  int v242;
  void *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t *v270;
  unsigned __int8 v271;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  size_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t m;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  size_t v289;
  const char *v290;
  unsigned __int8 v291;
  unsigned __int8 v292;
  const char *v293;
  size_t v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298;
  NSObject *v299;
  uint64_t v300;
  uint64_t v301;
  size_t v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  int v319;
  void *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  unsigned int v351;
  __int128 v352;
  __int128 v353;
  uint64_t *v354;
  unsigned int v355;
  unsigned __int8 v356;
  unsigned int v358;
  char *v359;
  size_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t n;
  uint64_t v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  size_t v369;
  const char *v370;
  unsigned __int8 v371;
  unsigned __int8 v372;
  const char *v373;
  size_t v374;
  _BYTE *v375;
  int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  _BYTE *v380;
  NSObject *v381;
  int v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  size_t v386;
  std::__shared_weak_count_vtbl *v387;
  std::__shared_weak_count *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  double v396;
  double v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  __int128 v402;
  __uint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  void *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  int v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v431;
  size_t v432;
  const char *v433;
  unsigned __int8 v434;
  unsigned __int8 v435;
  const char *v436;
  size_t v437;
  _BYTE *v438;
  int v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  _BYTE *v443;
  NSObject *v444;
  int v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  size_t v449;
  std::__shared_weak_count_vtbl *v450;
  std::__shared_weak_count *v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  __int128 v465;
  __uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  uint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::__shared_weak_count *v480;
  unint64_t *v481;
  unint64_t v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  _QWORD *v493;
  _QWORD *v494;
  uint64_t *v495;
  uint64_t v496;
  unint64_t v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  unsigned int v506;
  BOOL v507;
  uint64_t v508;
  _DWORD *v509;
  int v510;
  unsigned int v511;
  uint64_t *v512;
  unsigned int v513;
  unsigned __int8 v514;
  int v515;
  int v517;
  char *v518;
  size_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  size_t v528;
  const char *v529;
  unsigned __int8 v530;
  unsigned __int8 v531;
  const char *v532;
  size_t v533;
  _BYTE *v534;
  uint64_t *v535;
  unint64_t v536;
  const char *v537;
  unsigned int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  _BYTE *v542;
  NSObject *v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  size_t v547;
  std::__shared_weak_count_vtbl *v548;
  std::__shared_weak_count *v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  __uint64_t v556;
  uint64_t v557;
  __int128 v558;
  char *v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  __int128 v563;
  void *v564;
  std::__shared_weak_count *v565;
  unint64_t *v566;
  unint64_t v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  std::__shared_weak_count *v575;
  unint64_t *v576;
  unint64_t v577;
  std::__shared_weak_count *v578;
  unint64_t *v579;
  unint64_t v580;
  std::__shared_weak_count *v581;
  unint64_t *v582;
  unint64_t v583;
  void *v584;
  std::__shared_weak_count *v585;
  unint64_t *v586;
  unint64_t v587;
  double *v588;
  uint64_t *v589;
  unsigned __int8 v590;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  size_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t jj;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  unint64_t v605;
  unint64_t v606;
  uint64_t v607;
  const char *v608;
  size_t v609;
  unsigned __int8 v610;
  unsigned __int8 v611;
  const char *v612;
  size_t v613;
  _BYTE *v614;
  uint64_t v615;
  uint64_t v616;
  _BYTE *v617;
  uint64_t v618;
  uint64_t v619;
  NSObject *v620;
  size_t v621;
  std::__shared_weak_count_vtbl *v622;
  std::__shared_weak_count *v623;
  std::__shared_weak_count *v624;
  unint64_t *v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  const char *v635;
  uint64_t v636;
  __int128 v637;
  __uint64_t v638;
  std::__shared_weak_count *v639;
  unint64_t *v640;
  unint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  void *v645;
  std::__shared_weak_count *v646;
  unint64_t *v647;
  unint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  void *v661;
  std::__shared_weak_count *v662;
  unint64_t *v663;
  unint64_t v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t v667;
  unsigned __int8 v668;
  unsigned __int8 v669;
  char *v671;
  size_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t kk;
  uint64_t v676;
  int v677;
  unint64_t v678;
  unint64_t v679;
  _QWORD *v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  size_t v685;
  const char *v686;
  uint64_t v687;
  unsigned __int8 v688;
  unsigned __int8 v689;
  const char *v690;
  size_t v691;
  _BYTE *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _BYTE *v696;
  uint64_t v697;
  uint64_t v698;
  NSObject *v699;
  size_t v700;
  std::__shared_weak_count_vtbl *v701;
  std::__shared_weak_count *v702;
  std::__shared_weak_count *v703;
  unint64_t *v704;
  unint64_t v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  __int128 v713;
  __uint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  void *v721;
  std::__shared_weak_count *v722;
  unint64_t *v723;
  unint64_t v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  void *v734;
  _QWORD *v735;
  double *v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  unint64_t v740;
  _QWORD *__dst;
  _QWORD *__dsta;
  float64x2_t v743;
  const char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  float64_t v750;
  int v751;
  int v752;
  int v753;
  int v754;
  uint64_t v755;
  const char *v756;
  float64x2_t v757;
  _QWORD *v758;
  int v759;
  uint64_t v761;
  unsigned int v762;
  int v763;
  unsigned int v764;
  const char *v765;
  __uint64_t v766[2];
  _OWORD v767[2];
  const char *v768;
  uint64_t v769;
  std::__shared_weak_count *v770;
  __uint64_t v771[2];
  __int128 v772;
  __int128 v773;
  __int128 v774;
  std::__shared_weak_count *v775;
  uint64_t v776;
  void *v777;
  double v778;
  double v779;
  char v780;
  uint64_t v781;
  _BYTE object[64];
  void *v783[2];
  __int128 v784;
  void *v785[2];
  float64_t v786;
  void *__p;
  char v788;
  uint64_t v789;

  v789 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 5272) != 1)
    return;
  ii = a1;
  v10 = *(_QWORD **)(a1 + 7952);
  if (!v10 || (v11 = (_QWORD *)*v10) == 0 || !v11[8])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 545, (uint64_t)"this->viodatabase() && this->viodatabase()->state_set() && !this->viodatabase()->state_set()->empty()", 101, (uint64_t)"VIO database and state set must not be null or empty.", 53, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v10 = *(_QWORD **)(ii + 7952);
    v11 = (_QWORD *)*v10;
  }
  v761 = ii;
  if (a2)
  {
    v12 = (_QWORD *)v11[6];
    if (v12 != v11 + 7)
    {
      v13 = 0;
      __asm { FMOV            V0.2D, #-0.5 }
      v757 = _Q0;
      do
      {
        v18 = v12[6];
        v19 = *(double *)(v18 + 816);
        v20.f64[0] = *(float64_t *)(v18 + 16);
        v21 = *(int64x2_t *)(v18 + 24);
        v22 = *(double *)(v18 + 64);
        _Q4 = *(int64x2_t *)(v18 + 48);
        v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v18, v21);
        v25 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v18, v21);
        v20.f64[1] = *(float64_t *)(v18 + 40);
        v26 = vextq_s8((int8x16_t)v25, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
        a9.f64[0] = *(float64_t *)(v18 + 88);
        v27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, *(double *)(v18 + 72)), v25, *(float64x2_t *)(v18 + 72), 1), v20, a9.f64[0]);
        _D7 = *(_QWORD *)(v18 + 80);
        __asm { FMLA            D17, D7, V4.D[1] }
        a9.f64[0] = _D17 + v22 * a9.f64[0];
        v30 = vnegq_f64(v27);
        v27.f64[0] = *(float64_t *)(v18 + 48);
        *(_QWORD *)&v25.f64[1] = v26.i64[0];
        *(float64x2_t *)v783 = v20;
        v784 = *(unint64_t *)&v22;
        *(float64x2_t *)object = v24;
        *(_OWORD *)&object[16] = *(unint64_t *)&v27.f64[0];
        *(float64x2_t *)&object[32] = v25;
        *(_OWORD *)&object[48] = v26.u64[1];
        *(float64x2_t *)v785 = v30;
        *(_QWORD *)&v786 = *(_OWORD *)&vnegq_f64(a9);
        __p = (void *)0x3FF0000000000000;
        memset(v767, 0, sizeof(v767));
        *(_OWORD *)v766 = 0u;
        v771[0] = (__uint64_t)object;
        v771[1] = 0;
        v777 = v766;
        v778 = 0.0;
        sub_20E95B988((float64x2_t **)v771, (double **)&v777);
        v32.f64[0] = *(float64_t *)v767;
        _Q18 = *(float64x2_t *)v766;
        _Q0 = vmulq_f64(_Q18, _Q18);
        _D1 = v766[1];
        __asm { FMLA            D0, D1, V18.D[1] }
        v36 = _Q0.f64[0] + v32.f64[0] * v32.f64[0];
        if (v36 >= 0.0000002635)
        {
          v38 = sqrt(v36);
          v743 = *(float64x2_t *)v766;
          v750 = *(double *)v767;
          v39 = __sincos_stret(v38);
          _Q18 = v743;
          v32.f64[0] = v750;
          v31.f64[0] = v39.__sinval / v38;
          _Q0.f64[0] = 1.0 / v36 * (1.0 - v39.__cosval);
          v37 = 1.0 / v36 * (1.0 - v39.__sinval / v38);
          if (v36 < 2.775e-15)
          {
LABEL_19:
            _Q0.f64[0] = v36 * 0.0000330687831 + v36 * 0.00138888889 + 0.0833333333;
            goto LABEL_21;
          }
        }
        else
        {
          _Q0.f64[0] = 0.5 - v36 * (v36 / -720.0 + 0.0416666667);
          v37 = 0.166666667 - v36 * (v36 / -5040.0 + 0.00833333333);
          v31.f64[0] = 1.0 - v36 * v37;
          if (v36 < 2.775e-15)
            goto LABEL_19;
        }
        if (v36 <= 9.0)
          _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v37) / v31.f64[0];
        else
          _Q0.f64[0] = (_Q0.f64[0] + v31.f64[0] * -0.5) / (v36 * _Q0.f64[0]);
LABEL_21:
        v40 = (float64x2_t)vextq_s8((int8x16_t)_Q18, (int8x16_t)_Q18, 8uLL);
        v31.f64[0] = v786;
        v41.f64[0] = v40.f64[0];
        v41.f64[1] = v32.f64[0];
        v42 = (float64x2_t)vextq_s8(*(int8x16_t *)v785, (int8x16_t)v31, 8uLL);
        v43 = vsubq_f64(vmulq_laneq_f64(_Q18, *(float64x2_t *)v785, 1), vmulq_f64(v40, *(float64x2_t *)v785));
        v44 = vaddq_f64(v31, vmulq_f64(v43, v757));
        *(void **)&v31.f64[1] = v785[0];
        v32.f64[1] = _Q18.f64[0];
        v45 = vsubq_f64(vmulq_f64(v41, v31), vmulq_f64(v32, v42));
        v46 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v43, 8uLL);
        v43.f64[1] = v45.f64[0];
        *((_QWORD *)&v767[1] + 1) = *(_OWORD *)&vaddq_f64(v44, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q18, v45, 1), vmulq_f64(v40, v45))));
        *(float64x2_t *)((char *)v767 + 8) = vaddq_f64(vaddq_f64(*(float64x2_t *)v785, vmulq_f64(v45, v757)), vmulq_n_f64(vsubq_f64(vmulq_f64(v41, v43), vmulq_f64(v32, v46)), _Q0.f64[0]));
        v47 = sub_210219C18();
        v48 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_40;
        *(_DWORD *)object = 134219520;
        *(double *)&object[4] = v19;
        *(_WORD *)&object[12] = 2048;
        *(_QWORD *)&object[14] = v766[0];
        *(_WORD *)&object[22] = 2048;
        *(_QWORD *)&object[24] = v766[1];
        *(_WORD *)&object[32] = 2048;
        *(_QWORD *)&object[34] = *(_QWORD *)&v767[0];
        *(_WORD *)&object[42] = 2048;
        *(_QWORD *)&object[44] = *((_QWORD *)&v767[0] + 1);
        *(_WORD *)&object[52] = 2048;
        *(_QWORD *)&object[54] = *(_QWORD *)&v767[1];
        *(_WORD *)&object[62] = 2048;
        v783[0] = *((void **)&v767[1] + 1);
        v50 = (char *)_os_log_send_and_compose_impl();
        v51 = strlen(v50);
        v771[0] = 0;
        pthread_threadid_np(0, v771);
        v52 = v771[0];
        timespec_get((timespec *)v771, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v47 + 1), (__int128 *)(v47 + 5), "Initial pose: timestamp: %f, pose: %f, %f, %f, %f, %f, %f", 0x39uLL, v50, v51, v52, v771);
        std::mutex::lock(&stru_254A5A410);
        v53 = qword_254A5A458;
        for (i = unk_254A5A460; v53 != i; v53 += 40)
        {
          v55 = *(_QWORD *)(v53 + 32);
          if (!v55)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v55 + 48))(v55, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v788 < 0)
        {
          operator delete(__p);
          if ((SHIBYTE(v786) & 0x80000000) == 0)
          {
LABEL_28:
            if (BYTE8(v784))
              goto LABEL_32;
            goto LABEL_34;
          }
        }
        else if ((SHIBYTE(v786) & 0x80000000) == 0)
        {
          goto LABEL_28;
        }
        operator delete(v785[0]);
        if (BYTE8(v784))
        {
LABEL_32:
          if (SBYTE7(v784) < 0)
            operator delete(v783[0]);
        }
LABEL_34:
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) == 0)
        {
          if (!v50)
            goto LABEL_40;
LABEL_39:
          free(v50);
          goto LABEL_40;
        }
        operator delete(*(void **)&object[8]);
        if (v50)
          goto LABEL_39;
LABEL_40:
        if (os_signpost_enabled((os_log_t)*v47))
        {
          *(_DWORD *)object = 134219520;
          *(double *)&object[4] = v19;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v766[0];
          *(_WORD *)&object[22] = 2048;
          *(_QWORD *)&object[24] = v766[1];
          *(_WORD *)&object[32] = 2048;
          *(_QWORD *)&object[34] = *(_QWORD *)&v767[0];
          *(_WORD *)&object[42] = 2048;
          *(_QWORD *)&object[44] = *((_QWORD *)&v767[0] + 1);
          *(_WORD *)&object[52] = 2048;
          *(_QWORD *)&object[54] = *(_QWORD *)&v767[1];
          *(_WORD *)&object[62] = 2048;
          v783[0] = *((void **)&v767[1] + 1);
          _os_signpost_emit_unreliably_with_name_impl();
        }
        sub_20F82FD50(&v776);
        v762 = v13;
        if (**(int **)(v776 + 56) <= 2)
        {
          v56 = *(unsigned __int8 *)(v776 + 72);
          v57 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
          v58 = v57;
          if (v56 || v57)
          {
            v751 = v56;
            v771[0] = (__uint64_t)&v776;
            v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
            DWORD2(v772) = 2;
            *(_QWORD *)&v773 = "unknown file";
            DWORD2(v773) = 559;
            *(_QWORD *)&v774 = "unknown function";
            *((_QWORD *)&v774 + 1) = 0;
            v775 = 0;
            v59 = *(_QWORD *)v771[0];
            v60 = (const char *)(*(_QWORD *)v771[0] + 16);
            v744 = v60;
            if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
            {
              v60 = *(const char **)(v59 + 16);
              v61 = *(_QWORD *)(v59 + 24);
              v63 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v63 & 1) == 0)
              {
LABEL_483:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v777);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v777);
                  if (v780 && SHIBYTE(v779) < 0)
                    operator delete(v777);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v61 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
              v62 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v62 & 1) == 0)
                goto LABEL_483;
            }
            if (byte_254A4A4F8[23] >= 0)
              v64 = byte_254A4A4F8;
            else
              v64 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v65 = byte_254A4A4F8[23];
            else
              v65 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v64, v60);
            if (v65 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v65 >= 0x17)
            {
              v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v65 | 7) != 0x17)
                v67 = v65 | 7;
              v68 = v67 + 1;
              v66 = operator new(v67 + 1);
              *(_QWORD *)&object[16] = v65;
              *(_QWORD *)&object[24] = v68 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v66;
            }
            else
            {
              object[31] = v65;
              v66 = &object[8];
              if (!v65)
              {
LABEL_65:
                v66[v65] = 0;
                object[32] = 1;
                if (v61 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                ii = v761;
                if (v61 >= 0x17)
                {
                  v71 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v61 | 7) != 0x17)
                    v71 = v61 | 7;
                  v72 = v71 + 1;
                  v69 = operator new(v71 + 1);
                  *(_QWORD *)&object[48] = v61;
                  *(_QWORD *)&object[56] = v72 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v69;
                }
                else
                {
                  object[63] = v61;
                  v69 = &object[40];
                  if (!v61)
                  {
                    object[40] = 0;
                    LOBYTE(v783[0]) = 1;
                    v70 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_69;
LABEL_75:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_76;
                    goto LABEL_78;
                  }
                }
                memmove(v69, v60, v61);
                v69[v61] = 0;
                LOBYTE(v783[0]) = 1;
                v70 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_75;
LABEL_69:
                if (object[32])
                {
LABEL_76:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_78:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v58 && *(_QWORD *)(v58 + 24))
                {
                  v73 = _os_log_pack_size();
                  v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
                  v75 = (std::__shared_weak_count *)operator new();
                  v76 = v75;
                  v75->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
                  v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v75->__shared_weak_owners_ = 0;
                  v75[1].__vftable = v74;
                  *(_QWORD *)object = v74;
                  *(_QWORD *)&object[8] = v74;
                  *(_QWORD *)&object[16] = v75;
                  do
                    v78 = __ldxr(p_shared_owners);
                  while (__stxr(v78 + 1, p_shared_owners));
                  memset(&object[24], 0, 24);
                  do
                    v79 = __ldaxr(p_shared_owners);
                  while (__stlxr(v79 - 1, p_shared_owners));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                  v80 = *(_QWORD *)object;
                  v81 = _os_log_pack_fill();
                  v82 = v766[0];
                  v83 = v766[1];
                  v84 = v767[0];
                  v85 = v767[1];
                  *(_DWORD *)v81 = 134219520;
                  *(double *)(v81 + 4) = v19;
                  *(_WORD *)(v81 + 12) = 2048;
                  *(_QWORD *)(v81 + 14) = v82;
                  *(_WORD *)(v81 + 22) = 2048;
                  *(_QWORD *)(v81 + 24) = v83;
                  *(_WORD *)(v81 + 32) = 2048;
                  *(_QWORD *)(v81 + 34) = v84;
                  *(_WORD *)(v81 + 42) = 2048;
                  *(_QWORD *)(v81 + 44) = *((_QWORD *)&v84 + 1);
                  *(_WORD *)(v81 + 52) = 2048;
                  *(_QWORD *)(v81 + 54) = v85;
                  *(_WORD *)(v81 + 62) = 2048;
                  *(_QWORD *)(v81 + 64) = *((_QWORD *)&v85 + 1);
                  v86 = (char *)operator new();
                  v87 = *(unsigned __int8 *)(v59 + 39);
                  v88 = *(const char **)(v59 + 16);
                  v89 = *(_QWORD *)(v59 + 24);
                  v90 = *(_OWORD *)&object[24];
                  *(_OWORD *)(v86 + 8) = *(_OWORD *)&object[8];
                  if ((v87 & 0x80u) != 0)
                    v87 = v89;
                  else
                    v88 = v744;
                  *(_QWORD *)v86 = v80;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v86 + 24) = v90;
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v86 + 5) = v88;
                  *((_QWORD *)v86 + 6) = v87;
                  v86[56] = 2;
                  v781 = 0;
                  v777 = v86;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v58 + 24) + 40))(*(_QWORD *)(v58 + 24), &v777);
                  v91 = v751;
                  v92 = v777;
                  v777 = 0;
                  v13 = v762;
                  if (v92)
                  {
                    v93 = (std::__shared_weak_count *)*((_QWORD *)v92 + 4);
                    if (v93)
                    {
                      v94 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v95 = __ldaxr(v94);
                      while (__stlxr(v95 - 1, v94));
                      if (!v95)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    v96 = (std::__shared_weak_count *)*((_QWORD *)v92 + 2);
                    if (v96)
                    {
                      v97 = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
                    v99 = v781;
                    v781 = 0;
                    if (v99)
                    {
                      v100 = *(std::__shared_weak_count **)(v99 + 32);
                      if (v100)
                      {
                        v101 = (unint64_t *)&v100->__shared_owners_;
                        do
                          v102 = __ldaxr(v101);
                        while (__stlxr(v102 - 1, v101));
                        if (!v102)
                        {
                          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                          std::__shared_weak_count::__release_weak(v100);
                        }
                      }
                      v103 = *(std::__shared_weak_count **)(v99 + 16);
                      if (v103)
                      {
                        v104 = (unint64_t *)&v103->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
                    }
                  }
                  v106 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v107 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v108 = __ldaxr(v107);
                    while (__stlxr(v108 - 1, v107));
                    if (!v108)
                    {
                      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                      std::__shared_weak_count::__release_weak(v106);
                    }
                  }
                  v109 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v110 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)object = 134219520;
                  *(double *)&object[4] = v19;
                  *(_WORD *)&object[12] = 2048;
                  *(_QWORD *)&object[14] = v766[0];
                  *(_WORD *)&object[22] = 2048;
                  *(_QWORD *)&object[24] = v766[1];
                  *(_WORD *)&object[32] = 2048;
                  *(_QWORD *)&object[34] = *(_QWORD *)&v767[0];
                  *(_WORD *)&object[42] = 2048;
                  *(_QWORD *)&object[44] = *((_QWORD *)&v767[0] + 1);
                  *(_WORD *)&object[52] = 2048;
                  *(_QWORD *)&object[54] = *(_QWORD *)&v767[1];
                  *(_WORD *)&object[62] = 2048;
                  v783[0] = *((void **)&v767[1] + 1);
                  v112 = (void *)_os_log_send_and_compose_impl();
                  v13 = v762;
                  v91 = v751;
                  if (v112)
                    free(v112);
                }
                if (v91)
                {
                  sub_20E8C003C((uint64_t)v771, "Initial pose: timestamp: %f, pose: %f, %f, %f, %f, %f, %f", v19, *(double *)v766, *(double *)&v766[1], *(double *)v767, *((double *)v767 + 1), *(double *)&v767[1], *((double *)&v767[1] + 1));
                  sub_20E863570((uint64_t)v771);
                }
                sub_20E863570((uint64_t)v771);
                v113 = v775;
                if (v775)
                {
                  v114 = (unint64_t *)&v775->__shared_owners_;
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
                goto LABEL_133;
              }
            }
            memmove(v66, v64, v65);
            goto LABEL_65;
          }
        }
LABEL_133:
        v116 = sub_210219C18();
        v117 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_152;
        v119 = *(_QWORD *)(v18 + 96);
        v120 = *(_QWORD *)(v18 + 104);
        v121 = *(_QWORD *)(v18 + 112);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v119;
        *(_WORD *)&object[12] = 2048;
        *(_QWORD *)&object[14] = v120;
        *(_WORD *)&object[22] = 2048;
        *(_QWORD *)&object[24] = v121;
        v122 = (char *)_os_log_send_and_compose_impl();
        v123 = strlen(v122);
        v771[0] = 0;
        pthread_threadid_np(0, v771);
        v124 = v771[0];
        timespec_get((timespec *)v771, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v116 + 1), (__int128 *)(v116 + 5), "Initial velocity: %f, %f, %f", 0x1CuLL, v122, v123, v124, v771);
        std::mutex::lock(&stru_254A5A410);
        v125 = qword_254A5A458;
        for (j = unk_254A5A460; v125 != j; v125 += 40)
        {
          v127 = *(_QWORD *)(v125 + 32);
          if (!v127)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v127 + 48))(v127, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v788 < 0)
        {
          operator delete(__p);
          if ((SHIBYTE(v786) & 0x80000000) == 0)
          {
LABEL_140:
            if (BYTE8(v784))
              goto LABEL_144;
            goto LABEL_146;
          }
        }
        else if ((SHIBYTE(v786) & 0x80000000) == 0)
        {
          goto LABEL_140;
        }
        operator delete(v785[0]);
        if (BYTE8(v784))
        {
LABEL_144:
          if (SBYTE7(v784) < 0)
            operator delete(v783[0]);
        }
LABEL_146:
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) == 0)
        {
          if (!v122)
            goto LABEL_152;
LABEL_151:
          free(v122);
          goto LABEL_152;
        }
        operator delete(*(void **)&object[8]);
        if (v122)
          goto LABEL_151;
LABEL_152:
        if (os_signpost_enabled((os_log_t)*v116))
        {
          v128 = *(_QWORD *)(v18 + 96);
          v129 = *(_QWORD *)(v18 + 104);
          v130 = *(_QWORD *)(v18 + 112);
          *(_DWORD *)object = 134218496;
          *(_QWORD *)&object[4] = v128;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v129;
          *(_WORD *)&object[22] = 2048;
          *(_QWORD *)&object[24] = v130;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        sub_20F82FD50(&v776);
        if (**(int **)(v776 + 56) <= 2)
        {
          v131 = *(unsigned __int8 *)(v776 + 72);
          v132 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
          v133 = v132;
          if (v131 || v132)
          {
            v752 = v131;
            v771[0] = (__uint64_t)&v776;
            v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
            DWORD2(v772) = 2;
            *(_QWORD *)&v773 = "unknown file";
            DWORD2(v773) = 564;
            *(_QWORD *)&v774 = "unknown function";
            *((_QWORD *)&v774 + 1) = 0;
            v775 = 0;
            v134 = *(_QWORD *)v771[0];
            if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
            {
              v136 = *(const char **)(v134 + 16);
              v135 = *(_QWORD *)(v134 + 24);
              v745 = *(_QWORD *)v771[0] + 16;
              v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v138 & 1) == 0)
              {
LABEL_488:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v777);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v777);
                  if (v780 && SHIBYTE(v779) < 0)
                    operator delete(v777);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v135 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
              v136 = (const char *)(*(_QWORD *)v771[0] + 16);
              v745 = (uint64_t)v136;
              v137 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v137 & 1) == 0)
                goto LABEL_488;
            }
            if (byte_254A4A4F8[23] >= 0)
              v139 = byte_254A4A4F8;
            else
              v139 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v140 = byte_254A4A4F8[23];
            else
              v140 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v139, v136);
            if (v140 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v140 >= 0x17)
            {
              v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v140 | 7) != 0x17)
                v142 = v140 | 7;
              v143 = v142 + 1;
              v141 = operator new(v142 + 1);
              *(_QWORD *)&object[16] = v140;
              *(_QWORD *)&object[24] = v143 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v141;
            }
            else
            {
              object[31] = v140;
              v141 = &object[8];
              if (!v140)
              {
LABEL_177:
                v141[v140] = 0;
                object[32] = 1;
                if (v135 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                ii = v761;
                if (v135 >= 0x17)
                {
                  v146 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v135 | 7) != 0x17)
                    v146 = v135 | 7;
                  v147 = v146 + 1;
                  v144 = operator new(v146 + 1);
                  *(_QWORD *)&object[48] = v135;
                  *(_QWORD *)&object[56] = v147 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v144;
                }
                else
                {
                  object[63] = v135;
                  v144 = &object[40];
                  if (!v135)
                  {
                    object[40] = 0;
                    LOBYTE(v783[0]) = 1;
                    v145 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_181;
LABEL_187:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_188;
                    goto LABEL_190;
                  }
                }
                memmove(v144, v136, v135);
                v144[v135] = 0;
                LOBYTE(v783[0]) = 1;
                v145 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_187;
LABEL_181:
                if (object[32])
                {
LABEL_188:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_190:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v133 && *(_QWORD *)(v133 + 24))
                {
                  v148 = _os_log_pack_size();
                  v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
                  v150 = (std::__shared_weak_count *)operator new();
                  v151 = v150;
                  v150->__shared_owners_ = 0;
                  v152 = (unint64_t *)&v150->__shared_owners_;
                  v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v150->__shared_weak_owners_ = 0;
                  v150[1].__vftable = v149;
                  *(_QWORD *)object = v149;
                  *(_QWORD *)&object[8] = v149;
                  *(_QWORD *)&object[16] = v150;
                  do
                    v153 = __ldxr(v152);
                  while (__stxr(v153 + 1, v152));
                  memset(&object[24], 0, 24);
                  do
                    v154 = __ldaxr(v152);
                  while (__stlxr(v154 - 1, v152));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                  v155 = *(_QWORD *)object;
                  v156 = _os_log_pack_fill();
                  v157 = *(_QWORD *)(v18 + 96);
                  v158 = *(_QWORD *)(v18 + 104);
                  v159 = *(_QWORD *)(v18 + 112);
                  *(_DWORD *)v156 = 134218496;
                  *(_QWORD *)(v156 + 4) = v157;
                  *(_WORD *)(v156 + 12) = 2048;
                  *(_QWORD *)(v156 + 14) = v158;
                  *(_WORD *)(v156 + 22) = 2048;
                  *(_QWORD *)(v156 + 24) = v159;
                  v160 = (char *)operator new();
                  v161 = *(unsigned __int8 *)(v134 + 39);
                  v162 = *(_QWORD *)(v134 + 16);
                  v163 = *(_QWORD *)(v134 + 24);
                  v164 = *(_OWORD *)&object[24];
                  *(_OWORD *)(v160 + 8) = *(_OWORD *)&object[8];
                  if ((v161 & 0x80u) != 0)
                    v161 = v163;
                  else
                    v162 = v745;
                  *(_QWORD *)v160 = v155;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v160 + 24) = v164;
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v160 + 5) = v162;
                  *((_QWORD *)v160 + 6) = v161;
                  v160[56] = 2;
                  v781 = 0;
                  v777 = v160;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v133 + 24) + 40))(*(_QWORD *)(v133 + 24), &v777);
                  v165 = v752;
                  v166 = v777;
                  v777 = 0;
                  v13 = v762;
                  if (v166)
                  {
                    v167 = (std::__shared_weak_count *)*((_QWORD *)v166 + 4);
                    if (v167)
                    {
                      v168 = (unint64_t *)&v167->__shared_owners_;
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                        std::__shared_weak_count::__release_weak(v167);
                      }
                    }
                    v170 = (std::__shared_weak_count *)*((_QWORD *)v166 + 2);
                    if (v170)
                    {
                      v171 = (unint64_t *)&v170->__shared_owners_;
                      do
                        v172 = __ldaxr(v171);
                      while (__stlxr(v172 - 1, v171));
                      if (!v172)
                      {
                        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                        std::__shared_weak_count::__release_weak(v170);
                      }
                    }
                    MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                    v173 = v781;
                    v781 = 0;
                    if (v173)
                    {
                      v174 = *(std::__shared_weak_count **)(v173 + 32);
                      if (v174)
                      {
                        v175 = (unint64_t *)&v174->__shared_owners_;
                        do
                          v176 = __ldaxr(v175);
                        while (__stlxr(v176 - 1, v175));
                        if (!v176)
                        {
                          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                          std::__shared_weak_count::__release_weak(v174);
                        }
                      }
                      v177 = *(std::__shared_weak_count **)(v173 + 16);
                      if (v177)
                      {
                        v178 = (unint64_t *)&v177->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                        }
                      }
                      MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                    }
                  }
                  v180 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v181 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v182 = __ldaxr(v181);
                    while (__stlxr(v182 - 1, v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                      std::__shared_weak_count::__release_weak(v180);
                    }
                  }
                  v183 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v184 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v185 = __ldaxr(v184);
                    while (__stlxr(v185 - 1, v184));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                      std::__shared_weak_count::__release_weak(v183);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG);
                  v186 = *(_QWORD *)(v18 + 96);
                  v187 = *(_QWORD *)(v18 + 104);
                  v188 = *(_QWORD *)(v18 + 112);
                  *(_DWORD *)object = 134218496;
                  *(_QWORD *)&object[4] = v186;
                  *(_WORD *)&object[12] = 2048;
                  *(_QWORD *)&object[14] = v187;
                  *(_WORD *)&object[22] = 2048;
                  *(_QWORD *)&object[24] = v188;
                  v189 = (void *)_os_log_send_and_compose_impl();
                  v13 = v762;
                  v165 = v752;
                  if (v189)
                    free(v189);
                }
                if (v165)
                {
                  sub_20E8C003C((uint64_t)v771, "Initial velocity: %f, %f, %f", *(double *)(v18 + 96), *(double *)(v18 + 104), *(double *)(v18 + 112));
                  sub_20E863570((uint64_t)v771);
                }
                sub_20E863570((uint64_t)v771);
                v190 = v775;
                if (v775)
                {
                  v191 = (unint64_t *)&v775->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                }
                goto LABEL_245;
              }
            }
            memmove(v141, v139, v140);
            goto LABEL_177;
          }
        }
LABEL_245:
        v193 = sub_210219C18();
        v194 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v194 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_264;
        v196 = *(_QWORD *)(v18 + 120);
        v197 = *(_QWORD *)(v18 + 128);
        v198 = *(_QWORD *)(v18 + 136);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v196;
        *(_WORD *)&object[12] = 2048;
        *(_QWORD *)&object[14] = v197;
        *(_WORD *)&object[22] = 2048;
        *(_QWORD *)&object[24] = v198;
        v199 = (char *)_os_log_send_and_compose_impl();
        v200 = strlen(v199);
        v771[0] = 0;
        pthread_threadid_np(0, v771);
        v201 = v771[0];
        timespec_get((timespec *)v771, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v193 + 1), (__int128 *)(v193 + 5), "Initial gyro bias estimate: %f, %f, %f", 0x26uLL, v199, v200, v201, v771);
        std::mutex::lock(&stru_254A5A410);
        v202 = qword_254A5A458;
        for (k = unk_254A5A460; v202 != k; v202 += 40)
        {
          v204 = *(_QWORD *)(v202 + 32);
          if (!v204)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v204 + 48))(v204, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v788 < 0)
        {
          operator delete(__p);
          if ((SHIBYTE(v786) & 0x80000000) == 0)
          {
LABEL_252:
            if (BYTE8(v784))
              goto LABEL_256;
            goto LABEL_258;
          }
        }
        else if ((SHIBYTE(v786) & 0x80000000) == 0)
        {
          goto LABEL_252;
        }
        operator delete(v785[0]);
        if (BYTE8(v784))
        {
LABEL_256:
          if (SBYTE7(v784) < 0)
            operator delete(v783[0]);
        }
LABEL_258:
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) == 0)
        {
          if (!v199)
            goto LABEL_264;
LABEL_263:
          free(v199);
          goto LABEL_264;
        }
        operator delete(*(void **)&object[8]);
        if (v199)
          goto LABEL_263;
LABEL_264:
        if (os_signpost_enabled((os_log_t)*v193))
        {
          v205 = *(_QWORD *)(v18 + 120);
          v206 = *(_QWORD *)(v18 + 128);
          v207 = *(_QWORD *)(v18 + 136);
          *(_DWORD *)object = 134218496;
          *(_QWORD *)&object[4] = v205;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v206;
          *(_WORD *)&object[22] = 2048;
          *(_QWORD *)&object[24] = v207;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        sub_20F82FD50(&v776);
        if (**(int **)(v776 + 56) <= 2)
        {
          v208 = *(unsigned __int8 *)(v776 + 72);
          v209 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
          v210 = v209;
          if (v208 || v209)
          {
            v753 = v208;
            v771[0] = (__uint64_t)&v776;
            v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
            DWORD2(v772) = 2;
            *(_QWORD *)&v773 = "unknown file";
            DWORD2(v773) = 570;
            *(_QWORD *)&v774 = "unknown function";
            *((_QWORD *)&v774 + 1) = 0;
            v775 = 0;
            v211 = *(_QWORD *)v771[0];
            if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
            {
              v213 = *(const char **)(v211 + 16);
              v212 = *(_QWORD *)(v211 + 24);
              v746 = *(_QWORD *)v771[0] + 16;
              v215 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v215 & 1) == 0)
              {
LABEL_493:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v777);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v777);
                  if (v780 && SHIBYTE(v779) < 0)
                    operator delete(v777);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v212 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
              v213 = (const char *)(*(_QWORD *)v771[0] + 16);
              v746 = (uint64_t)v213;
              v214 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v214 & 1) == 0)
                goto LABEL_493;
            }
            if (byte_254A4A4F8[23] >= 0)
              v216 = byte_254A4A4F8;
            else
              v216 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v217 = byte_254A4A4F8[23];
            else
              v217 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v216, v213);
            if (v217 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v217 >= 0x17)
            {
              v219 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v217 | 7) != 0x17)
                v219 = v217 | 7;
              v220 = v219 + 1;
              v218 = operator new(v219 + 1);
              *(_QWORD *)&object[16] = v217;
              *(_QWORD *)&object[24] = v220 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v218;
            }
            else
            {
              object[31] = v217;
              v218 = &object[8];
              if (!v217)
              {
LABEL_289:
                v218[v217] = 0;
                object[32] = 1;
                if (v212 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                ii = v761;
                if (v212 >= 0x17)
                {
                  v223 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v212 | 7) != 0x17)
                    v223 = v212 | 7;
                  v224 = v223 + 1;
                  v221 = operator new(v223 + 1);
                  *(_QWORD *)&object[48] = v212;
                  *(_QWORD *)&object[56] = v224 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v221;
                }
                else
                {
                  object[63] = v212;
                  v221 = &object[40];
                  if (!v212)
                  {
                    object[40] = 0;
                    LOBYTE(v783[0]) = 1;
                    v222 = *(NSObject **)object;
                    if ((object[63] & 0x80000000) == 0)
                      goto LABEL_293;
LABEL_299:
                    operator delete(*(void **)&object[40]);
                    if (object[32])
                      goto LABEL_300;
                    goto LABEL_302;
                  }
                }
                memmove(v221, v213, v212);
                v221[v212] = 0;
                LOBYTE(v783[0]) = 1;
                v222 = *(NSObject **)object;
                if ((object[63] & 0x80000000) != 0)
                  goto LABEL_299;
LABEL_293:
                if (object[32])
                {
LABEL_300:
                  if ((object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_302:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (v210 && *(_QWORD *)(v210 + 24))
                {
                  v225 = _os_log_pack_size();
                  v226 = (std::__shared_weak_count_vtbl *)operator new(v225, (std::align_val_t)8uLL);
                  v227 = (std::__shared_weak_count *)operator new();
                  v228 = v227;
                  v227->__shared_owners_ = 0;
                  v229 = (unint64_t *)&v227->__shared_owners_;
                  v227->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v227->__shared_weak_owners_ = 0;
                  v227[1].__vftable = v226;
                  *(_QWORD *)object = v226;
                  *(_QWORD *)&object[8] = v226;
                  *(_QWORD *)&object[16] = v227;
                  do
                    v230 = __ldxr(v229);
                  while (__stxr(v230 + 1, v229));
                  memset(&object[24], 0, 24);
                  do
                    v231 = __ldaxr(v229);
                  while (__stlxr(v231 - 1, v229));
                  if (!v231)
                  {
                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                    std::__shared_weak_count::__release_weak(v228);
                  }
                  v232 = *(_QWORD *)object;
                  v233 = _os_log_pack_fill();
                  v234 = *(_QWORD *)(v18 + 120);
                  v235 = *(_QWORD *)(v18 + 128);
                  v236 = *(_QWORD *)(v18 + 136);
                  *(_DWORD *)v233 = 134218496;
                  *(_QWORD *)(v233 + 4) = v234;
                  *(_WORD *)(v233 + 12) = 2048;
                  *(_QWORD *)(v233 + 14) = v235;
                  *(_WORD *)(v233 + 22) = 2048;
                  *(_QWORD *)(v233 + 24) = v236;
                  v237 = (char *)operator new();
                  v238 = *(unsigned __int8 *)(v211 + 39);
                  v239 = *(_QWORD *)(v211 + 16);
                  v240 = *(_QWORD *)(v211 + 24);
                  v241 = *(_OWORD *)&object[24];
                  *(_OWORD *)(v237 + 8) = *(_OWORD *)&object[8];
                  if ((v238 & 0x80u) != 0)
                    v238 = v240;
                  else
                    v239 = v746;
                  *(_QWORD *)v237 = v232;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v237 + 24) = v241;
                  *(_QWORD *)&object[24] = 0;
                  *(_QWORD *)&object[32] = 0;
                  *((_QWORD *)v237 + 5) = v239;
                  *((_QWORD *)v237 + 6) = v238;
                  v237[56] = 2;
                  v781 = 0;
                  v777 = v237;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v210 + 24) + 40))(*(_QWORD *)(v210 + 24), &v777);
                  v242 = v753;
                  v243 = v777;
                  v777 = 0;
                  v13 = v762;
                  if (v243)
                  {
                    v244 = (std::__shared_weak_count *)*((_QWORD *)v243 + 4);
                    if (v244)
                    {
                      v245 = (unint64_t *)&v244->__shared_owners_;
                      do
                        v246 = __ldaxr(v245);
                      while (__stlxr(v246 - 1, v245));
                      if (!v246)
                      {
                        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                        std::__shared_weak_count::__release_weak(v244);
                      }
                    }
                    v247 = (std::__shared_weak_count *)*((_QWORD *)v243 + 2);
                    if (v247)
                    {
                      v248 = (unint64_t *)&v247->__shared_owners_;
                      do
                        v249 = __ldaxr(v248);
                      while (__stlxr(v249 - 1, v248));
                      if (!v249)
                      {
                        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                        std::__shared_weak_count::__release_weak(v247);
                      }
                    }
                    MEMORY[0x212BC6398](v243, 0x10F0C40B62ED6C6);
                    v250 = v781;
                    v781 = 0;
                    if (v250)
                    {
                      v251 = *(std::__shared_weak_count **)(v250 + 32);
                      if (v251)
                      {
                        v252 = (unint64_t *)&v251->__shared_owners_;
                        do
                          v253 = __ldaxr(v252);
                        while (__stlxr(v253 - 1, v252));
                        if (!v253)
                        {
                          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                          std::__shared_weak_count::__release_weak(v251);
                        }
                      }
                      v254 = *(std::__shared_weak_count **)(v250 + 16);
                      if (v254)
                      {
                        v255 = (unint64_t *)&v254->__shared_owners_;
                        do
                          v256 = __ldaxr(v255);
                        while (__stlxr(v256 - 1, v255));
                        if (!v256)
                        {
                          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                          std::__shared_weak_count::__release_weak(v254);
                        }
                      }
                      MEMORY[0x212BC6398](v250, 0x10F0C40B62ED6C6);
                    }
                  }
                  v257 = *(std::__shared_weak_count **)&object[32];
                  if (*(_QWORD *)&object[32])
                  {
                    v258 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                    do
                      v259 = __ldaxr(v258);
                    while (__stlxr(v259 - 1, v258));
                    if (!v259)
                    {
                      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                      std::__shared_weak_count::__release_weak(v257);
                    }
                  }
                  v260 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v261 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v262 = __ldaxr(v261);
                    while (__stlxr(v262 - 1, v261));
                    if (!v262)
                    {
                      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                      std::__shared_weak_count::__release_weak(v260);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG);
                  v263 = *(_QWORD *)(v18 + 120);
                  v264 = *(_QWORD *)(v18 + 128);
                  v265 = *(_QWORD *)(v18 + 136);
                  *(_DWORD *)object = 134218496;
                  *(_QWORD *)&object[4] = v263;
                  *(_WORD *)&object[12] = 2048;
                  *(_QWORD *)&object[14] = v264;
                  *(_WORD *)&object[22] = 2048;
                  *(_QWORD *)&object[24] = v265;
                  v266 = (void *)_os_log_send_and_compose_impl();
                  v13 = v762;
                  v242 = v753;
                  if (v266)
                    free(v266);
                }
                if (v242)
                {
                  sub_20E8C003C((uint64_t)v771, "Initial gyro bias estimate: %f, %f, %f", *(double *)(v18 + 120), *(double *)(v18 + 128), *(double *)(v18 + 136));
                  sub_20E863570((uint64_t)v771);
                }
                sub_20E863570((uint64_t)v771);
                v267 = v775;
                if (v775)
                {
                  v268 = (unint64_t *)&v775->__shared_owners_;
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 - 1, v268));
                  if (!v269)
                  {
                    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                    std::__shared_weak_count::__release_weak(v267);
                  }
                }
                goto LABEL_357;
              }
            }
            memmove(v218, v216, v217);
            goto LABEL_289;
          }
        }
LABEL_357:
        v270 = sub_210219C18();
        v271 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v271 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (!atomic_load(&qword_254A5A450))
          goto LABEL_376;
        v273 = *(_QWORD *)(v18 + 144);
        v274 = *(_QWORD *)(v18 + 152);
        v275 = *(_QWORD *)(v18 + 160);
        *(_DWORD *)object = 134218496;
        *(_QWORD *)&object[4] = v273;
        *(_WORD *)&object[12] = 2048;
        *(_QWORD *)&object[14] = v274;
        *(_WORD *)&object[22] = 2048;
        *(_QWORD *)&object[24] = v275;
        v276 = (char *)_os_log_send_and_compose_impl();
        v277 = strlen(v276);
        v771[0] = 0;
        pthread_threadid_np(0, v771);
        v278 = v771[0];
        timespec_get((timespec *)v771, 1);
        sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v270 + 1), (__int128 *)(v270 + 5), "Initial accel bias estimate: %f, %f, %f", 0x27uLL, v276, v277, v278, v771);
        std::mutex::lock(&stru_254A5A410);
        v279 = qword_254A5A458;
        for (m = unk_254A5A460; v279 != m; v279 += 40)
        {
          v281 = *(_QWORD *)(v279 + 32);
          if (!v281)
            sub_20E86D37C();
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v281 + 48))(v281, object);
        }
        std::mutex::unlock(&stru_254A5A410);
        if (v788 < 0)
        {
          operator delete(__p);
          if ((SHIBYTE(v786) & 0x80000000) == 0)
          {
LABEL_364:
            if (BYTE8(v784))
              goto LABEL_368;
            goto LABEL_370;
          }
        }
        else if ((SHIBYTE(v786) & 0x80000000) == 0)
        {
          goto LABEL_364;
        }
        operator delete(v785[0]);
        if (BYTE8(v784))
        {
LABEL_368:
          if (SBYTE7(v784) < 0)
            operator delete(v783[0]);
        }
LABEL_370:
        if (object[56] && (object[55] & 0x80000000) != 0)
          operator delete(*(void **)&object[32]);
        if ((object[31] & 0x80000000) == 0)
        {
          if (!v276)
            goto LABEL_376;
LABEL_375:
          free(v276);
          goto LABEL_376;
        }
        operator delete(*(void **)&object[8]);
        if (v276)
          goto LABEL_375;
LABEL_376:
        if (os_signpost_enabled((os_log_t)*v270))
        {
          v282 = *(_QWORD *)(v18 + 144);
          v283 = *(_QWORD *)(v18 + 152);
          v284 = *(_QWORD *)(v18 + 160);
          *(_DWORD *)object = 134218496;
          *(_QWORD *)&object[4] = v282;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v283;
          *(_WORD *)&object[22] = 2048;
          *(_QWORD *)&object[24] = v284;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        sub_20F82FD50(&v776);
        if (**(int **)(v776 + 56) > 2
          || (v285 = *(unsigned __int8 *)(v776 + 72),
              v286 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0),
              v287 = v286,
              !v285)
          && !v286)
        {
LABEL_468:
          v347 = (_QWORD *)v12[1];
          if (v347)
            goto LABEL_469;
          goto LABEL_472;
        }
        v754 = v285;
        v771[0] = (__uint64_t)&v776;
        v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
        DWORD2(v772) = 2;
        *(_QWORD *)&v773 = "unknown file";
        DWORD2(v773) = 576;
        *(_QWORD *)&v774 = "unknown function";
        *((_QWORD *)&v774 + 1) = 0;
        v775 = 0;
        v288 = *(_QWORD *)v771[0];
        if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
        {
          v290 = *(const char **)(v288 + 16);
          v289 = *(_QWORD *)(v288 + 24);
          v747 = *(_QWORD *)v771[0] + 16;
          v292 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v292 & 1) != 0)
            goto LABEL_387;
        }
        else
        {
          v289 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
          v290 = (const char *)(*(_QWORD *)v771[0] + 16);
          v747 = (uint64_t)v290;
          v291 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v291 & 1) != 0)
            goto LABEL_387;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v777);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v777);
          if (v780 && SHIBYTE(v779) < 0)
            operator delete(v777);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_387:
        if (byte_254A4A4F8[23] >= 0)
          v293 = byte_254A4A4F8;
        else
          v293 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v294 = byte_254A4A4F8[23];
        else
          v294 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v293, v290);
        if (v294 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v294 >= 0x17)
        {
          v296 = (v294 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v294 | 7) != 0x17)
            v296 = v294 | 7;
          v297 = v296 + 1;
          v295 = operator new(v296 + 1);
          *(_QWORD *)&object[16] = v294;
          *(_QWORD *)&object[24] = v297 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v295;
LABEL_400:
          memmove(v295, v293, v294);
          goto LABEL_401;
        }
        object[31] = v294;
        v295 = &object[8];
        if (v294)
          goto LABEL_400;
LABEL_401:
        v295[v294] = 0;
        object[32] = 1;
        if (v289 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        ii = v761;
        if (v289 >= 0x17)
        {
          v300 = (v289 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v289 | 7) != 0x17)
            v300 = v289 | 7;
          v301 = v300 + 1;
          v298 = operator new(v300 + 1);
          *(_QWORD *)&object[48] = v289;
          *(_QWORD *)&object[56] = v301 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v298;
        }
        else
        {
          object[63] = v289;
          v298 = &object[40];
          if (!v289)
          {
            object[40] = 0;
            LOBYTE(v783[0]) = 1;
            v299 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
              goto LABEL_405;
            goto LABEL_411;
          }
        }
        memmove(v298, v290, v289);
        v298[v289] = 0;
        LOBYTE(v783[0]) = 1;
        v299 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
        {
LABEL_405:
          if (!object[32])
            goto LABEL_414;
          goto LABEL_412;
        }
LABEL_411:
        operator delete(*(void **)&object[40]);
        if (!object[32])
          goto LABEL_414;
LABEL_412:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_414:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v287 && *(_QWORD *)(v287 + 24))
        {
          v302 = _os_log_pack_size();
          v303 = (std::__shared_weak_count_vtbl *)operator new(v302, (std::align_val_t)8uLL);
          v304 = (std::__shared_weak_count *)operator new();
          v305 = v304;
          v304->__shared_owners_ = 0;
          v306 = (unint64_t *)&v304->__shared_owners_;
          v304->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v304->__shared_weak_owners_ = 0;
          v304[1].__vftable = v303;
          *(_QWORD *)object = v303;
          *(_QWORD *)&object[8] = v303;
          *(_QWORD *)&object[16] = v304;
          do
            v307 = __ldxr(v306);
          while (__stxr(v307 + 1, v306));
          memset(&object[24], 0, 24);
          do
            v308 = __ldaxr(v306);
          while (__stlxr(v308 - 1, v306));
          if (!v308)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v305);
          }
          v309 = *(_QWORD *)object;
          v310 = _os_log_pack_fill();
          v311 = *(_QWORD *)(v18 + 144);
          v312 = *(_QWORD *)(v18 + 152);
          v313 = *(_QWORD *)(v18 + 160);
          *(_DWORD *)v310 = 134218496;
          *(_QWORD *)(v310 + 4) = v311;
          *(_WORD *)(v310 + 12) = 2048;
          *(_QWORD *)(v310 + 14) = v312;
          *(_WORD *)(v310 + 22) = 2048;
          *(_QWORD *)(v310 + 24) = v313;
          v314 = (char *)operator new();
          v315 = *(unsigned __int8 *)(v288 + 39);
          v316 = *(_QWORD *)(v288 + 16);
          v317 = *(_QWORD *)(v288 + 24);
          v318 = *(_OWORD *)&object[24];
          *(_OWORD *)(v314 + 8) = *(_OWORD *)&object[8];
          if ((v315 & 0x80u) != 0)
            v315 = v317;
          else
            v316 = v747;
          *(_QWORD *)v314 = v309;
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v314 + 24) = v318;
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *((_QWORD *)v314 + 5) = v316;
          *((_QWORD *)v314 + 6) = v315;
          v314[56] = 2;
          v781 = 0;
          v777 = v314;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v287 + 24) + 40))(*(_QWORD *)(v287 + 24), &v777);
          v319 = v754;
          v320 = v777;
          v777 = 0;
          v13 = v762;
          if (v320)
          {
            v321 = (std::__shared_weak_count *)*((_QWORD *)v320 + 4);
            if (v321)
            {
              v322 = (unint64_t *)&v321->__shared_owners_;
              do
                v323 = __ldaxr(v322);
              while (__stlxr(v323 - 1, v322));
              if (!v323)
              {
                ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                std::__shared_weak_count::__release_weak(v321);
              }
            }
            v324 = (std::__shared_weak_count *)*((_QWORD *)v320 + 2);
            if (v324)
            {
              v325 = (unint64_t *)&v324->__shared_owners_;
              do
                v326 = __ldaxr(v325);
              while (__stlxr(v326 - 1, v325));
              if (!v326)
              {
                ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                std::__shared_weak_count::__release_weak(v324);
              }
            }
            MEMORY[0x212BC6398](v320, 0x10F0C40B62ED6C6);
            v327 = v781;
            v781 = 0;
            if (v327)
            {
              v328 = *(std::__shared_weak_count **)(v327 + 32);
              if (v328)
              {
                v329 = (unint64_t *)&v328->__shared_owners_;
                do
                  v330 = __ldaxr(v329);
                while (__stlxr(v330 - 1, v329));
                if (!v330)
                {
                  ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                  std::__shared_weak_count::__release_weak(v328);
                }
              }
              v331 = *(std::__shared_weak_count **)(v327 + 16);
              if (v331)
              {
                v332 = (unint64_t *)&v331->__shared_owners_;
                do
                  v333 = __ldaxr(v332);
                while (__stlxr(v333 - 1, v332));
                if (!v333)
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
              }
              MEMORY[0x212BC6398](v327, 0x10F0C40B62ED6C6);
            }
          }
          v334 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v335 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v336 = __ldaxr(v335);
            while (__stlxr(v336 - 1, v335));
            if (!v336)
            {
              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
              std::__shared_weak_count::__release_weak(v334);
            }
          }
          v337 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v338 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v339 = __ldaxr(v338);
            while (__stlxr(v339 - 1, v338));
            if (!v339)
            {
              ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
              std::__shared_weak_count::__release_weak(v337);
            }
          }
        }
        else
        {
          os_log_type_enabled(v299, OS_LOG_TYPE_DEBUG);
          v340 = *(_QWORD *)(v18 + 144);
          v341 = *(_QWORD *)(v18 + 152);
          v342 = *(_QWORD *)(v18 + 160);
          *(_DWORD *)object = 134218496;
          *(_QWORD *)&object[4] = v340;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v341;
          *(_WORD *)&object[22] = 2048;
          *(_QWORD *)&object[24] = v342;
          v343 = (void *)_os_log_send_and_compose_impl();
          v13 = v762;
          v319 = v754;
          if (v343)
            free(v343);
        }
        if (v319)
        {
          sub_20E8C003C((uint64_t)v771, "Initial accel bias estimate: %f, %f, %f", *(double *)(v18 + 144), *(double *)(v18 + 152), *(double *)(v18 + 160));
          sub_20E863570((uint64_t)v771);
        }
        sub_20E863570((uint64_t)v771);
        v344 = v775;
        if (!v775)
          goto LABEL_468;
        v345 = (unint64_t *)&v775->__shared_owners_;
        do
          v346 = __ldaxr(v345);
        while (__stlxr(v346 - 1, v345));
        if (v346)
          goto LABEL_468;
        ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
        std::__shared_weak_count::__release_weak(v344);
        v347 = (_QWORD *)v12[1];
        if (v347)
        {
          do
          {
LABEL_469:
            v348 = v347;
            v347 = (_QWORD *)*v347;
          }
          while (v347);
          goto LABEL_10;
        }
        do
        {
LABEL_472:
          v348 = (_QWORD *)v12[2];
          _ZF = *v348 == (_QWORD)v12;
          v12 = v348;
        }
        while (!_ZF);
LABEL_10:
        ++v13;
        v10 = *(_QWORD **)(ii + 7952);
        v11 = (_QWORD *)*v10;
        _CF = v348 == (_QWORD *)(*v10 + 56) || v13 >= a2;
        v12 = v348;
      }
      while (!_CF);
    }
  }
  v349 = (_QWORD *)v11[37];
  v350 = v11 + 38;
  if (v349 == v11 + 38)
    goto LABEL_738;
  v758 = v11 + 38;
  do
  {
    v351 = *((_DWORD *)v349 + 8);
    v352 = *(_OWORD *)(v349 + 7);
    v353 = *(_OWORD *)(v349 + 11);
    *(_OWORD *)&object[32] = *(_OWORD *)(v349 + 9);
    *(_OWORD *)&object[48] = v353;
    v783[0] = *((void **)v349 + 13);
    *(_OWORD *)object = *(_OWORD *)(v349 + 5);
    *(_OWORD *)&object[16] = v352;
    v778 = 0.0;
    v779 = 0.0;
    v777 = 0;
    sub_20E9733B8((float64x2_t *)object, (double *)&v777);
    v354 = sub_210219C18();
    v355 = (unsigned __int16)v351;
    if ((unsigned __int16)v351 >= 0xAu
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v356 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v356 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v763 = (unsigned __int16)v351 + 10 * HIWORD(v351);
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_527;
    v358 = (unsigned __int16)v351;
    *(_DWORD *)object = 67109888;
    *(_DWORD *)&object[4] = (unsigned __int16)v351 + 10 * HIWORD(v351);
    *(_WORD *)&object[8] = 2048;
    *(_QWORD *)&object[10] = v777;
    *(_WORD *)&object[18] = 2048;
    *(double *)&object[20] = v778;
    *(_WORD *)&object[28] = 2048;
    *(double *)&object[30] = v779;
    v359 = (char *)_os_log_send_and_compose_impl();
    v360 = strlen(v359);
    v771[0] = 0;
    pthread_threadid_np(0, v771);
    v361 = v771[0];
    timespec_get((timespec *)v771, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v354 + 1), (__int128 *)(v354 + 5), "Initial Camera extrinsics: Camera ID: [%02u]: R_log_x: %f, R_log_y: %f, R_log_z: %f", 0x53uLL, v359, v360, v361, v771);
    std::mutex::lock(&stru_254A5A410);
    v362 = qword_254A5A458;
    for (n = unk_254A5A460; v362 != n; v362 += 40)
    {
      v364 = *(_QWORD *)(v362 + 32);
      if (!v364)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v364 + 48))(v364, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v788 < 0)
    {
      operator delete(__p);
      v355 = v358;
      if ((SHIBYTE(v786) & 0x80000000) == 0)
      {
LABEL_515:
        if (BYTE8(v784))
          goto LABEL_519;
        goto LABEL_521;
      }
    }
    else
    {
      v355 = v358;
      if ((SHIBYTE(v786) & 0x80000000) == 0)
        goto LABEL_515;
    }
    operator delete(v785[0]);
    if (BYTE8(v784))
    {
LABEL_519:
      if (SBYTE7(v784) < 0)
        operator delete(v783[0]);
    }
LABEL_521:
    if (object[56] && (object[55] & 0x80000000) != 0)
      operator delete(*(void **)&object[32]);
    if ((object[31] & 0x80000000) == 0)
    {
      if (!v359)
        goto LABEL_527;
LABEL_526:
      free(v359);
      goto LABEL_527;
    }
    operator delete(*(void **)&object[8]);
    if (v359)
      goto LABEL_526;
LABEL_527:
    if (os_signpost_enabled((os_log_t)*v354))
    {
      *(_DWORD *)object = 67109888;
      *(_DWORD *)&object[4] = v763;
      *(_WORD *)&object[8] = 2048;
      *(_QWORD *)&object[10] = v777;
      *(_WORD *)&object[18] = 2048;
      *(double *)&object[20] = v778;
      *(_WORD *)&object[28] = 2048;
      *(double *)&object[30] = v779;
      _os_signpost_emit_unreliably_with_name_impl();
    }
    sub_20F82FD50(&v776);
    if (**(int **)(v776 + 56) <= 2)
    {
      v365 = *(unsigned __int8 *)(v776 + 72);
      v366 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
      v367 = v366;
      if (v365 || v366)
      {
        v771[0] = (__uint64_t)&v776;
        v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
        DWORD2(v772) = 2;
        *(_QWORD *)&v773 = "unknown file";
        DWORD2(v773) = 591;
        *(_QWORD *)&v774 = "unknown function";
        *((_QWORD *)&v774 + 1) = 0;
        v775 = 0;
        if (v355 >= 0xA
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v368 = *(_QWORD *)v771[0];
        __dst = *(_QWORD **)v771[0];
        if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
        {
          v370 = *(const char **)(v368 + 16);
          v369 = *(_QWORD *)(v368 + 24);
          v748 = *(_QWORD *)v771[0] + 16;
          v372 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v372 & 1) != 0)
            goto LABEL_540;
        }
        else
        {
          v369 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
          v370 = (const char *)(*(_QWORD *)v771[0] + 16);
          v748 = (uint64_t)v370;
          v371 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v371 & 1) != 0)
            goto LABEL_540;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v766);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v766);
          if (BYTE8(v767[0]) && SBYTE7(v767[0]) < 0)
            operator delete((void *)v766[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_540:
        if (byte_254A4A4F8[23] >= 0)
          v373 = byte_254A4A4F8;
        else
          v373 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v374 = byte_254A4A4F8[23];
        else
          v374 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v373, v370);
        if (v374 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v374 >= 0x17)
        {
          v376 = v365;
          v377 = v355;
          v378 = (v374 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v374 | 7) != 0x17)
            v378 = v374 | 7;
          v379 = v378 + 1;
          v375 = operator new(v378 + 1);
          *(_QWORD *)&object[16] = v374;
          *(_QWORD *)&object[24] = v379 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v375;
          v355 = v377;
          v365 = v376;
        }
        else
        {
          object[31] = v374;
          v375 = &object[8];
          if (!v374)
          {
LABEL_554:
            v375[v374] = 0;
            object[32] = 1;
            if (v369 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v350 = v758;
            if (v369 >= 0x17)
            {
              v382 = v365;
              v383 = v355;
              v384 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v369 | 7) != 0x17)
                v384 = v369 | 7;
              v385 = v384 + 1;
              v380 = operator new(v384 + 1);
              *(_QWORD *)&object[48] = v369;
              *(_QWORD *)&object[56] = v385 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v380;
              v355 = v383;
              v365 = v382;
            }
            else
            {
              object[63] = v369;
              v380 = &object[40];
              if (!v369)
              {
                object[40] = 0;
                LOBYTE(v783[0]) = 1;
                v381 = *(NSObject **)object;
                if ((object[63] & 0x80000000) == 0)
                  goto LABEL_558;
                goto LABEL_564;
              }
            }
            memmove(v380, v370, v369);
            v380[v369] = 0;
            LOBYTE(v783[0]) = 1;
            v381 = *(NSObject **)object;
            if ((object[63] & 0x80000000) == 0)
            {
LABEL_558:
              if (!object[32])
                goto LABEL_567;
              goto LABEL_565;
            }
LABEL_564:
            operator delete(*(void **)&object[40]);
            if (!object[32])
            {
LABEL_567:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v367 && *(_QWORD *)(v367 + 24))
              {
                v386 = _os_log_pack_size();
                v387 = (std::__shared_weak_count_vtbl *)operator new(v386, (std::align_val_t)8uLL);
                v388 = (std::__shared_weak_count *)operator new();
                v389 = v388;
                v388->__shared_owners_ = 0;
                v390 = (unint64_t *)&v388->__shared_owners_;
                v388->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v388->__shared_weak_owners_ = 0;
                v388[1].__vftable = v387;
                *(_QWORD *)object = v387;
                *(_QWORD *)&object[8] = v387;
                *(_QWORD *)&object[16] = v388;
                do
                  v391 = __ldxr(v390);
                while (__stxr(v391 + 1, v390));
                memset(&object[24], 0, 24);
                do
                  v392 = __ldaxr(v390);
                while (__stlxr(v392 - 1, v390));
                if (!v392)
                {
                  ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                  std::__shared_weak_count::__release_weak(v389);
                }
                v393 = *(_QWORD *)object;
                v394 = _os_log_pack_fill();
                v395 = v777;
                v396 = v778;
                v397 = v779;
                *(_DWORD *)v394 = 67109888;
                *(_DWORD *)(v394 + 4) = v763;
                *(_WORD *)(v394 + 8) = 2048;
                *(_QWORD *)(v394 + 10) = v395;
                *(_WORD *)(v394 + 18) = 2048;
                *(double *)(v394 + 20) = v396;
                *(_WORD *)(v394 + 28) = 2048;
                *(double *)(v394 + 30) = v397;
                v398 = operator new();
                v399 = *((unsigned __int8 *)__dst + 39);
                v400 = __dst[2];
                v401 = __dst[3];
                v402 = *(_OWORD *)&object[24];
                *(_OWORD *)(v398 + 8) = *(_OWORD *)&object[8];
                if ((v399 & 0x80u) != 0)
                  v399 = v401;
                else
                  v400 = v748;
                *(_QWORD *)v398 = v393;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v398 + 24) = v402;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v398 + 40) = v400;
                *(_QWORD *)(v398 + 48) = v399;
                *(_BYTE *)(v398 + 56) = 2;
                v781 = 0;
                v766[0] = v398;
                (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v367 + 24) + 40))(*(_QWORD *)(v367 + 24), v766);
                v403 = v766[0];
                v766[0] = 0;
                if (v403)
                {
                  v404 = *(std::__shared_weak_count **)(v403 + 32);
                  if (v404)
                  {
                    v405 = (unint64_t *)&v404->__shared_owners_;
                    do
                      v406 = __ldaxr(v405);
                    while (__stlxr(v406 - 1, v405));
                    if (!v406)
                    {
                      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                      std::__shared_weak_count::__release_weak(v404);
                    }
                  }
                  v407 = *(std::__shared_weak_count **)(v403 + 16);
                  if (v407)
                  {
                    v408 = (unint64_t *)&v407->__shared_owners_;
                    do
                      v409 = __ldaxr(v408);
                    while (__stlxr(v409 - 1, v408));
                    if (!v409)
                    {
                      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                      std::__shared_weak_count::__release_weak(v407);
                    }
                  }
                  MEMORY[0x212BC6398](v403, 0x10F0C40B62ED6C6);
                  v410 = v781;
                  v781 = 0;
                  if (v410)
                  {
                    v411 = *(std::__shared_weak_count **)(v410 + 32);
                    if (v411)
                    {
                      v412 = (unint64_t *)&v411->__shared_owners_;
                      do
                        v413 = __ldaxr(v412);
                      while (__stlxr(v413 - 1, v412));
                      if (!v413)
                      {
                        ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                        std::__shared_weak_count::__release_weak(v411);
                      }
                    }
                    v414 = *(std::__shared_weak_count **)(v410 + 16);
                    if (v414)
                    {
                      v415 = (unint64_t *)&v414->__shared_owners_;
                      do
                        v416 = __ldaxr(v415);
                      while (__stlxr(v416 - 1, v415));
                      if (!v416)
                      {
                        ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
                        std::__shared_weak_count::__release_weak(v414);
                      }
                    }
                    MEMORY[0x212BC6398](v410, 0x10F0C40B62ED6C6);
                  }
                }
                v417 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v418 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v419 = __ldaxr(v418);
                  while (__stlxr(v419 - 1, v418));
                  if (!v419)
                  {
                    ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                    std::__shared_weak_count::__release_weak(v417);
                  }
                }
                v420 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v421 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v422 = __ldaxr(v421);
                  while (__stlxr(v422 - 1, v421));
                  if (!v422)
                  {
                    ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
                    std::__shared_weak_count::__release_weak(v420);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v381, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)object = 67109888;
                *(_DWORD *)&object[4] = v763;
                *(_WORD *)&object[8] = 2048;
                *(_QWORD *)&object[10] = v777;
                *(_WORD *)&object[18] = 2048;
                *(double *)&object[20] = v778;
                *(_WORD *)&object[28] = 2048;
                *(double *)&object[30] = v779;
                v423 = (void *)_os_log_send_and_compose_impl();
                if (v423)
                  free(v423);
              }
              if (v365)
              {
                if (v355 >= 0xA
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                sub_20E8C003C((uint64_t)v771, "Initial Camera extrinsics: Camera ID: [%02u]: R_log_x: %f, R_log_y: %f, R_log_z: %f", v763, *(double *)&v777, v778, v779);
                sub_20E863570((uint64_t)v771);
              }
              sub_20E863570((uint64_t)v771);
              v424 = v775;
              if (v775)
              {
                v425 = (unint64_t *)&v775->__shared_owners_;
                do
                  v426 = __ldaxr(v425);
                while (__stlxr(v426 - 1, v425));
                if (!v426)
                {
                  ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
                  std::__shared_weak_count::__release_weak(v424);
                }
              }
              goto LABEL_624;
            }
LABEL_565:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            goto LABEL_567;
          }
        }
        memmove(v375, v373, v374);
        goto LABEL_554;
      }
    }
LABEL_624:
    sub_20F82FD50(&v776);
    if (**(int **)(v776 + 56) > 2)
      goto LABEL_718;
    v427 = *(unsigned __int8 *)(v776 + 72);
    v428 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
    v429 = v428;
    _ZF = !v427 && v428 == 0;
    if (_ZF)
      goto LABEL_718;
    v771[0] = (__uint64_t)&v776;
    v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
    DWORD2(v772) = 2;
    *(_QWORD *)&v773 = "unknown file";
    DWORD2(v773) = 596;
    *(_QWORD *)&v774 = "unknown function";
    *((_QWORD *)&v774 + 1) = 0;
    v775 = 0;
    if (v355 >= 0xA
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v431 = *(_QWORD *)v771[0];
    __dsta = *(_QWORD **)v771[0];
    if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
    {
      v433 = *(const char **)(v431 + 16);
      v432 = *(_QWORD *)(v431 + 24);
      v749 = *(_QWORD *)v771[0] + 16;
      v435 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v435 & 1) != 0)
        goto LABEL_635;
    }
    else
    {
      v432 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
      v433 = (const char *)(*(_QWORD *)v771[0] + 16);
      v749 = (uint64_t)v433;
      v434 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v434 & 1) != 0)
        goto LABEL_635;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v766);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v766);
      if (BYTE8(v767[0]) && SBYTE7(v767[0]) < 0)
        operator delete((void *)v766[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_635:
    if (byte_254A4A4F8[23] >= 0)
      v436 = byte_254A4A4F8;
    else
      v436 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v437 = byte_254A4A4F8[23];
    else
      v437 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v436, v433);
    if (v437 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v437 >= 0x17)
    {
      v439 = v427;
      v440 = v355;
      v441 = (v437 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v437 | 7) != 0x17)
        v441 = v437 | 7;
      v442 = v441 + 1;
      v438 = operator new(v441 + 1);
      *(_QWORD *)&object[16] = v437;
      *(_QWORD *)&object[24] = v442 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v438;
      v355 = v440;
      v427 = v439;
LABEL_648:
      memmove(v438, v436, v437);
      goto LABEL_649;
    }
    object[31] = v437;
    v438 = &object[8];
    if (v437)
      goto LABEL_648;
LABEL_649:
    v438[v437] = 0;
    object[32] = 1;
    if (v432 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v350 = v758;
    if (v432 >= 0x17)
    {
      v445 = v427;
      v446 = v355;
      v447 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v432 | 7) != 0x17)
        v447 = v432 | 7;
      v448 = v447 + 1;
      v443 = operator new(v447 + 1);
      *(_QWORD *)&object[48] = v432;
      *(_QWORD *)&object[56] = v448 | 0x8000000000000000;
      *(_QWORD *)&object[40] = v443;
      v355 = v446;
      v427 = v445;
    }
    else
    {
      object[63] = v432;
      v443 = &object[40];
      if (!v432)
      {
        object[40] = 0;
        LOBYTE(v783[0]) = 1;
        v444 = *(NSObject **)object;
        if ((object[63] & 0x80000000) == 0)
          goto LABEL_653;
        goto LABEL_659;
      }
    }
    memmove(v443, v433, v432);
    v443[v432] = 0;
    LOBYTE(v783[0]) = 1;
    v444 = *(NSObject **)object;
    if ((object[63] & 0x80000000) == 0)
    {
LABEL_653:
      if (!object[32])
        goto LABEL_662;
      goto LABEL_660;
    }
LABEL_659:
    operator delete(*(void **)&object[40]);
    if (!object[32])
      goto LABEL_662;
LABEL_660:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
LABEL_662:
    if (*(_QWORD *)object)
      os_release(*(void **)object);
    if (v429 && *(_QWORD *)(v429 + 24))
    {
      v449 = _os_log_pack_size();
      v450 = (std::__shared_weak_count_vtbl *)operator new(v449, (std::align_val_t)8uLL);
      v451 = (std::__shared_weak_count *)operator new();
      v452 = v451;
      v451->__shared_owners_ = 0;
      v453 = (unint64_t *)&v451->__shared_owners_;
      v451->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v451->__shared_weak_owners_ = 0;
      v451[1].__vftable = v450;
      *(_QWORD *)object = v450;
      *(_QWORD *)&object[8] = v450;
      *(_QWORD *)&object[16] = v451;
      do
        v454 = __ldxr(v453);
      while (__stxr(v454 + 1, v453));
      memset(&object[24], 0, 24);
      do
        v455 = __ldaxr(v453);
      while (__stlxr(v455 - 1, v453));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
        std::__shared_weak_count::__release_weak(v452);
      }
      v456 = *(_QWORD *)object;
      v457 = _os_log_pack_fill();
      v458 = v349[14];
      v459 = v349[15];
      v460 = v349[16];
      *(_DWORD *)v457 = 67109888;
      *(_DWORD *)(v457 + 4) = v763;
      *(_WORD *)(v457 + 8) = 2048;
      *(_QWORD *)(v457 + 10) = v458;
      *(_WORD *)(v457 + 18) = 2048;
      *(_QWORD *)(v457 + 20) = v459;
      *(_WORD *)(v457 + 28) = 2048;
      *(_QWORD *)(v457 + 30) = v460;
      v461 = operator new();
      v462 = *((unsigned __int8 *)__dsta + 39);
      v463 = __dsta[2];
      v464 = __dsta[3];
      v465 = *(_OWORD *)&object[24];
      *(_OWORD *)(v461 + 8) = *(_OWORD *)&object[8];
      if ((v462 & 0x80u) != 0)
        v462 = v464;
      else
        v463 = v749;
      *(_QWORD *)v461 = v456;
      *(_QWORD *)&object[8] = 0;
      *(_QWORD *)&object[16] = 0;
      *(_OWORD *)(v461 + 24) = v465;
      *(_QWORD *)&object[24] = 0;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)(v461 + 40) = v463;
      *(_QWORD *)(v461 + 48) = v462;
      *(_BYTE *)(v461 + 56) = 2;
      v781 = 0;
      v766[0] = v461;
      (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v429 + 24) + 40))(*(_QWORD *)(v429 + 24), v766);
      v466 = v766[0];
      v766[0] = 0;
      if (v466)
      {
        v467 = *(std::__shared_weak_count **)(v466 + 32);
        if (v467)
        {
          v468 = (unint64_t *)&v467->__shared_owners_;
          do
            v469 = __ldaxr(v468);
          while (__stlxr(v469 - 1, v468));
          if (!v469)
          {
            ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
            std::__shared_weak_count::__release_weak(v467);
          }
        }
        v470 = *(std::__shared_weak_count **)(v466 + 16);
        if (v470)
        {
          v471 = (unint64_t *)&v470->__shared_owners_;
          do
            v472 = __ldaxr(v471);
          while (__stlxr(v472 - 1, v471));
          if (!v472)
          {
            ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
            std::__shared_weak_count::__release_weak(v470);
          }
        }
        MEMORY[0x212BC6398](v466, 0x10F0C40B62ED6C6);
        v473 = v781;
        v781 = 0;
        if (v473)
        {
          v474 = *(std::__shared_weak_count **)(v473 + 32);
          if (v474)
          {
            v475 = (unint64_t *)&v474->__shared_owners_;
            do
              v476 = __ldaxr(v475);
            while (__stlxr(v476 - 1, v475));
            if (!v476)
            {
              ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
              std::__shared_weak_count::__release_weak(v474);
            }
          }
          v477 = *(std::__shared_weak_count **)(v473 + 16);
          if (v477)
          {
            v478 = (unint64_t *)&v477->__shared_owners_;
            do
              v479 = __ldaxr(v478);
            while (__stlxr(v479 - 1, v478));
            if (!v479)
            {
              ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
              std::__shared_weak_count::__release_weak(v477);
            }
          }
          MEMORY[0x212BC6398](v473, 0x10F0C40B62ED6C6);
        }
      }
      v480 = *(std::__shared_weak_count **)&object[32];
      if (*(_QWORD *)&object[32])
      {
        v481 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
        do
          v482 = __ldaxr(v481);
        while (__stlxr(v482 - 1, v481));
        if (!v482)
        {
          ((void (*)(std::__shared_weak_count *))v480->__on_zero_shared)(v480);
          std::__shared_weak_count::__release_weak(v480);
        }
      }
      v483 = *(std::__shared_weak_count **)&object[16];
      if (*(_QWORD *)&object[16])
      {
        v484 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
        do
          v485 = __ldaxr(v484);
        while (__stlxr(v485 - 1, v484));
        if (!v485)
        {
          ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
          std::__shared_weak_count::__release_weak(v483);
        }
      }
    }
    else
    {
      os_log_type_enabled(v444, OS_LOG_TYPE_DEBUG);
      v486 = v349[14];
      v487 = v349[15];
      v488 = v349[16];
      *(_DWORD *)object = 67109888;
      *(_DWORD *)&object[4] = v763;
      *(_WORD *)&object[8] = 2048;
      *(_QWORD *)&object[10] = v486;
      *(_WORD *)&object[18] = 2048;
      *(_QWORD *)&object[20] = v487;
      *(_WORD *)&object[28] = 2048;
      *(_QWORD *)&object[30] = v488;
      v489 = (void *)_os_log_send_and_compose_impl();
      if (v489)
        free(v489);
    }
    if (v427)
    {
      if (v355 >= 0xA
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_20E8C003C((uint64_t)v771, "Initial Camera extrinsics: Camera ID: [%02u]: t_C_to_I_x: %f, t_C_to_I_y: %f, t_C_to_I_z: %f", v763, *((double *)v349 + 14), *((double *)v349 + 15), *((double *)v349 + 16));
      sub_20E863570((uint64_t)v771);
    }
    sub_20E863570((uint64_t)v771);
    v490 = v775;
    if (!v775)
      goto LABEL_718;
    v491 = (unint64_t *)&v775->__shared_owners_;
    do
      v492 = __ldaxr(v491);
    while (__stlxr(v492 - 1, v491));
    if (v492)
    {
LABEL_718:
      v493 = (_QWORD *)v349[1];
      if (v493)
        goto LABEL_719;
      goto LABEL_722;
    }
    ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
    std::__shared_weak_count::__release_weak(v490);
    v493 = (_QWORD *)v349[1];
    if (v493)
    {
      do
      {
LABEL_719:
        v494 = v493;
        v493 = (_QWORD *)*v493;
      }
      while (v493);
      goto LABEL_505;
    }
    do
    {
LABEL_722:
      v494 = (_QWORD *)v349[2];
      _ZF = *v494 == (_QWORD)v349;
      v349 = v494;
    }
    while (!_ZF);
LABEL_505:
    v349 = v494;
    ii = v761;
  }
  while (v494 != v350);
  v10 = *(_QWORD **)(v761 + 7952);
  v11 = (_QWORD *)*v10;
LABEL_738:
  v495 = (uint64_t *)v11[42];
  if (v495)
  {
    v496 = v11[6];
    v497 = *(_QWORD *)(v496 + 32);
    v764 = *(_DWORD *)(v496 + 40);
    v740 = v497;
    while (2)
    {
      v498 = *((_DWORD *)v495 + 4);
      v499 = *(_QWORD *)(ii + 7952);
      v501 = *(uint64_t **)(v499 + 40);
      v500 = *(uint64_t **)(v499 + 48);
      if (v500 != v501)
      {
        v502 = ((char *)v500 - (char *)v501) >> 4;
        while (1)
        {
          v503 = v502 >> 1;
          v504 = &v501[2 * (v502 >> 1)];
          v505 = *v504;
          v506 = *(_DWORD *)(*v504 + 16);
          v507 = v506 >= v498;
          if (v506 != v498)
            goto LABEL_749;
          if (*(_QWORD *)v505 >= v497)
            break;
LABEL_743:
          v501 = v504 + 2;
          v503 = v502 + ~v503;
LABEL_744:
          v502 = v503;
          if (!v503)
            goto LABEL_752;
        }
        if (*(_QWORD *)v505 != v497)
          goto LABEL_744;
        v507 = *(_DWORD *)(v505 + 8) >= v764;
LABEL_749:
        if (v507)
          goto LABEL_744;
        goto LABEL_743;
      }
LABEL_752:
      if (v501 != v500)
      {
        v508 = *v501;
        if (*(_DWORD *)(*v501 + 16) == v498 && *(_QWORD *)v508 == v497 && *(_DWORD *)(v508 + 8) == v764)
          v500 = v501;
      }
      v509 = *(_DWORD **)(*v500 + 32);
      v510 = v509[248];
      if (v510 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v510 = v509[248];
      }
      if (!v510)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      memmove(v771, v509, 0x48uLL);
      sub_20F13B958((uint64_t)(v495 + 3), (double *)v771, (uint64_t)object);
      v773 = *(_OWORD *)&object[32];
      v774 = *(_OWORD *)&object[48];
      v775 = (std::__shared_weak_count *)v783[0];
      *(_OWORD *)v771 = *(_OWORD *)object;
      v772 = *(_OWORD *)&object[16];
      v511 = *((_DWORD *)v495 + 4);
      v512 = sub_210219C18();
      v513 = (unsigned __int16)v511;
      if ((unsigned __int16)v511 >= 0xAu
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v514 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v514 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      v515 = (unsigned __int16)v511 + 10 * HIWORD(v511);
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_782;
      *(_DWORD *)object = 67110144;
      v517 = v515;
      *(_DWORD *)&object[4] = v515;
      *(_WORD *)&object[8] = 2048;
      *(_QWORD *)&object[10] = v771[0];
      *(_WORD *)&object[18] = 2048;
      *(_QWORD *)&object[20] = v773;
      *(_WORD *)&object[28] = 2048;
      *(_QWORD *)&object[30] = v772;
      *(_WORD *)&object[38] = 2048;
      *(_QWORD *)&object[40] = *((_QWORD *)&v773 + 1);
      v518 = (char *)_os_log_send_and_compose_impl();
      v519 = strlen(v518);
      v766[0] = 0;
      pthread_threadid_np(0, v766);
      v520 = v766[0];
      timespec_get((timespec *)v766, 1);
      sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v512 + 1), (__int128 *)(v512 + 5), "Initial Camera intrinsics: Camera ID: [%02u]: Fx: %f, Fy: %f, Cx: %f, Cy: %f", 0x4CuLL, v518, v519, v520, v766);
      std::mutex::lock(&stru_254A5A410);
      v521 = qword_254A5A458;
      v522 = unk_254A5A460;
      for (ii = v761; v521 != v522; v521 += 40)
      {
        v523 = *(_QWORD *)(v521 + 32);
        if (!v523)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v523 + 48))(v523, object);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v788 < 0)
      {
        operator delete(__p);
        v515 = v517;
        if (SHIBYTE(v786) < 0)
          goto LABEL_773;
LABEL_770:
        if (BYTE8(v784))
        {
LABEL_774:
          if (SBYTE7(v784) < 0)
            operator delete(v783[0]);
        }
      }
      else
      {
        v515 = v517;
        if ((SHIBYTE(v786) & 0x80000000) == 0)
          goto LABEL_770;
LABEL_773:
        operator delete(v785[0]);
        if (BYTE8(v784))
          goto LABEL_774;
      }
      if (object[56] && (object[55] & 0x80000000) != 0)
        operator delete(*(void **)&object[32]);
      if ((object[31] & 0x80000000) == 0)
      {
        if (!v518)
          goto LABEL_782;
LABEL_781:
        free(v518);
        goto LABEL_782;
      }
      operator delete(*(void **)&object[8]);
      if (v518)
        goto LABEL_781;
LABEL_782:
      if (os_signpost_enabled((os_log_t)*v512))
      {
        *(_DWORD *)object = 67110144;
        *(_DWORD *)&object[4] = v515;
        *(_WORD *)&object[8] = 2048;
        *(_QWORD *)&object[10] = v771[0];
        *(_WORD *)&object[18] = 2048;
        *(_QWORD *)&object[20] = v773;
        *(_WORD *)&object[28] = 2048;
        *(_QWORD *)&object[30] = v772;
        *(_WORD *)&object[38] = 2048;
        *(_QWORD *)&object[40] = *((_QWORD *)&v773 + 1);
        _os_signpost_emit_unreliably_with_name_impl();
      }
      sub_20F82FD50(&v776);
      if (**(int **)(v776 + 56) > 2)
        goto LABEL_740;
      v524 = *(unsigned __int8 *)(v776 + 72);
      v525 = sub_20E8C31DC(v776, "OSLogSurrogateAppender", 1, 0);
      v526 = v525;
      if (!v524 && !v525)
        goto LABEL_740;
      v766[0] = (__uint64_t)&v776;
      v766[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v767[0] = std::chrono::system_clock::now();
      DWORD2(v767[0]) = 2;
      *(_QWORD *)&v767[1] = "unknown file";
      DWORD2(v767[1]) = 620;
      v768 = "unknown function";
      v769 = 0;
      v770 = 0;
      if (v513 >= 0xA
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v527 = *(_QWORD *)v766[0];
      if (*(char *)(*(_QWORD *)v766[0] + 39) < 0)
      {
        v529 = *(const char **)(v527 + 16);
        v528 = *(_QWORD *)(v527 + 24);
        v755 = *(_QWORD *)v766[0];
        v756 = (const char *)(*(_QWORD *)v766[0] + 16);
        v531 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v531 & 1) != 0)
          goto LABEL_795;
      }
      else
      {
        v528 = *(unsigned __int8 *)(*(_QWORD *)v766[0] + 39);
        v529 = (const char *)(*(_QWORD *)v766[0] + 16);
        v755 = *(_QWORD *)v766[0];
        v756 = v529;
        v530 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v530 & 1) != 0)
          goto LABEL_795;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v777);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v777);
        if (v780 && SHIBYTE(v779) < 0)
          operator delete(v777);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v497 = v740;
      }
LABEL_795:
      if (byte_254A4A4F8[23] >= 0)
        v532 = byte_254A4A4F8;
      else
        v532 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v533 = byte_254A4A4F8[23];
      else
        v533 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v532, v529);
      if (v533 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v759 = v515;
      if (v533 >= 0x17)
      {
        v535 = v495;
        v536 = v526;
        v537 = v529;
        v538 = v513;
        v539 = v524;
        v540 = (v533 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v533 | 7) != 0x17)
          v540 = v533 | 7;
        v541 = v540 + 1;
        v534 = operator new(v540 + 1);
        *(_QWORD *)&object[16] = v533;
        *(_QWORD *)&object[24] = v541 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v534;
        v524 = v539;
        v513 = v538;
        v529 = v537;
        v526 = v536;
        v495 = v535;
        v497 = v740;
LABEL_808:
        memmove(v534, v532, v533);
        goto LABEL_809;
      }
      object[31] = v533;
      v534 = &object[8];
      if (v533)
        goto LABEL_808;
LABEL_809:
      v534[v533] = 0;
      object[32] = 1;
      if (v528 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v528 >= 0x17)
      {
        v545 = (v528 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v528 | 7) != 0x17)
          v545 = v528 | 7;
        v546 = v545 + 1;
        v542 = operator new(v545 + 1);
        *(_QWORD *)&object[48] = v528;
        *(_QWORD *)&object[56] = v546 | 0x8000000000000000;
        *(_QWORD *)&object[40] = v542;
      }
      else
      {
        object[63] = v528;
        v542 = &object[40];
        if (!v528)
        {
          object[40] = 0;
          LOBYTE(v783[0]) = 1;
          v543 = *(NSObject **)object;
          if ((object[63] & 0x80000000) == 0)
            goto LABEL_813;
          goto LABEL_819;
        }
      }
      memmove(v542, v529, v528);
      v542[v528] = 0;
      LOBYTE(v783[0]) = 1;
      v543 = *(NSObject **)object;
      if ((object[63] & 0x80000000) == 0)
      {
LABEL_813:
        ii = v761;
        v544 = v759;
        if (object[32])
          goto LABEL_820;
        goto LABEL_822;
      }
LABEL_819:
      operator delete(*(void **)&object[40]);
      ii = v761;
      v544 = v759;
      if (object[32])
      {
LABEL_820:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
      }
LABEL_822:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v526 && *(_QWORD *)(v526 + 24))
      {
        v547 = _os_log_pack_size();
        v548 = (std::__shared_weak_count_vtbl *)operator new(v547, (std::align_val_t)8uLL);
        v549 = (std::__shared_weak_count *)operator new();
        v550 = v549;
        v549->__shared_owners_ = 0;
        v551 = (unint64_t *)&v549->__shared_owners_;
        v549->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v549->__shared_weak_owners_ = 0;
        v549[1].__vftable = v548;
        *(_QWORD *)object = v548;
        *(_QWORD *)&object[8] = v548;
        *(_QWORD *)&object[16] = v549;
        do
          v552 = __ldxr(v551);
        while (__stxr(v552 + 1, v551));
        memset(&object[24], 0, 24);
        do
          v553 = __ldaxr(v551);
        while (__stlxr(v553 - 1, v551));
        if (!v553)
        {
          ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
          std::__shared_weak_count::__release_weak(v550);
        }
        v554 = *(_QWORD *)object;
        v555 = _os_log_pack_fill();
        v556 = v771[0];
        v557 = v772;
        v558 = v773;
        *(_DWORD *)v555 = 67110144;
        *(_DWORD *)(v555 + 4) = v544;
        *(_WORD *)(v555 + 8) = 2048;
        *(_QWORD *)(v555 + 10) = v556;
        *(_WORD *)(v555 + 18) = 2048;
        *(_QWORD *)(v555 + 20) = v558;
        *(_WORD *)(v555 + 28) = 2048;
        *(_QWORD *)(v555 + 30) = v557;
        *(_WORD *)(v555 + 38) = 2048;
        *(_QWORD *)(v555 + 40) = *((_QWORD *)&v558 + 1);
        v559 = (char *)operator new();
        v560 = *(unsigned __int8 *)(v755 + 39);
        v561 = *(const char **)(v755 + 16);
        v562 = *(_QWORD *)(v755 + 24);
        v563 = *(_OWORD *)&object[24];
        *(_OWORD *)(v559 + 8) = *(_OWORD *)&object[8];
        if ((v560 & 0x80u) != 0)
          v560 = v562;
        else
          v561 = v756;
        *(_QWORD *)v559 = v554;
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v559 + 24) = v563;
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v559 + 5) = v561;
        *((_QWORD *)v559 + 6) = v560;
        v559[56] = 2;
        v781 = 0;
        v777 = v559;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v526 + 24) + 40))(*(_QWORD *)(v526 + 24), &v777);
        v564 = v777;
        v777 = 0;
        if (v564)
        {
          v565 = (std::__shared_weak_count *)*((_QWORD *)v564 + 4);
          if (v565)
          {
            v566 = (unint64_t *)&v565->__shared_owners_;
            do
              v567 = __ldaxr(v566);
            while (__stlxr(v567 - 1, v566));
            if (!v567)
            {
              ((void (*)(std::__shared_weak_count *))v565->__on_zero_shared)(v565);
              std::__shared_weak_count::__release_weak(v565);
            }
          }
          v568 = (std::__shared_weak_count *)*((_QWORD *)v564 + 2);
          if (v568)
          {
            v569 = (unint64_t *)&v568->__shared_owners_;
            do
              v570 = __ldaxr(v569);
            while (__stlxr(v570 - 1, v569));
            if (!v570)
            {
              ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
              std::__shared_weak_count::__release_weak(v568);
            }
          }
          MEMORY[0x212BC6398](v564, 0x10F0C40B62ED6C6);
          v571 = v781;
          v781 = 0;
          if (v571)
          {
            v572 = *(std::__shared_weak_count **)(v571 + 32);
            if (v572)
            {
              v573 = (unint64_t *)&v572->__shared_owners_;
              do
                v574 = __ldaxr(v573);
              while (__stlxr(v574 - 1, v573));
              if (!v574)
              {
                ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
                std::__shared_weak_count::__release_weak(v572);
              }
            }
            v575 = *(std::__shared_weak_count **)(v571 + 16);
            if (v575)
            {
              v576 = (unint64_t *)&v575->__shared_owners_;
              do
                v577 = __ldaxr(v576);
              while (__stlxr(v577 - 1, v576));
              if (!v577)
              {
                ((void (*)(std::__shared_weak_count *))v575->__on_zero_shared)(v575);
                std::__shared_weak_count::__release_weak(v575);
              }
            }
            MEMORY[0x212BC6398](v571, 0x10F0C40B62ED6C6);
          }
        }
        v578 = *(std::__shared_weak_count **)&object[32];
        v544 = v759;
        if (*(_QWORD *)&object[32])
        {
          v579 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v580 = __ldaxr(v579);
          while (__stlxr(v580 - 1, v579));
          if (!v580)
          {
            ((void (*)(std::__shared_weak_count *))v578->__on_zero_shared)(v578);
            std::__shared_weak_count::__release_weak(v578);
          }
        }
        v581 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v582 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v583 = __ldaxr(v582);
          while (__stlxr(v583 - 1, v582));
          if (!v583)
          {
            ((void (*)(std::__shared_weak_count *))v581->__on_zero_shared)(v581);
            std::__shared_weak_count::__release_weak(v581);
          }
        }
      }
      else
      {
        os_log_type_enabled(v543, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)object = 67110144;
        *(_DWORD *)&object[4] = v544;
        *(_WORD *)&object[8] = 2048;
        *(_QWORD *)&object[10] = v771[0];
        *(_WORD *)&object[18] = 2048;
        *(_QWORD *)&object[20] = v773;
        *(_WORD *)&object[28] = 2048;
        *(_QWORD *)&object[30] = v772;
        *(_WORD *)&object[38] = 2048;
        *(_QWORD *)&object[40] = *((_QWORD *)&v773 + 1);
        v584 = (void *)_os_log_send_and_compose_impl();
        if (v584)
          free(v584);
      }
      if (v524)
      {
        if (v513 >= 0xA
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        sub_20E8C003C((uint64_t)v766, "Initial Camera intrinsics: Camera ID: [%02u]: Fx: %f, Fy: %f, Cx: %f, Cy: %f", v544, *(double *)v771, *(double *)&v773, *(double *)&v772, *((double *)&v773 + 1));
        sub_20E863570((uint64_t)v766);
      }
      sub_20E863570((uint64_t)v766);
      v585 = v770;
      if (v770)
      {
        v586 = (unint64_t *)&v770->__shared_owners_;
        do
          v587 = __ldaxr(v586);
        while (__stlxr(v587 - 1, v586));
        if (!v587)
        {
          ((void (*)(std::__shared_weak_count *))v585->__on_zero_shared)(v585);
          std::__shared_weak_count::__release_weak(v585);
        }
      }
LABEL_740:
      v495 = (uint64_t *)*v495;
      if (!v495)
      {
        v10 = *(_QWORD **)(ii + 7952);
        break;
      }
      continue;
    }
  }
  v588 = (double *)v10[8];
  v589 = sub_210219C18();
  v590 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v590 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v592 = *((_QWORD *)v588 + 14);
    v593 = *((_QWORD *)v588 + 15);
    v594 = *((_QWORD *)v588 + 16);
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v592;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v593;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&object[24] = v594;
    v595 = (char *)_os_log_send_and_compose_impl();
    v596 = strlen(v595);
    v771[0] = 0;
    pthread_threadid_np(0, v771);
    v597 = v771[0];
    timespec_get((timespec *)v771, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v589 + 1), (__int128 *)(v589 + 5), "Initial gyro scale estimate: %f, %f, %f", 0x27uLL, v595, v596, v597, v771);
    std::mutex::lock(&stru_254A5A410);
    v598 = qword_254A5A458;
    for (jj = unk_254A5A460; v598 != jj; v598 += 40)
    {
      v600 = *(_QWORD *)(v598 + 32);
      if (!v600)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v600 + 48))(v600, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v788 < 0)
    {
      operator delete(__p);
      ii = v761;
      if (SHIBYTE(v786) < 0)
        goto LABEL_897;
LABEL_894:
      if (BYTE8(v784))
      {
LABEL_898:
        if (SBYTE7(v784) < 0)
          operator delete(v783[0]);
      }
    }
    else
    {
      ii = v761;
      if ((SHIBYTE(v786) & 0x80000000) == 0)
        goto LABEL_894;
LABEL_897:
      operator delete(v785[0]);
      if (BYTE8(v784))
        goto LABEL_898;
    }
    if (object[56] && (object[55] & 0x80000000) != 0)
      operator delete(*(void **)&object[32]);
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    if (v595)
      free(v595);
  }
  if (os_signpost_enabled((os_log_t)*v589))
  {
    v601 = *((_QWORD *)v588 + 14);
    v602 = *((_QWORD *)v588 + 15);
    v603 = *((_QWORD *)v588 + 16);
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v601;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v602;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&object[24] = v603;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20F82FD50(&v781);
  if (**(int **)(v781 + 56) <= 2)
  {
    v604 = *(unsigned __int8 *)(v781 + 72);
    v605 = sub_20E8C31DC(v781, "OSLogSurrogateAppender", 1, 0);
    v606 = v605;
    if (v604 || v605)
    {
      v771[0] = (__uint64_t)&v781;
      v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
      DWORD2(v772) = 2;
      *(_QWORD *)&v773 = "unknown file";
      DWORD2(v773) = 628;
      *((_QWORD *)&v774 + 1) = 0;
      v775 = 0;
      *(_QWORD *)&v774 = "unknown function";
      v607 = *(_QWORD *)v771[0];
      v608 = (const char *)(*(_QWORD *)v771[0] + 16);
      v765 = v608;
      if (*(char *)(*(_QWORD *)v771[0] + 39) < 0)
      {
        v608 = *(const char **)(v607 + 16);
        v609 = *(_QWORD *)(v607 + 24);
        v611 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v611 & 1) == 0)
        {
LABEL_1155:
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
        }
      }
      else
      {
        v609 = *(unsigned __int8 *)(*(_QWORD *)v771[0] + 39);
        v610 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v610 & 1) == 0)
          goto LABEL_1155;
      }
      if (byte_254A4A4F8[23] >= 0)
        v612 = byte_254A4A4F8;
      else
        v612 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v613 = byte_254A4A4F8[23];
      else
        v613 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v612, v608);
      v614 = &object[8];
      if (v613 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v613 >= 0x17)
      {
        v615 = (v613 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v613 | 7) != 0x17)
          v615 = v613 | 7;
        v616 = v615 + 1;
        v614 = operator new(v615 + 1);
        *(_QWORD *)&object[16] = v613;
        *(_QWORD *)&object[24] = v616 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v614;
      }
      else
      {
        object[31] = v613;
        if (!v613)
        {
LABEL_930:
          v614[v613] = 0;
          object[32] = 1;
          v617 = &object[40];
          if (v609 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          ii = v761;
          if (v609 >= 0x17)
          {
            v618 = (v609 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v609 | 7) != 0x17)
              v618 = v609 | 7;
            v619 = v618 + 1;
            v617 = operator new(v618 + 1);
            *(_QWORD *)&object[48] = v609;
            *(_QWORD *)&object[56] = v619 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v617;
          }
          else
          {
            object[63] = v609;
            if (!v609)
            {
LABEL_938:
              v617[v609] = 0;
              LOBYTE(v783[0]) = 1;
              v620 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v606 && *(_QWORD *)(v606 + 24))
              {
                v621 = _os_log_pack_size();
                v622 = (std::__shared_weak_count_vtbl *)operator new(v621, (std::align_val_t)8uLL);
                v623 = (std::__shared_weak_count *)operator new();
                v624 = v623;
                v623->__shared_owners_ = 0;
                v625 = (unint64_t *)&v623->__shared_owners_;
                v623->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v623->__shared_weak_owners_ = 0;
                v623[1].__vftable = v622;
                *(_QWORD *)object = v622;
                *(_QWORD *)&object[8] = v622;
                *(_QWORD *)&object[16] = v623;
                do
                  v626 = __ldxr(v625);
                while (__stxr(v626 + 1, v625));
                memset(&object[24], 0, 24);
                do
                  v627 = __ldaxr(v625);
                while (__stlxr(v627 - 1, v625));
                if (!v627)
                {
                  ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
                  std::__shared_weak_count::__release_weak(v624);
                }
                v628 = *(_QWORD *)object;
                v629 = _os_log_pack_fill();
                v630 = *((_QWORD *)v588 + 14);
                v631 = *((_QWORD *)v588 + 15);
                v632 = *((_QWORD *)v588 + 16);
                *(_DWORD *)v629 = 134218496;
                *(_QWORD *)(v629 + 4) = v630;
                *(_WORD *)(v629 + 12) = 2048;
                *(_QWORD *)(v629 + 14) = v631;
                *(_WORD *)(v629 + 22) = 2048;
                *(_QWORD *)(v629 + 24) = v632;
                v633 = operator new();
                v634 = *(unsigned __int8 *)(v607 + 39);
                v635 = *(const char **)(v607 + 16);
                v636 = *(_QWORD *)(v607 + 24);
                v637 = *(_OWORD *)&object[24];
                *(_OWORD *)(v633 + 8) = *(_OWORD *)&object[8];
                if ((v634 & 0x80u) != 0)
                  v634 = v636;
                else
                  v635 = v765;
                *(_QWORD *)v633 = v628;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v633 + 24) = v637;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v633 + 40) = v635;
                *(_QWORD *)(v633 + 48) = v634;
                *(_BYTE *)(v633 + 56) = 2;
                v777 = 0;
                v766[0] = v633;
                (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v606 + 24) + 40))(*(_QWORD *)(v606 + 24), v766);
                v638 = v766[0];
                v766[0] = 0;
                if (v638)
                {
                  v639 = *(std::__shared_weak_count **)(v638 + 32);
                  if (v639)
                  {
                    v640 = (unint64_t *)&v639->__shared_owners_;
                    do
                      v641 = __ldaxr(v640);
                    while (__stlxr(v641 - 1, v640));
                    if (!v641)
                    {
                      ((void (*)(std::__shared_weak_count *))v639->__on_zero_shared)(v639);
                      std::__shared_weak_count::__release_weak(v639);
                    }
                  }
                  v642 = *(std::__shared_weak_count **)(v638 + 16);
                  if (v642)
                  {
                    v643 = (unint64_t *)&v642->__shared_owners_;
                    do
                      v644 = __ldaxr(v643);
                    while (__stlxr(v644 - 1, v643));
                    if (!v644)
                    {
                      ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                      std::__shared_weak_count::__release_weak(v642);
                    }
                  }
                  MEMORY[0x212BC6398](v638, 0x10F0C40B62ED6C6);
                  v645 = v777;
                  v777 = 0;
                  if (v645)
                  {
                    v646 = (std::__shared_weak_count *)*((_QWORD *)v645 + 4);
                    if (v646)
                    {
                      v647 = (unint64_t *)&v646->__shared_owners_;
                      do
                        v648 = __ldaxr(v647);
                      while (__stlxr(v648 - 1, v647));
                      if (!v648)
                      {
                        ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
                        std::__shared_weak_count::__release_weak(v646);
                      }
                    }
                    v649 = (std::__shared_weak_count *)*((_QWORD *)v645 + 2);
                    if (v649)
                    {
                      v650 = (unint64_t *)&v649->__shared_owners_;
                      do
                        v651 = __ldaxr(v650);
                      while (__stlxr(v651 - 1, v650));
                      if (!v651)
                      {
                        ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                        std::__shared_weak_count::__release_weak(v649);
                      }
                    }
                    MEMORY[0x212BC6398](v645, 0x10F0C40B62ED6C6);
                  }
                }
                v652 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v653 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v654 = __ldaxr(v653);
                  while (__stlxr(v654 - 1, v653));
                  if (!v654)
                  {
                    ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
                    std::__shared_weak_count::__release_weak(v652);
                  }
                }
                v655 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v656 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v657 = __ldaxr(v656);
                  while (__stlxr(v657 - 1, v656));
                  if (!v657)
                  {
                    ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
                    std::__shared_weak_count::__release_weak(v655);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v620, OS_LOG_TYPE_DEBUG);
                v658 = *((_QWORD *)v588 + 14);
                v659 = *((_QWORD *)v588 + 15);
                v660 = *((_QWORD *)v588 + 16);
                *(_DWORD *)object = 134218496;
                *(_QWORD *)&object[4] = v658;
                *(_WORD *)&object[12] = 2048;
                *(_QWORD *)&object[14] = v659;
                *(_WORD *)&object[22] = 2048;
                *(_QWORD *)&object[24] = v660;
                v661 = (void *)_os_log_send_and_compose_impl();
                if (v661)
                  free(v661);
              }
              if (v604)
              {
                sub_20E8C003C((uint64_t)v771, "Initial gyro scale estimate: %f, %f, %f", v588[14], v588[15], v588[16]);
                sub_20E863570((uint64_t)v771);
              }
              sub_20E863570((uint64_t)v771);
              v662 = v775;
              if (v775)
              {
                v663 = (unint64_t *)&v775->__shared_owners_;
                do
                  v664 = __ldaxr(v663);
                while (__stlxr(v664 - 1, v663));
                if (!v664)
                {
                  ((void (*)(std::__shared_weak_count *))v662->__on_zero_shared)(v662);
                  std::__shared_weak_count::__release_weak(v662);
                }
              }
              goto LABEL_998;
            }
          }
          memmove(v617, v608, v609);
          goto LABEL_938;
        }
      }
      memmove(v614, v612, v613);
      goto LABEL_930;
    }
  }
LABEL_998:
  v665 = sub_210219C18();
  v666 = *(_QWORD *)(ii + 7952);
  if (v666)
  {
    v667 = *(_QWORD *)(*(_QWORD *)v666 + 72);
    v668 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v668 & 1) == 0)
      goto LABEL_1152;
  }
  else
  {
    v667 = *(_QWORD *)(ii + 8128);
    v669 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v669 & 1) == 0)
    {
LABEL_1152:
      if (__cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
    }
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = v667;
    v671 = (char *)_os_log_send_and_compose_impl();
    v672 = strlen(v671);
    v771[0] = 0;
    pthread_threadid_np(0, v771);
    v673 = v771[0];
    timespec_get((timespec *)v771, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v665 + 1), (__int128 *)(v665 + 5), "Initial vision to IMU time-offset: %f", 0x25uLL, v671, v672, v673, v771);
    std::mutex::lock(&stru_254A5A410);
    v674 = qword_254A5A458;
    for (kk = unk_254A5A460; v674 != kk; v674 += 40)
    {
      v676 = *(_QWORD *)(v674 + 32);
      if (!v676)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v676 + 48))(v676, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v788 < 0)
    {
      operator delete(__p);
      ii = v761;
      if (SHIBYTE(v786) < 0)
        goto LABEL_1011;
LABEL_1008:
      if (BYTE8(v784))
      {
LABEL_1012:
        if (SBYTE7(v784) < 0)
          operator delete(v783[0]);
      }
    }
    else
    {
      ii = v761;
      if ((SHIBYTE(v786) & 0x80000000) == 0)
        goto LABEL_1008;
LABEL_1011:
      operator delete(v785[0]);
      if (BYTE8(v784))
        goto LABEL_1012;
    }
    if (object[56] && (object[55] & 0x80000000) != 0)
      operator delete(*(void **)&object[32]);
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    if (v671)
      free(v671);
  }
  if (os_signpost_enabled((os_log_t)*v665))
  {
    *(_DWORD *)object = 134217984;
    *(_QWORD *)&object[4] = v667;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20F82FD50(&v781);
  if (**(int **)(v781 + 56) <= 2)
  {
    v677 = *(unsigned __int8 *)(v781 + 72);
    v678 = sub_20E8C31DC(v781, "OSLogSurrogateAppender", 1, 0);
    v679 = v678;
    if (v677 || v678)
    {
      v771[0] = (__uint64_t)&v781;
      v771[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v772 = std::chrono::system_clock::now();
      DWORD2(v772) = 2;
      *(_QWORD *)&v773 = "unknown file";
      DWORD2(v773) = 632;
      *((_QWORD *)&v774 + 1) = 0;
      v775 = 0;
      *(_QWORD *)&v774 = "unknown function";
      v680 = *(_QWORD **)(ii + 7952);
      if (v680)
      {
        v681 = (uint64_t *)(*v680 + 72);
        v682 = *(_QWORD *)v771[0];
        v683 = *(_QWORD *)v771[0] + 16;
        v684 = *(char *)(*(_QWORD *)v771[0] + 39);
        if ((v684 & 0x80000000) == 0)
          goto LABEL_1028;
LABEL_1031:
        v686 = *(const char **)(v682 + 16);
        v685 = *(_QWORD *)(v682 + 24);
        v687 = *v681;
        v689 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v689 & 1) != 0)
          goto LABEL_1032;
LABEL_1162:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        goto LABEL_1032;
      }
      v681 = (uint64_t *)(ii + 8128);
      v682 = *(_QWORD *)v771[0];
      v683 = *(_QWORD *)v771[0] + 16;
      v684 = *(char *)(*(_QWORD *)v771[0] + 39);
      if (v684 < 0)
        goto LABEL_1031;
LABEL_1028:
      v685 = v684;
      v686 = (const char *)v683;
      v687 = *v681;
      v688 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v688 & 1) == 0)
        goto LABEL_1162;
LABEL_1032:
      if (byte_254A4A4F8[23] >= 0)
        v690 = byte_254A4A4F8;
      else
        v690 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v691 = byte_254A4A4F8[23];
      else
        v691 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v690, v686);
      v692 = &object[8];
      if (v691 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v691 >= 0x17)
      {
        v693 = v683;
        v694 = (v691 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v691 | 7) != 0x17)
          v694 = v691 | 7;
        v695 = v694 + 1;
        v692 = operator new(v694 + 1);
        *(_QWORD *)&object[16] = v691;
        *(_QWORD *)&object[24] = v695 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v692;
        v683 = v693;
      }
      else
      {
        object[31] = v691;
        if (!v691)
        {
LABEL_1046:
          v692[v691] = 0;
          object[32] = 1;
          v696 = &object[40];
          if (v685 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v685 >= 0x17)
          {
            v697 = (v685 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v685 | 7) != 0x17)
              v697 = v685 | 7;
            v698 = v697 + 1;
            v696 = operator new(v697 + 1);
            *(_QWORD *)&object[48] = v685;
            *(_QWORD *)&object[56] = v698 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v696;
          }
          else
          {
            object[63] = v685;
            if (!v685)
            {
LABEL_1054:
              v696[v685] = 0;
              LOBYTE(v783[0]) = 1;
              v699 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v679 && *(_QWORD *)(v679 + 24))
              {
                v700 = _os_log_pack_size();
                v701 = (std::__shared_weak_count_vtbl *)operator new(v700, (std::align_val_t)8uLL);
                v702 = (std::__shared_weak_count *)operator new();
                v703 = v702;
                v702->__shared_owners_ = 0;
                v704 = (unint64_t *)&v702->__shared_owners_;
                v702->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v702->__shared_weak_owners_ = 0;
                v702[1].__vftable = v701;
                *(_QWORD *)object = v701;
                *(_QWORD *)&object[8] = v701;
                *(_QWORD *)&object[16] = v702;
                do
                  v705 = __ldxr(v704);
                while (__stxr(v705 + 1, v704));
                memset(&object[24], 0, 24);
                do
                  v706 = __ldaxr(v704);
                while (__stlxr(v706 - 1, v704));
                if (!v706)
                {
                  ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
                  std::__shared_weak_count::__release_weak(v703);
                }
                v707 = *(_QWORD *)object;
                v708 = _os_log_pack_fill();
                *(_DWORD *)v708 = 134217984;
                *(_QWORD *)(v708 + 4) = v687;
                v709 = operator new();
                v710 = *(unsigned __int8 *)(v682 + 39);
                v711 = *(_QWORD *)(v682 + 16);
                v712 = *(_QWORD *)(v682 + 24);
                v713 = *(_OWORD *)&object[24];
                *(_OWORD *)(v709 + 8) = *(_OWORD *)&object[8];
                if ((v710 & 0x80u) != 0)
                  v710 = v712;
                else
                  v711 = v683;
                *(_QWORD *)v709 = v707;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v709 + 24) = v713;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v709 + 40) = v711;
                *(_QWORD *)(v709 + 48) = v710;
                *(_BYTE *)(v709 + 56) = 2;
                v777 = 0;
                v766[0] = v709;
                (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v679 + 24) + 40))(*(_QWORD *)(v679 + 24), v766);
                v714 = v766[0];
                v766[0] = 0;
                if (v714)
                {
                  v715 = *(std::__shared_weak_count **)(v714 + 32);
                  if (v715)
                  {
                    v716 = (unint64_t *)&v715->__shared_owners_;
                    do
                      v717 = __ldaxr(v716);
                    while (__stlxr(v717 - 1, v716));
                    if (!v717)
                    {
                      ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
                      std::__shared_weak_count::__release_weak(v715);
                    }
                  }
                  v718 = *(std::__shared_weak_count **)(v714 + 16);
                  if (v718)
                  {
                    v719 = (unint64_t *)&v718->__shared_owners_;
                    do
                      v720 = __ldaxr(v719);
                    while (__stlxr(v720 - 1, v719));
                    if (!v720)
                    {
                      ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
                      std::__shared_weak_count::__release_weak(v718);
                    }
                  }
                  MEMORY[0x212BC6398](v714, 0x10F0C40B62ED6C6);
                  v721 = v777;
                  v777 = 0;
                  if (v721)
                  {
                    v722 = (std::__shared_weak_count *)*((_QWORD *)v721 + 4);
                    if (v722)
                    {
                      v723 = (unint64_t *)&v722->__shared_owners_;
                      do
                        v724 = __ldaxr(v723);
                      while (__stlxr(v724 - 1, v723));
                      if (!v724)
                      {
                        ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
                        std::__shared_weak_count::__release_weak(v722);
                      }
                    }
                    v725 = (std::__shared_weak_count *)*((_QWORD *)v721 + 2);
                    if (v725)
                    {
                      v726 = (unint64_t *)&v725->__shared_owners_;
                      do
                        v727 = __ldaxr(v726);
                      while (__stlxr(v727 - 1, v726));
                      if (!v727)
                      {
                        ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
                        std::__shared_weak_count::__release_weak(v725);
                      }
                    }
                    MEMORY[0x212BC6398](v721, 0x10F0C40B62ED6C6);
                  }
                }
                v728 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v729 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v730 = __ldaxr(v729);
                  while (__stlxr(v730 - 1, v729));
                  if (!v730)
                  {
                    ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
                    std::__shared_weak_count::__release_weak(v728);
                  }
                }
                v731 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v732 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v733 = __ldaxr(v732);
                  while (__stlxr(v733 - 1, v732));
                  if (!v733)
                  {
                    ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
                    std::__shared_weak_count::__release_weak(v731);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v699, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)object = 134217984;
                *(_QWORD *)&object[4] = v687;
                v734 = (void *)_os_log_send_and_compose_impl();
                if (v734)
                  free(v734);
              }
              if (v677)
              {
                v735 = *(_QWORD **)(v761 + 7952);
                if (v735)
                  v736 = (double *)(*v735 + 72);
                else
                  v736 = (double *)(v761 + 8128);
                sub_20E8C003C((uint64_t)v771, "Initial vision to IMU time-offset: %f", *v736);
                sub_20E863570((uint64_t)v771);
              }
              sub_20E863570((uint64_t)v771);
              v737 = v775;
              if (v775)
              {
                v738 = (unint64_t *)&v775->__shared_owners_;
                do
                  v739 = __ldaxr(v738);
                while (__stlxr(v739 - 1, v738));
                if (!v739)
                {
                  ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
                  std::__shared_weak_count::__release_weak(v737);
                }
              }
              return;
            }
          }
          memmove(v696, v686, v685);
          goto LABEL_1054;
        }
      }
      memmove(v692, v690, v691);
      goto LABEL_1046;
    }
  }
}

void sub_20F837554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;

  if (a65)
  {
    if (a64 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F83763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E8C4(&a33);
  sub_20E86E8C4(&a54);
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F83768C()
{
  JUMPOUT(0x20F837914);
}

void sub_20F8377E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F83781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837830()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x20F837E50);
  JUMPOUT(0x20F837D3CLL);
}

void sub_20F83783C()
{
  JUMPOUT(0x20F837D38);
}

void sub_20F837844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E8C4(&a54);
  sub_20E86E8C4(&a58);
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F837870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F83788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MEMORY[0x212BC6398](v33, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F8378B8()
{
  JUMPOUT(0x20F8378CCLL);
}

void sub_20F8378F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_20E86E658((uint64_t)&a59);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *object,void *__p,uint64_t a61,int a62,__int16 a63)
{
  char a65;

  if (a65 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837A74()
{
  JUMPOUT(0x20F837A84);
}

void sub_20F837ABC()
{
  JUMPOUT(0x20F837ACCLL);
}

void sub_20F837B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F837B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837BA0()
{
  JUMPOUT(0x20F837BB0);
}

void sub_20F837BE4()
{
  JUMPOUT(0x20F837C38);
}

void sub_20F837BEC()
{
  JUMPOUT(0x20F837BFCLL);
}

void sub_20F837C14()
{
  JUMPOUT(0x20F837C24);
}

void sub_20F837C68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F837C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E863714((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_20F837CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;

  sub_20E96E218((uint64_t)&a59);
  if (v59)
  {
    free(v59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  sub_20E96E218(&a59);
  if (!v59)
    JUMPOUT(0x20F837E50);
  JUMPOUT(0x20F837DE8);
}

void sub_20F837CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  sub_20E96E218(&a59);
  if (!v59)
    JUMPOUT(0x20F837E50);
  JUMPOUT(0x20F837DE8);
}

void sub_20F837CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  sub_20E96E218((uint64_t)&a59);
  if (v59)
    JUMPOUT(0x20F837DE8);
  _Unwind_Resume(a1);
}

void sub_20F837CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;

  sub_20E96E218((uint64_t)&a59);
  if (v59)
  {
    free(v59);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837CF8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837D0CLL);
}

void sub_20F837D1C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837D30);
}

void sub_20F837D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  sub_20E96E218((uint64_t)&a59);
  if (v59)
    JUMPOUT(0x20F837E3CLL);
  _Unwind_Resume(a1);
}

void sub_20F837D54(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837D60(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837D6C(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837D78()
{
  JUMPOUT(0x20F837DE4);
}

void sub_20F837D80(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F837D8C()
{
  JUMPOUT(0x20F837E38);
}

void sub_20F837D94()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837DB8);
}

void sub_20F837DC8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837DDCLL);
}

void sub_20F837DF8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837E0CLL);
}

void sub_20F837E1C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F837E30);
}

#error "20F837E58: too big function (funcsize=0)"

void sub_20F8486DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (LOBYTE(STACK[0xA38]) && SLOBYTE(STACK[0xA37]) < 0)
    operator delete((void *)STACK[0xA20]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
  {
    operator delete((void *)STACK[0x2B8]);
    sub_20E863784((uint64_t)&STACK[0x310]);
    sub_20E8C3144(a14);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&STACK[0x310]);
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F848FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  sub_20E96E218((uint64_t)&STACK[0x310]);
  if (v14)
  {
    free(v14);
    sub_20E8C3144(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F849230);
}

void sub_20F848FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  sub_20E96E218((uint64_t)&STACK[0x310]);
  if (v14)
    free(v14);
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (SLOBYTE(STACK[0x327]) < 0)
  {
    operator delete((void *)STACK[0x310]);
    sub_20E8C3144(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F849230);
}

void sub_20F84905C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849078()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F84908CLL);
}

void sub_20F84909C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F8490B0);
}

void sub_20F849144(_Unwind_Exception *a1)
{
  sub_20E8C25A8((uint64_t)&STACK[0xA20]);
  sub_20E8C25A8((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_20F849160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  sub_20E8C3144(a14);
  _Unwind_Resume(a1);
}

void sub_20F849188()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x20F849230);
  JUMPOUT(0x20F8491F0);
}

void sub_20F849194()
{
  JUMPOUT(0x20F849224);
}

void sub_20F8491A8(_Unwind_Exception *a1)
{
  if (STACK[0x2F8])
  {
    MEMORY[0x212BC6368](STACK[0x2F8], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F8491D4()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F8491E4);
}

void sub_20F849208()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F84921CLL);
}

uint64_t sub_20F84924C(uint64_t a1, _QWORD *a2, int a3, unsigned __int8 *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  char **v7;
  char **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char **v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  size_t v32;
  _OWORD *v33;
  os_log_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  unsigned __int8 v42;
  const char *v43;
  size_t v44;
  void **v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *p_p;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  void *v56;
  _QWORD *v57;
  size_t v58;
  size_t v59;
  _BYTE *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  const char *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  NSObject *v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  const char *v119;
  uint64_t v120;
  __int128 v121;
  char *v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  __int128 v127;
  char *v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  os_log_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  _BYTE *v150;
  size_t v151;
  uint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  int64_t v155;
  uint64_t v156;
  _BYTE *v157;
  _BYTE *v158;
  int64_t v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  int64_t v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  int64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  int64_t v187;
  char *v188;
  char *v189;
  size_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  __int128 *v200;
  _OWORD *v201;
  uint64_t v202;
  __int128 v203;
  int v204;
  char *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _OWORD *v209;
  __int128 *v210;
  uint64_t v211;
  __int128 v212;
  int v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD *v218;
  __int128 *v219;
  uint64_t v220;
  __int128 v221;
  int v222;
  uint64_t v223;
  char *v224;
  char *v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  int64_t v237;
  char *v238;
  char *v239;
  unint64_t v240;
  char *v241;
  __int128 v242;
  __int128 v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  __int128 v253;
  __int128 v254;
  char *v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  __int128 *v261;
  __int128 v262;
  _BYTE *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  uint64_t v276;
  char *v277;
  int64_t v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  __int128 v283;
  __int128 v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  char *v292;
  char *v293;
  __int128 v294;
  char *v295;
  int64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unsigned int v306;
  uint64_t v307;
  _OWORD *v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  _OWORD *v312;
  uint64_t v313;
  unsigned int v314;
  _QWORD *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int64x2_t v330;
  _OWORD *v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t **v357;
  uint64_t **v358;
  unsigned int v359;
  char *v360;
  uint64_t *v361;
  uint64_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  char *v368;
  unsigned int v369;
  const void *v370;
  size_t v371;
  char *v372;
  unsigned int v373;
  double v374;
  double v375;
  double v376;
  uint64_t *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  NSObject *v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  NSObject *v390;
  char *v391;
  char *v392;
  uint64_t v393;
  void ****v394;
  unint64_t v395;
  void **v396;
  uint64_t *v397;
  uint8x8_t v398;
  uint64_t v399;
  unint64_t v400;
  void **v401;
  char *v402;
  uint8x8_t v403;
  uint64_t v404;
  unint64_t v405;
  float v406;
  float v407;
  void ***v408;
  void **v409;
  _BOOL8 v410;
  unint64_t v411;
  unint64_t v412;
  size_t prime;
  unint64_t v414;
  uint8x8_t v415;
  uint64_t v416;
  unint64_t v417;
  __int128 v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  void *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  double v433;
  float64x2_t v434;
  double v435;
  _QWORD *v436;
  double *v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  _QWORD *v450;
  _QWORD *v451;
  _QWORD *v452;
  _QWORD *v453;
  uint64_t v454;
  _QWORD *v455;
  int v456;
  double v457;
  uint64_t v458;
  uint64_t *v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  double v468;
  _QWORD *v469;
  __int128 v470;
  uint64_t v471;
  double v472;
  double *v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  _QWORD *v479;
  _QWORD *v480;
  uint64_t v481;
  int v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  uint64_t v489;
  _DWORD *v490;
  uint64_t v491;
  int v492;
  int v493;
  unint64_t v494;
  _BOOL8 v495;
  float64x2_t v498;
  int v499;
  unint64_t v500;
  unint64_t v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  _QWORD *v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  double v516;
  double v517;
  double v518;
  double v519;
  double v520;
  float64x2_t v521;
  double v522;
  float64x2_t v523;
  double v524;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  double v529;
  double v531;
  double v533;
  float64x2_t v535;
  float64x2_t v536;
  uint64_t v538;
  float64x2_t v540;
  uint64_t v542;
  _QWORD *v543;
  float64x2_t v544;
  int64x2_t v545;
  double v547;
  int64x2_t v548;
  uint64_t v550;
  double v551;
  float64x2_t v552;
  float64x2_t v553;
  _QWORD *v555;
  uint64_t v556;
  char **v557;
  uint64_t v558;
  _QWORD *v559;
  __int128 v560;
  __n128 v562;
  float64x2_t v565;
  double v567;
  double v568;
  uint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  _BYTE *v572;
  char *v573;
  uint64_t v574;
  char *v575;
  char *v576;
  _QWORD *v577;
  _QWORD *v578;
  _QWORD *v579;
  _QWORD *v580;
  uint64_t v581;
  _QWORD *v582;
  _QWORD *v583;
  _QWORD *v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  char *v588;
  __n128 *v589;
  __n128 *v590;
  uint64_t v591;
  __n128 v592;
  uint64_t v593;
  char **v594;
  _QWORD *v595;
  char *v596;
  int v597;
  unint64_t v598;
  uint64_t v599;
  int v600;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  __n128 *v613;
  uint64_t v614;
  __n128 *v615;
  unint64_t v616;
  __n128 *v617;
  __n128 *v618;
  unint64_t v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t *v622;
  _QWORD *v623;
  uint64_t v624;
  unint64_t v626;
  __n128 *v627;
  uint64_t v628;
  __n128 *v629;
  unint64_t v630;
  __n128 *v631;
  __n128 *v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t *v636;
  _QWORD *v637;
  uint64_t v638;
  uint64_t *v640;
  uint64_t *v641;
  float64x2_t **v642;
  int8x8_t v643;
  int v644;
  unsigned int v645;
  unint64_t v646;
  uint8x8_t v647;
  unint64_t v648;
  uint64_t **v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unsigned __int8 v655;
  uint64_t v656;
  uint64_t v657;
  unsigned __int8 v658;
  unint64_t v659;
  unint64_t v660;
  __n128 *v661;
  uint64_t v662;
  __n128 *v663;
  unint64_t v664;
  __n128 *v665;
  __n128 *v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t *v670;
  _QWORD *v671;
  uint64_t v672;
  unint64_t v674;
  unint64_t v675;
  __n128 *v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  __n128 *v680;
  __n128 *v681;
  unint64_t v682;
  unint64_t v683;
  uint64_t v684;
  unint64_t *v685;
  _QWORD *v686;
  uint64_t v687;
  unint64_t v689;
  unint64_t v690;
  float64x2_t **v691;
  uint64_t v692;
  unint64_t v693;
  __n128 *v694;
  __n128 *v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  float64x2_t **v699;
  _QWORD *v700;
  uint64_t v701;
  _BOOL4 v703;
  __n128 *v704;
  float64x2_t **v705;
  uint64_t v706;
  __n128 *v707;
  unint64_t v708;
  float64x2_t v709;
  float64x2_t v710;
  os_log_t *v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  os_log_t *v717;
  uint64_t v718;
  double *v719;
  float64_t *v720;
  double *v721;
  double *f64;
  double v723;
  double v724;
  float64x2_t v725;
  double v726;
  double v727;
  double v728;
  double v729;
  double v730;
  double v731;
  double v732;
  float64x2_t v733;
  double v734;
  double v735;
  double v736;
  float64_t v737;
  double v738;
  double v739;
  double v740;
  double v741;
  double v742;
  double v743;
  double v744;
  double v745;
  double v746;
  double v747;
  double v748;
  double v749;
  double v750;
  double v751;
  double v752;
  float64x2_t v754;
  double v756;
  double v758;
  double v760;
  double v764;
  double v765;
  double v766;
  double v767;
  __n128 v768;
  double v769;
  double v770;
  uint64_t v771;
  double v776;
  os_log_t *v777;
  double v778;
  double v780;
  double v781;
  __int128 v782;
  uint64_t v787;
  double v789;
  double v790;
  uint64_t v791;
  double v796;
  os_log_t *v797;
  double v798;
  double v801;
  double v802;
  __int128 v803;
  uint64_t v806;
  int8x8_t v807;
  int v808;
  unsigned int v809;
  unint64_t v810;
  uint8x8_t v811;
  unint64_t v812;
  uint64_t **v813;
  uint64_t *v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  uint64_t v818;
  float64x2_t v819;
  float64x2_t v821;
  float64x2_t v823;
  double v824;
  float64x2_t v825;
  float64x2_t v826;
  double v827;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  double v832;
  uint64_t v833;
  double v834;
  uint64_t v835;
  uint64_t v836;
  double v837;
  double v838;
  unint64_t v839;
  uint64_t v840;
  char *v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD *v845;
  int v846;
  int v847;
  unint64_t v848;
  char *v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  unint64_t v854;
  unint64_t v855;
  _BYTE *v856;
  _QWORD *v857;
  char *v858;
  unint64_t v859;
  uint64_t v860;
  uint64_t v861;
  char *v862;
  __n128 *v863;
  __n128 *v864;
  uint64_t v865;
  __n128 v866;
  uint64_t v867;
  int v868;
  int v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  int v874;
  int v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t v879;
  uint64_t v880;
  size_t v881;
  const char *v882;
  unsigned __int8 v883;
  int v884;
  unint64_t v885;
  unint64_t v886;
  uint64_t v888;
  size_t v889;
  const char *v890;
  unsigned __int8 v891;
  _QWORD *v892;
  uint64_t v893;
  _QWORD *v894;
  _QWORD *v895;
  _QWORD *v896;
  size_t v897;
  __int128 *v898;
  uint64_t v899;
  void *v900;
  uint64_t v901;
  uint64_t v902;
  const char *v903;
  uint64_t v904;
  size_t v905;
  const char *v906;
  unsigned __int8 v907;
  unsigned __int8 v908;
  const char *v909;
  size_t v910;
  _BYTE *v911;
  uint64_t v912;
  uint64_t v913;
  _BYTE *v914;
  NSObject *v915;
  uint64_t v916;
  uint64_t v917;
  size_t v918;
  void *v919;
  _QWORD *v920;
  size_t v921;
  size_t v922;
  _OWORD *v923;
  void *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  char v928;
  _QWORD *v929;
  uint64_t v930;
  std::__shared_weak_count *v931;
  unint64_t *v932;
  unint64_t v933;
  char *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  unint64_t v940;
  unsigned __int8 v941;
  uint64_t v942;
  uint64_t i;
  unsigned __int8 v944;
  unsigned __int8 v945;
  const char *v946;
  size_t v947;
  NSObject *v948;
  unint64_t v949;
  const char *v950;
  uint64_t v951;
  int v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  NSObject *v956;
  uint64_t v957;
  uint64_t v958;
  NSObject *v959;
  size_t v960;
  NSObject *v961;
  NSObject *v962;
  std::__shared_weak_count *v963;
  unint64_t *v964;
  unint64_t v965;
  unint64_t v966;
  os_log_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  std::__shared_weak_count *v972;
  unint64_t *v973;
  unint64_t v974;
  std::__shared_weak_count *v975;
  unint64_t *v976;
  unint64_t v977;
  uint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  std::__shared_weak_count *v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  void *v991;
  std::__shared_weak_count *v992;
  unint64_t *v993;
  unint64_t v994;
  uint64_t v995;
  __int128 *v996;
  uint64_t v997;
  __int128 v998;
  __int128 v999;
  __int128 v1000;
  __int128 v1001;
  __int128 v1002;
  __int128 v1003;
  __int128 v1004;
  __int128 v1005;
  unsigned __int8 v1006;
  const char *v1007;
  size_t v1008;
  NSObject *v1009;
  unint64_t v1010;
  const char *v1011;
  int v1012;
  uint64_t v1013;
  uint64_t v1014;
  NSObject *v1015;
  uint64_t v1016;
  uint64_t v1017;
  NSObject *v1018;
  size_t v1019;
  NSObject *v1020;
  NSObject *v1021;
  std::__shared_weak_count *v1022;
  unint64_t *v1023;
  unint64_t v1024;
  unint64_t v1025;
  os_log_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  std::__shared_weak_count *v1031;
  unint64_t *v1032;
  unint64_t v1033;
  std::__shared_weak_count *v1034;
  unint64_t *v1035;
  unint64_t v1036;
  uint64_t v1037;
  std::__shared_weak_count *v1038;
  unint64_t *v1039;
  unint64_t v1040;
  std::__shared_weak_count *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  std::__shared_weak_count *v1044;
  unint64_t *v1045;
  unint64_t v1046;
  std::__shared_weak_count *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  void *v1050;
  std::__shared_weak_count *v1051;
  unint64_t *v1052;
  unint64_t v1053;
  uint64_t v1054;
  _QWORD *v1055;
  uint64_t v1056;
  uint64_t v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  int v1066;
  int v1067;
  unint64_t v1068;
  size_t v1069;
  size_t v1070;
  void *v1071;
  void *v1072;
  int64_t v1073;
  NSObject *v1074;
  uint64_t v1075;
  int v1076;
  uint64_t v1077;
  unsigned int v1078;
  int v1079;
  unsigned int v1080;
  uint64_t *v1081;
  _QWORD *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  char *v1089;
  unint64_t v1090;
  uint64_t v1091;
  char v1092;
  _BYTE *v1093;
  int v1094;
  _BYTE *v1095;
  _BYTE *v1096;
  _BYTE *v1097;
  uint64_t v1098;
  unsigned int v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t v1103;
  char **v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  __int128 v1112;
  __int128 v1113;
  __int128 v1114;
  __int128 v1115;
  _OWORD *v1117;
  _OWORD *v1118;
  _OWORD *v1119;
  _OWORD *v1120;
  _OWORD *v1121;
  _OWORD *v1122;
  __int128 v1123;
  _QWORD *v1124;
  _QWORD *v1125;
  uint64_t v1126;
  uint64_t ii;
  char *v1128;
  _OWORD *v1129;
  double v1130;
  uint64_t v1131;
  double v1132;
  uint64_t v1133;
  uint64_t v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  __int128 v1141;
  __int128 v1142;
  __int128 v1143;
  __int128 v1144;
  __int128 v1145;
  double v1146;
  __int128 v1147;
  __int128 v1148;
  __int128 v1149;
  __int128 v1150;
  __int128 v1151;
  __int128 v1152;
  __int128 v1153;
  __int128 v1154;
  __int128 v1155;
  __int128 v1156;
  __int128 v1157;
  __int128 v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  unint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  char *v1165;
  unint64_t v1166;
  uint64_t v1167;
  char v1168;
  uint64_t v1169;
  uint64_t v1170;
  _BYTE *v1171;
  uint64_t v1172;
  unsigned int v1173;
  uint64_t v1174;
  uint64_t v1175;
  _QWORD *v1176;
  uint64_t v1177;
  _OWORD *v1179;
  _QWORD *v1180;
  _QWORD *v1181;
  uint64_t v1182;
  uint64_t j;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  uint64_t v1188;
  _QWORD *v1189;
  _QWORD *v1190;
  uint64_t v1191;
  uint64_t k;
  char *v1193;
  _OWORD *v1194;
  double v1195;
  uint64_t v1196;
  double v1197;
  uint64_t v1198;
  uint64_t v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  double v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  uint64_t v1224;
  int v1225;
  uint64_t v1226;
  int v1227;
  __int128 v1228;
  __int128 v1229;
  uint64_t v1230;
  __int128 v1231;
  void *v1232;
  void *v1233;
  void *v1234;
  __int128 v1235;
  __int128 v1236;
  uint64_t v1237;
  const void *v1238;
  int64_t v1239;
  char *v1240;
  char *v1241;
  const void *v1242;
  int64_t v1243;
  char *v1244;
  char *v1245;
  const void *v1246;
  int64_t v1247;
  char *v1248;
  char *v1249;
  int64x2_t v1250;
  __int128 v1251;
  __int128 v1252;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  _BYTE *v1258;
  uint64_t v1259;
  char **v1260;
  _BYTE *v1261;
  _BYTE *v1262;
  char *v1263;
  uint64_t v1264;
  char *v1265;
  char *v1266;
  uint64_t v1267;
  unint64_t v1268;
  uint64_t v1269;
  char *v1270;
  char *v1271;
  __int128 *v1272;
  uint64_t v1273;
  __int128 v1274;
  int v1275;
  uint64_t v1276;
  _BYTE *v1277;
  uint64_t v1278;
  char **v1279;
  _BYTE *v1280;
  _BYTE *v1281;
  char *v1282;
  uint64_t v1283;
  char *v1284;
  char *v1285;
  uint64_t v1286;
  unint64_t v1287;
  uint64_t v1288;
  char *v1289;
  char *v1290;
  __int128 *v1291;
  uint64_t v1292;
  __int128 v1293;
  int v1294;
  uint64_t v1295;
  _BYTE *v1296;
  uint64_t v1297;
  char **v1298;
  _BYTE *v1299;
  _BYTE *v1300;
  char *v1301;
  uint64_t v1302;
  char *v1303;
  char *v1304;
  uint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  char *v1308;
  char *v1309;
  __int128 *v1310;
  uint64_t v1311;
  __int128 v1312;
  int v1313;
  _QWORD *v1314;
  _QWORD *v1315;
  uint64_t v1316;
  double v1317;
  uint64_t v1318;
  double v1319;
  uint64_t v1320;
  uint64_t v1321;
  __int128 v1322;
  __int128 v1323;
  __int128 v1324;
  __int128 v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  double v1333;
  __int128 v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  _QWORD *v1346;
  _QWORD *v1347;
  uint64_t v1348;
  uint64_t jj;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  void *v1353;
  uint64_t v1354;
  void *v1355;
  uint64_t v1356;
  int v1357;
  __int128 v1358;
  __int128 v1359;
  uint64_t v1360;
  __int128 v1361;
  void *v1362;
  void *v1363;
  void *v1364;
  __int128 v1365;
  __int128 v1366;
  _QWORD *v1367;
  uint64_t v1368;
  _QWORD *v1369;
  uint64_t v1370;
  _QWORD *v1371;
  uint64_t v1372;
  _QWORD *v1373;
  uint64_t v1374;
  uint64_t v1375;
  const void *v1376;
  int64_t v1377;
  char *v1378;
  char *v1379;
  const void *v1380;
  int64_t v1381;
  char *v1382;
  char *v1383;
  const void *v1384;
  int64_t v1385;
  char *v1386;
  char *v1387;
  int64x2_t v1388;
  __int128 v1389;
  __int128 v1390;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  _BYTE *v1397;
  uint64_t v1398;
  char **v1399;
  _BYTE *v1400;
  _BYTE *v1401;
  char *v1402;
  uint64_t v1403;
  char *v1404;
  char *v1405;
  uint64_t v1406;
  unint64_t v1407;
  uint64_t v1408;
  char *v1409;
  char *v1410;
  __int128 *v1411;
  uint64_t v1412;
  __int128 v1413;
  int v1414;
  uint64_t v1415;
  _BYTE *v1416;
  uint64_t v1417;
  char **v1418;
  _BYTE *v1419;
  _BYTE *v1420;
  char *v1421;
  uint64_t v1422;
  char *v1423;
  char *v1424;
  uint64_t v1425;
  unint64_t v1426;
  uint64_t v1427;
  char *v1428;
  char *v1429;
  __int128 *v1430;
  uint64_t v1431;
  __int128 v1432;
  int v1433;
  uint64_t v1434;
  _BYTE *v1435;
  uint64_t v1436;
  char **v1437;
  _BYTE *v1438;
  _BYTE *v1439;
  char *v1440;
  uint64_t v1441;
  char *v1442;
  char *v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  char *v1447;
  char *v1448;
  __int128 *v1449;
  uint64_t v1450;
  __int128 v1451;
  int v1452;
  _QWORD *v1453;
  _QWORD *v1454;
  _QWORD *v1455;
  char *v1456;
  uint64_t *v1457;
  uint64_t **v1458;
  uint64_t *v1459;
  int v1460;
  const void *v1461;
  unint64_t v1462;
  size_t v1463;
  int v1464;
  int v1465;
  _QWORD *v1466;
  char *v1467;
  uint64_t *v1468;
  uint64_t **v1469;
  _QWORD *v1470;
  const void *v1471;
  int v1472;
  const void *v1473;
  unint64_t v1474;
  size_t v1475;
  int v1476;
  uint64_t *v1477;
  uint64_t *v1478;
  std::__shared_weak_count *v1479;
  unint64_t *v1480;
  unint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t *v1484;
  unint64_t v1485;
  unsigned int v1486;
  char *v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  __int128 v1495;
  __int128 v1496;
  __int128 v1497;
  __int128 v1498;
  __int128 v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  _QWORD *v1505;
  uint64_t v1506;
  _QWORD *v1507;
  uint64_t v1508;
  _QWORD *v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  BOOL v1516;
  _QWORD *v1517;
  uint64_t v1518;
  char *v1519;
  char *v1520;
  unint64_t v1521;
  unint64_t v1522;
  int *v1523;
  char *v1524;
  int v1525;
  BOOL v1526;
  char *v1527;
  char *v1528;
  unint64_t v1529;
  unint64_t v1530;
  char *v1531;
  char *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  char v1536;
  BOOL v1537;
  uint64_t v1538;
  char *v1539;
  int v1540;
  uint64_t v1541;
  os_log_t *v1542;
  uint64_t v1543;
  _BYTE *v1544;
  _BYTE *v1545;
  uint64_t v1546;
  _QWORD *v1547;
  _QWORD *v1548;
  _QWORD *v1549;
  _QWORD *v1550;
  _QWORD *v1551;
  os_log_t *v1552;
  uint64_t v1553;
  _QWORD *v1554;
  uint64_t v1555;
  uint64_t v1556;
  unint64_t v1557;
  unint64_t v1558;
  double v1559;
  double v1560;
  double v1561;
  double *v1562;
  double v1563;
  double *v1564;
  double v1565;
  _BOOL8 v1566;
  _BOOL8 v1567;
  _BYTE *v1568;
  _DWORD *v1569;
  char v1570;
  _BYTE *v1571;
  _BYTE *v1572;
  _BYTE *v1573;
  _QWORD *v1574;
  uint64_t v1575;
  uint64_t v1576;
  BOOL v1577;
  _QWORD *v1578;
  uint64_t v1579;
  char *v1580;
  char *v1581;
  unint64_t v1582;
  unint64_t v1583;
  int *v1584;
  char *v1585;
  int v1586;
  BOOL v1587;
  char *v1588;
  char *v1589;
  unint64_t v1590;
  unint64_t v1591;
  char *v1592;
  char *v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  char v1597;
  BOOL v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  _BYTE *v1602;
  int v1603;
  _BYTE *v1604;
  BOOL v1605;
  _BYTE *v1607;
  _BYTE *v1608;
  _DWORD *v1609;
  int v1610;
  _BYTE *v1611;
  _BYTE *v1612;
  char v1613;
  uint64_t v1614;
  _QWORD *v1615;
  _QWORD *v1616;
  _QWORD *v1617;
  _QWORD *v1618;
  _QWORD *v1619;
  std::__shared_weak_count *v1620;
  unint64_t *v1621;
  unint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  std::__shared_weak_count *v1630;
  unint64_t *v1631;
  unint64_t v1632;
  std::__shared_weak_count *v1633;
  unint64_t *v1634;
  unint64_t v1635;
  uint64_t v1636;
  std::__shared_weak_count *v1637;
  unint64_t *v1638;
  unint64_t v1639;
  std::__shared_weak_count *v1640;
  unint64_t *v1641;
  unint64_t v1642;
  std::__shared_weak_count *v1643;
  unint64_t *v1644;
  unint64_t v1645;
  std::__shared_weak_count *v1646;
  unint64_t *v1647;
  unint64_t v1648;
  const char *v1649;
  std::__shared_weak_count *v1650;
  unint64_t *v1651;
  unint64_t v1652;
  void *v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  double v1657;
  uint64_t v1658;
  double v1659;
  uint64_t v1660;
  uint64_t v1661;
  __int128 v1662;
  __int128 v1663;
  __int128 v1664;
  __int128 v1665;
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  __int128 v1669;
  __int128 v1670;
  __int128 v1671;
  __int128 v1672;
  double v1673;
  __int128 v1674;
  __int128 v1675;
  __int128 v1676;
  __int128 v1677;
  __int128 v1678;
  __int128 v1679;
  __int128 v1680;
  __int128 v1681;
  __int128 v1682;
  __int128 v1683;
  __int128 v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  __int128 v1695;
  __int128 v1696;
  __int128 v1697;
  uint64_t v1698;
  __int128 v1699;
  __int128 v1700;
  __int128 v1701;
  __int128 v1702;
  __int128 v1703;
  __int128 v1704;
  __int128 v1705;
  __int128 v1706;
  __int128 v1707;
  __int128 v1708;
  __int128 v1709;
  __int128 v1710;
  __int128 v1711;
  __int128 v1712;
  __int128 v1713;
  __int128 v1714;
  __int128 v1715;
  __int128 v1716;
  __int128 v1717;
  __int128 v1718;
  __int128 v1719;
  __int128 v1720;
  __int128 v1721;
  __int128 v1722;
  _QWORD *v1723;
  _QWORD *v1724;
  uint64_t v1725;
  uint64_t n;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t result;
  uint64_t *v1731;
  uint64_t *v1732;
  int v1733;
  const void *v1734;
  unint64_t v1735;
  size_t v1736;
  int v1737;
  uint64_t *m;
  int v1739;
  const void *v1740;
  unint64_t v1741;
  size_t v1742;
  int v1743;
  uint64_t *v1744;
  uint64_t *v1745;
  unsigned __int8 v1746;
  size_t v1747;
  const char *v1748;
  NSObject *v1749;
  unint64_t v1750;
  const char *v1751;
  uint64_t v1752;
  int v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  NSObject *v1757;
  uint64_t v1758;
  uint64_t v1759;
  NSObject *v1760;
  size_t v1761;
  NSObject *v1762;
  NSObject *v1763;
  std::__shared_weak_count *v1764;
  unint64_t *v1765;
  unint64_t v1766;
  unint64_t v1767;
  os_log_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  std::__shared_weak_count *v1773;
  unint64_t *v1774;
  unint64_t v1775;
  std::__shared_weak_count *v1776;
  unint64_t *v1777;
  unint64_t v1778;
  uint64_t v1779;
  std::__shared_weak_count *v1780;
  unint64_t *v1781;
  unint64_t v1782;
  std::__shared_weak_count *v1783;
  unint64_t *v1784;
  unint64_t v1785;
  std::__shared_weak_count *v1786;
  unint64_t *v1787;
  unint64_t v1788;
  std::__shared_weak_count *v1789;
  unint64_t *v1790;
  unint64_t v1791;
  void *v1792;
  std::__shared_weak_count *v1793;
  unint64_t *v1794;
  unint64_t v1795;
  _QWORD *v1796;
  _QWORD *v1797;
  _QWORD *v1798;
  _QWORD *v1799;
  double v1800;
  uint64_t v1801;
  double v1802;
  _QWORD *v1803;
  _QWORD *v1804;
  _QWORD *v1805;
  _QWORD *v1806;
  double v1807;
  uint64_t v1808;
  double v1809;
  _QWORD *v1810;
  _QWORD *v1811;
  _QWORD *v1812;
  _QWORD *v1813;
  _QWORD *v1814;
  void **v1815;
  uint64_t v1816;
  _OWORD *v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  _QWORD *v1824;
  uint64_t v1825;
  int64x2_t v1826;
  char **v1827;
  uint64_t v1828;
  _OWORD *v1829;
  uint64_t v1830;
  uint64_t v1831;
  unint64_t *v1832;
  _BYTE *v1833;
  _OWORD *v1835;
  uint64_t v1836;
  _BYTE *v1837;
  _OWORD *v1838;
  uint64_t v1839;
  _OWORD *v1840;
  uint64_t v1841;
  _OWORD *v1842;
  uint64_t v1843;
  char **v1844;
  _OWORD *v1845;
  uint64_t v1846;
  uint64_t v1847;
  float64x2_t v1848;
  _OWORD *v1849;
  _OWORD *v1850;
  _BYTE *v1851;
  float64x2_t v1853;
  _OWORD *v1854;
  uint64_t v1855;
  unint64_t v1856;
  float64x2_t v1857;
  uint64_t **v1858;
  uint64_t v1859;
  uint64_t v1860;
  int8x16_t v1861;
  float64x2_t v1862;
  uint64_t v1863;
  int8x16_t v1864;
  __int128 v1865;
  __int128 v1866;
  int8x16_t v1867;
  _QWORD *v1868;
  uint64_t v1869;
  uint64_t v1870;
  _QWORD *v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  int8x16_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  unsigned int v1881;
  unint64_t v1882;
  int8x16_t v1883;
  uint64_t v1884;
  int v1885;
  _QWORD *v1886;
  __int128 v1887;
  uint64_t v1888;
  uint64_t v1889;
  __int128 v1891;
  uint64_t v1892;
  _OWORD __dst[2];
  _BYTE v1894[15];
  void *object[3];
  __int128 v1896;
  void *__p;
  __int128 __src;
  std::__shared_weak_count *v1899;
  __int128 v1900;
  _BYTE v1901[24];
  __int128 v1902;
  __int128 v1903[3];
  __n128 *v1904;
  __int128 v1905;
  _BYTE v1906[24];
  char *v1907;
  std::__shared_weak_count *v1908;
  os_log_t v1909[12];
  __int128 v1910;
  __int128 v1911;
  __int128 v1912;
  __int128 v1913;
  __int128 v1914;
  __int128 v1915;
  __int128 v1916;
  __int128 v1917;
  os_log_t *v1918;
  __int128 v1919;
  os_log_t *v1920;
  uint64_t v1921;
  _BYTE v1922[24];
  _BYTE *v1923;
  _BYTE v1924[24];
  _BYTE *v1925;
  _BYTE v1926[24];
  _BYTE *v1927;
  _BYTE v1928[24];
  _BYTE *v1929;
  __int128 v1930;
  __int128 v1931;
  __int128 v1932;
  _BYTE v1933[544];
  void *v1934;
  char v1935;
  void *v1936;
  char v1937;
  void *v1938;
  char v1939;
  char v1940;
  __int128 v1941;
  __int128 v1942;
  uint64_t v1943;
  _BYTE oslog[48];
  __int128 v1945;
  std::__shared_weak_count *v1946;
  float64x2_t **v1947;
  __int128 v1948;
  _BYTE v1949[80];
  __n128 *v1950;
  __int128 v1951;
  __int128 v1952;
  __int128 v1953;
  __int128 v1954;
  __int128 v1955;
  std::__shared_weak_count *v1956;
  __int128 v1957;
  uint64_t v1958;
  __int128 v1959;
  int64_t v1960;
  uint64_t v1961;

  v1961 = *MEMORY[0x24BDAC8D0];
  v7 = (char **)a2[6];
  v8 = (char **)a2[7];
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      v11 = *v7;
      v10 = v7[1];
      if (*v7 != v10)
      {
        v12 = v10 - v11 - 520;
        if (v12 >= 0x208)
        {
          v14 = 0;
          v15 = v12 / 0x208 + 1;
          v13 = &v11[520 * (v15 & 0xFFFFFFFFFFFFFELL)];
          v16 = v15 & 0xFFFFFFFFFFFFFELL;
          do
          {
            v9 += *(_QWORD *)v11;
            v14 += *((_QWORD *)v11 + 65);
            v11 += 1040;
            v16 -= 2;
          }
          while (v16);
          v9 += v14;
          if (v15 == (v15 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_3;
        }
        else
        {
          v13 = *v7;
        }
        do
        {
          v9 += *(_QWORD *)v13;
          v13 += 520;
        }
        while (v13 != v10);
      }
LABEL_3:
      v7 += 3;
    }
    while (v7 != v8);
  }
  v17 = (char **)a2[9];
  v18 = (char **)a2[10];
  if (v17 != v18)
  {
    v19 = 0;
    do
    {
      v21 = *v17;
      v20 = v17[1];
      if (*v17 != v20)
      {
        v22 = v20 - v21 - 520;
        if (v22 >= 0x208)
        {
          v24 = 0;
          v25 = v22 / 0x208 + 1;
          v23 = &v21[520 * (v25 & 0xFFFFFFFFFFFFFELL)];
          v26 = v25 & 0xFFFFFFFFFFFFFELL;
          do
          {
            v19 += *(_QWORD *)v21;
            v24 += *((_QWORD *)v21 + 65);
            v21 += 1040;
            v26 -= 2;
          }
          while (v26);
          v19 += v24;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFELL))
            goto LABEL_14;
        }
        else
        {
          v23 = *v17;
        }
        do
        {
          v19 += *(_QWORD *)v23;
          v23 += 520;
        }
        while (v23 != v20);
      }
LABEL_14:
      v17 += 3;
    }
    while (v17 != v18);
  }
  v1859 = (uint64_t)a2;
  kdebug_trace();
  v1837 = (_BYTE *)(a1 + 5312);
  *(_QWORD *)(a1 + 8240) = *(_QWORD *)(a1 + 8232);
  *(_QWORD *)(a1 + 8264) = *(_QWORD *)(a1 + 8256);
  *(_QWORD *)(a1 + 8360) = *(_QWORD *)(a1 + 8352);
  if (!*(_QWORD *)(a1 + 7952) || !*(_BYTE *)(a1 + 12512))
    goto LABEL_184;
  sub_20F82FD50(&v1957);
  v27 = (_OWORD *)(a1 + 12488);
  if (**(int **)(v1957 + 56) <= 2)
  {
    v28 = *(unsigned __int8 *)(v1957 + 72);
    v29 = sub_20E8C31DC(v1957, "OSLogSurrogateAppender", 1, 0);
    v30 = v29;
    if (v28 || v29)
    {
      sub_20E863438((uint64_t)v1909);
      v31 = sub_20E86A980(&v1909[2], (uint64_t)"Process a gyro scale update with value: ", 40);
      object[0] = (void *)(a1 + 12488);
      sub_20EB32EA4(v31, (__int128 **)object);
      v1882 = v30;
      if ((BYTE8(v1911) & 0x10) != 0)
      {
        v34 = (os_log_t)v1911;
        if ((os_log_t)v1911 < v1909[9])
        {
          *(os_log_t *)&v1911 = v1909[9];
          v34 = v1909[9];
        }
        v35 = v1909[8];
        v32 = (char *)v34 - (char *)v1909[8];
        if ((unint64_t)((char *)v34 - (char *)v1909[8]) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_86;
      }
      else
      {
        if ((BYTE8(v1911) & 8) == 0)
        {
          v32 = 0;
          BYTE7(__dst[1]) = 0;
          v33 = __dst;
          goto LABEL_41;
        }
        v35 = v1909[5];
        v32 = (char *)v1909[7] - (char *)v1909[5];
        if ((os_log_t)((char *)v1909[7] - (char *)v1909[5]) > (os_log_t)0x7FFFFFFFFFFFFFF7)
LABEL_86:
          sub_20E860B7C();
      }
      if (v32 >= 0x17)
      {
        v36 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v36 = v32 | 7;
        v37 = v36 + 1;
        v33 = operator new(v36 + 1);
        *(_QWORD *)&__dst[1] = v37 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v33;
        *((_QWORD *)&__dst[0] + 1) = v32;
      }
      else
      {
        BYTE7(__dst[1]) = v32;
        v33 = __dst;
        if (!v32)
        {
LABEL_41:
          *((_BYTE *)v33 + v32) = 0;
          *(_QWORD *)oslog = &v1957;
          *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
          *(_DWORD *)&oslog[24] = 2;
          *(_QWORD *)&oslog[32] = "unknown file";
          *(_DWORD *)&oslog[40] = 4145;
          v1946 = 0;
          *(_QWORD *)&v1945 = "unknown function";
          *((_QWORD *)&v1945 + 1) = 0;
          if ((SBYTE7(__dst[1]) & 0x80u) == 0)
            v38 = __dst;
          else
            v38 = *(_OWORD **)&__dst[0];
          v39 = **(_QWORD **)oslog;
          if (*(char *)(**(_QWORD **)oslog + 39) < 0)
          {
            v41 = *(const char **)(v39 + 16);
            v40 = *(_QWORD *)(v39 + 24);
          }
          else
          {
            v40 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
            v41 = (const char *)(**(_QWORD **)oslog + 16);
          }
          v1877 = **(_QWORD **)oslog + 16;
          v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if ((_BYTE)v1896 && SHIBYTE(object[2]) < 0)
              operator delete(object[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v43 = byte_254A4A4F8;
          else
            v43 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v44 = byte_254A4A4F8[23];
          else
            v44 = *(_QWORD *)&byte_254A4A4F8[8];
          object[0] = os_log_create(v43, v41);
          v45 = &object[1];
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v44 >= 0x17)
          {
            v46 = v28;
            v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v47 = v44 | 7;
            v48 = v47 + 1;
            v45 = (void **)operator new(v47 + 1);
            *(_QWORD *)&v1896 = v48 | 0x8000000000000000;
            object[1] = v45;
            object[2] = (void *)v44;
            v28 = v46;
          }
          else
          {
            BYTE7(v1896) = v44;
            if (!v44)
            {
LABEL_62:
              *((_BYTE *)v45 + v44) = 0;
              BYTE8(v1896) = 1;
              p_p = &__p;
              if (v40 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v50 = v38;
              if (v40 >= 0x17)
              {
                v52 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v40 | 7) != 0x17)
                  v52 = v40 | 7;
                v53 = v52 + 1;
                v51 = v1882;
                p_p = operator new(v52 + 1);
                *((_QWORD *)&__src + 1) = v53 | 0x8000000000000000;
                __p = p_p;
                *(_QWORD *)&__src = v40;
              }
              else
              {
                HIBYTE(__src) = v40;
                v51 = v1882;
                if (!v40)
                {
LABEL_70:
                  *((_BYTE *)p_p + v40) = 0;
                  LOBYTE(v1899) = 1;
                  v54 = object[0];
                  if (SHIBYTE(__src) < 0)
                    operator delete(__p);
                  if (BYTE8(v1896) && SBYTE7(v1896) < 0)
                    operator delete(object[1]);
                  if (object[0])
                    os_release(object[0]);
                  if (!v51 || !*(_QWORD *)(v51 + 24))
                  {
                    os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG);
                    LODWORD(object[0]) = 136315138;
                    *(void **)((char *)object + 4) = v50;
                    v61 = (void *)_os_log_send_and_compose_impl();
                    if (v61)
                      free(v61);
                    goto LABEL_150;
                  }
                  v55 = _os_log_pack_size();
                  v56 = operator new(v55, (std::align_val_t)8uLL);
                  v57 = (_QWORD *)operator new();
                  *v57 = &off_24C9ABB80;
                  v57[1] = 0;
                  v57[2] = 0;
                  v57[3] = v56;
                  *(_QWORD *)&v1952 = v56;
                  *((_QWORD *)&v1952 + 1) = v56;
                  *(_QWORD *)&v1954 = 0;
                  v1953 = (unint64_t)v57;
                  v58 = strlen((const char *)v50);
                  if (v58 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v59 = v58;
                  if (v58 >= 0x17)
                  {
                    v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v58 | 7) != 0x17)
                      v62 = v58 | 7;
                    v63 = v62 + 1;
                    v60 = operator new(v62 + 1);
                    *(_QWORD *)&v1906[16] = v63 | 0x8000000000000000;
                    *(_QWORD *)v1906 = v60;
                    *(_QWORD *)&v1906[8] = v59;
                  }
                  else
                  {
                    v1906[23] = v58;
                    v60 = v1906;
                    if (!v58)
                    {
LABEL_91:
                      v60[v59] = 0;
                      v64 = *(_QWORD *)v1906;
                      *(_QWORD *)&v1959 = *(_QWORD *)&v1906[8];
                      *(_QWORD *)((char *)&v1959 + 7) = *(_QWORD *)&v1906[15];
                      v65 = v1906[23];
                      v66 = operator new(0x38uLL);
                      v66[1] = 0;
                      v66[2] = 0;
                      v66[3] = off_24C9ABC20;
                      *v66 = &off_24C9ABBD0;
                      v67 = v1959;
                      v66[4] = v64;
                      v66[5] = v67;
                      *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)&v1959 + 7);
                      *((_BYTE *)v66 + 55) = v65;
                      *(_QWORD *)&v1959 = 0;
                      *(_QWORD *)((char *)&v1959 + 7) = 0;
                      v68 = (std::__shared_weak_count *)v1954;
                      *((_QWORD *)&v1953 + 1) = v66 + 3;
                      *(_QWORD *)&v1954 = v66;
                      if (v68)
                      {
                        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                        do
                          v70 = __ldaxr(p_shared_owners);
                        while (__stlxr(v70 - 1, p_shared_owners));
                        if (!v70)
                        {
                          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                          std::__shared_weak_count::__release_weak(v68);
                        }
                      }
                      *(_OWORD *)object = v1952;
                      v71 = (void *)*((_QWORD *)&v1953 + 1);
                      object[2] = (void *)v1953;
                      if ((_QWORD)v1953)
                      {
                        v72 = (unint64_t *)(v1953 + 8);
                        do
                          v73 = __ldxr(v72);
                        while (__stxr(v73 + 1, v72));
                      }
                      v74 = (std::__shared_weak_count *)v1954;
                      *(_QWORD *)&v1896 = v71;
                      *((_QWORD *)&v1896 + 1) = v1954;
                      if ((_QWORD)v1954)
                      {
                        v75 = (unint64_t *)(v1954 + 8);
                        do
                          v76 = __ldxr(v75);
                        while (__stxr(v76 + 1, v75));
                        __p = v71;
                        do
                          v77 = __ldaxr(v75);
                        while (__stlxr(v77 - 1, v75));
                        if (!v77)
                        {
                          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                          std::__shared_weak_count::__release_weak(v74);
                        }
                      }
                      else
                      {
                        __p = v71;
                      }
                      v78 = (std::__shared_weak_count *)v1953;
                      if ((_QWORD)v1953)
                      {
                        v79 = (unint64_t *)(v1953 + 8);
                        do
                          v80 = __ldaxr(v79);
                        while (__stlxr(v80 - 1, v79));
                        if (!v80)
                        {
                          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                          std::__shared_weak_count::__release_weak(v78);
                        }
                      }
                      v81 = object[0];
                      if (*((char *)__p + 31) >= 0)
                        v82 = (char *)__p + 8;
                      else
                        v82 = (char *)*((_QWORD *)__p + 1);
                      v83 = _os_log_pack_fill();
                      *(_DWORD *)v83 = 136315138;
                      *(_QWORD *)(v83 + 4) = v82;
                      v84 = operator new();
                      v85 = *(unsigned __int8 *)(v39 + 39);
                      v86 = v1877;
                      if ((v85 & 0x80u) != 0)
                      {
                        v86 = *(_QWORD *)(v39 + 16);
                        v85 = *(_QWORD *)(v39 + 24);
                      }
                      *(_QWORD *)v84 = v81;
                      *(_OWORD *)(v84 + 8) = *(_OWORD *)&object[1];
                      object[1] = 0;
                      object[2] = 0;
                      *(_OWORD *)(v84 + 24) = v1896;
                      v1896 = 0uLL;
                      *(_QWORD *)(v84 + 40) = v86;
                      *(_QWORD *)(v84 + 48) = v85;
                      *(_BYTE *)(v84 + 56) = 2;
                      *(_QWORD *)v1906 = 0;
                      *(_QWORD *)&v1952 = v84;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v51 + 24) + 40))(*(_QWORD *)(v51 + 24), &v1952);
                      v87 = v1952;
                      *(_QWORD *)&v1952 = 0;
                      if (v87)
                      {
                        v88 = *(std::__shared_weak_count **)(v87 + 32);
                        if (v88)
                        {
                          v89 = (unint64_t *)&v88->__shared_owners_;
                          do
                            v90 = __ldaxr(v89);
                          while (__stlxr(v90 - 1, v89));
                          if (!v90)
                          {
                            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                            std::__shared_weak_count::__release_weak(v88);
                          }
                        }
                        v91 = *(std::__shared_weak_count **)(v87 + 16);
                        if (v91)
                        {
                          v92 = (unint64_t *)&v91->__shared_owners_;
                          do
                            v93 = __ldaxr(v92);
                          while (__stlxr(v93 - 1, v92));
                          if (!v93)
                          {
                            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                            std::__shared_weak_count::__release_weak(v91);
                          }
                        }
                        MEMORY[0x212BC6398](v87, 0x10F0C40B62ED6C6);
                        v94 = *(_QWORD *)v1906;
                        *(_QWORD *)v1906 = 0;
                        if (v94)
                        {
                          v95 = *(std::__shared_weak_count **)(v94 + 32);
                          if (v95)
                          {
                            v96 = (unint64_t *)&v95->__shared_owners_;
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
                          v98 = *(std::__shared_weak_count **)(v94 + 16);
                          if (v98)
                          {
                            v99 = (unint64_t *)&v98->__shared_owners_;
                            do
                              v100 = __ldaxr(v99);
                            while (__stlxr(v100 - 1, v99));
                            if (!v100)
                            {
                              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                              std::__shared_weak_count::__release_weak(v98);
                            }
                          }
                          MEMORY[0x212BC6398](v94, 0x10F0C40B62ED6C6);
                        }
                      }
                      v101 = (std::__shared_weak_count *)*((_QWORD *)&v1896 + 1);
                      if (*((_QWORD *)&v1896 + 1))
                      {
                        v102 = (unint64_t *)(*((_QWORD *)&v1896 + 1) + 8);
                        do
                          v103 = __ldaxr(v102);
                        while (__stlxr(v103 - 1, v102));
                        if (!v103)
                        {
                          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                          std::__shared_weak_count::__release_weak(v101);
                        }
                      }
                      v104 = (std::__shared_weak_count *)object[2];
                      if (object[2])
                      {
                        v105 = (unint64_t *)((char *)object[2] + 8);
                        do
                          v106 = __ldaxr(v105);
                        while (__stlxr(v106 - 1, v105));
                        if (!v106)
                        {
                          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                          std::__shared_weak_count::__release_weak(v104);
                        }
                      }
LABEL_150:
                      if (v28)
                      {
                        v107 = (const char *)__dst;
                        if (SBYTE7(__dst[1]) < 0)
                          v107 = *(const char **)&__dst[0];
                        sub_20E8C003C((uint64_t)oslog, "%s", v107);
                        sub_20E863570((uint64_t)oslog);
                      }
                      sub_20E863570((uint64_t)oslog);
                      v108 = v1946;
                      if (v1946)
                      {
                        v109 = (unint64_t *)&v1946->__shared_owners_;
                        do
                          v110 = __ldaxr(v109);
                        while (__stlxr(v110 - 1, v109));
                        if (!v110)
                        {
                          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                          std::__shared_weak_count::__release_weak(v108);
                        }
                      }
                      if (SBYTE7(__dst[1]) < 0)
                        operator delete(*(void **)&__dst[0]);
                      v1909[0] = *(os_log_t *)MEMORY[0x24BEDB7F0];
                      v111 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
                      *(os_log_t *)((char *)v1909 + (unint64_t)v1909[0][-3].isa) = *(os_log_t *)(MEMORY[0x24BEDB7F0] + 64);
                      v1909[2] = v111;
                      v1909[3] = (os_log_t)(MEMORY[0x24BEDB848] + 16);
                      if (SHIBYTE(v1910) < 0)
                        operator delete(v1909[11]);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v1912);
                      goto LABEL_164;
                    }
                  }
                  memcpy(v60, v50, v59);
                  goto LABEL_91;
                }
              }
              memmove(p_p, v41, v40);
              goto LABEL_70;
            }
          }
          memmove(v45, v43, v44);
          goto LABEL_62;
        }
      }
      memmove(v33, v35, v32);
      goto LABEL_41;
    }
  }
LABEL_164:
  *(_OWORD *)(a1 + 12464) = *v27;
  *(_QWORD *)(a1 + 12480) = *(_QWORD *)(a1 + 12504);
  v112 = *(unsigned __int8 *)(a1 + 664);
  if (*(_BYTE *)(a1 + 664))
  {
    if (v112 != 1)
    {
      if (v112 == 2)
        goto LABEL_184;
      sub_20F82FD50(v1906);
      if (**(int **)(*(_QWORD *)v1906 + 56) > 2)
        goto LABEL_184;
      v113 = *(unsigned __int8 *)(*(_QWORD *)v1906 + 72);
      v114 = sub_20E8C31DC(*(uint64_t *)v1906, "OSLogSurrogateAppender", 1, 0);
      v115 = v114;
      if (!v113 && !v114)
        goto LABEL_184;
      object[0] = v1906;
      object[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      object[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v1896) = 2;
      *((_QWORD *)&v1896 + 1) = "unknown file";
      LODWORD(__p) = 4176;
      v1899 = 0;
      *(_QWORD *)&__src = "unknown function";
      *((_QWORD *)&__src + 1) = 0;
      v116 = *(_QWORD *)v1906;
      v117 = *(_QWORD *)v1906 + 16;
      if (*(char *)(*(_QWORD *)v1906 + 39) < 0)
      {
        v119 = *(const char **)(*(_QWORD *)v1906 + 16);
        v118 = *(_QWORD *)(*(_QWORD *)v1906 + 24);
      }
      else
      {
        v118 = *(unsigned __int8 *)(*(_QWORD *)v1906 + 39);
        v119 = (const char *)(*(_QWORD *)v1906 + 16);
      }
      v1746 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1746 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v1909);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1909);
        if (LOBYTE(v1909[3]) && SHIBYTE(v1909[2]) < 0)
          operator delete(v1909[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v1747 = byte_254A4A4F8[23];
      else
        v1747 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v1748 = byte_254A4A4F8;
      else
        v1748 = *(const char **)byte_254A4A4F8;
      v1909[0] = os_log_create(v1748, v119);
      v1749 = &v1909[1];
      if (v1747 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v1747 >= 0x17)
      {
        v1750 = v115;
        v1751 = v119;
        v1752 = v116;
        v1753 = v113;
        v1754 = v117;
        v1755 = (v1747 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1747 | 7) != 0x17)
          v1755 = v1747 | 7;
        v1756 = v1755 + 1;
        v1749 = operator new(v1755 + 1);
        v1909[3] = (os_log_t)(v1756 | 0x8000000000000000);
        v1909[1] = v1749;
        v1909[2] = (os_log_t)v1747;
        v117 = v1754;
        v113 = v1753;
        v116 = v1752;
        v119 = v1751;
        v115 = v1750;
      }
      else
      {
        HIBYTE(v1909[3]) = v1747;
        if (!v1747)
        {
LABEL_1946:
          *((_BYTE *)&v1749->isa + v1747) = 0;
          LOBYTE(v1909[4]) = 1;
          v1757 = &v1909[5];
          if (v118 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v118 >= 0x17)
          {
            v1758 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v118 | 7) != 0x17)
              v1758 = v118 | 7;
            v1759 = v1758 + 1;
            v1757 = operator new(v1758 + 1);
            v1909[7] = (os_log_t)(v1759 | 0x8000000000000000);
            v1909[5] = v1757;
            v1909[6] = (os_log_t)v118;
          }
          else
          {
            HIBYTE(v1909[7]) = v118;
            if (!v118)
              goto LABEL_1954;
          }
          memmove(v1757, v119, v118);
LABEL_1954:
          *((_BYTE *)&v1757->isa + v118) = 0;
          LOBYTE(v1909[8]) = 1;
          v1760 = v1909[0];
          if (SHIBYTE(v1909[7]) < 0)
            operator delete(v1909[5]);
          if (LOBYTE(v1909[4]) && SHIBYTE(v1909[3]) < 0)
            operator delete(v1909[1]);
          if (v1909[0])
            os_release(v1909[0]);
          if (v115 && *(_QWORD *)(v115 + 24))
          {
            v1761 = _os_log_pack_size();
            v1762 = operator new(v1761, (std::align_val_t)8uLL);
            v1763 = operator new();
            v1764 = (std::__shared_weak_count *)v1763;
            v1763[1].isa = 0;
            v1765 = (unint64_t *)&v1763[1];
            v1763->isa = (Class)&off_24C9ABB80;
            v1763[2].isa = 0;
            v1763[3].isa = (Class)v1762;
            v1909[0] = v1762;
            v1909[1] = v1762;
            v1909[2] = v1763;
            do
              v1766 = __ldxr(v1765);
            while (__stxr(v1766 + 1, v1765));
            memset(&v1909[3], 0, 24);
            do
              v1767 = __ldaxr(v1765);
            while (__stlxr(v1767 - 1, v1765));
            if (!v1767)
            {
              (*((void (**))v1763->isa + 2))(v1763);
              std::__shared_weak_count::__release_weak(v1764);
            }
            v1768 = v1909[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v1769 = operator new();
            v1770 = *(unsigned __int8 *)(v116 + 39);
            if ((v1770 & 0x80u) == 0)
              v1771 = v117;
            else
              v1771 = *(_QWORD *)(v116 + 16);
            if ((v1770 & 0x80u) != 0)
              v1770 = *(_QWORD *)(v116 + 24);
            *(_QWORD *)v1769 = v1768;
            *(_OWORD *)(v1769 + 8) = *(_OWORD *)&v1909[1];
            v1909[1] = 0;
            v1909[2] = 0;
            *(_OWORD *)(v1769 + 24) = *(_OWORD *)&v1909[3];
            v1909[3] = 0;
            v1909[4] = 0;
            *(_QWORD *)(v1769 + 40) = v1771;
            *(_QWORD *)(v1769 + 48) = v1770;
            *(_BYTE *)(v1769 + 56) = 2;
            *(_QWORD *)&v1952 = 0;
            *(_QWORD *)oslog = v1769;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v115 + 24) + 40))(*(_QWORD *)(v115 + 24), oslog);
            v1772 = *(_QWORD *)oslog;
            *(_QWORD *)oslog = 0;
            if (v1772)
            {
              v1773 = *(std::__shared_weak_count **)(v1772 + 32);
              if (v1773)
              {
                v1774 = (unint64_t *)&v1773->__shared_owners_;
                do
                  v1775 = __ldaxr(v1774);
                while (__stlxr(v1775 - 1, v1774));
                if (!v1775)
                {
                  ((void (*)(std::__shared_weak_count *))v1773->__on_zero_shared)(v1773);
                  std::__shared_weak_count::__release_weak(v1773);
                }
              }
              v1776 = *(std::__shared_weak_count **)(v1772 + 16);
              if (v1776)
              {
                v1777 = (unint64_t *)&v1776->__shared_owners_;
                do
                  v1778 = __ldaxr(v1777);
                while (__stlxr(v1778 - 1, v1777));
                if (!v1778)
                {
                  ((void (*)(std::__shared_weak_count *))v1776->__on_zero_shared)(v1776);
                  std::__shared_weak_count::__release_weak(v1776);
                }
              }
              MEMORY[0x212BC6398](v1772, 0x10F0C40B62ED6C6);
              v1779 = v1952;
              *(_QWORD *)&v1952 = 0;
              if (v1779)
              {
                v1780 = *(std::__shared_weak_count **)(v1779 + 32);
                if (v1780)
                {
                  v1781 = (unint64_t *)&v1780->__shared_owners_;
                  do
                    v1782 = __ldaxr(v1781);
                  while (__stlxr(v1782 - 1, v1781));
                  if (!v1782)
                  {
                    ((void (*)(std::__shared_weak_count *))v1780->__on_zero_shared)(v1780);
                    std::__shared_weak_count::__release_weak(v1780);
                  }
                }
                v1783 = *(std::__shared_weak_count **)(v1779 + 16);
                if (v1783)
                {
                  v1784 = (unint64_t *)&v1783->__shared_owners_;
                  do
                    v1785 = __ldaxr(v1784);
                  while (__stlxr(v1785 - 1, v1784));
                  if (!v1785)
                  {
                    ((void (*)(std::__shared_weak_count *))v1783->__on_zero_shared)(v1783);
                    std::__shared_weak_count::__release_weak(v1783);
                  }
                }
                MEMORY[0x212BC6398](v1779, 0x10F0C40B62ED6C6);
              }
            }
            v1786 = (std::__shared_weak_count *)v1909[4];
            if (v1909[4])
            {
              v1787 = (unint64_t *)&v1909[4][1];
              do
                v1788 = __ldaxr(v1787);
              while (__stlxr(v1788 - 1, v1787));
              if (!v1788)
              {
                ((void (*)(std::__shared_weak_count *))v1786->__on_zero_shared)(v1786);
                std::__shared_weak_count::__release_weak(v1786);
              }
            }
            v1789 = (std::__shared_weak_count *)v1909[2];
            if (v1909[2])
            {
              v1790 = (unint64_t *)&v1909[2][1];
              do
                v1791 = __ldaxr(v1790);
              while (__stlxr(v1791 - 1, v1790));
              if (!v1791)
              {
                ((void (*)(std::__shared_weak_count *))v1789->__on_zero_shared)(v1789);
                std::__shared_weak_count::__release_weak(v1789);
              }
            }
          }
          else
          {
            os_log_type_enabled(v1760, OS_LOG_TYPE_DEBUG);
            LOWORD(v1909[0]) = 0;
            v1792 = (void *)_os_log_send_and_compose_impl();
            if (v1792)
              free(v1792);
          }
          if (v113)
          {
            sub_20E8C003C((uint64_t)object, "Ignore the gyro scale update.");
            sub_20E863570((uint64_t)object);
          }
          sub_20E863570((uint64_t)object);
          v1793 = v1899;
          if (v1899)
          {
            v1794 = (unint64_t *)&v1899->__shared_owners_;
            do
              v1795 = __ldaxr(v1794);
            while (__stlxr(v1795 - 1, v1794));
            if (!v1795)
            {
              ((void (*)(std::__shared_weak_count *))v1793->__on_zero_shared)(v1793);
              std::__shared_weak_count::__release_weak(v1793);
            }
          }
          goto LABEL_184;
        }
      }
      memmove(v1749, v1748, v1747);
      goto LABEL_1946;
    }
    v120 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 64);
    v121 = *v27;
    *(_QWORD *)(v120 + 128) = *(_QWORD *)(a1 + 12504);
    *(_OWORD *)(v120 + 112) = v121;
    v122 = *(char **)(a1 + 8216);
    v123 = *v122;
    v124 = 8;
    if (!*v122)
      v124 = 16;
    if (*(_QWORD *)&v122[v124])
    {
      v1909[1] = (os_log_t)(v122 + 8);
      v1909[2] = (os_log_t)(v122 + 16);
      v125 = 1;
    }
    else
    {
      v123 = 0;
      v125 = 0;
    }
    LOBYTE(v1909[0]) = v123;
    LOBYTE(v1909[3]) = v125;
    LODWORD(object[0]) = 5;
    sub_20FB43148((uint64_t)v1909, (unsigned int *)object);
    *(_BYTE *)(a1 + 12456) = 1;
    *(_BYTE *)(a1 + 7688) = 0;
  }
  else
  {
    v126 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 64);
    v127 = *v27;
    *(_QWORD *)(v126 + 128) = *(_QWORD *)(a1 + 12504);
    *(_OWORD *)(v126 + 112) = v127;
    v128 = *(char **)(a1 + 8216);
    v129 = *v128;
    v130 = 8;
    if (!*v128)
      v130 = 16;
    if (*(_QWORD *)&v128[v130])
    {
      v1909[1] = (os_log_t)(v128 + 8);
      v1909[2] = (os_log_t)(v128 + 16);
      v131 = 1;
    }
    else
    {
      v129 = 0;
      v131 = 0;
    }
    LOBYTE(v1909[0]) = v129;
    LOBYTE(v1909[3]) = v131;
    LODWORD(object[0]) = 5;
    sub_20FB43148((uint64_t)v1909, (unsigned int *)object);
  }
LABEL_184:
  v1833 = (_BYTE *)(a1 + 11664);
  if (*(_BYTE *)(a1 + 11664))
  {
    v132 = a1;
    v133 = *(_QWORD *)(a1 + 2488);
    if (*(_DWORD *)(v133 - 4) != *(_DWORD *)(a1 + 11668))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1501, (uint64_t)"estimate_.state_ids.back() == bad_geometry_in_last_frame_.second", 64, (uint64_t)"Inconsistent bad geoemtry frame ID", 34, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2067;
      }
      v132 = a1;
      v133 = *(_QWORD *)(a1 + 2488);
    }
    *(_QWORD *)(v132 + 2488) = v133 - 4;
    *(_QWORD *)(v132 + 2864) -= 4;
    *(_QWORD *)(v132 + 2888) -= 8;
    *(_QWORD *)(v132 + 2912) -= 8;
    *(_QWORD *)(v132 + 2936) -= 40;
    *(_QWORD *)(v132 + 2808) -= 32;
    v134 = (uint64_t *)(v132 + 7776);
    v135 = *(_QWORD *)(v132 + 7808);
    if (v135)
    {
      v136 = *v134;
    }
    else
    {
      v136 = *(_QWORD *)(v132 + 7776);
      v135 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v132 + 7784) - v136) >> 3);
    }
    v138 = v136 + 56 * v135;
    v139 = *(_QWORD *)(v138 - 56);
    *(_OWORD *)v1909 = *(_OWORD *)(v138 - 24);
    v140 = *(_OWORD *)v1909;
    v1909[2] = *(os_log_t *)(v138 - 8);
    v141 = v1909[2];
    v142 = *(unsigned __int8 *)(a1 + 7944);
    v143 = *(_QWORD *)(v138 - 32);
    *(_OWORD *)(v132 + 7896) = *(_OWORD *)(v138 - 48);
    *(_QWORD *)(v132 + 7912) = v143;
    *(_OWORD *)(v132 + 7920) = v140;
    *(_QWORD *)(v132 + 7936) = v141;
    v137 = v1859;
    if (!v142)
      *(_BYTE *)(a1 + 7944) = 1;
    *(_QWORD *)(v132 + 7888) = v139;
    sub_20FDBA438((uint64_t)v134, 1);
  }
  else
  {
    v137 = v1859;
  }
  kdebug_trace();
  v144 = a1;
  v145 = *(char **)(a1 + 2864);
  v146 = *(_QWORD *)(a1 + 2856);
  v147 = ((*(_QWORD *)(v137 + 304) - *(_QWORD *)(v137 + 296)) >> 2) + ((unint64_t)&v145[-v146] >> 2);
  v148 = *(_DWORD *)(a1 + 1936);
  v149 = v147 - v148;
  if (v147 > v148)
  {
    v150 = (_BYTE *)(v146 + 4 * v149);
    v151 = v145 - v150;
    if (v151)
      memmove(*(void **)(a1 + 2856), v150, v151);
    v145 = (char *)(v146 + v151);
    v144 = a1;
    *(_QWORD *)(a1 + 2864) = v145;
    if (v147 != v148)
    {
      v152 = *(_QWORD *)(a1 + 2880);
      v153 = (_BYTE *)(v152 + 8 * v149);
      v154 = *(_BYTE **)(a1 + 2888);
      v155 = v154 - v153;
      if (v154 != v153)
        memmove(*(void **)(a1 + 2880), v153, v154 - v153);
      *(_QWORD *)(a1 + 2888) = v152 + v155;
      v156 = *(_QWORD *)(a1 + 2904);
      v157 = (_BYTE *)(v156 + 8 * v149);
      v158 = *(_BYTE **)(a1 + 2912);
      v159 = v158 - v157;
      if (v158 != v157)
        memmove(*(void **)(a1 + 2904), v157, v158 - v157);
      *(_QWORD *)(a1 + 2912) = v156 + v159;
      v160 = *(_QWORD *)(a1 + 2928);
      v161 = (_BYTE *)(v160 + 40 * v149);
      v162 = *(_BYTE **)(a1 + 2936);
      v163 = v162 - v161;
      if (v162 != v161)
        memmove(*(void **)(a1 + 2928), v161, v162 - v161);
      *(_QWORD *)(a1 + 2936) = v160 + v163;
      v164 = *(_QWORD *)(a1 + 2800);
      v165 = (_BYTE *)(v164 + 32 * v149);
      v166 = *(_BYTE **)(a1 + 2808);
      v167 = v166 - v165;
      if (v166 != v165)
        memmove(*(void **)(a1 + 2800), v165, v167 - 4);
      v144 = a1;
      *(_QWORD *)(a1 + 2808) = v164 + v167;
      v145 = *(char **)(a1 + 2864);
    }
  }
  v1832 = (unint64_t *)(v144 + 2856);
  v169 = *(char **)(v137 + 296);
  v168 = *(char **)(v137 + 304);
  v170 = v168 - v169;
  if (v168 - v169 >= 1)
  {
    v171 = v170 >> 2;
    v172 = *v1832;
    v173 = (uint64_t)&v145[-*v1832];
    v174 = v173 >> 2;
    v175 = (char *)(*v1832 + (v173 & 0xFFFFFFFFFFFFFFFCLL));
    v176 = *(_QWORD *)(v144 + 2872);
    if (v170 >> 2 > (v176 - (uint64_t)v145) >> 2)
    {
      v177 = v174 + v171;
      if ((unint64_t)(v174 + v171) >> 62)
        sub_20EABADD4();
      v178 = v176 - v172;
      if (v178 >> 1 > v177)
        v177 = v178 >> 1;
      if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
        v179 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v179 = v177;
      if (v179)
      {
        if (v179 >> 62)
          goto LABEL_2072;
        v180 = operator new(4 * v179);
        v174 = v173 >> 2;
        v181 = (uint64_t)&v180[4 * (v173 >> 2)];
        v182 = (char *)(v181 + 4 * v171);
        v183 = v170 - 4;
        if ((unint64_t)(v170 - 4) < 0x1C)
          goto LABEL_219;
      }
      else
      {
        v180 = 0;
        v181 = 4 * v174;
        v182 = (char *)(4 * v174 + 4 * v171);
        v183 = v170 - 4;
        if ((unint64_t)(v170 - 4) < 0x1C)
        {
LABEL_219:
          v184 = (char *)v181;
          goto LABEL_236;
        }
      }
      v184 = (char *)v181;
      if ((unint64_t)(&v180[v173 & 0xFFFFFFFFFFFFFFFCLL] - v169) >= 0x20)
      {
        v197 = (v183 >> 2) + 1;
        v198 = 4 * (v197 & 0x7FFFFFFFFFFFFFF8);
        v184 = (char *)(v181 + v198);
        v199 = &v169[v198];
        v200 = (__int128 *)(v169 + 16);
        v201 = &v180[4 * v174 + 16];
        v202 = v197 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v203 = *v200;
          *(v201 - 1) = *(v200 - 1);
          *v201 = v203;
          v200 += 2;
          v201 += 2;
          v202 -= 8;
        }
        while (v202);
        v169 = v199;
        if (v197 == (v197 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_237:
          if ((char *)v172 != v145)
          {
            if ((unint64_t)(v173 - 4) >= 0x3C)
            {
              v205 = v175;
              if ((v173 & 0xFFFFFFFFFFFFFFFCLL) + v172 - (unint64_t)&v180[v173 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                v206 = ((unint64_t)(v173 - 4) >> 2) + 1;
                v207 = 4 * (v206 & 0x7FFFFFFFFFFFFFF8);
                v205 = &v175[-v207];
                v181 -= v207;
                v208 = 4 * v174 - 16;
                v209 = &v180[v208];
                v210 = (__int128 *)(v172 + v208);
                v211 = v206 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v212 = *v210;
                  *(v209 - 1) = *(v210 - 1);
                  *v209 = v212;
                  v209 -= 2;
                  v210 -= 2;
                  v211 -= 8;
                }
                while (v211);
                if (v206 == (v206 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_245;
              }
            }
            else
            {
              v205 = v175;
            }
            do
            {
              v213 = *((_DWORD *)v205 - 1);
              v205 -= 4;
              *(_DWORD *)(v181 - 4) = v213;
              v181 -= 4;
            }
            while (v205 != (char *)v172);
          }
LABEL_245:
          v214 = &v180[4 * v179];
          if (v145 != v175)
            memmove(v182, v175, v145 - v175);
          v215 = &v182[v145 - v175];
          v144 = a1;
          *(_QWORD *)(a1 + 2856) = v181;
          *(_QWORD *)(a1 + 2864) = v215;
          *(_QWORD *)(a1 + 2872) = v214;
          if (v172)
            operator delete((void *)v172);
          goto LABEL_258;
        }
      }
      do
      {
LABEL_236:
        v204 = *(_DWORD *)v169;
        v169 += 4;
        *(_DWORD *)v184 = v204;
        v184 += 4;
      }
      while (v184 != v182);
      goto LABEL_237;
    }
    v185 = (v145 - v175) >> 2;
    if (v185 >= v171)
    {
      v186 = &v169[4 * v171];
      v188 = v145;
    }
    else
    {
      v186 = &v169[4 * v185];
      v187 = v168 - v186;
      if (v168 != v186)
      {
        memmove(v145, &v169[4 * v185], v168 - v186);
        v174 = v173 >> 2;
      }
      v188 = &v145[v187];
      v144 = a1;
      *(_QWORD *)(a1 + 2864) = &v145[v187];
      if (v145 - v175 < 1)
        goto LABEL_258;
    }
    v189 = &v175[4 * v171];
    v190 = v188 - v189;
    v191 = (v188 - v189) >> 2;
    v192 = &v188[-4 * v171];
    v193 = v188;
    if (v192 < v145)
    {
      v194 = (v173 & 0xFFFFFFFFFFFFFFFCLL) + v190;
      v195 = v194 + v172 + 4;
      if ((unint64_t)v145 > v195)
        v195 = (unint64_t)v145;
      v196 = v195 + ~v172 - v194;
      if (v196 >= 0x2C)
      {
        v193 = v188;
        if ((unint64_t)&v189[-(v173 & 0xFFFFFFFFFFFFFFFCLL) - v172] >= 0x20)
        {
          v216 = (v196 >> 2) + 1;
          v217 = 4 * (v216 & 0x7FFFFFFFFFFFFFF8);
          v192 += v217;
          v193 = &v188[v217];
          v218 = v188 + 16;
          v219 = (__int128 *)(4 * v191 + 4 * v174 + v172 + 16);
          v220 = v216 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v221 = *v219;
            *(v218 - 1) = *(v219 - 1);
            *v218 = v221;
            v218 += 2;
            v219 += 2;
            v220 -= 8;
          }
          while (v220);
          if (v216 == (v216 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_254;
        }
      }
      else
      {
        v193 = v188;
      }
      do
      {
        v222 = *(_DWORD *)v192;
        v192 += 4;
        *(_DWORD *)v193 = v222;
        v193 += 4;
      }
      while (v192 < v145);
    }
LABEL_254:
    *(_QWORD *)(a1 + 2864) = v193;
    if (v188 != v189)
      memmove(&v188[-4 * v191], v175, v190);
    v144 = a1;
    if (v186 != v169)
      memmove(v175, v169, v186 - v169);
  }
LABEL_258:
  sub_20EB21730((unint64_t *)(v144 + 2880), *(void **)(v144 + 2888), *(char **)(v1859 + 320), *(char **)(v1859 + 328), (uint64_t)(*(_QWORD *)(v1859 + 328) - *(_QWORD *)(v1859 + 320)) >> 3);
  sub_20EB21730((unint64_t *)(a1 + 2904), *(void **)(a1 + 2912), *(char **)(v1859 + 344), *(char **)(v1859 + 352), (uint64_t)(*(_QWORD *)(v1859 + 352) - *(_QWORD *)(v1859 + 344)) >> 3);
  v223 = a1;
  v1831 = a1 + 2928;
  v225 = *(char **)(v1859 + 368);
  v224 = *(char **)(v1859 + 376);
  if (v224 - v225 < 1)
    goto LABEL_293;
  v226 = *(_BYTE **)(a1 + 2936);
  v227 = (v224 - v225) / 40;
  v228 = *(_QWORD *)(a1 + 2928);
  v229 = (uint64_t)&v226[-v228] / 40;
  v230 = (char *)(v228 + 40 * v229);
  v231 = *(_QWORD *)(a1 + 2944);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v231 - (uint64_t)v226) >> 3)) < v227)
  {
    v232 = v229 + v227;
    if ((unint64_t)(v229 + v227) > 0x666666666666666)
      sub_20E867F44();
    v233 = 0xCCCCCCCCCCCCCCCDLL * ((v231 - v228) >> 3);
    if (2 * v233 > v232)
      v232 = 2 * v233;
    if (v233 >= 0x333333333333333)
      v234 = 0x666666666666666;
    else
      v234 = v232;
    if (v234)
    {
      if (v234 > 0x666666666666666)
        goto LABEL_2072;
      v235 = (char *)operator new(40 * v234);
    }
    else
    {
      v235 = 0;
    }
    v244 = &v235[40 * v229];
    v245 = 40 * v227;
    v246 = &v244[40 * v227];
    v247 = v244;
    do
    {
      v248 = *(_OWORD *)v225;
      v249 = *((_OWORD *)v225 + 1);
      *((_QWORD *)v247 + 4) = *((_QWORD *)v225 + 4);
      *(_OWORD *)v247 = v248;
      *((_OWORD *)v247 + 1) = v249;
      v247 += 40;
      v225 += 40;
      v245 -= 40;
    }
    while (v245);
    if ((unint64_t)&v226[-v228 + 39] >= 0x4F)
    {
      v250 = 40 * v229;
      v251 = v228 - 40;
      do
      {
        v252 = &v235[v250];
        v253 = *(_OWORD *)(v251 + v250);
        v254 = *(_OWORD *)(v251 + v250 + 16);
        *((_QWORD *)v252 - 1) = *(_QWORD *)(v251 + v250 + 32);
        *(_OWORD *)(v252 - 24) = v254;
        *(_OWORD *)(v252 - 40) = v253;
        v250 -= 40;
      }
      while (v250);
      v226 = *(_BYTE **)(a1 + 2936);
      v244 = v235;
    }
    v255 = &v235[40 * v234];
    if (v226 != v230)
      memmove(v246, (const void *)(v228 + 40 * v229), v226 - v230);
    v223 = a1;
    v256 = *(void **)(a1 + 2928);
    *(_QWORD *)(a1 + 2928) = v244;
    *(_QWORD *)(a1 + 2936) = &v246[v226 - v230];
    *(_QWORD *)(a1 + 2944) = v255;
    if (v256)
      operator delete(v256);
    goto LABEL_293;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v226 - v230) >> 3)) >= v227)
  {
    v236 = &v225[40 * v227];
    v238 = *(char **)(a1 + 2936);
LABEL_275:
    v239 = &v230[40 * v227];
    v240 = (unint64_t)&v238[-40 * v227];
    v241 = v238;
    if (v240 < (unint64_t)v226)
    {
      v241 = v238;
      do
      {
        v242 = *(_OWORD *)v240;
        v243 = *(_OWORD *)(v240 + 16);
        *((_QWORD *)v241 + 4) = *(_QWORD *)(v240 + 32);
        *(_OWORD *)v241 = v242;
        *((_OWORD *)v241 + 1) = v243;
        v240 += 40;
        v241 += 40;
      }
      while (v240 < (unint64_t)v226);
    }
    *(_QWORD *)(a1 + 2936) = v241;
    if (v238 != v239)
      memmove(&v230[40 * v227], v230, v238 - v239);
    v223 = a1;
    if (v236 != v225)
      memmove(v230, v225, v236 - v225);
    goto LABEL_293;
  }
  v236 = &v225[8 * ((v226 - v230) >> 3)];
  v237 = v224 - v236;
  if (v224 != v236)
    memmove(*(void **)(a1 + 2936), &v225[8 * ((v226 - v230) >> 3)], v224 - v236);
  v238 = &v226[v237];
  v223 = a1;
  *(_QWORD *)(a1 + 2936) = &v226[v237];
  if (v226 - v230 >= 1)
    goto LABEL_275;
LABEL_293:
  v257 = **(_QWORD **)(v1859 + 48);
  if (v223 + 2952 != v257 + 496)
    sub_20F0E80A4((_QWORD *)(v223 + 2952), *(char **)(v257 + 496), *(char **)(v257 + 504), (uint64_t)(*(_QWORD *)(v257 + 504) - *(_QWORD *)(v257 + 496)) >> 2);
  v258 = **(_QWORD **)(v1859 + 72);
  if (a1 + 2976 != v258 + 496)
    sub_20F0E80A4((_QWORD *)(a1 + 2976), *(char **)(v258 + 496), *(char **)(v258 + 504), (uint64_t)(*(_QWORD *)(v258 + 504) - *(_QWORD *)(v258 + 496)) >> 2);
  sub_20F87364C(a1, v1859, a3);
  v259 = *(char **)(a1 + 2800);
  v260 = *(char **)(a1 + 2808);
  if (v259 == v260)
  {
    v263 = *(_BYTE **)(a1 + 2800);
    v265 = *(char **)(v1859 + 240);
    v264 = *(char **)(v1859 + 248);
    v266 = v264 - v265;
    if (v264 - v265 < 1)
      goto LABEL_335;
  }
  else
  {
    v261 = *(__int128 **)(v1859 + 240);
    v262 = *v261;
    *(_OWORD *)(v260 - 20) = *(__int128 *)((char *)v261 + 12);
    *((_OWORD *)v260 - 2) = v262;
    v259 = *(char **)(a1 + 2808);
    v263 = *(_BYTE **)(a1 + 2800);
    v265 = *(char **)(v1859 + 240);
    v264 = *(char **)(v1859 + 248);
    v266 = v264 - v265;
    if (v264 - v265 < 1)
      goto LABEL_335;
  }
  v267 = v266 >> 5;
  v268 = v259 - v263;
  v269 = &v263[(v259 - v263) & 0xFFFFFFFFFFFFFFE0];
  v270 = *(_QWORD *)(a1 + 2816);
  if (v267 > (v270 - (uint64_t)v259) >> 5)
  {
    v271 = v268 >> 5;
    v272 = (v268 >> 5) + v267;
    if (v272 >> 59)
      sub_20E867F44();
    v273 = v270 - (_QWORD)v263;
    if (v273 >> 4 > v272)
      v272 = v273 >> 4;
    if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFE0)
      v274 = 0x7FFFFFFFFFFFFFFLL;
    else
      v274 = v272;
    if (!v274)
    {
      v275 = 0;
LABEL_325:
      v285 = &v275[32 * v271];
      v286 = 32 * v267;
      v287 = &v285[32 * v267];
      v288 = v285;
      do
      {
        v289 = *(_OWORD *)v265;
        v290 = *((_OWORD *)v265 + 1);
        v265 += 32;
        *(_OWORD *)v288 = v289;
        *((_OWORD *)v288 + 1) = v290;
        v288 += 32;
        v286 -= 32;
      }
      while (v286);
      if (v259 != v263)
      {
        v291 = 32 * v271;
        v292 = v263 - 32;
        do
        {
          v293 = &v275[v291];
          v294 = *(_OWORD *)&v292[v291];
          *(_OWORD *)(v293 - 20) = *(_OWORD *)&v292[v291 + 12];
          *((_OWORD *)v293 - 2) = v294;
          v291 -= 32;
        }
        while (v291);
        v259 = *(char **)(a1 + 2808);
        v285 = v275;
      }
      v295 = &v275[32 * v274];
      v296 = v259 - v269;
      if (v259 != v269)
        memmove(v287, v269, v296 - 4);
      v297 = *(void **)(a1 + 2800);
      *(_QWORD *)(a1 + 2800) = v285;
      *(_QWORD *)(a1 + 2808) = &v287[v296];
      *(_QWORD *)(a1 + 2816) = v295;
      if (v297)
        operator delete(v297);
      goto LABEL_335;
    }
    if (!(v274 >> 59))
    {
      v275 = (char *)operator new(32 * v274);
      goto LABEL_325;
    }
LABEL_2072:
    sub_20E877A38();
  }
  v276 = (v259 - v269) >> 5;
  if (v276 >= v267)
  {
    v277 = &v265[32 * v267];
    v279 = v259;
    v280 = &v269[32 * v267];
    v281 = &v259[-32 * v267];
    v282 = v259;
    if (v281 >= v259)
    {
LABEL_320:
      *(_QWORD *)(a1 + 2808) = v282;
      if (v279 != v280)
        memmove(&v279[-32 * ((v279 - v280) >> 5)], v269, v279 - v280 - 4);
      if (v277 != v265)
        memmove(v269, v265, v277 - v265 - 4);
      goto LABEL_335;
    }
LABEL_318:
    v282 = v279;
    do
    {
      v283 = *(_OWORD *)v281;
      v284 = *((_OWORD *)v281 + 1);
      v281 += 32;
      *(_OWORD *)v282 = v283;
      *((_OWORD *)v282 + 1) = v284;
      v282 += 32;
    }
    while (v281 < v259);
    goto LABEL_320;
  }
  v277 = &v265[32 * v276];
  v278 = v264 - v277;
  if (v264 != v277)
    memmove(v259, &v265[32 * v276], v278 - 4);
  v279 = &v259[v278];
  *(_QWORD *)(a1 + 2808) = &v259[v278];
  if (v259 - v269 >= 1)
  {
    v280 = &v269[32 * v267];
    v281 = &v279[-32 * v267];
    v282 = &v259[v278];
    if (v281 >= v259)
      goto LABEL_320;
    goto LABEL_318;
  }
LABEL_335:
  if (*v1833 && (v298 = *(_QWORD *)(a1 + 8216), *(_BYTE *)(v298 + 28)) && !*(_BYTE *)(v298 + 1720))
  {
    if (*(_BYTE *)v298)
    {
      v300 = *(_QWORD *)(v298 + 1704);
      *(_QWORD *)(v298 + 1704) = *(_QWORD *)(v298 + 8);
      *(_QWORD *)(v298 + 8) = v300;
      if (v300)
        sub_20FC07BB0(v300);
    }
    else
    {
      v301 = *(_QWORD *)(v298 + 1712);
      *(_QWORD *)(v298 + 1712) = *(_QWORD *)(v298 + 16);
      *(_QWORD *)(v298 + 16) = v301;
      if (v301)
        sub_20FC090CC(v301);
    }
    *(_BYTE *)(v298 + 1720) = 1;
    v299 = a1;
    if (*(_QWORD *)(a1 + 7952))
    {
LABEL_339:
      if (!*(_BYTE *)(v299 + 1195))
        goto LABEL_563;
      goto LABEL_554;
    }
  }
  else
  {
    v299 = a1;
    if (*(_QWORD *)(a1 + 7952))
      goto LABEL_339;
  }
  memset(__dst, 0, 24);
  v302 = *(_QWORD *)(v299 + 3064);
  v303 = *(_QWORD *)(v299 + 3056);
  v304 = (v302 - v303) >> 5;
  sub_20EA89AFC((uint64_t)__dst, v304);
  if (v302 != v303)
  {
    v305 = 0;
    v306 = 1;
    while ((unint64_t)(0x4EC4EC4EC4EC4EC5
                             * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 3056) + 32 * v305 + 16)
                                        - *(_QWORD *)(*(_QWORD *)(a1 + 3056) + 32 * v305 + 8)) >> 7)) < 3
         || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 589, (uint64_t)"camera_set_models[i].vision_models.size() <= 2", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v307 = *((_QWORD *)&__dst[0] + 1);
      if (*((_QWORD *)&__dst[0] + 1) >= *(_QWORD *)&__dst[1])
      {
        v308 = sub_20FB409B0((void **)__dst);
      }
      else
      {
        **((_OWORD **)&__dst[0] + 1) = 0u;
        *(_OWORD *)(v307 + 16) = 0u;
        v308 = (_OWORD *)(v307 + 32);
      }
      *((_QWORD *)&__dst[0] + 1) = v308;
      v309 = *(_QWORD *)(a1 + 3056);
      v310 = *(_DWORD *)(v309 + 32 * v305);
      if (v310 >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        v308 = (_OWORD *)*((_QWORD *)&__dst[0] + 1);
        v309 = *(_QWORD *)(a1 + 3056);
      }
      *((_DWORD *)v308 - 8) = v310 << 16;
      sub_20EB81E74((uint64_t)v1909, *(_QWORD *)(v309 + 32 * v305 + 8));
      sub_20FB40B10((uint64_t *)(*((_QWORD *)&__dst[0] + 1) - 24), (uint64_t)v1909, (uint64_t)oslog);
      sub_20EB8188C((uint64_t)v1909);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 3056) + 32 * v305 + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 3056) + 32 * v305 + 8) == 3328)
      {
        v311 = *((_QWORD *)&__dst[0] + 1);
        if (*((_QWORD *)&__dst[0] + 1) >= *(_QWORD *)&__dst[1])
        {
          v312 = sub_20FB409B0((void **)__dst);
        }
        else
        {
          **((_OWORD **)&__dst[0] + 1) = 0u;
          *(_OWORD *)(v311 + 16) = 0u;
          v312 = (_OWORD *)(v311 + 32);
        }
        *((_QWORD *)&__dst[0] + 1) = v312;
        v313 = *(_QWORD *)(a1 + 3056);
        v314 = *(_DWORD *)(v313 + 32 * v305);
        if (v314 >= 0x10000)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
            break;
          }
          v312 = (_OWORD *)*((_QWORD *)&__dst[0] + 1);
          v313 = *(_QWORD *)(a1 + 3056);
        }
        *((_DWORD *)v312 - 8) = (v314 << 16) | 1;
        sub_20EB81E74((uint64_t)v1909, *(_QWORD *)(v313 + 32 * v305 + 8) + 1664);
        sub_20FB40B10((uint64_t *)(*((_QWORD *)&__dst[0] + 1) - 24), (uint64_t)v1909, (uint64_t)oslog);
        sub_20EB8188C((uint64_t)v1909);
      }
      v305 = v306++;
      if (v304 <= v305)
        goto LABEL_368;
    }
LABEL_2065:
    abort();
  }
LABEL_368:
  v315 = operator new(0x80uLL);
  v315[1] = 0;
  v315[2] = 0;
  *v315 = &off_24CA04740;
  v316 = operator new();
  v317 = v315 + 3;
  bzero((void *)v316, 0x720uLL);
  *(_QWORD *)(v316 + 24) = v316 + 32;
  *(_QWORD *)(v316 + 56) = 0;
  *(_QWORD *)(v316 + 64) = 0;
  *(_QWORD *)(v316 + 48) = v316 + 56;
  *(_OWORD *)(v316 + 112) = 0u;
  *(_OWORD *)(v316 + 128) = 0u;
  *(_OWORD *)(v316 + 144) = 0u;
  *(_OWORD *)(v316 + 88) = 0u;
  *(_OWORD *)(v316 + 72) = 0u;
  *(_QWORD *)(v316 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 136) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 160) = 0;
  *(_QWORD *)(v316 + 168) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 176) = 0;
  *(_QWORD *)(v316 + 184) = 0;
  *(_OWORD *)(v316 + 208) = 0u;
  *(_OWORD *)(v316 + 224) = 0u;
  *(_OWORD *)(v316 + 240) = 0u;
  *(_QWORD *)(v316 + 192) = 0;
  *(_QWORD *)(v316 + 200) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 232) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 256) = 0;
  *(_QWORD *)(v316 + 264) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 272) = 0;
  *(_QWORD *)(v316 + 280) = 0;
  *(_QWORD *)(v316 + 304) = 0;
  *(_QWORD *)(v316 + 312) = 0;
  *(_QWORD *)(v316 + 288) = 0;
  *(_QWORD *)(v316 + 296) = v316 + 304;
  *(_OWORD *)(v316 + 320) = 0u;
  *(_OWORD *)(v316 + 336) = 0u;
  *(_DWORD *)(v316 + 352) = 1065353216;
  *(_OWORD *)(v316 + 360) = 0u;
  *(_OWORD *)(v316 + 376) = 0u;
  *(_DWORD *)(v316 + 392) = 1065353216;
  *(_OWORD *)(v316 + 400) = 0u;
  *(_OWORD *)(v316 + 416) = 0u;
  *(_DWORD *)(v316 + 432) = 1065353216;
  *(_QWORD *)(v316 + 792) = 0;
  *(_QWORD *)(v316 + 784) = 0;
  *(_BYTE *)(v316 + 808) = 0;
  *(_QWORD *)(v316 + 800) = 0;
  *(_OWORD *)(v316 + 1680) = 0u;
  *(_QWORD *)(v316 + 1712) = 0;
  *(_OWORD *)(v316 + 1696) = 0u;
  *(_OWORD *)(v316 + 1664) = 0u;
  *(_QWORD *)(v316 + 1656) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 1688) = 0x3FF0000000000000;
  *(_QWORD *)(v316 + 1720) = 0x3FF0000000000000;
  *(_BYTE *)(v316 + 1752) = 0;
  *(_QWORD *)(v316 + 1744) = 0;
  *(_QWORD *)(v316 + 1728) = 0;
  *(_QWORD *)(v316 + 1736) = 0;
  *(_QWORD *)(v316 + 1776) = 0;
  *(_QWORD *)(v316 + 1768) = 0;
  *(_QWORD *)(v316 + 1760) = v316 + 1768;
  *(_OWORD *)(v316 + 1784) = 0u;
  *(_OWORD *)(v316 + 1800) = 0u;
  *(_DWORD *)(v316 + 1816) = 1065353216;
  v315[3] = v316;
  v318 = (_QWORD *)operator new();
  v318[2] = 0;
  v318[1] = 0;
  *v318 = v318 + 1;
  sub_20FB44854((uint64_t)(v318 + 3));
  v318[9] = 0;
  v318[10] = 0;
  v318[8] = 1000;
  v319 = *(_QWORD *)(a1 + 12384);
  v320 = *(_QWORD *)(a1 + 12392);
  if (v320)
  {
    v321 = (unint64_t *)(v320 + 8);
    do
      v322 = __ldxr(v321);
    while (__stxr(v322 + 1, v321));
    v323 = (std::__shared_weak_count *)v318[10];
    v318[9] = v319;
    v318[10] = v320;
    if (v323)
    {
      v324 = (unint64_t *)&v323->__shared_owners_;
      do
        v325 = __ldaxr(v324);
      while (__stlxr(v325 - 1, v324));
      if (!v325)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
  }
  else
  {
    v318[9] = v319;
    v318[10] = 0;
  }
  v315[4] = v318;
  v326 = operator new();
  *(_QWORD *)v326 = &unk_2102DAFF0;
  *(_OWORD *)(v326 + 8) = 0u;
  *(_OWORD *)(v326 + 24) = 0u;
  v315[5] = v326;
  v327 = operator new();
  *(_QWORD *)v327 = &unk_2102DAFF0;
  *(_OWORD *)(v327 + 8) = 0u;
  *(_OWORD *)(v327 + 24) = 0u;
  v315[6] = v327;
  v328 = operator new();
  *(_QWORD *)v328 = &unk_2102DAFF0;
  *(_OWORD *)(v328 + 8) = 0u;
  *(_OWORD *)(v328 + 24) = 0u;
  v315[8] = 0;
  v315[7] = v328;
  v315[9] = 0;
  v315[10] = 0;
  v329 = operator new();
  v330 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)v329 = v330;
  *(int64x2_t *)(v329 + 16) = v330;
  *(int64x2_t *)(v329 + 32) = v330;
  *(_OWORD *)(v329 + 48) = xmmword_2102DB700;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v329 + 64) = _Q0;
  *(_QWORD *)(v329 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v329 + 88) = 0;
  *(_QWORD *)(v329 + 96) = 0;
  *(_QWORD *)(v329 + 104) = 0;
  *(_OWORD *)(v329 + 112) = _Q0;
  *(_QWORD *)(v329 + 128) = 0x3FF0000000000000;
  *(_OWORD *)(v329 + 152) = 0u;
  *(_OWORD *)(v329 + 184) = 0u;
  *(_OWORD *)(v329 + 136) = 0u;
  *(_OWORD *)(v329 + 168) = 0u;
  *(_OWORD *)(v329 + 200) = 0u;
  *(_QWORD *)(v329 + 216) = 0;
  *(_QWORD *)(v329 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(v329 + 192) = 0x3FF0000000000000;
  *(_OWORD *)(v329 + 256) = 0u;
  *(_OWORD *)(v329 + 272) = 0u;
  *(_OWORD *)(v329 + 224) = _Q0;
  *(_OWORD *)(v329 + 240) = 0u;
  *(_QWORD *)(v329 + 264) = 0x3FF0000000000000;
  *(_QWORD *)(v329 + 288) = 0;
  *(_QWORD *)(v329 + 296) = 0x3FF0000000000000;
  v315[11] = v329;
  v335 = (_OWORD *)operator new();
  v335[5] = 0u;
  v335[6] = 0u;
  v335[3] = 0u;
  v335[4] = 0u;
  v335[1] = 0u;
  v335[2] = 0u;
  *v335 = 0u;
  v315[12] = v335;
  v315[13] = 0;
  v315[14] = 0;
  v315[15] = 0;
  *(_QWORD *)&v1959 = v315 + 3;
  *((_QWORD *)&v1959 + 1) = v315;
  v336 = v315[11];
  v337 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v336 = *(_OWORD *)a1;
  *(_OWORD *)(v336 + 16) = v337;
  v338 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v336 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v336 + 48) = v338;
  *(_QWORD *)(v336 + 56) = *(_QWORD *)(a1 + 56);
  v339 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v336 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v336 + 64) = v339;
  v340 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v336 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(v336 + 104) = v340;
  v341 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(v336 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v336 + 128) = v341;
  v342 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v336 + 136) = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(v336 + 152) = v342;
  *(_OWORD *)(v336 + 160) = *(_OWORD *)(a1 + 160);
  v344 = *(_OWORD *)(a1 + 192);
  v343 = *(_OWORD *)(a1 + 208);
  v345 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(v336 + 224) = *(_QWORD *)(a1 + 224);
  *(_OWORD *)(v336 + 192) = v344;
  *(_OWORD *)(v336 + 208) = v343;
  *(_OWORD *)(v336 + 176) = v345;
  v346 = *(_OWORD *)(a1 + 264);
  v347 = *(_OWORD *)(a1 + 280);
  v348 = *(_OWORD *)(a1 + 248);
  *(_QWORD *)(v336 + 296) = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(v336 + 248) = v348;
  *(_OWORD *)(v336 + 264) = v346;
  *(_OWORD *)(v336 + 280) = v347;
  *(_OWORD *)(v336 + 232) = *(_OWORD *)(a1 + 232);
  if (*((_QWORD *)&__dst[0] + 1) != *(_QWORD *)&__dst[0])
  {
    v349 = 0;
    v350 = 0;
    v1856 = (uint64_t)(*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0]) >> 5;
    while (1)
    {
      v351 = *(_QWORD *)&__dst[0];
      v352 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 32 * v349 + 8);
      if (*(_QWORD *)(*(_QWORD *)&__dst[0] + 32 * v349 + 16) - v352 != 1664)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 866, (uint64_t)"camera_set_models[i].vision_models.size() == 1", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2070;
        }
        v351 = *(_QWORD *)&__dst[0];
        v352 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 32 * v349 + 8);
      }
      v353 = *(_DWORD *)(v351 + 32 * v349);
      v354 = v315[3];
      if (*(_BYTE *)(v352 + 1536))
        v355 = v352 + 96;
      else
        v355 = 0;
      v1870 = *(_QWORD *)(v352 + 64);
      v1864 = *(int8x16_t *)(v352 + 16);
      v1867 = *(int8x16_t *)(v352 + 32);
      v1861 = *(int8x16_t *)v352;
      v1874 = *(_QWORD *)(v352 + 88);
      v1878 = *(int8x16_t *)(v352 + 48);
      v1883 = *(int8x16_t *)(v352 + 72);
      v356 = *(uint64_t **)(v354 + 304);
      if (v356)
      {
        while (1)
        {
          while (1)
          {
            v358 = (uint64_t **)v356;
            v359 = *((_DWORD *)v356 + 8);
            if (v359 <= v353)
              break;
            v356 = *v358;
            v357 = v358;
            if (!*v358)
              goto LABEL_392;
          }
          if (v359 >= v353)
            break;
          v356 = v358[1];
          if (!v356)
          {
            v357 = v358 + 1;
            goto LABEL_392;
          }
        }
        v360 = (char *)v358;
      }
      else
      {
        v357 = (uint64_t **)(v354 + 304);
        v358 = (uint64_t **)(v354 + 304);
LABEL_392:
        v360 = (char *)operator new(0x88uLL);
        *((_DWORD *)v360 + 8) = v353;
        *((_OWORD *)v360 + 3) = 0u;
        *((_OWORD *)v360 + 4) = 0u;
        *((_OWORD *)v360 + 5) = 0u;
        *((_QWORD *)v360 + 5) = 0x3FF0000000000000;
        *((_QWORD *)v360 + 9) = 0x3FF0000000000000;
        *((_QWORD *)v360 + 12) = 0;
        *((_QWORD *)v360 + 13) = 0x3FF0000000000000;
        *((_QWORD *)v360 + 15) = 0;
        *((_QWORD *)v360 + 16) = 0;
        *((_QWORD *)v360 + 14) = 0;
        *(_QWORD *)v360 = 0;
        *((_QWORD *)v360 + 1) = 0;
        *((_QWORD *)v360 + 2) = v358;
        *v357 = (uint64_t *)v360;
        v361 = (uint64_t *)v360;
        v362 = **(_QWORD **)(v354 + 296);
        if (v362)
        {
          *(_QWORD *)(v354 + 296) = v362;
          v361 = *v357;
        }
        sub_20E868578(*(uint64_t **)(v354 + 304), v361);
        ++*(_QWORD *)(v354 + 312);
      }
      v364 = v1878;
      v363 = v1883;
      v366 = v1864;
      v365 = v1867;
      v367 = v1861;
      v367.i64[1] = vextq_s8(v367, v367, 8uLL).u64[0];
      *(int8x16_t *)(v360 + 40) = v367;
      v366.i64[1] = vextq_s8(v366, v366, 8uLL).u64[0];
      *(int8x16_t *)(v360 + 56) = v366;
      v365.i64[1] = vextq_s8(v365, v365, 8uLL).u64[0];
      *(int8x16_t *)(v360 + 72) = v365;
      *((_QWORD *)v360 + 13) = v1870;
      v364.i64[1] = vextq_s8(v364, v364, 8uLL).u64[0];
      *(int8x16_t *)(v360 + 88) = v364;
      *((_QWORD *)v360 + 16) = v1874;
      v363.i64[1] = vextq_s8(v363, v363, 8uLL).u64[0];
      *((int8x16_t *)v360 + 7) = v363;
      LODWORD(object[0]) = v353;
      v1909[0] = (os_log_t)object;
      v368 = sub_20F3456E8(v354 + 320, (unsigned int *)object, (uint64_t)&unk_2102DB95C, (_DWORD **)v1909);
      v368[56] = 0;
      *(_OWORD *)(v368 + 40) = 0u;
      *(_OWORD *)(v368 + 24) = 0u;
      v368[64] = 0;
      v1916 = 0u;
      v1917 = 0u;
      v1914 = 0u;
      v1915 = 0u;
      v1912 = 0u;
      v1913 = 0u;
      v1910 = 0u;
      v1911 = 0u;
      memset(v1909, 0, sizeof(v1909));
      v369 = *(_DWORD *)(v355 + 992);
      if (v369 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2070;
        }
        v369 = *(_DWORD *)(v355 + 992);
        if (v369 > 7)
        {
LABEL_404:
          if (v369 <= 0xB)
          {
            if (v369 > 9)
            {
              v370 = (const void *)(v355 + 168);
              v371 = 112;
              goto LABEL_422;
            }
            v370 = (const void *)(v355 + 168);
            goto LABEL_407;
          }
          if (v369 <= 0xD)
          {
            if (v369 == 13)
            {
              v370 = (const void *)(v355 + 168);
              goto LABEL_413;
            }
LABEL_417:
            v370 = (const void *)(v355 + 168);
LABEL_418:
            v371 = 32;
            goto LABEL_422;
          }
          v370 = (const void *)(v355 + 168);
          if (v369 != -1)
            goto LABEL_421;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_2070;
          }
          v369 = *(_DWORD *)(v355 + 992);
          if (v369 > 7)
          {
            if (v369 <= 0xB)
            {
              if (v369 > 9)
              {
LABEL_413:
                v371 = 112;
                goto LABEL_422;
              }
LABEL_407:
              v371 = 56;
LABEL_422:
              memmove(v1909, v370, v371);
              goto LABEL_423;
            }
            if (v369 > 0xD)
            {
LABEL_421:
              v371 = 224;
              goto LABEL_422;
            }
            if (v369 == 13)
              goto LABEL_413;
            goto LABEL_418;
          }
          if (v369 > 3)
          {
            if (v369 != 6)
              goto LABEL_418;
            goto LABEL_416;
          }
          if (v369 > 1)
          {
            if (v369 != 2)
              goto LABEL_418;
LABEL_416:
            v371 = 24;
            goto LABEL_422;
          }
          goto LABEL_400;
        }
      }
      else if (v369 > 7)
      {
        goto LABEL_404;
      }
      if (v369 > 3)
      {
        if (v369 != 6)
          goto LABEL_417;
        goto LABEL_415;
      }
      if (v369 > 1)
      {
        if (v369 != 2)
          goto LABEL_417;
LABEL_415:
        v370 = (const void *)(v355 + 168);
        goto LABEL_416;
      }
LABEL_400:
      if (!v369)
        goto LABEL_2069;
LABEL_423:
      *(_DWORD *)oslog = v353;
      object[0] = oslog;
      v372 = sub_20F3459FC(v354 + 360, (unsigned int *)oslog, (uint64_t)&unk_2102DB95C, (_DWORD **)object);
      *(_OWORD *)(v372 + 184) = v1914;
      *(_OWORD *)(v372 + 200) = v1915;
      *(_OWORD *)(v372 + 216) = v1916;
      *(_OWORD *)(v372 + 232) = v1917;
      *(_OWORD *)(v372 + 120) = v1910;
      *(_OWORD *)(v372 + 136) = v1911;
      *(_OWORD *)(v372 + 152) = v1912;
      *(_OWORD *)(v372 + 168) = v1913;
      *(_OWORD *)(v372 + 56) = *(_OWORD *)&v1909[4];
      *(_OWORD *)(v372 + 72) = *(_OWORD *)&v1909[6];
      *(_OWORD *)(v372 + 88) = *(_OWORD *)&v1909[8];
      *(_OWORD *)(v372 + 104) = *(_OWORD *)&v1909[10];
      *(_OWORD *)(v372 + 24) = *(_OWORD *)v1909;
      *(_OWORD *)(v372 + 40) = *(_OWORD *)&v1909[2];
      *(_QWORD *)&v1953 = 0;
      v1952 = 0uLL;
      memset(v1906, 0, sizeof(v1906));
      v373 = *(_DWORD *)(v355 + 992);
      if (v373 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2070;
        }
        v373 = *(_DWORD *)(v355 + 992);
        if (v373 <= 7)
        {
LABEL_425:
          if (v373 <= 3)
          {
            if (!v373)
            {
LABEL_2069:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_2070:
              abort();
            }
LABEL_439:
            memset(object, 0, sizeof(object));
            v375 = 1.0;
            v376 = 1.0;
            v374 = 1.0;
            memset(oslog, 0, 24);
            goto LABEL_440;
          }
          if (v373 <= 6)
            goto LABEL_439;
          v374 = *(double *)(v355 + 488);
          *(_OWORD *)object = *(_OWORD *)(v355 + 496);
          object[2] = *(void **)(v355 + 512);
          v375 = *(double *)(v355 + 520);
          *(_OWORD *)oslog = *(_OWORD *)(v355 + 528);
          *(_QWORD *)&oslog[16] = *(_QWORD *)(v355 + 544);
          v376 = *(double *)(v355 + 552);
          goto LABEL_440;
        }
      }
      else if (v373 <= 7)
      {
        goto LABEL_425;
      }
      if (v373 > 0xB)
      {
        if (v373 <= 0xE)
          goto LABEL_439;
        v374 = *(double *)(v355 + 904);
        *(_OWORD *)object = *(_OWORD *)(v355 + 912);
        object[2] = *(void **)(v355 + 928);
        v375 = *(double *)(v355 + 936);
        *(_OWORD *)oslog = *(_OWORD *)(v355 + 944);
        *(_QWORD *)&oslog[16] = *(_QWORD *)(v355 + 960);
        v376 = *(double *)(v355 + 968);
      }
      else
      {
        if (v373 > 9)
        {
          if (v373 != 10)
          {
            v374 = *(double *)(v355 + 680);
            *(_OWORD *)object = *(_OWORD *)(v355 + 688);
            object[2] = *(void **)(v355 + 704);
            v375 = *(double *)(v355 + 712);
            *(_OWORD *)oslog = *(_OWORD *)(v355 + 720);
            *(_QWORD *)&oslog[16] = *(_QWORD *)(v355 + 736);
            v376 = *(double *)(v355 + 744);
            goto LABEL_440;
          }
          goto LABEL_439;
        }
        if (v373 != 9)
          goto LABEL_439;
        v374 = *(double *)(v355 + 512);
        object[2] = *(void **)(v355 + 536);
        *(_OWORD *)object = *(_OWORD *)(v355 + 520);
        v375 = *(double *)(v355 + 544);
        *(_QWORD *)&oslog[16] = *(_QWORD *)(v355 + 568);
        *(_OWORD *)oslog = *(_OWORD *)(v355 + 552);
        v376 = *(double *)(v355 + 576);
      }
LABEL_440:
      v1952 = *(_OWORD *)object;
      *(void **)&v1953 = object[2];
      *(_OWORD *)v1906 = *(_OWORD *)oslog;
      *(_QWORD *)&v1906[16] = *(_QWORD *)&oslog[16];
      *(_DWORD *)oslog = v353;
      object[0] = oslog;
      v377 = sub_20F345D3C(v354 + 400, (unsigned int *)oslog, (uint64_t)&unk_2102DB95C, (_DWORD **)object);
      *((double *)v377 + 3) = v374;
      *((_OWORD *)v377 + 2) = v1952;
      v377[6] = v1953;
      *((double *)v377 + 7) = v375;
      *((_OWORD *)v377 + 4) = *(_OWORD *)v1906;
      v377[10] = *(_QWORD *)&v1906[16];
      *((double *)v377 + 11) = v376;
      sub_20F3454F8(v354, v353, v355);
      v349 = ++v350;
      if (v1856 <= v350)
      {
        v315 = (_QWORD *)*((_QWORD *)&v1959 + 1);
        v317 = (_QWORD *)v1959;
        break;
      }
    }
  }
  v1959 = 0uLL;
  *(_QWORD *)(a1 + 7952) = v317;
  v378 = *(std::__shared_weak_count **)(a1 + 7960);
  *(_QWORD *)(a1 + 7960) = v315;
  if (v378)
  {
    v379 = (unint64_t *)&v378->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = (std::__shared_weak_count *)*((_QWORD *)&v1959 + 1);
  if (*((_QWORD *)&v1959 + 1))
  {
    v382 = (unint64_t *)(*((_QWORD *)&v1959 + 1) + 8);
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = **(_QWORD **)(a1 + 7952);
  *(_OWORD *)(v384 + 72) = *(_OWORD *)(a1 + 8128);
  if (*(_BYTE *)(a1 + 4744))
  {
    v385 = *(NSObject **)(a1 + 3144);
    v387 = *(_OWORD *)(a1 + 3128);
    *(_OWORD *)&v1909[4] = *(_OWORD *)(a1 + 3112);
    v386 = *(_OWORD *)&v1909[4];
    *(_OWORD *)&v1909[6] = v387;
    v388 = *(_OWORD *)(a1 + 3096);
    *(_OWORD *)v1909 = *(_OWORD *)(a1 + 3080);
    v389 = *(_OWORD *)v1909;
    *(_OWORD *)&v1909[2] = v388;
    *(_OWORD *)&v1909[9] = *(_OWORD *)(a1 + 3152);
    v390 = *(NSObject **)(a1 + 3168);
    v1909[8] = v385;
    v1909[11] = v390;
    *(_DWORD *)(v384 + 1648) = 0;
    *(_OWORD *)(v384 + 1672) = v388;
    *(_OWORD *)(v384 + 1688) = v386;
    *(_OWORD *)(v384 + 1704) = v387;
    *(_QWORD *)(v384 + 1720) = v385;
    *(_OWORD *)(v384 + 1656) = v389;
    *(os_log_t *)(v384 + 1744) = v1909[11];
    *(_OWORD *)(v384 + 1728) = *(_OWORD *)&v1909[9];
    *(_BYTE *)(v384 + 1752) = 0;
  }
  v391 = *(char **)(a1 + 1816);
  v392 = *(char **)(a1 + 1824);
  if (v391 != v392)
  {
    if (v392 - v391 != 32)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1623, (uint64_t)"config_.initial_camera_intrinsic_bias.size() == cv_types::IntrinsicsCalibrationModel::kDimension && \"Intrinsic bias size must match.\"", 133, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2065;
      }
      v391 = *(char **)(a1 + 1816);
    }
    v393 = **(_QWORD **)(a1 + 7952);
    v394 = (void ****)(v393 + 320);
    if (*(_QWORD *)(v393 + 344))
    {
      v395 = *(_QWORD *)(v393 + 328);
      if (v395)
      {
        v396 = **v394;
        if (v396)
        {
          v397 = (uint64_t *)*v396;
          if (v397)
          {
            v398 = (uint8x8_t)vcnt_s8((int8x8_t)v395);
            v398.i16[0] = vaddlv_u8(v398);
            if (v398.u32[0] < 2uLL)
            {
              while (1)
              {
                v399 = v397[1];
                if (v399)
                {
                  if ((v399 & (v395 - 1)) != 0)
                    goto LABEL_489;
                }
                else if (!*((_DWORD *)v397 + 4))
                {
                  goto LABEL_491;
                }
                v397 = (uint64_t *)*v397;
                if (!v397)
                  goto LABEL_489;
              }
            }
            do
            {
              v400 = v397[1];
              if (v400)
              {
                if (v400 < v395 || v400 % v395)
                  break;
              }
              else if (!*((_DWORD *)v397 + 4))
              {
                goto LABEL_491;
              }
              v397 = (uint64_t *)*v397;
            }
            while (v397);
          }
        }
      }
    }
LABEL_489:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1630, (uint64_t)"!intrinsics_calib_set.empty() && intrinsics_calib_set.count(0u) > 0 && \"Camera [0:0] intrinsics must exist.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v395 = *(_QWORD *)(v393 + 328);
LABEL_491:
    if (v395)
    {
      v401 = **v394;
      if (v401)
      {
        v402 = (char *)*v401;
        if (*v401)
        {
          v403 = (uint8x8_t)vcnt_s8((int8x8_t)v395);
          v403.i16[0] = vaddlv_u8(v403);
          if (v403.u32[0] < 2uLL)
          {
            while (1)
            {
              v404 = *((_QWORD *)v402 + 1);
              if (v404)
              {
                if ((v404 & (v395 - 1)) != 0)
                  goto LABEL_506;
              }
              else if (!*((_DWORD *)v402 + 4))
              {
                goto LABEL_540;
              }
              v402 = *(char **)v402;
              if (!v402)
                goto LABEL_506;
            }
          }
          do
          {
            v405 = *((_QWORD *)v402 + 1);
            if (v405)
            {
              if (v405 < v395 || v405 % v395)
                break;
            }
            else if (!*((_DWORD *)v402 + 4))
            {
              goto LABEL_540;
            }
            v402 = *(char **)v402;
          }
          while (v402);
        }
      }
    }
LABEL_506:
    v402 = (char *)operator new(0x48uLL);
    *(_OWORD *)(v402 + 56) = 0u;
    *(_OWORD *)(v402 + 40) = 0u;
    *(_OWORD *)(v402 + 24) = 0u;
    *(_QWORD *)v402 = 0;
    *((_QWORD *)v402 + 1) = 0;
    *((_DWORD *)v402 + 4) = 0;
    v406 = (float)(unint64_t)(*(_QWORD *)(v393 + 344) + 1);
    v407 = *(float *)(v393 + 352);
    if (v395 && (float)(v407 * (float)v395) >= v406)
    {
      v408 = *v394;
      v409 = **v394;
      if (v409)
      {
LABEL_509:
        *(_QWORD *)v402 = *v409;
        goto LABEL_538;
      }
    }
    else
    {
      v410 = 1;
      if (v395 >= 3)
        v410 = (v395 & (v395 - 1)) != 0;
      v411 = v410 | (2 * v395);
      v412 = vcvtps_u32_f32(v406 / v407);
      if (v411 <= v412)
        prime = v412;
      else
        prime = v411;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v395 = *(_QWORD *)(v393 + 328);
      }
      if (prime > v395)
        goto LABEL_520;
      if (prime < v395)
      {
        v414 = vcvtps_u32_f32((float)*(unint64_t *)(v393 + 344) / *(float *)(v393 + 352));
        if (v395 < 3 || (v415 = (uint8x8_t)vcnt_s8((int8x8_t)v395), v415.i16[0] = vaddlv_u8(v415), v415.u32[0] > 1uLL))
        {
          v414 = std::__next_prime(v414);
        }
        else
        {
          v416 = 1 << -(char)__clz(v414 - 1);
          if (v414 >= 2)
            v414 = v416;
        }
        if (prime <= v414)
          prime = v414;
        if (prime < v395)
LABEL_520:
          sub_20E8D2B3C(v393 + 320, prime);
      }
      v395 = *(_QWORD *)(v393 + 328);
      v408 = *v394;
      v409 = **v394;
      if (v409)
        goto LABEL_509;
    }
    *(_QWORD *)v402 = *(_QWORD *)(v393 + 336);
    *(_QWORD *)(v393 + 336) = v402;
    *v408 = (void **)(v393 + 336);
    if (!*(_QWORD *)v402)
      goto LABEL_539;
    v417 = *(_QWORD *)(*(_QWORD *)v402 + 8);
    if ((v395 & (v395 - 1)) != 0)
    {
      if (v417 >= v395)
        v417 %= v395;
    }
    else
    {
      v417 &= v395 - 1;
    }
    v409 = (void **)&(*v394)[v417];
LABEL_538:
    *v409 = v402;
LABEL_539:
    ++*(_QWORD *)(v393 + 344);
LABEL_540:
    if (v391 != v402 + 24)
    {
      v418 = *((_OWORD *)v391 + 1);
      *(_OWORD *)(v402 + 24) = *(_OWORD *)v391;
      *(_OWORD *)(v402 + 40) = v418;
    }
  }
  v419 = *(_QWORD *)&__dst[0];
  if (*(_QWORD *)&__dst[0])
  {
    v420 = *((_QWORD *)&__dst[0] + 1);
    v421 = *(void **)&__dst[0];
    if (*((_QWORD *)&__dst[0] + 1) != *(_QWORD *)&__dst[0])
    {
      do
      {
        v422 = *(_QWORD *)(v420 - 24);
        if (v422)
        {
          v423 = *(_QWORD *)(v420 - 16);
          v424 = *(void **)(v420 - 24);
          if (v423 != v422)
          {
            do
              v423 = sub_20EB8188C(v423 - 1664);
            while (v423 != v422);
            v424 = *(void **)(v420 - 24);
          }
          *(_QWORD *)(v420 - 16) = v422;
          operator delete(v424);
        }
        v420 -= 32;
      }
      while (v420 != v419);
      v421 = *(void **)&__dst[0];
    }
    *((_QWORD *)&__dst[0] + 1) = v419;
    operator delete(v421);
  }
  if (*(_BYTE *)(a1 + 1195))
  {
LABEL_554:
    v425 = *(uint64_t **)(**(_QWORD **)(a1 + 7952) + 336);
    if (!v425)
      goto LABEL_563;
    while (1)
    {
      v426 = *(_QWORD *)(*(_QWORD *)(a1 + 3056) + (((unint64_t)*((unsigned int *)v425 + 4) >> 11) & 0x1FFFE0) + 8)
           + 1664 * (unsigned __int16)*((_DWORD *)v425 + 4);
      if (*(_BYTE *)(v426 + 1536))
        v427 = v426 + 96;
      else
        v427 = 0;
      v428 = *(_DWORD *)(v427 + 992);
      if (v428 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2067;
        }
        v428 = *(_DWORD *)(v427 + 992);
      }
      if (!v428)
        break;
      *((double *)v425 + 7) = *(double *)v427 / *(double *)(v427 + 32);
      *((_BYTE *)v425 + 64) = 1;
      v425 = (uint64_t *)*v425;
      if (!v425)
        goto LABEL_563;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_2067:
    abort();
  }
LABEL_563:
  v429 = a1;
  if (!*(_BYTE *)(a1 + 1306))
    goto LABEL_592;
  v430 = *a4;
  memset(v1909, 0, 24);
  if (*(_QWORD *)(a1 + 7880))
  {
    v431 = *(_QWORD *)(a1 + 7808);
    if (v431)
    {
      v432 = *(_QWORD *)(a1 + 7776) + 56 * v431 - 48;
      if ((os_log_t *)v432 != v1909)
        goto LABEL_567;
    }
    else
    {
      v432 = *(_QWORD *)(a1 + 7776) + 8 * ((uint64_t)(*(_QWORD *)(a1 + 7784) - *(_QWORD *)(a1 + 7776)) >> 3) - 48;
      if ((os_log_t *)v432 != v1909)
      {
LABEL_567:
        v433 = *(double *)(v432 + 16);
        v434 = *(float64x2_t *)v432;
        *(_QWORD *)&v435 = vextq_s8((int8x16_t)v434, (int8x16_t)v434, 8uLL).u64[0];
        v1909[2] = *(os_log_t *)&v433;
        *(float64x2_t *)v1909 = v434;
        if (v430)
          goto LABEL_591;
LABEL_571:
        v434.f64[1] = v435;
        if (vmulq_f64(v434, v434).f64[0] + v435 * v435 + v433 * v433 > *(double *)(a1 + 1888))
        {
          if (*(_BYTE *)(a1 + 7682))
          {
            v436 = *(_QWORD **)(a1 + 7952);
            if (v436)
              v437 = (double *)(*v436 + 72);
            else
              v437 = (double *)(a1 + 8128);
            sub_20F813918(*(_QWORD *)(a1 + 11808), *v437);
          }
          if (*(_BYTE *)(a1 + 7688))
          {
            v438 = *(_QWORD *)(a1 + 7952);
            if (v438)
            {
              v439 = *(uint64_t **)(a1 + 11808);
              object[0] = v1909;
              LODWORD(object[1]) = 0;
              sub_20F813A2C(v439, (double **)object, (double *)(*(_QWORD *)(v438 + 64) + 112));
            }
          }
          v440 = *(_QWORD *)(a1 + 2856);
          v441 = *(_QWORD *)(a1 + 2864) - v440;
          if ((unint64_t)v441 >= 5)
          {
            v442 = *(uint64_t **)(a1 + 7952);
            if (v442)
            {
              v443 = *v442;
              if (v443)
              {
                if (*(_QWORD *)(v443 + 64))
                {
                  v446 = *(_QWORD *)(v443 + 56);
                  v444 = v443 + 56;
                  v445 = v446;
                  if (v446)
                  {
                    do
                    {
                      v447 = v445;
                      v445 = *(_QWORD *)(v445 + 8);
                    }
                    while (v445);
                  }
                  else
                  {
                    do
                    {
                      v447 = *(_QWORD *)(v444 + 16);
                      _ZF = *(_QWORD *)v447 == v444;
                      v444 = v447;
                    }
                    while (_ZF);
                  }
                  if (!*(_QWORD *)(v447 + 32) && *(_DWORD *)(v447 + 40) == *(_DWORD *)(v440 + 4 * (v441 >> 2) - 8))
                    sub_20F813D38(*(_QWORD *)(a1 + 11808), (double *)v1909);
                }
              }
            }
          }
        }
        goto LABEL_591;
      }
    }
  }
  v434.f64[0] = 0.0;
  v435 = 0.0;
  v433 = 0.0;
  if (!v430)
    goto LABEL_571;
LABEL_591:
  v429 = a1;
LABEL_592:
  v448 = *(uint64_t **)(v429 + 7952);
  v449 = *v448;
  if (*(_QWORD *)(*v448 + 64))
  {
    v452 = *(_QWORD **)(v449 + 56);
    v450 = (_QWORD *)(v449 + 56);
    v451 = v452;
    if (v452)
    {
      v453 = v451;
      v454 = v1859;
      do
      {
        v455 = v453;
        v453 = (_QWORD *)v453[1];
      }
      while (v453);
    }
    else
    {
      v460 = v450;
      v454 = v1859;
      do
      {
        v455 = (_QWORD *)v460[2];
        _ZF = *v455 == (_QWORD)v460;
        v460 = v455;
      }
      while (_ZF);
    }
    v456 = *((_DWORD *)v455 + 10);
    if (v451)
    {
      do
      {
        v461 = v451;
        v451 = (_QWORD *)v451[1];
      }
      while (v451);
    }
    else
    {
      do
      {
        v461 = (_QWORD *)v450[2];
        _ZF = *v461 == (_QWORD)v450;
        v450 = v461;
      }
      while (_ZF);
    }
    v457 = *(double *)(v461[6] + 816);
    v458 = a1;
    v459 = (uint64_t *)(a1 + 7776);
    if (!*(_QWORD *)(a1 + 7880))
      goto LABEL_626;
  }
  else
  {
    v456 = -1;
    v457 = -1.0;
    v454 = v1859;
    v458 = a1;
    v459 = (uint64_t *)(a1 + 7776);
    if (!*(_QWORD *)(a1 + 7880))
      goto LABEL_626;
  }
  v462 = *(_QWORD *)(v458 + 7808);
  if (v462)
  {
    v463 = *v459;
  }
  else
  {
    v463 = *(_QWORD *)(v458 + 7776);
    v462 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v458 + 7784) - v463) >> 3);
  }
  v464 = v463 + 56 * v462;
  _Q1 = *(_OWORD *)(v464 - 48);
  _D3 = *(_QWORD *)(v464 - 40);
  __asm { FMLA            D2, D3, V1.D[1] }
  v468 = sqrt(_D2 + *(double *)(v464 - 32) * *(double *)(v464 - 32));
  v469 = (_QWORD *)v448[8];
  if (v468 <= *(double *)(v458 + 1904))
  {
    v470 = *(_OWORD *)(v458 + 16);
    *(_OWORD *)v469 = *(_OWORD *)v458;
    *((_OWORD *)v469 + 1) = v470;
  }
  else
  {
    *((double *)v469 + 1) = *(double *)(v458 + 8) * *(double *)(v458 + 1912);
    *(double *)v469 = *(double *)v458 * *(double *)(v458 + 1920);
  }
  v471 = *(_QWORD *)(v458 + 11816);
  v472 = v468 * 57.2957795;
  v473 = *(double **)v471;
  if (**(double **)v471 >= v472)
  {
    if (!*(_BYTE *)(v471 + 8))
      goto LABEL_621;
    v475 = *(_DWORD *)(v471 + 12);
    if (v475 < 0)
    {
      if (v473[1] <= v472)
        goto LABEL_621;
      v475 = *((_DWORD *)v473 + 4);
      *(_DWORD *)(v471 + 12) = v475;
      if (v475 < 0)
        goto LABEL_621;
    }
    _CF = v475 != 0;
    v476 = v475 - 1;
    *(_DWORD *)(v471 + 12) = v476;
    if (v476 != 0 && _CF)
      goto LABEL_621;
    *(_WORD *)(v471 + 8) = 256;
    *(_DWORD *)(v471 + 12) = -1;
    v474 = *((_DWORD *)v473 + 5);
  }
  else
  {
    *(_WORD *)(v471 + 8) = 1;
    v474 = -1;
    *(_DWORD *)(v471 + 12) = -1;
  }
  *(_DWORD *)(v471 + 16) = v474;
LABEL_621:
  if (*(_BYTE *)(v471 + 9))
  {
    v477 = *(_DWORD *)(v471 + 16);
    if ((v477 & 0x80000000) == 0)
    {
      _CF = v477 != 0;
      v478 = v477 - 1;
      *(_DWORD *)(v471 + 16) = v478;
      if (v478 == 0 || !_CF)
      {
        *(_BYTE *)(v471 + 9) = 0;
        *(_DWORD *)(v471 + 16) = -1;
      }
    }
  }
  v448 = *(uint64_t **)(a1 + 7952);
LABEL_626:
  v479 = (_QWORD *)v448[2];
  v480 = (_QWORD *)*v479;
  v481 = v479[1];
  v482 = *(char *)v480;
  if (v482 <= -2)
  {
    do
    {
      v483 = (__clz(__rbit64(((*v480 >> 7) & ~*v480 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v480 = (_QWORD *)((char *)v480 + v483);
      v481 += 32 * v483;
      v482 = *(char *)v480;
    }
    while (v482 < -1);
  }
  if (v482 != 255)
  {
    do
    {
      v484 = *(_QWORD *)(v481 + 16);
      if (*(_DWORD *)(v484 + 520) == 1)
        *(_DWORD *)(v484 + 520) = 0;
      v486 = *(_QWORD *)(v484 + 496);
      v485 = *(_QWORD *)(v484 + 504);
      if (v486 != v485)
      {
        v487 = v485 - v486 - 64;
        v488 = v486;
        if (v487 < 0x40)
          goto LABEL_2136;
        v489 = (v487 >> 6) + 1;
        v488 = v486 + ((v489 & 0x7FFFFFFFFFFFFFELL) << 6);
        v490 = (_DWORD *)(v486 + 88);
        v491 = v489 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          *(v490 - 16) = 2139095039;
          *v490 = 2139095039;
          v490 += 32;
          v491 -= 2;
        }
        while (v491);
        if (v489 != (v489 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_2136:
          do
          {
            *(_DWORD *)(v488 + 24) = 2139095039;
            v488 += 64;
          }
          while (v488 != v485);
        }
      }
      v493 = *((char *)v480 + 1);
      v480 = (_QWORD *)((char *)v480 + 1);
      LOBYTE(v492) = v493;
      v481 += 32;
      if (v493 <= -2)
      {
        do
        {
          v494 = (__clz(__rbit64(((*v480 >> 7) & ~*v480 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v480 = (_QWORD *)((char *)v480 + v494);
          v481 += 32 * v494;
          v492 = *(char *)v480;
        }
        while (v492 < -1);
      }
    }
    while (v492 != 255);
  }
  LOBYTE(v1909[0]) = 0;
  v1939 = 0;
  if (*(_BYTE *)(a1 + 1306))
    v495 = *(_BYTE *)(*(_QWORD *)(a1 + 11808) + 28) != 0;
  else
    v495 = 0;
  sub_20F876108(a1 + 2656, v454, a1 + 3056, v454, (uint64_t)v459, v495, a1 + 12256, a1 + 12320, a1 + 11944, a1 + 11984, (_QWORD **)v448, v1909);
  sub_20F82FD50(&v1891);
  if (**(int **)(v1891 + 56) <= 2)
  {
    v499 = *(unsigned __int8 *)(v1891 + 72);
    v500 = sub_20E8C31DC(v1891, "OSLogSurrogateAppender", 1, 0);
    v501 = v500;
    if (v499 || v500)
    {
      sub_20E863438((uint64_t)object);
      sub_20E86A980(&object[2], (uint64_t)"Track set size : ", 17);
      v577 = *(_QWORD **)(*(_QWORD *)(a1 + 7952) + 8);
      v580 = (_QWORD *)*v577;
      v578 = v577 + 1;
      v579 = v580;
      if (v580 != v578)
      {
        v581 = 0;
        do
        {
          v582 = (_QWORD *)v579[1];
          v583 = v579;
          if (v582)
          {
            do
            {
              v584 = v582;
              v582 = (_QWORD *)*v582;
            }
            while (v582);
          }
          else
          {
            do
            {
              v584 = (_QWORD *)v583[2];
              _ZF = *v584 == (_QWORD)v583;
              v583 = v584;
            }
            while (!_ZF);
          }
          v581 += *(unsigned __int8 *)(v579[6] + 112);
          v579 = v584;
        }
        while (v584 != v578);
      }
      v892 = *(_QWORD **)(a1 + 7968);
      if (v892 != (_QWORD *)(a1 + 7976))
      {
        v893 = 0;
        do
        {
          v894 = (_QWORD *)v892[1];
          v895 = v892;
          if (v894)
          {
            do
            {
              v896 = v894;
              v894 = (_QWORD *)*v894;
            }
            while (v894);
          }
          else
          {
            do
            {
              v896 = (_QWORD *)v895[2];
              _ZF = *v896 == (_QWORD)v895;
              v895 = v896;
            }
            while (!_ZF);
          }
          v893 += *(unsigned __int8 *)(v892[6] + 112);
          v892 = v896;
        }
        while (v896 != (_QWORD *)(a1 + 7976));
      }
      std::ostream::operator<<();
      v1885 = v456;
      if ((BYTE8(v1902) & 0x10) != 0)
      {
        v899 = v1902;
        if ((unint64_t)v1902 < (unint64_t)v1900)
        {
          *(_QWORD *)&v1902 = v1900;
          v899 = v1900;
        }
        v900 = v1899;
        v897 = v899 - (_QWORD)v1899;
        if ((unint64_t)(v899 - (_QWORD)v1899) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1090;
      }
      else
      {
        if ((BYTE8(v1902) & 8) == 0)
        {
          v897 = 0;
          HIBYTE(v1960) = 0;
          v898 = &v1959;
          goto LABEL_1045;
        }
        v900 = __p;
        v897 = *((_QWORD *)&__src + 1) - (_QWORD)__p;
        if (*((_QWORD *)&__src + 1) - (_QWORD)__p > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_1090:
          sub_20E860B7C();
      }
      if (v897 >= 0x17)
      {
        v901 = (v897 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v897 | 7) != 0x17)
          v901 = v897 | 7;
        v902 = v901 + 1;
        v898 = (__int128 *)operator new(v901 + 1);
        *((_QWORD *)&v1959 + 1) = v897;
        v1960 = v902 | 0x8000000000000000;
        *(_QWORD *)&v1959 = v898;
      }
      else
      {
        HIBYTE(v1960) = v897;
        v898 = &v1959;
        if (!v897)
        {
LABEL_1045:
          *((_BYTE *)v898 + v897) = 0;
          *(_QWORD *)&v1952 = &v1891;
          *((std::chrono::steady_clock::time_point *)&v1952 + 1) = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v1953 = std::chrono::system_clock::now();
          DWORD2(v1953) = 2;
          *(_QWORD *)&v1954 = "unknown file";
          DWORD2(v1954) = 1714;
          v1956 = 0;
          *(_QWORD *)&v1955 = "unknown function";
          *((_QWORD *)&v1955 + 1) = 0;
          if (v1960 >= 0)
            v903 = (const char *)&v1959;
          else
            v903 = (const char *)v1959;
          v904 = *(_QWORD *)v1952;
          if (*(char *)(*(_QWORD *)v1952 + 39) < 0)
          {
            v906 = *(const char **)(v904 + 16);
            v905 = *(_QWORD *)(v904 + 24);
            v1880 = *(_QWORD *)v1952 + 16;
            v908 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v908 & 1) != 0)
              goto LABEL_1052;
          }
          else
          {
            v905 = *(unsigned __int8 *)(*(_QWORD *)v1952 + 39);
            v906 = (const char *)(*(_QWORD *)v1952 + 16);
            v1880 = (uint64_t)v906;
            v907 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v907 & 1) != 0)
              goto LABEL_1052;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)oslog);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
            if (oslog[24] && (oslog[23] & 0x80000000) != 0)
              operator delete(*(void **)oslog);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_1052:
          if (byte_254A4A4F8[23] >= 0)
            v909 = byte_254A4A4F8;
          else
            v909 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v910 = byte_254A4A4F8[23];
          else
            v910 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)oslog = os_log_create(v909, v906);
          v911 = &oslog[8];
          if (v910 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v910 >= 0x17)
          {
            v912 = (v910 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v910 | 7) != 0x17)
              v912 = v910 | 7;
            v913 = v912 + 1;
            v911 = operator new(v912 + 1);
            *(_QWORD *)&oslog[24] = v913 | 0x8000000000000000;
            *(_QWORD *)&oslog[8] = v911;
            *(_QWORD *)&oslog[16] = v910;
          }
          else
          {
            oslog[31] = v910;
            if (!v910)
            {
LABEL_1066:
              v911[v910] = 0;
              oslog[32] = 1;
              v914 = &oslog[40];
              if (v905 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v905 >= 0x17)
              {
                v916 = (v905 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v905 | 7) != 0x17)
                  v916 = v905 | 7;
                v917 = v916 + 1;
                v914 = operator new(v916 + 1);
                *((_QWORD *)&v1945 + 1) = v917 | 0x8000000000000000;
                *(_QWORD *)&oslog[40] = v914;
                *(_QWORD *)&v1945 = v905;
              }
              else
              {
                HIBYTE(v1945) = v905;
                if (!v905)
                {
                  oslog[40] = 0;
                  LOBYTE(v1946) = 1;
                  v915 = *(NSObject **)oslog;
                  if ((SHIBYTE(v1945) & 0x80000000) == 0)
                    goto LABEL_1070;
                  goto LABEL_1076;
                }
              }
              memmove(v914, v906, v905);
              v914[v905] = 0;
              LOBYTE(v1946) = 1;
              v915 = *(NSObject **)oslog;
              if ((SHIBYTE(v1945) & 0x80000000) == 0)
              {
LABEL_1070:
                if (!oslog[32])
                  goto LABEL_1079;
                goto LABEL_1077;
              }
LABEL_1076:
              operator delete(*(void **)&oslog[40]);
              if (!oslog[32])
                goto LABEL_1079;
LABEL_1077:
              if ((oslog[31] & 0x80000000) != 0)
                operator delete(*(void **)&oslog[8]);
LABEL_1079:
              if (*(_QWORD *)oslog)
                os_release(*(void **)oslog);
              if (!v501 || !*(_QWORD *)(v501 + 24))
              {
                os_log_type_enabled(v915, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)oslog = 136315138;
                *(_QWORD *)&oslog[4] = v903;
                v924 = (void *)_os_log_send_and_compose_impl();
                if (v924)
                  free(v924);
LABEL_1839:
                if (v499)
                {
                  v1649 = (const char *)&v1959;
                  if (v1960 < 0)
                    v1649 = (const char *)v1959;
                  sub_20E8C003C((uint64_t)&v1952, "%s", v1649);
                  sub_20E863570((uint64_t)&v1952);
                }
                sub_20E863570((uint64_t)&v1952);
                v1650 = v1956;
                if (v1956)
                {
                  v1651 = (unint64_t *)&v1956->__shared_owners_;
                  do
                    v1652 = __ldaxr(v1651);
                  while (__stlxr(v1652 - 1, v1651));
                  if (!v1652)
                  {
                    ((void (*)(std::__shared_weak_count *))v1650->__on_zero_shared)(v1650);
                    std::__shared_weak_count::__release_weak(v1650);
                  }
                }
                if (SHIBYTE(v1960) < 0)
                  operator delete((void *)v1959);
                object[0] = *(void **)MEMORY[0x24BEDB7F0];
                v1653 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
                *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                object[2] = v1653;
                *(_QWORD *)&v1896 = MEMORY[0x24BEDB848] + 16;
                if ((v1901[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1901);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x212BC6290](v1903);
                v456 = v1885;
                if (v1885 == -1)
                  goto LABEL_651;
                goto LABEL_649;
              }
              v918 = _os_log_pack_size();
              v919 = operator new(v918, (std::align_val_t)8uLL);
              v920 = (_QWORD *)operator new();
              *v920 = &off_24C9ABB80;
              v920[1] = 0;
              v920[2] = 0;
              v920[3] = v919;
              *(_QWORD *)v1906 = v919;
              *(_QWORD *)&v1906[8] = v919;
              v1908 = 0;
              *(_QWORD *)&v1906[16] = v920;
              v1907 = 0;
              v921 = strlen(v903);
              if (v921 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v922 = v921;
              if (v921 >= 0x17)
              {
                v925 = (v921 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v921 | 7) != 0x17)
                  v925 = v921 | 7;
                v926 = v925 + 1;
                v923 = operator new(v925 + 1);
                *(_QWORD *)&__dst[1] = v926 | 0x8000000000000000;
                *(_QWORD *)&__dst[0] = v923;
                *((_QWORD *)&__dst[0] + 1) = v922;
              }
              else
              {
                BYTE7(__dst[1]) = v921;
                v923 = __dst;
                if (!v921)
                {
LABEL_1095:
                  *((_BYTE *)v923 + v922) = 0;
                  *(_QWORD *)&v1957 = *((_QWORD *)&__dst[0] + 1);
                  v927 = *(_QWORD *)&__dst[0];
                  *(_QWORD *)((char *)&v1957 + 7) = *(_QWORD *)((char *)__dst + 15);
                  v928 = BYTE7(__dst[1]);
                  v929 = operator new(0x38uLL);
                  v929[1] = 0;
                  v929[2] = 0;
                  v929[3] = off_24C9ABC20;
                  *v929 = &off_24C9ABBD0;
                  v930 = v1957;
                  v929[4] = v927;
                  v929[5] = v930;
                  *(_QWORD *)((char *)v929 + 47) = *(_QWORD *)((char *)&v1957 + 7);
                  *((_BYTE *)v929 + 55) = v928;
                  *(_QWORD *)&v1957 = 0;
                  *(_QWORD *)((char *)&v1957 + 7) = 0;
                  v931 = v1908;
                  v1907 = (char *)(v929 + 3);
                  v1908 = (std::__shared_weak_count *)v929;
                  if (v931)
                  {
                    v932 = (unint64_t *)&v931->__shared_owners_;
                    do
                      v933 = __ldaxr(v932);
                    while (__stlxr(v933 - 1, v932));
                    if (!v933)
                    {
                      ((void (*)(std::__shared_weak_count *))v931->__on_zero_shared)(v931);
                      std::__shared_weak_count::__release_weak(v931);
                    }
                  }
                  *(_OWORD *)oslog = *(_OWORD *)v1906;
                  v934 = v1907;
                  *(_QWORD *)&oslog[16] = *(_QWORD *)&v1906[16];
                  if (*(_QWORD *)&v1906[16])
                  {
                    v935 = (unint64_t *)(*(_QWORD *)&v1906[16] + 8);
                    do
                      v936 = __ldxr(v935);
                    while (__stxr(v936 + 1, v935));
                  }
                  v937 = v1908;
                  *(_QWORD *)&oslog[24] = v934;
                  *(_QWORD *)&oslog[32] = v1908;
                  if (v1908)
                  {
                    v938 = (unint64_t *)&v1908->__shared_owners_;
                    do
                      v939 = __ldxr(v938);
                    while (__stxr(v939 + 1, v938));
                    *(_QWORD *)&oslog[40] = v934;
                    do
                      v940 = __ldaxr(v938);
                    while (__stlxr(v940 - 1, v938));
                    if (!v940)
                    {
                      ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
                      std::__shared_weak_count::__release_weak(v937);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&oslog[40] = v934;
                  }
                  v1620 = *(std::__shared_weak_count **)&v1906[16];
                  if (*(_QWORD *)&v1906[16])
                  {
                    v1621 = (unint64_t *)(*(_QWORD *)&v1906[16] + 8);
                    do
                      v1622 = __ldaxr(v1621);
                    while (__stlxr(v1622 - 1, v1621));
                    if (!v1622)
                    {
                      ((void (*)(std::__shared_weak_count *))v1620->__on_zero_shared)(v1620);
                      std::__shared_weak_count::__release_weak(v1620);
                    }
                  }
                  v1623 = *(_QWORD *)oslog;
                  if (*(char *)(*(_QWORD *)&oslog[40] + 31) >= 0)
                    v1624 = *(_QWORD *)&oslog[40] + 8;
                  else
                    v1624 = *(_QWORD *)(*(_QWORD *)&oslog[40] + 8);
                  v1625 = _os_log_pack_fill();
                  *(_DWORD *)v1625 = 136315138;
                  *(_QWORD *)(v1625 + 4) = v1624;
                  v1626 = operator new();
                  v1627 = *(unsigned __int8 *)(v904 + 39);
                  v1628 = v1880;
                  if ((v1627 & 0x80u) != 0)
                  {
                    v1628 = *(_QWORD *)(v904 + 16);
                    v1627 = *(_QWORD *)(v904 + 24);
                  }
                  *(_QWORD *)v1626 = v1623;
                  *(_OWORD *)(v1626 + 8) = *(_OWORD *)&oslog[8];
                  *(_QWORD *)&oslog[8] = 0;
                  *(_QWORD *)&oslog[16] = 0;
                  *(_OWORD *)(v1626 + 24) = *(_OWORD *)&oslog[24];
                  *(_QWORD *)&oslog[24] = 0;
                  *(_QWORD *)&oslog[32] = 0;
                  *(_QWORD *)(v1626 + 40) = v1628;
                  *(_QWORD *)(v1626 + 48) = v1627;
                  *(_BYTE *)(v1626 + 56) = 2;
                  *(_QWORD *)&__dst[0] = 0;
                  *(_QWORD *)v1906 = v1626;
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v501 + 24) + 40))(*(_QWORD *)(v501 + 24), v1906);
                  v1629 = *(_QWORD *)v1906;
                  *(_QWORD *)v1906 = 0;
                  if (v1629)
                  {
                    v1630 = *(std::__shared_weak_count **)(v1629 + 32);
                    if (v1630)
                    {
                      v1631 = (unint64_t *)&v1630->__shared_owners_;
                      do
                        v1632 = __ldaxr(v1631);
                      while (__stlxr(v1632 - 1, v1631));
                      if (!v1632)
                      {
                        ((void (*)(std::__shared_weak_count *))v1630->__on_zero_shared)(v1630);
                        std::__shared_weak_count::__release_weak(v1630);
                      }
                    }
                    v1633 = *(std::__shared_weak_count **)(v1629 + 16);
                    if (v1633)
                    {
                      v1634 = (unint64_t *)&v1633->__shared_owners_;
                      do
                        v1635 = __ldaxr(v1634);
                      while (__stlxr(v1635 - 1, v1634));
                      if (!v1635)
                      {
                        ((void (*)(std::__shared_weak_count *))v1633->__on_zero_shared)(v1633);
                        std::__shared_weak_count::__release_weak(v1633);
                      }
                    }
                    MEMORY[0x212BC6398](v1629, 0x10F0C40B62ED6C6);
                    v1636 = *(_QWORD *)&__dst[0];
                    *(_QWORD *)&__dst[0] = 0;
                    if (v1636)
                    {
                      v1637 = *(std::__shared_weak_count **)(v1636 + 32);
                      if (v1637)
                      {
                        v1638 = (unint64_t *)&v1637->__shared_owners_;
                        do
                          v1639 = __ldaxr(v1638);
                        while (__stlxr(v1639 - 1, v1638));
                        if (!v1639)
                        {
                          ((void (*)(std::__shared_weak_count *))v1637->__on_zero_shared)(v1637);
                          std::__shared_weak_count::__release_weak(v1637);
                        }
                      }
                      v1640 = *(std::__shared_weak_count **)(v1636 + 16);
                      if (v1640)
                      {
                        v1641 = (unint64_t *)&v1640->__shared_owners_;
                        do
                          v1642 = __ldaxr(v1641);
                        while (__stlxr(v1642 - 1, v1641));
                        if (!v1642)
                        {
                          ((void (*)(std::__shared_weak_count *))v1640->__on_zero_shared)(v1640);
                          std::__shared_weak_count::__release_weak(v1640);
                        }
                      }
                      MEMORY[0x212BC6398](v1636, 0x10F0C40B62ED6C6);
                    }
                  }
                  v1643 = *(std::__shared_weak_count **)&oslog[32];
                  if (*(_QWORD *)&oslog[32])
                  {
                    v1644 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                    do
                      v1645 = __ldaxr(v1644);
                    while (__stlxr(v1645 - 1, v1644));
                    if (!v1645)
                    {
                      ((void (*)(std::__shared_weak_count *))v1643->__on_zero_shared)(v1643);
                      std::__shared_weak_count::__release_weak(v1643);
                    }
                  }
                  v1646 = *(std::__shared_weak_count **)&oslog[16];
                  if (*(_QWORD *)&oslog[16])
                  {
                    v1647 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                    do
                      v1648 = __ldaxr(v1647);
                    while (__stlxr(v1648 - 1, v1647));
                    if (!v1648)
                    {
                      ((void (*)(std::__shared_weak_count *))v1646->__on_zero_shared)(v1646);
                      std::__shared_weak_count::__release_weak(v1646);
                    }
                  }
                  goto LABEL_1839;
                }
              }
              memcpy(v923, v903, v922);
              goto LABEL_1095;
            }
          }
          memmove(v911, v909, v910);
          goto LABEL_1066;
        }
      }
      memmove(v898, v900, v897);
      goto LABEL_1045;
    }
  }
  if (v456 != -1)
  {
LABEL_649:
    if (*(_BYTE *)(a1 + 1632))
    {
      _Q0.f64[0] = v457;
      sub_20F82B2FC(*(_QWORD **)(a1 + 12440), v456, *(_DWORD *)(*(_QWORD *)(a1 + 2864) - 4), (_QWORD *)(a1 + 8056), a1 + 4752, (uint64_t)v1909, _Q0, *(double *)(*(_QWORD *)(a1 + 2888) - 8), v498);
    }
  }
LABEL_651:
  v502 = **(_QWORD ***)(a1 + 7952);
  v503 = (_QWORD *)v502[220];
  if (v503 != v502 + 221)
  {
    while (*(double *)(v503[5] + 1424) <= 0.0)
    {
      v504 = (_QWORD *)v503[1];
      if (v504)
      {
        do
        {
          v505 = v504;
          v504 = (_QWORD *)*v504;
        }
        while (v504);
      }
      else
      {
        do
        {
          v505 = (_QWORD *)v503[2];
          _ZF = *v505 == (_QWORD)v503;
          v503 = v505;
        }
        while (!_ZF);
      }
      v503 = v505;
      if (v505 == v502 + 221)
        goto LABEL_686;
    }
    v506 = (_QWORD *)v502[6];
    if (v506 != v502 + 7)
    {
      do
      {
        v507 = *(_QWORD *)(a1 + 8096);
        if (v507)
        {
          v508 = 0;
          v509 = *(_QWORD *)(a1 + 8056);
          while (1)
          {
            v510 = (*(_QWORD *)(a1 + 8080) + v508) % (unint64_t)((*(_QWORD *)(a1 + 8064) - v509) >> 5);
            if (*(_DWORD *)(v509 + 32 * v510) == *((_DWORD *)v506 + 10))
              break;
            if (v507 == ++v508)
              goto LABEL_668;
          }
          v511 = a1;
        }
        else
        {
LABEL_668:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1744, (uint64_t)"iter != imu_samples_info_vec.end()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_2067;
          }
          v511 = a1;
          v509 = *(_QWORD *)(a1 + 8056);
          v510 = (*(_QWORD *)(a1 + 8080) + v507) % (unint64_t)((*(_QWORD *)(a1 + 8064) - v509) >> 5);
          v508 = v507;
        }
        v512 = *(_QWORD *)(v509 + 32 * v510 + 24);
        v513 = *(_QWORD *)(v511 + 8104);
        if (v512 >= 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v511 + 8112) - v513) >> 3))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1745, (uint64_t)"iter->last_imu_sample_offset < this->imu_sample_buffer_.buffer().size()", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_2067;
          }
          v513 = *(_QWORD *)(a1 + 8104);
          v512 = *(_QWORD *)(*(_QWORD *)(a1 + 8056)
                           + 32
                           * ((*(_QWORD *)(a1 + 8080) + v508)
                            % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8064) - *(_QWORD *)(a1 + 8056)) >> 5))
                           + 24);
        }
        v514 = v506[6];
        if (vabdd_f64(*(double *)(v513 + 56 * v512), *(double *)(v514 + 816)) >= 0.001)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1747, (uint64_t)"std::abs(imu_mnt.timestamp - state->timestamp) < 1e-3", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_2067;
          }
          v514 = v506[6];
        }
        v515 = *(_QWORD *)(*(_QWORD *)(a1 + 7952) + 64);
        _Q1.f64[0] = *(float64_t *)(v515 + 120);
        v516 = *(double *)(v515 + 144);
        v517 = *(double *)(v515 + 152);
        v519 = *(double *)(v515 + 128);
        v518 = *(double *)(v515 + 136);
        v520 = *(double *)(v515 + 176);
        v521 = *(float64x2_t *)(v515 + 160);
        v522 = *(double *)(v515 + 200);
        v523 = *(float64x2_t *)(v515 + 184);
        v524 = *(double *)(v515 + 224);
        _Q19 = *(float64x2_t *)(v515 + 208);
        v526 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v521, *(double *)(v515 + 112)), (float64x2_t)0, v523), (float64x2_t)0, _Q19);
        v527 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v521, v518), v523, _Q1.f64[0]), (float64x2_t)0, _Q19);
        _Q1.f64[0] = v520 * v518 + v522 * _Q1.f64[0] + v524 * 0.0;
        v528 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v521, v516), v523, v517), _Q19, v519);
        v529 = v520 * v516 + v522 * v517 + v524 * v519;
        _Q5 = *(float64x2_t *)(v515 + 232);
        v531 = *(double *)(v515 + 272);
        _Q7 = *(float64x2_t *)(v515 + 256);
        v533 = *(double *)(v515 + 296);
        _Q17 = *(float64x2_t *)(v515 + 280);
        v535 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v526, _Q5.f64[0]), v527, _Q5, 1), v528, *(double *)(v515 + 248));
        __asm { FMLA            D19, D1, V5.D[1] }
        v536 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v526, _Q7.f64[0]), v527, _Q7, 1), v528, v531);
        __asm { FMLA            D19, D1, V7.D[1] }
        _D6 = _Q19.f64[0] + v529 * v531;
        __asm { FMLA            D0, D1, V17.D[1] }
        _Q0.f64[0] = _Q0.f64[0] + v529 * v533;
        v538 = v513 + 56 * v512;
        _Q1.f64[0] = *(float64_t *)(v538 + 24);
        _Q2 = *(float64x2_t *)(v538 + 8);
        v540 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v535, _Q2.f64[0]), v536, _Q2, 1), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v526, _Q17.f64[0]), v527, _Q17, 1), v528, v533), _Q1.f64[0]);
        __asm { FMLA            D3, D6, V2.D[1] }
        _Q0.f64[0] = _D3 + _Q0.f64[0] * _Q1.f64[0];
        _Q1.f64[0] = *(float64_t *)(v514 + 136);
        _Q0 = vnegq_f64(vsubq_f64(_Q0, _Q1));
        _Q1 = vnegq_f64(vsubq_f64(v540, *(float64x2_t *)(v514 + 120)));
        *(float64x2_t *)(v514 + 768) = _Q1;
        *(float64_t *)(v514 + 784) = _Q0.f64[0];
        v542 = v506[6];
        if (*(_BYTE *)(a1 + 1944))
        {
          *(_QWORD *)(v542 + 808) = 0;
          *(_OWORD *)(v542 + 792) = 0uLL;
          v543 = (_QWORD *)v506[1];
          if (v543)
            goto LABEL_681;
        }
        else
        {
          v544.f64[0] = *(float64_t *)(v542 + 16);
          v545 = *(int64x2_t *)v542;
          _Q2 = *(int64x2_t *)(v542 + 24);
          v547 = *(double *)(v542 + 64);
          v548 = vzip2q_s64(*(int64x2_t *)v542, _Q2);
          v544.f64[1] = *(float64_t *)(v542 + 40);
          _Q6 = *(float64x2_t *)(v542 + 48);
          v550 = v506[6];
          v551 = *(double *)(v550 + 112);
          v552 = *(float64x2_t *)(v550 + 96);
          v553 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v545, _Q2), v552.f64[0]), (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v548.i64[0], 0), (int8x16_t)vdupq_laneq_s64(v548, 1), 8uLL), v552, 1), v544, v551);
          _Q0 = vmulq_f64(_Q6, v552);
          _Q2.i64[0] = *(_QWORD *)(v550 + 104);
          __asm { FMLA            D0, D2, V6.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + v547 * v551;
          _Q1 = vnegq_f64(v553);
          _Q0 = vnegq_f64(_Q0);
          *(float64x2_t *)(v550 + 792) = _Q1;
          *(float64_t *)(v550 + 808) = _Q0.f64[0];
          v543 = (_QWORD *)v506[1];
          if (v543)
          {
            do
            {
LABEL_681:
              v555 = v543;
              v543 = (_QWORD *)*v543;
            }
            while (v543);
            goto LABEL_663;
          }
        }
        do
        {
          v555 = (_QWORD *)v506[2];
          _ZF = *v555 == (_QWORD)v506;
          v506 = v555;
        }
        while (!_ZF);
LABEL_663:
        v506 = v555;
      }
      while (v555 != (_QWORD *)(**(_QWORD **)(a1 + 7952) + 56));
    }
  }
LABEL_686:
  kdebug_trace();
  v556 = sub_20F86C2E8(a1);
  v1827 = v557;
  v1828 = v556;
  v1844 = (char **)(a1 + 14680);
  *(_QWORD *)(a1 + 14688) = *(_QWORD *)(a1 + 14680);
  v558 = *(_QWORD *)(a1 + 7952);
  if (!*(_QWORD *)(*(_QWORD *)(v558 + 24) + 16))
    goto LABEL_997;
  v559 = *(_QWORD **)v558;
  v560 = *(_OWORD *)(a1 + 11704);
  *(_OWORD *)(a1 + 14704) = *(_OWORD *)(a1 + 11688);
  *(_OWORD *)(a1 + 14720) = v560;
  *(_OWORD *)(a1 + 14736) = *(_OWORD *)(a1 + 11720);
  sub_20F38F148(a1 + 14704, v559);
  v567 = **(double **)(a1 + 5264);
  v568 = *(double *)(a1 + 1896);
  v569 = *(_QWORD *)(a1 + 7952);
  v570 = *(_QWORD *)(*(_QWORD *)(v569 + 24) + 16);
  v571 = *(_BYTE **)(a1 + 14680);
  v1846 = a1 + 14704;
  if (v570 > (uint64_t)(*(_QWORD *)(a1 + 14696) - (_QWORD)v571) >> 3)
  {
    if (v570 >> 61)
      goto LABEL_2062;
    v572 = *(_BYTE **)(a1 + 14688);
    v573 = (char *)operator new(8 * v570);
    v574 = v572 - v571;
    v575 = &v573[(v572 - v571) & 0xFFFFFFFFFFFFFFF8];
    v576 = v575;
    if (v572 == v571)
      goto LABEL_706;
    if ((unint64_t)(v574 - 8) >= 0x58)
    {
      v576 = &v573[(v572 - v571) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v572 - &v573[v574 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v585 = v574 >> 3;
        v586 = ((unint64_t)(v574 - 8) >> 3) + 1;
        v587 = 8 * (v586 & 0x3FFFFFFFFFFFFFFCLL);
        v588 = &v572[-v587];
        v576 = &v575[-v587];
        v589 = (__n128 *)&v573[8 * v585 - 16];
        v590 = (__n128 *)(v572 - 16);
        v591 = v586 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          _Q1 = v590[-1];
          v592 = *v590;
          v589[-1] = _Q1;
          *v589 = v592;
          v589 -= 2;
          v590 -= 2;
          v591 -= 4;
        }
        while (v591);
        v572 = v588;
        if (v586 == (v586 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_706:
          *(_QWORD *)(a1 + 14680) = v576;
          *(_QWORD *)(a1 + 14688) = v575;
          *(_QWORD *)(a1 + 14696) = &v573[8 * v570];
          if (v571)
          {
            operator delete(v571);
            v569 = *(_QWORD *)(a1 + 7952);
          }
          goto LABEL_708;
        }
      }
    }
    else
    {
      v576 = &v573[(v572 - v571) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v593 = *((_QWORD *)v572 - 1);
      v572 -= 8;
      *((_QWORD *)v576 - 1) = v593;
      v576 -= 8;
    }
    while (v572 != v571);
    goto LABEL_706;
  }
LABEL_708:
  v594 = *(char ***)(v569 + 24);
  v595 = *v594;
  v596 = v594[1];
  v597 = **v594;
  if (v597 <= -2)
  {
    do
    {
      v598 = (__clz(__rbit64(((*v595 >> 7) & ~*v595 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v595 = (_QWORD *)((char *)v595 + v598);
      v596 += 32 * v598;
      v597 = *(char *)v595;
    }
    while (v597 < -1);
  }
  if (v597 == 255)
    goto LABEL_997;
  while (2)
  {
    v599 = *((_QWORD *)v596 + 2);
    v600 = *(unsigned __int8 *)(v599 + 968);
    if (*(_BYTE *)(v599 + 968))
      _ZF = *(_QWORD *)(v599 + 136) == 0;
    else
      _ZF = 1;
    if (_ZF || *(_QWORD *)(v599 + 584) == 0)
      goto LABEL_963;
    v1875 = *((_QWORD *)v596 + 2);
    v603 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(v599 + 984) - *(_QWORD *)(v599 + 976)) >> 3);
    *((_QWORD *)&v1900 + 1) = object;
    v1904 = (__n128 *)&v1901[16];
    v1948 = xmmword_2103B83C0;
    v1947 = (float64x2_t **)oslog;
    v1950 = (__n128 *)v1949;
    v1951 = xmmword_2103B83C0;
    *(_OWORD *)v1901 = xmmword_2103B83C0;
    v1905 = xmmword_2103B83C0;
    if (v603 < 0xB)
      goto LABEL_727;
    v604 = 20;
    if (v603 > 0x14)
      v604 = v603;
    *(_QWORD *)v1901 = v604;
    v605 = operator new[]();
    if (*((void ***)&v1900 + 1) != object && *((_QWORD *)&v1900 + 1))
      MEMORY[0x212BC6368](*((_QWORD *)&v1900 + 1), 0xC0C80B8AA526DLL);
    *((_QWORD *)&v1900 + 1) = v605;
    v606 = *((_QWORD *)&v1905 + 1);
    if ((unint64_t)v1905 < v603)
    {
      v612 = 2 * v1905;
      if (2 * (uint64_t)v1905 <= v603)
        v612 = v603;
      *(_QWORD *)&v1905 = v612;
      v613 = v1904;
      v614 = operator new[]();
      v615 = (__n128 *)v614;
      if (v606)
      {
        v616 = 0;
        if (v606 < 4)
          goto LABEL_744;
        if ((unint64_t)(v614 - (_QWORD)v613) < 0x20)
          goto LABEL_744;
        v616 = v606 & 0xFFFFFFFFFFFFFFFCLL;
        v617 = (__n128 *)(v614 + 16);
        v618 = v613 + 1;
        v619 = v606 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          _Q1 = *v618;
          v617[-1] = v618[-1];
          *v617 = _Q1;
          v617 += 2;
          v618 += 2;
          v619 -= 4;
        }
        while (v619);
        if (v606 != v616)
        {
LABEL_744:
          v620 = v606 - v616;
          v621 = 8 * v616;
          v622 = &v613->n128_u64[v616];
          v623 = (_QWORD *)(v614 + v621);
          do
          {
            v624 = *v622++;
            *v623++ = v624;
            --v620;
          }
          while (v620);
        }
      }
      if (v1904 != (__n128 *)&v1901[16] && v1904 != 0)
        MEMORY[0x212BC6368](v1904, 0xC0C80B8AA526DLL);
      v1904 = v615;
      v607 = 0;
      *((_QWORD *)&v1948 + 1) = 0;
      *((_QWORD *)&v1951 + 1) = 0;
      v608 = v1948;
      if ((unint64_t)v1948 < v603)
      {
LABEL_728:
        v609 = 2 * v608;
        if (v609 <= v603)
          v609 = v603;
        *(_QWORD *)&v1948 = v609;
        v610 = operator new[]();
        if (v1947 != (float64x2_t **)oslog && v1947)
          MEMORY[0x212BC6368](v1947, 0xC0C80B8AA526DLL);
        v1947 = (float64x2_t **)v610;
        v607 = *((_QWORD *)&v1951 + 1);
        v611 = v1951;
        if ((unint64_t)v1951 >= v603)
          goto LABEL_769;
        goto LABEL_753;
      }
    }
    else
    {
LABEL_727:
      v607 = 0;
      *((_QWORD *)&v1948 + 1) = 0;
      *((_QWORD *)&v1951 + 1) = 0;
      v608 = v1948;
      if ((unint64_t)v1948 < v603)
        goto LABEL_728;
    }
    v611 = v1951;
    if ((unint64_t)v1951 < v603)
    {
LABEL_753:
      v626 = 2 * v611;
      if (v626 <= v603)
        v626 = v603;
      *(_QWORD *)&v1951 = v626;
      v627 = v1950;
      v628 = operator new[]();
      v629 = (__n128 *)v628;
      if (v607)
      {
        v630 = 0;
        if (v607 < 4)
          goto LABEL_761;
        if ((unint64_t)(v628 - (_QWORD)v627) < 0x20)
          goto LABEL_761;
        v630 = v607 & 0xFFFFFFFFFFFFFFFCLL;
        v631 = (__n128 *)(v628 + 16);
        v632 = v627 + 1;
        v633 = v607 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          _Q1 = *v632;
          v631[-1] = v632[-1];
          *v631 = _Q1;
          v631 += 2;
          v632 += 2;
          v633 -= 4;
        }
        while (v633);
        if (v607 != v630)
        {
LABEL_761:
          v634 = v607 - v630;
          v635 = 8 * v630;
          v636 = &v627->n128_u64[v630];
          v637 = (_QWORD *)(v628 + v635);
          do
          {
            v638 = *v636++;
            *v637++ = v638;
            --v634;
          }
          while (v634);
        }
      }
      if (v1950 != (__n128 *)v1949 && v1950 != 0)
        MEMORY[0x212BC6368](v1950, 0xC0C80B8AA526DLL);
      v1950 = v629;
    }
LABEL_769:
    v640 = *(uint64_t **)(v1875 + 976);
    v641 = *(uint64_t **)(v1875 + 984);
    while (v640 != v641)
    {
      v643 = *(int8x8_t *)(a1 + 14776);
      if (v643)
      {
        v644 = *((_DWORD *)v640 + 4);
        v645 = *((_DWORD *)v640 + 2);
        v646 = v645 ^ __ROR4__(v644, 13);
        v647 = (uint8x8_t)vcnt_s8(v643);
        v647.i16[0] = vaddlv_u8(v647);
        if (v647.u32[0] > 1uLL)
        {
          v648 = v646;
          if (*(_QWORD *)&v643 <= v646)
            v648 = v646 % *(_QWORD *)&v643;
        }
        else
        {
          v648 = (v643.i32[0] - 1) & v646;
        }
        v649 = *(uint64_t ***)(*(_QWORD *)(a1 + 14768) + 8 * v648);
        if (v649)
        {
          v650 = *v649;
          if (*v649)
          {
            v651 = *v640;
            if (v647.u32[0] < 2uLL)
            {
              v652 = *(_QWORD *)&v643 - 1;
              while (1)
              {
                v653 = v650[1];
                if (v653 == v646)
                {
                  if (*((_DWORD *)v650 + 8) == v644 && v650[2] == v651 && *((_DWORD *)v650 + 6) == v645)
                    goto LABEL_807;
                }
                else if ((v653 & v652) != v648)
                {
                  goto LABEL_798;
                }
                v650 = (uint64_t *)*v650;
                if (!v650)
                  goto LABEL_798;
              }
            }
            do
            {
              v654 = v650[1];
              if (v654 == v646)
              {
                if (*((_DWORD *)v650 + 8) == v644 && v650[2] == v651 && *((_DWORD *)v650 + 6) == v645)
                  goto LABEL_807;
              }
              else
              {
                if (v654 >= *(_QWORD *)&v643)
                  v654 %= *(_QWORD *)&v643;
                if (v654 != v648)
                  break;
              }
              v650 = (uint64_t *)*v650;
            }
            while (v650);
          }
        }
      }
LABEL_798:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 355, (uint64_t)"cameraPoseIter != camera_data_.end()", 36, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0);
      v655 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v655 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v656 = qword_254A6DE40;
        v657 = qword_254A6DE48;
        while (v656 != v657)
        {
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v656)(*(_QWORD *)(v656 + 8), "cameraPoseIter != camera_data_.end()", 36, "Cannot find camera pose.", 24);
          v656 += 16;
        }
      }
      v658 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v658 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      qword_254A6DE58(unk_254A6DE60, "cameraPoseIter != camera_data_.end()", 36, "Cannot find camera pose.", 24);
      v650 = 0;
LABEL_807:
      v659 = *((_QWORD *)&v1905 + 1);
      v660 = *((_QWORD *)&v1905 + 1) + 1;
      if (*((_QWORD *)&v1905 + 1) + 1 <= (unint64_t)v1905)
      {
        v663 = v1904;
      }
      else
      {
        if (2 * (uint64_t)v1905 > v660)
          v660 = 2 * v1905;
        *(_QWORD *)&v1905 = v660;
        v661 = v1904;
        v662 = operator new[]();
        v663 = (__n128 *)v662;
        if (v659)
        {
          v664 = 0;
          if (v659 < 4)
            goto LABEL_816;
          if ((unint64_t)(v662 - (_QWORD)v661) < 0x20)
            goto LABEL_816;
          v664 = v659 & 0xFFFFFFFFFFFFFFFCLL;
          v665 = (__n128 *)(v662 + 16);
          v666 = v661 + 1;
          v667 = v659 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q1 = *v666;
            v665[-1] = v666[-1];
            *v665 = _Q1;
            v665 += 2;
            v666 += 2;
            v667 -= 4;
          }
          while (v667);
          if (v659 != v664)
          {
LABEL_816:
            v668 = v659 - v664;
            v669 = 8 * v664;
            v670 = &v661->n128_u64[v664];
            v671 = (_QWORD *)(v662 + v669);
            do
            {
              v672 = *v670++;
              *v671++ = v672;
              --v668;
            }
            while (v668);
          }
        }
        if (v1904 != (__n128 *)&v1901[16] && v1904 != 0)
          MEMORY[0x212BC6368](v1904, 0xC0C80B8AA526DLL);
        v1904 = v663;
        v659 = *((_QWORD *)&v1905 + 1);
        v660 = *((_QWORD *)&v1905 + 1) + 1;
      }
      v663->n128_u64[v659] = (unint64_t)(v650 + 5);
      *((_QWORD *)&v1905 + 1) = v660;
      v674 = *(_QWORD *)&v1901[8];
      v675 = *(_QWORD *)&v1901[8] + 1;
      if ((unint64_t)(*(_QWORD *)&v1901[8] + 1) <= *(_QWORD *)v1901)
      {
        v678 = *((_QWORD *)&v1900 + 1);
      }
      else
      {
        if (2 * *(_QWORD *)v1901 > v675)
          v675 = 2 * *(_QWORD *)v1901;
        *(_QWORD *)v1901 = v675;
        v676 = (__n128 *)*((_QWORD *)&v1900 + 1);
        v677 = operator new[]();
        v678 = v677;
        if (v674)
        {
          v679 = 0;
          if (v674 < 4)
            goto LABEL_834;
          if ((unint64_t)(v677 - (_QWORD)v676) < 0x20)
            goto LABEL_834;
          v679 = v674 & 0xFFFFFFFFFFFFFFFCLL;
          v680 = (__n128 *)(v677 + 16);
          v681 = v676 + 1;
          v682 = v674 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q1 = *v681;
            v680[-1] = v681[-1];
            *v680 = _Q1;
            v680 += 2;
            v681 += 2;
            v682 -= 4;
          }
          while (v682);
          if (v674 != v679)
          {
LABEL_834:
            v683 = v674 - v679;
            v684 = 8 * v679;
            v685 = &v676->n128_u64[v679];
            v686 = (_QWORD *)(v677 + v684);
            do
            {
              v687 = *v685++;
              *v686++ = v687;
              --v683;
            }
            while (v683);
          }
        }
        if (*((void ***)&v1900 + 1) != object && *((_QWORD *)&v1900 + 1) != 0)
          MEMORY[0x212BC6368](*((_QWORD *)&v1900 + 1), 0xC0C80B8AA526DLL);
        *((_QWORD *)&v1900 + 1) = v678;
        v674 = *(_QWORD *)&v1901[8];
        v675 = *(_QWORD *)&v1901[8] + 1;
      }
      *(_QWORD *)(v678 + 8 * v674) = v640 + 14;
      *(_QWORD *)&v1901[8] = v675;
      v689 = *((_QWORD *)&v1948 + 1);
      v690 = *((_QWORD *)&v1948 + 1) + 1;
      if (*((_QWORD *)&v1948 + 1) + 1 <= (unint64_t)v1948)
      {
        v642 = v1947;
      }
      else
      {
        if (2 * (uint64_t)v1948 > v690)
          v690 = 2 * v1948;
        *(_QWORD *)&v1948 = v690;
        v691 = v1947;
        v692 = operator new[]();
        v642 = (float64x2_t **)v692;
        if (v689)
        {
          v693 = 0;
          if (v689 < 4)
            goto LABEL_852;
          if ((unint64_t)(v692 - (_QWORD)v691) < 0x20)
            goto LABEL_852;
          v693 = v689 & 0xFFFFFFFFFFFFFFFCLL;
          v694 = (__n128 *)(v692 + 16);
          v695 = (__n128 *)(v691 + 2);
          v696 = v689 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q1 = *v695;
            v694[-1] = v695[-1];
            *v694 = _Q1;
            v694 += 2;
            v695 += 2;
            v696 -= 4;
          }
          while (v696);
          if (v689 != v693)
          {
LABEL_852:
            v697 = v689 - v693;
            v698 = 8 * v693;
            v699 = &v691[v693];
            v700 = (_QWORD *)(v692 + v698);
            do
            {
              v701 = (uint64_t)*v699++;
              *v700++ = v701;
              --v697;
            }
            while (v697);
          }
        }
        if (v1947 != (float64x2_t **)oslog && v1947 != 0)
          MEMORY[0x212BC6368](v1947, 0xC0C80B8AA526DLL);
        v1947 = v642;
        v689 = *((_QWORD *)&v1948 + 1);
        v690 = *((_QWORD *)&v1948 + 1) + 1;
      }
      v642[v689] = (float64x2_t *)(v640 + 16);
      *((_QWORD *)&v1948 + 1) = v690;
      v640 += 19;
    }
    if (*(_QWORD *)&v1901[8] < 2uLL)
    {
      LOBYTE(v703) = 0;
      *((_QWORD *)&v1951 + 1) = 0;
      v704 = v1950;
      if (v1950 == (__n128 *)v1949)
        goto LABEL_948;
      goto LABEL_946;
    }
    v705 = v1947;
    v706 = *((_QWORD *)&v1900 + 1);
    v707 = v1904;
    v708 = *((_QWORD *)&v1905 + 1);
    v709 = *(float64x2_t *)**((_QWORD **)&v1900 + 1);
    v710 = **v1947;
    v711 = v1909;
    v1918 = v1909;
    v1919 = xmmword_2103B83C0;
    if (*((_QWORD *)&v1905 + 1))
    {
      if (*((_QWORD *)&v1905 + 1) < 0xBuLL)
      {
        v714 = 0;
        v715 = *((_QWORD *)&v1905 + 1);
      }
      else
      {
        v1862 = v709;
        v712 = 20;
        if (*((_QWORD *)&v1905 + 1) > 0x14uLL)
          v712 = *((_QWORD *)&v1905 + 1);
        *(_QWORD *)&v1919 = v712;
        is_mul_ok(v712, 0x30uLL);
        v713 = operator new[]();
        if (v1918 != v1909 && v1918)
          MEMORY[0x212BC6368](v1918, 0x1000C80EED21634);
        v1918 = (os_log_t *)v713;
        v714 = *((_QWORD *)&v1919 + 1);
        v709 = v1862;
        v715 = v708 - *((_QWORD *)&v1919 + 1);
        if (v708 <= *((_QWORD *)&v1919 + 1))
          goto LABEL_880;
      }
      v716 = 6 * v714;
      do
      {
        v717 = &v1918[v716];
        *((_OWORD *)v717 + 1) = 0uLL;
        *((_OWORD *)v717 + 2) = 0uLL;
        *(_OWORD *)v717 = 0uLL;
        v716 += 6;
        --v715;
      }
      while (v715);
      v713 = (uint64_t)v1918;
LABEL_880:
      v718 = 0;
      *((_QWORD *)&v1919 + 1) = v708;
      v719 = (double *)(v713 + 40);
      do
      {
        v720 = (float64_t *)v707->n128_u64[v718];
        v721 = *(double **)(v706 + 8 * v718);
        f64 = v705[v718]->f64;
        v723 = v721[1];
        v724 = f64[1];
        v725.f64[0] = *v720;
        v726 = v720[1];
        v728 = v720[2];
        v727 = v720[3];
        v730 = v720[4];
        v729 = v720[5];
        v731 = v720[6];
        v732 = v720[7];
        v733.f64[0] = v720[8];
        v734 = v720[9];
        v736 = v720[10];
        v735 = v720[11];
        v737 = *v720 * v727 + v730 * v732 + v733.f64[0] * v735;
        v738 = v727 * v726 + v732 * v729 + v735 * v734;
        v739 = v727 * v728 + v732 * v731;
        v740 = -v737;
        v741 = sqrt(*v721 * *v721 + v723 * v723 + 1.0);
        v742 = *v721 / v741;
        v743 = v723 / v741;
        v744 = 1.0 / v741;
        v745 = sqrt(*f64 * *f64 + v724 * v724 + 1.0);
        v746 = *f64 / v745;
        v747 = v724 / v745;
        v748 = 1.0 / v745;
        v749 = v743 * v748 - v744 * v747;
        v750 = v744 * v746 - v742 * v748;
        v751 = v742 * v747 - v743 * v746;
        v725.f64[1] = v726;
        v754.f64[1] = v729;
        v733.f64[1] = v734;
        v752 = v728 * v749;
        _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v725, v749), v754, v750), v733, v751);
        v754.f64[0] = v752 + v731 * v750 + v736 * v751;
        _D1 = v749 * v726 + v750 * v729 + v751 * v734;
        v756 = v752 + v750 * v731 + v751 * v736;
        __asm { FMLA            D4, D1, V0.D[1] }
        v758 = sqrt(_D4 + v756 * v754.f64[0]);
        if (v758 == 0.0)
          _Q1.n128_f64[0] = 1.0;
        else
          _Q1.n128_f64[0] = 1.0 / v758;
        _Q3 = vmulq_f64(v754, (float64x2_t)_Q1);
        *(float64x2_t *)(v719 - 5) = vmulq_n_f64(_Q0, _Q1.n128_f64[0]);
        *(v719 - 3) = _Q3.f64[0];
        *(v719 - 2) = v740;
        *(v719 - 1) = -v738;
        *v719 = -(v739 + v735 * v736);
        ++v718;
        v719 += 6;
      }
      while (v708 > v718);
      v711 = v1918;
    }
    v768 = (__n128)vmulq_f64(v709, v709);
    v768.n128_f64[0] = sqrt(vaddvq_f64((float64x2_t)v768) + 1.0);
    _Q1 = (__n128)vdupq_lane_s64(v768.n128_i64[0], 0);
    _Q11 = vdivq_f64(v709, (float64x2_t)_Q1);
    v4.f64[0] = 1.0 / v768.n128_f64[0];
    v760 = *(double *)(v707->n128_u64[0] + 24);
    _D18 = *(double *)(v707->n128_u64[0] + 32);
    _D16 = *(double *)(v707->n128_u64[0] + 40);
    _D6 = *(double *)(v707->n128_u64[0] + 48);
    v764 = *(double *)(v707->n128_u64[0] + 56);
    v765 = *(double *)(v707->n128_u64[0] + 72);
    v766 = *(double *)(v707->n128_u64[0] + 80);
    v767 = *(double *)(v707->n128_u64[0] + 88);
    v768.n128_f64[0] = -(*(double *)v707->n128_u64[0] * v760 + _D18 * v764 + *(double *)(v707->n128_u64[0] + 64) * v767);
    _Q1.n128_f64[0] = -(v760 * *(double *)(v707->n128_u64[0] + 8) + v764 * _D16 + v767 * v765);
    v562.n128_f64[0] = -(v760 * *(double *)(v707->n128_u64[0] + 16) + v764 * _D6 + v767 * v766);
    v5.f64[0] = 0.0;
    v769 = 0.0;
    v770 = 0.0;
    if ((_DWORD)v708)
    {
      v771 = v708 - 1;
      if (v708 != 1)
      {
        __asm
        {
          FMLA            D20, D18, V11.D[1]
          FMLA            D20, D16, V11.D[1]
        }
        _D23 = _D20 + v4.f64[0] * v765;
        __asm { FMLA            D20, D6, V11.D[1] }
        v776 = _D20 + v4.f64[0] * v766;
        v777 = v711 + 9;
        v770 = 0.0;
        do
        {
          v778 = *((double *)v777 - 1);
          _Q26 = *(float64x2_t *)(v777 - 3);
          __asm { FMLA            D27, D23, V26.D[1] }
          v780 = _D27 + v776 * v778;
          v781 = *((double *)v777 + 2);
          v782 = *(_OWORD *)v777;
          v777 += 6;
          _V29.D[1] = *((_QWORD *)&v782 + 1);
          _D31 = _Q26.f64[1];
          __asm
          {
            FMLA            D30, D31, V29.D[1]
            FMLA            D29, D1, V26.D[1]
          }
          v770 = v770 + v780 * (_D30 + v781 * v778 - (_D29 + v562.n128_f64[0] * v778));
          v769 = v769 + v780 * v780;
          --v771;
        }
        while (v771);
      }
    }
    *(double *)&v787 = sqrt(vaddvq_f64(vmulq_f64(v710, v710)) + 1.0);
    _Q24 = vdivq_f64(v710, (float64x2_t)vdupq_lane_s64(v787, 0));
    _Q26.f64[0] = 1.0 / *(double *)&v787;
    v565.f64[0] = 0.0;
    if (fabs(v769) < 2.22044605e-16)
      goto LABEL_897;
    v5.f64[0] = v770 / v769;
    if (COERCE__INT64(fabs(v770 / v769)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_897;
    v789 = 0.0;
    v790 = 0.0;
    if ((_DWORD)v708)
    {
      v791 = v708 - 1;
      if (v708 != 1)
      {
        __asm
        {
          FMLA            D3, D18, V24.D[1]
          FMLA            D4, D16, V24.D[1]
        }
        _D4 = _D4 + _Q26.f64[0] * v765;
        __asm { FMLA            D5, D6, V24.D[1] }
        v796 = _D5 + _Q26.f64[0] * v766;
        v797 = v711 + 9;
        do
        {
          v798 = *((double *)v797 - 1);
          _Q7 = *(_OWORD *)(v797 - 3);
          __asm { FMLA            D16, D4, V7.D[1] }
          v801 = _D16 + v796 * v798;
          v802 = *((double *)v797 + 2);
          v803 = *(_OWORD *)v797;
          v797 += 6;
          _Q18.f64[1] = *((float64_t *)&v803 + 1);
          _D22 = *((_QWORD *)&_Q7 + 1);
          __asm
          {
            FMLA            D19, D22, V18.D[1]
            FMLA            D18, D1, V7.D[1]
          }
          v790 = v790 + v801 * (_D19 + v802 * v798 - (_Q18.f64[0] + v562.n128_f64[0] * v798));
          v789 = v789 + v801 * v801;
          --v791;
        }
        while (v791);
      }
    }
    v768.n128_f64[0] = fabs(v789);
    _Q1.n128_u64[0] = 0x3CB0000000000000;
    if (v768.n128_f64[0] >= 2.22044605e-16)
    {
      v565.f64[0] = v790 / v789;
      v703 = COERCE__INT64(fabs(v790 / v789)) < 0x7FF0000000000000;
      *((_QWORD *)&v1919 + 1) = 0;
      if (v711 != v1909)
      {
LABEL_898:
        if (v711)
        {
          v1857 = _Q24;
          v1848 = _Q26;
          v1853 = v565;
          MEMORY[0x212BC6368](v711, 0x1000C80EED21634, v768, _Q1, v562);
          _Q26 = v1848;
          v565 = v1853;
          _Q24 = v1857;
        }
      }
    }
    else
    {
LABEL_897:
      v703 = 0;
      *((_QWORD *)&v1919 + 1) = 0;
      if (v711 != v1909)
        goto LABEL_898;
    }
    if (!v703)
      goto LABEL_945;
    if (*(_BYTE *)(v1875 + 968))
      v806 = v1875 + 40;
    else
      v806 = 0;
    v807 = *(int8x8_t *)(a1 + 14776);
    if (!*(_QWORD *)&v807)
      goto LABEL_1110;
    v808 = *(_DWORD *)(v806 + 912);
    v809 = *(_DWORD *)(v806 + 904);
    v810 = v809 ^ __ROR4__(v808, 13);
    v811 = (uint8x8_t)vcnt_s8(v807);
    v811.i16[0] = vaddlv_u8(v811);
    if (v811.u32[0] > 1uLL)
    {
      v812 = v810;
      if (*(_QWORD *)&v807 <= v810)
        v812 = v810 % *(_QWORD *)&v807;
    }
    else
    {
      v812 = (v807.i32[0] - 1) & v810;
    }
    v813 = *(uint64_t ***)(*(_QWORD *)(a1 + 14768) + 8 * v812);
    if (!v813 || (v814 = *v813) == 0)
    {
LABEL_1110:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 400, (uint64_t)"anchorCameraIter != camera_data_.end()", 38, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0);
      v941 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v941 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v942 = qword_254A6DE40;
        for (i = qword_254A6DE48; v942 != i; v942 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v942)(*(_QWORD *)(v942 + 8), "anchorCameraIter != camera_data_.end()", 38, "Cannot find camera pose.", 24);
      }
      v944 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v944 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        abort();
      result = qword_254A6DE58(unk_254A6DE60, "anchorCameraIter != camera_data_.end()", 38, "Cannot find camera pose.", 24);
      __break(1u);
      return result;
    }
    v815 = *(_QWORD *)(v806 + 896);
    if (v811.u32[0] < 2uLL)
    {
      v816 = *(_QWORD *)&v807 - 1;
      while (1)
      {
        v818 = v814[1];
        if (v818 == v810)
        {
          if (*((_DWORD *)v814 + 8) == v808 && v814[2] == v815 && *((_DWORD *)v814 + 6) == v809)
            goto LABEL_928;
        }
        else if ((v818 & v816) != v812)
        {
          goto LABEL_1110;
        }
        v814 = (uint64_t *)*v814;
        if (!v814)
          goto LABEL_1110;
      }
    }
    while (1)
    {
      v817 = v814[1];
      if (v817 == v810)
        break;
      if (v817 >= *(_QWORD *)&v807)
        v817 %= *(_QWORD *)&v807;
      if (v817 != v812)
        goto LABEL_1110;
LABEL_914:
      v814 = (uint64_t *)*v814;
      if (!v814)
        goto LABEL_1110;
    }
    if (*((_DWORD *)v814 + 8) != v808 || v814[2] != v815 || *((_DWORD *)v814 + 6) != v809)
      goto LABEL_914;
LABEL_928:
    *(_QWORD *)&_Q11.f64[1] = vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).u64[0];
    v819 = vmulq_f64(v4, v5);
    _Q2 = vmulq_n_f64(_Q11, v5.f64[0]);
    v821 = *(float64x2_t *)(v814 + 33);
    _D5 = v814[39];
    v823 = *(float64x2_t *)(v814 + 37);
    v824 = *((double *)v814 + 43);
    v825 = *(float64x2_t *)(v814 + 41);
    v826 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v821, _Q2.f64[0]), v823, _Q2, 1), v825, v819.f64[0]);
    __asm { FMLA            D18, D5, V2.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v824, v819.f64[0]);
    *(_QWORD *)&v819.f64[0] = v814[47];
    v562 = *(__n128 *)(v814 + 45);
    _Q18 = vaddq_f64(v819, _Q18);
    *(_QWORD *)&v827 = *(_OWORD *)&vmulq_f64(_Q26, v565);
    *(_QWORD *)&_Q24.f64[1] = vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL).u64[0];
    _Q1 = vmulq_n_f64(_Q24, v565.f64[0]);
    __asm { FMLA            D3, D5, V1.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v824, v827);
    _Q1 = (__n128)vaddq_f64((float64x2_t)v562, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v821, _Q1.f64[0]), v823, _Q1, 1), v825, v827));
    v829 = *(_OWORD *)&vaddq_f64(v819, _Q3);
    *(float64x2_t *)(v806 + 8) = vaddq_f64((float64x2_t)v562, v826);
    *(float64_t *)(v806 + 24) = _Q18.f64[0];
    if (*(_BYTE *)(v1875 + 968))
      v830 = v1875 + 40;
    else
      v830 = 0;
    *(_QWORD *)(v830 + 472) = v829;
    *(__n128 *)(v830 + 456) = _Q1;
    if (*(_BYTE *)(v1875 + 968))
      v831 = v1875 + 40;
    else
      v831 = 0;
    if (!*(_QWORD *)(v831 + 96))
    {
      LOBYTE(v703) = 0;
LABEL_945:
      *((_QWORD *)&v1951 + 1) = 0;
      v704 = v1950;
      if (v1950 == (__n128 *)v1949)
        goto LABEL_948;
      goto LABEL_946;
    }
    if (*(_QWORD *)(v831 + 544))
    {
      v832 = sub_20FB9A9C0(v1846, v1875, 0);
      if (*(_BYTE *)(v1875 + 968))
        v833 = v1875 + 40;
      else
        v833 = 0;
      *(double *)(v833 + 104) = v832;
      v834 = sub_20FB9A9C0(v1846, v1875, 1);
      if (*(_BYTE *)(v1875 + 968))
        v835 = v1875 + 40;
      else
        v835 = 0;
      *(double *)(v835 + 552) = v834;
      LOBYTE(v703) = 1;
      *((_QWORD *)&v1951 + 1) = 0;
      v704 = v1950;
      if (v1950 == (__n128 *)v1949)
        goto LABEL_948;
    }
    else
    {
      LOBYTE(v703) = 0;
      *((_QWORD *)&v1951 + 1) = 0;
      v704 = v1950;
      if (v1950 == (__n128 *)v1949)
        goto LABEL_948;
    }
LABEL_946:
    if (v704)
      MEMORY[0x212BC6368](v704, 0x1000C8000313F17);
LABEL_948:
    *((_QWORD *)&v1948 + 1) = 0;
    if (v1947 != (float64x2_t **)oslog && v1947)
      MEMORY[0x212BC6368](v1947, 0x1000C8000313F17);
    *((_QWORD *)&v1905 + 1) = 0;
    if (v1904 != (__n128 *)&v1901[16] && v1904)
      MEMORY[0x212BC6368](v1904, 0x1000C8000313F17);
    *(_QWORD *)&v1901[8] = 0;
    if (*((void ***)&v1900 + 1) != object && *((_QWORD *)&v1900 + 1))
      MEMORY[0x212BC6368](*((_QWORD *)&v1900 + 1), 0x1000C8000313F17);
    if (!v703)
    {
      v599 = *((_QWORD *)v596 + 2);
      v600 = *(unsigned __int8 *)(v599 + 968);
LABEL_963:
      if (v600)
      {
        *(_QWORD *)(v599 + 48) = 0;
        *(_QWORD *)(v599 + 56) = 0;
        *(_QWORD *)(v599 + 64) = 0;
        v844 = *((_QWORD *)v596 + 2);
        if (*(_BYTE *)(v844 + 968))
          v845 = (_QWORD *)(v844 + 40);
        else
          v845 = 0;
        v845[57] = 0;
        v845[58] = 0;
        v845[59] = 0;
      }
LABEL_968:
      v847 = *((char *)v595 + 1);
      v595 = (_QWORD *)((char *)v595 + 1);
      LOBYTE(v846) = v847;
      v596 += 32;
      if (v847 > -2)
        goto LABEL_712;
      goto LABEL_969;
    }
    if (v567 > v568)
    {
      v836 = *((_QWORD *)v596 + 2);
      v837 = *(double *)(a1 + 520)
           * (*(double *)(a1 + 8144) * *(double *)(a1 + 704 + 8 * *(unsigned __int8 *)(a1 + 11680))
            + (1.0 - *(double *)(a1 + 8144)) * *(double *)(a1 + 680 + 8 * *(unsigned __int8 *)(a1 + 11680)));
      v838 = *(double *)(a1 + 592);
      v839 = *(_QWORD *)(a1 + 1784);
      LODWORD(object[0]) = 0;
      if (!sub_20FB9AC50(v1846, v836, v839, 1, (int *)object, (uint64_t)v1909, (uint64_t)v1909, v837, v838, 0.0, 0.0))goto LABEL_968;
    }
    v840 = *((_QWORD *)v596 + 2);
    v841 = *(char **)(a1 + 14688);
    v842 = *(_QWORD *)(a1 + 14696);
    if ((unint64_t)v841 < v842)
    {
      *(_QWORD *)v841 = v840;
      v843 = (uint64_t)(v841 + 8);
      goto LABEL_991;
    }
    v849 = *v1844;
    v850 = v841 - *v1844;
    v851 = v850 >> 3;
    v852 = (v850 >> 3) + 1;
    if (v852 >> 61)
LABEL_2062:
      sub_20E867F44();
    v853 = v842 - (_QWORD)v849;
    if (v853 >> 2 > v852)
      v852 = v853 >> 2;
    if ((unint64_t)v853 >= 0x7FFFFFFFFFFFFFF8)
      v854 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v854 = v852;
    if (v854)
    {
      if (v854 >> 61)
        sub_20E877A38();
      v855 = v854;
      v856 = operator new(8 * v854);
      v854 = v855;
      v857 = &v856[8 * v851];
      *v857 = v840;
      v843 = (uint64_t)(v857 + 1);
      v858 = (char *)(v841 - v849);
      if (v841 == v849)
        goto LABEL_989;
LABEL_982:
      v859 = (unint64_t)(v858 - 8);
      if (v859 < 0x58)
        goto LABEL_2137;
      if ((unint64_t)(v841 - v856 - v850) < 0x20)
        goto LABEL_2137;
      v860 = (v859 >> 3) + 1;
      v861 = 8 * (v860 & 0x3FFFFFFFFFFFFFFCLL);
      v862 = &v841[-v861];
      v857 = (_QWORD *)((char *)v857 - v861);
      v863 = (__n128 *)&v856[8 * v851 - 16];
      v864 = (__n128 *)(v841 - 16);
      v865 = v860 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        _Q1 = v864[-1];
        v866 = *v864;
        v863[-1] = _Q1;
        *v863 = v866;
        v863 -= 2;
        v864 -= 2;
        v865 -= 4;
      }
      while (v865);
      v841 = v862;
      if (v860 != (v860 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_2137:
        do
        {
          v867 = *((_QWORD *)v841 - 1);
          v841 -= 8;
          *--v857 = v867;
        }
        while (v841 != v849);
      }
      v841 = *v1844;
    }
    else
    {
      v856 = 0;
      v857 = (_QWORD *)(8 * v851);
      *(_QWORD *)(8 * v851) = v840;
      v843 = 8 * v851 + 8;
      v858 = (char *)(v841 - v849);
      if (v841 != v849)
        goto LABEL_982;
    }
LABEL_989:
    *(_QWORD *)(a1 + 14680) = v857;
    *(_QWORD *)(a1 + 14688) = v843;
    *(_QWORD *)(a1 + 14696) = &v856[8 * v854];
    if (v841)
      operator delete(v841);
LABEL_991:
    *(_QWORD *)(a1 + 14688) = v843;
    v868 = *((char *)v595 + 1);
    v595 = (_QWORD *)((char *)v595 + 1);
    LOBYTE(v846) = v868;
    v596 += 32;
    if (v868 <= -2)
    {
      do
      {
LABEL_969:
        v848 = (__clz(__rbit64(((*v595 >> 7) & ~*v595 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v595 = (_QWORD *)((char *)v595 + v848);
        v596 += 32 * v848;
        v846 = *(char *)v595;
      }
      while (v846 < -1);
    }
LABEL_712:
    if (v846 != 255)
      continue;
    break;
  }
LABEL_997:
  kdebug_trace();
  v869 = **(_DWORD **)(a1 + 2856);
  v870 = *(_QWORD *)(a1 + 2480);
  v871 = *(_QWORD *)(a1 + 2488) - v870;
  if (!v871)
    goto LABEL_1004;
  v872 = 0;
  v873 = v871 >> 2;
  if (v873 <= 1)
    v873 = 1;
  while (*(_DWORD *)(v870 + 4 * v872) != v869)
  {
    if (v873 == ++v872)
      goto LABEL_1004;
  }
  if ((_DWORD)v872 == -1)
  {
LABEL_1004:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2794, (uint64_t)"first_frame_index != -1", 23, (uint64_t)"First frame of incoming bundle not present in previous estimate.", 64, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    LODWORD(v872) = -1;
  }
  v874 = *(_DWORD *)(a1 + 8180);
  if (v869 != v874)
  {
    *(_BYTE *)(a1 + 7680) = v874 == -1;
    sub_20F82FD50(v1906);
    if (**(int **)(*(_QWORD *)v1906 + 56) > 2)
      goto LABEL_1286;
    v884 = *(unsigned __int8 *)(*(_QWORD *)v1906 + 72);
    v885 = sub_20E8C31DC(*(uint64_t *)v1906, "OSLogSurrogateAppender", 1, 0);
    v886 = v885;
    if (!v884 && v885 == 0)
      goto LABEL_1286;
    object[0] = v1906;
    object[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    object[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v1896) = 2;
    *((_QWORD *)&v1896 + 1) = "unknown file";
    LODWORD(__p) = 2813;
    v1899 = 0;
    *(_QWORD *)&__src = "unknown function";
    *((_QWORD *)&__src + 1) = 0;
    v888 = *(_QWORD *)object[0];
    if (*(char *)(*(_QWORD *)object[0] + 39) < 0)
    {
      v890 = *(const char **)(v888 + 16);
      v889 = *(_QWORD *)(v888 + 24);
      v1879 = *(_QWORD *)object[0] + 16;
      v1884 = *(_QWORD *)object[0];
      v1006 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1006 & 1) != 0)
        goto LABEL_1205;
    }
    else
    {
      v889 = *(unsigned __int8 *)(*(_QWORD *)object[0] + 39);
      v890 = (const char *)(*(_QWORD *)object[0] + 16);
      v1879 = (uint64_t)v890;
      v1884 = *(_QWORD *)object[0];
      v891 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v891 & 1) != 0)
        goto LABEL_1205;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v1909);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1909);
      if (LOBYTE(v1909[3]) && SHIBYTE(v1909[2]) < 0)
        operator delete(v1909[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_1205:
    if (byte_254A4A4F8[23] >= 0)
      v1007 = byte_254A4A4F8;
    else
      v1007 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1008 = byte_254A4A4F8[23];
    else
      v1008 = *(_QWORD *)&byte_254A4A4F8[8];
    v1909[0] = os_log_create(v1007, v890);
    v1009 = &v1909[1];
    if (v1008 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1008 >= 0x17)
    {
      v1010 = v886;
      v1011 = v890;
      v1012 = v884;
      v1013 = (v1008 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1008 | 7) != 0x17)
        v1013 = v1008 | 7;
      v1014 = v1013 + 1;
      v1009 = operator new(v1013 + 1);
      v1909[3] = (os_log_t)(v1014 | 0x8000000000000000);
      v1909[1] = v1009;
      v1909[2] = (os_log_t)v1008;
      v884 = v1012;
      v890 = v1011;
      v886 = v1010;
    }
    else
    {
      HIBYTE(v1909[3]) = v1008;
      if (!v1008)
      {
LABEL_1219:
        *((_BYTE *)&v1009->isa + v1008) = 0;
        LOBYTE(v1909[4]) = 1;
        v1015 = &v1909[5];
        if (v889 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v889 >= 0x17)
        {
          v1016 = (v889 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v889 | 7) != 0x17)
            v1016 = v889 | 7;
          v1017 = v1016 + 1;
          v1015 = operator new(v1016 + 1);
          v1909[7] = (os_log_t)(v1017 | 0x8000000000000000);
          v1909[5] = v1015;
          v1909[6] = (os_log_t)v889;
        }
        else
        {
          HIBYTE(v1909[7]) = v889;
          if (!v889)
            goto LABEL_1227;
        }
        memmove(v1015, v890, v889);
LABEL_1227:
        *((_BYTE *)&v1015->isa + v889) = 0;
        LOBYTE(v1909[8]) = 1;
        v1018 = v1909[0];
        if (SHIBYTE(v1909[7]) < 0)
          operator delete(v1909[5]);
        if (LOBYTE(v1909[4]) && SHIBYTE(v1909[3]) < 0)
          operator delete(v1909[1]);
        if (v1909[0])
          os_release(v1909[0]);
        if (v886 && *(_QWORD *)(v886 + 24))
        {
          v1019 = _os_log_pack_size();
          v1020 = operator new(v1019, (std::align_val_t)8uLL);
          v1021 = operator new();
          v1022 = (std::__shared_weak_count *)v1021;
          v1021[1].isa = 0;
          v1023 = (unint64_t *)&v1021[1];
          v1021->isa = (Class)&off_24C9ABB80;
          v1021[2].isa = 0;
          v1021[3].isa = (Class)v1020;
          v1909[0] = v1020;
          v1909[1] = v1020;
          v1909[2] = v1021;
          do
            v1024 = __ldxr(v1023);
          while (__stxr(v1024 + 1, v1023));
          memset(&v1909[3], 0, 24);
          do
            v1025 = __ldaxr(v1023);
          while (__stlxr(v1025 - 1, v1023));
          if (!v1025)
          {
            (*((void (**))v1021->isa + 2))(v1021);
            std::__shared_weak_count::__release_weak(v1022);
          }
          v1026 = v1909[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v1027 = operator new();
          v1028 = *(unsigned __int8 *)(v1884 + 39);
          v1029 = v1879;
          if ((v1028 & 0x80u) != 0)
          {
            v1029 = *(_QWORD *)(v1884 + 16);
            v1028 = *(_QWORD *)(v1884 + 24);
          }
          *(_QWORD *)v1027 = v1026;
          *(_OWORD *)(v1027 + 8) = *(_OWORD *)&v1909[1];
          v1909[1] = 0;
          v1909[2] = 0;
          *(_OWORD *)(v1027 + 24) = *(_OWORD *)&v1909[3];
          v1909[3] = 0;
          v1909[4] = 0;
          *(_QWORD *)(v1027 + 40) = v1029;
          *(_QWORD *)(v1027 + 48) = v1028;
          *(_BYTE *)(v1027 + 56) = 2;
          *(_QWORD *)&v1952 = 0;
          *(_QWORD *)oslog = v1027;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v886 + 24) + 40))(*(_QWORD *)(v886 + 24), oslog);
          v1030 = *(_QWORD *)oslog;
          *(_QWORD *)oslog = 0;
          if (v1030)
          {
            v1031 = *(std::__shared_weak_count **)(v1030 + 32);
            if (v1031)
            {
              v1032 = (unint64_t *)&v1031->__shared_owners_;
              do
                v1033 = __ldaxr(v1032);
              while (__stlxr(v1033 - 1, v1032));
              if (!v1033)
              {
                ((void (*)(std::__shared_weak_count *))v1031->__on_zero_shared)(v1031);
                std::__shared_weak_count::__release_weak(v1031);
              }
            }
            v1034 = *(std::__shared_weak_count **)(v1030 + 16);
            if (v1034)
            {
              v1035 = (unint64_t *)&v1034->__shared_owners_;
              do
                v1036 = __ldaxr(v1035);
              while (__stlxr(v1036 - 1, v1035));
              if (!v1036)
              {
                ((void (*)(std::__shared_weak_count *))v1034->__on_zero_shared)(v1034);
                std::__shared_weak_count::__release_weak(v1034);
              }
            }
            MEMORY[0x212BC6398](v1030, 0x10F0C40B62ED6C6);
            v1037 = v1952;
            *(_QWORD *)&v1952 = 0;
            if (v1037)
            {
              v1038 = *(std::__shared_weak_count **)(v1037 + 32);
              if (v1038)
              {
                v1039 = (unint64_t *)&v1038->__shared_owners_;
                do
                  v1040 = __ldaxr(v1039);
                while (__stlxr(v1040 - 1, v1039));
                if (!v1040)
                {
                  ((void (*)(std::__shared_weak_count *))v1038->__on_zero_shared)(v1038);
                  std::__shared_weak_count::__release_weak(v1038);
                }
              }
              v1041 = *(std::__shared_weak_count **)(v1037 + 16);
              if (v1041)
              {
                v1042 = (unint64_t *)&v1041->__shared_owners_;
                do
                  v1043 = __ldaxr(v1042);
                while (__stlxr(v1043 - 1, v1042));
                if (!v1043)
                {
                  ((void (*)(std::__shared_weak_count *))v1041->__on_zero_shared)(v1041);
                  std::__shared_weak_count::__release_weak(v1041);
                }
              }
              MEMORY[0x212BC6398](v1037, 0x10F0C40B62ED6C6);
            }
          }
          v1044 = (std::__shared_weak_count *)v1909[4];
          if (v1909[4])
          {
            v1045 = (unint64_t *)&v1909[4][1];
            do
              v1046 = __ldaxr(v1045);
            while (__stlxr(v1046 - 1, v1045));
            if (!v1046)
            {
              ((void (*)(std::__shared_weak_count *))v1044->__on_zero_shared)(v1044);
              std::__shared_weak_count::__release_weak(v1044);
            }
          }
          v1047 = (std::__shared_weak_count *)v1909[2];
          if (v1909[2])
          {
            v1048 = (unint64_t *)&v1909[2][1];
            do
              v1049 = __ldaxr(v1048);
            while (__stlxr(v1049 - 1, v1048));
            if (!v1049)
            {
              ((void (*)(std::__shared_weak_count *))v1047->__on_zero_shared)(v1047);
              std::__shared_weak_count::__release_weak(v1047);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1018, OS_LOG_TYPE_DEBUG);
          LOWORD(v1909[0]) = 0;
          v1050 = (void *)_os_log_send_and_compose_impl();
          if (v1050)
            free(v1050);
        }
        if (v884)
        {
          sub_20E8C003C((uint64_t)object, "Marginalizing...");
          sub_20E863570((uint64_t)object);
        }
        sub_20E863570((uint64_t)object);
        v1051 = v1899;
        if (v1899)
        {
          v1052 = (unint64_t *)&v1899->__shared_owners_;
          do
            v1053 = __ldaxr(v1052);
          while (__stlxr(v1053 - 1, v1052));
          if (!v1053)
          {
            ((void (*)(std::__shared_weak_count *))v1051->__on_zero_shared)(v1051);
            std::__shared_weak_count::__release_weak(v1051);
          }
        }
LABEL_1286:
        v1054 = a1;
        v1055 = (_QWORD *)(a1 + 8152);
        *(_DWORD *)(a1 + 8180) = v869;
        v1056 = *(_QWORD *)(a1 + 2280) + 168 * (int)v872;
        v1057 = *(_QWORD *)(a1 + 5056);
        v1058 = *(_OWORD *)(v1056 + 112);
        v1059 = *(_OWORD *)(v1056 + 128);
        v1060 = *(_OWORD *)(v1056 + 144);
        *(_QWORD *)(v1057 + 160) = *(_QWORD *)(v1056 + 160);
        *(_OWORD *)(v1057 + 128) = v1059;
        *(_OWORD *)(v1057 + 144) = v1060;
        v1061 = *(_OWORD *)(v1056 + 96);
        v1063 = *(_OWORD *)(v1056 + 48);
        v1062 = *(_OWORD *)(v1056 + 64);
        *(_OWORD *)(v1057 + 80) = *(_OWORD *)(v1056 + 80);
        *(_OWORD *)(v1057 + 96) = v1061;
        *(_OWORD *)(v1057 + 48) = v1063;
        *(_OWORD *)(v1057 + 64) = v1062;
        v1064 = *(_OWORD *)v1056;
        v1065 = *(_OWORD *)(v1056 + 32);
        *(_OWORD *)(v1057 + 16) = *(_OWORD *)(v1056 + 16);
        *(_OWORD *)(v1057 + 32) = v1065;
        *(_OWORD *)v1057 = v1064;
        *(_OWORD *)(v1057 + 112) = v1058;
        v1066 = *(_DWORD *)(a1 + 8204);
        if (!v1066)
        {
LABEL_1297:
          v1074 = *(NSObject **)(v1054 + 5152);
          LODWORD(v1909[0]) = -1840700269 * ((*(_QWORD *)(v1054 + 5064) - *(_QWORD *)(v1054 + 5056)) >> 3)
                            + 2 * ((*(_QWORD *)(v1054 + 5088) - *(_QWORD *)(v1054 + 5080)) >> 5)
                            + ((*(_QWORD *)(v1054 + 5112) - *(_QWORD *)(v1054 + 5104)) >> 3)
                            + ((*(_QWORD *)(v1054 + 5136) - *(_QWORD *)(v1054 + 5128)) >> 3);
          HIDWORD(v1909[0]) = v1909[0];
          LODWORD(v1909[1]) = v1909[0];
          v1909[2] = v1074;
          LODWORD(v1909[3]) = 0;
          sub_20FC8C440((uint64_t)v1055, (unsigned int *)v1909);
          v995 = a1;
          goto LABEL_1298;
        }
        if (*(_DWORD *)(a1 + 8212) != v869)
        {
          sub_20E863438((uint64_t)v1909);
          sub_20E86A980(&v1909[2], (uint64_t)"buffered_bundle_prior_info_.frame_id:  ", 39);
          v1810 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1810, (uint64_t)"first_frame_id: ", 16);
          v1811 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1811, (uint64_t)", prev_bundle_prior_info_frame_id: ", 35);
          v1812 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1812, (uint64_t)"\n", 1);
          sub_20E86A980(&v1909[2], (uint64_t)"Is it going to slide: ", 22);
          v1813 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1813, (uint64_t)" of frame : ", 12);
          v1814 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v1814, (uint64_t)"\n", 1);
          sub_20E923E88(v1909, object);
          if (SHIBYTE(object[2]) >= 0)
            v1815 = object;
          else
            v1815 = (void **)object[0];
          if (SHIBYTE(object[2]) >= 0)
            v1816 = HIBYTE(object[2]);
          else
            v1816 = (uint64_t)object[1];
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2831, (uint64_t)"", 0, (uint64_t)v1815, v1816, (void (*)(void **))sub_21023DDB0);
          if (SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          abort();
        }
        v1067 = *(_DWORD *)(a1 + 8200);
        v1068 = (v1067 * v1066);
        if (*(_QWORD *)(a1 + 8160) >= v1068)
        {
          if (!(_DWORD)v1068)
          {
            v1054 = a1;
LABEL_1295:
            *(_DWORD *)(v1054 + 8168) = v1067;
            *(_DWORD *)(v1054 + 8172) = v1066;
            *(_QWORD *)(v1054 + 8176) = *(_QWORD *)(v1054 + 8208);
            v1072 = *(void **)(v1054 + 5176);
            v1073 = *(_QWORD *)(v1054 + 5184) - (_QWORD)v1072;
            if (v1073 >= 1)
              memset(v1072, 1, v1073);
            goto LABEL_1297;
          }
          v1071 = (void *)*v1055;
          v1069 = 8 * v1068;
        }
        else
        {
          if (*v1055)
            MEMORY[0x212BC6368](*v1055, 0x1000C8000313F17);
          *(_QWORD *)(a1 + 8152) = 0;
          v1069 = 8 * v1068;
          v1070 = (8 * v1068 + 31) & 0xFFFFFFFE0;
          *(_QWORD *)(a1 + 8160) = v1070 >> 3;
          v1071 = operator new(v1070, (std::align_val_t)0x20uLL);
          *v1055 = v1071;
        }
        v1054 = a1;
        memcpy(v1071, *(const void **)(a1 + 8184), v1069);
        v1067 = *(_DWORD *)(a1 + 8200);
        v1066 = *(_DWORD *)(a1 + 8204);
        goto LABEL_1295;
      }
    }
    memmove(v1009, v1007, v1008);
    goto LABEL_1219;
  }
  sub_20F82FD50(v1906);
  if (**(int **)(*(_QWORD *)v1906 + 56) > 2)
    goto LABEL_1203;
  v875 = *(unsigned __int8 *)(*(_QWORD *)v1906 + 72);
  v876 = sub_20E8C31DC(*(uint64_t *)v1906, "OSLogSurrogateAppender", 1, 0);
  v877 = v876;
  if (!v875 && v876 == 0)
    goto LABEL_1203;
  object[0] = v1906;
  object[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  object[2] = (void *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v1896) = 2;
  *((_QWORD *)&v1896 + 1) = "unknown file";
  LODWORD(__p) = 2801;
  v1899 = 0;
  *(_QWORD *)&__src = "unknown function";
  *((_QWORD *)&__src + 1) = 0;
  v879 = *(_QWORD *)object[0];
  v880 = *(_QWORD *)object[0] + 16;
  if (*(char *)(*(_QWORD *)object[0] + 39) < 0)
  {
    v882 = *(const char **)(v879 + 16);
    v881 = *(_QWORD *)(v879 + 24);
    v945 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v945 & 1) == 0)
    {
LABEL_2085:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v1909);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v1909);
        if (LOBYTE(v1909[3]) && SHIBYTE(v1909[2]) < 0)
          operator delete(v1909[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v881 = *(unsigned __int8 *)(*(_QWORD *)object[0] + 39);
    v882 = (const char *)(*(_QWORD *)object[0] + 16);
    v883 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v883 & 1) == 0)
      goto LABEL_2085;
  }
  if (byte_254A4A4F8[23] >= 0)
    v946 = byte_254A4A4F8;
  else
    v946 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v947 = byte_254A4A4F8[23];
  else
    v947 = *(_QWORD *)&byte_254A4A4F8[8];
  v1909[0] = os_log_create(v946, v882);
  v948 = &v1909[1];
  if (v947 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v947 >= 0x17)
  {
    v949 = v877;
    v950 = v882;
    v951 = v879;
    v952 = v875;
    v953 = v880;
    v954 = (v947 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v947 | 7) != 0x17)
      v954 = v947 | 7;
    v955 = v954 + 1;
    v948 = operator new(v954 + 1);
    v1909[3] = (os_log_t)(v955 | 0x8000000000000000);
    v1909[1] = v948;
    v1909[2] = (os_log_t)v947;
    v880 = v953;
    v875 = v952;
    v879 = v951;
    v882 = v950;
    v877 = v949;
    goto LABEL_1132;
  }
  HIBYTE(v1909[3]) = v947;
  if (v947)
LABEL_1132:
    memmove(v948, v946, v947);
  *((_BYTE *)&v948->isa + v947) = 0;
  LOBYTE(v1909[4]) = 1;
  v956 = &v1909[5];
  if (v881 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v881 >= 0x17)
  {
    v957 = (v881 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v881 | 7) != 0x17)
      v957 = v881 | 7;
    v958 = v957 + 1;
    v956 = operator new(v957 + 1);
    v1909[7] = (os_log_t)(v958 | 0x8000000000000000);
    v1909[5] = v956;
    v1909[6] = (os_log_t)v881;
    goto LABEL_1140;
  }
  HIBYTE(v1909[7]) = v881;
  if (v881)
LABEL_1140:
    memmove(v956, v882, v881);
  *((_BYTE *)&v956->isa + v881) = 0;
  LOBYTE(v1909[8]) = 1;
  v959 = v1909[0];
  if (SHIBYTE(v1909[7]) < 0)
    operator delete(v1909[5]);
  if (LOBYTE(v1909[4]) && SHIBYTE(v1909[3]) < 0)
    operator delete(v1909[1]);
  if (v1909[0])
    os_release(v1909[0]);
  if (v877 && *(_QWORD *)(v877 + 24))
  {
    v960 = _os_log_pack_size();
    v961 = operator new(v960, (std::align_val_t)8uLL);
    v962 = operator new();
    v963 = (std::__shared_weak_count *)v962;
    v962[1].isa = 0;
    v964 = (unint64_t *)&v962[1];
    v962->isa = (Class)&off_24C9ABB80;
    v962[2].isa = 0;
    v962[3].isa = (Class)v961;
    v1909[0] = v961;
    v1909[1] = v961;
    v1909[2] = v962;
    do
      v965 = __ldxr(v964);
    while (__stxr(v965 + 1, v964));
    memset(&v1909[3], 0, 24);
    do
      v966 = __ldaxr(v964);
    while (__stlxr(v966 - 1, v964));
    if (!v966)
    {
      (*((void (**))v962->isa + 2))(v962);
      std::__shared_weak_count::__release_weak(v963);
    }
    v967 = v1909[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v968 = operator new();
    v969 = *(unsigned __int8 *)(v879 + 39);
    if ((v969 & 0x80u) == 0)
      v970 = v880;
    else
      v970 = *(_QWORD *)(v879 + 16);
    if ((v969 & 0x80u) != 0)
      v969 = *(_QWORD *)(v879 + 24);
    *(_QWORD *)v968 = v967;
    *(_OWORD *)(v968 + 8) = *(_OWORD *)&v1909[1];
    v1909[1] = 0;
    v1909[2] = 0;
    *(_OWORD *)(v968 + 24) = *(_OWORD *)&v1909[3];
    v1909[3] = 0;
    v1909[4] = 0;
    *(_QWORD *)(v968 + 40) = v970;
    *(_QWORD *)(v968 + 48) = v969;
    *(_BYTE *)(v968 + 56) = 2;
    *(_QWORD *)&v1952 = 0;
    *(_QWORD *)oslog = v968;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v877 + 24) + 40))(*(_QWORD *)(v877 + 24), oslog);
    v971 = *(_QWORD *)oslog;
    *(_QWORD *)oslog = 0;
    if (v971)
    {
      v972 = *(std::__shared_weak_count **)(v971 + 32);
      if (v972)
      {
        v973 = (unint64_t *)&v972->__shared_owners_;
        do
          v974 = __ldaxr(v973);
        while (__stlxr(v974 - 1, v973));
        if (!v974)
        {
          ((void (*)(std::__shared_weak_count *))v972->__on_zero_shared)(v972);
          std::__shared_weak_count::__release_weak(v972);
        }
      }
      v975 = *(std::__shared_weak_count **)(v971 + 16);
      if (v975)
      {
        v976 = (unint64_t *)&v975->__shared_owners_;
        do
          v977 = __ldaxr(v976);
        while (__stlxr(v977 - 1, v976));
        if (!v977)
        {
          ((void (*)(std::__shared_weak_count *))v975->__on_zero_shared)(v975);
          std::__shared_weak_count::__release_weak(v975);
        }
      }
      MEMORY[0x212BC6398](v971, 0x10F0C40B62ED6C6);
      v978 = v1952;
      *(_QWORD *)&v1952 = 0;
      if (v978)
      {
        v979 = *(std::__shared_weak_count **)(v978 + 32);
        if (v979)
        {
          v980 = (unint64_t *)&v979->__shared_owners_;
          do
            v981 = __ldaxr(v980);
          while (__stlxr(v981 - 1, v980));
          if (!v981)
          {
            ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
            std::__shared_weak_count::__release_weak(v979);
          }
        }
        v982 = *(std::__shared_weak_count **)(v978 + 16);
        if (v982)
        {
          v983 = (unint64_t *)&v982->__shared_owners_;
          do
            v984 = __ldaxr(v983);
          while (__stlxr(v984 - 1, v983));
          if (!v984)
          {
            ((void (*)(std::__shared_weak_count *))v982->__on_zero_shared)(v982);
            std::__shared_weak_count::__release_weak(v982);
          }
        }
        MEMORY[0x212BC6398](v978, 0x10F0C40B62ED6C6);
      }
    }
    v985 = (std::__shared_weak_count *)v1909[4];
    if (v1909[4])
    {
      v986 = (unint64_t *)&v1909[4][1];
      do
        v987 = __ldaxr(v986);
      while (__stlxr(v987 - 1, v986));
      if (!v987)
      {
        ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
        std::__shared_weak_count::__release_weak(v985);
      }
    }
    v988 = (std::__shared_weak_count *)v1909[2];
    if (v1909[2])
    {
      v989 = (unint64_t *)&v1909[2][1];
      do
        v990 = __ldaxr(v989);
      while (__stlxr(v990 - 1, v989));
      if (!v990)
      {
        ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
        std::__shared_weak_count::__release_weak(v988);
      }
    }
  }
  else
  {
    os_log_type_enabled(v959, OS_LOG_TYPE_DEBUG);
    LOWORD(v1909[0]) = 0;
    v991 = (void *)_os_log_send_and_compose_impl();
    if (v991)
      free(v991);
  }
  if (v875)
  {
    sub_20E8C003C((uint64_t)object, "Ramp up period: not marginalizing anything");
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v992 = v1899;
  if (v1899)
  {
    v993 = (unint64_t *)&v1899->__shared_owners_;
    do
      v994 = __ldaxr(v993);
    while (__stlxr(v994 - 1, v993));
    if (!v994)
    {
      ((void (*)(std::__shared_weak_count *))v992->__on_zero_shared)(v992);
      std::__shared_weak_count::__release_weak(v992);
    }
  }
LABEL_1203:
  v995 = a1;
  v996 = *(__int128 **)(a1 + 2280);
  v997 = *(_QWORD *)(a1 + 5056);
  v998 = v996[6];
  v1000 = v996[3];
  v999 = v996[4];
  *(_OWORD *)(v997 + 80) = v996[5];
  *(_OWORD *)(v997 + 96) = v998;
  *(_OWORD *)(v997 + 48) = v1000;
  *(_OWORD *)(v997 + 64) = v999;
  v1002 = v996[8];
  v1001 = v996[9];
  v1003 = v996[7];
  *(_QWORD *)(v997 + 160) = *((_QWORD *)v996 + 20);
  *(_OWORD *)(v997 + 128) = v1002;
  *(_OWORD *)(v997 + 144) = v1001;
  *(_OWORD *)(v997 + 112) = v1003;
  v1004 = *v996;
  v1005 = v996[2];
  *(_OWORD *)(v997 + 16) = v996[1];
  *(_OWORD *)(v997 + 32) = v1005;
  *(_OWORD *)v997 = v1004;
LABEL_1298:
  *(_DWORD *)(v995 + 2276) = 3;
  v1075 = *(_QWORD *)(v995 + 8216);
  v1076 = *(unsigned __int8 *)(v1075 + 1720);
  v1077 = 864;
  if (!*(_BYTE *)(v1075 + 1720))
    v1077 = 24;
  v1078 = *(_DWORD *)(v1075 + v1077);
  v1079 = *(_DWORD *)(v995 + 5272);
  v1080 = *(_DWORD *)(v995 + 748) - v1079;
  if (v1080 >= v1078)
  {
    *(_DWORD *)(v995 + 5272) = v1079 + 1;
    v1078 = v1080;
  }
  v1081 = (uint64_t *)(v995 + 14816);
  *(_QWORD *)(v995 + 14824) = 0;
  v1881 = v1078;
  if (!(*(unsigned __int8 *)(a1 + 7680) | v1076))
  {
    sub_20EB884A4(v995 + 14816, (uint64_t)(*(_QWORD *)(v995 + 2808) - *(_QWORD *)(v995 + 2800)) >> 5, 0);
    v1159 = *(_QWORD *)(v995 + 2808);
    v1160 = *(_QWORD *)(v995 + 2800);
    v1161 = v1159 - v1160;
    if (v1159 != v1160)
    {
      v1162 = 0;
      v1163 = v1161 >> 5;
      v1164 = *v1081;
      if (v1163 <= 1)
        v1163 = 1;
      v1165 = (char *)(v1160 + 24);
      do
      {
        while (1)
        {
          v1166 = v1162 >> 6;
          v1167 = 1 << v1162;
          v1168 = *v1165;
          v1165 += 32;
          if ((v1168 & 0x20) != 0)
            break;
          *(_QWORD *)(v1164 + 8 * v1166) &= ~v1167;
          if (v1163 == ++v1162)
            goto LABEL_1338;
        }
        *(_QWORD *)(v1164 + 8 * v1166) |= v1167;
        ++v1162;
      }
      while (v1163 != v1162);
    }
LABEL_1338:
    v1169 = *(_QWORD *)(a1 + 8216);
    v1170 = *(_QWORD *)(a1 + 7952);
    if (*(_BYTE *)(v1169 + 1720))
      v1171 = (_BYTE *)(v1169 + 864);
    else
      v1171 = (_BYTE *)(v1169 + 24);
    v1172 = *(_QWORD *)(a1 + 5264);
    if (*(_BYTE *)(v1172 + 872) && *(_BYTE *)(v1172 + 586))
      v1173 = *(_DWORD *)(a1 + 11800);
    else
      v1173 = 0;
    sub_20FC6B2DC(v1171, v1078, a3, *(_BYTE *)(a1 + 7681) != 0, v1173, (uint64_t)v1909);
    v1224 = (uint64_t)v1081;
    sub_20F8899AC(a1, (uint64_t)v1909);
    v1225 = DWORD2(v1941);
    if (*(_BYTE *)v1169)
    {
      v1226 = *(_QWORD *)(v1169 + 8);
      v1227 = *(_DWORD *)(v1226 + 2152);
      sub_20F626FF4(v1226 + 528, (__int128 *)v1909);
      v1228 = v1931;
      *(_OWORD *)(v1226 + 1256) = v1930;
      *(_OWORD *)(v1226 + 1272) = v1228;
      *(_OWORD *)(v1226 + 1288) = v1932;
      sub_20E867F58(v1226 + 1304, (uint64_t)v1933);
      v1229 = v1942;
      *(_OWORD *)(v1226 + 2144) = v1941;
      *(_OWORD *)(v1226 + 2160) = v1229;
      *(_QWORD *)(v1226 + 2176) = v1943;
      if (v1225 != v1227)
      {
        sub_20FC1B210((_QWORD *)v1226, *(unsigned int *)(v1226 + 2152), *(unsigned int *)(v1226 + 1920));
        sub_20FC1A874(v1226);
      }
      v1230 = *(_QWORD *)(v1226 + 2160);
      *(_QWORD *)(v1226 + 23448) = v1230;
      *(_QWORD *)(v1226 + 42672) = v1230;
      *(_QWORD *)(v1226 + 3152) = *(_QWORD *)(v1226 + 1816);
      *(_QWORD *)(v1226 + 3160) = *(_QWORD *)(v1226 + 1808);
      *(_DWORD *)(v1226 + 7876) = 1;
      sub_20FC08CD0((uint64_t)object, *(_QWORD *)(v1170 + 64), *(_QWORD *)v1170, *(_QWORD *)(v1170 + 8), v1828, (uint64_t)v1844, *(char ***)(v1170 + 32), **(_QWORD **)(a1 + 7952) + 72, **(_QWORD **)(a1 + 7952) + 80, 1, *(_QWORD *)(v1170 + 72), a1 + 8056, *(_QWORD *)(a1 + 7952) + 80);
      v1231 = *(_OWORD *)object;
      *(void **)(v1226 + 16) = object[2];
      *(_OWORD *)v1226 = v1231;
      v1232 = *(void **)(v1226 + 24);
      if (v1232)
      {
        *(_QWORD *)(v1226 + 32) = v1232;
        operator delete(v1232);
      }
      *(_OWORD *)(v1226 + 24) = v1896;
      *(_QWORD *)(v1226 + 40) = __p;
      v1896 = 0uLL;
      __p = 0;
      v1233 = *(void **)(v1226 + 48);
      if (v1233)
      {
        *(_QWORD *)(v1226 + 56) = v1233;
        operator delete(v1233);
      }
      *(_OWORD *)(v1226 + 48) = __src;
      *(_QWORD *)(v1226 + 64) = v1899;
      __src = 0uLL;
      v1899 = 0;
      v1234 = *(void **)(v1226 + 72);
      if (v1234)
      {
        *(_QWORD *)(v1226 + 80) = v1234;
        operator delete(v1234);
        v1234 = (void *)__src;
      }
      *(_OWORD *)(v1226 + 72) = v1900;
      *(_QWORD *)(v1226 + 88) = *(_QWORD *)v1901;
      v1900 = 0uLL;
      *(_QWORD *)v1901 = 0;
      v1236 = v1902;
      v1235 = v1903[0];
      *(_OWORD *)(v1226 + 96) = *(_OWORD *)&v1901[8];
      *(_OWORD *)(v1226 + 112) = v1236;
      *(_OWORD *)(v1226 + 128) = v1235;
      if (v1234)
      {
        *((_QWORD *)&__src + 1) = v1234;
        operator delete(v1234);
      }
      if ((_QWORD)v1896)
      {
        *((_QWORD *)&v1896 + 1) = v1896;
        operator delete((void *)v1896);
      }
      *(_QWORD *)(v1226 + 144) = a1 + 7968;
      *(void **)((char *)object + 7) = 0;
      object[0] = 0;
      sub_20FC0A608(a1, (uint64_t)v1909, v1224, (uint64_t)v1832, v1831, (uint64_t)object, 1, v1226, (_QWORD *)v1170);
    }
    else
    {
      v1356 = *(_QWORD *)(v1169 + 16);
      v1357 = *(_DWORD *)(v1356 + 2152);
      sub_20F626FF4(v1356 + 528, (__int128 *)v1909);
      v1358 = v1931;
      *(_OWORD *)(v1356 + 1256) = v1930;
      *(_OWORD *)(v1356 + 1272) = v1358;
      *(_OWORD *)(v1356 + 1288) = v1932;
      sub_20E867F58(v1356 + 1304, (uint64_t)v1933);
      v1359 = v1942;
      *(_OWORD *)(v1356 + 2144) = v1941;
      *(_OWORD *)(v1356 + 2160) = v1359;
      *(_QWORD *)(v1356 + 2176) = v1943;
      if (v1225 != v1357)
      {
        sub_20FC48730((_QWORD *)v1356, *(unsigned int *)(v1356 + 2152), *(unsigned int *)(v1356 + 1920));
        sub_20FC47D94(v1356);
      }
      v1360 = *(_QWORD *)(v1356 + 2160);
      *(_QWORD *)(v1356 + 23416) = v1360;
      *(_QWORD *)(v1356 + 62056) = v1360;
      *(_QWORD *)(v1356 + 3152) = *(_QWORD *)(v1356 + 1816);
      *(_QWORD *)(v1356 + 3160) = *(_QWORD *)(v1356 + 1808);
      *(_DWORD *)(v1356 + 7836) = 1;
      sub_20FC0A3A8((uint64_t)object, *(_QWORD *)(v1170 + 64), *(_QWORD *)v1170, *(_QWORD *)(v1170 + 8), v1828, (uint64_t)v1844, *(char ***)(v1170 + 32), **(_QWORD **)(a1 + 7952) + 72, **(_QWORD **)(a1 + 7952) + 80, 1, *(_QWORD *)(v1170 + 72), a1 + 8056, *(_QWORD *)(a1 + 7952) + 80);
      v1361 = *(_OWORD *)object;
      *(void **)(v1356 + 16) = object[2];
      *(_OWORD *)v1356 = v1361;
      v1362 = *(void **)(v1356 + 24);
      if (v1362)
      {
        *(_QWORD *)(v1356 + 32) = v1362;
        operator delete(v1362);
      }
      *(_OWORD *)(v1356 + 24) = v1896;
      *(_QWORD *)(v1356 + 40) = __p;
      v1896 = 0uLL;
      __p = 0;
      v1363 = *(void **)(v1356 + 48);
      if (v1363)
      {
        *(_QWORD *)(v1356 + 56) = v1363;
        operator delete(v1363);
      }
      *(_OWORD *)(v1356 + 48) = __src;
      *(_QWORD *)(v1356 + 64) = v1899;
      __src = 0uLL;
      v1899 = 0;
      v1364 = *(void **)(v1356 + 72);
      if (v1364)
      {
        *(_QWORD *)(v1356 + 80) = v1364;
        operator delete(v1364);
        v1364 = (void *)__src;
      }
      *(_OWORD *)(v1356 + 72) = v1900;
      *(_QWORD *)(v1356 + 88) = *(_QWORD *)v1901;
      v1900 = 0uLL;
      *(_QWORD *)v1901 = 0;
      v1366 = v1902;
      v1365 = v1903[0];
      *(_OWORD *)(v1356 + 96) = *(_OWORD *)&v1901[8];
      *(_OWORD *)(v1356 + 112) = v1366;
      *(_OWORD *)(v1356 + 128) = v1365;
      if (v1364)
      {
        *((_QWORD *)&__src + 1) = v1364;
        operator delete(v1364);
      }
      if ((_QWORD)v1896)
      {
        *((_QWORD *)&v1896 + 1) = v1896;
        operator delete((void *)v1896);
      }
      *(_QWORD *)(v1356 + 144) = a1 + 7968;
      *(void **)((char *)object + 7) = 0;
      object[0] = 0;
      sub_20FC38920(a1, (uint64_t)v1909, v1224, (uint64_t)v1832, v1831, (uint64_t)object, 1, v1356, (_QWORD *)v1170);
    }
    if (v1940 < 0)
    {
      operator delete(v1938);
      if ((v1937 & 0x80000000) == 0)
      {
LABEL_1454:
        if ((v1935 & 0x80000000) == 0)
          goto LABEL_1455;
        goto LABEL_1460;
      }
    }
    else if ((v1937 & 0x80000000) == 0)
    {
      goto LABEL_1454;
    }
    operator delete(v1936);
    if ((v1935 & 0x80000000) == 0)
    {
LABEL_1455:
      v1367 = v1929;
      if (v1929 != v1928)
      {
LABEL_1456:
        if (!v1367)
          goto LABEL_1463;
        v1368 = 5;
LABEL_1462:
        (*(void (**)(void))(*v1367 + 8 * v1368))();
LABEL_1463:
        v1369 = v1927;
        if (v1927 == v1926)
        {
          v1370 = 4;
          v1369 = v1926;
        }
        else
        {
          if (!v1927)
            goto LABEL_1468;
          v1370 = 5;
        }
        (*(void (**)(void))(*v1369 + 8 * v1370))();
LABEL_1468:
        v1371 = v1925;
        if (v1925 == v1924)
        {
          v1372 = 4;
          v1371 = v1924;
        }
        else
        {
          if (!v1925)
            goto LABEL_1473;
          v1372 = 5;
        }
        (*(void (**)(void))(*v1371 + 8 * v1372))();
LABEL_1473:
        v1373 = v1923;
        if (v1923 != v1922)
          goto LABEL_1605;
        goto LABEL_1474;
      }
LABEL_1461:
      v1368 = 4;
      v1367 = v1928;
      goto LABEL_1462;
    }
LABEL_1460:
    operator delete(v1934);
    v1367 = v1929;
    if (v1929 != v1928)
      goto LABEL_1456;
    goto LABEL_1461;
  }
  v1082 = *(_QWORD **)(v995 + 5176);
  *(_QWORD *)v1894 = *v1082;
  *(_QWORD *)&v1894[7] = *(_QWORD *)((char *)v1082 + 7);
  sub_20EB884A4(v995 + 14816, (uint64_t)(*(_QWORD *)(v995 + 2808) - *(_QWORD *)(v995 + 2800)) >> 5, 0);
  v1083 = *(_QWORD *)(v995 + 2808);
  v1084 = *(_QWORD *)(v995 + 2800);
  v1085 = v1083 - v1084;
  if (v1083 != v1084)
  {
    v1086 = 0;
    v1087 = v1085 >> 5;
    v1088 = *v1081;
    if (v1087 <= 1)
      v1087 = 1;
    v1089 = (char *)(v1084 + 24);
    do
    {
      while (1)
      {
        v1090 = v1086 >> 6;
        v1091 = 1 << v1086;
        v1092 = *v1089;
        v1089 += 32;
        if ((v1092 & 0x20) != 0)
          break;
        *(_QWORD *)(v1088 + 8 * v1090) &= ~v1091;
        if (v1087 == ++v1086)
          goto LABEL_1310;
      }
      *(_QWORD *)(v1088 + 8 * v1090) |= v1091;
      ++v1086;
    }
    while (v1087 != v1086);
  }
LABEL_1310:
  v1093 = *(_BYTE **)(a1 + 8216);
  v1094 = v1093[1720];
  v1095 = v1093 + 864;
  v1096 = v1093 + 24;
  if (v1094)
    v1097 = v1095;
  else
    v1097 = v1096;
  v1098 = *(_QWORD *)(a1 + 5264);
  if (*(_BYTE *)(v1098 + 872) && *(_BYTE *)(v1098 + 586))
    v1099 = *(_DWORD *)(a1 + 11800);
  else
    v1099 = 0;
  sub_20FC6B2DC(v1097, v1078, a3, *(_BYTE *)(a1 + 7681) != 0, v1099, (uint64_t)v1909);
  v1876 = v995 + 14816;
  sub_20F8899AC(a1, (uint64_t)v1909);
  v1100 = *(_QWORD *)(a1 + 8216);
  v1101 = *(uint64_t **)(a1 + 7952);
  v1103 = *v1101;
  v1102 = v1101[1];
  v1104 = (char **)v1101[4];
  v1105 = *v1101 + 72;
  v1106 = *v1101 + 80;
  v1108 = v1101[8];
  v1107 = v1101[9];
  v1109 = a1 + 8056;
  v1110 = (uint64_t)(v1101 + 10);
  if (!*(_BYTE *)v1100)
  {
    v1174 = *(_QWORD *)(v1100 + 16);
    if (v1174)
    {
      sub_20FC0A3A8((uint64_t)object, v1108, v1103, v1102, v1828, (uint64_t)v1844, v1104, v1105, v1106, 1, v1107, v1109, v1110);
      sub_20FC090CC(v1174);
      v1175 = *(_QWORD *)(v1174 + 24);
      *(_QWORD *)v1174 = 0;
      *(_QWORD *)(v1174 + 8) = 0;
      *(_QWORD *)(v1174 + 16) = 0;
      *(_QWORD *)(v1174 + 32) = v1175;
      *(_QWORD *)(v1174 + 56) = *(_QWORD *)(v1174 + 48);
      v1176 = (_QWORD *)(v1174 + 72);
      *(_QWORD *)(v1174 + 80) = *(_QWORD *)(v1174 + 72);
      *(_OWORD *)(v1174 + 96) = 0u;
      *(_OWORD *)(v1174 + 112) = 0u;
      *(_OWORD *)(v1174 + 128) = 0u;
      *(_QWORD *)(v1174 + 144) = 0;
      v1177 = *(_QWORD *)(v1174 + 152);
      *(_OWORD *)(v1174 + 176) = xmmword_2103B83D0;
      *(_QWORD *)(v1174 + 160) = v1177;
      *(_QWORD *)(v1174 + 208) = 0;
      v1868 = (_QWORD *)(v1174 + 208);
      *(_OWORD *)(v1174 + 192) = xmmword_2103B83E0;
      *(_QWORD *)(v1174 + 216) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v1174 + 240) = _Q0;
      v1179 = (_OWORD *)(v1174 + 240);
      *(_OWORD *)(v1174 + 224) = xmmword_2103B83F0;
      *(_QWORD *)(v1174 + 256) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 264) = 0;
      v1871 = (_QWORD *)(v1174 + 264);
      *(_OWORD *)(v1174 + 288) = _Q0;
      v1849 = (_OWORD *)(v1174 + 288);
      *(_QWORD *)(v1174 + 272) = 0;
      *(_QWORD *)(v1174 + 280) = 0;
      *(_QWORD *)(v1174 + 304) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 312) = 0;
      v1886 = (_QWORD *)(v1174 + 312);
      *(_QWORD *)(v1174 + 336) = 0x3FF0000000000000;
      v1854 = (_OWORD *)(v1174 + 336);
      *(_QWORD *)(v1174 + 344) = 0;
      *(_QWORD *)(v1174 + 320) = 0;
      *(_QWORD *)(v1174 + 328) = 0;
      *(_QWORD *)(v1174 + 352) = 0;
      *(_QWORD *)(v1174 + 360) = 0;
      *(_QWORD *)(v1174 + 376) = 0;
      *(_QWORD *)(v1174 + 368) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 384) = 0;
      *(_QWORD *)(v1174 + 392) = 0;
      *(_QWORD *)(v1174 + 416) = 0;
      v1865 = _Q0;
      *(_OWORD *)(v1174 + 400) = _Q0;
      *(_QWORD *)(v1174 + 424) = 0;
      *(_QWORD *)(v1174 + 432) = 0;
      *(_QWORD *)(v1174 + 448) = 0;
      *(_QWORD *)(v1174 + 440) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 456) = 0;
      *(_QWORD *)(v1174 + 464) = 0;
      *(_QWORD *)(v1174 + 472) = 0x3FF0000000000000;
      *(_DWORD *)(v1174 + 2184) = 0;
      if (*(_QWORD *)(v1174 + 3128))
      {
        v1180 = *(_QWORD **)(v1174 + 3120);
        if (v1180)
        {
          do
          {
            v1181 = (_QWORD *)*v1180;
            operator delete(v1180);
            v1180 = v1181;
          }
          while (v1181);
        }
        *(_QWORD *)(v1174 + 3120) = 0;
        v1182 = *(_QWORD *)(v1174 + 3112);
        if (v1182)
        {
          for (j = 0; j != v1182; ++j)
            *(_QWORD *)(*(_QWORD *)(v1174 + 3104) + 8 * j) = 0;
        }
        *(_QWORD *)(v1174 + 3128) = 0;
        v1176 = (_QWORD *)(v1174 + 72);
      }
      sub_20FC09280(v1174 + 4856);
      v1184 = *(_OWORD *)object;
      *(void **)(v1174 + 16) = object[2];
      *(_OWORD *)v1174 = v1184;
      if ((void **)v1174 != object)
      {
        sub_20FB42E10((_QWORD *)(v1174 + 24), (char *)v1896, *((char **)&v1896 + 1), (uint64_t)(*((_QWORD *)&v1896 + 1) - v1896) >> 3);
        sub_20E86811C((_QWORD *)(v1174 + 48), (char *)__src, *((char **)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3);
        sub_20E86811C(v1176, (char *)v1900, *((char **)&v1900 + 1), (uint64_t)(*((_QWORD *)&v1900 + 1) - v1900) >> 3);
      }
      v1185 = *(_OWORD *)&v1901[8];
      v1186 = v1903[0];
      *(_OWORD *)(v1174 + 112) = v1902;
      *(_OWORD *)(v1174 + 128) = v1186;
      *(_OWORD *)(v1174 + 96) = v1185;
      *(_OWORD *)(v1174 + 176) = xmmword_2103B83D0;
      *(_OWORD *)(v1174 + 192) = xmmword_2103B83E0;
      *v1868 = 0;
      *(_QWORD *)(v1174 + 216) = 0;
      *(_OWORD *)(v1174 + 224) = xmmword_2103B83F0;
      *(_OWORD *)(v1174 + 240) = v1865;
      *(_QWORD *)(v1174 + 256) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 272) = 0;
      *(_QWORD *)(v1174 + 280) = 0;
      *v1871 = 0;
      *(_OWORD *)(v1174 + 288) = v1865;
      *(_QWORD *)(v1174 + 304) = 0x3FF0000000000000;
      *v1886 = 0;
      *(_QWORD *)(v1174 + 320) = 0;
      *(_QWORD *)(v1174 + 328) = 0;
      *(_QWORD *)(v1174 + 336) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 344) = 0;
      *(_QWORD *)(v1174 + 352) = 0;
      *(_QWORD *)(v1174 + 360) = 0;
      *(_QWORD *)(v1174 + 368) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 376) = 0;
      *(_QWORD *)(v1174 + 384) = 0;
      *(_QWORD *)(v1174 + 392) = 0;
      *(_OWORD *)(v1174 + 400) = v1865;
      *(_QWORD *)(v1174 + 416) = 0;
      *(_QWORD *)(v1174 + 424) = 0;
      *(_QWORD *)(v1174 + 432) = 0;
      *(_QWORD *)(v1174 + 440) = 0x3FF0000000000000;
      *(_QWORD *)(v1174 + 448) = 0;
      *(_QWORD *)(v1174 + 456) = 0;
      *(_QWORD *)(v1174 + 464) = 0;
      *(_QWORD *)(v1174 + 472) = 0x3FF0000000000000;
      sub_20F626FF4(v1174 + 528, (__int128 *)v1909);
      v1187 = v1931;
      *(_OWORD *)(v1174 + 1256) = v1930;
      *(_OWORD *)(v1174 + 1272) = v1187;
      *(_OWORD *)(v1174 + 1288) = v1932;
      sub_20E867F58(v1174 + 1304, (uint64_t)v1933);
      *(_OWORD *)(v1174 + 2144) = v1941;
      *(_OWORD *)(v1174 + 2160) = v1942;
      *(_QWORD *)(v1174 + 2176) = v1943;
      *(_DWORD *)(v1174 + 2184) = 0;
      v1188 = v1876;
      if (*(_QWORD *)(v1174 + 3128))
      {
        v1189 = *(_QWORD **)(v1174 + 3120);
        if (v1189)
        {
          do
          {
            v1190 = (_QWORD *)*v1189;
            operator delete(v1189);
            v1189 = v1190;
          }
          while (v1190);
        }
        *(_QWORD *)(v1174 + 3120) = 0;
        v1191 = *(_QWORD *)(v1174 + 3112);
        if (v1191)
        {
          for (k = 0; k != v1191; ++k)
            *(_QWORD *)(*(_QWORD *)(v1174 + 3104) + 8 * k) = 0;
        }
        *(_QWORD *)(v1174 + 3128) = 0;
      }
      v1193 = *(char **)v1174;
      if (*(_QWORD *)v1174)
      {
        v1194 = (_OWORD *)(v1174 + 408);
        if (*(_BYTE *)(v1174 + 1317))
        {
          v1195 = *(double *)v1193;
          v1196 = *((_QWORD *)v1193 + 1);
          v1197 = *((double *)v1193 + 2);
          v1198 = *((_QWORD *)v1193 + 3);
          *(_OWORD *)v1906 = *((_OWORD *)v1193 + 2);
          *(_QWORD *)&v1906[16] = *((_QWORD *)v1193 + 6);
          v1199 = *((_QWORD *)v1193 + 7);
          __dst[0] = *((_OWORD *)v1193 + 4);
          *(_QWORD *)&__dst[1] = *((_QWORD *)v1193 + 10);
          v1200 = *(_OWORD *)(v1193 + 88);
          v1960 = *((_QWORD *)v1193 + 13);
          v1959 = v1200;
          v1201 = *((_OWORD *)v1193 + 7);
          v1958 = *((_QWORD *)v1193 + 16);
          v1957 = v1201;
          v1202 = *(_OWORD *)(v1193 + 136);
          v1892 = *((_QWORD *)v1193 + 19);
          v1891 = v1202;
          v1203 = *((_OWORD *)v1193 + 10);
          v1204 = *((_OWORD *)v1193 + 11);
          v1205 = *((_OWORD *)v1193 + 12);
          v1206 = *((_OWORD *)v1193 + 13);
          v1946 = (std::__shared_weak_count *)*((_QWORD *)v1193 + 28);
          *(_OWORD *)&oslog[32] = v1205;
          v1945 = v1206;
          *(_OWORD *)oslog = v1203;
          *(_OWORD *)&oslog[16] = v1204;
          v1207 = *(_OWORD *)(v1193 + 232);
          v1208 = *(_OWORD *)(v1193 + 248);
          v1209 = *(_OWORD *)(v1193 + 264);
          v1210 = *(_OWORD *)(v1193 + 280);
          v1956 = (std::__shared_weak_count *)*((_QWORD *)v1193 + 37);
          v1954 = v1209;
          v1955 = v1210;
          v1952 = v1207;
          v1953 = v1208;
          v1211 = v1197 * *(double *)(v1174 + 1328);
          *(double *)(v1174 + 176) = v1195 * *(double *)(v1174 + 1320);
          *(_QWORD *)(v1174 + 184) = v1196;
          *(double *)(v1174 + 192) = v1211;
          *(_QWORD *)(v1174 + 200) = v1198;
          *(_OWORD *)v1868 = *(_OWORD *)v1906;
          *(_QWORD *)(v1174 + 224) = *(_QWORD *)&v1906[16];
          *(_QWORD *)(v1174 + 232) = v1199;
          v1212 = __dst[0];
          *(_QWORD *)(v1174 + 256) = *(_QWORD *)&__dst[1];
          *v1179 = v1212;
          v1213 = v1959;
          *(_QWORD *)(v1174 + 280) = v1960;
          *(_OWORD *)v1871 = v1213;
          v1214 = v1957;
          *(_QWORD *)(v1174 + 304) = v1958;
          *v1849 = v1214;
          v1215 = v1891;
          *(_QWORD *)(v1174 + 328) = v1892;
          *(_OWORD *)v1886 = v1215;
          v1216 = *(_OWORD *)oslog;
          v1217 = *(_OWORD *)&oslog[16];
          v1218 = *(_OWORD *)&oslog[32];
          v1219 = v1945;
          *(_QWORD *)(v1174 + 400) = v1946;
          *(_OWORD *)(v1174 + 368) = v1218;
          *(_OWORD *)(v1174 + 384) = v1219;
          *v1854 = v1216;
          *(_OWORD *)(v1174 + 352) = v1217;
          v1220 = v1952;
          v1221 = v1953;
          v1222 = v1954;
          v1223 = v1955;
          *(_QWORD *)(v1174 + 472) = v1956;
          *(_OWORD *)(v1174 + 440) = v1222;
          *(_OWORD *)(v1174 + 456) = v1223;
          *v1194 = v1220;
          *(_OWORD *)(v1174 + 424) = v1221;
        }
        else
        {
          v1686 = *((_OWORD *)v1193 + 1);
          *(_OWORD *)(v1174 + 176) = *(_OWORD *)v1193;
          *(_OWORD *)(v1174 + 192) = v1686;
          v1687 = *((_OWORD *)v1193 + 2);
          *(_QWORD *)(v1174 + 224) = *((_QWORD *)v1193 + 6);
          *(_OWORD *)v1868 = v1687;
          *(_QWORD *)(v1174 + 232) = *((_QWORD *)v1193 + 7);
          v1688 = *((_OWORD *)v1193 + 4);
          *(_QWORD *)(v1174 + 256) = *((_QWORD *)v1193 + 10);
          *v1179 = v1688;
          v1689 = *(_OWORD *)(v1193 + 88);
          *(_QWORD *)(v1174 + 280) = *((_QWORD *)v1193 + 13);
          *(_OWORD *)v1871 = v1689;
          v1690 = *((_OWORD *)v1193 + 7);
          *(_QWORD *)(v1174 + 304) = *((_QWORD *)v1193 + 16);
          *v1849 = v1690;
          v1691 = *(_OWORD *)(v1193 + 136);
          *(_QWORD *)(v1174 + 328) = *((_QWORD *)v1193 + 19);
          *(_OWORD *)v1886 = v1691;
          v1693 = *((_OWORD *)v1193 + 12);
          v1692 = *((_OWORD *)v1193 + 13);
          v1694 = *((_OWORD *)v1193 + 11);
          *(_QWORD *)(v1174 + 400) = *((_QWORD *)v1193 + 28);
          *(_OWORD *)(v1174 + 368) = v1693;
          *(_OWORD *)(v1174 + 384) = v1692;
          *(_OWORD *)(v1174 + 352) = v1694;
          *v1854 = *((_OWORD *)v1193 + 10);
          v1695 = *(_OWORD *)(v1193 + 264);
          v1696 = *(_OWORD *)(v1193 + 280);
          v1697 = *(_OWORD *)(v1193 + 248);
          *(_QWORD *)(v1174 + 472) = *((_QWORD *)v1193 + 37);
          *(_OWORD *)(v1174 + 440) = v1695;
          *(_OWORD *)(v1174 + 456) = v1696;
          *(_OWORD *)(v1174 + 424) = v1697;
          *v1194 = *(_OWORD *)(v1193 + 232);
        }
      }
      v1698 = *(_QWORD *)(v1174 + 2160);
      *(_QWORD *)(v1174 + 23416) = v1698;
      *(_QWORD *)(v1174 + 62056) = v1698;
      *(_QWORD *)(v1174 + 3152) = *(_QWORD *)(v1174 + 1816);
      *(_QWORD *)(v1174 + 3160) = *(_QWORD *)(v1174 + 1808);
      *(_DWORD *)(v1174 + 7836) = 1;
      if ((_QWORD)v1900)
      {
        *((_QWORD *)&v1900 + 1) = v1900;
        operator delete((void *)v1900);
      }
      v1355 = (void *)__src;
      v1354 = a1 + 2928;
      if (!(_QWORD)__src)
        goto LABEL_1578;
LABEL_1577:
      *((_QWORD *)&__src + 1) = v1355;
      operator delete(v1355);
      goto LABEL_1578;
    }
    v1873 = *(_QWORD *)(a1 + 8216);
    v1858 = *(uint64_t ***)(a1 + 8224);
    v1889 = operator new();
    sub_20FC0A3A8((uint64_t)object, v1108, v1103, v1102, v1828, (uint64_t)v1844, v1104, v1105, v1106, 1, v1107, v1109, v1110);
    v1375 = v1889;
    *(_OWORD *)v1889 = *(_OWORD *)object;
    v1376 = (const void *)v1896;
    *(void **)(v1889 + 16) = object[2];
    *(_QWORD *)(v1889 + 24) = 0;
    *(_QWORD *)(v1889 + 32) = 0;
    *(_QWORD *)(v1889 + 40) = 0;
    v1377 = *((_QWORD *)&v1896 + 1) - (_QWORD)v1376;
    if (*((const void **)&v1896 + 1) != v1376)
    {
      if (v1377 < 0)
        sub_20E867F44();
      v1378 = (char *)operator new(*((_QWORD *)&v1896 + 1) - (_QWORD)v1376);
      v1375 = v1889;
      *(_QWORD *)(v1889 + 24) = v1378;
      *(_QWORD *)(v1889 + 32) = v1378;
      v1379 = &v1378[8 * (v1377 >> 3)];
      *(_QWORD *)(v1889 + 40) = v1379;
      memcpy(v1378, v1376, v1377);
      *(_QWORD *)(v1889 + 32) = v1379;
    }
    *(_QWORD *)(v1375 + 48) = 0;
    *(_QWORD *)(v1375 + 56) = 0;
    *(_QWORD *)(v1375 + 64) = 0;
    v1380 = (const void *)__src;
    v1381 = *((_QWORD *)&__src + 1) - __src;
    if (*((_QWORD *)&__src + 1) != (_QWORD)__src)
    {
      if (v1381 < 0)
        sub_20E867F44();
      v1382 = (char *)operator new(*((_QWORD *)&__src + 1) - __src);
      v1375 = v1889;
      *(_QWORD *)(v1889 + 48) = v1382;
      *(_QWORD *)(v1889 + 56) = v1382;
      v1383 = &v1382[8 * (v1381 >> 3)];
      *(_QWORD *)(v1889 + 64) = v1383;
      memcpy(v1382, v1380, v1381);
      *(_QWORD *)(v1889 + 56) = v1383;
    }
    *(_QWORD *)(v1375 + 72) = 0;
    *(_QWORD *)(v1375 + 80) = 0;
    *(_QWORD *)(v1375 + 88) = 0;
    v1384 = (const void *)v1900;
    v1385 = *((_QWORD *)&v1900 + 1) - v1900;
    if (*((_QWORD *)&v1900 + 1) != (_QWORD)v1900)
    {
      if (v1385 < 0)
        sub_20E867F44();
      v1386 = (char *)operator new(*((_QWORD *)&v1900 + 1) - v1900);
      v1375 = v1889;
      *(_QWORD *)(v1889 + 72) = v1386;
      *(_QWORD *)(v1889 + 80) = v1386;
      v1387 = &v1386[8 * (v1385 >> 3)];
      *(_QWORD *)(v1889 + 88) = v1387;
      memcpy(v1386, v1384, v1385);
      *(_QWORD *)(v1889 + 80) = v1387;
    }
    v1388 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(v1375 + 208) = v1388;
    v1389 = v1902;
    *(_OWORD *)(v1375 + 96) = *(_OWORD *)&v1901[8];
    *(_OWORD *)(v1375 + 112) = v1389;
    v1390 = v1903[0];
    *(int64x2_t *)(v1375 + 176) = v1388;
    *(_OWORD *)(v1375 + 128) = v1390;
    *(_OWORD *)(v1375 + 144) = 0u;
    *(_OWORD *)(v1375 + 160) = 0u;
    *(int64x2_t *)(v1375 + 192) = v1388;
    *(_OWORD *)(v1375 + 224) = xmmword_2102DB700;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v1375 + 240) = _Q0;
    v1822 = v1375 + 240;
    *(_QWORD *)(v1375 + 264) = 0;
    v1823 = v1375 + 264;
    *(_QWORD *)(v1375 + 256) = 0x3FF0000000000000;
    *(_QWORD *)(v1375 + 272) = 0;
    *(_QWORD *)(v1375 + 280) = 0;
    *(_OWORD *)(v1375 + 288) = _Q0;
    *(_QWORD *)(v1375 + 304) = 0x3FF0000000000000;
    *(_OWORD *)(v1375 + 312) = 0u;
    *(_OWORD *)(v1375 + 328) = 0u;
    *(_QWORD *)(v1375 + 336) = 0x3FF0000000000000;
    *(_OWORD *)(v1375 + 360) = 0u;
    *(_OWORD *)(v1375 + 344) = 0u;
    v1817 = (_OWORD *)(v1375 + 176);
    *(_OWORD *)(v1375 + 376) = 0u;
    *(_QWORD *)(v1375 + 392) = 0;
    *(_QWORD *)(v1375 + 368) = 0x3FF0000000000000;
    *(_OWORD *)(v1375 + 432) = 0u;
    *(_OWORD *)(v1375 + 448) = 0u;
    *(_OWORD *)(v1375 + 400) = _Q0;
    *(_OWORD *)(v1375 + 416) = 0u;
    v1866 = _Q0;
    *(_QWORD *)(v1375 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(v1375 + 464) = 0;
    *(_QWORD *)(v1375 + 472) = 0x3FF0000000000000;
    *(_OWORD *)(v1375 + 480) = 0u;
    *(_OWORD *)(v1375 + 496) = 0u;
    *(_QWORD *)(v1375 + 512) = 0;
    v1825 = v1375 + 208;
    sub_20F4E052C(v1375 + 528, (uint64_t)v1909);
    v1819 = v1375 + 288;
    v1820 = v1375 + 312;
    v1821 = v1375 + 336;
    v1843 = v1375 + 65472;
    v1841 = v1375 + 64600;
    v1839 = v1375 + 64264;
    v1836 = v1375 + 63928;
    v1830 = v1375 + 63024;
    v1869 = v1375 + 62696;
    v1855 = v1375 + 62168;
    v1860 = v1375 + 45160;
    v1851 = (_BYTE *)(v1375 + 23424);
    v1818 = v1375 + 408;
    *(_DWORD *)(v1375 + 2184) = 0;
    bzero((void *)(v1375 + 2192), 0x314uLL);
    *(_DWORD *)(v1375 + 3000) = 0;
    *(_OWORD *)(v1375 + 2984) = 0u;
    *(_OWORD *)(v1375 + 3008) = 0u;
    *(_DWORD *)(v1375 + 3024) = 0;
    *(_OWORD *)(v1375 + 3032) = 0u;
    *(_DWORD *)(v1375 + 3048) = 0;
    *(_OWORD *)(v1375 + 3056) = 0u;
    *(_DWORD *)(v1375 + 3072) = 0;
    *(_OWORD *)(v1375 + 3080) = 0u;
    *(_DWORD *)(v1375 + 3096) = 0;
    v1824 = (_QWORD *)(v1375 + 3104);
    *(_OWORD *)(v1375 + 3104) = 0u;
    *(_OWORD *)(v1375 + 3120) = 0u;
    *(_DWORD *)(v1375 + 3136) = 1065353216;
    *(_BYTE *)(v1375 + 4848) = 0;
    *(_OWORD *)(v1375 + 4832) = 0u;
    *(_OWORD *)(v1375 + 4816) = 0u;
    *(_OWORD *)(v1375 + 4800) = 0u;
    *(_OWORD *)(v1375 + 4784) = 0u;
    *(_OWORD *)(v1375 + 4768) = 0u;
    *(_OWORD *)(v1375 + 4752) = 0u;
    *(_OWORD *)(v1375 + 4736) = 0u;
    *(_OWORD *)(v1375 + 4720) = 0u;
    *(_OWORD *)(v1375 + 4704) = 0u;
    *(_OWORD *)(v1375 + 4688) = 0u;
    *(_OWORD *)(v1375 + 4672) = 0u;
    *(_OWORD *)(v1375 + 4656) = 0u;
    *(_OWORD *)(v1375 + 4640) = 0u;
    *(_OWORD *)(v1375 + 4624) = 0u;
    *(_OWORD *)(v1375 + 4608) = 0u;
    *(_OWORD *)(v1375 + 4592) = 0u;
    *(_OWORD *)(v1375 + 4576) = 0u;
    *(_OWORD *)(v1375 + 4560) = 0u;
    *(_OWORD *)(v1375 + 4544) = 0u;
    *(_OWORD *)(v1375 + 4528) = 0u;
    *(_OWORD *)(v1375 + 4512) = 0u;
    *(_OWORD *)(v1375 + 4496) = 0u;
    *(_OWORD *)(v1375 + 4480) = 0u;
    *(_OWORD *)(v1375 + 4464) = 0u;
    *(_OWORD *)(v1375 + 4448) = 0u;
    *(_OWORD *)(v1375 + 4432) = 0u;
    *(_OWORD *)(v1375 + 4416) = 0u;
    *(_OWORD *)(v1375 + 4400) = 0u;
    *(_OWORD *)(v1375 + 4384) = 0u;
    *(_OWORD *)(v1375 + 4368) = 0u;
    v1863 = v1375 + 4856;
    *(_OWORD *)(v1375 + 3200) = 0u;
    *(_OWORD *)(v1375 + 3184) = 0u;
    *(_OWORD *)(v1375 + 3168) = 0u;
    *(_OWORD *)(v1375 + 3152) = 0u;
    *(_QWORD *)(v1375 + 4856) = &unk_24CA03F48;
    *(_OWORD *)(v1375 + 4864) = v1866;
    *(_OWORD *)(v1375 + 4880) = v1866;
    *(_OWORD *)(v1375 + 4896) = v1866;
    *(_OWORD *)(v1375 + 4912) = v1866;
    *(_OWORD *)(v1375 + 4928) = v1866;
    *(_OWORD *)(v1375 + 4944) = v1866;
    *(_OWORD *)(v1375 + 4960) = v1866;
    *(_OWORD *)(v1375 + 4976) = v1866;
    *(_OWORD *)(v1375 + 4992) = v1866;
    *(_OWORD *)(v1375 + 5008) = v1866;
    *(_OWORD *)(v1375 + 5024) = v1866;
    *(_OWORD *)(v1375 + 5040) = v1866;
    *(_OWORD *)(v1375 + 5056) = v1866;
    *(_OWORD *)(v1375 + 5072) = v1866;
    *(_OWORD *)(v1375 + 5088) = v1866;
    *(_OWORD *)(v1375 + 5104) = v1866;
    *(_OWORD *)(v1375 + 5120) = v1866;
    *(_OWORD *)(v1375 + 5136) = v1866;
    v1847 = v1375 + 5168;
    *(_QWORD *)(v1375 + 5168) = &off_24CA03FB8;
    *(_OWORD *)(v1375 + 5152) = v1866;
    bzero((void *)(v1375 + 5176), 0x630uLL);
    *(_DWORD *)(v1375 + 6760) = 16842753;
    v1392 = v1375 + 6768;
    v1393 = v1375 + 7032;
    v1394 = v1375 + 7296;
    bzero((void *)(v1375 + 6768), 0x318uLL);
    v1395 = 0;
    while (1)
    {
      v1396 = v1392 + 24 * v1395;
      v1397 = *(_BYTE **)v1396;
      if (*(_QWORD *)(v1396 + 16) - *(_QWORD *)v1396 > 0xFFuLL)
        goto LABEL_1497;
      v1398 = v1392 + 24 * v1395;
      v1401 = *(_BYTE **)(v1398 + 8);
      v1399 = (char **)(v1398 + 8);
      v1400 = v1401;
      v1402 = (char *)operator new(0x100uLL);
      v1403 = v1401 - v1397;
      v1404 = &v1402[(v1401 - v1397) & 0xFFFFFFFFFFFFFFFCLL];
      v1405 = v1404;
      if (v1401 != v1397)
      {
        if ((unint64_t)(v1403 - 4) < 0x2C)
        {
          v1405 = &v1402[(v1400 - v1397) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_1494:
            v1414 = *((_DWORD *)v1400 - 1);
            v1400 -= 4;
            *((_DWORD *)v1405 - 1) = v1414;
            v1405 -= 4;
          }
          while (v1400 != v1397);
          goto LABEL_1495;
        }
        v1405 = &v1402[(v1400 - v1397) & 0xFFFFFFFFFFFFFFFCLL];
        if (v1400 - v1402 - (v1403 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_1494;
        v1406 = v1403 >> 2;
        v1407 = ((unint64_t)(v1403 - 4) >> 2) + 1;
        v1408 = 4 * (v1407 & 0x7FFFFFFFFFFFFFF8);
        v1409 = &v1400[-v1408];
        v1405 = &v1404[-v1408];
        v1410 = &v1402[4 * v1406 - 16];
        v1411 = (__int128 *)(v1400 - 16);
        v1412 = v1407 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v1413 = *v1411;
          *((_OWORD *)v1410 - 1) = *(v1411 - 1);
          *(_OWORD *)v1410 = v1413;
          v1410 -= 32;
          v1411 -= 2;
          v1412 -= 8;
        }
        while (v1412);
        v1400 = v1409;
        if (v1407 != (v1407 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_1494;
      }
LABEL_1495:
      *(_QWORD *)v1396 = v1405;
      *v1399 = v1404;
      *(_QWORD *)(v1396 + 16) = v1402 + 256;
      if (v1397)
        operator delete(v1397);
LABEL_1497:
      v1415 = v1393 + 24 * v1395;
      v1416 = *(_BYTE **)v1415;
      if (*(_QWORD *)(v1415 + 16) - *(_QWORD *)v1415 > 0xFFuLL)
        goto LABEL_1508;
      v1417 = v1393 + 24 * v1395;
      v1420 = *(_BYTE **)(v1417 + 8);
      v1418 = (char **)(v1417 + 8);
      v1419 = v1420;
      v1421 = (char *)operator new(0x100uLL);
      v1422 = v1420 - v1416;
      v1423 = &v1421[(v1420 - v1416) & 0xFFFFFFFFFFFFFFFCLL];
      v1424 = v1423;
      if (v1420 != v1416)
      {
        if ((unint64_t)(v1422 - 4) < 0x2C)
        {
          v1424 = &v1421[(v1419 - v1416) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_1505:
            v1433 = *((_DWORD *)v1419 - 1);
            v1419 -= 4;
            *((_DWORD *)v1424 - 1) = v1433;
            v1424 -= 4;
          }
          while (v1419 != v1416);
          goto LABEL_1506;
        }
        v1424 = &v1421[(v1419 - v1416) & 0xFFFFFFFFFFFFFFFCLL];
        if (v1419 - v1421 - (v1422 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_1505;
        v1425 = v1422 >> 2;
        v1426 = ((unint64_t)(v1422 - 4) >> 2) + 1;
        v1427 = 4 * (v1426 & 0x7FFFFFFFFFFFFFF8);
        v1428 = &v1419[-v1427];
        v1424 = &v1423[-v1427];
        v1429 = &v1421[4 * v1425 - 16];
        v1430 = (__int128 *)(v1419 - 16);
        v1431 = v1426 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v1432 = *v1430;
          *((_OWORD *)v1429 - 1) = *(v1430 - 1);
          *(_OWORD *)v1429 = v1432;
          v1429 -= 32;
          v1430 -= 2;
          v1431 -= 8;
        }
        while (v1431);
        v1419 = v1428;
        if (v1426 != (v1426 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_1505;
      }
LABEL_1506:
      *(_QWORD *)v1415 = v1424;
      *v1418 = v1423;
      *(_QWORD *)(v1415 + 16) = v1421 + 256;
      if (v1416)
        operator delete(v1416);
LABEL_1508:
      v1434 = v1394 + 24 * v1395;
      v1435 = *(_BYTE **)v1434;
      if (*(_QWORD *)(v1434 + 16) - *(_QWORD *)v1434 <= 0xFFuLL)
      {
        v1436 = v1394 + 24 * v1395;
        v1439 = *(_BYTE **)(v1436 + 8);
        v1437 = (char **)(v1436 + 8);
        v1438 = v1439;
        v1440 = (char *)operator new(0x100uLL);
        v1441 = v1439 - v1435;
        v1442 = &v1440[(v1439 - v1435) & 0xFFFFFFFFFFFFFFFCLL];
        v1443 = v1442;
        if (v1439 != v1435)
        {
          if ((unint64_t)(v1441 - 4) < 0x2C)
          {
            v1443 = &v1440[(v1438 - v1435) & 0xFFFFFFFFFFFFFFFCLL];
            goto LABEL_1516;
          }
          v1443 = &v1440[(v1438 - v1435) & 0xFFFFFFFFFFFFFFFCLL];
          if (v1438 - v1440 - (v1441 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
            goto LABEL_2138;
          v1444 = v1441 >> 2;
          v1445 = ((unint64_t)(v1441 - 4) >> 2) + 1;
          v1446 = 4 * (v1445 & 0x7FFFFFFFFFFFFFF8);
          v1447 = &v1438[-v1446];
          v1443 = &v1442[-v1446];
          v1448 = &v1440[4 * v1444 - 16];
          v1449 = (__int128 *)(v1438 - 16);
          v1450 = v1445 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v1451 = *v1449;
            *((_OWORD *)v1448 - 1) = *(v1449 - 1);
            *(_OWORD *)v1448 = v1451;
            v1448 -= 32;
            v1449 -= 2;
            v1450 -= 8;
          }
          while (v1450);
          v1438 = v1447;
          if (v1445 != (v1445 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_2138:
            do
            {
LABEL_1516:
              v1452 = *((_DWORD *)v1438 - 1);
              v1438 -= 4;
              *((_DWORD *)v1443 - 1) = v1452;
              v1443 -= 4;
            }
            while (v1438 != v1435);
          }
        }
        *(_QWORD *)v1434 = v1443;
        *v1437 = v1442;
        *(_QWORD *)(v1434 + 16) = v1440 + 256;
        if (v1435)
          operator delete(v1435);
      }
      if (++v1395 == 11)
      {
        *(_OWORD *)(v1889 + 7800) = 0u;
        *(_OWORD *)(v1889 + 7784) = 0u;
        *(_OWORD *)(v1889 + 7768) = 0u;
        *(_OWORD *)(v1889 + 7752) = 0u;
        *(_OWORD *)(v1889 + 7736) = 0u;
        *(_OWORD *)(v1889 + 7720) = 0u;
        *(_OWORD *)(v1889 + 7704) = 0u;
        *(_OWORD *)(v1889 + 7688) = 0u;
        *(_OWORD *)(v1889 + 7672) = 0u;
        *(_OWORD *)(v1889 + 7656) = 0u;
        *(_OWORD *)(v1889 + 7640) = 0u;
        *(_OWORD *)(v1889 + 7624) = 0u;
        *(_OWORD *)(v1889 + 7608) = 0u;
        *(_OWORD *)(v1889 + 7592) = 0u;
        *(_OWORD *)(v1889 + 7576) = 0u;
        *(_OWORD *)(v1889 + 7560) = 0u;
        *(_OWORD *)(v1889 + 7814) = 0u;
        *(_OWORD *)(v1889 + 7952) = 0u;
        *(_OWORD *)(v1889 + 7936) = 0u;
        *(_OWORD *)(v1889 + 7920) = 0u;
        *(_OWORD *)(v1889 + 7904) = 0u;
        *(_OWORD *)(v1889 + 7888) = 0u;
        *(_OWORD *)(v1889 + 7848) = 0u;
        *(_OWORD *)(v1889 + 7864) = 0u;
        *(_DWORD *)(v1889 + 7880) = 0;
        *(_QWORD *)(v1889 + 7832) = 0;
        *(_BYTE *)(v1889 + 7840) = 0;
        sub_20FC069A8(v1889 + 7968);
        sub_20FC063EC(v1453);
        *(_OWORD *)(v1889 + 23392) = 0u;
        *(_OWORD *)(v1889 + 23376) = 0u;
        *(_OWORD *)(v1889 + 23360) = 0u;
        *(_OWORD *)(v1889 + 23344) = 0u;
        *(_OWORD *)(v1889 + 23328) = 0u;
        *(_OWORD *)(v1889 + 23312) = 0u;
        *(_OWORD *)(v1889 + 23296) = 0u;
        *(_OWORD *)(v1889 + 23280) = 0u;
        *(_OWORD *)(v1889 + 23264) = 0u;
        *(_OWORD *)(v1889 + 23248) = 0u;
        *(_OWORD *)(v1889 + 23232) = 0u;
        *(_OWORD *)(v1889 + 23216) = 0u;
        *(_OWORD *)(v1889 + 23200) = 0u;
        *(_OWORD *)(v1889 + 23184) = 0u;
        *(_OWORD *)(v1889 + 23168) = 0u;
        *(_QWORD *)(v1889 + 4856) = off_24CA030C0;
        *(_OWORD *)(v1889 + 23408) = xmmword_2103B8400;
        *v1851 = 0;
        *(_QWORD *)(v1889 + 23432) = v1847;
        *(_QWORD *)(v1889 + 23440) = v1889 + 7864;
        *(_QWORD *)(v1889 + 23448) = v1855 + 72;
        bzero((void *)(v1889 + 23456), 0x380uLL);
        *(_OWORD *)(v1889 + 25960) = 0u;
        *(_OWORD *)(v1889 + 25944) = 0u;
        *(_OWORD *)(v1889 + 25928) = 0u;
        *(_OWORD *)(v1889 + 25912) = 0u;
        *(_OWORD *)(v1889 + 25896) = 0u;
        *(_OWORD *)(v1889 + 25880) = 0u;
        *(_OWORD *)(v1889 + 25864) = 0u;
        *(_OWORD *)(v1889 + 25848) = 0u;
        *(_OWORD *)(v1889 + 25832) = 0u;
        *(_OWORD *)(v1889 + 25816) = 0u;
        *(_OWORD *)(v1889 + 25800) = 0u;
        *(_OWORD *)(v1889 + 25784) = 0u;
        *(_OWORD *)(v1889 + 25768) = 0u;
        *(_OWORD *)(v1889 + 25752) = 0u;
        *(_OWORD *)(v1889 + 25736) = 0u;
        *(_OWORD *)(v1889 + 25720) = 0u;
        *(_OWORD *)(v1889 + 25704) = 0u;
        *(_OWORD *)(v1889 + 25688) = 0u;
        *(_OWORD *)(v1889 + 25672) = 0u;
        *(_OWORD *)(v1889 + 25656) = 0u;
        *(_OWORD *)(v1889 + 25640) = 0u;
        *(_OWORD *)(v1889 + 25624) = 0u;
        *(_OWORD *)(v1889 + 25608) = 0u;
        *(_OWORD *)(v1889 + 25592) = 0u;
        *(_OWORD *)(v1889 + 25576) = 0u;
        *(_OWORD *)(v1889 + 25560) = 0u;
        *(_OWORD *)(v1889 + 25544) = 0u;
        *(_OWORD *)(v1889 + 25528) = 0u;
        *(_OWORD *)(v1889 + 25512) = 0u;
        *(_OWORD *)(v1889 + 25496) = 0u;
        bzero((void *)(v1889 + 24432), 0x3D8uLL);
        *(_QWORD *)(v1889 + 25976) = v1847;
        *(_QWORD *)(v1889 + 25984) = v1889 + 7864;
        *(_QWORD *)(v1889 + 25992) = v1855 + 72;
        bzero((void *)(v1889 + 26000), 0x398uLL);
        bzero((void *)(v1889 + 27000), 0x2D0uLL);
        *(_DWORD *)(v1889 + 27768) = 0;
        *(_OWORD *)(v1889 + 27752) = 0u;
        *(_OWORD *)(v1889 + 27776) = 0u;
        *(_OWORD *)(v1889 + 27792) = 0u;
        *(_OWORD *)(v1889 + 27808) = 0u;
        *(_OWORD *)(v1889 + 27824) = 0u;
        *(_OWORD *)(v1889 + 27840) = 0u;
        *(_OWORD *)(v1889 + 27728) = 0u;
        *(_DWORD *)(v1889 + 27744) = 0;
        sub_20FC069A8(v1889 + 27856);
        sub_20FC063EC(v1454);
        *(_OWORD *)(v1889 + 45144) = 0u;
        *(_OWORD *)(v1889 + 45128) = 0u;
        *(_OWORD *)(v1889 + 45112) = 0u;
        *(_OWORD *)(v1889 + 45096) = 0u;
        *(_OWORD *)(v1889 + 45080) = 0u;
        *(_OWORD *)(v1889 + 45064) = 0u;
        *(_OWORD *)(v1889 + 45048) = 0u;
        *(_OWORD *)(v1889 + 45032) = 0u;
        *(_OWORD *)(v1889 + 45016) = 0u;
        *(_OWORD *)(v1889 + 45000) = 0u;
        *(_OWORD *)(v1889 + 44984) = 0u;
        *(_OWORD *)(v1889 + 44968) = 0u;
        *(_OWORD *)(v1889 + 44952) = 0u;
        *(_OWORD *)(v1889 + 44936) = 0u;
        *(_DWORD *)(v1889 + 44912) = 0;
        *(_OWORD *)(v1889 + 44920) = 0u;
        *(_OWORD *)(v1889 + 44800) = 0u;
        *(_OWORD *)(v1889 + 44816) = 0u;
        *(_OWORD *)(v1889 + 44832) = 0u;
        *(_OWORD *)(v1889 + 44848) = 0u;
        *(_OWORD *)(v1889 + 44864) = 0u;
        *(_OWORD *)(v1889 + 44880) = 0u;
        *(_OWORD *)(v1889 + 44896) = 0u;
        *(_WORD *)(v1889 + 43296) = 0;
        *(_OWORD *)(v1889 + 43280) = 0u;
        *(_OWORD *)(v1889 + 43264) = 0u;
        *(_OWORD *)(v1889 + 43248) = 0u;
        *(_OWORD *)(v1889 + 43232) = 0u;
        *(_OWORD *)(v1889 + 43216) = 0u;
        *(_OWORD *)(v1889 + 43200) = 0u;
        *(_OWORD *)(v1889 + 43184) = 0u;
        *(_OWORD *)(v1889 + 43168) = 0u;
        *(_OWORD *)(v1889 + 43152) = 0u;
        *(_OWORD *)(v1889 + 43136) = 0u;
        *(_OWORD *)(v1889 + 43120) = 0u;
        *(_OWORD *)(v1889 + 43104) = 0u;
        *(_OWORD *)(v1889 + 43088) = 0u;
        *(_OWORD *)(v1889 + 43072) = 0u;
        *(_OWORD *)(v1889 + 43056) = 0u;
        bzero((void *)(v1889 + 43328), 0x5BCuLL);
        *(_QWORD *)(v1889 + 27720) = &off_24CA031B8;
        *(_WORD *)v1860 = 0;
        *(_DWORD *)(v1860 + 4) = 0;
        *(_BYTE *)(v1860 + 8) = 1;
        *(_OWORD *)(v1889 + 45176) = 0u;
        *(_OWORD *)(v1889 + 45192) = 0u;
        *(_QWORD *)(v1860 + 48) = 0x7FEFFFFFFFFFFFFFLL;
        *(_DWORD *)(v1860 + 56) = 0;
        *(_BYTE *)(v1860 + 60) = 0;
        *(_OWORD *)(v1889 + 45224) = 0u;
        *(_OWORD *)(v1889 + 45240) = 0u;
        *(_QWORD *)(v1860 + 96) = 0x7FEFFFFFFFFFFFFFLL;
        *(_DWORD *)(v1860 + 104) = 0;
        *(_BYTE *)(v1860 + 108) = 0;
        *(_OWORD *)(v1889 + 45272) = 0u;
        *(_OWORD *)(v1889 + 45288) = 0u;
        *(_QWORD *)(v1860 + 144) = 0x7FEFFFFFFFFFFFFFLL;
        *(_DWORD *)(v1860 + 152) = 0;
        *(_BYTE *)(v1860 + 156) = 0;
        *(_QWORD *)(v1889 + 45616) = 0;
        *(_OWORD *)(v1889 + 45600) = 0u;
        *(_DWORD *)(v1889 + 46496) = 0;
        *(_OWORD *)(v1889 + 46480) = 0u;
        *(_OWORD *)(v1889 + 46504) = 0u;
        *(_OWORD *)(v1889 + 46520) = 0u;
        *(_OWORD *)(v1889 + 46536) = 0u;
        *(_OWORD *)(v1889 + 46552) = 0u;
        *(_OWORD *)(v1889 + 46568) = 0u;
        bzero((void *)(v1889 + 45704), 0x301uLL);
        *(_OWORD *)(v1889 + 45577) = 0u;
        *(_OWORD *)(v1889 + 45568) = 0u;
        *(_OWORD *)(v1889 + 45552) = 0u;
        *(_OWORD *)(v1889 + 45536) = 0u;
        *(_OWORD *)(v1889 + 45520) = 0u;
        *(_OWORD *)(v1889 + 45504) = 0u;
        *(_OWORD *)(v1889 + 45488) = 0u;
        *(_OWORD *)(v1889 + 45472) = 0u;
        *(_OWORD *)(v1889 + 45456) = 0u;
        *(_OWORD *)(v1889 + 45440) = 0u;
        *(_OWORD *)(v1889 + 45424) = 0u;
        *(_OWORD *)(v1889 + 45408) = 0u;
        *(_OWORD *)(v1889 + 45392) = 0u;
        *(_OWORD *)(v1889 + 45376) = 0u;
        *(_OWORD *)(v1889 + 45360) = 0u;
        *(_OWORD *)(v1889 + 45344) = 0u;
        *(_OWORD *)(v1889 + 45328) = 0u;
        sub_20FC069A8(v1889 + 46584);
        sub_20FC063EC(v1455);
        *(_QWORD *)(v1889 + 62040) = 0;
        *(_OWORD *)(v1889 + 62024) = 0u;
        *(_OWORD *)(v1889 + 62008) = 0u;
        *(_OWORD *)(v1889 + 61992) = 0u;
        *(_OWORD *)(v1889 + 61976) = 0u;
        *(_OWORD *)(v1889 + 61960) = 0u;
        *(_OWORD *)(v1889 + 61944) = 0u;
        *(_OWORD *)(v1889 + 61928) = 0u;
        *(_OWORD *)(v1889 + 61912) = 0u;
        *(_OWORD *)(v1889 + 61896) = 0u;
        *(_OWORD *)(v1889 + 61880) = 0u;
        *(_OWORD *)(v1889 + 61864) = 0u;
        *(_OWORD *)(v1889 + 61848) = 0u;
        *(_OWORD *)(v1889 + 61832) = 0u;
        *(_OWORD *)(v1889 + 61816) = 0u;
        *(_OWORD *)(v1889 + 61800) = 0u;
        *(_OWORD *)(v1889 + 61784) = 0u;
        *(_QWORD *)(v1860 + 16888) = v1863;
        *(_QWORD *)(v1860 + 16896) = 0x3EE4F8B588E368F1;
        *(_QWORD *)(v1860 + 17000) = 0;
        *(_OWORD *)(v1889 + 62064) = 0u;
        *(_OWORD *)(v1889 + 62080) = 0u;
        *(_OWORD *)(v1889 + 62096) = 0u;
        *(_OWORD *)(v1889 + 62112) = 0u;
        *(_QWORD *)(v1889 + 62128) = 0;
        *(_BYTE *)v1855 = 0;
        *(_QWORD *)(v1855 + 32) = 0;
        *(_QWORD *)(v1855 + 64) = 0;
        *(_QWORD *)(v1855 + 72) = 0;
        *(_QWORD *)(v1855 + 80) = 0;
        *(_DWORD *)(v1855 + 88) = 0;
        *(_DWORD *)(v1889 + 62712) = 0;
        *(_OWORD *)(v1889 + 62264) = 0u;
        *(_OWORD *)(v1889 + 62280) = 0u;
        *(_OWORD *)(v1889 + 62296) = 0u;
        *(_OWORD *)(v1889 + 62312) = 0u;
        *(_OWORD *)(v1889 + 62328) = 0u;
        *(_OWORD *)(v1889 + 62344) = 0u;
        *(_OWORD *)(v1889 + 62360) = 0u;
        *(_OWORD *)(v1889 + 62376) = 0u;
        *(_OWORD *)(v1889 + 62392) = 0u;
        *(_OWORD *)(v1889 + 62408) = 0u;
        *(_OWORD *)(v1889 + 62424) = 0u;
        *(_OWORD *)(v1889 + 62440) = 0u;
        *(_OWORD *)(v1889 + 62456) = 0u;
        *(_OWORD *)(v1889 + 62472) = 0u;
        *(_OWORD *)(v1889 + 62488) = 0u;
        *(_OWORD *)(v1889 + 62504) = 0u;
        *(_OWORD *)(v1889 + 62520) = 0u;
        *(_OWORD *)(v1889 + 62536) = 0u;
        *(_OWORD *)(v1889 + 62552) = 0u;
        *(_OWORD *)(v1889 + 62568) = 0u;
        *(_OWORD *)(v1889 + 62584) = 0u;
        *(_OWORD *)(v1889 + 62600) = 0u;
        *(_OWORD *)(v1889 + 62616) = 0u;
        *(_OWORD *)(v1889 + 62632) = 0u;
        *(_OWORD *)(v1889 + 62648) = 0u;
        *(_OWORD *)(v1889 + 62664) = 0u;
        *(_OWORD *)(v1889 + 62680) = 0u;
        *(_OWORD *)(v1889 + 62696) = 0u;
        *(_QWORD *)(v1869 + 24) = 0;
        *(_QWORD *)(v1869 + 32) = 0;
        *(_DWORD *)(v1869 + 40) = 0;
        v1456 = (char *)operator new(0x20uLL);
        strcpy(v1456, "VIO_VIOEstimatorKernelsX.elf");
        v1458 = v1858 + 1;
        v1457 = v1858[1];
        if (!v1457)
        {
LABEL_1540:
          operator delete(v1456);
          goto LABEL_1541;
        }
        v1459 = (uint64_t *)(v1858 + 1);
        while (1)
        {
          v1460 = *((char *)v1457 + 55);
          if (v1460 >= 0)
            v1461 = v1457 + 4;
          else
            v1461 = (const void *)v1457[4];
          if (v1460 >= 0)
            v1462 = *((unsigned __int8 *)v1457 + 55);
          else
            v1462 = v1457[5];
          if (v1462 >= 0x1C)
            v1463 = 28;
          else
            v1463 = v1462;
          v1464 = memcmp(v1456, v1461, v1463);
          if (v1464)
          {
            if (v1464 < 0)
              goto LABEL_1521;
          }
          else if (v1462 > 0x1C)
          {
LABEL_1521:
            v1459 = v1457;
            v1457 = (uint64_t *)*v1457;
            if (!v1457)
              goto LABEL_1540;
            continue;
          }
          v1465 = memcmp(v1461, v1456, v1463);
          if (v1465)
          {
            if ((v1465 & 0x80000000) == 0)
              goto LABEL_1884;
            goto LABEL_1539;
          }
          if (v1462 >= 0x1C)
          {
LABEL_1884:
            v1731 = (uint64_t *)*v1457;
            v1732 = v1457;
            if (*v1457)
            {
              v1732 = v1457;
              while (1)
              {
                v1733 = *((char *)v1731 + 55);
                if (v1733 >= 0)
                  v1734 = v1731 + 4;
                else
                  v1734 = (const void *)v1731[4];
                if (v1733 >= 0)
                  v1735 = *((unsigned __int8 *)v1731 + 55);
                else
                  v1735 = v1731[5];
                if (v1735 >= 0x1C)
                  v1736 = 28;
                else
                  v1736 = v1735;
                v1737 = memcmp(v1734, v1456, v1736);
                if (v1737)
                {
                  if (v1737 < 0)
                    goto LABEL_1886;
LABEL_1900:
                  v1732 = v1731;
                  v1731 = (uint64_t *)*v1731;
                  if (!v1731)
                    break;
                }
                else
                {
                  if (v1735 >= 0x1C)
                    goto LABEL_1900;
LABEL_1886:
                  v1731 = (uint64_t *)v1731[1];
                  if (!v1731)
                    break;
                }
              }
            }
            for (m = (uint64_t *)v1457[1]; m; m = (uint64_t *)*m)
            {
LABEL_1904:
              v1739 = *((char *)m + 55);
              if (v1739 >= 0)
                v1740 = m + 4;
              else
                v1740 = (const void *)m[4];
              if (v1739 >= 0)
                v1741 = *((unsigned __int8 *)m + 55);
              else
                v1741 = m[5];
              if (v1741 >= 0x1C)
                v1742 = 28;
              else
                v1742 = v1741;
              v1743 = memcmp(v1456, v1740, v1742);
              if (v1743)
              {
                if ((v1743 & 0x80000000) == 0)
                  goto LABEL_1903;
              }
              else if (v1741 <= 0x1C)
              {
LABEL_1903:
                m = (uint64_t *)m[1];
                if (!m)
                  break;
                goto LABEL_1904;
              }
              v1459 = m;
            }
            operator delete(v1456);
            if (v1732 != v1459)
            {
              do
              {
                v1483 = v1732[8];
                if (v1483 && !*(_QWORD *)(v1483 + 8))
                {
                  *(_QWORD *)(v1869 + 48) = v1732[7];
                  *(_QWORD *)(v1869 + 56) = v1483;
                  goto LABEL_1567;
                }
                v1744 = (uint64_t *)v1732[1];
                if (v1744)
                {
                  do
                  {
                    v1745 = v1744;
                    v1744 = (uint64_t *)*v1744;
                  }
                  while (v1744);
                }
                else
                {
                  do
                  {
                    v1745 = (uint64_t *)v1732[2];
                    _ZF = *v1745 == (_QWORD)v1732;
                    v1732 = v1745;
                  }
                  while (!_ZF);
                }
                v1732 = v1745;
              }
              while (v1745 != v1459);
            }
LABEL_1541:
            v1466 = operator new(0x68uLL);
            v1466[1] = 0;
            v1466[2] = 0;
            *v1466 = &off_24CA04AF0;
            sub_2100F5388((uint64_t)(v1466 + 3), "VIO_VIOEstimatorKernelsX.elf");
            *(_QWORD *)oslog = v1466 + 3;
            *(_QWORD *)&oslog[8] = v1466;
            v1456 = (char *)operator new(0x48uLL);
            v1467 = (char *)operator new(0x20uLL);
            *((_QWORD *)v1456 + 4) = v1467;
            *(_OWORD *)(v1456 + 40) = xmmword_2102DB470;
            strcpy(v1467, "VIO_VIOEstimatorKernelsX.elf");
            *((_QWORD *)v1456 + 7) = v1466 + 3;
            *((_QWORD *)v1456 + 8) = v1466;
            *(_QWORD *)&oslog[8] = 0;
            *(_QWORD *)oslog = 0;
            v1468 = *v1458;
            v1469 = v1858 + 1;
            if (!*v1458)
              goto LABEL_1559;
            while (1)
            {
              v1458 = (uint64_t **)v1468;
              v1470 = v1468 + 4;
              v1471 = (const void *)v1468[4];
              v1472 = *((char *)v1470 + 23);
              if (v1472 >= 0)
                v1473 = v1470;
              else
                v1473 = v1471;
              if (v1472 >= 0)
                v1474 = *((unsigned __int8 *)v1470 + 23);
              else
                v1474 = v1470[1];
              if (v1474 >= 0x1C)
                v1475 = 28;
              else
                v1475 = v1474;
              v1476 = memcmp(v1467, v1473, v1475);
              if (v1476)
              {
                if (v1476 < 0)
                  goto LABEL_1543;
              }
              else if (v1474 > 0x1C)
              {
LABEL_1543:
                v1468 = *v1458;
                v1469 = v1458;
                if (!*v1458)
                  goto LABEL_1559;
                continue;
              }
              v1468 = v1458[1];
              if (!v1468)
              {
                v1469 = v1458 + 1;
LABEL_1559:
                *(_QWORD *)v1456 = 0;
                *((_QWORD *)v1456 + 1) = 0;
                *((_QWORD *)v1456 + 2) = v1458;
                *v1469 = (uint64_t *)v1456;
                v1477 = (uint64_t *)**v1858;
                v1478 = (uint64_t *)v1456;
                if (v1477)
                {
                  *v1858 = v1477;
                  v1478 = *v1469;
                }
                sub_20E868578(v1858[1], v1478);
                v1858[2] = (uint64_t *)((char *)v1858[2] + 1);
                v1479 = *(std::__shared_weak_count **)&oslog[8];
                if (*(_QWORD *)&oslog[8])
                {
                  v1480 = (unint64_t *)(*(_QWORD *)&oslog[8] + 8);
                  do
                    v1481 = __ldaxr(v1480);
                  while (__stlxr(v1481 - 1, v1480));
                  if (!v1481)
                  {
                    ((void (*)(std::__shared_weak_count *))v1479->__on_zero_shared)(v1479);
                    std::__shared_weak_count::__release_weak(v1479);
                  }
                }
                v1482 = *((_QWORD *)v1456 + 7);
                v1483 = *((_QWORD *)v1456 + 8);
                *(_QWORD *)(v1869 + 48) = v1482;
                *(_QWORD *)(v1869 + 56) = v1483;
                if (v1483)
                {
LABEL_1567:
                  v1484 = (unint64_t *)(v1483 + 8);
                  do
                    v1485 = __ldxr(v1484);
                  while (__stxr(v1485 + 1, v1484));
                  v1482 = *(_QWORD *)(v1869 + 48);
                }
                *(_QWORD *)(v1869 + 64) = v1482;
                v1486 = *(_DWORD *)(v1482 + 68);
                if (v1486 < 3)
                {
                  v1487 = (char *)malloc_type_aligned_alloc(0x40uLL, 0x20BD00uLL, 0xD7729FCDuLL);
                  goto LABEL_1856;
                }
                if (v1486 == 3)
                {
                  v1654 = lacc_hardware::LaccHardware::operator lacc::CallInterface &();
                  v1487 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1654 + 152))(v1654, 2145536);
LABEL_1856:
                  v1456 = v1487;
                }
                *((_DWORD *)v1456 + 436) = 0;
                *((_QWORD *)v1456 + 219) = 0x7FF8000000000000;
                v1826 = vdupq_n_s64(0x7FF8000000000000uLL);
                *((int64x2_t *)v1456 + 110) = v1826;
                *((int64x2_t *)v1456 + 111) = v1826;
                *((int64x2_t *)v1456 + 112) = v1826;
                *((_OWORD *)v1456 + 113) = xmmword_2102DD520;
                *((_OWORD *)v1456 + 114) = v1866;
                *((_QWORD *)v1456 + 230) = 0;
                *(_OWORD *)(v1456 + 1848) = 0u;
                *((_QWORD *)v1456 + 233) = 0x3FF0000000000000;
                *((_OWORD *)v1456 + 117) = v1866;
                *((_OWORD *)v1456 + 119) = 0u;
                *((_OWORD *)v1456 + 121) = 0u;
                *((_OWORD *)v1456 + 118) = 0u;
                *((_OWORD *)v1456 + 120) = 0u;
                *((_OWORD *)v1456 + 122) = 0u;
                *((_QWORD *)v1456 + 246) = 0;
                *((_QWORD *)v1456 + 239) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 243) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 247) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 255) = 0;
                *(_OWORD *)(v1456 + 2008) = 0u;
                *(_OWORD *)(v1456 + 2024) = 0u;
                *(_OWORD *)(v1456 + 1992) = 0u;
                *((_QWORD *)v1456 + 248) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 252) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 256) = 0x3FF0000000000000;
                *((_DWORD *)v1456 + 518) = 0;
                *((_DWORD *)v1456 + 4600) = 0;
                *((_DWORD *)v1456 + 4666) = 0;
                *((_DWORD *)v1456 + 5328) = 0;
                *((_DWORD *)v1456 + 7730) = 0;
                *((_DWORD *)v1456 + 7748) = 0;
                *((_DWORD *)v1456 + 7824) = 0;
                *((_DWORD *)v1456 + 7906) = 0;
                *((_DWORD *)v1456 + 7922) = 0;
                *((_DWORD *)v1456 + 7930) = 0;
                *((_DWORD *)v1456 + 8092) = 0;
                *((_DWORD *)v1456 + 8834) = 0;
                *((_OWORD *)v1456 + 2209) = v1866;
                *((_DWORD *)v1456 + 8840) = 0;
                *((_DWORD *)v1456 + 8842) = 0;
                *(_OWORD *)(v1456 + 35400) = 0u;
                *(_OWORD *)(v1456 + 35384) = 0u;
                *((_QWORD *)v1456 + 4427) = 0x7FEFFFFFFFFFFFFFLL;
                *((_DWORD *)v1456 + 8856) = 0;
                v1456[35428] = 0;
                *(_OWORD *)(v1456 + 35432) = 0u;
                *(_OWORD *)(v1456 + 35448) = 0u;
                *((_QWORD *)v1456 + 4433) = 0x7FEFFFFFFFFFFFFFLL;
                *((_DWORD *)v1456 + 8868) = 0;
                v1456[35476] = 0;
                *(_OWORD *)(v1456 + 35480) = 0u;
                *(_OWORD *)(v1456 + 35496) = 0u;
                *((_QWORD *)v1456 + 4439) = 0x7FEFFFFFFFFFFFFFLL;
                *((_DWORD *)v1456 + 8880) = 0;
                v1456[35524] = 0;
                *((_DWORD *)v1456 + 10684) = 0;
                *((_DWORD *)v1456 + 10686) = 0;
                *((_DWORD *)v1456 + 10902) = 0;
                bzero(v1456 + 43616, 0x2C0uLL);
                *((_DWORD *)v1456 + 90956) = -1163005939;
                *((_DWORD *)v1456 + 90957) = -1163005939;
                *((_DWORD *)v1456 + 90958) = -1163005939;
                *((_DWORD *)v1456 + 90959) = -1163005939;
                *((_DWORD *)v1456 + 90960) = -1163005939;
                *((_DWORD *)v1456 + 90961) = -1163005939;
                *((_DWORD *)v1456 + 90962) = -1163005939;
                *((_DWORD *)v1456 + 90963) = -1163005939;
                *((_DWORD *)v1456 + 90964) = -1163005939;
                *((_DWORD *)v1456 + 90965) = -1163005939;
                *((_DWORD *)v1456 + 90966) = -1163005939;
                *((_DWORD *)v1456 + 90967) = -1163005939;
                *((_DWORD *)v1456 + 90968) = -1163005939;
                *((_DWORD *)v1456 + 90969) = -1163005939;
                *((_DWORD *)v1456 + 90970) = -1163005939;
                *((_DWORD *)v1456 + 90971) = -1163005939;
                *((_DWORD *)v1456 + 91396) = 0;
                *(int64x2_t *)(v1456 + 365592) = v1826;
                *(int64x2_t *)(v1456 + 365608) = v1826;
                *(int64x2_t *)(v1456 + 365624) = v1826;
                *(_OWORD *)(v1456 + 365640) = xmmword_2102DB700;
                *(_OWORD *)(v1456 + 365656) = v1866;
                *((_QWORD *)v1456 + 45709) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 45712) = 0;
                *((_OWORD *)v1456 + 22855) = 0u;
                *(_OWORD *)(v1456 + 365704) = v1866;
                *((_QWORD *)v1456 + 45715) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 45726) = 0;
                *((_OWORD *)v1456 + 22862) = 0u;
                *((_OWORD *)v1456 + 22861) = 0u;
                *((_OWORD *)v1456 + 22860) = 0u;
                *((_OWORD *)v1456 + 22859) = 0u;
                *((_OWORD *)v1456 + 22858) = 0u;
                *((_QWORD *)v1456 + 45719) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 45723) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 45735) = 0;
                *(_OWORD *)(v1456 + 365848) = 0u;
                *(_OWORD *)(v1456 + 365864) = 0u;
                *(_OWORD *)(v1456 + 365816) = v1866;
                *(_OWORD *)(v1456 + 365832) = 0u;
                *((_QWORD *)v1456 + 45732) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 45736) = 0x3FF0000000000000;
                *((_DWORD *)v1456 + 91478) = 0;
                *((_DWORD *)v1456 + 95560) = 0;
                *((_DWORD *)v1456 + 95626) = 0;
                *((_DWORD *)v1456 + 96288) = 0;
                *((_DWORD *)v1456 + 98690) = 0;
                *((_DWORD *)v1456 + 98708) = 0;
                *((_OWORD *)v1456 + 24680) = 0u;
                *((_DWORD *)v1456 + 113124) = 0;
                *((_DWORD *)v1456 + 113486) = 0;
                *((_DWORD *)v1456 + 113488) = 0;
                *((_DWORD *)v1456 + 113514) = 0;
                *((_DWORD *)v1456 + 113624) = 0;
                *((_DWORD *)v1456 + 113818) = 0;
                *((_DWORD *)v1456 + 127820) = 0;
                *((_WORD *)v1456 + 255648) = 0;
                *(int64x2_t *)(v1456 + 511304) = v1826;
                *((_WORD *)v1456 + 257616) = 0;
                *(int64x2_t *)(v1456 + 515240) = v1826;
                *((_WORD *)v1456 + 259584) = 0;
                *(int64x2_t *)(v1456 + 519176) = v1826;
                *((_WORD *)v1456 + 261552) = 0;
                *(int64x2_t *)(v1456 + 523112) = v1826;
                *((_WORD *)v1456 + 263520) = 0;
                *(int64x2_t *)(v1456 + 527048) = v1826;
                *((_WORD *)v1456 + 265488) = 0;
                *(int64x2_t *)(v1456 + 530984) = v1826;
                *((_WORD *)v1456 + 267456) = 0;
                *(int64x2_t *)(v1456 + 534920) = v1826;
                *((_WORD *)v1456 + 269424) = 0;
                *(int64x2_t *)(v1456 + 538856) = v1826;
                *((_WORD *)v1456 + 271392) = 0;
                *(int64x2_t *)(v1456 + 542792) = v1826;
                *((_DWORD *)v1456 + 144668) = 0;
                *((_DWORD *)v1456 + 144674) = 0;
                *((_DWORD *)v1456 + 145187) = 0;
                *((_DWORD *)v1456 + 145263) = 0;
                *((_DWORD *)v1456 + 145415) = 0;
                *((_OWORD *)v1456 + 36169) = 0u;
                *((_DWORD *)v1456 + 145716) = 0;
                *((_DWORD *)v1456 + 173317) = 0;
                *((_DWORD *)v1456 + 187630) = 0;
                *((_DWORD *)v1456 + 187706) = 0;
                *((_DWORD *)v1456 + 187858) = 0;
                *((_DWORD *)v1456 + 215760) = 0;
                *((_DWORD *)v1456 + 188159) = 0;
                *((_DWORD *)v1456 + 229561) = 0;
                *((_DWORD *)v1456 + 187122) = 0;
                *(_OWORD *)(v1456 + 748472) = 0u;
                *((_DWORD *)v1456 + 230074) = 0;
                *((_DWORD *)v1456 + 230150) = 0;
                *((_DWORD *)v1456 + 230302) = 0;
                *((_DWORD *)v1456 + 230603) = 0;
                *(_OWORD *)(v1456 + 918252) = 0u;
                *((_DWORD *)v1456 + 258204) = 0;
                *((_DWORD *)v1456 + 272517) = 0;
                *((_DWORD *)v1456 + 272593) = 0;
                *((_DWORD *)v1456 + 272745) = 0;
                *((_DWORD *)v1456 + 273046) = 0;
                *((_DWORD *)v1456 + 300647) = 0;
                *((_DWORD *)v1456 + 314448) = 0;
                *((_DWORD *)v1456 + 272009) = 0;
                *(_OWORD *)(v1456 + 1088020) = 0u;
                *((_DWORD *)v1456 + 451220) = 0;
                *(int64x2_t *)(v1456 + 1804888) = v1826;
                *(int64x2_t *)(v1456 + 1804904) = v1826;
                *(int64x2_t *)(v1456 + 1804920) = v1826;
                *(_OWORD *)(v1456 + 1804936) = xmmword_2102DB700;
                *(_OWORD *)(v1456 + 1804952) = v1866;
                *((_QWORD *)v1456 + 225621) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 225624) = 0;
                *((_OWORD *)v1456 + 112811) = 0u;
                *(_OWORD *)(v1456 + 1805000) = v1866;
                *((_QWORD *)v1456 + 225627) = 0x3FF0000000000000;
                *((_OWORD *)v1456 + 112814) = 0u;
                *((_OWORD *)v1456 + 112815) = 0u;
                *((_OWORD *)v1456 + 112816) = 0u;
                *((_OWORD *)v1456 + 112817) = 0u;
                *((_OWORD *)v1456 + 112818) = 0u;
                *((_QWORD *)v1456 + 225638) = 0;
                *((_QWORD *)v1456 + 225631) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 225635) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 225647) = 0;
                *(_OWORD *)(v1456 + 1805144) = 0u;
                *(_OWORD *)(v1456 + 1805160) = 0u;
                *(_OWORD *)(v1456 + 1805128) = 0u;
                *(_OWORD *)(v1456 + 1805112) = v1866;
                *((_QWORD *)v1456 + 225644) = 0x3FF0000000000000;
                *((_QWORD *)v1456 + 225648) = 0x3FF0000000000000;
                *((_DWORD *)v1456 + 451302) = 0;
                *((_DWORD *)v1456 + 455384) = 0;
                *((_DWORD *)v1456 + 455450) = 0;
                *((_DWORD *)v1456 + 456112) = 0;
                *((_DWORD *)v1456 + 458514) = 0;
                *((_DWORD *)v1456 + 458532) = 0;
                *(_QWORD *)(v1869 + 80) = &off_24CA04B40;
                *(_QWORD *)(v1869 + 72) = v1456;
                *(_QWORD *)(v1869 + 104) = v1869 + 80;
                *(_QWORD *)(v1869 + 88) = v1863;
                v1655 = v1889;
                *(_OWORD *)(v1889 + 62920) = 0u;
                *(_OWORD *)(v1889 + 62808) = 0u;
                *(_DWORD *)(v1889 + 62824) = 0;
                *(_OWORD *)(v1889 + 62832) = 0u;
                *(_DWORD *)(v1889 + 62848) = 0;
                *(_QWORD *)(v1889 + 62856) = 0;
                *(_BYTE *)(v1889 + 62864) = 0;
                *(_QWORD *)(v1889 + 62876) = 0;
                *(_QWORD *)(v1889 + 62884) = 0;
                *(_QWORD *)(v1889 + 62868) = 0;
                *(_QWORD *)(v1889 + 62889) = 0;
                *(_QWORD *)(v1889 + 62900) = 0;
                *(_DWORD *)(v1889 + 62908) = 0;
                *(_QWORD *)(v1869 + 216) = v1889 + 62920;
                *(_OWORD *)(v1889 + 62936) = 0u;
                *(_OWORD *)(v1889 + 62952) = 0u;
                *(_OWORD *)(v1889 + 62968) = 0u;
                *(_OWORD *)(v1889 + 62984) = 0u;
                *(_OWORD *)(v1889 + 63000) = 0u;
                *(_BYTE *)(v1889 + 63016) = 0;
                *((_DWORD *)v1456 + 90954) = 0;
                *(_QWORD *)v1830 = 0xA00000001;
                *(_BYTE *)(v1830 + 8) = 0;
                *(_OWORD *)(v1889 + 63040) = xmmword_21039D460;
                *(_QWORD *)(v1830 + 32) = 0x3EB0C6F7A0B5ED8DLL;
                *(_BYTE *)(v1830 + 40) = 0;
                *(_QWORD *)(v1830 + 48) = 0x3FF7B8BAC710CB29;
                *(_QWORD *)(v1830 + 568) = v1889 + 63080;
                *(_OWORD *)(v1889 + 63600) = xmmword_210378040;
                *(_WORD *)(v1830 + 592) = 0;
                *(_QWORD *)(v1830 + 624) = 0;
                *(_QWORD *)(v1830 + 656) = 0;
                *(_QWORD *)(v1830 + 688) = 0;
                *(_QWORD *)(v1830 + 720) = 0;
                *(_OWORD *)(v1830 + 728) = xmmword_2103B8410;
                *(_QWORD *)(v1830 + 744) = 0x3F50624DD2F1A9FCLL;
                *(_BYTE *)(v1830 + 752) = 1;
                *(_OWORD *)(v1830 + 760) = xmmword_2102DBD20;
                *(_OWORD *)(v1830 + 776) = xmmword_2103B4940;
                *(_QWORD *)(v1830 + 792) = 0x4000000000000000;
                v1656 = *(_QWORD *)v1889;
                v1354 = a1 + 2928;
                v1188 = v1876;
                if (*(_QWORD *)v1889)
                {
                  if (*(_BYTE *)(v1889 + 1317))
                  {
                    v1657 = *(double *)v1656;
                    v1658 = *(_QWORD *)(v1656 + 8);
                    v1659 = *(double *)(v1656 + 16);
                    v1660 = *(_QWORD *)(v1656 + 24);
                    *(_OWORD *)v1906 = *(_OWORD *)(v1656 + 32);
                    *(_QWORD *)&v1906[16] = *(_QWORD *)(v1656 + 48);
                    v1661 = *(_QWORD *)(v1656 + 56);
                    __dst[0] = *(_OWORD *)(v1656 + 64);
                    *(_QWORD *)&__dst[1] = *(_QWORD *)(v1656 + 80);
                    v1662 = *(_OWORD *)(v1656 + 88);
                    v1960 = *(_QWORD *)(v1656 + 104);
                    v1959 = v1662;
                    v1663 = *(_OWORD *)(v1656 + 112);
                    v1958 = *(_QWORD *)(v1656 + 128);
                    v1957 = v1663;
                    v1664 = *(_OWORD *)(v1656 + 136);
                    v1892 = *(_QWORD *)(v1656 + 152);
                    v1891 = v1664;
                    v1665 = *(_OWORD *)(v1656 + 160);
                    v1666 = *(_OWORD *)(v1656 + 176);
                    v1667 = *(_OWORD *)(v1656 + 192);
                    v1668 = *(_OWORD *)(v1656 + 208);
                    v1946 = *(std::__shared_weak_count **)(v1656 + 224);
                    *(_OWORD *)&oslog[32] = v1667;
                    v1945 = v1668;
                    *(_OWORD *)oslog = v1665;
                    *(_OWORD *)&oslog[16] = v1666;
                    v1669 = *(_OWORD *)(v1656 + 232);
                    v1670 = *(_OWORD *)(v1656 + 248);
                    v1671 = *(_OWORD *)(v1656 + 264);
                    v1672 = *(_OWORD *)(v1656 + 280);
                    v1956 = *(std::__shared_weak_count **)(v1656 + 296);
                    v1954 = v1671;
                    v1955 = v1672;
                    v1952 = v1669;
                    v1953 = v1670;
                    v1673 = v1659 * *(double *)(v1889 + 1328);
                    *(double *)(v1889 + 176) = v1657 * *(double *)(v1889 + 1320);
                    *(_QWORD *)(v1889 + 184) = v1658;
                    *(double *)(v1889 + 192) = v1673;
                    *(_QWORD *)(v1889 + 200) = v1660;
                    *(_OWORD *)v1825 = *(_OWORD *)v1906;
                    *(_QWORD *)(v1825 + 16) = *(_QWORD *)&v1906[16];
                    *(_QWORD *)(v1889 + 232) = v1661;
                    v1674 = __dst[0];
                    *(_QWORD *)(v1822 + 16) = *(_QWORD *)&__dst[1];
                    *(_OWORD *)v1822 = v1674;
                    v1675 = v1959;
                    *(_QWORD *)(v1823 + 16) = v1960;
                    *(_OWORD *)v1823 = v1675;
                    v1676 = v1957;
                    *(_QWORD *)(v1819 + 16) = v1958;
                    *(_OWORD *)v1819 = v1676;
                    v1677 = v1891;
                    *(_QWORD *)(v1820 + 16) = v1892;
                    *(_OWORD *)v1820 = v1677;
                    v1678 = *(_OWORD *)oslog;
                    v1679 = *(_OWORD *)&oslog[16];
                    v1680 = *(_OWORD *)&oslog[32];
                    v1681 = v1945;
                    *(_QWORD *)(v1821 + 64) = v1946;
                    *(_OWORD *)(v1821 + 32) = v1680;
                    *(_OWORD *)(v1821 + 48) = v1681;
                    *(_OWORD *)v1821 = v1678;
                    *(_OWORD *)(v1821 + 16) = v1679;
                    v1682 = v1952;
                    v1683 = v1953;
                    v1684 = v1954;
                    v1685 = v1955;
                    *(_QWORD *)(v1818 + 64) = v1956;
                    *(_OWORD *)(v1818 + 32) = v1684;
                    *(_OWORD *)(v1818 + 48) = v1685;
                    *(_OWORD *)v1818 = v1682;
                    *(_OWORD *)(v1818 + 16) = v1683;
                  }
                  else
                  {
                    v1711 = *(_OWORD *)(v1656 + 16);
                    *v1817 = *(_OWORD *)v1656;
                    v1817[1] = v1711;
                    v1712 = *(_OWORD *)(v1656 + 32);
                    *(_QWORD *)(v1825 + 16) = *(_QWORD *)(v1656 + 48);
                    *(_OWORD *)v1825 = v1712;
                    *(_QWORD *)(v1889 + 232) = *(_QWORD *)(v1656 + 56);
                    v1713 = *(_OWORD *)(v1656 + 64);
                    *(_QWORD *)(v1822 + 16) = *(_QWORD *)(v1656 + 80);
                    *(_OWORD *)v1822 = v1713;
                    v1714 = *(_OWORD *)(v1656 + 88);
                    *(_QWORD *)(v1823 + 16) = *(_QWORD *)(v1656 + 104);
                    *(_OWORD *)v1823 = v1714;
                    v1715 = *(_OWORD *)(v1656 + 112);
                    *(_QWORD *)(v1819 + 16) = *(_QWORD *)(v1656 + 128);
                    *(_OWORD *)v1819 = v1715;
                    v1716 = *(_OWORD *)(v1656 + 136);
                    *(_QWORD *)(v1820 + 16) = *(_QWORD *)(v1656 + 152);
                    *(_OWORD *)v1820 = v1716;
                    v1718 = *(_OWORD *)(v1656 + 192);
                    v1717 = *(_OWORD *)(v1656 + 208);
                    v1719 = *(_OWORD *)(v1656 + 176);
                    *(_QWORD *)(v1821 + 64) = *(_QWORD *)(v1656 + 224);
                    *(_OWORD *)(v1821 + 32) = v1718;
                    *(_OWORD *)(v1821 + 48) = v1717;
                    *(_OWORD *)(v1821 + 16) = v1719;
                    *(_OWORD *)v1821 = *(_OWORD *)(v1656 + 160);
                    v1720 = *(_OWORD *)(v1656 + 264);
                    v1721 = *(_OWORD *)(v1656 + 280);
                    v1722 = *(_OWORD *)(v1656 + 248);
                    *(_QWORD *)(v1818 + 64) = *(_QWORD *)(v1656 + 296);
                    *(_OWORD *)(v1818 + 32) = v1720;
                    *(_OWORD *)(v1818 + 48) = v1721;
                    *(_OWORD *)(v1818 + 16) = v1722;
                    *(_OWORD *)v1818 = *(_OWORD *)(v1656 + 232);
                  }
                }
                if (*(_QWORD *)(v1889 + 3128))
                {
                  v1723 = *(_QWORD **)(v1889 + 3120);
                  if (v1723)
                  {
                    do
                    {
                      v1724 = (_QWORD *)*v1723;
                      operator delete(v1723);
                      v1723 = v1724;
                    }
                    while (v1724);
                  }
                  *(_QWORD *)(v1889 + 3120) = 0;
                  v1725 = *(_QWORD *)(v1889 + 3112);
                  if (v1725)
                  {
                    for (n = 0; n != v1725; ++n)
                      *(_QWORD *)(*v1824 + 8 * n) = 0;
                  }
                  v1655 = v1889;
                  *(_QWORD *)(v1889 + 3128) = 0;
                }
                *(_OWORD *)(v1655 + 63840) = 0u;
                *(_OWORD *)(v1655 + 63824) = 0u;
                *(_DWORD *)(v1830 + 832) = 1065353216;
                *(_OWORD *)(v1655 + 63952) = 0u;
                *(_OWORD *)(v1655 + 63968) = 0u;
                *(_QWORD *)(v1655 + 63984) = 0;
                *(_OWORD *)(v1655 + 63936) = 0u;
                *(_OWORD *)(v1655 + 63864) = 0u;
                *(_OWORD *)(v1655 + 63880) = 0u;
                *(_OWORD *)(v1655 + 63896) = 0u;
                *(_OWORD *)(v1655 + 63912) = 0u;
                *(_QWORD *)v1836 = 0x3FF0000000000000;
                *(_QWORD *)(v1836 + 32) = 0x3FF0000000000000;
                *(_QWORD *)(v1836 + 64) = 0x3FF0000000000000;
                *(_QWORD *)(v1655 + 64000) = 0;
                *(_OWORD *)(v1655 + 64008) = 0u;
                *(_QWORD *)(v1655 + 64080) = 0;
                *(_OWORD *)(v1655 + 64064) = 0u;
                *(_OWORD *)(v1655 + 64048) = 0u;
                *(_OWORD *)(v1655 + 64032) = 0u;
                *(_QWORD *)(v1836 + 96) = 0x3FF0000000000000;
                *(_QWORD *)(v1836 + 128) = 0x3FF0000000000000;
                *(_QWORD *)(v1836 + 160) = 0x3FF0000000000000;
                *(_QWORD *)(v1655 + 64112) = 0;
                *(_OWORD *)(v1655 + 64128) = 0u;
                *(_OWORD *)(v1655 + 64096) = 0u;
                *(_QWORD *)(v1836 + 192) = v1655 + 64128;
                *(_OWORD *)(v1655 + 64160) = 0u;
                *(_OWORD *)(v1655 + 64144) = 0u;
                *(_DWORD *)(v1836 + 248) = 1065353216;
                *(_OWORD *)(v1655 + 64200) = 0u;
                *(_OWORD *)(v1655 + 64184) = 0u;
                *(_DWORD *)(v1836 + 288) = 1065353216;
                *(_OWORD *)(v1655 + 64240) = 0u;
                *(_OWORD *)(v1655 + 64224) = 0u;
                *(_DWORD *)(v1836 + 328) = 1065353216;
                *(_DWORD *)v1839 = 0;
                *(_BYTE *)(v1839 + 8) = 0;
                *(_BYTE *)(v1839 + 104) = 0;
                *(_BYTE *)(v1839 + 112) = 0;
                *(_BYTE *)(v1839 + 208) = 0;
                *(_BYTE *)(v1839 + 216) = 0;
                *(_BYTE *)(v1839 + 312) = 0;
                *(_BYTE *)(v1839 + 320) = 0;
                *(_BYTE *)(v1839 + 328) = 0;
                *(_DWORD *)v1841 = 0;
                *(_BYTE *)(v1841 + 864) = 0;
                *(_BYTE *)(v1655 + 64632) = 0;
                *(_QWORD *)(v1655 + 64624) = 0;
                *(_OWORD *)(v1655 + 64608) = 0u;
                *(_DWORD *)v1843 = 0;
                *(_QWORD *)(v1655 + 0x10000) = 0;
                *(_OWORD *)(v1655 + 65520) = 0u;
                *(_OWORD *)(v1655 + 65504) = 0u;
                *(_OWORD *)(v1655 + 65488) = 0u;
                *(_QWORD *)(v1843 + 8) = 0x3FF0000000000000;
                *(_QWORD *)(v1843 + 40) = 0x3FF0000000000000;
                *(_QWORD *)(v1843 + 72) = 0x3FF0000000000000;
                *(_OWORD *)(v1655 + 65552) = 0u;
                *(_BYTE *)(v1655 + 65576) = 0;
                *(_QWORD *)(v1655 + 65568) = 0;
                *(_OWORD *)(v1655 + 65592) = 0u;
                *(_QWORD *)(v1843 + 112) = v1655 + 65592;
                *(_OWORD *)(v1655 + 65616) = 0u;
                *(_QWORD *)(v1843 + 136) = v1655 + 65616;
                bzero((void *)(v1655 + 65632), 0x601uLL);
                *(_BYTE *)(v1655 + 67680) = 0;
                *(_OWORD *)(v1655 + 67648) = 0u;
                *(_OWORD *)(v1655 + 67664) = 0u;
                *(_OWORD *)(v1655 + 67616) = 0u;
                *(_OWORD *)(v1655 + 67632) = 0u;
                *(_OWORD *)(v1655 + 67584) = 0u;
                *(_OWORD *)(v1655 + 67600) = 0u;
                *(_OWORD *)(v1655 + 67552) = 0u;
                *(_OWORD *)(v1655 + 67568) = 0u;
                *(_OWORD *)(v1655 + 67520) = 0u;
                *(_OWORD *)(v1655 + 67536) = 0u;
                *(_OWORD *)(v1655 + 67488) = 0u;
                *(_OWORD *)(v1655 + 67504) = 0u;
                *(_OWORD *)(v1655 + 67456) = 0u;
                *(_OWORD *)(v1655 + 67472) = 0u;
                *(_OWORD *)(v1655 + 67424) = 0u;
                *(_OWORD *)(v1655 + 67440) = 0u;
                *(_OWORD *)(v1655 + 67392) = 0u;
                *(_OWORD *)(v1655 + 67408) = 0u;
                *(_OWORD *)(v1655 + 67360) = 0u;
                *(_OWORD *)(v1655 + 67376) = 0u;
                *(_OWORD *)(v1655 + 67328) = 0u;
                *(_OWORD *)(v1655 + 67344) = 0u;
                *(_OWORD *)(v1655 + 67296) = 0u;
                *(_OWORD *)(v1655 + 67312) = 0u;
                *(_OWORD *)(v1655 + 67264) = 0u;
                *(_OWORD *)(v1655 + 67280) = 0u;
                *(_OWORD *)(v1655 + 67232) = 0u;
                *(_OWORD *)(v1655 + 67248) = 0u;
                *(_OWORD *)(v1655 + 67200) = 0u;
                *(_OWORD *)(v1655 + 67216) = 0u;
                *(_BYTE *)(v1843 + 2768) = 0;
                bzero((void *)(v1655 + 67688), 0x224uLL);
                *(_DWORD *)(v1655 + 67192) = 0;
                *(_OWORD *)(v1655 + 67176) = 0u;
                v1727 = *(_QWORD *)(v1655 + 2160);
                *(_QWORD *)(v1655 + 23416) = v1727;
                *(_QWORD *)(v1860 + 16896) = v1727;
                *(int8x16_t *)(v1655 + 3152) = vextq_s8(*(int8x16_t *)(v1655 + 1808), *(int8x16_t *)(v1655 + 1808), 8uLL);
                *(_DWORD *)(v1655 + 7836) = 1;
                v1728 = *(_QWORD *)(v1873 + 16);
                *(_QWORD *)(v1873 + 16) = v1655;
                if (v1728)
                {
                  v1729 = sub_20F89E430(v1728);
                  MEMORY[0x212BC6398](v1729, 0x10F2C40C02BF4D9);
                }
                v1353 = (void *)v1900;
                if ((_QWORD)v1900)
                  goto LABEL_1436;
                goto LABEL_1437;
              }
            }
          }
LABEL_1539:
          v1457 = (uint64_t *)v1457[1];
          if (!v1457)
            goto LABEL_1540;
        }
      }
    }
  }
  v1111 = *(_QWORD *)(v1100 + 8);
  if (v1111)
  {
    sub_20FC08CD0((uint64_t)object, v1108, v1103, v1102, v1828, (uint64_t)v1844, v1104, v1105, v1106, 1, v1107, v1109, v1110);
    sub_20FC07BB0(v1111);
    sub_20FC07C74(v1111);
    v1112 = *(_OWORD *)object;
    *(void **)(v1111 + 16) = object[2];
    *(_OWORD *)v1111 = v1112;
    if ((void **)v1111 != object)
    {
      sub_20FB42E10((_QWORD *)(v1111 + 24), (char *)v1896, *((char **)&v1896 + 1), (uint64_t)(*((_QWORD *)&v1896 + 1) - v1896) >> 3);
      sub_20E86811C((_QWORD *)(v1111 + 48), (char *)__src, *((char **)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3);
      sub_20E86811C((_QWORD *)(v1111 + 72), (char *)v1900, *((char **)&v1900 + 1), (uint64_t)(*((_QWORD *)&v1900 + 1) - v1900) >> 3);
    }
    v1113 = *(_OWORD *)&v1901[8];
    v1114 = v1902;
    v1115 = v1903[0];
    __asm { FMOV            V3.2D, #1.0 }
    *(_OWORD *)(v1111 + 240) = _Q3;
    v1117 = (_OWORD *)(v1111 + 240);
    *(_OWORD *)(v1111 + 112) = v1114;
    *(_OWORD *)(v1111 + 128) = v1115;
    *(_OWORD *)(v1111 + 96) = v1113;
    *(_OWORD *)(v1111 + 176) = xmmword_2103B83D0;
    *(_OWORD *)(v1111 + 192) = xmmword_2103B83E0;
    *(_QWORD *)(v1111 + 208) = 0;
    v1118 = (_OWORD *)(v1111 + 208);
    *(_QWORD *)(v1111 + 216) = 0;
    *(_OWORD *)(v1111 + 224) = xmmword_2103B83F0;
    *(_QWORD *)(v1111 + 256) = 0x3FF0000000000000;
    *(_QWORD *)(v1111 + 264) = 0;
    v1119 = (_OWORD *)(v1111 + 264);
    *(_QWORD *)(v1111 + 272) = 0;
    *(_QWORD *)(v1111 + 280) = 0;
    *(_OWORD *)(v1111 + 288) = _Q3;
    v1120 = (_OWORD *)(v1111 + 288);
    *(_QWORD *)(v1111 + 304) = 0x3FF0000000000000;
    *(_QWORD *)(v1111 + 312) = 0;
    v1121 = (_OWORD *)(v1111 + 312);
    *(_QWORD *)(v1111 + 336) = 0x3FF0000000000000;
    v1122 = (_OWORD *)(v1111 + 336);
    *(_QWORD *)(v1111 + 320) = 0;
    *(_QWORD *)(v1111 + 328) = 0;
    *(_QWORD *)(v1111 + 344) = 0;
    *(_QWORD *)(v1111 + 352) = 0;
    *(_QWORD *)(v1111 + 360) = 0;
    *(_QWORD *)(v1111 + 368) = 0x3FF0000000000000;
    *(_QWORD *)(v1111 + 376) = 0;
    *(_QWORD *)(v1111 + 384) = 0;
    *(_QWORD *)(v1111 + 392) = 0;
    *(_OWORD *)(v1111 + 400) = _Q3;
    *(_QWORD *)(v1111 + 416) = 0;
    *(_QWORD *)(v1111 + 424) = 0;
    *(_QWORD *)(v1111 + 432) = 0;
    *(_QWORD *)(v1111 + 440) = 0x3FF0000000000000;
    *(_QWORD *)(v1111 + 464) = 0;
    *(_QWORD *)(v1111 + 472) = 0x3FF0000000000000;
    *(_QWORD *)(v1111 + 448) = 0;
    *(_QWORD *)(v1111 + 456) = 0;
    sub_20F626FF4(v1111 + 528, (__int128 *)v1909);
    v1123 = v1931;
    *(_OWORD *)(v1111 + 1256) = v1930;
    *(_OWORD *)(v1111 + 1272) = v1123;
    *(_OWORD *)(v1111 + 1288) = v1932;
    sub_20E867F58(v1111 + 1304, (uint64_t)v1933);
    *(_OWORD *)(v1111 + 2144) = v1941;
    *(_OWORD *)(v1111 + 2160) = v1942;
    *(_QWORD *)(v1111 + 2176) = v1943;
    *(_DWORD *)(v1111 + 2184) = 0;
    if (*(_QWORD *)(v1111 + 3128))
    {
      v1124 = *(_QWORD **)(v1111 + 3120);
      if (v1124)
      {
        do
        {
          v1125 = (_QWORD *)*v1124;
          operator delete(v1124);
          v1124 = v1125;
        }
        while (v1125);
      }
      *(_QWORD *)(v1111 + 3120) = 0;
      v1126 = *(_QWORD *)(v1111 + 3112);
      if (v1126)
      {
        for (ii = 0; ii != v1126; ++ii)
          *(_QWORD *)(*(_QWORD *)(v1111 + 3104) + 8 * ii) = 0;
      }
      *(_QWORD *)(v1111 + 3128) = 0;
    }
    v1128 = *(char **)v1111;
    if (*(_QWORD *)v1111)
    {
      v1129 = (_OWORD *)(v1111 + 408);
      if (*(_BYTE *)(v1111 + 1317))
      {
        v1130 = *(double *)v1128;
        v1131 = *((_QWORD *)v1128 + 1);
        v1132 = *((double *)v1128 + 2);
        v1133 = *((_QWORD *)v1128 + 3);
        *(_OWORD *)v1906 = *((_OWORD *)v1128 + 2);
        *(_QWORD *)&v1906[16] = *((_QWORD *)v1128 + 6);
        v1134 = *((_QWORD *)v1128 + 7);
        __dst[0] = *((_OWORD *)v1128 + 4);
        *(_QWORD *)&__dst[1] = *((_QWORD *)v1128 + 10);
        v1135 = *(_OWORD *)(v1128 + 88);
        v1960 = *((_QWORD *)v1128 + 13);
        v1959 = v1135;
        v1136 = *((_OWORD *)v1128 + 7);
        v1958 = *((_QWORD *)v1128 + 16);
        v1957 = v1136;
        v1137 = *(_OWORD *)(v1128 + 136);
        v1892 = *((_QWORD *)v1128 + 19);
        v1891 = v1137;
        v1138 = *((_OWORD *)v1128 + 10);
        v1139 = *((_OWORD *)v1128 + 11);
        v1140 = *((_OWORD *)v1128 + 12);
        v1141 = *((_OWORD *)v1128 + 13);
        v1946 = (std::__shared_weak_count *)*((_QWORD *)v1128 + 28);
        *(_OWORD *)&oslog[32] = v1140;
        v1945 = v1141;
        *(_OWORD *)oslog = v1138;
        *(_OWORD *)&oslog[16] = v1139;
        v1142 = *(_OWORD *)(v1128 + 232);
        v1143 = *(_OWORD *)(v1128 + 248);
        v1144 = *(_OWORD *)(v1128 + 264);
        v1145 = *(_OWORD *)(v1128 + 280);
        v1956 = (std::__shared_weak_count *)*((_QWORD *)v1128 + 37);
        v1954 = v1144;
        v1955 = v1145;
        v1952 = v1142;
        v1953 = v1143;
        v1146 = v1132 * *(double *)(v1111 + 1328);
        *(double *)(v1111 + 176) = v1130 * *(double *)(v1111 + 1320);
        *(_QWORD *)(v1111 + 184) = v1131;
        *(double *)(v1111 + 192) = v1146;
        *(_QWORD *)(v1111 + 200) = v1133;
        *v1118 = *(_OWORD *)v1906;
        *(_QWORD *)(v1111 + 224) = *(_QWORD *)&v1906[16];
        *(_QWORD *)(v1111 + 232) = v1134;
        v1147 = __dst[0];
        *(_QWORD *)(v1111 + 256) = *(_QWORD *)&__dst[1];
        *v1117 = v1147;
        v1148 = v1959;
        *(_QWORD *)(v1111 + 280) = v1960;
        *v1119 = v1148;
        v1149 = v1957;
        *(_QWORD *)(v1111 + 304) = v1958;
        *v1120 = v1149;
        v1150 = v1891;
        *(_QWORD *)(v1111 + 328) = v1892;
        *v1121 = v1150;
        v1151 = *(_OWORD *)oslog;
        v1152 = *(_OWORD *)&oslog[16];
        v1153 = *(_OWORD *)&oslog[32];
        v1154 = v1945;
        *(_QWORD *)(v1111 + 400) = v1946;
        *(_OWORD *)(v1111 + 368) = v1153;
        *(_OWORD *)(v1111 + 384) = v1154;
        *v1122 = v1151;
        *(_OWORD *)(v1111 + 352) = v1152;
        v1155 = v1952;
        v1156 = v1953;
        v1157 = v1954;
        v1158 = v1955;
        *(_QWORD *)(v1111 + 472) = v1956;
        *(_OWORD *)(v1111 + 440) = v1157;
        *(_OWORD *)(v1111 + 456) = v1158;
        *v1129 = v1155;
        *(_OWORD *)(v1111 + 424) = v1156;
      }
      else
      {
        v1488 = *((_OWORD *)v1128 + 1);
        *(_OWORD *)(v1111 + 176) = *(_OWORD *)v1128;
        *(_OWORD *)(v1111 + 192) = v1488;
        v1489 = *((_OWORD *)v1128 + 2);
        *(_QWORD *)(v1111 + 224) = *((_QWORD *)v1128 + 6);
        *v1118 = v1489;
        *(_QWORD *)(v1111 + 232) = *((_QWORD *)v1128 + 7);
        v1490 = *((_OWORD *)v1128 + 4);
        *(_QWORD *)(v1111 + 256) = *((_QWORD *)v1128 + 10);
        *v1117 = v1490;
        v1491 = *(_OWORD *)(v1128 + 88);
        *(_QWORD *)(v1111 + 280) = *((_QWORD *)v1128 + 13);
        *v1119 = v1491;
        v1492 = *((_OWORD *)v1128 + 7);
        *(_QWORD *)(v1111 + 304) = *((_QWORD *)v1128 + 16);
        *v1120 = v1492;
        v1493 = *(_OWORD *)(v1128 + 136);
        *(_QWORD *)(v1111 + 328) = *((_QWORD *)v1128 + 19);
        *v1121 = v1493;
        v1495 = *((_OWORD *)v1128 + 12);
        v1494 = *((_OWORD *)v1128 + 13);
        v1496 = *((_OWORD *)v1128 + 11);
        *(_QWORD *)(v1111 + 400) = *((_QWORD *)v1128 + 28);
        *(_OWORD *)(v1111 + 368) = v1495;
        *(_OWORD *)(v1111 + 384) = v1494;
        *(_OWORD *)(v1111 + 352) = v1496;
        *v1122 = *((_OWORD *)v1128 + 10);
        v1497 = *(_OWORD *)(v1128 + 264);
        v1498 = *(_OWORD *)(v1128 + 280);
        v1499 = *(_OWORD *)(v1128 + 248);
        *(_QWORD *)(v1111 + 472) = *((_QWORD *)v1128 + 37);
        *(_OWORD *)(v1111 + 440) = v1497;
        *(_OWORD *)(v1111 + 456) = v1498;
        *(_OWORD *)(v1111 + 424) = v1499;
        *v1129 = *(_OWORD *)(v1128 + 232);
      }
    }
    v1500 = *(_QWORD *)(v1111 + 2160);
    *(_QWORD *)(v1111 + 23448) = v1500;
    *(_QWORD *)(v1111 + 42672) = v1500;
    *(_QWORD *)(v1111 + 3152) = *(_QWORD *)(v1111 + 1816);
    *(_QWORD *)(v1111 + 3160) = *(_QWORD *)(v1111 + 1808);
    *(_DWORD *)(v1111 + 7876) = 1;
    if ((_QWORD)v1900)
    {
      *((_QWORD *)&v1900 + 1) = v1900;
      operator delete((void *)v1900);
    }
    v1355 = (void *)__src;
    v1354 = a1 + 2928;
    v1188 = v1876;
    if (!(_QWORD)__src)
      goto LABEL_1578;
    goto LABEL_1577;
  }
  v1872 = *(_QWORD *)(a1 + 8216);
  v1237 = operator new();
  sub_20FC08CD0((uint64_t)object, v1108, v1103, v1102, v1828, (uint64_t)v1844, v1104, v1105, v1106, 1, v1107, v1109, v1110);
  *(_OWORD *)v1237 = *(_OWORD *)object;
  v1238 = (const void *)v1896;
  *(void **)(v1237 + 16) = object[2];
  *(_QWORD *)(v1237 + 24) = 0;
  *(_QWORD *)(v1237 + 32) = 0;
  *(_QWORD *)(v1237 + 40) = 0;
  v1239 = *((_QWORD *)&v1896 + 1) - (_QWORD)v1238;
  if (*((const void **)&v1896 + 1) != v1238)
  {
    if (v1239 < 0)
      sub_20E867F44();
    v1240 = (char *)operator new(*((_QWORD *)&v1896 + 1) - (_QWORD)v1238);
    *(_QWORD *)(v1237 + 24) = v1240;
    *(_QWORD *)(v1237 + 32) = v1240;
    v1241 = &v1240[8 * (v1239 >> 3)];
    *(_QWORD *)(v1237 + 40) = v1241;
    memcpy(v1240, v1238, v1239);
    *(_QWORD *)(v1237 + 32) = v1241;
  }
  *(_QWORD *)(v1237 + 48) = 0;
  *(_QWORD *)(v1237 + 56) = 0;
  *(_QWORD *)(v1237 + 64) = 0;
  v1242 = (const void *)__src;
  v1243 = *((_QWORD *)&__src + 1) - __src;
  if (*((_QWORD *)&__src + 1) != (_QWORD)__src)
  {
    if (v1243 < 0)
      sub_20E867F44();
    v1244 = (char *)operator new(*((_QWORD *)&__src + 1) - __src);
    *(_QWORD *)(v1237 + 48) = v1244;
    *(_QWORD *)(v1237 + 56) = v1244;
    v1245 = &v1244[8 * (v1243 >> 3)];
    *(_QWORD *)(v1237 + 64) = v1245;
    memcpy(v1244, v1242, v1243);
    *(_QWORD *)(v1237 + 56) = v1245;
  }
  *(_QWORD *)(v1237 + 72) = 0;
  *(_QWORD *)(v1237 + 80) = 0;
  *(_QWORD *)(v1237 + 88) = 0;
  v1246 = (const void *)v1900;
  v1247 = *((_QWORD *)&v1900 + 1) - v1900;
  if (*((_QWORD *)&v1900 + 1) != (_QWORD)v1900)
  {
    if (v1247 < 0)
      sub_20E867F44();
    v1248 = (char *)operator new(*((_QWORD *)&v1900 + 1) - v1900);
    *(_QWORD *)(v1237 + 72) = v1248;
    *(_QWORD *)(v1237 + 80) = v1248;
    v1249 = &v1248[8 * (v1247 >> 3)];
    *(_QWORD *)(v1237 + 88) = v1249;
    memcpy(v1248, v1246, v1247);
    *(_QWORD *)(v1237 + 80) = v1249;
  }
  v1250 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1237 + 208) = v1250;
  v1251 = v1902;
  *(_OWORD *)(v1237 + 96) = *(_OWORD *)&v1901[8];
  *(_OWORD *)(v1237 + 112) = v1251;
  v1252 = v1903[0];
  *(int64x2_t *)(v1237 + 176) = v1250;
  *(_OWORD *)(v1237 + 128) = v1252;
  *(_OWORD *)(v1237 + 144) = 0u;
  *(_OWORD *)(v1237 + 160) = 0u;
  *(int64x2_t *)(v1237 + 192) = v1250;
  *(_OWORD *)(v1237 + 224) = xmmword_2102DB700;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v1237 + 240) = _Q0;
  v1845 = (_OWORD *)(v1237 + 240);
  *(_QWORD *)(v1237 + 264) = 0;
  *(_QWORD *)(v1237 + 256) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 272) = 0;
  *(_QWORD *)(v1237 + 280) = 0;
  *(_OWORD *)(v1237 + 288) = _Q0;
  *(_QWORD *)(v1237 + 304) = 0x3FF0000000000000;
  *(_OWORD *)(v1237 + 312) = 0u;
  *(_OWORD *)(v1237 + 328) = 0u;
  *(_QWORD *)(v1237 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(v1237 + 360) = 0u;
  *(_OWORD *)(v1237 + 344) = 0u;
  *(_OWORD *)(v1237 + 376) = 0u;
  *(_QWORD *)(v1237 + 392) = 0;
  *(_QWORD *)(v1237 + 368) = 0x3FF0000000000000;
  *(_OWORD *)(v1237 + 432) = 0u;
  *(_OWORD *)(v1237 + 448) = 0u;
  *(_OWORD *)(v1237 + 400) = _Q0;
  *(_OWORD *)(v1237 + 416) = 0u;
  v1887 = _Q0;
  *(_QWORD *)(v1237 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 464) = 0;
  *(_QWORD *)(v1237 + 472) = 0x3FF0000000000000;
  *(_OWORD *)(v1237 + 480) = 0u;
  *(_OWORD *)(v1237 + 496) = 0u;
  *(_QWORD *)(v1237 + 512) = 0;
  v1850 = (_OWORD *)(v1237 + 208);
  sub_20F4E052C(v1237 + 528, (uint64_t)v1909);
  v1835 = (_OWORD *)(v1237 + 264);
  v1838 = (_OWORD *)(v1237 + 288);
  v1840 = (_OWORD *)(v1237 + 312);
  v1842 = (_OWORD *)(v1237 + 336);
  v1829 = (_OWORD *)(v1237 + 408);
  *(_DWORD *)(v1237 + 2184) = 0;
  bzero((void *)(v1237 + 2192), 0x314uLL);
  *(_DWORD *)(v1237 + 3000) = 0;
  *(_OWORD *)(v1237 + 2984) = 0u;
  *(_OWORD *)(v1237 + 3008) = 0u;
  *(_DWORD *)(v1237 + 3024) = 0;
  *(_OWORD *)(v1237 + 3032) = 0u;
  *(_DWORD *)(v1237 + 3048) = 0;
  *(_OWORD *)(v1237 + 3056) = 0u;
  *(_DWORD *)(v1237 + 3072) = 0;
  *(_OWORD *)(v1237 + 3080) = 0u;
  *(_DWORD *)(v1237 + 3096) = 0;
  *(_OWORD *)(v1237 + 3104) = 0u;
  *(_OWORD *)(v1237 + 3120) = 0u;
  *(_DWORD *)(v1237 + 3136) = 1065353216;
  *(_BYTE *)(v1237 + 4848) = 0;
  *(_OWORD *)(v1237 + 4832) = 0u;
  *(_OWORD *)(v1237 + 4816) = 0u;
  *(_OWORD *)(v1237 + 4800) = 0u;
  *(_OWORD *)(v1237 + 4784) = 0u;
  *(_OWORD *)(v1237 + 4768) = 0u;
  *(_OWORD *)(v1237 + 4752) = 0u;
  *(_OWORD *)(v1237 + 4736) = 0u;
  *(_OWORD *)(v1237 + 4720) = 0u;
  *(_OWORD *)(v1237 + 4704) = 0u;
  *(_OWORD *)(v1237 + 4688) = 0u;
  *(_OWORD *)(v1237 + 4672) = 0u;
  *(_OWORD *)(v1237 + 4656) = 0u;
  *(_OWORD *)(v1237 + 4640) = 0u;
  *(_OWORD *)(v1237 + 4624) = 0u;
  *(_OWORD *)(v1237 + 4608) = 0u;
  *(_OWORD *)(v1237 + 4592) = 0u;
  *(_OWORD *)(v1237 + 4576) = 0u;
  *(_OWORD *)(v1237 + 4560) = 0u;
  *(_OWORD *)(v1237 + 4544) = 0u;
  *(_OWORD *)(v1237 + 4528) = 0u;
  *(_OWORD *)(v1237 + 4512) = 0u;
  *(_OWORD *)(v1237 + 4496) = 0u;
  *(_OWORD *)(v1237 + 4480) = 0u;
  *(_OWORD *)(v1237 + 4464) = 0u;
  *(_OWORD *)(v1237 + 4448) = 0u;
  *(_OWORD *)(v1237 + 4432) = 0u;
  *(_OWORD *)(v1237 + 4416) = 0u;
  *(_OWORD *)(v1237 + 4400) = 0u;
  *(_OWORD *)(v1237 + 4384) = 0u;
  *(_OWORD *)(v1237 + 4368) = 0u;
  bzero((void *)(v1237 + 6800), 0x8CE8uLL);
  *(_OWORD *)(v1237 + 3200) = 0u;
  *(_OWORD *)(v1237 + 3184) = 0u;
  *(_OWORD *)(v1237 + 3168) = 0u;
  *(_OWORD *)(v1237 + 3152) = 0u;
  *(_QWORD *)(v1237 + 4856) = &unk_24CA043D0;
  *(_OWORD *)(v1237 + 4864) = v1887;
  *(_OWORD *)(v1237 + 4880) = v1887;
  *(_OWORD *)(v1237 + 4896) = v1887;
  *(_OWORD *)(v1237 + 4912) = v1887;
  *(_OWORD *)(v1237 + 4928) = v1887;
  *(_OWORD *)(v1237 + 4944) = v1887;
  *(_OWORD *)(v1237 + 4960) = v1887;
  *(_OWORD *)(v1237 + 4976) = v1887;
  *(_OWORD *)(v1237 + 4992) = v1887;
  *(_OWORD *)(v1237 + 5008) = v1887;
  *(_OWORD *)(v1237 + 5024) = v1887;
  *(_OWORD *)(v1237 + 5040) = v1887;
  *(_OWORD *)(v1237 + 5056) = v1887;
  *(_OWORD *)(v1237 + 5072) = v1887;
  *(_OWORD *)(v1237 + 5088) = v1887;
  *(_OWORD *)(v1237 + 5104) = v1887;
  *(_OWORD *)(v1237 + 5120) = v1887;
  *(_OWORD *)(v1237 + 5136) = v1887;
  *(_OWORD *)(v1237 + 5152) = v1887;
  *(_QWORD *)(v1237 + 5184) = &off_24CA04440;
  *(_OWORD *)(v1237 + 5168) = v1887;
  bzero((void *)(v1237 + 5192), 0x648uLL);
  *(_BYTE *)(v1237 + 6800) = 1;
  *(_WORD *)(v1237 + 6802) = 257;
  v1254 = v1237 + 6808;
  v1888 = v1237 + 7072;
  v1255 = v1237 + 7336;
  bzero((void *)(v1237 + 6808), 0x318uLL);
  v1256 = 0;
  while (2)
  {
    v1257 = v1254 + 24 * v1256;
    v1258 = *(_BYTE **)v1257;
    if (*(_QWORD *)(v1257 + 16) - *(_QWORD *)v1257 <= 0xFFuLL)
    {
      v1259 = v1254 + 24 * v1256;
      v1262 = *(_BYTE **)(v1259 + 8);
      v1260 = (char **)(v1259 + 8);
      v1261 = v1262;
      v1263 = (char *)operator new(0x100uLL);
      v1264 = v1262 - v1258;
      v1265 = &v1263[(v1262 - v1258) & 0xFFFFFFFFFFFFFFFCLL];
      v1266 = v1265;
      if (v1262 != v1258)
      {
        if ((unint64_t)(v1264 - 4) < 0x2C)
        {
          v1266 = &v1263[(v1261 - v1258) & 0xFFFFFFFFFFFFFFFCLL];
          goto LABEL_1398;
        }
        v1266 = &v1263[(v1261 - v1258) & 0xFFFFFFFFFFFFFFFCLL];
        if (v1261 - v1263 - (v1264 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_2139;
        v1267 = v1264 >> 2;
        v1268 = ((unint64_t)(v1264 - 4) >> 2) + 1;
        v1269 = 4 * (v1268 & 0x7FFFFFFFFFFFFFF8);
        v1270 = &v1261[-v1269];
        v1266 = &v1265[-v1269];
        v1271 = &v1263[4 * v1267 - 16];
        v1272 = (__int128 *)(v1261 - 16);
        v1273 = v1268 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v1274 = *v1272;
          *((_OWORD *)v1271 - 1) = *(v1272 - 1);
          *(_OWORD *)v1271 = v1274;
          v1271 -= 32;
          v1272 -= 2;
          v1273 -= 8;
        }
        while (v1273);
        v1261 = v1270;
        if (v1268 != (v1268 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2139:
          do
          {
LABEL_1398:
            v1275 = *((_DWORD *)v1261 - 1);
            v1261 -= 4;
            *((_DWORD *)v1266 - 1) = v1275;
            v1266 -= 4;
          }
          while (v1261 != v1258);
        }
      }
      *(_QWORD *)v1257 = v1266;
      *v1260 = v1265;
      *(_QWORD *)(v1257 + 16) = v1263 + 256;
      if (v1258)
        operator delete(v1258);
    }
    v1276 = v1888 + 24 * v1256;
    v1277 = *(_BYTE **)v1276;
    if (*(_QWORD *)(v1276 + 16) - *(_QWORD *)v1276 <= 0xFFuLL)
    {
      v1278 = v1888 + 24 * v1256;
      v1281 = *(_BYTE **)(v1278 + 8);
      v1279 = (char **)(v1278 + 8);
      v1280 = v1281;
      v1282 = (char *)operator new(0x100uLL);
      v1283 = v1281 - v1277;
      v1284 = &v1282[(v1281 - v1277) & 0xFFFFFFFFFFFFFFFCLL];
      v1285 = v1284;
      if (v1281 != v1277)
      {
        if ((unint64_t)(v1283 - 4) < 0x2C)
        {
          v1285 = &v1282[(v1280 - v1277) & 0xFFFFFFFFFFFFFFFCLL];
          goto LABEL_1409;
        }
        v1285 = &v1282[(v1280 - v1277) & 0xFFFFFFFFFFFFFFFCLL];
        if (v1280 - v1282 - (v1283 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_2140;
        v1286 = v1283 >> 2;
        v1287 = ((unint64_t)(v1283 - 4) >> 2) + 1;
        v1288 = 4 * (v1287 & 0x7FFFFFFFFFFFFFF8);
        v1289 = &v1280[-v1288];
        v1285 = &v1284[-v1288];
        v1290 = &v1282[4 * v1286 - 16];
        v1291 = (__int128 *)(v1280 - 16);
        v1292 = v1287 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v1293 = *v1291;
          *((_OWORD *)v1290 - 1) = *(v1291 - 1);
          *(_OWORD *)v1290 = v1293;
          v1290 -= 32;
          v1291 -= 2;
          v1292 -= 8;
        }
        while (v1292);
        v1280 = v1289;
        if (v1287 != (v1287 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2140:
          do
          {
LABEL_1409:
            v1294 = *((_DWORD *)v1280 - 1);
            v1280 -= 4;
            *((_DWORD *)v1285 - 1) = v1294;
            v1285 -= 4;
          }
          while (v1280 != v1277);
        }
      }
      *(_QWORD *)v1276 = v1285;
      *v1279 = v1284;
      *(_QWORD *)(v1276 + 16) = v1282 + 256;
      if (v1277)
        operator delete(v1277);
    }
    v1295 = v1255 + 24 * v1256;
    v1296 = *(_BYTE **)v1295;
    if (*(_QWORD *)(v1295 + 16) - *(_QWORD *)v1295 <= 0xFFuLL)
    {
      v1297 = v1255 + 24 * v1256;
      v1300 = *(_BYTE **)(v1297 + 8);
      v1298 = (char **)(v1297 + 8);
      v1299 = v1300;
      v1301 = (char *)operator new(0x100uLL);
      v1302 = v1300 - v1296;
      v1303 = &v1301[(v1300 - v1296) & 0xFFFFFFFFFFFFFFFCLL];
      v1304 = v1303;
      if (v1300 != v1296)
      {
        if ((unint64_t)(v1302 - 4) < 0x2C)
        {
          v1304 = &v1301[(v1299 - v1296) & 0xFFFFFFFFFFFFFFFCLL];
          goto LABEL_1420;
        }
        v1304 = &v1301[(v1299 - v1296) & 0xFFFFFFFFFFFFFFFCLL];
        if (v1299 - v1301 - (v1302 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_2141;
        v1305 = v1302 >> 2;
        v1306 = ((unint64_t)(v1302 - 4) >> 2) + 1;
        v1307 = 4 * (v1306 & 0x7FFFFFFFFFFFFFF8);
        v1308 = &v1299[-v1307];
        v1304 = &v1303[-v1307];
        v1309 = &v1301[4 * v1305 - 16];
        v1310 = (__int128 *)(v1299 - 16);
        v1311 = v1306 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v1312 = *v1310;
          *((_OWORD *)v1309 - 1) = *(v1310 - 1);
          *(_OWORD *)v1309 = v1312;
          v1309 -= 32;
          v1310 -= 2;
          v1311 -= 8;
        }
        while (v1311);
        v1299 = v1308;
        if (v1306 != (v1306 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_2141:
          do
          {
LABEL_1420:
            v1313 = *((_DWORD *)v1299 - 1);
            v1299 -= 4;
            *((_DWORD *)v1304 - 1) = v1313;
            v1304 -= 4;
          }
          while (v1299 != v1296);
        }
      }
      *(_QWORD *)v1295 = v1304;
      *v1298 = v1303;
      *(_QWORD *)(v1295 + 16) = v1301 + 256;
      if (v1296)
        operator delete(v1296);
    }
    if (++v1256 != 11)
      continue;
    break;
  }
  *(_OWORD *)(v1237 + 7840) = 0u;
  *(_OWORD *)(v1237 + 7824) = 0u;
  *(_OWORD *)(v1237 + 7808) = 0u;
  *(_OWORD *)(v1237 + 7792) = 0u;
  *(_OWORD *)(v1237 + 7776) = 0u;
  *(_OWORD *)(v1237 + 7760) = 0u;
  *(_OWORD *)(v1237 + 7744) = 0u;
  *(_OWORD *)(v1237 + 7728) = 0u;
  *(_OWORD *)(v1237 + 7712) = 0u;
  *(_OWORD *)(v1237 + 7696) = 0u;
  *(_OWORD *)(v1237 + 7680) = 0u;
  *(_OWORD *)(v1237 + 7664) = 0u;
  *(_OWORD *)(v1237 + 7648) = 0u;
  *(_OWORD *)(v1237 + 7632) = 0u;
  *(_OWORD *)(v1237 + 7616) = 0u;
  *(_OWORD *)(v1237 + 7600) = 0u;
  *(_OWORD *)(v1237 + 7854) = 0u;
  *(_OWORD *)(v1237 + 7992) = 0u;
  *(_OWORD *)(v1237 + 7976) = 0u;
  *(_OWORD *)(v1237 + 7960) = 0u;
  *(_OWORD *)(v1237 + 7944) = 0u;
  *(_OWORD *)(v1237 + 7928) = 0u;
  *(_OWORD *)(v1237 + 7888) = 0u;
  *(_OWORD *)(v1237 + 7904) = 0u;
  *(_DWORD *)(v1237 + 7920) = 0;
  *(_QWORD *)(v1237 + 7872) = 0;
  *(_BYTE *)(v1237 + 7880) = 0;
  sub_20FC053E4(v1237 + 8008);
  sub_20FC063EC(v1314);
  *(_OWORD *)(v1237 + 23432) = 0u;
  *(_OWORD *)(v1237 + 23416) = 0u;
  *(_OWORD *)(v1237 + 23400) = 0u;
  *(_OWORD *)(v1237 + 23384) = 0u;
  *(_OWORD *)(v1237 + 23368) = 0u;
  *(_OWORD *)(v1237 + 23352) = 0u;
  *(_OWORD *)(v1237 + 23336) = 0u;
  *(_OWORD *)(v1237 + 23320) = 0u;
  *(_OWORD *)(v1237 + 23304) = 0u;
  *(_OWORD *)(v1237 + 23288) = 0u;
  *(_OWORD *)(v1237 + 23272) = 0u;
  *(_OWORD *)(v1237 + 23256) = 0u;
  *(_OWORD *)(v1237 + 23240) = 0u;
  *(_OWORD *)(v1237 + 23224) = 0u;
  *(_OWORD *)(v1237 + 23208) = 0u;
  *(_QWORD *)(v1237 + 23448) = 0x3EE4F8B588E368F1;
  *(_QWORD *)(v1237 + 23456) = v1237 + 5184;
  *(_QWORD *)(v1237 + 23464) = v1237 + 7904;
  *(_QWORD *)(v1237 + 23472) = v1237 + 42680;
  bzero((void *)(v1237 + 23480), 0x3B0uLL);
  bzero((void *)(v1237 + 24504), 0x2D0uLL);
  *(_DWORD *)(v1237 + 25272) = 0;
  *(_OWORD *)(v1237 + 25256) = 0u;
  *(_OWORD *)(v1237 + 25280) = 0u;
  *(_OWORD *)(v1237 + 25296) = 0u;
  *(_OWORD *)(v1237 + 25312) = 0u;
  *(_OWORD *)(v1237 + 25328) = 0u;
  *(_OWORD *)(v1237 + 25344) = 0u;
  *(_OWORD *)(v1237 + 25232) = 0u;
  *(_DWORD *)(v1237 + 25248) = 0;
  sub_20FC053E4(v1237 + 25360);
  sub_20FC063EC(v1315);
  *(_OWORD *)(v1237 + 42648) = 0u;
  *(_OWORD *)(v1237 + 42632) = 0u;
  *(_OWORD *)(v1237 + 42616) = 0u;
  *(_OWORD *)(v1237 + 42600) = 0u;
  *(_OWORD *)(v1237 + 42584) = 0u;
  *(_OWORD *)(v1237 + 42568) = 0u;
  *(_OWORD *)(v1237 + 42552) = 0u;
  *(_OWORD *)(v1237 + 42536) = 0u;
  *(_OWORD *)(v1237 + 42520) = 0u;
  *(_OWORD *)(v1237 + 42504) = 0u;
  *(_OWORD *)(v1237 + 42488) = 0u;
  *(_OWORD *)(v1237 + 42472) = 0u;
  *(_OWORD *)(v1237 + 42456) = 0u;
  *(_OWORD *)(v1237 + 42440) = 0u;
  *(_DWORD *)(v1237 + 42416) = 0;
  *(_OWORD *)(v1237 + 42424) = 0u;
  *(_OWORD *)(v1237 + 42304) = 0u;
  *(_OWORD *)(v1237 + 42320) = 0u;
  *(_OWORD *)(v1237 + 42336) = 0u;
  *(_OWORD *)(v1237 + 42352) = 0u;
  *(_OWORD *)(v1237 + 42368) = 0u;
  *(_OWORD *)(v1237 + 42384) = 0u;
  *(_OWORD *)(v1237 + 42400) = 0u;
  *(_WORD *)(v1237 + 40800) = 0;
  *(_OWORD *)(v1237 + 40784) = 0u;
  *(_OWORD *)(v1237 + 40768) = 0u;
  *(_OWORD *)(v1237 + 40752) = 0u;
  *(_OWORD *)(v1237 + 40736) = 0u;
  *(_OWORD *)(v1237 + 40720) = 0u;
  *(_OWORD *)(v1237 + 40704) = 0u;
  *(_OWORD *)(v1237 + 40688) = 0u;
  *(_OWORD *)(v1237 + 40672) = 0u;
  *(_OWORD *)(v1237 + 40656) = 0u;
  *(_OWORD *)(v1237 + 40640) = 0u;
  *(_OWORD *)(v1237 + 40624) = 0u;
  *(_OWORD *)(v1237 + 40608) = 0u;
  *(_OWORD *)(v1237 + 40592) = 0u;
  *(_OWORD *)(v1237 + 40576) = 0u;
  *(_OWORD *)(v1237 + 40560) = 0u;
  bzero((void *)(v1237 + 40832), 0x5BCuLL);
  *(_QWORD *)(v1237 + 25224) = &off_24CA04A98;
  *(_QWORD *)(v1237 + 42664) = v1237 + 23456;
  *(_QWORD *)(v1237 + 42672) = 0x3EE4F8B588E368F1;
  *(_OWORD *)(v1237 + 42680) = 0u;
  *(_DWORD *)(v1237 + 42696) = 0;
  *(_OWORD *)(v1237 + 42832) = 0u;
  *(_OWORD *)(v1237 + 42848) = 0u;
  *(_QWORD *)(v1237 + 42864) = 0;
  *(_OWORD *)(v1237 + 42704) = 0u;
  *(_OWORD *)(v1237 + 42720) = 0u;
  *(_OWORD *)(v1237 + 42736) = 0u;
  *(_OWORD *)(v1237 + 42752) = 0u;
  *(_OWORD *)(v1237 + 42768) = 0u;
  *(_OWORD *)(v1237 + 42784) = 0u;
  *(_OWORD *)(v1237 + 42800) = 0u;
  *(_OWORD *)(v1237 + 42812) = 0u;
  *(_QWORD *)(v1237 + 4856) = off_24CA04008;
  *(_WORD *)(v1237 + 42872) = 0;
  *(_QWORD *)(v1237 + 42896) = 0;
  *(_OWORD *)(v1237 + 42880) = 0u;
  *(_QWORD *)(v1237 + 42912) = 0xA00000001;
  *(_BYTE *)(v1237 + 42920) = 0;
  *(_OWORD *)(v1237 + 42928) = xmmword_21039D460;
  *(_QWORD *)(v1237 + 42944) = 0x3EB0C6F7A0B5ED8DLL;
  *(_BYTE *)(v1237 + 42952) = 0;
  *(_QWORD *)(v1237 + 42960) = 0x3FF7B8BAC710CB29;
  *(_QWORD *)(v1237 + 43480) = v1237 + 42968;
  *(_OWORD *)(v1237 + 43488) = xmmword_210378040;
  *(_WORD *)(v1237 + 43504) = 0;
  *(_QWORD *)(v1237 + 43536) = 0;
  *(_QWORD *)(v1237 + 43568) = 0;
  *(_QWORD *)(v1237 + 43600) = 0;
  *(_QWORD *)(v1237 + 43632) = 0;
  *(_QWORD *)(v1237 + 43640) = 0xBFF0000000000000;
  *(_DWORD *)(v1237 + 43664) = 0;
  *(_OWORD *)(v1237 + 43648) = 0u;
  *(_QWORD *)(v1237 + 42904) = &off_24C9FCEF0;
  *(_OWORD *)(v1237 + 43672) = xmmword_2103AB100;
  *(_BYTE *)(v1237 + 43688) = 1;
  *(_OWORD *)(v1237 + 43696) = xmmword_2102DBD20;
  *(_OWORD *)(v1237 + 43712) = xmmword_2103B4940;
  *(_QWORD *)(v1237 + 43728) = 0x4000000000000000;
  v1316 = *(_QWORD *)v1237;
  v1188 = v1876;
  if (!*(_QWORD *)v1237)
    goto LABEL_1426;
  if (*(_BYTE *)(v1237 + 1317))
  {
    v1317 = *(double *)v1316;
    v1318 = *(_QWORD *)(v1316 + 8);
    v1319 = *(double *)(v1316 + 16);
    v1320 = *(_QWORD *)(v1316 + 24);
    *(_OWORD *)v1906 = *(_OWORD *)(v1316 + 32);
    *(_QWORD *)&v1906[16] = *(_QWORD *)(v1316 + 48);
    v1321 = *(_QWORD *)(v1316 + 56);
    __dst[0] = *(_OWORD *)(v1316 + 64);
    *(_QWORD *)&__dst[1] = *(_QWORD *)(v1316 + 80);
    v1322 = *(_OWORD *)(v1316 + 88);
    v1960 = *(_QWORD *)(v1316 + 104);
    v1959 = v1322;
    v1323 = *(_OWORD *)(v1316 + 112);
    v1958 = *(_QWORD *)(v1316 + 128);
    v1957 = v1323;
    v1324 = *(_OWORD *)(v1316 + 136);
    v1892 = *(_QWORD *)(v1316 + 152);
    v1891 = v1324;
    v1325 = *(_OWORD *)(v1316 + 160);
    v1326 = *(_OWORD *)(v1316 + 176);
    v1327 = *(_OWORD *)(v1316 + 192);
    v1328 = *(_OWORD *)(v1316 + 208);
    v1946 = *(std::__shared_weak_count **)(v1316 + 224);
    *(_OWORD *)&oslog[32] = v1327;
    v1945 = v1328;
    *(_OWORD *)oslog = v1325;
    *(_OWORD *)&oslog[16] = v1326;
    v1329 = *(_OWORD *)(v1316 + 232);
    v1330 = *(_OWORD *)(v1316 + 248);
    v1331 = *(_OWORD *)(v1316 + 264);
    v1332 = *(_OWORD *)(v1316 + 280);
    v1956 = *(std::__shared_weak_count **)(v1316 + 296);
    v1954 = v1331;
    v1955 = v1332;
    v1952 = v1329;
    v1953 = v1330;
    v1333 = v1319 * *(double *)(v1237 + 1328);
    *(double *)(v1237 + 176) = v1317 * *(double *)(v1237 + 1320);
    *(_QWORD *)(v1237 + 184) = v1318;
    *(double *)(v1237 + 192) = v1333;
    *(_QWORD *)(v1237 + 200) = v1320;
    *v1850 = *(_OWORD *)v1906;
    *(_QWORD *)(v1237 + 224) = *(_QWORD *)&v1906[16];
    *(_QWORD *)(v1237 + 232) = v1321;
    v1334 = __dst[0];
    *(_QWORD *)(v1237 + 256) = *(_QWORD *)&__dst[1];
    *v1845 = v1334;
    v1335 = v1959;
    *(_QWORD *)(v1237 + 280) = v1960;
    *v1835 = v1335;
    v1336 = v1957;
    *(_QWORD *)(v1237 + 304) = v1958;
    *v1838 = v1336;
    v1337 = v1891;
    *(_QWORD *)(v1237 + 328) = v1892;
    *v1840 = v1337;
    v1338 = *(_OWORD *)oslog;
    v1339 = *(_OWORD *)&oslog[16];
    v1340 = *(_OWORD *)&oslog[32];
    v1341 = v1945;
    *(_QWORD *)(v1237 + 400) = v1946;
    *(_OWORD *)(v1237 + 368) = v1340;
    *(_OWORD *)(v1237 + 384) = v1341;
    *v1842 = v1338;
    *(_OWORD *)(v1237 + 352) = v1339;
    v1342 = v1952;
    v1343 = v1953;
    v1344 = v1954;
    v1345 = v1955;
    *(_QWORD *)(v1237 + 472) = v1956;
    *(_OWORD *)(v1237 + 440) = v1344;
    *(_OWORD *)(v1237 + 456) = v1345;
    *v1829 = v1342;
    *(_OWORD *)(v1237 + 424) = v1343;
LABEL_1426:
    if (*(_QWORD *)(v1237 + 3128))
    {
LABEL_1427:
      v1346 = *(_QWORD **)(v1237 + 3120);
      if (v1346)
      {
        do
        {
          v1347 = (_QWORD *)*v1346;
          operator delete(v1346);
          v1346 = v1347;
        }
        while (v1347);
      }
      *(_QWORD *)(v1237 + 3120) = 0;
      v1348 = *(_QWORD *)(v1237 + 3112);
      if (v1348)
      {
        for (jj = 0; jj != v1348; ++jj)
          *(_QWORD *)(*(_QWORD *)(v1237 + 3104) + 8 * jj) = 0;
      }
      *(_QWORD *)(v1237 + 3128) = 0;
    }
  }
  else
  {
    v1699 = *(_OWORD *)(v1316 + 16);
    *(_OWORD *)(v1237 + 176) = *(_OWORD *)v1316;
    *(_OWORD *)(v1237 + 192) = v1699;
    v1700 = *(_OWORD *)(v1316 + 32);
    *(_QWORD *)(v1237 + 224) = *(_QWORD *)(v1316 + 48);
    *v1850 = v1700;
    *(_QWORD *)(v1237 + 232) = *(_QWORD *)(v1316 + 56);
    v1701 = *(_OWORD *)(v1316 + 64);
    *(_QWORD *)(v1237 + 256) = *(_QWORD *)(v1316 + 80);
    *v1845 = v1701;
    v1702 = *(_OWORD *)(v1316 + 88);
    *(_QWORD *)(v1237 + 280) = *(_QWORD *)(v1316 + 104);
    *v1835 = v1702;
    v1703 = *(_OWORD *)(v1316 + 112);
    *(_QWORD *)(v1237 + 304) = *(_QWORD *)(v1316 + 128);
    *v1838 = v1703;
    v1704 = *(_OWORD *)(v1316 + 136);
    *(_QWORD *)(v1237 + 328) = *(_QWORD *)(v1316 + 152);
    *v1840 = v1704;
    v1706 = *(_OWORD *)(v1316 + 192);
    v1705 = *(_OWORD *)(v1316 + 208);
    v1707 = *(_OWORD *)(v1316 + 176);
    *(_QWORD *)(v1237 + 400) = *(_QWORD *)(v1316 + 224);
    *(_OWORD *)(v1237 + 368) = v1706;
    *(_OWORD *)(v1237 + 384) = v1705;
    *(_OWORD *)(v1237 + 352) = v1707;
    *v1842 = *(_OWORD *)(v1316 + 160);
    v1708 = *(_OWORD *)(v1316 + 264);
    v1709 = *(_OWORD *)(v1316 + 280);
    v1710 = *(_OWORD *)(v1316 + 248);
    *(_QWORD *)(v1237 + 472) = *(_QWORD *)(v1316 + 296);
    *(_OWORD *)(v1237 + 440) = v1708;
    *(_OWORD *)(v1237 + 456) = v1709;
    *(_OWORD *)(v1237 + 424) = v1710;
    *v1829 = *(_OWORD *)(v1316 + 232);
    if (*(_QWORD *)(v1237 + 3128))
      goto LABEL_1427;
  }
  *(_OWORD *)(v1237 + 43736) = 0u;
  *(_OWORD *)(v1237 + 43752) = 0u;
  *(_DWORD *)(v1237 + 43768) = 1065353216;
  *(_OWORD *)(v1237 + 43864) = 0u;
  *(_OWORD *)(v1237 + 43880) = 0u;
  *(_QWORD *)(v1237 + 43896) = 0;
  *(_OWORD *)(v1237 + 43848) = 0u;
  *(_OWORD *)(v1237 + 43776) = 0u;
  *(_OWORD *)(v1237 + 43792) = 0u;
  *(_OWORD *)(v1237 + 43808) = 0u;
  *(_OWORD *)(v1237 + 43824) = 0u;
  *(_QWORD *)(v1237 + 43840) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 43872) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 43904) = 0x3FF0000000000000;
  *(_OWORD *)(v1237 + 43920) = 0u;
  *(_QWORD *)(v1237 + 43912) = 0;
  *(_QWORD *)(v1237 + 43992) = 0;
  *(_OWORD *)(v1237 + 43976) = 0u;
  *(_OWORD *)(v1237 + 43960) = 0u;
  *(_OWORD *)(v1237 + 43944) = 0u;
  *(_QWORD *)(v1237 + 43936) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 43968) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 44000) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 44024) = 0;
  *(_OWORD *)(v1237 + 44008) = 0u;
  *(_OWORD *)(v1237 + 44040) = 0u;
  *(_QWORD *)(v1237 + 44032) = v1237 + 44040;
  *(_OWORD *)(v1237 + 44056) = 0u;
  *(_OWORD *)(v1237 + 44072) = 0u;
  *(_DWORD *)(v1237 + 44088) = 1065353216;
  *(_OWORD *)(v1237 + 44112) = 0u;
  *(_OWORD *)(v1237 + 44096) = 0u;
  *(_DWORD *)(v1237 + 44128) = 1065353216;
  *(_OWORD *)(v1237 + 44136) = 0u;
  *(_OWORD *)(v1237 + 44152) = 0u;
  *(_DWORD *)(v1237 + 44168) = 1065353216;
  *(_DWORD *)(v1237 + 44176) = 0;
  *(_BYTE *)(v1237 + 44184) = 0;
  *(_BYTE *)(v1237 + 44280) = 0;
  *(_BYTE *)(v1237 + 44288) = 0;
  *(_BYTE *)(v1237 + 44384) = 0;
  *(_BYTE *)(v1237 + 44392) = 0;
  *(_BYTE *)(v1237 + 44488) = 0;
  *(_BYTE *)(v1237 + 44496) = 0;
  *(_BYTE *)(v1237 + 44504) = 0;
  *(_DWORD *)(v1237 + 44512) = 0;
  *(_BYTE *)(v1237 + 45376) = 0;
  *(_OWORD *)(v1237 + 44520) = 0u;
  *(_BYTE *)(v1237 + 44544) = 0;
  *(_QWORD *)(v1237 + 44536) = 0;
  *(_DWORD *)(v1237 + 45384) = 0;
  *(_QWORD *)(v1237 + 45448) = 0;
  *(_OWORD *)(v1237 + 45416) = 0u;
  *(_OWORD *)(v1237 + 45432) = 0u;
  *(_OWORD *)(v1237 + 45400) = 0u;
  *(_QWORD *)(v1237 + 45392) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 45424) = 0x3FF0000000000000;
  *(_QWORD *)(v1237 + 45456) = 0x3FF0000000000000;
  *(_BYTE *)(v1237 + 45488) = 0;
  *(_QWORD *)(v1237 + 45480) = 0;
  *(_OWORD *)(v1237 + 45464) = 0u;
  *(_OWORD *)(v1237 + 45504) = 0u;
  *(_QWORD *)(v1237 + 45496) = v1237 + 45504;
  *(_OWORD *)(v1237 + 45528) = 0u;
  *(_QWORD *)(v1237 + 45520) = v1237 + 45528;
  bzero((void *)(v1237 + 45544), 0x601uLL);
  *(_BYTE *)(v1237 + 47592) = 0;
  *(_OWORD *)(v1237 + 47560) = 0u;
  *(_OWORD *)(v1237 + 47576) = 0u;
  *(_OWORD *)(v1237 + 47528) = 0u;
  *(_OWORD *)(v1237 + 47544) = 0u;
  *(_OWORD *)(v1237 + 47496) = 0u;
  *(_OWORD *)(v1237 + 47512) = 0u;
  *(_OWORD *)(v1237 + 47464) = 0u;
  *(_OWORD *)(v1237 + 47480) = 0u;
  *(_OWORD *)(v1237 + 47432) = 0u;
  *(_OWORD *)(v1237 + 47448) = 0u;
  *(_OWORD *)(v1237 + 47400) = 0u;
  *(_OWORD *)(v1237 + 47416) = 0u;
  *(_OWORD *)(v1237 + 47368) = 0u;
  *(_OWORD *)(v1237 + 47384) = 0u;
  *(_OWORD *)(v1237 + 47336) = 0u;
  *(_OWORD *)(v1237 + 47352) = 0u;
  *(_OWORD *)(v1237 + 47304) = 0u;
  *(_OWORD *)(v1237 + 47320) = 0u;
  *(_OWORD *)(v1237 + 47272) = 0u;
  *(_OWORD *)(v1237 + 47288) = 0u;
  *(_OWORD *)(v1237 + 47240) = 0u;
  *(_OWORD *)(v1237 + 47256) = 0u;
  *(_OWORD *)(v1237 + 47208) = 0u;
  *(_OWORD *)(v1237 + 47224) = 0u;
  *(_OWORD *)(v1237 + 47176) = 0u;
  *(_OWORD *)(v1237 + 47192) = 0u;
  *(_OWORD *)(v1237 + 47144) = 0u;
  *(_OWORD *)(v1237 + 47160) = 0u;
  *(_OWORD *)(v1237 + 47112) = 0u;
  *(_OWORD *)(v1237 + 47128) = 0u;
  *(_BYTE *)(v1237 + 48152) = 0;
  bzero((void *)(v1237 + 47600), 0x224uLL);
  *(_DWORD *)(v1237 + 47104) = 0;
  *(_OWORD *)(v1237 + 47088) = 0u;
  v1350 = *(_QWORD *)(v1237 + 2160);
  *(_QWORD *)(v1237 + 23448) = v1350;
  *(_QWORD *)(v1237 + 42672) = v1350;
  *(int8x16_t *)(v1237 + 3152) = vextq_s8(*(int8x16_t *)(v1237 + 1808), *(int8x16_t *)(v1237 + 1808), 8uLL);
  *(_DWORD *)(v1237 + 7876) = 1;
  v1351 = *(_QWORD *)(v1872 + 8);
  *(_QWORD *)(v1872 + 8) = v1237;
  if (v1351)
  {
    v1352 = sub_20FA2A95C(v1351);
    MEMORY[0x212BC6398](v1352, 0x10F2C40CBD659A7);
  }
  v1353 = (void *)v1900;
  v1354 = a1 + 2928;
  if ((_QWORD)v1900)
  {
LABEL_1436:
    *((_QWORD *)&v1900 + 1) = v1353;
    operator delete(v1353);
  }
LABEL_1437:
  v1355 = (void *)__src;
  if ((_QWORD)__src)
    goto LABEL_1577;
LABEL_1578:
  if ((_QWORD)v1896)
  {
    *((_QWORD *)&v1896 + 1) = v1896;
    operator delete((void *)v1896);
  }
  v1501 = *(_QWORD *)(a1 + 8216);
  v1502 = a1 + 7968;
  if (*(_BYTE *)v1501)
  {
    v1503 = *(_QWORD *)(v1501 + 8);
    *(_QWORD *)(v1503 + 144) = v1502;
    sub_20FC0A608(a1, (uint64_t)v1909, v1188, (uint64_t)v1832, v1354, (uint64_t)v1894, 0, v1503, *(_QWORD **)(a1 + 7952));
  }
  else
  {
    v1504 = *(_QWORD *)(v1501 + 16);
    *(_QWORD *)(v1504 + 144) = v1502;
    sub_20FC38920(a1, (uint64_t)v1909, v1188, (uint64_t)v1832, v1354, (uint64_t)v1894, 0, v1504, *(_QWORD **)(a1 + 7952));
  }
  if (v1940 < 0)
  {
    operator delete(v1938);
    if (v1937 < 0)
      goto LABEL_1590;
LABEL_1585:
    if ((v1935 & 0x80000000) == 0)
      goto LABEL_1586;
LABEL_1591:
    operator delete(v1934);
    v1505 = v1929;
    if (v1929 == v1928)
      goto LABEL_1592;
LABEL_1587:
    if (v1505)
    {
      v1506 = 5;
      goto LABEL_1593;
    }
  }
  else
  {
    if ((v1937 & 0x80000000) == 0)
      goto LABEL_1585;
LABEL_1590:
    operator delete(v1936);
    if (v1935 < 0)
      goto LABEL_1591;
LABEL_1586:
    v1505 = v1929;
    if (v1929 != v1928)
      goto LABEL_1587;
LABEL_1592:
    v1506 = 4;
    v1505 = v1928;
LABEL_1593:
    (*(void (**)(void))(*v1505 + 8 * v1506))();
  }
  v1507 = v1927;
  if (v1927 == v1926)
  {
    v1508 = 4;
    v1507 = v1926;
LABEL_1598:
    (*(void (**)(void))(*v1507 + 8 * v1508))();
  }
  else if (v1927)
  {
    v1508 = 5;
    goto LABEL_1598;
  }
  v1509 = v1925;
  if (v1925 == v1924)
  {
    v1510 = 4;
    v1509 = v1924;
LABEL_1603:
    (*(void (**)(void))(*v1509 + 8 * v1510))();
  }
  else if (v1925)
  {
    v1510 = 5;
    goto LABEL_1603;
  }
  v1373 = v1923;
  if (v1923 == v1922)
  {
LABEL_1474:
    v1374 = 4;
    v1373 = v1922;
    goto LABEL_1607;
  }
LABEL_1605:
  if (v1373)
  {
    v1374 = 5;
LABEL_1607:
    (*(void (**)(void))(*v1373 + 8 * v1374))();
  }
  v1921 = 0;
  if (v1920 != &v1909[7] && v1920)
    MEMORY[0x212BC6368]();
  v1511 = *(_QWORD *)(a1 + 8216);
  if (!*(_BYTE *)v1511)
  {
    v1538 = *(_QWORD *)(v1511 + 16);
    v1539 = (char *)(v1538 + 62896);
    *(_BYTE *)(v1538 + 6763) = 0;
    v1540 = *(unsigned __int8 *)(v1511 + 1720);
    v1541 = v1511 + 864;
    if (!*(_BYTE *)(v1511 + 1720))
      v1541 = v1511 + 24;
    if (!*(_BYTE *)(v1541 + 788))
    {
      v1544 = (_BYTE *)v1511;
      v1545 = (_BYTE *)(v1511 + 864);
      if (!*(_BYTE *)(v1511 + 1720))
        v1545 = (_BYTE *)(v1511 + 24);
      if (v1545[784])
        goto LABEL_1675;
      goto LABEL_1712;
    }
    v1909[0] = (os_log_t)&off_24CA04630;
    v1909[1] = (os_log_t)object;
    v1909[3] = (os_log_t)v1909;
    sub_20FB76BD0(v1909, (_QWORD *)(v1538 + 62136));
    v1542 = (os_log_t *)v1909[3];
    if ((os_log_t *)v1909[3] == v1909)
    {
      v1543 = 4;
      v1542 = v1909;
    }
    else
    {
      if (!v1909[3])
        goto LABEL_1667;
      v1543 = 5;
    }
    ((void (*)(void))(*v1542)[v1543].isa)();
LABEL_1667:
    v1909[0] = (os_log_t)&off_24CA046C0;
    v1909[1] = (os_log_t)object;
    v1909[3] = (os_log_t)v1909;
    sub_20FB76BD0(v1909, (_QWORD *)(v1538 + 62208));
    v1552 = (os_log_t *)v1909[3];
    if ((os_log_t *)v1909[3] == v1909)
    {
      v1553 = 4;
      v1552 = v1909;
    }
    else
    {
      if (!v1909[3])
        goto LABEL_1672;
      v1553 = 5;
    }
    ((void (*)(void))(*v1552)[v1553].isa)();
LABEL_1672:
    v1544 = *(_BYTE **)(a1 + 8216);
    v1540 = v1544[1720];
    v1545 = v1544 + 864;
    if (!v1544[1720])
      v1545 = v1544 + 24;
    if (v1545[784])
    {
LABEL_1675:
      if (!*(_BYTE *)(a1 + 7681) && v1545[787] || v1881 >= 2 && v1545[785] || v1545[786])
        goto LABEL_1695;
      v1554 = *(_QWORD **)(v1538 + 6712);
      if (!v1554)
        goto LABEL_2055;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1554[7] - v1554[6]) >> 3)) > 0x3E8
        || v1554[5] > 0x20uLL)
      {
        goto LABEL_1695;
      }
      v1555 = *(_QWORD *)(v1538 + 6352);
      v1556 = *(_QWORD *)(v1538 + 6360);
      if (v1555 == v1556)
        goto LABEL_2055;
      v1557 = 0;
      do
      {
        v1558 = v1554[5];
        if (v1558)
        {
          v1559 = *(double *)(v1555 + 80);
          v1560 = *(double *)(*(_QWORD *)(v1555 + 7728) + 32);
          v1561 = *(double *)(v1555 + 72) + v1560 + -0.05;
          v1562 = sub_20FD33354(v1554, v1561);
          v1563 = v1559 + v1560 + 0.05;
          v1564 = sub_20FD33354(v1554, v1563);
          v1565 = *v1564;
          v1566 = *v1564 <= v1561;
          if (*v1562 > v1561)
            v1566 = 1;
          v1567 = v1565 > v1561 && v1565 < v1563;
          v1558 = v1567 + 0x6DB6DB6DB6DB6DB7 * (v1564 - v1562) + v1566 + 1;
        }
        if (v1557 <= v1558)
          v1557 = v1558;
        v1555 += 8016;
      }
      while (v1555 != v1556);
      v1544 = *(_BYTE **)(a1 + 8216);
      v1540 = v1544[1720];
      if (v1557 >= 0x65)
      {
LABEL_1695:
        v1568 = v1544 + 864;
        if (!v1540)
          v1568 = v1544 + 24;
        if (v1568[789])
        {
          if (*(_BYTE *)(a1 + 7681) || !v1568[787])
          {
            if (v1881 >= 2 && v1568[785])
            {
              v1569 = (_DWORD *)(v1538 + 62980);
            }
            else if (v1568[786])
            {
              v1569 = (_DWORD *)(v1538 + 62988);
            }
            else
            {
              v1569 = (_DWORD *)(v1538 + 62992);
            }
          }
          else
          {
            v1569 = (_DWORD *)(v1538 + 62984);
          }
          ++*v1569;
        }
        v1570 = 1;
      }
      else
      {
LABEL_2055:
        v1570 = 0;
      }
      if (*(_DWORD *)(v1538 + 62900))
        v1570 = 1;
      *v1539 = v1570;
    }
LABEL_1712:
    v1571 = v1544 + 864;
    v1572 = v1544 + 24;
    if (v1540)
      v1573 = v1571;
    else
      v1573 = v1572;
    if (v1573[784])
    {
      if (v1573[789])
        *(_BYTE *)(v1538 + 62911) = 1;
      if (v1573[790])
        *(_BYTE *)(v1538 + 62904) = 1;
      if (v1573[791])
        *(_BYTE *)(v1538 + 62905) = 1;
      if (v1573[792])
        *(_BYTE *)(v1538 + 62908) = 1;
    }
    v1574 = *(_QWORD **)(v1511 + 16);
    if (v1574 + 19 != v1827)
    {
      sub_20FB42E10(v1574 + 19, *v1827, v1827[1], (v1827[1] - *v1827) >> 3);
      v1574 = *(_QWORD **)(v1511 + 16);
    }
    v1575 = v1574[707];
    v1576 = v1574[708];
    if (v1576 == v1575 || *(_DWORD *)v1575)
    {
      v1577 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v1575 = v1576;
      if (v1577)
        goto LABEL_2068;
    }
    if (*(_BYTE *)(*(_QWORD *)(v1575 + 8) + 20))
    {
      v1578 = *(_QWORD **)(v1538 + 6496);
      if ((*(_QWORD **)(v1538 + 6504) == v1578 || *v1578)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1128, (uint64_t)"iter != ls.graph().template endFactor<TOffPriorFactor>()", 56, (uint64_t)"There must be a prior factor for the time offset variable.", 58, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2068;
      }
    }
    v1579 = *(_QWORD *)(v1511 + 16);
    v1580 = *(char **)(v1579 + 5656);
    v1581 = *(char **)(v1579 + 5664);
    if (v1581 != v1580)
    {
      v1582 = (v1581 - v1580) >> 4;
      do
      {
        v1583 = v1582 >> 1;
        v1584 = (int *)&v1580[16 * (v1582 >> 1)];
        v1586 = *v1584;
        v1585 = (char *)(v1584 + 4);
        v1582 += ~(v1582 >> 1);
        if (v1586)
          v1582 = v1583;
        else
          v1580 = v1585;
      }
      while (v1582);
    }
    if (v1580 == v1581 || *(_DWORD *)v1580 != 1)
    {
      v1587 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v1580 = v1581;
      if (v1587)
        goto LABEL_2068;
    }
    if (*(_BYTE *)(*((_QWORD *)v1580 + 1) + 20))
    {
      v1588 = *(char **)(v1538 + 6496);
      v1589 = *(char **)(v1538 + 6504);
      if (v1589 == v1588)
        goto LABEL_1751;
      v1590 = 0x6DB6DB6DB6DB6DB7 * ((v1589 - v1588) >> 4);
      do
      {
        v1591 = v1590 >> 1;
        v1592 = &v1588[112 * (v1590 >> 1)];
        v1594 = *(_QWORD *)v1592;
        v1593 = v1592 + 112;
        v1590 += ~(v1590 >> 1);
        if (v1594)
          v1590 = v1591;
        else
          v1588 = v1593;
      }
      while (v1590);
      if (v1589 == v1588 || *(_QWORD *)v1588 != 1)
      {
LABEL_1751:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1135, (uint64_t)"iter != ls.graph().template endFactor<TOffPriorFactor>()", 56, (uint64_t)"There must be a prior factor for the time offset variable.", 58, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2068;
        }
      }
    }
    v1595 = *(_QWORD *)(v1511 + 16);
    if (!*(_BYTE *)(v1595 + 1790)
      || (v1596 = *(_QWORD *)(v1595 + 5656), *(_QWORD *)(v1595 + 5664) == v1596)
      || *(_DWORD *)v1596
      || !*(_BYTE *)(*(_QWORD *)(v1596 + 8) + 20)
      || (v1614 = *(_QWORD *)(v1595 + 8), *(_QWORD *)(v1614 + 64) < 2uLL))
    {
      *(_QWORD *)(a1 + 5320) = 0x7FEFFFFFFFFFFFFFLL;
      v1597 = *(_BYTE *)(a1 + 1928);
      if (!v1597)
        goto LABEL_1757;
    }
    else
    {
      v1617 = *(_QWORD **)(v1614 + 56);
      v1615 = (_QWORD *)(v1614 + 56);
      v1616 = v1617;
      if (v1617)
      {
        v1618 = v1616;
        do
        {
          v1619 = v1618;
          v1618 = (_QWORD *)v1618[1];
        }
        while (v1618);
      }
      else
      {
        v1803 = v1615;
        do
        {
          v1619 = (_QWORD *)v1803[2];
          _ZF = *v1619 == (_QWORD)v1803;
          v1803 = v1619;
        }
        while (_ZF);
      }
      if (v1616)
      {
        do
        {
          v1804 = v1616;
          v1616 = (_QWORD *)v1616[1];
        }
        while (v1616);
      }
      else
      {
        do
        {
          v1804 = (_QWORD *)v1615[2];
          _ZF = *v1804 == (_QWORD)v1615;
          v1615 = v1804;
        }
        while (_ZF);
      }
      v1805 = (_QWORD *)*v1619;
      if (*v1619)
      {
        do
        {
          v1806 = v1805;
          v1805 = (_QWORD *)v1805[1];
        }
        while (v1805);
      }
      else
      {
        do
        {
          v1806 = (_QWORD *)v1619[2];
          _ZF = *v1806 == (_QWORD)v1619;
          v1619 = v1806;
        }
        while (_ZF);
      }
      v1807 = *(double *)(v1804[6] + 824) - *(double *)(v1806[6] + 824);
      v1808 = *(_QWORD *)(v1511 + 16);
      if (v1807 < 0.0)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3058, (uint64_t)"delta_t_between_first_two_states >= 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2068;
        }
        v1808 = *(_QWORD *)(v1511 + 16);
      }
      v1809 = v1807 * *(double *)(v1595 + 1792);
      if (*(double *)(v1595 + 1800) >= v1809)
        v1809 = *(double *)(v1595 + 1800);
      v1595 = v1808;
      *(double *)(a1 + 5320) = v1809;
      v1597 = *(_BYTE *)(a1 + 1928);
      if (!v1597)
      {
LABEL_1757:
        *v1837 = v1597;
        if (*(_QWORD *)(v1595 + 48) == *(_QWORD *)(v1595 + 56))
        {
          v1599 = a1;
          v1598 = *(_QWORD *)(a1 + 2728) != *(_QWORD *)(a1 + 2736);
        }
        else
        {
          v1598 = 1;
          v1599 = a1;
        }
        *(_BYTE *)(a1 + 5313) = v1598;
        v1600 = *(_QWORD *)(v1595 + 72);
        v1601 = *(_QWORD *)(v1595 + 80);
        *(_BYTE *)(a1 + 5314) = v1600 != v1601;
        v1602 = *(_BYTE **)(v1599 + 8216);
        v1603 = v1602[1720];
        v1604 = v1602 + 864;
        if (!v1602[1720])
          v1604 = v1602 + 24;
        if (v1604[793])
          v1605 = v1881 == 1;
        else
          v1605 = 0;
        if (!v1605 || v1603 != 0)
          goto LABEL_1769;
        if (*v1833)
          v1598 = 1;
        if (!v1598 && v1600 == v1601 && *(_QWORD *)(v1538 + 5568) == *(_QWORD *)(v1538 + 5560) && !*v1539)
        {
          oslog[0] = 1;
          LODWORD(object[0]) = 0;
          v1909[0] = (os_log_t)(v1538 + 5168);
          v1909[1] = (os_log_t)object;
          v1909[2] = (os_log_t)(v1538 + 4856);
          v1909[3] = (os_log_t)oslog;
          sub_20F920D80(v1909);
          sub_20F9209FC(v1909);
          sub_20F920678(v1909);
          sub_20F9204D8(v1909);
          sub_20F92014C(v1909);
          sub_20F91FDC4(v1909);
          sub_20F91FC24(v1909);
          sub_20F91FA84(v1909);
          v1610 = (int)object[0];
          *(_BYTE *)(a1 + 5315) = LODWORD(object[0]) == 0;
          if (!v1610)
          {
            v1613 = 1;
            goto LABEL_1882;
          }
          v1611 = *(_BYTE **)(a1 + 8216);
          v1603 = v1611[1720];
          v1612 = v1611 + 864;
          v1608 = v1611 + 24;
          if (v1603)
            v1608 = v1612;
          if (!v1608[794])
          {
LABEL_1788:
            v1613 = 0;
LABEL_1882:
            *(_BYTE *)(v1538 + 62907) = v1613;
            return kdebug_trace();
          }
        }
        else
        {
LABEL_1769:
          *(_BYTE *)(a1 + 5315) = 0;
          v1607 = v1602 + 864;
          v1608 = v1602 + 24;
          if (v1603)
            v1608 = v1607;
          if (!v1608[794])
            goto LABEL_1788;
        }
        if (!*v1539 && v1608[789])
        {
          if (v1608[793])
          {
            if (*(_BYTE *)(a1 + 5313) || *(_BYTE *)(a1 + 5314))
            {
              v1609 = (_DWORD *)(v1538 + 62996);
            }
            else if (*(_QWORD *)(v1538 + 5568) == *(_QWORD *)(v1538 + 5560))
            {
              if (v1603 || *v1833)
              {
                v1609 = (_DWORD *)(v1538 + 63004);
              }
              else
              {
                oslog[0] = 0;
                LODWORD(object[0]) = 0;
                v1909[0] = (os_log_t)(v1538 + 5168);
                v1909[1] = (os_log_t)object;
                v1909[2] = (os_log_t)(v1538 + 4856);
                v1909[3] = (os_log_t)oslog;
                sub_20F920D80(v1909);
                sub_20F9209FC(v1909);
                sub_20F920678(v1909);
                sub_20F9204D8(v1909);
                sub_20F92014C(v1909);
                sub_20F91FDC4(v1909);
                sub_20F91FC24(v1909);
                sub_20F91FA84(v1909);
                if (LODWORD(object[0]))
                  v1609 = (_DWORD *)(v1538 + 63008);
                else
                  v1609 = (_DWORD *)(v1538 + 63012);
              }
            }
            else
            {
              v1609 = (_DWORD *)(v1538 + 63000);
            }
          }
          else
          {
            v1609 = (_DWORD *)(v1538 + 62988);
          }
          ++*v1609;
        }
        v1613 = 0;
        *v1539 = 1;
        goto LABEL_1882;
      }
    }
    v1597 = *(_QWORD *)(v1595 + 152) != *(_QWORD *)(v1595 + 160);
    goto LABEL_1757;
  }
  v1512 = *(_QWORD *)(v1511 + 8);
  *(_BYTE *)(v1512 + 6803) = 0;
  v1513 = v1512;
  if ((char **)(v1512 + 152) != v1827)
  {
    sub_20FB42E10((_QWORD *)(v1512 + 152), *v1827, v1827[1], (v1827[1] - *v1827) >> 3);
    v1513 = *(_QWORD *)(v1511 + 8);
  }
  v1514 = *(_QWORD *)(v1513 + 5672);
  v1515 = *(_QWORD *)(v1513 + 5680);
  if (v1515 == v1514 || *(_DWORD *)v1514)
  {
    v1516 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v1514 = v1515;
    if (v1516)
      goto LABEL_2068;
  }
  if (*(_BYTE *)(*(_QWORD *)(v1514 + 8) + 20))
  {
    v1517 = *(_QWORD **)(v1512 + 6512);
    if ((*(_QWORD **)(v1512 + 6520) == v1517 || *v1517)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1128, (uint64_t)"iter != ls.graph().template endFactor<TOffPriorFactor>()", 56, (uint64_t)"There must be a prior factor for the time offset variable.", 58, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_2068;
    }
  }
  v1518 = *(_QWORD *)(v1511 + 8);
  v1519 = *(char **)(v1518 + 5672);
  v1520 = *(char **)(v1518 + 5680);
  if (v1520 != v1519)
  {
    v1521 = (v1520 - v1519) >> 4;
    do
    {
      v1522 = v1521 >> 1;
      v1523 = (int *)&v1519[16 * (v1521 >> 1)];
      v1525 = *v1523;
      v1524 = (char *)(v1523 + 4);
      v1521 += ~(v1521 >> 1);
      if (v1525)
        v1521 = v1522;
      else
        v1519 = v1524;
    }
    while (v1521);
  }
  if (v1519 == v1520 || *(_DWORD *)v1519 != 1)
  {
    v1526 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.h", 235, (uint64_t)"iter != linearSystem().graph().template endVariable<VARIABLE_TYPE>()", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v1519 = v1520;
    if (v1526)
      goto LABEL_2068;
  }
  if (*(_BYTE *)(*((_QWORD *)v1519 + 1) + 20))
  {
    v1527 = *(char **)(v1512 + 6512);
    v1528 = *(char **)(v1512 + 6520);
    if (v1528 == v1527)
      goto LABEL_1639;
    v1529 = 0x6DB6DB6DB6DB6DB7 * ((v1528 - v1527) >> 4);
    do
    {
      v1530 = v1529 >> 1;
      v1531 = &v1527[112 * (v1529 >> 1)];
      v1533 = *(_QWORD *)v1531;
      v1532 = v1531 + 112;
      v1529 += ~(v1529 >> 1);
      if (v1533)
        v1529 = v1530;
      else
        v1527 = v1532;
    }
    while (v1529);
    if (v1528 == v1527 || *(_QWORD *)v1527 != 1)
    {
LABEL_1639:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1135, (uint64_t)"iter != ls.graph().template endFactor<TOffPriorFactor>()", 56, (uint64_t)"There must be a prior factor for the time offset variable.", 58, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_2068;
      }
    }
  }
  v1534 = *(_QWORD *)(v1511 + 8);
  if (!*(_BYTE *)(v1534 + 1790)
    || (v1535 = *(_QWORD *)(v1534 + 5672), *(_QWORD *)(v1534 + 5680) == v1535)
    || *(_DWORD *)v1535
    || !*(_BYTE *)(*(_QWORD *)(v1535 + 8) + 20)
    || (v1546 = *(_QWORD *)(v1534 + 8), *(_QWORD *)(v1546 + 64) < 2uLL))
  {
    *(_QWORD *)(a1 + 5320) = 0x7FEFFFFFFFFFFFFFLL;
    v1536 = *(_BYTE *)(a1 + 1928);
    if (!v1536)
      goto LABEL_1645;
    goto LABEL_1644;
  }
  v1549 = *(_QWORD **)(v1546 + 56);
  v1547 = (_QWORD *)(v1546 + 56);
  v1548 = v1549;
  if (v1549)
  {
    v1550 = v1548;
    do
    {
      v1551 = v1550;
      v1550 = (_QWORD *)v1550[1];
    }
    while (v1550);
  }
  else
  {
    v1796 = v1547;
    do
    {
      v1551 = (_QWORD *)v1796[2];
      _ZF = *v1551 == (_QWORD)v1796;
      v1796 = v1551;
    }
    while (_ZF);
  }
  if (v1548)
  {
    do
    {
      v1797 = v1548;
      v1548 = (_QWORD *)v1548[1];
    }
    while (v1548);
  }
  else
  {
    do
    {
      v1797 = (_QWORD *)v1547[2];
      _ZF = *v1797 == (_QWORD)v1547;
      v1547 = v1797;
    }
    while (_ZF);
  }
  v1798 = (_QWORD *)*v1551;
  if (*v1551)
  {
    do
    {
      v1799 = v1798;
      v1798 = (_QWORD *)v1798[1];
    }
    while (v1798);
  }
  else
  {
    do
    {
      v1799 = (_QWORD *)v1551[2];
      _ZF = *v1799 == (_QWORD)v1551;
      v1551 = v1799;
    }
    while (_ZF);
  }
  v1800 = *(double *)(v1797[6] + 824) - *(double *)(v1799[6] + 824);
  v1801 = *(_QWORD *)(v1511 + 8);
  if (v1800 < 0.0)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 3058, (uint64_t)"delta_t_between_first_two_states >= 0", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v1801 = *(_QWORD *)(v1511 + 8);
      goto LABEL_2029;
    }
LABEL_2068:
    abort();
  }
LABEL_2029:
  v1802 = v1800 * *(double *)(v1534 + 1792);
  if (*(double *)(v1534 + 1800) >= v1802)
    v1802 = *(double *)(v1534 + 1800);
  v1534 = v1801;
  *(double *)(a1 + 5320) = v1802;
  v1536 = *(_BYTE *)(a1 + 1928);
  if (v1536)
LABEL_1644:
    v1536 = *(_QWORD *)(v1534 + 152) != *(_QWORD *)(v1534 + 160);
LABEL_1645:
  *v1837 = v1536;
  v1537 = *(_QWORD *)(v1534 + 48) != *(_QWORD *)(v1534 + 56) || *(_QWORD *)(a1 + 2728) != *(_QWORD *)(a1 + 2736);
  *(_BYTE *)(a1 + 5313) = v1537;
  *(_BYTE *)(a1 + 5314) = *(_QWORD *)(v1534 + 72) != *(_QWORD *)(v1534 + 80);
  *(_BYTE *)(a1 + 5315) = 0;
  return kdebug_trace();
}

void sub_20F854FE8(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x3E8]))
  {
    if (SLOBYTE(STACK[0x3E7]) < 0)
      operator delete((void *)STACK[0x3D0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x280]);
  sub_20E8E69C4((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F855D74(uint64_t a1)
{
  uint64_t v2;
  long double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  BOOL v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  _DWORD *v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _DWORD *v102;
  uint64_t v103;
  int64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  int *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  _DWORD *v144;
  int64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  uint64_t v155;
  unsigned int *v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  double v164;
  double *v165;
  char v166;
  double v167;
  char v168;
  double v170;
  uint64_t v171;
  char v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  void **v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v193;
  _OWORD *v194;
  double v195;
  double v196;
  unint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  double v206;
  uint64_t v207;
  unsigned int v208;
  const void **v209;
  double v210;
  double v212;
  void **v213;
  uint64_t v214;
  size_t v215;
  unint64_t v216;
  _OWORD *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void **v221;
  unint64_t v222;
  _OWORD *v223;
  __int128 *v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  double *v228;
  uint64_t v229;
  double *v230;
  uint64_t v231;
  double v232;
  double v233;
  uint64_t v234;
  char *v235;
  double v236;
  double *v237;
  unint64_t v238;
  unint64_t v239;
  float64x2_t *v240;
  uint64_t v241;
  float64x2_t v242;
  float64x2_t v243;
  double *v244;
  double v245;
  double v246;
  double v247;
  double *v248;
  uint64_t v249;
  double *v250;
  uint64_t v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  std::locale::__imp *locale;
  double v258;
  double v259;
  uint64_t v260;
  int v261;
  char *v262;
  double *v263;
  double v264;
  double v265;
  double v266;
  double *v267;
  double *v268;
  unint64_t v269;
  double *v270;
  unint64_t v271;
  uint64_t v272;
  float64x2_t *v273;
  uint64_t v274;
  float64x2_t v275;
  float64x2_t v276;
  double v277;
  unint64_t v278;
  double *v279;
  unint64_t v280;
  uint64_t v281;
  float64x2_t *v282;
  float64x2_t *v283;
  uint64_t v284;
  float64x2_t v285;
  float64x2_t v286;
  double *v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  float64x2_t v293;
  uint64_t v294;
  _OWORD *v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  double v301;
  double v302;
  double v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  _QWORD *v307;
  const std::locale::facet *v308;
  void **v309;
  uint64_t v310;
  size_t v311;
  unint64_t v312;
  _OWORD *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void **v317;
  unint64_t v318;
  _OWORD *v319;
  __int128 *v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  double **v324;
  uint64_t v325;
  double v326;
  double *v327;
  uint64_t v328;
  double v329;
  double v330;
  _QWORD *v331;
  const std::locale::facet *v332;
  _QWORD *v333;
  double v334;
  uint64_t k;
  uint64_t v336;
  uint64_t v337;
  _DWORD *j;
  double v339;
  unsigned int v340;
  uint64_t v341;
  double *v342;
  double v343;
  double *v344;
  unint64_t v345;
  unint64_t v346;
  float64x2_t *v347;
  uint64_t v348;
  float64x2_t v349;
  float64x2_t v350;
  double *v351;
  double v352;
  double v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  double *v357;
  uint64_t v358;
  double v359;
  double v360;
  int v361;
  uint64_t v362;
  double *v363;
  int v364;
  double v365;
  double v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  double **v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __n128 v411;
  __int128 v412;
  uint64_t **i;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _OWORD *v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  uint64_t v427;
  __int128 v428;
  __int128 v429;
  unsigned int v430;
  uint64_t v431;
  _QWORD *v432;
  _QWORD *v433;
  const std::locale::facet *v434;
  double v435;
  double v436;
  double v437;
  _QWORD *v438;
  const std::locale::facet *v439;
  _QWORD *v440;
  _QWORD *v441;
  const std::locale::facet *v442;
  double v443;
  double v444;
  double v445;
  _QWORD *v446;
  const std::locale::facet *v447;
  int v448;
  _QWORD *v449;
  const std::locale::facet *v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  _QWORD *v461;
  uint64_t v462;
  uint64_t m;
  unint64_t prime;
  _QWORD *v465;
  char v466;
  size_t v467;
  std::locale::__imp *v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  uint64_t v472;
  void *v473;
  void *v474;
  void *v475;
  uint64_t v476;
  char v477;
  size_t v478;
  void *v479;
  uint64_t v480;
  const void *v481;
  uint64_t v482;
  uint64_t v483;
  void **v484;
  uint64_t v485;
  const char *v486;
  size_t v487;
  unsigned __int8 v488;
  unsigned __int8 v489;
  const char *v490;
  size_t v491;
  void **v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  NSObject *v497;
  uint64_t v498;
  uint64_t v499;
  size_t v500;
  std::locale::__imp *v501;
  std::__shared_weak_count *v502;
  size_t v503;
  size_t v504;
  _QWORD *v505;
  void *v506;
  uint64_t v507;
  _QWORD *v508;
  _QWORD *v509;
  uint64_t v510;
  uint64_t ii;
  unint64_t v512;
  int8x8_t v513;
  unint64_t v514;
  uint8x8_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *v519;
  char v520;
  _QWORD *v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *p_shared_owners;
  unint64_t v525;
  char *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t v532;
  int8x8_t v533;
  unint64_t v534;
  uint8x8_t v535;
  uint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  void *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  const char *v545;
  std::locale::__imp *v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  void **v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  unsigned int *v570;
  unsigned int *n;
  void *v572;
  unsigned int *v573;
  unsigned int *jj;
  void *v575;
  int v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  int v582;
  float64_t v583;
  void **v584;
  int v585;
  void **v586;
  char v587;
  int v588;
  _BYTE *v589;
  uint64_t v590;
  char v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  const char *v596;
  void **v597;
  uint64_t v598;
  void *v599;
  uint64_t v600;
  void *v601;
  uint64_t v602;
  double *v603;
  void *v604;
  uint64_t v605;
  void *v606[2];
  char *rep;
  int v608;
  const char *v609;
  int v610;
  const char *v611;
  uint64_t v612;
  std::__shared_weak_count *v613;
  void *v614[2];
  int64_t v615;
  uint64_t v616;
  std::locale __dst[2];
  std::__shared_weak_count *v618;
  char *v619;
  std::__shared_weak_count *v620;
  _QWORD *v621;
  __int128 v622;
  void *__p[2];
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  void *object[3];
  void *v634[2];
  char *v635;
  size_t v636;
  unint64_t v637;
  int64x2_t v638;
  void *v639[3];
  char v640;
  unint64_t v641;
  int v642;
  uint64_t v643;
  void **v644;
  __int128 v645;
  void *v646[64];
  void *__src;
  unint64_t v648;
  __int128 v649;
  _BYTE v650[512];
  _BYTE *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  _BYTE v656[512];
  _BYTE *v657;
  uint64_t v658;
  uint64_t v659;
  _QWORD v660[5];

  v660[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *(_DWORD *)(a1 + 5296) = -1;
  *(_DWORD *)(a1 + 5304) = -1;
  v605 = a1;
  if (*(_BYTE *)(a1 + 5315))
  {
    v580 = *(_QWORD *)(a1 + 496);
    v2 = *(_QWORD *)(a1 + 592);
    v3 = cos(*(double *)(a1 + 568) * 0.0174532925);
    v4 = *(double *)(a1 + 616);
    v579 = *(_QWORD *)(a1 + 536);
    v581 = *(_DWORD *)(a1 + 1800);
    v582 = *(_DWORD *)(a1 + 1784);
    v5 = *(double *)(a1 + 8144);
    v6 = a1 + 496 + 8 * *(unsigned __int8 *)(a1 + 11680);
    v7 = *(double *)(v6 + 208);
    v8 = *(double *)(v6 + 184);
    v9 = *(double *)(a1 + 560);
    v10 = cos(*(double *)(a1 + 584) * 0.0174532925);
    v11 = *(_QWORD *)(a1 + 8216);
    if (*(_BYTE *)v11)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2895, (uint64_t)"", 0, (uint64_t)"Cannot batch in software mode.", 30, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v12 = v10;
    v577 = **(_DWORD **)(a1 + 2480);
    v578 = *(_QWORD *)(a1 + 8216);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 + 45424;
    sub_20FB9CDC0((_QWORD *)v13);
    v586 = (void **)(v13 + 45328);
    *(_QWORD *)(v13 + 45336) = *(_QWORD *)(v13 + 45328);
    v584 = (void **)(v13 + 45352);
    *(_QWORD *)(v13 + 45360) = *(_QWORD *)(v13 + 45352);
    *(_QWORD *)(v13 + 45384) = *(_QWORD *)(v13 + 45376);
    *(_QWORD *)(v13 + 45408) = *(_QWORD *)(v13 + 45400);
    *(_QWORD *)(v13 + 45432) = *(_QWORD *)(v13 + 45424);
    *(_QWORD *)(v13 + 45456) = *(_QWORD *)(v13 + 45448);
    *(_QWORD *)(v13 + 45480) = *(_QWORD *)(v13 + 45472);
    *(_QWORD *)(v13 + 45504) = *(_QWORD *)(v13 + 45496);
    *(_QWORD *)(v13 + 45528) = *(_QWORD *)(v13 + 45520);
    *(_QWORD *)(v13 + 45552) = *(_QWORD *)(v13 + 45544);
    v597 = (void **)(v13 + 45568);
    v600 = v13 + 45160;
    *(_QWORD *)(v13 + 45576) = *(_QWORD *)(v13 + 45568);
    *(_BYTE *)(v13 + 45592) = 0;
    *(_BYTE *)(v13 + 45160) = 1;
    v19 = *(int **)(v13 + 5560);
    v20 = *(int **)(v13 + 5568);
    v602 = v13;
    while (v19 != v20)
    {
      v22 = *((_QWORD *)v19 + 1);
      v23 = *v19;
      v24 = *(uint64_t **)(v13 + 24);
      v25 = *(uint64_t **)(v13 + 32);
      if (v24 != v25)
      {
        while (*(_DWORD *)(v22 + 16) != *(_DWORD *)(*v24 + 32))
        {
          if (++v24 == v25)
            goto LABEL_21;
        }
      }
      if (v24 == v25)
      {
LABEL_21:
        if ((*(_BYTE *)(v22 + 4) & 6) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1697, (uint64_t)"id_variable.second.state.isMarginalized() || id_variable.second.state.isRemoved()", 81, (uint64_t)"SLAM variables not associated to an entry in front-end tracks should have been marked as marginalized or removed.", 113, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_844;
        }
      }
      else
      {
        v26 = *v24;
        if (((*(_BYTE *)(v22 + 4) & 6) != 0 || *(_DWORD *)(v26 + 520) != 2)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1707, (uint64_t)"!id_variable.second.state.isMarginalized() && !id_variable.second.state.isRemoved() && track_ptr->isPersistent()", 112, (uint64_t)"SLAM variables associated to an entry in front-end tracks should not have been marked as marginalized or removed, and the track is persistent.", 142, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_844;
        }
        v28 = *(uint64_t **)(v26 + 496);
        v27 = *(uint64_t **)(v26 + 504);
        v29 = *(v27 - 8);
        v30 = *((_DWORD *)v27 - 14);
        while (v28 != v27)
        {
          if (*((_DWORD *)v28 + 2) > v30)
          {
            v29 = *v28;
            v30 = *((_DWORD *)v28 + 2);
          }
          v28 += 8;
        }
        v31 = *(_QWORD *)(v13 + 8);
        v33 = (_QWORD *)(v31 + 56);
        v32 = *(uint64_t **)(v31 + 56);
        if (!v32)
          goto LABEL_36;
        v34 = (_QWORD *)(v31 + 56);
        do
        {
          v35 = v32[4];
          if (v35 < v29)
          {
            ++v32;
          }
          else if (v35 == v29)
          {
            if (*((_DWORD *)v32 + 10) < v30)
              ++v32;
            else
              v34 = v32;
          }
          else
          {
            v34 = v32;
          }
          v32 = (uint64_t *)*v32;
        }
        while (v32);
        if (v34 == v33 || (v36 = v34[4], v29 < v36) || v29 == v36 && *((_DWORD *)v34 + 10) > v30)
        {
LABEL_36:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1720, (uint64_t)"track_latest_state_with_obs_iter != this->viobadata_ref_.state_set->end()", 73, (uint64_t)"The state associated to the latest observation should be in state set.", 70, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_844;
          }
          v31 = *(_QWORD *)(v13 + 8);
          v34 = v33;
        }
        v37 = (_QWORD *)(v31 + 56);
        if (v34 == (_QWORD *)(v31 + 56))
        {
          v39 = -1;
        }
        else
        {
          v38 = 0;
          do
          {
            v39 = v38;
            v40 = (_QWORD *)v34[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v34[2];
                _ZF = *v41 == (_QWORD)v34;
                v34 = v41;
              }
              while (!_ZF);
            }
            v38 = v39 + 1;
            v34 = v41;
          }
          while (v41 != v37);
        }
        if (v39 > *(_DWORD *)(v13 + 1936))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1734, (uint64_t)"!track_trail_went_cold", 22, (uint64_t)"Cannot unset the track in batched operation.", 44, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_844;
          }
          v43 = *(char **)(v14 + 8);
          v42 = *(_QWORD *)(v14 + 16);
          if ((unint64_t)v43 >= v42)
          {
            v44 = *(char **)v14;
            v45 = (uint64_t)&v43[-*(_QWORD *)v14];
            v46 = v45 >> 2;
            v47 = (v45 >> 2) + 1;
            if (v47 >> 62)
              sub_20E867F44();
            v48 = v20;
            v49 = v42 - (_QWORD)v44;
            if (v49 >> 1 > v47)
              v47 = v49 >> 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
              v50 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v50 = v47;
            if (v50)
            {
              if (v50 >> 62)
LABEL_845:
                sub_20E877A38();
              v51 = operator new(4 * v50);
              v52 = &v51[4 * v46];
              *v52 = v23;
              v21 = (uint64_t)(v52 + 1);
              v53 = v43 - v44;
              if (v43 != v44)
              {
LABEL_60:
                v54 = v53 - 4;
                if (v54 < 0x2C)
                {
                  v13 = v602;
                  goto LABEL_71;
                }
                v55 = v43 - v51 - v45;
                v13 = v602;
                if (v55 < 0x20)
                  goto LABEL_863;
                v56 = (v54 >> 2) + 1;
                v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
                v58 = &v43[-v57];
                v52 = (_DWORD *)((char *)v52 - v57);
                v59 = &v51[4 * v46 - 16];
                v60 = v43 - 16;
                v61 = v56 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *(_OWORD *)v60;
                  *(v59 - 1) = *((_OWORD *)v60 - 1);
                  *v59 = v62;
                  v59 -= 2;
                  v60 -= 32;
                  v61 -= 8;
                }
                while (v61);
                v43 = v58;
                if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_863:
                  do
                  {
LABEL_71:
                    v63 = *((_DWORD *)v43 - 1);
                    v43 -= 4;
                    *--v52 = v63;
                  }
                  while (v43 != v44);
                }
LABEL_72:
                *(_QWORD *)v14 = v52;
                *(_QWORD *)(v14 + 8) = v21;
                *(_QWORD *)(v14 + 16) = &v51[4 * v50];
                if (v44)
                  operator delete(v44);
                v20 = v48;
LABEL_6:
                *(_QWORD *)(v14 + 8) = v21;
                goto LABEL_7;
              }
            }
            else
            {
              v51 = 0;
              v52 = (_DWORD *)(4 * v46);
              *(_DWORD *)(4 * v46) = v23;
              v21 = 4 * v46 + 4;
              v53 = v43 - v44;
              if (v43 != v44)
                goto LABEL_60;
            }
            v13 = v602;
            goto LABEL_72;
          }
          *(_DWORD *)v43 = v23;
          v21 = (uint64_t)(v43 + 4);
          goto LABEL_6;
        }
      }
LABEL_7:
      v19 += 4;
    }
    v64 = *(_QWORD **)(v13 + 8);
    v65 = (_QWORD *)v600;
    if (v64[8] <= 1uLL)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBASlidingWindowSolver.hpp", 1325, (uint64_t)"this->viobadata_ref_.state_set->size() >= 1 + kept_idx", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_844:
        abort();
      }
      v64 = *(_QWORD **)(v13 + 8);
    }
    v66 = (_QWORD *)v64[6];
    v67 = (_QWORD *)v66[1];
    if (v67)
    {
      do
      {
        v68 = v67;
        v67 = (_QWORD *)*v67;
      }
      while (v67);
    }
    else
    {
      v69 = (_QWORD *)v64[6];
      do
      {
        v68 = (_QWORD *)v69[2];
        _ZF = *v68 == (_QWORD)v69;
        v69 = v68;
      }
      while (!_ZF);
    }
    v70 = v64 + 7;
    if (v66 != v64 + 7)
    {
      v72 = v66[4];
      v71 = v66[5];
      v73 = v68[4];
      v74 = *((_DWORD *)v68 + 10);
      v592 = v72;
      v595 = v71;
      v590 = v73;
      v588 = v74;
      while (1)
      {
        v75 = v66[4];
        v76 = *((_DWORD *)v66 + 10);
        _ZF = v75 == v73 && v76 == v74;
        if (_ZF || (v75 == v72 ? (v78 = v76 == (_DWORD)v71) : (v78 = 0), v78))
        {
LABEL_132:
          v83 = (_QWORD *)v66[1];
          if (v83)
            goto LABEL_133;
          goto LABEL_145;
        }
        v80 = (char *)v65[22];
        v79 = v65[23];
        if ((unint64_t)v80 < v79)
        {
          *(_DWORD *)v80 = v76;
          v65[22] = v80 + 4;
          if (!*(_BYTE *)(v13 + 2146))
            goto LABEL_132;
          goto LABEL_97;
        }
        v84 = (char *)*v586;
        v85 = v80 - (_BYTE *)*v586;
        v86 = v85 >> 2;
        v87 = (v85 >> 2) + 1;
        if (v87 >> 62)
          sub_20E867F44();
        v88 = v79 - (_QWORD)v84;
        if (v88 >> 1 > v87)
          v87 = v88 >> 1;
        v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v87;
        if (v89)
        {
          if (v89 >> 62)
            goto LABEL_845;
          v90 = operator new(4 * v89);
          v91 = &v90[4 * v86];
          *v91 = v76;
          v92 = (uint64_t)(v91 + 1);
          v93 = v80 - v84;
          if (v80 == v84)
          {
LABEL_123:
            v65 = (_QWORD *)v600;
            goto LABEL_129;
          }
        }
        else
        {
          v90 = 0;
          v91 = (_DWORD *)(4 * v86);
          *(_DWORD *)(4 * v86) = v76;
          v92 = 4 * v86 + 4;
          v93 = v80 - v84;
          if (v80 == v84)
            goto LABEL_123;
        }
        v94 = v93 - 4;
        if (v94 < 0x2C)
          break;
        v106 = v80 - v90 - v85;
        v65 = (_QWORD *)v600;
        if (v106 < 0x20)
          goto LABEL_128;
        v107 = (v94 >> 2) + 1;
        v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
        v109 = &v80[-v108];
        v91 = (_DWORD *)((char *)v91 - v108);
        v110 = &v90[4 * v86 - 16];
        v111 = v80 - 16;
        v112 = v107 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          *v110 = v113;
          v110 -= 2;
          v111 -= 32;
          v112 -= 8;
        }
        while (v112);
        v80 = v109;
        if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_128;
LABEL_129:
        v65[21] = v91;
        v65[22] = v92;
        v65[23] = &v90[4 * v89];
        if (v84)
          operator delete(v84);
        v13 = v602;
        v72 = v592;
        LODWORD(v71) = v595;
        v73 = v590;
        v74 = v588;
        v65[22] = v92;
        if (!*(_BYTE *)(v602 + 2146))
          goto LABEL_132;
LABEL_97:
        v82 = (char *)v65[25];
        v81 = v65[26];
        if ((unint64_t)v82 < v81)
        {
          *(_DWORD *)v82 = v76;
          v65[25] = v82 + 4;
          v83 = (_QWORD *)v66[1];
          if (v83)
            goto LABEL_133;
          goto LABEL_145;
        }
        v95 = (char *)*v584;
        v96 = v82 - (_BYTE *)*v584;
        v97 = v96 >> 2;
        v98 = (v96 >> 2) + 1;
        if (v98 >> 62)
          sub_20E867F44();
        v99 = v81 - (_QWORD)v95;
        if (v99 >> 1 > v98)
          v98 = v99 >> 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
          v100 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        if (v100)
        {
          if (v100 >> 62)
            goto LABEL_845;
          v101 = operator new(4 * v100);
          v102 = &v101[4 * v97];
          *v102 = v76;
          v103 = (uint64_t)(v102 + 1);
          v104 = v82 - v95;
          if (v82 == v95)
          {
LABEL_136:
            v65 = (_QWORD *)v600;
            goto LABEL_142;
          }
        }
        else
        {
          v101 = 0;
          v102 = (_DWORD *)(4 * v97);
          *(_DWORD *)(4 * v97) = v76;
          v103 = 4 * v97 + 4;
          v104 = v82 - v95;
          if (v82 == v95)
            goto LABEL_136;
        }
        v105 = v104 - 4;
        if (v105 < 0x2C)
        {
          v65 = (_QWORD *)v600;
          do
          {
LABEL_141:
            v124 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *--v102 = v124;
          }
          while (v82 != v95);
          goto LABEL_142;
        }
        v116 = v82 - v101 - v96;
        v65 = (_QWORD *)v600;
        if (v116 < 0x20)
          goto LABEL_141;
        v117 = (v105 >> 2) + 1;
        v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
        v119 = &v82[-v118];
        v102 = (_DWORD *)((char *)v102 - v118);
        v120 = &v101[4 * v97 - 16];
        v121 = v82 - 16;
        v122 = v117 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v123 = *(_OWORD *)v121;
          *(v120 - 1) = *((_OWORD *)v121 - 1);
          *v120 = v123;
          v120 -= 2;
          v121 -= 32;
          v122 -= 8;
        }
        while (v122);
        v82 = v119;
        if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_141;
LABEL_142:
        v65[24] = v102;
        v65[25] = v103;
        v65[26] = &v101[4 * v100];
        if (v95)
          operator delete(v95);
        v13 = v602;
        v72 = v592;
        LODWORD(v71) = v595;
        v73 = v590;
        v74 = v588;
        v65[25] = v103;
        v83 = (_QWORD *)v66[1];
        if (v83)
        {
          do
          {
LABEL_133:
            v115 = v83;
            v83 = (_QWORD *)*v83;
          }
          while (v83);
          goto LABEL_86;
        }
        do
        {
LABEL_145:
          v115 = (_QWORD *)v66[2];
          _ZF = *v115 == (_QWORD)v66;
          v66 = v115;
        }
        while (!_ZF);
LABEL_86:
        v66 = v115;
        if (v115 == v70)
          goto LABEL_148;
      }
      v65 = (_QWORD *)v600;
      do
      {
LABEL_128:
        v114 = *((_DWORD *)v80 - 1);
        v80 -= 4;
        *--v91 = v114;
      }
      while (v80 != v84);
      goto LABEL_129;
    }
LABEL_148:
    v125 = *(int **)(v13 + 6136);
    v126 = *(int **)(v13 + 6144);
    a1 = v605;
    if (v125 == v126)
    {
LABEL_149:
      *(_BYTE *)(v600 + 8) = 1;
      *(_QWORD *)(v600 + 16) = v580;
      *(_QWORD *)(v600 + 24) = v2;
      *(long double *)(v600 + 32) = v3;
      *(double *)(v600 + 40) = v4 * v4;
      *(_QWORD *)(v600 + 48) = 0x7FEFFFFFFFFFFFFFLL;
      *(_DWORD *)(v600 + 56) = v582;
      *(_BYTE *)(v600 + 60) = 0;
      *(_QWORD *)(v600 + 64) = v579;
      *(_QWORD *)(v600 + 72) = v2;
      *(long double *)(v600 + 80) = v3;
      *(_OWORD *)(v13 + 45248) = xmmword_2102DCC90;
      *(_DWORD *)(v600 + 104) = v581;
      *(_BYTE *)(v600 + 108) = 0;
      *(double *)(v600 + 112) = v9 * (v5 * v7 + (1.0 - v5) * v8);
      *(_QWORD *)(v600 + 120) = v2;
      *(double *)(v600 + 128) = v12;
      *(_OWORD *)(v13 + 45296) = xmmword_2102DCC90;
      *(_DWORD *)(v600 + 152) = v582;
      *(_BYTE *)(v600 + 156) = 0;
      *(_DWORD *)(v600 + 160) = v577 + 1;
      sub_20FB9CFFC(v13, 1u, v15, v16, v17, v18);
      sub_20FB9E8E0((_QWORD *)v13, (void **)(a1 + 5328), a1 + 5352);
      *(_DWORD *)(v600 + 4) = 1;
      *(_QWORD *)(*(_QWORD *)(v578 + 16) + 23408) = *(_QWORD *)(a1 + 5320);
      goto LABEL_150;
    }
    while (1)
    {
      if ((*(_BYTE *)(*((_QWORD *)v125 + 1) + 4) & 2) != 0)
        goto LABEL_159;
      v134 = *v125;
      v136 = *(char **)(v14 + 152);
      v135 = *(_QWORD *)(v14 + 160);
      if ((unint64_t)v136 >= v135)
        break;
      *(_DWORD *)v136 = v134;
      v133 = (uint64_t)(v136 + 4);
LABEL_158:
      *(_QWORD *)(v14 + 152) = v133;
      a1 = v605;
LABEL_159:
      v125 += 4;
      if (v125 == v126)
        goto LABEL_149;
    }
    v137 = (char *)*v597;
    v138 = v136 - (_BYTE *)*v597;
    v139 = v138 >> 2;
    v140 = (v138 >> 2) + 1;
    if (v140 >> 62)
      sub_20E867F44();
    v141 = v135 - (_QWORD)v137;
    if (v141 >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 62)
        goto LABEL_845;
      v143 = operator new(4 * v142);
      v144 = &v143[4 * v139];
      *v144 = v134;
      v133 = (uint64_t)(v144 + 1);
      v145 = v136 - v137;
      if (v136 == v137)
        goto LABEL_179;
    }
    else
    {
      v143 = 0;
      v144 = (_DWORD *)(4 * v139);
      *(_DWORD *)(4 * v139) = v134;
      v133 = 4 * v139 + 4;
      v145 = v136 - v137;
      if (v136 == v137)
      {
LABEL_179:
        *(_QWORD *)(v14 + 144) = v144;
        *(_QWORD *)(v14 + 152) = v133;
        *(_QWORD *)(v14 + 160) = &v143[4 * v142];
        if (v137)
          operator delete(v137);
        v13 = v602;
        goto LABEL_158;
      }
    }
    v146 = v145 - 4;
    if (v146 < 0x2C)
      goto LABEL_864;
    if ((unint64_t)(v136 - v143 - v138) < 0x20)
      goto LABEL_864;
    v147 = (v146 >> 2) + 1;
    v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
    v149 = &v136[-v148];
    v144 = (_DWORD *)((char *)v144 - v148);
    v150 = &v143[4 * v139 - 16];
    v151 = v136 - 16;
    v152 = v147 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v153 = *(_OWORD *)v151;
      *(v150 - 1) = *((_OWORD *)v151 - 1);
      *v150 = v153;
      v150 -= 2;
      v151 -= 32;
      v152 -= 8;
    }
    while (v152);
    v136 = v149;
    if (v147 != (v147 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_864:
      do
      {
        v154 = *((_DWORD *)v136 - 1);
        v136 -= 4;
        *--v144 = v154;
      }
      while (v136 != v137);
    }
    goto LABEL_179;
  }
LABEL_150:
  if (*(_BYTE *)(a1 + 1933))
  {
    v127 = *(_QWORD *)(a1 + 11760);
    if (!v127)
      sub_20E86D37C();
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 48))(v127);
  }
  v128 = *(_QWORD *)(a1 + 8216);
  if (*(_BYTE *)v128 && *(_QWORD *)(v128 + 8))
  {
    v129 = *(_QWORD *)(v128 + 8);
    v130 = (uint64_t *)(v129 + 42904);
    sub_20F626FF4(v129 + 42912, (__int128 *)(v129 + 528));
    v131 = *(_OWORD *)(v129 + 1272);
    *(_OWORD *)(v129 + 43672) = *(_OWORD *)(v129 + 1256);
    *(_OWORD *)(v129 + 43688) = v131;
    *(_OWORD *)(v129 + 43704) = *(_OWORD *)(v129 + 1288);
    kdebug_trace();
    kdebug_trace();
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(v129 + 42904) + 16))(__p, v129 + 42904);
    v132 = v129 + 4856;
    (**(void (***)(void **__return_ptr, uint64_t))(v129 + 4856))(v606, v129 + 4856);
    if (SBYTE7(v624) < 0)
    {
      sub_20E860C04(object, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)object = *(_OWORD *)__p;
      object[2] = (void *)v624;
    }
    v168 = HIBYTE(rep);
    if (SHIBYTE(rep) < 0)
    {
      sub_20E860C04(v634, v606[0], (unint64_t)v606[1]);
      v168 = HIBYTE(rep);
    }
    else
    {
      *(_OWORD *)v634 = *(_OWORD *)v606;
      v635 = rep;
    }
    v636 = 0;
    LODWORD(v637) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v638 = _Q0;
    v644 = v639;
    v645 = xmmword_210378040;
    __src = v646;
    v648 = 64;
    v649 = 0u;
    v651 = v650;
    v652 = 64;
    v653 = 0;
    v655 = 0;
    v654 = 0;
    v657 = v656;
    v658 = 64;
    v659 = 0;
    if (v168 < 0)
    {
      operator delete(v606[0]);
      if ((SBYTE7(v624) & 0x80000000) == 0)
        goto LABEL_198;
    }
    else if ((SBYTE7(v624) & 0x80000000) == 0)
    {
      goto LABEL_198;
    }
    operator delete(__p[0]);
LABEL_198:
    sub_20F2C3BE8(object, 0x14uLL, 0xBuLL);
    v606[0] = (void *)(v129 + 4856);
    v606[1] = object;
    v170 = (*(double (**)(uint64_t))(*(_QWORD *)v132 + 40))(v129 + 4856);
    v171 = v129 + 7864;
    v172 = *(_BYTE *)(v129 + 7880);
    if ((*(unsigned int (**)(uint64_t))(*v130 + 24))(v129 + 42904))
    {
      *(_BYTE *)(v129 + 7880) = 1;
      v173 = (*(uint64_t (**)(uint64_t))(*v130 + 40))(v129 + 42904);
      v174 = *v130;
      if (v173)
        (*(void (**)(uint64_t, double))(v174 + 48))(v129 + 42904, 0.0);
      else
        (*(void (**)(uint64_t))(v174 + 56))(v129 + 42904);
      (*(void (**)(uint64_t))(*v130 + 32))(v129 + 42904);
      (*(void (**)(uint64_t))(*(_QWORD *)v132 + 104))(v129 + 4856);
    }
    kdebug_trace();
    if (*(_BYTE *)(v129 + 42952))
    {
      v175 = *(_QWORD *)(v129 + 43496);
      if (*(_BYTE *)(v129 + 43505))
      {
        v176 = *(unsigned __int8 *)(v129 + 43504);
        if (v175)
          sub_20FBBD568(v129 + 4856, (double *)__p, *(double **)(v129 + 43480));
        else
          sub_20FBBD568(v129 + 4856, (double *)__p, (double *)(v129 + 42960));
        v195 = 1.0;
        v196 = 1.0;
        if (!v176)
        {
          v195 = *(double *)__p;
          if (*(double *)__p <= 0.0)
          {
            v196 = 1.0e20;
            v195 = 1.0e-10;
          }
          else
          {
            v196 = 1.0 / (*(double *)__p * *(double *)__p);
          }
        }
        *(double *)(v129 + 4864) = v195;
        *(double *)(v129 + 4872) = v196;
        *(double *)(v129 + 4880) = v195;
        *(double *)(v129 + 4888) = v196;
        *(double *)(v129 + 4896) = v195;
        *(double *)(v129 + 4904) = v196;
        *(double *)(v129 + 4912) = v195;
        *(double *)(v129 + 4920) = v196;
        *(double *)(v129 + 4928) = v195;
        *(double *)(v129 + 4936) = v196;
        *(double *)(v129 + 4944) = v195;
        *(double *)(v129 + 4952) = v196;
        *(double *)(v129 + 4960) = v195;
        *(double *)(v129 + 4968) = v196;
        *(double *)(v129 + 4976) = v195;
        *(double *)(v129 + 4984) = v196;
        *(double *)(v129 + 4992) = v195;
        *(double *)(v129 + 5000) = v196;
        *(double *)(v129 + 5008) = v195;
        *(double *)(v129 + 5016) = v196;
        *(double *)(v129 + 5024) = v195;
        *(double *)(v129 + 5032) = v196;
        *(double *)(v129 + 5040) = v195;
        *(double *)(v129 + 5048) = v196;
        *(double *)(v129 + 5056) = v195;
        *(double *)(v129 + 5064) = v196;
        *(double *)(v129 + 5072) = v195;
        *(double *)(v129 + 5080) = v196;
        *(double *)(v129 + 5088) = v195;
        *(double *)(v129 + 5096) = v196;
        *(double *)(v129 + 5104) = v195;
        *(double *)(v129 + 5112) = v196;
        *(double *)(v129 + 5120) = v195;
        *(double *)(v129 + 5128) = v196;
        *(double *)(v129 + 5136) = v195;
        *(double *)(v129 + 5144) = v196;
        *(double *)(v129 + 5152) = v195;
        *(double *)(v129 + 5160) = v196;
        *(double *)(v129 + 5168) = v195;
        *(double *)(v129 + 5176) = v196;
        *(_BYTE *)(v129 + 7869) = 0;
        *(_DWORD *)(v129 + 7864) = 0;
      }
      else if (v175)
      {
        __p[0] = *(void **)(v129 + 43480);
        LODWORD(__p[1]) = 0;
        sub_20FBB5F4C(v129 + 4856, (uint64_t)__p, *(_BYTE *)(v129 + 43504));
      }
      else
      {
        sub_20FBB490C(v129 + 4856, (double *)(v129 + 42960), *(_BYTE *)(v129 + 43504));
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 8))(v129 + 4856))
    {
      if (*(_BYTE *)(v129 + 42920))
      {
        v307 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
        std::ios_base::getloc((const std::ios_base *)((char *)v307 + *(_QWORD *)(*v307 - 24)));
        v308 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v308->__vftable[2].~facet_0)(v308, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
      }
      LODWORD(v637) = 0;
      *(_BYTE *)(v129 + 7880) = v172;
      sub_20FBB761C(v606);
      goto LABEL_600;
    }
    sub_20FBB761C(v606);
    v638.i64[0] = sub_20FBBA2F4(v129 + 4856, v639);
    v638.i64[1] = v638.i64[0];
    *(_QWORD *)(v129 + 43640) = v638.i64[0];
    v309 = v644;
    v310 = *((_QWORD *)&v645 + 1);
    v311 = *((_QWORD *)&v645 + 1);
    *(_QWORD *)&v649 = 0;
    v312 = *((_QWORD *)&v645 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v645 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v648)
    {
      if (!*((_QWORD *)&v645 + 1))
        goto LABEL_403;
      v313 = __src;
    }
    else
    {
      if (2 * v648 > v312)
        v312 = 2 * v648;
      v648 = v312;
      v313 = (_OWORD *)operator new[]();
      if (__src != v646 && __src)
        MEMORY[0x212BC6368]();
      __src = v313;
      v314 = v649;
      if ((_QWORD)v649)
      {
        *(_QWORD *)&v649 = v649 + v310;
        memmove((char *)v313 + 8 * v310, v313, 8 * v314);
        memcpy(v313, v309, v311 * 8);
LABEL_403:
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*v130 + 24))(v129 + 42904))
        {
          if ((*(unsigned int (**)(uint64_t))(*v130 + 40))(v129 + 42904))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v132 + 96))(v129 + 4856);
            (*(void (**)(uint64_t))(*v130 + 48))(v129 + 42904);
          }
          else
          {
            (*(void (**)(uint64_t))(*v130 + 56))(v129 + 42904);
          }
          (*(void (**)(uint64_t))(*v130 + 32))(v129 + 42904);
          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 104))(v129 + 4856);
        }
        v324 = (double **)(v129 + 7904);
        v325 = *(unsigned int *)(v129 + 7920);
        if ((_DWORD)v325)
        {
          v326 = fabs(**v324);
          if ((_DWORD)v325 != 1)
          {
            v327 = *v324 + 1;
            v328 = 8 * v325 - 8;
            do
            {
              v329 = *v327++;
              v330 = fabs(v329);
              if (v326 < v330)
                v326 = v330;
              v328 -= 8;
            }
            while (v328);
          }
          if (v326 < v326 * *(double *)(v129 + 42928))
            goto LABEL_415;
        }
        else
        {
          v326 = 1.0;
          if (1.0 * *(double *)(v129 + 42928) > 1.0)
          {
LABEL_415:
            if (*(_BYTE *)(v129 + 42920))
            {
              v331 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
              v332 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v332->__vftable[2].~facet_0)(v332, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
              v333 = (_QWORD *)std::ostream::operator<<();
              sub_20E86A980(v333, (uint64_t)"][", 2);
              if (v326 == 0.0)
                sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
              else
                std::ostream::operator<<();
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
              v432 = (_QWORD *)std::ostream::operator<<();
              v433 = sub_20E86A980(v432, (uint64_t)"]", 1);
              std::ios_base::getloc((const std::ios_base *)((char *)v433 + *(_QWORD *)(*v433 - 24)));
              v434 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v434->__vftable[2].~facet_0)(v434, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(v637) = 1;
LABEL_599:
            *(_BYTE *)(v171 + 16) = v172;
            a1 = v605;
            goto LABEL_600;
          }
        }
        v334 = *(double *)(v129 + 43640);
        kdebug_trace();
        v591 = v172;
        k = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 24))(v129 + 4856);
        v336 = *(_QWORD *)(v129 + 43568);
        if (v336)
          (*(void (**)(uint64_t))(*(_QWORD *)v336 + 48))(v336);
        v337 = v636;
        j = (_DWORD *)(v129 + 42912);
        if (v636 >= *(_DWORD *)(v129 + 42916))
        {
LABEL_597:
          v638.i64[1] = *(_QWORD *)(v129 + 43640);
          v452 = *(_QWORD *)(v129 + 43536);
          v172 = v591;
          if (v452)
            (*(void (**)(uint64_t))(*(_QWORD *)v452 + 48))(v452);
          goto LABEL_599;
        }
        v598 = v129 + 43648;
        v339 = v326;
        v594 = k;
        while (1)
        {
          v340 = v337 + 1;
          LODWORD(v636) = v337 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v129 + 4856, k))
          {
            if (*(_BYTE *)(v129 + 42920))
            {
              v438 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
              std::ios_base::getloc((const std::ios_base *)((char *)v438 + *(_QWORD *)(*v438 - 24)));
              v439 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v439->__vftable[2].~facet_0)(v439, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
            }
            LODWORD(v637) = 0;
            goto LABEL_597;
          }
          ++HIDWORD(v636);
          v341 = *(unsigned int *)(k + 16);
          if ((_DWORD)v341)
          {
            v342 = *(double **)k;
            v343 = **(double **)k * **(double **)k;
            if ((_DWORD)v341 != 1)
            {
              v344 = v342 + 1;
              v345 = (v341 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
              if (v345 < 3)
                goto LABEL_431;
              v346 = v345 + 1;
              v344 += v346 & 0x3FFFFFFFFFFFFFFCLL;
              v347 = (float64x2_t *)(v342 + 3);
              v348 = v346 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v349 = vmulq_f64(v347[-1], v347[-1]);
                v350 = vmulq_f64(*v347, *v347);
                v343 = v343 + v349.f64[0] + v349.f64[1] + v350.f64[0] + v350.f64[1];
                v347 += 2;
                v348 -= 4;
              }
              while (v348);
              if (v346 != (v346 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_431:
                v351 = &v342[v341];
                do
                {
                  v352 = *v344++;
                  v343 = v343 + v352 * v352;
                }
                while (v344 != v351);
              }
            }
            v353 = sqrt(v343);
            if (v337 < *j)
              goto LABEL_441;
          }
          else
          {
            v353 = sqrt(0.0);
            if (v337 < *j)
              goto LABEL_441;
          }
          v354 = *(_QWORD *)(v129 + 43632);
          if (v354)
          {
            LODWORD(__p[0]) = *(_DWORD *)(k + 16);
            __p[1] = *(void **)k;
            LODWORD(v624) = 0;
            __dst[0] = *(std::locale *)&v353;
            if (((*(uint64_t (**)(uint64_t, std::locale *, void **))(*(_QWORD *)v354 + 48))(v354, __dst, __p) & 1) != 0)goto LABEL_590;
          }
          else if ((_DWORD)v341 && v353 < *(double *)(v129 + 42936) * (v170 + *(double *)(v129 + 42936)))
          {
LABEL_590:
            if (*(_BYTE *)(v129 + 42920))
            {
              v449 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
              std::ios_base::getloc((const std::ios_base *)((char *)v449 + *(_QWORD *)(*v449 - 24)));
              v450 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v450->__vftable[2].~facet_0)(v450, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v130 + 64))(v129 + 42904, v337, v334, v353, v339, v326, v170);
            }
            v448 = 2;
            goto LABEL_596;
          }
LABEL_441:
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 48))(v129 + 4856, k);
          v355 = *(_QWORD *)(v129 + 43600);
          if (v355)
            (*(void (**)(uint64_t))(*(_QWORD *)v355 + 48))(v355);
          if ((_QWORD)v649)
            memcpy(__p, __src, 8 * v649);
          v334 = sub_20FBBA2F4(v129 + 4856, v646);
          v356 = *(unsigned int *)(v129 + 7920);
          if (!(_DWORD)v356)
          {
            v339 = 1.0;
            if (!*(_BYTE *)(v129 + 42920))
              goto LABEL_455;
LABEL_454:
            (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v130 + 64))(v129 + 42904, v337, v334, v353, v339, v326, v170);
            goto LABEL_455;
          }
          v339 = fabs(**v324);
          if ((_DWORD)v356 != 1)
          {
            v357 = *v324 + 1;
            v358 = 8 * v356 - 8;
            do
            {
              v359 = *v357++;
              v360 = fabs(v359);
              if (v339 < v360)
                v339 = v360;
              v358 -= 8;
            }
            while (v358);
          }
          if (*(_BYTE *)(v129 + 42920))
            goto LABEL_454;
LABEL_455:
          if (v334 == 0.0)
          {
            if (*(_BYTE *)(v129 + 42920))
            {
              v440 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v441 = sub_20E86A980(v440, (uint64_t)"N.A.", 4);
              std::ios_base::getloc((const std::ios_base *)((char *)v441 + *(_QWORD *)(*v441 - 24)));
              v442 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v442->__vftable[2].~facet_0)(v442, 10);
              std::locale::~locale(__dst);
              std::ostream::put();
              goto LABEL_588;
            }
LABEL_589:
            *(double *)(v129 + 43640) = v334;
            v448 = 3;
LABEL_596:
            LODWORD(v637) = v448;
            goto LABEL_597;
          }
          if (vabdd_f64(v334, *(double *)(v129 + 43640)) < v334 * *(double *)(v129 + 42944) && v337 >= *j)
          {
            if (*(_BYTE *)(v129 + 42920))
            {
              sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
              v446 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v446 + *(_QWORD *)(*v446 - 24)));
              v447 = std::locale::use_facet(__dst, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v447->__vftable[2].~facet_0)(v447, 10);
              std::locale::~locale(__dst);
              std::ostream::put();
LABEL_588:
              std::ostream::flush();
            }
            goto LABEL_589;
          }
          if (*(_DWORD *)(v129 + 7896))
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 160))(v129 + 4856, v598);
            v361 = (*(uint64_t (**)(uint64_t, uint64_t, double **, uint64_t, double))(*v130 + 80))(v129 + 42904, k, v324, v598, v334);
          }
          else
          {
            v361 = (*(uint64_t (**)(uint64_t, uint64_t, double **, double))(*v130 + 72))(v129 + 42904, k, v324, v334);
          }
          if (!v361)
          {
            --HIDWORD(v636);
            v367 = *(_QWORD *)(v129 + 5192);
            v368 = *(_QWORD *)(v129 + 5200);
            while (v367 != v368)
            {
              v369 = *(_QWORD *)(v367 + 8);
              if (*(_BYTE *)(v369 + 20))
              {
                v370 = *(_OWORD *)(v369 + 200);
                v371 = *(_OWORD *)(v369 + 232);
                *(_OWORD *)(v369 + 64) = *(_OWORD *)(v369 + 216);
                *(_OWORD *)(v369 + 80) = v371;
                *(_QWORD *)(v369 + 96) = *(_QWORD *)(v369 + 248);
                *(_OWORD *)(v369 + 32) = *(_OWORD *)(v369 + 184);
                *(_OWORD *)(v369 + 48) = v370;
                *(_OWORD *)(v369 + 104) = *(_OWORD *)(v369 + 256);
                *(_QWORD *)(v369 + 120) = *(_QWORD *)(v369 + 272);
                *(_BYTE *)(v369 + 128) = 0;
              }
              v367 += 16;
            }
            v372 = *(_QWORD *)(v129 + 5288);
            v373 = *(_QWORD *)(v129 + 5296);
            while (v372 != v373)
            {
              v374 = *(_QWORD *)(v372 + 8);
              if (*(_BYTE *)(v374 + 20))
              {
                v375 = *(_OWORD *)(v374 + 160);
                *(_OWORD *)(v374 + 64) = *(_OWORD *)(v374 + 144);
                *(_OWORD *)(v374 + 80) = v375;
                *(_QWORD *)(v374 + 96) = *(_QWORD *)(v374 + 176);
                v376 = *(_OWORD *)(v374 + 128);
                *(_OWORD *)(v374 + 32) = *(_OWORD *)(v374 + 112);
                *(_OWORD *)(v374 + 48) = v376;
                *(_BYTE *)(v374 + 104) = 0;
              }
              v372 += 16;
            }
            v377 = *(_QWORD *)(v129 + 5384);
            v378 = *(_QWORD *)(v129 + 5392);
            while (v377 != v378)
            {
              v379 = *(_QWORD *)(v377 + 8);
              if (*(_BYTE *)(v379 + 20))
              {
                v380 = *(_OWORD *)(v379 + 152);
                v381 = *(_OWORD *)(v379 + 184);
                *(_OWORD *)(v379 + 64) = *(_OWORD *)(v379 + 168);
                *(_OWORD *)(v379 + 80) = v381;
                *(_QWORD *)(v379 + 96) = *(_QWORD *)(v379 + 200);
                *(_OWORD *)(v379 + 32) = *(_OWORD *)(v379 + 136);
                *(_OWORD *)(v379 + 48) = v380;
                *(_OWORD *)(v379 + 104) = *(_OWORD *)(v379 + 208);
                *(_QWORD *)(v379 + 120) = *(_QWORD *)(v379 + 224);
              }
              v377 += 16;
            }
            v382 = *(_QWORD *)(v129 + 5480);
            v383 = *(_QWORD *)(v129 + 5488);
            while (v382 != v383)
            {
              v384 = *(_QWORD *)(v382 + 8);
              if (*(_BYTE *)(v384 + 20))
              {
                v385 = *(_OWORD *)(v384 + 152);
                v386 = *(_OWORD *)(v384 + 184);
                *(_OWORD *)(v384 + 64) = *(_OWORD *)(v384 + 168);
                *(_OWORD *)(v384 + 80) = v386;
                *(_QWORD *)(v384 + 96) = *(_QWORD *)(v384 + 200);
                *(_OWORD *)(v384 + 32) = *(_OWORD *)(v384 + 136);
                *(_OWORD *)(v384 + 48) = v385;
                *(_OWORD *)(v384 + 104) = *(_OWORD *)(v384 + 208);
                *(_QWORD *)(v384 + 120) = *(_QWORD *)(v384 + 224);
              }
              v382 += 16;
            }
            v387 = *(_QWORD *)(v129 + 5576);
            v388 = *(_QWORD *)(v129 + 5584);
            while (v387 != v388)
            {
              v389 = *(_QWORD *)(v387 + 8);
              if (*(_BYTE *)(v389 + 20))
              {
                *(_OWORD *)(v389 + 32) = *(_OWORD *)(v389 + 56);
                *(_QWORD *)(v389 + 48) = *(_QWORD *)(v389 + 72);
              }
              v387 += 16;
            }
            v390 = *(_QWORD *)(v129 + 5672);
            v391 = *(_QWORD *)(v129 + 5680);
            while (v390 != v391)
            {
              v392 = *(_QWORD *)(v390 + 8);
              if (*(_BYTE *)(v392 + 20))
              {
                *(_QWORD *)(v392 + 32) = *(_QWORD *)(v392 + 48);
                *(_BYTE *)(v392 + 40) = 0;
              }
              v390 += 16;
            }
            v393 = *(_QWORD *)(v129 + 5768);
            v394 = *(_QWORD *)(v129 + 5776);
            while (v393 != v394)
            {
              v395 = *(_QWORD *)(v393 + 8);
              if (*(_BYTE *)(v395 + 20))
              {
                *(_OWORD *)(v395 + 32) = *(_OWORD *)(v395 + 64);
                *(_QWORD *)(v395 + 48) = *(_QWORD *)(v395 + 80);
              }
              v393 += 16;
            }
            v396 = v324;
            v397 = *(_QWORD *)(v129 + 5864);
            v398 = *(_QWORD *)(v129 + 5872);
            while (v397 != v398)
            {
              v399 = *(_QWORD *)(v397 + 8);
              if (*(_BYTE *)(v399 + 20))
              {
                v400 = v399 + 16;
                v401 = *(_OWORD *)(v399 + 168);
                *(_OWORD *)(v399 + 32) = *(_OWORD *)(v399 + 152);
                *(_OWORD *)(v399 + 48) = v401;
                *(_QWORD *)(v399 + 64) = *(_QWORD *)(v399 + 184);
                *(_BYTE *)(v399 + 72) = *(_BYTE *)(v399 + 192);
                sub_20F6169C8(v399 + 16);
                sub_20F616F2C(v400);
              }
              v397 += 16;
            }
            v402 = *(_QWORD *)(v129 + 5960);
            v403 = *(_QWORD *)(v129 + 5968);
            while (v402 != v403)
            {
              v404 = *(_QWORD *)(v402 + 8);
              if (*(_BYTE *)(v404 + 20))
              {
                v405 = *(_OWORD *)(v404 + 504);
                *(_OWORD *)(v404 + 192) = *(_OWORD *)(v404 + 488);
                *(_OWORD *)(v404 + 208) = v405;
                v406 = *(_OWORD *)(v404 + 536);
                *(_OWORD *)(v404 + 224) = *(_OWORD *)(v404 + 520);
                *(_OWORD *)(v404 + 240) = v406;
                v407 = *(_OWORD *)(v404 + 440);
                *(_OWORD *)(v404 + 128) = *(_OWORD *)(v404 + 424);
                *(_OWORD *)(v404 + 144) = v407;
                v408 = *(_OWORD *)(v404 + 472);
                *(_OWORD *)(v404 + 160) = *(_OWORD *)(v404 + 456);
                *(_OWORD *)(v404 + 176) = v408;
                v409 = *(_OWORD *)(v404 + 376);
                *(_OWORD *)(v404 + 64) = *(_OWORD *)(v404 + 360);
                *(_OWORD *)(v404 + 80) = v409;
                v410 = *(_OWORD *)(v404 + 408);
                *(_OWORD *)(v404 + 96) = *(_OWORD *)(v404 + 392);
                *(_OWORD *)(v404 + 112) = v410;
                v411 = *(__n128 *)(v404 + 328);
                v412 = *(_OWORD *)(v404 + 344);
                *(__n128 *)(v404 + 32) = v411;
                *(_OWORD *)(v404 + 48) = v412;
                for (i = *(uint64_t ***)(v404 + 296); i; i = (uint64_t **)*i)
                  v411.n128_f64[0] = sub_20F6182A0((char *)i[5], (float64x2_t *)(v404 + 32), v411);
                sub_20F6178A8(v404 + 16);
              }
              v402 += 16;
            }
            v414 = *(_QWORD *)(v129 + 6056);
            v415 = *(_QWORD *)(v129 + 6064);
            v171 = v129 + 7864;
            for (j = (_DWORD *)(v129 + 42912); v414 != v415; v414 += 16)
            {
              v427 = *(_QWORD *)(v414 + 8);
              if (*(_BYTE *)(v427 + 20))
              {
                v428 = *(_OWORD *)(v427 + 224);
                *(_OWORD *)(v427 + 64) = *(_OWORD *)(v427 + 208);
                *(_OWORD *)(v427 + 80) = v428;
                *(_QWORD *)(v427 + 96) = *(_QWORD *)(v427 + 240);
                v429 = *(_OWORD *)(v427 + 192);
                *(_OWORD *)(v427 + 32) = *(_OWORD *)(v427 + 176);
                *(_OWORD *)(v427 + 48) = v429;
                sub_20F811C04(v427 + 16);
              }
            }
            v416 = *(_QWORD *)(v129 + 6152);
            v417 = *(_QWORD *)(v129 + 6160);
            v324 = v396;
            for (k = v594; v416 != v417; v416 += 16)
            {
              v426 = *(_QWORD *)(v416 + 8);
              if (*(_BYTE *)(v426 + 20))
                *(_QWORD *)(v426 + 32) = *(_QWORD *)(v426 + 40);
            }
            *(_BYTE *)(v129 + 7869) = 0;
            *(_BYTE *)(v129 + 7864) = 0;
            *(_WORD *)(v129 + 7867) = 0;
            *(_BYTE *)(v129 + 7865) = *(_BYTE *)(v129 + 7866);
            *(_QWORD *)&v649 = 0;
            if (v648 >= 0x14)
            {
              v419 = __src;
            }
            else
            {
              v418 = 2 * v648;
              if (2 * v648 <= 0x14)
                v418 = 20;
              v648 = v418;
              v419 = (_OWORD *)operator new[]();
              if (__src != v646 && __src)
                MEMORY[0x212BC6368]();
              __src = v419;
              v420 = v649;
              if ((_QWORD)v649)
              {
                *(_QWORD *)&v649 = v649 + 20;
                memmove(v419 + 10, v419, 8 * v420);
                v421 = v630;
                v419[6] = v629;
                v419[7] = v421;
                v422 = v632;
                v419[8] = v631;
                v419[9] = v422;
                v423 = v626;
                v419[2] = v625;
                v419[3] = v423;
                v424 = v628;
                v419[4] = v627;
                v419[5] = v424;
                v425 = v624;
                *v419 = *(_OWORD *)__p;
                v419[1] = v425;
                goto LABEL_541;
              }
            }
            v419[6] = v629;
            v419[7] = v630;
            v419[8] = v631;
            v419[9] = v632;
            v419[2] = v625;
            v419[3] = v626;
            v419[4] = v627;
            v419[5] = v628;
            *v419 = *(_OWORD *)__p;
            v419[1] = v624;
            *(_QWORD *)&v649 = 20;
LABEL_541:
            if ((*(unsigned int (**)(uint64_t))(*v130 + 24))(v129 + 42904))
            {
              (*(void (**)(uint64_t))(*v130 + 32))(v129 + 42904);
              (*(void (**)(uint64_t))(*(_QWORD *)v132 + 104))(v129 + 4856);
            }
            goto LABEL_543;
          }
          if ((*(unsigned int (**)(uint64_t))(*v130 + 24))(v129 + 42904))
          {
            (*(void (**)(uint64_t))(*v130 + 32))(v129 + 42904);
            (*(void (**)(uint64_t))(*(_QWORD *)v132 + 104))(v129 + 4856);
          }
          if (v339 < v326 * *(double *)(v129 + 42928) && v337 >= *j)
          {
            if (*(_BYTE *)(v129 + 42920))
            {
              v451 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
              sub_20E8C81A0(v451);
              (*(void (**)(uint64_t, uint64_t, double, double, double, double, double))(*v130 + 64))(v129 + 42904, v337, v334, v353, v339, v326, v170);
            }
            v448 = 1;
            goto LABEL_596;
          }
          if (v340 < *(_DWORD *)(v129 + 42916) && *(_BYTE *)(v129 + 42952))
          {
            v362 = *(_QWORD *)(v129 + 43496);
            if (*(_BYTE *)(v129 + 43505))
            {
              v363 = (double *)(v129 + 42960);
              if (v362)
                v363 = *(double **)(v129 + 43480);
              v364 = *(unsigned __int8 *)(v129 + 43504);
              sub_20FBBD568(v129 + 4856, (double *)__dst, v363);
              v365 = 1.0;
              v366 = 1.0;
              if (!v364)
              {
                v365 = 1.0e-10;
                v366 = 1.0e20;
                if (*(double *)&__dst[0].__locale_ > 0.0)
                {
                  v365 = *(double *)&__dst[0].__locale_;
                  v366 = 1.0 / (*(double *)&__dst[0].__locale_ * *(double *)&__dst[0].__locale_);
                }
              }
              *(double *)(v129 + 4864) = v365;
              *(double *)(v129 + 4872) = v366;
              *(double *)(v129 + 4880) = v365;
              *(double *)(v129 + 4888) = v366;
              *(double *)(v129 + 4896) = v365;
              *(double *)(v129 + 4904) = v366;
              *(double *)(v129 + 4912) = v365;
              *(double *)(v129 + 4920) = v366;
              *(double *)(v129 + 4928) = v365;
              *(double *)(v129 + 4936) = v366;
              *(double *)(v129 + 4944) = v365;
              *(double *)(v129 + 4952) = v366;
              *(double *)(v129 + 4960) = v365;
              *(double *)(v129 + 4968) = v366;
              *(double *)(v129 + 4976) = v365;
              *(double *)(v129 + 4984) = v366;
              *(double *)(v129 + 4992) = v365;
              *(double *)(v129 + 5000) = v366;
              *(double *)(v129 + 5008) = v365;
              *(double *)(v129 + 5016) = v366;
              *(double *)(v129 + 5024) = v365;
              *(double *)(v129 + 5032) = v366;
              *(double *)(v129 + 5040) = v365;
              *(double *)(v129 + 5048) = v366;
              *(double *)(v129 + 5056) = v365;
              *(double *)(v129 + 5064) = v366;
              *(double *)(v129 + 5072) = v365;
              *(double *)(v129 + 5080) = v366;
              *(double *)(v129 + 5088) = v365;
              *(double *)(v129 + 5096) = v366;
              *(double *)(v129 + 5104) = v365;
              *(double *)(v129 + 5112) = v366;
              *(double *)(v129 + 5120) = v365;
              *(double *)(v129 + 5128) = v366;
              *(double *)(v129 + 5136) = v365;
              *(double *)(v129 + 5144) = v366;
              *(double *)(v129 + 5152) = v365;
              *(double *)(v129 + 5160) = v366;
              *(double *)(v129 + 5168) = v365;
              *(double *)(v129 + 5176) = v366;
              *(_BYTE *)(v171 + 5) = 0;
              *(_DWORD *)(v129 + 7864) = 0;
            }
            else if (v362)
            {
              __dst[0] = *(std::locale *)(v129 + 43480);
              LODWORD(__dst[1].__locale_) = 0;
              sub_20FBB5F4C(v129 + 4856, (uint64_t)__dst, *(_BYTE *)(v129 + 43504));
            }
            else
            {
              sub_20FBB490C(v129 + 4856, (double *)(v129 + 42960), *(_BYTE *)(v129 + 43504));
            }
            *(double *)(v129 + 43640) = sub_20FBBA2F4(v129 + 4856, v646);
            v430 = *(_DWORD *)(v129 + 42916);
            if (v340 >= v430)
              goto LABEL_423;
LABEL_544:
            v431 = *(_QWORD *)(v129 + 43536);
            if (v431)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v431 + 48))(v431);
              v430 = *(_DWORD *)(v129 + 42916);
            }
            goto LABEL_423;
          }
LABEL_543:
          v430 = *(_DWORD *)(v129 + 42916);
          if (v340 < v430)
            goto LABEL_544;
LABEL_423:
          v337 = v636;
          if (v636 >= v430)
            goto LABEL_597;
        }
      }
    }
    v315 = 0;
    v316 = (v310 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v316 < 3)
    {
      v317 = v309;
    }
    else
    {
      v317 = v309;
      if ((unint64_t)((char *)v313 - (char *)v309) >= 0x20)
      {
        v318 = v316 + 1;
        v315 = v318 & 0x3FFFFFFFFFFFFFFCLL;
        v317 = &v309[v318 & 0x3FFFFFFFFFFFFFFCLL];
        v319 = v313 + 1;
        v320 = (__int128 *)(v309 + 2);
        v321 = v318 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v322 = *v320;
          *(v319 - 1) = *(v320 - 1);
          *v319 = v322;
          v319 += 2;
          v320 += 2;
          v321 -= 4;
        }
        while (v321);
        if (v318 == v315)
          goto LABEL_402;
      }
    }
    do
    {
      v323 = (uint64_t)*v317++;
      *((_QWORD *)v313 + v315++) = v323;
    }
    while (v317 != &v309[v311]);
LABEL_402:
    *(_QWORD *)&v649 = v315;
    goto LABEL_403;
  }
  v155 = *(_QWORD *)(v128 + 16);
  v156 = (unsigned int *)(v155 + 63024);
  sub_20F626FF4(v155 + 63024, (__int128 *)(v155 + 528));
  v157 = *(_OWORD *)(v155 + 1272);
  *(_OWORD *)(v155 + 63760) = *(_OWORD *)(v155 + 1256);
  *(_OWORD *)(v155 + 63776) = v157;
  *(_OWORD *)(v155 + 63792) = *(_OWORD *)(v155 + 1288);
  v158 = v155 + 4856;
  kdebug_trace();
  (**(void (***)(void **__return_ptr, uint64_t))(v155 + 4856))(__p, v155 + 4856);
  strcpy((char *)object, "LevenbergMarquardtLPFG");
  HIBYTE(object[2]) = 22;
  v159 = BYTE7(v624);
  if (SBYTE7(v624) < 0)
  {
    sub_20E860C04(v634, __p[0], (unint64_t)__p[1]);
    v159 = BYTE7(v624);
  }
  else
  {
    *(_OWORD *)v634 = *(_OWORD *)__p;
    v635 = (char *)v624;
  }
  v636 = 0;
  LODWORD(v637) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v638 = _Q0;
  v644 = v639;
  v645 = xmmword_210378040;
  __src = v646;
  v648 = 64;
  v649 = 0u;
  v651 = v650;
  v652 = 64;
  v653 = 0;
  v655 = 0;
  v654 = 0;
  v657 = v656;
  v658 = 64;
  v659 = 0;
  if (v159 < 0)
    operator delete(__p[0]);
  sub_20F2C3BE8(object, 0x13uLL, 0xAuLL);
  kdebug_trace();
  if (*(_DWORD *)(v155 + 63028) == 1)
    v164 = 1.79769313e308;
  else
    v164 = (*(double (**)(uint64_t))(*(_QWORD *)v158 + 40))(v155 + 4856);
  v165 = (double *)(v155 + 63760);
  v606[0] = object;
  v606[1] = (void *)(v155 + 4856);
  v166 = *(_BYTE *)(v155 + 7840);
  *(_BYTE *)(v155 + 7840) = 1;
  v589 = (_BYTE *)(v155 + 7840);
  v587 = v166;
  if (*(_BYTE *)(v155 + 63776))
    v167 = *v165 * 0.0;
  else
    v167 = *(double *)(v155 + 63768);
  *(double *)(v155 + 63808) = v167;
  *(_QWORD *)(v155 + 63816) = 0x4000000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)(v155 + 4856) + 104))(v155 + 4856);
  kdebug_trace();
  v585 = *(unsigned __int8 *)(v155 + 63776);
  if (*(_BYTE *)(v155 + 63776))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v158 + 8))(v155 + 4856))
    {
      if (*(_BYTE *)(v155 + 63032))
        puts("Linearize FAILED");
      LODWORD(v637) = 0;
      *v589 = v587;
LABEL_569:
      sub_20FBC407C((int64x2_t **)v606);
      goto LABEL_600;
    }
    sub_20FBC407C((int64x2_t **)v606);
  }
  v638 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(v155 + 63752) = 0x7FF8000000000000;
  v177 = *((_QWORD *)&v645 + 1);
  v178 = (char *)v644;
  if (*((_QWORD *)&v645 + 1) > 0x12uLL)
  {
    v181 = v644;
    *((_QWORD *)&v645 + 1) = 19;
    *(_QWORD *)&v649 = 0;
    v193 = v648;
    if (v648 <= 0x12)
      goto LABEL_252;
    goto LABEL_239;
  }
  if ((unint64_t)v645 > 0x12)
  {
    v181 = v644;
    goto LABEL_243;
  }
  v179 = 2 * v645;
  if ((unint64_t)(2 * v645) <= 0x13)
    v179 = 19;
  *(_QWORD *)&v645 = v179;
  v180 = (char *)operator new[]();
  v181 = (void **)v180;
  if (v177)
  {
    v182 = 0;
    if (v177 < 4 || (unint64_t)(v180 - v178) < 0x20)
      goto LABEL_229;
    v182 = v177 & 0xFFFFFFFFFFFFFFFCLL;
    v183 = *((_OWORD *)v178 + 1);
    *(_OWORD *)v180 = *(_OWORD *)v178;
    *((_OWORD *)v180 + 1) = v183;
    if ((v177 & 0xFFFFFFFFFFFFFFFCLL) != 4)
    {
      v184 = *((_OWORD *)v178 + 3);
      *((_OWORD *)v180 + 2) = *((_OWORD *)v178 + 2);
      *((_OWORD *)v180 + 3) = v184;
      if (v182 != 8)
      {
        v185 = *((_OWORD *)v178 + 5);
        *((_OWORD *)v180 + 4) = *((_OWORD *)v178 + 4);
        *((_OWORD *)v180 + 5) = v185;
        if (v182 != 12)
        {
          v186 = *((_OWORD *)v178 + 7);
          *((_OWORD *)v180 + 6) = *((_OWORD *)v178 + 6);
          *((_OWORD *)v180 + 7) = v186;
        }
      }
    }
    if (v177 != v182)
    {
LABEL_229:
      v187 = v177 - v182;
      v188 = 8 * v182;
      v189 = &v178[8 * v182];
      v190 = &v180[v188];
      do
      {
        v191 = *(_QWORD *)v189;
        v189 += 8;
        *(_QWORD *)v190 = v191;
        v190 += 8;
        --v187;
      }
      while (v187);
    }
  }
  if (v644 == v639 || v644 == 0)
  {
    v644 = (void **)v180;
    v177 = *((_QWORD *)&v645 + 1);
    if (*((_QWORD *)&v645 + 1) > 0x12uLL)
      goto LABEL_251;
    goto LABEL_243;
  }
  MEMORY[0x212BC6368]();
  v644 = v181;
  v177 = *((_QWORD *)&v645 + 1);
  if (*((_QWORD *)&v645 + 1) <= 0x12uLL)
  {
LABEL_243:
    memset_pattern16(&v181[v177], &unk_210315390, 152 - 8 * v177);
    *((_QWORD *)&v645 + 1) = 19;
    *(_QWORD *)&v649 = 0;
    v193 = v648;
    if (v648 <= 0x12)
      goto LABEL_252;
LABEL_239:
    v194 = __src;
    goto LABEL_259;
  }
LABEL_251:
  *((_QWORD *)&v645 + 1) = 19;
  *(_QWORD *)&v649 = 0;
  v193 = v648;
  if (v648 > 0x12)
    goto LABEL_239;
LABEL_252:
  v197 = 2 * v193;
  if (v197 <= 0x13)
    v197 = 19;
  v648 = v197;
  v194 = (_OWORD *)operator new[]();
  if (__src != v646 && __src)
    MEMORY[0x212BC6368]();
  __src = v194;
  v198 = v649;
  if ((_QWORD)v649)
  {
    *(_QWORD *)&v649 = v649 + 19;
    memmove((char *)v194 + 152, v194, 8 * v198);
    v199 = *((_OWORD *)v181 + 1);
    *v194 = *(_OWORD *)v181;
    v194[1] = v199;
    v200 = *((_OWORD *)v181 + 5);
    v202 = *((_OWORD *)v181 + 2);
    v201 = *((_OWORD *)v181 + 3);
    v194[4] = *((_OWORD *)v181 + 4);
    v194[5] = v200;
    v194[2] = v202;
    v194[3] = v201;
    v204 = *((_OWORD *)v181 + 7);
    v203 = *((_OWORD *)v181 + 8);
    v205 = *((_OWORD *)v181 + 6);
    *((_QWORD *)v194 + 18) = v181[18];
    v194[7] = v204;
    v194[8] = v203;
    v194[6] = v205;
    goto LABEL_260;
  }
LABEL_259:
  *(_QWORD *)v194 = *v181;
  *((_QWORD *)v194 + 1) = v181[1];
  *((_QWORD *)v194 + 2) = v181[2];
  *((_QWORD *)v194 + 3) = v181[3];
  *((_QWORD *)v194 + 4) = v181[4];
  *((_QWORD *)v194 + 5) = v181[5];
  *((_QWORD *)v194 + 6) = v181[6];
  *((_QWORD *)v194 + 7) = v181[7];
  *((_QWORD *)v194 + 8) = v181[8];
  *((_QWORD *)v194 + 9) = v181[9];
  *((_QWORD *)v194 + 10) = v181[10];
  *((_QWORD *)v194 + 11) = v181[11];
  *((_QWORD *)v194 + 12) = v181[12];
  *((_QWORD *)v194 + 13) = v181[13];
  *((_QWORD *)v194 + 14) = v181[14];
  *((_QWORD *)v194 + 15) = v181[15];
  *((_QWORD *)v194 + 16) = v181[16];
  *((_QWORD *)v194 + 17) = v181[17];
  *((_QWORD *)v194 + 18) = v181[18];
  *(_QWORD *)&v649 = 19;
LABEL_260:
  kdebug_trace();
  if (*(_BYTE *)(v155 + 63776))
    v206 = (*(double (**)(uint64_t))(*(_QWORD *)v158 + 96))(v155 + 4856) * *v165;
  else
    v206 = *(double *)(v155 + 63768);
  *(double *)(v155 + 63808) = v206;
  *(_QWORD *)(v155 + 63816) = 0x4000000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v158 + 104))(v155 + 4856);
  v603 = (double *)(v155 + 63752);
  __dst[0] = *(std::locale *)(v155 + 63752);
  kdebug_trace();
  v207 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 24))(v155 + 4856);
  v208 = v636;
  if (v636 < *(_DWORD *)(v155 + 63028))
  {
    v209 = (const void **)v207;
    v593 = v155 + 62768;
    v210 = NAN;
    __asm { FMOV            V0.2D, #2.0 }
    v583 = *((double *)&_Q0 + 1);
    v212 = NAN;
    while (1)
    {
      LODWORD(v636) = v208 + 1;
      if (!v208)
        break;
      if (sub_20FBC66EC(v155 + 4856, v209, 0, 0, v646, (double *)__dst))
        goto LABEL_372;
      ++HIDWORD(v636);
LABEL_295:
      v234 = *((unsigned int *)v209 + 4);
      if ((_DWORD)v234)
      {
        v235 = (char *)*v209;
        v236 = *(double *)*v209 * *(double *)*v209;
        if ((_DWORD)v234 != 1)
        {
          v237 = (double *)(v235 + 8);
          v238 = (v234 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v238 < 3)
            goto LABEL_301;
          v239 = v238 + 1;
          v237 += v239 & 0x3FFFFFFFFFFFFFFCLL;
          v240 = (float64x2_t *)(v235 + 24);
          v241 = v239 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v242 = vmulq_f64(v240[-1], v240[-1]);
            v243 = vmulq_f64(*v240, *v240);
            v236 = v236 + v242.f64[0] + v242.f64[1] + v243.f64[0] + v243.f64[1];
            v240 += 2;
            v241 -= 4;
          }
          while (v241);
          if (v239 != (v239 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_301:
            v244 = (double *)&v235[8 * v234];
            do
            {
              v245 = *v237++;
              v236 = v236 + v245 * v245;
            }
            while (v237 != v244);
          }
        }
        v246 = sqrt(v236);
        v247 = *(double *)(v155 + 63048) * (v164 + *(double *)(v155 + 63048));
        if (v246 >= v247)
          goto LABEL_307;
      }
      else
      {
        v246 = sqrt(0.0);
        v247 = *(double *)(v155 + 63048) * (v164 + *(double *)(v155 + 63048));
        if (v246 >= v247)
          goto LABEL_307;
      }
      if (v208 >= *v156)
      {
        if (*(_BYTE *)(v155 + 63032))
        {
          puts("Convergence in the parameters");
          if (*(_BYTE *)(v155 + 63032))
          {
            v435 = v210 / v212;
            v436 = NAN;
            if (v212 == 0.0)
              v435 = NAN;
            v437 = vabdd_f64(*(double *)&__dst[0].__locale_, *v603) / *(double *)&__dst[0].__locale_;
            if (*(double *)&__dst[0].__locale_ != 0.0)
              v436 = v437;
            printf("[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][%u][%f->%f][%f < %f][%f < %f][%f < %f][%f]\n", v208, *v603, *(double *)&__dst[0].__locale_, v246, *(double *)(v155 + 63048) * (v164 + *(double *)(v155 + 63048)), v435, *(double *)(v155 + 63040), v436, *(double *)(v155 + 63056), *(double *)(v155 + 63808));
          }
        }
        LODWORD(v637) = 2;
        v638.i64[1] = *(_QWORD *)(v155 + 63752);
        v306 = *(_QWORD *)(v155 + 63648);
        if (v306)
          goto LABEL_567;
        goto LABEL_568;
      }
LABEL_307:
      if ((_QWORD)v649)
        memcpy(__p, __src, 8 * v649);
      v210 = v212;
      if (v208)
      {
        v248 = *(double **)(v155 + 7864);
        v249 = *(unsigned int *)(v155 + 7880);
        v210 = fabs(*v248);
        if ((_DWORD)v249 != 1)
        {
          v250 = v248 + 1;
          v251 = 8 * v249 - 8;
          do
          {
            v252 = *v250++;
            v253 = fabs(v252);
            if (v210 < v253)
              v210 = v253;
            v251 -= 8;
          }
          while (v251);
        }
      }
      if (*(_BYTE *)(v155 + 63032))
      {
        v254 = v210 / v212;
        v255 = NAN;
        if (v212 == 0.0)
          v254 = NAN;
        v256 = vabdd_f64(*(double *)&__dst[0].__locale_, *v603) / *(double *)&__dst[0].__locale_;
        if (*(double *)&__dst[0].__locale_ != 0.0)
          v255 = v256;
        printf("[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][%u][%f->%f][%f < %f][%f < %f][%f < %f][%f]\n", v208, *v603, *(double *)&__dst[0].__locale_, v246, v247, v254, *(double *)(v155 + 63040), v255, *(double *)(v155 + 63056), *(double *)(v155 + 63808));
      }
      locale = __dst[0].__locale_;
      if (*(double *)&__dst[0].__locale_ == 0.0)
      {
        if (*(_BYTE *)(v155 + 63032))
          puts("Convergence in the cost: N.A.");
        goto LABEL_565;
      }
      v258 = *(double *)(v155 + 63752);
      v259 = vabdd_f64(*(double *)&__dst[0].__locale_, v258);
      if (v259 < *(double *)&__dst[0].__locale_ * *(double *)(v155 + 63056) && v208 >= *v156)
      {
        if (*(_BYTE *)(v155 + 63032))
          printf("Convergence in the cost: %g\n", v259 / *(double *)&__dst[0].__locale_);
LABEL_565:
        *v603 = *(double *)&__dst[0].__locale_;
        LODWORD(v637) = 3;
        goto LABEL_566;
      }
      v260 = *((unsigned int *)v209 + 4);
      v261 = *(_DWORD *)(v155 + 7880);
      if (!(_DWORD)v260)
      {
        v266 = NAN;
        v265 = 0.0;
        if (!v261)
          v266 = 0.0;
        goto LABEL_346;
      }
      v262 = (char *)*v209;
      v263 = *(double **)(v155 + 7864);
      v264 = *(double *)*v209;
      v265 = v264 * v264;
      if ((_DWORD)v260 == 1)
      {
        if (v261 == 1)
        {
          v266 = v264 * *v263;
          goto LABEL_346;
        }
LABEL_340:
        v266 = NAN;
        goto LABEL_346;
      }
      v267 = (double *)&v262[8 * v260];
      v268 = (double *)(v262 + 8);
      v269 = (v260 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      if (v269 >= 3)
      {
        v271 = v269 + 1;
        v272 = (v269 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v270 = &v268[v272];
        v273 = (float64x2_t *)(v262 + 24);
        v274 = v272;
        do
        {
          v275 = vmulq_f64(v273[-1], v273[-1]);
          v276 = vmulq_f64(*v273, *v273);
          v265 = v265 + v275.f64[0] + v275.f64[1] + v276.f64[0] + v276.f64[1];
          v273 += 2;
          v274 -= 4;
        }
        while (v274);
        if (v271 == v272)
          goto LABEL_337;
      }
      else
      {
        v270 = (double *)(v262 + 8);
      }
      do
      {
        v277 = *v270++;
        v265 = v265 + v277 * v277;
      }
      while (v270 != v267);
LABEL_337:
      if ((_DWORD)v260 != v261)
        goto LABEL_340;
      v266 = v264 * *v263;
      v278 = (v260 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      if (v278 < 3)
      {
        v279 = *(double **)(v155 + 7864);
LABEL_344:
        v287 = v279 + 1;
        do
        {
          v288 = *v268++;
          v289 = v288;
          v290 = *v287++;
          v266 = v266 + v289 * v290;
        }
        while (v268 != v267);
        goto LABEL_346;
      }
      v280 = v278 + 1;
      v281 = (v278 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v268 += v281;
      v279 = &v263[v281];
      v282 = (float64x2_t *)(v263 + 3);
      v283 = (float64x2_t *)(v262 + 24);
      v284 = v281;
      do
      {
        v285 = vmulq_f64(v283[-1], v282[-1]);
        v286 = vmulq_f64(*v283, *v282);
        v266 = v266 + v285.f64[0] + v285.f64[1] + v286.f64[0] + v286.f64[1];
        v282 += 2;
        v283 += 2;
        v284 -= 4;
      }
      while (v284);
      if (v280 != v281)
        goto LABEL_344;
LABEL_346:
      v291 = *(double *)(v155 + 63808);
      v292 = v258 - *(double *)&__dst[0].__locale_;
      if (v292 < 0.0)
      {
        v293.f64[1] = v583;
        v293.f64[0] = *(float64_t *)(v155 + 63808);
        *(float64x2_t *)(v155 + 63808) = vmulq_n_f64(v293, *(double *)(v155 + 63816));
        if (!*(_DWORD *)(v155 + 62860))
        {
          *(_DWORD *)(v155 + 62860) = 1;
          sub_20FBCBF58(v155 + 4856);
          if (*(_BYTE *)(*(_QWORD *)v593 + 31281))
          {
            sub_20F904994(*(_QWORD *)v593 + 64, (__int128 *)(*(_QWORD *)v593 + 363904));
            *(_BYTE *)(*(_QWORD *)v593 + 31281) = 0;
          }
        }
        *(_QWORD *)&v649 = 0;
        if (v648 >= 0x13)
        {
          v295 = __src;
        }
        else
        {
          v294 = 2 * v648;
          if (2 * v648 <= 0x13)
            v294 = 19;
          v648 = v294;
          v295 = (_OWORD *)operator new[]();
          if (__src != v646 && __src)
            MEMORY[0x212BC6368]();
          __src = v295;
          v296 = v649;
          if ((_QWORD)v649)
          {
            *(_QWORD *)&v649 = v649 + 19;
            memmove((char *)v295 + 152, v295, 8 * v296);
            v297 = v630;
            v295[6] = v629;
            v295[7] = v297;
            v295[8] = v631;
            *((_QWORD *)v295 + 18) = v632;
            v298 = v626;
            v295[2] = v625;
            v295[3] = v298;
            v299 = v628;
            v295[4] = v627;
            v295[5] = v299;
            v300 = v624;
            *v295 = *(_OWORD *)__p;
            v295[1] = v300;
LABEL_368:
            --HIDWORD(v636);
            (*(void (**)(uint64_t, double))(*(_QWORD *)v158 + 104))(v155 + 4856, *(double *)(v155 + 63808));
            goto LABEL_369;
          }
        }
        v295[6] = v629;
        v295[7] = v630;
        v295[8] = v631;
        *((_QWORD *)v295 + 18) = v632;
        v295[2] = v625;
        v295[3] = v626;
        v295[4] = v627;
        v295[5] = v628;
        *v295 = *(_OWORD *)__p;
        v295[1] = v624;
        *(_QWORD *)&v649 = 19;
        goto LABEL_368;
      }
      v301 = fabs(v291 * v265) + fabs(v266);
      if (v301 <= 0.0)
      {
        v303 = 0.333333333;
      }
      else
      {
        v302 = 1.0
             - (v292 / v301 + v292 / v301 + -1.0)
             * ((v292 / v301 + v292 / v301 + -1.0)
              * (v292 / v301 + v292 / v301 + -1.0));
        if (v302 > 0.666666667)
          v302 = 0.666666667;
        v303 = fmax(v302, 0.333333333);
      }
      *(double *)(v155 + 63808) = v291 * v303;
      *(_QWORD *)(v155 + 63816) = 0x4000000000000000;
      *(_QWORD *)v603 = locale;
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 104))(v155 + 4856);
      if (v210 < v212 * *(double *)(v155 + 63040) && v208 >= *v156)
      {
        if (*(_BYTE *)(v155 + 63032))
        {
          puts("Convergence in the gradient");
          if (*(_BYTE *)(v155 + 63032))
          {
            v443 = NAN;
            if (v212 == 0.0)
              v444 = NAN;
            else
              v444 = v210 / v212;
            v445 = *v603;
            if (*(double *)&__dst[0].__locale_ != 0.0)
              v443 = vabdd_f64(*(double *)&__dst[0].__locale_, v445) / *(double *)&__dst[0].__locale_;
            printf("[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][%u][%f->%f][%f < %f][%f < %f][%f < %f][%f]\n", v208, v445, *(double *)&__dst[0].__locale_, v246, *(double *)(v155 + 63048) * (v164 + *(double *)(v155 + 63048)), v444, *(double *)(v155 + 63040), v443, *(double *)(v155 + 63056), *(double *)(v155 + 63808));
          }
        }
        LODWORD(v637) = 1;
        v638.i64[1] = *(_QWORD *)(v155 + 63752);
        v306 = *(_QWORD *)(v155 + 63648);
        if (v306)
          goto LABEL_567;
        goto LABEL_568;
      }
LABEL_369:
      v304 = *(_QWORD *)(v155 + 63648);
      v305 = *(_DWORD *)(v155 + 63028);
      if (v304 && v208 + 1 < v305)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v304 + 48))(v304);
        v305 = *(_DWORD *)(v155 + 63028);
      }
      v208 = v636;
      if (v636 >= v305)
        goto LABEL_566;
    }
    if (sub_20FBC66EC(v155 + 4856, v209, v639, v603, v646, (double *)__dst))
    {
LABEL_372:
      if (*(_BYTE *)(v155 + 63032))
        puts("Solve FAILED");
      LODWORD(v637) = 0;
      v638.i64[1] = *(_QWORD *)(v155 + 63752);
      v306 = *(_QWORD *)(v155 + 63648);
      if (v306)
        goto LABEL_567;
      goto LABEL_568;
    }
    ++HIDWORD(v636);
    v638.i64[0] = *(uint64_t *)v603;
    v638.i64[1] = v638.i64[0];
    v213 = v644;
    v214 = *((_QWORD *)&v645 + 1);
    v215 = *((_QWORD *)&v645 + 1);
    *(_QWORD *)&v649 = 0;
    v216 = *((_QWORD *)&v645 + 1) & 0x1FFFFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v645 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v648)
    {
      if (!*((_QWORD *)&v645 + 1))
        goto LABEL_289;
      v217 = __src;
    }
    else
    {
      if (2 * v648 > v216)
        v216 = 2 * v648;
      v648 = v216;
      v217 = (_OWORD *)operator new[]();
      if (__src != v646 && __src)
        MEMORY[0x212BC6368]();
      __src = v217;
      v218 = v649;
      if ((_QWORD)v649)
      {
        *(_QWORD *)&v649 = v649 + v214;
        memmove((char *)v217 + 8 * v214, v217, 8 * v218);
        memcpy(v217, v213, v215 * 8);
        goto LABEL_289;
      }
    }
    v219 = 0;
    v220 = (v214 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v220 < 3)
    {
      v221 = v213;
    }
    else
    {
      v221 = v213;
      if ((unint64_t)((char *)v217 - (char *)v213) >= 0x20)
      {
        v222 = v220 + 1;
        v219 = v222 & 0x3FFFFFFFFFFFFFFCLL;
        v221 = &v213[v222 & 0x3FFFFFFFFFFFFFFCLL];
        v223 = v217 + 1;
        v224 = (__int128 *)(v213 + 2);
        v225 = v222 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v226 = *v224;
          *(v223 - 1) = *(v224 - 1);
          *v223 = v226;
          v223 += 2;
          v224 += 2;
          v225 -= 4;
        }
        while (v225);
        if (v222 == v219)
          goto LABEL_288;
      }
    }
    do
    {
      v227 = (uint64_t)*v221++;
      *((_QWORD *)v217 + v219++) = v227;
    }
    while (v221 != &v213[v215]);
LABEL_288:
    *(_QWORD *)&v649 = v219;
LABEL_289:
    v228 = *(double **)(v155 + 7864);
    v229 = *(unsigned int *)(v155 + 7880);
    v212 = fabs(*v228);
    if ((_DWORD)v229 == 1)
    {
      v210 = v212;
    }
    else
    {
      v230 = v228 + 1;
      v231 = 8 * v229 - 8;
      do
      {
        v232 = *v230++;
        v233 = fabs(v232);
        if (v212 < v233)
          v212 = v233;
        v210 = v212;
        v231 -= 8;
      }
      while (v231);
    }
    goto LABEL_295;
  }
LABEL_566:
  v638.i64[1] = *(_QWORD *)(v155 + 63752);
  v306 = *(_QWORD *)(v155 + 63648);
  if (v306)
LABEL_567:
    (*(void (**)(uint64_t))(*(_QWORD *)v306 + 48))(v306);
LABEL_568:
  *v589 = v587;
  a1 = v605;
  if (!v585)
    goto LABEL_569;
LABEL_600:
  kdebug_trace();
  sub_20F8831E4(a1 + 5424, (__int128 *)object);
  v659 = 0;
  if (v657 != v656 && v657)
    MEMORY[0x212BC6368]();
  v653 = 0;
  if (v651 != v650 && v651)
    MEMORY[0x212BC6368]();
  *(_QWORD *)&v649 = 0;
  if (__src != v646 && __src)
    MEMORY[0x212BC6368]();
  *((_QWORD *)&v645 + 1) = 0;
  if (v644 != v639 && v644)
    MEMORY[0x212BC6368]();
  if ((SHIBYTE(v635) & 0x80000000) == 0)
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_614;
LABEL_617:
    operator delete(object[0]);
    if (!*(_BYTE *)(a1 + 1933))
      goto LABEL_620;
    goto LABEL_618;
  }
  operator delete(v634[0]);
  if (SHIBYTE(object[2]) < 0)
    goto LABEL_617;
LABEL_614:
  if (!*(_BYTE *)(a1 + 1933))
    goto LABEL_620;
LABEL_618:
  v453 = *(_QWORD *)(a1 + 11792);
  if (!v453)
    sub_20E86D37C();
  (*(void (**)(uint64_t))(*(_QWORD *)v453 + 48))(v453);
LABEL_620:
  sub_20F82FD50(&v616);
  if (**(int **)(v616 + 56) > 2
    || (v454 = *(unsigned __int8 *)(v616 + 72),
        v455 = sub_20E8C31DC(v616, "OSLogSurrogateAppender", 1, 0),
        v456 = v455,
        !v454)
    && !v455)
  {
    if (!*(_BYTE *)(a1 + 1931))
      return kdebug_trace();
    goto LABEL_624;
  }
  sub_20E863438((uint64_t)__p);
  sub_20E863438((uint64_t)object);
  *(void **)((char *)&v634[1] + *((_QWORD *)object[2] - 3)) = (void *)30;
  sub_20E86A980(&object[2], (uint64_t)"Oldest state ID in SLW: ", 24);
  v465 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v465, (uint64_t)"\n", 1);
  HIBYTE(rep) = 0;
  LOBYTE(v606[0]) = 0;
  sub_20F4ACDC8(a1 + 5424, &object[2], (uint64_t)v606);
  if ((SHIBYTE(rep) & 0x80000000) == 0)
  {
    v466 = v642;
    if ((v642 & 0x10) == 0)
      goto LABEL_637;
LABEL_640:
    v469 = v641;
    if (v641 < v638.i64[1])
    {
      v641 = v638.u64[1];
      v469 = v638.i64[1];
    }
    v470 = (char *)v638.i64[0];
    v467 = v469 - v638.i64[0];
    if ((unint64_t)(v469 - v638.i64[0]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_737;
    goto LABEL_643;
  }
  operator delete(v606[0]);
  v466 = v642;
  if ((v642 & 0x10) != 0)
    goto LABEL_640;
LABEL_637:
  if ((v466 & 8) == 0)
  {
    v467 = 0;
    HIBYTE(v618) = 0;
    v468 = (std::locale::__imp *)__dst;
    goto LABEL_650;
  }
  v470 = v635;
  v467 = v637 - (_QWORD)v635;
  if (v637 - (unint64_t)v635 > 0x7FFFFFFFFFFFFFF7)
LABEL_737:
    sub_20E860B7C();
LABEL_643:
  if (v467 >= 0x17)
  {
    v471 = (v467 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v467 | 7) != 0x17)
      v471 = v467 | 7;
    v472 = v471 + 1;
    v468 = (std::locale::__imp *)operator new(v471 + 1);
    __dst[1].__locale_ = (std::locale::__imp *)v467;
    v618 = (std::__shared_weak_count *)(v472 | 0x8000000000000000);
    __dst[0].__locale_ = v468;
    goto LABEL_649;
  }
  HIBYTE(v618) = v467;
  v468 = (std::locale::__imp *)__dst;
  if (v467)
LABEL_649:
    memmove(v468, v470, v467);
LABEL_650:
  *((_BYTE *)v468 + v467) = 0;
  v473 = (void *)*MEMORY[0x24BEDB7F0];
  object[0] = v473;
  v474 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
  v604 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *(void **)((char *)object + *((_QWORD *)v473 - 3)) = v604;
  object[2] = v474;
  v634[0] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v640 < 0)
    operator delete(v639[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v643);
  if (SHIBYTE(v618) >= 0)
    v475 = __dst;
  else
    v475 = __dst[0].__locale_;
  if (SHIBYTE(v618) >= 0)
    v476 = HIBYTE(v618);
  else
    v476 = (uint64_t)__dst[1].__locale_;
  sub_20E86A980(&v624, (uint64_t)v475, v476);
  if ((SHIBYTE(v618) & 0x80000000) == 0)
  {
    v477 = BYTE8(v630);
    if ((BYTE8(v630) & 0x10) == 0)
      goto LABEL_660;
LABEL_663:
    v480 = v630;
    if ((unint64_t)v630 < *((_QWORD *)&v627 + 1))
    {
      *(_QWORD *)&v630 = *((_QWORD *)&v627 + 1);
      v480 = *((_QWORD *)&v627 + 1);
    }
    v481 = (const void *)v627;
    v478 = v480 - v627;
    if ((unint64_t)(v480 - v627) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_739;
    goto LABEL_666;
  }
  operator delete(__dst[0].__locale_);
  v477 = BYTE8(v630);
  if ((BYTE8(v630) & 0x10) != 0)
    goto LABEL_663;
LABEL_660:
  if ((v477 & 8) == 0)
  {
    v478 = 0;
    HIBYTE(v615) = 0;
    v479 = v614;
    goto LABEL_673;
  }
  v481 = (const void *)*((_QWORD *)&v625 + 1);
  v478 = *((_QWORD *)&v626 + 1) - *((_QWORD *)&v625 + 1);
  if (*((_QWORD *)&v626 + 1) - *((_QWORD *)&v625 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_739:
    sub_20E860B7C();
LABEL_666:
  if (v478 >= 0x17)
  {
    v482 = (v478 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v478 | 7) != 0x17)
      v482 = v478 | 7;
    v483 = v482 + 1;
    v479 = operator new(v482 + 1);
    v614[1] = (void *)v478;
    v615 = v483 | 0x8000000000000000;
    v614[0] = v479;
    goto LABEL_672;
  }
  HIBYTE(v615) = v478;
  v479 = v614;
  if (v478)
LABEL_672:
    memmove(v479, v481, v478);
LABEL_673:
  *((_BYTE *)v479 + v478) = 0;
  v606[0] = &v616;
  v606[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = (char *)std::chrono::system_clock::now().__d_.__rep_;
  v608 = 2;
  v609 = "unknown file";
  v610 = 2931;
  v612 = 0;
  v613 = 0;
  v611 = "unknown function";
  if (v615 >= 0)
    v484 = v614;
  else
    v484 = (void **)v614[0];
  v485 = *(_QWORD *)v606[0];
  v486 = (const char *)(*(_QWORD *)v606[0] + 16);
  v596 = v486;
  if (*(char *)(*(_QWORD *)v606[0] + 39) < 0)
  {
    v486 = *(const char **)(v485 + 16);
    v487 = *(_QWORD *)(v485 + 24);
    v599 = v473;
    v601 = v474;
    v489 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v489 & 1) != 0)
      goto LABEL_680;
  }
  else
  {
    v487 = *(unsigned __int8 *)(*(_QWORD *)v606[0] + 39);
    v599 = v473;
    v601 = v474;
    v488 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v488 & 1) != 0)
      goto LABEL_680;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(v634[0]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_680:
  if (byte_254A4A4F8[23] >= 0)
    v490 = byte_254A4A4F8;
  else
    v490 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v491 = byte_254A4A4F8[23];
  else
    v491 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v490, v486);
  v492 = &object[1];
  if (v491 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v491 >= 0x17)
  {
    v493 = v454;
    v494 = (v491 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v491 | 7) != 0x17)
      v494 = v491 | 7;
    v495 = v494 + 1;
    v492 = (void **)operator new(v494 + 1);
    v634[0] = (void *)(v495 | 0x8000000000000000);
    object[1] = v492;
    object[2] = (void *)v491;
    v454 = v493;
    goto LABEL_693;
  }
  HIBYTE(v634[0]) = v491;
  if (v491)
LABEL_693:
    memmove(v492, v490, v491);
  *((_BYTE *)v492 + v491) = 0;
  LOBYTE(v634[1]) = 1;
  v496 = (char *)&v635;
  if (v487 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v487 >= 0x17)
  {
    v498 = (v487 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v487 | 7) != 0x17)
      v498 = v487 | 7;
    v499 = v498 + 1;
    v496 = (char *)operator new(v498 + 1);
    v637 = v499 | 0x8000000000000000;
    v635 = v496;
    v636 = v487;
  }
  else
  {
    HIBYTE(v637) = v487;
    if (!v487)
    {
      LOBYTE(v635) = 0;
      v638.i8[0] = 1;
      v497 = object[0];
      if ((SHIBYTE(v637) & 0x80000000) == 0)
        goto LABEL_698;
      goto LABEL_704;
    }
  }
  memmove(v496, v486, v487);
  v496[v487] = 0;
  v638.i8[0] = 1;
  v497 = object[0];
  if ((SHIBYTE(v637) & 0x80000000) == 0)
  {
LABEL_698:
    if (!LOBYTE(v634[1]))
      goto LABEL_707;
    goto LABEL_705;
  }
LABEL_704:
  operator delete(v635);
  if (!LOBYTE(v634[1]))
    goto LABEL_707;
LABEL_705:
  if (SHIBYTE(v634[0]) < 0)
    operator delete(object[1]);
LABEL_707:
  if (object[0])
    os_release(object[0]);
  if (v456 && *(_QWORD *)(v456 + 24))
  {
    v500 = _os_log_pack_size();
    v501 = (std::locale::__imp *)operator new(v500, (std::align_val_t)8uLL);
    v502 = (std::__shared_weak_count *)operator new();
    v502->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v502->__shared_owners_ = 0;
    v502->__shared_weak_owners_ = 0;
    v502[1].__vftable = (std::__shared_weak_count_vtbl *)v501;
    __dst[0].__locale_ = v501;
    __dst[1].__locale_ = v501;
    v619 = 0;
    v620 = 0;
    v618 = v502;
    v503 = strlen((const char *)v484);
    if (v503 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v504 = v503;
    if (v503 >= 0x17)
    {
      v517 = (v503 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v503 | 7) != 0x17)
        v517 = v503 | 7;
      v518 = v517 + 1;
      v505 = operator new(v517 + 1);
      *(_QWORD *)&v622 = v504;
      *((_QWORD *)&v622 + 1) = v518 | 0x8000000000000000;
      v621 = v505;
    }
    else
    {
      HIBYTE(v622) = v503;
      v505 = &v621;
      if (!v503)
      {
LABEL_744:
        *((_BYTE *)v505 + v504) = 0;
        v519 = v621;
        v660[0] = v622;
        *(_QWORD *)((char *)v660 + 7) = *(_QWORD *)((char *)&v622 + 7);
        v520 = HIBYTE(v622);
        v521 = operator new(0x38uLL);
        v521[1] = 0;
        v521[2] = 0;
        v521[3] = off_24C9ABC20;
        *v521 = &off_24C9ABBD0;
        v522 = v660[0];
        v521[4] = v519;
        v521[5] = v522;
        *(_QWORD *)((char *)v521 + 47) = *(_QWORD *)((char *)v660 + 7);
        *((_BYTE *)v521 + 55) = v520;
        v660[0] = 0;
        *(_QWORD *)((char *)v660 + 7) = 0;
        v523 = v620;
        v619 = (char *)(v521 + 3);
        v620 = (std::__shared_weak_count *)v521;
        if (v523)
        {
          p_shared_owners = (unint64_t *)&v523->__shared_owners_;
          do
            v525 = __ldaxr(p_shared_owners);
          while (__stlxr(v525 - 1, p_shared_owners));
          if (!v525)
          {
            ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
            std::__shared_weak_count::__release_weak(v523);
          }
        }
        *(_OWORD *)object = *(_OWORD *)&__dst[0].__locale_;
        v526 = v619;
        object[2] = v618;
        if (v618)
        {
          v527 = (unint64_t *)&v618->__shared_owners_;
          do
            v528 = __ldxr(v527);
          while (__stxr(v528 + 1, v527));
        }
        v529 = v620;
        v634[0] = v526;
        v634[1] = v620;
        if (v620)
        {
          v530 = (unint64_t *)&v620->__shared_owners_;
          do
            v531 = __ldxr(v530);
          while (__stxr(v531 + 1, v530));
          v635 = v526;
          do
            v532 = __ldaxr(v530);
          while (__stlxr(v532 - 1, v530));
          if (!v532)
          {
            ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
            std::__shared_weak_count::__release_weak(v529);
          }
        }
        else
        {
          v635 = v526;
        }
        v537 = v618;
        if (v618)
        {
          v538 = (unint64_t *)&v618->__shared_owners_;
          do
            v539 = __ldaxr(v538);
          while (__stlxr(v539 - 1, v538));
          if (!v539)
          {
            ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
            std::__shared_weak_count::__release_weak(v537);
          }
        }
        v540 = object[0];
        if (v635[31] >= 0)
          v541 = v635 + 8;
        else
          v541 = (char *)*((_QWORD *)v635 + 1);
        v542 = _os_log_pack_fill();
        *(_DWORD *)v542 = 136315138;
        *(_QWORD *)(v542 + 4) = v541;
        v543 = operator new();
        v544 = *(unsigned __int8 *)(v485 + 39);
        v545 = v596;
        if ((v544 & 0x80u) != 0)
        {
          v545 = *(const char **)(v485 + 16);
          v544 = *(_QWORD *)(v485 + 24);
        }
        *(_QWORD *)v543 = v540;
        *(_OWORD *)(v543 + 8) = *(_OWORD *)&object[1];
        object[1] = 0;
        object[2] = 0;
        *(_OWORD *)(v543 + 24) = *(_OWORD *)v634;
        *(_OWORD *)v634 = 0uLL;
        *(_QWORD *)(v543 + 40) = v545;
        *(_QWORD *)(v543 + 48) = v544;
        *(_BYTE *)(v543 + 56) = 2;
        v621 = 0;
        __dst[0].__locale_ = (std::locale::__imp *)v543;
        (*(void (**)(_QWORD, std::locale *))(**(_QWORD **)(v456 + 24) + 40))(*(_QWORD *)(v456 + 24), __dst);
        v546 = __dst[0].__locale_;
        __dst[0].__locale_ = 0;
        a1 = v605;
        if (v546)
        {
          v547 = (std::__shared_weak_count *)*((_QWORD *)v546 + 4);
          if (v547)
          {
            v548 = (unint64_t *)&v547->__shared_owners_;
            do
              v549 = __ldaxr(v548);
            while (__stlxr(v549 - 1, v548));
            if (!v549)
            {
              ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
              std::__shared_weak_count::__release_weak(v547);
            }
          }
          v550 = (std::__shared_weak_count *)*((_QWORD *)v546 + 2);
          if (v550)
          {
            v551 = (unint64_t *)&v550->__shared_owners_;
            do
              v552 = __ldaxr(v551);
            while (__stlxr(v552 - 1, v551));
            if (!v552)
            {
              ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
              std::__shared_weak_count::__release_weak(v550);
            }
          }
          MEMORY[0x212BC6398](v546, 0x10F0C40B62ED6C6);
          v553 = v621;
          v621 = 0;
          if (v553)
          {
            v554 = (std::__shared_weak_count *)v553[4];
            if (v554)
            {
              v555 = (unint64_t *)&v554->__shared_owners_;
              do
                v556 = __ldaxr(v555);
              while (__stlxr(v556 - 1, v555));
              if (!v556)
              {
                ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
                std::__shared_weak_count::__release_weak(v554);
              }
            }
            v557 = (std::__shared_weak_count *)v553[2];
            if (v557)
            {
              v558 = (unint64_t *)&v557->__shared_owners_;
              do
                v559 = __ldaxr(v558);
              while (__stlxr(v559 - 1, v558));
              if (!v559)
              {
                ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                std::__shared_weak_count::__release_weak(v557);
              }
            }
            MEMORY[0x212BC6398](v553, 0x10F0C40B62ED6C6);
          }
        }
        v560 = (std::__shared_weak_count *)v634[1];
        if (v634[1])
        {
          v561 = (unint64_t *)((char *)v634[1] + 8);
          do
            v562 = __ldaxr(v561);
          while (__stlxr(v562 - 1, v561));
          if (!v562)
          {
            ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
            std::__shared_weak_count::__release_weak(v560);
          }
        }
        v563 = (std::__shared_weak_count *)object[2];
        if (object[2])
        {
          v564 = (unint64_t *)((char *)object[2] + 8);
          do
            v565 = __ldaxr(v564);
          while (__stlxr(v565 - 1, v564));
          if (!v565)
          {
            ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
            std::__shared_weak_count::__release_weak(v563);
          }
        }
        goto LABEL_813;
      }
    }
    memcpy(v505, v484, v504);
    goto LABEL_744;
  }
  os_log_type_enabled(v497, OS_LOG_TYPE_DEBUG);
  LODWORD(object[0]) = 136315138;
  *(void **)((char *)object + 4) = v484;
  v506 = (void *)_os_log_send_and_compose_impl();
  a1 = v605;
  if (v506)
    free(v506);
LABEL_813:
  if (v454)
  {
    v566 = v614;
    if (v615 < 0)
      v566 = (void **)v614[0];
    sub_20E8C003C((uint64_t)v606, "%s", (const char *)v566);
    sub_20E863570((uint64_t)v606);
  }
  sub_20E863570((uint64_t)v606);
  v567 = v613;
  if (v613)
  {
    v568 = (unint64_t *)&v613->__shared_owners_;
    do
      v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
    }
  }
  if (SHIBYTE(v615) < 0)
    operator delete(v614[0]);
  __p[0] = v599;
  *(void **)((char *)__p + *((_QWORD *)v599 - 3)) = v604;
  *(_QWORD *)&v624 = v601;
  *((_QWORD *)&v624 + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v629) < 0)
    operator delete(*((void **)&v628 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v631);
  if (*(_BYTE *)(a1 + 1931))
  {
LABEL_624:
    v457 = *(_QWORD *)(a1 + 8216);
    if (!*(_BYTE *)(v457 + 1720))
    {
      if (*(_BYTE *)v457)
      {
        v458 = *(_QWORD *)(v457 + 8);
        v459 = v458 + 3104;
        if (*(_QWORD *)(v458 + 3128))
        {
          v460 = *(_QWORD **)(v458 + 3120);
          if (v460)
          {
            do
            {
              v461 = (_QWORD *)*v460;
              operator delete(v460);
              v460 = v461;
            }
            while (v461);
          }
          *(_QWORD *)(v458 + 3120) = 0;
          v462 = *(_QWORD *)(v458 + 3112);
          if (v462)
          {
            for (m = 0; m != v462; ++m)
              *(_QWORD *)(*(_QWORD *)v459 + 8 * m) = 0;
          }
          *(_QWORD *)(v458 + 3128) = 0;
        }
        prime = vcvtps_u32_f32((float)((*(_QWORD *)(v458 + 6160) - *(_QWORD *)(v458 + 6152)) >> 4)/ *(float *)(v458 + 3136));
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v513 = *(int8x8_t *)(v458 + 3112);
        if (prime > *(_QWORD *)&v513)
          goto LABEL_729;
        if (prime < *(_QWORD *)&v513)
        {
          v514 = vcvtps_u32_f32((float)*(unint64_t *)(v458 + 3128) / *(float *)(v458 + 3136));
          if (*(_QWORD *)&v513 < 3uLL
            || (v515 = (uint8x8_t)vcnt_s8(v513), v515.i16[0] = vaddlv_u8(v515), v515.u32[0] > 1uLL))
          {
            v514 = std::__next_prime(v514);
          }
          else
          {
            v516 = 1 << -(char)__clz(v514 - 1);
            if (v514 >= 2)
              v514 = v516;
          }
          if (prime <= v514)
            prime = v514;
          if (prime < *(_QWORD *)&v513)
LABEL_729:
            sub_20E8D2B3C(v458 + 3104, prime);
        }
        v570 = *(unsigned int **)(v458 + 6152);
        for (n = *(unsigned int **)(v458 + 6160); v570 != n; v570 += 4)
        {
          v572 = (void *)*((_QWORD *)v570 + 1);
          object[0] = (void *)*v570;
          object[1] = v572;
          sub_20EABA148(v459, (unsigned int *)object, object);
        }
      }
      else
      {
        v507 = *(_QWORD *)(v457 + 16);
        v459 = v507 + 3104;
        if (*(_QWORD *)(v507 + 3128))
        {
          v508 = *(_QWORD **)(v507 + 3120);
          if (v508)
          {
            do
            {
              v509 = (_QWORD *)*v508;
              operator delete(v508);
              v508 = v509;
            }
            while (v509);
          }
          *(_QWORD *)(v507 + 3120) = 0;
          v510 = *(_QWORD *)(v507 + 3112);
          if (v510)
          {
            for (ii = 0; ii != v510; ++ii)
              *(_QWORD *)(*(_QWORD *)v459 + 8 * ii) = 0;
          }
          *(_QWORD *)(v507 + 3128) = 0;
        }
        v512 = vcvtps_u32_f32((float)((*(_QWORD *)(v507 + 6144) - *(_QWORD *)(v507 + 6136)) >> 4)/ *(float *)(v507 + 3136));
        if (v512 == 1)
        {
          v512 = 2;
        }
        else if ((v512 & (v512 - 1)) != 0)
        {
          v512 = std::__next_prime(v512);
        }
        v533 = *(int8x8_t *)(v507 + 3112);
        if (v512 > *(_QWORD *)&v533)
          goto LABEL_762;
        if (v512 < *(_QWORD *)&v533)
        {
          v534 = vcvtps_u32_f32((float)*(unint64_t *)(v507 + 3128) / *(float *)(v507 + 3136));
          if (*(_QWORD *)&v533 < 3uLL
            || (v535 = (uint8x8_t)vcnt_s8(v533), v535.i16[0] = vaddlv_u8(v535), v535.u32[0] > 1uLL))
          {
            v534 = std::__next_prime(v534);
          }
          else
          {
            v536 = 1 << -(char)__clz(v534 - 1);
            if (v534 >= 2)
              v534 = v536;
          }
          if (v512 <= v534)
            v512 = v534;
          if (v512 < *(_QWORD *)&v533)
LABEL_762:
            sub_20E8D2B3C(v507 + 3104, v512);
        }
        v573 = *(unsigned int **)(v507 + 6136);
        for (jj = *(unsigned int **)(v507 + 6144); v573 != jj; v573 += 4)
        {
          v575 = (void *)*((_QWORD *)v573 + 1);
          object[0] = (void *)*v573;
          object[1] = v575;
          sub_20EABA148(v459, (unsigned int *)object, object);
        }
      }
      if (a1 + 12024 != v459)
      {
        *(_DWORD *)(a1 + 12056) = *(_DWORD *)(v459 + 32);
        sub_20F40AFF0((_QWORD *)(a1 + 12024), *(uint64_t **)(v459 + 16), 0);
      }
    }
  }
  return kdebug_trace();
}

void sub_20F85A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,std::locale a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::locale a63)
{
  if (LOBYTE(STACK[0x2C8]) && SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a38);
  if (a52 < 0)
  {
    operator delete(a47);
    sub_20E863784((uint64_t)&a63);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F85A354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  char v58;

  sub_20F85A3CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    v58,
    a32,
    v57,
    a34,
    a35,
    a36,
    a37,
    a38,
    a39,
    a40,
    a41,
    a42,
    a43,
    a44,
    a45,
    a46,
    a47,
    a48,
    a49,
    a50,
    a51,
    a52,
    a53,
    a54,
    a55,
    a56,
    a57);
}

void sub_20F85A370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,_BYTE *a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int64x2_t *a38)
{
  *a30 = a29;
  if (!a33)
    sub_20FBC407C(&a38);
  JUMPOUT(0x20F85A3DCLL);
}

void sub_20F85A3AC(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F85A3C4);
}

void sub_20F85A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  *(_BYTE *)(a33 + 16) = a31;
  sub_20F2C524C((uint64_t)&STACK[0x2B0]);
  sub_20EDB4278((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_20F85A3F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  size_t v7;
  char *p_dst;
  os_log_t v9;
  os_log_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  const char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  const char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  const char *v111;
  unsigned __int8 v112;
  const char *v113;
  size_t v114;
  NSObject *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  size_t v125;
  NSObject *v126;
  NSObject *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  os_log_t v132;
  _DWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  int v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  int *v165;
  uint64_t v166;
  int *v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  NSObject *v180;
  NSObject *v181;
  NSObject *v182;
  _OWORD *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  NSObject *v188;
  uint64_t v189;
  Class v190;
  int v191;
  _QWORD *v192;
  void *v193;
  float64x2_t v194;
  int v196;
  int v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  int v203;
  _BYTE *v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  size_t v211;
  void *v212;
  os_log_t v213;
  os_log_t v214;
  uint64_t v215;
  uint64_t v216;
  void **v217;
  uint64_t v218;
  uint64_t v219;
  size_t v220;
  const char *v221;
  unsigned __int8 v222;
  unsigned __int8 v223;
  const char *v224;
  size_t v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  NSObject *v232;
  size_t v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  size_t v237;
  size_t v238;
  _BYTE *v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  _QWORD *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  char *v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void **v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unsigned __int8 v270;
  const char *v271;
  size_t v272;
  NSObject *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  NSObject *v279;
  uint64_t v280;
  uint64_t v281;
  NSObject *v282;
  size_t v283;
  NSObject *v284;
  NSObject *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  os_log_t v290;
  _DWORD *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  int v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  void *v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  int *v323;
  uint64_t v324;
  int *v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  int v333;
  int *v334;
  int v335;
  unsigned int v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v344;
  int v345;
  uint64_t v346;
  int *v347;
  int v348;
  _DWORD *v349;
  _DWORD *v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  unint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  NSObject *v360;
  NSObject *v361;
  NSObject *v362;
  _OWORD *v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  char *v367;
  NSObject *v368;
  uint64_t v369;
  Class isa;
  int v371;
  _QWORD *v372;
  void *v373;
  int v374;
  int v375;
  unint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  int v381;
  _BYTE *v382;
  uint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  size_t v389;
  void *v390;
  os_log_t v391;
  os_log_t v392;
  uint64_t v393;
  uint64_t v394;
  void **v395;
  uint64_t v396;
  uint64_t v397;
  size_t v398;
  const char *v399;
  unsigned __int8 v400;
  unsigned __int8 v401;
  const char *v402;
  size_t v403;
  _BYTE *v404;
  uint64_t v405;
  uint64_t v406;
  _BYTE *v407;
  uint64_t v408;
  uint64_t v409;
  NSObject *v410;
  size_t v411;
  std::__shared_weak_count_vtbl *v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  size_t v415;
  size_t v416;
  _BYTE *v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  _QWORD *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  char *v426;
  char *v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  char *shared_owners;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  void **v444;
  unint64_t *v445;
  NSObject *v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  double v450;
  uint64_t v451;
  int v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  size_t v457;
  const char *v458;
  unsigned __int8 v459;
  BOOL v460;
  uint64_t v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  int64x2_t v471;
  float64x2_t v474;
  int8x16_t v476;
  int8x16_t v477;
  double v478;
  float64x2_t v483;
  int64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  uint64_t v489;
  uint64_t v490;
  int64x2_t v491;
  int64x2_t v492;
  float64x2_t v495;
  int8x16_t v497;
  int8x16_t v498;
  double v499;
  float64x2_t v502;
  int64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  __int128 v510;
  __int128 v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  uint64_t v518;
  uint64_t mm;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  double *v525;
  uint64_t v526;
  double *v527;
  double v529;
  float64x2_t v532;
  double v534;
  double v535;
  double v537;
  _QWORD *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int64x2_t v552;
  int64x2_t v553;
  float64x2_t v556;
  int8x16_t v558;
  int8x16_t v559;
  double v560;
  float64x2_t v563;
  int64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  _QWORD *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  int64x2_t v577;
  float64x2_t v580;
  int8x16_t v582;
  int8x16_t v583;
  double v584;
  float64x2_t v587;
  int64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  uint64_t v593;
  uint64_t v594;
  int64x2_t v595;
  int64x2_t v596;
  float64x2_t v599;
  int8x16_t v601;
  int8x16_t v602;
  double v603;
  float64x2_t v606;
  int64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  __int128 v614;
  __int128 v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  uint64_t v622;
  uint64_t i5;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t *v627;
  uint64_t v628;
  double *v629;
  uint64_t v630;
  double *v631;
  double v633;
  float64x2_t v636;
  double v638;
  double v639;
  double v641;
  uint64_t v651;
  uint64_t nn;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v661;
  uint64_t i6;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  int64x2_t v675;
  float64x2_t v678;
  int8x16_t v680;
  int8x16_t v681;
  double v682;
  float64x2_t v685;
  int64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int64x2_t v695;
  float64x2_t v698;
  int8x16_t v700;
  int8x16_t v701;
  double v702;
  float64x2_t v705;
  int64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  _QWORD *v722;
  _QWORD *v723;
  uint64_t v724;
  uint64_t i1;
  uint64_t v726;
  __int128 v727;
  char v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  _QWORD *v733;
  uint64_t v734;
  uint64_t i7;
  uint64_t v736;
  __int128 v737;
  char v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  _QWORD *v742;
  _QWORD *v743;
  uint64_t v744;
  uint64_t i2;
  __n128 *v746;
  __n128 v747;
  __n128 v748;
  __n128 v749;
  __n128 v750;
  __n128 v751;
  __n128 v752;
  __n128 v753;
  __n128 v754;
  __n128 v755;
  __n128 v756;
  __n128 v757;
  uint64_t **i3;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  _QWORD *v762;
  _QWORD *v763;
  uint64_t v764;
  uint64_t i8;
  __n128 *v766;
  __n128 v767;
  __n128 v768;
  __n128 v769;
  __n128 v770;
  __n128 v771;
  __n128 v772;
  __n128 v773;
  __n128 v774;
  __n128 v775;
  __n128 v776;
  __n128 v777;
  uint64_t **i9;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  uint64_t v785;
  _QWORD *v786;
  _QWORD *v787;
  uint64_t v788;
  uint64_t i4;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  uint64_t v796;
  _QWORD *v797;
  _QWORD *v798;
  uint64_t v799;
  uint64_t i10;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  int64x2_t v805;
  float64x2_t v808;
  int8x16_t v810;
  int8x16_t v811;
  double v812;
  float64x2_t v815;
  int64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  int64x2_t v825;
  float64x2_t v828;
  int8x16_t v830;
  int8x16_t v831;
  double v832;
  float64x2_t v835;
  int64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  __int128 *v844;
  __int128 v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  __int128 *v849;
  __int128 v850;
  _QWORD *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  int64x2_t v856;
  int64x2_t v857;
  float64x2_t v860;
  int8x16_t v862;
  int8x16_t v863;
  double v864;
  float64x2_t v867;
  int64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  int64x2_t v876;
  int64x2_t v877;
  float64x2_t v880;
  int8x16_t v882;
  int8x16_t v883;
  double v884;
  float64x2_t v887;
  int64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  int64x2_t v896;
  int64x2_t v897;
  float64x2_t v900;
  int8x16_t v902;
  int8x16_t v903;
  double v904;
  float64x2_t v907;
  int64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  uint64_t v928;
  uint64_t i11;
  uint64_t v930;
  uint64_t v931;
  float64x2_t v932;
  float64x2_t v933;
  uint64_t v934;
  uint64_t *v935;
  uint64_t v936;
  float64x2_t *v937;
  uint64_t v938;
  float64x2_t *v939;
  double v941;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v948;
  uint64_t v949;
  uint64_t i16;
  uint64_t v951;
  uint64_t v952;
  float64x2_t v953;
  float64x2_t v954;
  uint64_t v955;
  uint64_t *v956;
  uint64_t v957;
  float64x2_t *v958;
  uint64_t v959;
  float64x2_t *v960;
  double v962;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v969;
  uint64_t v970;
  uint64_t i12;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  float64x2_t v977;
  uint64_t v978;
  uint64_t *v979;
  uint64_t v980;
  double *v981;
  uint64_t v982;
  double *v983;
  float64x2_t v987;
  double v989;
  uint64_t v999;
  uint64_t i17;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  float64x2_t v1006;
  uint64_t v1007;
  uint64_t *v1008;
  uint64_t v1009;
  double *v1010;
  uint64_t v1011;
  double *v1012;
  float64x2_t v1016;
  double v1018;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  __int128 v1038;
  uint64_t v1039;
  _QWORD *v1040;
  _QWORD *v1041;
  uint64_t v1042;
  uint64_t i13;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  __int128 v1048;
  uint64_t v1049;
  _QWORD *v1050;
  _QWORD *v1051;
  uint64_t v1052;
  uint64_t i18;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  _OWORD *v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  _QWORD *v1068;
  _QWORD *v1069;
  uint64_t v1070;
  uint64_t i14;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  _OWORD *v1075;
  __int128 v1076;
  __int128 v1077;
  __int128 v1078;
  __int128 v1079;
  __int128 v1080;
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  _QWORD *v1086;
  _QWORD *v1087;
  uint64_t v1088;
  uint64_t i19;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  __int128 v1094;
  _QWORD *v1095;
  _QWORD *v1096;
  uint64_t v1097;
  uint64_t i15;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  __int128 v1103;
  _QWORD *v1104;
  _QWORD *v1105;
  uint64_t v1106;
  uint64_t i20;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  int64x2_t v1112;
  int64x2_t v1113;
  float64x2_t v1116;
  int8x16_t v1118;
  int8x16_t v1119;
  double v1120;
  float64x2_t v1123;
  int64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  int64x2_t v1132;
  int64x2_t v1133;
  float64x2_t v1136;
  int8x16_t v1138;
  int8x16_t v1139;
  double v1140;
  float64x2_t v1143;
  int64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  __int128 v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  __int128 v1157;
  unsigned __int8 v1158;
  const char *v1159;
  size_t v1160;
  NSObject *v1161;
  uint64_t v1162;
  uint64_t v1163;
  NSObject *v1164;
  uint64_t v1165;
  uint64_t v1166;
  NSObject *v1167;
  size_t v1168;
  NSObject *v1169;
  NSObject *v1170;
  std::__shared_weak_count *v1171;
  unint64_t *v1172;
  unint64_t v1173;
  unint64_t v1174;
  os_log_t v1175;
  char *v1176;
  uint64_t v1177;
  uint64_t v1178;
  void *v1179;
  std::__shared_weak_count *v1180;
  unint64_t *v1181;
  unint64_t v1182;
  std::__shared_weak_count *v1183;
  unint64_t *v1184;
  unint64_t v1185;
  void *v1186;
  std::__shared_weak_count *v1187;
  unint64_t *v1188;
  unint64_t v1189;
  std::__shared_weak_count *v1190;
  unint64_t *v1191;
  unint64_t v1192;
  std::__shared_weak_count *v1193;
  unint64_t *v1194;
  unint64_t v1195;
  std::__shared_weak_count *v1196;
  unint64_t *v1197;
  unint64_t v1198;
  void *v1199;
  std::__shared_weak_count *v1200;
  unint64_t *v1201;
  unint64_t v1202;
  uint64_t v1203;
  _QWORD *v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  __int128 v1209;
  char v1210;
  uint64_t v1211;
  __int128 v1212;
  uint64_t v1213;
  _QWORD *v1214;
  _QWORD *v1215;
  uint64_t v1216;
  uint64_t i;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  __n128 *v1221;
  __n128 v1222;
  __n128 v1223;
  __n128 v1224;
  __n128 v1225;
  __n128 v1226;
  __n128 v1227;
  __n128 v1228;
  __n128 v1229;
  __n128 v1230;
  __n128 v1231;
  __n128 v1232;
  uint64_t **j;
  _OWORD *v1234;
  __int128 v1235;
  __int128 v1236;
  __int128 v1237;
  __int128 v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  _QWORD *v1245;
  _QWORD *v1246;
  uint64_t v1247;
  uint64_t k;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  uint64_t v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  _QWORD *v1260;
  _QWORD *v1261;
  uint64_t v1262;
  uint64_t m;
  _QWORD *v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  __int128 v1269;
  char v1270;
  uint64_t v1271;
  __int128 v1272;
  uint64_t v1273;
  _QWORD *v1274;
  _QWORD *v1275;
  uint64_t v1276;
  uint64_t n;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  __n128 *v1281;
  __n128 v1282;
  __n128 v1283;
  __n128 v1284;
  __n128 v1285;
  __n128 v1286;
  __n128 v1287;
  __n128 v1288;
  __n128 v1289;
  __n128 v1290;
  __n128 v1291;
  __n128 v1292;
  uint64_t **ii;
  _OWORD *v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  _QWORD *v1305;
  _QWORD *v1306;
  uint64_t v1307;
  uint64_t jj;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  __int128 v1313;
  __int128 v1314;
  __int128 v1315;
  uint64_t v1316;
  __int128 v1317;
  __int128 v1318;
  __int128 v1319;
  _QWORD *v1320;
  _QWORD *v1321;
  uint64_t v1322;
  uint64_t kk;
  char *v1324;
  _BYTE *v1325;
  size_t v1326;
  unint64_t v1327;
  uint64_t v1328;
  char *v1329;
  unint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  char *v1333;
  _BYTE *v1334;
  char *v1335;
  void *v1336;
  char *v1337;
  char *v1338;
  _BYTE *v1339;
  size_t v1340;
  unint64_t v1341;
  uint64_t v1342;
  char *v1343;
  unint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  char *v1347;
  _BYTE *v1348;
  char *v1349;
  void *v1350;
  char *v1351;
  _QWORD *v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  __int128 v1358;
  float64_t v1359;
  __int128 v1360;
  uint64_t v1361;
  _QWORD *v1362;
  _QWORD *v1363;
  uint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t *v1367;
  uint64_t v1368;
  unint64_t v1369;
  uint64_t v1370;
  unint64_t v1371;
  unint64_t v1372;
  uint64_t v1374;
  unint64_t i21;
  uint64_t v1376;
  uint64_t v1377;
  _OWORD *v1378;
  uint64_t v1379;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t *v1389;
  uint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  unint64_t v1394;
  uint64_t v1396;
  unint64_t i22;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  _OWORD *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  int v1411;
  uint64_t v1412;
  _QWORD *v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  unsigned int v1417;
  uint64_t v1418;
  unint64_t i23;
  __int128 v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned __int8 v1423;
  uint64_t v1424;
  uint64_t i24;
  unsigned __int8 v1426;
  unsigned __int8 v1427;
  uint64_t v1428;
  uint64_t i25;
  unsigned __int8 v1430;
  uint64_t v1431;
  unsigned int v1432;
  _QWORD *v1433;
  unsigned int v1434;
  uint64_t *v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  __int128 v1441;
  uint64_t v1442;
  __int128 v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  int8x16_t v1447;
  __int128 v1448;
  int8x16_t v1449;
  unint64_t v1450;
  int8x16_t v1451;
  int8x16_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  __int128 v1455;
  int v1456;
  unint64_t v1457;
  unint64_t v1458;
  uint64_t *v1459;
  uint64_t v1460;
  float64x2_t v1461;
  int64x2_t v1462;
  int64x2_t v1463;
  double v1464;
  float64x2_t v1466;
  float64x2_t v1467;
  int8x16_t v1468;
  double v1469;
  float64x2_t v1470;
  float64x2_t v1473;
  unint64_t v1474;
  size_t v1475;
  char *v1476;
  os_log_t v1477;
  os_log_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  const char *v1481;
  uint64_t v1482;
  const char *v1483;
  size_t v1484;
  unsigned __int8 v1485;
  unsigned __int8 v1486;
  const char *v1487;
  size_t v1488;
  _BYTE *v1489;
  uint64_t v1490;
  uint64_t v1491;
  _BYTE *v1492;
  uint64_t v1493;
  uint64_t v1494;
  NSObject *v1495;
  size_t v1496;
  void *v1497;
  _QWORD *v1498;
  size_t v1499;
  size_t v1500;
  _BYTE *v1501;
  void *v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  char v1506;
  _QWORD *v1507;
  uint64_t v1508;
  std::__shared_weak_count *v1509;
  unint64_t *v1510;
  unint64_t v1511;
  char *v1512;
  unint64_t *v1513;
  unint64_t v1514;
  std::__shared_weak_count *v1515;
  unint64_t *v1516;
  unint64_t v1517;
  unint64_t v1518;
  std::__shared_weak_count *v1519;
  unint64_t *v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  char *v1525;
  uint64_t v1526;
  const char *v1527;
  void *v1528;
  std::__shared_weak_count *v1529;
  unint64_t *v1530;
  unint64_t v1531;
  std::__shared_weak_count *v1532;
  unint64_t *v1533;
  unint64_t v1534;
  uint64_t v1535;
  std::__shared_weak_count *v1536;
  unint64_t *v1537;
  unint64_t v1538;
  std::__shared_weak_count *v1539;
  unint64_t *v1540;
  unint64_t v1541;
  std::__shared_weak_count *v1542;
  unint64_t *v1543;
  unint64_t v1544;
  std::__shared_weak_count *v1545;
  unint64_t *v1546;
  unint64_t v1547;
  const char *v1548;
  std::__shared_weak_count *v1549;
  unint64_t *v1550;
  unint64_t v1551;
  NSObject *v1552;
  uint64_t v1553;
  uint64_t v1554;
  _QWORD *v1555;
  _QWORD *v1556;
  int v1557;
  unint64_t v1558;
  unint64_t v1559;
  _QWORD *v1560;
  uint64_t v1561;
  NSObject **v1562;
  NSObject **v1563;
  unsigned __int8 *v1564;
  uint64_t v1565;
  uint64_t v1566;
  size_t v1567;
  const char *v1568;
  NSObject *v1569;
  NSObject *v1570;
  unsigned __int8 v1571;
  const char *v1572;
  size_t v1573;
  NSObject *v1574;
  uint64_t v1575;
  uint64_t v1576;
  NSObject *v1577;
  NSObject *v1578;
  uint64_t v1579;
  uint64_t v1580;
  size_t v1581;
  NSObject *v1582;
  NSObject *v1583;
  std::__shared_weak_count *v1584;
  unint64_t *v1585;
  unint64_t v1586;
  unint64_t v1587;
  os_log_t v1588;
  uint64_t v1589;
  char *v1590;
  uint64_t v1591;
  uint64_t v1592;
  void *v1593;
  std::__shared_weak_count *v1594;
  unint64_t *v1595;
  unint64_t v1596;
  std::__shared_weak_count *v1597;
  unint64_t *v1598;
  unint64_t v1599;
  void *v1600;
  std::__shared_weak_count *v1601;
  unint64_t *v1602;
  unint64_t v1603;
  std::__shared_weak_count *v1604;
  unint64_t *v1605;
  unint64_t v1606;
  std::__shared_weak_count *v1607;
  unint64_t *v1608;
  unint64_t v1609;
  std::__shared_weak_count *v1610;
  unint64_t *v1611;
  unint64_t v1612;
  void *v1613;
  _QWORD *v1614;
  uint64_t v1615;
  double *v1616;
  double *v1617;
  std::__shared_weak_count *v1618;
  unint64_t *v1619;
  unint64_t v1620;
  int v1621;
  unint64_t v1622;
  unint64_t v1623;
  uint64_t v1625;
  uint64_t v1626;
  size_t v1627;
  const char *v1628;
  unsigned __int8 v1629;
  unsigned __int8 v1630;
  const char *v1631;
  size_t v1632;
  NSObject *v1633;
  uint64_t v1634;
  uint64_t v1635;
  NSObject *v1636;
  NSObject *v1637;
  uint64_t v1638;
  uint64_t v1639;
  size_t v1640;
  NSObject *v1641;
  NSObject *v1642;
  std::__shared_weak_count *v1643;
  unint64_t *v1644;
  unint64_t v1645;
  unint64_t v1646;
  os_log_t v1647;
  char *v1648;
  uint64_t v1649;
  uint64_t v1650;
  void *v1651;
  std::__shared_weak_count *v1652;
  unint64_t *v1653;
  unint64_t v1654;
  std::__shared_weak_count *v1655;
  unint64_t *v1656;
  unint64_t v1657;
  void *v1658;
  std::__shared_weak_count *v1659;
  unint64_t *v1660;
  unint64_t v1661;
  std::__shared_weak_count *v1662;
  unint64_t *v1663;
  unint64_t v1664;
  std::__shared_weak_count *v1665;
  unint64_t *v1666;
  unint64_t v1667;
  std::__shared_weak_count *v1668;
  unint64_t *v1669;
  unint64_t v1670;
  void *v1671;
  std::__shared_weak_count *v1672;
  unint64_t *v1673;
  unint64_t v1674;
  int v1675;
  int v1676;
  unint64_t v1677;
  double v1678;
  uint64_t v1679;
  uint64_t v1680;
  size_t v1681;
  const char *v1682;
  unsigned __int8 v1683;
  unsigned __int8 v1684;
  const char *v1685;
  size_t v1686;
  NSObject *v1687;
  uint64_t v1688;
  uint64_t v1689;
  NSObject *v1690;
  NSObject *v1691;
  uint64_t v1692;
  uint64_t v1693;
  size_t v1694;
  NSObject *v1695;
  NSObject *v1696;
  std::__shared_weak_count *v1697;
  unint64_t *v1698;
  unint64_t v1699;
  unint64_t v1700;
  os_log_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  char *v1708;
  uint64_t v1709;
  uint64_t v1710;
  void *v1711;
  std::__shared_weak_count *v1712;
  unint64_t *v1713;
  unint64_t v1714;
  std::__shared_weak_count *v1715;
  unint64_t *v1716;
  unint64_t v1717;
  void *v1718;
  std::__shared_weak_count *v1719;
  unint64_t *v1720;
  unint64_t v1721;
  std::__shared_weak_count *v1722;
  unint64_t *v1723;
  unint64_t v1724;
  std::__shared_weak_count *v1725;
  unint64_t *v1726;
  unint64_t v1727;
  std::__shared_weak_count *v1728;
  unint64_t *v1729;
  unint64_t v1730;
  NSObject *v1731;
  NSObject *v1732;
  NSObject *v1733;
  NSObject *v1734;
  NSObject *v1735;
  void *v1736;
  double v1737;
  double v1738;
  double v1739;
  double v1740;
  double v1741;
  double v1742;
  std::__shared_weak_count *v1743;
  unint64_t *v1744;
  unint64_t v1745;
  uint64_t v1746;
  double v1747;
  int v1748;
  unint64_t v1749;
  unint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  size_t v1753;
  const char *v1754;
  int v1755;
  unsigned __int8 v1756;
  const char *v1757;
  size_t v1758;
  NSObject *v1759;
  unint64_t v1760;
  uint64_t v1761;
  int v1762;
  int v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  NSObject *v1767;
  NSObject *v1768;
  uint64_t v1769;
  uint64_t v1770;
  float64x2_t v1771;
  int8x16_t v1773;
  int8x16_t v1774;
  float64x2_t v1777;
  int64x2_t v1779;
  int8x16_t v1782;
  double v1783;
  size_t v1784;
  NSObject *v1785;
  NSObject *v1786;
  std::__shared_weak_count *v1787;
  unint64_t *v1788;
  unint64_t v1789;
  unint64_t v1790;
  os_log_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  char *v1796;
  uint64_t v1797;
  uint64_t v1798;
  void *v1799;
  std::__shared_weak_count *v1800;
  unint64_t *v1801;
  unint64_t v1802;
  std::__shared_weak_count *v1803;
  unint64_t *v1804;
  unint64_t v1805;
  void *v1806;
  std::__shared_weak_count *v1807;
  unint64_t *v1808;
  unint64_t v1809;
  std::__shared_weak_count *v1810;
  unint64_t *v1811;
  unint64_t v1812;
  std::__shared_weak_count *v1813;
  unint64_t *v1814;
  unint64_t v1815;
  std::__shared_weak_count *v1816;
  unint64_t *v1817;
  unint64_t v1818;
  NSObject *v1819;
  NSObject *v1820;
  NSObject *v1821;
  void *v1822;
  std::__shared_weak_count *v1823;
  unint64_t *v1824;
  unint64_t v1825;
  uint64_t v1826;
  int v1827;
  uint64_t v1828;
  uint64_t v1829;
  _QWORD *v1830;
  _QWORD *v1831;
  int v1832;
  int v1833;
  unint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  size_t v1837;
  const char *v1838;
  unsigned __int8 v1839;
  unsigned __int8 v1840;
  const char *v1841;
  size_t v1842;
  NSObject *v1843;
  uint64_t v1844;
  uint64_t v1845;
  NSObject *v1846;
  NSObject *v1847;
  uint64_t v1848;
  uint64_t v1849;
  size_t v1850;
  NSObject *v1851;
  NSObject *v1852;
  unint64_t *v1853;
  char *v1854;
  std::__shared_weak_count *v1855;
  unint64_t *v1856;
  unint64_t v1857;
  unint64_t v1858;
  unint64_t v1859;
  std::__shared_weak_count *v1860;
  unint64_t *v1861;
  unint64_t v1862;
  Class v1863;
  uint64_t v1864;
  int v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  char *v1878;
  uint64_t v1879;
  uint64_t v1880;
  void *v1881;
  std::__shared_weak_count *v1882;
  unint64_t *v1883;
  unint64_t v1884;
  std::__shared_weak_count *v1885;
  unint64_t *v1886;
  unint64_t v1887;
  void *v1888;
  std::__shared_weak_count *v1889;
  unint64_t *v1890;
  unint64_t v1891;
  std::__shared_weak_count *v1892;
  unint64_t *v1893;
  unint64_t v1894;
  std::__shared_weak_count *v1895;
  unint64_t *v1896;
  unint64_t v1897;
  std::__shared_weak_count *v1898;
  unint64_t *v1899;
  unint64_t v1900;
  int v1901;
  NSObject *v1902;
  NSObject *v1903;
  NSObject *v1904;
  NSObject *v1905;
  NSObject *v1906;
  NSObject *v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  NSObject *v1912;
  uint64_t v1913;
  void *v1914;
  std::__shared_weak_count *v1915;
  unint64_t *v1916;
  unint64_t v1917;
  _QWORD *v1918;
  _QWORD *v1919;
  uint64_t v1920;
  _QWORD *v1921;
  uint64_t v1922;
  double *v1923;
  int v1924;
  unint64_t v1925;
  unint64_t v1926;
  double v1928;
  uint64_t v1929;
  const char *v1930;
  int v1931;
  size_t v1932;
  unsigned __int8 v1933;
  unsigned __int8 v1934;
  const char *v1935;
  size_t v1936;
  NSObject *v1937;
  uint64_t v1938;
  uint64_t v1939;
  NSObject *v1940;
  NSObject *v1941;
  uint64_t v1942;
  uint64_t v1943;
  size_t v1944;
  NSObject *v1945;
  NSObject *v1946;
  unint64_t *v1947;
  char *v1948;
  std::__shared_weak_count *v1949;
  unint64_t *v1950;
  unint64_t v1951;
  unint64_t v1952;
  unint64_t v1953;
  std::__shared_weak_count *v1954;
  unint64_t *v1955;
  unint64_t v1956;
  os_log_t v1957;
  Class v1958;
  uint64_t v1959;
  int v1960;
  uint64_t v1961;
  uint64_t v1962;
  uint64_t v1963;
  char *v1964;
  uint64_t v1965;
  const char *v1966;
  void *v1967;
  std::__shared_weak_count *v1968;
  unint64_t *v1969;
  unint64_t v1970;
  std::__shared_weak_count *v1971;
  unint64_t *v1972;
  unint64_t v1973;
  void *v1974;
  std::__shared_weak_count *v1975;
  unint64_t *v1976;
  unint64_t v1977;
  std::__shared_weak_count *v1978;
  unint64_t *v1979;
  unint64_t v1980;
  std::__shared_weak_count *v1981;
  unint64_t *v1982;
  unint64_t v1983;
  std::__shared_weak_count *v1984;
  unint64_t *v1985;
  unint64_t v1986;
  int v1987;
  NSObject *v1988;
  NSObject *v1989;
  NSObject *v1990;
  void *v1991;
  double v1992;
  double v1993;
  std::__shared_weak_count *v1994;
  unint64_t *v1995;
  unint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t *v2000;
  unint64_t v2001;
  unsigned int v2002;
  unsigned int v2003;
  uint64_t *v2004;
  uint64_t *v2005;
  unint64_t v2006;
  unint64_t v2007;
  uint64_t *v2008;
  uint64_t v2009;
  unsigned int v2010;
  BOOL v2011;
  uint64_t v2012;
  _DWORD *v2013;
  int v2014;
  int v2015;
  unint64_t v2016;
  unint64_t v2017;
  uint64_t v2018;
  const char *v2019;
  size_t v2020;
  unsigned __int8 v2021;
  unsigned __int8 v2022;
  const char *v2023;
  size_t v2024;
  NSObject *v2025;
  uint64_t v2026;
  uint64_t v2027;
  NSObject *v2028;
  NSObject *v2029;
  uint64_t v2030;
  uint64_t v2031;
  size_t v2032;
  NSObject *v2033;
  NSObject *v2034;
  unint64_t *v2035;
  char *v2036;
  std::__shared_weak_count *v2037;
  unint64_t *v2038;
  unint64_t v2039;
  unint64_t v2040;
  unint64_t v2041;
  std::__shared_weak_count *v2042;
  unint64_t *v2043;
  unint64_t v2044;
  os_log_t v2045;
  Class v2046;
  uint64_t v2047;
  int v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  char *v2053;
  uint64_t v2054;
  const char *v2055;
  void *v2056;
  std::__shared_weak_count *v2057;
  unint64_t *v2058;
  unint64_t v2059;
  std::__shared_weak_count *v2060;
  unint64_t *v2061;
  unint64_t v2062;
  uint64_t v2063;
  std::__shared_weak_count *v2064;
  unint64_t *v2065;
  unint64_t v2066;
  std::__shared_weak_count *v2067;
  unint64_t *v2068;
  unint64_t v2069;
  std::__shared_weak_count *v2070;
  unint64_t *v2071;
  unint64_t v2072;
  std::__shared_weak_count *v2073;
  unint64_t *v2074;
  unint64_t v2075;
  int v2076;
  void *v2077;
  std::__shared_weak_count *v2078;
  unint64_t *v2079;
  unint64_t v2080;
  uint64_t v2081;
  _QWORD *v2082;
  int v2083;
  int v2084;
  unint64_t v2085;
  _QWORD *v2086;
  _QWORD *v2087;
  _QWORD *v2088;
  uint64_t *v2089;
  size_t v2090;
  char *v2091;
  os_log_t v2092;
  os_log_t *v2093;
  os_log_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  const char *v2097;
  uint64_t v2098;
  size_t v2099;
  const char *v2100;
  unsigned __int8 v2101;
  unsigned __int8 v2102;
  const char *v2103;
  size_t v2104;
  _BYTE *v2105;
  uint64_t v2106;
  uint64_t v2107;
  _BYTE *v2108;
  NSObject *v2109;
  uint64_t v2110;
  uint64_t v2111;
  size_t v2112;
  void *v2113;
  _QWORD *v2114;
  size_t v2115;
  size_t v2116;
  _BYTE *v2117;
  void *v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  char v2122;
  _QWORD *v2123;
  uint64_t v2124;
  std::__shared_weak_count *v2125;
  unint64_t *v2126;
  unint64_t v2127;
  char *v2128;
  unint64_t *v2129;
  unint64_t v2130;
  std::__shared_weak_count *v2131;
  unint64_t *v2132;
  unint64_t v2133;
  unint64_t v2134;
  std::__shared_weak_count *v2135;
  unint64_t *v2136;
  unint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  char *v2141;
  uint64_t v2142;
  uint64_t v2143;
  void *v2144;
  std::__shared_weak_count *v2145;
  unint64_t *v2146;
  unint64_t v2147;
  std::__shared_weak_count *v2148;
  unint64_t *v2149;
  unint64_t v2150;
  uint64_t v2151;
  std::__shared_weak_count *v2152;
  unint64_t *v2153;
  unint64_t v2154;
  std::__shared_weak_count *v2155;
  unint64_t *v2156;
  unint64_t v2157;
  std::__shared_weak_count *v2158;
  unint64_t *v2159;
  unint64_t v2160;
  std::__shared_weak_count *v2161;
  unint64_t *v2162;
  unint64_t v2163;
  const char *v2164;
  std::__shared_weak_count *v2165;
  unint64_t *v2166;
  unint64_t v2167;
  uint64_t v2168;
  uint64_t v2169;
  uint64_t *v2170;
  int v2171;
  int v2172;
  unint64_t v2173;
  _QWORD *v2174;
  _QWORD *v2175;
  _QWORD *v2176;
  _QWORD *v2180;
  uint64_t *v2181;
  uint64_t *v2182;
  size_t v2183;
  char *v2184;
  os_log_t v2185;
  os_log_t *v2186;
  os_log_t v2187;
  uint64_t v2188;
  uint64_t v2189;
  const char *v2190;
  uint64_t v2191;
  uint64_t v2192;
  size_t v2193;
  const char *v2194;
  unsigned __int8 v2195;
  unsigned __int8 v2196;
  const char *v2197;
  size_t v2198;
  _BYTE *v2199;
  uint64_t v2200;
  uint64_t v2201;
  _BYTE *v2202;
  NSObject *v2203;
  uint64_t v2204;
  uint64_t v2205;
  size_t v2206;
  void *v2207;
  _QWORD *v2208;
  size_t v2209;
  size_t v2210;
  _BYTE *v2211;
  void *v2212;
  int v2213;
  uint64_t v2214;
  uint64_t v2215;
  uint64_t v2216;
  char v2217;
  _QWORD *v2218;
  uint64_t v2219;
  std::__shared_weak_count *v2220;
  unint64_t *v2221;
  unint64_t v2222;
  char *v2223;
  unint64_t *v2224;
  unint64_t v2225;
  std::__shared_weak_count *v2226;
  unint64_t *v2227;
  unint64_t v2228;
  unint64_t v2229;
  std::__shared_weak_count *v2230;
  unint64_t *v2231;
  unint64_t v2232;
  uint64_t v2233;
  uint64_t v2234;
  uint64_t v2235;
  char *v2236;
  uint64_t v2237;
  uint64_t v2238;
  void *v2239;
  std::__shared_weak_count *v2240;
  unint64_t *v2241;
  unint64_t v2242;
  std::__shared_weak_count *v2243;
  unint64_t *v2244;
  unint64_t v2245;
  uint64_t v2246;
  std::__shared_weak_count *v2247;
  unint64_t *v2248;
  unint64_t v2249;
  std::__shared_weak_count *v2250;
  unint64_t *v2251;
  unint64_t v2252;
  std::__shared_weak_count *v2253;
  unint64_t *v2254;
  unint64_t v2255;
  std::__shared_weak_count *v2256;
  unint64_t *v2257;
  unint64_t v2258;
  const char *v2259;
  std::__shared_weak_count *v2260;
  unint64_t *v2261;
  unint64_t v2262;
  int v2263;
  unint64_t v2264;
  unint64_t v2265;
  uint64_t v2266;
  uint64_t v2267;
  size_t v2268;
  const char *v2269;
  unsigned __int8 v2270;
  unsigned __int8 v2271;
  const char *v2272;
  size_t v2273;
  NSObject *v2274;
  uint64_t v2275;
  uint64_t v2276;
  NSObject *v2277;
  NSObject *v2278;
  uint64_t v2279;
  uint64_t v2280;
  size_t v2281;
  NSObject *v2282;
  NSObject *v2283;
  std::__shared_weak_count *v2284;
  unint64_t *v2285;
  unint64_t v2286;
  unint64_t v2287;
  os_log_t v2288;
  char *v2289;
  uint64_t v2290;
  uint64_t v2291;
  void *v2292;
  std::__shared_weak_count *v2293;
  unint64_t *v2294;
  unint64_t v2295;
  std::__shared_weak_count *v2296;
  unint64_t *v2297;
  unint64_t v2298;
  void *v2299;
  std::__shared_weak_count *v2300;
  unint64_t *v2301;
  unint64_t v2302;
  std::__shared_weak_count *v2303;
  unint64_t *v2304;
  unint64_t v2305;
  std::__shared_weak_count *v2306;
  unint64_t *v2307;
  unint64_t v2308;
  std::__shared_weak_count *v2309;
  unint64_t *v2310;
  unint64_t v2311;
  void *v2312;
  std::__shared_weak_count *v2313;
  unint64_t *v2314;
  unint64_t v2315;
  _BYTE *v2316;
  _QWORD *v2317;
  uint64_t v2318;
  uint64_t v2319;
  uint64_t v2320;
  uint64_t v2321;
  uint64_t v2322;
  __int128 v2323;
  float64_t v2324;
  __int128 v2325;
  uint64_t v2326;
  _QWORD *v2327;
  _QWORD *v2328;
  uint64_t v2329;
  uint64_t v2330;
  unint64_t v2331;
  uint64_t *v2332;
  uint64_t v2333;
  unint64_t v2334;
  uint64_t v2335;
  unint64_t v2336;
  unint64_t v2337;
  uint64_t v2339;
  unint64_t i26;
  uint64_t v2341;
  uint64_t v2342;
  _OWORD *v2343;
  uint64_t v2344;
  uint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  unint64_t v2353;
  uint64_t *v2354;
  uint64_t v2355;
  unint64_t v2356;
  uint64_t v2357;
  unint64_t v2358;
  unint64_t v2359;
  uint64_t v2361;
  unint64_t i27;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  _OWORD *v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  _OWORD *v2376;
  __int128 v2377;
  __int128 *v2378;
  __int128 v2379;
  __int128 v2380;
  __int128 v2381;
  __int128 v2382;
  __int128 v2383;
  __int128 v2384;
  __int128 v2385;
  __int128 v2386;
  uint64_t v2387;
  __int128 v2388;
  __int128 v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  _BOOL4 v2394;
  unint64_t v2395;
  double v2396;
  uint64_t v2397;
  _BOOL4 v2398;
  unint64_t v2399;
  double v2400;
  uint64_t v2401;
  int v2402;
  uint64_t v2403;
  unint64_t v2404;
  double v2405;
  int v2406;
  int v2407;
  NSObject *v2409;
  NSObject *v2410;
  os_log_t v2411;
  uint64_t v2412;
  unsigned int v2413;
  unint64_t v2414;
  uint64_t v2415;
  unsigned int v2416;
  unsigned __int8 v2417;
  uint64_t i28;
  uint64_t v2419;
  unsigned __int8 v2420;
  unsigned __int8 v2421;
  uint64_t i29;
  uint64_t v2423;
  unsigned __int8 v2424;
  unsigned __int8 v2425;
  uint64_t i30;
  uint64_t v2427;
  unsigned __int8 v2428;
  unsigned __int8 v2429;
  uint64_t i31;
  uint64_t v2431;
  unsigned __int8 v2432;
  uint64_t *v2433;
  uint64_t *i32;
  char **v2435;
  _QWORD *v2436;
  char *v2437;
  int v2438;
  unint64_t v2439;
  int v2440;
  unint64_t v2441;
  uint64_t v2442;
  _QWORD *v2443;
  _QWORD *v2444;
  _QWORD *v2445;
  _QWORD *v2446;
  uint64_t v2447;
  double v2448;
  double v2449;
  uint64_t v2450;
  _BOOL4 v2451;
  char **v2452;
  char *v2453;
  uint64_t v2454;
  int v2455;
  unint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint8x8_t v2459;
  unint64_t v2460;
  uint64_t **v2461;
  uint64_t *v2462;
  unint64_t v2463;
  uint64_t v2464;
  char *v2465;
  int v2466;
  int v2467;
  uint64_t v2468;
  unint64_t v2469;
  char *v2470;
  char *v2471;
  int v2472;
  unint64_t v2473;
  _QWORD *v2474;
  _QWORD *v2475;
  void *v2476;
  NSObject *v2479;
  NSObject *v2480;
  const char *v2481;
  NSObject *v2482;
  NSObject *v2483;
  unint64_t v2484;
  NSObject *v2485;
  NSObject *v2486;
  void *v2487[2];
  NSObject *v2488;
  NSObject *v2489;
  void *v2490[2];
  void *v2491[2];
  double v2492;
  _QWORD *v2493;
  const char *v2494;
  uint64_t v2495;
  float64_t v2496;
  uint64_t v2497;
  _QWORD *v2498;
  _QWORD *v2499;
  _QWORD *v2500;
  uint64_t v2501;
  uint64_t v2502;
  _QWORD *v2503;
  uint64_t v2504;
  unint64_t v2505;
  int v2506;
  unint64_t v2507;
  int v2508;
  uint64_t v2509;
  float64x2_t v2510;
  NSObject *v2511;
  const char *v2512;
  unsigned int v2513;
  uint64_t v2514;
  uint64_t v2515;
  long double v2516;
  const char *__s;
  int __sa;
  int __sb;
  unint64_t __sc;
  unint64_t __sd;
  _QWORD *__se;
  const char *__sf;
  int __sg;
  float64_t __sh;
  os_log_t __si[3];
  uint64_t __sj;
  _QWORD *__sk;
  const char *__sl;
  int __sm;
  _QWORD *__sn;
  char *__so[2];
  long double __sp;
  _QWORD v2535[4];
  void *v2536[2];
  void *v2537[2];
  const char *v2538;
  int v2539;
  const char *v2540;
  uint64_t v2541;
  std::__shared_weak_count *v2542;
  char *__dst;
  size_t v2544;
  int64_t v2545;
  void *v2546[2];
  int64_t v2547;
  char *v2548;
  std::__shared_weak_count *v2549;
  int **v2550;
  os_log_t oslog[12];
  _BYTE v2552[48];
  __int128 v2553;
  uint64_t v2554;
  int v2555;
  __int128 v2556;
  _BYTE v2557[512];
  _BYTE *v2558;
  uint64_t v2559;
  uint64_t v2560;
  _BYTE v2561[512];
  _BYTE *v2562;
  uint64_t v2563;
  __int128 v2564;
  _BYTE v2565[512];
  _BYTE *v2566;
  uint64_t v2567;
  __int128 v2568;
  uint64_t v2569;
  _BYTE v2570[512];
  _BYTE *v2571;
  uint64_t v2572;
  __int128 v2573;
  _BYTE object[48];
  __int128 v2575;
  float64x2_t v2576;
  __int128 v2577;
  float64x2_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  _QWORD v2581[2];
  _BYTE v2582[24];
  uint64_t v2583;

  v2583 = *MEMORY[0x24BDAC8D0];
  sub_20F82FD50(&v2550);
  if (*v2550[7] > 2)
    goto LABEL_142;
  v3 = *((unsigned __int8 *)v2550 + 72);
  v4 = sub_20E8C31DC((uint64_t)v2550, "OSLogSurrogateAppender", 1, 0);
  v5 = v4;
  _ZF = !v3 && v4 == 0;
  if (_ZF)
    goto LABEL_142;
  sub_20E863438((uint64_t)oslog);
  sub_20E86A980(&oslog[2], (uint64_t)"Final cost was ", 15);
  std::ostream::operator<<();
  if ((v2552[24] & 0x10) != 0)
  {
    v9 = *(os_log_t *)&v2552[16];
    if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
    {
      *(os_log_t *)&v2552[16] = oslog[9];
      v9 = oslog[9];
    }
    v10 = oslog[8];
    v7 = (char *)v9 - (char *)oslog[8];
    if ((unint64_t)((char *)v9 - (char *)oslog[8]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_64;
  }
  else
  {
    if ((v2552[24] & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v2545) = 0;
      p_dst = (char *)&__dst;
      goto LABEL_19;
    }
    v10 = oslog[5];
    v7 = (char *)oslog[7] - (char *)oslog[5];
    if ((os_log_t)((char *)oslog[7] - (char *)oslog[5]) > (os_log_t)0x7FFFFFFFFFFFFFF7)
LABEL_64:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (char *)operator new(v11 + 1);
    v2545 = v12 | 0x8000000000000000;
    __dst = p_dst;
    v2544 = v7;
    goto LABEL_18;
  }
  HIBYTE(v2545) = v7;
  p_dst = (char *)&__dst;
  if (v7)
LABEL_18:
    memmove(p_dst, v10, v7);
LABEL_19:
  p_dst[v7] = 0;
  v2536[0] = &v2550;
  v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v2537[1]) = 2;
  v2538 = "unknown file";
  v2539 = 3133;
  v2541 = 0;
  v2542 = 0;
  v2540 = "unknown function";
  if (v2545 >= 0)
    v13 = (const char *)&__dst;
  else
    v13 = __dst;
  v14 = *(_QWORD *)v2536[0];
  v15 = (const char *)(*(_QWORD *)v2536[0] + 16);
  __s = v15;
  if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
  {
    v15 = *(const char **)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v18 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_26;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_26:
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8;
  else
    v19 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v20 = byte_254A4A4F8[23];
  else
    v20 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v19, v15);
  v21 = &object[8];
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v20 >= 0x17)
  {
    v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v22 = v20 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *(_QWORD *)&object[24] = v23 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v21;
    *(_QWORD *)&object[16] = v20;
    goto LABEL_39;
  }
  object[31] = v20;
  if (v20)
LABEL_39:
    memmove(v21, v19, v20);
  v21[v20] = 0;
  object[32] = 1;
  v24 = &object[40];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v26 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v26 = v16 | 7;
    v27 = v26 + 1;
    v24 = operator new(v26 + 1);
    *((_QWORD *)&v2575 + 1) = v27 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v24;
    *(_QWORD *)&v2575 = v16;
  }
  else
  {
    HIBYTE(v2575) = v16;
    if (!v16)
    {
      object[40] = 0;
      LOBYTE(v2576.f64[0]) = 1;
      v25 = *(NSObject **)object;
      if ((SHIBYTE(v2575) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_50;
    }
  }
  memmove(v24, v15, v16);
  v24[v16] = 0;
  LOBYTE(v2576.f64[0]) = 1;
  v25 = *(NSObject **)object;
  if ((SHIBYTE(v2575) & 0x80000000) == 0)
  {
LABEL_44:
    if (!object[32])
      goto LABEL_53;
    goto LABEL_51;
  }
LABEL_50:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_53;
LABEL_51:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_53:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!v5 || !*(_QWORD *)(v5 + 24))
  {
    os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v13;
    v34 = (void *)_os_log_send_and_compose_impl();
    if (v34)
      free(v34);
    goto LABEL_128;
  }
  v28 = _os_log_pack_size();
  v29 = operator new(v28, (std::align_val_t)8uLL);
  v30 = (_QWORD *)operator new();
  *v30 = &off_24C9ABB80;
  v30[1] = 0;
  v30[2] = 0;
  v30[3] = v29;
  v2546[0] = v29;
  v2546[1] = v29;
  v2549 = 0;
  v2547 = (int64_t)v30;
  v2548 = 0;
  v31 = strlen(v13);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    v33 = operator new(v35 + 1);
    *(_QWORD *)&v2582[8] = v32;
    *(_QWORD *)&v2582[16] = v36 | 0x8000000000000000;
    *(_QWORD *)v2582 = v33;
    goto LABEL_68;
  }
  v2582[23] = v31;
  v33 = v2582;
  if (v31)
LABEL_68:
    memcpy(v33, v13, v32);
  v33[v32] = 0;
  v37 = *(_QWORD *)v2582;
  v2581[0] = *(_QWORD *)&v2582[8];
  *(_QWORD *)((char *)v2581 + 7) = *(_QWORD *)&v2582[15];
  v38 = v2582[23];
  v39 = operator new(0x38uLL);
  v39[1] = 0;
  v39[2] = 0;
  v39[3] = off_24C9ABC20;
  *v39 = &off_24C9ABBD0;
  v40 = v2581[0];
  v39[4] = v37;
  v39[5] = v40;
  *(_QWORD *)((char *)v39 + 47) = *(_QWORD *)((char *)v2581 + 7);
  *((_BYTE *)v39 + 55) = v38;
  v2581[0] = 0;
  *(_QWORD *)((char *)v2581 + 7) = 0;
  v41 = v2549;
  v2548 = (char *)(v39 + 3);
  v2549 = (std::__shared_weak_count *)v39;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_OWORD *)object = *(_OWORD *)v2546;
  v44 = v2548;
  *(_QWORD *)&object[16] = v2547;
  if (v2547)
  {
    v45 = (unint64_t *)(v2547 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = v2549;
  *(_QWORD *)&object[24] = v44;
  *(_QWORD *)&object[32] = v2549;
  if (v2549)
  {
    v48 = (unint64_t *)&v2549->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    *(_QWORD *)&object[40] = v44;
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    *(_QWORD *)&object[40] = v44;
  }
  v51 = (std::__shared_weak_count *)v2547;
  if (v2547)
  {
    v52 = (unint64_t *)(v2547 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(_QWORD *)object;
  if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
    v55 = *(_QWORD *)&object[40] + 8;
  else
    v55 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
  v56 = _os_log_pack_fill();
  *(_DWORD *)v56 = 136315138;
  *(_QWORD *)(v56 + 4) = v55;
  v57 = (char *)operator new();
  v58 = *(unsigned __int8 *)(v14 + 39);
  v59 = __s;
  if ((v58 & 0x80u) != 0)
  {
    v59 = *(const char **)(v14 + 16);
    v58 = *(_QWORD *)(v14 + 24);
  }
  *(_QWORD *)v57 = v54;
  *(_OWORD *)(v57 + 8) = *(_OWORD *)&object[8];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)&object[16] = 0;
  *(_OWORD *)(v57 + 24) = *(_OWORD *)&object[24];
  *(_QWORD *)&object[24] = 0;
  *(_QWORD *)&object[32] = 0;
  *((_QWORD *)v57 + 5) = v59;
  *((_QWORD *)v57 + 6) = v58;
  v57[56] = 2;
  *(_QWORD *)v2582 = 0;
  v2546[0] = v57;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v5 + 24) + 40))(*(_QWORD *)(v5 + 24), v2546);
  v60 = v2546[0];
  v2546[0] = 0;
  if (v60)
  {
    v61 = (std::__shared_weak_count *)*((_QWORD *)v60 + 4);
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)v60 + 2);
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    MEMORY[0x212BC6398](v60, 0x10F0C40B62ED6C6);
    v67 = *(_QWORD *)v2582;
    *(_QWORD *)v2582 = 0;
    if (v67)
    {
      v68 = *(std::__shared_weak_count **)(v67 + 32);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = *(std::__shared_weak_count **)(v67 + 16);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
    }
  }
  v74 = *(std::__shared_weak_count **)&object[32];
  if (*(_QWORD *)&object[32])
  {
    v75 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = *(std::__shared_weak_count **)&object[16];
  if (*(_QWORD *)&object[16])
  {
    v78 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
LABEL_128:
  if (v3)
  {
    v80 = (const char *)&__dst;
    if (v2545 < 0)
      v80 = __dst;
    sub_20E8C003C((uint64_t)v2536, "%s", v80);
    sub_20E863570((uint64_t)v2536);
  }
  sub_20E863570((uint64_t)v2536);
  v81 = v2542;
  if (v2542)
  {
    v82 = (unint64_t *)&v2542->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v2545) < 0)
    operator delete(__dst);
  oslog[0] = *(os_log_t *)MEMORY[0x24BEDB7F0];
  v84 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
  *(os_log_t *)((char *)oslog + (unint64_t)oslog[0][-3].isa) = *(os_log_t *)(MEMORY[0x24BEDB7F0] + 64);
  oslog[2] = v84;
  oslog[3] = (os_log_t)(MEMORY[0x24BEDB848] + 16);
  if ((v2552[15] & 0x80000000) != 0)
    operator delete(oslog[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v2552[32]);
LABEL_142:
  if (*(_DWORD *)(a2 + 2276) != 3
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3134, (uint64_t)"state_ == State::WithinUpdate", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  kdebug_trace();
  v85 = *(_QWORD *)(a2 + 8216);
  if (!*(_BYTE *)v85)
  {
    v99 = *(_QWORD *)(v85 + 16);
    v100 = *(char **)(v99 + 6592);
    v101 = *(char **)(v99 + 6600);
    if (v101 == v100)
      goto LABEL_514;
    v102 = 0x2E8BA2E8BA2E8BA3 * ((v101 - v100) >> 4);
    do
    {
      v103 = v102 >> 1;
      v104 = (unint64_t *)&v100[176 * (v102 >> 1)];
      v106 = *v104;
      v105 = (char *)(v104 + 22);
      v102 += ~(v102 >> 1);
      if (v106 < 0xA)
        v100 = v105;
      else
        v102 = v103;
    }
    while (v102);
    if (v100 == v101 || *(_QWORD *)v100 != 10)
      goto LABEL_514;
    sub_20F9B2A4C(v2582);
    if (**(int **)(*(_QWORD *)v2582 + 56) > 2
      || (__sb = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72),
          v107 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0),
          ((v107 == 0) & ~(__sb != 0)) != 0))
    {
LABEL_512:
      if (v100[72])
        v100[72] = 0;
LABEL_514:
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8216) + 1720))
      {
        v320 = *(unsigned int *)(a2 + 1940);
        v321 = *(_QWORD *)(a2 + 2864);
      }
      else
      {
        v321 = *(_QWORD *)(a2 + 2864);
        v320 = (v321 - *(_QWORD *)(a2 + 2856)) >> 2;
      }
      v322 = (int *)(a2 + 5288);
      v323 = (int *)(v321 - 4);
      v324 = -4 * v320;
      v325 = v323;
      while (v324)
      {
        v326 = *v325--;
        v324 += 4;
        if (*v322 == v326)
        {
          *(_BYTE *)(a2 + 5316) = 1;
          goto LABEL_522;
        }
      }
      *(_BYTE *)(a2 + 5316) = 0;
      v322 = v323;
LABEL_522:
      v327 = *v322;
      v328 = *(_QWORD *)(v85 + 16);
      kdebug_trace();
      v329 = v328 + 62536;
      *(_DWORD *)(a2 + 7676) = 0;
      if (*(_BYTE *)(v328 + 62906))
      {
        v330 = *(_QWORD *)(v328 + 6448);
        v331 = *(_QWORD *)(v328 + 6456);
        if (v330 == v331)
        {
          v333 = 0;
        }
        else
        {
          v332 = 0;
          v333 = 0;
          do
          {
            if (!*(_BYTE *)(v330 + 176))
            {
              if (*(_BYTE *)(v330 + 177))
              {
                ++v333;
                if (*(_DWORD *)(*(_QWORD *)(v330 + 208) + 16) == v327)
                  *(_DWORD *)(a2 + 7676) = ++v332;
              }
            }
            v330 += 304;
          }
          while (v330 != v331);
        }
      }
      else
      {
        v334 = *(int **)(v328 + 62768);
        v335 = v334[113488];
        if (v335)
        {
          v336 = 0;
          v333 = 0;
          do
          {
            v337 = v336 >> 5;
            if (((v334[v337 + 113489] >> v336) & 1) == 0)
              v333 += (v334[v337 + 113515] >> (v336 & 0x1F)) & 1;
            ++v336;
          }
          while (v335 != v336);
        }
        else
        {
          v333 = 0;
        }
        if (*(_DWORD *)v329)
        {
          v338 = (v327 - *(_DWORD *)(v329 + 4));
          v341 = v329 + 8;
          v339 = *(_QWORD *)(v329 + 8);
          v340 = *(_QWORD *)(v341 + 8);
          if (0xAAAAAAAAAAAAAAABLL * ((v340 - v339) >> 2) > v338)
          {
            v342 = v339 + 12 * v338;
            if (v342 != v340 && *(_BYTE *)(v342 + 8) != 0)
            {
              v344 = v334[113124];
              if ((_DWORD)v344)
              {
                v345 = 0;
                v346 = 0;
                v347 = v334 + 98724;
                v348 = *(_DWORD *)(v342 + 4);
                v349 = v334 + 113489;
                v350 = v334 + 113515;
                do
                {
                  v351 = *v347;
                  v347 += 18;
                  if (v351 == v348)
                  {
                    v352 = v346 >> 5;
                    if ((v349[v352] & (1 << v346)) == 0 && (v350[v352] & (1 << v346)) != 0)
                      *(_DWORD *)(a2 + 7676) = ++v345;
                  }
                  ++v346;
                }
                while (v344 != v346);
              }
            }
          }
        }
      }
      kdebug_trace();
      *(_DWORD *)(a2 + 7672) = v333;
      if (!*(_BYTE *)(a2 + 1932))
      {
LABEL_594:
        sub_20F82FD50(&__dst);
        if (**((int **)__dst + 7) > 2)
          goto LABEL_707;
        v374 = __dst[72];
        v375 = __dst[72] != 0;
        v376 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
        if (((v376 == 0) & ~v375) != 0)
          goto LABEL_707;
        sub_20E863438((uint64_t)oslog);
        sub_20E86A980(&oslog[2], (uint64_t)" State id: ", 11);
        v377 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v377, (uint64_t)" size:(", 7);
        v378 = (_QWORD *)std::ostream::operator<<();
        v379 = sub_20E86A980(v378, (uint64_t)") ", 2);
        v380 = sub_20E86A980(v379, (uint64_t)" latest_map_tracking_state_id_: ", 32);
        v381 = *(_DWORD *)(a2 + 5288);
        v2536[0] = *(void **)(a2 + 5280);
        LODWORD(v2536[1]) = v381;
        sub_210216370((uint64_t)v2536);
        if (object[23] >= 0)
          v382 = object;
        else
          v382 = *(_BYTE **)object;
        if (object[23] >= 0)
          v383 = object[23];
        else
          v383 = *(_QWORD *)&object[8];
        sub_20E86A980(v380, (uint64_t)v382, v383);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        sub_20E86A980(v380, (uint64_t)"(", 1);
        v384 = (_QWORD *)std::ostream::operator<<();
        v385 = sub_20E86A980(v384, (uint64_t)") ", 2);
        sub_20E86A980(v385, (uint64_t)" has inlier map factor: ", 24);
        v386 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v386, (uint64_t)" num_inler_map_factor_to_constrain_latest_state: ", 49);
        v387 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v387, (uint64_t)" target_map_tracking_state_id: ", 31);
        v388 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v388, (uint64_t)" latest_map_tracking_state_inlier_track_keys.size(): ", 53);
        std::ostream::operator<<();
        v2508 = v374;
        if ((v2552[24] & 0x10) != 0)
        {
          v391 = *(os_log_t *)&v2552[16];
          if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
          {
            *(os_log_t *)&v2552[16] = oslog[9];
            v391 = oslog[9];
          }
          v392 = oslog[8];
          v389 = (char *)v391 - (char *)oslog[8];
          if ((unint64_t)((char *)v391 - (char *)oslog[8]) > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_662;
        }
        else
        {
          if ((v2552[24] & 8) == 0)
          {
            v389 = 0;
            HIBYTE(v2547) = 0;
            v390 = v2546;
            goto LABEL_617;
          }
          v392 = oslog[5];
          v389 = (char *)oslog[7] - (char *)oslog[5];
          if ((os_log_t)((char *)oslog[7] - (char *)oslog[5]) > (os_log_t)0x7FFFFFFFFFFFFFF7)
LABEL_662:
            sub_20E860B7C();
        }
        if (v389 >= 0x17)
        {
          v393 = (v389 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v389 | 7) != 0x17)
            v393 = v389 | 7;
          v394 = v393 + 1;
          v390 = operator new(v393 + 1);
          v2547 = v394 | 0x8000000000000000;
          v2546[0] = v390;
          v2546[1] = (void *)v389;
        }
        else
        {
          HIBYTE(v2547) = v389;
          v390 = v2546;
          if (!v389)
          {
LABEL_617:
            *((_BYTE *)v390 + v389) = 0;
            v2536[0] = &__dst;
            v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
            v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
            LODWORD(v2537[1]) = 2;
            v2538 = "unknown file";
            v2539 = 3205;
            v2541 = 0;
            v2542 = 0;
            v2540 = "unknown function";
            if (v2547 >= 0)
              v395 = v2546;
            else
              v395 = (void **)v2546[0];
            v396 = *(_QWORD *)v2536[0];
            v397 = *(_QWORD *)v2536[0] + 16;
            if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
            {
              v399 = *(const char **)(v396 + 16);
              v398 = *(_QWORD *)(v396 + 24);
              __sd = v376;
              v401 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v401 & 1) != 0)
                goto LABEL_624;
            }
            else
            {
              v398 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
              v399 = (const char *)(*(_QWORD *)v2536[0] + 16);
              __sd = v376;
              v400 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v400 & 1) != 0)
                goto LABEL_624;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              if (object[24])
              {
                *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
                *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
              }
              else
              {
                byte_254A4A4F8[23] = 14;
                strcpy(byte_254A4A4F8, "com.apple.cv3d");
              }
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_624:
            if (byte_254A4A4F8[23] >= 0)
              v402 = byte_254A4A4F8;
            else
              v402 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v403 = byte_254A4A4F8[23];
            else
              v403 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v402, v399);
            v404 = &object[8];
            if (v403 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v403 >= 0x17)
            {
              v405 = (v403 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v403 | 7) != 0x17)
                v405 = v403 | 7;
              v406 = v405 + 1;
              v404 = operator new(v405 + 1);
              *(_QWORD *)&object[24] = v406 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v404;
              *(_QWORD *)&object[16] = v403;
            }
            else
            {
              object[31] = v403;
              if (!v403)
              {
LABEL_638:
                v2502 = v397;
                v404[v403] = 0;
                object[32] = 1;
                v407 = &object[40];
                if (v398 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v398 >= 0x17)
                {
                  v408 = (v398 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v398 | 7) != 0x17)
                    v408 = v398 | 7;
                  v409 = v408 + 1;
                  v407 = operator new(v408 + 1);
                  *((_QWORD *)&v2575 + 1) = v409 | 0x8000000000000000;
                  *(_QWORD *)&object[40] = v407;
                  *(_QWORD *)&v2575 = v398;
                }
                else
                {
                  HIBYTE(v2575) = v398;
                  if (!v398)
                  {
LABEL_646:
                    v407[v398] = 0;
                    LOBYTE(v2576.f64[0]) = 1;
                    v410 = *(NSObject **)object;
                    if (SHIBYTE(v2575) < 0)
                      operator delete(*(void **)&object[40]);
                    if (object[32] && (object[31] & 0x80000000) != 0)
                      operator delete(*(void **)&object[8]);
                    if (*(_QWORD *)object)
                      os_release(*(void **)object);
                    if (!__sd || !*(_QWORD *)(__sd + 24))
                    {
                      os_log_type_enabled(v410, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)object = 136315138;
                      *(_QWORD *)&object[4] = v395;
                      v418 = (void *)_os_log_send_and_compose_impl();
                      if (v418)
                        free(v418);
                      goto LABEL_693;
                    }
                    v411 = _os_log_pack_size();
                    v412 = (std::__shared_weak_count_vtbl *)operator new(v411, (std::align_val_t)8uLL);
                    v413 = (std::__shared_weak_count *)operator new();
                    v413->__shared_owners_ = 0;
                    v414 = (unint64_t *)&v413->__shared_owners_;
                    v413->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v413->__shared_weak_owners_ = 0;
                    v413[1].__vftable = v412;
                    v415 = strlen((const char *)v395);
                    if (v415 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v416 = v415;
                    if (v415 >= 0x17)
                    {
                      v419 = (v415 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v415 | 7) != 0x17)
                        v419 = v415 | 7;
                      v420 = v419 + 1;
                      v417 = operator new(v419 + 1);
                      *(_QWORD *)&object[16] = v420 | 0x8000000000000000;
                      *(_QWORD *)object = v417;
                      *(_QWORD *)&object[8] = v416;
                    }
                    else
                    {
                      object[23] = v415;
                      v417 = object;
                      if (!v415)
                      {
LABEL_667:
                        v417[v416] = 0;
                        v421 = *(_QWORD *)object;
                        *(_QWORD *)v2582 = *(_QWORD *)&object[8];
                        *(_QWORD *)&v2582[7] = *(_QWORD *)&object[15];
                        v422 = object[23];
                        v423 = operator new(0x38uLL);
                        v424 = (std::__shared_weak_count *)v423;
                        v423[1] = 0;
                        v425 = v423 + 1;
                        v423[3] = off_24C9ABC20;
                        v426 = (char *)(v423 + 3);
                        v423[2] = 0;
                        v423[4] = v421;
                        v427 = (char *)(v423 + 4);
                        *v423 = &off_24C9ABBD0;
                        v423[5] = *(_QWORD *)v2582;
                        *(_QWORD *)((char *)v423 + 47) = *(_QWORD *)&v2582[7];
                        *((_BYTE *)v423 + 55) = v422;
                        do
                          v428 = __ldxr(v414);
                        while (__stxr(v428 + 1, v414));
                        do
                          v429 = __ldxr(v425);
                        while (__stxr(v429 + 1, v425));
                        do
                          v430 = __ldaxr(v425);
                        while (__stlxr(v430 - 1, v425));
                        if (!v430)
                        {
                          (*(void (**)(_QWORD *))(*v423 + 16))(v423);
                          std::__shared_weak_count::__release_weak(v424);
                        }
                        do
                          v431 = __ldaxr(v414);
                        while (__stlxr(v431 - 1, v414));
                        if (!v431)
                        {
                          ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                          std::__shared_weak_count::__release_weak(v413);
                        }
                        if (SHIBYTE(v424[2].__vftable) >= 0)
                          shared_owners = v427;
                        else
                          shared_owners = (char *)v424[1].__shared_owners_;
                        v433 = _os_log_pack_fill();
                        *(_DWORD *)v433 = 136315138;
                        *(_QWORD *)(v433 + 4) = shared_owners;
                        v434 = operator new();
                        v435 = *(unsigned __int8 *)(v396 + 39);
                        v436 = v2502;
                        if ((v435 & 0x80u) != 0)
                        {
                          v436 = *(_QWORD *)(v396 + 16);
                          v435 = *(_QWORD *)(v396 + 24);
                        }
                        *(_QWORD *)v434 = v412;
                        *(_QWORD *)(v434 + 8) = v412;
                        *(_QWORD *)(v434 + 16) = v413;
                        *(_QWORD *)(v434 + 24) = v426;
                        *(_QWORD *)(v434 + 32) = v424;
                        *(_QWORD *)(v434 + 40) = v436;
                        *(_QWORD *)(v434 + 48) = v435;
                        *(_BYTE *)(v434 + 56) = 2;
                        *(_QWORD *)object = v434;
                        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(__sd + 24) + 40))(*(_QWORD *)(__sd + 24), object);
                        v437 = *(_QWORD *)object;
                        *(_QWORD *)object = 0;
                        v374 = v2508;
                        if (v437)
                        {
                          v438 = *(std::__shared_weak_count **)(v437 + 32);
                          if (v438)
                          {
                            v439 = (unint64_t *)&v438->__shared_owners_;
                            do
                              v440 = __ldaxr(v439);
                            while (__stlxr(v440 - 1, v439));
                            if (!v440)
                            {
                              ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                              std::__shared_weak_count::__release_weak(v438);
                            }
                          }
                          v441 = *(std::__shared_weak_count **)(v437 + 16);
                          if (v441)
                          {
                            v442 = (unint64_t *)&v441->__shared_owners_;
                            do
                              v443 = __ldaxr(v442);
                            while (__stlxr(v443 - 1, v442));
                            if (!v443)
                            {
                              ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                              std::__shared_weak_count::__release_weak(v441);
                            }
                          }
                          MEMORY[0x212BC6398](v437, 0x10F0C40B62ED6C6);
                        }
LABEL_693:
                        if (v374)
                        {
                          v444 = v2546;
                          if (v2547 < 0)
                            v444 = (void **)v2546[0];
                          sub_20E8C003C((uint64_t)v2536, "%s", (const char *)v444);
                          sub_20E863570((uint64_t)v2536);
                        }
                        sub_20E863570((uint64_t)v2536);
                        v267 = v2542;
                        if (!v2542)
                          goto LABEL_702;
                        v445 = (unint64_t *)&v2542->__shared_owners_;
                        do
                          v269 = __ldaxr(v445);
                        while (__stlxr(v269 - 1, v445));
                        goto LABEL_700;
                      }
                    }
                    memcpy(v417, v395, v416);
                    goto LABEL_667;
                  }
                }
                memmove(v407, v399, v398);
                goto LABEL_646;
              }
            }
            memmove(v404, v402, v403);
            goto LABEL_638;
          }
        }
        memmove(v390, v392, v389);
        goto LABEL_617;
      }
      v353 = *(_QWORD *)(v85 + 16);
      memset(oslog, 0, 24);
      if (*(_BYTE *)(v353 + 6760) || !sub_20F9210FC((_QWORD *)(v353 + 5168)))
      {
        v355 = *(_QWORD **)(v353 + 6456);
        v354 = *(_QWORD *)(v353 + 6448);
        v356 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v355 - v354) >> 4);
      }
      else
      {
        v354 = *(_QWORD *)(v353 + 6448);
        v355 = *(_QWORD **)(v353 + 6456);
        if ((_QWORD *)v354 == v355)
        {
          v361 = 0;
          v360 = 0;
          v362 = 0;
          v372 = (_QWORD *)a2;
          v373 = *(void **)(a2 + 304);
          if (!v373)
            goto LABEL_593;
          goto LABEL_592;
        }
        LODWORD(v356) = 0;
        v357 = 0;
        v358 = *(_QWORD **)(v353 + 6448);
        do
        {
          if ((*(_BYTE *)(v358[25] + 4) & 6) == 0
            && (*(_BYTE *)(v358[26] + 4) & 6) == 0
            && (*(_BYTE *)(v358[27] + 4) & 6) == 0
            && (*(_BYTE *)(v358[28] + 4) & 6) == 0)
          {
            LODWORD(v356) = ++v357;
          }
          v358 += 38;
        }
        while (v358 != v355);
      }
      v359 = v356;
      if (!(_DWORD)v356)
      {
        v361 = 0;
        v360 = 0;
        v362 = 0;
        if ((_QWORD *)v354 != v355)
          goto LABEL_571;
LABEL_591:
        v372 = (_QWORD *)a2;
        v373 = *(void **)(a2 + 304);
        if (!v373)
        {
LABEL_593:
          v372[38] = v362;
          v372[39] = v360;
          v372[40] = v361;
          goto LABEL_594;
        }
LABEL_592:
        v372[39] = v373;
        operator delete(v373);
        v372[38] = 0;
        v372[39] = 0;
        v372[40] = 0;
        goto LABEL_593;
      }
      v360 = operator new(16 * v356);
      v361 = &v360[2 * v359];
      v362 = v360;
      if ((_QWORD *)v354 == v355)
        goto LABEL_591;
      while (1)
      {
LABEL_571:
        if (*(_DWORD *)(*(_QWORD *)(v354 + 208) + 16) != v327 || *(_BYTE *)(v354 + 176) || !*(_BYTE *)(v354 + 177))
          goto LABEL_570;
        v363 = (_OWORD *)(v354 + 184);
        if (v360 >= v361)
          break;
        *(_OWORD *)&v360->isa = *v363;
        v360 += 2;
LABEL_569:
        v355 = *(_QWORD **)(v353 + 6456);
LABEL_570:
        v354 += 304;
        if ((_QWORD *)v354 == v355)
        {
          oslog[2] = v361;
          goto LABEL_591;
        }
      }
      v364 = ((char *)v360 - (char *)v362) >> 4;
      v365 = v364 + 1;
      if ((unint64_t)(v364 + 1) >> 60)
      {
        oslog[2] = v361;
        oslog[0] = v362;
        oslog[1] = v360;
        sub_20E867F44();
      }
      if (v361 - v362 > v365)
        v365 = v361 - v362;
      if ((unint64_t)((char *)v361 - (char *)v362) >= 0x7FFFFFFFFFFFFFF0)
        v366 = 0xFFFFFFFFFFFFFFFLL;
      else
        v366 = v365;
      if (v366)
      {
        if (v366 >> 60)
        {
          oslog[2] = v361;
          oslog[0] = v362;
          sub_20E877A38();
        }
        v367 = (char *)operator new(16 * v366);
        v368 = &v367[16 * v364];
        *(_OWORD *)&v368->isa = *v363;
        v369 = (uint64_t)v368;
        if (v360 == v362)
          goto LABEL_585;
      }
      else
      {
        v367 = 0;
        v368 = (16 * v364);
        *(_OWORD *)(16 * v364) = *v363;
        v369 = 16 * v364;
        if (v360 == v362)
        {
LABEL_585:
          v361 = &v367[16 * v366];
          v360 = v368 + 2;
          if (v362)
            operator delete(v362);
          v362 = v369;
          goto LABEL_569;
        }
      }
      do
      {
        isa = v360[-2].isa;
        v360 -= 2;
        v371 = (int)v360[1].isa;
        *(_QWORD *)(v369 - 16) = isa;
        v369 -= 16;
        *(_DWORD *)(v369 + 8) = v371;
      }
      while (v360 != v362);
      goto LABEL_585;
    }
    *(_QWORD *)object = v2582;
    *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
    *(_DWORD *)&object[24] = 2;
    *(_QWORD *)&object[32] = "unknown file";
    *(_DWORD *)&object[40] = 964;
    v2576.f64[0] = 0.0;
    *(_QWORD *)&v2575 = "unknown function";
    *((_QWORD *)&v2575 + 1) = 0;
    v108 = **(_QWORD **)object;
    v109 = **(_QWORD **)object + 16;
    if (*(char *)(**(_QWORD **)object + 39) < 0)
    {
      v111 = *(const char **)(v108 + 16);
      v110 = *(_QWORD *)(v108 + 24);
    }
    else
    {
      v110 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
      v111 = (const char *)(**(_QWORD **)object + 16);
    }
    v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v270 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)oslog);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
      if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
        operator delete(oslog[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v271 = byte_254A4A4F8;
    else
      v271 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v272 = byte_254A4A4F8[23];
    else
      v272 = *(_QWORD *)&byte_254A4A4F8[8];
    oslog[0] = os_log_create(v271, v111);
    v273 = &oslog[1];
    if (v272 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v272 >= 0x17)
    {
      v2507 = v107;
      v274 = v111;
      v275 = v108;
      v276 = v109;
      v277 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v272 | 7) != 0x17)
        v277 = v272 | 7;
      v278 = v277 + 1;
      v273 = operator new(v277 + 1);
      oslog[3] = (os_log_t)(v278 | 0x8000000000000000);
      oslog[1] = v273;
      oslog[2] = (os_log_t)v272;
      v109 = v276;
      v108 = v275;
      v111 = v274;
      v107 = v2507;
    }
    else
    {
      HIBYTE(oslog[3]) = v272;
      if (!v272)
      {
LABEL_442:
        *((_BYTE *)&v273->isa + v272) = 0;
        LOBYTE(oslog[4]) = 1;
        v279 = &oslog[5];
        if (v110 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v110 >= 0x17)
        {
          v280 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v110 | 7) != 0x17)
            v280 = v110 | 7;
          v281 = v280 + 1;
          v279 = operator new(v280 + 1);
          oslog[7] = (os_log_t)(v281 | 0x8000000000000000);
          oslog[5] = v279;
          oslog[6] = (os_log_t)v110;
        }
        else
        {
          HIBYTE(oslog[7]) = v110;
          if (!v110)
            goto LABEL_450;
        }
        memmove(v279, v111, v110);
LABEL_450:
        *((_BYTE *)&v279->isa + v110) = 0;
        LOBYTE(oslog[8]) = 1;
        v282 = oslog[0];
        if (SHIBYTE(oslog[7]) < 0)
          operator delete(oslog[5]);
        if (LOBYTE(oslog[4]) && SHIBYTE(oslog[3]) < 0)
          operator delete(oslog[1]);
        if (oslog[0])
          os_release(oslog[0]);
        if (v107 && *(_QWORD *)(v107 + 24))
        {
          v283 = _os_log_pack_size();
          v284 = operator new(v283, (std::align_val_t)8uLL);
          v285 = operator new();
          v286 = (std::__shared_weak_count *)v285;
          v285[1].isa = 0;
          v287 = (unint64_t *)&v285[1];
          v285->isa = (Class)&off_24C9ABB80;
          v285[2].isa = 0;
          v285[3].isa = (Class)v284;
          oslog[0] = v284;
          oslog[1] = v284;
          oslog[2] = v285;
          do
            v288 = __ldxr(v287);
          while (__stxr(v288 + 1, v287));
          memset(&oslog[3], 0, 24);
          do
            v289 = __ldaxr(v287);
          while (__stlxr(v289 - 1, v287));
          if (!v289)
          {
            (*((void (**))v285->isa + 2))(v285);
            std::__shared_weak_count::__release_weak(v286);
          }
          v290 = oslog[0];
          v291 = (_DWORD *)_os_log_pack_fill();
          *v291 = 67109120;
          v291[1] = 10;
          v292 = (char *)operator new();
          v293 = *(unsigned __int8 *)(v108 + 39);
          if ((v293 & 0x80u) == 0)
            v294 = v109;
          else
            v294 = *(_QWORD *)(v108 + 16);
          if ((v293 & 0x80u) != 0)
            v293 = *(_QWORD *)(v108 + 24);
          *(_QWORD *)v292 = v290;
          *(_OWORD *)(v292 + 8) = *(_OWORD *)&oslog[1];
          oslog[1] = 0;
          oslog[2] = 0;
          *(_OWORD *)(v292 + 24) = *(_OWORD *)&oslog[3];
          oslog[3] = 0;
          oslog[4] = 0;
          *((_QWORD *)v292 + 5) = v294;
          *((_QWORD *)v292 + 6) = v293;
          v292[56] = 2;
          v2546[0] = 0;
          v2536[0] = v292;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v107 + 24) + 40))(*(_QWORD *)(v107 + 24), v2536);
          v295 = v2536[0];
          v2536[0] = 0;
          if (v295)
          {
            v296 = (std::__shared_weak_count *)*((_QWORD *)v295 + 4);
            if (v296)
            {
              v297 = (unint64_t *)&v296->__shared_owners_;
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            v299 = (std::__shared_weak_count *)*((_QWORD *)v295 + 2);
            if (v299)
            {
              v300 = (unint64_t *)&v299->__shared_owners_;
              do
                v301 = __ldaxr(v300);
              while (__stlxr(v301 - 1, v300));
              if (!v301)
              {
                ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                std::__shared_weak_count::__release_weak(v299);
              }
            }
            MEMORY[0x212BC6398](v295, 0x10F0C40B62ED6C6);
            v302 = v2546[0];
            v2546[0] = 0;
            if (v302)
            {
              v303 = (std::__shared_weak_count *)*((_QWORD *)v302 + 4);
              if (v303)
              {
                v304 = (unint64_t *)&v303->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
                  std::__shared_weak_count::__release_weak(v303);
                }
              }
              v306 = (std::__shared_weak_count *)*((_QWORD *)v302 + 2);
              if (v306)
              {
                v307 = (unint64_t *)&v306->__shared_owners_;
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
              MEMORY[0x212BC6398](v302, 0x10F0C40B62ED6C6);
            }
          }
          v309 = (std::__shared_weak_count *)oslog[4];
          v310 = __sb;
          if (oslog[4])
          {
            v311 = (unint64_t *)&oslog[4][1];
            do
              v312 = __ldaxr(v311);
            while (__stlxr(v312 - 1, v311));
            if (!v312)
            {
              ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
              std::__shared_weak_count::__release_weak(v309);
            }
          }
          v313 = (std::__shared_weak_count *)oslog[2];
          if (oslog[2])
          {
            v314 = (unint64_t *)&oslog[2][1];
            do
              v315 = __ldaxr(v314);
            while (__stlxr(v315 - 1, v314));
            if (!v315)
            {
              ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
              std::__shared_weak_count::__release_weak(v313);
            }
          }
        }
        else
        {
          os_log_type_enabled(v282, OS_LOG_TYPE_DEBUG);
          oslog[0] = (os_log_t)0xA04000100;
          v316 = (void *)_os_log_send_and_compose_impl();
          v310 = __sb;
          if (v316)
            free(v316);
        }
        if (v310)
        {
          sub_20E8C003C((uint64_t)object, "Disable existing IMU intrinsic prior factor with factor ID: %d.", 10);
          sub_20E863570((uint64_t)object);
        }
        sub_20E863570((uint64_t)object);
        v317 = *(std::__shared_weak_count **)&v2576.f64[0];
        if (*(_QWORD *)&v2576.f64[0])
        {
          v318 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
          do
            v319 = __ldaxr(v318);
          while (__stlxr(v319 - 1, v318));
          if (!v319)
          {
            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
            std::__shared_weak_count::__release_weak(v317);
          }
        }
        goto LABEL_512;
      }
    }
    memmove(v273, v271, v272);
    goto LABEL_442;
  }
  v86 = *(_QWORD *)(v85 + 8);
  v87 = *(char **)(v86 + 6608);
  v88 = *(char **)(v86 + 6616);
  if (v88 != v87)
  {
    v89 = 0x2E8BA2E8BA2E8BA3 * ((v88 - v87) >> 4);
    do
    {
      v90 = v89 >> 1;
      v91 = (unint64_t *)&v87[176 * (v89 >> 1)];
      v93 = *v91;
      v92 = (char *)(v91 + 22);
      v89 += ~(v89 >> 1);
      if (v93 < 0xA)
        v87 = v92;
      else
        v89 = v90;
    }
    while (v89);
    if (v87 != v88 && *(_QWORD *)v87 == 10)
    {
      sub_20F9B2A4C(v2582);
      if (**(int **)(*(_QWORD *)v2582 + 56) > 2
        || (__sa = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72),
            v94 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0),
            ((v94 == 0) & ~(__sa != 0)) != 0))
      {
LABEL_255:
        if (v87[72])
          v87[72] = 0;
        goto LABEL_257;
      }
      *(_QWORD *)object = v2582;
      *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
      *(_DWORD *)&object[24] = 2;
      *(_QWORD *)&object[32] = "unknown file";
      *(_DWORD *)&object[40] = 964;
      v2576.f64[0] = 0.0;
      *(_QWORD *)&v2575 = "unknown function";
      *((_QWORD *)&v2575 + 1) = 0;
      v95 = **(_QWORD **)object;
      v96 = **(_QWORD **)object + 16;
      if (*(char *)(**(_QWORD **)object + 39) < 0)
      {
        v98 = *(const char **)(v95 + 16);
        v97 = *(_QWORD *)(v95 + 24);
      }
      else
      {
        v97 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
        v98 = (const char *)(**(_QWORD **)object + 16);
      }
      v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)oslog);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
        if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
          operator delete(oslog[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v113 = byte_254A4A4F8;
      else
        v113 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v114 = byte_254A4A4F8[23];
      else
        v114 = *(_QWORD *)&byte_254A4A4F8[8];
      oslog[0] = os_log_create(v113, v98);
      v115 = &oslog[1];
      if (v114 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v114 >= 0x17)
      {
        v2505 = v94;
        v116 = v98;
        v117 = v95;
        v118 = v96;
        v119 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v114 | 7) != 0x17)
          v119 = v114 | 7;
        v120 = v119 + 1;
        v115 = operator new(v119 + 1);
        oslog[3] = (os_log_t)(v120 | 0x8000000000000000);
        oslog[1] = v115;
        oslog[2] = (os_log_t)v114;
        v96 = v118;
        v95 = v117;
        v98 = v116;
        v94 = v2505;
      }
      else
      {
        HIBYTE(oslog[3]) = v114;
        if (!v114)
        {
LABEL_185:
          *((_BYTE *)&v115->isa + v114) = 0;
          LOBYTE(oslog[4]) = 1;
          v121 = &oslog[5];
          if (v97 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v97 >= 0x17)
          {
            v122 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v122 = v97 | 7;
            v123 = v122 + 1;
            v121 = operator new(v122 + 1);
            oslog[7] = (os_log_t)(v123 | 0x8000000000000000);
            oslog[5] = v121;
            oslog[6] = (os_log_t)v97;
          }
          else
          {
            HIBYTE(oslog[7]) = v97;
            if (!v97)
              goto LABEL_193;
          }
          memmove(v121, v98, v97);
LABEL_193:
          *((_BYTE *)&v121->isa + v97) = 0;
          LOBYTE(oslog[8]) = 1;
          v124 = oslog[0];
          if (SHIBYTE(oslog[7]) < 0)
            operator delete(oslog[5]);
          if (LOBYTE(oslog[4]) && SHIBYTE(oslog[3]) < 0)
            operator delete(oslog[1]);
          if (oslog[0])
            os_release(oslog[0]);
          if (v94 && *(_QWORD *)(v94 + 24))
          {
            v125 = _os_log_pack_size();
            v126 = operator new(v125, (std::align_val_t)8uLL);
            v127 = operator new();
            v128 = (std::__shared_weak_count *)v127;
            v127[1].isa = 0;
            v129 = (unint64_t *)&v127[1];
            v127->isa = (Class)&off_24C9ABB80;
            v127[2].isa = 0;
            v127[3].isa = (Class)v126;
            oslog[0] = v126;
            oslog[1] = v126;
            oslog[2] = v127;
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
            memset(&oslog[3], 0, 24);
            do
              v131 = __ldaxr(v129);
            while (__stlxr(v131 - 1, v129));
            if (!v131)
            {
              (*((void (**))v127->isa + 2))(v127);
              std::__shared_weak_count::__release_weak(v128);
            }
            v132 = oslog[0];
            v133 = (_DWORD *)_os_log_pack_fill();
            *v133 = 67109120;
            v133[1] = 10;
            v134 = (char *)operator new();
            v135 = *(unsigned __int8 *)(v95 + 39);
            if ((v135 & 0x80u) == 0)
              v136 = v96;
            else
              v136 = *(_QWORD *)(v95 + 16);
            if ((v135 & 0x80u) != 0)
              v135 = *(_QWORD *)(v95 + 24);
            *(_QWORD *)v134 = v132;
            *(_OWORD *)(v134 + 8) = *(_OWORD *)&oslog[1];
            oslog[1] = 0;
            oslog[2] = 0;
            *(_OWORD *)(v134 + 24) = *(_OWORD *)&oslog[3];
            oslog[3] = 0;
            oslog[4] = 0;
            *((_QWORD *)v134 + 5) = v136;
            *((_QWORD *)v134 + 6) = v135;
            v134[56] = 2;
            v2546[0] = 0;
            v2536[0] = v134;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), v2536);
            v137 = v2536[0];
            v2536[0] = 0;
            if (v137)
            {
              v138 = (std::__shared_weak_count *)*((_QWORD *)v137 + 4);
              if (v138)
              {
                v139 = (unint64_t *)&v138->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v141 = (std::__shared_weak_count *)*((_QWORD *)v137 + 2);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              MEMORY[0x212BC6398](v137, 0x10F0C40B62ED6C6);
              v144 = v2546[0];
              v2546[0] = 0;
              if (v144)
              {
                v145 = (std::__shared_weak_count *)*((_QWORD *)v144 + 4);
                if (v145)
                {
                  v146 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                v148 = (std::__shared_weak_count *)*((_QWORD *)v144 + 2);
                if (v148)
                {
                  v149 = (unint64_t *)&v148->__shared_owners_;
                  do
                    v150 = __ldaxr(v149);
                  while (__stlxr(v150 - 1, v149));
                  if (!v150)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
                MEMORY[0x212BC6398](v144, 0x10F0C40B62ED6C6);
              }
            }
            v151 = (std::__shared_weak_count *)oslog[4];
            v152 = __sa;
            if (oslog[4])
            {
              v153 = (unint64_t *)&oslog[4][1];
              do
                v154 = __ldaxr(v153);
              while (__stlxr(v154 - 1, v153));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            v155 = (std::__shared_weak_count *)oslog[2];
            if (oslog[2])
            {
              v156 = (unint64_t *)&oslog[2][1];
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
          }
          else
          {
            os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG);
            oslog[0] = (os_log_t)0xA04000100;
            v158 = (void *)_os_log_send_and_compose_impl();
            v152 = __sa;
            if (v158)
              free(v158);
          }
          if (v152)
          {
            sub_20E8C003C((uint64_t)object, "Disable existing IMU intrinsic prior factor with factor ID: %d.", 10);
            sub_20E863570((uint64_t)object);
          }
          sub_20E863570((uint64_t)object);
          v159 = *(std::__shared_weak_count **)&v2576.f64[0];
          if (*(_QWORD *)&v2576.f64[0])
          {
            v160 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          goto LABEL_255;
        }
      }
      memmove(v115, v113, v114);
      goto LABEL_185;
    }
  }
LABEL_257:
  if (*(_BYTE *)(*(_QWORD *)(a2 + 8216) + 1720))
  {
    v162 = *(unsigned int *)(a2 + 1940);
    v163 = *(_QWORD *)(a2 + 2864);
  }
  else
  {
    v163 = *(_QWORD *)(a2 + 2864);
    v162 = (v163 - *(_QWORD *)(a2 + 2856)) >> 2;
  }
  v164 = (int *)(a2 + 5288);
  v165 = (int *)(v163 - 4);
  v166 = -4 * v162;
  v167 = v165;
  while (v166)
  {
    v168 = *v167--;
    v166 += 4;
    if (*v164 == v168)
    {
      *(_BYTE *)(a2 + 5316) = 1;
      goto LABEL_265;
    }
  }
  *(_BYTE *)(a2 + 5316) = 0;
  v164 = v165;
LABEL_265:
  v169 = *v164;
  v170 = *(_QWORD *)(v85 + 8);
  *(_DWORD *)(a2 + 7676) = 0;
  v171 = *(_QWORD *)(v170 + 6464);
  v172 = *(_QWORD **)(v170 + 6472);
  if ((_QWORD *)v171 == v172)
  {
    v174 = 0;
  }
  else
  {
    v173 = 0;
    v174 = 0;
    v175 = *(_QWORD *)(v170 + 6464);
    do
    {
      if (!*(_BYTE *)(v175 + 176))
      {
        v174 += *(unsigned __int8 *)(v175 + 177);
        if (*(_BYTE *)(v175 + 177))
        {
          if (*(_DWORD *)(*(_QWORD *)(v175 + 208) + 16) == v169)
            *(_DWORD *)(a2 + 7676) = ++v173;
        }
      }
      v175 += 304;
    }
    while ((_QWORD *)v175 != v172);
  }
  *(_DWORD *)(a2 + 7672) = v174;
  if (*(_BYTE *)(a2 + 1932))
  {
    memset(oslog, 0, 24);
    if (*(_BYTE *)(v170 + 6800) || !sub_20F9210FC((_QWORD *)(v170 + 5184)))
    {
      v171 = *(_QWORD *)(v170 + 6464);
      v176 = 0x86BCA1AF286BCA1BLL * (((uint64_t)v172 - v171) >> 4);
    }
    else
    {
      if ((_QWORD *)v171 == v172)
      {
        v181 = 0;
        v180 = 0;
        v182 = 0;
        v192 = (_QWORD *)a2;
        v193 = *(void **)(a2 + 304);
        if (!v193)
          goto LABEL_316;
        goto LABEL_315;
      }
      LODWORD(v176) = 0;
      v177 = 0;
      v178 = (_QWORD *)v171;
      do
      {
        if ((*(_BYTE *)(v178[25] + 4) & 6) == 0
          && (*(_BYTE *)(v178[26] + 4) & 6) == 0
          && (*(_BYTE *)(v178[27] + 4) & 6) == 0
          && (*(_BYTE *)(v178[28] + 4) & 6) == 0)
        {
          LODWORD(v176) = ++v177;
        }
        v178 += 38;
      }
      while (v178 != v172);
    }
    v179 = v176;
    if (!(_DWORD)v176)
    {
      v181 = 0;
      v180 = 0;
      v182 = 0;
      if ((_QWORD *)v171 != v172)
        goto LABEL_294;
LABEL_314:
      v192 = (_QWORD *)a2;
      v193 = *(void **)(a2 + 304);
      if (!v193)
      {
LABEL_316:
        v192[38] = v182;
        v192[39] = v180;
        v192[40] = v181;
        goto LABEL_317;
      }
LABEL_315:
      v192[39] = v193;
      operator delete(v193);
      v192[38] = 0;
      v192[39] = 0;
      v192[40] = 0;
      goto LABEL_316;
    }
    v180 = operator new(16 * v176);
    v181 = &v180[2 * v179];
    v182 = v180;
    if ((_QWORD *)v171 == v172)
      goto LABEL_314;
    while (1)
    {
LABEL_294:
      if (*(_DWORD *)(*(_QWORD *)(v171 + 208) + 16) != v169 || *(_BYTE *)(v171 + 176) || !*(_BYTE *)(v171 + 177))
        goto LABEL_293;
      v183 = (_OWORD *)(v171 + 184);
      if (v180 >= v181)
        break;
      *(_OWORD *)&v180->isa = *v183;
      v180 += 2;
LABEL_292:
      v172 = *(_QWORD **)(v170 + 6472);
LABEL_293:
      v171 += 304;
      if ((_QWORD *)v171 == v172)
      {
        oslog[2] = v181;
        goto LABEL_314;
      }
    }
    v184 = ((char *)v180 - (char *)v182) >> 4;
    v185 = v184 + 1;
    if ((unint64_t)(v184 + 1) >> 60)
    {
      oslog[2] = v181;
      oslog[0] = v182;
      oslog[1] = v180;
      sub_20E867F44();
    }
    if (v181 - v182 > v185)
      v185 = v181 - v182;
    if ((unint64_t)((char *)v181 - (char *)v182) >= 0x7FFFFFFFFFFFFFF0)
      v186 = 0xFFFFFFFFFFFFFFFLL;
    else
      v186 = v185;
    if (v186)
    {
      if (v186 >> 60)
      {
        oslog[2] = v181;
        oslog[0] = v182;
        sub_20E877A38();
      }
      v187 = (char *)operator new(16 * v186);
      v188 = &v187[16 * v184];
      *(_OWORD *)&v188->isa = *v183;
      v189 = (uint64_t)v188;
      if (v180 == v182)
        goto LABEL_308;
    }
    else
    {
      v187 = 0;
      v188 = (16 * v184);
      *(_OWORD *)(16 * v184) = *v183;
      v189 = 16 * v184;
      if (v180 == v182)
      {
LABEL_308:
        v181 = &v187[16 * v186];
        v180 = v188 + 2;
        if (v182)
          operator delete(v182);
        v182 = v189;
        goto LABEL_292;
      }
    }
    do
    {
      v190 = v180[-2].isa;
      v180 -= 2;
      v191 = (int)v180[1].isa;
      *(_QWORD *)(v189 - 16) = v190;
      v189 -= 16;
      *(_DWORD *)(v189 + 8) = v191;
    }
    while (v180 != v182);
    goto LABEL_308;
  }
LABEL_317:
  sub_20F82FD50(&__dst);
  if (**((int **)__dst + 7) > 2)
    goto LABEL_707;
  v196 = __dst[72];
  v197 = __dst[72] != 0;
  v198 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
  if (((v198 == 0) & ~v197) != 0)
    goto LABEL_707;
  sub_20E863438((uint64_t)oslog);
  sub_20E86A980(&oslog[2], (uint64_t)" State id: ", 11);
  v199 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v199, (uint64_t)" size:(", 7);
  v200 = (_QWORD *)std::ostream::operator<<();
  v201 = sub_20E86A980(v200, (uint64_t)") ", 2);
  v202 = sub_20E86A980(v201, (uint64_t)" latest_map_tracking_state_id_: ", 32);
  v203 = *(_DWORD *)(a2 + 5288);
  v2536[0] = *(void **)(a2 + 5280);
  LODWORD(v2536[1]) = v203;
  sub_210216370((uint64_t)v2536);
  if (object[23] >= 0)
    v204 = object;
  else
    v204 = *(_BYTE **)object;
  if (object[23] >= 0)
    v205 = object[23];
  else
    v205 = *(_QWORD *)&object[8];
  sub_20E86A980(v202, (uint64_t)v204, v205);
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  sub_20E86A980(v202, (uint64_t)"(", 1);
  v206 = (_QWORD *)std::ostream::operator<<();
  v207 = sub_20E86A980(v206, (uint64_t)") ", 2);
  sub_20E86A980(v207, (uint64_t)" has inlier map factor: ", 24);
  v208 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v208, (uint64_t)" num_inler_map_factor_to_constrain_latest_state: ", 49);
  v209 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v209, (uint64_t)" target_map_tracking_state_id: ", 31);
  v210 = (_QWORD *)std::ostream::operator<<();
  sub_20E86A980(v210, (uint64_t)" latest_map_tracking_state_inlier_track_keys.size(): ", 53);
  std::ostream::operator<<();
  v2506 = v196;
  if ((v2552[24] & 0x10) != 0)
  {
    v213 = *(os_log_t *)&v2552[16];
    if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
    {
      *(os_log_t *)&v2552[16] = oslog[9];
      v213 = oslog[9];
    }
    v214 = oslog[8];
    v211 = (char *)v213 - (char *)oslog[8];
    if ((unint64_t)((char *)v213 - (char *)oslog[8]) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_385;
  }
  else
  {
    if ((v2552[24] & 8) == 0)
    {
      v211 = 0;
      HIBYTE(v2547) = 0;
      v212 = v2546;
      goto LABEL_340;
    }
    v214 = oslog[5];
    v211 = (char *)oslog[7] - (char *)oslog[5];
    if ((os_log_t)((char *)oslog[7] - (char *)oslog[5]) > (os_log_t)0x7FFFFFFFFFFFFFF7)
LABEL_385:
      sub_20E860B7C();
  }
  if (v211 >= 0x17)
  {
    v215 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v215 = v211 | 7;
    v216 = v215 + 1;
    v212 = operator new(v215 + 1);
    v2547 = v216 | 0x8000000000000000;
    v2546[0] = v212;
    v2546[1] = (void *)v211;
    goto LABEL_339;
  }
  HIBYTE(v2547) = v211;
  v212 = v2546;
  if (v211)
LABEL_339:
    memmove(v212, v214, v211);
LABEL_340:
  *((_BYTE *)v212 + v211) = 0;
  v2536[0] = &__dst;
  v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v2537[1]) = 2;
  v2538 = "unknown file";
  v2539 = 3205;
  v2541 = 0;
  v2542 = 0;
  v2540 = "unknown function";
  if (v2547 >= 0)
    v217 = v2546;
  else
    v217 = (void **)v2546[0];
  v218 = *(_QWORD *)v2536[0];
  v219 = *(_QWORD *)v2536[0] + 16;
  if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
  {
    v221 = *(const char **)(v218 + 16);
    v220 = *(_QWORD *)(v218 + 24);
    __sc = v198;
    v223 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v223 & 1) != 0)
      goto LABEL_347;
  }
  else
  {
    v220 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
    v221 = (const char *)(*(_QWORD *)v2536[0] + 16);
    __sc = v198;
    v222 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v222 & 1) != 0)
      goto LABEL_347;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if (object[24])
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_347:
  if (byte_254A4A4F8[23] >= 0)
    v224 = byte_254A4A4F8;
  else
    v224 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v225 = byte_254A4A4F8[23];
  else
    v225 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v224, v221);
  v226 = &object[8];
  if (v225 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v225 >= 0x17)
  {
    v227 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17)
      v227 = v225 | 7;
    v228 = v227 + 1;
    v226 = operator new(v227 + 1);
    *(_QWORD *)&object[24] = v228 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v226;
    *(_QWORD *)&object[16] = v225;
    goto LABEL_360;
  }
  object[31] = v225;
  if (v225)
LABEL_360:
    memmove(v226, v224, v225);
  v2501 = v219;
  v226[v225] = 0;
  object[32] = 1;
  v229 = &object[40];
  if (v220 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v220 >= 0x17)
  {
    v230 = (v220 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v220 | 7) != 0x17)
      v230 = v220 | 7;
    v231 = v230 + 1;
    v229 = operator new(v230 + 1);
    *((_QWORD *)&v2575 + 1) = v231 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v229;
    *(_QWORD *)&v2575 = v220;
    goto LABEL_368;
  }
  HIBYTE(v2575) = v220;
  if (v220)
LABEL_368:
    memmove(v229, v221, v220);
  v229[v220] = 0;
  LOBYTE(v2576.f64[0]) = 1;
  v232 = *(NSObject **)object;
  if (SHIBYTE(v2575) < 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (!__sc || !*(_QWORD *)(__sc + 24))
  {
    os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v217;
    v240 = (void *)_os_log_send_and_compose_impl();
    if (v240)
      free(v240);
    goto LABEL_416;
  }
  v233 = _os_log_pack_size();
  v234 = (std::__shared_weak_count_vtbl *)operator new(v233, (std::align_val_t)8uLL);
  v235 = (std::__shared_weak_count *)operator new();
  v235->__shared_owners_ = 0;
  v236 = (unint64_t *)&v235->__shared_owners_;
  v235->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v235->__shared_weak_owners_ = 0;
  v235[1].__vftable = v234;
  v237 = strlen((const char *)v217);
  if (v237 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v238 = v237;
  if (v237 >= 0x17)
  {
    v241 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v237 | 7) != 0x17)
      v241 = v237 | 7;
    v242 = v241 + 1;
    v239 = operator new(v241 + 1);
    *(_QWORD *)&object[16] = v242 | 0x8000000000000000;
    *(_QWORD *)object = v239;
    *(_QWORD *)&object[8] = v238;
    goto LABEL_389;
  }
  object[23] = v237;
  v239 = object;
  if (v237)
LABEL_389:
    memcpy(v239, v217, v238);
  v239[v238] = 0;
  v243 = *(_QWORD *)object;
  *(_QWORD *)v2582 = *(_QWORD *)&object[8];
  *(_QWORD *)&v2582[7] = *(_QWORD *)&object[15];
  v244 = object[23];
  v245 = operator new(0x38uLL);
  v246 = (std::__shared_weak_count *)v245;
  v245[1] = 0;
  v247 = v245 + 1;
  v245[3] = off_24C9ABC20;
  v248 = (char *)(v245 + 3);
  v245[2] = 0;
  v245[4] = v243;
  v249 = (char *)(v245 + 4);
  *v245 = &off_24C9ABBD0;
  v245[5] = *(_QWORD *)v2582;
  *(_QWORD *)((char *)v245 + 47) = *(_QWORD *)&v2582[7];
  *((_BYTE *)v245 + 55) = v244;
  do
    v250 = __ldxr(v236);
  while (__stxr(v250 + 1, v236));
  do
    v251 = __ldxr(v247);
  while (__stxr(v251 + 1, v247));
  do
    v252 = __ldaxr(v247);
  while (__stlxr(v252 - 1, v247));
  if (!v252)
  {
    (*(void (**)(_QWORD *))(*v245 + 16))(v245);
    std::__shared_weak_count::__release_weak(v246);
  }
  do
    v253 = __ldaxr(v236);
  while (__stlxr(v253 - 1, v236));
  if (!v253)
  {
    ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
    std::__shared_weak_count::__release_weak(v235);
  }
  if (SHIBYTE(v246[2].__vftable) >= 0)
    v254 = v249;
  else
    v254 = (char *)v246[1].__shared_owners_;
  v255 = _os_log_pack_fill();
  *(_DWORD *)v255 = 136315138;
  *(_QWORD *)(v255 + 4) = v254;
  v256 = operator new();
  v257 = *(unsigned __int8 *)(v218 + 39);
  v258 = v2501;
  if ((v257 & 0x80u) != 0)
  {
    v258 = *(_QWORD *)(v218 + 16);
    v257 = *(_QWORD *)(v218 + 24);
  }
  *(_QWORD *)v256 = v234;
  *(_QWORD *)(v256 + 8) = v234;
  *(_QWORD *)(v256 + 16) = v235;
  *(_QWORD *)(v256 + 24) = v248;
  *(_QWORD *)(v256 + 32) = v246;
  *(_QWORD *)(v256 + 40) = v258;
  *(_QWORD *)(v256 + 48) = v257;
  *(_BYTE *)(v256 + 56) = 2;
  *(_QWORD *)object = v256;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(__sc + 24) + 40))(*(_QWORD *)(__sc + 24), object);
  v259 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  v196 = v2506;
  if (v259)
  {
    v260 = *(std::__shared_weak_count **)(v259 + 32);
    if (v260)
    {
      v261 = (unint64_t *)&v260->__shared_owners_;
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    v263 = *(std::__shared_weak_count **)(v259 + 16);
    if (v263)
    {
      v264 = (unint64_t *)&v263->__shared_owners_;
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
    MEMORY[0x212BC6398](v259, 0x10F0C40B62ED6C6);
  }
LABEL_416:
  if (v196)
  {
    v266 = v2546;
    if (v2547 < 0)
      v266 = (void **)v2546[0];
    sub_20E8C003C((uint64_t)v2536, "%s", (const char *)v266);
    sub_20E863570((uint64_t)v2536);
  }
  sub_20E863570((uint64_t)v2536);
  v267 = v2542;
  if (!v2542)
    goto LABEL_702;
  v268 = (unint64_t *)&v2542->__shared_owners_;
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
LABEL_700:
  if (!v269)
  {
    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
    std::__shared_weak_count::__release_weak(v267);
  }
LABEL_702:
  if (SHIBYTE(v2547) < 0)
    operator delete(v2546[0]);
  oslog[0] = *(os_log_t *)MEMORY[0x24BEDB7F0];
  v446 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
  *(os_log_t *)((char *)oslog + (unint64_t)oslog[0][-3].isa) = *(os_log_t *)(MEMORY[0x24BEDB7F0] + 64);
  oslog[2] = v446;
  oslog[3] = (os_log_t)(MEMORY[0x24BEDB848] + 16);
  if ((v2552[15] & 0x80000000) != 0)
    operator delete(oslog[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v2552[32]);
LABEL_707:
  v447 = *(_QWORD *)(a2 + 8216);
  if (*(_BYTE *)v447)
  {
    v448 = *(_QWORD **)(v447 + 8);
    v449 = v448[709];
    v450 = 0.0;
    if (v448[710] == v449)
      goto LABEL_714;
  }
  else
  {
    v448 = *(_QWORD **)(v447 + 16);
    v449 = v448[707];
    v450 = 0.0;
    if (v448[708] == v449)
      goto LABEL_714;
  }
  if (!*(_DWORD *)v449)
  {
    v451 = *(_QWORD *)(v449 + 8);
    if (*(_BYTE *)(v451 + 20))
      v450 = vabdd_f64(*(double *)(v451 + 32), *(double *)(v448[1] + 72));
  }
LABEL_714:
  if (v450 > *(double *)(a2 + 5320))
  {
    sub_20F82FD50(v2582);
    if (**(int **)(*(_QWORD *)v2582 + 56) > 4
      || (v452 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72),
          v453 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0),
          v454 = v453,
          !v452)
      && !v453)
    {
LABEL_1201:
      v1203 = *(_QWORD *)(a2 + 8216);
      if (*(_BYTE *)v1203)
      {
        v1204 = *(_QWORD **)(v1203 + 8);
        v1205 = v1204[733];
        v1206 = v1204[734];
        while (v1205 != v1206)
        {
          v1207 = *(_QWORD *)(v1205 + 8);
          v1208 = *(_QWORD *)(v1207 + 24);
          v1209 = *(_OWORD *)(v1208 + 16);
          *(_OWORD *)(v1207 + 32) = *(_OWORD *)v1208;
          *(_OWORD *)(v1207 + 48) = v1209;
          v1210 = *(_BYTE *)(v1208 + 40);
          *(_QWORD *)(v1207 + 64) = *(_QWORD *)(v1208 + 32);
          *(_BYTE *)(v1207 + 72) = v1210;
          sub_20F6169C8(v1207 + 16);
          sub_20F616F2C(v1207 + 16);
          v1211 = *(_QWORD *)(v1207 + 24);
          v1212 = *(_OWORD *)(v1207 + 48);
          *(_OWORD *)v1211 = *(_OWORD *)(v1207 + 32);
          *(_OWORD *)(v1211 + 16) = v1212;
          v1213 = *(_QWORD *)(v1207 + 64);
          *(_BYTE *)(v1211 + 40) = *(_BYTE *)(v1207 + 72);
          *(_QWORD *)(v1211 + 32) = v1213;
          sub_20F62E744(v1207 + 16);
          *(_QWORD *)(v1207 + 88) = *(_QWORD *)(v1207 + 80);
          if (*(_QWORD *)(v1207 + 128))
          {
            v1214 = *(_QWORD **)(v1207 + 120);
            if (v1214)
            {
              do
              {
                v1215 = (_QWORD *)*v1214;
                operator delete(v1214);
                v1214 = v1215;
              }
              while (v1215);
            }
            *(_QWORD *)(v1207 + 120) = 0;
            v1216 = *(_QWORD *)(v1207 + 112);
            if (v1216)
            {
              for (i = 0; i != v1216; ++i)
                *(_QWORD *)(*(_QWORD *)(v1207 + 104) + 8 * i) = 0;
            }
            *(_QWORD *)(v1207 + 128) = 0;
          }
          v1205 += 16;
        }
        v1218 = v1204[745];
        v1219 = v1204[746];
        while (v1218 != v1219)
        {
          v1220 = *(_QWORD *)(v1218 + 8);
          v1221 = *(__n128 **)(v1220 + 24);
          v1222 = v1221[1];
          *(__n128 *)(v1220 + 32) = *v1221;
          *(__n128 *)(v1220 + 48) = v1222;
          v1223 = v1221[5];
          v1225 = v1221[2];
          v1224 = v1221[3];
          *(__n128 *)(v1220 + 96) = v1221[4];
          *(__n128 *)(v1220 + 112) = v1223;
          *(__n128 *)(v1220 + 64) = v1225;
          *(__n128 *)(v1220 + 80) = v1224;
          v1226 = v1221[9];
          v1228 = v1221[6];
          v1227 = v1221[7];
          *(__n128 *)(v1220 + 160) = v1221[8];
          *(__n128 *)(v1220 + 176) = v1226;
          *(__n128 *)(v1220 + 128) = v1228;
          *(__n128 *)(v1220 + 144) = v1227;
          v1229 = v1221[12];
          v1230 = v1221[13];
          v1232 = v1221[10];
          v1231 = v1221[11];
          *(__n128 *)(v1220 + 224) = v1229;
          *(__n128 *)(v1220 + 240) = v1230;
          *(__n128 *)(v1220 + 192) = v1232;
          *(__n128 *)(v1220 + 208) = v1231;
          for (j = *(uint64_t ***)(v1220 + 296); j; j = (uint64_t **)*j)
            v1229.n128_f64[0] = sub_20F6182A0((char *)j[5], (float64x2_t *)(v1220 + 32), v1229);
          sub_20F6178A8(v1220 + 16);
          v1234 = *(_OWORD **)(v1220 + 24);
          v1235 = *(_OWORD *)(v1220 + 48);
          *v1234 = *(_OWORD *)(v1220 + 32);
          v1234[1] = v1235;
          v1236 = *(_OWORD *)(v1220 + 64);
          v1237 = *(_OWORD *)(v1220 + 80);
          v1238 = *(_OWORD *)(v1220 + 112);
          v1234[4] = *(_OWORD *)(v1220 + 96);
          v1234[5] = v1238;
          v1234[2] = v1236;
          v1234[3] = v1237;
          v1239 = *(_OWORD *)(v1220 + 128);
          v1240 = *(_OWORD *)(v1220 + 144);
          v1241 = *(_OWORD *)(v1220 + 176);
          v1234[8] = *(_OWORD *)(v1220 + 160);
          v1234[9] = v1241;
          v1234[6] = v1239;
          v1234[7] = v1240;
          v1242 = *(_OWORD *)(v1220 + 192);
          v1243 = *(_OWORD *)(v1220 + 208);
          v1244 = *(_OWORD *)(v1220 + 240);
          v1234[12] = *(_OWORD *)(v1220 + 224);
          v1234[13] = v1244;
          v1234[10] = v1242;
          v1234[11] = v1243;
          sub_20F62F34C(v1220 + 16);
          *(_QWORD *)(v1220 + 264) = *(_QWORD *)(v1220 + 256);
          if (*(_QWORD *)(v1220 + 304))
          {
            v1245 = *(_QWORD **)(v1220 + 296);
            if (v1245)
            {
              do
              {
                v1246 = (_QWORD *)*v1245;
                operator delete(v1245);
                v1245 = v1246;
              }
              while (v1246);
            }
            *(_QWORD *)(v1220 + 296) = 0;
            v1247 = *(_QWORD *)(v1220 + 288);
            if (v1247)
            {
              for (k = 0; k != v1247; ++k)
                *(_QWORD *)(*(_QWORD *)(v1220 + 280) + 8 * k) = 0;
            }
            *(_QWORD *)(v1220 + 304) = 0;
          }
          v1218 += 16;
        }
        v1249 = v1204[757];
        v1250 = v1204[758];
        while (v1249 != v1250)
        {
          v1251 = *(_QWORD *)(v1249 + 8);
          v1252 = *(_QWORD *)(v1251 + 24);
          *(_OWORD *)(v1251 + 32) = *(_OWORD *)v1252;
          v1254 = *(_OWORD *)(v1252 + 32);
          v1253 = *(_OWORD *)(v1252 + 48);
          v1255 = *(_OWORD *)(v1252 + 16);
          *(_QWORD *)(v1251 + 96) = *(_QWORD *)(v1252 + 64);
          *(_OWORD *)(v1251 + 64) = v1254;
          *(_OWORD *)(v1251 + 80) = v1253;
          *(_OWORD *)(v1251 + 48) = v1255;
          sub_20F811C04(v1251 + 16);
          v1256 = *(_QWORD *)(v1251 + 24);
          *(_OWORD *)v1256 = *(_OWORD *)(v1251 + 32);
          v1257 = *(_OWORD *)(v1251 + 48);
          v1258 = *(_OWORD *)(v1251 + 64);
          v1259 = *(_OWORD *)(v1251 + 80);
          *(_QWORD *)(v1256 + 64) = *(_QWORD *)(v1251 + 96);
          *(_OWORD *)(v1256 + 32) = v1258;
          *(_OWORD *)(v1256 + 48) = v1259;
          *(_OWORD *)(v1256 + 16) = v1257;
          *(_QWORD *)(v1251 + 112) = *(_QWORD *)(v1251 + 104);
          if (*(_QWORD *)(v1251 + 152))
          {
            v1260 = *(_QWORD **)(v1251 + 144);
            if (v1260)
            {
              do
              {
                v1261 = (_QWORD *)*v1260;
                operator delete(v1260);
                v1260 = v1261;
              }
              while (v1261);
            }
            *(_QWORD *)(v1251 + 144) = 0;
            v1262 = *(_QWORD *)(v1251 + 136);
            if (v1262)
            {
              for (m = 0; m != v1262; ++m)
                *(_QWORD *)(*(_QWORD *)(v1251 + 128) + 8 * m) = 0;
            }
            *(_QWORD *)(v1251 + 152) = 0;
          }
          v1249 += 16;
        }
      }
      else
      {
        v1264 = *(_QWORD **)(v1203 + 16);
        v1265 = v1264[719];
        v1266 = v1264[720];
        while (v1265 != v1266)
        {
          v1267 = *(_QWORD *)(v1265 + 8);
          v1268 = *(_QWORD *)(v1267 + 24);
          v1269 = *(_OWORD *)(v1268 + 16);
          *(_OWORD *)(v1267 + 32) = *(_OWORD *)v1268;
          *(_OWORD *)(v1267 + 48) = v1269;
          v1270 = *(_BYTE *)(v1268 + 40);
          *(_QWORD *)(v1267 + 64) = *(_QWORD *)(v1268 + 32);
          *(_BYTE *)(v1267 + 72) = v1270;
          sub_20F6169C8(v1267 + 16);
          sub_20F616F2C(v1267 + 16);
          v1271 = *(_QWORD *)(v1267 + 24);
          v1272 = *(_OWORD *)(v1267 + 48);
          *(_OWORD *)v1271 = *(_OWORD *)(v1267 + 32);
          *(_OWORD *)(v1271 + 16) = v1272;
          v1273 = *(_QWORD *)(v1267 + 64);
          *(_BYTE *)(v1271 + 40) = *(_BYTE *)(v1267 + 72);
          *(_QWORD *)(v1271 + 32) = v1273;
          sub_20F62E744(v1267 + 16);
          *(_QWORD *)(v1267 + 88) = *(_QWORD *)(v1267 + 80);
          if (*(_QWORD *)(v1267 + 128))
          {
            v1274 = *(_QWORD **)(v1267 + 120);
            if (v1274)
            {
              do
              {
                v1275 = (_QWORD *)*v1274;
                operator delete(v1274);
                v1274 = v1275;
              }
              while (v1275);
            }
            *(_QWORD *)(v1267 + 120) = 0;
            v1276 = *(_QWORD *)(v1267 + 112);
            if (v1276)
            {
              for (n = 0; n != v1276; ++n)
                *(_QWORD *)(*(_QWORD *)(v1267 + 104) + 8 * n) = 0;
            }
            *(_QWORD *)(v1267 + 128) = 0;
          }
          v1265 += 16;
        }
        v1278 = v1264[731];
        v1279 = v1264[732];
        while (v1278 != v1279)
        {
          v1280 = *(_QWORD *)(v1278 + 8);
          v1281 = *(__n128 **)(v1280 + 24);
          v1282 = v1281[1];
          *(__n128 *)(v1280 + 32) = *v1281;
          *(__n128 *)(v1280 + 48) = v1282;
          v1283 = v1281[5];
          v1285 = v1281[2];
          v1284 = v1281[3];
          *(__n128 *)(v1280 + 96) = v1281[4];
          *(__n128 *)(v1280 + 112) = v1283;
          *(__n128 *)(v1280 + 64) = v1285;
          *(__n128 *)(v1280 + 80) = v1284;
          v1286 = v1281[9];
          v1288 = v1281[6];
          v1287 = v1281[7];
          *(__n128 *)(v1280 + 160) = v1281[8];
          *(__n128 *)(v1280 + 176) = v1286;
          *(__n128 *)(v1280 + 128) = v1288;
          *(__n128 *)(v1280 + 144) = v1287;
          v1289 = v1281[12];
          v1290 = v1281[13];
          v1292 = v1281[10];
          v1291 = v1281[11];
          *(__n128 *)(v1280 + 224) = v1289;
          *(__n128 *)(v1280 + 240) = v1290;
          *(__n128 *)(v1280 + 192) = v1292;
          *(__n128 *)(v1280 + 208) = v1291;
          for (ii = *(uint64_t ***)(v1280 + 296); ii; ii = (uint64_t **)*ii)
            v1289.n128_f64[0] = sub_20F6182A0((char *)ii[5], (float64x2_t *)(v1280 + 32), v1289);
          sub_20F6178A8(v1280 + 16);
          v1294 = *(_OWORD **)(v1280 + 24);
          v1295 = *(_OWORD *)(v1280 + 48);
          *v1294 = *(_OWORD *)(v1280 + 32);
          v1294[1] = v1295;
          v1296 = *(_OWORD *)(v1280 + 64);
          v1297 = *(_OWORD *)(v1280 + 80);
          v1298 = *(_OWORD *)(v1280 + 112);
          v1294[4] = *(_OWORD *)(v1280 + 96);
          v1294[5] = v1298;
          v1294[2] = v1296;
          v1294[3] = v1297;
          v1299 = *(_OWORD *)(v1280 + 128);
          v1300 = *(_OWORD *)(v1280 + 144);
          v1301 = *(_OWORD *)(v1280 + 176);
          v1294[8] = *(_OWORD *)(v1280 + 160);
          v1294[9] = v1301;
          v1294[6] = v1299;
          v1294[7] = v1300;
          v1302 = *(_OWORD *)(v1280 + 192);
          v1303 = *(_OWORD *)(v1280 + 208);
          v1304 = *(_OWORD *)(v1280 + 240);
          v1294[12] = *(_OWORD *)(v1280 + 224);
          v1294[13] = v1304;
          v1294[10] = v1302;
          v1294[11] = v1303;
          sub_20F62F34C(v1280 + 16);
          *(_QWORD *)(v1280 + 264) = *(_QWORD *)(v1280 + 256);
          if (*(_QWORD *)(v1280 + 304))
          {
            v1305 = *(_QWORD **)(v1280 + 296);
            if (v1305)
            {
              do
              {
                v1306 = (_QWORD *)*v1305;
                operator delete(v1305);
                v1305 = v1306;
              }
              while (v1306);
            }
            *(_QWORD *)(v1280 + 296) = 0;
            v1307 = *(_QWORD *)(v1280 + 288);
            if (v1307)
            {
              for (jj = 0; jj != v1307; ++jj)
                *(_QWORD *)(*(_QWORD *)(v1280 + 280) + 8 * jj) = 0;
            }
            *(_QWORD *)(v1280 + 304) = 0;
          }
          v1278 += 16;
        }
        v1309 = v1264[743];
        v1310 = v1264[744];
        while (v1309 != v1310)
        {
          v1311 = *(_QWORD *)(v1309 + 8);
          v1312 = *(_QWORD *)(v1311 + 24);
          *(_OWORD *)(v1311 + 32) = *(_OWORD *)v1312;
          v1314 = *(_OWORD *)(v1312 + 32);
          v1313 = *(_OWORD *)(v1312 + 48);
          v1315 = *(_OWORD *)(v1312 + 16);
          *(_QWORD *)(v1311 + 96) = *(_QWORD *)(v1312 + 64);
          *(_OWORD *)(v1311 + 64) = v1314;
          *(_OWORD *)(v1311 + 80) = v1313;
          *(_OWORD *)(v1311 + 48) = v1315;
          sub_20F811C04(v1311 + 16);
          v1316 = *(_QWORD *)(v1311 + 24);
          *(_OWORD *)v1316 = *(_OWORD *)(v1311 + 32);
          v1317 = *(_OWORD *)(v1311 + 48);
          v1318 = *(_OWORD *)(v1311 + 64);
          v1319 = *(_OWORD *)(v1311 + 80);
          *(_QWORD *)(v1316 + 64) = *(_QWORD *)(v1311 + 96);
          *(_OWORD *)(v1316 + 32) = v1318;
          *(_OWORD *)(v1316 + 48) = v1319;
          *(_OWORD *)(v1316 + 16) = v1317;
          *(_QWORD *)(v1311 + 112) = *(_QWORD *)(v1311 + 104);
          if (*(_QWORD *)(v1311 + 152))
          {
            v1320 = *(_QWORD **)(v1311 + 144);
            if (v1320)
            {
              do
              {
                v1321 = (_QWORD *)*v1320;
                operator delete(v1320);
                v1320 = v1321;
              }
              while (v1321);
            }
            *(_QWORD *)(v1311 + 144) = 0;
            v1322 = *(_QWORD *)(v1311 + 136);
            if (v1322)
            {
              for (kk = 0; kk != v1322; ++kk)
                *(_QWORD *)(*(_QWORD *)(v1311 + 128) + 8 * kk) = 0;
            }
            *(_QWORD *)(v1311 + 152) = 0;
          }
          v1309 += 16;
        }
        *(_BYTE *)(v1264[7846] + 31280) = 1;
      }
      goto LABEL_1273;
    }
    *(_QWORD *)object = v2582;
    *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
    *(_DWORD *)&object[24] = 4;
    *(_QWORD *)&object[32] = "unknown file";
    *(_DWORD *)&object[40] = 3222;
    v2576.f64[0] = 0.0;
    *(_QWORD *)&v2575 = "unknown function";
    *((_QWORD *)&v2575 + 1) = 0;
    v455 = **(_QWORD **)object;
    v456 = **(_QWORD **)object + 16;
    if (*(char *)(**(_QWORD **)object + 39) < 0)
    {
      v458 = *(const char **)(v455 + 16);
      v457 = *(_QWORD *)(v455 + 24);
      v1158 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1158 & 1) != 0)
        goto LABEL_1117;
    }
    else
    {
      v457 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
      v458 = (const char *)(**(_QWORD **)object + 16);
      v459 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v459 & 1) != 0)
        goto LABEL_1117;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)oslog);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
      if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
        operator delete(oslog[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_1117:
    if (byte_254A4A4F8[23] >= 0)
      v1159 = byte_254A4A4F8;
    else
      v1159 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1160 = byte_254A4A4F8[23];
    else
      v1160 = *(_QWORD *)&byte_254A4A4F8[8];
    oslog[0] = os_log_create(v1159, v458);
    v1161 = &oslog[1];
    if (v1160 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1160 >= 0x17)
    {
      v1162 = (v1160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1160 | 7) != 0x17)
        v1162 = v1160 | 7;
      v1163 = v1162 + 1;
      v1161 = operator new(v1162 + 1);
      oslog[3] = (os_log_t)(v1163 | 0x8000000000000000);
      oslog[1] = v1161;
      oslog[2] = (os_log_t)v1160;
    }
    else
    {
      HIBYTE(oslog[3]) = v1160;
      if (!v1160)
      {
LABEL_1131:
        *((_BYTE *)&v1161->isa + v1160) = 0;
        LOBYTE(oslog[4]) = 1;
        v1164 = &oslog[5];
        if (v457 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v457 >= 0x17)
        {
          v1165 = (v457 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v457 | 7) != 0x17)
            v1165 = v457 | 7;
          v1166 = v1165 + 1;
          v1164 = operator new(v1165 + 1);
          oslog[7] = (os_log_t)(v1166 | 0x8000000000000000);
          oslog[5] = v1164;
          oslog[6] = (os_log_t)v457;
        }
        else
        {
          HIBYTE(oslog[7]) = v457;
          if (!v457)
            goto LABEL_1139;
        }
        memmove(v1164, v458, v457);
LABEL_1139:
        *((_BYTE *)&v1164->isa + v457) = 0;
        LOBYTE(oslog[8]) = 1;
        v1167 = oslog[0];
        if (SHIBYTE(oslog[7]) < 0)
          operator delete(oslog[5]);
        if (LOBYTE(oslog[4]) && SHIBYTE(oslog[3]) < 0)
          operator delete(oslog[1]);
        if (oslog[0])
          os_release(oslog[0]);
        if (v454 && *(_QWORD *)(v454 + 24))
        {
          v1168 = _os_log_pack_size();
          v1169 = operator new(v1168, (std::align_val_t)8uLL);
          v1170 = operator new();
          v1171 = (std::__shared_weak_count *)v1170;
          v1170[1].isa = 0;
          v1172 = (unint64_t *)&v1170[1];
          v1170->isa = (Class)&off_24C9ABB80;
          v1170[2].isa = 0;
          v1170[3].isa = (Class)v1169;
          oslog[0] = v1169;
          oslog[1] = v1169;
          oslog[2] = v1170;
          do
            v1173 = __ldxr(v1172);
          while (__stxr(v1173 + 1, v1172));
          memset(&oslog[3], 0, 24);
          do
            v1174 = __ldaxr(v1172);
          while (__stlxr(v1174 - 1, v1172));
          if (!v1174)
          {
            (*((void (**))v1170->isa + 2))(v1170);
            std::__shared_weak_count::__release_weak(v1171);
          }
          v1175 = oslog[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v1176 = (char *)operator new();
          v1177 = *(unsigned __int8 *)(v455 + 39);
          if ((v1177 & 0x80u) == 0)
            v1178 = v456;
          else
            v1178 = *(_QWORD *)(v455 + 16);
          if ((v1177 & 0x80u) != 0)
            v1177 = *(_QWORD *)(v455 + 24);
          *(_QWORD *)v1176 = v1175;
          *(_OWORD *)(v1176 + 8) = *(_OWORD *)&oslog[1];
          oslog[1] = 0;
          oslog[2] = 0;
          *(_OWORD *)(v1176 + 24) = *(_OWORD *)&oslog[3];
          oslog[3] = 0;
          oslog[4] = 0;
          *((_QWORD *)v1176 + 5) = v1178;
          *((_QWORD *)v1176 + 6) = v1177;
          v1176[56] = 16;
          v2546[0] = 0;
          v2536[0] = v1176;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v454 + 24) + 40))(*(_QWORD *)(v454 + 24), v2536);
          v1179 = v2536[0];
          v2536[0] = 0;
          if (v1179)
          {
            v1180 = (std::__shared_weak_count *)*((_QWORD *)v1179 + 4);
            if (v1180)
            {
              v1181 = (unint64_t *)&v1180->__shared_owners_;
              do
                v1182 = __ldaxr(v1181);
              while (__stlxr(v1182 - 1, v1181));
              if (!v1182)
              {
                ((void (*)(std::__shared_weak_count *))v1180->__on_zero_shared)(v1180);
                std::__shared_weak_count::__release_weak(v1180);
              }
            }
            v1183 = (std::__shared_weak_count *)*((_QWORD *)v1179 + 2);
            if (v1183)
            {
              v1184 = (unint64_t *)&v1183->__shared_owners_;
              do
                v1185 = __ldaxr(v1184);
              while (__stlxr(v1185 - 1, v1184));
              if (!v1185)
              {
                ((void (*)(std::__shared_weak_count *))v1183->__on_zero_shared)(v1183);
                std::__shared_weak_count::__release_weak(v1183);
              }
            }
            MEMORY[0x212BC6398](v1179, 0x10F0C40B62ED6C6);
            v1186 = v2546[0];
            v2546[0] = 0;
            if (v1186)
            {
              v1187 = (std::__shared_weak_count *)*((_QWORD *)v1186 + 4);
              if (v1187)
              {
                v1188 = (unint64_t *)&v1187->__shared_owners_;
                do
                  v1189 = __ldaxr(v1188);
                while (__stlxr(v1189 - 1, v1188));
                if (!v1189)
                {
                  ((void (*)(std::__shared_weak_count *))v1187->__on_zero_shared)(v1187);
                  std::__shared_weak_count::__release_weak(v1187);
                }
              }
              v1190 = (std::__shared_weak_count *)*((_QWORD *)v1186 + 2);
              if (v1190)
              {
                v1191 = (unint64_t *)&v1190->__shared_owners_;
                do
                  v1192 = __ldaxr(v1191);
                while (__stlxr(v1192 - 1, v1191));
                if (!v1192)
                {
                  ((void (*)(std::__shared_weak_count *))v1190->__on_zero_shared)(v1190);
                  std::__shared_weak_count::__release_weak(v1190);
                }
              }
              MEMORY[0x212BC6398](v1186, 0x10F0C40B62ED6C6);
            }
          }
          v1193 = (std::__shared_weak_count *)oslog[4];
          if (oslog[4])
          {
            v1194 = (unint64_t *)&oslog[4][1];
            do
              v1195 = __ldaxr(v1194);
            while (__stlxr(v1195 - 1, v1194));
            if (!v1195)
            {
              ((void (*)(std::__shared_weak_count *))v1193->__on_zero_shared)(v1193);
              std::__shared_weak_count::__release_weak(v1193);
            }
          }
          v1196 = (std::__shared_weak_count *)oslog[2];
          if (oslog[2])
          {
            v1197 = (unint64_t *)&oslog[2][1];
            do
              v1198 = __ldaxr(v1197);
            while (__stlxr(v1198 - 1, v1197));
            if (!v1198)
            {
              ((void (*)(std::__shared_weak_count *))v1196->__on_zero_shared)(v1196);
              std::__shared_weak_count::__release_weak(v1196);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1167, OS_LOG_TYPE_ERROR);
          LOWORD(oslog[0]) = 0;
          v1199 = (void *)_os_log_send_and_compose_impl();
          if (v1199)
            free(v1199);
        }
        if (v452)
        {
          sub_20E8C003C((uint64_t)object, "Variables not being updated.");
          sub_20E863570((uint64_t)object);
        }
        sub_20E863570((uint64_t)object);
        v1200 = *(std::__shared_weak_count **)&v2576.f64[0];
        if (*(_QWORD *)&v2576.f64[0])
        {
          v1201 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
          do
            v1202 = __ldaxr(v1201);
          while (__stlxr(v1202 - 1, v1201));
          if (!v1202)
          {
            ((void (*)(std::__shared_weak_count *))v1200->__on_zero_shared)(v1200);
            std::__shared_weak_count::__release_weak(v1200);
          }
        }
        goto LABEL_1201;
      }
    }
    memmove(v1161, v1159, v1160);
    goto LABEL_1131;
  }
  v460 = *(_BYTE *)v447 == 0;
  v461 = 8;
  if (!*(_BYTE *)v447)
    v461 = 16;
  if (!*(_QWORD *)(v447 + v461))
    v460 = 1;
  if (*(_BYTE *)(a2 + 11664))
  {
    if (v460)
    {
      v462 = *(_QWORD **)(v447 + 16);
      v463 = v462[1];
      if (!*(_QWORD *)(v463 + 64))
        goto LABEL_1273;
      v466 = *(_QWORD *)(v463 + 56);
      v464 = v463 + 56;
      v465 = v466;
      if (v466)
      {
        do
        {
          v467 = v465;
          v465 = *(_QWORD *)(v465 + 8);
        }
        while (v465);
      }
      else
      {
        do
        {
          v467 = *(_QWORD *)(v464 + 16);
          _ZF = *(_QWORD *)v467 == v464;
          v464 = v467;
        }
        while (_ZF);
      }
      v468 = *(_DWORD *)(v467 + 40);
      v469 = v462[647];
      v470 = v462[648];
      if (v469 == v470)
      {
LABEL_739:
        v507 = v462[659];
        v508 = v462[660];
        if (v507 == v508)
        {
LABEL_746:
          v518 = v462[767];
          for (mm = v462[768]; v518 != mm; v518 += 16)
          {
            v520 = *(_QWORD *)(v518 + 8);
            v521 = *(_QWORD *)(v520 + 24);
            if (v521)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v521 + 24))(v521))
              {
                v522 = *(_QWORD *)(v520 + 24);
                v523 = *(uint64_t **)(v522 + 96);
                v524 = *v523;
                v525 = (double *)v523[2];
                v526 = v523[4];
                v527 = (double *)v523[6];
                _D1 = *(double *)(v522 + 16) - v525[1];
                v529 = *(double *)(v522 + 24) - v525[2];
                _Q3.f64[0] = *(float64_t *)(v524 + 16);
                _Q7 = *(_OWORD *)(v524 + 48);
                _Q3.f64[1] = *(float64_t *)(v524 + 40);
                v532 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v524, *(int64x2_t *)(v524 + 24)), *(double *)(v522 + 8) - *v525), (float64x2_t)vzip2q_s64(*(int64x2_t *)v524, *(int64x2_t *)(v524 + 24)), _D1), _Q3, v529);
                __asm { FMLA            D2, D1, V7.D[1] }
                v534 = _D2 + *(double *)(v524 + 64) * v529;
                v535 = v532.f64[0] - *v527;
                _D2 = v532.f64[1] - v527[1];
                v537 = v534 - v527[2];
                _Q3.f64[0] = *(float64_t *)(v526 + 16);
                _Q4 = *(int64x2_t *)v526;
                _Q6 = *(int64x2_t *)(v526 + 24);
                _Q16 = *(_OWORD *)(v526 + 48);
                __asm { FMLA            D19, D2, V4.D[1] }
                _Q3.f64[1] = *(float64_t *)(v526 + 40);
                _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v526, _Q6), v535), (float64x2_t)vzip2q_s64(*(int64x2_t *)v526, _Q6), _D2), _Q3, v537);
                __asm
                {
                  FMLA            D3, D2, V16.D[1]
                  FMLA            D1, D2, V6.D[1]
                }
                _D1 = _D1 + v537 * _Q3.f64[1];
                __asm { FMLA            D2, D1, V17.D[1] }
                *(double *)(v520 + 32) = sqrt(_D2+ (_Q3.f64[0] + v537 * *(double *)(v526 + 64))* (_Q3.f64[0] + *(double *)(v526 + 64) * v537));
                _Q1 = *(float64x2_t *)(v522 + 64);
                _Q2 = (int64x2_t)vmulq_f64(_Q1, _Q1);
                _Q3.f64[0] = *(float64_t *)(v522 + 72);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(*(double *)_Q2.i64 + *(double *)(v522 + 80) * *(double *)(v522 + 80)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
              }
            }
          }
          v651 = v462[695];
          for (nn = v462[696]; v651 != nn; v651 += 16)
          {
            v653 = *(_QWORD *)(v651 + 8);
            v654 = v462[3];
            v655 = v462[4];
            if (v654 != v655)
            {
              while (*(_DWORD *)(v653 + 16) != *(_DWORD *)(*(_QWORD *)v654 + 32))
              {
                v654 += 8;
                if (v654 == v655)
                  goto LABEL_795;
              }
            }
            if (v654 == v655)
            {
LABEL_795:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 383, (uint64_t)"track_ptr != viobadata_ref_.front_end_tracks.end()", 50, (uint64_t)"Failed to find the track that corresponds to the SLAM landmark variable.", 72, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            v656 = *(_QWORD *)(v653 + 24);
            if (v656)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v656 + 24))(v656))
              {
                v657 = *(_QWORD *)(v653 + 24);
                v658 = *(_QWORD *)(v657 + 24);
                v194 = *(float64x2_t *)(v657 + 8);
                *(float64x2_t *)(v653 + 32) = v194;
                *(_QWORD *)(v653 + 48) = v658;
                _Q1 = *(float64x2_t *)(v657 + 64);
                _Q2 = (int64x2_t)vmulq_f64(_Q1, _Q1);
                _D3 = *(_QWORD *)(v657 + 72);
                __asm { FMLA            D2, D3, V1.D[1] }
                if (fabs(sqrt(*(double *)_Q2.i64 + *(double *)(v657 + 80) * *(double *)(v657 + 80)) + -1.0) > 0.000001
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
              }
            }
          }
          v671 = v462[671];
          v672 = v462[672];
          while (v671 != v672)
          {
            v673 = *(_QWORD *)(v671 + 8);
            if (*(_BYTE *)(v673 + 20))
            {
              v674 = *(_QWORD *)(v673 + 24);
              v194.f64[0] = *(float64_t *)(v674 + 16);
              _Q2.i64[0] = *(_QWORD *)(v674 + 40);
              v675 = *(int64x2_t *)(v674 + 24);
              _D4 = *(double *)(v674 + 64);
              _Q5 = *(float64x2_t *)(v674 + 48);
              v678 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v674, v675);
              _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v674, v675);
              v680 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
              v681 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
              v682 = *(double *)(v674 + 88);
              _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v678, *(double *)(v674 + 72)), _Q3, *(float64x2_t *)(v674 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v682);
              _D16 = *(_QWORD *)(v674 + 80);
              __asm { FMLA            D3, D16, V5.D[1] }
              _Q3.f64[0] = _Q3.f64[0] + _D4 * v682;
              v685 = vnegq_f64(_Q21);
              v686 = (int64x2_t)vextq_s8(v681, v680, 8uLL);
              v687 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v674, v686);
              v688 = (float64x2_t)vzip2q_s64((int64x2_t)v678, v686);
              *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
              v689 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v687, v685.f64[0]), v688, _Q21, 1), _Q5, _Q3.f64[0], 0);
              _Q16 = vmulq_f64(v194, v685);
              __asm { FMLS            D16, D2, V21.D[1] }
              *(float64_t *)(v673 + 48) = v194.f64[0];
              *(float64x2_t *)(v673 + 32) = v687;
              __asm { FMLS            D16, D4, V3.D[0] }
              v194 = vnegq_f64(_Q16);
              *(_QWORD *)(v673 + 72) = _Q2.i64[0];
              *(float64x2_t *)(v673 + 56) = v688;
              *(double *)(v673 + 96) = _D4;
              *(float64x2_t *)(v673 + 80) = _Q5;
              *(float64x2_t *)(v673 + 104) = vnegq_f64(v689);
              *(float64_t *)(v673 + 120) = v194.f64[0];
            }
            v671 += 16;
          }
          v711 = v462[707];
          v712 = v462[708];
          while (v711 != v712)
          {
            v713 = *(_QWORD *)(v711 + 8);
            if (*(_BYTE *)(v713 + 20))
            {
              v714 = *(_QWORD **)(v713 + 24);
              if (v714)
                *(_QWORD *)(v713 + 32) = *v714;
              *(_BYTE *)(v713 + 40) = 0;
            }
            v711 += 16;
          }
          v719 = v462[719];
          v720 = v462[720];
          while (v719 != v720)
          {
            v721 = *(_QWORD *)(v719 + 8);
            if (*(_BYTE *)(v721 + 20))
            {
              *(_QWORD *)(v721 + 88) = *(_QWORD *)(v721 + 80);
              if (*(_QWORD *)(v721 + 128))
              {
                v722 = *(_QWORD **)(v721 + 120);
                if (v722)
                {
                  do
                  {
                    v723 = (_QWORD *)*v722;
                    operator delete(v722);
                    v722 = v723;
                  }
                  while (v723);
                }
                *(_QWORD *)(v721 + 120) = 0;
                v724 = *(_QWORD *)(v721 + 112);
                if (v724)
                {
                  for (i1 = 0; i1 != v724; ++i1)
                    *(_QWORD *)(*(_QWORD *)(v721 + 104) + 8 * i1) = 0;
                }
                *(_QWORD *)(v721 + 128) = 0;
              }
              v726 = *(_QWORD *)(v721 + 24);
              v727 = *(_OWORD *)(v726 + 16);
              *(_OWORD *)(v721 + 32) = *(_OWORD *)v726;
              *(_OWORD *)(v721 + 48) = v727;
              v728 = *(_BYTE *)(v726 + 40);
              *(_QWORD *)(v721 + 64) = *(_QWORD *)(v726 + 32);
              *(_BYTE *)(v721 + 72) = v728;
              sub_20F6169C8(v721 + 16);
              sub_20F616F2C(v721 + 16);
            }
            v719 += 16;
          }
          v739 = v462[731];
          v740 = v462[732];
          while (v739 != v740)
          {
            v741 = *(_QWORD *)(v739 + 8);
            if (*(_BYTE *)(v741 + 20))
            {
              *(_QWORD *)(v741 + 264) = *(_QWORD *)(v741 + 256);
              if (*(_QWORD *)(v741 + 304))
              {
                v742 = *(_QWORD **)(v741 + 296);
                if (v742)
                {
                  do
                  {
                    v743 = (_QWORD *)*v742;
                    operator delete(v742);
                    v742 = v743;
                  }
                  while (v743);
                }
                *(_QWORD *)(v741 + 296) = 0;
                v744 = *(_QWORD *)(v741 + 288);
                if (v744)
                {
                  for (i2 = 0; i2 != v744; ++i2)
                    *(_QWORD *)(*(_QWORD *)(v741 + 280) + 8 * i2) = 0;
                }
                *(_QWORD *)(v741 + 304) = 0;
              }
              v746 = *(__n128 **)(v741 + 24);
              v747 = v746[1];
              *(__n128 *)(v741 + 32) = *v746;
              *(__n128 *)(v741 + 48) = v747;
              v748 = v746[5];
              v750 = v746[2];
              v749 = v746[3];
              *(__n128 *)(v741 + 96) = v746[4];
              *(__n128 *)(v741 + 112) = v748;
              *(__n128 *)(v741 + 64) = v750;
              *(__n128 *)(v741 + 80) = v749;
              v751 = v746[9];
              v753 = v746[6];
              v752 = v746[7];
              *(__n128 *)(v741 + 160) = v746[8];
              *(__n128 *)(v741 + 176) = v751;
              *(__n128 *)(v741 + 128) = v753;
              *(__n128 *)(v741 + 144) = v752;
              v754 = v746[12];
              v755 = v746[13];
              v757 = v746[10];
              v756 = v746[11];
              *(__n128 *)(v741 + 224) = v754;
              *(__n128 *)(v741 + 240) = v755;
              *(__n128 *)(v741 + 192) = v757;
              *(__n128 *)(v741 + 208) = v756;
              for (i3 = *(uint64_t ***)(v741 + 296); i3; i3 = (uint64_t **)*i3)
                v754.n128_f64[0] = sub_20F6182A0((char *)i3[5], (float64x2_t *)(v741 + 32), v754);
              sub_20F6178A8(v741 + 16);
            }
            v739 += 16;
          }
          v779 = v462[743];
          v780 = v462[744];
          while (v779 != v780)
          {
            v785 = *(_QWORD *)(v779 + 8);
            if (*(_BYTE *)(v785 + 20))
            {
              *(_QWORD *)(v785 + 112) = *(_QWORD *)(v785 + 104);
              if (*(_QWORD *)(v785 + 152))
              {
                v786 = *(_QWORD **)(v785 + 144);
                if (v786)
                {
                  do
                  {
                    v787 = (_QWORD *)*v786;
                    operator delete(v786);
                    v786 = v787;
                  }
                  while (v787);
                }
                *(_QWORD *)(v785 + 144) = 0;
                v788 = *(_QWORD *)(v785 + 136);
                if (v788)
                {
                  for (i4 = 0; i4 != v788; ++i4)
                    *(_QWORD *)(*(_QWORD *)(v785 + 128) + 8 * i4) = 0;
                }
                *(_QWORD *)(v785 + 152) = 0;
              }
              v781 = *(_QWORD *)(v785 + 24);
              *(_OWORD *)(v785 + 32) = *(_OWORD *)v781;
              v783 = *(_OWORD *)(v781 + 32);
              v782 = *(_OWORD *)(v781 + 48);
              v784 = *(_OWORD *)(v781 + 16);
              *(_QWORD *)(v785 + 96) = *(_QWORD *)(v781 + 64);
              *(_OWORD *)(v785 + 64) = v783;
              *(_OWORD *)(v785 + 80) = v782;
              *(_OWORD *)(v785 + 48) = v784;
              sub_20F811C04(v785 + 16);
            }
            v779 += 16;
          }
          v801 = v462[683];
          v802 = v462[684];
          while (v801 != v802)
          {
            v803 = *(_QWORD *)(v801 + 8);
            if (*(_BYTE *)(v803 + 20))
            {
              v804 = *(_QWORD *)(v803 + 24);
              v194.f64[0] = *(float64_t *)(v804 + 16);
              _Q2.i64[0] = *(_QWORD *)(v804 + 40);
              v805 = *(int64x2_t *)(v804 + 24);
              _D4 = *(double *)(v804 + 64);
              _Q5 = *(float64x2_t *)(v804 + 48);
              v808 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v804, v805);
              _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v804, v805);
              v810 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
              v811 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
              v812 = *(double *)(v804 + 88);
              _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v808, *(double *)(v804 + 72)), _Q3, *(float64x2_t *)(v804 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v812);
              _D16 = *(_QWORD *)(v804 + 80);
              __asm { FMLA            D3, D16, V5.D[1] }
              _Q3.f64[0] = _Q3.f64[0] + _D4 * v812;
              v815 = vnegq_f64(_Q21);
              v816 = (int64x2_t)vextq_s8(v811, v810, 8uLL);
              v817 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v804, v816);
              v818 = (float64x2_t)vzip2q_s64((int64x2_t)v808, v816);
              *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
              v819 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v817, v815.f64[0]), v818, _Q21, 1), _Q5, _Q3.f64[0], 0);
              _Q16 = vmulq_f64(v194, v815);
              __asm { FMLS            D16, D2, V21.D[1] }
              *(float64_t *)(v803 + 48) = v194.f64[0];
              *(float64x2_t *)(v803 + 32) = v817;
              __asm { FMLS            D16, D4, V3.D[0] }
              v194 = vnegq_f64(_Q16);
              *(_QWORD *)(v803 + 72) = _Q2.i64[0];
              *(float64x2_t *)(v803 + 56) = v818;
              *(double *)(v803 + 96) = _D4;
              *(float64x2_t *)(v803 + 80) = _Q5;
              *(float64x2_t *)(v803 + 104) = vnegq_f64(v819);
              *(float64_t *)(v803 + 120) = v194.f64[0];
            }
            v801 += 16;
          }
          v841 = v462[755];
          v842 = v462[756];
          while (v841 != v842)
          {
            v843 = *(_QWORD *)(v841 + 8);
            if (*(_BYTE *)(v843 + 20))
            {
              v844 = *(__int128 **)(v843 + 24);
              if (v844)
              {
                v845 = *v844;
                *(_QWORD *)(v843 + 48) = *((_QWORD *)v844 + 2);
                *(_OWORD *)(v843 + 32) = v845;
              }
            }
            v841 += 16;
          }
          goto LABEL_1273;
        }
        while (1)
        {
          v512 = *(_QWORD *)(v507 + 8);
          if (!*(_BYTE *)(v512 + 20))
            goto LABEL_742;
          if (*(_DWORD *)v507 == v468)
          {
            v513 = *(_QWORD *)(v512 + 24);
            v514 = *(_QWORD *)(v512 + 96);
            _Q2 = *(int64x2_t *)(v512 + 64);
            v515 = *(_OWORD *)(v512 + 80);
            v516 = *(_OWORD *)(v512 + 32);
            v517 = *(_OWORD *)(v512 + 48);
            *(int64x2_t *)(v513 + 128) = _Q2;
            *(_OWORD *)(v513 + 144) = v515;
            *(_QWORD *)(v513 + 160) = v514;
            *(_OWORD *)(v513 + 96) = v516;
            *(_OWORD *)(v513 + 112) = v517;
            v507 += 16;
            if (v507 == v508)
              goto LABEL_746;
          }
          else
          {
            v509 = *(_QWORD *)(v512 + 24);
            v194 = *(float64x2_t *)(v509 + 96);
            v510 = *(_OWORD *)(v509 + 112);
            _Q2 = *(int64x2_t *)(v509 + 128);
            v511 = *(_OWORD *)(v509 + 144);
            *(_QWORD *)(v512 + 96) = *(_QWORD *)(v509 + 160);
            *(int64x2_t *)(v512 + 64) = _Q2;
            *(_OWORD *)(v512 + 80) = v511;
            *(float64x2_t *)(v512 + 32) = v194;
            *(_OWORD *)(v512 + 48) = v510;
            *(_BYTE *)(v512 + 104) = 0;
LABEL_742:
            v507 += 16;
            if (v507 == v508)
              goto LABEL_746;
          }
        }
      }
      while (1)
      {
        v489 = *(_QWORD *)(v469 + 8);
        if (!*(_BYTE *)(v489 + 20))
          goto LABEL_735;
        v490 = *(_QWORD *)(v489 + 24);
        if (*(_DWORD *)v469 == v468)
        {
          v194.f64[0] = *(float64_t *)(v489 + 48);
          v491 = *(int64x2_t *)(v489 + 32);
          _Q2.i64[0] = *(_QWORD *)(v489 + 72);
          v492 = *(int64x2_t *)(v489 + 56);
          _D4 = *(double *)(v489 + 96);
          _Q5 = *(float64x2_t *)(v489 + 80);
          v495 = (float64x2_t)vzip1q_s64(v491, v492);
          _Q3 = (float64x2_t)vzip2q_s64(v491, v492);
          v497 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
          v498 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
          v499 = *(double *)(v489 + 120);
          _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v495, *(double *)(v489 + 104)), _Q3, *(float64x2_t *)(v489 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v499);
          _D16 = *(_QWORD *)(v489 + 112);
          __asm { FMLA            D3, D16, V5.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + _D4 * v499;
          v502 = vnegq_f64(_Q21);
          v503 = (int64x2_t)vextq_s8(v498, v497, 8uLL);
          v504 = (float64x2_t)vzip1q_s64(v491, v503);
          v505 = (float64x2_t)vzip2q_s64((int64x2_t)v495, v503);
          *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
          *(float64_t *)(v490 + 16) = v194.f64[0];
          *(float64x2_t *)v490 = v504;
          *(_QWORD *)(v490 + 40) = _Q2.i64[0];
          *(float64x2_t *)(v490 + 24) = v505;
          *(double *)(v490 + 64) = _D4;
          *(float64x2_t *)(v490 + 48) = _Q5;
          _Q0 = vmulq_f64(v194, v502);
          __asm
          {
            FMLS            D0, D2, V21.D[1]
            FMLS            D0, D4, V3.D[0]
          }
          v194 = vnegq_f64(_Q0);
          *(float64x2_t *)(v490 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v504, v502.f64[0]), v505, _Q21, 1), _Q5, _Q3.f64[0], 0));
          *(float64_t *)(v490 + 88) = v194.f64[0];
          v469 += 16;
          if (v469 == v470)
            goto LABEL_739;
        }
        else
        {
          v194.f64[0] = *(float64_t *)(v490 + 16);
          _Q2.i64[0] = *(_QWORD *)(v490 + 40);
          v471 = *(int64x2_t *)(v490 + 24);
          _D4 = *(double *)(v490 + 64);
          _Q5 = *(float64x2_t *)(v490 + 48);
          v474 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v490, v471);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v490, v471);
          v476 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
          v477 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
          v478 = *(double *)(v490 + 88);
          _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v474, *(double *)(v490 + 72)), _Q3, *(float64x2_t *)(v490 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v478);
          _D16 = *(_QWORD *)(v490 + 80);
          __asm { FMLA            D3, D16, V5.D[1] }
          _Q3.f64[0] = _Q3.f64[0] + _D4 * v478;
          v483 = vnegq_f64(_Q21);
          v484 = (int64x2_t)vextq_s8(v477, v476, 8uLL);
          v485 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v490, v484);
          *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
          v486 = (float64x2_t)vzip2q_s64((int64x2_t)v474, v484);
          v487 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v485, v483.f64[0]), v486, _Q21, 1), _Q5, _Q3.f64[0], 0);
          _Q16 = vmulq_f64(v194, v483);
          __asm { FMLS            D16, D2, V21.D[1] }
          *(float64_t *)(v489 + 48) = v194.f64[0];
          *(float64x2_t *)(v489 + 32) = v485;
          *(_QWORD *)(v489 + 72) = _Q2.i64[0];
          __asm { FMLS            D16, D4, V3.D[0] }
          v194 = vnegq_f64(_Q16);
          *(float64x2_t *)(v489 + 56) = v486;
          *(double *)(v489 + 96) = _D4;
          *(float64x2_t *)(v489 + 80) = _Q5;
          *(float64x2_t *)(v489 + 104) = vnegq_f64(v487);
          *(float64_t *)(v489 + 120) = v194.f64[0];
          *(_BYTE *)(v489 + 128) = 0;
LABEL_735:
          v469 += 16;
          if (v469 == v470)
            goto LABEL_739;
        }
      }
    }
    v568 = *(_QWORD **)(v447 + 8);
    v569 = v568[1];
    if (!*(_QWORD *)(v569 + 64))
      goto LABEL_1273;
    v572 = *(_QWORD *)(v569 + 56);
    v570 = v569 + 56;
    v571 = v572;
    if (v572)
    {
      do
      {
        v573 = v571;
        v571 = *(_QWORD *)(v571 + 8);
      }
      while (v571);
    }
    else
    {
      do
      {
        v573 = *(_QWORD *)(v570 + 16);
        _ZF = *(_QWORD *)v573 == v570;
        v570 = v573;
      }
      while (_ZF);
    }
    v574 = *(_DWORD *)(v573 + 40);
    v575 = v568[649];
    v576 = v568[650];
    if (v575 == v576)
    {
LABEL_772:
      v611 = v568[661];
      v612 = v568[662];
      if (v611 == v612)
      {
LABEL_779:
        v622 = v568[769];
        for (i5 = v568[770]; v622 != i5; v622 += 16)
        {
          v624 = *(_QWORD *)(v622 + 8);
          v625 = *(_QWORD *)(v624 + 24);
          if (v625)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v625 + 24))(v625))
            {
              v626 = *(_QWORD *)(v624 + 24);
              v627 = *(uint64_t **)(v626 + 96);
              v628 = *v627;
              v629 = (double *)v627[2];
              v630 = v627[4];
              v631 = (double *)v627[6];
              _D1 = *(double *)(v626 + 16) - v629[1];
              v633 = *(double *)(v626 + 24) - v629[2];
              _Q3.f64[0] = *(float64_t *)(v628 + 16);
              _Q7 = *(_OWORD *)(v628 + 48);
              _Q3.f64[1] = *(float64_t *)(v628 + 40);
              v636 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v628, *(int64x2_t *)(v628 + 24)), *(double *)(v626 + 8) - *v629), (float64x2_t)vzip2q_s64(*(int64x2_t *)v628, *(int64x2_t *)(v628 + 24)), _D1), _Q3, v633);
              __asm { FMLA            D2, D1, V7.D[1] }
              v638 = _D2 + *(double *)(v628 + 64) * v633;
              v639 = v636.f64[0] - *v631;
              _D2 = v636.f64[1] - v631[1];
              v641 = v638 - v631[2];
              _Q3.f64[0] = *(float64_t *)(v630 + 16);
              _Q4 = *(int64x2_t *)v630;
              _Q6 = *(int64x2_t *)(v630 + 24);
              _Q16 = *(_OWORD *)(v630 + 48);
              __asm { FMLA            D19, D2, V4.D[1] }
              _Q3.f64[1] = *(float64_t *)(v630 + 40);
              _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v630, _Q6), v639), (float64x2_t)vzip2q_s64(*(int64x2_t *)v630, _Q6), _D2), _Q3, v641);
              __asm
              {
                FMLA            D3, D2, V16.D[1]
                FMLA            D1, D2, V6.D[1]
              }
              _D1 = _D1 + v641 * _Q3.f64[1];
              __asm { FMLA            D2, D1, V17.D[1] }
              *(double *)(v624 + 32) = sqrt(_D2+ (_Q3.f64[0] + v641 * *(double *)(v630 + 64))* (_Q3.f64[0] + *(double *)(v630 + 64) * v641));
              _Q1 = *(float64x2_t *)(v626 + 64);
              _Q2 = (int64x2_t)vmulq_f64(_Q1, _Q1);
              _Q3.f64[0] = *(float64_t *)(v626 + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(*(double *)_Q2.i64 + *(double *)(v626 + 80) * *(double *)(v626 + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
          }
        }
        v661 = v568[697];
        for (i6 = v568[698]; v661 != i6; v661 += 16)
        {
          v663 = *(_QWORD *)(v661 + 8);
          v664 = v568[3];
          v665 = v568[4];
          if (v664 != v665)
          {
            while (*(_DWORD *)(v663 + 16) != *(_DWORD *)(*(_QWORD *)v664 + 32))
            {
              v664 += 8;
              if (v664 == v665)
                goto LABEL_809;
            }
          }
          if (v664 == v665)
          {
LABEL_809:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 383, (uint64_t)"track_ptr != viobadata_ref_.front_end_tracks.end()", 50, (uint64_t)"Failed to find the track that corresponds to the SLAM landmark variable.", 72, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
          v666 = *(_QWORD *)(v663 + 24);
          if (v666)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v666 + 24))(v666))
            {
              v667 = *(_QWORD *)(v663 + 24);
              v668 = *(_QWORD *)(v667 + 24);
              v194 = *(float64x2_t *)(v667 + 8);
              *(float64x2_t *)(v663 + 32) = v194;
              *(_QWORD *)(v663 + 48) = v668;
              _Q1 = *(float64x2_t *)(v667 + 64);
              _Q2 = (int64x2_t)vmulq_f64(_Q1, _Q1);
              _D3 = *(_QWORD *)(v667 + 72);
              __asm { FMLA            D2, D3, V1.D[1] }
              if (fabs(sqrt(*(double *)_Q2.i64 + *(double *)(v667 + 80) * *(double *)(v667 + 80)) + -1.0) > 0.000001
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 811, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
          }
        }
        v691 = v568[673];
        v692 = v568[674];
        while (v691 != v692)
        {
          v693 = *(_QWORD *)(v691 + 8);
          if (*(_BYTE *)(v693 + 20))
          {
            v694 = *(_QWORD *)(v693 + 24);
            v194.f64[0] = *(float64_t *)(v694 + 16);
            _Q2.i64[0] = *(_QWORD *)(v694 + 40);
            v695 = *(int64x2_t *)(v694 + 24);
            _D4 = *(double *)(v694 + 64);
            _Q5 = *(float64x2_t *)(v694 + 48);
            v698 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v694, v695);
            _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v694, v695);
            v700 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
            v701 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
            v702 = *(double *)(v694 + 88);
            _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v698, *(double *)(v694 + 72)), _Q3, *(float64x2_t *)(v694 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v702);
            _D16 = *(_QWORD *)(v694 + 80);
            __asm { FMLA            D3, D16, V5.D[1] }
            _Q3.f64[0] = _Q3.f64[0] + _D4 * v702;
            v705 = vnegq_f64(_Q21);
            v706 = (int64x2_t)vextq_s8(v701, v700, 8uLL);
            v707 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v694, v706);
            v708 = (float64x2_t)vzip2q_s64((int64x2_t)v698, v706);
            *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
            v709 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v707, v705.f64[0]), v708, _Q21, 1), _Q5, _Q3.f64[0], 0);
            _Q16 = vmulq_f64(v194, v705);
            __asm { FMLS            D16, D2, V21.D[1] }
            *(float64_t *)(v693 + 48) = v194.f64[0];
            *(float64x2_t *)(v693 + 32) = v707;
            __asm { FMLS            D16, D4, V3.D[0] }
            v194 = vnegq_f64(_Q16);
            *(_QWORD *)(v693 + 72) = _Q2.i64[0];
            *(float64x2_t *)(v693 + 56) = v708;
            *(double *)(v693 + 96) = _D4;
            *(float64x2_t *)(v693 + 80) = _Q5;
            *(float64x2_t *)(v693 + 104) = vnegq_f64(v709);
            *(float64_t *)(v693 + 120) = v194.f64[0];
          }
          v691 += 16;
        }
        v715 = v568[709];
        v716 = v568[710];
        while (v715 != v716)
        {
          v717 = *(_QWORD *)(v715 + 8);
          if (*(_BYTE *)(v717 + 20))
          {
            v718 = *(_QWORD **)(v717 + 24);
            if (v718)
              *(_QWORD *)(v717 + 32) = *v718;
            *(_BYTE *)(v717 + 40) = 0;
          }
          v715 += 16;
        }
        v729 = v568[733];
        v730 = v568[734];
        while (v729 != v730)
        {
          v731 = *(_QWORD *)(v729 + 8);
          if (*(_BYTE *)(v731 + 20))
          {
            *(_QWORD *)(v731 + 88) = *(_QWORD *)(v731 + 80);
            if (*(_QWORD *)(v731 + 128))
            {
              v732 = *(_QWORD **)(v731 + 120);
              if (v732)
              {
                do
                {
                  v733 = (_QWORD *)*v732;
                  operator delete(v732);
                  v732 = v733;
                }
                while (v733);
              }
              *(_QWORD *)(v731 + 120) = 0;
              v734 = *(_QWORD *)(v731 + 112);
              if (v734)
              {
                for (i7 = 0; i7 != v734; ++i7)
                  *(_QWORD *)(*(_QWORD *)(v731 + 104) + 8 * i7) = 0;
              }
              *(_QWORD *)(v731 + 128) = 0;
            }
            v736 = *(_QWORD *)(v731 + 24);
            v737 = *(_OWORD *)(v736 + 16);
            *(_OWORD *)(v731 + 32) = *(_OWORD *)v736;
            *(_OWORD *)(v731 + 48) = v737;
            v738 = *(_BYTE *)(v736 + 40);
            *(_QWORD *)(v731 + 64) = *(_QWORD *)(v736 + 32);
            *(_BYTE *)(v731 + 72) = v738;
            sub_20F6169C8(v731 + 16);
            sub_20F616F2C(v731 + 16);
          }
          v729 += 16;
        }
        v759 = v568[745];
        v760 = v568[746];
        while (v759 != v760)
        {
          v761 = *(_QWORD *)(v759 + 8);
          if (*(_BYTE *)(v761 + 20))
          {
            *(_QWORD *)(v761 + 264) = *(_QWORD *)(v761 + 256);
            if (*(_QWORD *)(v761 + 304))
            {
              v762 = *(_QWORD **)(v761 + 296);
              if (v762)
              {
                do
                {
                  v763 = (_QWORD *)*v762;
                  operator delete(v762);
                  v762 = v763;
                }
                while (v763);
              }
              *(_QWORD *)(v761 + 296) = 0;
              v764 = *(_QWORD *)(v761 + 288);
              if (v764)
              {
                for (i8 = 0; i8 != v764; ++i8)
                  *(_QWORD *)(*(_QWORD *)(v761 + 280) + 8 * i8) = 0;
              }
              *(_QWORD *)(v761 + 304) = 0;
            }
            v766 = *(__n128 **)(v761 + 24);
            v767 = v766[1];
            *(__n128 *)(v761 + 32) = *v766;
            *(__n128 *)(v761 + 48) = v767;
            v768 = v766[5];
            v770 = v766[2];
            v769 = v766[3];
            *(__n128 *)(v761 + 96) = v766[4];
            *(__n128 *)(v761 + 112) = v768;
            *(__n128 *)(v761 + 64) = v770;
            *(__n128 *)(v761 + 80) = v769;
            v771 = v766[9];
            v773 = v766[6];
            v772 = v766[7];
            *(__n128 *)(v761 + 160) = v766[8];
            *(__n128 *)(v761 + 176) = v771;
            *(__n128 *)(v761 + 128) = v773;
            *(__n128 *)(v761 + 144) = v772;
            v774 = v766[12];
            v775 = v766[13];
            v777 = v766[10];
            v776 = v766[11];
            *(__n128 *)(v761 + 224) = v774;
            *(__n128 *)(v761 + 240) = v775;
            *(__n128 *)(v761 + 192) = v777;
            *(__n128 *)(v761 + 208) = v776;
            for (i9 = *(uint64_t ***)(v761 + 296); i9; i9 = (uint64_t **)*i9)
              v774.n128_f64[0] = sub_20F6182A0((char *)i9[5], (float64x2_t *)(v761 + 32), v774);
            sub_20F6178A8(v761 + 16);
          }
          v759 += 16;
        }
        v790 = v568[757];
        v791 = v568[758];
        while (v790 != v791)
        {
          v796 = *(_QWORD *)(v790 + 8);
          if (*(_BYTE *)(v796 + 20))
          {
            *(_QWORD *)(v796 + 112) = *(_QWORD *)(v796 + 104);
            if (*(_QWORD *)(v796 + 152))
            {
              v797 = *(_QWORD **)(v796 + 144);
              if (v797)
              {
                do
                {
                  v798 = (_QWORD *)*v797;
                  operator delete(v797);
                  v797 = v798;
                }
                while (v798);
              }
              *(_QWORD *)(v796 + 144) = 0;
              v799 = *(_QWORD *)(v796 + 136);
              if (v799)
              {
                for (i10 = 0; i10 != v799; ++i10)
                  *(_QWORD *)(*(_QWORD *)(v796 + 128) + 8 * i10) = 0;
              }
              *(_QWORD *)(v796 + 152) = 0;
            }
            v792 = *(_QWORD *)(v796 + 24);
            *(_OWORD *)(v796 + 32) = *(_OWORD *)v792;
            v794 = *(_OWORD *)(v792 + 32);
            v793 = *(_OWORD *)(v792 + 48);
            v795 = *(_OWORD *)(v792 + 16);
            *(_QWORD *)(v796 + 96) = *(_QWORD *)(v792 + 64);
            *(_OWORD *)(v796 + 64) = v794;
            *(_OWORD *)(v796 + 80) = v793;
            *(_OWORD *)(v796 + 48) = v795;
            sub_20F811C04(v796 + 16);
          }
          v790 += 16;
        }
        v821 = v568[685];
        v822 = v568[686];
        while (v821 != v822)
        {
          v823 = *(_QWORD *)(v821 + 8);
          if (*(_BYTE *)(v823 + 20))
          {
            v824 = *(_QWORD *)(v823 + 24);
            v194.f64[0] = *(float64_t *)(v824 + 16);
            _Q2.i64[0] = *(_QWORD *)(v824 + 40);
            v825 = *(int64x2_t *)(v824 + 24);
            _D4 = *(double *)(v824 + 64);
            _Q5 = *(float64x2_t *)(v824 + 48);
            v828 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v824, v825);
            _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v824, v825);
            v830 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
            v831 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
            v832 = *(double *)(v824 + 88);
            _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v828, *(double *)(v824 + 72)), _Q3, *(float64x2_t *)(v824 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v832);
            _D16 = *(_QWORD *)(v824 + 80);
            __asm { FMLA            D3, D16, V5.D[1] }
            _Q3.f64[0] = _Q3.f64[0] + _D4 * v832;
            v835 = vnegq_f64(_Q21);
            v836 = (int64x2_t)vextq_s8(v831, v830, 8uLL);
            v837 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v824, v836);
            v838 = (float64x2_t)vzip2q_s64((int64x2_t)v828, v836);
            *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
            v839 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v837, v835.f64[0]), v838, _Q21, 1), _Q5, _Q3.f64[0], 0);
            _Q16 = vmulq_f64(v194, v835);
            __asm { FMLS            D16, D2, V21.D[1] }
            *(float64_t *)(v823 + 48) = v194.f64[0];
            *(float64x2_t *)(v823 + 32) = v837;
            __asm { FMLS            D16, D4, V3.D[0] }
            v194 = vnegq_f64(_Q16);
            *(_QWORD *)(v823 + 72) = _Q2.i64[0];
            *(float64x2_t *)(v823 + 56) = v838;
            *(double *)(v823 + 96) = _D4;
            *(float64x2_t *)(v823 + 80) = _Q5;
            *(float64x2_t *)(v823 + 104) = vnegq_f64(v839);
            *(float64_t *)(v823 + 120) = v194.f64[0];
          }
          v821 += 16;
        }
        v846 = v568[721];
        v847 = v568[722];
        while (v846 != v847)
        {
          v848 = *(_QWORD *)(v846 + 8);
          if (*(_BYTE *)(v848 + 20))
          {
            v849 = *(__int128 **)(v848 + 24);
            if (v849)
            {
              v850 = *v849;
              *(_QWORD *)(v848 + 48) = *((_QWORD *)v849 + 2);
              *(_OWORD *)(v848 + 32) = v850;
            }
          }
          v846 += 16;
        }
        goto LABEL_1273;
      }
      while (1)
      {
        v616 = *(_QWORD *)(v611 + 8);
        if (!*(_BYTE *)(v616 + 20))
          goto LABEL_775;
        if (*(_DWORD *)v611 == v574)
        {
          v617 = *(_QWORD *)(v616 + 24);
          v618 = *(_QWORD *)(v616 + 96);
          _Q2 = *(int64x2_t *)(v616 + 64);
          v619 = *(_OWORD *)(v616 + 80);
          v620 = *(_OWORD *)(v616 + 32);
          v621 = *(_OWORD *)(v616 + 48);
          *(int64x2_t *)(v617 + 128) = _Q2;
          *(_OWORD *)(v617 + 144) = v619;
          *(_QWORD *)(v617 + 160) = v618;
          *(_OWORD *)(v617 + 96) = v620;
          *(_OWORD *)(v617 + 112) = v621;
          v611 += 16;
          if (v611 == v612)
            goto LABEL_779;
        }
        else
        {
          v613 = *(_QWORD *)(v616 + 24);
          v194 = *(float64x2_t *)(v613 + 96);
          v614 = *(_OWORD *)(v613 + 112);
          _Q2 = *(int64x2_t *)(v613 + 128);
          v615 = *(_OWORD *)(v613 + 144);
          *(_QWORD *)(v616 + 96) = *(_QWORD *)(v613 + 160);
          *(int64x2_t *)(v616 + 64) = _Q2;
          *(_OWORD *)(v616 + 80) = v615;
          *(float64x2_t *)(v616 + 32) = v194;
          *(_OWORD *)(v616 + 48) = v614;
          *(_BYTE *)(v616 + 104) = 0;
LABEL_775:
          v611 += 16;
          if (v611 == v612)
            goto LABEL_779;
        }
      }
    }
    while (1)
    {
      v593 = *(_QWORD *)(v575 + 8);
      if (!*(_BYTE *)(v593 + 20))
        goto LABEL_768;
      v594 = *(_QWORD *)(v593 + 24);
      if (*(_DWORD *)v575 == v574)
      {
        v194.f64[0] = *(float64_t *)(v593 + 48);
        v595 = *(int64x2_t *)(v593 + 32);
        _Q2.i64[0] = *(_QWORD *)(v593 + 72);
        v596 = *(int64x2_t *)(v593 + 56);
        _D4 = *(double *)(v593 + 96);
        _Q5 = *(float64x2_t *)(v593 + 80);
        v599 = (float64x2_t)vzip1q_s64(v595, v596);
        _Q3 = (float64x2_t)vzip2q_s64(v595, v596);
        v601 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v602 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v603 = *(double *)(v593 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v599, *(double *)(v593 + 104)), _Q3, *(float64x2_t *)(v593 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v603);
        _D16 = *(_QWORD *)(v593 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v603;
        v606 = vnegq_f64(_Q21);
        v607 = (int64x2_t)vextq_s8(v602, v601, 8uLL);
        v608 = (float64x2_t)vzip1q_s64(v595, v607);
        v609 = (float64x2_t)vzip2q_s64((int64x2_t)v599, v607);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v594 + 16) = v194.f64[0];
        *(float64x2_t *)v594 = v608;
        *(_QWORD *)(v594 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v594 + 24) = v609;
        *(double *)(v594 + 64) = _D4;
        *(float64x2_t *)(v594 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v606);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v594 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v608, v606.f64[0]), v609, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v594 + 88) = v194.f64[0];
        v575 += 16;
        if (v575 == v576)
          goto LABEL_772;
      }
      else
      {
        v194.f64[0] = *(float64_t *)(v594 + 16);
        _Q2.i64[0] = *(_QWORD *)(v594 + 40);
        v577 = *(int64x2_t *)(v594 + 24);
        _D4 = *(double *)(v594 + 64);
        _Q5 = *(float64x2_t *)(v594 + 48);
        v580 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v594, v577);
        _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v594, v577);
        v582 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v583 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v584 = *(double *)(v594 + 88);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v580, *(double *)(v594 + 72)), _Q3, *(float64x2_t *)(v594 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v584);
        _D16 = *(_QWORD *)(v594 + 80);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v584;
        v587 = vnegq_f64(_Q21);
        v588 = (int64x2_t)vextq_s8(v583, v582, 8uLL);
        v589 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v594, v588);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        v590 = (float64x2_t)vzip2q_s64((int64x2_t)v580, v588);
        v591 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v589, v587.f64[0]), v590, _Q21, 1), _Q5, _Q3.f64[0], 0);
        _Q16 = vmulq_f64(v194, v587);
        __asm { FMLS            D16, D2, V21.D[1] }
        *(float64_t *)(v593 + 48) = v194.f64[0];
        *(float64x2_t *)(v593 + 32) = v589;
        *(_QWORD *)(v593 + 72) = _Q2.i64[0];
        __asm { FMLS            D16, D4, V3.D[0] }
        v194 = vnegq_f64(_Q16);
        *(float64x2_t *)(v593 + 56) = v590;
        *(double *)(v593 + 96) = _D4;
        *(float64x2_t *)(v593 + 80) = _Q5;
        *(float64x2_t *)(v593 + 104) = vnegq_f64(v591);
        *(float64_t *)(v593 + 120) = v194.f64[0];
        *(_BYTE *)(v593 + 128) = 0;
LABEL_768:
        v575 += 16;
        if (v575 == v576)
          goto LABEL_772;
      }
    }
  }
  if (v460)
  {
    v547 = *(_QWORD **)(v447 + 16);
    v548 = v547[671];
    v549 = v547[672];
    while (v548 != v549)
    {
      v550 = *(_QWORD *)(v548 + 8);
      if (*(_BYTE *)(v550 + 20))
      {
        v551 = *(_QWORD *)(v550 + 24);
        v194.f64[0] = *(float64_t *)(v550 + 48);
        v552 = *(int64x2_t *)(v550 + 32);
        _Q2.i64[0] = *(_QWORD *)(v550 + 72);
        v553 = *(int64x2_t *)(v550 + 56);
        _D4 = *(double *)(v550 + 96);
        _Q5 = *(float64x2_t *)(v550 + 80);
        v556 = (float64x2_t)vzip1q_s64(v552, v553);
        _Q3 = (float64x2_t)vzip2q_s64(v552, v553);
        v558 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v559 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v560 = *(double *)(v550 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v556, *(double *)(v550 + 104)), _Q3, *(float64x2_t *)(v550 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v560);
        _D16 = *(_QWORD *)(v550 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v560;
        v563 = vnegq_f64(_Q21);
        v564 = (int64x2_t)vextq_s8(v559, v558, 8uLL);
        v565 = (float64x2_t)vzip1q_s64(v552, v564);
        v566 = (float64x2_t)vzip2q_s64((int64x2_t)v556, v564);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v551 + 16) = v194.f64[0];
        *(float64x2_t *)v551 = v565;
        *(_QWORD *)(v551 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v551 + 24) = v566;
        *(double *)(v551 + 64) = _D4;
        *(float64x2_t *)(v551 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v563);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v551 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v565, v563.f64[0]), v566, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v551 + 88) = v194.f64[0];
      }
      v548 += 16;
    }
    v872 = v547[647];
    v873 = v547[648];
    while (v872 != v873)
    {
      v874 = *(_QWORD *)(v872 + 8);
      if (*(_BYTE *)(v874 + 20))
      {
        v875 = *(_QWORD *)(v874 + 24);
        v194.f64[0] = *(float64_t *)(v874 + 48);
        v876 = *(int64x2_t *)(v874 + 32);
        _Q2.i64[0] = *(_QWORD *)(v874 + 72);
        v877 = *(int64x2_t *)(v874 + 56);
        _D4 = *(double *)(v874 + 96);
        _Q5 = *(float64x2_t *)(v874 + 80);
        v880 = (float64x2_t)vzip1q_s64(v876, v877);
        _Q3 = (float64x2_t)vzip2q_s64(v876, v877);
        v882 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v883 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v884 = *(double *)(v874 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v880, *(double *)(v874 + 104)), _Q3, *(float64x2_t *)(v874 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v884);
        _D16 = *(_QWORD *)(v874 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v884;
        v887 = vnegq_f64(_Q21);
        v888 = (int64x2_t)vextq_s8(v883, v882, 8uLL);
        v889 = (float64x2_t)vzip1q_s64(v876, v888);
        v890 = (float64x2_t)vzip2q_s64((int64x2_t)v880, v888);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v875 + 16) = v194.f64[0];
        *(float64x2_t *)v875 = v889;
        *(_QWORD *)(v875 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v875 + 24) = v890;
        *(double *)(v875 + 64) = _D4;
        *(float64x2_t *)(v875 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v887);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v875 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v889, v887.f64[0]), v890, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v875 + 88) = v194.f64[0];
      }
      v872 += 16;
    }
    v912 = v547[659];
    v913 = v547[660];
    while (v912 != v913)
    {
      v914 = *(_QWORD *)(v912 + 8);
      if (*(_BYTE *)(v914 + 20))
      {
        v915 = *(_QWORD *)(v914 + 24);
        v916 = *(_QWORD *)(v914 + 96);
        _Q2 = *(int64x2_t *)(v914 + 64);
        v917 = *(_OWORD *)(v914 + 80);
        v918 = *(_OWORD *)(v914 + 32);
        v919 = *(_OWORD *)(v914 + 48);
        *(int64x2_t *)(v915 + 128) = _Q2;
        *(_OWORD *)(v915 + 144) = v917;
        *(_QWORD *)(v915 + 160) = v916;
        *(_OWORD *)(v915 + 96) = v918;
        *(_OWORD *)(v915 + 112) = v919;
      }
      v912 += 16;
    }
    v928 = v547[767];
    for (i11 = v547[768]; v928 != i11; v928 += 16)
    {
      v930 = *(_QWORD *)(v928 + 8);
      v931 = *(_QWORD *)(v930 + 24);
      if ((!v931 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v931 + 24))(v931) & 1) == 0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v934 = *(_QWORD *)(v930 + 24);
      v935 = *(uint64_t **)(v934 + 96);
      v932.f64[0] = *(float64_t *)(v930 + 32);
      v936 = *v935;
      v937 = (float64x2_t *)v935[2];
      v938 = v935[4];
      v939 = (float64x2_t *)v935[6];
      v933.f64[0] = *(float64_t *)(v934 + 80);
      _Q2 = *(float64x2_t *)(v934 + 64);
      *(_QWORD *)&v941 = *(_OWORD *)&vmulq_f64(v932, v933);
      _Q0 = vmulq_n_f64(_Q2, v932.f64[0]);
      _D4 = *(_QWORD *)(v938 + 40);
      v944 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v938, _Q0.f64[0]), *(float64x2_t *)(v938 + 24), _Q0, 1), *(float64x2_t *)(v938 + 48), v941);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v938 + 64), v941);
      _Q0.f64[0] = v939[1].f64[0];
      v945 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v944, *v939);
      _D4 = *(_QWORD *)(v936 + 40);
      v948 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v936, _Q1.f64[0]), *(float64x2_t *)(v936 + 24), _Q1, 1), *(float64x2_t *)(v936 + 48), v945.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v936 + 64), v945.f64[0]);
      v945.f64[0] = v937[1].f64[0];
      *(float64x2_t *)(v934 + 8) = vaddq_f64(v948, *v937);
      *(_QWORD *)(v934 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v945);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v930 + 24) + 16))(*(_QWORD *)(v930 + 24)) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    v970 = v547[695];
    for (i12 = v547[696]; v970 != i12; v970 += 16)
    {
      v972 = *(_QWORD *)(v970 + 8);
      v973 = v547[3];
      v974 = v547[4];
      if (v973 != v974)
      {
        while (*(_DWORD *)(v972 + 16) != *(_DWORD *)(*(_QWORD *)v973 + 32))
        {
          v973 += 8;
          if (v973 == v974)
            goto LABEL_992;
        }
      }
      if (v973 == v974)
      {
LABEL_992:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 350, (uint64_t)"track_ptr != viobadata_ref_.front_end_tracks.end()", 50, (uint64_t)"Failed to find the track that corresponds to the SLAM landmark variable.", 72, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v975 = *(_QWORD *)(v972 + 24);
      if ((!v975 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v975 + 24))(v975) & 1) == 0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 818, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v976 = *(_QWORD *)(v972 + 24);
      v977 = *(float64x2_t *)(v972 + 32);
      *(_QWORD *)(v976 + 24) = *(_QWORD *)(v972 + 48);
      *(float64x2_t *)(v976 + 8) = v977;
      v978 = *(_QWORD *)(v972 + 24);
      v979 = *(uint64_t **)(v978 + 96);
      v980 = *v979;
      v981 = (double *)v979[2];
      v982 = v979[4];
      v983 = (double *)v979[6];
      _D1 = *(double *)(v972 + 40) - v981[1];
      v977.f64[0] = *(double *)(v972 + 48) - v981[2];
      _Q3.f64[0] = *(float64_t *)(v980 + 16);
      _Q7 = *(_OWORD *)(v980 + 48);
      _Q3.f64[1] = *(float64_t *)(v980 + 40);
      v987 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v980, *(int64x2_t *)(v980 + 24)), *(double *)(v972 + 32) - *v981), (float64x2_t)vzip2q_s64(*(int64x2_t *)v980, *(int64x2_t *)(v980 + 24)), _D1), _Q3, v977.f64[0]);
      __asm { FMLA            D2, D1, V7.D[1] }
      v977.f64[0] = _D2 + *(double *)(v980 + 64) * v977.f64[0];
      v989 = v987.f64[0] - *v983;
      _D2 = v987.f64[1] - v983[1];
      v977.f64[0] = v977.f64[0] - v983[2];
      _Q3.f64[0] = *(float64_t *)(v982 + 16);
      _Q4 = *(int64x2_t *)v982;
      _Q6 = *(int64x2_t *)(v982 + 24);
      *(_QWORD *)&_Q7 = *(_QWORD *)(v982 + 64);
      _Q16 = *(float64x2_t *)(v982 + 48);
      __asm { FMLA            D18, D2, V4.D[1] }
      _Q3.f64[1] = *(float64_t *)(v982 + 40);
      _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v982, _Q6), v989), (float64x2_t)vzip2q_s64(*(int64x2_t *)v982, _Q6), _D2), _Q3, v977.f64[0]);
      __asm { FMLA            D3, D2, V16.D[1] }
      _Q16.f64[0] = _Q3.f64[0] + *(double *)&_Q7 * v977.f64[0];
      __asm { FMLA            D1, D2, V6.D[1] }
      _D1 = _D1 + v977.f64[0] * _Q3.f64[1];
      __asm { FMLA            D2, D1, V17.D[1] }
      v977.f64[0] = 1.0 / sqrt(_D2 + (_Q3.f64[0] + v977.f64[0] * *(double *)&_Q7) * _Q16.f64[0]);
      *(float64x2_t *)(v978 + 64) = vmulq_n_f64(_Q17, v977.f64[0]);
      *(_QWORD *)(v978 + 80) = *(_OWORD *)&vmulq_f64(_Q16, v977);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v972 + 24) + 16))(*(_QWORD *)(v972 + 24)) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 843, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    v1028 = v547[707];
    v1029 = v547[708];
    while (v1028 != v1029)
    {
      v1030 = *(_QWORD *)(v1028 + 8);
      if (*(_BYTE *)(v1030 + 20))
        **(_QWORD **)(v1030 + 24) = *(_QWORD *)(v1030 + 32);
      v1028 += 16;
    }
    v1034 = v547[719];
    v1035 = v547[720];
    while (v1034 != v1035)
    {
      v1036 = *(_QWORD *)(v1034 + 8);
      if (*(_BYTE *)(v1036 + 20))
      {
        v1037 = *(_QWORD *)(v1036 + 24);
        v1038 = *(_OWORD *)(v1036 + 48);
        *(_OWORD *)v1037 = *(_OWORD *)(v1036 + 32);
        *(_OWORD *)(v1037 + 16) = v1038;
        v1039 = *(_QWORD *)(v1036 + 64);
        *(_BYTE *)(v1037 + 40) = *(_BYTE *)(v1036 + 72);
        *(_QWORD *)(v1037 + 32) = v1039;
        sub_20F62E744(v1036 + 16);
        *(_QWORD *)(v1036 + 88) = *(_QWORD *)(v1036 + 80);
        if (*(_QWORD *)(v1036 + 128))
        {
          v1040 = *(_QWORD **)(v1036 + 120);
          if (v1040)
          {
            do
            {
              v1041 = (_QWORD *)*v1040;
              operator delete(v1040);
              v1040 = v1041;
            }
            while (v1041);
          }
          *(_QWORD *)(v1036 + 120) = 0;
          v1042 = *(_QWORD *)(v1036 + 112);
          if (v1042)
          {
            for (i13 = 0; i13 != v1042; ++i13)
              *(_QWORD *)(*(_QWORD *)(v1036 + 104) + 8 * i13) = 0;
          }
          *(_QWORD *)(v1036 + 128) = 0;
        }
      }
      v1034 += 16;
    }
    v1054 = v547[731];
    v1055 = v547[732];
    while (v1054 != v1055)
    {
      v1056 = *(_QWORD *)(v1054 + 8);
      if (*(_BYTE *)(v1056 + 20))
      {
        v1057 = *(_OWORD **)(v1056 + 24);
        v1058 = *(_OWORD *)(v1056 + 48);
        *v1057 = *(_OWORD *)(v1056 + 32);
        v1057[1] = v1058;
        v1059 = *(_OWORD *)(v1056 + 64);
        v1060 = *(_OWORD *)(v1056 + 80);
        v1061 = *(_OWORD *)(v1056 + 112);
        v1057[4] = *(_OWORD *)(v1056 + 96);
        v1057[5] = v1061;
        v1057[2] = v1059;
        v1057[3] = v1060;
        v1062 = *(_OWORD *)(v1056 + 128);
        v1063 = *(_OWORD *)(v1056 + 144);
        v1064 = *(_OWORD *)(v1056 + 176);
        v1057[8] = *(_OWORD *)(v1056 + 160);
        v1057[9] = v1064;
        v1057[6] = v1062;
        v1057[7] = v1063;
        v1065 = *(_OWORD *)(v1056 + 192);
        v1066 = *(_OWORD *)(v1056 + 208);
        v1067 = *(_OWORD *)(v1056 + 240);
        v1057[12] = *(_OWORD *)(v1056 + 224);
        v1057[13] = v1067;
        v1057[10] = v1065;
        v1057[11] = v1066;
        sub_20F62F34C(v1056 + 16);
        *(_QWORD *)(v1056 + 264) = *(_QWORD *)(v1056 + 256);
        if (*(_QWORD *)(v1056 + 304))
        {
          v1068 = *(_QWORD **)(v1056 + 296);
          if (v1068)
          {
            do
            {
              v1069 = (_QWORD *)*v1068;
              operator delete(v1068);
              v1068 = v1069;
            }
            while (v1069);
          }
          *(_QWORD *)(v1056 + 296) = 0;
          v1070 = *(_QWORD *)(v1056 + 288);
          if (v1070)
          {
            for (i14 = 0; i14 != v1070; ++i14)
              *(_QWORD *)(*(_QWORD *)(v1056 + 280) + 8 * i14) = 0;
          }
          *(_QWORD *)(v1056 + 304) = 0;
        }
      }
      v1054 += 16;
    }
    v1090 = v547[743];
    v1091 = v547[744];
    while (v1090 != v1091)
    {
      v1092 = *(_QWORD *)(v1090 + 8);
      if (*(_BYTE *)(v1092 + 20))
      {
        v1093 = *(_QWORD *)(v1092 + 24);
        *(_OWORD *)v1093 = *(_OWORD *)(v1092 + 32);
        v194 = *(float64x2_t *)(v1092 + 48);
        v1094 = *(_OWORD *)(v1092 + 64);
        _Q2 = *(int64x2_t *)(v1092 + 80);
        *(_QWORD *)(v1093 + 64) = *(_QWORD *)(v1092 + 96);
        *(_OWORD *)(v1093 + 32) = v1094;
        *(int64x2_t *)(v1093 + 48) = _Q2;
        *(float64x2_t *)(v1093 + 16) = v194;
        *(_QWORD *)(v1092 + 112) = *(_QWORD *)(v1092 + 104);
        if (*(_QWORD *)(v1092 + 152))
        {
          v1095 = *(_QWORD **)(v1092 + 144);
          if (v1095)
          {
            do
            {
              v1096 = (_QWORD *)*v1095;
              operator delete(v1095);
              v1095 = v1096;
            }
            while (v1096);
          }
          *(_QWORD *)(v1092 + 144) = 0;
          v1097 = *(_QWORD *)(v1092 + 136);
          if (v1097)
          {
            for (i15 = 0; i15 != v1097; ++i15)
              *(_QWORD *)(*(_QWORD *)(v1092 + 128) + 8 * i15) = 0;
          }
          *(_QWORD *)(v1092 + 152) = 0;
        }
      }
      v1090 += 16;
    }
    v1108 = v547[683];
    v1109 = v547[684];
    while (v1108 != v1109)
    {
      v1110 = *(_QWORD *)(v1108 + 8);
      if (*(_BYTE *)(v1110 + 20))
      {
        v1111 = *(_QWORD *)(v1110 + 24);
        v194.f64[0] = *(float64_t *)(v1110 + 48);
        v1112 = *(int64x2_t *)(v1110 + 32);
        _Q2.i64[0] = *(_QWORD *)(v1110 + 72);
        v1113 = *(int64x2_t *)(v1110 + 56);
        _D4 = *(double *)(v1110 + 96);
        _Q5 = *(float64x2_t *)(v1110 + 80);
        v1116 = (float64x2_t)vzip1q_s64(v1112, v1113);
        _Q3 = (float64x2_t)vzip2q_s64(v1112, v1113);
        v1118 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v1119 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v1120 = *(double *)(v1110 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1116, *(double *)(v1110 + 104)), _Q3, *(float64x2_t *)(v1110 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v1120);
        _D16 = *(_QWORD *)(v1110 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v1120;
        v1123 = vnegq_f64(_Q21);
        v1124 = (int64x2_t)vextq_s8(v1119, v1118, 8uLL);
        v1125 = (float64x2_t)vzip1q_s64(v1112, v1124);
        v1126 = (float64x2_t)vzip2q_s64((int64x2_t)v1116, v1124);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v1111 + 16) = v194.f64[0];
        *(float64x2_t *)v1111 = v1125;
        *(_QWORD *)(v1111 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v1111 + 24) = v1126;
        *(double *)(v1111 + 64) = _D4;
        *(float64x2_t *)(v1111 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v1123);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v1111 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1125, v1123.f64[0]), v1126, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v1111 + 88) = v194.f64[0];
      }
      v1108 += 16;
    }
    v1148 = v547[755];
    v1149 = v547[756];
    while (v1148 != v1149)
    {
      v1150 = *(_QWORD *)(v1148 + 8);
      if (*(_BYTE *)(v1150 + 20))
      {
        v1151 = *(_QWORD *)(v1150 + 24);
        v1152 = *(_OWORD *)(v1150 + 32);
        *(_QWORD *)(v1151 + 16) = *(_QWORD *)(v1150 + 48);
        *(_OWORD *)v1151 = v1152;
      }
      v1148 += 16;
    }
  }
  else
  {
    v851 = *(_QWORD **)(v447 + 8);
    v852 = v851[673];
    v853 = v851[674];
    while (v852 != v853)
    {
      v854 = *(_QWORD *)(v852 + 8);
      if (*(_BYTE *)(v854 + 20))
      {
        v855 = *(_QWORD *)(v854 + 24);
        v194.f64[0] = *(float64_t *)(v854 + 48);
        v856 = *(int64x2_t *)(v854 + 32);
        _Q2.i64[0] = *(_QWORD *)(v854 + 72);
        v857 = *(int64x2_t *)(v854 + 56);
        _D4 = *(double *)(v854 + 96);
        _Q5 = *(float64x2_t *)(v854 + 80);
        v860 = (float64x2_t)vzip1q_s64(v856, v857);
        _Q3 = (float64x2_t)vzip2q_s64(v856, v857);
        v862 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v863 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v864 = *(double *)(v854 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v860, *(double *)(v854 + 104)), _Q3, *(float64x2_t *)(v854 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v864);
        _D16 = *(_QWORD *)(v854 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v864;
        v867 = vnegq_f64(_Q21);
        v868 = (int64x2_t)vextq_s8(v863, v862, 8uLL);
        v869 = (float64x2_t)vzip1q_s64(v856, v868);
        v870 = (float64x2_t)vzip2q_s64((int64x2_t)v860, v868);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v855 + 16) = v194.f64[0];
        *(float64x2_t *)v855 = v869;
        *(_QWORD *)(v855 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v855 + 24) = v870;
        *(double *)(v855 + 64) = _D4;
        *(float64x2_t *)(v855 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v867);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v855 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v869, v867.f64[0]), v870, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v855 + 88) = v194.f64[0];
      }
      v852 += 16;
    }
    v892 = v851[649];
    v893 = v851[650];
    while (v892 != v893)
    {
      v894 = *(_QWORD *)(v892 + 8);
      if (*(_BYTE *)(v894 + 20))
      {
        v895 = *(_QWORD *)(v894 + 24);
        v194.f64[0] = *(float64_t *)(v894 + 48);
        v896 = *(int64x2_t *)(v894 + 32);
        _Q2.i64[0] = *(_QWORD *)(v894 + 72);
        v897 = *(int64x2_t *)(v894 + 56);
        _D4 = *(double *)(v894 + 96);
        _Q5 = *(float64x2_t *)(v894 + 80);
        v900 = (float64x2_t)vzip1q_s64(v896, v897);
        _Q3 = (float64x2_t)vzip2q_s64(v896, v897);
        v902 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v903 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v904 = *(double *)(v894 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v900, *(double *)(v894 + 104)), _Q3, *(float64x2_t *)(v894 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v904);
        _D16 = *(_QWORD *)(v894 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v904;
        v907 = vnegq_f64(_Q21);
        v908 = (int64x2_t)vextq_s8(v903, v902, 8uLL);
        v909 = (float64x2_t)vzip1q_s64(v896, v908);
        v910 = (float64x2_t)vzip2q_s64((int64x2_t)v900, v908);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v895 + 16) = v194.f64[0];
        *(float64x2_t *)v895 = v909;
        *(_QWORD *)(v895 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v895 + 24) = v910;
        *(double *)(v895 + 64) = _D4;
        *(float64x2_t *)(v895 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v907);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v895 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v909, v907.f64[0]), v910, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v895 + 88) = v194.f64[0];
      }
      v892 += 16;
    }
    v920 = v851[661];
    v921 = v851[662];
    while (v920 != v921)
    {
      v922 = *(_QWORD *)(v920 + 8);
      if (*(_BYTE *)(v922 + 20))
      {
        v923 = *(_QWORD *)(v922 + 24);
        v924 = *(_QWORD *)(v922 + 96);
        _Q2 = *(int64x2_t *)(v922 + 64);
        v925 = *(_OWORD *)(v922 + 80);
        v926 = *(_OWORD *)(v922 + 32);
        v927 = *(_OWORD *)(v922 + 48);
        *(int64x2_t *)(v923 + 128) = _Q2;
        *(_OWORD *)(v923 + 144) = v925;
        *(_QWORD *)(v923 + 160) = v924;
        *(_OWORD *)(v923 + 96) = v926;
        *(_OWORD *)(v923 + 112) = v927;
      }
      v920 += 16;
    }
    v949 = v851[769];
    for (i16 = v851[770]; v949 != i16; v949 += 16)
    {
      v951 = *(_QWORD *)(v949 + 8);
      v952 = *(_QWORD *)(v951 + 24);
      if ((!v952 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v952 + 24))(v952) & 1) == 0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v955 = *(_QWORD *)(v951 + 24);
      v956 = *(uint64_t **)(v955 + 96);
      v953.f64[0] = *(float64_t *)(v951 + 32);
      v957 = *v956;
      v958 = (float64x2_t *)v956[2];
      v959 = v956[4];
      v960 = (float64x2_t *)v956[6];
      v954.f64[0] = *(float64_t *)(v955 + 80);
      _Q2 = *(float64x2_t *)(v955 + 64);
      *(_QWORD *)&v962 = *(_OWORD *)&vmulq_f64(v953, v954);
      _Q0 = vmulq_n_f64(_Q2, v953.f64[0]);
      _D4 = *(_QWORD *)(v959 + 40);
      v965 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v959, _Q0.f64[0]), *(float64x2_t *)(v959 + 24), _Q0, 1), *(float64x2_t *)(v959 + 48), v962);
      __asm { FMLA            D2, D4, V0.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v959 + 64), v962);
      _Q0.f64[0] = v960[1].f64[0];
      v966 = vaddq_f64(_Q2, _Q0);
      _Q1 = vaddq_f64(v965, *v960);
      _D4 = *(_QWORD *)(v957 + 40);
      v969 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v957, _Q1.f64[0]), *(float64x2_t *)(v957 + 24), _Q1, 1), *(float64x2_t *)(v957 + 48), v966.f64[0]);
      __asm { FMLA            D2, D4, V1.D[1] }
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v957 + 64), v966.f64[0]);
      v966.f64[0] = v958[1].f64[0];
      *(float64x2_t *)(v955 + 8) = vaddq_f64(v969, *v958);
      *(_QWORD *)(v955 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v966);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v951 + 24) + 16))(*(_QWORD *)(v951 + 24)) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    v999 = v851[697];
    for (i17 = v851[698]; v999 != i17; v999 += 16)
    {
      v1001 = *(_QWORD *)(v999 + 8);
      v1002 = v851[3];
      v1003 = v851[4];
      if (v1002 != v1003)
      {
        while (*(_DWORD *)(v1001 + 16) != *(_DWORD *)(*(_QWORD *)v1002 + 32))
        {
          v1002 += 8;
          if (v1002 == v1003)
            goto LABEL_1007;
        }
      }
      if (v1002 == v1003)
      {
LABEL_1007:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/VIOBABase.hpp", 350, (uint64_t)"track_ptr != viobadata_ref_.front_end_tracks.end()", 50, (uint64_t)"Failed to find the track that corresponds to the SLAM landmark variable.", 72, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
      }
      v1004 = *(_QWORD *)(v1001 + 24);
      if ((!v1004 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1004 + 24))(v1004) & 1) == 0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 818, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1005 = *(_QWORD *)(v1001 + 24);
      v1006 = *(float64x2_t *)(v1001 + 32);
      *(_QWORD *)(v1005 + 24) = *(_QWORD *)(v1001 + 48);
      *(float64x2_t *)(v1005 + 8) = v1006;
      v1007 = *(_QWORD *)(v1001 + 24);
      v1008 = *(uint64_t **)(v1007 + 96);
      v1009 = *v1008;
      v1010 = (double *)v1008[2];
      v1011 = v1008[4];
      v1012 = (double *)v1008[6];
      _D1 = *(double *)(v1001 + 40) - v1010[1];
      v1006.f64[0] = *(double *)(v1001 + 48) - v1010[2];
      _Q3.f64[0] = *(float64_t *)(v1009 + 16);
      _Q7 = *(_OWORD *)(v1009 + 48);
      _Q3.f64[1] = *(float64_t *)(v1009 + 40);
      v1016 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1009, *(int64x2_t *)(v1009 + 24)), *(double *)(v1001 + 32) - *v1010), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1009, *(int64x2_t *)(v1009 + 24)), _D1), _Q3, v1006.f64[0]);
      __asm { FMLA            D2, D1, V7.D[1] }
      v1006.f64[0] = _D2 + *(double *)(v1009 + 64) * v1006.f64[0];
      v1018 = v1016.f64[0] - *v1012;
      _D2 = v1016.f64[1] - v1012[1];
      v1006.f64[0] = v1006.f64[0] - v1012[2];
      _Q3.f64[0] = *(float64_t *)(v1011 + 16);
      _Q4 = *(int64x2_t *)v1011;
      _Q6 = *(int64x2_t *)(v1011 + 24);
      *(_QWORD *)&_Q7 = *(_QWORD *)(v1011 + 64);
      _Q16 = *(float64x2_t *)(v1011 + 48);
      __asm { FMLA            D18, D2, V4.D[1] }
      _Q3.f64[1] = *(float64_t *)(v1011 + 40);
      _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1011, _Q6), v1018), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1011, _Q6), _D2), _Q3, v1006.f64[0]);
      __asm { FMLA            D3, D2, V16.D[1] }
      _Q16.f64[0] = _Q3.f64[0] + *(double *)&_Q7 * v1006.f64[0];
      __asm { FMLA            D1, D2, V6.D[1] }
      _D1 = _D1 + v1006.f64[0] * _Q3.f64[1];
      __asm { FMLA            D2, D1, V17.D[1] }
      v1006.f64[0] = 1.0 / sqrt(_D2 + (_Q3.f64[0] + v1006.f64[0] * *(double *)&_Q7) * _Q16.f64[0]);
      *(float64x2_t *)(v1007 + 64) = vmulq_n_f64(_Q17, v1006.f64[0]);
      *(_QWORD *)(v1007 + 80) = *(_OWORD *)&vmulq_f64(_Q16, v1006);
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1001 + 24) + 16))(*(_QWORD *)(v1001 + 24)) & 1) == 0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 843, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
    }
    v1031 = v851[709];
    v1032 = v851[710];
    while (v1031 != v1032)
    {
      v1033 = *(_QWORD *)(v1031 + 8);
      if (*(_BYTE *)(v1033 + 20))
        **(_QWORD **)(v1033 + 24) = *(_QWORD *)(v1033 + 32);
      v1031 += 16;
    }
    v1044 = v851[733];
    v1045 = v851[734];
    while (v1044 != v1045)
    {
      v1046 = *(_QWORD *)(v1044 + 8);
      if (*(_BYTE *)(v1046 + 20))
      {
        v1047 = *(_QWORD *)(v1046 + 24);
        v1048 = *(_OWORD *)(v1046 + 48);
        *(_OWORD *)v1047 = *(_OWORD *)(v1046 + 32);
        *(_OWORD *)(v1047 + 16) = v1048;
        v1049 = *(_QWORD *)(v1046 + 64);
        *(_BYTE *)(v1047 + 40) = *(_BYTE *)(v1046 + 72);
        *(_QWORD *)(v1047 + 32) = v1049;
        sub_20F62E744(v1046 + 16);
        *(_QWORD *)(v1046 + 88) = *(_QWORD *)(v1046 + 80);
        if (*(_QWORD *)(v1046 + 128))
        {
          v1050 = *(_QWORD **)(v1046 + 120);
          if (v1050)
          {
            do
            {
              v1051 = (_QWORD *)*v1050;
              operator delete(v1050);
              v1050 = v1051;
            }
            while (v1051);
          }
          *(_QWORD *)(v1046 + 120) = 0;
          v1052 = *(_QWORD *)(v1046 + 112);
          if (v1052)
          {
            for (i18 = 0; i18 != v1052; ++i18)
              *(_QWORD *)(*(_QWORD *)(v1046 + 104) + 8 * i18) = 0;
          }
          *(_QWORD *)(v1046 + 128) = 0;
        }
      }
      v1044 += 16;
    }
    v1072 = v851[745];
    v1073 = v851[746];
    while (v1072 != v1073)
    {
      v1074 = *(_QWORD *)(v1072 + 8);
      if (*(_BYTE *)(v1074 + 20))
      {
        v1075 = *(_OWORD **)(v1074 + 24);
        v1076 = *(_OWORD *)(v1074 + 48);
        *v1075 = *(_OWORD *)(v1074 + 32);
        v1075[1] = v1076;
        v1077 = *(_OWORD *)(v1074 + 64);
        v1078 = *(_OWORD *)(v1074 + 80);
        v1079 = *(_OWORD *)(v1074 + 112);
        v1075[4] = *(_OWORD *)(v1074 + 96);
        v1075[5] = v1079;
        v1075[2] = v1077;
        v1075[3] = v1078;
        v1080 = *(_OWORD *)(v1074 + 128);
        v1081 = *(_OWORD *)(v1074 + 144);
        v1082 = *(_OWORD *)(v1074 + 176);
        v1075[8] = *(_OWORD *)(v1074 + 160);
        v1075[9] = v1082;
        v1075[6] = v1080;
        v1075[7] = v1081;
        v1083 = *(_OWORD *)(v1074 + 192);
        v1084 = *(_OWORD *)(v1074 + 208);
        v1085 = *(_OWORD *)(v1074 + 240);
        v1075[12] = *(_OWORD *)(v1074 + 224);
        v1075[13] = v1085;
        v1075[10] = v1083;
        v1075[11] = v1084;
        sub_20F62F34C(v1074 + 16);
        *(_QWORD *)(v1074 + 264) = *(_QWORD *)(v1074 + 256);
        if (*(_QWORD *)(v1074 + 304))
        {
          v1086 = *(_QWORD **)(v1074 + 296);
          if (v1086)
          {
            do
            {
              v1087 = (_QWORD *)*v1086;
              operator delete(v1086);
              v1086 = v1087;
            }
            while (v1087);
          }
          *(_QWORD *)(v1074 + 296) = 0;
          v1088 = *(_QWORD *)(v1074 + 288);
          if (v1088)
          {
            for (i19 = 0; i19 != v1088; ++i19)
              *(_QWORD *)(*(_QWORD *)(v1074 + 280) + 8 * i19) = 0;
          }
          *(_QWORD *)(v1074 + 304) = 0;
        }
      }
      v1072 += 16;
    }
    v1099 = v851[757];
    v1100 = v851[758];
    while (v1099 != v1100)
    {
      v1101 = *(_QWORD *)(v1099 + 8);
      if (*(_BYTE *)(v1101 + 20))
      {
        v1102 = *(_QWORD *)(v1101 + 24);
        *(_OWORD *)v1102 = *(_OWORD *)(v1101 + 32);
        v194 = *(float64x2_t *)(v1101 + 48);
        v1103 = *(_OWORD *)(v1101 + 64);
        _Q2 = *(int64x2_t *)(v1101 + 80);
        *(_QWORD *)(v1102 + 64) = *(_QWORD *)(v1101 + 96);
        *(_OWORD *)(v1102 + 32) = v1103;
        *(int64x2_t *)(v1102 + 48) = _Q2;
        *(float64x2_t *)(v1102 + 16) = v194;
        *(_QWORD *)(v1101 + 112) = *(_QWORD *)(v1101 + 104);
        if (*(_QWORD *)(v1101 + 152))
        {
          v1104 = *(_QWORD **)(v1101 + 144);
          if (v1104)
          {
            do
            {
              v1105 = (_QWORD *)*v1104;
              operator delete(v1104);
              v1104 = v1105;
            }
            while (v1105);
          }
          *(_QWORD *)(v1101 + 144) = 0;
          v1106 = *(_QWORD *)(v1101 + 136);
          if (v1106)
          {
            for (i20 = 0; i20 != v1106; ++i20)
              *(_QWORD *)(*(_QWORD *)(v1101 + 128) + 8 * i20) = 0;
          }
          *(_QWORD *)(v1101 + 152) = 0;
        }
      }
      v1099 += 16;
    }
    v1128 = v851[685];
    v1129 = v851[686];
    while (v1128 != v1129)
    {
      v1130 = *(_QWORD *)(v1128 + 8);
      if (*(_BYTE *)(v1130 + 20))
      {
        v1131 = *(_QWORD *)(v1130 + 24);
        v194.f64[0] = *(float64_t *)(v1130 + 48);
        v1132 = *(int64x2_t *)(v1130 + 32);
        _Q2.i64[0] = *(_QWORD *)(v1130 + 72);
        v1133 = *(int64x2_t *)(v1130 + 56);
        _D4 = *(double *)(v1130 + 96);
        _Q5 = *(float64x2_t *)(v1130 + 80);
        v1136 = (float64x2_t)vzip1q_s64(v1132, v1133);
        _Q3 = (float64x2_t)vzip2q_s64(v1132, v1133);
        v1138 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
        v1139 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
        v1140 = *(double *)(v1130 + 120);
        _Q21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, *(double *)(v1130 + 104)), _Q3, *(float64x2_t *)(v1130 + 104), 1), (float64x2_t)vzip1q_s64((int64x2_t)v194, _Q2), v1140);
        _D16 = *(_QWORD *)(v1130 + 112);
        __asm { FMLA            D3, D16, V5.D[1] }
        _Q3.f64[0] = _Q3.f64[0] + _D4 * v1140;
        v1143 = vnegq_f64(_Q21);
        v1144 = (int64x2_t)vextq_s8(v1139, v1138, 8uLL);
        v1145 = (float64x2_t)vzip1q_s64(v1132, v1144);
        v1146 = (float64x2_t)vzip2q_s64((int64x2_t)v1136, v1144);
        *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
        *(float64_t *)(v1131 + 16) = v194.f64[0];
        *(float64x2_t *)v1131 = v1145;
        *(_QWORD *)(v1131 + 40) = _Q2.i64[0];
        *(float64x2_t *)(v1131 + 24) = v1146;
        *(double *)(v1131 + 64) = _D4;
        *(float64x2_t *)(v1131 + 48) = _Q5;
        _Q0 = vmulq_f64(v194, v1143);
        __asm
        {
          FMLS            D0, D2, V21.D[1]
          FMLS            D0, D4, V3.D[0]
        }
        v194 = vnegq_f64(_Q0);
        *(float64x2_t *)(v1131 + 72) = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v1145, v1143.f64[0]), v1146, _Q21, 1), _Q5, _Q3.f64[0], 0));
        *(float64_t *)(v1131 + 88) = v194.f64[0];
      }
      v1128 += 16;
    }
    v1153 = v851[721];
    v1154 = v851[722];
    while (v1153 != v1154)
    {
      v1155 = *(_QWORD *)(v1153 + 8);
      if (*(_BYTE *)(v1155 + 20))
      {
        v1156 = *(_QWORD *)(v1155 + 24);
        v1157 = *(_OWORD *)(v1155 + 32);
        *(_QWORD *)(v1156 + 16) = *(_QWORD *)(v1155 + 48);
        *(_OWORD *)v1156 = v1157;
      }
      v1153 += 16;
    }
  }
LABEL_1273:
  v2499 = (_QWORD *)(a2 + 2280);
  sub_20F1329F0(a2 + 2280, a2 + 2656);
  v2498 = (_QWORD *)(a2 + 2480);
  sub_20F0E80A4((_QWORD *)(a2 + 2480), *(char **)(a2 + 2856), *(char **)(a2 + 2864), (uint64_t)(*(_QWORD *)(a2 + 2864) - *(_QWORD *)(a2 + 2856)) >> 2);
  sub_20E86811C((_QWORD *)(a2 + 2504), *(char **)(a2 + 2880), *(char **)(a2 + 2888), (uint64_t)(*(_QWORD *)(a2 + 2888) - *(_QWORD *)(a2 + 2880)) >> 3);
  sub_20E86811C((_QWORD *)(a2 + 2528), *(char **)(a2 + 2904), *(char **)(a2 + 2912), (uint64_t)(*(_QWORD *)(a2 + 2912) - *(_QWORD *)(a2 + 2904)) >> 3);
  v1324 = *(char **)(a2 + 2928);
  v1325 = *(_BYTE **)(a2 + 2936);
  v1326 = v1325 - v1324;
  v1327 = 0xCCCCCCCCCCCCCCCDLL * ((v1325 - v1324) >> 3);
  v1328 = *(_QWORD *)(a2 + 2568);
  v1329 = *(char **)(a2 + 2552);
  if (0xCCCCCCCCCCCCCCCDLL * ((v1328 - (uint64_t)v1329) >> 3) < v1327)
  {
    if (v1329)
    {
      *(_QWORD *)(a2 + 2560) = v1329;
      operator delete(v1329);
      v1328 = 0;
      *(_QWORD *)(a2 + 2552) = 0;
      *(_QWORD *)(a2 + 2560) = 0;
      *(_QWORD *)(a2 + 2568) = 0;
    }
    if (v1327 > 0x666666666666666)
      sub_20E867F44();
    v1330 = 0xCCCCCCCCCCCCCCCDLL * (v1328 >> 3);
    v1331 = 2 * v1330;
    if (2 * v1330 <= v1327)
      v1331 = 0xCCCCCCCCCCCCCCCDLL * ((v1325 - v1324) >> 3);
    if (v1330 >= 0x333333333333333)
      v1332 = 0x666666666666666;
    else
      v1332 = v1331;
    if (v1332 > 0x666666666666666)
      sub_20E867F44();
    v1333 = (char *)operator new(40 * v1332);
    v1329 = v1333;
    *(_QWORD *)(a2 + 2552) = v1333;
    *(_QWORD *)(a2 + 2560) = v1333;
    *(_QWORD *)(a2 + 2568) = &v1333[40 * v1332];
    if (v1325 != v1324)
      memcpy(v1333, v1324, v1325 - v1324);
    goto LABEL_1293;
  }
  v1334 = *(_BYTE **)(a2 + 2560);
  if (0xCCCCCCCCCCCCCCCDLL * ((v1334 - v1329) >> 3) >= v1327)
  {
    if (v1325 == v1324)
      goto LABEL_1293;
    v1336 = *(void **)(a2 + 2552);
    v1337 = *(char **)(a2 + 2928);
    goto LABEL_1292;
  }
  v1335 = &v1324[8 * ((v1334 - v1329) >> 3)];
  if (v1334 != v1329)
  {
    memmove(*(void **)(a2 + 2552), *(const void **)(a2 + 2928), v1334 - v1329);
    v1329 = *(char **)(a2 + 2560);
  }
  v1326 = v1325 - v1335;
  if (v1325 != v1335)
  {
    v1336 = v1329;
    v1337 = v1335;
LABEL_1292:
    memmove(v1336, v1337, v1326);
  }
LABEL_1293:
  *(_QWORD *)(a2 + 2560) = &v1329[v1326];
  v2503 = (_QWORD *)(a2 + 2576);
  sub_20F0E80A4((_QWORD *)(a2 + 2576), *(char **)(a2 + 2952), *(char **)(a2 + 2960), (uint64_t)(*(_QWORD *)(a2 + 2960) - *(_QWORD *)(a2 + 2952)) >> 2);
  v2500 = (_QWORD *)(a2 + 2600);
  sub_20F0E80A4((_QWORD *)(a2 + 2600), *(char **)(a2 + 2976), *(char **)(a2 + 2984), (uint64_t)(*(_QWORD *)(a2 + 2984) - *(_QWORD *)(a2 + 2976)) >> 2);
  *(_BYTE *)(a2 + 2624) = *(_BYTE *)(a2 + 3000);
  v1338 = *(char **)(a2 + 3008);
  v1339 = *(_BYTE **)(a2 + 3016);
  v1340 = v1339 - v1338;
  v1341 = 0x8E38E38E38E38E39 * ((v1339 - v1338) >> 5);
  v1342 = *(_QWORD *)(a2 + 2648);
  v1343 = *(char **)(a2 + 2632);
  if (0x8E38E38E38E38E39 * ((v1342 - (uint64_t)v1343) >> 5) < v1341)
  {
    if (v1343)
    {
      *(_QWORD *)(a2 + 2640) = v1343;
      operator delete(v1343);
      v1342 = 0;
      *(_QWORD *)(a2 + 2632) = 0;
      *(_QWORD *)(a2 + 2640) = 0;
      *(_QWORD *)(a2 + 2648) = 0;
    }
    if (v1341 > 0xE38E38E38E38E3)
      sub_20E867F44();
    v1344 = 0x8E38E38E38E38E39 * (v1342 >> 5);
    v1345 = 2 * v1344;
    if (2 * v1344 <= v1341)
      v1345 = 0x8E38E38E38E38E39 * ((v1339 - v1338) >> 5);
    if (v1344 >= 0x71C71C71C71C71)
      v1346 = 0xE38E38E38E38E3;
    else
      v1346 = v1345;
    if (v1346 > 0xE38E38E38E38E3)
      sub_20E867F44();
    v1347 = (char *)operator new(288 * v1346);
    v1343 = v1347;
    *(_QWORD *)(a2 + 2632) = v1347;
    *(_QWORD *)(a2 + 2640) = v1347;
    *(_QWORD *)(a2 + 2648) = &v1347[288 * v1346];
    if (v1339 != v1338)
      memcpy(v1347, v1338, v1339 - v1338);
    goto LABEL_1313;
  }
  v1348 = *(_BYTE **)(a2 + 2640);
  if (0x8E38E38E38E38E39 * ((v1348 - v1343) >> 5) >= v1341)
  {
    if (v1339 == v1338)
      goto LABEL_1313;
    v1350 = *(void **)(a2 + 2632);
    v1351 = *(char **)(a2 + 3008);
    goto LABEL_1312;
  }
  v1349 = &v1338[32 * ((v1348 - v1343) >> 5)];
  if (v1348 != v1343)
  {
    memmove(*(void **)(a2 + 2632), *(const void **)(a2 + 3008), v1348 - v1343);
    v1343 = *(char **)(a2 + 2640);
  }
  v1340 = v1339 - v1349;
  if (v1339 != v1349)
  {
    v1350 = v1343;
    v1351 = v1349;
LABEL_1312:
    memmove(v1350, v1351, v1340);
  }
LABEL_1313:
  *(_QWORD *)(a2 + 2640) = &v1343[v1340];
  __se = *(_QWORD **)(a2 + 7952);
  v1352 = *(_QWORD **)(*__se + 48);
  v1353 = *__se + 56;
  if (v1352 != (_QWORD *)v1353)
  {
    v1354 = 0;
    do
    {
      if ((v1352[4] || *(_DWORD *)(*v2498 + 4 * v1354) != *((_DWORD *)v1352 + 10))
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 109, (uint64_t)"(typename VIOStateSetContainerType::key_type{ util::kFrontEndSession, static_cast<uint32_t>(frameIDs[frameIndex])} == stateIter.first)", 134, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1355 = v1352[6];
      v1356 = *(_QWORD *)(v1355 + 16);
      v1357 = *(_QWORD *)(v1355 + 40);
      v1358 = *(_OWORD *)(v1355 + 24);
      v1359 = *(double *)(v1355 + 64);
      v1360 = *(_OWORD *)(v1355 + 48);
      *(_OWORD *)object = *(_OWORD *)v1355;
      *(_OWORD *)&object[24] = v1358;
      *(_QWORD *)&object[16] = v1356;
      *(_QWORD *)&object[40] = v1357;
      v2575 = v1360;
      v2576.f64[0] = v1359;
      sub_20F1B6B0C((float64x2_t *)object);
      *(_OWORD *)&oslog[4] = *(_OWORD *)&object[32];
      *(_OWORD *)&oslog[6] = v2575;
      oslog[8] = *(os_log_t *)&v2576.f64[0];
      *(_OWORD *)oslog = *(_OWORD *)object;
      *(_OWORD *)&oslog[2] = *(_OWORD *)&object[16];
      v2553 = *(_OWORD *)(v1355 + 72);
      v2554 = *(_QWORD *)(v1355 + 88);
      *(_OWORD *)v2552 = *(_OWORD *)(v1355 + 96);
      *(_QWORD *)&v2552[16] = *(_QWORD *)(v1355 + 112);
      *(_OWORD *)&oslog[9] = *(_OWORD *)(v1355 + 120);
      oslog[11] = *(os_log_t *)(v1355 + 136);
      *(_QWORD *)&v2552[40] = *(_QWORD *)(v1355 + 160);
      *(_OWORD *)&v2552[24] = *(_OWORD *)(v1355 + 144);
      v1361 = *v2499 + 168 * v1354;
      *(_QWORD *)(v1361 + 160) = v2554;
      *(_OWORD *)(v1361 + 144) = v2553;
      *(_OWORD *)(v1361 + 128) = *(_OWORD *)&v2552[32];
      *(_OWORD *)(v1361 + 112) = *(_OWORD *)&v2552[16];
      *(_OWORD *)(v1361 + 96) = *(_OWORD *)v2552;
      *(_OWORD *)(v1361 + 80) = *(_OWORD *)&oslog[10];
      *(_OWORD *)(v1361 + 64) = *(_OWORD *)&oslog[8];
      *(_OWORD *)(v1361 + 48) = *(_OWORD *)&oslog[6];
      *(_OWORD *)(v1361 + 32) = *(_OWORD *)&oslog[4];
      *(_OWORD *)(v1361 + 16) = *(_OWORD *)&oslog[2];
      *(_OWORD *)v1361 = *(_OWORD *)oslog;
      v1362 = (_QWORD *)v1352[1];
      if (v1362)
      {
        do
        {
          v1363 = v1362;
          v1362 = (_QWORD *)*v1362;
        }
        while (v1362);
      }
      else
      {
        do
        {
          v1363 = (_QWORD *)v1352[2];
          _ZF = *v1363 == (_QWORD)v1352;
          v1352 = v1363;
        }
        while (!_ZF);
      }
      ++v1354;
      v1352 = v1363;
    }
    while (v1363 != (_QWORD *)v1353);
  }
  v1364 = *(_QWORD *)(a2 + 2584) - *(_QWORD *)(a2 + 2576);
  if (v1364)
  {
    v1365 = 0;
    v1366 = v1364 >> 2;
    v1367 = (uint64_t *)__se[2];
    if (v1366 <= 1)
      v1368 = 1;
    else
      v1368 = v1366;
    do
    {
LABEL_1341:
      v1374 = 0;
      v1379 = *(unsigned int *)(*v2503 + 4 * v1365);
      _X10 = *v1367;
      __asm { PRFM            #4, [X10] }
      v1382 = v1367[3];
      for (i21 = (((0x9DDFEA08EB382D69 * v1379 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v1379
                                                                            + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
            ;
            i21 = v1374 + v1369)
      {
        v1369 = i21 & v1382;
        v1370 = *(_QWORD *)(_X10 + v1369);
        v1383 = 0x101010101010101
              * (((105 * v1379 - 27) ^ ((0x9DDFEA08EB382D69 * v1379
                                                                         + 0x376ADF16980614E5) >> 32)) & 0x7F);
        v1371 = ((v1370 ^ v1383) - 0x101010101010101) & ~(v1370 ^ v1383) & 0x8080808080808080;
        if (v1371)
          break;
LABEL_1335:
        if ((v1370 & (~v1370 << 6) & 0x8080808080808080) != 0)
        {
LABEL_1340:
          v1378 = (_OWORD *)(*(_QWORD *)(a2 + 2328) + 32 * v1365);
          *v1378 = xmmword_2103B9F58;
          v1378[1] = unk_2103B9F68;
          if (++v1365 == v1368)
            goto LABEL_1345;
          goto LABEL_1341;
        }
        v1374 += 8;
      }
      while (1)
      {
        v1372 = v1367[1] + 32 * ((v1369 + (__clz(__rbit64(v1371)) >> 3)) & v1382);
        if (!*(_QWORD *)v1372 && *(_DWORD *)(v1372 + 8) == (_DWORD)v1379)
          break;
        v1371 &= v1371 - 1;
        if (!v1371)
          goto LABEL_1335;
      }
      if (!_X10)
        goto LABEL_1340;
      v1376 = *(_QWORD *)(v1372 + 16);
      if (*(_BYTE *)(v1376 + 488))
      {
        v1377 = v1376 + 48;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 135, (uint64_t)"point_track_structure", 21, (uint64_t)"Point track missing structure.", 30, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v1377 = 8;
      }
      v1384 = *(_QWORD *)(v1377 + 16);
      v1385 = *(_QWORD *)(a2 + 2328) + 32 * v1365;
      *(_OWORD *)v1385 = *(_OWORD *)v1377;
      *(_QWORD *)(v1385 + 16) = v1384;
      *(_QWORD *)(v1385 + 24) = 0x3FF0000000000000;
      ++v1365;
    }
    while (v1365 != v1368);
  }
LABEL_1345:
  v1386 = *(_QWORD *)(a2 + 2608) - *(_QWORD *)(a2 + 2600);
  if (v1386)
  {
    v1387 = 0;
    v1388 = v1386 >> 2;
    v1389 = (uint64_t *)__se[3];
    if (v1388 <= 1)
      v1390 = 1;
    else
      v1390 = v1388;
    do
    {
LABEL_1364:
      v1396 = 0;
      v1405 = *(unsigned int *)(*v2500 + 4 * v1387);
      _X10 = *v1389;
      __asm { PRFM            #4, [X10] }
      v1408 = v1389[3];
      for (i22 = (((0x9DDFEA08EB382D69 * v1405 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v1405
                                                                            + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
            ;
            i22 = v1396 + v1391)
      {
        v1391 = i22 & v1408;
        v1392 = *(_QWORD *)(_X10 + v1391);
        v1409 = 0x101010101010101
              * (((105 * v1405 - 27) ^ ((0x9DDFEA08EB382D69 * v1405
                                                                         + 0x376ADF16980614E5) >> 32)) & 0x7F);
        v1393 = ((v1392 ^ v1409) - 0x101010101010101) & ~(v1392 ^ v1409) & 0x8080808080808080;
        if (v1393)
          break;
LABEL_1355:
        if ((v1392 & (~v1392 << 6) & 0x8080808080808080) != 0)
        {
LABEL_1363:
          v1403 = (_OWORD *)(*(_QWORD *)(a2 + 2352) + (v1387 << 6));
          *v1403 = xmmword_2103B9F58;
          v1403[1] = unk_2103B9F68;
          v1404 = *(_QWORD *)(a2 + 2352) + (v1387 << 6);
          *(_OWORD *)(v1404 + 32) = xmmword_2103B9F58;
          *(_OWORD *)(v1404 + 48) = unk_2103B9F68;
          if (++v1387 == v1390)
            goto LABEL_1365;
          goto LABEL_1364;
        }
        v1396 += 8;
      }
      while (1)
      {
        v1394 = v1389[1] + 32 * ((v1391 + (__clz(__rbit64(v1393)) >> 3)) & v1408);
        if (!*(_QWORD *)v1394 && *(_DWORD *)(v1394 + 8) == (_DWORD)v1405)
          break;
        v1393 &= v1393 - 1;
        if (!v1393)
          goto LABEL_1355;
      }
      if (!_X10)
        goto LABEL_1363;
      v1398 = *(_QWORD *)(v1394 + 16);
      if (!*(_BYTE *)(v1398 + 968))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 163, (uint64_t)"line_track->getStructure()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v1398 = *(_QWORD *)(v1394 + 16);
      }
      v1399 = *(_QWORD *)(v1398 + 64);
      v1400 = *(_QWORD *)(a2 + 2352) + (v1387 << 6);
      *(_OWORD *)v1400 = *(_OWORD *)(v1398 + 48);
      *(_QWORD *)(v1400 + 16) = v1399;
      *(_QWORD *)(v1400 + 24) = 0x3FF0000000000000;
      v1401 = *(_QWORD *)(v1398 + 512);
      v1402 = *(_QWORD *)(a2 + 2352) + (v1387 << 6);
      *(_OWORD *)(v1402 + 32) = *(_OWORD *)(v1398 + 496);
      *(_QWORD *)(v1402 + 48) = v1401;
      *(_QWORD *)(v1402 + 56) = 0x3FF0000000000000;
      ++v1387;
    }
    while (v1387 != v1390);
  }
LABEL_1365:
  v1410 = *(_QWORD *)(a2 + 8216);
  v1411 = *(unsigned __int8 *)(v1410 + 1720);
  v1412 = v1410 + 864;
  if (!*(_BYTE *)(v1410 + 1720))
    v1412 = v1410 + 24;
  if (*(_BYTE *)(v1412 + 416))
  {
    v2495 = *(_QWORD *)(a2 + 3064);
    if (*(_QWORD *)(a2 + 3056) != v2495)
    {
      v1413 = (_QWORD *)(**(_QWORD **)(a2 + 7952) + 304);
      v1414 = *(_QWORD *)(a2 + 3056);
      do
      {
        v2509 = v1414;
        v1415 = *(_QWORD *)(v1414 + 8);
        v1416 = *(_QWORD *)(v1414 + 16);
        if (v1415 != v1416)
        {
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v1416 - v1415) >> 7)) >= 3
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 202, (uint64_t)"camera_set_model.vision_models.size() <= 2", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1417 = *(_DWORD *)v2509;
          if (*(_DWORD *)v2509 >= 0x10000u
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v1418 = -991146299 * ((*(_QWORD *)(v2509 + 16) - *(_QWORD *)(v2509 + 8)) >> 7);
          if ((_DWORD)v1418)
          {
            for (i23 = 0; i23 != v1418; ++i23)
            {
              if (v1417 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v1423 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v1423 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v1424 = qword_254A6DE40;
                  for (i24 = qword_254A6DE48; v1424 != i24; v1424 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1424)(*(_QWORD *)(v1424 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                }
                v1426 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v1426 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              if (i23 >= 0x10000)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v1427 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v1427 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v1428 = qword_254A6DE40;
                  for (i25 = qword_254A6DE48; v1428 != i25; v1428 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v1428)(*(_QWORD *)(v1428 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                }
                v1430 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v1430 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v1431 = *v1413;
              if (*v1413)
              {
                v1432 = (unsigned __int16)i23 | (v1417 << 16);
                v1433 = v1413;
                do
                {
                  v1434 = *(_DWORD *)(v1431 + 32);
                  _CF = v1434 >= v1432;
                  if (v1434 >= v1432)
                    v1436 = (uint64_t *)v1431;
                  else
                    v1436 = (uint64_t *)(v1431 + 8);
                  if (_CF)
                    v1433 = (_QWORD *)v1431;
                  v1431 = *v1436;
                }
                while (*v1436);
                if (v1433 != v1413 && *((_DWORD *)v1433 + 8) <= v1432)
                {
                  v1437 = *(_QWORD *)(v2509 + 8);
                  v1438 = v1437 + 1664 * i23;
                  if (v1433 + 5 != (_QWORD *)v1438)
                  {
                    v1439 = v1433[7];
                    v1440 = v1433[10];
                    v1441 = *((_OWORD *)v1433 + 4);
                    v1442 = v1433[13];
                    v1443 = *(_OWORD *)(v1433 + 11);
                    *(_OWORD *)v1438 = *(_OWORD *)(v1433 + 5);
                    *(_QWORD *)(v1438 + 16) = v1439;
                    *(_OWORD *)(v1438 + 24) = v1441;
                    *(_QWORD *)(v1438 + 40) = v1440;
                    *(_OWORD *)(v1438 + 48) = v1443;
                    *(_QWORD *)(v1438 + 64) = v1442;
                  }
                  v1420 = *((_OWORD *)v1433 + 7);
                  v1421 = v1433[16];
                  v1422 = v1437 + 1664 * i23;
                  *(_QWORD *)(v1422 + 88) = v1421;
                  *(_OWORD *)(v1422 + 72) = v1420;
                }
              }
            }
          }
        }
        v1414 = v2509 + 32;
      }
      while (v2509 + 32 != v2495);
      v1410 = *(_QWORD *)(a2 + 8216);
      v1411 = *(unsigned __int8 *)(v1410 + 1720);
    }
  }
  v1444 = v1410 + 864;
  if (!v1411)
    v1444 = v1410 + 24;
  if (*(_BYTE *)(v1444 + 425))
  {
    v1445 = a2 + 3080;
    if (!*(_BYTE *)(a2 + 4744))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3240, (uint64_t)"this->depth_sensor_model_", 25, (uint64_t)"Depth sensor mode is not set!", 29, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v1445 = a2 + 3080;
      if (!*(_BYTE *)(a2 + 4744))
        sub_20E866B34();
    }
    v1446 = **(_QWORD **)(a2 + 7952) + 1656;
    if (v1446 == v1445)
    {
      v1453 = *(_QWORD *)(v1445 + 64);
      v1452 = *(int8x16_t *)(v1445 + 32);
      v1449 = *(int8x16_t *)(v1445 + 48);
      v1447 = *(int8x16_t *)v1445;
      v1451 = *(int8x16_t *)(v1445 + 16);
      v1454 = vextq_s8(v1449, v1449, 8uLL).u64[0];
      v1450 = vextq_s8(v1452, v1452, 8uLL).u64[0];
      *(_QWORD *)&v1448 = vextq_s8(v1451, v1451, 8uLL).u64[0];
    }
    else
    {
      v1447 = *(int8x16_t *)v1446;
      v1448 = *(_OWORD *)(**(_QWORD **)(a2 + 7952) + 1680);
      v1449 = *(int8x16_t *)(**(_QWORD **)(a2 + 7952) + 1704);
      v1450 = *(_QWORD *)(**(_QWORD **)(a2 + 7952) + 1696);
      v1451.i64[0] = *(_QWORD *)(**(_QWORD **)(a2 + 7952) + 1672);
      v1452.i64[0] = *(_QWORD *)(**(_QWORD **)(a2 + 7952) + 1688);
      v1453 = *(_QWORD *)(**(_QWORD **)(a2 + 7952) + 1720);
      v1454 = vextq_s8(v1449, v1449, 8uLL).u64[0];
    }
    v1447.i64[1] = vextq_s8(v1447, v1447, 8uLL).u64[0];
    *((_QWORD *)&v1448 + 1) = v1452.i64[0];
    v1449.i64[1] = v1454;
    *(_QWORD *)(v1445 + 16) = v1451.i64[0];
    *(int8x16_t *)v1445 = v1447;
    *(_QWORD *)(v1445 + 40) = v1450;
    *(_OWORD *)(v1445 + 24) = v1448;
    *(_QWORD *)(v1445 + 64) = v1453;
    *(int8x16_t *)(v1445 + 48) = v1449;
    v1455 = *(_OWORD *)(v1446 + 72);
    *(_QWORD *)(v1445 + 88) = *(_QWORD *)(v1446 + 88);
    *(_OWORD *)(v1445 + 72) = v1455;
    sub_20F82FD50(&v2550);
    if (*v2550[7] > 2)
      goto LABEL_1568;
    v1456 = *((unsigned __int8 *)v2550 + 72);
    v1457 = sub_20E8C31DC((uint64_t)v2550, "OSLogSurrogateAppender", 1, 0);
    v1458 = v1457;
    if (!v1456 && !v1457)
      goto LABEL_1568;
    sub_20E863438((uint64_t)oslog);
    v1459 = sub_20E86A980(&oslog[2], (uint64_t)"\nT_I_to_J: \n", 12);
    v1460 = **(_QWORD **)(a2 + 7952);
    v1461.f64[0] = *(float64_t *)(v1460 + 1672);
    v1462 = *(int64x2_t *)(v1460 + 1656);
    v1463 = *(int64x2_t *)(v1460 + 1680);
    v1464 = *(double *)(v1460 + 1720);
    _Q4 = *(int64x2_t *)(v1460 + 1704);
    v1466 = (float64x2_t)vzip1q_s64(v1462, v1463);
    v1467 = (float64x2_t)vzip2q_s64(v1462, v1463);
    v1461.f64[1] = *(float64_t *)(v1460 + 1696);
    v1468 = vextq_s8((int8x16_t)v1467, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v1469 = *(double *)(v1460 + 1744);
    v1470 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1466, *(double *)(v1460 + 1728)), v1467, *(float64x2_t *)(v1460 + 1728), 1), v1461, v1469);
    _D7 = *(_QWORD *)(v1460 + 1736);
    __asm { FMLA            D17, D7, V4.D[1] }
    v1473.f64[0] = _D17 + v1464 * v1469;
    v1474 = *(_QWORD *)(v1460 + 1704);
    *(_QWORD *)&v1467.f64[1] = v1468.i64[0];
    v2576 = v1461;
    v2577 = *(unint64_t *)&v1464;
    *(float64x2_t *)object = v1466;
    *(_OWORD *)&object[16] = v1474;
    *(float64x2_t *)&object[32] = v1467;
    v2575 = v1468.u64[1];
    v2578 = vnegq_f64(v1470);
    v2579 = *(_OWORD *)&vnegq_f64(v1473);
    v2580 = 0x3FF0000000000000;
    sub_20EF37084(v1459, (uint64_t)object);
    if ((v2552[24] & 0x10) != 0)
    {
      v1477 = *(os_log_t *)&v2552[16];
      if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
      {
        *(os_log_t *)&v2552[16] = oslog[9];
        v1477 = oslog[9];
      }
      v1478 = oslog[8];
      v1475 = (char *)v1477 - (char *)oslog[8];
      if ((unint64_t)((char *)v1477 - (char *)oslog[8]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1490;
    }
    else
    {
      if ((v2552[24] & 8) == 0)
      {
        v1475 = 0;
        HIBYTE(v2545) = 0;
        v1476 = (char *)&__dst;
        goto LABEL_1445;
      }
      v1478 = oslog[5];
      v1475 = (char *)oslog[7] - (char *)oslog[5];
      if ((os_log_t)((char *)oslog[7] - (char *)oslog[5]) > (os_log_t)0x7FFFFFFFFFFFFFF7)
LABEL_1490:
        sub_20E860B7C();
    }
    if (v1475 >= 0x17)
    {
      v1479 = (v1475 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1475 | 7) != 0x17)
        v1479 = v1475 | 7;
      v1480 = v1479 + 1;
      v1476 = (char *)operator new(v1479 + 1);
      v2545 = v1480 | 0x8000000000000000;
      __dst = v1476;
      v2544 = v1475;
    }
    else
    {
      HIBYTE(v2545) = v1475;
      v1476 = (char *)&__dst;
      if (!v1475)
      {
LABEL_1445:
        v1476[v1475] = 0;
        v2536[0] = &v2550;
        v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
        v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v2537[1]) = 2;
        v2538 = "unknown file";
        v2539 = 3246;
        v2541 = 0;
        v2542 = 0;
        v2540 = "unknown function";
        if (v2545 >= 0)
          v1481 = (const char *)&__dst;
        else
          v1481 = __dst;
        v1482 = *(_QWORD *)v2536[0];
        v1483 = (const char *)(*(_QWORD *)v2536[0] + 16);
        __sf = v1483;
        if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
        {
          v1483 = *(const char **)(v1482 + 16);
          v1484 = *(_QWORD *)(v1482 + 24);
          v1486 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1486 & 1) != 0)
            goto LABEL_1452;
        }
        else
        {
          v1484 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
          v1485 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1485 & 1) != 0)
            goto LABEL_1452;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1452:
        if (byte_254A4A4F8[23] >= 0)
          v1487 = byte_254A4A4F8;
        else
          v1487 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1488 = byte_254A4A4F8[23];
        else
          v1488 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v1487, v1483);
        v1489 = &object[8];
        if (v1488 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1488 >= 0x17)
        {
          v1490 = (v1488 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1488 | 7) != 0x17)
            v1490 = v1488 | 7;
          v1491 = v1490 + 1;
          v1489 = operator new(v1490 + 1);
          *(_QWORD *)&object[24] = v1491 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v1489;
          *(_QWORD *)&object[16] = v1488;
        }
        else
        {
          object[31] = v1488;
          if (!v1488)
          {
LABEL_1466:
            v1489[v1488] = 0;
            object[32] = 1;
            v1492 = &object[40];
            if (v1484 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1484 >= 0x17)
            {
              v1493 = (v1484 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1484 | 7) != 0x17)
                v1493 = v1484 | 7;
              v1494 = v1493 + 1;
              v1492 = operator new(v1493 + 1);
              *((_QWORD *)&v2575 + 1) = v1494 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v1492;
              *(_QWORD *)&v2575 = v1484;
            }
            else
            {
              HIBYTE(v2575) = v1484;
              if (!v1484)
              {
LABEL_1474:
                v1492[v1484] = 0;
                LOBYTE(v2576.f64[0]) = 1;
                v1495 = *(NSObject **)object;
                if (SHIBYTE(v2575) < 0)
                  operator delete(*(void **)&object[40]);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v1458 || !*(_QWORD *)(v1458 + 24))
                {
                  os_log_type_enabled(v1495, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v1481;
                  v1502 = (void *)_os_log_send_and_compose_impl();
                  if (v1502)
                    free(v1502);
                  goto LABEL_1554;
                }
                v1496 = _os_log_pack_size();
                v1497 = operator new(v1496, (std::align_val_t)8uLL);
                v1498 = (_QWORD *)operator new();
                *v1498 = &off_24C9ABB80;
                v1498[1] = 0;
                v1498[2] = 0;
                v1498[3] = v1497;
                v2546[0] = v1497;
                v2546[1] = v1497;
                v2549 = 0;
                v2547 = (int64_t)v1498;
                v2548 = 0;
                v1499 = strlen(v1481);
                if (v1499 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v1500 = v1499;
                if (v1499 >= 0x17)
                {
                  v1503 = (v1499 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1499 | 7) != 0x17)
                    v1503 = v1499 | 7;
                  v1504 = v1503 + 1;
                  v1501 = operator new(v1503 + 1);
                  *(_QWORD *)&v2582[8] = v1500;
                  *(_QWORD *)&v2582[16] = v1504 | 0x8000000000000000;
                  *(_QWORD *)v2582 = v1501;
                }
                else
                {
                  v2582[23] = v1499;
                  v1501 = v2582;
                  if (!v1499)
                  {
LABEL_1495:
                    v1501[v1500] = 0;
                    v1505 = *(_QWORD *)v2582;
                    v2581[0] = *(_QWORD *)&v2582[8];
                    *(_QWORD *)((char *)v2581 + 7) = *(_QWORD *)&v2582[15];
                    v1506 = v2582[23];
                    v1507 = operator new(0x38uLL);
                    v1507[1] = 0;
                    v1507[2] = 0;
                    v1507[3] = off_24C9ABC20;
                    *v1507 = &off_24C9ABBD0;
                    v1508 = v2581[0];
                    v1507[4] = v1505;
                    v1507[5] = v1508;
                    *(_QWORD *)((char *)v1507 + 47) = *(_QWORD *)((char *)v2581 + 7);
                    *((_BYTE *)v1507 + 55) = v1506;
                    v2581[0] = 0;
                    *(_QWORD *)((char *)v2581 + 7) = 0;
                    v1509 = v2549;
                    v2548 = (char *)(v1507 + 3);
                    v2549 = (std::__shared_weak_count *)v1507;
                    if (v1509)
                    {
                      v1510 = (unint64_t *)&v1509->__shared_owners_;
                      do
                        v1511 = __ldaxr(v1510);
                      while (__stlxr(v1511 - 1, v1510));
                      if (!v1511)
                      {
                        ((void (*)(std::__shared_weak_count *))v1509->__on_zero_shared)(v1509);
                        std::__shared_weak_count::__release_weak(v1509);
                      }
                    }
                    *(_OWORD *)object = *(_OWORD *)v2546;
                    v1512 = v2548;
                    *(_QWORD *)&object[16] = v2547;
                    if (v2547)
                    {
                      v1513 = (unint64_t *)(v2547 + 8);
                      do
                        v1514 = __ldxr(v1513);
                      while (__stxr(v1514 + 1, v1513));
                    }
                    v1515 = v2549;
                    *(_QWORD *)&object[24] = v1512;
                    *(_QWORD *)&object[32] = v2549;
                    if (v2549)
                    {
                      v1516 = (unint64_t *)&v2549->__shared_owners_;
                      do
                        v1517 = __ldxr(v1516);
                      while (__stxr(v1517 + 1, v1516));
                      *(_QWORD *)&object[40] = v1512;
                      do
                        v1518 = __ldaxr(v1516);
                      while (__stlxr(v1518 - 1, v1516));
                      if (!v1518)
                      {
                        ((void (*)(std::__shared_weak_count *))v1515->__on_zero_shared)(v1515);
                        std::__shared_weak_count::__release_weak(v1515);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&object[40] = v1512;
                    }
                    v1519 = (std::__shared_weak_count *)v2547;
                    if (v2547)
                    {
                      v1520 = (unint64_t *)(v2547 + 8);
                      do
                        v1521 = __ldaxr(v1520);
                      while (__stlxr(v1521 - 1, v1520));
                      if (!v1521)
                      {
                        ((void (*)(std::__shared_weak_count *))v1519->__on_zero_shared)(v1519);
                        std::__shared_weak_count::__release_weak(v1519);
                      }
                    }
                    v1522 = *(_QWORD *)object;
                    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                      v1523 = *(_QWORD *)&object[40] + 8;
                    else
                      v1523 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                    v1524 = _os_log_pack_fill();
                    *(_DWORD *)v1524 = 136315138;
                    *(_QWORD *)(v1524 + 4) = v1523;
                    v1525 = (char *)operator new();
                    v1526 = *(unsigned __int8 *)(v1482 + 39);
                    v1527 = __sf;
                    if ((v1526 & 0x80u) != 0)
                    {
                      v1527 = *(const char **)(v1482 + 16);
                      v1526 = *(_QWORD *)(v1482 + 24);
                    }
                    *(_QWORD *)v1525 = v1522;
                    *(_OWORD *)(v1525 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v1525 + 24) = *(_OWORD *)&object[24];
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *((_QWORD *)v1525 + 5) = v1527;
                    *((_QWORD *)v1525 + 6) = v1526;
                    v1525[56] = 2;
                    *(_QWORD *)v2582 = 0;
                    v2546[0] = v1525;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1458 + 24) + 40))(*(_QWORD *)(v1458 + 24), v2546);
                    v1528 = v2546[0];
                    v2546[0] = 0;
                    if (v1528)
                    {
                      v1529 = (std::__shared_weak_count *)*((_QWORD *)v1528 + 4);
                      if (v1529)
                      {
                        v1530 = (unint64_t *)&v1529->__shared_owners_;
                        do
                          v1531 = __ldaxr(v1530);
                        while (__stlxr(v1531 - 1, v1530));
                        if (!v1531)
                        {
                          ((void (*)(std::__shared_weak_count *))v1529->__on_zero_shared)(v1529);
                          std::__shared_weak_count::__release_weak(v1529);
                        }
                      }
                      v1532 = (std::__shared_weak_count *)*((_QWORD *)v1528 + 2);
                      if (v1532)
                      {
                        v1533 = (unint64_t *)&v1532->__shared_owners_;
                        do
                          v1534 = __ldaxr(v1533);
                        while (__stlxr(v1534 - 1, v1533));
                        if (!v1534)
                        {
                          ((void (*)(std::__shared_weak_count *))v1532->__on_zero_shared)(v1532);
                          std::__shared_weak_count::__release_weak(v1532);
                        }
                      }
                      MEMORY[0x212BC6398](v1528, 0x10F0C40B62ED6C6);
                      v1535 = *(_QWORD *)v2582;
                      *(_QWORD *)v2582 = 0;
                      if (v1535)
                      {
                        v1536 = *(std::__shared_weak_count **)(v1535 + 32);
                        if (v1536)
                        {
                          v1537 = (unint64_t *)&v1536->__shared_owners_;
                          do
                            v1538 = __ldaxr(v1537);
                          while (__stlxr(v1538 - 1, v1537));
                          if (!v1538)
                          {
                            ((void (*)(std::__shared_weak_count *))v1536->__on_zero_shared)(v1536);
                            std::__shared_weak_count::__release_weak(v1536);
                          }
                        }
                        v1539 = *(std::__shared_weak_count **)(v1535 + 16);
                        if (v1539)
                        {
                          v1540 = (unint64_t *)&v1539->__shared_owners_;
                          do
                            v1541 = __ldaxr(v1540);
                          while (__stlxr(v1541 - 1, v1540));
                          if (!v1541)
                          {
                            ((void (*)(std::__shared_weak_count *))v1539->__on_zero_shared)(v1539);
                            std::__shared_weak_count::__release_weak(v1539);
                          }
                        }
                        MEMORY[0x212BC6398](v1535, 0x10F0C40B62ED6C6);
                      }
                    }
                    v1542 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v1543 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v1544 = __ldaxr(v1543);
                      while (__stlxr(v1544 - 1, v1543));
                      if (!v1544)
                      {
                        ((void (*)(std::__shared_weak_count *))v1542->__on_zero_shared)(v1542);
                        std::__shared_weak_count::__release_weak(v1542);
                      }
                    }
                    v1545 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v1546 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v1547 = __ldaxr(v1546);
                      while (__stlxr(v1547 - 1, v1546));
                      if (!v1547)
                      {
                        ((void (*)(std::__shared_weak_count *))v1545->__on_zero_shared)(v1545);
                        std::__shared_weak_count::__release_weak(v1545);
                      }
                    }
LABEL_1554:
                    if (v1456)
                    {
                      v1548 = (const char *)&__dst;
                      if (v2545 < 0)
                        v1548 = __dst;
                      sub_20E8C003C((uint64_t)v2536, "%s", v1548);
                      sub_20E863570((uint64_t)v2536);
                    }
                    sub_20E863570((uint64_t)v2536);
                    v1549 = v2542;
                    if (v2542)
                    {
                      v1550 = (unint64_t *)&v2542->__shared_owners_;
                      do
                        v1551 = __ldaxr(v1550);
                      while (__stlxr(v1551 - 1, v1550));
                      if (!v1551)
                      {
                        ((void (*)(std::__shared_weak_count *))v1549->__on_zero_shared)(v1549);
                        std::__shared_weak_count::__release_weak(v1549);
                      }
                    }
                    if (SHIBYTE(v2545) < 0)
                      operator delete(__dst);
                    oslog[0] = *(os_log_t *)MEMORY[0x24BEDB7F0];
                    v1552 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
                    *(os_log_t *)((char *)oslog + (unint64_t)oslog[0][-3].isa) = *(os_log_t *)(MEMORY[0x24BEDB7F0] + 64);
                    oslog[2] = v1552;
                    oslog[3] = (os_log_t)(MEMORY[0x24BEDB848] + 16);
                    if ((v2552[15] & 0x80000000) != 0)
                      operator delete(oslog[11]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v2552[32]);
LABEL_1568:
                    v1410 = *(_QWORD *)(a2 + 8216);
                    v1411 = *(unsigned __int8 *)(v1410 + 1720);
                    goto LABEL_1569;
                  }
                }
                memcpy(v1501, v1481, v1500);
                goto LABEL_1495;
              }
            }
            memmove(v1492, v1483, v1484);
            goto LABEL_1474;
          }
        }
        memmove(v1489, v1487, v1488);
        goto LABEL_1466;
      }
    }
    memmove(v1476, v1478, v1475);
    goto LABEL_1445;
  }
LABEL_1569:
  v1553 = v1410 + 864;
  v1554 = v1410 + 24;
  if (v1411)
    v1554 = v1553;
  if (*(_BYTE *)(v1554 + 419))
  {
    v1555 = *(_QWORD **)(a2 + 7952);
    if (!v1555)
    {
      v1556 = (_QWORD *)(a2 + 8136);
      if (!*(_BYTE *)(a2 + 4744))
        goto LABEL_1575;
      goto LABEL_1574;
    }
    v1556 = (_QWORD *)(*v1555 + 80);
    if (*(_BYTE *)(a2 + 4744))
LABEL_1574:
      *(_QWORD *)(a2 + 4640) = *v1556;
  }
LABEL_1575:
  sub_20F82FD50(v2582);
  if (**(int **)(*(_QWORD *)v2582 + 56) > 2)
    goto LABEL_1674;
  v1557 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
  v1558 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
  v1559 = v1558;
  if (!v1557 && !v1558)
    goto LABEL_1674;
  *(_QWORD *)object = v2582;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 2;
  *(_QWORD *)&object[32] = "unknown file";
  *(_DWORD *)&object[40] = 3258;
  v2576.f64[0] = 0.0;
  *(_QWORD *)&v2575 = "unknown function";
  *((_QWORD *)&v2575 + 1) = 0;
  v1560 = *(_QWORD **)(a2 + 7952);
  if (v1560)
  {
    v1561 = *v1560;
    v1562 = (NSObject **)(*v1560 + 80);
    v1563 = (NSObject **)(v1561 + 72);
  }
  else
  {
    v1562 = (NSObject **)(a2 + 8136);
    v1563 = (NSObject **)(a2 + 8128);
  }
  v1564 = (unsigned __int8 *)(a2 + 7682);
  v1565 = **(_QWORD **)object;
  v1566 = **(_QWORD **)object + 16;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v1568 = *(const char **)(v1565 + 16);
    v1567 = *(_QWORD *)(v1565 + 24);
  }
  else
  {
    v1567 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
    v1568 = (const char *)(**(_QWORD **)object + 16);
  }
  __sg = *v1564;
  v1569 = *v1562;
  v1570 = *v1563;
  v1571 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v1571 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)oslog);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
    if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
      operator delete(oslog[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v1572 = byte_254A4A4F8;
  else
    v1572 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1573 = byte_254A4A4F8[23];
  else
    v1573 = *(_QWORD *)&byte_254A4A4F8[8];
  oslog[0] = os_log_create(v1572, v1568);
  v1574 = &oslog[1];
  if (v1573 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1573 >= 0x17)
  {
    v1575 = (v1573 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1573 | 7) != 0x17)
      v1575 = v1573 | 7;
    v1576 = v1575 + 1;
    v1574 = operator new(v1575 + 1);
    oslog[3] = (os_log_t)(v1576 | 0x8000000000000000);
    oslog[1] = v1574;
    oslog[2] = (os_log_t)v1573;
    v1564 = (unsigned __int8 *)(a2 + 7682);
    goto LABEL_1600;
  }
  HIBYTE(oslog[3]) = v1573;
  if (v1573)
LABEL_1600:
    memmove(v1574, v1572, v1573);
  *((_BYTE *)&v1574->isa + v1573) = 0;
  LOBYTE(oslog[4]) = 1;
  v1577 = &oslog[5];
  if (v1567 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1567 >= 0x17)
  {
    v1579 = (v1567 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1567 | 7) != 0x17)
      v1579 = v1567 | 7;
    v1580 = v1579 + 1;
    v1577 = operator new(v1579 + 1);
    oslog[7] = (os_log_t)(v1580 | 0x8000000000000000);
    oslog[5] = v1577;
    oslog[6] = (os_log_t)v1567;
  }
  else
  {
    HIBYTE(oslog[7]) = v1567;
    if (!v1567)
    {
      LOBYTE(oslog[5]) = 0;
      LOBYTE(oslog[8]) = 1;
      v1578 = oslog[0];
      if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
        goto LABEL_1605;
      goto LABEL_1611;
    }
  }
  memmove(v1577, v1568, v1567);
  *((_BYTE *)&v1577->isa + v1567) = 0;
  LOBYTE(oslog[8]) = 1;
  v1578 = oslog[0];
  if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
  {
LABEL_1605:
    if (!LOBYTE(oslog[4]))
      goto LABEL_1614;
LABEL_1612:
    if (SHIBYTE(oslog[3]) < 0)
      operator delete(oslog[1]);
    goto LABEL_1614;
  }
LABEL_1611:
  operator delete(oslog[5]);
  if (LOBYTE(oslog[4]))
    goto LABEL_1612;
LABEL_1614:
  if (oslog[0])
    os_release(oslog[0]);
  if (v1559 && *(_QWORD *)(v1559 + 24))
  {
    v1581 = _os_log_pack_size();
    v1582 = operator new(v1581, (std::align_val_t)8uLL);
    v1583 = operator new();
    v1584 = (std::__shared_weak_count *)v1583;
    v1583[1].isa = 0;
    v1585 = (unint64_t *)&v1583[1];
    v1583->isa = (Class)&off_24C9ABB80;
    v1583[2].isa = 0;
    v1583[3].isa = (Class)v1582;
    oslog[0] = v1582;
    oslog[1] = v1582;
    oslog[2] = v1583;
    do
      v1586 = __ldxr(v1585);
    while (__stxr(v1586 + 1, v1585));
    memset(&oslog[3], 0, 24);
    do
      v1587 = __ldaxr(v1585);
    while (__stlxr(v1587 - 1, v1585));
    if (!v1587)
    {
      (*((void (**))v1583->isa + 2))(v1583);
      std::__shared_weak_count::__release_weak(v1584);
    }
    v1588 = oslog[0];
    v1589 = _os_log_pack_fill();
    *(_DWORD *)v1589 = 134218496;
    *(_QWORD *)(v1589 + 4) = v1569;
    *(_WORD *)(v1589 + 12) = 1024;
    *(_DWORD *)(v1589 + 14) = __sg;
    *(_WORD *)(v1589 + 18) = 2048;
    *(_QWORD *)(v1589 + 20) = v1570;
    v1590 = (char *)operator new();
    v1591 = *(unsigned __int8 *)(v1565 + 39);
    if ((v1591 & 0x80u) == 0)
      v1592 = v1566;
    else
      v1592 = *(_QWORD *)(v1565 + 16);
    if ((v1591 & 0x80u) != 0)
      v1591 = *(_QWORD *)(v1565 + 24);
    *(_QWORD *)v1590 = v1588;
    *(_OWORD *)(v1590 + 8) = *(_OWORD *)&oslog[1];
    oslog[1] = 0;
    oslog[2] = 0;
    *(_OWORD *)(v1590 + 24) = *(_OWORD *)&oslog[3];
    oslog[3] = 0;
    oslog[4] = 0;
    *((_QWORD *)v1590 + 5) = v1592;
    *((_QWORD *)v1590 + 6) = v1591;
    v1590[56] = 2;
    v2546[0] = 0;
    v2536[0] = v1590;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1559 + 24) + 40))(*(_QWORD *)(v1559 + 24), v2536);
    v1593 = v2536[0];
    v2536[0] = 0;
    if (v1593)
    {
      v1594 = (std::__shared_weak_count *)*((_QWORD *)v1593 + 4);
      if (v1594)
      {
        v1595 = (unint64_t *)&v1594->__shared_owners_;
        do
          v1596 = __ldaxr(v1595);
        while (__stlxr(v1596 - 1, v1595));
        if (!v1596)
        {
          ((void (*)(std::__shared_weak_count *))v1594->__on_zero_shared)(v1594);
          std::__shared_weak_count::__release_weak(v1594);
        }
      }
      v1597 = (std::__shared_weak_count *)*((_QWORD *)v1593 + 2);
      if (v1597)
      {
        v1598 = (unint64_t *)&v1597->__shared_owners_;
        do
          v1599 = __ldaxr(v1598);
        while (__stlxr(v1599 - 1, v1598));
        if (!v1599)
        {
          ((void (*)(std::__shared_weak_count *))v1597->__on_zero_shared)(v1597);
          std::__shared_weak_count::__release_weak(v1597);
        }
      }
      MEMORY[0x212BC6398](v1593, 0x10F0C40B62ED6C6);
      v1600 = v2546[0];
      v2546[0] = 0;
      if (v1600)
      {
        v1601 = (std::__shared_weak_count *)*((_QWORD *)v1600 + 4);
        if (v1601)
        {
          v1602 = (unint64_t *)&v1601->__shared_owners_;
          do
            v1603 = __ldaxr(v1602);
          while (__stlxr(v1603 - 1, v1602));
          if (!v1603)
          {
            ((void (*)(std::__shared_weak_count *))v1601->__on_zero_shared)(v1601);
            std::__shared_weak_count::__release_weak(v1601);
          }
        }
        v1604 = (std::__shared_weak_count *)*((_QWORD *)v1600 + 2);
        if (v1604)
        {
          v1605 = (unint64_t *)&v1604->__shared_owners_;
          do
            v1606 = __ldaxr(v1605);
          while (__stlxr(v1606 - 1, v1605));
          if (!v1606)
          {
            ((void (*)(std::__shared_weak_count *))v1604->__on_zero_shared)(v1604);
            std::__shared_weak_count::__release_weak(v1604);
          }
        }
        MEMORY[0x212BC6398](v1600, 0x10F0C40B62ED6C6);
      }
    }
    v1607 = (std::__shared_weak_count *)oslog[4];
    if (oslog[4])
    {
      v1608 = (unint64_t *)&oslog[4][1];
      do
        v1609 = __ldaxr(v1608);
      while (__stlxr(v1609 - 1, v1608));
      if (!v1609)
      {
        ((void (*)(std::__shared_weak_count *))v1607->__on_zero_shared)(v1607);
        std::__shared_weak_count::__release_weak(v1607);
      }
    }
    v1610 = (std::__shared_weak_count *)oslog[2];
    if (oslog[2])
    {
      v1611 = (unint64_t *)&oslog[2][1];
      do
        v1612 = __ldaxr(v1611);
      while (__stlxr(v1612 - 1, v1611));
      if (!v1612)
      {
        ((void (*)(std::__shared_weak_count *))v1610->__on_zero_shared)(v1610);
        std::__shared_weak_count::__release_weak(v1610);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1578, OS_LOG_TYPE_DEBUG);
    LODWORD(oslog[0]) = 134218496;
    *(os_log_t *)((char *)oslog + 4) = v1569;
    WORD2(oslog[1]) = 1024;
    *(_DWORD *)((char *)&oslog[1] + 6) = __sg;
    WORD1(oslog[2]) = 2048;
    *(os_log_t *)((char *)&oslog[2] + 4) = v1570;
    v1613 = (void *)_os_log_send_and_compose_impl();
    if (v1613)
      free(v1613);
  }
  if (v1557)
  {
    v1614 = *(_QWORD **)(a2 + 7952);
    if (v1614)
    {
      v1615 = *v1614;
      v1616 = (double *)(*v1614 + 80);
      v1617 = (double *)(v1615 + 72);
    }
    else
    {
      v1616 = (double *)(a2 + 8136);
      v1617 = (double *)(a2 + 8128);
    }
    sub_20E8C003C((uint64_t)object, "Depth sensor time-offset %f ms, VIO time-offset(%d): %f ms", *v1616, *v1564, *v1617);
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v1618 = *(std::__shared_weak_count **)&v2576.f64[0];
  if (*(_QWORD *)&v2576.f64[0])
  {
    v1619 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
    do
      v1620 = __ldaxr(v1619);
    while (__stlxr(v1620 - 1, v1619));
    if (!v1620)
    {
      ((void (*)(std::__shared_weak_count *))v1618->__on_zero_shared)(v1618);
      std::__shared_weak_count::__release_weak(v1618);
    }
  }
LABEL_1674:
  sub_20F82FD50(v2582);
  if (**(int **)(*(_QWORD *)v2582 + 56) > 3)
    goto LABEL_1767;
  v1621 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
  v1622 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
  v1623 = v1622;
  if (!v1621 && v1622 == 0)
    goto LABEL_1767;
  *(_QWORD *)object = v2582;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 3;
  *(_QWORD *)&object[32] = "unknown file";
  *(_DWORD *)&object[40] = 3262;
  v2576.f64[0] = 0.0;
  *(_QWORD *)&v2575 = "unknown function";
  *((_QWORD *)&v2575 + 1) = 0;
  v1625 = **(_QWORD **)object;
  v1626 = **(_QWORD **)object + 16;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v1628 = *(const char **)(v1625 + 16);
    v1627 = *(_QWORD *)(v1625 + 24);
    v1630 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1630 & 1) != 0)
      goto LABEL_1683;
  }
  else
  {
    v1627 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
    v1628 = (const char *)(**(_QWORD **)object + 16);
    v1629 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1629 & 1) != 0)
      goto LABEL_1683;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)oslog);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
    if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
      operator delete(oslog[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_1683:
  if (byte_254A4A4F8[23] >= 0)
    v1631 = byte_254A4A4F8;
  else
    v1631 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1632 = byte_254A4A4F8[23];
  else
    v1632 = *(_QWORD *)&byte_254A4A4F8[8];
  oslog[0] = os_log_create(v1631, v1628);
  v1633 = &oslog[1];
  if (v1632 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1632 >= 0x17)
  {
    v1634 = (v1632 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1632 | 7) != 0x17)
      v1634 = v1632 | 7;
    v1635 = v1634 + 1;
    v1633 = operator new(v1634 + 1);
    oslog[3] = (os_log_t)(v1635 | 0x8000000000000000);
    oslog[1] = v1633;
    oslog[2] = (os_log_t)v1632;
    goto LABEL_1696;
  }
  HIBYTE(oslog[3]) = v1632;
  if (v1632)
LABEL_1696:
    memmove(v1633, v1631, v1632);
  *((_BYTE *)&v1633->isa + v1632) = 0;
  LOBYTE(oslog[4]) = 1;
  v1636 = &oslog[5];
  if (v1627 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1627 >= 0x17)
  {
    v1638 = (v1627 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1627 | 7) != 0x17)
      v1638 = v1627 | 7;
    v1639 = v1638 + 1;
    v1636 = operator new(v1638 + 1);
    oslog[7] = (os_log_t)(v1639 | 0x8000000000000000);
    oslog[5] = v1636;
    oslog[6] = (os_log_t)v1627;
  }
  else
  {
    HIBYTE(oslog[7]) = v1627;
    if (!v1627)
    {
      LOBYTE(oslog[5]) = 0;
      LOBYTE(oslog[8]) = 1;
      v1637 = oslog[0];
      if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
        goto LABEL_1701;
      goto LABEL_1707;
    }
  }
  memmove(v1636, v1628, v1627);
  *((_BYTE *)&v1636->isa + v1627) = 0;
  LOBYTE(oslog[8]) = 1;
  v1637 = oslog[0];
  if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
  {
LABEL_1701:
    if (!LOBYTE(oslog[4]))
      goto LABEL_1710;
LABEL_1708:
    if (SHIBYTE(oslog[3]) < 0)
      operator delete(oslog[1]);
    goto LABEL_1710;
  }
LABEL_1707:
  operator delete(oslog[5]);
  if (LOBYTE(oslog[4]))
    goto LABEL_1708;
LABEL_1710:
  if (oslog[0])
    os_release(oslog[0]);
  if (v1623 && *(_QWORD *)(v1623 + 24))
  {
    v1640 = _os_log_pack_size();
    v1641 = operator new(v1640, (std::align_val_t)8uLL);
    v1642 = operator new();
    v1643 = (std::__shared_weak_count *)v1642;
    v1642[1].isa = 0;
    v1644 = (unint64_t *)&v1642[1];
    v1642->isa = (Class)&off_24C9ABB80;
    v1642[2].isa = 0;
    v1642[3].isa = (Class)v1641;
    oslog[0] = v1641;
    oslog[1] = v1641;
    oslog[2] = v1642;
    do
      v1645 = __ldxr(v1644);
    while (__stxr(v1645 + 1, v1644));
    memset(&oslog[3], 0, 24);
    do
      v1646 = __ldaxr(v1644);
    while (__stlxr(v1646 - 1, v1644));
    if (!v1646)
    {
      (*((void (**))v1642->isa + 2))(v1642);
      std::__shared_weak_count::__release_weak(v1643);
    }
    v1647 = oslog[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v1648 = (char *)operator new();
    v1649 = *(unsigned __int8 *)(v1625 + 39);
    if ((v1649 & 0x80u) == 0)
      v1650 = v1626;
    else
      v1650 = *(_QWORD *)(v1625 + 16);
    if ((v1649 & 0x80u) != 0)
      v1649 = *(_QWORD *)(v1625 + 24);
    *(_QWORD *)v1648 = v1647;
    *(_OWORD *)(v1648 + 8) = *(_OWORD *)&oslog[1];
    oslog[1] = 0;
    oslog[2] = 0;
    *(_OWORD *)(v1648 + 24) = *(_OWORD *)&oslog[3];
    oslog[3] = 0;
    oslog[4] = 0;
    *((_QWORD *)v1648 + 5) = v1650;
    *((_QWORD *)v1648 + 6) = v1649;
    v1648[56] = 1;
    v2546[0] = 0;
    v2536[0] = v1648;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1623 + 24) + 40))(*(_QWORD *)(v1623 + 24), v2536);
    v1651 = v2536[0];
    v2536[0] = 0;
    if (v1651)
    {
      v1652 = (std::__shared_weak_count *)*((_QWORD *)v1651 + 4);
      if (v1652)
      {
        v1653 = (unint64_t *)&v1652->__shared_owners_;
        do
          v1654 = __ldaxr(v1653);
        while (__stlxr(v1654 - 1, v1653));
        if (!v1654)
        {
          ((void (*)(std::__shared_weak_count *))v1652->__on_zero_shared)(v1652);
          std::__shared_weak_count::__release_weak(v1652);
        }
      }
      v1655 = (std::__shared_weak_count *)*((_QWORD *)v1651 + 2);
      if (v1655)
      {
        v1656 = (unint64_t *)&v1655->__shared_owners_;
        do
          v1657 = __ldaxr(v1656);
        while (__stlxr(v1657 - 1, v1656));
        if (!v1657)
        {
          ((void (*)(std::__shared_weak_count *))v1655->__on_zero_shared)(v1655);
          std::__shared_weak_count::__release_weak(v1655);
        }
      }
      MEMORY[0x212BC6398](v1651, 0x10F0C40B62ED6C6);
      v1658 = v2546[0];
      v2546[0] = 0;
      if (v1658)
      {
        v1659 = (std::__shared_weak_count *)*((_QWORD *)v1658 + 4);
        if (v1659)
        {
          v1660 = (unint64_t *)&v1659->__shared_owners_;
          do
            v1661 = __ldaxr(v1660);
          while (__stlxr(v1661 - 1, v1660));
          if (!v1661)
          {
            ((void (*)(std::__shared_weak_count *))v1659->__on_zero_shared)(v1659);
            std::__shared_weak_count::__release_weak(v1659);
          }
        }
        v1662 = (std::__shared_weak_count *)*((_QWORD *)v1658 + 2);
        if (v1662)
        {
          v1663 = (unint64_t *)&v1662->__shared_owners_;
          do
            v1664 = __ldaxr(v1663);
          while (__stlxr(v1664 - 1, v1663));
          if (!v1664)
          {
            ((void (*)(std::__shared_weak_count *))v1662->__on_zero_shared)(v1662);
            std::__shared_weak_count::__release_weak(v1662);
          }
        }
        MEMORY[0x212BC6398](v1658, 0x10F0C40B62ED6C6);
      }
    }
    v1665 = (std::__shared_weak_count *)oslog[4];
    if (oslog[4])
    {
      v1666 = (unint64_t *)&oslog[4][1];
      do
        v1667 = __ldaxr(v1666);
      while (__stlxr(v1667 - 1, v1666));
      if (!v1667)
      {
        ((void (*)(std::__shared_weak_count *))v1665->__on_zero_shared)(v1665);
        std::__shared_weak_count::__release_weak(v1665);
      }
    }
    v1668 = (std::__shared_weak_count *)oslog[2];
    if (oslog[2])
    {
      v1669 = (unint64_t *)&oslog[2][1];
      do
        v1670 = __ldaxr(v1669);
      while (__stlxr(v1670 - 1, v1669));
      if (!v1670)
      {
        ((void (*)(std::__shared_weak_count *))v1668->__on_zero_shared)(v1668);
        std::__shared_weak_count::__release_weak(v1668);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1637, OS_LOG_TYPE_INFO);
    LOWORD(oslog[0]) = 0;
    v1671 = (void *)_os_log_send_and_compose_impl();
    if (v1671)
      free(v1671);
  }
  if (v1621)
  {
    sub_20E8C003C((uint64_t)object, "After update: ");
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v1672 = *(std::__shared_weak_count **)&v2576.f64[0];
  if (*(_QWORD *)&v2576.f64[0])
  {
    v1673 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
    do
      v1674 = __ldaxr(v1673);
    while (__stlxr(v1674 - 1, v1673));
    if (!v1674)
    {
      ((void (*)(std::__shared_weak_count *))v1672->__on_zero_shared)(v1672);
      std::__shared_weak_count::__release_weak(v1672);
    }
  }
LABEL_1767:
  sub_20F82FD50(v2582);
  if (**(int **)(*(_QWORD *)v2582 + 56) > 3)
    goto LABEL_1857;
  v1675 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
  v1676 = *(_BYTE *)(*(_QWORD *)v2582 + 72) != 0;
  v1677 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
  if (((v1677 == 0) & ~v1676) != 0)
    goto LABEL_1857;
  *(_QWORD *)object = v2582;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 3;
  *(_QWORD *)&object[32] = "unknown file";
  *(_DWORD *)&object[40] = 3883;
  v2576.f64[0] = 0.0;
  *(_QWORD *)&v2575 = "unknown function";
  *((_QWORD *)&v2575 + 1) = 0;
  v1678 = *(double *)(a2 + 5200)
        + *(double *)(a2 + 5248)
        + *(double *)(a2 + 5208)
        + *(double *)(a2 + 5216)
        + *(double *)(a2 + 5224)
        + *(double *)(a2 + 5240);
  *(double *)(a2 + 5256) = v1678;
  v1679 = **(_QWORD **)object;
  v1680 = **(_QWORD **)object + 16;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v1682 = *(const char **)(v1679 + 16);
    v1681 = *(_QWORD *)(v1679 + 24);
    v1684 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1684 & 1) != 0)
      goto LABEL_1773;
  }
  else
  {
    v1681 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
    v1682 = (const char *)(**(_QWORD **)object + 16);
    v1683 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1683 & 1) != 0)
      goto LABEL_1773;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)oslog);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
    if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
      operator delete(oslog[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_1773:
  if (byte_254A4A4F8[23] >= 0)
    v1685 = byte_254A4A4F8;
  else
    v1685 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1686 = byte_254A4A4F8[23];
  else
    v1686 = *(_QWORD *)&byte_254A4A4F8[8];
  oslog[0] = os_log_create(v1685, v1682);
  v1687 = &oslog[1];
  if (v1686 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1686 >= 0x17)
  {
    v1688 = (v1686 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1686 | 7) != 0x17)
      v1688 = v1686 | 7;
    v1689 = v1688 + 1;
    v1687 = operator new(v1688 + 1);
    oslog[3] = (os_log_t)(v1689 | 0x8000000000000000);
    oslog[1] = v1687;
    oslog[2] = (os_log_t)v1686;
    goto LABEL_1786;
  }
  HIBYTE(oslog[3]) = v1686;
  if (v1686)
LABEL_1786:
    memmove(v1687, v1685, v1686);
  *((_BYTE *)&v1687->isa + v1686) = 0;
  LOBYTE(oslog[4]) = 1;
  v1690 = &oslog[5];
  if (v1681 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1681 >= 0x17)
  {
    v1692 = (v1681 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1681 | 7) != 0x17)
      v1692 = v1681 | 7;
    v1693 = v1692 + 1;
    v1690 = operator new(v1692 + 1);
    oslog[7] = (os_log_t)(v1693 | 0x8000000000000000);
    oslog[5] = v1690;
    oslog[6] = (os_log_t)v1681;
  }
  else
  {
    HIBYTE(oslog[7]) = v1681;
    if (!v1681)
    {
      LOBYTE(oslog[5]) = 0;
      LOBYTE(oslog[8]) = 1;
      v1691 = oslog[0];
      if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
        goto LABEL_1791;
      goto LABEL_1797;
    }
  }
  memmove(v1690, v1682, v1681);
  *((_BYTE *)&v1690->isa + v1681) = 0;
  LOBYTE(oslog[8]) = 1;
  v1691 = oslog[0];
  if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
  {
LABEL_1791:
    if (!LOBYTE(oslog[4]))
      goto LABEL_1800;
LABEL_1798:
    if (SHIBYTE(oslog[3]) < 0)
      operator delete(oslog[1]);
    goto LABEL_1800;
  }
LABEL_1797:
  operator delete(oslog[5]);
  if (LOBYTE(oslog[4]))
    goto LABEL_1798;
LABEL_1800:
  if (oslog[0])
    os_release(oslog[0]);
  if (v1677 && *(_QWORD *)(v1677 + 24))
  {
    v1694 = _os_log_pack_size();
    v1695 = operator new(v1694, (std::align_val_t)8uLL);
    v1696 = operator new();
    v1697 = (std::__shared_weak_count *)v1696;
    v1696[1].isa = 0;
    v1698 = (unint64_t *)&v1696[1];
    v1696->isa = (Class)&off_24C9ABB80;
    v1696[2].isa = 0;
    v1696[3].isa = (Class)v1695;
    oslog[0] = v1695;
    oslog[1] = v1695;
    oslog[2] = v1696;
    do
      v1699 = __ldxr(v1698);
    while (__stxr(v1699 + 1, v1698));
    memset(&oslog[3], 0, 24);
    do
      v1700 = __ldaxr(v1698);
    while (__stlxr(v1700 - 1, v1698));
    if (!v1700)
    {
      (*((void (**))v1696->isa + 2))(v1696);
      std::__shared_weak_count::__release_weak(v1697);
    }
    v1701 = oslog[0];
    v1702 = _os_log_pack_fill();
    v1703 = *(_QWORD *)(a2 + 5200);
    v1704 = *(_QWORD *)(a2 + 5216);
    v1705 = *(_QWORD *)(a2 + 5224);
    v1706 = *(_QWORD *)(a2 + 5240);
    v1707 = *(_QWORD *)(a2 + 5248);
    *(_DWORD *)v1702 = 134219264;
    *(double *)(v1702 + 4) = v1678;
    *(_WORD *)(v1702 + 12) = 2048;
    *(_QWORD *)(v1702 + 14) = v1703;
    *(_WORD *)(v1702 + 22) = 2048;
    *(_QWORD *)(v1702 + 24) = v1704;
    *(_WORD *)(v1702 + 32) = 2048;
    *(_QWORD *)(v1702 + 34) = v1705;
    *(_WORD *)(v1702 + 42) = 2048;
    *(_QWORD *)(v1702 + 44) = v1706;
    *(_WORD *)(v1702 + 52) = 2048;
    *(_QWORD *)(v1702 + 54) = v1707;
    v1708 = (char *)operator new();
    v1709 = *(unsigned __int8 *)(v1679 + 39);
    if ((v1709 & 0x80u) == 0)
      v1710 = v1680;
    else
      v1710 = *(_QWORD *)(v1679 + 16);
    if ((v1709 & 0x80u) != 0)
      v1709 = *(_QWORD *)(v1679 + 24);
    *(_QWORD *)v1708 = v1701;
    *(_OWORD *)(v1708 + 8) = *(_OWORD *)&oslog[1];
    oslog[1] = 0;
    oslog[2] = 0;
    *(_OWORD *)(v1708 + 24) = *(_OWORD *)&oslog[3];
    oslog[3] = 0;
    oslog[4] = 0;
    *((_QWORD *)v1708 + 5) = v1710;
    *((_QWORD *)v1708 + 6) = v1709;
    v1708[56] = 1;
    v2546[0] = 0;
    v2536[0] = v1708;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1677 + 24) + 40))(*(_QWORD *)(v1677 + 24), v2536);
    v1711 = v2536[0];
    v2536[0] = 0;
    if (v1711)
    {
      v1712 = (std::__shared_weak_count *)*((_QWORD *)v1711 + 4);
      if (v1712)
      {
        v1713 = (unint64_t *)&v1712->__shared_owners_;
        do
          v1714 = __ldaxr(v1713);
        while (__stlxr(v1714 - 1, v1713));
        if (!v1714)
        {
          ((void (*)(std::__shared_weak_count *))v1712->__on_zero_shared)(v1712);
          std::__shared_weak_count::__release_weak(v1712);
        }
      }
      v1715 = (std::__shared_weak_count *)*((_QWORD *)v1711 + 2);
      if (v1715)
      {
        v1716 = (unint64_t *)&v1715->__shared_owners_;
        do
          v1717 = __ldaxr(v1716);
        while (__stlxr(v1717 - 1, v1716));
        if (!v1717)
        {
          ((void (*)(std::__shared_weak_count *))v1715->__on_zero_shared)(v1715);
          std::__shared_weak_count::__release_weak(v1715);
        }
      }
      MEMORY[0x212BC6398](v1711, 0x10F0C40B62ED6C6);
      v1718 = v2546[0];
      v2546[0] = 0;
      if (v1718)
      {
        v1719 = (std::__shared_weak_count *)*((_QWORD *)v1718 + 4);
        if (v1719)
        {
          v1720 = (unint64_t *)&v1719->__shared_owners_;
          do
            v1721 = __ldaxr(v1720);
          while (__stlxr(v1721 - 1, v1720));
          if (!v1721)
          {
            ((void (*)(std::__shared_weak_count *))v1719->__on_zero_shared)(v1719);
            std::__shared_weak_count::__release_weak(v1719);
          }
        }
        v1722 = (std::__shared_weak_count *)*((_QWORD *)v1718 + 2);
        if (v1722)
        {
          v1723 = (unint64_t *)&v1722->__shared_owners_;
          do
            v1724 = __ldaxr(v1723);
          while (__stlxr(v1724 - 1, v1723));
          if (!v1724)
          {
            ((void (*)(std::__shared_weak_count *))v1722->__on_zero_shared)(v1722);
            std::__shared_weak_count::__release_weak(v1722);
          }
        }
        MEMORY[0x212BC6398](v1718, 0x10F0C40B62ED6C6);
      }
    }
    v1725 = (std::__shared_weak_count *)oslog[4];
    if (oslog[4])
    {
      v1726 = (unint64_t *)&oslog[4][1];
      do
        v1727 = __ldaxr(v1726);
      while (__stlxr(v1727 - 1, v1726));
      if (!v1727)
      {
        ((void (*)(std::__shared_weak_count *))v1725->__on_zero_shared)(v1725);
        std::__shared_weak_count::__release_weak(v1725);
      }
    }
    v1728 = (std::__shared_weak_count *)oslog[2];
    if (oslog[2])
    {
      v1729 = (unint64_t *)&oslog[2][1];
      do
        v1730 = __ldaxr(v1729);
      while (__stlxr(v1730 - 1, v1729));
      if (!v1730)
      {
        ((void (*)(std::__shared_weak_count *))v1728->__on_zero_shared)(v1728);
        std::__shared_weak_count::__release_weak(v1728);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1691, OS_LOG_TYPE_INFO);
    v1731 = *(NSObject **)(a2 + 5200);
    v1732 = *(NSObject **)(a2 + 5216);
    v1733 = *(NSObject **)(a2 + 5224);
    v1734 = *(NSObject **)(a2 + 5240);
    v1735 = *(NSObject **)(a2 + 5248);
    LODWORD(oslog[0]) = 134219264;
    *(os_log_t *)((char *)oslog + 4) = *(os_log_t *)&v1678;
    WORD2(oslog[1]) = 2048;
    *(os_log_t *)((char *)&oslog[1] + 6) = v1731;
    HIWORD(oslog[2]) = 2048;
    oslog[3] = v1732;
    LOWORD(oslog[4]) = 2048;
    *(os_log_t *)((char *)&oslog[4] + 2) = v1733;
    WORD1(oslog[5]) = 2048;
    *(os_log_t *)((char *)&oslog[5] + 4) = v1734;
    WORD2(oslog[6]) = 2048;
    *(os_log_t *)((char *)&oslog[6] + 6) = v1735;
    v1736 = (void *)_os_log_send_and_compose_impl();
    if (v1736)
      free(v1736);
  }
  if (v1675)
  {
    v1737 = *(double *)(a2 + 5200);
    v1738 = *(double *)(a2 + 5248);
    v1739 = *(double *)(a2 + 5216);
    v1740 = *(double *)(a2 + 5224);
    v1741 = *(double *)(a2 + 5240);
    v1742 = v1737 + v1738 + *(double *)(a2 + 5208) + v1739 + v1740 + v1741;
    *(double *)(a2 + 5256) = v1742;
    sub_20E8C003C((uint64_t)object, "cost=%f (vision=%f + inertial=%f + map=0.00 + stationary=%f + projected velocity=0.00 + prior=%f + planes=%f)", v1742, v1737, v1739, v1740, v1741, v1738);
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v1743 = *(std::__shared_weak_count **)&v2576.f64[0];
  if (*(_QWORD *)&v2576.f64[0])
  {
    v1744 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
    do
      v1745 = __ldaxr(v1744);
    while (__stlxr(v1745 - 1, v1744));
    if (!v1745)
    {
      ((void (*)(std::__shared_weak_count *))v1743->__on_zero_shared)(v1743);
      std::__shared_weak_count::__release_weak(v1743);
    }
  }
LABEL_1857:
  v1746 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 7952) + 48) + 48);
  v2496 = *(double *)(v1746 + 16);
  __sh = *(double *)(v1746 + 40);
  *(_OWORD *)v2487 = *(_OWORD *)(v1746 + 24);
  *(_OWORD *)v2490 = *(_OWORD *)v1746;
  v1747 = *(double *)(v1746 + 64);
  v2510 = *(float64x2_t *)(v1746 + 48);
  v2492 = *(double *)(v1746 + 88);
  *(_OWORD *)v2491 = *(_OWORD *)(v1746 + 72);
  sub_20F82FD50(v2582);
  if (**(int **)(*(_QWORD *)v2582 + 56) <= 3)
  {
    v1748 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
    v1749 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
    v1750 = v1749;
    if (v1748 || v1749)
    {
      *(_QWORD *)object = v2582;
      *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
      *(_DWORD *)&object[24] = 3;
      *(_QWORD *)&object[32] = "unknown file";
      *(_DWORD *)&object[40] = 3269;
      v2576.f64[0] = 0.0;
      *(_QWORD *)&v2575 = "unknown function";
      *((_QWORD *)&v2575 + 1) = 0;
      v1751 = **(_QWORD **)object;
      v1752 = **(_QWORD **)object + 16;
      if (*(char *)(**(_QWORD **)object + 39) < 0)
      {
        v1754 = *(const char **)(v1751 + 16);
        v1753 = *(_QWORD *)(v1751 + 24);
      }
      else
      {
        v1753 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
        v1754 = (const char *)(**(_QWORD **)object + 16);
      }
      v2484 = *(_QWORD *)(a2 + 2280);
      v1755 = *(_DWORD *)(*(_QWORD *)(a2 + 2488) - 4);
      v1756 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1756 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)oslog);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
        if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
          operator delete(oslog[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v1757 = byte_254A4A4F8;
      else
        v1757 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v1758 = byte_254A4A4F8[23];
      else
        v1758 = *(_QWORD *)&byte_254A4A4F8[8];
      oslog[0] = os_log_create(v1757, v1754);
      v1759 = &oslog[1];
      if (v1758 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v1758 >= 0x17)
      {
        v2481 = v1754;
        v1760 = v1750;
        v1761 = v1751;
        v1762 = v1755;
        v1763 = v1748;
        v1764 = v1752;
        v1765 = (v1758 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1758 | 7) != 0x17)
          v1765 = v1758 | 7;
        v1766 = v1765 + 1;
        v1759 = operator new(v1765 + 1);
        oslog[3] = (os_log_t)(v1766 | 0x8000000000000000);
        oslog[1] = v1759;
        oslog[2] = (os_log_t)v1758;
        v1752 = v1764;
        v1748 = v1763;
        v1755 = v1762;
        v1751 = v1761;
        v1750 = v1760;
        v1754 = v2481;
      }
      else
      {
        HIBYTE(oslog[3]) = v1758;
        if (!v1758)
        {
LABEL_1878:
          *((_BYTE *)&v1759->isa + v1758) = 0;
          LOBYTE(oslog[4]) = 1;
          v1767 = &oslog[5];
          if (v1753 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v1753 >= 0x17)
          {
            v1769 = (v1753 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v1753 | 7) != 0x17)
              v1769 = v1753 | 7;
            v1770 = v1769 + 1;
            v1767 = operator new(v1769 + 1);
            oslog[7] = (os_log_t)(v1770 | 0x8000000000000000);
            oslog[5] = v1767;
            oslog[6] = (os_log_t)v1753;
          }
          else
          {
            HIBYTE(oslog[7]) = v1753;
            if (!v1753)
            {
              LOBYTE(oslog[5]) = 0;
              LOBYTE(oslog[8]) = 1;
              v1768 = oslog[0];
              if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
                goto LABEL_1882;
              goto LABEL_1888;
            }
          }
          memmove(v1767, v1754, v1753);
          *((_BYTE *)&v1767->isa + v1753) = 0;
          LOBYTE(oslog[8]) = 1;
          v1768 = oslog[0];
          if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
          {
LABEL_1882:
            if (!LOBYTE(oslog[4]))
              goto LABEL_1891;
            goto LABEL_1889;
          }
LABEL_1888:
          operator delete(oslog[5]);
          if (!LOBYTE(oslog[4]))
          {
LABEL_1891:
            if (oslog[0])
              os_release(oslog[0]);
            v1771 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v2490, *(int64x2_t *)v2487);
            _Q1 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v2490, *(int64x2_t *)v2487);
            v1773 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v1771, 1);
            v1774 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v1771.f64[0], 0);
            _V16.D[1] = v2510.f64[1];
            _D7 = __sh;
            v1777 = vmlaq_laneq_f64(vmulq_n_f64(_Q1, *(double *)v2491), v1771, *(float64x2_t *)v2491, 1);
            v1771.f64[0] = v2496;
            v1771.f64[1] = __sh;
            _D6 = v2491[1];
            v1779 = (int64x2_t)vextq_s8(v1774, v1773, 8uLL);
            _Q4 = vmlaq_n_f64(v1777, v1771, v2492);
            __asm { FMLA            D5, D6, V16.D[1] }
            *(double *)v1774.i64 = _D5 + v1747 * v2492;
            v1782 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q1, v1779), _Q4.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q1, v1779), _Q4, 1), v2510, *(double *)v1774.i64);
            __asm { FMLA            D1, D7, V4.D[1] }
            v1783 = _Q1.f64[0] + v1747 * *(double *)v1774.i64;
            v2511 = vextq_s8(v1782, v1782, 8uLL).u64[0];
            *(int8x16_t *)__si = v1782;
            if (v1750 && *(_QWORD *)(v1750 + 24))
            {
              v1784 = _os_log_pack_size();
              v1785 = operator new(v1784, (std::align_val_t)8uLL);
              v1786 = operator new();
              v1787 = (std::__shared_weak_count *)v1786;
              v1786[1].isa = 0;
              v1788 = (unint64_t *)&v1786[1];
              v1786->isa = (Class)&off_24C9ABB80;
              v1786[2].isa = 0;
              v1786[3].isa = (Class)v1785;
              oslog[0] = v1785;
              oslog[1] = v1785;
              oslog[2] = v1786;
              do
                v1789 = __ldxr(v1788);
              while (__stxr(v1789 + 1, v1788));
              memset(&oslog[3], 0, 24);
              do
                v1790 = __ldaxr(v1788);
              while (__stlxr(v1790 - 1, v1788));
              if (!v1790)
              {
                (*((void (**))v1786->isa + 2))(v1786);
                std::__shared_weak_count::__release_weak(v1787);
              }
              v1791 = oslog[0];
              v1792 = _os_log_pack_fill();
              v1793 = *(_QWORD *)(v2484 + 144);
              v1794 = *(_QWORD *)(v2484 + 152);
              v1795 = *(_QWORD *)(v2484 + 160);
              *(_DWORD *)v1792 = 67110656;
              *(_DWORD *)(v1792 + 4) = v1755;
              *(_WORD *)(v1792 + 8) = 2048;
              *(os_log_t *)(v1792 + 10) = __si[0];
              *(_WORD *)(v1792 + 18) = 2048;
              *(_QWORD *)(v1792 + 20) = v2511;
              *(_WORD *)(v1792 + 28) = 2048;
              *(double *)(v1792 + 30) = v1783;
              *(_WORD *)(v1792 + 38) = 2048;
              *(_QWORD *)(v1792 + 40) = v1793;
              *(_WORD *)(v1792 + 48) = 2048;
              *(_QWORD *)(v1792 + 50) = v1794;
              *(_WORD *)(v1792 + 58) = 2048;
              *(_QWORD *)(v1792 + 60) = v1795;
              v1796 = (char *)operator new();
              v1797 = *(unsigned __int8 *)(v1751 + 39);
              if ((v1797 & 0x80u) == 0)
                v1798 = v1752;
              else
                v1798 = *(_QWORD *)(v1751 + 16);
              if ((v1797 & 0x80u) != 0)
                v1797 = *(_QWORD *)(v1751 + 24);
              *(_QWORD *)v1796 = v1791;
              *(_OWORD *)(v1796 + 8) = *(_OWORD *)&oslog[1];
              oslog[1] = 0;
              oslog[2] = 0;
              *(_OWORD *)(v1796 + 24) = *(_OWORD *)&oslog[3];
              oslog[3] = 0;
              oslog[4] = 0;
              *((_QWORD *)v1796 + 5) = v1798;
              *((_QWORD *)v1796 + 6) = v1797;
              v1796[56] = 1;
              v2546[0] = 0;
              v2536[0] = v1796;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1750 + 24) + 40))(*(_QWORD *)(v1750 + 24), v2536);
              v1799 = v2536[0];
              v2536[0] = 0;
              if (v1799)
              {
                v1800 = (std::__shared_weak_count *)*((_QWORD *)v1799 + 4);
                if (v1800)
                {
                  v1801 = (unint64_t *)&v1800->__shared_owners_;
                  do
                    v1802 = __ldaxr(v1801);
                  while (__stlxr(v1802 - 1, v1801));
                  if (!v1802)
                  {
                    ((void (*)(std::__shared_weak_count *))v1800->__on_zero_shared)(v1800);
                    std::__shared_weak_count::__release_weak(v1800);
                  }
                }
                v1803 = (std::__shared_weak_count *)*((_QWORD *)v1799 + 2);
                if (v1803)
                {
                  v1804 = (unint64_t *)&v1803->__shared_owners_;
                  do
                    v1805 = __ldaxr(v1804);
                  while (__stlxr(v1805 - 1, v1804));
                  if (!v1805)
                  {
                    ((void (*)(std::__shared_weak_count *))v1803->__on_zero_shared)(v1803);
                    std::__shared_weak_count::__release_weak(v1803);
                  }
                }
                MEMORY[0x212BC6398](v1799, 0x10F0C40B62ED6C6);
                v1806 = v2546[0];
                v2546[0] = 0;
                if (v1806)
                {
                  v1807 = (std::__shared_weak_count *)*((_QWORD *)v1806 + 4);
                  if (v1807)
                  {
                    v1808 = (unint64_t *)&v1807->__shared_owners_;
                    do
                      v1809 = __ldaxr(v1808);
                    while (__stlxr(v1809 - 1, v1808));
                    if (!v1809)
                    {
                      ((void (*)(std::__shared_weak_count *))v1807->__on_zero_shared)(v1807);
                      std::__shared_weak_count::__release_weak(v1807);
                    }
                  }
                  v1810 = (std::__shared_weak_count *)*((_QWORD *)v1806 + 2);
                  if (v1810)
                  {
                    v1811 = (unint64_t *)&v1810->__shared_owners_;
                    do
                      v1812 = __ldaxr(v1811);
                    while (__stlxr(v1812 - 1, v1811));
                    if (!v1812)
                    {
                      ((void (*)(std::__shared_weak_count *))v1810->__on_zero_shared)(v1810);
                      std::__shared_weak_count::__release_weak(v1810);
                    }
                  }
                  MEMORY[0x212BC6398](v1806, 0x10F0C40B62ED6C6);
                }
              }
              v1813 = (std::__shared_weak_count *)oslog[4];
              if (oslog[4])
              {
                v1814 = (unint64_t *)&oslog[4][1];
                do
                  v1815 = __ldaxr(v1814);
                while (__stlxr(v1815 - 1, v1814));
                if (!v1815)
                {
                  ((void (*)(std::__shared_weak_count *))v1813->__on_zero_shared)(v1813);
                  std::__shared_weak_count::__release_weak(v1813);
                }
              }
              v1816 = (std::__shared_weak_count *)oslog[2];
              if (oslog[2])
              {
                v1817 = (unint64_t *)&oslog[2][1];
                do
                  v1818 = __ldaxr(v1817);
                while (__stlxr(v1818 - 1, v1817));
                if (!v1818)
                {
                  ((void (*)(std::__shared_weak_count *))v1816->__on_zero_shared)(v1816);
                  std::__shared_weak_count::__release_weak(v1816);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1768, OS_LOG_TYPE_INFO);
              v1819 = *(NSObject **)(v2484 + 144);
              v1820 = *(NSObject **)(v2484 + 152);
              v1821 = *(NSObject **)(v2484 + 160);
              LODWORD(oslog[0]) = 67110656;
              HIDWORD(oslog[0]) = v1755;
              LOWORD(oslog[1]) = 2048;
              *(os_log_t *)((char *)&oslog[1] + 2) = __si[0];
              WORD1(oslog[2]) = 2048;
              *(os_log_t *)((char *)&oslog[2] + 4) = v2511;
              WORD2(oslog[3]) = 2048;
              *(os_log_t *)((char *)&oslog[3] + 6) = *(os_log_t *)&v1783;
              HIWORD(oslog[4]) = 2048;
              oslog[5] = v1819;
              LOWORD(oslog[6]) = 2048;
              *(os_log_t *)((char *)&oslog[6] + 2) = v1820;
              WORD1(oslog[7]) = 2048;
              *(os_log_t *)((char *)&oslog[7] + 4) = v1821;
              v1822 = (void *)_os_log_send_and_compose_impl();
              if (v1822)
                free(v1822);
            }
            if (v1748)
            {
              sub_20E8C003C((uint64_t)object, "ID: %u, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f", *(_DWORD *)(*(_QWORD *)(a2 + 2488) - 4), *(double *)__si, *(double *)&__si[1], v1783, *(double *)(*(_QWORD *)(a2 + 2280) + 144), *(double *)(*(_QWORD *)(a2 + 2280) + 152), *(double *)(*(_QWORD *)(a2 + 2280) + 160));
              sub_20E863570((uint64_t)object);
            }
            sub_20E863570((uint64_t)object);
            v1823 = *(std::__shared_weak_count **)&v2576.f64[0];
            if (*(_QWORD *)&v2576.f64[0])
            {
              v1824 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
              do
                v1825 = __ldaxr(v1824);
              while (__stlxr(v1825 - 1, v1824));
              if (!v1825)
              {
                ((void (*)(std::__shared_weak_count *))v1823->__on_zero_shared)(v1823);
                std::__shared_weak_count::__release_weak(v1823);
              }
            }
            goto LABEL_1948;
          }
LABEL_1889:
          if (SHIBYTE(oslog[3]) < 0)
            operator delete(oslog[1]);
          goto LABEL_1891;
        }
      }
      memmove(v1759, v1757, v1758);
      goto LABEL_1878;
    }
  }
LABEL_1948:
  v1826 = *(_QWORD *)(a2 + 8216);
  v1827 = *(unsigned __int8 *)(v1826 + 1720);
  v1828 = v1826 + 864;
  if (!*(_BYTE *)(v1826 + 1720))
    v1828 = v1826 + 24;
  if (*(_BYTE *)(v1828 + 416))
  {
    v1829 = **(_QWORD **)(a2 + 7952);
    v1830 = *(_QWORD **)(v1829 + 296);
    v1831 = (_QWORD *)(v1829 + 304);
    if (v1830 != (_QWORD *)(v1829 + 304))
    {
      v2490[0] = &oslog[1];
      v2484 = (unint64_t)&v2537[1];
      v2493 = (_QWORD *)(v1829 + 304);
      while (1)
      {
        sub_20F9B2A4C(v2582);
        if (**(int **)(*(_QWORD *)v2582 + 56) > 3
          || (v1832 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72),
              v1833 = *(_BYTE *)(*(_QWORD *)v2582 + 72) != 0,
              v1834 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0),
              ((v1834 == 0) & ~v1833) != 0))
        {
LABEL_2051:
          v1918 = (_QWORD *)v1830[1];
          if (!v1918)
            goto LABEL_2055;
          goto LABEL_2052;
        }
        *(_QWORD *)object = v2582;
        *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
        *(_DWORD *)&object[24] = 3;
        *(_QWORD *)&object[32] = "unknown file";
        *(_DWORD *)&object[40] = 633;
        *(_QWORD *)&v2575 = "unknown function";
        *((_QWORD *)&v2575 + 1) = 0;
        v2576.f64[0] = 0.0;
        v1835 = **(_QWORD **)object;
        v1836 = **(_QWORD **)object + 16;
        if (*(char *)(**(_QWORD **)object + 39) < 0)
        {
          v1838 = *(const char **)(v1835 + 16);
          v1837 = *(_QWORD *)(v1835 + 24);
          v1840 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1840 & 1) != 0)
            goto LABEL_1960;
        }
        else
        {
          v1837 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
          v1838 = (const char *)(**(_QWORD **)object + 16);
          v1839 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1839 & 1) != 0)
            goto LABEL_1960;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2536);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2536);
          if (LOBYTE(v2537[1]) && SHIBYTE(v2537[0]) < 0)
            operator delete(v2536[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_1960:
        if (byte_254A4A4F8[23] >= 0)
          v1841 = byte_254A4A4F8;
        else
          v1841 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1842 = byte_254A4A4F8[23];
        else
          v1842 = *(_QWORD *)&byte_254A4A4F8[8];
        oslog[0] = os_log_create(v1841, v1838);
        if (v1842 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        __sj = v1836;
        if (v1842 >= 0x17)
        {
          v1844 = (v1842 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1842 | 7) != 0x17)
            v1844 = v1842 | 7;
          v1845 = v1844 + 1;
          v1843 = operator new(v1844 + 1);
          oslog[3] = (os_log_t)(v1845 | 0x8000000000000000);
          oslog[1] = v1843;
          oslog[2] = (os_log_t)v1842;
LABEL_1973:
          memmove(v1843, v1841, v1842);
          goto LABEL_1974;
        }
        HIBYTE(oslog[3]) = v1842;
        v1843 = &oslog[1];
        if (v1842)
          goto LABEL_1973;
LABEL_1974:
        *((_BYTE *)&v1843->isa + v1842) = 0;
        LOBYTE(oslog[4]) = 1;
        if (v1837 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1837 >= 0x17)
        {
          v1848 = (v1837 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1837 | 7) != 0x17)
            v1848 = v1837 | 7;
          v1849 = v1848 + 1;
          v1846 = operator new(v1848 + 1);
          oslog[7] = (os_log_t)(v1849 | 0x8000000000000000);
          oslog[5] = v1846;
          oslog[6] = (os_log_t)v1837;
        }
        else
        {
          HIBYTE(oslog[7]) = v1837;
          v1846 = &oslog[5];
          if (!v1837)
          {
            LOBYTE(oslog[5]) = 0;
            LOBYTE(oslog[8]) = 1;
            v1847 = oslog[0];
            if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
              goto LABEL_1978;
            goto LABEL_1984;
          }
        }
        memmove(v1846, v1838, v1837);
        *((_BYTE *)&v1846->isa + v1837) = 0;
        LOBYTE(oslog[8]) = 1;
        v1847 = oslog[0];
        if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
        {
LABEL_1978:
          if (!LOBYTE(oslog[4]))
            goto LABEL_1987;
          goto LABEL_1985;
        }
LABEL_1984:
        operator delete(oslog[5]);
        if (!LOBYTE(oslog[4]))
          goto LABEL_1987;
LABEL_1985:
        if (SHIBYTE(oslog[3]) < 0)
          operator delete(oslog[1]);
LABEL_1987:
        if (oslog[0])
          os_release(oslog[0]);
        if (v1834 && *(_QWORD *)(v1834 + 24))
        {
          v1850 = _os_log_pack_size();
          v1851 = operator new(v1850, (std::align_val_t)8uLL);
          v1852 = operator new();
          v1852[1].isa = 0;
          v1853 = (unint64_t *)&v1852[1];
          v1852->isa = (Class)&off_24C9ABB80;
          v1852[2].isa = 0;
          v1852[3].isa = (Class)v1851;
          v2536[0] = v1851;
          v2536[1] = v1851;
          v2537[0] = v1852;
          v2537[1] = 0;
          v2538 = 0;
          v1854 = (char *)operator new(0x48uLL);
          v1855 = (std::__shared_weak_count *)v1854;
          *((_QWORD *)v1854 + 1) = 0;
          v1856 = (unint64_t *)(v1854 + 8);
          *((_QWORD *)v1854 + 2) = 0;
          *(_QWORD *)v1854 = &off_24C9FEF30;
          *((_QWORD *)v1854 + 3) = off_24C9FEF80;
          v2491[0] = (void *)((unint64_t)v2491[0] & 0xFFFFFFFFFF000000 | 0x4746);
          *((void **)v1854 + 4) = v2491[0];
          v1854[55] = 2;
          v2537[1] = v1854 + 24;
          v2538 = v1854;
          oslog[0] = v1851;
          oslog[1] = v1851;
          oslog[2] = v1852;
          do
            v1857 = __ldxr(v1853);
          while (__stxr(v1857 + 1, v1853));
          oslog[3] = (os_log_t)(v1854 + 24);
          oslog[4] = (os_log_t)v1854;
          do
            v1858 = __ldxr(v1856);
          while (__stxr(v1858 + 1, v1856));
          oslog[5] = (os_log_t)(v1854 + 24);
          do
            v1859 = __ldaxr(v1856);
          while (__stlxr(v1859 - 1, v1856));
          if (!v1859)
          {
            (*(void (**)(char *))(*(_QWORD *)v1854 + 16))(v1854);
            std::__shared_weak_count::__release_weak(v1855);
          }
          v1860 = (std::__shared_weak_count *)v2537[0];
          if (v2537[0])
          {
            v1861 = (unint64_t *)((char *)v2537[0] + 8);
            do
              v1862 = __ldaxr(v1861);
            while (__stlxr(v1862 - 1, v1861));
            if (!v1862)
            {
              ((void (*)(std::__shared_weak_count *))v1860->__on_zero_shared)(v1860);
              std::__shared_weak_count::__release_weak(v1860);
            }
          }
          if (SHIBYTE(oslog[5][3].isa) >= 0)
            v1863 = (Class)&oslog[5][1];
          else
            v1863 = oslog[5][1].isa;
          v1864 = _os_log_pack_fill();
          v1865 = *((_DWORD *)v1830 + 8);
          v1866 = v1830[15];
          v1867 = v1830[16];
          v1868 = v1830[5];
          v1869 = v1830[6];
          v1870 = v1830[7];
          v1871 = v1830[8];
          v1872 = v1830[9];
          v1873 = v1830[10];
          v1875 = v1830[11];
          v1874 = v1830[12];
          v1877 = v1830[13];
          v1876 = v1830[14];
          *(_DWORD *)v1864 = 68161282;
          *(_DWORD *)(v1864 + 4) = 2;
          *(_WORD *)(v1864 + 8) = 2080;
          *(_QWORD *)(v1864 + 10) = v1863;
          *(_WORD *)(v1864 + 18) = 1024;
          *(_DWORD *)(v1864 + 20) = v1865;
          *(_WORD *)(v1864 + 24) = 2048;
          *(_QWORD *)(v1864 + 26) = v1876;
          *(_WORD *)(v1864 + 34) = 2048;
          *(_QWORD *)(v1864 + 36) = v1866;
          *(_WORD *)(v1864 + 44) = 2048;
          *(_QWORD *)(v1864 + 46) = v1867;
          *(_WORD *)(v1864 + 54) = 2048;
          *(_QWORD *)(v1864 + 56) = v1868;
          *(_WORD *)(v1864 + 64) = 2048;
          *(_QWORD *)(v1864 + 66) = v1869;
          *(_WORD *)(v1864 + 74) = 2048;
          *(_QWORD *)(v1864 + 76) = v1870;
          *(_WORD *)(v1864 + 84) = 2048;
          *(_QWORD *)(v1864 + 86) = v1871;
          *(_WORD *)(v1864 + 94) = 2048;
          *(_QWORD *)(v1864 + 96) = v1872;
          *(_WORD *)(v1864 + 104) = 2048;
          *(_QWORD *)(v1864 + 106) = v1873;
          *(_WORD *)(v1864 + 114) = 2048;
          *(_QWORD *)(v1864 + 116) = v1875;
          *(_WORD *)(v1864 + 124) = 2048;
          *(_QWORD *)(v1864 + 126) = v1874;
          *(_WORD *)(v1864 + 134) = 2048;
          *(_QWORD *)(v1864 + 136) = v1877;
          v1878 = (char *)operator new();
          v1879 = *(unsigned __int8 *)(v1835 + 39);
          v1880 = __sj;
          if ((v1879 & 0x80u) != 0)
          {
            v1880 = *(_QWORD *)(v1835 + 16);
            v1879 = *(_QWORD *)(v1835 + 24);
          }
          *(_OWORD *)v1878 = *(_OWORD *)oslog;
          *((os_log_t *)v1878 + 2) = oslog[2];
          oslog[1] = 0;
          oslog[2] = 0;
          *(_OWORD *)(v1878 + 24) = *(_OWORD *)&oslog[3];
          oslog[3] = 0;
          oslog[4] = 0;
          *((_QWORD *)v1878 + 5) = v1880;
          *((_QWORD *)v1878 + 6) = v1879;
          v1878[56] = 1;
          v2546[0] = 0;
          v2536[0] = v1878;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1834 + 24) + 40))(*(_QWORD *)(v1834 + 24), v2536);
          v1881 = v2536[0];
          v2536[0] = 0;
          if (v1881)
          {
            v1882 = (std::__shared_weak_count *)*((_QWORD *)v1881 + 4);
            if (v1882)
            {
              v1883 = (unint64_t *)&v1882->__shared_owners_;
              do
                v1884 = __ldaxr(v1883);
              while (__stlxr(v1884 - 1, v1883));
              if (!v1884)
              {
                ((void (*)(std::__shared_weak_count *))v1882->__on_zero_shared)(v1882);
                std::__shared_weak_count::__release_weak(v1882);
              }
            }
            v1885 = (std::__shared_weak_count *)*((_QWORD *)v1881 + 2);
            if (v1885)
            {
              v1886 = (unint64_t *)&v1885->__shared_owners_;
              do
                v1887 = __ldaxr(v1886);
              while (__stlxr(v1887 - 1, v1886));
              if (!v1887)
              {
                ((void (*)(std::__shared_weak_count *))v1885->__on_zero_shared)(v1885);
                std::__shared_weak_count::__release_weak(v1885);
              }
            }
            MEMORY[0x212BC6398](v1881, 0x10F0C40B62ED6C6);
            v1888 = v2546[0];
            v2546[0] = 0;
            if (v1888)
            {
              v1889 = (std::__shared_weak_count *)*((_QWORD *)v1888 + 4);
              if (v1889)
              {
                v1890 = (unint64_t *)&v1889->__shared_owners_;
                do
                  v1891 = __ldaxr(v1890);
                while (__stlxr(v1891 - 1, v1890));
                if (!v1891)
                {
                  ((void (*)(std::__shared_weak_count *))v1889->__on_zero_shared)(v1889);
                  std::__shared_weak_count::__release_weak(v1889);
                }
              }
              v1892 = (std::__shared_weak_count *)*((_QWORD *)v1888 + 2);
              if (v1892)
              {
                v1893 = (unint64_t *)&v1892->__shared_owners_;
                do
                  v1894 = __ldaxr(v1893);
                while (__stlxr(v1894 - 1, v1893));
                if (!v1894)
                {
                  ((void (*)(std::__shared_weak_count *))v1892->__on_zero_shared)(v1892);
                  std::__shared_weak_count::__release_weak(v1892);
                }
              }
              MEMORY[0x212BC6398](v1888, 0x10F0C40B62ED6C6);
            }
          }
          v1895 = (std::__shared_weak_count *)oslog[4];
          v1831 = v2493;
          if (oslog[4])
          {
            v1896 = (unint64_t *)&oslog[4][1];
            do
              v1897 = __ldaxr(v1896);
            while (__stlxr(v1897 - 1, v1896));
            if (!v1897)
            {
              ((void (*)(std::__shared_weak_count *))v1895->__on_zero_shared)(v1895);
              std::__shared_weak_count::__release_weak(v1895);
            }
          }
          v1898 = (std::__shared_weak_count *)oslog[2];
          if (oslog[2])
          {
            v1899 = (unint64_t *)&oslog[2][1];
            do
              v1900 = __ldaxr(v1899);
            while (__stlxr(v1900 - 1, v1899));
            if (!v1900)
            {
              ((void (*)(std::__shared_weak_count *))v1898->__on_zero_shared)(v1898);
              std::__shared_weak_count::__release_weak(v1898);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1847, OS_LOG_TYPE_INFO);
          v1901 = *((_DWORD *)v1830 + 8);
          v1902 = v1830[15];
          v1903 = v1830[16];
          v1904 = v1830[5];
          v1905 = v1830[6];
          v1906 = v1830[7];
          v1907 = v1830[8];
          v1908 = v1830[9];
          v1909 = v1830[10];
          v1911 = v1830[11];
          v1910 = v1830[12];
          v1913 = v1830[13];
          v1912 = v1830[14];
          oslog[0] = (os_log_t)0x204100F02;
          LOWORD(oslog[1]) = 2080;
          *(os_log_t *)((char *)&oslog[1] + 2) = (os_log_t)"FG";
          WORD1(oslog[2]) = 1024;
          HIDWORD(oslog[2]) = v1901;
          LOWORD(oslog[3]) = 2048;
          *(os_log_t *)((char *)&oslog[3] + 2) = v1912;
          WORD1(oslog[4]) = 2048;
          *(os_log_t *)((char *)&oslog[4] + 4) = v1902;
          WORD2(oslog[5]) = 2048;
          *(os_log_t *)((char *)&oslog[5] + 6) = v1903;
          HIWORD(oslog[6]) = 2048;
          oslog[7] = v1904;
          LOWORD(oslog[8]) = 2048;
          *(os_log_t *)((char *)&oslog[8] + 2) = v1905;
          WORD1(oslog[9]) = 2048;
          *(os_log_t *)((char *)&oslog[9] + 4) = v1906;
          WORD2(oslog[10]) = 2048;
          *(os_log_t *)((char *)&oslog[10] + 6) = v1907;
          HIWORD(oslog[11]) = 2048;
          *(_QWORD *)v2552 = v1908;
          *(_WORD *)&v2552[8] = 2048;
          *(_QWORD *)&v2552[10] = v1909;
          *(_WORD *)&v2552[18] = 2048;
          *(_QWORD *)&v2552[20] = v1911;
          *(_WORD *)&v2552[28] = 2048;
          *(_QWORD *)&v2552[30] = v1910;
          *(_WORD *)&v2552[38] = 2048;
          *(_QWORD *)&v2552[40] = v1913;
          v1914 = (void *)_os_log_send_and_compose_impl();
          if (v1914)
            free(v1914);
          v1831 = v2493;
        }
        if (v1832)
        {
          sub_20E8C003C((uint64_t)object, "[%.*s] extrinsic fg-p id[%d]: t_C_to_I %.8f, %.8f, %.8f, R_C_to_I in column-major: %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f, %.9f", 2, "FG", *((_DWORD *)v1830 + 8), *((double *)v1830 + 14), *((double *)v1830 + 15), *((double *)v1830 + 16), *((double *)v1830 + 5), *((double *)v1830 + 6), *((double *)v1830 + 7), *((double *)v1830 + 8), *((double *)v1830 + 9), *((double *)v1830 + 10), *((double *)v1830 + 11), *((double *)v1830 + 12), *((double *)v1830 + 13));
          sub_20E863570((uint64_t)object);
        }
        sub_20E863570((uint64_t)object);
        v1915 = *(std::__shared_weak_count **)&v2576.f64[0];
        if (!*(_QWORD *)&v2576.f64[0])
          goto LABEL_2051;
        v1916 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
        do
          v1917 = __ldaxr(v1916);
        while (__stlxr(v1917 - 1, v1916));
        if (v1917)
          goto LABEL_2051;
        ((void (*)(std::__shared_weak_count *))v1915->__on_zero_shared)(v1915);
        std::__shared_weak_count::__release_weak(v1915);
        v1918 = (_QWORD *)v1830[1];
        if (!v1918)
        {
          do
          {
LABEL_2055:
            v1919 = (_QWORD *)v1830[2];
            _ZF = *v1919 == (_QWORD)v1830;
            v1830 = v1919;
          }
          while (!_ZF);
          goto LABEL_1953;
        }
        do
        {
LABEL_2052:
          v1919 = v1918;
          v1918 = (_QWORD *)*v1918;
        }
        while (v1918);
LABEL_1953:
        v1830 = v1919;
        if (v1919 == v1831)
        {
          v1826 = *(_QWORD *)(a2 + 8216);
          v1827 = *(unsigned __int8 *)(v1826 + 1720);
          break;
        }
      }
    }
  }
  v1920 = v1826 + 864;
  if (!v1827)
    v1920 = v1826 + 24;
  if (!*(_BYTE *)(v1920 + 426))
    goto LABEL_2313;
  v1921 = *(_QWORD **)(a2 + 7952);
  v1922 = *v1921;
  v1923 = *(double **)(*v1921 + 336);
  __sk = v1921;
  if (!v1923)
    goto LABEL_2182;
  v2484 = (unint64_t)&v2537[1];
  do
  {
    sub_20F9B2A4C(v2582);
    if (**(int **)(*(_QWORD *)v2582 + 56) > 2)
      goto LABEL_2069;
    v1924 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
    v1925 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
    v1926 = v1925;
    if (!v1924 && v1925 == 0)
      goto LABEL_2069;
    *(_QWORD *)object = v2582;
    *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
    *(_DWORD *)&object[24] = 2;
    *(_QWORD *)&object[32] = "unknown file";
    *(_DWORD *)&object[40] = 600;
    *(_QWORD *)&v2575 = "unknown function";
    *((_QWORD *)&v2575 + 1) = 0;
    v2576.f64[0] = 0.0;
    if (*((_BYTE *)v1923 + 64))
    {
      v1928 = v1923[7] * v1923[4];
      v1929 = **(_QWORD **)object;
      v1930 = (const char *)(**(_QWORD **)object + 16);
      v1931 = *(char *)(**(_QWORD **)object + 39);
      v2512 = v1930;
      if (v1931 < 0)
        goto LABEL_2080;
    }
    else
    {
      v1928 = v1923[3];
      v1929 = **(_QWORD **)object;
      v1930 = (const char *)(**(_QWORD **)object + 16);
      v1931 = *(char *)(**(_QWORD **)object + 39);
      v2512 = v1930;
      if (v1931 < 0)
      {
LABEL_2080:
        v1930 = *(const char **)(v1929 + 16);
        v1932 = *(_QWORD *)(v1929 + 24);
        v1934 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1934 & 1) != 0)
          goto LABEL_2081;
        goto LABEL_2176;
      }
    }
    v1932 = v1931;
    v1933 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1933 & 1) != 0)
      goto LABEL_2081;
LABEL_2176:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v2536);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2536);
      if (LOBYTE(v2537[1]) && SHIBYTE(v2537[0]) < 0)
        operator delete(v2536[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_2081:
    if (byte_254A4A4F8[23] >= 0)
      v1935 = byte_254A4A4F8;
    else
      v1935 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1936 = byte_254A4A4F8[23];
    else
      v1936 = *(_QWORD *)&byte_254A4A4F8[8];
    oslog[0] = os_log_create(v1935, v1930);
    if (v1936 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1936 >= 0x17)
    {
      v1938 = (v1936 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1936 | 7) != 0x17)
        v1938 = v1936 | 7;
      v1939 = v1938 + 1;
      v1937 = operator new(v1938 + 1);
      oslog[3] = (os_log_t)(v1939 | 0x8000000000000000);
      oslog[1] = v1937;
      oslog[2] = (os_log_t)v1936;
LABEL_2094:
      memmove(v1937, v1935, v1936);
      goto LABEL_2095;
    }
    HIBYTE(oslog[3]) = v1936;
    v1937 = &oslog[1];
    if (v1936)
      goto LABEL_2094;
LABEL_2095:
    *((_BYTE *)&v1937->isa + v1936) = 0;
    LOBYTE(oslog[4]) = 1;
    if (v1932 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1932 >= 0x17)
    {
      v1942 = (v1932 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1932 | 7) != 0x17)
        v1942 = v1932 | 7;
      v1943 = v1942 + 1;
      v1940 = operator new(v1942 + 1);
      oslog[7] = (os_log_t)(v1943 | 0x8000000000000000);
      oslog[5] = v1940;
      oslog[6] = (os_log_t)v1932;
    }
    else
    {
      HIBYTE(oslog[7]) = v1932;
      v1940 = &oslog[5];
      if (!v1932)
      {
        LOBYTE(oslog[5]) = 0;
        LOBYTE(oslog[8]) = 1;
        v1941 = oslog[0];
        if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
          goto LABEL_2099;
        goto LABEL_2105;
      }
    }
    memmove(v1940, v1930, v1932);
    *((_BYTE *)&v1940->isa + v1932) = 0;
    LOBYTE(oslog[8]) = 1;
    v1941 = oslog[0];
    if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
    {
LABEL_2099:
      if (LOBYTE(oslog[4]))
        goto LABEL_2106;
      goto LABEL_2108;
    }
LABEL_2105:
    operator delete(oslog[5]);
    if (LOBYTE(oslog[4]))
    {
LABEL_2106:
      if (SHIBYTE(oslog[3]) < 0)
        operator delete(oslog[1]);
    }
LABEL_2108:
    if (oslog[0])
      os_release(oslog[0]);
    if (v1926 && *(_QWORD *)(v1926 + 24))
    {
      v1944 = _os_log_pack_size();
      v1945 = operator new(v1944, (std::align_val_t)8uLL);
      v1946 = operator new();
      v1946[1].isa = 0;
      v1947 = (unint64_t *)&v1946[1];
      v1946->isa = (Class)&off_24C9ABB80;
      v1946[2].isa = 0;
      v1946[3].isa = (Class)v1945;
      v2536[0] = v1945;
      v2536[1] = v1945;
      v2537[0] = v1946;
      v2537[1] = 0;
      v2538 = 0;
      v1948 = (char *)operator new(0x40uLL);
      v1949 = (std::__shared_weak_count *)v1948;
      *((_QWORD *)v1948 + 1) = 0;
      v1950 = (unint64_t *)(v1948 + 8);
      *((_QWORD *)v1948 + 2) = 0;
      *(_QWORD *)v1948 = &off_24C9FEFB8;
      *((_QWORD *)v1948 + 3) = off_24C9FF008;
      v2490[0] = (void *)((unint64_t)v2490[0] & 0xFFFFFFFFFF000000 | 0x4746);
      *((void **)v1948 + 4) = v2490[0];
      v1948[55] = 2;
      v2537[1] = v1948 + 24;
      v2538 = v1948;
      oslog[0] = v1945;
      oslog[1] = v1945;
      oslog[2] = v1946;
      do
        v1951 = __ldxr(v1947);
      while (__stxr(v1951 + 1, v1947));
      oslog[3] = (os_log_t)(v1948 + 24);
      oslog[4] = (os_log_t)v1948;
      do
        v1952 = __ldxr(v1950);
      while (__stxr(v1952 + 1, v1950));
      oslog[5] = (os_log_t)(v1948 + 24);
      do
        v1953 = __ldaxr(v1950);
      while (__stlxr(v1953 - 1, v1950));
      if (!v1953)
      {
        (*(void (**)(char *))(*(_QWORD *)v1948 + 16))(v1948);
        std::__shared_weak_count::__release_weak(v1949);
      }
      v1954 = (std::__shared_weak_count *)v2537[0];
      if (v2537[0])
      {
        v1955 = (unint64_t *)((char *)v2537[0] + 8);
        do
          v1956 = __ldaxr(v1955);
        while (__stlxr(v1956 - 1, v1955));
        if (!v1956)
        {
          ((void (*)(std::__shared_weak_count *))v1954->__on_zero_shared)(v1954);
          std::__shared_weak_count::__release_weak(v1954);
        }
      }
      v1957 = oslog[0];
      if (SHIBYTE(oslog[5][3].isa) >= 0)
        v1958 = (Class)&oslog[5][1];
      else
        v1958 = oslog[5][1].isa;
      v1959 = _os_log_pack_fill();
      v1960 = *((_DWORD *)v1923 + 4);
      v1961 = *((_QWORD *)v1923 + 4);
      v1962 = *((_QWORD *)v1923 + 5);
      v1963 = *((_QWORD *)v1923 + 6);
      *(_DWORD *)v1959 = 68159234;
      *(_DWORD *)(v1959 + 4) = 2;
      *(_WORD *)(v1959 + 8) = 2080;
      *(_QWORD *)(v1959 + 10) = v1958;
      *(_WORD *)(v1959 + 18) = 1024;
      *(_DWORD *)(v1959 + 20) = v1960;
      *(_WORD *)(v1959 + 24) = 2048;
      *(double *)(v1959 + 26) = v1928;
      *(_WORD *)(v1959 + 34) = 2048;
      *(_QWORD *)(v1959 + 36) = v1961;
      *(_WORD *)(v1959 + 44) = 2048;
      *(_QWORD *)(v1959 + 46) = v1962;
      *(_WORD *)(v1959 + 54) = 2048;
      *(_QWORD *)(v1959 + 56) = v1963;
      v1964 = (char *)operator new();
      v1965 = *(unsigned __int8 *)(v1929 + 39);
      v1966 = v2512;
      if ((v1965 & 0x80u) != 0)
      {
        v1966 = *(const char **)(v1929 + 16);
        v1965 = *(_QWORD *)(v1929 + 24);
      }
      *(_QWORD *)v1964 = v1957;
      *(_OWORD *)(v1964 + 8) = *(_OWORD *)&oslog[1];
      oslog[1] = 0;
      oslog[2] = 0;
      *(_OWORD *)(v1964 + 24) = *(_OWORD *)&oslog[3];
      oslog[3] = 0;
      oslog[4] = 0;
      *((_QWORD *)v1964 + 5) = v1966;
      *((_QWORD *)v1964 + 6) = v1965;
      v1964[56] = 2;
      v2546[0] = 0;
      v2536[0] = v1964;
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1926 + 24) + 40))(*(_QWORD *)(v1926 + 24), v2536);
      v1967 = v2536[0];
      v2536[0] = 0;
      v1921 = __sk;
      if (v1967)
      {
        v1968 = (std::__shared_weak_count *)*((_QWORD *)v1967 + 4);
        if (v1968)
        {
          v1969 = (unint64_t *)&v1968->__shared_owners_;
          do
            v1970 = __ldaxr(v1969);
          while (__stlxr(v1970 - 1, v1969));
          if (!v1970)
          {
            ((void (*)(std::__shared_weak_count *))v1968->__on_zero_shared)(v1968);
            std::__shared_weak_count::__release_weak(v1968);
          }
        }
        v1971 = (std::__shared_weak_count *)*((_QWORD *)v1967 + 2);
        if (v1971)
        {
          v1972 = (unint64_t *)&v1971->__shared_owners_;
          do
            v1973 = __ldaxr(v1972);
          while (__stlxr(v1973 - 1, v1972));
          if (!v1973)
          {
            ((void (*)(std::__shared_weak_count *))v1971->__on_zero_shared)(v1971);
            std::__shared_weak_count::__release_weak(v1971);
          }
        }
        MEMORY[0x212BC6398](v1967, 0x10F0C40B62ED6C6);
        v1974 = v2546[0];
        v2546[0] = 0;
        if (v1974)
        {
          v1975 = (std::__shared_weak_count *)*((_QWORD *)v1974 + 4);
          if (v1975)
          {
            v1976 = (unint64_t *)&v1975->__shared_owners_;
            do
              v1977 = __ldaxr(v1976);
            while (__stlxr(v1977 - 1, v1976));
            if (!v1977)
            {
              ((void (*)(std::__shared_weak_count *))v1975->__on_zero_shared)(v1975);
              std::__shared_weak_count::__release_weak(v1975);
            }
          }
          v1978 = (std::__shared_weak_count *)*((_QWORD *)v1974 + 2);
          if (v1978)
          {
            v1979 = (unint64_t *)&v1978->__shared_owners_;
            do
              v1980 = __ldaxr(v1979);
            while (__stlxr(v1980 - 1, v1979));
            if (!v1980)
            {
              ((void (*)(std::__shared_weak_count *))v1978->__on_zero_shared)(v1978);
              std::__shared_weak_count::__release_weak(v1978);
            }
          }
          MEMORY[0x212BC6398](v1974, 0x10F0C40B62ED6C6);
        }
      }
      v1981 = (std::__shared_weak_count *)oslog[4];
      if (oslog[4])
      {
        v1982 = (unint64_t *)&oslog[4][1];
        do
          v1983 = __ldaxr(v1982);
        while (__stlxr(v1983 - 1, v1982));
        if (!v1983)
        {
          ((void (*)(std::__shared_weak_count *))v1981->__on_zero_shared)(v1981);
          std::__shared_weak_count::__release_weak(v1981);
        }
      }
      v1984 = (std::__shared_weak_count *)oslog[2];
      if (oslog[2])
      {
        v1985 = (unint64_t *)&oslog[2][1];
        do
          v1986 = __ldaxr(v1985);
        while (__stlxr(v1986 - 1, v1985));
        if (!v1986)
        {
          ((void (*)(std::__shared_weak_count *))v1984->__on_zero_shared)(v1984);
          std::__shared_weak_count::__release_weak(v1984);
        }
      }
    }
    else
    {
      os_log_type_enabled(v1941, OS_LOG_TYPE_DEBUG);
      v1987 = *((_DWORD *)v1923 + 4);
      v1988 = *((_QWORD *)v1923 + 4);
      v1989 = *((_QWORD *)v1923 + 5);
      v1990 = *((_QWORD *)v1923 + 6);
      oslog[0] = (os_log_t)0x204100702;
      LOWORD(oslog[1]) = 2080;
      *(os_log_t *)((char *)&oslog[1] + 2) = (os_log_t)"FG";
      WORD1(oslog[2]) = 1024;
      HIDWORD(oslog[2]) = v1987;
      LOWORD(oslog[3]) = 2048;
      *(os_log_t *)((char *)&oslog[3] + 2) = *(os_log_t *)&v1928;
      WORD1(oslog[4]) = 2048;
      *(os_log_t *)((char *)&oslog[4] + 4) = v1988;
      WORD2(oslog[5]) = 2048;
      *(os_log_t *)((char *)&oslog[5] + 6) = v1989;
      HIWORD(oslog[6]) = 2048;
      oslog[7] = v1990;
      v1991 = (void *)_os_log_send_and_compose_impl();
      if (v1991)
        free(v1991);
      v1921 = __sk;
    }
    if (v1924)
    {
      if (*((_BYTE *)v1923 + 64))
      {
        v1992 = v1923[4];
        v1993 = v1923[7] * v1992;
      }
      else
      {
        v1993 = v1923[3];
        v1992 = v1923[4];
      }
      sub_20E8C003C((uint64_t)object, "[%.*s] Camera %d: fx_b: %f, fy_b: %f, cx_b: %f, cy_b: %f", 2, "FG", *((_DWORD *)v1923 + 4), v1993, v1992, v1923[5], v1923[6]);
      sub_20E863570((uint64_t)object);
    }
    sub_20E863570((uint64_t)object);
    v1994 = *(std::__shared_weak_count **)&v2576.f64[0];
    if (*(_QWORD *)&v2576.f64[0])
    {
      v1995 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
      do
        v1996 = __ldaxr(v1995);
      while (__stlxr(v1996 - 1, v1995));
      if (!v1996)
      {
        ((void (*)(std::__shared_weak_count *))v1994->__on_zero_shared)(v1994);
        std::__shared_weak_count::__release_weak(v1994);
      }
    }
LABEL_2069:
    v1923 = *(double **)v1923;
  }
  while (v1923);
  v1922 = *v1921;
LABEL_2182:
  v1997 = v1922 + 56;
  v1998 = *(_QWORD *)(v1922 + 56);
  if (v1998)
  {
    do
    {
      v1999 = v1998;
      v1998 = *(_QWORD *)(v1998 + 8);
    }
    while (v1998);
  }
  else
  {
    do
    {
      v1999 = *(_QWORD *)(v1997 + 16);
      _ZF = *(_QWORD *)v1999 == v1997;
      v1997 = v1999;
    }
    while (_ZF);
  }
  v2000 = *(uint64_t **)(v1922 + 336);
  if (v2000)
  {
    v2001 = *(_QWORD *)(v1999 + 32);
    v2002 = *(_DWORD *)(v1999 + 40);
    v2513 = v2002;
    while (1)
    {
      v2003 = *((_DWORD *)v2000 + 4);
      v2005 = (uint64_t *)v1921[5];
      v2004 = (uint64_t *)v1921[6];
      if (v2004 != v2005)
      {
        v2006 = ((char *)v2004 - (char *)v2005) >> 4;
        while (1)
        {
          v2007 = v2006 >> 1;
          v2008 = &v2005[2 * (v2006 >> 1)];
          v2009 = *v2008;
          v2010 = *(_DWORD *)(*v2008 + 16);
          v2011 = v2010 >= v2003;
          if (v2010 != v2003)
            goto LABEL_2197;
          if (*(_QWORD *)v2009 >= v2001)
            break;
LABEL_2191:
          v2005 = v2008 + 2;
          v2007 = v2006 + ~v2007;
LABEL_2192:
          v2006 = v2007;
          if (!v2007)
            goto LABEL_2200;
        }
        if (*(_QWORD *)v2009 != v2001)
          goto LABEL_2192;
        v2011 = *(_DWORD *)(v2009 + 8) >= v2002;
LABEL_2197:
        if (v2011)
          goto LABEL_2192;
        goto LABEL_2191;
      }
LABEL_2200:
      if (v2005 != v2004)
      {
        v2012 = *v2005;
        if (*(_DWORD *)(*v2005 + 16) == v2003 && *(_QWORD *)v2012 == v2001 && *(_DWORD *)(v2012 + 8) == v2002)
          v2004 = v2005;
      }
      v2013 = *(_DWORD **)(*v2004 + 32);
      v2014 = v2013[248];
      if (v2014 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v2014 = v2013[248];
      }
      if (!v2014)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      memmove(object, v2013, 0x48uLL);
      sub_20F13B958((uint64_t)(v2000 + 3), (double *)object, (uint64_t)oslog);
      *(_OWORD *)&object[32] = *(_OWORD *)&oslog[4];
      v2575 = *(_OWORD *)&oslog[6];
      *(os_log_t *)&v2576.f64[0] = oslog[8];
      *(_OWORD *)&object[16] = *(_OWORD *)&oslog[2];
      *(_OWORD *)object = *(_OWORD *)oslog;
      sub_20F9B2A4C(&__dst);
      if (**((int **)__dst + 7) <= 3)
      {
        v2015 = __dst[72];
        v2016 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
        v2017 = v2016;
        if (v2015 || v2016)
          break;
      }
LABEL_2188:
      v2000 = (uint64_t *)*v2000;
      if (!v2000)
        goto LABEL_2312;
    }
    v2536[0] = &__dst;
    v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v2537[1]) = 3;
    v2538 = "unknown file";
    v2539 = 616;
    v2540 = "unknown function";
    v2541 = 0;
    v2542 = 0;
    v2018 = *(_QWORD *)v2536[0];
    v2019 = (const char *)(*(_QWORD *)v2536[0] + 16);
    v2497 = *(_QWORD *)v2536[0];
    v2494 = v2019;
    if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
    {
      v2019 = *(const char **)(v2018 + 16);
      v2020 = *(_QWORD *)(v2018 + 24);
      v2022 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v2022 & 1) == 0)
      {
LABEL_2307:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2546);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2546);
          if ((_BYTE)v2548 && SHIBYTE(v2547) < 0)
            operator delete(v2546[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v1921 = __sk;
        }
      }
    }
    else
    {
      v2020 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
      v2021 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v2021 & 1) == 0)
        goto LABEL_2307;
    }
    if (byte_254A4A4F8[23] >= 0)
      v2023 = byte_254A4A4F8;
    else
      v2023 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v2024 = byte_254A4A4F8[23];
    else
      v2024 = *(_QWORD *)&byte_254A4A4F8[8];
    oslog[0] = os_log_create(v2023, v2019);
    if (v2024 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v2024 >= 0x17)
    {
      v2026 = (v2024 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2024 | 7) != 0x17)
        v2026 = v2024 | 7;
      v2027 = v2026 + 1;
      v2025 = operator new(v2026 + 1);
      oslog[3] = (os_log_t)(v2027 | 0x8000000000000000);
      oslog[1] = v2025;
      oslog[2] = (os_log_t)v2024;
      v1921 = __sk;
    }
    else
    {
      HIBYTE(oslog[3]) = v2024;
      v2025 = &oslog[1];
      if (!v2024)
      {
LABEL_2230:
        *((_BYTE *)&v2025->isa + v2024) = 0;
        LOBYTE(oslog[4]) = 1;
        if (v2020 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v2020 >= 0x17)
        {
          v2030 = (v2020 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v2020 | 7) != 0x17)
            v2030 = v2020 | 7;
          v2031 = v2030 + 1;
          v2028 = operator new(v2030 + 1);
          oslog[7] = (os_log_t)(v2031 | 0x8000000000000000);
          oslog[5] = v2028;
          oslog[6] = (os_log_t)v2020;
          v1921 = __sk;
        }
        else
        {
          HIBYTE(oslog[7]) = v2020;
          v2028 = &oslog[5];
          if (!v2020)
          {
            LOBYTE(oslog[5]) = 0;
            LOBYTE(oslog[8]) = 1;
            v2029 = oslog[0];
            if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
              goto LABEL_2234;
LABEL_2240:
            operator delete(oslog[5]);
            v2002 = v2513;
            if (LOBYTE(oslog[4]))
              goto LABEL_2241;
            goto LABEL_2243;
          }
        }
        memmove(v2028, v2019, v2020);
        *((_BYTE *)&v2028->isa + v2020) = 0;
        LOBYTE(oslog[8]) = 1;
        v2029 = oslog[0];
        if (SHIBYTE(oslog[7]) < 0)
          goto LABEL_2240;
LABEL_2234:
        v2002 = v2513;
        if (LOBYTE(oslog[4]))
        {
LABEL_2241:
          if (SHIBYTE(oslog[3]) < 0)
            operator delete(oslog[1]);
        }
LABEL_2243:
        if (oslog[0])
          os_release(oslog[0]);
        if (v2017 && *(_QWORD *)(v2017 + 24))
        {
          v2032 = _os_log_pack_size();
          v2033 = operator new(v2032, (std::align_val_t)8uLL);
          v2034 = operator new();
          v2034[1].isa = 0;
          v2035 = (unint64_t *)&v2034[1];
          v2034->isa = (Class)&off_24C9ABB80;
          v2034[2].isa = 0;
          v2034[3].isa = (Class)v2033;
          v2546[0] = v2033;
          v2546[1] = v2033;
          v2547 = (int64_t)v2034;
          v2548 = 0;
          v2549 = 0;
          v2036 = (char *)operator new(0x40uLL);
          v2037 = (std::__shared_weak_count *)v2036;
          *((_QWORD *)v2036 + 1) = 0;
          v2038 = (unint64_t *)(v2036 + 8);
          *((_QWORD *)v2036 + 2) = 0;
          *(_QWORD *)v2036 = &off_24C9FEFB8;
          *((_QWORD *)v2036 + 3) = off_24C9FF008;
          v2484 = v2484 & 0xFFFFFFFFFF000000 | 0x4746;
          *((_QWORD *)v2036 + 4) = v2484;
          v2036[55] = 2;
          v2548 = v2036 + 24;
          v2549 = (std::__shared_weak_count *)v2036;
          oslog[0] = v2033;
          oslog[1] = v2033;
          oslog[2] = v2034;
          do
            v2039 = __ldxr(v2035);
          while (__stxr(v2039 + 1, v2035));
          oslog[3] = (os_log_t)(v2036 + 24);
          oslog[4] = (os_log_t)v2036;
          do
            v2040 = __ldxr(v2038);
          while (__stxr(v2040 + 1, v2038));
          oslog[5] = (os_log_t)(v2036 + 24);
          do
            v2041 = __ldaxr(v2038);
          while (__stlxr(v2041 - 1, v2038));
          if (!v2041)
          {
            (*(void (**)(char *))(*(_QWORD *)v2036 + 16))(v2036);
            std::__shared_weak_count::__release_weak(v2037);
          }
          v2042 = (std::__shared_weak_count *)v2547;
          if (v2547)
          {
            v2043 = (unint64_t *)(v2547 + 8);
            do
              v2044 = __ldaxr(v2043);
            while (__stlxr(v2044 - 1, v2043));
            if (!v2044)
            {
              ((void (*)(std::__shared_weak_count *))v2042->__on_zero_shared)(v2042);
              std::__shared_weak_count::__release_weak(v2042);
            }
          }
          v2045 = oslog[0];
          if (SHIBYTE(oslog[5][3].isa) >= 0)
            v2046 = (Class)&oslog[5][1];
          else
            v2046 = oslog[5][1].isa;
          v2047 = _os_log_pack_fill();
          v2048 = *((_DWORD *)v2000 + 4);
          v2049 = *(_QWORD *)object;
          v2050 = *(_QWORD *)&object[16];
          v2051 = *(_QWORD *)&object[32];
          v2052 = *(_QWORD *)&object[40];
          *(_DWORD *)v2047 = 68159234;
          *(_DWORD *)(v2047 + 4) = 2;
          *(_WORD *)(v2047 + 8) = 2080;
          *(_QWORD *)(v2047 + 10) = v2046;
          *(_WORD *)(v2047 + 18) = 1024;
          *(_DWORD *)(v2047 + 20) = v2048;
          *(_WORD *)(v2047 + 24) = 2048;
          *(_QWORD *)(v2047 + 26) = v2049;
          *(_WORD *)(v2047 + 34) = 2048;
          *(_QWORD *)(v2047 + 36) = v2051;
          *(_WORD *)(v2047 + 44) = 2048;
          *(_QWORD *)(v2047 + 46) = v2050;
          *(_WORD *)(v2047 + 54) = 2048;
          *(_QWORD *)(v2047 + 56) = v2052;
          v2053 = (char *)operator new();
          v2054 = *(unsigned __int8 *)(v2497 + 39);
          v2055 = v2494;
          if ((v2054 & 0x80u) != 0)
          {
            v2055 = *(const char **)(v2497 + 16);
            v2054 = *(_QWORD *)(v2497 + 24);
          }
          *(_QWORD *)v2053 = v2045;
          *(_OWORD *)(v2053 + 8) = *(_OWORD *)&oslog[1];
          oslog[1] = 0;
          oslog[2] = 0;
          *(_OWORD *)(v2053 + 24) = *(_OWORD *)&oslog[3];
          oslog[3] = 0;
          oslog[4] = 0;
          *((_QWORD *)v2053 + 5) = v2055;
          *((_QWORD *)v2053 + 6) = v2054;
          v2053[56] = 1;
          *(_QWORD *)v2582 = 0;
          v2546[0] = v2053;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2017 + 24) + 40))(*(_QWORD *)(v2017 + 24), v2546);
          v2056 = v2546[0];
          v2546[0] = 0;
          v2002 = v2513;
          if (v2056)
          {
            v2057 = (std::__shared_weak_count *)*((_QWORD *)v2056 + 4);
            if (v2057)
            {
              v2058 = (unint64_t *)&v2057->__shared_owners_;
              do
                v2059 = __ldaxr(v2058);
              while (__stlxr(v2059 - 1, v2058));
              if (!v2059)
              {
                ((void (*)(std::__shared_weak_count *))v2057->__on_zero_shared)(v2057);
                std::__shared_weak_count::__release_weak(v2057);
              }
            }
            v2060 = (std::__shared_weak_count *)*((_QWORD *)v2056 + 2);
            if (v2060)
            {
              v2061 = (unint64_t *)&v2060->__shared_owners_;
              do
                v2062 = __ldaxr(v2061);
              while (__stlxr(v2062 - 1, v2061));
              if (!v2062)
              {
                ((void (*)(std::__shared_weak_count *))v2060->__on_zero_shared)(v2060);
                std::__shared_weak_count::__release_weak(v2060);
              }
            }
            MEMORY[0x212BC6398](v2056, 0x10F0C40B62ED6C6);
            v2063 = *(_QWORD *)v2582;
            *(_QWORD *)v2582 = 0;
            if (v2063)
            {
              v2064 = *(std::__shared_weak_count **)(v2063 + 32);
              if (v2064)
              {
                v2065 = (unint64_t *)&v2064->__shared_owners_;
                do
                  v2066 = __ldaxr(v2065);
                while (__stlxr(v2066 - 1, v2065));
                if (!v2066)
                {
                  ((void (*)(std::__shared_weak_count *))v2064->__on_zero_shared)(v2064);
                  std::__shared_weak_count::__release_weak(v2064);
                }
              }
              v2067 = *(std::__shared_weak_count **)(v2063 + 16);
              if (v2067)
              {
                v2068 = (unint64_t *)&v2067->__shared_owners_;
                do
                  v2069 = __ldaxr(v2068);
                while (__stlxr(v2069 - 1, v2068));
                if (!v2069)
                {
                  ((void (*)(std::__shared_weak_count *))v2067->__on_zero_shared)(v2067);
                  std::__shared_weak_count::__release_weak(v2067);
                }
              }
              MEMORY[0x212BC6398](v2063, 0x10F0C40B62ED6C6);
            }
          }
          v2070 = (std::__shared_weak_count *)oslog[4];
          if (oslog[4])
          {
            v2071 = (unint64_t *)&oslog[4][1];
            do
              v2072 = __ldaxr(v2071);
            while (__stlxr(v2072 - 1, v2071));
            if (!v2072)
            {
              ((void (*)(std::__shared_weak_count *))v2070->__on_zero_shared)(v2070);
              std::__shared_weak_count::__release_weak(v2070);
            }
          }
          v2073 = (std::__shared_weak_count *)oslog[2];
          if (oslog[2])
          {
            v2074 = (unint64_t *)&oslog[2][1];
            do
              v2075 = __ldaxr(v2074);
            while (__stlxr(v2075 - 1, v2074));
            if (!v2075)
            {
              ((void (*)(std::__shared_weak_count *))v2073->__on_zero_shared)(v2073);
              std::__shared_weak_count::__release_weak(v2073);
            }
          }
        }
        else
        {
          os_log_type_enabled(v2029, OS_LOG_TYPE_INFO);
          v2076 = *((_DWORD *)v2000 + 4);
          oslog[0] = (os_log_t)0x204100702;
          LOWORD(oslog[1]) = 2080;
          *(os_log_t *)((char *)&oslog[1] + 2) = (os_log_t)"FG";
          WORD1(oslog[2]) = 1024;
          HIDWORD(oslog[2]) = v2076;
          LOWORD(oslog[3]) = 2048;
          *(os_log_t *)((char *)&oslog[3] + 2) = *(os_log_t *)object;
          WORD1(oslog[4]) = 2048;
          *(os_log_t *)((char *)&oslog[4] + 4) = *(os_log_t *)&object[32];
          WORD2(oslog[5]) = 2048;
          *(os_log_t *)((char *)&oslog[5] + 6) = *(os_log_t *)&object[16];
          HIWORD(oslog[6]) = 2048;
          oslog[7] = *(os_log_t *)&object[40];
          v2077 = (void *)_os_log_send_and_compose_impl();
          if (v2077)
            free(v2077);
        }
        if (v2015)
        {
          sub_20E8C003C((uint64_t)v2536, "[%.*s] Camera %d: Fx: %f, Fy: %f, Cx: %f, Cy: %f", 2, "FG", *((_DWORD *)v2000 + 4), *(double *)object, *(double *)&object[32], *(double *)&object[16], *(double *)&object[40]);
          sub_20E863570((uint64_t)v2536);
        }
        sub_20E863570((uint64_t)v2536);
        v2078 = v2542;
        if (v2542)
        {
          v2079 = (unint64_t *)&v2542->__shared_owners_;
          do
            v2080 = __ldaxr(v2079);
          while (__stlxr(v2080 - 1, v2079));
          if (!v2080)
          {
            ((void (*)(std::__shared_weak_count *))v2078->__on_zero_shared)(v2078);
            std::__shared_weak_count::__release_weak(v2078);
          }
        }
        goto LABEL_2188;
      }
    }
    memmove(v2025, v2023, v2024);
    goto LABEL_2230;
  }
LABEL_2312:
  v1826 = *(_QWORD *)(a2 + 8216);
  v1827 = *(unsigned __int8 *)(v1826 + 1720);
LABEL_2313:
  v2081 = v1826 + 864;
  if (!v1827)
    v2081 = v1826 + 24;
  if (!*(_BYTE *)(v2081 + 432))
    goto LABEL_2466;
  v2082 = *(_QWORD **)(**(_QWORD **)(a2 + 7952) + 376);
  if (!v2082)
    goto LABEL_2465;
  v2488 = *MEMORY[0x24BEDB7F0];
  v2482 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
  v2485 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 64);
  v2479 = (MEMORY[0x24BEDB848] + 16);
  while (2)
  {
    sub_20F9B2A4C(&v2550);
    if (*v2550[7] > 3)
      goto LABEL_2319;
    v2083 = *((unsigned __int8 *)v2550 + 72);
    v2084 = *((_BYTE *)v2550 + 72) != 0;
    v2085 = sub_20E8C31DC((uint64_t)v2550, "OSLogSurrogateAppender", 1, 0);
    if (((v2085 == 0) & ~v2084) != 0)
      goto LABEL_2319;
    sub_20E863438((uint64_t)oslog);
    v2086 = sub_20E86A980(&oslog[2], (uint64_t)"[", 1);
    v2087 = sub_20E86A980(v2086, (uint64_t)"FG", 2);
    sub_20E86A980(v2087, (uint64_t)"] Camera ", 9);
    v2088 = (_QWORD *)std::ostream::operator<<();
    v2089 = sub_20E86A980(v2088, (uint64_t)": D = ", 6);
    *(_QWORD *)object = v2082 + 3;
    sub_20F3A8964(v2089, (_OWORD **)object);
    if ((v2552[24] & 0x10) != 0)
    {
      v2092 = *(os_log_t *)&v2552[16];
      v2093 = &oslog[8];
      if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
      {
        *(os_log_t *)&v2552[16] = oslog[9];
        v2092 = oslog[9];
        v2093 = &oslog[8];
      }
    }
    else
    {
      if ((v2552[24] & 8) == 0)
      {
        v2090 = 0;
        HIBYTE(v2545) = 0;
        v2091 = (char *)&__dst;
        goto LABEL_2336;
      }
      v2092 = oslog[7];
      v2093 = &oslog[5];
    }
    v2094 = *v2093;
    v2090 = (char *)v2092 - (char *)*v2093;
    if (v2090 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v2090 >= 0x17)
    {
      v2095 = (v2090 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2090 | 7) != 0x17)
        v2095 = v2090 | 7;
      v2096 = v2095 + 1;
      v2091 = (char *)operator new(v2095 + 1);
      v2545 = v2096 | 0x8000000000000000;
      __dst = v2091;
      v2544 = v2090;
      goto LABEL_2335;
    }
    HIBYTE(v2545) = (_BYTE)v2092 - *(_BYTE *)v2093;
    v2091 = (char *)&__dst;
    if (v2090)
LABEL_2335:
      memmove(v2091, v2094, v2090);
LABEL_2336:
    v2091[v2090] = 0;
    v2536[0] = &v2550;
    v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v2537[1]) = 3;
    v2538 = "unknown file";
    v2539 = 643;
    v2540 = "unknown function";
    v2541 = 0;
    v2542 = 0;
    v2097 = (const char *)&__dst;
    if (v2545 < 0)
      v2097 = __dst;
    __sl = v2097;
    v2098 = *(_QWORD *)v2536[0];
    if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
    {
      v2100 = *(const char **)(v2098 + 16);
      v2099 = *(_QWORD *)(v2098 + 24);
      v2514 = *(_QWORD *)v2536[0] + 16;
      v2102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v2102 & 1) == 0)
      {
LABEL_2459:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2546);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2546);
          if ((_BYTE)v2548 && SHIBYTE(v2547) < 0)
            operator delete(v2546[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
      }
    }
    else
    {
      v2099 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
      v2100 = (const char *)(*(_QWORD *)v2536[0] + 16);
      v2514 = (uint64_t)v2100;
      v2101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v2101 & 1) == 0)
        goto LABEL_2459;
    }
    if (byte_254A4A4F8[23] >= 0)
      v2103 = byte_254A4A4F8;
    else
      v2103 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v2104 = byte_254A4A4F8[23];
    else
      v2104 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v2103, v2100);
    if (v2104 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v2104 >= 0x17)
    {
      v2106 = (v2104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2104 | 7) != 0x17)
        v2106 = v2104 | 7;
      v2107 = v2106 + 1;
      v2105 = operator new(v2106 + 1);
      *(_QWORD *)&object[24] = v2107 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v2105;
      *(_QWORD *)&object[16] = v2104;
      goto LABEL_2355;
    }
    object[31] = v2104;
    v2105 = &object[8];
    if (v2104)
LABEL_2355:
      memmove(v2105, v2103, v2104);
    v2105[v2104] = 0;
    object[32] = 1;
    if (v2099 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v2099 >= 0x17)
    {
      v2110 = (v2099 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2099 | 7) != 0x17)
        v2110 = v2099 | 7;
      v2111 = v2110 + 1;
      v2108 = operator new(v2110 + 1);
      *((_QWORD *)&v2575 + 1) = v2111 | 0x8000000000000000;
      *(_QWORD *)&object[40] = v2108;
      *(_QWORD *)&v2575 = v2099;
    }
    else
    {
      HIBYTE(v2575) = v2099;
      v2108 = &object[40];
      if (!v2099)
      {
        object[40] = 0;
        LOBYTE(v2576.f64[0]) = 1;
        v2109 = *(NSObject **)object;
        if ((SHIBYTE(v2575) & 0x80000000) == 0)
          goto LABEL_2360;
LABEL_2366:
        operator delete(*(void **)&object[40]);
        if (object[32])
          goto LABEL_2367;
        goto LABEL_2369;
      }
    }
    memmove(v2108, v2100, v2099);
    v2108[v2099] = 0;
    LOBYTE(v2576.f64[0]) = 1;
    v2109 = *(NSObject **)object;
    if (SHIBYTE(v2575) < 0)
      goto LABEL_2366;
LABEL_2360:
    if (object[32])
    {
LABEL_2367:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
    }
LABEL_2369:
    if (*(_QWORD *)object)
      os_release(*(void **)object);
    if (!v2085 || !*(_QWORD *)(v2085 + 24))
    {
      os_log_type_enabled(v2109, OS_LOG_TYPE_INFO);
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = __sl;
      v2118 = (void *)_os_log_send_and_compose_impl();
      if (!v2118)
        goto LABEL_2441;
      free(v2118);
      if (!v2083)
        goto LABEL_2445;
LABEL_2442:
      v2164 = (const char *)&__dst;
      if (v2545 < 0)
        v2164 = __dst;
      sub_20E8C003C((uint64_t)v2536, "%s", v2164);
      sub_20E863570((uint64_t)v2536);
      goto LABEL_2445;
    }
    v2112 = _os_log_pack_size();
    v2113 = operator new(v2112, (std::align_val_t)8uLL);
    v2114 = (_QWORD *)operator new();
    *v2114 = &off_24C9ABB80;
    v2114[1] = 0;
    v2114[2] = 0;
    v2114[3] = v2113;
    v2546[0] = v2113;
    v2546[1] = v2113;
    v2547 = (int64_t)v2114;
    v2548 = 0;
    v2549 = 0;
    v2115 = strlen(__sl);
    if (v2115 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v2116 = v2115;
    if (v2115 >= 0x17)
    {
      v2119 = (v2115 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2115 | 7) != 0x17)
        v2119 = v2115 | 7;
      v2120 = v2119 + 1;
      v2117 = operator new(v2119 + 1);
      *(_QWORD *)&v2582[8] = v2116;
      *(_QWORD *)&v2582[16] = v2120 | 0x8000000000000000;
      *(_QWORD *)v2582 = v2117;
    }
    else
    {
      v2582[23] = v2115;
      v2117 = v2582;
      if (!v2115)
        goto LABEL_2384;
    }
    memcpy(v2117, __sl, v2116);
LABEL_2384:
    v2117[v2116] = 0;
    v2121 = *(_QWORD *)v2582;
    v2581[0] = *(_QWORD *)&v2582[8];
    *(_QWORD *)((char *)v2581 + 7) = *(_QWORD *)&v2582[15];
    v2122 = v2582[23];
    v2123 = operator new(0x38uLL);
    v2123[1] = 0;
    v2123[2] = 0;
    v2123[3] = off_24C9ABC20;
    *v2123 = &off_24C9ABBD0;
    v2124 = v2581[0];
    v2123[4] = v2121;
    v2123[5] = v2124;
    *(_QWORD *)((char *)v2123 + 47) = *(_QWORD *)((char *)v2581 + 7);
    *((_BYTE *)v2123 + 55) = v2122;
    v2581[0] = 0;
    *(_QWORD *)((char *)v2581 + 7) = 0;
    v2125 = v2549;
    v2548 = (char *)(v2123 + 3);
    v2549 = (std::__shared_weak_count *)v2123;
    if (v2125)
    {
      v2126 = (unint64_t *)&v2125->__shared_owners_;
      do
        v2127 = __ldaxr(v2126);
      while (__stlxr(v2127 - 1, v2126));
      if (!v2127)
      {
        ((void (*)(std::__shared_weak_count *))v2125->__on_zero_shared)(v2125);
        std::__shared_weak_count::__release_weak(v2125);
      }
    }
    *(_OWORD *)object = *(_OWORD *)v2546;
    v2128 = v2548;
    *(_QWORD *)&object[16] = v2547;
    if (v2547)
    {
      v2129 = (unint64_t *)(v2547 + 8);
      do
        v2130 = __ldxr(v2129);
      while (__stxr(v2130 + 1, v2129));
    }
    v2131 = v2549;
    *(_QWORD *)&object[24] = v2128;
    *(_QWORD *)&object[32] = v2549;
    if (v2549)
    {
      v2132 = (unint64_t *)&v2549->__shared_owners_;
      do
        v2133 = __ldxr(v2132);
      while (__stxr(v2133 + 1, v2132));
      *(_QWORD *)&object[40] = v2128;
      do
        v2134 = __ldaxr(v2132);
      while (__stlxr(v2134 - 1, v2132));
      if (!v2134)
      {
        ((void (*)(std::__shared_weak_count *))v2131->__on_zero_shared)(v2131);
        std::__shared_weak_count::__release_weak(v2131);
      }
    }
    else
    {
      *(_QWORD *)&object[40] = v2128;
    }
    v2135 = (std::__shared_weak_count *)v2547;
    if (v2547)
    {
      v2136 = (unint64_t *)(v2547 + 8);
      do
        v2137 = __ldaxr(v2136);
      while (__stlxr(v2137 - 1, v2136));
      if (!v2137)
      {
        ((void (*)(std::__shared_weak_count *))v2135->__on_zero_shared)(v2135);
        std::__shared_weak_count::__release_weak(v2135);
      }
    }
    v2138 = *(_QWORD *)object;
    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
      v2139 = *(_QWORD *)&object[40] + 8;
    else
      v2139 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
    v2140 = _os_log_pack_fill();
    *(_DWORD *)v2140 = 136315138;
    *(_QWORD *)(v2140 + 4) = v2139;
    v2141 = (char *)operator new();
    v2142 = *(unsigned __int8 *)(v2098 + 39);
    v2143 = v2514;
    if ((v2142 & 0x80u) != 0)
    {
      v2143 = *(_QWORD *)(v2098 + 16);
      v2142 = *(_QWORD *)(v2098 + 24);
    }
    *(_QWORD *)v2141 = v2138;
    *(_OWORD *)(v2141 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v2141 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *((_QWORD *)v2141 + 5) = v2143;
    *((_QWORD *)v2141 + 6) = v2142;
    v2141[56] = 1;
    *(_QWORD *)v2582 = 0;
    v2546[0] = v2141;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2085 + 24) + 40))(*(_QWORD *)(v2085 + 24), v2546);
    v2144 = v2546[0];
    v2546[0] = 0;
    if (v2144)
    {
      v2145 = (std::__shared_weak_count *)*((_QWORD *)v2144 + 4);
      if (v2145)
      {
        v2146 = (unint64_t *)&v2145->__shared_owners_;
        do
          v2147 = __ldaxr(v2146);
        while (__stlxr(v2147 - 1, v2146));
        if (!v2147)
        {
          ((void (*)(std::__shared_weak_count *))v2145->__on_zero_shared)(v2145);
          std::__shared_weak_count::__release_weak(v2145);
        }
      }
      v2148 = (std::__shared_weak_count *)*((_QWORD *)v2144 + 2);
      if (v2148)
      {
        v2149 = (unint64_t *)&v2148->__shared_owners_;
        do
          v2150 = __ldaxr(v2149);
        while (__stlxr(v2150 - 1, v2149));
        if (!v2150)
        {
          ((void (*)(std::__shared_weak_count *))v2148->__on_zero_shared)(v2148);
          std::__shared_weak_count::__release_weak(v2148);
        }
      }
      MEMORY[0x212BC6398](v2144, 0x10F0C40B62ED6C6);
      v2151 = *(_QWORD *)v2582;
      *(_QWORD *)v2582 = 0;
      if (v2151)
      {
        v2152 = *(std::__shared_weak_count **)(v2151 + 32);
        if (v2152)
        {
          v2153 = (unint64_t *)&v2152->__shared_owners_;
          do
            v2154 = __ldaxr(v2153);
          while (__stlxr(v2154 - 1, v2153));
          if (!v2154)
          {
            ((void (*)(std::__shared_weak_count *))v2152->__on_zero_shared)(v2152);
            std::__shared_weak_count::__release_weak(v2152);
          }
        }
        v2155 = *(std::__shared_weak_count **)(v2151 + 16);
        if (v2155)
        {
          v2156 = (unint64_t *)&v2155->__shared_owners_;
          do
            v2157 = __ldaxr(v2156);
          while (__stlxr(v2157 - 1, v2156));
          if (!v2157)
          {
            ((void (*)(std::__shared_weak_count *))v2155->__on_zero_shared)(v2155);
            std::__shared_weak_count::__release_weak(v2155);
          }
        }
        MEMORY[0x212BC6398](v2151, 0x10F0C40B62ED6C6);
      }
    }
    v2158 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v2159 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v2160 = __ldaxr(v2159);
      while (__stlxr(v2160 - 1, v2159));
      if (!v2160)
      {
        ((void (*)(std::__shared_weak_count *))v2158->__on_zero_shared)(v2158);
        std::__shared_weak_count::__release_weak(v2158);
        v2161 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
          goto LABEL_2438;
        goto LABEL_2441;
      }
    }
    v2161 = *(std::__shared_weak_count **)&object[16];
    if (!*(_QWORD *)&object[16])
      goto LABEL_2441;
LABEL_2438:
    v2162 = (unint64_t *)&v2161->__shared_owners_;
    do
      v2163 = __ldaxr(v2162);
    while (__stlxr(v2163 - 1, v2162));
    if (!v2163)
    {
      ((void (*)(std::__shared_weak_count *))v2161->__on_zero_shared)(v2161);
      std::__shared_weak_count::__release_weak(v2161);
      if (!v2083)
        goto LABEL_2445;
      goto LABEL_2442;
    }
LABEL_2441:
    if (v2083)
      goto LABEL_2442;
LABEL_2445:
    sub_20E863570((uint64_t)v2536);
    v2165 = v2542;
    if (!v2542)
      goto LABEL_2449;
    v2166 = (unint64_t *)&v2542->__shared_owners_;
    do
      v2167 = __ldaxr(v2166);
    while (__stlxr(v2167 - 1, v2166));
    if (!v2167)
    {
      ((void (*)(std::__shared_weak_count *))v2165->__on_zero_shared)(v2165);
      std::__shared_weak_count::__release_weak(v2165);
      if (SHIBYTE(v2545) < 0)
LABEL_2450:
        operator delete(__dst);
    }
    else
    {
LABEL_2449:
      if (SHIBYTE(v2545) < 0)
        goto LABEL_2450;
    }
    oslog[0] = v2488;
    *(os_log_t *)((char *)oslog + (unint64_t)v2488[-3].isa) = v2485;
    oslog[2] = v2482;
    oslog[3] = v2479;
    if ((v2552[15] & 0x80000000) != 0)
      operator delete(oslog[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v2552[32]);
LABEL_2319:
    v2082 = (_QWORD *)*v2082;
    if (v2082)
      continue;
    break;
  }
  v1826 = *(_QWORD *)(a2 + 8216);
LABEL_2465:
  v1827 = *(unsigned __int8 *)(v1826 + 1720);
LABEL_2466:
  v2168 = v1826 + 864;
  v2169 = v1826 + 24;
  if (v1827)
    v2169 = v2168;
  if (*(_BYTE *)(v2169 + 434))
  {
    v2170 = *(uint64_t **)(**(_QWORD **)(a2 + 7952) + 416);
    if (v2170)
    {
      v2489 = *MEMORY[0x24BEDB7F0];
      v2483 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 72);
      v2486 = *(NSObject **)(MEMORY[0x24BEDB7F0] + 64);
      v2480 = (MEMORY[0x24BEDB848] + 16);
      while (1)
      {
        sub_20F9B2A4C(&v2550);
        if (*v2550[7] <= 3)
        {
          v2171 = *((unsigned __int8 *)v2550 + 72);
          v2172 = *((_BYTE *)v2550 + 72) != 0;
          v2173 = sub_20E8C31DC((uint64_t)v2550, "OSLogSurrogateAppender", 1, 0);
          if (((v2173 == 0) & ~v2172) == 0)
            break;
        }
LABEL_2472:
        v2170 = (uint64_t *)*v2170;
        if (!v2170)
          goto LABEL_2618;
      }
      sub_20E863438((uint64_t)oslog);
      v2174 = sub_20E86A980(&oslog[2], (uint64_t)"[", 1);
      v2175 = sub_20E86A980(v2174, (uint64_t)"FG", 2);
      sub_20E86A980(v2175, (uint64_t)"] ExternalLens ", 15);
      v2176 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v2176, (uint64_t)": degree = ", 11);
      memset(object, 0, 24);
      sub_20E9733B8((float64x2_t *)(v2170 + 3), (double *)object);
      _V1.D[1] = *(_QWORD *)&object[8];
      _D3 = *(_QWORD *)&object[8];
      __asm { FMLA            D2, D3, V1.D[1] }
      v2180 = (_QWORD *)std::ostream::operator<<();
      v2181 = sub_20E86A980(v2180, (uint64_t)"; r = ", 6);
      v2536[0] = 0;
      v2536[1] = 0;
      v2537[0] = 0;
      sub_20E9733B8((float64x2_t *)(v2170 + 3), (double *)v2536);
      v2546[0] = v2536;
      v2182 = sub_20EB1A104(v2181, (__int128 **)v2546);
      sub_20E86A980(v2182, (uint64_t)" (rad)", 6);
      if ((v2552[24] & 0x10) != 0)
      {
        v2185 = *(os_log_t *)&v2552[16];
        v2186 = &oslog[8];
        if ((os_log_t)*(_QWORD *)&v2552[16] < oslog[9])
        {
          *(os_log_t *)&v2552[16] = oslog[9];
          v2185 = oslog[9];
          v2186 = &oslog[8];
        }
      }
      else
      {
        if ((v2552[24] & 8) == 0)
        {
          v2183 = 0;
          HIBYTE(v2545) = 0;
          v2184 = (char *)&__dst;
          goto LABEL_2489;
        }
        v2185 = oslog[7];
        v2186 = &oslog[5];
      }
      v2187 = *v2186;
      v2183 = (char *)v2185 - (char *)*v2186;
      if (v2183 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v2183 >= 0x17)
      {
        v2188 = (v2183 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v2183 | 7) != 0x17)
          v2188 = v2183 | 7;
        v2189 = v2188 + 1;
        v2184 = (char *)operator new(v2188 + 1);
        v2545 = v2189 | 0x8000000000000000;
        __dst = v2184;
        v2544 = v2183;
      }
      else
      {
        HIBYTE(v2545) = (_BYTE)v2185 - *(_BYTE *)v2186;
        v2184 = (char *)&__dst;
        if (!v2183)
        {
LABEL_2489:
          v2184[v2183] = 0;
          v2536[0] = &v2550;
          v2536[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
          v2537[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v2537[1]) = 3;
          v2538 = "unknown file";
          v2539 = 655;
          v2540 = "unknown function";
          v2541 = 0;
          v2542 = 0;
          if (v2545 >= 0)
            v2190 = (const char *)&__dst;
          else
            v2190 = __dst;
          v2191 = *(_QWORD *)v2536[0];
          v2192 = *(_QWORD *)v2536[0] + 16;
          if (*(char *)(*(_QWORD *)v2536[0] + 39) < 0)
          {
            v2194 = *(const char **)(v2191 + 16);
            v2193 = *(_QWORD *)(v2191 + 24);
            __sm = v2171;
            v2196 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v2196 & 1) == 0)
            {
LABEL_2613:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v2546);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2546);
                if ((_BYTE)v2548 && SHIBYTE(v2547) < 0)
                  operator delete(v2546[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v2193 = *(unsigned __int8 *)(*(_QWORD *)v2536[0] + 39);
            v2194 = (const char *)(*(_QWORD *)v2536[0] + 16);
            __sm = v2171;
            v2195 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v2195 & 1) == 0)
              goto LABEL_2613;
          }
          if (byte_254A4A4F8[23] >= 0)
            v2197 = byte_254A4A4F8;
          else
            v2197 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v2198 = byte_254A4A4F8[23];
          else
            v2198 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v2197, v2194);
          if (v2198 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v2515 = v2192;
          if (v2198 >= 0x17)
          {
            v2200 = (v2198 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v2198 | 7) != 0x17)
              v2200 = v2198 | 7;
            v2201 = v2200 + 1;
            v2199 = operator new(v2200 + 1);
            *(_QWORD *)&object[24] = v2201 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v2199;
            *(_QWORD *)&object[16] = v2198;
          }
          else
          {
            object[31] = v2198;
            v2199 = &object[8];
            if (!v2198)
            {
LABEL_2510:
              v2199[v2198] = 0;
              object[32] = 1;
              if (v2193 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v2193 >= 0x17)
              {
                v2204 = (v2193 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v2193 | 7) != 0x17)
                  v2204 = v2193 | 7;
                v2205 = v2204 + 1;
                v2202 = operator new(v2204 + 1);
                *((_QWORD *)&v2575 + 1) = v2205 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v2202;
                *(_QWORD *)&v2575 = v2193;
              }
              else
              {
                HIBYTE(v2575) = v2193;
                v2202 = &object[40];
                if (!v2193)
                {
                  object[40] = 0;
                  LOBYTE(v2576.f64[0]) = 1;
                  v2203 = *(NSObject **)object;
                  if ((SHIBYTE(v2575) & 0x80000000) == 0)
                    goto LABEL_2514;
LABEL_2520:
                  operator delete(*(void **)&object[40]);
                  if (object[32])
                    goto LABEL_2521;
                  goto LABEL_2523;
                }
              }
              memmove(v2202, v2194, v2193);
              v2202[v2193] = 0;
              LOBYTE(v2576.f64[0]) = 1;
              v2203 = *(NSObject **)object;
              if (SHIBYTE(v2575) < 0)
                goto LABEL_2520;
LABEL_2514:
              if (object[32])
              {
LABEL_2521:
                if ((object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
              }
LABEL_2523:
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v2173 && *(_QWORD *)(v2173 + 24))
              {
                v2206 = _os_log_pack_size();
                v2207 = operator new(v2206, (std::align_val_t)8uLL);
                v2208 = (_QWORD *)operator new();
                *v2208 = &off_24C9ABB80;
                v2208[1] = 0;
                v2208[2] = 0;
                v2208[3] = v2207;
                v2546[0] = v2207;
                v2546[1] = v2207;
                v2547 = (int64_t)v2208;
                v2548 = 0;
                v2549 = 0;
                v2209 = strlen(v2190);
                if (v2209 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v2210 = v2209;
                if (v2209 >= 0x17)
                {
                  v2214 = (v2209 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v2209 | 7) != 0x17)
                    v2214 = v2209 | 7;
                  v2215 = v2214 + 1;
                  v2211 = operator new(v2214 + 1);
                  *(_QWORD *)&v2582[8] = v2210;
                  *(_QWORD *)&v2582[16] = v2215 | 0x8000000000000000;
                  *(_QWORD *)v2582 = v2211;
                }
                else
                {
                  v2582[23] = v2209;
                  v2211 = v2582;
                  if (!v2209)
                    goto LABEL_2538;
                }
                memcpy(v2211, v2190, v2210);
LABEL_2538:
                v2211[v2210] = 0;
                v2216 = *(_QWORD *)v2582;
                v2581[0] = *(_QWORD *)&v2582[8];
                *(_QWORD *)((char *)v2581 + 7) = *(_QWORD *)&v2582[15];
                v2217 = v2582[23];
                v2218 = operator new(0x38uLL);
                v2218[1] = 0;
                v2218[2] = 0;
                v2218[3] = off_24C9ABC20;
                *v2218 = &off_24C9ABBD0;
                v2219 = v2581[0];
                v2218[4] = v2216;
                v2218[5] = v2219;
                *(_QWORD *)((char *)v2218 + 47) = *(_QWORD *)((char *)v2581 + 7);
                *((_BYTE *)v2218 + 55) = v2217;
                v2581[0] = 0;
                *(_QWORD *)((char *)v2581 + 7) = 0;
                v2220 = v2549;
                v2548 = (char *)(v2218 + 3);
                v2549 = (std::__shared_weak_count *)v2218;
                if (v2220)
                {
                  v2221 = (unint64_t *)&v2220->__shared_owners_;
                  do
                    v2222 = __ldaxr(v2221);
                  while (__stlxr(v2222 - 1, v2221));
                  if (!v2222)
                  {
                    ((void (*)(std::__shared_weak_count *))v2220->__on_zero_shared)(v2220);
                    std::__shared_weak_count::__release_weak(v2220);
                  }
                }
                *(_OWORD *)object = *(_OWORD *)v2546;
                v2223 = v2548;
                *(_QWORD *)&object[16] = v2547;
                if (v2547)
                {
                  v2224 = (unint64_t *)(v2547 + 8);
                  do
                    v2225 = __ldxr(v2224);
                  while (__stxr(v2225 + 1, v2224));
                }
                v2226 = v2549;
                *(_QWORD *)&object[24] = v2223;
                *(_QWORD *)&object[32] = v2549;
                if (v2549)
                {
                  v2227 = (unint64_t *)&v2549->__shared_owners_;
                  do
                    v2228 = __ldxr(v2227);
                  while (__stxr(v2228 + 1, v2227));
                  *(_QWORD *)&object[40] = v2223;
                  do
                    v2229 = __ldaxr(v2227);
                  while (__stlxr(v2229 - 1, v2227));
                  if (!v2229)
                  {
                    ((void (*)(std::__shared_weak_count *))v2226->__on_zero_shared)(v2226);
                    std::__shared_weak_count::__release_weak(v2226);
                  }
                }
                else
                {
                  *(_QWORD *)&object[40] = v2223;
                }
                v2230 = (std::__shared_weak_count *)v2547;
                if (v2547)
                {
                  v2231 = (unint64_t *)(v2547 + 8);
                  do
                    v2232 = __ldaxr(v2231);
                  while (__stlxr(v2232 - 1, v2231));
                  if (!v2232)
                  {
                    ((void (*)(std::__shared_weak_count *))v2230->__on_zero_shared)(v2230);
                    std::__shared_weak_count::__release_weak(v2230);
                  }
                }
                v2233 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                  v2234 = *(_QWORD *)&object[40] + 8;
                else
                  v2234 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                v2235 = _os_log_pack_fill();
                *(_DWORD *)v2235 = 136315138;
                *(_QWORD *)(v2235 + 4) = v2234;
                v2236 = (char *)operator new();
                v2237 = *(unsigned __int8 *)(v2191 + 39);
                v2238 = v2515;
                if ((v2237 & 0x80u) != 0)
                {
                  v2238 = *(_QWORD *)(v2191 + 16);
                  v2237 = *(_QWORD *)(v2191 + 24);
                }
                *(_QWORD *)v2236 = v2233;
                *(_OWORD *)(v2236 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v2236 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *((_QWORD *)v2236 + 5) = v2238;
                *((_QWORD *)v2236 + 6) = v2237;
                v2236[56] = 1;
                *(_QWORD *)v2582 = 0;
                v2546[0] = v2236;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2173 + 24) + 40))(*(_QWORD *)(v2173 + 24), v2546);
                v2239 = v2546[0];
                v2546[0] = 0;
                v2213 = __sm;
                if (v2239)
                {
                  v2240 = (std::__shared_weak_count *)*((_QWORD *)v2239 + 4);
                  if (v2240)
                  {
                    v2241 = (unint64_t *)&v2240->__shared_owners_;
                    do
                      v2242 = __ldaxr(v2241);
                    while (__stlxr(v2242 - 1, v2241));
                    if (!v2242)
                    {
                      ((void (*)(std::__shared_weak_count *))v2240->__on_zero_shared)(v2240);
                      std::__shared_weak_count::__release_weak(v2240);
                    }
                  }
                  v2243 = (std::__shared_weak_count *)*((_QWORD *)v2239 + 2);
                  if (v2243)
                  {
                    v2244 = (unint64_t *)&v2243->__shared_owners_;
                    do
                      v2245 = __ldaxr(v2244);
                    while (__stlxr(v2245 - 1, v2244));
                    if (!v2245)
                    {
                      ((void (*)(std::__shared_weak_count *))v2243->__on_zero_shared)(v2243);
                      std::__shared_weak_count::__release_weak(v2243);
                    }
                  }
                  MEMORY[0x212BC6398](v2239, 0x10F0C40B62ED6C6);
                  v2246 = *(_QWORD *)v2582;
                  *(_QWORD *)v2582 = 0;
                  if (v2246)
                  {
                    v2247 = *(std::__shared_weak_count **)(v2246 + 32);
                    if (v2247)
                    {
                      v2248 = (unint64_t *)&v2247->__shared_owners_;
                      do
                        v2249 = __ldaxr(v2248);
                      while (__stlxr(v2249 - 1, v2248));
                      if (!v2249)
                      {
                        ((void (*)(std::__shared_weak_count *))v2247->__on_zero_shared)(v2247);
                        std::__shared_weak_count::__release_weak(v2247);
                      }
                    }
                    v2250 = *(std::__shared_weak_count **)(v2246 + 16);
                    if (v2250)
                    {
                      v2251 = (unint64_t *)&v2250->__shared_owners_;
                      do
                        v2252 = __ldaxr(v2251);
                      while (__stlxr(v2252 - 1, v2251));
                      if (!v2252)
                      {
                        ((void (*)(std::__shared_weak_count *))v2250->__on_zero_shared)(v2250);
                        std::__shared_weak_count::__release_weak(v2250);
                      }
                    }
                    MEMORY[0x212BC6398](v2246, 0x10F0C40B62ED6C6);
                  }
                }
                v2253 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v2254 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v2255 = __ldaxr(v2254);
                  while (__stlxr(v2255 - 1, v2254));
                  if (!v2255)
                  {
                    ((void (*)(std::__shared_weak_count *))v2253->__on_zero_shared)(v2253);
                    std::__shared_weak_count::__release_weak(v2253);
                    v2256 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                      goto LABEL_2592;
                    goto LABEL_2595;
                  }
                }
                v2256 = *(std::__shared_weak_count **)&object[16];
                if (!*(_QWORD *)&object[16])
                  goto LABEL_2595;
LABEL_2592:
                v2257 = (unint64_t *)&v2256->__shared_owners_;
                do
                  v2258 = __ldaxr(v2257);
                while (__stlxr(v2258 - 1, v2257));
                if (v2258)
                {
LABEL_2595:
                  if (v2213)
                    goto LABEL_2596;
LABEL_2599:
                  sub_20E863570((uint64_t)v2536);
                  v2260 = v2542;
                  if (!v2542)
                    goto LABEL_2603;
                  v2261 = (unint64_t *)&v2542->__shared_owners_;
                  do
                    v2262 = __ldaxr(v2261);
                  while (__stlxr(v2262 - 1, v2261));
                  if (!v2262)
                  {
                    ((void (*)(std::__shared_weak_count *))v2260->__on_zero_shared)(v2260);
                    std::__shared_weak_count::__release_weak(v2260);
                    if (SHIBYTE(v2545) < 0)
LABEL_2604:
                      operator delete(__dst);
                  }
                  else
                  {
LABEL_2603:
                    if (SHIBYTE(v2545) < 0)
                      goto LABEL_2604;
                  }
                  oslog[0] = v2489;
                  *(os_log_t *)((char *)oslog + (unint64_t)v2489[-3].isa) = v2486;
                  oslog[2] = v2483;
                  oslog[3] = v2480;
                  if ((v2552[15] & 0x80000000) != 0)
                    operator delete(oslog[11]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v2552[32]);
                  goto LABEL_2472;
                }
                ((void (*)(std::__shared_weak_count *))v2256->__on_zero_shared)(v2256);
                std::__shared_weak_count::__release_weak(v2256);
                if (!__sm)
                  goto LABEL_2599;
              }
              else
              {
                os_log_type_enabled(v2203, OS_LOG_TYPE_INFO);
                *(_DWORD *)object = 136315138;
                *(_QWORD *)&object[4] = v2190;
                v2212 = (void *)_os_log_send_and_compose_impl();
                v2213 = __sm;
                if (!v2212)
                  goto LABEL_2595;
                free(v2212);
                if (!__sm)
                  goto LABEL_2599;
              }
LABEL_2596:
              v2259 = (const char *)&__dst;
              if (v2545 < 0)
                v2259 = __dst;
              sub_20E8C003C((uint64_t)v2536, "%s", v2259);
              sub_20E863570((uint64_t)v2536);
              goto LABEL_2599;
            }
          }
          memmove(v2199, v2197, v2198);
          goto LABEL_2510;
        }
      }
      memmove(v2184, v2187, v2183);
      goto LABEL_2489;
    }
  }
LABEL_2618:
  kdebug_trace();
  kdebug_trace();
  if (*(_DWORD *)(a2 + 2472) != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3289, (uint64_t)"estimate_.bundle.landmark_parametrization() == LandmarkParameterization::RegularDepth", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F82FD50(v2582);
  if (**(int **)(*(_QWORD *)v2582 + 56) > 2)
    goto LABEL_2711;
  v2263 = *(unsigned __int8 *)(*(_QWORD *)v2582 + 72);
  v2264 = sub_20E8C31DC(*(uint64_t *)v2582, "OSLogSurrogateAppender", 1, 0);
  v2265 = v2264;
  if (!v2263 && !v2264)
    goto LABEL_2711;
  *(_QWORD *)object = v2582;
  *(std::chrono::steady_clock::time_point *)&object[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&object[16] = std::chrono::system_clock::now();
  *(_DWORD *)&object[24] = 2;
  *(_QWORD *)&object[32] = "unknown file";
  *(_DWORD *)&object[40] = 3291;
  v2576.f64[0] = 0.0;
  *(_QWORD *)&v2575 = "unknown function";
  *((_QWORD *)&v2575 + 1) = 0;
  v2266 = **(_QWORD **)object;
  v2267 = **(_QWORD **)object + 16;
  if (*(char *)(**(_QWORD **)object + 39) < 0)
  {
    v2269 = *(const char **)(v2266 + 16);
    v2268 = *(_QWORD *)(v2266 + 24);
    v2271 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v2271 & 1) == 0)
    {
LABEL_3018:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)oslog);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
        if (LOBYTE(oslog[3]) && SHIBYTE(oslog[2]) < 0)
          operator delete(oslog[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v2268 = *(unsigned __int8 *)(**(_QWORD **)object + 39);
    v2269 = (const char *)(**(_QWORD **)object + 16);
    v2270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v2270 & 1) == 0)
      goto LABEL_3018;
  }
  if (byte_254A4A4F8[23] >= 0)
    v2272 = byte_254A4A4F8;
  else
    v2272 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v2273 = byte_254A4A4F8[23];
  else
    v2273 = *(_QWORD *)&byte_254A4A4F8[8];
  oslog[0] = os_log_create(v2272, v2269);
  v2274 = &oslog[1];
  if (v2273 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v2273 >= 0x17)
  {
    v2275 = (v2273 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2273 | 7) != 0x17)
      v2275 = v2273 | 7;
    v2276 = v2275 + 1;
    v2274 = operator new(v2275 + 1);
    oslog[3] = (os_log_t)(v2276 | 0x8000000000000000);
    oslog[1] = v2274;
    oslog[2] = (os_log_t)v2273;
    goto LABEL_2640;
  }
  HIBYTE(oslog[3]) = v2273;
  if (v2273)
LABEL_2640:
    memmove(v2274, v2272, v2273);
  *((_BYTE *)&v2274->isa + v2273) = 0;
  LOBYTE(oslog[4]) = 1;
  v2277 = &oslog[5];
  if (v2268 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v2268 >= 0x17)
  {
    v2279 = (v2268 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2268 | 7) != 0x17)
      v2279 = v2268 | 7;
    v2280 = v2279 + 1;
    v2277 = operator new(v2279 + 1);
    oslog[7] = (os_log_t)(v2280 | 0x8000000000000000);
    oslog[5] = v2277;
    oslog[6] = (os_log_t)v2268;
  }
  else
  {
    HIBYTE(oslog[7]) = v2268;
    if (!v2268)
    {
      LOBYTE(oslog[5]) = 0;
      LOBYTE(oslog[8]) = 1;
      v2278 = oslog[0];
      if ((SHIBYTE(oslog[7]) & 0x80000000) == 0)
        goto LABEL_2645;
LABEL_2651:
      operator delete(oslog[5]);
      if (LOBYTE(oslog[4]))
        goto LABEL_2652;
      goto LABEL_2654;
    }
  }
  memmove(v2277, v2269, v2268);
  *((_BYTE *)&v2277->isa + v2268) = 0;
  LOBYTE(oslog[8]) = 1;
  v2278 = oslog[0];
  if (SHIBYTE(oslog[7]) < 0)
    goto LABEL_2651;
LABEL_2645:
  if (LOBYTE(oslog[4]))
  {
LABEL_2652:
    if (SHIBYTE(oslog[3]) < 0)
      operator delete(oslog[1]);
  }
LABEL_2654:
  if (oslog[0])
    os_release(oslog[0]);
  if (v2265 && *(_QWORD *)(v2265 + 24))
  {
    v2281 = _os_log_pack_size();
    v2282 = operator new(v2281, (std::align_val_t)8uLL);
    v2283 = operator new();
    v2284 = (std::__shared_weak_count *)v2283;
    v2283[1].isa = 0;
    v2285 = (unint64_t *)&v2283[1];
    v2283->isa = (Class)&off_24C9ABB80;
    v2283[2].isa = 0;
    v2283[3].isa = (Class)v2282;
    oslog[0] = v2282;
    oslog[1] = v2282;
    oslog[2] = v2283;
    do
      v2286 = __ldxr(v2285);
    while (__stxr(v2286 + 1, v2285));
    memset(&oslog[3], 0, 24);
    do
      v2287 = __ldaxr(v2285);
    while (__stlxr(v2287 - 1, v2285));
    if (!v2287)
    {
      (*((void (**))v2283->isa + 2))(v2283);
      std::__shared_weak_count::__release_weak(v2284);
    }
    v2288 = oslog[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v2289 = (char *)operator new();
    v2290 = *(unsigned __int8 *)(v2266 + 39);
    if ((v2290 & 0x80u) == 0)
      v2291 = v2267;
    else
      v2291 = *(_QWORD *)(v2266 + 16);
    if ((v2290 & 0x80u) != 0)
      v2290 = *(_QWORD *)(v2266 + 24);
    *(_QWORD *)v2289 = v2288;
    *(_OWORD *)(v2289 + 8) = *(_OWORD *)&oslog[1];
    oslog[1] = 0;
    oslog[2] = 0;
    *(_OWORD *)(v2289 + 24) = *(_OWORD *)&oslog[3];
    oslog[3] = 0;
    oslog[4] = 0;
    *((_QWORD *)v2289 + 5) = v2291;
    *((_QWORD *)v2289 + 6) = v2290;
    v2289[56] = 2;
    v2546[0] = 0;
    v2536[0] = v2289;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2265 + 24) + 40))(*(_QWORD *)(v2265 + 24), v2536);
    v2292 = v2536[0];
    v2536[0] = 0;
    if (v2292)
    {
      v2293 = (std::__shared_weak_count *)*((_QWORD *)v2292 + 4);
      if (v2293)
      {
        v2294 = (unint64_t *)&v2293->__shared_owners_;
        do
          v2295 = __ldaxr(v2294);
        while (__stlxr(v2295 - 1, v2294));
        if (!v2295)
        {
          ((void (*)(std::__shared_weak_count *))v2293->__on_zero_shared)(v2293);
          std::__shared_weak_count::__release_weak(v2293);
        }
      }
      v2296 = (std::__shared_weak_count *)*((_QWORD *)v2292 + 2);
      if (v2296)
      {
        v2297 = (unint64_t *)&v2296->__shared_owners_;
        do
          v2298 = __ldaxr(v2297);
        while (__stlxr(v2298 - 1, v2297));
        if (!v2298)
        {
          ((void (*)(std::__shared_weak_count *))v2296->__on_zero_shared)(v2296);
          std::__shared_weak_count::__release_weak(v2296);
        }
      }
      MEMORY[0x212BC6398](v2292, 0x10F0C40B62ED6C6);
      v2299 = v2546[0];
      v2546[0] = 0;
      if (v2299)
      {
        v2300 = (std::__shared_weak_count *)*((_QWORD *)v2299 + 4);
        if (v2300)
        {
          v2301 = (unint64_t *)&v2300->__shared_owners_;
          do
            v2302 = __ldaxr(v2301);
          while (__stlxr(v2302 - 1, v2301));
          if (!v2302)
          {
            ((void (*)(std::__shared_weak_count *))v2300->__on_zero_shared)(v2300);
            std::__shared_weak_count::__release_weak(v2300);
          }
        }
        v2303 = (std::__shared_weak_count *)*((_QWORD *)v2299 + 2);
        if (v2303)
        {
          v2304 = (unint64_t *)&v2303->__shared_owners_;
          do
            v2305 = __ldaxr(v2304);
          while (__stlxr(v2305 - 1, v2304));
          if (!v2305)
          {
            ((void (*)(std::__shared_weak_count *))v2303->__on_zero_shared)(v2303);
            std::__shared_weak_count::__release_weak(v2303);
          }
        }
        MEMORY[0x212BC6398](v2299, 0x10F0C40B62ED6C6);
      }
    }
    v2306 = (std::__shared_weak_count *)oslog[4];
    if (oslog[4])
    {
      v2307 = (unint64_t *)&oslog[4][1];
      do
        v2308 = __ldaxr(v2307);
      while (__stlxr(v2308 - 1, v2307));
      if (!v2308)
      {
        ((void (*)(std::__shared_weak_count *))v2306->__on_zero_shared)(v2306);
        std::__shared_weak_count::__release_weak(v2306);
      }
    }
    v2309 = (std::__shared_weak_count *)oslog[2];
    if (oslog[2])
    {
      v2310 = (unint64_t *)&oslog[2][1];
      do
        v2311 = __ldaxr(v2310);
      while (__stlxr(v2311 - 1, v2310));
      if (!v2311)
      {
        ((void (*)(std::__shared_weak_count *))v2309->__on_zero_shared)(v2309);
        std::__shared_weak_count::__release_weak(v2309);
      }
    }
  }
  else
  {
    os_log_type_enabled(v2278, OS_LOG_TYPE_DEBUG);
    LOWORD(oslog[0]) = 0;
    v2312 = (void *)_os_log_send_and_compose_impl();
    if (v2312)
      free(v2312);
  }
  if (v2263)
  {
    sub_20E8C003C((uint64_t)object, "Removing outliers after update...");
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v2313 = *(std::__shared_weak_count **)&v2576.f64[0];
  if (*(_QWORD *)&v2576.f64[0])
  {
    v2314 = (unint64_t *)(*(_QWORD *)&v2576.f64[0] + 8);
    do
      v2315 = __ldaxr(v2314);
    while (__stlxr(v2315 - 1, v2314));
    if (!v2315)
    {
      ((void (*)(std::__shared_weak_count *))v2313->__on_zero_shared)(v2313);
      std::__shared_weak_count::__release_weak(v2313);
    }
  }
LABEL_2711:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)v2536 = 0u;
  *(_OWORD *)v2537 = 0u;
  LODWORD(v2538) = 1065353216;
  v2316 = *(_BYTE **)(a2 + 8216);
  v2535[0] = a2;
  v2535[1] = a1;
  v2535[2] = v2536;
  v2535[3] = a3;
  if (*v2316)
    sub_20FBCF190((uint64_t)v2535);
  else
    sub_20FBD20B4((uint64_t)v2535);
  __sn = *(_QWORD **)(a2 + 7952);
  v2317 = *(_QWORD **)(*__sn + 48);
  v2318 = *__sn + 56;
  if (v2317 != (_QWORD *)v2318)
  {
    v2319 = 0;
    do
    {
      if ((v2317[4] || *(_DWORD *)(*v2498 + 4 * v2319) != *((_DWORD *)v2317 + 10))
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 109, (uint64_t)"(typename VIOStateSetContainerType::key_type{ util::kFrontEndSession, static_cast<uint32_t>(frameIDs[frameIndex])} == stateIter.first)", 134, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_2942:
        abort();
      }
      v2320 = v2317[6];
      v2321 = *(_QWORD *)(v2320 + 16);
      v2322 = *(_QWORD *)(v2320 + 40);
      v2323 = *(_OWORD *)(v2320 + 24);
      v2324 = *(double *)(v2320 + 64);
      v2325 = *(_OWORD *)(v2320 + 48);
      *(_OWORD *)object = *(_OWORD *)v2320;
      *(_OWORD *)&object[24] = v2323;
      *(_QWORD *)&object[16] = v2321;
      *(_QWORD *)&object[40] = v2322;
      v2575 = v2325;
      v2576.f64[0] = v2324;
      sub_20F1B6B0C((float64x2_t *)object);
      *(_OWORD *)&oslog[4] = *(_OWORD *)&object[32];
      *(_OWORD *)&oslog[6] = v2575;
      oslog[8] = *(os_log_t *)&v2576.f64[0];
      *(_OWORD *)oslog = *(_OWORD *)object;
      *(_OWORD *)&oslog[2] = *(_OWORD *)&object[16];
      v2553 = *(_OWORD *)(v2320 + 72);
      v2554 = *(_QWORD *)(v2320 + 88);
      *(_OWORD *)v2552 = *(_OWORD *)(v2320 + 96);
      *(_QWORD *)&v2552[16] = *(_QWORD *)(v2320 + 112);
      *(_OWORD *)&oslog[9] = *(_OWORD *)(v2320 + 120);
      oslog[11] = *(os_log_t *)(v2320 + 136);
      *(_QWORD *)&v2552[40] = *(_QWORD *)(v2320 + 160);
      *(_OWORD *)&v2552[24] = *(_OWORD *)(v2320 + 144);
      v2326 = *v2499 + 168 * v2319;
      *(_QWORD *)(v2326 + 160) = v2554;
      *(_OWORD *)(v2326 + 144) = v2553;
      *(_OWORD *)(v2326 + 128) = *(_OWORD *)&v2552[32];
      *(_OWORD *)(v2326 + 112) = *(_OWORD *)&v2552[16];
      *(_OWORD *)(v2326 + 96) = *(_OWORD *)v2552;
      *(_OWORD *)(v2326 + 80) = *(_OWORD *)&oslog[10];
      *(_OWORD *)(v2326 + 64) = *(_OWORD *)&oslog[8];
      *(_OWORD *)(v2326 + 48) = *(_OWORD *)&oslog[6];
      *(_OWORD *)(v2326 + 32) = *(_OWORD *)&oslog[4];
      *(_OWORD *)(v2326 + 16) = *(_OWORD *)&oslog[2];
      *(_OWORD *)v2326 = *(_OWORD *)oslog;
      v2327 = (_QWORD *)v2317[1];
      if (v2327)
      {
        do
        {
          v2328 = v2327;
          v2327 = (_QWORD *)*v2327;
        }
        while (v2327);
      }
      else
      {
        do
        {
          v2328 = (_QWORD *)v2317[2];
          _ZF = *v2328 == (_QWORD)v2317;
          v2317 = v2328;
        }
        while (!_ZF);
      }
      ++v2319;
      v2317 = v2328;
    }
    while (v2328 != (_QWORD *)v2318);
  }
  v2329 = *(_QWORD *)(a2 + 2584) - *(_QWORD *)(a2 + 2576);
  if (v2329)
  {
    v2330 = 0;
    v2331 = v2329 >> 2;
    v2332 = (uint64_t *)__sn[2];
    if (v2331 <= 1)
      v2333 = 1;
    else
      v2333 = v2331;
    do
    {
      while (1)
      {
        v2339 = 0;
        v2344 = *(unsigned int *)(*v2503 + 4 * v2330);
        _X10 = *v2332;
        __asm { PRFM            #4, [X10] }
        v2347 = v2332[3];
        for (i26 = (((0x9DDFEA08EB382D69 * v2344 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v2344
                                                                              + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
              ;
              i26 = v2339 + v2334)
        {
          v2334 = i26 & v2347;
          v2335 = *(_QWORD *)(_X10 + v2334);
          v2348 = 0x101010101010101
                * (((105 * v2344 - 27) ^ ((0x9DDFEA08EB382D69 * v2344
                                                                           + 0x376ADF16980614E5) >> 32)) & 0x7F);
          v2336 = ((v2335 ^ v2348) - 0x101010101010101) & ~(v2335 ^ v2348) & 0x8080808080808080;
          if (v2336)
            break;
LABEL_2736:
          if ((v2335 & (~v2335 << 6) & 0x8080808080808080) != 0)
            goto LABEL_2741;
          v2339 += 8;
        }
        while (1)
        {
          v2337 = v2332[1] + 32 * ((v2334 + (__clz(__rbit64(v2336)) >> 3)) & v2347);
          if (!*(_QWORD *)v2337 && *(_DWORD *)(v2337 + 8) == (_DWORD)v2344)
            break;
          v2336 &= v2336 - 1;
          if (!v2336)
            goto LABEL_2736;
        }
        if (_X10)
          break;
LABEL_2741:
        v2343 = (_OWORD *)(*(_QWORD *)(a2 + 2328) + 32 * v2330);
        *v2343 = xmmword_2103B9F58;
        v2343[1] = unk_2103B9F68;
        if (++v2330 == v2333)
          goto LABEL_2746;
      }
      v2341 = *(_QWORD *)(v2337 + 16);
      if (*(_BYTE *)(v2341 + 488))
      {
        v2342 = v2341 + 48;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 135, (uint64_t)"point_track_structure", 21, (uint64_t)"Point track missing structure.", 30, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2942;
        }
        v2342 = 8;
      }
      v2349 = *(_QWORD *)(v2342 + 16);
      v2350 = *(_QWORD *)(a2 + 2328) + 32 * v2330;
      *(_OWORD *)v2350 = *(_OWORD *)v2342;
      *(_QWORD *)(v2350 + 16) = v2349;
      *(_QWORD *)(v2350 + 24) = 0x3FF0000000000000;
      ++v2330;
    }
    while (v2330 != v2333);
  }
LABEL_2746:
  v2351 = *(_QWORD *)(a2 + 2608) - *(_QWORD *)(a2 + 2600);
  if (v2351)
  {
    v2352 = 0;
    v2353 = v2351 >> 2;
    v2354 = (uint64_t *)__sn[3];
    if (v2353 <= 1)
      v2355 = 1;
    else
      v2355 = v2353;
    do
    {
      while (1)
      {
        v2361 = 0;
        v2370 = *(unsigned int *)(*v2500 + 4 * v2352);
        _X10 = *v2354;
        __asm { PRFM            #4, [X10] }
        v2373 = v2354[3];
        for (i27 = (((0x9DDFEA08EB382D69 * v2370 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v2370
                                                                              + 0x376ADF16980614E5) >> 32)) >> 7) ^ 0x13701D;
              ;
              i27 = v2361 + v2356)
        {
          v2356 = i27 & v2373;
          v2357 = *(_QWORD *)(_X10 + v2356);
          v2374 = 0x101010101010101
                * (((105 * v2370 - 27) ^ ((0x9DDFEA08EB382D69 * v2370
                                                                           + 0x376ADF16980614E5) >> 32)) & 0x7F);
          v2358 = ((v2357 ^ v2374) - 0x101010101010101) & ~(v2357 ^ v2374) & 0x8080808080808080;
          if (v2358)
            break;
LABEL_2756:
          if ((v2357 & (~v2357 << 6) & 0x8080808080808080) != 0)
            goto LABEL_2764;
          v2361 += 8;
        }
        while (1)
        {
          v2359 = v2354[1] + 32 * ((v2356 + (__clz(__rbit64(v2358)) >> 3)) & v2373);
          if (!*(_QWORD *)v2359 && *(_DWORD *)(v2359 + 8) == (_DWORD)v2370)
            break;
          v2358 &= v2358 - 1;
          if (!v2358)
            goto LABEL_2756;
        }
        if (_X10)
          break;
LABEL_2764:
        v2368 = (_OWORD *)(*(_QWORD *)(a2 + 2352) + (v2352 << 6));
        *v2368 = xmmword_2103B9F58;
        v2368[1] = unk_2103B9F68;
        v2369 = *(_QWORD *)(a2 + 2352) + (v2352 << 6);
        *(_OWORD *)(v2369 + 32) = xmmword_2103B9F58;
        *(_OWORD *)(v2369 + 48) = unk_2103B9F68;
        if (++v2352 == v2355)
          goto LABEL_2766;
      }
      v2363 = *(_QWORD *)(v2359 + 16);
      if (!*(_BYTE *)(v2363 + 968))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 163, (uint64_t)"line_track->getStructure()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_2942;
        }
        v2363 = *(_QWORD *)(v2359 + 16);
      }
      v2364 = *(_QWORD *)(v2363 + 64);
      v2365 = *(_QWORD *)(a2 + 2352) + (v2352 << 6);
      *(_OWORD *)v2365 = *(_OWORD *)(v2363 + 48);
      *(_QWORD *)(v2365 + 16) = v2364;
      *(_QWORD *)(v2365 + 24) = 0x3FF0000000000000;
      v2366 = *(_QWORD *)(v2363 + 512);
      v2367 = *(_QWORD *)(a2 + 2352) + (v2352 << 6);
      *(_OWORD *)(v2367 + 32) = *(_OWORD *)(v2363 + 496);
      *(_QWORD *)(v2367 + 48) = v2366;
      *(_QWORD *)(v2367 + 56) = 0x3FF0000000000000;
      ++v2352;
    }
    while (v2352 != v2355);
  }
LABEL_2766:
  v2375 = a2;
  v2376 = *(_OWORD **)(*(_QWORD *)(a2 + 7952) + 64);
  v2377 = *(_OWORD *)(a2 + 16);
  *v2376 = *(_OWORD *)a2;
  v2376[1] = v2377;
  if (*(_BYTE *)(a2 + 1934))
  {
    v2378 = *(__int128 **)(*(_QWORD *)(a2 + 7952) + 64);
    if (v2378)
    {
      v2379 = *v2378;
      *(_OWORD *)(a2 + 4768) = v2378[1];
      *(_OWORD *)(a2 + 4752) = v2379;
      v2380 = v2378[2];
      *(_QWORD *)(a2 + 4800) = *((_QWORD *)v2378 + 6);
      *(_OWORD *)(a2 + 4784) = v2380;
      *(_QWORD *)(a2 + 4808) = *((_QWORD *)v2378 + 7);
      v2381 = v2378[4];
      *(_QWORD *)(a2 + 4832) = *((_QWORD *)v2378 + 10);
      *(_OWORD *)(a2 + 4816) = v2381;
      v2382 = *(__int128 *)((char *)v2378 + 88);
      *(_QWORD *)(a2 + 4856) = *((_QWORD *)v2378 + 13);
      *(_OWORD *)(a2 + 4840) = v2382;
      v2383 = v2378[7];
      *(_QWORD *)(a2 + 4880) = *((_QWORD *)v2378 + 16);
      *(_OWORD *)(a2 + 4864) = v2383;
      v2384 = *(__int128 *)((char *)v2378 + 136);
      *(_QWORD *)(a2 + 4904) = *((_QWORD *)v2378 + 19);
      *(_OWORD *)(a2 + 4888) = v2384;
      v2386 = v2378[12];
      v2385 = v2378[13];
      v2387 = *((_QWORD *)v2378 + 28);
      *(_OWORD *)(a2 + 4928) = v2378[11];
      *(_QWORD *)(a2 + 4976) = v2387;
      *(_OWORD *)(a2 + 4960) = v2385;
      *(_OWORD *)(a2 + 4944) = v2386;
      *(_OWORD *)(a2 + 4912) = v2378[10];
      v2388 = *(__int128 *)((char *)v2378 + 264);
      v2389 = *(__int128 *)((char *)v2378 + 280);
      v2390 = *((_QWORD *)v2378 + 37);
      *(_OWORD *)(a2 + 5000) = *(__int128 *)((char *)v2378 + 248);
      *(_QWORD *)(a2 + 5048) = v2390;
      *(_OWORD *)(a2 + 5016) = v2388;
      *(_OWORD *)(a2 + 5032) = v2389;
      *(_OWORD *)(a2 + 4984) = *(__int128 *)((char *)v2378 + 232);
    }
  }
  v2391 = *(_QWORD *)(a2 + 12448);
  if (v2391)
  {
    sub_20F802A68(*(unsigned __int8 *)(a2 + 7688), (double *)(a2 + 4864), (double *)(a2 + 4888), (double *)(a2 + 4816), (double *)(a2 + 4840), v2391);
    v2392 = *(_QWORD *)(a2 + 11808);
    v2393 = *(_QWORD *)(v2392 + 48) - *(_QWORD *)(v2392 + 40);
    if ((v2393 >> 1) + (v2393 >> 3) <= (unint64_t)*(unsigned int *)(v2392 + 8))
    {
      v2395 = *(_QWORD *)(v2392 + 80);
      v2396 = 0.0;
      if (v2395 >= 2)
      {
        v2396 = 1.0 / (double)v2395 * *(double *)(v2392 + 136)
              - 1.0 / (double)v2395 * *(double *)(v2392 + 128) * (1.0 / (double)v2395 * *(double *)(v2392 + 128));
        if (v2396 < 0.0)
          v2396 = 0.0;
      }
      v2394 = v2396 <= *(double *)(*(_QWORD *)v2392 + 8) * *(double *)(*(_QWORD *)v2392 + 8);
    }
    else
    {
      v2394 = 0;
    }
    v2397 = *(_QWORD *)(v2392 + 184) - *(_QWORD *)(v2392 + 176);
    if ((v2397 >> 1) + (v2397 >> 3) <= (unint64_t)*(unsigned int *)(v2392 + 12))
    {
      v2399 = *(_QWORD *)(v2392 + 216);
      v2400 = 0.0;
      if (v2399 >= 2)
      {
        v2400 = 1.0 / (double)v2399 * *(double *)(v2392 + 272)
              - 1.0 / (double)v2399 * *(double *)(v2392 + 264) * (1.0 / (double)v2399 * *(double *)(v2392 + 264));
        if (v2400 < 0.0)
          v2400 = 0.0;
      }
      v2398 = v2400 <= *(double *)(*(_QWORD *)v2392 + 8) * *(double *)(*(_QWORD *)v2392 + 8);
    }
    else
    {
      v2398 = 0;
    }
    v2401 = *(_QWORD *)(v2392 + 320) - *(_QWORD *)(v2392 + 312);
    if ((v2401 >> 1) + (v2401 >> 3) > (unint64_t)*(unsigned int *)(v2392 + 16))
    {
      v2402 = 0;
      v2403 = *(_QWORD *)(a2 + 12448);
      goto LABEL_2791;
    }
    v2404 = *(_QWORD *)(v2392 + 352);
    if (v2404 <= 1)
    {
      v2403 = *(_QWORD *)(a2 + 12448);
      goto LABEL_2789;
    }
    v2405 = 1.0 / (double)v2404 * *(double *)(v2392 + 408)
          - 1.0 / (double)v2404 * *(double *)(v2392 + 400) * (1.0 / (double)v2404 * *(double *)(v2392 + 400));
    if (v2405 < 0.0)
      v2405 = 0.0;
    v2403 = *(_QWORD *)(a2 + 12448);
    if (v2405 > *(double *)(*(_QWORD *)v2392 + 8) * *(double *)(*(_QWORD *)v2392 + 8))
      v2402 = 0;
    else
LABEL_2789:
      v2402 = 0x10000;
LABEL_2791:
    _ZF = !v2398;
    v2406 = 256;
    if (_ZF)
      v2406 = 0;
    sub_20F803F6C((double *)(a2 + 4864), v2406 | v2394 | v2402, v2403);
    v2375 = a2;
    sub_20F801060((_QWORD *)(**(_QWORD **)(a2 + 7952) + 320), *(_QWORD *)(a2 + 12448));
    sub_20F7F7078((_QWORD *)(**(_QWORD **)(v2375 + 7952) + 296), *(_QWORD *)(v2375 + 12448));
  }
  if (*(_DWORD *)(v2375 + 5476))
    v2407 = 0;
  else
    v2407 = *(_DWORD *)(v2375 + 11800) + 1;
  *(_DWORD *)(v2375 + 11800) = v2407;
  LODWORD(oslog[0]) = 65793;
  BYTE4(oslog[0]) = 1;
  oslog[1] = (os_log_t)0xBFF0000000000000;
  bzero(&v2552[24], 0x8A8uLL);
  v2552[39] = 7;
  strcpy(&v2552[16], "NOT SET");
  HIBYTE(v2553) = 7;
  qmemcpy(&v2552[40], "NOT SET", 7);
  v2555 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v2556 = _Q0;
  v2558 = v2557;
  v2559 = 64;
  v2562 = v2561;
  v2563 = 64;
  v2564 = 0u;
  v2566 = v2565;
  v2567 = 64;
  v2568 = 0u;
  v2569 = 0;
  v2571 = v2570;
  v2572 = 64;
  v2573 = 0u;
  *(_OWORD *)(v2375 + 5312) = *(_OWORD *)oslog;
  v2409 = *(NSObject **)(v2375 + 5328);
  v2410 = *(NSObject **)(v2375 + 5336);
  *(_OWORD *)(v2375 + 5328) = 0u;
  oslog[2] = v2409;
  oslog[3] = v2410;
  *(_QWORD *)(v2375 + 5344) = 0;
  oslog[4] = 0;
  sub_20F8831E4(v2375 + 5424, (__int128 *)&v2552[16]);
  *(_QWORD *)(v2375 + 7672) = *((_QWORD *)&v2573 + 1);
  *(_QWORD *)&v2573 = 0;
  if (v2571 != v2570 && v2571)
    MEMORY[0x212BC6368](v2571, 0x1000C8000313F17);
  *(_QWORD *)&v2568 = 0;
  if (v2566 != v2565 && v2566)
    MEMORY[0x212BC6368](v2566, 0x1000C8000313F17);
  *(_QWORD *)&v2564 = 0;
  if (v2562 != v2561 && v2562)
    MEMORY[0x212BC6368](v2562, 0x1000C8000313F17);
  v2560 = 0;
  if (v2558 != v2557 && v2558)
    MEMORY[0x212BC6368](v2558, 0x1000C8000313F17);
  if ((SHIBYTE(v2553) & 0x80000000) == 0)
  {
    if ((v2552[39] & 0x80000000) == 0)
      goto LABEL_2812;
LABEL_2876:
    operator delete(*(void **)&v2552[16]);
    v2411 = oslog[2];
    if (!oslog[2])
      goto LABEL_2814;
LABEL_2813:
    MEMORY[0x212BC6368](v2411, 0x1000C8000313F17);
    goto LABEL_2814;
  }
  operator delete(*(void **)&v2552[40]);
  if ((v2552[39] & 0x80000000) != 0)
    goto LABEL_2876;
LABEL_2812:
  v2411 = oslog[2];
  if (oslog[2])
    goto LABEL_2813;
LABEL_2814:
  *(_DWORD *)(a2 + 2276) = 2;
  if (*(_BYTE *)(a2 + 1995)
    && !*(_BYTE *)(a2 + 11664)
    && *(_DWORD *)(a2 + 1936) == (uint64_t)(*(_QWORD *)(a2 + 2864) - *(_QWORD *)(a2 + 2856)) >> 2)
  {
    *(_OWORD *)v2546 = *(_OWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 7952) + 48) + 32);
    v2412 = *(_QWORD *)(a2 + 3056);
    v2504 = *(_QWORD *)(a2 + 3064);
    if (v2412 == v2504)
    {
      v2413 = 0;
    }
    else
    {
      v2413 = 0;
      do
      {
        if (*(_QWORD *)(v2412 + 16) != *(_QWORD *)(v2412 + 8))
        {
          LODWORD(v2414) = 0;
          *(_OWORD *)__so = *(_OWORD *)v2546;
          do
          {
            v2416 = *(_DWORD *)v2412;
            if (*(_DWORD *)v2412 >= 0x10000u)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v2417 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2417 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v2419 = qword_254A6DE40;
                for (i28 = qword_254A6DE48; v2419 != i28; v2419 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v2419)(*(_QWORD *)(v2419 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v2420 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2420 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_2942;
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (v2414 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v2421 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2421 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v2423 = qword_254A6DE40;
                for (i29 = qword_254A6DE48; v2423 != i29; v2423 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v2423)(*(_QWORD *)(v2423 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v2424 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2424 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_2942;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            if (v2416 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v2425 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2425 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v2427 = qword_254A6DE40;
                for (i30 = qword_254A6DE48; v2427 != i30; v2427 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v2427)(*(_QWORD *)(v2427 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v2428 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2428 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_2942;
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (v2414 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v2429 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2429 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v2431 = qword_254A6DE40;
                for (i31 = qword_254A6DE48; v2431 != i31; v2431 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v2431)(*(_QWORD *)(v2431 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v2432 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v2432 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_2942;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v2415 = *(_QWORD *)(a2 + 392) + 24 * v2413;
            *(_OWORD *)v2415 = *(_OWORD *)__so;
            *(_DWORD *)(v2415 + 16) = (unsigned __int16)v2414 | ((unsigned __int16)v2416 << 16);
            ++v2413;
            v2414 = (v2414 + 1);
          }
          while (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2412 + 16) - *(_QWORD *)(v2412 + 8)) >> 7) > v2414);
        }
        v2412 += 32;
      }
      while (v2412 != v2504);
    }
    *(_QWORD *)v2582 = *(_QWORD *)(a2 + 464);
    __dst = (char *)(*(_QWORD *)v2582 + 8 * (v2413 + 1));
    v2581[0] = *(_QWORD *)v2582;
    v2550 = (int **)__dst;
    *(_QWORD *)object = a2 + 416;
    *(_QWORD *)&object[8] = a2 + 440;
    *(_QWORD *)&object[16] = v2582;
    *(_QWORD *)&object[24] = &__dst;
    oslog[0] = (os_log_t)v2546;
    oslog[1] = (os_log_t)a2;
    oslog[2] = (os_log_t)v2582;
    oslog[3] = (os_log_t)v2581;
    oslog[4] = (os_log_t)&__dst;
    oslog[5] = (os_log_t)&v2550;
    oslog[6] = (os_log_t)object;
    oslog[7] = (os_log_t)(a2 + 392);
    if (*(_BYTE *)(a2 + 2000))
    {
      v2433 = *(uint64_t **)(a2 + 12400);
      for (i32 = *(uint64_t **)(a2 + 12408); v2433 != i32; ++v2433)
        sub_20F89DD80((uint64_t)oslog, *v2433);
    }
    else
    {
      v2435 = *(char ***)(*(_QWORD *)(a2 + 7952) + 16);
      v2436 = *v2435;
      v2437 = v2435[1];
      v2438 = **v2435;
      if (v2438 <= -2)
      {
        do
        {
          v2439 = (__clz(__rbit64(((*v2436 >> 7) & ~*v2436 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v2436 = (_QWORD *)((char *)v2436 + v2439);
          v2437 += 32 * v2439;
          v2438 = *(char *)v2436;
        }
        while (v2438 < -1);
      }
      while (v2438 != 255)
      {
        sub_20F89DD80((uint64_t)oslog, *((_QWORD *)v2437 + 2));
        v2440 = *((char *)v2436 + 1);
        v2436 = (_QWORD *)((char *)v2436 + 1);
        LOBYTE(v2438) = v2440;
        v2437 += 32;
        if (v2440 <= -2)
        {
          do
          {
            v2441 = (__clz(__rbit64(((*v2436 >> 7) & ~*v2436 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v2436 = (_QWORD *)((char *)v2436 + v2441);
            v2437 += 32 * v2441;
            v2438 = *(char *)v2436;
          }
          while (v2438 < -1);
        }
      }
    }
  }
  v2442 = **(_QWORD **)(a2 + 7952);
  v2445 = *(_QWORD **)(v2442 + 56);
  v2443 = (_QWORD *)(v2442 + 56);
  v2444 = v2445;
  if (v2445)
  {
    do
    {
      v2446 = v2444;
      v2444 = (_QWORD *)v2444[1];
    }
    while (v2444);
  }
  else
  {
    do
    {
      v2446 = (_QWORD *)v2443[2];
      _ZF = *v2446 == (_QWORD)v2443;
      v2443 = v2446;
    }
    while (_ZF);
  }
  v2447 = v2446[6];
  v2448 = *(double *)(v2447 + 16);
  v2449 = -v2448;
  if (fabs(fabs(v2448) + -1.0) >= 2.22044605e-16)
  {
    __sp = *(double *)(v2447 + 40);
    v2516 = *(double *)(v2447 + 64);
    atan2(*(long double *)vextq_s8(*(int8x16_t *)v2447, *(int8x16_t *)v2447, 8uLL).i64, *(long double *)v2447);
    atan2(__sp, v2516);
  }
  else
  {
    atan2(-(v2448 * *(double *)(v2447 + 24)), -(v2448 * *(double *)(v2447 + 48)));
  }
  asin(v2449);
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  if (!v2537[1])
    goto LABEL_2935;
  v2450 = a2;
  if (!*(_BYTE *)(a2 + 1581))
  {
    v2451 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 3814, (uint64_t)"config_.bundle_adjuster_config.enable_consistent_marginalization", 64, (uint64_t)"Consistent marginalization must be enabled to reach here.", 57, (void (*)(void **))sub_21023DDB0);
    v2450 = a2;
    if (v2451)
      abort();
  }
  v2452 = *(char ***)(*(_QWORD *)(v2450 + 7952) + 16);
  v2453 = *v2452;
  v2454 = (uint64_t)v2452[1];
  v2455 = **v2452;
  if (v2455 <= -2)
  {
    do
    {
      v2456 = (__clz(__rbit64(((*(_QWORD *)v2453 >> 7) & ~*(_QWORD *)v2453 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v2453 += v2456;
      v2454 += 32 * v2456;
      v2455 = *v2453;
    }
    while (v2455 < -1);
  }
  if (v2455 == 255)
    goto LABEL_2935;
  while (2)
  {
    if (!v2536[1])
      goto LABEL_2924;
    v2457 = *(_QWORD *)(v2454 + 16);
    v2458 = *(_QWORD *)(v2457 + 32);
    v2459 = (uint8x8_t)vcnt_s8((int8x8_t)v2536[1]);
    v2459.i16[0] = vaddlv_u8(v2459);
    if (v2459.u32[0] > 1uLL)
    {
      v2460 = *(_QWORD *)(v2457 + 32);
      if (v2536[1] <= (void *)v2458)
        v2460 = v2458 % (unint64_t)v2536[1];
    }
    else
    {
      v2460 = (LODWORD(v2536[1]) - 1) & v2458;
    }
    v2461 = (uint64_t **)*((_QWORD *)v2536[0] + v2460);
    if (!v2461 || (v2462 = *v2461) == 0)
    {
LABEL_2924:
      v2467 = v2453[1];
      v2465 = v2453 + 1;
      LOBYTE(v2466) = v2467;
      v2468 = v2454 + 32;
      if (v2467 <= -2)
      {
        do
        {
          v2469 = (__clz(__rbit64(((*(_QWORD *)v2465 >> 7) & ~*(_QWORD *)v2465 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v2465 += v2469;
          v2468 += 32 * v2469;
          v2466 = *v2465;
        }
        while (v2466 < -1);
      }
      v2470 = v2465;
      if (v2466 != 255)
        goto LABEL_2927;
      break;
    }
    if (v2459.u32[0] < 2uLL)
    {
      while (1)
      {
        v2464 = v2462[1];
        if (v2464 == v2458)
        {
          if (*((_DWORD *)v2462 + 4) == (_DWORD)v2458)
            goto LABEL_2923;
        }
        else if ((v2464 & ((uint64_t)v2536[1] - 1)) != v2460)
        {
          goto LABEL_2924;
        }
        v2462 = (uint64_t *)*v2462;
        if (!v2462)
          goto LABEL_2924;
      }
    }
    while (2)
    {
      v2463 = v2462[1];
      if (v2463 != v2458)
      {
        if ((void *)v2463 >= v2536[1])
          v2463 %= (unint64_t)v2536[1];
        if (v2463 != v2460)
          goto LABEL_2924;
        goto LABEL_2912;
      }
      if (*((_DWORD *)v2462 + 4) != (_DWORD)v2458)
      {
LABEL_2912:
        v2462 = (uint64_t *)*v2462;
        if (!v2462)
          goto LABEL_2924;
        continue;
      }
      break;
    }
LABEL_2923:
    if (*(_DWORD *)(v2457 + 520) == 2)
      goto LABEL_2924;
    v2471 = v2453 + 1;
    v2472 = v2453[1];
    v2468 = v2454 + 32;
    if (v2472 <= -2)
    {
      do
      {
        v2473 = (__clz(__rbit64(((*(_QWORD *)v2471 >> 7) & ~*(_QWORD *)v2471 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v2471 += v2473;
        v2468 += 32 * v2473;
        v2472 = *v2471;
      }
      while (v2472 < -1);
    }
    if (v2472 == 255)
      v2470 = 0;
    else
      v2470 = v2471;
    sub_20F887154(*(uint64_t **)(*(_QWORD *)(a2 + 7952) + 16), v2453, v2454);
LABEL_2927:
    v2453 = v2470;
    v2454 = v2468;
    if (v2470)
      continue;
    break;
  }
LABEL_2935:
  v2474 = v2537[0];
  if (v2537[0])
  {
    do
    {
      v2475 = (_QWORD *)*v2474;
      operator delete(v2474);
      v2474 = v2475;
    }
    while (v2475);
  }
  v2476 = v2536[0];
  v2536[0] = 0;
  if (v2476)
    operator delete(v2476);
}

void sub_20F869588(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x268]))
  {
    if (SLOBYTE(STACK[0x267]) < 0)
      operator delete((void *)STACK[0x250]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F8696F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_20E86E8C4(&a65);
  sub_20E86E8C4((uint64_t *)&STACK[0x220]);
  sub_20E86E658((uint64_t)&STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F869BB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    sub_20F86A7C4(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F869BC0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F869BD4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  unint64_t *v65;
  unint64_t v66;

  sub_20E863570(&a65);
  if (STACK[0x200])
  {
    v65 = (unint64_t *)(STACK[0x200] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    JUMPOUT(0x20F869E1CLL);
  }
  JUMPOUT(0x20F869E38);
}

void sub_20F869C10(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  unint64_t *v65;
  unint64_t v66;

  if (LOBYTE(STACK[0xBB0]) && SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (STACK[0xB90])
    os_release((void *)STACK[0xB90]);
  sub_20E863570((uint64_t)&a65);
  if (STACK[0x200])
  {
    v65 = (unint64_t *)(STACK[0x200] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    JUMPOUT(0x20F869E1CLL);
  }
  JUMPOUT(0x20F869E38);
}

void sub_20F869C70(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C78()
{
  JUMPOUT(0x20F86A22CLL);
}

void sub_20F869C80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C90(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869C98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869CA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869CA8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869CB0(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F869CC4(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F869CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869CE4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F869D10(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869D18(_Unwind_Exception *a1)
{
  void *v1;
  unint64_t v2;

  STACK[0x260] = v2;
  STACK[0x250] = (unint64_t)v1;
  if (v1)
  {
    STACK[0x258] = (unint64_t)v1;
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A7C8);
}

void sub_20F869D2C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F869D44(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x270]) && SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (STACK[0x250])
    os_release((void *)STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F869D78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;

  sub_20E863570(&a65);
  v65 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  JUMPOUT(0x20F86A4C4);
}

void sub_20F869D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (LOBYTE(STACK[0xBB0]) && SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (STACK[0xB90])
    os_release((void *)STACK[0xB90]);
  sub_20E863714((uint64_t)&a65);
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_20E863784((uint64_t)&STACK[0x250]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A77CLL);
}

void sub_20F869DC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;

  if (LOBYTE(STACK[0xBB0]) && SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (STACK[0xB90])
    os_release((void *)STACK[0xB90]);
  sub_20E863570((uint64_t)&a65);
  v65 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  JUMPOUT(0x20F86A4C4);
}

void sub_20F869E4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E64(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E6C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F869E8C(_Unwind_Exception *a1)
{
  void *v1;
  unint64_t v2;

  STACK[0x260] = v2;
  STACK[0x250] = (unint64_t)v1;
  if (v1)
  {
    STACK[0x258] = (unint64_t)v1;
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A7C8);
}

void sub_20F86A114(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A11C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A124(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A12C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A134(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A13C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A144(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20F82F358((uint64_t)&STACK[0x250]);
  sub_20E8C25A8((uint64_t)&a65);
  sub_20E8C3144(a33);
  _Unwind_Resume(a1);
}

void sub_20F86A174(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A17C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A184(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A18C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A194(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A1A8(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A1BC()
{
  JUMPOUT(0x20F86A22CLL);
}

void sub_20F86A1CC()
{
  int v0;
  void *v1;

  if (v0 < 0)
    operator delete(v1);
  sub_20E86E658(&STACK[0x220]);
  JUMPOUT(0x20F86A6D0);
}

void sub_20F86A1DC()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20F86A6D0);
}

void sub_20F86A1EC()
{
  JUMPOUT(0x20F86A22CLL);
}

void sub_20F86A1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;

  sub_20E86E8C4((uint64_t *)&STACK[0x220]);
  sub_20E86E8C4((uint64_t *)(v65 - 160));
  sub_20E86E658((uint64_t)&STACK[0xB90]);
  sub_20E863714((uint64_t)&a65);
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_20E863784((uint64_t)&STACK[0x250]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A77CLL);
}

void sub_20F86A21C()
{
  int v0;

  if (v0 < 0)
    JUMPOUT(0x20F86A228);
  JUMPOUT(0x20F86A22CLL);
}

void sub_20F86A238()
{
  JUMPOUT(0x20F86A240);
}

void sub_20F86A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  sub_20E86E8C4((uint64_t *)&STACK[0x220]);
  sub_20E86E8C4((uint64_t *)(v65 - 160));
  sub_20E86E658((uint64_t)&STACK[0x250]);
  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20E86E658((uint64_t)&STACK[0x250]);
  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20E86E658((uint64_t)&STACK[0x220]);
  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  MEMORY[0x212BC6398](v65, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A300(_Unwind_Exception *a1)
{
  sub_20E86E658((uint64_t)&STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20E86E658((uint64_t)&a65);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A3C8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_20E86E8C4(&a65);
  sub_20E86E8C4((uint64_t *)&STACK[0x220]);
  sub_20E86E658((uint64_t)&STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (STACK[0xB90])
    os_release((void *)STACK[0xB90]);
  sub_20E863714((uint64_t)&a65);
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_20E863784((uint64_t)&STACK[0x250]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A77CLL);
}

void sub_20F86A418()
{
  JUMPOUT(0x20F86A564);
}

void sub_20F86A420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  if (SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (STACK[0xB90])
    os_release((void *)STACK[0xB90]);
  sub_20E863714((uint64_t)&a65);
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    sub_20E863784((uint64_t)&STACK[0x250]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F86A77CLL);
}

void sub_20F86A430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (STACK[0x250])
    os_release((void *)STACK[0x250]);
  sub_20E863714((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20F86A43C()
{
  JUMPOUT(0x20F86A610);
}

void sub_20F86A444(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (STACK[0x250])
    os_release((void *)STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A454(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (STACK[0x250])
    os_release((void *)STACK[0x250]);
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A460()
{
  JUMPOUT(0x20F86A6A8);
}

void sub_20F86A46C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A474(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A47C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A484(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A48C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A494(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A4A8(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A538()
{
  JUMPOUT(0x20F86A564);
}

void sub_20F86A540()
{
  JUMPOUT(0x20F86A550);
}

void sub_20F86A574(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A57C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A584()
{
  JUMPOUT(0x20F86A594);
}

void sub_20F86A5C0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A5C8(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A5DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A5E4()
{
  JUMPOUT(0x20F86A610);
}

void sub_20F86A5EC()
{
  JUMPOUT(0x20F86A5FCLL);
}

void sub_20F86A620(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A628(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A630(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A638()
{
  JUMPOUT(0x20F86A648);
}

void sub_20F86A674(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A67C()
{
  JUMPOUT(0x20F86A6A8);
}

void sub_20F86A684()
{
  JUMPOUT(0x20F86A694);
}

void sub_20F86A6B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F86A7C4(a1);
  sub_20E860DA4(a1);
}

void sub_20F86A70C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xB90]);
  _Unwind_Resume(a1);
}

void sub_20F86A73C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A750(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A764(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_20F86A7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20E8C25A8((uint64_t)&a65);
  sub_20E8C3144(a33);
  _Unwind_Resume(a1);
}

void sub_20F86A7C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F86A7D0(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  float64x2_t v3;
  int8x16_t v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x16_t v7;
  float64x2_t v8;
  uint64_t v10;
  int v11;
  int64x2_t v12;
  double v13;
  uint64_t v14;
  float64_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float64x2_t v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  float64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  double v48;
  float64x2_t v49;
  double v50;
  double v57;
  double v58;
  float64x2_t v60;
  double v62;
  double v65;
  float64x2_t v66;
  double v68;
  float64x2_t v69;
  float64x2_t v71;
  uint64_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v105;
  uint64_t v106;
  uint64_t i;
  uint64_t v108;
  uint64_t v109;
  int64x2_t v110;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v120;
  int64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  uint64_t v125;
  uint64_t j;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  int8x16_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v143;
  uint64_t v144;
  double v146;
  uint64_t v148;
  uint64_t v149;
  float64x2_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  double *v156;
  float64x2_t v160;
  double v162;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  double v179;
  uint64_t v180;
  double v182;
  uint64_t v184;
  uint64_t v185;
  float64x2_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  double *v190;
  uint64_t v191;
  double *v192;
  float64x2_t v196;
  double v198;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  float64x2_t v216;
  uint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _OWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _OWORD *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int64x2_t v268;
  __int128 v269;
  float64x2_t v270;
  _BOOL4 v271;
  float64x2_t v272;
  _BOOL4 v273;
  uint64_t v274;
  uint64_t v275;
  float64x2_t v276;
  uint64_t result;
  float64x2_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t k;
  uint64_t v282;
  uint64_t v283;
  int64x2_t v284;
  float64x2_t v287;
  float64x2_t v288;
  double v289;
  float64x2_t v294;
  int64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  uint64_t v299;
  uint64_t m;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  float64x2_t v307;
  _QWORD *v308;
  uint64_t v309;
  double v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  unint64_t v317;
  double v319;
  double v321;
  float64x2_t v323;
  float64x2_t v325;
  double v327;
  uint64_t v332;
  float64_t v333;
  uint64_t v334;
  float64_t v335;
  float64_t v336;
  float64_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  double v351;
  float64x2_t v352;
  float64x2_t v353;
  double v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64_t v359;
  float64_t v360;
  double v361;
  double v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  double v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  double v389;
  double v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  double v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  _QWORD *v418;
  int64x2_t v419;
  _BYTE v420[32];
  float64x2_t v421;
  uint64_t v422;
  int64x2_t v423;
  _BYTE v424[32];
  float64x2_t v425;
  _BYTE v426[32];
  int64x2_t v427;
  _BYTE v428[32];
  int64x2_t v429;
  _BYTE v430[32];
  int64x2_t v431;
  _BYTE v432[32];
  int64x2_t v433;
  _BYTE v434[32];
  uint64_t v435;

  v10 = 0;
  v11 = 0;
  v435 = *MEMORY[0x24BDAC8D0];
  v12.i64[0] = *(_QWORD *)a2;
  v8.f64[0] = *(float64_t *)(a2 + 64);
  v13 = *(double *)(a2 + 72);
  v14 = **(_QWORD **)(a1 + 7952);
  v6.f64[0] = *(float64_t *)(a2 + 16);
  v4.i64[0] = *(_QWORD *)(a2 + 48);
  v15 = *(double *)(a2 + 56);
  v333 = *(double *)a2;
  v334 = *(_QWORD *)(a2 + 40);
  v336 = *(double *)(a2 + 8);
  *(float64_t *)&v12.i64[1] = v336;
  v16.i64[0] = *(_QWORD *)(a2 + 32);
  v16.i64[1] = v334;
  v7.i64[0] = *(_QWORD *)(a2 + 80);
  v5.f64[0] = *(float64_t *)(a2 + 88);
  v17.i64[0] = *(_QWORD *)&v8.f64[0];
  *(double *)&v17.i64[1] = v13;
  v332 = v16.i64[0];
  v18 = (int8x16_t)vdupq_lane_s64(v16.i64[0], 0);
  v19 = vextq_s8(v16, v4, 8uLL);
  v358 = v5;
  v359 = *(double *)(a2 + 24);
  *(_QWORD *)&v3.f64[0] = *(_QWORD *)&v359 ^ 0x8000000000000000;
  v20 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)v12, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v359 ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v15 ^ 0x8000000000000000), (float64x2_t)v16), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v5.f64[0] ^ 0x8000000000000000), (float64x2_t)v17);
  v21 = (int8x16_t)vmulq_f64(v6, v3);
  *(double *)v21.i64 = *(double *)v21.i64
                     + *(double *)v4.i64 * COERCE_DOUBLE(*(_QWORD *)&v15 ^ 0x8000000000000000)
                     + *(double *)v7.i64 * COERCE_DOUBLE(*(_QWORD *)&v5.f64[0] ^ 0x8000000000000000);
  *(float64_t *)v424 = v6.f64[0];
  v423 = v12;
  v425 = (float64x2_t)vextq_s8(v18, v19, 8uLL);
  *(_QWORD *)v426 = v4.i64[0];
  *(_QWORD *)v428 = v7.i64[0];
  v427 = v17;
  *(int64x2_t *)&v430[8] = v12;
  *(float64x2_t *)&v432[8] = v425;
  *(int64x2_t *)&v434[8] = v17;
  v335 = *(double *)v4.i64;
  *(_QWORD *)&v432[24] = v4.i64[0];
  *(_QWORD *)&v434[24] = v7.i64[0];
  v22 = (float64x2_t)vextq_s8((int8x16_t)v20, v21, 8uLL);
  v23 = (float64x2_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v20);
  v24 = (float64x2_t)vzip2q_s64(v12, (int64x2_t)v19);
  v25 = (float64x2_t)vzip1q_s64((int64x2_t)v6, v12);
  v26 = (float64x2_t)vzip1q_s64(v12, (int64x2_t)v19);
  v361 = *(double *)v7.i64;
  v362 = v13;
  _Q2 = (float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v6, 8uLL);
  v28 = (float64x2_t)vzip2q_s64((int64x2_t)v19, (int64x2_t)v18);
  v29 = vmulq_f64(v24, v20);
  v30 = vmlsq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v7, v17), v22), (float64x2_t)vextq_s8((int8x16_t)v17, v7, 8uLL), v23);
  v360 = v8.f64[0];
  v31 = vmlsq_f64(vmulq_f64(v25, v22), _Q2, v23);
  v32 = (int8x16_t)vmlsq_f64(vmulq_f64(v425, v23), v28, v20);
  v33 = (int8x16_t)vmlsq_f64(v29, v26, v22);
  v34 = (float64x2_t)vextq_s8(v33, v32, 8uLL);
  *(float64x2_t *)&v424[8] = v31;
  *(_QWORD *)&v426[24] = v32.i64[1];
  *(_QWORD *)&v424[24] = v33.i64[0];
  *(float64x2_t *)&v426[8] = v34;
  v337 = v6.f64[0];
  *(float64_t *)&v430[24] = v6.f64[0];
  *(_QWORD *)&v428[24] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_n_f64(v20, v13), v8, v20, 1);
  *(float64x2_t *)&v428[8] = v30;
  do
  {
    v429.i64[v10] = 0;
    v35 = v11 < 2;
    if (v11 < 2)
      ++v11;
    else
      v11 = 0;
    if (v35)
      ++v10;
    else
      v10 += 4;
  }
  while (v10 != 18);
  v36 = *(_QWORD **)(v14 + 48);
  v37 = (_QWORD *)(v14 + 56);
  if (v36 != (_QWORD *)(v14 + 56))
  {
    v38.f64[0] = v333;
    *(_QWORD *)&v38.f64[1] = v332;
    v357 = v38;
    v38.f64[0] = v336;
    *(_QWORD *)&v38.f64[1] = v334;
    v356 = v38;
    v38.f64[0] = v6.f64[0];
    v38.f64[1] = v335;
    v355 = v38;
    *(_QWORD *)&v6.f64[1] = v429.i64[1];
    v39 = vdupq_laneq_s64(v427, 1);
    v388 = (float64x2_t)v39;
    v39.i64[1] = v429.i64[1];
    v410 = (float64x2_t)v39;
    v40 = vdupq_laneq_s64(v431, 1);
    v387 = (float64x2_t)v40;
    v40.i64[1] = v433.i64[1];
    v386 = (float64x2_t)v40;
    v41 = vdupq_laneq_s64(*(int64x2_t *)v428, 1);
    v353 = (float64x2_t)v41;
    v41.i64[1] = *(_QWORD *)&v430[8];
    v407 = (float64x2_t)v41;
    v42 = vdupq_laneq_s64(*(int64x2_t *)v432, 1);
    v404 = (float64x2_t)v42;
    v42.i64[1] = *(_QWORD *)&v434[8];
    v385 = (float64x2_t)v42;
    v43 = vdupq_laneq_s64(*(int64x2_t *)&v428[16], 1);
    v352 = (float64x2_t)v43;
    v43.i64[1] = *(_QWORD *)&v430[24];
    v384 = (float64x2_t)v43;
    v44 = vdupq_laneq_s64(*(int64x2_t *)&v432[16], 1);
    v350 = (float64x2_t)v44;
    v44.i64[1] = *(_QWORD *)&v434[24];
    v349 = (float64x2_t)v44;
    v45.f64[0] = v359;
    v45.f64[1] = v15;
    v382 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v424, 0);
    v383 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v424, *(int64x2_t *)v426);
    v403 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v424, *(int64x2_t *)v426);
    v381 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v424, 1);
    v378 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v424[16], 0);
    v379 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v424[16], *(int64x2_t *)&v426[16]);
    v377 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v424[16], 1);
    v347 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v426, 0);
    v348 = (float64x2_t)vzip2q_s64(*(int64x2_t *)&v424[16], *(int64x2_t *)&v426[16]);
    v346 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v426, 1);
    v402 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v426[16], 1);
    v415 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v428, *(int64x2_t *)v430);
    v401 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v428, 0);
    v399 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v428[16], *(int64x2_t *)&v430[16]);
    v344 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v428[16], 0);
    v345 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v426[16], 0);
    v400 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v430, 0);
    v398 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v430, 1);
    v342 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v430[16], 1);
    v343 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v430[16], 0);
    v397 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v432, 0);
    v396 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v432[16], 0);
    v394 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)v434, 0);
    v395 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v432, *(int64x2_t *)v434);
    v392 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v434[16], 0);
    v393 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)v434, 1);
    v389 = *(double *)v431.i64;
    v390 = *(double *)v427.i64;
    v340 = (float64x2_t)vzip1q_s64(v427, v429);
    v341 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v434[16], 1);
    v375 = (float64x2_t)vzip1q_s64(v431, v433);
    v376 = (float64x2_t)vzip1q_s64(*(int64x2_t *)&v432[16], *(int64x2_t *)&v434[16]);
    v351 = *(double *)v423.i64;
    v373 = (float64x2_t)vzip2q_s64(v423, (int64x2_t)v425);
    v374 = (float64x2_t)vdupq_laneq_s64(v423, 1);
    v380 = v425.f64[0];
    v391 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v425, 1);
    v413 = *(double *)v429.i64;
    v372 = (float64x2_t)vdupq_laneq_s64(v429, 1);
    v354 = *(double *)v433.i64;
    v338 = (float64x2_t)vdupq_laneq_s64(v433, 1);
    v339 = (float64x2_t)vzip1q_s64(v423, (int64x2_t)v425);
    do
    {
      v46 = (float64x2_t *)v36[6];
      _Q1 = *v46;
      v48 = v46[1].f64[0];
      v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v357, v46->f64[0]), v356, *v46, 1), v355, v48);
      v50 = v46[2].f64[1];
      _D26 = v362;
      __asm { FMLA            D4, D26, V1.D[1] }
      _Q1 = *(float64x2_t *)((char *)v46 + 24);
      v57 = _D4 + v361 * v48;
      v58 = v46[4].f64[0];
      _Q20 = v46[3];
      v6.f64[0] = v46[5].f64[1];
      v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v357, _Q1.f64[0]), v356, _Q1, 1), v355, v50);
      _Q22 = *(float64x2_t *)((char *)v46 + 72);
      v62 = v46[7].f64[0];
      __asm { FMLA            D23, D26, V1.D[1] }
      _Q1 = v46[6];
      v65 = _D23 + v361 * v50;
      v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v357, _Q20.f64[0]), v356, _Q20, 1), v355, v58);
      __asm { FMLA            D25, D26, V20.D[1] }
      v68 = _D25 + v361 * v58;
      v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v357, _Q1.f64[0]), v356, _Q1, 1), v355, v62);
      __asm { FMLA            D25, D26, V1.D[1] }
      v34.f64[0] = _D25 + v361 * v62;
      v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v357, _Q22.f64[0]), v356, _Q22, 1), v355, v6.f64[0]);
      __asm { FMLA            D25, D26, V22.D[1] }
      v6.f64[0] = _D25 + v361 * v6.f64[0];
      *v46 = v49;
      v46[1].f64[0] = v57;
      *(float64x2_t *)((char *)v46 + 24) = v60;
      v46[2].f64[1] = v65;
      v46[3] = v66;
      v46[4].f64[0] = v68;
      *(float64x2_t *)((char *)v46 + 72) = vaddq_f64(v45, v71);
      *(_QWORD *)&v46[5].f64[1] = *(_OWORD *)&vaddq_f64(v358, v6);
      v46[6] = v69;
      v46[7].f64[0] = v34.f64[0];
      v73 = v36[6] + 456;
      v74 = *(float64x2_t *)(v36[6] + 472);
      v76 = *(float64x2_t *)(v36[6] + 520);
      v75 = *(float64x2_t *)(v36[6] + 536);
      v77 = *(float64x2_t *)(v36[6] + 488);
      v78 = *(float64x2_t *)(v36[6] + 504);
      v79 = *(float64x2_t *)(v36[6] + 552);
      v80 = *(float64x2_t *)(v36[6] + 568);
      v81 = *(float64x2_t *)(v36[6] + 616);
      v82 = *(float64x2_t *)(v36[6] + 632);
      v83 = *(float64x2_t *)(v36[6] + 584);
      v84 = *(float64x2_t *)(v36[6] + 600);
      v85 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, *(double *)v73), v373, *(float64x2_t *)v73, 1), v383, v74.f64[0]), v403, v74, 1), v379, v77.f64[0]), v348, v77, 1);
      v87 = *(float64x2_t *)(v36[6] + 648);
      v86 = *(float64x2_t *)(v36[6] + 664);
      v365 = *(float64x2_t *)(v36[6] + 712);
      v366 = *(float64x2_t *)(v36[6] + 728);
      v88 = *(float64x2_t *)(v36[6] + 680);
      v364 = *(float64x2_t *)(v36[6] + 696);
      v89 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, *(double *)v73), v410, *(float64x2_t *)v73, 1), v415, v74.f64[0]), v407, v74, 1), v399, v77.f64[0]), v384, v77, 1);
      v371 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, *(double *)v73), v386, *(float64x2_t *)v73, 1), v395, v74.f64[0]), v385, v74, 1), v376, v77.f64[0]), v349, v77, 1);
      v90 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v78.f64[0]), v373, v78, 1), v383, v76.f64[0]), v403, v76, 1), v379, v75.f64[0]), v348, v75, 1);
      v91 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v78.f64[0]), v410, v78, 1), v415, v76.f64[0]), v407, v76, 1), v399, v75.f64[0]), v384, v75, 1);
      v370 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v78.f64[0]), v386, v78, 1), v395, v76.f64[0]), v385, v76, 1), v376, v75.f64[0]), v349, v75, 1);
      v92 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v79.f64[0]), v373, v79, 1), v383, v80.f64[0]), v403, v80, 1), v379, v83.f64[0]), v348, v83, 1);
      v363 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v79.f64[0]), v410, v79, 1), v415, v80.f64[0]), v407, v80, 1), v399, v83.f64[0]), v384, v83, 1);
      v369 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v79.f64[0]), v386, v79, 1), v395, v80.f64[0]), v385, v80, 1), v376, v83.f64[0]), v349, v83, 1);
      _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v84.f64[0]), v373, v84, 1), v383, v81.f64[0]), v403, v81, 1), v379, v82.f64[0]), v348, v82, 1);
      v93 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v84.f64[0]), v410, v84, 1), v415, v81.f64[0]), v407, v81, 1), v399, v82.f64[0]), v384, v82, 1);
      v368 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v84.f64[0]), v386, v84, 1), v395, v81.f64[0]), v385, v81, 1), v376, v82.f64[0]), v349, v82, 1);
      v94 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v87.f64[0]), v373, v87, 1), v383, v86.f64[0]), v403, v86, 1), v379, v88.f64[0]), v348, v88, 1);
      v95 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v87.f64[0]), v410, v87, 1), v415, v86.f64[0]), v407, v86, 1), v399, v88.f64[0]), v384, v88, 1);
      v367 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v87.f64[0]), v386, v87, 1), v395, v86.f64[0]), v385, v86, 1), v376, v88.f64[0]), v349, v88, 1);
      v96 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v339, v364.f64[0]), v373, v364, 1), v383, v365.f64[0]), v403, v365, 1), v379, v366.f64[0]), v348, v366, 1);
      v97 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v340, v364.f64[0]), v410, v364, 1), v415, v365.f64[0]), v407, v365, 1), v399, v366.f64[0]), v384, v366, 1);
      v98 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v375, v364.f64[0]), v386, v364, 1), v395, v365.f64[0]), v385, v365, 1), v376, v366.f64[0]), v349, v366, 1);
      v6 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v351), v374, v91), v382, v363), v381, v93), v378, v95), v377, v97);
      *(float64x2_t *)v73 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v351), v374, v90), v382, v92), v381, _Q2), v378, v94), v377, v96);
      *(float64x2_t *)(v73 + 16) = v6;
      v34.f64[1] = v368.f64[1];
      *(float64x2_t *)(v73 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v351), v374, v370), v382, v369), v381, v368), v378, v367), v377, v98);
      *(float64x2_t *)(v73 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v380), v391, v90), v347, v92), v346, _Q2), v345, v94), v402, v96);
      *(float64x2_t *)(v73 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v380), v391, v91), v347, v363), v346, v93), v345, v95), v402, v97);
      *(float64x2_t *)(v73 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v380), v391, v370), v347, v369), v346, v368), v345, v367), v402, v98);
      *(float64x2_t *)(v73 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v390), v388, v90), v401, v92), v353, _Q2), v344, v94), v352, v96);
      *(float64x2_t *)(v73 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v390), v388, v91), v401, v363), v353, v93), v344, v95), v352, v97);
      *(float64x2_t *)(v73 + 128) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v390), v388, v370), v401, v369), v353, v368), v344, v367), v352, v98);
      *(float64x2_t *)(v73 + 144) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v413), v372, v90), v400, v92), v398, _Q2), v343, v94), v342, v96);
      *(float64x2_t *)(v73 + 160) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v413), v372, v91), v400, v363), v398, v93), v343, v95), v342, v97);
      *(float64x2_t *)(v73 + 176) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v413), v372, v370), v400, v369), v398, v368), v343, v367), v342, v98);
      *(float64x2_t *)(v73 + 192) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v389), v387, v90), v397, v92), v404, _Q2), v396, v94), v350, v96);
      *(float64x2_t *)(v73 + 208) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v389), v387, v91), v397, v363), v404, v93), v396, v95), v350, v97);
      *(float64x2_t *)(v73 + 224) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v389), v387, v370), v397, v369), v404, v368), v396, v367), v350, v98);
      *(float64x2_t *)(v73 + 240) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v85, v354), v338, v90), v394, v92), v393, _Q2), v392, v94), v341, v96);
      _Q2.f64[1] = v394.f64[1];
      a3.f64[1] = v392.f64[1];
      *(float64x2_t *)(v73 + 256) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v89, v354), v338, v91), v394, v363), v393, v93), v392, v95), v341, v97);
      *(float64x2_t *)(v73 + 272) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v371, v354), v338, v370), v394, v369), v393, v368), v392, v367), v341, v98);
      v99 = (_QWORD *)v36[1];
      if (v99)
      {
        do
        {
          v100 = v99;
          v99 = (_QWORD *)*v99;
        }
        while (v99);
      }
      else
      {
        do
        {
          v100 = (_QWORD *)v36[2];
          _ZF = *v100 == (_QWORD)v36;
          v36 = v100;
        }
        while (!_ZF);
      }
      v36 = v100;
    }
    while (v100 != v37);
  }
  v101 = *(_QWORD *)(a1 + 8216);
  v102 = 8;
  if (!*(_BYTE *)v101)
    v102 = 16;
  v103 = *(_QWORD *)(v101 + v102);
  if (*(_BYTE *)v101)
    _ZF = v103 == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    v105 = *(_QWORD **)(v101 + 16);
    v106 = v105[647];
    for (i = v105[648]; v106 != i; v106 += 16)
    {
      v108 = *(_QWORD *)(v106 + 8);
      v109 = *(_QWORD *)(v108 + 24);
      a3.f64[0] = *(float64_t *)(v109 + 16);
      _Q2.f64[0] = *(float64_t *)(v109 + 40);
      v110 = *(int64x2_t *)(v109 + 24);
      _D4 = *(double *)(v109 + 64);
      _Q5 = *(float64x2_t *)(v109 + 48);
      v113 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v109, v110);
      v114 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v109, v110);
      v115 = *(double *)(v109 + 88);
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v113, *(double *)(v109 + 72)), v114, *(float64x2_t *)(v109 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)a3, (int64x2_t)_Q2), v115);
      _D19 = *(_QWORD *)(v109 + 80);
      __asm { FMLA            D16, D19, V5.D[1] }
      _D16 = _D16 + _D4 * v115;
      v120 = vnegq_f64(_Q20);
      v121 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v114.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v114, 1), 8uLL);
      v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v109, v121);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      v123 = (float64x2_t)vzip2q_s64((int64x2_t)v113, v121);
      _Q6 = vmulq_f64(a3, v120);
      __asm
      {
        FMLS            D6, D2, V20.D[1]
        FMLS            D6, D4, V16.D[0]
      }
      *(float64_t *)(v108 + 48) = a3.f64[0];
      *(float64x2_t *)(v108 + 32) = v122;
      a3 = vnegq_f64(_Q6);
      *(float64_t *)(v108 + 72) = _Q2.f64[0];
      v34 = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v122, v120.f64[0]), v123, _Q20, 1), _Q5, _D16, 0));
      *(double *)(v108 + 96) = _D4;
      *(float64x2_t *)(v108 + 56) = v123;
      *(float64x2_t *)(v108 + 80) = _Q5;
      *(float64x2_t *)(v108 + 104) = v34;
      *(float64_t *)(v108 + 120) = a3.f64[0];
      *(_BYTE *)(v108 + 128) = 0;
    }
    v125 = v105[659];
    for (j = v105[660]; v125 != j; v125 += 16)
    {
      v127 = *(_QWORD *)(v125 + 8);
      v128 = *(_QWORD *)(v127 + 24);
      v129 = *(_QWORD *)(v128 + 160);
      v130 = *(_OWORD *)(v128 + 128);
      v34 = *(float64x2_t *)(v128 + 144);
      v131 = *(_OWORD *)(v128 + 112);
      *(_OWORD *)(v127 + 32) = *(_OWORD *)(v128 + 96);
      *(_OWORD *)(v127 + 48) = v131;
      *(_OWORD *)(v127 + 64) = v130;
      *(float64x2_t *)(v127 + 80) = v34;
      *(_QWORD *)(v127 + 96) = v129;
      *(_BYTE *)(v127 + 104) = 0;
    }
  }
  else
  {
    v279 = *(_QWORD **)(v101 + 8);
    v280 = v279[649];
    for (k = v279[650]; v280 != k; v280 += 16)
    {
      v282 = *(_QWORD *)(v280 + 8);
      v283 = *(_QWORD *)(v282 + 24);
      a3.f64[0] = *(float64_t *)(v283 + 16);
      _Q2.f64[0] = *(float64_t *)(v283 + 40);
      v284 = *(int64x2_t *)(v283 + 24);
      _D4 = *(double *)(v283 + 64);
      _Q5 = *(float64x2_t *)(v283 + 48);
      v287 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v283, v284);
      v288 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v283, v284);
      v289 = *(double *)(v283 + 88);
      _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v287, *(double *)(v283 + 72)), v288, *(float64x2_t *)(v283 + 72), 1), (float64x2_t)vzip1q_s64((int64x2_t)a3, (int64x2_t)_Q2), v289);
      _D19 = *(_QWORD *)(v283 + 80);
      __asm { FMLA            D16, D19, V5.D[1] }
      _D16 = _D16 + _D4 * v289;
      v294 = vnegq_f64(_Q20);
      v295 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v288.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v288, 1), 8uLL);
      v296 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v283, v295);
      *(_QWORD *)&_Q5.f64[1] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
      v297 = (float64x2_t)vzip2q_s64((int64x2_t)v287, v295);
      _Q6 = vmulq_f64(a3, v294);
      __asm
      {
        FMLS            D6, D2, V20.D[1]
        FMLS            D6, D4, V16.D[0]
      }
      *(float64_t *)(v282 + 48) = a3.f64[0];
      *(float64x2_t *)(v282 + 32) = v296;
      a3 = vnegq_f64(_Q6);
      *(float64_t *)(v282 + 72) = _Q2.f64[0];
      v34 = vnegq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v296, v294.f64[0]), v297, _Q20, 1), _Q5, _D16, 0));
      *(double *)(v282 + 96) = _D4;
      *(float64x2_t *)(v282 + 56) = v297;
      *(float64x2_t *)(v282 + 80) = _Q5;
      *(float64x2_t *)(v282 + 104) = v34;
      *(float64_t *)(v282 + 120) = a3.f64[0];
      *(_BYTE *)(v282 + 128) = 0;
    }
    v299 = v279[661];
    for (m = v279[662]; v299 != m; v299 += 16)
    {
      v301 = *(_QWORD *)(v299 + 8);
      v302 = *(_QWORD *)(v301 + 24);
      v303 = *(_QWORD *)(v302 + 160);
      v304 = *(_OWORD *)(v302 + 128);
      v34 = *(float64x2_t *)(v302 + 144);
      v305 = *(_OWORD *)(v302 + 112);
      *(_OWORD *)(v301 + 32) = *(_OWORD *)(v302 + 96);
      *(_OWORD *)(v301 + 48) = v305;
      *(_OWORD *)(v301 + 64) = v304;
      *(float64x2_t *)(v301 + 80) = v34;
      *(_QWORD *)(v301 + 96) = v303;
      *(_BYTE *)(v301 + 104) = 0;
    }
  }
  v132 = *(_QWORD *)(a1 + 8216);
  v133 = 8;
  if (!*(_BYTE *)v132)
    v133 = 16;
  v134.i64[0] = *(_QWORD *)(a2 + 24);
  v134.i64[1] = *(_QWORD *)(a2 + 56);
  v34.f64[0] = *(float64_t *)(a2 + 88);
  v414 = v34;
  v135 = vextq_s8(v134, v134, 8uLL).u64[0];
  if (*(_BYTE *)v132 && *(_QWORD *)(v132 + v133))
  {
    v136 = *(_QWORD *)(v132 + 8);
    v137 = *(_QWORD *)(v136 + 5576);
    v138 = *(_QWORD *)(v136 + 5584);
    if (v137 != v138)
    {
      v139 = *(float64x2_t *)a2;
      v140 = *(float64x2_t *)(a2 + 16);
      v141 = *(float64x2_t *)(a2 + 8);
      _D9 = *(_QWORD *)(a2 + 72);
      v139.f64[1] = *(float64_t *)(a2 + 32);
      v411 = v139;
      v141.f64[1] = *(float64_t *)(a2 + 40);
      v408 = v141;
      v140.f64[1] = *(float64_t *)(a2 + 48);
      v405 = v140;
      v139.f64[0] = *(float64_t *)(a2 + 24);
      *(_QWORD *)&v139.f64[1] = v135;
      v416 = v139;
      v143 = *(double *)(a2 + 80);
      do
      {
        v144 = *(_QWORD *)(v137 + 8);
        _Q0.f64[1] = *(float64_t *)(v144 + 40);
        v146 = *(double *)(v144 + 48);
        __asm { FMLA            D3, D9, V0.D[1] }
        _Q0.f64[0] = _D3 + v143 * v146;
        *(float64x2_t *)(v144 + 32) = vaddq_f64(v416, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v411, *(double *)(v144 + 32)), v408, *(float64x2_t *)(v144 + 32), 1), v405, v146));
        *(_QWORD *)(v144 + 48) = *(_OWORD *)&vaddq_f64(v414, _Q0);
        v148 = *(_QWORD *)(v144 + 24);
        if ((!v148 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 24))(v148) & 1) == 0)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 818, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_50;
        }
        v149 = *(_QWORD *)(v144 + 24);
        v150 = *(float64x2_t *)(v144 + 32);
        *(_QWORD *)(v149 + 24) = *(_QWORD *)(v144 + 48);
        *(float64x2_t *)(v149 + 8) = v150;
        v151 = *(_QWORD *)(v144 + 24);
        v152 = *(uint64_t **)(v151 + 96);
        v153 = *v152;
        v154 = (double *)v152[2];
        v155 = v152[4];
        v156 = (double *)v152[6];
        _D1 = *(double *)(v144 + 40) - v154[1];
        v150.f64[0] = *(double *)(v144 + 48) - v154[2];
        _Q3.f64[0] = *(float64_t *)(v153 + 16);
        _Q7 = *(_OWORD *)(v153 + 48);
        _Q3.f64[1] = *(float64_t *)(v153 + 40);
        v160 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v153, *(int64x2_t *)(v153 + 24)), *(double *)(v144 + 32) - *v154), (float64x2_t)vzip2q_s64(*(int64x2_t *)v153, *(int64x2_t *)(v153 + 24)), _D1), _Q3, v150.f64[0]);
        __asm { FMLA            D2, D1, V7.D[1] }
        v150.f64[0] = _D2 + *(double *)(v153 + 64) * v150.f64[0];
        v162 = v160.f64[0] - *v156;
        _D2 = v160.f64[1] - v156[1];
        v150.f64[0] = v150.f64[0] - v156[2];
        _Q3.f64[0] = *(float64_t *)(v155 + 16);
        _Q4 = *(int64x2_t *)v155;
        _Q6 = *(int64x2_t *)(v155 + 24);
        *(_QWORD *)&_Q7 = *(_QWORD *)(v155 + 64);
        _Q16 = *(float64x2_t *)(v155 + 48);
        __asm { FMLA            D18, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v155 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v155, _Q6), v162), (float64x2_t)vzip2q_s64(*(int64x2_t *)v155, _Q6), _D2), _Q3, v150.f64[0]);
        __asm { FMLA            D3, D2, V16.D[1] }
        _Q16.f64[0] = _Q3.f64[0] + *(double *)&_Q7 * v150.f64[0];
        __asm { FMLA            D1, D2, V6.D[1] }
        _D1 = _D1 + v150.f64[0] * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v150.f64[0] = 1.0 / sqrt(_D2 + (_Q3.f64[0] + v150.f64[0] * *(double *)&_Q7) * _Q16.f64[0]);
        *(float64x2_t *)(v151 + 64) = vmulq_n_f64(_Q17, v150.f64[0]);
        *(_QWORD *)(v151 + 80) = *(_OWORD *)&vmulq_f64(_Q16, v150);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v144 + 24) + 16))(*(_QWORD *)(v144 + 24)) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 843, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_50;
        }
        v137 += 16;
      }
      while (v137 != v138);
    }
  }
  else
  {
    v172 = *(_QWORD *)(v132 + 16);
    v173 = *(_QWORD *)(v172 + 5560);
    v174 = *(_QWORD *)(v172 + 5568);
    if (v173 != v174)
    {
      v175 = *(float64x2_t *)a2;
      v176 = *(float64x2_t *)(a2 + 16);
      v177 = *(float64x2_t *)(a2 + 8);
      _D9 = *(_QWORD *)(a2 + 72);
      v175.f64[1] = *(float64_t *)(a2 + 32);
      v412 = v175;
      v177.f64[1] = *(float64_t *)(a2 + 40);
      v409 = v177;
      v176.f64[1] = *(float64_t *)(a2 + 48);
      v406 = v176;
      v175.f64[0] = *(float64_t *)(a2 + 24);
      *(_QWORD *)&v175.f64[1] = v135;
      v417 = v175;
      v179 = *(double *)(a2 + 80);
      while (1)
      {
        v180 = *(_QWORD *)(v173 + 8);
        _Q0.f64[1] = *(float64_t *)(v180 + 40);
        v182 = *(double *)(v180 + 48);
        __asm { FMLA            D3, D9, V0.D[1] }
        _Q0.f64[0] = _D3 + v179 * v182;
        *(float64x2_t *)(v180 + 32) = vaddq_f64(v417, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v412, *(double *)(v180 + 32)), v409, *(float64x2_t *)(v180 + 32), 1), v406, v182));
        *(_QWORD *)(v180 + 48) = *(_OWORD *)&vaddq_f64(v414, _Q0);
        v184 = *(_QWORD *)(v180 + 24);
        if ((!v184 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 24))(v184) & 1) == 0)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 818, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        v185 = *(_QWORD *)(v180 + 24);
        v186 = *(float64x2_t *)(v180 + 32);
        *(_QWORD *)(v185 + 24) = *(_QWORD *)(v180 + 48);
        *(float64x2_t *)(v185 + 8) = v186;
        v187 = *(_QWORD *)(v180 + 24);
        v188 = *(uint64_t **)(v187 + 96);
        v189 = *v188;
        v190 = (double *)v188[2];
        v191 = v188[4];
        v192 = (double *)v188[6];
        _D1 = *(double *)(v180 + 40) - v190[1];
        v186.f64[0] = *(double *)(v180 + 48) - v190[2];
        _Q3.f64[0] = *(float64_t *)(v189 + 16);
        _Q7 = *(_OWORD *)(v189 + 48);
        _Q3.f64[1] = *(float64_t *)(v189 + 40);
        v196 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v189, *(int64x2_t *)(v189 + 24)), *(double *)(v180 + 32) - *v190), (float64x2_t)vzip2q_s64(*(int64x2_t *)v189, *(int64x2_t *)(v189 + 24)), _D1), _Q3, v186.f64[0]);
        __asm { FMLA            D2, D1, V7.D[1] }
        v186.f64[0] = _D2 + *(double *)(v189 + 64) * v186.f64[0];
        v198 = v196.f64[0] - *v192;
        _D2 = v196.f64[1] - v192[1];
        v186.f64[0] = v186.f64[0] - v192[2];
        _Q3.f64[0] = *(float64_t *)(v191 + 16);
        _Q4 = *(int64x2_t *)v191;
        _Q6 = *(int64x2_t *)(v191 + 24);
        *(_QWORD *)&_Q7 = *(_QWORD *)(v191 + 64);
        _Q16 = *(float64x2_t *)(v191 + 48);
        __asm { FMLA            D18, D2, V4.D[1] }
        _Q3.f64[1] = *(float64_t *)(v191 + 40);
        _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v191, _Q6), v198), (float64x2_t)vzip2q_s64(*(int64x2_t *)v191, _Q6), _D2), _Q3, v186.f64[0]);
        __asm { FMLA            D3, D2, V16.D[1] }
        _Q16.f64[0] = _Q3.f64[0] + *(double *)&_Q7 * v186.f64[0];
        __asm { FMLA            D1, D2, V6.D[1] }
        _D1 = _D1 + v186.f64[0] * _Q3.f64[1];
        __asm { FMLA            D2, D1, V17.D[1] }
        v186.f64[0] = 1.0 / sqrt(_D2 + (_Q3.f64[0] + v186.f64[0] * *(double *)&_Q7) * _Q16.f64[0]);
        *(float64x2_t *)(v187 + 64) = vmulq_n_f64(_Q17, v186.f64[0]);
        *(_QWORD *)(v187 + 80) = *(_OWORD *)&vmulq_f64(_Q16, v186);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v180 + 24) + 16))(*(_QWORD *)(v180 + 24)) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 843, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        v173 += 16;
        if (v173 == v174)
          goto LABEL_51;
      }
LABEL_50:
      abort();
    }
  }
LABEL_51:
  v418 = *(_QWORD **)(a1 + 7952);
  v208 = *(_QWORD **)(*v418 + 48);
  v209 = *v418 + 56;
  if (v208 != (_QWORD *)v209)
  {
    v210 = 0;
    do
    {
      if ((v208[4] || *(_DWORD *)(*(_QWORD *)(a1 + 2480) + 4 * v210) != *((_DWORD *)v208 + 10))
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 109, (uint64_t)"(typename VIOStateSetContainerType::key_type{ util::kFrontEndSession, static_cast<uint32_t>(frameIDs[frameIndex])} == stateIter.first)", 134, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v211 = v208[6];
      v212 = *(_QWORD *)(v211 + 16);
      v213 = *(_QWORD *)(v211 + 40);
      v214 = *(_OWORD *)(v211 + 24);
      v215 = *(_QWORD *)(v211 + 64);
      v216 = *(float64x2_t *)(v211 + 48);
      v419 = *(int64x2_t *)v211;
      *(_QWORD *)v420 = v212;
      *(_OWORD *)&v420[8] = v214;
      *(_QWORD *)&v420[24] = v213;
      v421 = v216;
      v422 = v215;
      sub_20F1B6B0C((float64x2_t *)&v419);
      *(_OWORD *)&v424[16] = *(_OWORD *)&v420[16];
      v425 = v421;
      *(_QWORD *)v426 = v422;
      *(_OWORD *)v424 = *(_OWORD *)v420;
      v423 = v419;
      v429 = *(int64x2_t *)(v211 + 72);
      *(_QWORD *)v430 = *(_QWORD *)(v211 + 88);
      v427 = *(int64x2_t *)(v211 + 96);
      *(_QWORD *)v428 = *(_QWORD *)(v211 + 112);
      *(_OWORD *)&v426[8] = *(_OWORD *)(v211 + 120);
      *(_QWORD *)&v426[24] = *(_QWORD *)(v211 + 136);
      *(_QWORD *)&v428[24] = *(_QWORD *)(v211 + 160);
      *(_OWORD *)&v428[8] = *(_OWORD *)(v211 + 144);
      v217 = *(_QWORD *)(a1 + 2280) + 168 * v210;
      *(_QWORD *)(v217 + 160) = *(_QWORD *)v430;
      *(int64x2_t *)(v217 + 144) = v429;
      *(_OWORD *)(v217 + 128) = *(_OWORD *)&v428[16];
      *(_OWORD *)(v217 + 112) = *(_OWORD *)v428;
      *(int64x2_t *)(v217 + 96) = v427;
      *(_OWORD *)(v217 + 80) = *(_OWORD *)&v426[16];
      *(_OWORD *)(v217 + 64) = *(_OWORD *)v426;
      *(float64x2_t *)(v217 + 48) = v425;
      *(_OWORD *)(v217 + 32) = *(_OWORD *)&v424[16];
      *(_OWORD *)(v217 + 16) = *(_OWORD *)v424;
      *(int64x2_t *)v217 = v423;
      v218 = (_QWORD *)v208[1];
      if (v218)
      {
        do
        {
          v219 = v218;
          v218 = (_QWORD *)*v218;
        }
        while (v218);
      }
      else
      {
        do
        {
          v219 = (_QWORD *)v208[2];
          _ZF = *v219 == (_QWORD)v208;
          v208 = v219;
        }
        while (!_ZF);
      }
      ++v210;
      v208 = v219;
    }
    while (v219 != (_QWORD *)v209);
  }
  v220 = *(_QWORD *)(a1 + 2584) - *(_QWORD *)(a1 + 2576);
  if (v220)
  {
    v221 = 0;
    v222 = v220 >> 2;
    v223 = (uint64_t *)v418[2];
    if (v222 <= 1)
      v224 = 1;
    else
      v224 = v222;
    while (2)
    {
      while (1)
      {
        v230 = 0;
        v237 = *(unsigned int *)(*(_QWORD *)(a1 + 2576) + 4 * v221);
        _X10 = *v223;
        __asm { PRFM            #4, [X10] }
        v240 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v237) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                        - 0x622015F714C7D297 * v237) >> 32);
        v241 = v223[3];
        v231 = (v240 >> 7) ^ 0x13701D;
        v242 = 0x101010101010101 * (v240 & 0x7F);
        while (1)
        {
          v225 = v231 & v241;
          v226 = *(_QWORD *)(_X10 + v225);
          v227 = ((v226 ^ v242) - 0x101010101010101) & ~(v226 ^ v242) & 0x8080808080808080;
          if (v227)
            break;
LABEL_73:
          if ((v226 & (~v226 << 6) & 0x8080808080808080) != 0)
            goto LABEL_78;
          v230 += 8;
          v231 = v230 + v225;
        }
        while (1)
        {
          v228 = v223[1] + 32 * ((v225 + (__clz(__rbit64(v227)) >> 3)) & v241);
          if (!*(_QWORD *)v228 && *(_DWORD *)(v228 + 8) == (_DWORD)v237)
            break;
          v227 &= v227 - 1;
          if (!v227)
            goto LABEL_73;
        }
        if (!_X10)
          break;
        v232 = *(_QWORD *)(v228 + 16);
        if (*(_BYTE *)(v232 + 488))
        {
          v233 = v232 + 48;
        }
        else
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 135, (uint64_t)"point_track_structure", 21, (uint64_t)"Point track missing structure.", 30, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v233 = 8;
        }
        v235 = *(_QWORD *)(v233 + 16);
        v236 = *(_QWORD *)(a1 + 2328) + 32 * v221;
        *(_OWORD *)v236 = *(_OWORD *)v233;
        *(_QWORD *)(v236 + 16) = v235;
        *(_QWORD *)(v236 + 24) = 0x3FF0000000000000;
        if (++v221 == v224)
          goto LABEL_84;
      }
LABEL_78:
      v234 = (_OWORD *)(*(_QWORD *)(a1 + 2328) + 32 * v221);
      *v234 = xmmword_2103B9F58;
      v234[1] = unk_2103B9F68;
      if (++v221 != v224)
        continue;
      break;
    }
  }
LABEL_84:
  v243 = *(_QWORD *)(a1 + 2608) - *(_QWORD *)(a1 + 2600);
  if (v243)
  {
    v244 = 0;
    v245 = v243 >> 2;
    v246 = (uint64_t *)v418[3];
    if (v245 <= 1)
      v247 = 1;
    else
      v247 = v245;
    do
    {
LABEL_103:
      v253 = 0;
      v262 = *(unsigned int *)(*(_QWORD *)(a1 + 2600) + 4 * v244);
      _X10 = *v246;
      __asm { PRFM            #4, [X10] }
      v265 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v262) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                      - 0x622015F714C7D297 * v262) >> 32);
      v266 = v246[3];
      v254 = (v265 >> 7) ^ 0x13701D;
      v267 = 0x101010101010101 * (v265 & 0x7F);
      while (1)
      {
        v248 = v254 & v266;
        v249 = *(_QWORD *)(_X10 + v248);
        v250 = ((v249 ^ v267) - 0x101010101010101) & ~(v249 ^ v267) & 0x8080808080808080;
        if (v250)
          break;
LABEL_94:
        if ((v249 & (~v249 << 6) & 0x8080808080808080) != 0)
        {
LABEL_102:
          v260 = (_OWORD *)(*(_QWORD *)(a1 + 2352) + (v244 << 6));
          *v260 = xmmword_2103B9F58;
          v260[1] = unk_2103B9F68;
          v261 = *(_QWORD *)(a1 + 2352) + (v244 << 6);
          *(_OWORD *)(v261 + 32) = xmmword_2103B9F58;
          *(_OWORD *)(v261 + 48) = unk_2103B9F68;
          if (++v244 == v247)
            goto LABEL_104;
          goto LABEL_103;
        }
        v253 += 8;
        v254 = v253 + v248;
      }
      while (1)
      {
        v251 = v246[1] + 32 * ((v248 + (__clz(__rbit64(v250)) >> 3)) & v266);
        if (!*(_QWORD *)v251 && *(_DWORD *)(v251 + 8) == (_DWORD)v262)
          break;
        v250 &= v250 - 1;
        if (!v250)
          goto LABEL_94;
      }
      if (!_X10)
        goto LABEL_102;
      v255 = *(_QWORD *)(v251 + 16);
      if (!*(_BYTE *)(v255 + 968))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 163, (uint64_t)"line_track->getStructure()", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v255 = *(_QWORD *)(v251 + 16);
      }
      v256 = *(_QWORD *)(v255 + 64);
      v257 = *(_QWORD *)(a1 + 2352) + (v244 << 6);
      *(_OWORD *)v257 = *(_OWORD *)(v255 + 48);
      *(_QWORD *)(v257 + 16) = v256;
      *(_QWORD *)(v257 + 24) = 0x3FF0000000000000;
      v258 = *(_QWORD *)(v255 + 512);
      v259 = *(_QWORD *)(a1 + 2352) + (v244 << 6);
      *(_OWORD *)(v259 + 32) = *(_OWORD *)(v255 + 496);
      *(_QWORD *)(v259 + 48) = v258;
      *(_QWORD *)(v259 + 56) = 0x3FF0000000000000;
      ++v244;
    }
    while (v244 != v247);
  }
LABEL_104:
  *(float64_t *)v268.i64 = v333;
  v268.i64[1] = v332;
  *(float64_t *)&v269 = v336;
  *((_QWORD *)&v269 + 1) = v334;
  v270.f64[0] = v337;
  v270.f64[1] = v335;
  *(float64_t *)v424 = v360;
  v423 = v268;
  *(double *)&v424[24] = v362;
  *(_OWORD *)&v424[8] = v269;
  *(double *)v426 = v361;
  v425 = v270;
  v271 = *(_DWORD *)(a1 + 8176) == 1;
  sub_20FB6C0F4((uint64_t)&v423, 3, (uint64_t *)(a1 + 8152));
  if (v271)
    sub_20FB6C0F4((uint64_t)&v423, 6, (uint64_t *)(a1 + 8152));
  *(float64_t *)v424 = v360;
  v272.f64[0] = v333;
  *(_QWORD *)&v272.f64[1] = v332;
  v423 = (int64x2_t)v272;
  *(double *)&v424[24] = v362;
  v272.f64[0] = v336;
  *(_QWORD *)&v272.f64[1] = v334;
  *(float64x2_t *)&v424[8] = v272;
  *(double *)v426 = v361;
  v272.f64[0] = v337;
  v272.f64[1] = v335;
  v425 = v272;
  v273 = *(_DWORD *)(a1 + 8208) == 1;
  sub_20FB6C0F4((uint64_t)&v423, 3, (uint64_t *)(a1 + 8184));
  if (v273)
    sub_20FB6C0F4((uint64_t)&v423, 6, (uint64_t *)(a1 + 8184));
  v274 = *(_QWORD *)(a1 + 8216);
  if (*(_BYTE *)v274)
  {
    v275 = *(_QWORD *)(v274 + 8);
    *(float64_t *)v424 = v360;
    v276.f64[0] = v333;
    *(_QWORD *)&v276.f64[1] = v332;
    v423 = (int64x2_t)v276;
    v276.f64[0] = v336;
    *(_QWORD *)&v276.f64[1] = v334;
    *(double *)&v424[24] = v362;
    *(float64x2_t *)&v424[8] = v276;
    *(double *)v426 = v361;
    v276.f64[0] = v337;
    v276.f64[1] = v335;
    v425 = v276;
    result = sub_20FB6CAD4(v275);
  }
  else
  {
    v306 = *(_QWORD *)(v274 + 16);
    *(float64_t *)v424 = v360;
    v307.f64[0] = v333;
    *(_QWORD *)&v307.f64[1] = v332;
    v423 = (int64x2_t)v307;
    v307.f64[0] = v336;
    *(_QWORD *)&v307.f64[1] = v334;
    *(double *)&v424[24] = v362;
    *(float64x2_t *)&v424[8] = v307;
    *(double *)v426 = v361;
    v307.f64[0] = v337;
    v307.f64[1] = v335;
    v425 = v307;
    result = sub_20FB71700(v306);
  }
  v308 = *(_QWORD **)(a1 + 12440);
  if (v308 && v308[9])
  {
    v309 = 0;
    v316.f64[0] = *(float64_t *)(a2 + 24);
    v316.f64[1] = *(float64_t *)(a2 + 56);
    _Q16 = (float64x2_t)vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL);
    v313 = *(float64x2_t *)a2;
    v315 = *(float64x2_t *)(a2 + 16);
    v314 = *(float64x2_t *)(a2 + 8);
    _D5 = *(_QWORD *)(a2 + 72);
    v312 = *(double *)(a2 + 80);
    v278.f64[0] = *(float64_t *)(a2 + 88);
    v313.f64[1] = *(float64_t *)(a2 + 32);
    v314.f64[1] = *(float64_t *)(a2 + 40);
    v315.f64[1] = *(float64_t *)(a2 + 48);
    v316.f64[1] = _Q16.f64[0];
    do
    {
      v317 = v308[4] + 192 * ((v309 + v308[7]) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v308[5] - v308[4]) >> 6)));
      _Q16.f64[0] = *(float64_t *)(v317 + 16);
      _Q17 = *(_OWORD *)v317;
      v319 = *(double *)(v317 + 40);
      _Q19 = *(float64x2_t *)(v317 + 24);
      v321 = *(double *)(v317 + 64);
      _Q21 = *(float64x2_t *)(v317 + 48);
      v323 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v313, *(double *)v317), v314, *(float64x2_t *)v317, 1), v315, _Q16.f64[0]);
      __asm { FMLA            D23, D5, V17.D[1] }
      _Q16.f64[0] = _D23 + v312 * _Q16.f64[0];
      v325 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v313, _Q19.f64[0]), v314, _Q19, 1), v315, v319);
      __asm { FMLA            D23, D5, V19.D[1] }
      v327 = _D23 + v312 * v319;
      __asm { FMLA            D23, D5, V21.D[1] }
      *(float64x2_t *)v317 = v323;
      *(float64_t *)(v317 + 16) = _Q16.f64[0];
      *(float64x2_t *)(v317 + 24) = v325;
      *(float64x2_t *)(v317 + 48) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v313, _Q21.f64[0]), v314, _Q21, 1), v315, v321);
      _Q16.f64[0] = *(float64_t *)(v317 + 112);
      _Q17 = *(float64x2_t *)(v317 + 96);
      *(double *)(v317 + 40) = v327;
      __asm { FMLA            D19, D5, V17.D[1] }
      *(double *)(v317 + 64) = _D23 + v312 * v321;
      *(float64x2_t *)(v317 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v313, _Q17.f64[0]), v314, _Q17, 1), v315, _Q16.f64[0]);
      _Q17.f64[0] = *(float64_t *)(v317 + 160);
      _Q18 = *(float64x2_t *)(v317 + 144);
      *(double *)(v317 + 112) = _Q19.f64[0] + v312 * _Q16.f64[0];
      __asm { FMLA            D16, D5, V18.D[1] }
      _Q16.f64[0] = _Q16.f64[0] + v312 * _Q17.f64[0];
      _Q16 = vaddq_f64(v278, _Q16);
      *(float64x2_t *)(v317 + 144) = vaddq_f64(v316, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v313, _Q18.f64[0]), v314, _Q18, 1), v315, _Q17.f64[0]));
      *(float64_t *)(v317 + 160) = _Q16.f64[0];
      ++v309;
    }
    while (v309 != v308[9]);
  }
  return result;
}

uint64_t sub_20F86C2E8(uint64_t a1)
{
  size_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t prime;
  int8x8_t v13;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  float64_t v21;
  unsigned int v22;
  void *v23;
  char **v24;
  int v25;
  int v26;
  void *v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t j;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t k;
  unsigned __int8 v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unsigned int v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  _QWORD *v88;
  char *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  _QWORD *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _OWORD *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  _QWORD *v135;
  char *v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint8x8_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  int v168;
  uint64_t **v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _BYTE *v183;
  _QWORD *v184;
  char *v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _OWORD *v192;
  char *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  _QWORD *v206;
  char *v207;
  void **v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  float v212;
  float v213;
  BOOL v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  size_t v218;
  uint64_t *v219;
  unint64_t v220;
  uint8x8_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  _OWORD *v227;
  char *v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unint64_t v258;
  char *v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  unint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  int64_t v332;
  char *v333;
  char *v334;
  char *v335;
  size_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  unint64_t v345;
  char *v346;
  char *v347;
  unint64_t v348;
  uint64_t v349;
  __int128 *v350;
  _OWORD *v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  unint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  _OWORD *v359;
  char *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  _OWORD *v367;
  char *v368;
  uint64_t v369;
  __int128 v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t *v373;
  float64_t v374;
  uint8x8_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t **v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v385;
  unint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t **v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v397;
  unint64_t v399;
  _QWORD *v400;
  _QWORD *v401;
  _QWORD *v402;
  __int128 v403;
  float64x2_t v404;
  float64x2_t v406;
  __n128 v407;
  int v408;
  unint64_t v409;
  unint64_t v410;
  _QWORD *v411;
  size_t v412;
  void **p_dst;
  uint64_t v414;
  const void *v415;
  uint64_t v416;
  uint64_t v417;
  void **v418;
  uint64_t v419;
  size_t v420;
  const char *v421;
  unsigned __int8 v422;
  unsigned __int8 v423;
  const char *v424;
  size_t v425;
  void **v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  NSObject *v430;
  uint64_t v431;
  uint64_t v432;
  size_t v433;
  void *v434;
  _QWORD *v435;
  size_t v436;
  size_t v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  double v441;
  char v442;
  _QWORD *v443;
  uint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *p_shared_owners;
  unint64_t v447;
  void *v448;
  unint64_t *v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  void *v458;
  char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  double v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  const char *v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  uint64_t v490;
  double v491;
  double v494;
  double v495;
  double v496;
  char v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  float64x2_t v501;
  float64x2_t v503;
  float64x2_t v505;
  double v507;
  double v509;
  float64x2_t v511;
  double v512;
  float64x2_t v513;
  double v516;
  double v517;
  _BYTE *v518;
  char *v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  char *v523;
  _BYTE *v524;
  char *v525;
  uint64_t v526;
  char *v527;
  char *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  char *v532;
  float64x2_t *v533;
  float64x2_t *v534;
  uint64_t v535;
  float64x2_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  _BYTE *v540;
  unint64_t v541;
  char *v542;
  size_t v543;
  void *v544;
  char *v545;
  char *v546;
  uint64_t v547;
  int64_t v548;
  uint64_t v549;
  _BYTE *v550;
  _BYTE *v551;
  char *v552;
  uint64_t v553;
  char *v554;
  char *v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  char *v559;
  float64x2_t *v560;
  float64x2_t *v561;
  uint64_t v562;
  float64x2_t v563;
  uint64_t v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  char *v574;
  uint64_t *m;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t *v586;
  unint64_t v587;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t *v592;
  uint64_t v594;
  uint64_t v595;
  int v596;
  void *v597;
  uint64_t v598;
  uint64_t v599;
  double v600;
  void *v601;
  size_t *v602;
  size_t *v603;
  unint64_t v604;
  char *v605;
  char **v606;
  size_t *v607;
  double v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  float v613;
  size_t v614;
  uint64_t *v615;
  uint64_t *v616;
  char *v617;
  char *v618;
  char *v619;
  size_t v620;
  unint64_t v621;
  uint8x8_t v622;
  void **v623;
  _QWORD *v624;
  uint64_t v625;
  unint64_t v627;
  uint64_t v629;
  float v630;
  _BOOL8 v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  uint8x8_t v635;
  uint64_t v636;
  float64_t v637;
  _QWORD *v638;
  unint64_t v639;
  int v640;
  uint64_t v641;
  unint64_t v642;
  unint64_t v643;
  char *v644;
  char *v645;
  uint64_t n;
  uint64_t v647;
  int v648;
  _QWORD *v649;
  _QWORD *v650;
  float64_t v651;
  uint64_t v652;
  char *v653;
  unint64_t v654;
  unsigned int v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t v660;
  double v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  unint64_t v665;
  unsigned int v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unsigned int v672;
  BOOL v673;
  int v674;
  size_t v675;
  void *v676;
  char *v677;
  char *v678;
  unint64_t v679;
  unint64_t v680;
  char *v681;
  unsigned int v682;
  BOOL v683;
  unint64_t v684;
  int8x8_t v685;
  BOOL v686;
  unint64_t v687;
  uint8x8_t v688;
  uint64_t v689;
  uint64_t *v690;
  uint64_t *v691;
  unsigned int v692;
  _DWORD *v693;
  unint64_t v694;
  unsigned int v695;
  unint64_t v696;
  unint64_t v697;
  char *v698;
  unsigned int v699;
  BOOL v700;
  int v701;
  float *v702;
  float *v703;
  float v704;
  double v708;
  int8x16_t v709;
  __int128 v710;
  uint64_t v711;
  int v712;
  uint64_t v713;
  uint64_t v714;
  char *v715;
  unint64_t v716;
  char *v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  _BYTE *v723;
  double *v724;
  char *v725;
  unint64_t v726;
  uint64_t v727;
  uint64_t v728;
  char *v729;
  float64x2_t *v730;
  float64x2_t *v731;
  uint64_t v732;
  float64x2_t v733;
  uint64_t v734;
  uint64_t v735;
  _QWORD *v736;
  unint64_t v737;
  char *v738;
  char *v739;
  _QWORD *v740;
  _QWORD *v741;
  _QWORD *v742;
  char *v744;
  int v745;
  uint64_t *v746;
  uint64_t v747;
  float64x2_t v748;
  int64x2_t v749;
  double v750;
  float64x2_t v752;
  float64x2_t v753;
  int8x16_t v754;
  uint64_t v755;
  float64_t v758;
  float64x2_t v759;
  uint64_t v760;
  float64x2_t v762;
  double v763;
  float64x2_t v764;
  double v765;
  uint64_t v767;
  double v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  int v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  unint64_t v785;
  unint64_t v786;
  char *v787;
  char *v788;
  char *ii;
  int v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  _QWORD *v795;
  _QWORD *v796;
  uint64_t v797;
  float64x2_t *v798;
  __int128 v799;
  void *v800;
  void *v801;
  __int128 v802;
  uint64_t *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  float64x2_t v811;
  int64x2_t v812;
  float64x2_t v814;
  float64x2_t v815;
  int8x16_t v816;
  float64x2_t v819;
  unint64_t v823;
  uint64_t v824;
  float64x2_t v826;
  double v827;
  float64x2_t v828;
  double v829;
  double v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  uint64_t *v840;
  uint64_t *v841;
  uint64_t v842;
  double *v843;
  __int128 v844;
  BOOL v845;
  int v846;
  float64x2_t v847;
  float64x2_t v848;
  uint64_t v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t v856;
  _DWORD *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  float64x2_t **v861;
  float64x2_t v862;
  float64x2_t v864;
  double v865;
  float64x2_t v866;
  float64x2_t *v867;
  double v868;
  double v870;
  double v872;
  float64x2_t *v874;
  float64x2_t v876;
  float64x2_t *v878;
  double v879;
  float64x2_t v880;
  int64x2_t v881;
  float64x2_t v883;
  double v888;
  float64x2_t v889;
  float64x2_t v890;
  uint64_t v892;
  uint64_t v893;
  _BOOL8 v894;
  _BOOL4 v895;
  int v896;
  uint64_t v897;
  uint64_t v898;
  double *v899;
  double v903;
  double v904;
  char v907;
  uint64_t v908;
  uint64_t jj;
  uint64_t v912;
  uint64_t v913;
  __int128 v914;
  __int16 v915;
  __int16 v916;
  uint64_t v917;
  float64_t v918;
  uint64_t v919;
  unint64_t v920;
  uint64_t *v921;
  uint64_t v922;
  unint64_t v923;
  unint64_t v925;
  uint64_t v926;
  uint64_t v927;
  int v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t *v932;
  float64x2_t **v933;
  unint64_t v934;
  uint64_t *v935;
  uint64_t *kk;
  uint64_t v937;
  double *v939;
  float64x2_t *v940;
  double *v941;
  double v942;
  double v943;
  float64x2_t v944;
  float64x2_t v946;
  double v948;
  double v950;
  double v952;
  double v953;
  float v954;
  float v955;
  double v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v963;
  uint64_t *v964;
  unsigned __int8 v965;
  char *v967;
  size_t v968;
  __darwin_time_t v969;
  uint64_t v970;
  uint64_t nn;
  uint64_t v972;
  unint64_t v973;
  uint64_t *v974;
  uint64_t *v975;
  unint64_t mm;
  unint64_t v977;
  uint64_t v978;
  uint8x8_t v979;
  unint64_t v980;
  uint64_t **v981;
  uint64_t *v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  BOOL v986;
  unint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  int v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  uint64_t v996;
  int v997;
  uint64_t v998;
  uint64_t v999;
  _BOOL4 v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  uint64_t *v1006;
  _QWORD *v1007;
  _QWORD *v1008;
  uint64_t v1009;
  uint64_t i1;
  unint64_t v1011;
  int8x8_t v1012;
  unint64_t v1013;
  uint8x8_t v1014;
  uint64_t v1015;
  uint64_t *v1016;
  uint64_t *v1017;
  _QWORD *v1018;
  unint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  uint8x8_t v1025;
  _QWORD *v1026;
  _QWORD *v1027;
  unint64_t v1028;
  uint64_t v1029;
  _QWORD *v1030;
  float v1031;
  float v1032;
  uint64_t v1033;
  _QWORD *v1034;
  _BOOL8 v1035;
  unint64_t v1036;
  unint64_t v1037;
  size_t v1038;
  unint64_t v1039;
  uint8x8_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  unint64_t v1043;
  int v1044;
  _QWORD *v1045;
  _QWORD *v1046;
  void *v1047;
  unint64_t v1049;
  uint64_t v1051;
  uint64_t *v1053;
  _QWORD *v1054;
  unint64_t v1055;
  _QWORD *v1056;
  uint64_t v1057;
  uint64_t v1061;
  uint64_t v1062;
  double *v1063;
  double v1064;
  uint64_t v1065;
  uint64_t v1066;
  double v1067;
  uint64_t *v1069;
  uint64_t v1070;
  double *v1071;
  uint64_t v1072;
  double *v1073;
  double v1074;
  double v1075;
  float64x2_t v1076;
  float64x2_t v1078;
  double v1080;
  double v1082;
  double v1084;
  double v1085;
  float v1086;
  float v1087;
  float v1088;
  double v1089;
  double *v1090;
  __int128 *v1091;
  __int128 *v1092;
  uint64_t v1093;
  uint64_t *p_tv_nsec;
  uint64_t *v1095;
  unsigned int v1096;
  unint64_t v1097;
  uint64_t tv_nsec;
  unsigned int v1099;
  unsigned int v1100;
  unint64_t v1101;
  unsigned int v1102;
  _QWORD *v1103;
  __int128 v1104;
  uint64_t v1105;
  uint64_t v1106;
  _BYTE *v1107;
  uint64_t v1108;
  _BYTE *v1109;
  int v1110;
  uint64_t v1111;
  int v1112;
  uint64_t *v1113;
  uint64_t v1114;
  uint64_t v1115;
  _QWORD *v1116;
  uint64_t v1117;
  __darwin_time_t tv_sec;
  unsigned int v1119;
  int v1120;
  timespec *v1121;
  timespec *v1122;
  uint64_t v1123;
  uint64_t v1124;
  unint64_t v1125;
  unint64_t v1126;
  uint64_t v1127;
  unsigned int v1128;
  BOOL v1129;
  int v1130;
  float64x2_t *v1131;
  uint64_t *v1132;
  float64x2_t v1133;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1140;
  float64x2_t **v1141;
  double v1142;
  float64x2_t v1144;
  float64x2_t v1146;
  double v1147;
  float64x2_t v1148;
  float64x2_t *v1149;
  float64x2_t v1150;
  float64x2_t *v1151;
  float64x2_t *v1153;
  float64x2_t v1154;
  double v1155;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t *v1161;
  float64x2_t v1162;
  float64x2_t *v1163;
  int64x2_t v1164;
  float64_t *v1165;
  int64x2_t v1166;
  double v1167;
  float64x2_t *v1169;
  float64x2_t v1171;
  float64x2_t v1174;
  double *v1175;
  float v1176;
  float v1177;
  _BOOL4 v1178;
  double v1179;
  uint64_t v1180;
  double v1181;
  int64x2_t v1182;
  char **v1183;
  uint64_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  _BYTE *v1187;
  unsigned int v1188;
  float64x2_t v1189;
  uint64_t v1190;
  float64x2_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  float64x2_t v1194;
  size_t *v1195;
  float64x2_t v1196;
  float64x2_t **v1197;
  char **v1198;
  size_t *v1199;
  float64x2_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  float64x2_t v1203;
  unsigned int v1204;
  _QWORD *v1205;
  unint64_t v1206;
  char *v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  double v1211;
  _QWORD *v1212;
  uint64_t v1213;
  size_t v1214;
  float64x2_t v1215;
  float64_t v1216;
  _QWORD *v1217;
  unint64_t v1218;
  unint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t **v1223;
  _QWORD *v1224;
  _QWORD v1225[2];
  uint64_t v1226;
  uint64_t v1227;
  int v1228;
  unint64_t v1229;
  _QWORD v1230[3];
  unint64_t v1231;
  BOOL v1232;
  uint64_t v1233;
  __int128 v1234;
  void *v1235;
  float64x2_t v1236;
  __int128 *v1237;
  char v1238;
  char v1239;
  void **__dst;
  size_t v1241;
  __int128 v1242;
  uint64_t v1243;
  int v1244;
  char v1245;
  double v1246;
  _BYTE v1247[24];
  std::__shared_weak_count *v1248;
  int v1249;
  char v1250;
  __int128 v1251;
  __int128 v1252;
  std::__shared_weak_count *v1253;
  int v1254;
  char v1255;
  BOOL v1256;
  __int128 v1257;
  __int128 v1258;
  float v1259;
  unsigned __int8 v1260;
  timespec v1261[3];
  const char *v1262;
  uint64_t v1263;
  std::__shared_weak_count *v1264;
  float64x2_t v1265;
  _BYTE __p[32];
  float64x2_t v1267;
  _BYTE v1268[72];
  uint64_t *v1269;
  uint64_t v1270;
  __int128 v1271;
  __int128 v1272;
  __int128 v1273;
  __int128 v1274;
  __int128 v1275;
  __int128 v1276;
  __int128 v1277;
  __int128 v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  uint64_t v1287;
  int64x2_t v1288;
  __int16 v1289;
  char v1290;
  char v1291;
  uint64_t v1292;
  unint64_t v1293;
  char v1294;
  void *v1295;
  char *v1296;
  uint64_t v1297;
  int v1298;
  __int128 v1299;
  char *v1300;
  void *object[8];
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  __int128 v1309;
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  uint64_t v1314;
  uint64_t v1315;

  v1315 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8216) + 1720))
  {
    LOBYTE(v1257) = 0;
    v1260 = 0;
    goto LABEL_43;
  }
  v1265 = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  if (!*(_DWORD *)(a1 + 1940)
    || (v2 = **(_QWORD **)(a1 + 7952), v3 = (_QWORD *)(v2 + 56), v4 = *(_QWORD **)(v2 + 48), (_QWORD *)(v2 + 56) == v4))
  {
    prime = 0;
    v1257 = 0uLL;
    v1258 = 0uLL;
    v1259 = 1.0;
    goto LABEL_22;
  }
  v5 = 0;
  do
  {
    v7 = (_QWORD *)*v3;
    v8 = v3;
    if (*v3)
    {
      do
      {
        v9 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v8[2];
        _ZF = *v9 == (_QWORD)v8;
        v8 = v9;
      }
      while (_ZF);
    }
    sub_20F28FE1C((uint64_t)&v1265, v9 + 4, (_OWORD *)v9 + 2);
    v10 = (_QWORD *)*v3;
    if (*v3)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v3[2];
        _ZF = *v11 == (_QWORD)v3;
        v3 = v11;
      }
      while (_ZF);
    }
    _ZF = ++v5 >= *(_DWORD *)(a1 + 1940) || v11 == v4;
    v3 = v11;
  }
  while (!_ZF);
  prime = *(_QWORD *)&v1265.f64[1];
  v1257 = 0u;
  v1258 = 0u;
  v1259 = *(float *)&__p[16];
  if (*(_QWORD *)&v1265.f64[1] != 1)
  {
LABEL_22:
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v13 = *(int8x8_t *)((char *)&v1257 + 8);
      _CF = prime >= *((_QWORD *)&v1257 + 1);
      if (prime > *((_QWORD *)&v1257 + 1))
        goto LABEL_36;
    }
    else
    {
      v13 = 0;
      _CF = 1;
      if (prime)
        goto LABEL_36;
    }
    if (_CF)
      goto LABEL_37;
    v15 = vcvtps_u32_f32((float)*((unint64_t *)&v1258 + 1) / v1259);
    if (*(_QWORD *)&v13 < 3uLL || (v16 = (uint8x8_t)vcnt_s8(v13), v16.i16[0] = vaddlv_u8(v16), v16.u32[0] > 1uLL))
    {
      v15 = std::__next_prime(v15);
    }
    else
    {
      v17 = 1 << -(char)__clz(v15 - 1);
      if (v15 >= 2)
        v15 = v17;
    }
    if (prime <= v15)
      prime = v15;
    if (prime >= *(_QWORD *)&v13)
      goto LABEL_37;
    goto LABEL_36;
  }
  prime = 2;
LABEL_36:
  sub_20E8D2B3C((uint64_t)&v1257, prime);
LABEL_37:
  v18 = *(_QWORD **)__p;
  if (!*(_QWORD *)__p)
  {
    v1260 = 1;
    v21 = v1265.f64[0];
    v1265.f64[0] = 0.0;
    if (v21 == 0.0)
      goto LABEL_43;
    goto LABEL_42;
  }
  do
  {
    sub_20F28FE1C((uint64_t)&v1257, v18 + 2, (_OWORD *)v18 + 1);
    v18 = (_QWORD *)*v18;
  }
  while (v18);
  v19 = *(_QWORD **)__p;
  v1260 = 1;
  if (*(_QWORD *)__p)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  v21 = v1265.f64[0];
  v1265.f64[0] = 0.0;
  if (v21 != 0.0)
LABEL_42:
    operator delete(*(void **)&v21);
LABEL_43:
  v1187 = (_BYTE *)(a1 + 7681);
  if (*(_BYTE *)(a1 + 1984) && *(_BYTE *)(*(_QWORD *)(a1 + 8216) + 1720))
    v22 = 0;
  else
    v22 = *(_DWORD *)(a1 + 1980);
  v1188 = v22;
  v23 = *(void **)(a1 + 14448);
  *(_QWORD *)(a1 + 14456) = v23;
  v24 = *(char ***)(*(_QWORD *)(a1 + 7952) + 16);
  v25 = *v1187;
  v26 = *(unsigned __int8 *)(a1 + 1978);
  LOBYTE(v1265.f64[0]) = 0;
  __p[24] = 0;
  v27 = *(void **)(a1 + 14384);
  *(_QWORD *)(a1 + 14392) = v27;
  v1198 = v24;
  v28 = (unint64_t)v24[2];
  if (v28 <= (uint64_t)(*(_QWORD *)(a1 + 14400) - (_QWORD)v27) >> 3)
  {
    v30 = (_QWORD *)a1;
  }
  else
  {
    if (v28 >> 61)
      goto LABEL_1588;
    v29 = (char *)operator new(8 * v28);
    v30 = (_QWORD *)a1;
    *(_QWORD *)(a1 + 14384) = v29;
    *(_QWORD *)(a1 + 14392) = v29;
    *(_QWORD *)(a1 + 14400) = &v29[8 * v28];
    if (v27)
    {
      operator delete(v27);
      v23 = *(void **)(a1 + 14448);
    }
  }
  v30[1807] = v23;
  v31 = (unint64_t)v1198[2];
  if (v31 > (uint64_t)(v30[1808] - (_QWORD)v23) >> 3)
  {
    if (v31 >> 61)
      goto LABEL_1588;
    v32 = (char *)operator new(8 * v31);
    v30 = (_QWORD *)a1;
    *(_QWORD *)(a1 + 14448) = v32;
    *(_QWORD *)(a1 + 14456) = v32;
    *(_QWORD *)(a1 + 14464) = &v32[8 * v31];
    if (v23)
      operator delete(v23);
  }
  v1217 = v30 + 1798;
  if (!v25 || !v26)
  {
    v88 = *v1198;
    v89 = v1198[1];
    v90 = **v1198;
    if (v90 <= -2)
    {
      do
      {
        v91 = (__clz(__rbit64(((*v88 >> 7) & ~*v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v88 = (_QWORD *)((char *)v88 + v91);
        v89 += 32 * v91;
        v90 = *(char *)v88;
      }
      while (v90 < -1);
    }
    while (1)
    {
      while (1)
      {
        if (v90 == 255)
          goto LABEL_518;
        v92 = *((_QWORD *)v89 + 2);
        if (*(_DWORD *)(v92 + 520) != 2)
          break;
        v93 = *(char **)(a1 + 14456);
        v94 = *(_QWORD *)(a1 + 14464);
        if ((unint64_t)v93 >= v94)
        {
          v99 = *(char **)(a1 + 14448);
          v1 = (v93 - v99) >> 3;
          v100 = v1 + 1;
          if ((v1 + 1) >> 61)
            goto LABEL_1588;
          v101 = v94 - (_QWORD)v99;
          if (v101 >> 2 > v100)
            v100 = v101 >> 2;
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
            v102 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v102 = v100;
          if (v102)
          {
            if (v102 >> 61)
              goto LABEL_1589;
            v103 = (char *)operator new(8 * v102);
            v104 = &v103[8 * v1];
            *(_QWORD *)v104 = v92;
            v95 = (uint64_t)(v104 + 8);
            v105 = (char *)(v93 - v99);
            if (v93 != v99)
              goto LABEL_152;
LABEL_180:
            *(_QWORD *)(a1 + 14448) = v104;
            *(_QWORD *)(a1 + 14456) = v95;
            *(_QWORD *)(a1 + 14464) = &v103[8 * v102];
            if (!v93)
              goto LABEL_160;
          }
          else
          {
            v103 = 0;
            v104 = (char *)(8 * v1);
            *(_QWORD *)(8 * v1) = v92;
            v95 = 8 * v1 + 8;
            v105 = (char *)(v93 - v99);
            if (v93 == v99)
              goto LABEL_180;
LABEL_152:
            v106 = (unint64_t)(v105 - 8);
            if (v106 < 0x58)
              goto LABEL_1622;
            if ((unint64_t)(v99 - v103) < 0x20)
              goto LABEL_1622;
            v107 = (v106 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v109 = &v93[-v108];
            v104 -= v108;
            v110 = &v103[8 * v1 - 16];
            v111 = v93 - 16;
            v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *(_OWORD *)v111;
              *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
              *(_OWORD *)v110 = v113;
              v110 -= 32;
              v111 -= 32;
              v112 -= 4;
            }
            while (v112);
            v93 = v109;
            if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1622:
              do
              {
                v114 = *((_QWORD *)v93 - 1);
                v93 -= 8;
                *((_QWORD *)v104 - 1) = v114;
                v104 -= 8;
              }
              while (v93 != v99);
            }
            v93 = *(char **)(a1 + 14448);
            *(_QWORD *)(a1 + 14448) = v104;
            *(_QWORD *)(a1 + 14456) = v95;
            *(_QWORD *)(a1 + 14464) = &v103[8 * v102];
            if (!v93)
              goto LABEL_160;
          }
          operator delete(v93);
          goto LABEL_160;
        }
        *(_QWORD *)v93 = v92;
        v95 = (uint64_t)(v93 + 8);
LABEL_160:
        *(_QWORD *)(a1 + 14456) = v95;
        v115 = *((char *)v88 + 1);
        v88 = (_QWORD *)((char *)v88 + 1);
        LOBYTE(v90) = v115;
        v89 += 32;
        if (v115 <= -2)
          goto LABEL_186;
      }
      v96 = *(char **)(a1 + 14392);
      v97 = *(_QWORD *)(a1 + 14400);
      if ((unint64_t)v96 >= v97)
      {
        v116 = (char *)*v1217;
        v117 = (uint64_t)&v96[-*v1217];
        v1 = v117 >> 3;
        v118 = (v117 >> 3) + 1;
        if (v118 >> 61)
          goto LABEL_1588;
        v119 = v97 - (_QWORD)v116;
        if (v119 >> 2 > v118)
          v118 = v119 >> 2;
        if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
          v120 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v120 = v118;
        if (v120)
        {
          if (v120 >> 61)
            goto LABEL_1589;
          v121 = operator new(8 * v120);
          v122 = &v121[8 * v1];
          *v122 = v92;
          v98 = (uint64_t)(v122 + 1);
          v123 = (char *)(v96 - v116);
          if (v96 != v116)
          {
LABEL_171:
            v124 = (unint64_t)(v123 - 8);
            if (v124 < 0x58)
              goto LABEL_1623;
            if ((unint64_t)(v96 - &v121[v117]) < 0x20)
              goto LABEL_1623;
            v125 = (v124 >> 3) + 1;
            v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
            v127 = &v96[-v126];
            v122 = (_QWORD *)((char *)v122 - v126);
            v128 = &v121[8 * v1 - 16];
            v129 = v96 - 16;
            v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v131 = *(_OWORD *)v129;
              *(v128 - 1) = *((_OWORD *)v129 - 1);
              *v128 = v131;
              v128 -= 2;
              v129 -= 32;
              v130 -= 4;
            }
            while (v130);
            v96 = v127;
            if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1623:
              do
              {
                v132 = *((_QWORD *)v96 - 1);
                v96 -= 8;
                *--v122 = v132;
              }
              while (v96 != v116);
            }
            v96 = (char *)*v1217;
            *(_QWORD *)(a1 + 14384) = v122;
            *(_QWORD *)(a1 + 14392) = v98;
            *(_QWORD *)(a1 + 14400) = &v121[8 * v120];
            if (!v96)
              goto LABEL_185;
LABEL_184:
            operator delete(v96);
            goto LABEL_185;
          }
        }
        else
        {
          v121 = 0;
          v122 = (_QWORD *)(8 * v1);
          *(_QWORD *)(8 * v1) = v92;
          v98 = 8 * v1 + 8;
          v123 = (char *)(v96 - v116);
          if (v96 != v116)
            goto LABEL_171;
        }
        *(_QWORD *)(a1 + 14384) = v122;
        *(_QWORD *)(a1 + 14392) = v98;
        *(_QWORD *)(a1 + 14400) = &v121[8 * v120];
        if (v96)
          goto LABEL_184;
      }
      else
      {
        *(_QWORD *)v96 = v92;
        v98 = (uint64_t)(v96 + 8);
      }
LABEL_185:
      *(_QWORD *)(a1 + 14392) = v98;
      v133 = *((char *)v88 + 1);
      v88 = (_QWORD *)((char *)v88 + 1);
      LOBYTE(v90) = v133;
      v89 += 32;
      if (v133 <= -2)
      {
        do
        {
LABEL_186:
          v134 = (__clz(__rbit64(((*v88 >> 7) & ~*v88 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v88 = (_QWORD *)((char *)v88 + v134);
          v89 += 32 * v134;
          v90 = *(char *)v88;
        }
        while (v90 < -1);
      }
    }
  }
  v33 = a1;
  if (*(_QWORD *)(a1 + 14432))
  {
    v34 = *(_QWORD **)(a1 + 14424);
    if (v34)
    {
      do
      {
        v86 = (_QWORD *)*v34;
        v87 = (void *)v34[3];
        if (v87)
        {
          v34[4] = v87;
          operator delete(v87);
        }
        operator delete(v34);
        v34 = v86;
      }
      while (v86);
    }
    *(_QWORD *)(a1 + 14424) = 0;
    v35 = *(_QWORD *)(a1 + 14416);
    if (v35)
    {
      for (i = 0; i != v35; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 14408) + 8 * i) = 0;
    }
    v33 = a1;
    *(_QWORD *)(a1 + 14432) = 0;
  }
  v1212 = (_QWORD *)(a1 + 14408);
  v37 = *(_QWORD *)(v33 + 3056);
  v1190 = *(_QWORD *)(v33 + 3064);
  while (v37 != v1190)
  {
    v38 = *(_QWORD *)(v37 + 8);
    v39 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v37 + 16) - v38) >> 7);
    if (v39 <= 1 && !*(_BYTE *)(v38 + 1592))
      goto LABEL_66;
    v1204 = *(_DWORD *)v37;
    v1192 = v37;
    if (*(_DWORD *)v37 >= 0x10000u)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1590;
      }
      v38 = *(_QWORD *)(v37 + 8);
      v39 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v37 + 16) - v38) >> 7);
    }
    v1201 = v39;
    if (!(_DWORD)v39)
      goto LABEL_114;
    v40 = 0;
    do
    {
      if (v1204 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v41 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v42 = qword_254A6DE40;
          for (j = qword_254A6DE48; v42 != j; v42 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v42)(*(_QWORD *)(v42 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_1590;
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v40 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v45 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v46 = qword_254A6DE40;
          for (k = qword_254A6DE48; v46 != k; v46 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v46)(*(_QWORD *)(v46 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v48 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_1590;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      LOWORD(object[0]) = v40;
      WORD1(object[0]) = v1204;
      v49 = sub_20FB98050((uint64_t)v1212, object[0], object);
      v50 = v49;
      v51 = (unint64_t)v1198[2];
      v52 = (_BYTE *)v49[3];
      if (v51 > (uint64_t)(v49[5] - (_QWORD)v52) >> 3)
      {
        if (v51 >> 61)
          goto LABEL_1588;
        v53 = (_BYTE *)v49[4];
        v54 = (char *)operator new(8 * v51);
        v55 = v53 - v52;
        v56 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
        v57 = v56;
        if (v53 != v52)
        {
          if ((unint64_t)(v55 - 8) < 0x58)
          {
            v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
            goto LABEL_102;
          }
          v57 = &v54[(v53 - v52) & 0xFFFFFFFFFFFFFFF8];
          if (v53 - v54 - (v55 & 0xFFFFFFFFFFFFFFF8) < 0x20)
            goto LABEL_1624;
          v58 = v55 >> 3;
          v59 = ((unint64_t)(v55 - 8) >> 3) + 1;
          v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
          v61 = &v53[-v60];
          v57 = &v56[-v60];
          v62 = &v54[8 * v58 - 16];
          v63 = (__int128 *)(v53 - 16);
          v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *v63;
            *((_OWORD *)v62 - 1) = *(v63 - 1);
            *(_OWORD *)v62 = v65;
            v62 -= 32;
            v63 -= 2;
            v64 -= 4;
          }
          while (v64);
          v53 = v61;
          if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1624:
            do
            {
LABEL_102:
              v66 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *((_QWORD *)v57 - 1) = v66;
              v57 -= 8;
            }
            while (v53 != v52);
          }
        }
        v50[3] = v57;
        v50[4] = v56;
        v50[5] = &v54[8 * v51];
        if (v52)
          operator delete(v52);
      }
      ++v40;
    }
    while (v40 != v1201);
    v37 = v1192;
    v38 = *(_QWORD *)(v1192 + 8);
LABEL_114:
    if (!*(_BYTE *)(v38 + 1592))
      goto LABEL_66;
    if (*(_DWORD *)(v38 + 1584) >= 0x10000u
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1590;
    }
    v67 = *(_DWORD *)(v38 + 1588);
    if (v67 < 0x10000)
      goto LABEL_120;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1590:
      abort();
    }
    LOWORD(v67) = *(_WORD *)(v38 + 1588);
LABEL_120:
    LOWORD(object[0]) = v67;
    WORD1(object[0]) = *(_DWORD *)(v38 + 1584);
    v68 = sub_20FB98050((uint64_t)v1212, object[0], object);
    v69 = v68;
    v70 = (unint64_t)v1198[2];
    v71 = (_BYTE *)v68[3];
    v37 = v1192;
    if (v70 > (uint64_t)(v68[5] - (_QWORD)v71) >> 3)
    {
      if (v70 >> 61)
        goto LABEL_1588;
      v72 = (_BYTE *)v68[4];
      v73 = (char *)operator new(8 * v70);
      v74 = v72 - v71;
      v75 = &v73[(v72 - v71) & 0xFFFFFFFFFFFFFFF8];
      v76 = v75;
      if (v72 != v71)
      {
        if ((unint64_t)(v74 - 8) < 0x58)
        {
          v76 = &v73[(v72 - v71) & 0xFFFFFFFFFFFFFFF8];
          goto LABEL_129;
        }
        v76 = &v73[(v72 - v71) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v72 - &v73[v74 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_1625;
        v77 = v74 >> 3;
        v78 = ((unint64_t)(v74 - 8) >> 3) + 1;
        v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        v80 = &v72[-v79];
        v76 = &v75[-v79];
        v81 = &v73[8 * v77 - 16];
        v82 = (__int128 *)(v72 - 16);
        v83 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *v82;
          *((_OWORD *)v81 - 1) = *(v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 2;
          v83 -= 4;
        }
        while (v83);
        v72 = v80;
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1625:
          do
          {
LABEL_129:
            v85 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *((_QWORD *)v76 - 1) = v85;
            v76 -= 8;
          }
          while (v72 != v71);
        }
      }
      v69[3] = v76;
      v69[4] = v75;
      v69[5] = &v73[8 * v70];
      v37 = v1192;
      if (v71)
        operator delete(v71);
    }
LABEL_66:
    v37 += 32;
  }
  v135 = *v1198;
  v136 = v1198[1];
  v137 = **v1198;
  if (v137 <= -2)
  {
    do
    {
      v138 = (__clz(__rbit64(((*v135 >> 7) & ~*v135 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v135 = (_QWORD *)((char *)v135 + v138);
      v136 += 32 * v138;
      v137 = *(char *)v135;
    }
    while (v137 < -1);
  }
  if (v137 != 255)
  {
    v1205 = (_QWORD *)(a1 + 14424);
    do
    {
      v139 = *((_QWORD *)v136 + 2);
      if (*(_DWORD *)(v139 + 520) != 2)
      {
        v143 = *(_QWORD *)(v139 + 496);
        v144 = *(_QWORD *)(v139 + 504);
        if ((unint64_t)(v144 - v143) >= 0x80)
        {
          v145 = *(_QWORD *)(a1 + 14416);
          if (v145)
          {
            v146 = *(unsigned int *)(v143 + 16);
            v147 = (uint8x8_t)vcnt_s8((int8x8_t)v145);
            v147.i16[0] = vaddlv_u8(v147);
            v148 = v147.u32[0];
            if (v147.u32[0] > 1uLL)
            {
              v149 = *(unsigned int *)(v143 + 16);
              if (v145 <= v146)
                v149 = v146 % v145;
            }
            else
            {
              v149 = ((_DWORD)v145 - 1) & v146;
            }
            v169 = *(uint64_t ***)(*v1212 + 8 * v149);
            if (v169)
            {
              v170 = *v169;
              if (*v169)
              {
                v171 = v145 - 1;
                if (v147.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v172 = v170[1];
                    if (v172 == v146)
                    {
                      if (*((_DWORD *)v170 + 4) == (_DWORD)v146)
                        goto LABEL_266;
                    }
                    else if ((v172 & v171) != v149)
                    {
                      goto LABEL_240;
                    }
                    v170 = (uint64_t *)*v170;
                    if (!v170)
                      goto LABEL_240;
                  }
                }
                do
                {
                  v173 = v170[1];
                  if (v173 == v146)
                  {
                    if (*((_DWORD *)v170 + 4) == (_DWORD)v146)
                    {
LABEL_266:
                      if ((_DWORD)v146 == *(_DWORD *)(v144 - 48))
                      {
                        if (v147.u32[0] > 1uLL)
                        {
                          v197 = v146;
                          if (v145 <= v146)
                            v197 = v146 % v145;
                        }
                        else
                        {
                          v197 = ((_DWORD)v145 - 1) & v146;
                        }
                        v208 = *(void ***)(*v1212 + 8 * v197);
                        if (v208)
                        {
                          v209 = *v208;
                          if (*v208)
                          {
                            if (v147.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v210 = v209[1];
                                if (v210 == v146)
                                {
                                  if (*((_DWORD *)v209 + 4) == (_DWORD)v146)
                                    goto LABEL_348;
                                }
                                else if ((v210 & v171) != v197)
                                {
                                  goto LABEL_297;
                                }
                                v209 = (_QWORD *)*v209;
                                if (!v209)
                                  goto LABEL_297;
                              }
                            }
                            do
                            {
                              v211 = v209[1];
                              if (v211 == v146)
                              {
                                if (*((_DWORD *)v209 + 4) == (_DWORD)v146)
                                  goto LABEL_348;
                              }
                              else
                              {
                                if (v211 >= v145)
                                  v211 %= v145;
                                if (v211 != v197)
                                  break;
                              }
                              v209 = (_QWORD *)*v209;
                            }
                            while (v209);
                          }
                        }
LABEL_297:
                        v209 = operator new(0x30uLL);
                        object[0] = v209;
                        object[1] = (void *)(a1 + 14424);
                        *v209 = 0;
                        v209[1] = v146;
                        *((_DWORD *)v209 + 4) = v146;
                        v209[4] = 0;
                        v209[5] = 0;
                        v209[3] = 0;
                        v212 = (float)(unint64_t)(*(_QWORD *)(a1 + 14432) + 1);
                        LOBYTE(object[2]) = 1;
                        v213 = *(float *)(a1 + 14440);
                        if ((float)(v213 * (float)v145) >= v212)
                        {
                          v146 = v197;
                          v219 = (uint64_t *)(a1 + 14408);
                        }
                        else
                        {
                          v214 = v145 < 3 || v148 > 1;
                          v215 = v214;
                          v216 = v215 | (2 * v145);
                          v217 = vcvtps_u32_f32(v212 / v213);
                          if (v216 <= v217)
                            v218 = v217;
                          else
                            v218 = v216;
                          v219 = (uint64_t *)(a1 + 14408);
                          if (v218 == 1)
                          {
                            v218 = 2;
                          }
                          else if ((v218 & (v218 - 1)) != 0)
                          {
                            v218 = std::__next_prime(v218);
                            v145 = *(_QWORD *)(a1 + 14416);
                          }
                          if (v218 > v145)
                            goto LABEL_313;
                          if (v218 < v145)
                          {
                            v220 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 14432) / *(float *)(a1 + 14440));
                            if (v145 < 3
                              || (v221 = (uint8x8_t)vcnt_s8((int8x8_t)v145),
                                  v221.i16[0] = vaddlv_u8(v221),
                                  v221.u32[0] > 1uLL))
                            {
                              v220 = std::__next_prime(v220);
                            }
                            else
                            {
                              v222 = 1 << -(char)__clz(v220 - 1);
                              if (v220 >= 2)
                                v220 = v222;
                            }
                            if (v218 <= v220)
                              v218 = v220;
                            if (v218 < v145)
LABEL_313:
                              sub_20E8D2B3C((uint64_t)v1212, v218);
                          }
                          v145 = *(_QWORD *)(a1 + 14416);
                          if ((v145 & (v145 - 1)) != 0)
                          {
                            if (v145 <= v146)
                              v146 %= v145;
                          }
                          else
                          {
                            v146 = ((_DWORD)v145 - 1) & v146;
                          }
                        }
                        v232 = *v219;
                        v233 = *(_QWORD **)(*v219 + 8 * v146);
                        if (v233)
                        {
                          *v209 = *v233;
                          goto LABEL_346;
                        }
                        *v209 = *v1205;
                        *v1205 = v209;
                        *(_QWORD *)(v232 + 8 * v146) = v1205;
                        if (*v209)
                        {
                          v234 = *(_QWORD *)(*v209 + 8);
                          if ((v145 & (v145 - 1)) != 0)
                          {
                            if (v234 >= v145)
                              v234 %= v145;
                          }
                          else
                          {
                            v234 &= v145 - 1;
                          }
                          v233 = (_QWORD *)(*v219 + 8 * v234);
LABEL_346:
                          *v233 = v209;
                        }
                        ++*(_QWORD *)(a1 + 14432);
                        v139 = *((_QWORD *)v136 + 2);
LABEL_348:
                        v236 = (char *)v209[4];
                        v235 = v209[5];
                        if ((unint64_t)v236 < v235)
                        {
                          *(_QWORD *)v236 = v139;
                          v237 = (uint64_t)(v236 + 8);
                          goto LABEL_370;
                        }
                        v238 = (char *)v209[3];
                        v239 = (v236 - v238) >> 3;
                        v240 = v239 + 1;
                        if (!((unint64_t)(v239 + 1) >> 61))
                        {
                          v241 = v235 - (_QWORD)v238;
                          if (v241 >> 2 > v240)
                            v240 = v241 >> 2;
                          if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF8)
                            v242 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v242 = v240;
                          if (!v242)
                          {
                            v243 = 0;
                            v244 = (char *)(8 * v239);
                            *(_QWORD *)(8 * v239) = v139;
                            v237 = 8 * v239 + 8;
                            v245 = (char *)(v236 - v238);
                            if (v236 != v238)
                              goto LABEL_359;
                            goto LABEL_368;
                          }
                          if (!(v242 >> 61))
                          {
                            v243 = (char *)operator new(8 * v242);
                            v244 = &v243[8 * v239];
                            *(_QWORD *)v244 = v139;
                            v237 = (uint64_t)(v244 + 8);
                            v245 = (char *)(v236 - v238);
                            if (v236 != v238)
                            {
LABEL_359:
                              v246 = (unint64_t)(v245 - 8);
                              if (v246 < 0x58)
                                goto LABEL_1626;
                              if ((unint64_t)(v238 - v243) < 0x20)
                                goto LABEL_1626;
                              v247 = (v246 >> 3) + 1;
                              v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                              v249 = &v236[-v248];
                              v244 -= v248;
                              v250 = &v243[8 * v239 - 16];
                              v251 = v236 - 16;
                              v252 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v253 = *(_OWORD *)v251;
                                *((_OWORD *)v250 - 1) = *((_OWORD *)v251 - 1);
                                *(_OWORD *)v250 = v253;
                                v250 -= 32;
                                v251 -= 32;
                                v252 -= 4;
                              }
                              while (v252);
                              v236 = v249;
                              if (v247 != (v247 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_1626:
                                do
                                {
                                  v254 = *((_QWORD *)v236 - 1);
                                  v236 -= 8;
                                  *((_QWORD *)v244 - 1) = v254;
                                  v244 -= 8;
                                }
                                while (v236 != v238);
                              }
                              v236 = (char *)v209[3];
                              v209[3] = v244;
                              v209[4] = v237;
                              v209[5] = &v243[8 * v242];
                              if (!v236)
                              {
LABEL_370:
                                v209[4] = v237;
                                v256 = *((char *)v135 + 1);
                                v135 = (_QWORD *)((char *)v135 + 1);
                                LOBYTE(v167) = v256;
                                v136 += 32;
                                if (v256 > -2)
                                  goto LABEL_193;
                                goto LABEL_255;
                              }
LABEL_369:
                              v255 = v237;
                              operator delete(v236);
                              v237 = v255;
                              goto LABEL_370;
                            }
LABEL_368:
                            v209[3] = v244;
                            v209[4] = v237;
                            v209[5] = &v243[8 * v242];
                            if (!v236)
                              goto LABEL_370;
                            goto LABEL_369;
                          }
LABEL_1589:
                          sub_20E877A38();
                        }
LABEL_1588:
                        sub_20E867F44();
                      }
                      v174 = *(char **)(a1 + 14392);
                      v198 = *(_QWORD *)(a1 + 14400);
                      if ((unint64_t)v174 >= v198)
                      {
                        v199 = (char *)*v1217;
                        v200 = (uint64_t)&v174[-*v1217];
                        v201 = v200 >> 3;
                        v202 = (v200 >> 3) + 1;
                        if (v202 >> 61)
                          goto LABEL_1588;
                        v203 = v198 - (_QWORD)v199;
                        if (v203 >> 2 > v202)
                          v202 = v203 >> 2;
                        if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8)
                          v204 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v204 = v202;
                        if (v204)
                        {
                          if (v204 >> 61)
                            goto LABEL_1589;
                          v205 = operator new(8 * v204);
                          v206 = &v205[8 * v201];
                          *v206 = v139;
                          v176 = (uint64_t)(v206 + 1);
                          v207 = (char *)(v174 - v199);
                          if (v174 == v199)
                          {
LABEL_328:
                            *(_QWORD *)(a1 + 14384) = v206;
                            *(_QWORD *)(a1 + 14392) = v176;
                            *(_QWORD *)(a1 + 14400) = &v205[8 * v204];
                            if (!v174)
                              goto LABEL_253;
LABEL_252:
                            operator delete(v174);
                            goto LABEL_253;
                          }
                        }
                        else
                        {
                          v205 = 0;
                          v206 = (_QWORD *)(8 * v201);
                          *(_QWORD *)(8 * v201) = v139;
                          v176 = 8 * v201 + 8;
                          v207 = (char *)(v174 - v199);
                          if (v174 == v199)
                            goto LABEL_328;
                        }
                        v223 = (unint64_t)(v207 - 8);
                        if (v223 < 0x58)
                          goto LABEL_1627;
                        if ((unint64_t)(v174 - v205 - v200) < 0x20)
                          goto LABEL_1627;
                        v224 = (v223 >> 3) + 1;
                        v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
                        v226 = &v174[-v225];
                        v206 = (_QWORD *)((char *)v206 - v225);
                        v227 = &v205[8 * v201 - 16];
                        v228 = v174 - 16;
                        v229 = v224 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v230 = *(_OWORD *)v228;
                          *(v227 - 1) = *((_OWORD *)v228 - 1);
                          *v227 = v230;
                          v227 -= 2;
                          v228 -= 32;
                          v229 -= 4;
                        }
                        while (v229);
                        v174 = v226;
                        if (v224 != (v224 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_1627:
                          do
                          {
                            v231 = *((_QWORD *)v174 - 1);
                            v174 -= 8;
                            *--v206 = v231;
                          }
                          while (v174 != v199);
                        }
                        v174 = (char *)*v1217;
                        goto LABEL_328;
                      }
LABEL_241:
                      *(_QWORD *)v174 = v139;
                      v176 = (uint64_t)(v174 + 8);
                      goto LABEL_253;
                    }
                  }
                  else
                  {
                    if (v173 >= v145)
                      v173 %= v145;
                    if (v173 != v149)
                      break;
                  }
                  v170 = (uint64_t *)*v170;
                }
                while (v170);
              }
            }
          }
LABEL_240:
          v174 = *(char **)(a1 + 14392);
          v175 = *(_QWORD *)(a1 + 14400);
          if ((unint64_t)v174 < v175)
            goto LABEL_241;
          v177 = (char *)*v1217;
          v178 = (uint64_t)&v174[-*v1217];
          v179 = v178 >> 3;
          v180 = (v178 >> 3) + 1;
          if (v180 >> 61)
            goto LABEL_1588;
          v181 = v175 - (_QWORD)v177;
          if (v181 >> 2 > v180)
            v180 = v181 >> 2;
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
            v182 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v182 = v180;
          if (v182)
          {
            if (v182 >> 61)
              goto LABEL_1589;
            v183 = operator new(8 * v182);
            v184 = &v183[8 * v179];
            *v184 = v139;
            v176 = (uint64_t)(v184 + 1);
            v185 = (char *)(v174 - v177);
            if (v174 == v177)
            {
LABEL_251:
              *(_QWORD *)(a1 + 14384) = v184;
              *(_QWORD *)(a1 + 14392) = v176;
              *(_QWORD *)(a1 + 14400) = &v183[8 * v182];
              if (!v174)
                goto LABEL_253;
              goto LABEL_252;
            }
          }
          else
          {
            v183 = 0;
            v184 = (_QWORD *)(8 * v179);
            *(_QWORD *)(8 * v179) = v139;
            v176 = 8 * v179 + 8;
            v185 = (char *)(v174 - v177);
            if (v174 == v177)
              goto LABEL_251;
          }
          v188 = (unint64_t)(v185 - 8);
          if (v188 < 0x58)
            goto LABEL_1628;
          if ((unint64_t)(v174 - &v183[v178]) < 0x20)
            goto LABEL_1628;
          v189 = (v188 >> 3) + 1;
          v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
          v191 = &v174[-v190];
          v184 = (_QWORD *)((char *)v184 - v190);
          v192 = &v183[8 * v179 - 16];
          v193 = v174 - 16;
          v194 = v189 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v195 = *(_OWORD *)v193;
            *(v192 - 1) = *((_OWORD *)v193 - 1);
            *v192 = v195;
            v192 -= 2;
            v193 -= 32;
            v194 -= 4;
          }
          while (v194);
          v174 = v191;
          if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1628:
            do
            {
              v196 = *((_QWORD *)v174 - 1);
              v174 -= 8;
              *--v184 = v196;
            }
            while (v174 != v177);
          }
          v174 = (char *)*v1217;
          *(_QWORD *)(a1 + 14384) = v184;
          *(_QWORD *)(a1 + 14392) = v176;
          *(_QWORD *)(a1 + 14400) = &v183[8 * v182];
          if (v174)
            goto LABEL_252;
LABEL_253:
          *(_QWORD *)(a1 + 14392) = v176;
        }
        v186 = *((char *)v135 + 1);
        v135 = (_QWORD *)((char *)v135 + 1);
        LOBYTE(v167) = v186;
        v136 += 32;
        if (v186 > -2)
          continue;
        goto LABEL_255;
      }
      v140 = *(char **)(a1 + 14456);
      v141 = *(_QWORD *)(a1 + 14464);
      if ((unint64_t)v140 < v141)
      {
        *(_QWORD *)v140 = v139;
        v142 = (uint64_t)(v140 + 8);
        goto LABEL_218;
      }
      v150 = *(char **)(a1 + 14448);
      v151 = (v140 - v150) >> 3;
      v152 = v151 + 1;
      if ((unint64_t)(v151 + 1) >> 61)
        goto LABEL_1588;
      v153 = v141 - (_QWORD)v150;
      if (v153 >> 2 > v152)
        v152 = v153 >> 2;
      if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
        v154 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v154 = v152;
      if (v154)
      {
        if (v154 >> 61)
          goto LABEL_1589;
        v155 = (char *)operator new(8 * v154);
        v156 = &v155[8 * v151];
        *(_QWORD *)v156 = v139;
        v142 = (uint64_t)(v156 + 8);
        v157 = (char *)(v140 - v150);
        if (v140 == v150)
        {
LABEL_221:
          *(_QWORD *)(a1 + 14448) = v156;
          *(_QWORD *)(a1 + 14456) = v142;
          *(_QWORD *)(a1 + 14464) = &v155[8 * v154];
          if (v140)
            goto LABEL_217;
          goto LABEL_218;
        }
      }
      else
      {
        v155 = 0;
        v156 = (char *)(8 * v151);
        *(_QWORD *)(8 * v151) = v139;
        v142 = 8 * v151 + 8;
        v157 = (char *)(v140 - v150);
        if (v140 == v150)
          goto LABEL_221;
      }
      v158 = (unint64_t)(v157 - 8);
      if (v158 < 0x58)
        goto LABEL_1629;
      if ((unint64_t)(v150 - v155) < 0x20)
        goto LABEL_1629;
      v159 = (v158 >> 3) + 1;
      v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
      v161 = &v140[-v160];
      v156 -= v160;
      v162 = &v155[8 * v151 - 16];
      v163 = v140 - 16;
      v164 = v159 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v165 = *(_OWORD *)v163;
        *((_OWORD *)v162 - 1) = *((_OWORD *)v163 - 1);
        *(_OWORD *)v162 = v165;
        v162 -= 32;
        v163 -= 32;
        v164 -= 4;
      }
      while (v164);
      v140 = v161;
      if (v159 != (v159 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1629:
        do
        {
          v166 = *((_QWORD *)v140 - 1);
          v140 -= 8;
          *((_QWORD *)v156 - 1) = v166;
          v156 -= 8;
        }
        while (v140 != v150);
      }
      v140 = *(char **)(a1 + 14448);
      *(_QWORD *)(a1 + 14448) = v156;
      *(_QWORD *)(a1 + 14456) = v142;
      *(_QWORD *)(a1 + 14464) = &v155[8 * v154];
      if (v140)
LABEL_217:
        operator delete(v140);
LABEL_218:
      *(_QWORD *)(a1 + 14456) = v142;
      v168 = *((char *)v135 + 1);
      v135 = (_QWORD *)((char *)v135 + 1);
      LOBYTE(v167) = v168;
      v136 += 32;
      if (v168 > -2)
        continue;
      do
      {
LABEL_255:
        v187 = (__clz(__rbit64(((*v135 >> 7) & ~*v135 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v135 = (_QWORD *)((char *)v135 + v187);
        v136 += 32 * v187;
        v167 = *(char *)v135;
      }
      while (v167 < -1);
LABEL_193:
      ;
    }
    while (v167 != 255);
  }
  v1 = *(size_t *)(a1 + 14424);
  v257 = v1188;
  if (*(double *)&v1 != 0.0)
  {
    v258 = v1188;
    do
    {
      v260 = *(char **)(v1 + 24);
      v259 = *(char **)(v1 + 32);
      v261 = v259 - v260;
      if (v258 >= (v259 - v260) >> 3)
        goto LABEL_463;
      v262 = &v260[8 * v258];
      if (v262 == v259)
        goto LABEL_463;
      do
      {
        v263 = (v259 - v260) >> 3;
        if (v263 < 2)
          break;
        if (v263 == 3)
        {
          v299 = *(_QWORD *)v260;
          v300 = *((_QWORD *)v260 + 1);
          v301 = *(_QWORD *)(v300 + 504) - *(_QWORD *)(v300 + 496);
          v302 = *((_QWORD *)v259 - 1);
          v303 = *(_QWORD *)(v302 + 504) - *(_QWORD *)(v302 + 496);
          if (v301 <= *(_QWORD *)(*(_QWORD *)v260 + 504) - *(_QWORD *)(*(_QWORD *)v260 + 496))
          {
            if (v303 > v301)
            {
              *((_QWORD *)v260 + 1) = v302;
              *((_QWORD *)v259 - 1) = v300;
              v315 = *(_QWORD *)v260;
              v314 = *((_QWORD *)v260 + 1);
              if (*(_QWORD *)(v314 + 504) - *(_QWORD *)(v314 + 496) > *(_QWORD *)(*(_QWORD *)v260 + 504)
                                                                     - *(_QWORD *)(*(_QWORD *)v260 + 496))
              {
                *(_QWORD *)v260 = v314;
                *((_QWORD *)v260 + 1) = v315;
              }
            }
          }
          else
          {
            if (v303 <= v301)
            {
              *(_QWORD *)v260 = v300;
              *((_QWORD *)v260 + 1) = v299;
              v316 = *((_QWORD *)v259 - 1);
              if (*(_QWORD *)(v316 + 504) - *(_QWORD *)(v316 + 496) <= *(_QWORD *)(v299 + 504)
                                                                      - *(_QWORD *)(v299 + 496))
                break;
              *((_QWORD *)v260 + 1) = v316;
            }
            else
            {
              *(_QWORD *)v260 = v302;
            }
            *((_QWORD *)v259 - 1) = v299;
          }
          break;
        }
        if (v263 == 2)
        {
          v304 = *((_QWORD *)v259 - 1);
          v305 = *(_QWORD *)v260;
          if (*(_QWORD *)(v304 + 504) - *(_QWORD *)(v304 + 496) > *(_QWORD *)(*(_QWORD *)v260 + 504)
                                                                 - *(_QWORD *)(*(_QWORD *)v260 + 496))
          {
            *(_QWORD *)v260 = v304;
            *((_QWORD *)v259 - 1) = v305;
          }
          break;
        }
        if (v259 - v260 <= 63)
        {
          while (v260 != v259 - 8)
          {
            v306 = v260;
            v260 += 8;
            if (v306 != v259 && v260 != v259)
            {
              v307 = *(_QWORD *)v306;
              v308 = *(_QWORD *)v306;
              v309 = v260;
              v310 = v306;
              v311 = v260;
              do
              {
                v313 = *(_QWORD *)v311;
                v311 += 8;
                v312 = v313;
                if (*(_QWORD *)(v313 + 504) - *(_QWORD *)(v313 + 496) > *(_QWORD *)(v308 + 504)
                                                                       - *(_QWORD *)(v308 + 496))
                {
                  v308 = v312;
                  v310 = v309;
                }
                v309 = v311;
              }
              while (v311 != v259);
              if (v310 != v306)
              {
                *(_QWORD *)v306 = *(_QWORD *)v310;
                *(_QWORD *)v310 = v307;
              }
            }
          }
          break;
        }
        v264 = &v260[8 * (v263 >> 1)];
        v265 = (unint64_t)(v259 - 8);
        v266 = *((_QWORD *)v259 - 1);
        v267 = *(_QWORD *)v264;
        v268 = *(_QWORD *)v260;
        v269 = *(_QWORD *)(*(_QWORD *)v264 + 504) - *(_QWORD *)(*(_QWORD *)v264 + 496);
        v270 = *(_QWORD *)(v266 + 504) - *(_QWORD *)(v266 + 496);
        if (v269 > *(_QWORD *)(*(_QWORD *)v260 + 504) - *(_QWORD *)(*(_QWORD *)v260 + 496))
        {
          if (v270 <= v269)
          {
            *(_QWORD *)v260 = v267;
            *(_QWORD *)v264 = v268;
            if (*(_QWORD *)(*(_QWORD *)v265 + 504) - *(_QWORD *)(*(_QWORD *)v265 + 496) > *(_QWORD *)(v268 + 504)
                                                                                             - *(_QWORD *)(v268 + 496))
            {
              *(_QWORD *)v264 = *(_QWORD *)v265;
              *(_QWORD *)v265 = v268;
              goto LABEL_389;
            }
          }
          else
          {
            *(_QWORD *)v260 = v266;
            *(_QWORD *)v265 = v268;
          }
LABEL_390:
          v272 = 1;
          goto LABEL_392;
        }
        if (v270 > v269)
        {
          *(_QWORD *)v264 = v266;
          *(_QWORD *)v265 = v267;
          v271 = *(_QWORD *)v260;
          if (*(_QWORD *)(*(_QWORD *)v264 + 504) - *(_QWORD *)(*(_QWORD *)v264 + 496) > *(_QWORD *)(*(_QWORD *)v260 + 504)
                                                                                           - *(_QWORD *)(*(_QWORD *)v260 + 496))
          {
            *(_QWORD *)v260 = *(_QWORD *)v264;
            *(_QWORD *)v264 = v271;
LABEL_389:
            v272 = 2;
            goto LABEL_392;
          }
          goto LABEL_390;
        }
        v272 = 0;
LABEL_392:
        v273 = *(_QWORD *)v260;
        v274 = *(_QWORD *)(*(_QWORD *)v260 + 504) - *(_QWORD *)(*(_QWORD *)v260 + 496);
        v275 = *(_QWORD *)(*(_QWORD *)v264 + 504) - *(_QWORD *)(*(_QWORD *)v264 + 496);
        if (v274 <= v275)
        {
          v276 = (unint64_t)(v259 - 8);
          while (1)
          {
            v276 -= 8;
            if ((char *)v276 == v260)
              break;
            if (*(_QWORD *)(*(_QWORD *)v276 + 504) - *(_QWORD *)(*(_QWORD *)v276 + 496) > v275)
            {
              *(_QWORD *)v260 = *(_QWORD *)v276;
              *(_QWORD *)v276 = v273;
              ++v272;
              v277 = v260 + 8;
              if ((unint64_t)(v260 + 8) < v276)
                goto LABEL_394;
              goto LABEL_407;
            }
          }
          v288 = (uint64_t *)(v260 + 8);
          if (v274 <= *(_QWORD *)(*(_QWORD *)v265 + 504) - *(_QWORD *)(*(_QWORD *)v265 + 496))
          {
            if (v288 == (uint64_t *)v265)
              break;
            while (1)
            {
              v289 = *v288;
              if (v274 > *(_QWORD *)(*v288 + 504) - *(_QWORD *)(*v288 + 496))
                break;
              if (++v288 == (uint64_t *)v265)
                goto LABEL_462;
            }
            *v288++ = *(_QWORD *)v265;
            *(_QWORD *)v265 = v289;
          }
          if (v288 == (uint64_t *)v265)
            break;
          while (1)
          {
            v293 = *(_QWORD *)(*(_QWORD *)v260 + 504) - *(_QWORD *)(*(_QWORD *)v260 + 496);
            do
            {
              v295 = *v288++;
              v294 = v295;
            }
            while (v293 <= *(_QWORD *)(v295 + 504) - *(_QWORD *)(v295 + 496));
            v296 = (char *)(v288 - 1);
            do
            {
              v298 = *(_QWORD *)(v265 - 8);
              v265 -= 8;
              v297 = v298;
            }
            while (v293 > *(_QWORD *)(v298 + 504) - *(_QWORD *)(v298 + 496));
            if ((unint64_t)v296 >= v265)
              break;
            *(_QWORD *)v296 = v297;
            *(_QWORD *)v265 = v294;
          }
          v260 = (char *)(v288 - 1);
          if (v296 > v262)
            break;
        }
        else
        {
          v276 = (unint64_t)(v259 - 8);
          v277 = v260 + 8;
          if (v260 + 8 >= v259 - 8)
          {
LABEL_407:
            v282 = v277;
          }
          else
          {
LABEL_394:
            v278 = (uint64_t *)v277;
            while (1)
            {
              v279 = *(_QWORD *)(*(_QWORD *)v264 + 504) - *(_QWORD *)(*(_QWORD *)v264 + 496);
              do
              {
                v281 = *v278++;
                v280 = v281;
              }
              while (*(_QWORD *)(v281 + 504) - *(_QWORD *)(v281 + 496) > v279);
              v282 = (char *)(v278 - 1);
              do
              {
                v284 = *(_QWORD *)(v276 - 8);
                v276 -= 8;
                v283 = v284;
              }
              while (*(_QWORD *)(v284 + 504) - *(_QWORD *)(v284 + 496) <= v279);
              if ((unint64_t)v282 >= v276)
                break;
              *(_QWORD *)v282 = v283;
              *(_QWORD *)v276 = v280;
              ++v272;
              if (v282 == v264)
                v264 = (char *)v276;
            }
          }
          if (v282 != v264)
          {
            v285 = *(_QWORD *)v282;
            if (*(_QWORD *)(*(_QWORD *)v264 + 504) - *(_QWORD *)(*(_QWORD *)v264 + 496) > *(_QWORD *)(*(_QWORD *)v282 + 504)
                                                                                             - *(_QWORD *)(*(_QWORD *)v282 + 496))
            {
              *(_QWORD *)v282 = *(_QWORD *)v264;
              *(_QWORD *)v264 = v285;
              ++v272;
            }
          }
          if (v282 == v262)
            break;
          if (!v272)
          {
            if (v282 <= v262)
            {
              v290 = v282 + 8;
              while (v290 != v259)
              {
                v291 = *(_QWORD *)(*(_QWORD *)v290 + 504) - *(_QWORD *)(*(_QWORD *)v290 + 496);
                v292 = *(_QWORD *)(*((_QWORD *)v290 - 1) + 504) - *(_QWORD *)(*((_QWORD *)v290 - 1) + 496);
                v290 += 8;
                if (v291 > v292)
                  goto LABEL_413;
              }
            }
            else
            {
              while (v277 != v282)
              {
                v286 = *(_QWORD *)(*(_QWORD *)v277 + 504) - *(_QWORD *)(*(_QWORD *)v277 + 496);
                v287 = *(_QWORD *)(*((_QWORD *)v277 - 1) + 504) - *(_QWORD *)(*((_QWORD *)v277 - 1) + 496);
                v277 += 8;
                if (v286 > v287)
                  goto LABEL_413;
              }
            }
            break;
          }
LABEL_413:
          if (v282 <= v262)
            v260 = v282 + 8;
          else
            v259 = v282;
        }
      }
      while (v259 != v262);
LABEL_462:
      v260 = *(char **)(v1 + 24);
      v261 = *(_QWORD *)(v1 + 32) - (_QWORD)v260;
LABEL_463:
      if ((v261 >> 3) >= v257)
        v317 = v257;
      else
        v317 = (v261 >> 3);
      if (!(_DWORD)v317)
        goto LABEL_374;
      v318 = *(char **)(a1 + 14392);
      v319 = *(char **)(a1 + 14384);
      v320 = v318 - v319;
      v321 = (v318 - v319) >> 3;
      v322 = &v319[(v318 - v319) & 0xFFFFFFFFFFFFFFF8];
      v323 = *(_QWORD *)(a1 + 14400);
      if (v317 <= (v323 - (uint64_t)v318) >> 3)
      {
        v328 = v318 - v322;
        v329 = v328 >> 3;
        if (v328 >> 3 >= v317)
        {
          v331 = &v260[8 * v317];
          v333 = *(char **)(a1 + 14392);
          v334 = &v319[(v318 - v319) & 0xFFFFFFFFFFFFFFF8];
        }
        else
        {
          v330 = &v260[8 * v317];
          v331 = &v260[8 * v329];
          v332 = v330 - v331;
          if (v330 != v331)
          {
            v1207 = &v260[8 * v329];
            memmove(*(void **)(a1 + 14392), v1207, v330 - v331);
            v321 = (v318 - v319) >> 3;
            v331 = v1207;
          }
          v333 = &v318[v332];
          *(_QWORD *)(a1 + 14392) = &v318[v332];
          v214 = v328 < 1;
          v257 = v1188;
          v334 = &v319[(v318 - v319) & 0xFFFFFFFFFFFFFFF8];
          v258 = v1188;
          if (v214)
            goto LABEL_374;
        }
        v335 = &v334[8 * v317];
        v336 = v333 - v335;
        v337 = (v333 - v335) >> 3;
        v338 = &v333[-8 * v317];
        v339 = v333;
        if (v338 < v318)
        {
          v340 = (v320 & 0xFFFFFFFFFFFFFFF8) + v336;
          v341 = (unint64_t)&v319[v340 + 8];
          if ((unint64_t)v318 > v341)
            v341 = (unint64_t)v318;
          v342 = v341 + ~(unint64_t)v319 - v340;
          if (v342 < 0x58)
          {
            v339 = v333;
            goto LABEL_513;
          }
          v339 = v333;
          if ((unint64_t)(v335 - &v319[v320 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
            goto LABEL_1630;
          v365 = (v342 >> 3) + 1;
          v366 = 8 * (v365 & 0x3FFFFFFFFFFFFFFCLL);
          v338 += v366;
          v339 = &v333[v366];
          v367 = v333 + 16;
          v368 = &v319[8 * v337 + 16 + 8 * v321];
          v369 = v365 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v370 = *(_OWORD *)v368;
            *(v367 - 1) = *((_OWORD *)v368 - 1);
            *v367 = v370;
            v367 += 2;
            v368 += 32;
            v369 -= 4;
          }
          while (v369);
          if (v365 != (v365 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_1630:
            do
            {
LABEL_513:
              v371 = *(_QWORD *)v338;
              v338 += 8;
              *(_QWORD *)v339 = v371;
              v339 += 8;
            }
            while (v338 < v318);
          }
        }
        *(_QWORD *)(a1 + 14392) = v339;
        v258 = v1188;
        if (v333 != v335)
          memmove(&v333[-8 * v337], v334, v336);
        if (v331 != v260)
          memmove(v334, v260, v331 - v260);
        goto LABEL_374;
      }
      v324 = v321 + v317;
      if ((unint64_t)(v321 + v317) >> 61)
        goto LABEL_1588;
      v325 = v323 - (_QWORD)v319;
      if (v325 >> 2 > v324)
        v324 = v325 >> 2;
      if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8)
        v326 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v326 = v324;
      v1206 = v326;
      if (!v326)
      {
        v327 = 0;
        goto LABEL_490;
      }
      if (v326 >> 61)
        goto LABEL_1589;
      v327 = operator new(8 * v326);
      v321 = (v318 - v319) >> 3;
LABEL_490:
      v343 = &v327[8 * v321];
      v344 = &v343[8 * v317];
      v345 = (v317 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v346 = v343;
      v347 = v260;
      if (v345 < 7)
        goto LABEL_1631;
      v346 = &v327[8 * v321];
      v347 = v260;
      if ((unint64_t)(&v327[v320 & 0xFFFFFFFFFFFFFFF8] - v260) < 0x20)
        goto LABEL_1631;
      v348 = v345 + 1;
      v349 = 8 * (v348 & 0x3FFFFFFFFFFFFFFCLL);
      v346 = &v343[v349];
      v347 = &v260[v349];
      v350 = (__int128 *)(v260 + 16);
      v351 = &v327[8 * v321 + 16];
      v352 = v348 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v353 = *v350;
        *(v351 - 1) = *(v350 - 1);
        *v351 = v353;
        v350 += 2;
        v351 += 2;
        v352 -= 4;
      }
      while (v352);
      if (v348 != (v348 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_1631:
        do
        {
          v354 = *(_QWORD *)v347;
          v347 += 8;
          *(_QWORD *)v346 = v354;
          v346 += 8;
        }
        while (v346 != v344);
      }
      v355 = v320 - 8;
      if (v320 >= 8)
      {
        if (v355 < 0x68)
        {
          v356 = &v319[(v318 - v319) & 0xFFFFFFFFFFFFFFF8];
          goto LABEL_503;
        }
        v356 = &v319[(v318 - v319) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v319[v320 & 0xFFFFFFFFFFFFFFF8] - &v327[v320 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_1632;
        v357 = (v355 >> 3) + 1;
        v358 = 8 * (v357 & 0x3FFFFFFFFFFFFFFCLL);
        v356 = &v322[-v358];
        v343 -= v358;
        v359 = &v327[8 * v321 - 16];
        v360 = &v319[8 * v321 - 16];
        v361 = v357 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v362 = *(_OWORD *)v360;
          *(v359 - 1) = *((_OWORD *)v360 - 1);
          *v359 = v362;
          v359 -= 2;
          v360 -= 32;
          v361 -= 4;
        }
        while (v361);
        if (v357 != (v357 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_1632:
          do
          {
LABEL_503:
            v363 = *((_QWORD *)v356 - 1);
            v356 -= 8;
            *((_QWORD *)v343 - 1) = v363;
            v343 -= 8;
          }
          while (v356 != v319);
        }
        v318 = *(char **)(a1 + 14392);
      }
      if (v318 != v322)
        memmove(v344, v322, v318 - v322);
      v364 = *(void **)(a1 + 14384);
      *(_QWORD *)(a1 + 14384) = v343;
      *(_QWORD *)(a1 + 14392) = &v344[v318 - v322];
      *(_QWORD *)(a1 + 14400) = &v327[8 * v1206];
      v257 = v1188;
      v258 = v1188;
      if (v364)
        operator delete(v364);
LABEL_374:
      v1 = *(size_t *)v1;
    }
    while (*(double *)&v1 != 0.0);
  }
LABEL_518:
  if (__p[24])
  {
    v372 = *(uint64_t **)(a1 + 14384);
    v373 = *(uint64_t **)(a1 + 14392);
    if (v372 == v373)
      goto LABEL_588;
    v374 = v1265.f64[1];
    v375 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1265.f64[1]);
    v375.i16[0] = vaddlv_u8(v375);
    v376 = *(_QWORD *)&v1265.f64[1] + 0xFFFFFFFFLL;
    v377 = *(_QWORD *)&v1265.f64[1] - 1;
    if (*(_QWORD *)&v1265.f64[1])
    {
      while (*v372)
      {
        v378 = *(_QWORD *)(*v372 + 504);
        v379 = *(unsigned int *)(v378 - 56);
        if (v375.u32[0] > 1uLL)
        {
          v380 = *(unsigned int *)(v378 - 56);
          if (*(_QWORD *)&v1265.f64[1] <= v379)
            v380 = v379 % *(_QWORD *)&v1265.f64[1];
        }
        else
        {
          v380 = v376 & v379;
        }
        v381 = *(uint64_t ***)(*(_QWORD *)&v1265.f64[0] + 8 * v380);
        if (!v381)
          break;
        v382 = *v381;
        if (!v382)
          break;
        v383 = *(_QWORD *)(v378 - 64);
        if (v375.u32[0] < 2uLL)
        {
          while (1)
          {
            v385 = v382[1];
            if (v385 == v379)
            {
              if (v382[2] == v383 && *((_DWORD *)v382 + 6) == (_DWORD)v379)
                goto LABEL_548;
            }
            else if ((v385 & v377) != v380)
            {
              goto LABEL_550;
            }
            v382 = (uint64_t *)*v382;
            if (!v382)
              goto LABEL_550;
          }
        }
        while (1)
        {
          v387 = v382[1];
          if (v387 == v379)
            break;
          if (v387 >= *(_QWORD *)&v1265.f64[1])
            v387 %= *(_QWORD *)&v1265.f64[1];
          if (v387 != v380)
            goto LABEL_550;
LABEL_542:
          v382 = (uint64_t *)*v382;
          if (!v382)
            goto LABEL_550;
        }
        if (v382[2] != v383 || *((_DWORD *)v382 + 6) != (_DWORD)v379)
          goto LABEL_542;
LABEL_548:
        if (++v372 == v373)
          goto LABEL_588;
      }
    }
LABEL_550:
    if (v372 != v373)
    {
      if (*(_QWORD *)&v1265.f64[1])
      {
        v388 = v372 + 1;
        if (v372 + 1 != v373)
        {
          do
          {
            v389 = *v388;
            if (*v388)
            {
              v390 = *(_QWORD *)(v389 + 504);
              v391 = *(unsigned int *)(v390 - 56);
              if (v375.u32[0] > 1uLL)
              {
                v392 = *(unsigned int *)(v390 - 56);
                if (*(_QWORD *)&v374 <= v391)
                  v392 = v391 % *(_QWORD *)&v374;
              }
              else
              {
                v392 = v376 & v391;
              }
              v393 = *(uint64_t ***)(*(_QWORD *)&v1265.f64[0] + 8 * v392);
              if (v393)
              {
                v394 = *v393;
                if (v394)
                {
                  v395 = *(_QWORD *)(v390 - 64);
                  if (v375.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v397 = v394[1];
                      if (v397 == v391)
                      {
                        if (v394[2] == v395 && *((_DWORD *)v394 + 6) == (_DWORD)v391)
                          goto LABEL_554;
                      }
                      else if ((v397 & v377) != v392)
                      {
                        goto LABEL_555;
                      }
                      v394 = (uint64_t *)*v394;
                      if (!v394)
                        goto LABEL_555;
                    }
                  }
                  do
                  {
                    v399 = v394[1];
                    if (v399 == v391)
                    {
                      if (v394[2] == v395 && *((_DWORD *)v394 + 6) == (_DWORD)v391)
                      {
LABEL_554:
                        *v372++ = v389;
                        break;
                      }
                    }
                    else
                    {
                      if (v399 >= *(_QWORD *)&v374)
                        v399 %= *(_QWORD *)&v374;
                      if (v399 != v392)
                        break;
                    }
                    v394 = (uint64_t *)*v394;
                  }
                  while (v394);
                }
              }
            }
LABEL_555:
            ++v388;
          }
          while (v388 != v373);
          v373 = *(uint64_t **)(a1 + 14392);
        }
      }
      if (v373 != v372)
        *(_QWORD *)(a1 + 14392) = v372;
    }
LABEL_588:
    v400 = *(_QWORD **)__p;
    if (*(_QWORD *)__p)
    {
      do
      {
        v401 = (_QWORD *)*v400;
        operator delete(v400);
        v400 = v401;
      }
      while (v401);
    }
    if (*(_QWORD *)&v1265.f64[0])
      operator delete(*(void **)&v1265.f64[0]);
  }
  *(_QWORD *)(a1 + 14480) = *(_QWORD *)(a1 + 14472);
  *(_QWORD *)(a1 + 14504) = *(_QWORD *)(a1 + 14496);
  v402 = **(_QWORD ***)(a1 + 7952);
  v403 = *(_OWORD *)(a1 + 11704);
  *(_OWORD *)(a1 + 14568) = *(_OWORD *)(a1 + 11688);
  *(_OWORD *)(a1 + 14584) = v403;
  *(_OWORD *)(a1 + 14600) = *(_OWORD *)(a1 + 11720);
  v1202 = a1 + 14568;
  sub_20F38F148(a1 + 14568, v402);
  v1256 = **(double **)(a1 + 5264) > *(double *)(a1 + 1896);
  sub_20F82FD50(&v1234);
  if (**(int **)(v1234 + 56) <= 3)
  {
    v408 = *(unsigned __int8 *)(v1234 + 72);
    v409 = sub_20E8C31DC(v1234, "OSLogSurrogateAppender", 1, 0);
    v410 = v409;
    if (v408 || v409)
    {
      sub_20E863438((uint64_t)&v1265);
      sub_20E86A980(__p, (uint64_t)"latest state ID: ", 17);
      v411 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v411, (uint64_t)", health: ", 10);
      std::ostream::operator<<();
      if ((v1268[56] & 0x10) != 0)
      {
        v414 = *(_QWORD *)&v1268[48];
        if (*(_QWORD *)&v1268[48] < *(_QWORD *)&v1268[8])
        {
          *(_QWORD *)&v1268[48] = *(_QWORD *)&v1268[8];
          v414 = *(_QWORD *)&v1268[8];
        }
        v415 = *(const void **)v1268;
        v412 = v414 - *(_QWORD *)v1268;
        if ((unint64_t)(v414 - *(_QWORD *)v1268) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_653;
      }
      else
      {
        if ((v1268[56] & 8) == 0)
        {
          v412 = 0;
          BYTE7(v1242) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_608;
        }
        v415 = *(const void **)&__p[24];
        v412 = *(_QWORD *)&v1267.f64[1] - *(_QWORD *)&__p[24];
        if (*(_QWORD *)&v1267.f64[1] - *(_QWORD *)&__p[24] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_653:
          sub_20E860B7C();
      }
      if (v412 >= 0x17)
      {
        v416 = (v412 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v412 | 7) != 0x17)
          v416 = v412 | 7;
        v417 = v416 + 1;
        p_dst = (void **)operator new(v416 + 1);
        *(_QWORD *)&v1242 = v417 | 0x8000000000000000;
        __dst = p_dst;
        v1241 = v412;
      }
      else
      {
        BYTE7(v1242) = v412;
        p_dst = (void **)&__dst;
        if (!v412)
        {
LABEL_608:
          *((_BYTE *)p_dst + v412) = 0;
          v1261[0].tv_sec = (__darwin_time_t)&v1234;
          v1261[0].tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
          v1261[1].tv_sec = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v1261[1].tv_nsec) = 3;
          v1261[2].tv_sec = (__darwin_time_t)"unknown file";
          LODWORD(v1261[2].tv_nsec) = 2025;
          v1264 = 0;
          v1262 = "unknown function";
          v1263 = 0;
          if ((SBYTE7(v1242) & 0x80u) == 0)
            v418 = (void **)&__dst;
          else
            v418 = __dst;
          v419 = *(_QWORD *)v1261[0].tv_sec;
          if (*(char *)(*(_QWORD *)v1261[0].tv_sec + 39) < 0)
          {
            v421 = *(const char **)(v419 + 16);
            v420 = *(_QWORD *)(v419 + 24);
            v1213 = *(_QWORD *)v1261[0].tv_sec + 16;
            v423 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v423 & 1) != 0)
              goto LABEL_615;
          }
          else
          {
            v420 = *(unsigned __int8 *)(*(_QWORD *)v1261[0].tv_sec + 39);
            v421 = (const char *)(*(_QWORD *)v1261[0].tv_sec + 16);
            v1213 = (uint64_t)v421;
            v422 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v422 & 1) != 0)
              goto LABEL_615;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
              operator delete(object[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_615:
          if (byte_254A4A4F8[23] >= 0)
            v424 = byte_254A4A4F8;
          else
            v424 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v425 = byte_254A4A4F8[23];
          else
            v425 = *(_QWORD *)&byte_254A4A4F8[8];
          object[0] = os_log_create(v424, v421);
          v426 = &object[1];
          if (v425 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v425 >= 0x17)
          {
            v427 = v408;
            v428 = (v425 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v425 | 7) != 0x17)
              v428 = v425 | 7;
            v429 = v428 + 1;
            v426 = (void **)operator new(v428 + 1);
            object[3] = (void *)(v429 | 0x8000000000000000);
            object[1] = v426;
            object[2] = (void *)v425;
            v408 = v427;
          }
          else
          {
            HIBYTE(object[3]) = v425;
            if (!v425)
            {
LABEL_629:
              *((_BYTE *)v426 + v425) = 0;
              LOBYTE(object[4]) = 1;
              *(double *)&v1 = COERCE_DOUBLE(&object[5]);
              if (v420 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v420 >= 0x17)
              {
                v431 = (v420 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v420 | 7) != 0x17)
                  v431 = v420 | 7;
                v432 = v431 + 1;
                *(double *)&v1 = COERCE_DOUBLE(operator new(v431 + 1));
                object[7] = (void *)(v432 | 0x8000000000000000);
                object[5] = (void *)v1;
                object[6] = (void *)v420;
              }
              else
              {
                HIBYTE(object[7]) = v420;
                if (!v420)
                {
                  LOBYTE(object[5]) = 0;
                  LOBYTE(v1302) = 1;
                  v430 = object[0];
                  if ((SHIBYTE(object[7]) & 0x80000000) == 0)
                    goto LABEL_633;
                  goto LABEL_639;
                }
              }
              memmove((void *)v1, v421, v420);
              *(_BYTE *)(v1 + v420) = 0;
              LOBYTE(v1302) = 1;
              v430 = object[0];
              if ((SHIBYTE(object[7]) & 0x80000000) == 0)
              {
LABEL_633:
                if (!LOBYTE(object[4]))
                  goto LABEL_642;
                goto LABEL_640;
              }
LABEL_639:
              operator delete(object[5]);
              if (!LOBYTE(object[4]))
                goto LABEL_642;
LABEL_640:
              if (SHIBYTE(object[3]) < 0)
                operator delete(object[1]);
LABEL_642:
              if (object[0])
                os_release(object[0]);
              if (!v410 || !*(_QWORD *)(v410 + 24))
              {
                os_log_type_enabled(v430, OS_LOG_TYPE_INFO);
                LODWORD(object[0]) = 136315138;
                *(void **)((char *)object + 4) = v418;
                v438 = (void *)_os_log_send_and_compose_impl();
                if (v438)
                  free(v438);
                goto LABEL_717;
              }
              v433 = _os_log_pack_size();
              v434 = operator new(v433, (std::align_val_t)8uLL);
              v435 = (_QWORD *)operator new();
              *v435 = &off_24C9ABB80;
              v435[1] = 0;
              v435[2] = 0;
              v435[3] = v434;
              *(_QWORD *)&v1251 = v434;
              *((_QWORD *)&v1251 + 1) = v434;
              v1253 = 0;
              v1252 = (unint64_t)v435;
              v436 = strlen((const char *)v418);
              if (v436 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v437 = v436;
              if (v436 >= 0x17)
              {
                v439 = (v436 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v436 | 7) != 0x17)
                  v439 = v436 | 7;
                v440 = v439 + 1;
                *(double *)&v1 = COERCE_DOUBLE(operator new(v439 + 1));
                *(_QWORD *)&v1247[8] = v440 | 0x8000000000000000;
                v1246 = *(double *)&v1;
                *(_QWORD *)v1247 = v437;
              }
              else
              {
                v1247[15] = v436;
                *(double *)&v1 = COERCE_DOUBLE(&v1246);
                if (!v436)
                {
LABEL_658:
                  *(_BYTE *)(v1 + v437) = 0;
                  v441 = v1246;
                  *(_QWORD *)&v1299 = *(_QWORD *)v1247;
                  *(_QWORD *)((char *)&v1299 + 7) = *(_QWORD *)&v1247[7];
                  v442 = v1247[15];
                  v443 = operator new(0x38uLL);
                  v443[1] = 0;
                  v443[2] = 0;
                  v443[3] = off_24C9ABC20;
                  *v443 = &off_24C9ABBD0;
                  v444 = v1299;
                  *((double *)v443 + 4) = v441;
                  v443[5] = v444;
                  *(_QWORD *)((char *)v443 + 47) = *(_QWORD *)((char *)&v1299 + 7);
                  *((_BYTE *)v443 + 55) = v442;
                  *(_QWORD *)&v1299 = 0;
                  *(_QWORD *)((char *)&v1299 + 7) = 0;
                  v445 = v1253;
                  *((_QWORD *)&v1252 + 1) = v443 + 3;
                  v1253 = (std::__shared_weak_count *)v443;
                  if (v445)
                  {
                    p_shared_owners = (unint64_t *)&v445->__shared_owners_;
                    do
                      v447 = __ldaxr(p_shared_owners);
                    while (__stlxr(v447 - 1, p_shared_owners));
                    if (!v447)
                    {
                      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
                      std::__shared_weak_count::__release_weak(v445);
                    }
                  }
                  *(_OWORD *)object = v1251;
                  v448 = (void *)*((_QWORD *)&v1252 + 1);
                  object[2] = (void *)v1252;
                  if ((_QWORD)v1252)
                  {
                    v449 = (unint64_t *)(v1252 + 8);
                    do
                      v450 = __ldxr(v449);
                    while (__stxr(v450 + 1, v449));
                  }
                  v451 = v1253;
                  object[3] = v448;
                  object[4] = v1253;
                  if (v1253)
                  {
                    v452 = (unint64_t *)&v1253->__shared_owners_;
                    do
                      v453 = __ldxr(v452);
                    while (__stxr(v453 + 1, v452));
                    object[5] = v448;
                    do
                      v454 = __ldaxr(v452);
                    while (__stlxr(v454 - 1, v452));
                    if (!v454)
                    {
                      ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                      std::__shared_weak_count::__release_weak(v451);
                    }
                  }
                  else
                  {
                    object[5] = v448;
                  }
                  v455 = (std::__shared_weak_count *)v1252;
                  if ((_QWORD)v1252)
                  {
                    v456 = (unint64_t *)(v1252 + 8);
                    do
                      v457 = __ldaxr(v456);
                    while (__stlxr(v457 - 1, v456));
                    if (!v457)
                    {
                      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
                      std::__shared_weak_count::__release_weak(v455);
                    }
                  }
                  v458 = object[0];
                  if (*((char *)object[5] + 31) >= 0)
                    v459 = (char *)object[5] + 8;
                  else
                    v459 = (char *)*((_QWORD *)object[5] + 1);
                  v460 = _os_log_pack_fill();
                  *(_DWORD *)v460 = 136315138;
                  *(_QWORD *)(v460 + 4) = v459;
                  v461 = operator new();
                  v462 = *(unsigned __int8 *)(v419 + 39);
                  v463 = v1213;
                  if ((v462 & 0x80u) != 0)
                  {
                    v463 = *(_QWORD *)(v419 + 16);
                    v462 = *(_QWORD *)(v419 + 24);
                  }
                  *(_QWORD *)v461 = v458;
                  *(_OWORD *)(v461 + 8) = *(_OWORD *)&object[1];
                  object[1] = 0;
                  object[2] = 0;
                  *(_OWORD *)(v461 + 24) = *(_OWORD *)&object[3];
                  object[3] = 0;
                  object[4] = 0;
                  *(_QWORD *)(v461 + 40) = v463;
                  *(_QWORD *)(v461 + 48) = v462;
                  *(_BYTE *)(v461 + 56) = 1;
                  v1246 = 0.0;
                  *(_QWORD *)&v1251 = v461;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v410 + 24) + 40))(*(_QWORD *)(v410 + 24), &v1251);
                  v464 = v1251;
                  *(_QWORD *)&v1251 = 0;
                  if (v464)
                  {
                    v465 = *(std::__shared_weak_count **)(v464 + 32);
                    if (v465)
                    {
                      v466 = (unint64_t *)&v465->__shared_owners_;
                      do
                        v467 = __ldaxr(v466);
                      while (__stlxr(v467 - 1, v466));
                      if (!v467)
                      {
                        ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                        std::__shared_weak_count::__release_weak(v465);
                      }
                    }
                    v468 = *(std::__shared_weak_count **)(v464 + 16);
                    if (v468)
                    {
                      v469 = (unint64_t *)&v468->__shared_owners_;
                      do
                        v470 = __ldaxr(v469);
                      while (__stlxr(v470 - 1, v469));
                      if (!v470)
                      {
                        ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                        std::__shared_weak_count::__release_weak(v468);
                      }
                    }
                    MEMORY[0x212BC6398](v464, 0x10F0C40B62ED6C6);
                    v471 = v1246;
                    v1246 = 0.0;
                    if (v471 != 0.0)
                    {
                      v472 = *(std::__shared_weak_count **)(*(_QWORD *)&v471 + 32);
                      if (v472)
                      {
                        v473 = (unint64_t *)&v472->__shared_owners_;
                        do
                          v474 = __ldaxr(v473);
                        while (__stlxr(v474 - 1, v473));
                        if (!v474)
                        {
                          ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                          std::__shared_weak_count::__release_weak(v472);
                        }
                      }
                      v475 = *(std::__shared_weak_count **)(*(_QWORD *)&v471 + 16);
                      if (v475)
                      {
                        v476 = (unint64_t *)&v475->__shared_owners_;
                        do
                          v477 = __ldaxr(v476);
                        while (__stlxr(v477 - 1, v476));
                        if (!v477)
                        {
                          ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                          std::__shared_weak_count::__release_weak(v475);
                        }
                      }
                      MEMORY[0x212BC6398](*(_QWORD *)&v471, 0x10F0C40B62ED6C6);
                    }
                  }
                  v478 = (std::__shared_weak_count *)object[4];
                  if (object[4])
                  {
                    v479 = (unint64_t *)((char *)object[4] + 8);
                    do
                      v480 = __ldaxr(v479);
                    while (__stlxr(v480 - 1, v479));
                    if (!v480)
                    {
                      ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                      std::__shared_weak_count::__release_weak(v478);
                    }
                  }
                  v481 = (std::__shared_weak_count *)object[2];
                  if (object[2])
                  {
                    v482 = (unint64_t *)((char *)object[2] + 8);
                    do
                      v483 = __ldaxr(v482);
                    while (__stlxr(v483 - 1, v482));
                    if (!v483)
                    {
                      ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                      std::__shared_weak_count::__release_weak(v481);
                    }
                  }
LABEL_717:
                  if (v408)
                  {
                    v484 = (const char *)&__dst;
                    if (SBYTE7(v1242) < 0)
                      v484 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)v1261, "%s", v484);
                    sub_20E863570((uint64_t)v1261);
                  }
                  sub_20E863570((uint64_t)v1261);
                  v485 = v1264;
                  if (v1264)
                  {
                    v486 = (unint64_t *)&v1264->__shared_owners_;
                    do
                      v487 = __ldaxr(v486);
                    while (__stlxr(v487 - 1, v486));
                    if (!v487)
                    {
                      ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                      std::__shared_weak_count::__release_weak(v485);
                    }
                  }
                  if (SBYTE7(v1242) < 0)
                    operator delete(__dst);
                  v1265.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
                  v488 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(float64_t *)((char *)v1265.f64 + *(_QWORD *)(*(_QWORD *)&v1265.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)__p = v488;
                  *(_QWORD *)&__p[8] = MEMORY[0x24BEDB848] + 16;
                  if ((v1268[47] & 0x80000000) != 0)
                    operator delete(*(void **)&v1268[24]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v1268[64]);
                  goto LABEL_731;
                }
              }
              memcpy((void *)v1, v418, v437);
              goto LABEL_658;
            }
          }
          memmove(v426, v424, v425);
          goto LABEL_629;
        }
      }
      memmove(p_dst, v415, v412);
      goto LABEL_608;
    }
  }
LABEL_731:
  v1255 = 0;
  v489 = (_QWORD *)a1;
  v490 = a1 + 8 * *(unsigned __int8 *)(a1 + 11680);
  v491 = *(double *)(a1 + 8144) * *(double *)(v490 + 704) + (1.0 - *(double *)(a1 + 8144)) * *(double *)(v490 + 680);
  _Q2.f64[0] = *(float64_t *)(a1 + 592);
  *(double *)&v1251 = *(double *)(a1 + 520) * v491;
  *((_QWORD *)&v1251 + 1) = *(_QWORD *)&_Q2.f64[0];
  v1254 = *(_QWORD *)(a1 + 1784);
  _Q1.f64[1] = 0.0;
  v1252 = xmmword_21030D320;
  v1253 = *(std::__shared_weak_count **)(a1 + 544);
  _Q3.n128_u64[0] = (unint64_t)v1253;
  v1250 = 0;
  v494 = *(double *)(a1 + 528);
  v1246 = v491 * v494;
  *(float64_t *)v1247 = _Q2.f64[0];
  v1249 = *(_QWORD *)(a1 + 1792);
  *(_OWORD *)&v1247[8] = xmmword_21030D320;
  v1248 = v1253;
  v1243 = 0x7FEFFFFFFFFFFFFFLL;
  v1245 = 0;
  __dst = *(void ***)(a1 + 536);
  v1241 = *(_QWORD *)&_Q2.f64[0];
  v1244 = *(_QWORD *)(a1 + 1800);
  v1242 = xmmword_21030D320;
  v495 = *(double *)(*(_QWORD *)(a1 + 2888) - 8);
  v496 = *(double *)(a1 + 2080);
  v497 = *(_BYTE *)(a1 + 2040);
  if (v497)
  {
    v498 = *(_QWORD *)(a1 + 2864) - *(_QWORD *)(a1 + 2856);
    if ((unint64_t)v498 <= 4)
    {
      v1239 = 0;
      v517 = 0.0;
    }
    else
    {
      v499 = v498 >> 2;
      v500 = *(_QWORD *)(a1 + 2656) + 168 * (v498 >> 2);
      v404.f64[0] = *(float64_t *)(v500 - 152);
      v501 = *(float64x2_t *)(v500 - 168);
      _D2 = *(double *)(v500 - 128);
      v503 = *(float64x2_t *)(v500 - 144);
      _D4 = *(double *)(v500 - 104);
      v505 = *(float64x2_t *)(v500 - 120);
      v407.n128_u64[0] = *(_QWORD *)(v500 - 320);
      _Q7 = *(float64x2_t *)(v500 - 336);
      v507 = *(double *)(v500 - 296);
      _Q17 = *(float64x2_t *)(v500 - 312);
      v509 = *(double *)(v500 - 272);
      _Q19 = *(float64x2_t *)(v500 - 288);
      v511 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v501, _Q7.f64[0]), v503, _Q17.f64[0]), v505, _Q19.f64[0]);
      v512 = vmlad_n_f64(vmlad_n_f64(v404.f64[0] * _Q7.f64[0], _D2, _Q17.f64[0]), _D4, _Q19.f64[0]);
      v513 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v501, _Q7, 1), v503, _Q17, 1), v505, _Q19, 1);
      __asm
      {
        FMLA            D7, D2, V17.D[1]
        FMLA            D7, D4, V19.D[1]
      }
      v1265 = v511;
      *(double *)__p = v512;
      *(float64_t *)&__p[24] = _Q7.f64[0];
      *(float64x2_t *)&__p[8] = v513;
      v1267 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v501, v407.n128_f64[0]), v503, v507), v505, v509);
      *(double *)v1268 = vmulq_f64(v404, (float64x2_t)v407).f64[0] + _D2 * v507 + _D4 * v509;
      memset(object, 0, 24);
      sub_20E9733B8(&v1265, (double *)object);
      *(void **)&_Q1.f64[1] = object[1];
      _Q3.n128_u64[0] = (unint64_t)object[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v516 = sqrt(_Q2.f64[0] + *(double *)&object[2] * *(double *)&object[2]);
      _Q1.f64[0] = *(double *)(*(_QWORD *)(a1 + 2880) + 8 * (v499 - 1))
                 - *(double *)(*(_QWORD *)(a1 + 2880) + 8 * (v499 - 2));
      _Q2.f64[0] = 1.0;
      if (_Q1.f64[0] == 0.0)
        _Q1.f64[0] = 1.0;
      v517 = v516 / _Q1.f64[0];
      v497 = *(_BYTE *)(a1 + 2040);
      if (!v497)
      {
        v489 = (_QWORD *)a1;
        goto LABEL_740;
      }
    }
    v489 = (_QWORD *)a1;
    v497 = v517 < *(double *)(a1 + 2096);
  }
  else
  {
    v517 = 0.0;
  }
LABEL_740:
  v1239 = v497;
  v518 = (_BYTE *)v489[1807];
  v519 = (char *)v489[1806];
  v520 = (v518 - v519) >> 3;
  v521 = v520 + ((uint64_t)(v489[1799] - v489[1798]) >> 3);
  v522 = v489[1811];
  v523 = (char *)v489[1809];
  if (v521 <= (v522 - (uint64_t)v523) >> 3)
    goto LABEL_753;
  if (v521 >> 61)
    goto LABEL_1599;
  v524 = *(_BYTE **)(a1 + 14480);
  v525 = (char *)operator new(8 * v521);
  v522 = (uint64_t)&v525[8 * v521];
  v526 = v524 - v523;
  v527 = &v525[(v524 - v523) & 0xFFFFFFFFFFFFFFF8];
  v528 = v527;
  if (v524 != v523)
  {
    if ((unint64_t)(v526 - 8) >= 0x58)
    {
      v528 = &v525[(v524 - v523) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v524[-(v526 & 0xFFFFFFFFFFFFFFF8)] - v525) >= 0x20)
      {
        v529 = v526 >> 3;
        v530 = ((unint64_t)(v526 - 8) >> 3) + 1;
        v531 = 8 * (v530 & 0x3FFFFFFFFFFFFFFCLL);
        v532 = &v524[-v531];
        v528 = &v527[-v531];
        v533 = (float64x2_t *)&v525[8 * v529 - 16];
        v534 = (float64x2_t *)(v524 - 16);
        v535 = v530 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          _Q1 = v534[-1];
          v536 = *v534;
          v533[-1] = _Q1;
          *v533 = v536;
          v533 -= 2;
          v534 -= 2;
          v535 -= 4;
        }
        while (v535);
        v524 = v532;
        if (v530 == (v530 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_750;
      }
    }
    else
    {
      v528 = &v525[(v524 - v523) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v537 = *((_QWORD *)v524 - 1);
      v524 -= 8;
      *((_QWORD *)v528 - 1) = v537;
      v528 -= 8;
    }
    while (v524 != v523);
  }
LABEL_750:
  *(_QWORD *)(a1 + 14472) = v528;
  *(_QWORD *)(a1 + 14480) = v527;
  *(_QWORD *)(a1 + 14488) = v522;
  if (v523)
  {
    operator delete(v523);
    v519 = *(char **)(a1 + 14448);
    v518 = *(_BYTE **)(a1 + 14456);
    v520 = (v518 - v519) >> 3;
    v523 = *(char **)(a1 + 14472);
    v522 = *(_QWORD *)(a1 + 14488);
  }
  else
  {
    v523 = v528;
  }
LABEL_753:
  if (v520 > (v522 - (uint64_t)v523) >> 3)
  {
    if (v523)
    {
      *(_QWORD *)(a1 + 14480) = v523;
      operator delete(v523);
      v522 = 0;
      *(_QWORD *)(a1 + 14472) = 0;
      *(_QWORD *)(a1 + 14480) = 0;
      *(_QWORD *)(a1 + 14488) = 0;
    }
    if (!(v520 >> 61))
    {
      v538 = v522 >> 2;
      if (v522 >> 2 <= v520)
        v538 = v520;
      v539 = (unint64_t)v522 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v538;
      if (!(v539 >> 61))
      {
        v523 = (char *)operator new(8 * v539);
        *(_QWORD *)(a1 + 14472) = v523;
        *(_QWORD *)(a1 + 14480) = v523;
        *(_QWORD *)(a1 + 14488) = &v523[8 * v539];
        goto LABEL_769;
      }
    }
LABEL_1599:
    sub_20E867F44();
  }
  v540 = *(_BYTE **)(a1 + 14480);
  v541 = (v540 - v523) >> 3;
  if (v541 >= v520)
  {
LABEL_769:
    v543 = v518 - v519;
    if (v518 != v519)
    {
      v544 = v523;
      v545 = v519;
      goto LABEL_771;
    }
    goto LABEL_772;
  }
  v542 = &v519[8 * v541];
  if (v540 != v523)
  {
    memmove(v523, v519, 8 * v541);
    v523 = *(char **)(a1 + 14480);
  }
  v543 = v518 - v542;
  if (v518 != v542)
  {
    v544 = v523;
    v545 = v542;
LABEL_771:
    memmove(v544, v545, v543);
  }
LABEL_772:
  v546 = &v523[v543];
  v547 = a1;
  *(_QWORD *)(a1 + 14480) = v546;
  v1238 = *(_BYTE *)(a1 + 1928);
  if (!v1238)
    goto LABEL_785;
  v548 = *(_QWORD *)(a1 + 14392) - *(_QWORD *)(a1 + 14384);
  v549 = v548 >> 3;
  v550 = *(_BYTE **)(a1 + 14496);
  if (v548 >> 3 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 14512) - (_QWORD)v550) >> 3))
    goto LABEL_785;
  if (v548 < 0)
    sub_20E867F44();
  v551 = *(_BYTE **)(a1 + 14504);
  v552 = (char *)operator new(v548);
  v553 = v551 - v550;
  v554 = &v552[(v551 - v550) & 0xFFFFFFFFFFFFFFF8];
  v555 = v554;
  if (v551 != v550)
  {
    if ((unint64_t)(v553 - 8) < 0x58)
    {
      v555 = &v552[(v551 - v550) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_782:
        v564 = *((_QWORD *)v551 - 1);
        v551 -= 8;
        *((_QWORD *)v555 - 1) = v564;
        v555 -= 8;
      }
      while (v551 != v550);
      goto LABEL_783;
    }
    v555 = &v552[(v551 - v550) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v551 - &v552[v553 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_782;
    v556 = v553 >> 3;
    v557 = ((unint64_t)(v553 - 8) >> 3) + 1;
    v558 = 8 * (v557 & 0x3FFFFFFFFFFFFFFCLL);
    v559 = &v551[-v558];
    v555 = &v554[-v558];
    v560 = (float64x2_t *)&v552[8 * v556 - 16];
    v561 = (float64x2_t *)(v551 - 16);
    v562 = v557 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      _Q1 = v561[-1];
      v563 = *v561;
      v560[-1] = _Q1;
      *v560 = v563;
      v560 -= 2;
      v561 -= 2;
      v562 -= 4;
    }
    while (v562);
    v551 = v559;
    if (v557 != (v557 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_782;
  }
LABEL_783:
  v547 = a1;
  *(_QWORD *)(a1 + 14496) = v555;
  *(_QWORD *)(a1 + 14504) = v554;
  *(_QWORD *)(a1 + 14512) = &v552[8 * v549];
  if (v550)
    operator delete(v550);
LABEL_785:
  v1237 = &v1257;
  v565 = *(_QWORD **)(v547 + 14520);
  *(_QWORD *)(v547 + 14528) = v565;
  if (!v1260)
    goto LABEL_837;
  v566 = *(_QWORD *)(v547 + 14392) - *(_QWORD *)(v547 + 14384);
  v567 = *(_QWORD *)(v547 + 14456);
  v568 = *(_QWORD *)(v547 + 14448);
  v569 = (v567 - v568) >> 3;
  v570 = v569 + (v566 >> 3);
  if (v570)
  {
    v571 = *(_QWORD *)(v547 + 14536) - (_QWORD)v565;
    if (v570 <= v571 >> 3)
    {
      bzero(v565, 8 * v570);
      *(_QWORD *)(v547 + 14528) = &v565[v570];
    }
    else
    {
      if (v570 >> 61)
        sub_20E867F44();
      v572 = v571 >> 2;
      if (v571 >> 2 <= v570)
        v572 = v569 + (v566 >> 3);
      if ((unint64_t)v571 >= 0x7FFFFFFFFFFFFFF8)
        v573 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v573 = v572;
      if (v573 >> 61)
        sub_20E877A38();
      v574 = (char *)operator new(8 * v573);
      bzero(v574, 8 * v570);
      v547 = a1;
      *(_QWORD *)(a1 + 14520) = v574;
      *(_QWORD *)(a1 + 14528) = &v574[8 * v570];
      *(_QWORD *)(a1 + 14536) = &v574[8 * v573];
      if (v565)
        operator delete(v565);
    }
    v568 = *(_QWORD *)(v547 + 14448);
    v567 = *(_QWORD *)(v547 + 14456);
    v565 = *(_QWORD **)(v547 + 14520);
    for (m = (uint64_t *)v1237; v568 != v567; v568 += 8)
    {
LABEL_804:
      v576 = *(_QWORD *)(*(_QWORD *)v568 + 496);
      v577 = *(_QWORD *)(*(_QWORD *)v568 + 504);
      if (v577 != v576)
      {
        v578 = m[1];
        if (v578)
        {
          v579 = v578 - 1;
          v580 = *m;
          if ((v578 & (v578 - 1)) != 0)
          {
            do
            {
              v583 = *(_QWORD *)(v577 - 64);
              v577 -= 64;
              v582 = v583;
              v584 = *(unsigned int *)(v577 + 8);
              v585 = v584;
              if (v578 <= v584)
                v585 = v584 % v578;
              v586 = *(uint64_t **)(v580 + 8 * v585);
              if (v586)
              {
                while (1)
                {
                  v586 = (uint64_t *)*v586;
                  if (!v586)
                    break;
                  v587 = v586[1];
                  if (v587 == v584)
                  {
                    if (v586[2] == v582 && *((_DWORD *)v586 + 6) == (_DWORD)v584)
                    {
LABEL_802:
                      *v565++ = *(_QWORD *)v568;
                      goto LABEL_803;
                    }
                  }
                  else
                  {
                    if (v587 >= v578)
                      v587 %= v578;
                    if (v587 != v585)
                      break;
                  }
                }
              }
            }
            while (v577 != v576);
          }
          else
          {
            v581 = v578 + 0xFFFFFFFF;
            do
            {
              v590 = *(_QWORD *)(v577 - 64);
              v577 -= 64;
              v589 = v590;
              v591 = *(unsigned int *)(v577 + 8);
              v592 = *(uint64_t **)(v580 + 8 * (v581 & v591));
              if (v592)
              {
                while (1)
                {
                  v592 = (uint64_t *)*v592;
                  if (!v592)
                    break;
                  v594 = v592[1];
                  if (v594 == v591)
                  {
                    if (v592[2] == v589 && *((_DWORD *)v592 + 6) == (_DWORD)v591)
                      goto LABEL_802;
                  }
                  else if ((v594 & v579) != (v581 & v591))
                  {
                    break;
                  }
                }
              }
            }
            while (v577 != v576);
          }
        }
      }
LABEL_803:
      ;
    }
  }
  else
  {
    m = (uint64_t *)&v1257;
    if (v568 != v567)
      goto LABEL_804;
  }
  v547 = a1;
  if (v565 != *(_QWORD **)(a1 + 14528))
  {
    v547 = a1;
    *(_QWORD *)(a1 + 14528) = v565;
  }
LABEL_837:
  v595 = *(_QWORD *)(v547 + 2864);
  if (*(_QWORD *)(v547 + 2856) == v595)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2078, (uint64_t)"!seed_estimate_.state_ids.empty()", 33, (uint64_t)"Seed estimate should not be empty.", 34, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v547 = a1;
    v595 = *(_QWORD *)(a1 + 2864);
  }
  v596 = *(_DWORD *)(v595 - 4);
  v1236.f64[0] = 0.0;
  LODWORD(v1236.f64[1]) = v596;
  v1184 = v547 + 14264;
  if (*(_BYTE *)(v547 + 14376))
  {
    v597 = *(void **)(a1 + 14352);
    if (v597)
    {
      *(_QWORD *)(a1 + 14360) = v597;
      operator delete(v597);
    }
    *(_BYTE *)(v547 + 14376) = 0;
  }
  if (v1239)
  {
    v598 = a1;
    v599 = 2056;
    if (!*(_BYTE *)(a1 + 13720))
      v599 = 2048;
    v600 = *(double *)(a1 + v599);
    v601 = *(void **)(a1 + 14544);
    *(_QWORD *)(a1 + 14552) = v601;
    v602 = *(size_t **)(a1 + 14384);
    v603 = *(size_t **)(a1 + 14392);
    v1199 = v603;
    if (*(_QWORD *)(a1 + 14224))
    {
      v604 = (unint64_t)(v603 - v602) >> 2;
      if (v604 <= (uint64_t)(*(_QWORD *)(a1 + 14560) - (_QWORD)v601) >> 3)
      {
        v606 = (char **)(a1 + 14544);
        v607 = *(size_t **)(a1 + 14392);
        v1183 = (char **)(a1 + 14544);
        if (v602 == v603)
          goto LABEL_1113;
LABEL_855:
        v608 = v495 - v496;
        v1182 = vdupq_n_s64(0x7FF8000000000000uLL);
        while (1)
        {
          v610 = *v602 + 40;
          v1214 = *v602;
          if (*(_BYTE *)(*v602 + 488))
          {
            if (!*(_BYTE *)(*v602 + 464))
              goto LABEL_868;
          }
          else
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1869, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            if (!*(_BYTE *)(v1214 + 488))
              v610 = 0;
            if (!*(_BYTE *)(v610 + 424))
              goto LABEL_868;
          }
          if (*(double *)(v610 + 440) >= v608)
          {
            if (!*(_BYTE *)(v610 + 432))
              *(_BYTE *)(v610 + 432) = sub_20F88000C(a1, v1214, v600);
            goto LABEL_1084;
          }
          *(_BYTE *)(v610 + 424) = 0;
LABEL_868:
          *(_QWORD *)(v610 + 440) = 0xBFF0000000000000;
          *(_BYTE *)(v610 + 432) = 0;
          v611 = *(_QWORD *)(v1214 + 496);
          v612 = *(_QWORD *)(v1214 + 504);
          if (v611 == v612 || *(_DWORD *)(v611 + 16) == *(_DWORD *)(v612 - 48))
            goto LABEL_1084;
          v1193 = v610;
          v1265 = 0u;
          *(_OWORD *)__p = 0u;
          *(_DWORD *)&__p[16] = 1065353216;
          v613 = (float)(unint64_t)((v612 - v611) >> 6);
          v614 = (unint64_t)v613;
          if ((unint64_t)v613 == 1)
          {
            v614 = 2;
          }
          else if ((v614 & ((unint64_t)v613 - 1)) != 0)
          {
            v614 = std::__next_prime((unint64_t)v613);
            v685 = *(int8x8_t *)&v1265.f64[1];
            v686 = v614 >= *(_QWORD *)&v1265.f64[1];
            if (v614 <= *(_QWORD *)&v1265.f64[1])
            {
LABEL_1026:
              if (v686)
                goto LABEL_873;
              v687 = vcvtps_u32_f32((float)*(unint64_t *)&__p[8] / *(float *)&__p[16]);
              if (*(_QWORD *)&v685 < 3uLL
                || (v688 = (uint8x8_t)vcnt_s8(v685), v688.i16[0] = vaddlv_u8(v688), v688.u32[0] > 1uLL))
              {
                v687 = std::__next_prime(v687);
              }
              else
              {
                v689 = 1 << -(char)__clz(v687 - 1);
                if (v687 >= 2)
                  v687 = v689;
              }
              if (v614 <= v687)
                v614 = v687;
              if (v614 >= *(_QWORD *)&v685)
                goto LABEL_873;
            }
          }
          else
          {
            v685 = 0;
            v686 = 1;
            if (!v614)
              goto LABEL_1026;
          }
          sub_20E8D2B3C((uint64_t)&v1265, v614);
LABEL_873:
          v1195 = v602;
          v1299 = 0uLL;
          v1300 = 0;
          v615 = *(uint64_t **)(v1214 + 496);
          v616 = *(uint64_t **)(v1214 + 504);
          if (v615 == v616)
          {
            v617 = 0;
            v618 = 0;
            v649 = *(_QWORD **)__p;
            v607 = v1199;
            if (*(_QWORD *)__p)
              goto LABEL_961;
            goto LABEL_962;
          }
          v617 = 0;
          v618 = 0;
          v619 = 0;
          do
          {
            v620 = *((unsigned int *)v615 + 2);
            v621 = *(_QWORD *)&v1265.f64[1];
            if (*(_QWORD *)&v1265.f64[1])
            {
              v622 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v1265.f64[1]);
              v622.i16[0] = vaddlv_u8(v622);
              if (v622.u32[0] > 1uLL)
              {
                v1 = *((unsigned int *)v615 + 2);
                if (*(_QWORD *)&v1265.f64[1] <= v620)
                  v1 = v620 % *(_QWORD *)&v1265.f64[1];
              }
              else
              {
                v1 = (LODWORD(v1265.f64[1]) - 1) & v620;
              }
              v623 = *(void ***)(*(_QWORD *)&v1265.f64[0] + 8 * v1);
              if (v623)
              {
                v624 = *v623;
                if (*v623)
                {
                  v625 = *v615;
                  if (v622.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v629 = v624[1];
                      if (v629 == v620)
                      {
                        if (v624[2] == v625 && *((_DWORD *)v624 + 6) == (_DWORD)v620)
                          goto LABEL_941;
                      }
                      else if ((v629 & (*(_QWORD *)&v1265.f64[1] - 1)) != v1)
                      {
                        goto LABEL_903;
                      }
                      v624 = (_QWORD *)*v624;
                      if (!v624)
                        goto LABEL_903;
                    }
                  }
                  do
                  {
                    v627 = v624[1];
                    if (v627 == v620)
                    {
                      if (v624[2] == v625 && *((_DWORD *)v624 + 6) == (_DWORD)v620)
                        goto LABEL_941;
                    }
                    else
                    {
                      if (v627 >= *(_QWORD *)&v1265.f64[1])
                        v627 %= *(_QWORD *)&v1265.f64[1];
                      if (v627 != v1)
                        break;
                    }
                    v624 = (_QWORD *)*v624;
                  }
                  while (v624);
                }
              }
            }
LABEL_903:
            v624 = operator new(0x28uLL);
            *v624 = 0;
            v624[1] = v620;
            *((_OWORD *)v624 + 1) = *(_OWORD *)v615;
            *((_DWORD *)v624 + 8) = 0;
            v630 = (float)(unint64_t)(*(_QWORD *)&__p[8] + 1);
            if (v621 && (*(float *)_Q2.f64 = *(float *)&__p[16] * (float)v621, *(float *)_Q2.f64 >= v630))
            {
              v620 = v1;
            }
            else
            {
              v631 = (v621 & (v621 - 1)) != 0;
              if (v621 < 3)
                v631 = 1;
              v632 = v631 | (2 * v621);
              *(double *)&v633 = COERCE_DOUBLE(vcvtps_u32_f32(v630 / *(float *)&__p[16]));
              if (v632 <= v633)
                v1 = v633;
              else
                v1 = v632;
              if (v1 == 1)
              {
                v1 = 2;
              }
              else if ((v1 & (v1 - 1)) != 0)
              {
                *(double *)&v1 = COERCE_DOUBLE(std::__next_prime(v1));
                v621 = *(_QWORD *)&v1265.f64[1];
              }
              if (v1 > v621)
                goto LABEL_916;
              if (v1 < v621)
              {
                *(double *)&v634 = COERCE_DOUBLE(vcvtps_u32_f32((float)*(unint64_t *)&__p[8] / *(float *)&__p[16]));
                if (v621 < 3
                  || (v635 = (uint8x8_t)vcnt_s8((int8x8_t)v621), v635.i16[0] = vaddlv_u8(v635), v635.u32[0] > 1uLL))
                {
                  *(double *)&v634 = COERCE_DOUBLE(std::__next_prime(v634));
                }
                else
                {
                  v636 = 1 << -(char)__clz(v634 - 1);
                  if (v634 >= 2)
                    v634 = v636;
                }
                if (v1 <= v634)
                  v1 = v634;
                if (v1 < v621)
LABEL_916:
                  sub_20E8D2B3C((uint64_t)&v1265, v1);
              }
              v621 = *(_QWORD *)&v1265.f64[1];
              if ((*(_QWORD *)&v1265.f64[1] & (*(_QWORD *)&v1265.f64[1] - 1)) != 0)
              {
                if (*(_QWORD *)&v1265.f64[1] <= v620)
                  v620 %= *(_QWORD *)&v1265.f64[1];
              }
              else
              {
                v620 = (LODWORD(v1265.f64[1]) - 1) & v620;
              }
            }
            v637 = v1265.f64[0];
            v638 = *(_QWORD **)(*(_QWORD *)&v1265.f64[0] + 8 * v620);
            if (v638)
            {
              *v624 = *v638;
LABEL_939:
              *v638 = v624;
              goto LABEL_940;
            }
            *v624 = *(_QWORD *)__p;
            *(_QWORD *)__p = v624;
            *(_QWORD *)(*(_QWORD *)&v637 + 8 * v620) = __p;
            if (*v624)
            {
              v639 = *(_QWORD *)(*v624 + 8);
              if ((v621 & (v621 - 1)) != 0)
              {
                if (v639 >= v621)
                  v639 %= v621;
              }
              else
              {
                v639 &= v621 - 1;
              }
              v638 = (_QWORD *)(*(_QWORD *)&v1265.f64[0] + 8 * v639);
              goto LABEL_939;
            }
LABEL_940:
            ++*(_QWORD *)&__p[8];
LABEL_941:
            v640 = *((_DWORD *)v624 + 8) + 1;
            *((_DWORD *)v624 + 8) = v640;
            if (v640 == 2)
            {
              if (v617 < v619)
              {
                *(_OWORD *)v617 = *(_OWORD *)v615;
                v617 += 16;
                goto LABEL_876;
              }
              v641 = (v617 - v618) >> 4;
              v642 = v641 + 1;
              if ((unint64_t)(v641 + 1) >> 60)
              {
                v1300 = v619;
                *(_QWORD *)&v1299 = v618;
                *((_QWORD *)&v1299 + 1) = v617;
                sub_20E867F44();
              }
              if ((v619 - v618) >> 3 > v642)
                v642 = (v619 - v618) >> 3;
              if ((unint64_t)(v619 - v618) >= 0x7FFFFFFFFFFFFFF0)
                v643 = 0xFFFFFFFFFFFFFFFLL;
              else
                v643 = v642;
              if (v643)
              {
                if (v643 >> 60)
                {
                  v1300 = v619;
                  *(_QWORD *)&v1299 = v618;
                  *((_QWORD *)&v1299 + 1) = v617;
                  sub_20E877A38();
                }
                v644 = (char *)operator new(16 * v643);
                v645 = &v644[16 * v641];
                *(_OWORD *)v645 = *(_OWORD *)v615;
                for (n = (uint64_t)v645; v617 != v618; *(_DWORD *)(n + 8) = v648)
                {
LABEL_952:
                  v647 = *((_QWORD *)v617 - 2);
                  v617 -= 16;
                  v648 = *((_DWORD *)v617 + 2);
                  *(_QWORD *)(n - 16) = v647;
                  n -= 16;
                }
              }
              else
              {
                v644 = 0;
                v645 = (char *)(16 * v641);
                *(_OWORD *)(16 * v641) = *(_OWORD *)v615;
                n = 16 * v641;
                if (v617 != v618)
                  goto LABEL_952;
              }
              v619 = &v644[16 * v643];
              v617 = v645 + 16;
              if (v618)
                operator delete(v618);
              v618 = (char *)n;
            }
LABEL_876:
            v615 += 8;
          }
          while (v615 != v616);
          v1300 = v619;
          *(_QWORD *)&v1299 = v618;
          *((_QWORD *)&v1299 + 1) = v617;
          v606 = v1183;
          v649 = *(_QWORD **)__p;
          v607 = v1199;
          if (*(_QWORD *)__p)
          {
            do
            {
LABEL_961:
              v650 = (_QWORD *)*v649;
              operator delete(v649);
              v649 = v650;
            }
            while (v650);
          }
LABEL_962:
          v651 = v1265.f64[0];
          v1265.f64[0] = 0.0;
          if (v651 != 0.0)
            operator delete(*(void **)&v651);
          if (v618 != v617)
          {
            v652 = *(_QWORD *)(a1 + 7952);
            if (*(_QWORD *)(*(_QWORD *)v652 + 56))
            {
              v653 = v618;
              while (1)
              {
                v654 = *(_QWORD *)v653;
                v655 = *((_DWORD *)v653 + 2);
                v656 = *(_QWORD *)v652 + 56;
                v657 = *(_QWORD *)v656;
                do
                {
                  v658 = *(_QWORD *)(v657 + 32);
                  if (v658 < v654)
                  {
                    v657 += 8;
                  }
                  else if (v658 == v654)
                  {
                    if (*(_DWORD *)(v657 + 40) < v655)
                      v657 += 8;
                    else
                      v656 = v657;
                  }
                  else
                  {
                    v656 = v657;
                  }
                  v657 = *(_QWORD *)v657;
                }
                while (v657);
                if (v656 != *(_QWORD *)v652 + 56)
                {
                  v659 = *(_QWORD *)(v656 + 32);
                  if (v654 >= v659 && (v654 != v659 || *(_DWORD *)(v656 + 40) <= v655))
                  {
                    v660 = *(_QWORD *)(v656 + 48);
                    if (v660)
                    {
                      v661 = *(double *)(v660 + 816);
                      if (v661 >= v608)
                        break;
                    }
                  }
                }
                v653 += 16;
                if (v653 == v617)
                  goto LABEL_1081;
              }
              if (v661 >= 0.0)
              {
                __p[24] = 0;
                v1294 = 0;
                v1265 = 0u;
                memset(__p, 0, 20);
                v1298 = 0;
                v1296 = 0;
                v1297 = 0;
                v1295 = 0;
                v663 = *(_QWORD *)(v1214 + 496);
                v662 = *(_QWORD *)(v1214 + 504);
                if (v663 == v662)
                {
                  v664 = 0;
                  goto LABEL_1038;
                }
                while (2)
                {
                  if (*(_DWORD *)(v663 + 8) == v655)
                  {
                    v665 = *(_QWORD *)v663;
                    v666 = *(_DWORD *)(v663 + 16);
                    v667 = *(_QWORD *)(v1214 + 496);
                    v668 = *(_QWORD *)(v1214 + 504) - v667;
                    if (v668)
                    {
                      v669 = v668 >> 6;
                      while (1)
                      {
                        v670 = v669 >> 1;
                        v671 = v667 + (v669 >> 1 << 6);
                        v672 = *(_DWORD *)(v671 + 16);
                        v673 = v672 >= v666;
                        if (v672 != v666)
                          goto LABEL_996;
                        if (*(_QWORD *)v671 >= v665)
                          break;
LABEL_990:
                        v667 = v671 + 64;
                        v670 = v669 + ~v670;
LABEL_991:
                        v669 = v670;
                        if (!v670)
                          goto LABEL_999;
                      }
                      if (*(_QWORD *)v671 != v665)
                        goto LABEL_991;
                      v673 = *(_DWORD *)(v671 + 8) >= v655;
LABEL_996:
                      if (v673)
                        goto LABEL_991;
                      goto LABEL_990;
                    }
LABEL_999:
                    v674 = *(_DWORD *)(v667 + 8);
                    v675 = v667 + 24;
                    if (v674 == v655)
                      v1 = v675;
                    else
                      *(double *)&v1 = 0.0;
                    *(_OWORD *)object = *(_OWORD *)v663;
                    v676 = *(void **)v1;
                    object[2] = *(void **)(v663 + 16);
                    object[3] = v676;
                    object[4] = *(void **)(v1 + 8);
                    *(_OWORD *)&object[5] = *(_OWORD *)(v1 + 16);
                    LODWORD(object[7]) = *(_DWORD *)(v1 + 32);
                    v677 = (char *)v1295;
                    v678 = v1296;
                    if (v1296 != v1295)
                    {
                      v679 = (v1296 - (_BYTE *)v1295) >> 6;
                      while (1)
                      {
                        v680 = v679 >> 1;
                        v681 = &v677[64 * (v679 >> 1)];
                        v682 = *((_DWORD *)v681 + 4);
                        v683 = v682 >= LODWORD(object[2]);
                        if (v682 != LODWORD(object[2]))
                          goto LABEL_1010;
                        if ((void *)*(_QWORD *)v681 >= object[0])
                          break;
LABEL_1004:
                        v677 = v681 + 64;
                        v680 = v679 + ~v680;
LABEL_1005:
                        v679 = v680;
                        if (!v680)
                          goto LABEL_1013;
                      }
                      if (*(void **)v681 != object[0])
                        goto LABEL_1005;
                      v683 = *((_DWORD *)v681 + 2) >= LODWORD(object[1]);
LABEL_1010:
                      if (v683)
                        goto LABEL_1005;
                      goto LABEL_1004;
                    }
LABEL_1013:
                    if (v677 == v1296
                      || *((_DWORD *)v677 + 4) != v666
                      || *(_QWORD *)v677 != v665
                      || (v684 = (unint64_t)v1296, *((_DWORD *)v677 + 2) != v655))
                    {
                      v684 = sub_20FB97990((char **)&v1295, v677, (__int128 *)object);
                      v678 = v1296;
                    }
                    if (v678 != (char *)v684)
                      sub_20FB97204((uint64_t *)&v1265, v663, v1);
                  }
                  v663 += 64;
                  if (v663 != v662)
                    continue;
                  break;
                }
                v664 = (uint64_t *)v1295;
                v652 = *(_QWORD *)(a1 + 7952);
LABEL_1038:
                v690 = sub_20E9DF85C((_QWORD *)(*(_QWORD *)v652 + 1784), v664);
                v607 = v1199;
                if (v690)
                  v691 = v690 + 5;
                else
                  v691 = 0;
                if (!v690
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1926, (uint64_t)"pose_ref != nullptr", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !v691[8]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1927, (uint64_t)"pose_ref->lens", 14, (uint64_t)"Lens does not exist", 19, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v692 = *((_DWORD *)v664 + 2);
                v693 = v1295;
                if (v1296 != v1295)
                {
                  v694 = *v664;
                  v695 = *((_DWORD *)v664 + 4);
                  v696 = (v1296 - (_BYTE *)v1295) >> 6;
                  while (1)
                  {
                    v697 = v696 >> 1;
                    v698 = (char *)&v693[16 * (v696 >> 1)];
                    v699 = *((_DWORD *)v698 + 4);
                    v700 = v699 >= v695;
                    if (v699 != v695)
                      goto LABEL_1053;
                    if (*(_QWORD *)v698 >= v694)
                      break;
LABEL_1047:
                    v693 = v698 + 64;
                    v697 = v696 + ~v697;
LABEL_1048:
                    v696 = v697;
                    if (!v697)
                      goto LABEL_1056;
                  }
                  if (*(_QWORD *)v698 != v694)
                    goto LABEL_1048;
                  v700 = *((_DWORD *)v698 + 2) >= v692;
LABEL_1053:
                  if (v700)
                    goto LABEL_1048;
                  goto LABEL_1047;
                }
LABEL_1056:
                v701 = v693[2];
                v702 = (float *)(v693 + 6);
                if (v701 == v692)
                  v703 = v702;
                else
                  v703 = 0;
                v704 = v703[3];
                _Q0 = *(float64x2_t *)(v703 + 4);
                memset(v1261, 0, sizeof(v1261));
                memset(object, 0, sizeof(object));
                v1302 = 0u;
                v1303 = 0u;
                v1304 = 0u;
                v1305 = 0u;
                v1306 = 0u;
                v1307 = 0u;
                v1308 = 0u;
                v1309 = 0u;
                v1310 = 0u;
                v1311 = 0u;
                v1312 = 0u;
                v1313 = 0u;
                v1314 = 0;
                *(_QWORD *)v1268 = 0;
                v1267 = 0uLL;
                if (v1294)
                {
                  *(timespec *)&v1268[8] = *(timespec *)&v1261[1].tv_nsec;
                  *(_DWORD *)&v1268[24] = v1261[2].tv_nsec;
                  v1268[32] = 1;
                  *(_WORD *)&v1268[33] = 0;
                  memset(&v1268[40], 0, 24);
                  *(_QWORD *)&v1268[64] = 0xFFEFFFFFFFFFFFFFLL;
                  v1269 = 0;
                  v1270 = 0x3FF0000000000000;
                  v1271 = 0uLL;
                  v1272 = 0uLL;
                  v1273 = 0uLL;
                  v1274 = 0uLL;
                  v1275 = 0uLL;
                  v1276 = 0uLL;
                  v1279 = v1306;
                  v1280 = v1307;
                  v1281 = v1308;
                  v1282 = v1309;
                  v1277 = v1304;
                  v1278 = v1305;
                  v1287 = v1314;
                  v1285 = v1312;
                  v1286 = v1313;
                  v1283 = v1310;
                  v1284 = v1311;
                  v1288 = v1182;
                  v1289 = 0;
                  if (v1291)
                    v1291 = 0;
                  v1292 = 0;
                  v1293 = 0xBFF0000000000000;
                }
                else
                {
                  *(timespec *)&v1268[8] = *(timespec *)&v1261[1].tv_nsec;
                  *(_QWORD *)&v1268[24] = v1261[2].tv_nsec;
                  v1268[32] = 1;
                  *(_WORD *)&v1268[33] = 0;
                  memset(&v1268[40], 0, 24);
                  *(_QWORD *)&v1268[64] = 0xFFEFFFFFFFFFFFFFLL;
                  v1269 = 0;
                  v1270 = 0x3FF0000000000000;
                  *(_QWORD *)&__p[24] = &off_24CA04D80;
                  v1271 = 0uLL;
                  v1272 = 0uLL;
                  v1273 = 0uLL;
                  v1274 = 0uLL;
                  v1275 = 0uLL;
                  v1276 = 0uLL;
                  v1279 = v1306;
                  v1280 = v1307;
                  v1281 = v1308;
                  v1282 = v1309;
                  v1277 = v1304;
                  v1278 = v1305;
                  v1287 = v1314;
                  v1285 = v1312;
                  v1286 = v1313;
                  v1283 = v1310;
                  v1284 = v1311;
                  v1288 = v1182;
                  v1289 = 0;
                  v1290 = 0;
                  v1291 = 0;
                  v1292 = 0;
                  v1293 = 0xBFF0000000000000;
                  v1294 = 1;
                }
                _D3 = _Q0.f64[1];
                __asm { FMLA            D2, D3, V0.D[1] }
                v708 = 1.0 / sqrt(_D2 + 1.0);
                v709 = (int8x16_t)vmulq_n_f64(_Q0, v708);
                v1179 = *(double *)vextq_s8(v709, v709, 8uLL).i64;
                v1180 = v709.i64[0];
                v1181 = v708;
                if (fabs(sqrt(_Q0.f64[0] * v708 * *(double *)v709.i64+ *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64 * v708 * v1179+ v708 * v708)+ -1.0) > 0.000001&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioanchoredpoint3d.hpp", 41, (uint64_t)"std::fabs(vio::math::L2Norm3(anchor_direcrion.data()) - 1) <= 1e-6", 66, (uint64_t)"anchor direction should be normalized to 1", 42, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_1618;
                }
                v710 = *(_OWORD *)v664;
                *(_DWORD *)&v1268[24] = *((_DWORD *)v664 + 4);
                *(_OWORD *)&v1268[8] = v710;
                *(_QWORD *)&v710 = v1180;
                *((double *)&v710 + 1) = v1179;
                v1269 = v691;
                *(_OWORD *)&v1268[40] = v710;
                *(double *)&v1268[56] = v1181;
                *(double *)&v1268[64] = v704;
                if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)&__p[24] + 16))(&__p[24]) & 1) == 0
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 1936, (uint64_t)"success", 7, (uint64_t)"Fail to set anchor", 18, (void (*)(void **))sub_21023DDB0))
                {
LABEL_1618:
                  abort();
                }
                object[0] = 0;
                if (!sub_20F881F54(v1202, (uint64_t)&v1265, 0, 0, (double *)object)
                  && *(double *)object <= *(double *)(a1 + 2072))
                {
                  v711 = (uint64_t)&v1267;
                  if (!v1294)
                    v711 = 8;
                  v712 = *(unsigned __int8 *)(v1193 + 424);
                  v713 = *(_QWORD *)(v711 + 16);
                  *(_OWORD *)(v1193 + 400) = *(_OWORD *)v711;
                  *(_QWORD *)(v1193 + 416) = v713;
                  if (!v712)
                    *(_BYTE *)(v1193 + 424) = 1;
                  *(double *)(v1193 + 440) = v661;
                }
                *(_BYTE *)(v1193 + 432) = sub_20F88000C(a1, v1214, v600);
                if (v1294)
                  v1294 = 0;
                v1296 = (char *)v1295;
                v1298 = 0;
                if (v1295)
                  operator delete(v1295);
                if (*(_QWORD *)&v1265.f64[1])
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v1265.f64[1]);
              }
            }
          }
LABEL_1081:
          if (v618)
          {
            *((_QWORD *)&v1299 + 1) = v618;
            operator delete(v618);
          }
          v602 = v1195;
LABEL_1084:
          if (!*(_QWORD *)(a1 + 14224))
            goto LABEL_858;
          v714 = *(_BYTE *)(*v602 + 488) ? *v602 + 40 : 0;
          if (!*(_BYTE *)(v714 + 432))
            goto LABEL_858;
          if (*(_BYTE *)(v714 + 424))
            v1 = v714 + 400;
          else
            *(double *)&v1 = 0.0;
          v715 = *(char **)(a1 + 14552);
          v716 = *(_QWORD *)(a1 + 14560);
          if ((unint64_t)v715 < v716)
          {
            *(double *)v715 = *(double *)&v1;
            v609 = (uint64_t)(v715 + 8);
            goto LABEL_857;
          }
          v717 = *v606;
          v718 = v715 - *v606;
          v719 = v718 >> 3;
          v720 = (v718 >> 3) + 1;
          if (v720 >> 61)
            sub_20E867F44();
          v721 = v716 - (_QWORD)v717;
          if (v721 >> 2 > v720)
            v720 = v721 >> 2;
          if ((unint64_t)v721 >= 0x7FFFFFFFFFFFFFF8)
            v722 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v722 = v720;
          if (!v722)
          {
            v723 = 0;
            v724 = (double *)(8 * v719);
            *(double *)(8 * v719) = *(double *)&v1;
            v609 = 8 * v719 + 8;
            v725 = (char *)(v715 - v717);
            if (v715 == v717)
              goto LABEL_1111;
LABEL_1104:
            v726 = (unint64_t)(v725 - 8);
            if (v726 < 0x58)
              goto LABEL_1633;
            if ((unint64_t)(v715 - &v723[v718]) < 0x20)
              goto LABEL_1633;
            v727 = (v726 >> 3) + 1;
            v728 = 8 * (v727 & 0x3FFFFFFFFFFFFFFCLL);
            v729 = &v715[-v728];
            v724 = (double *)((char *)v724 - v728);
            v730 = (float64x2_t *)&v723[8 * v719 - 16];
            v731 = (float64x2_t *)(v715 - 16);
            v732 = v727 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              _Q1 = v731[-1];
              v733 = *v731;
              v730[-1] = _Q1;
              *v730 = v733;
              v730 -= 2;
              v731 -= 2;
              v732 -= 4;
            }
            while (v732);
            v715 = v729;
            if (v727 != (v727 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1633:
              do
              {
                v734 = *((_QWORD *)v715 - 1);
                v715 -= 8;
                *((_QWORD *)v724-- - 1) = v734;
              }
              while (v715 != v717);
            }
            v715 = *v606;
            goto LABEL_1111;
          }
          if (v722 >> 61)
            sub_20E877A38();
          v723 = operator new(8 * v722);
          v724 = (double *)&v723[8 * v719];
          *v724 = *(double *)&v1;
          v609 = (uint64_t)(v724 + 1);
          v725 = (char *)(v715 - v717);
          if (v715 != v717)
            goto LABEL_1104;
LABEL_1111:
          *(_QWORD *)(a1 + 14544) = v724;
          *(_QWORD *)(a1 + 14552) = v609;
          *(_QWORD *)(a1 + 14560) = &v723[8 * v722];
          v607 = v1199;
          if (v715)
            operator delete(v715);
LABEL_857:
          *(_QWORD *)(a1 + 14552) = v609;
LABEL_858:
          if (++v602 == v607)
            goto LABEL_1113;
        }
      }
      if ((char *)v603 - (char *)v602 < 0)
        sub_20E867F44();
      v605 = (char *)operator new(8 * v604);
      v598 = a1;
      *(_QWORD *)(a1 + 14544) = v605;
      *(_QWORD *)(a1 + 14552) = v605;
      *(_QWORD *)(a1 + 14560) = &v605[8 * v604];
      if (v601)
      {
        operator delete(v601);
        v602 = *(size_t **)(a1 + 14384);
        v1199 = *(size_t **)(a1 + 14392);
      }
    }
    v606 = (char **)(v598 + 14544);
    v607 = v1199;
    v1183 = (char **)(v598 + 14544);
    if (v602 == v1199)
    {
LABEL_1113:
      v735 = *(_QWORD *)(a1 + 14224);
      if (!v735)
        goto LABEL_1160;
      v736 = **(_QWORD ***)(a1 + 7952);
      memset(object, 0, 24);
      v737 = v736[39];
      if (v737)
      {
        if (v737 > 0x1E1E1E1E1E1E1E1)
          sub_20E867F44();
        v738 = (char *)operator new(136 * v737);
        v739 = &v738[136 * v737];
        object[0] = v738;
        object[1] = v738;
        object[2] = v739;
        v740 = (_QWORD *)v736[37];
        v741 = v736 + 38;
        if (v740 != v736 + 38)
          goto LABEL_1117;
      }
      else
      {
        v739 = 0;
        v738 = 0;
        v740 = (_QWORD *)v736[37];
        v741 = v736 + 38;
        if (v740 != v736 + 38)
        {
LABEL_1117:
          v742 = v736 + 223;
          __asm { FMOV            V0.2D, #1.0 }
          v1216 = *((double *)&_Q0 + 1);
          v744 = v738;
          do
          {
            v745 = *((_DWORD *)v740 + 8);
            v1265 = v1236;
            *(_DWORD *)__p = v745;
            v746 = sub_20E9DF85C(v742, (uint64_t *)&v1265);
            if (v746)
            {
              v747 = v746[9];
              v748.f64[0] = *(float64_t *)(v747 + 16);
              v749 = *(int64x2_t *)(v747 + 24);
              v750 = *(double *)(v747 + 64);
              _Q5 = *(int64x2_t *)(v747 + 48);
              v752 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v747, v749);
              v753 = (float64x2_t)vdupq_laneq_s64(_Q5, 1);
              v748.f64[1] = *(float64_t *)(v747 + 40);
              _Q2 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v747, v749);
              v754 = vextq_s8((int8x16_t)_Q2, (int8x16_t)v753, 8uLL);
              v755 = v746[11];
              v753.f64[0] = *(float64_t *)(v755 + 16);
              _Q3 = (__n128)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v752, *(double *)v755), _Q2, *(float64x2_t *)v755, 1), v748, v753.f64[0]);
              _D16 = *(_QWORD *)(v755 + 8);
              __asm { FMLA            D17, D16, V5.D[1] }
              v753.f64[0] = _D17 + v750 * v753.f64[0];
              *(_QWORD *)&v758 = *(_OWORD *)&vnegq_f64(v753);
              v494 = *(double *)_Q5.i64;
              *(_QWORD *)&_Q2.f64[1] = v754.i64[0];
              v406 = (float64x2_t)v754.u64[1];
              v407 = (__n128)*(unint64_t *)&v750;
              v759.f64[1] = v1216;
              v759.f64[0] = v758;
              v760 = v746[5];
              _Q22.f64[0] = *(float64_t *)(v760 + 16);
              v762 = *(float64x2_t *)v760;
              v763 = *(double *)(v760 + 40);
              v764 = *(float64x2_t *)(v760 + 24);
              v765 = *(double *)(v760 + 64);
              _Q19 = *(float64x2_t *)(v760 + 48);
              v767 = v746[7];
              v768 = *(double *)(v767 + 16);
              v769 = vmulq_n_f64(v752, _Q22.f64[0]);
              v770 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v494, _Q22.f64[0]);
              _Q22.f64[1] = v763;
              v771 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v762, (int64x2_t)v764), *(double *)v767), (float64x2_t)vzip2q_s64((int64x2_t)v762, (int64x2_t)v764), *(float64x2_t *)v767, 1), _Q22, v768);
              _D24 = *(_QWORD *)(v767 + 8);
              __asm { FMLA            D22, D24, V19.D[1] }
              _Q22.f64[0] = _Q22.f64[0] + v765 * v768;
              v773 = vmlaq_n_f64(vmulq_n_f64(v752, v762.f64[0]), _Q2, v764.f64[0]);
              v774 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v494, v762.f64[0]), (float64x2_t)*(unint64_t *)&v406.f64[0], v764.f64[0]);
              v775 = vmlaq_laneq_f64(vmulq_laneq_f64(v752, v762, 1), _Q2, v764, 1);
              v776 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v494, v762, 1), (float64x2_t)*(unint64_t *)&v406.f64[0], v764, 1);
              *(_QWORD *)&v762.f64[0] = *(_OWORD *)&vnegq_f64(v771);
              v777 = *((_DWORD *)v740 + 8);
              v778 = vmlsq_f64(vmlaq_n_f64(v773, v748, _Q19.f64[0]), (float64x2_t)0, (float64x2_t)_Q3);
              v779 = vmlaq_f64(vmlaq_n_f64(v774, (float64x2_t)v407.n128_u64[0], _Q19.f64[0]), (float64x2_t)0, v759);
              v780 = vmlsq_f64(vmlaq_laneq_f64(v775, v748, _Q19, 1), (float64x2_t)0, (float64x2_t)_Q3);
              v781 = vmlaq_f64(vmlaq_laneq_f64(v776, (float64x2_t)v407.n128_u64[0], _Q19, 1), (float64x2_t)0, v759);
              v782 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v769, _Q2, v763), v748, v765), (float64x2_t)0, (float64x2_t)_Q3);
              v783 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v770, (float64x2_t)*(unint64_t *)&v406.f64[0], v763), (float64x2_t)v407.n128_u64[0], v765), (float64x2_t)0, v759);
              _Q1 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v752, v762.f64[0]), _Q2, v771, 1), v748, _Q22.f64[0], 0), (float64x2_t)_Q3);
              v784 = vaddq_f64(v759, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v494, v762.f64[0]), (float64x2_t)*(unint64_t *)&v406.f64[0], v771, 1), (float64x2_t)v407.n128_u64[0], _Q22.f64[0], 0));
              if (v744 >= v739)
              {
                v785 = 0xF0F0F0F0F0F0F0F1 * ((v744 - v738) >> 3) + 1;
                if (v785 > 0x1E1E1E1E1E1E1E1)
                  sub_20E867F44();
                v1185 = v784;
                v1186 = _Q1;
                v1189 = v779;
                v1191 = v781;
                v1194 = v778;
                v1196 = v780;
                v1200 = v783;
                v1208 = v782;
                if (0xE1E1E1E1E1E1E1E2 * ((v739 - v738) >> 3) > v785)
                  v785 = 0xE1E1E1E1E1E1E1E2 * ((v739 - v738) >> 3);
                if (0xF0F0F0F0F0F0F0F1 * ((v739 - v738) >> 3) >= 0xF0F0F0F0F0F0F0)
                  v786 = 0x1E1E1E1E1E1E1E1;
                else
                  v786 = v785;
                if (v786 > 0x1E1E1E1E1E1E1E1)
                  sub_20E877A38();
                v787 = (char *)operator new(136 * v786);
                v788 = &v787[8 * ((v744 - v738) >> 3)];
                *(_DWORD *)v788 = v777;
                *(float64x2_t *)(v788 + 24) = v1189;
                *(float64x2_t *)(v788 + 8) = v1194;
                *(float64x2_t *)(v788 + 56) = v1191;
                *(float64x2_t *)(v788 + 40) = v1196;
                *(float64x2_t *)(v788 + 88) = v1200;
                *(float64x2_t *)(v788 + 72) = v1208;
                *(float64x2_t *)(v788 + 120) = v1185;
                *(float64x2_t *)(v788 + 104) = v1186;
                for (ii = v788; v744 != v738; *(_OWORD *)(ii + 72) = v794)
                {
                  v790 = *((_DWORD *)v744 - 34);
                  v744 -= 136;
                  *((_DWORD *)ii - 34) = v790;
                  ii -= 136;
                  v791 = *(_OWORD *)(v744 + 8);
                  v792 = *(_OWORD *)(v744 + 24);
                  v793 = *(_OWORD *)(v744 + 40);
                  *(_OWORD *)(ii + 56) = *(_OWORD *)(v744 + 56);
                  *(_OWORD *)(ii + 40) = v793;
                  *(_OWORD *)(ii + 24) = v792;
                  *(_OWORD *)(ii + 8) = v791;
                  v794 = *(_OWORD *)(v744 + 72);
                  _Q1 = *(float64x2_t *)(v744 + 88);
                  _Q2 = *(float64x2_t *)(v744 + 104);
                  _Q3 = *(__n128 *)(v744 + 120);
                  *(__n128 *)(ii + 120) = _Q3;
                  *(float64x2_t *)(ii + 104) = _Q2;
                  *(float64x2_t *)(ii + 88) = _Q1;
                }
                v739 = &v787[136 * v786];
                v744 = v788 + 136;
                object[0] = ii;
                object[2] = v739;
                if (v738)
                  operator delete(v738);
                v738 = ii;
              }
              else
              {
                *(_DWORD *)v744 = v777;
                *(float64x2_t *)(v744 + 8) = v778;
                *(float64x2_t *)(v744 + 24) = v779;
                *(float64x2_t *)(v744 + 40) = v780;
                *(float64x2_t *)(v744 + 56) = v781;
                *(float64x2_t *)(v744 + 72) = v782;
                *(float64x2_t *)(v744 + 88) = v783;
                *(float64x2_t *)(v744 + 104) = _Q1;
                *(float64x2_t *)(v744 + 120) = v784;
                v744 += 136;
              }
              object[1] = v744;
            }
            v795 = (_QWORD *)v740[1];
            if (v795)
            {
              do
              {
                v796 = v795;
                v795 = (_QWORD *)*v795;
              }
              while (v795);
            }
            else
            {
              do
              {
                v796 = (_QWORD *)v740[2];
                _ZF = *v796 == (_QWORD)v740;
                v740 = v796;
              }
              while (!_ZF);
            }
            v740 = v796;
          }
          while (v796 != v741);
          v797 = a1;
          v735 = *(_QWORD *)(a1 + 14224);
LABEL_1144:
          _Q1.f64[0] = v517;
          sub_20F817970(v735, v1183, (int **)object, (uint64_t)&v1265, *(double *)(*(_QWORD *)(v797 + 2888) - 8), _Q1, _Q2.f64[0], _Q3, v494, v406, v407);
          v798 = (float64x2_t *)(v797 + 14232);
          if (*(unsigned __int8 *)(v1184 + 112) == v1270)
          {
            if (!*(_BYTE *)(v1184 + 112))
              goto LABEL_1158;
            v799 = *(_OWORD *)__p;
            *v798 = v1265;
            *(_OWORD *)(v797 + 14248) = v799;
            *(float64_t *)(a1 + 14280) = v1267.f64[0];
            *(_OWORD *)(a1 + 14264) = *(_OWORD *)&__p[16];
            *(float64_t *)(a1 + 14288) = v1267.f64[1];
            *(_QWORD *)(a1 + 14312) = *(_QWORD *)&v1268[16];
            *(_OWORD *)(a1 + 14296) = *(_OWORD *)v1268;
            *(_OWORD *)(a1 + 14320) = *(_OWORD *)&v1268[24];
            *(_OWORD *)(a1 + 14332) = *(_OWORD *)&v1268[36];
            v800 = *(void **)(a1 + 14352);
            if (v800)
            {
              *(_QWORD *)(a1 + 14360) = v800;
              operator delete(v800);
              *(_QWORD *)(a1 + 14352) = 0;
              *(_QWORD *)(a1 + 14360) = 0;
              *(_QWORD *)(a1 + 14368) = 0;
            }
            *(_OWORD *)(a1 + 14352) = *(_OWORD *)&v1268[56];
            *(_QWORD *)(a1 + 14368) = v1269;
            v1269 = 0;
            *(_QWORD *)&v1268[64] = 0;
            *(_QWORD *)&v1268[56] = 0;
            if (!(_BYTE)v1270)
              goto LABEL_1158;
          }
          else if (*(_BYTE *)(v1184 + 112))
          {
            v801 = *(void **)(a1 + 14352);
            if (v801)
            {
              *(_QWORD *)(a1 + 14360) = v801;
              operator delete(v801);
            }
            *(_BYTE *)(v1184 + 112) = 0;
            if (!(_BYTE)v1270)
              goto LABEL_1158;
          }
          else
          {
            v802 = *(_OWORD *)__p;
            *v798 = v1265;
            *(_OWORD *)(v797 + 14248) = v802;
            *(float64_t *)(a1 + 14280) = v1267.f64[0];
            v803 = v1269;
            *(_QWORD *)(a1 + 14312) = *(_QWORD *)&v1268[16];
            *(_OWORD *)(a1 + 14264) = *(_OWORD *)&__p[16];
            *(float64_t *)(a1 + 14288) = v1267.f64[1];
            *(_OWORD *)(a1 + 14296) = *(_OWORD *)v1268;
            *(_OWORD *)(a1 + 14320) = *(_OWORD *)&v1268[24];
            *(_OWORD *)(a1 + 14332) = *(_OWORD *)&v1268[36];
            *(_OWORD *)(a1 + 14352) = *(_OWORD *)&v1268[56];
            *(_QWORD *)(a1 + 14368) = v803;
            v1269 = 0;
            *(_QWORD *)&v1268[64] = 0;
            *(_QWORD *)&v1268[56] = 0;
            *(_BYTE *)(v1184 + 112) = 1;
            if (!(_BYTE)v1270)
            {
LABEL_1158:
              if (object[0])
              {
                object[1] = object[0];
                operator delete(object[0]);
              }
              goto LABEL_1160;
            }
          }
          if (*(_QWORD *)&v1268[56])
          {
            *(_QWORD *)&v1268[64] = *(_QWORD *)&v1268[56];
            operator delete(*(void **)&v1268[56]);
          }
          goto LABEL_1158;
        }
      }
      v797 = a1;
      goto LABEL_1144;
    }
    goto LABEL_855;
  }
LABEL_1160:
  v1234 = 0uLL;
  v1235 = 0;
  v804 = a1;
  v805 = *(_QWORD *)(a1 + 15680);
  if (v805)
  {
    v806 = *(_QWORD *)(a1 + 2480);
    v807 = *(_QWORD *)(a1 + 2488);
    if (v806 != v807)
    {
      v808 = *(_QWORD *)(a1 + 3032);
      if (*(_DWORD *)v808)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 6686, (uint64_t)"default_camera_models_.front().camera_id == 0u", 46, (uint64_t)"The first camera should be the primiary camera.", 47, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v809 = a1;
        v808 = *(_QWORD *)(a1 + 3032);
        v807 = *(_QWORD *)(a1 + 2488);
        v806 = *(_QWORD *)(a1 + 2480);
        v805 = *(_QWORD *)(a1 + 15680);
      }
      else
      {
        v809 = a1;
      }
      v810 = *(_QWORD *)(v808 + 8);
      v811.f64[0] = *(float64_t *)(v810 + 16);
      v812 = *(int64x2_t *)(v810 + 24);
      _D17 = *(_QWORD *)(v810 + 64);
      v814 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v810, v812);
      v815 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v810, v812);
      v811.f64[1] = *(float64_t *)(v810 + 40);
      v816 = vextq_s8((int8x16_t)v815, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v810 + 48), 1), 8uLL);
      _D5 = *(double *)(v810 + 88);
      _Q6 = *(float64x2_t *)(v810 + 72);
      v819 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v814, vnegq_f64(_Q6).f64[0]), v815, _Q6, 1), v811, _D5, 0);
      _D18 = *(_QWORD *)(v810 + 56);
      __asm
      {
        FMLS            D4, D18, V6.D[1]
        FMLS            D4, D17, V5.D[0]
      }
      v823 = *(_QWORD *)(v810 + 48);
      *(_QWORD *)&v815.f64[1] = v816.i64[0];
      v816.i64[0] = _D17;
      _Q4.f64[1] = 1.0;
      v824 = *(_QWORD *)(v809 + 2280) + 168 * ((v807 - v806) >> 2);
      _Q23.f64[0] = *(float64_t *)(v824 - 152);
      v826 = *(float64x2_t *)(v824 - 168);
      v827 = *(double *)(v824 - 128);
      v828 = *(float64x2_t *)(v824 - 144);
      v829 = *(double *)(v824 - 104);
      _Q20 = *(float64x2_t *)(v824 - 120);
      v831 = *(double *)(v824 - 8);
      v832 = vmulq_n_f64(v814, _Q23.f64[0]);
      v833 = vmulq_n_f64((float64x2_t)v823, _Q23.f64[0]);
      _Q23.f64[1] = v827;
      v834 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v826, (int64x2_t)v828), *(double *)(v824 - 24)), (float64x2_t)vzip2q_s64((int64x2_t)v826, (int64x2_t)v828), *(float64x2_t *)(v824 - 24), 1), _Q23, v831);
      _D25 = *(_QWORD *)(v824 - 16);
      __asm { FMLA            D23, D25, V20.D[1] }
      _Q23.f64[0] = _Q23.f64[0] + v829 * v831;
      v836 = vmlaq_n_f64(vmulq_n_f64(v814, v826.f64[0]), v815, v828.f64[0]);
      v837 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v823, v826.f64[0]), (float64x2_t)v816.u64[1], v828.f64[0]);
      v838 = vmlaq_laneq_f64(vmulq_laneq_f64(v814, v826, 1), v815, v828, 1);
      v839 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v823, v826, 1), (float64x2_t)v816.u64[1], v828, 1);
      *(_QWORD *)&v828.f64[0] = *(_OWORD *)&vnegq_f64(v834);
      v1265 = vmlaq_f64(vmlaq_n_f64(v836, v811, _Q20.f64[0]), (float64x2_t)0, v819);
      *(float64x2_t *)__p = vmlaq_f64(vmlaq_n_f64(v837, (float64x2_t)v816.u64[0], _Q20.f64[0]), (float64x2_t)0, _Q4);
      *(float64x2_t *)&__p[16] = vmlaq_f64(vmlaq_laneq_f64(v838, v811, _Q20, 1), (float64x2_t)0, v819);
      v1267 = vmlaq_f64(vmlaq_laneq_f64(v839, (float64x2_t)v816.u64[0], _Q20, 1), (float64x2_t)0, _Q4);
      *(float64x2_t *)v1268 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v832, v815, v827), v811, v829), (float64x2_t)0, v819);
      *(float64x2_t *)&v1268[16] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v833, (float64x2_t)v816.u64[1], v827), (float64x2_t)v816.u64[0], v829), (float64x2_t)0, _Q4);
      *(float64x2_t *)&v1268[32] = vaddq_f64(v819, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v814, v828.f64[0]), v815, v834, 1), v811, _Q23.f64[0], 0));
      *(float64x2_t *)&v1268[48] = vaddq_f64(_Q4, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v823, v828.f64[0]), (float64x2_t)v816.u64[1], v834, 1), (float64x2_t)v816.u64[0], _Q23.f64[0], 0));
      (*(void (**)(void **__return_ptr, uint64_t, float64x2_t *, double, double))(*(_QWORD *)v805 + 24))(object, v805, &v1265, *(double *)(v809 + 2256), *(double *)(v809 + 2264));
      v1234 = *(_OWORD *)object;
      v1235 = object[2];
      v804 = a1;
    }
  }
  v1233 = 0;
  v1232 = *(_BYTE *)(a1 + 11680) != 0;
  if (*(_BYTE *)(v804 + 1993))
  {
    v840 = *(uint64_t **)(a1 + 14448);
    v841 = *(uint64_t **)(a1 + 14456);
    if (v840 != v841)
    {
      while (1)
      {
        v842 = *v840;
        if (*(_DWORD *)(*(_QWORD *)(*v840 + 496) + 16) == *(_DWORD *)(*(_QWORD *)(*v840 + 504) - 48))
          v843 = (double *)&v1251;
        else
          v843 = &v1246;
        if (*(_BYTE *)(v842 + 488))
        {
          *(_OWORD *)object = *(_OWORD *)(v842 + 48);
          object[2] = *(void **)(v842 + 64);
        }
        LODWORD(v1261[0].tv_sec) = 0;
        BYTE4(v1261[0].tv_sec) = 0;
        v1261[0].tv_nsec = 0;
        LODWORD(v1261[1].tv_sec) = 0;
        BYTE4(v1261[1].tv_sec) = 1;
        if (v1256)
        {
          v844 = *((_OWORD *)v843 + 1);
          v1265 = *(float64x2_t *)v843;
          *(_OWORD *)__p = v844;
          *(_OWORD *)&__p[16] = *((_OWORD *)v843 + 2);
          if (!sub_20FB98350(v1202, v842, (uint64_t)&v1265, 1, (int *)v1261))
            break;
        }
        if (*(_BYTE *)(a1 + 1994))
        {
          if (*(_BYTE *)(a1 + 1998))
            v845 = !v1232;
          else
            v845 = 1;
          v846 = !v845;
          if (sub_20F881F54(v1202, v842, 1, v846, 0))
            break;
          if (v1256)
          {
            v859 = *(_QWORD *)(a1 + 15680);
            if (v859)
            {
              v860 = *(_BYTE *)(v842 + 488) ? v842 + 40 : 0;
              if (*(_BYTE *)(v860 + 393))
                goto LABEL_1214;
              v861 = *(float64x2_t ***)(v860 + 96);
              v862 = **v861;
              _D2 = (*v861)[2].f64[1];
              v864 = *(float64x2_t *)((char *)*v861 + 24);
              v865 = (*v861)[4].f64[0];
              v866 = (*v861)[3];
              v867 = v861[4];
              v868 = v867[1].f64[0];
              _Q7 = *v867;
              v870 = v867[2].f64[1];
              _Q17 = *(float64x2_t *)((char *)v867 + 24);
              v872 = v867[4].f64[0];
              _Q19 = v867[3];
              v874 = v861[6];
              v848.f64[0] = v874[1].f64[0];
              _Q21 = *v874;
              v876 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v862, v874->f64[0]), v864, *v874, 1), v866, v848.f64[0]);
              __asm { FMLA            D23, D2, V21.D[1] }
              v848.f64[0] = _D23 + v865 * v848.f64[0];
              v878 = v861[2];
              _Q21.f64[0] = v878[1].f64[0];
              *(_QWORD *)&v879 = *(_OWORD *)&vaddq_f64(v848, _Q21);
              v880 = vaddq_f64(v876, *v878);
              v881 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v862, _Q7.f64[0]), v864, _Q7, 1), v866, v868);
              __asm { FMLA            D23, D2, V7.D[1] }
              v883.f64[0] = _D23 + v865 * v868;
              _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v862, _Q17.f64[0]), v864, _Q17, 1), v866, v870);
              __asm { FMLA            D23, D2, V17.D[1] }
              _Q1 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v862, _Q19.f64[0]), v864, _Q19, 1), v866, v872);
              __asm { FMLA            D0, D2, V19.D[1] }
              v888 = _D0 + v865 * v872;
              v889 = (float64x2_t)vzip1q_s64(v881, (int64x2_t)_Q7);
              v890 = (float64x2_t)vzip2q_s64(v881, (int64x2_t)_Q7);
              v883.f64[1] = _D23 + v865 * v870;
              _D16 = v880.f64[1];
              __asm { FMLA            D7, D16, V1.D[1] }
              _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], v888, v879);
              v1265 = v889;
              *(_OWORD *)__p = _Q1.u64[0];
              *(float64x2_t *)&__p[16] = v890;
              v1267 = (float64x2_t)vdupq_laneq_s64(_Q1, 1).u64[0];
              *(float64x2_t *)v1268 = v883;
              *(_OWORD *)&v1268[16] = *(unint64_t *)&v888;
              *(float64x2_t *)&v1268[32] = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v889, v880.f64[0]), v890, v880, 1), v883, v879));
              *(_QWORD *)&v1268[48] = *(_OWORD *)&vnegq_f64(_Q7);
              *(_QWORD *)&v1268[56] = 0x3FF0000000000000;
              v892 = *(_QWORD *)(v842 + 496);
              v893 = *(_QWORD *)(v842 + 504);
              v894 = v892 != v893 && (unint64_t)(*(_DWORD *)(v892 + 16) != *(_DWORD *)(v893 - 48));
              if (((*(uint64_t (**)(uint64_t, uint64_t, __int128 *, float64x2_t *, uint64_t, _BOOL8))(*(_QWORD *)v859 + 32))(v859, v860 + 8, &v1234, &v1265, v860 + 64, v894) & 1) != 0)
              {
LABEL_1214:
                v895 = 0;
                ++v1233;
LABEL_1246:
                v914 = *((_OWORD *)v843 + 1);
                v1265 = *(float64x2_t *)v843;
                *(_OWORD *)__p = v914;
                *(_OWORD *)&__p[16] = *((_OWORD *)v843 + 2);
                v915 = sub_20FB98350(v1202, v842, (uint64_t)&v1265, 1, (int *)v1261);
                if (v895)
                  v916 = v915;
                else
                  v916 = 0;
                if (*(_BYTE *)(v842 + 488))
                  v917 = v842 + 40;
                else
                  v917 = 0;
                *(_WORD *)(v917 + 57) = v916 | 0x100;
                goto LABEL_1190;
              }
            }
            if (!v1239)
            {
              v895 = 1;
              goto LABEL_1246;
            }
            v896 = *(unsigned __int8 *)(v842 + 488);
            if (!*(_BYTE *)(v1184 + 112)
              || (*(_BYTE *)(v842 + 488) ? (v897 = v842 + 40) : (v897 = 0), *(_BYTE *)(v897 + 392)))
            {
              if (*(_BYTE *)(v842 + 488))
                v898 = v842 + 40;
              else
                v898 = 0;
              if (*(_BYTE *)(v898 + 432))
              {
LABEL_1225:
                v895 = 0;
                goto LABEL_1246;
              }
LABEL_1245:
              v895 = *(unsigned __int8 *)(v898 + 392) == 0;
              goto LABEL_1246;
            }
            v899 = *(double **)(a1 + 14224);
            v847.f64[0] = *(float64_t *)(v897 + 24);
            _Q0 = *(float64x2_t *)(v897 + 8);
            _Q4 = vmulq_f64(_Q0, *(float64x2_t *)v1184);
            _D3 = *(_QWORD *)(v1184 + 8);
            __asm { FMLA            D4, D3, V0.D[1] }
            if (vabdd_f64(_Q4.f64[0] + v847.f64[0] * *(double *)(v1184 + 16), *(double *)(a1 + 14288)) > v899[33])
              goto LABEL_1230;
            v903 = *(double *)(a1 + 14320) * v899[34];
            _Q4.f64[0] = *(float64_t *)(v1184 + 48);
            *(_QWORD *)&v904 = *(_OWORD *)&vsubq_f64(v847, _Q4);
            *(_QWORD *)&_Q0.f64[1] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
            _D4 = vsubq_f64(_Q0, *(float64x2_t *)(v1184 + 32)).f64[1];
            __asm { FMLA            D2, D4, V0.D[1] }
            if (vmlad_n_f64(_D2, v904, v904) > v903 * v903)
            {
LABEL_1230:
              v908 = *(_QWORD *)(v842 + 496);
              for (jj = *(_QWORD *)(v842 + 504); v908 != jj; v908 += 64)
              {
                if (*(_QWORD *)v908 == *(_QWORD *)&v1236.f64[0] && *(_DWORD *)(v908 + 8) == LODWORD(v1236.f64[1]))
                {
                  v912 = *(_QWORD *)(a1 + 14352);
                  v913 = *(_QWORD *)(a1 + 14360);
                  if (v912 != v913)
                  {
                    while (*(_DWORD *)v912 != *(_DWORD *)(v908 + 16))
                    {
                      v912 += 32;
                      if (v912 == v913)
                        goto LABEL_1233;
                    }
                    _D2 = vsubq_f64(*(float64x2_t *)(v908 + 40), *(float64x2_t *)(v912 + 8)).f64[1];
                    __asm { FMLA            D1, D2, V0.D[1] }
                    if (_D1 < v899[35] * *(double *)(v912 + 24))
                      goto LABEL_1229;
                  }
                }
LABEL_1233:
                ;
              }
              v907 = 0;
            }
            else
            {
LABEL_1229:
              v907 = 1;
            }
            *(_BYTE *)(v897 + 392) = v907;
            if (v896)
              v898 = v842 + 40;
            else
              v898 = 0;
            if (*(_BYTE *)(v898 + 432))
              goto LABEL_1225;
            goto LABEL_1245;
          }
        }
LABEL_1190:
        v850 = *(unsigned __int8 *)(v842 + 488);
        if (*(_BYTE *)(v842 + 488))
          v851 = v842 + 40;
        else
          v851 = 0;
        if (*(_BYTE *)(v851 + 58))
        {
          if (!*(_BYTE *)(v851 + 57))
          {
            v853 = *(_QWORD *)(v842 + 496);
            v852 = *(_QWORD *)(v842 + 504);
            if (v853 != v852)
            {
              v854 = v852 - v853 - 64;
              v855 = *(_QWORD *)(v842 + 496);
              if (v854 < 0x40)
                goto LABEL_1634;
              v856 = (v854 >> 6) + 1;
              v855 = v853 + ((v856 & 0x7FFFFFFFFFFFFFELL) << 6);
              v857 = (_DWORD *)(v853 + 88);
              v858 = v856 & 0x7FFFFFFFFFFFFFELL;
              do
              {
                *(v857 - 16) = 0;
                *v857 = 0;
                v857 += 32;
                v858 -= 2;
              }
              while (v858);
              if (v856 != (v856 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_1634:
                do
                {
                  *(_DWORD *)(v855 + 24) = 0;
                  v855 += 64;
                }
                while (v855 != v852);
              }
            }
          }
        }
        if (v850 && !*(_BYTE *)(a1 + 1996))
        {
          *(_OWORD *)(v842 + 48) = *(_OWORD *)object;
          *(void **)(v842 + 64) = object[2];
        }
        if (++v840 == v841)
          goto LABEL_1253;
      }
      if (*(_BYTE *)(v842 + 488))
        v849 = v842 + 40;
      else
        v849 = 0;
      *(_WORD *)(v849 + 57) = 256;
      goto LABEL_1190;
    }
  }
LABEL_1253:
  v918 = *(double *)&a1;
  v919 = 2016;
  if (!*v1187)
    v919 = 2008;
  v920 = *(_QWORD *)(a1 + v919);
  v1231 = v920;
  if (*(_QWORD *)(a1 + 2016) != -1)
  {
    v921 = *(uint64_t **)(a1 + 14392);
    v922 = *(_QWORD *)(a1 + 14384);
    v923 = ((uint64_t)v921 - v922) >> 3;
    if (v923 <= v920 && v1239 == 0)
      goto LABEL_1269;
    goto LABEL_1264;
  }
  v921 = *(uint64_t **)(a1 + 14392);
  v922 = *(_QWORD *)(a1 + 14384);
  if (v1239)
  {
    v923 = ((uint64_t)v921 - v922) >> 3;
    v918 = *(double *)&a1;
LABEL_1264:
    object[0] = *(void **)&v918;
    v1261[0].tv_sec = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v918 + 7952) + 48);
    v1265.f64[0] = v918;
    *(_QWORD *)&v1265.f64[1] = v1261;
    v1230[0] = &v1239;
    v1230[1] = object;
    v1230[2] = &v1265;
    v925 = 126 - 2 * __clz(v923);
    if (v921 == (uint64_t *)v922)
      v926 = 0;
    else
      v926 = v925;
    sub_20FB40DC4(v922, v921, (uint64_t)v1230, v926, 1);
    v920 = v1231;
    v921 = *(uint64_t **)(*(_QWORD *)&v918 + 14392);
    v922 = *(_QWORD *)(*(_QWORD *)&v918 + 14384);
    goto LABEL_1269;
  }
  v918 = *(double *)&a1;
LABEL_1269:
  v1229 = 0;
  object[0] = *(void **)&v918;
  object[1] = &v1236;
  object[2] = (void *)(a1 + 14568);
  object[3] = &v1256;
  object[4] = &v1232;
  object[5] = &v1251;
  object[6] = &v1246;
  object[7] = &v1238;
  *(_QWORD *)&v1302 = &__dst;
  *((_QWORD *)&v1302 + 1) = &v1234;
  *(_QWORD *)&v1303 = &v1233;
  *((_QWORD *)&v1303 + 1) = a1 + 14472;
  *(_QWORD *)&v1304 = a1 + 14496;
  *((_QWORD *)&v1304 + 1) = &v1257;
  *(_QWORD *)&v1305 = &v1237;
  *((_QWORD *)&v1305 + 1) = a1 + 14520;
  *(_QWORD *)&v1306 = &v1229;
  if (v920 >= ((uint64_t)v921 - v922) >> 3)
    goto LABEL_1285;
  v927 = *(_QWORD *)(a1 + 8216);
  v928 = *(unsigned __int8 *)(v927 + 1720);
  v929 = v927 + 864;
  v930 = v927 + 24;
  if (v928)
    v930 = v929;
  if (*(_BYTE *)(v930 + 800) && *v1187)
  {
    v931 = *(unsigned int *)(*(_QWORD *)(a1 + 2480)
                           + (((uint64_t)(*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 1) & 0xFFFFFFFFFFFFFFFCLL));
    v1226 = 0;
    v1227 = v931;
    v1228 = 0;
    v932 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(a1 + 7952) + 1784), &v1226);
    if (v932)
      v933 = (float64x2_t **)(v932 + 5);
    else
      v933 = 0;
    if (!v932
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/src/SlidingWindowFilterFG.cpp", 2458, (uint64_t)"mid_pose_ref", 12, (uint64_t)"Invalid mid-keyframe ID.", 24, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v934 = (uint64_t)(*(_QWORD *)(a1 + 14392) - *(_QWORD *)(a1 + 14384)) >> 3;
    v1265 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    sub_20F623C14(a1 + 12520, v934, &v1265);
    v1225[0] = v933;
    v1225[1] = v933 + 4;
    v1222 = a1;
    v1223 = (uint64_t **)v1225;
    v1224 = v1217;
    bzero((void *)(a1 + 12568), 0x480uLL);
    v1221 = a1;
    v935 = *(uint64_t **)(a1 + 14448);
    for (kk = *(uint64_t **)(a1 + 14456); v935 != kk; ++v935)
    {
      v937 = *v935;
      if (*(_BYTE *)(*v935 + 488) && *(_BYTE *)(v937 + 98))
      {
        _Q1 = *(_OWORD *)(v937 + 48);
        v939 = (double *)v933[2];
        v940 = v933[4];
        v941 = (double *)v933[6];
        v942 = *(double *)&_Q1 - *v939;
        *(double *)&_Q1 = *((double *)&_Q1 + 1) - v939[1];
        v943 = *(double *)(v937 + 64) - v939[2];
        v944.f64[0] = (*v933)[1].f64[0];
        _Q7 = (*v933)[3];
        v944.f64[1] = (*v933)[2].f64[1];
        v946 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)*v933, *(int64x2_t *)((char *)&(*v933)[1] + 8)), v942), (float64x2_t)vzip2q_s64(*(int64x2_t *)*v933, *(int64x2_t *)((char *)&(*v933)[1] + 8)), *(double *)&_Q1), v944, v943);
        __asm { FMLA            D2, D1, V7.D[1] }
        v948 = _D2 + (*v933)[4].f64[0] * v943;
        _D2 = v946.f64[1] - v941[1];
        v950 = v948 - v941[2];
        v944.f64[0] = v940[1].f64[0];
        _Q7 = v940[3];
        v944.f64[1] = v940[2].f64[1];
        v1215 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v940, *(int64x2_t *)((char *)&v940[1] + 8)), v946.f64[0] - *v941), (float64x2_t)vzip2q_s64(*(int64x2_t *)v940, *(int64x2_t *)((char *)&v940[1] + 8)), _D2), v944, v950);
        __asm { FMLA            D1, D2, V7.D[1] }
        v952 = *(double *)&_Q1 + v940[4].f64[0] * v950;
        *(float *)&v950 = v1215.f64[0];
        *(float *)&_Q1 = v952;
        v953 = atan2f(*(float *)&v950, *(float *)&_Q1) + 3.14159265;
        v954 = v1215.f64[1];
        v955 = sqrt(vmulq_f64(v1215, v1215).f64[0] + v952 * v952);
        v956 = atan2f(v954, v955) + 1.57079633;
        v957 = (unint64_t)(v953 * 3.81971863) - ((unint64_t)(v953 * 3.81971863) == 24);
        ++*(_DWORD *)(a1
                    + 12568
                    + 48 * v957
                    + 4 * ((unint64_t)(v956 * 3.81971863) - ((unint64_t)(v956 * 3.81971863) == 12)));
      }
    }
    v1220 = 0;
    v973 = (uint64_t)(*(_QWORD *)(a1 + 14392) - *(_QWORD *)(a1 + 14384)) >> 3;
    LOBYTE(v1265.f64[0]) = 0;
    sub_20EDCA4D0(a1 + 12544, v973, &v1265);
    *(_QWORD *)&v1265.f64[0] = &v1229;
    *(_QWORD *)&v1265.f64[1] = &v1231;
    *(_QWORD *)__p = v1217;
    *(_QWORD *)&__p[8] = &v1239;
    *(_QWORD *)&__p[16] = object;
    *(_QWORD *)&__p[24] = &v1221;
    *(_QWORD *)&v1267.f64[0] = &v1222;
    *(_QWORD *)&v1267.f64[1] = &v1220;
    *(_QWORD *)v1268 = a1;
    v974 = *(uint64_t **)(a1 + 14392);
    v975 = *(uint64_t **)(a1 + 14384);
    if (v974 == v975)
    {
      v975 = *(uint64_t **)(a1 + 14392);
      goto LABEL_1467;
    }
    for (mm = 0; mm < v974 - v975; ++mm)
    {
      v977 = *(_QWORD *)(a1 + 12032);
      if (v977)
      {
        v978 = *(_QWORD *)(v975[mm] + 32);
        v979 = (uint8x8_t)vcnt_s8((int8x8_t)v977);
        v979.i16[0] = vaddlv_u8(v979);
        if (v979.u32[0] > 1uLL)
        {
          v980 = *(_QWORD *)(v975[mm] + 32);
          if (v977 <= v978)
            v980 = v978 % v977;
        }
        else
        {
          v980 = ((_DWORD)v977 - 1) & v978;
        }
        v981 = *(uint64_t ***)(*(_QWORD *)(a1 + 12024) + 8 * v980);
        if (v981)
        {
          v982 = *v981;
          if (v982)
          {
            if (v979.u32[0] < 2uLL)
            {
              v983 = v977 - 1;
              while (1)
              {
                v985 = v982[1];
                if (v985 == v978)
                {
                  if (*((_DWORD *)v982 + 4) == (_DWORD)v978)
                    goto LABEL_1331;
                }
                else if ((v985 & v983) != v980)
                {
                  goto LABEL_1309;
                }
                v982 = (uint64_t *)*v982;
                if (!v982)
                  goto LABEL_1309;
              }
            }
            while (1)
            {
              v984 = v982[1];
              if (v984 == v978)
                break;
              if (v984 >= v977)
                v984 %= v977;
              if (v984 != v980)
                goto LABEL_1309;
LABEL_1320:
              v982 = (uint64_t *)*v982;
              if (!v982)
                goto LABEL_1309;
            }
            if (*((_DWORD *)v982 + 4) != (_DWORD)v978)
              goto LABEL_1320;
LABEL_1331:
            v986 = sub_20F882E40((unint64_t **)&v1265, mm);
            v974 = *(uint64_t **)(a1 + 14392);
            v975 = *(uint64_t **)(a1 + 14384);
            if (!v986)
              break;
          }
        }
      }
LABEL_1309:
      ;
    }
    if (v974 != v975)
    {
      v987 = 0;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 12544) + ((v987 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v987) & 1) == 0)
        {
          v988 = v975[v987];
          v989 = *(_QWORD *)(v988 + 496);
          v990 = *(_QWORD *)(v988 + 504);
          v991 = *(_QWORD *)(a1 + 8216);
          v992 = *(unsigned __int8 *)(v991 + 1720);
          v993 = v991 + 864;
          v994 = v991 + 24;
          if (v992)
            v994 = v993;
          if (*(unsigned int *)(v994 + 808) <= (unint64_t)((v990 - v989) >> 6))
          {
            v995 = sub_20F8830B0(v989, v990);
            v996 = *(_QWORD *)(a1 + 8216);
            v997 = *(unsigned __int8 *)(v996 + 1720);
            v998 = v996 + 864;
            v999 = v996 + 24;
            if (v997)
              v999 = v998;
            if (v995 < *(unsigned int *)(v999 + 804))
            {
              v974 = *(uint64_t **)(a1 + 14392);
              v975 = *(uint64_t **)(a1 + 14384);
            }
            else
            {
              v1000 = sub_20F882E40((unint64_t **)&v1265, v987);
              v974 = *(uint64_t **)(a1 + 14392);
              v975 = *(uint64_t **)(a1 + 14384);
              if (!v1000)
                goto LABEL_1467;
            }
          }
        }
        if (++v987 >= v974 - v975)
          goto LABEL_1467;
      }
    }
    v974 = v975;
LABEL_1467:
    v1049 = v1229;
    if (v1220 >= v974 - v975 || v1229 >= v1231)
    {
      v1053 = v974;
    }
    else
    {
      v1053 = v974;
      v1218 = 1;
      v1054 = (_QWORD *)(a1 + 12520);
      v1197 = v933;
      while (v1053 != v975)
      {
        v1055 = 0;
        v1056 = (_QWORD *)(a1 + 12544);
        while (1)
        {
          if (((*(_QWORD *)(*v1056 + ((v1055 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1055) & 1) != 0)
            goto LABEL_1492;
          v1057 = v975[v1055];
          if (*(_BYTE *)(v1057 + 488))
          {
            _Q1 = *(_OWORD *)(v1057 + 48);
            _D3 = *(_QWORD *)(v1057 + 56);
            __asm { FMLA            D2, D3, V1.D[1] }
            if (sqrt(_D2 + *(double *)(v1057 + 64) * *(double *)(v1057 + 64)) > 0.0)
            {
              v1061 = v1222;
              v1062 = *(_QWORD *)(v1222 + 12520);
              v1063 = (double *)(v1062 + 16 * v1055);
              v1064 = *v1063;
              if (*v1063 > 6.28318531)
              {
                v1065 = *(_QWORD *)(*v1224 + 8 * v1055);
                if (*(_BYTE *)(v1065 + 488))
                  v1066 = v1065 + 40;
                else
                  v1066 = 0;
                v1067 = *(double *)(v1066 + 24);
                _Q1 = *(_OWORD *)(v1066 + 8);
                v1069 = v1223[1];
                v1070 = **v1223;
                v1071 = (double *)(*v1223)[2];
                v1072 = *v1069;
                v1073 = (double *)v1069[2];
                v1074 = *(double *)&_Q1 - *v1071;
                *(double *)&_Q1 = *((double *)&_Q1 + 1) - v1071[1];
                v1075 = v1067 - v1071[2];
                v1076.f64[0] = *(float64_t *)(v1070 + 16);
                _Q7 = *(_OWORD *)(v1070 + 48);
                v1076.f64[1] = *(float64_t *)(v1070 + 40);
                v1078 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1070, *(int64x2_t *)(v1070 + 24)), v1074), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1070, *(int64x2_t *)(v1070 + 24)), *(double *)&_Q1), v1076, v1075);
                __asm { FMLA            D2, D1, V7.D[1] }
                v1080 = _D2 + *(double *)(v1070 + 64) * v1075;
                _D2 = v1078.f64[1] - v1073[1];
                v1082 = v1080 - v1073[2];
                v1076.f64[0] = *(float64_t *)(v1072 + 16);
                _Q7 = *(_OWORD *)(v1072 + 48);
                v1076.f64[1] = *(float64_t *)(v1072 + 40);
                v1209 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v1072, *(int64x2_t *)(v1072 + 24)), v1078.f64[0] - *v1073), (float64x2_t)vzip2q_s64(*(int64x2_t *)v1072, *(int64x2_t *)(v1072 + 24)), _D2), v1076, v1082);
                __asm { FMLA            D1, D2, V7.D[1] }
                v1084 = *(double *)&_Q1 + *(double *)(v1072 + 64) * v1082;
                *(float *)&v1082 = v1209.f64[0];
                *(float *)&_Q1 = v1084;
                v1085 = atan2f(*(float *)&v1082, *(float *)&_Q1) + 3.14159265;
                v1086 = v1209.f64[1];
                v1087 = sqrt(vmulq_f64(v1209, v1209).f64[0] + v1084 * v1084);
                v1088 = atan2f(v1086, v1087);
                *v1063 = v1085;
                v1063[1] = v1088 + 1.57079633;
                v1062 = *(_QWORD *)(v1061 + 12520);
                v1064 = *(double *)(v1062 + 16 * v1055);
              }
              v1089 = *(double *)(v1062 + 16 * v1055 + 8);
              v1056 = (_QWORD *)(a1 + 12544);
              goto LABEL_1584;
            }
          }
          v1090 = (double *)(*v1054 + 16 * v1055);
          v1064 = *v1090;
          if (*v1090 <= 6.28318531)
          {
            v1089 = v1090[1];
            goto LABEL_1584;
          }
          v1261[0].tv_nsec = 0;
          v1261[1].tv_sec = 0;
          v1261[0].tv_sec = (__darwin_time_t)&v1261[0].tv_nsec;
          v1091 = *(__int128 **)(v1057 + 496);
          v1092 = *(__int128 **)(v1057 + 504);
          if (v1091 == v1092)
          {
            v1054 = (_QWORD *)(a1 + 12520);
            v1056 = (_QWORD *)(a1 + 12544);
            goto LABEL_1568;
          }
          v1093 = 0;
          do
          {
            p_tv_nsec = &v1261[0].tv_nsec;
            v1095 = &v1261[0].tv_nsec;
            if (v1261[0].tv_nsec)
            {
              v1096 = *((_DWORD *)v1091 + 4);
              v1097 = *(_QWORD *)v1091;
              tv_nsec = v1261[0].tv_nsec;
              v1099 = *((_DWORD *)v1091 + 2);
              while (1)
              {
                while (1)
                {
                  v1095 = (uint64_t *)tv_nsec;
                  v1100 = *(_DWORD *)(tv_nsec + 48);
                  if (v1096 == v1100)
                    break;
                  if (v1096 >= v1100)
                  {
                    if (v1100 >= v1096)
                      goto LABEL_1509;
                    goto LABEL_1523;
                  }
LABEL_1512:
                  tv_nsec = *v1095;
                  p_tv_nsec = v1095;
                  if (!*v1095)
                    goto LABEL_1525;
                }
                v1101 = v1095[4];
                if (v1097 < v1101)
                  goto LABEL_1512;
                if (v1097 != v1101)
                {
                  if (v1101 >= v1097)
                    goto LABEL_1509;
                  goto LABEL_1523;
                }
                v1102 = *((_DWORD *)v1095 + 10);
                if (v1099 < v1102)
                  goto LABEL_1512;
                if (v1102 >= v1099)
                  goto LABEL_1509;
LABEL_1523:
                tv_nsec = v1095[1];
                if (!tv_nsec)
                {
                  p_tv_nsec = v1095 + 1;
                  break;
                }
              }
            }
LABEL_1525:
            v1103 = operator new(0x38uLL);
            v1104 = *v1091;
            v1103[6] = *((_QWORD *)v1091 + 2);
            *((_OWORD *)v1103 + 2) = v1104;
            *v1103 = 0;
            v1103[1] = 0;
            v1103[2] = v1095;
            *p_tv_nsec = (uint64_t)v1103;
            if (*(_QWORD *)v1261[0].tv_sec)
            {
              v1261[0].tv_sec = *(_QWORD *)v1261[0].tv_sec;
              v1103 = (_QWORD *)*p_tv_nsec;
            }
            v1105 = v1261[0].tv_nsec;
            _ZF = v1103 == (_QWORD *)v1261[0].tv_nsec;
            *((_BYTE *)v1103 + 24) = v1103 == (_QWORD *)v1261[0].tv_nsec;
            if (!_ZF)
            {
              do
              {
                v1106 = v1103[2];
                if (*(_BYTE *)(v1106 + 24))
                  break;
                v1107 = *(_BYTE **)(v1106 + 16);
                v1108 = *(_QWORD *)v1107;
                if (*(_QWORD *)v1107 == v1106)
                {
                  v1111 = *((_QWORD *)v1107 + 1);
                  if (!v1111 || (v1112 = *(unsigned __int8 *)(v1111 + 24), v1109 = (_BYTE *)(v1111 + 24), v1112))
                  {
                    if (*(_QWORD **)v1106 == v1103)
                    {
                      *(_BYTE *)(v1106 + 24) = 1;
                      v1107[24] = 0;
                      v1115 = *(_QWORD *)(v1106 + 8);
                      *(_QWORD *)v1107 = v1115;
                      if (v1115)
                        goto LABEL_1542;
                    }
                    else
                    {
                      v1113 = *(uint64_t **)(v1106 + 8);
                      v1114 = *v1113;
                      *(_QWORD *)(v1106 + 8) = *v1113;
                      if (v1114)
                      {
                        *(_QWORD *)(v1114 + 16) = v1106;
                        v1107 = *(_BYTE **)(v1106 + 16);
                      }
                      v1113[2] = (uint64_t)v1107;
                      *(_QWORD *)(*(_QWORD *)(v1106 + 16) + 8 * (**(_QWORD **)(v1106 + 16) != v1106)) = v1113;
                      *v1113 = v1106;
                      *(_QWORD *)(v1106 + 16) = v1113;
                      v1107 = (_BYTE *)v1113[2];
                      v1106 = *(_QWORD *)v1107;
                      *((_BYTE *)v1113 + 24) = 1;
                      v1107[24] = 0;
                      v1115 = *(_QWORD *)(v1106 + 8);
                      *(_QWORD *)v1107 = v1115;
                      if (v1115)
LABEL_1542:
                        *(_QWORD *)(v1115 + 16) = v1107;
                    }
                    *(_QWORD *)(v1106 + 16) = *((_QWORD *)v1107 + 2);
                    *(_QWORD *)(*((_QWORD *)v1107 + 2) + 8 * (**((_QWORD **)v1107 + 2) != (_QWORD)v1107)) = v1106;
                    *(_QWORD *)(v1106 + 8) = v1107;
LABEL_1507:
                    *((_QWORD *)v1107 + 2) = v1106;
                    break;
                  }
                }
                else if (!v1108 || (v1110 = *(unsigned __int8 *)(v1108 + 24), v1109 = (_BYTE *)(v1108 + 24), v1110))
                {
                  if (*(_QWORD **)v1106 == v1103)
                  {
                    v1117 = v1103[1];
                    *(_QWORD *)v1106 = v1117;
                    if (v1117)
                    {
                      *(_QWORD *)(v1117 + 16) = v1106;
                      v1107 = *(_BYTE **)(v1106 + 16);
                    }
                    v1103[2] = v1107;
                    *(_QWORD *)(*(_QWORD *)(v1106 + 16) + 8 * (**(_QWORD **)(v1106 + 16) != v1106)) = v1103;
                    v1103[1] = v1106;
                    *(_QWORD *)(v1106 + 16) = v1103;
                    v1107 = (_BYTE *)v1103[2];
                    *((_BYTE *)v1103 + 24) = 1;
                    v1107[24] = 0;
                    v1106 = *((_QWORD *)v1107 + 1);
                    v1116 = *(_QWORD **)v1106;
                    *((_QWORD *)v1107 + 1) = *(_QWORD *)v1106;
                    if (!v1116)
                      goto LABEL_1506;
                  }
                  else
                  {
                    *(_BYTE *)(v1106 + 24) = 1;
                    v1107[24] = 0;
                    v1106 = *((_QWORD *)v1107 + 1);
                    v1116 = *(_QWORD **)v1106;
                    *((_QWORD *)v1107 + 1) = *(_QWORD *)v1106;
                    if (!v1116)
                      goto LABEL_1506;
                  }
                  v1116[2] = v1107;
LABEL_1506:
                  *(_QWORD *)(v1106 + 16) = *((_QWORD *)v1107 + 2);
                  *(_QWORD *)(*((_QWORD *)v1107 + 2) + 8 * (**((_QWORD **)v1107 + 2) != (_QWORD)v1107)) = v1106;
                  *(_QWORD *)v1106 = v1107;
                  goto LABEL_1507;
                }
                *(_BYTE *)(v1106 + 24) = 1;
                v1103 = v1107;
                v1107[24] = v1107 == (_BYTE *)v1105;
                *v1109 = 1;
              }
              while (v1107 != (_BYTE *)v1105);
            }
            v1261[1].tv_sec = ++v1093;
LABEL_1509:
            v1091 += 4;
          }
          while (v1091 != v1092);
          tv_sec = v1261[0].tv_sec;
          v1299 = *(_OWORD *)(v1261[0].tv_sec + 32);
          v1300 = *(char **)(v1261[0].tv_sec + 48);
          v933 = v1197;
          v1054 = (_QWORD *)(a1 + 12520);
          v1056 = (_QWORD *)(a1 + 12544);
          if ((uint64_t *)v1261[0].tv_sec != &v1261[0].tv_nsec)
          {
            v1119 = -1;
            do
            {
              v1120 = v1227 - *(_DWORD *)(tv_sec + 40);
              if (v1120 < 0)
                v1120 = *(_DWORD *)(tv_sec + 40) - v1227;
              if (v1120 < v1119)
              {
                v1299 = *(_OWORD *)(tv_sec + 32);
                LODWORD(v1300) = *(_DWORD *)(tv_sec + 48);
                v1119 = v1120;
              }
              v1121 = *(timespec **)(tv_sec + 8);
              if (v1121)
              {
                do
                {
                  v1122 = v1121;
                  v1121 = (timespec *)v1121->tv_sec;
                }
                while (v1121);
              }
              else
              {
                do
                {
                  v1122 = *(timespec **)(tv_sec + 16);
                  _ZF = v1122->tv_sec == tv_sec;
                  tv_sec = (__darwin_time_t)v1122;
                }
                while (!_ZF);
              }
              tv_sec = (__darwin_time_t)v1122;
            }
            while (v1122 != (timespec *)&v1261[0].tv_nsec);
          }
LABEL_1568:
          v1123 = *(_QWORD *)(v1057 + 496);
          v1124 = *(_QWORD *)(v1057 + 504);
          if (v1124 != v1123)
          {
            v1125 = (v1124 - v1123) >> 6;
            while (1)
            {
              v1126 = v1125 >> 1;
              v1127 = v1123 + (v1125 >> 1 << 6);
              v1128 = *(_DWORD *)(v1127 + 16);
              v1129 = v1128 >= v1300;
              if (v1128 != (_DWORD)v1300)
                goto LABEL_1576;
              if (*(_QWORD *)v1127 >= (unint64_t)v1299)
                break;
LABEL_1570:
              v1123 = v1127 + 64;
              v1126 = v1125 + ~v1126;
LABEL_1571:
              v1125 = v1126;
              if (!v1126)
                goto LABEL_1579;
            }
            if (*(_QWORD *)v1127 != (_QWORD)v1299)
              goto LABEL_1571;
            v1129 = *(_DWORD *)(v1127 + 8) >= DWORD2(v1299);
LABEL_1576:
            if (v1129)
              goto LABEL_1571;
            goto LABEL_1570;
          }
LABEL_1579:
          v1130 = *(_DWORD *)(v1123 + 8);
          v1131 = (float64x2_t *)(v1123 + 24);
          if (v1130 != DWORD2(v1299))
            v1131 = 0;
          v1210 = v1131[1];
          v1132 = sub_20E9DF85C((_QWORD *)(**(_QWORD **)(a1 + 7952) + 1784), (uint64_t *)&v1299);
          _Q2 = v1210;
          _Q0 = vmulq_f64(_Q2, _Q2);
          _D1 = v1210.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + 1.0);
          v1140 = vmulq_n_f64(v1210, _Q0.f64[0]);
          v1141 = (float64x2_t **)(v1132 + 5);
          if (!v1132)
            v1141 = 0;
          *(_QWORD *)&v1142 = *(_OWORD *)&vaddq_f64(_Q0, _Q0);
          _Q1 = vaddq_f64(v1140, v1140);
          v1144 = **v1141;
          _D4 = (*v1141)[2].f64[1];
          v1146 = *(float64x2_t *)((char *)*v1141 + 24);
          v1147 = (*v1141)[4].f64[0];
          v1148 = (*v1141)[3];
          v1149 = v1141[2];
          v1133.f64[0] = v1149[1].f64[0];
          v1150 = *v1149;
          v1151 = v1141[4];
          _D20 = v1151[2].f64[1];
          v1153 = v1141[6];
          v1136.f64[0] = v1153[1].f64[0];
          v1154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1151, _Q1.f64[0]), *(float64x2_t *)((char *)v1151 + 24), _Q1, 1), v1151[3], v1142);
          __asm { FMLA            D18, D20, V1.D[1] }
          _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v1151[4].f64[0], v1142);
          *(_QWORD *)&v1155 = *(_OWORD *)&vaddq_f64(_Q18, v1136);
          _Q1 = vaddq_f64(v1154, *v1153);
          __asm { FMLA            D2, D4, V1.D[1] }
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v1147, v1155);
          v1157 = vaddq_f64(v1150, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1144, _Q1.f64[0]), v1146, _Q1, 1), v1148, v1155));
          v1158 = vaddq_f64(v1133, _Q2);
          v1159.f64[0] = (*v933)[1].f64[0];
          _Q6 = (*v933)[3];
          v1161 = v933[2];
          v1148.f64[0] = v1161[1].f64[0];
          v1162 = *v1161;
          v1163 = v933[4];
          v1150.f64[0] = v1163[1].f64[0];
          v1164 = *(int64x2_t *)v1163;
          v1165 = &v1163[2].f64[1];
          v1166 = *(int64x2_t *)((char *)&v1163[1] + 8);
          v1167 = v1163[4].f64[0];
          _Q21 = v1163[3];
          v1169 = v933[6];
          v1135.f64[0] = v1169[1].f64[0];
          *(_QWORD *)&v1158.f64[0] = *(_OWORD *)&vsubq_f64(v1158, v1148);
          _Q0 = vsubq_f64(v1157, v1162);
          v1159.f64[1] = (*v933)[2].f64[1];
          v1171 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)*v933, *(int64x2_t *)((char *)&(*v933)[1] + 8)), _Q0.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)*v933, *(int64x2_t *)((char *)&(*v933)[1] + 8)), _Q0, 1), v1159, v1158.f64[0]);
          _Q2 = vmulq_f64(_Q6, _Q0);
          _Q0.f64[0] = _Q0.f64[1];
          __asm { FMLA            D2, D0, V6.D[1] }
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], (*v933)[4].f64[0], v1158.f64[0]);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, v1135);
          _Q1 = vsubq_f64(v1171, *v1169);
          v1150.f64[1] = *v1165;
          v1174 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v1164, v1166), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v1164, v1166), _Q1, 1), v1150, _Q0.f64[0]);
          _Q1.f64[0] = _Q1.f64[1];
          __asm { FMLA            D2, D1, V21.D[1] }
          v1203 = v1174;
          v1211 = vmlad_n_f64(_Q2.f64[0], v1167, _Q0.f64[0]);
          v1175 = (double *)(*v1054 + 16 * v1055);
          *(float *)_Q0.f64 = v1174.f64[0];
          *(float *)_Q1.f64 = v1211;
          v1064 = atan2f(*(float *)_Q0.f64, *(float *)_Q1.f64) + 3.14159265;
          *v1175 = v1064;
          v1176 = v1203.f64[1];
          v1177 = sqrt(vmulq_f64(v1203, v1203).f64[0] + v1211 * v1211);
          v1089 = atan2f(v1176, v1177) + 1.57079633;
          v1175[1] = v1089;
          sub_20E86872C((uint64_t)v1261, (_QWORD *)v1261[0].tv_nsec);
LABEL_1584:
          if (v1218 > *(unsigned int *)(v1221
                                       + 48
                                       * ((unint64_t)(v1064 * 3.81971863)
                                        - ((unint64_t)(v1064 * 3.81971863) == 24))
                                       + 4
                                       * ((unint64_t)(v1089 * 3.81971863)
                                        - ((unint64_t)(v1089 * 3.81971863) == 12))
                                       + 12568))
            break;
          v974 = *(uint64_t **)(a1 + 14392);
          v975 = *(uint64_t **)(a1 + 14384);
LABEL_1492:
          if (++v1055 >= v974 - v975)
            goto LABEL_1487;
        }
        v1178 = sub_20F882E40((unint64_t **)&v1265, v1055);
        v974 = *(uint64_t **)(a1 + 14392);
        v975 = *(uint64_t **)(a1 + 14384);
        if (v1178)
          goto LABEL_1492;
LABEL_1487:
        v1049 = v1229;
        v1053 = v974;
        if (v1220 < v974 - v975)
        {
          ++v1218;
          if (v1229 < v1231)
            continue;
        }
        goto LABEL_1473;
      }
      v1053 = v975;
    }
LABEL_1473:
    if (v1239 && v975 != v1053 && v1049 < *(unsigned int *)(a1 + 2088))
    {
      do
      {
        while (1)
        {
          v1051 = *v975 + 40;
          if (!*(_BYTE *)(*v975 + 488))
            v1051 = 0;
          if (*(_BYTE *)(v1051 + 432))
            break;
          if (++v975 == v1053)
            goto LABEL_1297;
        }
        sub_20F88282C((uint64_t *)object, *v975++);
      }
      while (v1229 < *(unsigned int *)(a1 + 2088) && v975 != v1053);
    }
  }
  else
  {
LABEL_1285:
    if ((uint64_t *)v922 != v921)
    {
      v958 = 0;
      v959 = (uint64_t *)(v922 + 8);
      do
      {
        v960 = *(v959 - 1);
        if (v1239)
        {
          v961 = v960 + 40;
          if (!*(_BYTE *)(v960 + 488))
            v961 = 0;
          if (*(_BYTE *)(v961 + 432) && v958 >= *(unsigned int *)(a1 + 2088))
            break;
        }
        sub_20F88282C((uint64_t *)object, v960);
        v958 = v1229;
      }
      while (v1229 < v1231 && v959++ != v921);
    }
  }
LABEL_1297:
  v963 = a1;
  sub_20FB42E10((_QWORD *)(a1 + 12400), *(char **)(a1 + 14472), *(char **)(a1 + 14480), (uint64_t)(*(_QWORD *)(a1 + 14480) - *(_QWORD *)(a1 + 14472)) >> 3);
  if (*(_QWORD *)(a1 + 15680))
  {
    v964 = sub_210219C18();
    v965 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v965 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_1356;
    LODWORD(v1265.f64[0]) = 134217984;
    *(_QWORD *)((char *)v1265.f64 + 4) = v1233;
    v967 = (char *)_os_log_send_and_compose_impl();
    v968 = strlen(v967);
    v1261[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)v1261);
    v969 = v1261[0].tv_sec;
    timespec_get(v1261, 1);
    sub_210219E20(&v1265, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v964 + 1), (__int128 *)(v964 + 5), "Num rej pts on undesired object: %lu", 0x24uLL, v967, v968, v969, v1261);
    std::mutex::lock(&stru_254A5A410);
    v970 = qword_254A5A458;
    for (nn = unk_254A5A460; v970 != nn; v970 += 40)
    {
      v972 = *(_QWORD *)(v970 + 32);
      if (!v972)
        sub_20E86D37C();
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v972 + 48))(v972, &v1265);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v1269) < 0)
    {
      operator delete(*(void **)&v1268[56]);
      if ((v1268[55] & 0x80000000) == 0)
      {
LABEL_1305:
        if (!v1268[24])
        {
LABEL_1349:
          if (LOBYTE(v1267.f64[1]) && SHIBYTE(v1267.f64[0]) < 0)
            operator delete(*(void **)&__p[16]);
          if ((__p[15] & 0x80000000) != 0)
            operator delete(*(void **)&v1265.f64[1]);
          if (v967)
            free(v967);
LABEL_1356:
          if (os_signpost_enabled((os_log_t)*v964))
          {
            LODWORD(v1265.f64[0]) = 134217984;
            *(_QWORD *)((char *)v1265.f64 + 4) = v1233;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          v963 = a1;
          v1001 = *(_QWORD *)(a1 + 15680);
          if (v1001)
          {
            v1002 = *(_QWORD *)(a1 + 12448);
            if (v1002)
              sub_20F811500(v1233, (*((_QWORD *)&v1234 + 1) - (_QWORD)v1234) >> 3, *(_DWORD *)(v1001 + 256), v1002);
          }
          goto LABEL_1361;
        }
LABEL_1347:
        if ((v1268[23] & 0x80000000) != 0)
          operator delete(*(void **)v1268);
        goto LABEL_1349;
      }
    }
    else if ((v1268[55] & 0x80000000) == 0)
    {
      goto LABEL_1305;
    }
    operator delete(*(void **)&v1268[32]);
    if (!v1268[24])
      goto LABEL_1349;
    goto LABEL_1347;
  }
LABEL_1361:
  if (*(_BYTE *)(v963 + 1932))
  {
    if (v1260)
      v1003 = 14520;
    else
      v1003 = 14472;
    if (v1260)
      v1004 = a1 + 14520;
    else
      v1004 = a1 + 14472;
    v1005 = a1;
    v1006 = (uint64_t *)(a1 + 14136);
    if (*(_QWORD *)(a1 + 14160))
    {
      v1007 = *(_QWORD **)(a1 + 14152);
      if (v1007)
      {
        do
        {
          v1008 = (_QWORD *)*v1007;
          operator delete(v1007);
          v1007 = v1008;
        }
        while (v1008);
      }
      *(_QWORD *)(a1 + 14152) = 0;
      v1009 = *(_QWORD *)(a1 + 14144);
      if (v1009)
      {
        for (i1 = 0; i1 != v1009; ++i1)
          *(_QWORD *)(*v1006 + 8 * i1) = 0;
      }
      v1005 = a1;
      *(_QWORD *)(a1 + 14160) = 0;
    }
    v1011 = vcvtps_u32_f32((float)(unint64_t)((uint64_t)(*(_QWORD *)(v1004 + 8) - *(_QWORD *)(v1005 + v1003)) >> 3)/ *(float *)(v1005 + 14168));
    if (v1011 == 1)
    {
      v1011 = 2;
    }
    else if ((v1011 & (v1011 - 1)) != 0)
    {
      v1011 = std::__next_prime(v1011);
    }
    v1012 = *(int8x8_t *)(a1 + 14144);
    if (v1011 > *(_QWORD *)&v1012)
      goto LABEL_1380;
    if (v1011 < *(_QWORD *)&v1012)
    {
      v1013 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 14160) / *(float *)(a1 + 14168));
      if (*(_QWORD *)&v1012 < 3uLL
        || (v1014 = (uint8x8_t)vcnt_s8(v1012), v1014.i16[0] = vaddlv_u8(v1014), v1014.u32[0] > 1uLL))
      {
        v1013 = std::__next_prime(v1013);
      }
      else
      {
        v1015 = 1 << -(char)__clz(v1013 - 1);
        if (v1013 >= 2)
          v1013 = v1015;
      }
      if (v1011 <= v1013)
        v1011 = v1013;
      if (v1011 < *(_QWORD *)&v1012)
LABEL_1380:
        sub_20E8D2B3C((uint64_t)v1006, v1011);
    }
    v1017 = *(uint64_t **)v1004;
    v1016 = *(uint64_t **)(v1004 + 8);
    if (*(uint64_t **)v1004 != v1016)
    {
      v1018 = (_QWORD *)(a1 + 14152);
      v1019 = *(_QWORD *)(a1 + 14144);
      do
      {
        v1020 = *v1017;
        v1021 = HIDWORD(*v1017);
        v1022 = 0x9DDFEA08EB382D69 * ((8 * *v1017 + 8) ^ v1021);
        v1023 = (0x9DDFEA08EB382D69 * (v1021 ^ (v1022 >> 47) ^ v1022)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v1021 ^ (v1022 >> 47) ^ v1022)) >> 47);
        v1024 = 0x9DDFEA08EB382D69 * v1023;
        if (v1019)
        {
          v1025 = (uint8x8_t)vcnt_s8((int8x8_t)v1019);
          v1025.i16[0] = vaddlv_u8(v1025);
          if (v1025.u32[0] > 1uLL)
          {
            v1004 = 0x9DDFEA08EB382D69 * v1023;
            if (v1024 >= v1019)
              v1004 = v1024 % v1019;
          }
          else
          {
            v1004 = v1024 & (v1019 - 1);
          }
          v1026 = *(_QWORD **)(*v1006 + 8 * v1004);
          if (v1026)
          {
            v1027 = (_QWORD *)*v1026;
            if (v1027)
            {
              if (v1025.u32[0] < 2uLL)
              {
                while (1)
                {
                  v1029 = v1027[1];
                  if (v1029 == v1024)
                  {
                    if (v1027[2] == v1020)
                      goto LABEL_1453;
                  }
                  else if ((v1029 & (v1019 - 1)) != v1004)
                  {
                    goto LABEL_1413;
                  }
                  v1027 = (_QWORD *)*v1027;
                  if (!v1027)
                    goto LABEL_1413;
                }
              }
              do
              {
                v1028 = v1027[1];
                if (v1028 == v1024)
                {
                  if (v1027[2] == v1020)
                    goto LABEL_1453;
                }
                else
                {
                  if (v1028 >= v1019)
                    v1028 %= v1019;
                  if (v1028 != v1004)
                    break;
                }
                v1027 = (_QWORD *)*v1027;
              }
              while (v1027);
            }
          }
        }
LABEL_1413:
        v1030 = operator new(0x18uLL);
        *v1030 = 0;
        v1030[1] = v1024;
        v1030[2] = v1020;
        v1031 = (float)(unint64_t)(*(_QWORD *)(a1 + 14160) + 1);
        v1032 = *(float *)(a1 + 14168);
        if (v1019 && (float)(v1032 * (float)v1019) >= v1031)
        {
          v1033 = *v1006;
          v1034 = *(_QWORD **)(*v1006 + 8 * v1004);
          if (v1034)
            goto LABEL_1416;
        }
        else
        {
          v1035 = (v1019 & (v1019 - 1)) != 0;
          if (v1019 < 3)
            v1035 = 1;
          v1036 = v1035 | (2 * v1019);
          v1037 = vcvtps_u32_f32(v1031 / v1032);
          if (v1036 <= v1037)
            v1038 = v1037;
          else
            v1038 = v1036;
          if (v1038 == 1)
          {
            v1038 = 2;
          }
          else if ((v1038 & (v1038 - 1)) != 0)
          {
            v1038 = std::__next_prime(v1038);
            v1019 = *(_QWORD *)(a1 + 14144);
          }
          if (v1038 > v1019)
            goto LABEL_1427;
          if (v1038 < v1019)
          {
            v1039 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 14160) / *(float *)(a1 + 14168));
            if (v1019 < 3
              || (v1040 = (uint8x8_t)vcnt_s8((int8x8_t)v1019), v1040.i16[0] = vaddlv_u8(v1040), v1040.u32[0] > 1uLL))
            {
              v1039 = std::__next_prime(v1039);
            }
            else
            {
              v1041 = 1 << -(char)__clz(v1039 - 1);
              if (v1039 >= 2)
                v1039 = v1041;
            }
            if (v1038 <= v1039)
              v1038 = v1039;
            if (v1038 < v1019)
LABEL_1427:
              sub_20E8D2B3C((uint64_t)v1006, v1038);
          }
          v1019 = *(_QWORD *)(a1 + 14144);
          v1042 = v1019 - 1;
          if ((v1019 & (v1019 - 1)) != 0)
          {
            if (v1024 >= v1019)
            {
              v1004 = v1024 % v1019;
              v1033 = *v1006;
              v1034 = *(_QWORD **)(*v1006 + 8 * (v1024 % v1019));
              if (v1034)
              {
LABEL_1416:
                *v1030 = *v1034;
                goto LABEL_1451;
              }
            }
            else
            {
              v1004 = v1024;
              v1033 = *v1006;
              v1034 = *(_QWORD **)(*v1006 + 8 * v1024);
              if (v1034)
                goto LABEL_1416;
            }
          }
          else
          {
            v1004 = v1042 & v1024;
            v1033 = *v1006;
            v1034 = *(_QWORD **)(*v1006 + 8 * (v1042 & v1024));
            if (v1034)
              goto LABEL_1416;
          }
        }
        *v1030 = *v1018;
        *v1018 = v1030;
        *(_QWORD *)(v1033 + 8 * v1004) = v1018;
        if (!*v1030)
          goto LABEL_1452;
        v1043 = *(_QWORD *)(*v1030 + 8);
        if ((v1019 & (v1019 - 1)) != 0)
        {
          if (v1043 >= v1019)
            v1043 %= v1019;
        }
        else
        {
          v1043 &= v1019 - 1;
        }
        v1034 = (_QWORD *)(*v1006 + 8 * v1043);
LABEL_1451:
        *v1034 = v1030;
LABEL_1452:
        ++*(_QWORD *)(a1 + 14160);
LABEL_1453:
        ++v1017;
      }
      while (v1017 != v1016);
    }
  }
  v1044 = v1260;
  if ((_QWORD)v1234)
  {
    *((_QWORD *)&v1234 + 1) = v1234;
    operator delete((void *)v1234);
    if (!v1260)
      goto LABEL_1462;
  }
  else if (!v1260)
  {
    goto LABEL_1462;
  }
  v1045 = (_QWORD *)v1258;
  if ((_QWORD)v1258)
  {
    do
    {
      v1046 = (_QWORD *)*v1045;
      operator delete(v1045);
      v1045 = v1046;
    }
    while (v1046);
  }
  v1047 = (void *)v1257;
  *(_QWORD *)&v1257 = 0;
  if (v1047)
    operator delete(v1047);
LABEL_1462:
  if (v1044)
    return a1 + 14520;
  else
    return a1 + 14472;
}

