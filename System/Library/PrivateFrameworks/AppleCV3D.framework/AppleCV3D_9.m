void sub_20EBB9BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 97) < 0)
      operator delete(*(void **)(v28 - 120));
    JUMPOUT(0x20EBB9AE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBB9CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB9D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBB9D9C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EBB9E10(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9C7610;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EBB9F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EBB9F84(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9C7690;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EBBA094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EBBA0F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C7710;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBBA310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBBA3D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9C7790;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EBBA5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBA6B8(uint64_t a1)
{
  return sub_20EBBA828(a1 - 16);
}

void sub_20EBBA6C0(uint64_t a1)
{
  sub_20EBBA828(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBA6E8(uint64_t a1)
{
  return sub_20EBB9E10((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EBBA6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBBA0F8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EBBA6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EBBA3D8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EBBA700(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBBA708(uint64_t a1)
{
  return sub_20EBBA828(a1 - 24);
}

void sub_20EBBA710(uint64_t a1)
{
  sub_20EBBA828(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBA738(uint64_t a1)
{
  return sub_20EBB9F84((_QWORD *)(a1 - 24));
}

uint64_t sub_20EBBA740(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBBA748(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBBA7B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBBA818(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBBA828(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9C71D0;
  *(_QWORD *)(a1 + 16) = &unk_24C9C7248;
  *(_QWORD *)(a1 + 24) = &unk_24C9C7288;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EBBAA14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C73C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBBAA24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C73C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBBAA54(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *sub_20EBBAAB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C7410;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EBBAAF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C7410;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBAB48(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7410;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EBBABB8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7410;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EBBAC08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EBBAC44(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EBBAC7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EBBAFA0((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBBAE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBAF28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_4SendERKS9_EUlT_T0_E_EEvSD_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBAF94()
{
  return &unk_24C9C7470;
}

void sub_20EBBAFA0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EBBB038()
{
  __break(1u);
}

void sub_20EBBB0E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBBB104);
}

_QWORD *sub_20EBBB110(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9C7490;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EBBB18C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9C7490;
  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBB218(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7490;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EBBB288(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7490;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EBBB2D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EBBB348(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EBBB3B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EBBAFA0((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBB460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBB4AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE4SendERKS9_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE4SendERKS9_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE4SendERKS9_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE4SendERKS9_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBB518()
{
  return &unk_24C9C74F0;
}

_QWORD *sub_20EBBB524(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C7510;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EBBB5AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C7510;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EBBB644(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7510;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EBBB6D4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7510;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBBB744(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EBBB7C4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EBBB840(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EBBAFA0(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EBBBAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBBC4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promi"
                                "seIvEEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSA_7ProcessERKS9_NS4_7promiseIvEEEUlT_T0_E_EEvSD_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBBCB8()
{
  return &unk_24C9C7570;
}

_QWORD *sub_20EBBBCC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9C7590;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20EBBBD78(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24C9C7590;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBBE3C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7590;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EBBBECC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7590;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EBBBF3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EBBBFE8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_20EBBC090(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EBBAFA0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EBBC1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBC24C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE7ProcessERKS9_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBC2B8()
{
  return &unk_24C9C75F0;
}

_QWORD *sub_20EBBC2C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7610;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBBC2FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7610;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBC344(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C7610;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EBBC394(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9C7610;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EBBC3C4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBBC3D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBBC400(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBC494(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBC4D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCali"
                     "brationEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semantic"
                                "sCameraCalibrationEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBC53C()
{
  return &unk_24C9C7670;
}

_QWORD *sub_20EBBC548(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7690;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBBC580(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7690;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBC5C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C7690;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EBBC618(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9C7690;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EBBC648(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBBC658(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBBC684(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBC718(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBC754(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCali"
                     "brationEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semantic"
                                "sCameraCalibrationEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBC7C0()
{
  return &unk_24C9C76F0;
}

_QWORD *sub_20EBBC7CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7710;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBBC804(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7710;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBC84C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7710;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBBC8A4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7710;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBBC8DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBBC8EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBBC918(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBC9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBCA1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBCA88()
{
  return &unk_24C9C7770;
}

_QWORD *sub_20EBBCA94(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7790;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBBCACC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7790;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBCB14(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C7790;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EBBCB6C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C7790;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EBBCBA4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EBBCBB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EBBCBE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBCC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBBCCE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCal"
                     "ibrationEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26Semanti"
                                "csCameraCalibrationEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__110shared_ptrINS_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBBCD50()
{
  return &unk_24C9C77F0;
}

void sub_20EBBCD60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBBCD84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBBCD9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8cv_types26SemanticsCamer"
                     "aCalibrationEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8cv_types26Sem"
                                "anticsCameraCalibrationEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS0_INS1_3vio8cv_types26SemanticsCameraCalibrationEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBBCE0C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBBCE38(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBBCE74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C7860;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBBCEDC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBCF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBBCF80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBBD010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBD024(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBBD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBD0FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBBD1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBBD1D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBBD278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBD28C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C6320;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C6350;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBD470(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C62B8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C62E8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4780;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBD654(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C6218;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C6248;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C5B88;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBD838(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C61E8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EBBD28C(v2 + 336);
    sub_20EBBD470(v2 + 168);
    v3 = sub_20EBBD654(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40EC6BA667);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EBBD28C(v7 + 336);
    sub_20EBBD470(v7 + 168);
    v8 = sub_20EBBD654(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40EC6BA667);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBD998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C5AF0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EBAF1D4(v2 + 168);
    v3 = sub_20EBAF3B8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EBAF1D4(v7 + 168);
    v8 = sub_20EBAF3B8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBDAE8(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_20EBBD838(result + 88);
    sub_20EBBD998(v1 + 8);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EBBDB30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  void **v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  char *v13;
  void **v14;
  _BYTE __p[24];

  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v3 = a1 + 64;
  *(_OWORD *)(a1 + 112) = 0u;
  v4 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_24C9C78D8;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7908;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  v5 = (char *)operator new(0x20uLL);
  strcpy(v5, "Semantics Frame Selector Node");
  *(_QWORD *)__p = operator new(0x48uLL);
  *(_OWORD *)&__p[8] = xmmword_21031C840;
  strcpy(*(char **)__p, "Receives all incoming semantics frames and matches them to keypoints");
  sub_20E867BF8(v4, v5, 0x1DuLL);
  v6 = (void **)(a1 + 136);
  if ((_BYTE *)(a1 + 136) != __p)
  {
    if (*(char *)(a1 + 159) < 0)
    {
      if (__p[23] >= 0)
        v7 = __p;
      else
        v7 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v8 = __p[23];
      else
        v8 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v6, v7, v8);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v6, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  operator delete(v5);
  v9 = (char *)operator new(0x28uLL);
  strcpy(v9, "Semantics Frame Selector Channel");
  v10 = (char *)operator new(0x38uLL);
  strcpy(v10, "Returns a vector of semantic samples to be processed");
  sub_20E860C04(__p, v9, 0x20uLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v2);
  *(_OWORD *)v2 = *(_OWORD *)__p;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v10, 0x34uLL);
  v11 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__p[16];
  operator delete(v10);
  operator delete(v9);
  v12 = (char *)operator new(0x28uLL);
  strcpy(v12, "Semantics Frame Receiver Channel");
  v13 = (char *)operator new(0x38uLL);
  strcpy(v13, "Adds incoming semantic frames into a circular buffer");
  sub_20E860C04(__p, v12, 0x20uLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v13, 0x34uLL);
  v14 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&__p[16];
  operator delete(v13);
  operator delete(v12);
  return a1;
}

void sub_20EBBDE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;

  operator delete(v17);
  sub_20EBBEFD4(v16);
  sub_20EBBDEBC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBDEBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9C79A0;
  *(_QWORD *)(a1 + 56) = &unk_24C9C79C8;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 56) = off_24C9C7A18;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C7A18;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)a1 = off_24C9C79F0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C79F0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBBDFB8(uint64_t a1@<X0>, _QWORD **a2@<X1>, char **a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double *v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  void *__p[2];
  char *v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  char v67;

  v3 = *a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v3)
  {
    v5 = v3[1] - *v3;
    if (v5)
    {
      v6 = 0;
      v7 = v5 >> 6;
      v8 = (_QWORD *)(a1 + 160);
      v60 = v5 >> 6;
      do
      {
        v9 = (double *)(*v3 + (v6 << 6));
        v10 = v3[3];
        v11 = v9[3];
        *(_QWORD *)&v61[0] = *(_QWORD *)(v3[6] + 400 * v6 + 392);
        v12 = sub_20EB8DE00(v8, (int *)v61);
        if (v12)
        {
          v13 = v12[8];
          if (v13)
          {
            v14 = v12[6];
            v15 = v12[3];
            v16 = (v12[4] - v15) >> 4;
            while (1)
            {
              v17 = *(_QWORD *)(v15 + 16 * (v14 % v16));
              v18 = *(double *)(v17 + 176);
              v19 = v18 < v11;
              if (v18 == v11)
                break;
              v20 = v18 - v11;
              v21 = v11 - v18;
              if (!v19)
                v21 = v20;
              if (v21 <= 0.100000001)
                break;
              ++v14;
              if (!--v13)
                goto LABEL_4;
            }
            v65 = *(_QWORD *)(v15 + 16 * (v14 % v16));
            v22 = *(std::__shared_weak_count **)(v15 + 16 * (v14 % v16) + 8);
            v66 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(p_shared_owners);
              while (__stxr(v24 + 1, p_shared_owners));
            }
            v67 = 1;
            *(double *)v61 = v9[3];
            v25 = *(_OWORD *)v9;
            DWORD2(v61[1]) = *((_DWORD *)v9 + 4);
            *(_OWORD *)((char *)v61 + 8) = v25;
            __p[1] = 0;
            v63 = 0;
            __p[0] = 0;
            v26 = *(_BYTE **)(v10 + 24 * v6);
            v27 = *(_BYTE **)(v10 + 24 * v6 + 8);
            v28 = v27 - v26;
            if (v27 != v26)
            {
              if (v28 < 0)
                sub_20E867F44();
              v29 = (char *)operator new(v27 - v26);
              v30 = &v29[32 * (v28 >> 5)];
              __p[0] = v29;
              v63 = v30;
              memcpy(v29, v26, v28);
              __p[1] = v30;
            }
            *(_QWORD *)&v64 = v17;
            *((_QWORD *)&v64 + 1) = v22;
            if (v22)
            {
              v31 = (unint64_t *)&v22->__shared_owners_;
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
            v34 = a3[1];
            v33 = (unint64_t)a3[2];
            if ((unint64_t)v34 >= v33)
            {
              v36 = *a3;
              v37 = 0x8E38E38E38E38E39 * ((v34 - *a3) >> 3);
              v38 = v37 + 1;
              if (v37 + 1 > 0x38E38E38E38E38ELL)
                sub_20E867F44();
              v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v33 - (_QWORD)v36) >> 3);
              if (2 * v39 > v38)
                v38 = 2 * v39;
              if (v39 >= 0x1C71C71C71C71C7)
                v40 = 0x38E38E38E38E38ELL;
              else
                v40 = v38;
              if (v40 > 0x38E38E38E38E38ELL)
                sub_20E877A38();
              v41 = (char *)operator new(72 * v40);
              v42 = &v41[72 * v37];
              *(_OWORD *)v42 = v61[0];
              *(_OWORD *)(v42 + 12) = *(_OWORD *)((char *)v61 + 12);
              v43 = &v41[72 * v40];
              *((_OWORD *)v42 + 2) = *(_OWORD *)__p;
              *((_QWORD *)v42 + 6) = v63;
              __p[1] = 0;
              v63 = 0;
              __p[0] = 0;
              *(_OWORD *)(v42 + 56) = v64;
              v44 = v42 + 72;
              v64 = 0uLL;
              if (v34 != v36)
              {
                v45 = 0;
                do
                {
                  v46 = &v42[v45];
                  v47 = &v34[v45];
                  v48 = *(_OWORD *)&v34[v45 - 72];
                  *(_OWORD *)(v46 - 60) = *(_OWORD *)&v34[v45 - 60];
                  *(_OWORD *)(v46 - 72) = v48;
                  *(_OWORD *)(v46 - 40) = *(_OWORD *)&v34[v45 - 40];
                  *((_QWORD *)v46 - 3) = *(_QWORD *)&v34[v45 - 24];
                  *((_QWORD *)v47 - 5) = 0;
                  *((_QWORD *)v47 - 4) = 0;
                  *((_QWORD *)v47 - 3) = 0;
                  *((_OWORD *)v46 - 1) = *(_OWORD *)&v34[v45 - 16];
                  *((_QWORD *)v47 - 2) = 0;
                  *((_QWORD *)v47 - 1) = 0;
                  v45 -= 72;
                }
                while (&v34[v45] != v36);
                v34 = *a3;
                v49 = a3[1];
                *a3 = &v42[v45];
                a3[1] = v44;
                a3[2] = v43;
                while (2)
                {
                  if (v49 == v34)
                    goto LABEL_47;
                  v50 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
                  if (!v50)
                    goto LABEL_42;
                  v51 = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                    v53 = (void *)*((_QWORD *)v49 - 5);
                    if (v53)
                    {
LABEL_43:
                      *((_QWORD *)v49 - 4) = v53;
                      operator delete(v53);
                    }
                  }
                  else
                  {
LABEL_42:
                    v53 = (void *)*((_QWORD *)v49 - 5);
                    if (v53)
                      goto LABEL_43;
                  }
                  v49 -= 72;
                  continue;
                }
              }
              *a3 = v42;
              a3[1] = v44;
              a3[2] = v43;
LABEL_47:
              v7 = v60;
              if (v34)
                operator delete(v34);
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
              a3[1] = v44;
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
            }
            else
            {
              v35 = v61[0];
              *(_OWORD *)(v34 + 12) = *(_OWORD *)((char *)v61 + 12);
              *(_OWORD *)v34 = v35;
              *((_QWORD *)v34 + 5) = 0;
              *((_QWORD *)v34 + 6) = 0;
              *((_QWORD *)v34 + 4) = 0;
              *((_OWORD *)v34 + 2) = *(_OWORD *)__p;
              *((_QWORD *)v34 + 6) = v63;
              __p[0] = 0;
              __p[1] = 0;
              v63 = 0;
              *(_OWORD *)(v34 + 56) = v64;
              a3[1] = v34 + 72;
              v7 = v60;
            }
            if (__p[0])
              operator delete(__p[0]);
            if (v67)
            {
              v57 = v66;
              if (v66)
              {
                v58 = (unint64_t *)&v66->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
            }
          }
        }
LABEL_4:
        ++v6;
      }
      while (v6 != v7);
    }
  }
}

void sub_20EBBE45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void **v22;

  sub_20EBBE4B8(&a13);
  sub_20E869AA8((uint64_t)&a22);
  sub_20EBAD784(v22);
  _Unwind_Resume(a1);
}

void sub_20EBBE4A4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EBAD784(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBBE4B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[4];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[4];
  if (v5)
  {
LABEL_6:
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20EBBE52C(uint64_t a1, char **a2)
{
  void ****v4;
  unint64_t v5;
  void **v6;
  char *v7;
  uint8x8_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  float v22;
  float v23;
  void ***v24;
  void **v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  void **v43;
  uint64_t *v44;
  unint64_t v46;
  uint64_t v48;
  char *v49;
  void **v50;
  float v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void ***v74;
  void ***v75;
  unint64_t v76;
  void *v77;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  char *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  std::__shared_weak_count *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v86 = 0;
  v4 = (void ****)(a1 + 160);
  if (sub_20EB8DE00((_QWORD *)(a1 + 160), (int *)&v86))
  {
    v5 = *(_QWORD *)(a1 + 168);
    if (v5)
    {
      v6 = **v4;
      if (v6)
      {
        v7 = (char *)*v6;
        if (*v6)
        {
          v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] < 2uLL)
          {
            while (1)
            {
              v9 = *((_QWORD *)v7 + 1);
              if (v9)
              {
                if ((v9 & (v5 - 1)) != 0)
                  goto LABEL_28;
              }
              else if (!*((_QWORD *)v7 + 2))
              {
                goto LABEL_126;
              }
              v7 = *(char **)v7;
              if (!v7)
                goto LABEL_28;
            }
          }
          do
          {
            v20 = *((_QWORD *)v7 + 1);
            if (v20)
            {
              if (v20 < v5 || v20 % v5)
                break;
            }
            else if (!*((_QWORD *)v7 + 2))
            {
              goto LABEL_126;
            }
            v7 = *(char **)v7;
          }
          while (v7);
        }
      }
    }
LABEL_28:
    v21 = (void **)(a1 + 176);
    v7 = (char *)operator new(0x48uLL);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v86;
    *(_OWORD *)(v7 + 24) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
    v23 = *(float *)(a1 + 192);
    if (v5 && (float)(v23 * (float)v5) >= v22)
    {
      v24 = *v4;
      v25 = **v4;
      if (v25)
      {
LABEL_31:
        *(_QWORD *)v7 = *v25;
        goto LABEL_124;
      }
    }
    else
    {
      v26 = 1;
      if (v5 >= 3)
        v26 = (v5 & (v5 - 1)) != 0;
      v27 = v26 | (2 * v5);
      v28 = vcvtps_u32_f32(v22 / v23);
      if (v27 <= v28)
        prime = v28;
      else
        prime = v27;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v5 = *(_QWORD *)(a1 + 168);
      }
      if (prime > v5)
        goto LABEL_42;
      if (prime < v5)
      {
        v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
        if (v5 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
        {
          v30 = std::__next_prime(v30);
        }
        else
        {
          v32 = 1 << -(char)__clz(v30 - 1);
          if (v30 >= 2)
            v30 = v32;
        }
        if (prime <= v30)
          prime = v30;
        if (prime < v5)
LABEL_42:
          sub_20E8D2B3C((uint64_t)v4, prime);
      }
      v5 = *(_QWORD *)(a1 + 168);
      v24 = *v4;
      v25 = **v4;
      if (v25)
        goto LABEL_31;
    }
    *(_QWORD *)v7 = *v21;
    *v21 = v7;
    *v24 = v21;
    if (!*(_QWORD *)v7)
      goto LABEL_125;
    v60 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v60 >= v5)
        v60 %= v5;
    }
    else
    {
      v60 &= v5 - 1;
    }
    v25 = (void **)&(*v4)[v60];
LABEL_124:
    *v25 = v7;
LABEL_125:
    ++*(_QWORD *)(a1 + 184);
LABEL_126:
    v61 = (_QWORD *)(*((_QWORD *)v7 + 3) + 16 * *((_QWORD *)v7 + 7));
    v63 = *a2;
    v62 = a2[1];
    if (v62)
    {
      v64 = (unint64_t *)(v62 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    v66 = (std::__shared_weak_count *)v61[1];
    *v61 = v63;
    v61[1] = v62;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(p_shared_owners);
      while (__stlxr(v68 - 1, p_shared_owners));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = (uint64_t)(*((_QWORD *)v7 + 4) - *((_QWORD *)v7 + 3)) >> 4;
    v70 = *((_QWORD *)v7 + 8);
    v71 = *((_QWORD *)v7 + 7) + 1;
    if (v71 >= v69)
      v72 = (uint64_t)(*((_QWORD *)v7 + 4) - *((_QWORD *)v7 + 3)) >> 4;
    else
      v72 = 0;
    *((_QWORD *)v7 + 7) = v71 - v72;
    if (v70 == v69)
    {
      v73 = *((_QWORD *)v7 + 6) + 1;
      if (v73 < v69)
        v69 = 0;
      *((_QWORD *)v7 + 6) = v73 - v69;
    }
    else
    {
      *((_QWORD *)v7 + 8) = v70 + 1;
    }
    return;
  }
  v11 = *a2;
  v10 = (unint64_t)a2[1];
  v87 = v11;
  v88 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = (char *)operator new(0x140uLL);
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 9) = 0u;
  *((_OWORD *)v14 + 10) = 0u;
  *((_OWORD *)v14 + 11) = 0u;
  *((_OWORD *)v14 + 12) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((_OWORD *)v14 + 15) = 0u;
  *((_OWORD *)v14 + 16) = 0u;
  *((_OWORD *)v14 + 17) = 0u;
  *((_OWORD *)v14 + 18) = 0u;
  *((_OWORD *)v14 + 19) = 0u;
  __p[0] = v14;
  __p[1] = v14 + 320;
  v83 = v14 + 320;
  *(_QWORD *)&v84 = 0;
  v85 = 0;
  if (v10)
  {
    v15 = (unint64_t *)(v10 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
    *(_QWORD *)v14 = v11;
    *((_QWORD *)v14 + 1) = v10;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *(_QWORD *)v14 = v11;
    *((_QWORD *)v14 + 1) = 0;
  }
  v33 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  if (v33 <= 1)
    v34 = ((char *)__p[1] - (char *)__p[0]) >> 4;
  else
    v34 = 0;
  *((_QWORD *)&v84 + 1) = 1 - v34;
  if (v33)
  {
    v85 = 1;
    v35 = v88;
    if (!v88)
      goto LABEL_60;
  }
  else
  {
    *(_QWORD *)&v84 = 1;
    v35 = v88;
    if (!v88)
      goto LABEL_60;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_60:
    v38 = v86;
    if (v86 < 0x10000)
      goto LABEL_62;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  v38 = v86;
  if (v86 < 0x10000)
    goto LABEL_62;
LABEL_61:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_172;
  }
LABEL_62:
  v39 = HIDWORD(v86);
  if (HIDWORD(v86) >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
LABEL_172:
    abort();
  }
  v40 = (unsigned __int16)v39 | ((unsigned __int16)v38 << 16);
  v41 = *(_QWORD *)(a1 + 168);
  if (v41)
  {
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v41);
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.u32[0] > 1uLL)
    {
      v10 = (unsigned __int16)v39 | ((unsigned __int16)v38 << 16);
      if (v41 <= v40)
        v10 = v40 % v41;
    }
    else
    {
      v10 = ((_DWORD)v41 - 1) & v40;
    }
    v43 = (*v4)[v10];
    if (v43)
    {
      v44 = (uint64_t *)*v43;
      if (v44)
      {
        if (v42.u32[0] < 2uLL)
        {
          while (1)
          {
            v48 = v44[1];
            if (v48 == v40)
            {
              if (*((_DWORD *)v44 + 4) == v38 && *((_DWORD *)v44 + 5) == v39)
                goto LABEL_160;
            }
            else if ((v48 & (v41 - 1)) != v10)
            {
              goto LABEL_91;
            }
            v44 = (uint64_t *)*v44;
            if (!v44)
              goto LABEL_91;
          }
        }
        do
        {
          v46 = v44[1];
          if (v46 == v40)
          {
            if (*((_DWORD *)v44 + 4) == v38 && *((_DWORD *)v44 + 5) == v39)
              goto LABEL_160;
          }
          else
          {
            if (v46 >= v41)
              v46 %= v41;
            if (v46 != v10)
              break;
          }
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
    }
  }
LABEL_91:
  v49 = (char *)operator new(0x48uLL);
  v50 = (void **)(a1 + 176);
  v87 = v49;
  v88 = (std::__shared_weak_count *)(a1 + 176);
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 1) = v40;
  *((_QWORD *)v49 + 2) = v86;
  *(_OWORD *)(v49 + 24) = *(_OWORD *)__p;
  *((_QWORD *)v49 + 5) = v83;
  *(_OWORD *)__p = 0uLL;
  *((_OWORD *)v49 + 3) = v84;
  *((_QWORD *)v49 + 8) = v85;
  v89 = 1;
  v51 = (float)(unint64_t)(*(_QWORD *)(a1 + 184) + 1);
  v52 = *(float *)(a1 + 192);
  if (v41 && (float)(v52 * (float)v41) >= v51)
  {
    v40 = v10;
  }
  else
  {
    v53 = 1;
    if (v41 >= 3)
      v53 = (v41 & (v41 - 1)) != 0;
    v54 = v53 | (2 * v41);
    v55 = vcvtps_u32_f32(v51 / v52);
    if (v54 <= v55)
      v56 = v55;
    else
      v56 = v54;
    if (v56 == 1)
    {
      v56 = 2;
    }
    else if ((v56 & (v56 - 1)) != 0)
    {
      v56 = std::__next_prime(v56);
      v41 = *(_QWORD *)(a1 + 168);
    }
    if (v56 > v41)
      goto LABEL_104;
    if (v56 < v41)
    {
      v57 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 184) / *(float *)(a1 + 192));
      if (v41 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v41), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        v57 = std::__next_prime(v57);
      }
      else
      {
        v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2)
          v57 = v59;
      }
      if (v56 <= v57)
        v56 = v57;
      if (v56 < v41)
LABEL_104:
        sub_20E8D2B3C((uint64_t)v4, v56);
    }
    v41 = *(_QWORD *)(a1 + 168);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v41 <= v40)
        v40 %= v41;
    }
    else
    {
      v40 = ((_DWORD)v41 - 1) & v40;
    }
  }
  v74 = *v4;
  v75 = (void ***)(*v4)[v40];
  if (v75)
  {
    *(_QWORD *)v49 = *v75;
  }
  else
  {
    *(_QWORD *)v49 = *v50;
    *v50 = v49;
    v74[v40] = v50;
    if (!*(_QWORD *)v49)
      goto LABEL_159;
    v76 = *(_QWORD *)(*(_QWORD *)v49 + 8);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v76 >= v41)
        v76 %= v41;
    }
    else
    {
      v76 &= v41 - 1;
    }
    v75 = &(*v4)[v76];
  }
  *v75 = (void **)v49;
LABEL_159:
  ++*(_QWORD *)(a1 + 184);
LABEL_160:
  v77 = __p[0];
  if (__p[0])
  {
    v78 = (char *)__p[1];
    if (__p[1] != __p[0])
    {
      do
      {
        v79 = (std::__shared_weak_count *)*((_QWORD *)v78 - 1);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v78 -= 16;
      }
      while (v78 != __p[0]);
      v77 = __p[0];
    }
    operator delete(v77);
  }
}

void sub_20EBBEDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20EBBF0A0((uint64_t)&a17);
  sub_20E8C3144(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBBEDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EBBF0A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBBEE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBBEE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E8C3144(&a9);
  _Unwind_Resume(a1);
}

void sub_20EBBEE3C(uint64_t a1, char **a2)
{
  sub_20EBBE52C(a1 - 56, a2);
}

void sub_20EBBEE48(uint64_t a1)
{
  sub_20EBBEEBC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBBEE6C(uint64_t a1)
{
  return sub_20EBBEEBC(a1 - 56);
}

void sub_20EBBEE74(uint64_t a1)
{
  sub_20EBBEEBC(a1 - 56);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBBEEBC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C9C78D8;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7908;
  sub_20EBBEFD4(a1 + 160);
  *(_QWORD *)a1 = off_24C9C79A0;
  *(_QWORD *)(a1 + 56) = &unk_24C9C79C8;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 56) = off_24C9C7A18;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C7A18;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)a1 = off_24C9C79F0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C79F0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBBEFD4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            v9 = *(std::__shared_weak_count **)(v8 - 8);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(p_shared_owners);
              while (__stlxr(v11 - 1, p_shared_owners));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            v8 -= 16;
          }
          while (v8 != v7);
          v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20EBBF0A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20EBBF15C(uint64_t a1, unsigned int **a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned int *v12;
  unsigned int *v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int *v16;
  unsigned int *v17;
  __int128 *v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  __int128 *v24;
  uint64_t v25;
  char *v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  void **v30;
  _BYTE *v31;
  size_t v32;
  char *v33;
  char *v34;
  void **v35;
  char *v36;
  char *v37;
  void **v38;
  std::logic_error *exception;
  uint64_t v41;
  void **v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BYTE __dst[24];
  _QWORD *v63[2];

  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = a1 + 64;
  *(_OWORD *)(a1 + 112) = 0u;
  v8 = (void **)(a1 + 112);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_24C9C7A40;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7A70;
  v9 = operator new();
  v10 = *a3;
  *a3 = 0;
  sub_20E8A1408(v9, (uint64_t)a2);
  *(_QWORD *)(v9 + 2432) = v10;
  v11 = (float *)(v9 + 2440);
  *(_OWORD *)(v9 + 2440) = 0u;
  *(_OWORD *)(v9 + 2456) = 0u;
  *(_DWORD *)(v9 + 2472) = 1065353216;
  memset(__dst, 0, sizeof(__dst));
  v12 = *a2;
  v13 = a2[1];
  v63[0] = __dst;
  if (v12 != v13)
  {
    do
    {
      LODWORD(v61) = *v12;
      sub_20EA9AB98((uint64_t *)v63, &v61);
      v12 += 272;
    }
    while (v12 != v13);
    v42 = v8;
    v15 = *(_DWORD **)&__dst[8];
    v14 = *(_DWORD **)__dst;
    if (*(_QWORD *)__dst != *(_QWORD *)&__dst[8])
    {
      v41 = v6;
      do
      {
        v17 = *a2;
        v16 = a2[1];
        if (*a2 != v16)
        {
          while (*v17 != *v14)
          {
            v17 += 272;
            if (v17 == v16)
              goto LABEL_60;
          }
        }
        if (v17 == v16)
        {
LABEL_60:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Requested camera id not found.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v18 = (__int128 *)*((_QWORD *)v17 + 3);
        if (*((_QWORD *)v17 + 4) - (_QWORD)v18 <= 0x18uLL)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/Camera.cpp", 45, (uint64_t)"calib.radial_distortion_.size() >= 4", 36, (uint64_t)&unk_2102BAAAD, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v18 = (__int128 *)*((_QWORD *)v17 + 3);
        }
        v19 = *((_QWORD *)v17 + 1);
        v53 = *((_QWORD *)v17 + 17);
        v51 = *((_QWORD *)v17 + 20);
        v43 = *((int64x2_t *)v17 + 9);
        v45 = *(int64x2_t *)(v17 + 30);
        v49 = *((_QWORD *)v17 + 23);
        v47 = *(int8x16_t *)(v17 + 42);
        v59 = v18[1];
        v55 = *v18;
        v57 = *(_OWORD *)(v17 + 18);
        v20 = *v17;
        v61 = *v17;
        if (v20 >= 0x10000
          && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v61) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
        {
          abort();
        }
        v63[0] = &v61;
        v21 = sub_20EBC1DE8(v11, (int *)&v61, v63);
        v22 = (int8x16_t)vzip1q_s64(v45, v43);
        v23 = (int8x16_t)vzip2q_s64(v45, v43);
        *((_QWORD *)v21 + 3) = v19;
        *((_QWORD *)v21 + 6) = v47.i64[0];
        v22.i64[1] = vextq_s8(v22, v22, 8uLL).u64[0];
        *((int8x16_t *)v21 + 2) = v22;
        *((_QWORD *)v21 + 9) = vextq_s8(v47, v47, 8uLL).u64[0];
        v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
        *(int8x16_t *)(v21 + 56) = v23;
        *((_QWORD *)v21 + 12) = v49;
        v22.i64[0] = v53;
        v22.i64[1] = v51;
        *((int8x16_t *)v21 + 5) = v22;
        if (!v21[152])
          v21[152] = 1;
        *(_OWORD *)(v21 + 104) = v55;
        *(_OWORD *)(v21 + 120) = v59;
        *(_OWORD *)(v21 + 136) = v57;
        if (v17[1] == 2)
        {
          v24 = (__int128 *)*((_QWORD *)v17 + 69);
          if (*((_QWORD *)v17 + 70) - (_QWORD)v24 <= 0x18uLL)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/Camera.cpp", 45, (uint64_t)"calib.radial_distortion_.size() >= 4", 36, (uint64_t)&unk_2102BAAAD, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v24 = (__int128 *)*((_QWORD *)v17 + 69);
          }
          v25 = *((_QWORD *)v17 + 67);
          v54 = *((_QWORD *)v17 + 83);
          v52 = *((_QWORD *)v17 + 86);
          v44 = *((int64x2_t *)v17 + 42);
          v46 = *(int64x2_t *)(v17 + 162);
          v50 = *((_QWORD *)v17 + 89);
          v48 = *(int8x16_t *)(v17 + 174);
          v60 = v24[1];
          v56 = *v24;
          v58 = *(_OWORD *)(v17 + 150);
          LODWORD(v61) = *v17;
          HIDWORD(v61) = 1;
          if (v61 >= 0x10000
            && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v61) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
          {
            abort();
          }
          v63[0] = &v61;
          v26 = sub_20EBC1DE8(v11, (int *)&v61, v63);
          v27 = (int8x16_t)vzip1q_s64(v46, v44);
          v28 = (int8x16_t)vzip2q_s64(v46, v44);
          *((_QWORD *)v26 + 3) = v25;
          *((_QWORD *)v26 + 6) = v48.i64[0];
          v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
          *((int8x16_t *)v26 + 2) = v27;
          *((_QWORD *)v26 + 9) = vextq_s8(v48, v48, 8uLL).u64[0];
          v28.i64[1] = vextq_s8(v28, v28, 8uLL).u64[0];
          *(int8x16_t *)(v26 + 56) = v28;
          *((_QWORD *)v26 + 12) = v50;
          v27.i64[0] = v54;
          v27.i64[1] = v52;
          *((int8x16_t *)v26 + 5) = v27;
          if (!v26[152])
            v26[152] = 1;
          *(_OWORD *)(v26 + 104) = v56;
          *(_OWORD *)(v26 + 120) = v60;
          *(_OWORD *)(v26 + 136) = v58;
        }
        ++v14;
      }
      while (v14 != v15);
      v14 = *(_DWORD **)__dst;
      v6 = v41;
    }
    v8 = v42;
    if (v14)
    {
      *(_QWORD *)&__dst[8] = v14;
      operator delete(v14);
    }
  }
  *(_QWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 168) = sub_20EBC2348;
  v29 = (char *)operator new(0x28uLL);
  strcpy(v29, "Dense Depth Frame Extractor Node");
  *(_QWORD *)__dst = operator new(0x30uLL);
  *(_OWORD *)&__dst[8] = xmmword_2102E3F60;
  strcpy(*(char **)__dst, "Node to extract dense depth for each keypoint");
  if (*(char *)(a1 + 135) < 0)
    sub_20E867CBC(v8, v29, 0x20uLL);
  else
    sub_20E867BF8(v8, v29, 0x20uLL);
  v30 = (void **)(a1 + 136);
  if ((_BYTE *)(a1 + 136) != __dst)
  {
    if (*(char *)(a1 + 159) < 0)
    {
      if (__dst[23] >= 0)
        v31 = __dst;
      else
        v31 = *(_BYTE **)__dst;
      if (__dst[23] >= 0)
        v32 = __dst[23];
      else
        v32 = *(_QWORD *)&__dst[8];
      sub_20E867CBC(v30, v31, v32);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      sub_20E867BF8(v30, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)v30 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)&__dst[16];
    }
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  operator delete(v29);
  v33 = (char *)operator new(0x28uLL);
  strcpy(v33, "Dense Depth Frame Extraction Channel");
  v34 = (char *)operator new(0x30uLL);
  strcpy(v34, "Returns vector of depth for each keypoint");
  sub_20E860C04(__dst, v33, 0x24uLL);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = *(_OWORD *)__dst;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v34, 0x29uLL);
  v35 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__dst[16];
  operator delete(v34);
  operator delete(v33);
  v36 = (char *)operator new(0x28uLL);
  strcpy(v36, "Dense Depth Frame Jasper Point Channel");
  v37 = (char *)operator new(0x28uLL);
  strcpy(v37, "Add jasper frame to jasper aggregator");
  sub_20E860C04(__dst, v36, 0x26uLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = *(_OWORD *)__dst;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)&__dst[16];
  sub_20E860C04(__dst, v37, 0x25uLL);
  v38 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = *(_OWORD *)__dst;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&__dst[16];
  operator delete(v37);
  operator delete(v36);
  return a1;
}

void sub_20EBBF904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v12;
  uint64_t v14;

  operator delete(v12);
  v14 = *(_QWORD *)(v11 + 160);
  *(_QWORD *)(v11 + 160) = 0;
  if (v14)
    (*(void (**)(void))(v11 + 168))();
  sub_20EBBFA6C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBBFA6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9C7B08;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7B30;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 56) = off_24C9C7B80;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C7B80;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)a1 = off_24C9C7B58;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C7B58;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBBFB68(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD **a3@<X8>)
{
  _QWORD **v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  double **v52;
  double *v53;
  double *v54;
  uint64_t v55;
  char *v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  float64x2_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _DWORD *v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  double **v81;
  _QWORD *v82;
  unint64_t v83;
  int64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  size_t v107;
  const char *v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  __int128 *v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void *p_p;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  size_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (**v135)();
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t (**v159)();
  uint64_t v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t (**v165)();
  __int128 v166;
  __int128 v167;
  void *v168;
  __int16 v169;
  void *object;
  __int128 v171;
  __int128 v172;
  void *__p;
  size_t v174;
  uint64_t (**v175)();
  uint64_t v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  uint64_t v179;
  __int16 v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  _OWORD v184[2];
  int v185;
  _BYTE v186[28];
  char *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;

  v3 = a3;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 2432))
  {
    sub_20EBC0F78(v184);
    if (**(int **)(*(_QWORD *)&v184[0] + 56) > 4)
      goto LABEL_232;
    v102 = *(unsigned __int8 *)(*(_QWORD *)&v184[0] + 72);
    v103 = sub_20E8C31DC(*(uint64_t *)&v184[0], "OSLogSurrogateAppender", 1, 0);
    v104 = v103;
    v105 = !v102 && v103 == 0;
    if (v105)
      goto LABEL_232;
    *(_QWORD *)v186 = v184;
    *(std::chrono::steady_clock::time_point *)&v186[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v186[16] = std::chrono::system_clock::now();
    *(_DWORD *)&v186[24] = 4;
    v187 = "unknown file";
    LODWORD(v188) = 84;
    v190 = 0;
    v191 = 0;
    v189 = "unknown function";
    v106 = **(_QWORD **)v186;
    if (*(char *)(**(_QWORD **)v186 + 39) < 0)
    {
      v108 = *(const char **)(v106 + 16);
      v107 = *(_QWORD *)(v106 + 24);
      v155 = v106 + 16;
      v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v110 & 1) != 0)
        goto LABEL_162;
    }
    else
    {
      v107 = *(unsigned __int8 *)(**(_QWORD **)v186 + 39);
      v108 = (const char *)(v106 + 16);
      v155 = v106 + 16;
      v109 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v109 & 1) != 0)
        goto LABEL_162;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v172 && SHIBYTE(v171) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_162:
    if (byte_254A4A4F8[23] >= 0)
      v111 = byte_254A4A4F8;
    else
      v111 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v112 = byte_254A4A4F8[23];
    else
      v112 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v111, v108);
    v113 = &v171;
    if (v112 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v112 >= 0x17)
    {
      v114 = v104;
      v115 = v108;
      v116 = v106;
      v117 = v102;
      v118 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v112 | 7) != 0x17)
        v118 = v112 | 7;
      v119 = v118 + 1;
      v113 = (__int128 *)operator new(v118 + 1);
      *((_QWORD *)&v171 + 1) = v112;
      *(_QWORD *)&v172 = v119 | 0x8000000000000000;
      *(_QWORD *)&v171 = v113;
      v102 = v117;
      v106 = v116;
      v108 = v115;
      v104 = v114;
    }
    else
    {
      BYTE7(v172) = v112;
      if (!v112)
      {
LABEL_176:
        *((_BYTE *)v113 + v112) = 0;
        BYTE8(v172) = 1;
        p_p = &__p;
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v107 >= 0x17)
        {
          v121 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v121 = v107 | 7;
          v122 = v121 + 1;
          p_p = operator new(v121 + 1);
          v174 = v107;
          v175 = (uint64_t (**)())(v122 | 0x8000000000000000);
          __p = p_p;
        }
        else
        {
          HIBYTE(v175) = v107;
          if (!v107)
            goto LABEL_184;
        }
        memmove(p_p, v108, v107);
LABEL_184:
        *((_BYTE *)p_p + v107) = 0;
        LOBYTE(v176) = 1;
        v123 = object;
        if (SHIBYTE(v175) < 0)
          operator delete(__p);
        if (BYTE8(v172) && SBYTE7(v172) < 0)
          operator delete((void *)v171);
        if (object)
          os_release(object);
        if (v104 && *(_QWORD *)(v104 + 24))
        {
          v124 = _os_log_pack_size();
          v125 = (std::__shared_weak_count_vtbl *)operator new(v124, (std::align_val_t)8uLL);
          v126 = (std::__shared_weak_count *)operator new();
          v127 = v126;
          v126->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v126->__shared_owners_;
          v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v126->__shared_weak_owners_ = 0;
          v126[1].__vftable = v125;
          object = v125;
          *(_QWORD *)&v171 = v125;
          *((_QWORD *)&v171 + 1) = v126;
          do
            v129 = __ldxr(p_shared_owners);
          while (__stxr(v129 + 1, p_shared_owners));
          v172 = 0uLL;
          __p = 0;
          do
            v130 = __ldaxr(p_shared_owners);
          while (__stlxr(v130 - 1, p_shared_owners));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v127);
          }
          v131 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v132 = operator new();
          v133 = *(unsigned __int8 *)(v106 + 39);
          v134 = v155;
          if ((v133 & 0x80u) != 0)
          {
            v134 = *(_QWORD *)(v106 + 16);
            v133 = *(_QWORD *)(v106 + 24);
          }
          *(_QWORD *)v132 = v131;
          *(_OWORD *)(v132 + 8) = v171;
          v171 = 0uLL;
          *(_OWORD *)(v132 + 24) = v172;
          v172 = 0uLL;
          *(_QWORD *)(v132 + 40) = v134;
          *(_QWORD *)(v132 + 48) = v133;
          *(_BYTE *)(v132 + 56) = 16;
          v159 = 0;
          v165 = (uint64_t (**)())v132;
          (*(void (**)(_QWORD, uint64_t (***)()))(**(_QWORD **)(v104 + 24) + 40))(*(_QWORD *)(v104 + 24), &v165);
          v135 = v165;
          v165 = 0;
          v3 = a3;
          if (v135)
          {
            v136 = (std::__shared_weak_count *)v135[4];
            if (v136)
            {
              v137 = (unint64_t *)&v136->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            v139 = (std::__shared_weak_count *)v135[2];
            if (v139)
            {
              v140 = (unint64_t *)&v139->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
            v159 = 0;
          }
          v142 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
          if (*((_QWORD *)&v172 + 1))
          {
            v143 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v145 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
          if (*((_QWORD *)&v171 + 1))
          {
            v146 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
          }
        }
        else
        {
          os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
          LOWORD(object) = 0;
          v148 = (void *)_os_log_send_and_compose_impl();
          v3 = a3;
          if (v148)
            free(v148);
        }
        if (v102)
        {
          sub_20E8C003C((uint64_t)v186, "Dense Depth Model not available.");
          sub_20E863570((uint64_t)v186);
        }
        sub_20E863570((uint64_t)v186);
        v149 = v191;
        if (v191)
        {
          v150 = (unint64_t *)&v191->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        goto LABEL_232;
      }
    }
    memmove(v113, v111, v112);
    goto LABEL_176;
  }
  if (!*a2)
  {
LABEL_232:
    *v3 = 0;
    v3[1] = 0;
    return;
  }
  v5 = a1;
  memset(v184, 0, sizeof(v184));
  v185 = 733223672;
  kdebug_trace();
  v6 = (_QWORD *)*a2;
  v7 = operator new(0x30uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_24C9C7BA8;
  v7[4] = 0;
  v7[5] = 0;
  v7[3] = 0;
  *v3 = v7 + 3;
  v3[1] = v7;
  v9 = *v6;
  v8 = v6[1];
  v10 = 0x8E38E38E38E38E39 * ((v8 - *v6) >> 5);
  if (v8 != *v6)
  {
    if (v10 >= 0x492492492492493)
      sub_20E867F44();
    v11 = (char *)operator new(0x1C71C71C71C71C78 * ((v8 - *v6) >> 5));
    v7[3] = v11;
    v7[4] = v11;
    v7[5] = &v11[56 * v10];
    v9 = *v6;
    v8 = v6[1];
    v10 = 0x8E38E38E38E38E39 * ((v8 - *v6) >> 5);
  }
  if (v8 != v9)
  {
    v12 = 0;
    v153 = v6;
    v154 = v5;
    v152 = v10;
    do
    {
      v13 = *v6 + 288 * v12;
      v14 = v6[3];
      *(_QWORD *)v186 = *(_QWORD *)(v13 + 24);
      *(_OWORD *)&v186[8] = *(_OWORD *)v13;
      *(_DWORD *)&v186[24] = *(_DWORD *)(v13 + 16);
      v188 = 0;
      v189 = 0;
      v187 = 0;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v5 + 160) + 2432) + 16))(&object);
      if (!HIDWORD(*((_QWORD *)&v172 + 1)) || !DWORD2(v172))
      {
        v37 = (uint64_t)*v3;
        v38 = (*v3)[1];
        if (v38 >= (*v3)[2])
        {
          *(_QWORD *)(v37 + 8) = sub_20EBC1A94(*v3, (uint64_t)v186);
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)v186;
          *(_OWORD *)(v38 + 12) = *(_OWORD *)&v186[12];
          *(_QWORD *)(v38 + 40) = 0;
          *(_QWORD *)(v38 + 48) = 0;
          *(_QWORD *)(v38 + 32) = 0;
          *(_QWORD *)(v37 + 8) = v38 + 56;
          *(_QWORD *)(v37 + 8) = v38 + 56;
        }
        goto LABEL_140;
      }
      v165 = &off_24C9AD270;
      v15 = v171;
      if (*((_QWORD *)&v171 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v18 = v174;
        do
          v19 = __ldxr(v16);
        while (__stxr(v19 + 1, v16));
        v167 = v172;
        v168 = __p;
        do
          v20 = __ldxr(v16);
        while (__stxr(v20 + 1, v16));
        v166 = v15;
        v169 = v18;
        do
          v21 = __ldaxr(v16);
        while (__stlxr(v21 - 1, v16));
        if (!v21)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
        }
        do
          v22 = __ldaxr(v16);
        while (__stlxr(v22 - 1, v16));
        if (v22)
        {
          v159 = &off_24C9AD270;
          v23 = v176;
          v24 = v177;
          if (!v177)
            goto LABEL_48;
        }
        else
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v15 + 1) + 16))(*((_QWORD *)&v15 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v15 + 1));
          v159 = &off_24C9AD270;
          v23 = v176;
          v24 = v177;
          if (!v177)
          {
LABEL_48:
            v160 = v23;
            v161 = 0;
            v162 = v178;
            v163 = v179;
            v164 = v180;
            v33 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
            v32 = v166;
            if (!*((_QWORD *)&v166 + 1))
              goto LABEL_49;
            goto LABEL_38;
          }
        }
      }
      else
      {
        v166 = (unint64_t)v171;
        v167 = v172;
        v168 = __p;
        v169 = v174;
        v159 = &off_24C9AD270;
        v23 = v176;
        v24 = v177;
        if (!v177)
          goto LABEL_48;
      }
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = v180;
      do
        v28 = __ldxr(v25);
      while (__stxr(v28 + 1, v25));
      v162 = v178;
      v163 = v179;
      do
        v29 = __ldxr(v25);
      while (__stxr(v29 + 1, v25));
      v160 = v23;
      v161 = v24;
      v164 = v27;
      do
        v30 = __ldaxr(v25);
      while (__stlxr(v30 - 1, v25));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      do
        v31 = __ldaxr(v25);
      while (__stlxr(v31 - 1, v25));
      if (v31)
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        v32 = v166;
        if (!*((_QWORD *)&v166 + 1))
          goto LABEL_49;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        v32 = v166;
        if (!*((_QWORD *)&v166 + 1))
        {
LABEL_49:
          if (!v32)
            goto LABEL_77;
LABEL_61:
          if (HIBYTE(v169))
            goto LABEL_62;
          goto LABEL_77;
        }
      }
LABEL_38:
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (v36)
      {
        if (!v32)
          goto LABEL_77;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        if (!v32)
          goto LABEL_77;
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      v32 = v166;
      if (!*((_QWORD *)&v166 + 1))
        goto LABEL_61;
      v40 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (v42)
        goto LABEL_61;
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (HIBYTE(v169))
      {
LABEL_62:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v32 + 96))(&v158, v32, 1);
        v43 = v160;
        v44 = v161;
        if (!v161)
          goto LABEL_78;
        goto LABEL_63;
      }
LABEL_77:
      v158 = 0;
      v43 = v160;
      v44 = v161;
      if (!v161)
      {
LABEL_78:
        if (!v43)
          goto LABEL_116;
        goto LABEL_79;
      }
LABEL_63:
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      do
        v47 = __ldaxr(v45);
      while (__stlxr(v47 - 1, v45));
      if (v47)
      {
        if (!v43)
          goto LABEL_116;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if (!v43)
          goto LABEL_116;
      }
      v43 = v160;
      v48 = v161;
      if (v161)
      {
        v49 = (unint64_t *)&v161->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
LABEL_79:
      if (HIBYTE(v164))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v43 + 96))(&v157, v43, 1);
        v52 = (double **)(v14 + 24 * v12);
        v53 = *v52;
        v54 = v52[1];
        v55 = (char *)v54 - (char *)*v52;
        if (v54 != *v52)
          goto LABEL_81;
        goto LABEL_117;
      }
LABEL_116:
      v157 = 0;
      v81 = (double **)(v14 + 24 * v12);
      v53 = *v81;
      v54 = v81[1];
      v55 = (char *)v54 - (char *)*v81;
      if (v54 != *v81)
      {
LABEL_81:
        if (v55 < 0)
          sub_20E867F44();
        v56 = (char *)operator new((unint64_t)v55 >> 1);
        v57 = &v56[8 * (v55 >> 4)];
        v58 = v56;
        while (1)
        {
          while (1)
          {
            v60 = vaddq_f64(v183, vmlaq_n_f64(vmulq_n_f64(v181, *v53), v182, v53[1]));
            v61 = (int)(v60.f64[0] + 0.5);
            v62 = 0;
            if (v61 < 0
              || (v63 = (int)(v60.f64[1] + 0.5), v63 < 0)
              || (double)((unint64_t)DWORD2(v167) - 1) < (double)v61)
            {
              v64 = 0;
            }
            else
            {
              v64 = 0;
              if ((double)(unint64_t)(HIDWORD(*((_QWORD *)&v167 + 1)) - 1) >= (double)v63)
              {
                v62 = *(_DWORD *)(v167 + 4 * ((_DWORD)v168 * v61 + HIDWORD(v168) * v63));
                v64 = *(_DWORD *)(v162 + 4 * (v163 * v61 + HIDWORD(v163) * v63));
              }
            }
            if (v58 >= v57)
              break;
            *(_DWORD *)v58 = v62;
            *((_DWORD *)v58 + 1) = v64;
            v59 = (uint64_t)(v58 + 8);
            v53 += 2;
            v58 += 8;
            if (v53 == v54)
              goto LABEL_118;
          }
          v65 = (v58 - v56) >> 3;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61)
            sub_20E867F44();
          if ((v57 - v56) >> 2 > v66)
            v66 = (v57 - v56) >> 2;
          if ((unint64_t)(v57 - v56) >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
          {
            if (v67 >> 61)
              sub_20E877A38();
            v68 = operator new(8 * v67);
            v69 = &v68[8 * v65];
            v57 = &v68[8 * v67];
            *v69 = v62;
            v69[1] = v64;
            v59 = (uint64_t)(v69 + 2);
            v70 = v58 - v56;
            if (v58 == v56)
              goto LABEL_107;
          }
          else
          {
            v68 = 0;
            v69 = (_DWORD *)(8 * v65);
            v57 = 0;
            *v69 = v62;
            v69[1] = v64;
            v59 = 8 * v65 + 8;
            v70 = v58 - v56;
            if (v58 == v56)
              goto LABEL_107;
          }
          v71 = v70 - 8;
          if (v71 < 0x168
            || (v74 = (v58 - 8 - v56) & 0xFFFFFFFFFFFFFFF8, &v68[v58 - v56 - 8 - v74] > &v68[v58 - v56 - 8])
            || &v58[-v74 - 8] > v58 - 8
            || (unint64_t)(v56 - v68) < 0x20)
          {
            v72 = v58;
          }
          else
          {
            v75 = (v71 >> 3) + 1;
            v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v58[-v76];
            v69 = (_DWORD *)((char *)v69 - v76);
            v77 = &v68[8 * v65 - 16];
            v78 = v58 - 16;
            v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v80 = *(_OWORD *)v78;
              *(v77 - 1) = *((_OWORD *)v78 - 1);
              *v77 = v80;
              v77 -= 2;
              v78 -= 32;
              v79 -= 4;
            }
            while (v79);
            if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_101;
          }
          do
          {
            v73 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *((_QWORD *)v69 - 1) = v73;
            v69 -= 2;
          }
          while (v72 != v56);
LABEL_101:
          if (v56)
          {
LABEL_107:
            operator delete(v56);
            v56 = (char *)v69;
            v53 += 2;
            v58 = (char *)v59;
            if (v53 == v54)
              goto LABEL_118;
          }
          else
          {
            v56 = (char *)v69;
            v53 += 2;
            v58 = (char *)v59;
            if (v53 == v54)
              goto LABEL_118;
          }
        }
      }
LABEL_117:
      v56 = 0;
      v59 = 0;
      v57 = 0;
LABEL_118:
      if (v187)
        operator delete(v187);
      v187 = v56;
      v188 = v59;
      v189 = v57;
      v3 = a3;
      v82 = *a3;
      v83 = (*a3)[1];
      v6 = v153;
      if (v83 >= (*a3)[2])
      {
        v87 = sub_20EBC1A94(*a3, (uint64_t)v186);
        v5 = v154;
        v10 = v152;
      }
      else
      {
        *(_OWORD *)v83 = *(_OWORD *)v186;
        *(_OWORD *)(v83 + 12) = *(_OWORD *)&v186[12];
        *(_QWORD *)(v83 + 32) = 0;
        *(_QWORD *)(v83 + 40) = 0;
        *(_QWORD *)(v83 + 48) = 0;
        v84 = v59 - (_QWORD)v56;
        v105 = v59 == (_QWORD)v56;
        v5 = v154;
        if (!v105)
        {
          if (v84 < 0)
            sub_20E867F44();
          v85 = (char *)operator new(v84);
          *(_QWORD *)(v83 + 32) = v85;
          *(_QWORD *)(v83 + 40) = v85;
          v86 = &v85[8 * (v84 >> 3)];
          *(_QWORD *)(v83 + 48) = v86;
          memcpy(v85, v56, v84);
          *(_QWORD *)(v83 + 40) = v86;
        }
        v87 = (char *)(v83 + 56);
        v82[1] = v83 + 56;
        v10 = v152;
      }
      v82[1] = v87;
      v88 = v157;
      v157 = 0;
      if (v88)
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      v89 = v158;
      v158 = 0;
      if (v89)
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
      v159 = &off_24C9AD270;
      v90 = v161;
      if (!v161)
        goto LABEL_134;
      v91 = (unint64_t *)&v161->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
        v165 = &off_24C9AD270;
        v93 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (!*((_QWORD *)&v166 + 1))
          goto LABEL_140;
      }
      else
      {
LABEL_134:
        v165 = &off_24C9AD270;
        v93 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (!*((_QWORD *)&v166 + 1))
          goto LABEL_140;
      }
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
LABEL_140:
      v175 = &off_24C9AD270;
      v96 = v177;
      if (!v177)
        goto LABEL_144;
      v97 = (unint64_t *)&v177->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
        object = &off_24C9AD270;
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
        if (*((_QWORD *)&v171 + 1))
        {
LABEL_145:
          v100 = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      else
      {
LABEL_144:
        object = &off_24C9AD270;
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
        if (*((_QWORD *)&v171 + 1))
          goto LABEL_145;
      }
      if (v187)
        operator delete(v187);
      ++v12;
    }
    while (v12 != v10);
  }
  kdebug_trace();
}

void sub_20EBC0CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;

  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v43 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E8C4(&a30);
  sub_20E86E8C4(&a23);
  sub_20E86E658((uint64_t)&a37);
  sub_20E863714(v37 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E658((uint64_t)&a37);
  sub_20E863714(v37 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0D70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0DB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 && a43 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v44 - 200);
  _Unwind_Resume(a1);
}

void sub_20EBC0E18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8E69C4(v1 - 240);
  _Unwind_Resume(a1);
}

void sub_20EBC0E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_20E86665C(a20);
  sub_20E8E69C4(v20 - 240);
  _Unwind_Resume(a1);
}

void sub_20EBC0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,...)
{
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  va_list va;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  va_list va1;

  va_start(va1, a22);
  va_start(va, a22);
  v28 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  v34 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  if (v22)
  {
    operator delete(v22);
    v25 = a14;
    if (!a14)
    {
LABEL_3:
      v26 = a15;
      if (!a15)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v25 = a14;
    if (!a14)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a15;
  if (!a15)
  {
LABEL_5:
    sub_20E89E240(&a16);
    sub_20E89E240((uint64_t *)va);
    v27 = *(void **)(v23 - 168);
    sub_20EBC106C((uint64_t *)va1);
    if (v27)
      operator delete(v27);
    sub_20E86665C(a13);
    sub_20E8E69C4(v23 - 240);
    _Unwind_Resume(a1);
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  goto LABEL_5;
}

void sub_20EBC0F78(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B7D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B7D0))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5B7C8);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5B7D0);
  }
  *a1 = qword_254A5B7C8;
}

void sub_20EBC1014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B7D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B7D0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBC106C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[7] = &off_24C9AD270;
  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *a1 = &off_24C9AD270;
      v5 = (std::__shared_weak_count *)a1[2];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  *a1 = &off_24C9AD270;
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EBC1138(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD v63[3];
  int v64;
  const char *v65;
  int v66;
  const char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  _BYTE object[40];
  void *__p[2];
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 2432))
  {
    memset(object, 0, 32);
    *(_DWORD *)&object[32] = 733223664;
    kdebug_trace();
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 160) + 2432) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 2432), *a2);
    kdebug_trace();
    return;
  }
  sub_20EBC0F78(&v70);
  if (**(int **)(v70 + 56) <= 4)
  {
    v4 = *(unsigned __int8 *)(v70 + 72);
    v5 = sub_20E8C31DC(v70, "OSLogSurrogateAppender", 1, 0);
    v6 = v5;
    if (v4 || v5 != 0)
    {
      v63[0] = &v70;
      v63[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v63[2] = std::chrono::system_clock::now().__d_.__rep_;
      v64 = 4;
      v65 = "unknown file";
      v66 = 142;
      v68 = 0;
      v69 = 0;
      v67 = "unknown function";
      v8 = v70;
      v9 = v70 + 16;
      if (*(char *)(v70 + 39) < 0)
      {
        v11 = *(const char **)(v70 + 16);
        v10 = *(_QWORD *)(v70 + 24);
        v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v13 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        v10 = *(unsigned __int8 *)(v70 + 39);
        v11 = (const char *)(*(_QWORD *)v63[0] + 16);
        v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v12 & 1) != 0)
          goto LABEL_12;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_12:
      if (byte_254A4A4F8[23] >= 0)
        v14 = byte_254A4A4F8;
      else
        v14 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v15 = byte_254A4A4F8[23];
      else
        v15 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v14, v11);
      v16 = &object[8];
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v15 >= 0x17)
      {
        v17 = v6;
        v18 = v11;
        v19 = v8;
        v20 = v4;
        v21 = v9;
        v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v22 = v15 | 7;
        v23 = v22 + 1;
        v16 = operator new(v22 + 1);
        *(_QWORD *)&object[16] = v15;
        *(_QWORD *)&object[24] = v23 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v16;
        v9 = v21;
        v4 = v20;
        v8 = v19;
        v11 = v18;
        v6 = v17;
      }
      else
      {
        object[31] = v15;
        if (!v15)
        {
LABEL_26:
          v16[v15] = 0;
          object[32] = 1;
          v24 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v10 >= 0x17)
          {
            v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v25 = v10 | 7;
            v26 = v25 + 1;
            v24 = operator new(v25 + 1);
            __p[1] = (void *)v10;
            v73 = v26 | 0x8000000000000000;
            __p[0] = v24;
          }
          else
          {
            HIBYTE(v73) = v10;
            if (!v10)
              goto LABEL_34;
          }
          memmove(v24, v11, v10);
LABEL_34:
          *((_BYTE *)v24 + v10) = 0;
          v74 = 1;
          v27 = *(NSObject **)object;
          if (SHIBYTE(v73) < 0)
            operator delete(__p[0]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v6 && *(_QWORD *)(v6 + 24))
          {
            v28 = _os_log_pack_size();
            v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
            v30 = (std::__shared_weak_count *)operator new();
            v31 = v30;
            v30->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v30->__shared_weak_owners_ = 0;
            v30[1].__vftable = v29;
            *(_QWORD *)object = v29;
            *(_QWORD *)&object[8] = v29;
            *(_QWORD *)&object[16] = v30;
            do
              v33 = __ldxr(p_shared_owners);
            while (__stxr(v33 + 1, p_shared_owners));
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            __p[0] = 0;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v31);
            }
            v35 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v36 = operator new();
            v37 = *(unsigned __int8 *)(v8 + 39);
            if ((v37 & 0x80u) == 0)
              v38 = v9;
            else
              v38 = *(_QWORD *)(v8 + 16);
            if ((v37 & 0x80u) != 0)
              v37 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)v36 = v35;
            *(_OWORD *)(v36 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v36 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v36 + 40) = v38;
            *(_QWORD *)(v36 + 48) = v37;
            *(_BYTE *)(v36 + 56) = 16;
            v75 = 0;
            v76 = v36;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v76);
            v39 = v76;
            v76 = 0;
            if (v39)
            {
              v40 = *(std::__shared_weak_count **)(v39 + 32);
              if (v40)
              {
                v41 = (unint64_t *)&v40->__shared_owners_;
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              v43 = *(std::__shared_weak_count **)(v39 + 16);
              if (v43)
              {
                v44 = (unint64_t *)&v43->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
              MEMORY[0x212BC6398](v39, 0x10F0C40B62ED6C6);
              v46 = v75;
              v75 = 0;
              if (v46)
              {
                v47 = *(std::__shared_weak_count **)(v46 + 32);
                if (v47)
                {
                  v48 = (unint64_t *)&v47->__shared_owners_;
                  do
                    v49 = __ldaxr(v48);
                  while (__stlxr(v49 - 1, v48));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                    std::__shared_weak_count::__release_weak(v47);
                  }
                }
                v50 = *(std::__shared_weak_count **)(v46 + 16);
                if (v50)
                {
                  v51 = (unint64_t *)&v50->__shared_owners_;
                  do
                    v52 = __ldaxr(v51);
                  while (__stlxr(v52 - 1, v51));
                  if (!v52)
                  {
                    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                    std::__shared_weak_count::__release_weak(v50);
                  }
                }
                MEMORY[0x212BC6398](v46, 0x10F0C40B62ED6C6);
              }
            }
            v53 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v54 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v56 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v57 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v59 = (void *)_os_log_send_and_compose_impl();
            if (v59)
              free(v59);
          }
          if (v4)
          {
            sub_20E8C003C((uint64_t)v63, "Dense Depth Model not available.");
            sub_20E863570((uint64_t)v63);
          }
          sub_20E863570((uint64_t)v63);
          v60 = v69;
          if (v69)
          {
            v61 = (unint64_t *)&v69->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          return;
        }
      }
      memmove(v16, v14, v15);
      goto LABEL_26;
    }
  }
}

void sub_20EBC1874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EBC18B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v3 - 96));
  sub_20E86E8C4((uint64_t *)(v3 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBC18E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBC1914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBC1930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBC1944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EBC1990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBC19A8(uint64_t a1, _QWORD *a2)
{
  sub_20EBC1138(a1 - 56, a2);
}

void sub_20EBC19B4(uint64_t a1)
{
  sub_20EBC1CC0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC19D8(uint64_t a1)
{
  return sub_20EBC1CC0(a1 - 56);
}

void sub_20EBC19E0(uint64_t a1)
{
  sub_20EBC1CC0(a1 - 56);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC1A28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 56;
        *(_QWORD *)(a1 + 16) = v2 - 56;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 56;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EBC1A94(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  void *v21;
  __int128 v23;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    sub_20E867F44();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3)) >= 0x249249249249249)
    v8 = 0x492492492492492;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x492492492492492)
      sub_20E877A38();
    v9 = (char *)operator new(56 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[56 * v4];
  v11 = &v9[56 * v8];
  *((_QWORD *)&v23 + 1) = v11;
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)(a2 + 12);
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  v12 = (char **)(v10 + 40);
  *((_QWORD *)v10 + 6) = 0;
  v14 = *(_BYTE **)(a2 + 32);
  v13 = *(_BYTE **)(a2 + 40);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v13 - v14);
    *((_QWORD *)v10 + 4) = v16;
    *v12 = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *((_QWORD *)v10 + 6) = v17;
    memcpy(v16, v14, v15);
    *v12 = v17;
  }
  v18 = v10 + 56;
  *(_QWORD *)&v23 = v10 + 56;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v18;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v19 = *(_OWORD *)(v2 - 56);
      *(_OWORD *)(v10 - 44) = *(_OWORD *)(v2 - 44);
      *(_OWORD *)(v10 - 56) = v19;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      v10 -= 56;
      *((_QWORD *)v2 - 3) = 0;
      *((_QWORD *)v2 - 2) = 0;
      *((_QWORD *)v2 - 1) = 0;
      v2 -= 56;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
    v20 = (char *)a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v23;
    v18 = (char *)v23;
    while (v20 != v2)
    {
      v21 = (void *)*((_QWORD *)v20 - 3);
      if (v21)
      {
        *((_QWORD *)v20 - 2) = v21;
        operator delete(v21);
      }
      v20 -= 56;
    }
  }
  if (v2)
    operator delete(v2);
  return v18;
}

void sub_20EBC1C9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *v2 = v5;
    operator delete(v5);
  }
  sub_20EBC1A28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC1CC0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9C7A40;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7A70;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 168))();
  *(_QWORD *)a1 = off_24C9C7B08;
  *(_QWORD *)(a1 + 56) = &unk_24C9C7B30;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_5:
      *(_QWORD *)(a1 + 56) = off_24C9C7B80;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C7B80;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C9C7B58;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_14:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C7B58;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_14;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

char *sub_20EBC1DE8(float *a1, int *a2, _QWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  _QWORD *v43;
  unint64_t v44;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_104;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_104:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v13 + 1);
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = *((_QWORD *)v13 + 1);
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = (char *)operator new(0xA0uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a3;
  *((_QWORD *)v13 + 19) = 0;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v9 = v3;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v21)
      goto LABEL_95;
LABEL_83:
    *(_QWORD *)v13 = *v21;
LABEL_101:
    *v21 = v13;
    goto LABEL_102;
  }
  v22 = 1;
  if (v10 >= 3)
    v22 = (v10 & (v10 - 1)) != 0;
  v23 = v22 | (2 * v10);
  v24 = vcvtps_u32_f32(v18 / v19);
  if (v23 <= v24)
    prime = v24;
  else
    prime = v23;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v10 = *((_QWORD *)a1 + 1);
  }
  if (prime > v10)
  {
LABEL_47:
    if (prime >> 61)
      sub_20E877A38();
    v26 = operator new(8 * prime);
    v27 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
    while (prime != v28);
    v30 = (uint64_t *)(a1 + 4);
    v29 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v29)
      goto LABEL_79;
    v31 = v29[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *v29 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
          **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
          v29 = i;
          v33 = v35;
        }
      }
      goto LABEL_79;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
    v40 = (_QWORD *)*v29;
    if (!*v29)
    {
LABEL_79:
      v10 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_80;
LABEL_94:
      v9 = ((_DWORD)v10 - 1) & v9;
      v20 = *(_QWORD **)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
      if (!v21)
        goto LABEL_95;
      goto LABEL_83;
    }
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 == v31)
        goto LABEL_73;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
      {
        *v29 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
        **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
        v40 = v29;
LABEL_73:
        v29 = v40;
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_79;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
        v29 = v40;
        v40 = (_QWORD *)*v40;
        v31 = v42;
        if (!v40)
          goto LABEL_79;
      }
    }
  }
  if (prime < v10)
  {
    v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
    {
      v37 = std::__next_prime(v37);
    }
    else
    {
      v39 = 1 << -(char)__clz(v37 - 1);
      if (v37 >= 2)
        v37 = v39;
    }
    if (prime <= v37)
      prime = v37;
    if (prime < v10)
    {
      if (!prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_94;
      }
      goto LABEL_47;
    }
    v10 = *((_QWORD *)a1 + 1);
  }
  if ((v10 & (v10 - 1)) == 0)
    goto LABEL_94;
LABEL_80:
  if (v10 <= v9)
    v9 %= v10;
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v21)
    goto LABEL_83;
LABEL_95:
  *(_QWORD *)v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v20[v9] = a1 + 4;
  if (*(_QWORD *)v13)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10)
        v44 %= v10;
    }
    else
    {
      v44 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_101;
  }
LABEL_102:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_20EBC2334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC2348(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD **)(result + 2456);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 2440);
    *(_QWORD *)(v1 + 2440) = 0;
    if (v4)
      operator delete(v4);
    v5 = *(_QWORD *)(v1 + 2432);
    *(_QWORD *)(v1 + 2432) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_20E86A810(v1);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EBC23C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBC23D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC2404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v6);
    }
  }
}

uint64_t sub_20EBC2490(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::string *)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_24C9C7BF8;
  v5 = operator new();
  sub_20EBC4CC4(v5, (unsigned int **)a2, *(unsigned __int8 *)(a2 + 2432));
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = sub_20EBC900C;
  sub_20E8B43E8(v4, "Keypoint DenseDepth Mapping Node Group", 0x26uLL);
  sub_20E8B43E8((std::string *)(a1 + 32), "Map keypoints to DenseDepth frame", 0x21uLL);
  return a1;
}

void sub_20EBC2538(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x10B2C403AF7CCEFLL);
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC2564(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC2578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC25A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  void **v21;
  char *v22;
  void **v23;
  char *v24;
  int v27;
  size_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *p_dst;
  char *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  void *v42;
  void **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void **v46;
  __int128 v47;
  char *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  void *v52;
  void **v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  void *v57;
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  __int128 *v66;
  char *v67;
  char *v68;
  void *v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t *v73;
  __int128 v74;
  uint64_t v75;
  void **v76;
  char *v77;
  void **v78;
  char *v79;
  int v82;
  size_t v83;
  unint64_t v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  char *v89;
  void *v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  void *v97;
  void **v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  __int128 v102;
  char *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  void *v107;
  void **v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void *v112;
  __int128 v113;
  char *v114;
  _BOOL4 v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  void *v120;
  __int128 v122;
  int v123;
  size_t v124;
  unint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  void *v131;
  char *v132;
  unint64_t v133;
  void *v134;
  char *v135;
  unint64_t v136;
  void **v137;
  void **v138;
  uint64_t v139;
  void *v140[2];
  uint64_t v141;
  void *v142[2];
  __int128 v143;
  unint64_t v144;
  __int128 __p;
  _BYTE v146[24];
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 __dst;
  int64_t v151;
  _BYTE v152[128];
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 56);
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v3 = *(_QWORD *)(v2 + 80);
  if (!v3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(_QWORD *)(v2 + 80);
    if ((*(char *)(v3 + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    sub_20E860C04(&__dst, *(void **)(v3 + 8), *(_QWORD *)(v3 + 16));
    goto LABEL_7;
  }
  if (*(char *)(v3 + 31) < 0)
    goto LABEL_6;
LABEL_3:
  v4 = *(_OWORD *)(v3 + 8);
  v151 = *(_QWORD *)(v3 + 24);
  __dst = v4;
LABEL_7:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 96) + 48))(*(_QWORD *)(v3 + 96));
  v6 = atomic_load((unsigned __int8 *)&qword_254A5B7D8);
  if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5B7D8))
    goto LABEL_8;
  sub_20EBC3DC8();
  v123 = byte_254A5B897;
  if (byte_254A5B897 >= 0)
    v124 = byte_254A5B897;
  else
    v124 = qword_254A5B888;
  v125 = v124 + 1;
  if (v124 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v125 >= 0x17)
  {
    v127 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v127 = v125 | 7;
    v128 = v127 + 1;
    v126 = (__int128 *)operator new(v127 + 1);
    *((_QWORD *)&xmmword_254A5B868 + 1) = v124 + 1;
    unk_254A5B878 = v128 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5B868 = v126;
    goto LABEL_328;
  }
  v126 = &xmmword_254A5B868;
  unk_254A5B878 = 0;
  xmmword_254A5B868 = 0uLL;
  byte_254A5B87F = v124 + 1;
  if (v124)
  {
LABEL_328:
    if (v123 >= 0)
      v129 = &qword_254A5B880;
    else
      v129 = (uint64_t *)qword_254A5B880;
    memmove(v126, v129, v124);
  }
  *(_WORD *)((char *)v126 + v124) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B868, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5B7D8);
LABEL_8:
  if (byte_254A5B87F < 0)
  {
    sub_20E860C04(&v148, (void *)xmmword_254A5B868, *((unint64_t *)&xmmword_254A5B868 + 1));
  }
  else
  {
    v148 = xmmword_254A5B868;
    v149 = unk_254A5B878;
  }
  v7 = HIBYTE(v149);
  if (v149 >= 0)
  {
    v8 = &v148;
  }
  else
  {
    v7 = *((_QWORD *)&v148 + 1);
    v8 = (__int128 *)v148;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        v142[0] = (void *)v5;
        LODWORD(v142[1]) = 4;
        if (SHIBYTE(v151) < 0)
        {
          sub_20E860C04(&v143, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v143 = __dst;
          v144 = v151;
        }
        if (*(char *)(v3 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
        }
        else
        {
          v122 = *(_OWORD *)(v3 + 32);
          *(_QWORD *)v146 = *(_QWORD *)(v3 + 48);
          __p = v122;
        }
        sub_20EBC4954();
        if (byte_254A5B99F < 0)
        {
          sub_20E860C04(&v146[8], (void *)xmmword_254A5B988, *((unint64_t *)&xmmword_254A5B988 + 1));
        }
        else
        {
          *(_OWORD *)&v146[8] = xmmword_254A5B988;
          v147 = unk_254A5B998;
        }
        v13 = v135;
        if ((unint64_t)v135 < v136)
          goto LABEL_34;
        goto LABEL_37;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  v142[0] = (void *)v5;
  LODWORD(v142[1]) = 2;
  if (SHIBYTE(v151) < 0)
  {
    sub_20E860C04(&v143, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v143 = __dst;
    v144 = v151;
  }
  if (*(char *)(v3 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v3 + 32);
    *(_QWORD *)v146 = *(_QWORD *)(v3 + 48);
    __p = v12;
  }
  sub_20EBC4954();
  if (byte_254A5B99F < 0)
  {
    sub_20E860C04(&v146[8], (void *)xmmword_254A5B988, *((unint64_t *)&xmmword_254A5B988 + 1));
  }
  else
  {
    *(_OWORD *)&v146[8] = xmmword_254A5B988;
    v147 = unk_254A5B998;
  }
  v13 = v135;
  if ((unint64_t)v135 >= v136)
  {
LABEL_37:
    v135 = sub_20EBA558C((char **)&v134, (uint64_t)v142);
    if (SHIBYTE(v147) < 0)
    {
      operator delete(*(void **)&v146[8]);
      if ((v146[7] & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
LABEL_35:
    operator delete((void *)__p);
    if ((SHIBYTE(v144) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_36;
  }
LABEL_34:
  v14 = v142[0];
  *((_DWORD *)v13 + 2) = v142[1];
  *(_QWORD *)v13 = v14;
  v15 = v143;
  *((_QWORD *)v13 + 4) = v144;
  *((_OWORD *)v13 + 1) = v15;
  v144 = 0;
  v143 = 0uLL;
  v16 = *(_QWORD *)v146;
  *(_OWORD *)(v13 + 40) = __p;
  *((_QWORD *)v13 + 7) = v16;
  *(_QWORD *)v146 = 0;
  __p = 0uLL;
  v17 = *(_OWORD *)&v146[8];
  *((_QWORD *)v13 + 10) = v147;
  *((_OWORD *)v13 + 4) = v17;
  *(_QWORD *)&v146[8] = 0;
  *(_QWORD *)&v146[16] = 0;
  v147 = 0;
  v135 = v13 + 88;
  if ((v146[7] & 0x80000000) != 0)
    goto LABEL_35;
LABEL_39:
  if (SHIBYTE(v144) < 0)
LABEL_36:
    operator delete((void *)v143);
LABEL_40:
  v18 = sub_20EBA4AA4();
  if (*((char *)v18 + 23) < 0)
  {
    sub_20E860C04(v140, (void *)*v18, v18[1]);
  }
  else
  {
    v19 = *(_OWORD *)v18;
    v141 = v18[2];
    *(_OWORD *)v140 = v19;
  }
  v20 = HIBYTE(v141);
  if (v141 >= 0)
  {
    v21 = v140;
  }
  else
  {
    v20 = (uint64_t)v140[1];
    v21 = (void **)v140[0];
  }
  if (v20 >= 18)
  {
    v22 = (char *)v21 + v20;
    v23 = v21;
    do
    {
      v24 = (char *)memchr(v23, 67, v20 - 17);
      if (!v24)
        break;
      if (*(_QWORD *)v24 == 0x456C656E6E616843
        && *((_QWORD *)v24 + 1) == 0x696F763C726F7272
        && *((_WORD *)v24 + 8) == 15972)
      {
        if (v24 != v22 && v24 - (char *)v21 != -1)
          goto LABEL_84;
        break;
      }
      v23 = (void **)(v24 + 1);
      v20 = v22 - (char *)v23;
    }
    while (v22 - (char *)v23 >= 18);
  }
  v142[0] = (void *)(v5 + 1);
  LODWORD(v142[1]) = 3;
  v27 = SHIBYTE(v151);
  if (v151 >= 0)
    v28 = HIBYTE(v151);
  else
    v28 = *((_QWORD *)&__dst + 1);
  v29 = v28 + 6;
  if (v28 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v143 + 1) = v28 + 6;
    v144 = v32 | 0x8000000000000000;
    *(_QWORD *)&v143 = v30;
  }
  else
  {
    v144 = 0;
    v143 = 0uLL;
    v30 = &v143;
    HIBYTE(v144) = v28 + 6;
    if (!v28)
      goto LABEL_76;
  }
  if (v27 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v30, p_dst, v28);
LABEL_76:
  strcpy((char *)v30 + v28, ".Error");
  *(_WORD *)&v146[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v147) = 0;
  v34 = v135;
  if ((unint64_t)v135 >= v136)
  {
    v135 = sub_20EBA558C((char **)&v134, (uint64_t)v142);
    if (SHIBYTE(v147) < 0)
    {
      operator delete(*(void **)&v146[8]);
      if ((v146[7] & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
LABEL_78:
    operator delete((void *)__p);
    if (SHIBYTE(v144) < 0)
      goto LABEL_79;
    goto LABEL_84;
  }
  v35 = v142[0];
  *((_DWORD *)v135 + 2) = v142[1];
  *(_QWORD *)v34 = v35;
  v36 = v143;
  *((_QWORD *)v34 + 4) = v144;
  *((_OWORD *)v34 + 1) = v36;
  v144 = 0;
  v143 = 0uLL;
  v37 = *(_QWORD *)v146;
  *(_OWORD *)(v34 + 40) = __p;
  *((_QWORD *)v34 + 7) = v37;
  *(_QWORD *)v146 = 0;
  __p = 0uLL;
  v38 = *(_OWORD *)&v146[8];
  *((_QWORD *)v34 + 10) = v147;
  *((_OWORD *)v34 + 4) = v38;
  *(_QWORD *)&v146[8] = 0;
  *(_QWORD *)&v146[16] = 0;
  v147 = 0;
  v135 = v34 + 88;
  if ((v146[7] & 0x80000000) != 0)
    goto LABEL_78;
LABEL_83:
  if (SHIBYTE(v144) < 0)
  {
LABEL_79:
    operator delete((void *)v143);
    v39 = *(std::__shared_weak_count **)(v3 + 136);
    if (!v39)
      goto LABEL_88;
    goto LABEL_85;
  }
LABEL_84:
  v39 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v39)
  {
LABEL_88:
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v43 = 0;
    goto LABEL_103;
  }
LABEL_85:
  v40 = std::__shared_weak_count::lock(v39);
  v142[1] = v40;
  if (!v40)
    goto LABEL_88;
  v41 = v40;
  v42 = *(void **)(v3 + 128);
  v142[0] = v42;
  if (v42)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v42 + 24))(&v137);
  }
  else
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
  }
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v45 = __ldaxr(p_shared_owners);
  while (__stlxr(v45 - 1, p_shared_owners));
  if (v45)
  {
    v43 = v137;
    v46 = v138;
    if (v137 == v138)
      goto LABEL_103;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v43 = v137;
    v46 = v138;
    if (v137 == v138)
      goto LABEL_103;
  }
  do
  {
    v142[0] = (void *)v5;
    v142[1] = *v43;
    v144 = 0;
    v143 = 0uLL;
    v48 = v132;
    if ((unint64_t)v132 < v133)
    {
      *(_OWORD *)v132 = *(_OWORD *)v142;
      v47 = v143;
      *((_QWORD *)v48 + 4) = v144;
      *((_OWORD *)v48 + 1) = v47;
      v132 = v48 + 40;
    }
    else
    {
      v132 = sub_20EBA5F8C(&v131, (uint64_t)v142);
      if (SHIBYTE(v144) < 0)
        operator delete((void *)v143);
    }
    ++v43;
  }
  while (v43 != v46);
  v43 = v137;
LABEL_103:
  if (v43)
  {
    v138 = v43;
    operator delete(v43);
  }
  v49 = *(std::__shared_weak_count **)(v3 + 136);
  if (!v49 || (v50 = std::__shared_weak_count::lock(v49), (v142[1] = v50) == 0))
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v53 = 0;
    goto LABEL_124;
  }
  v51 = v50;
  v52 = *(void **)(v3 + 128);
  v142[0] = v52;
  if (v52)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v52 + 32))(&v137);
  }
  else
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
  }
  v54 = (unint64_t *)&v51->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
    v53 = v137;
    v56 = v138;
    if (v137 == v138)
      goto LABEL_124;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v53 = v137;
    v56 = v138;
    if (v137 == v138)
      goto LABEL_124;
  }
  v57 = (void *)(v5 + 1);
  do
  {
    v142[0] = v57;
    v142[1] = *v53;
    v144 = 0;
    v143 = 0uLL;
    v59 = v132;
    if ((unint64_t)v132 < v133)
    {
      *(_OWORD *)v132 = *(_OWORD *)v142;
      v58 = v143;
      *((_QWORD *)v59 + 4) = v144;
      *((_OWORD *)v59 + 1) = v58;
      v132 = v59 + 40;
    }
    else
    {
      v132 = sub_20EBA5F8C(&v131, (uint64_t)v142);
      if (SHIBYTE(v144) < 0)
        operator delete((void *)v143);
    }
    ++v53;
  }
  while (v53 != v56);
  v53 = v137;
LABEL_124:
  if (v53)
  {
    v138 = v53;
    operator delete(v53);
  }
  if (SHIBYTE(v141) < 0)
  {
    operator delete(v140[0]);
    if ((SHIBYTE(v149) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v151) & 0x80000000) == 0)
        goto LABEL_129;
LABEL_133:
      operator delete((void *)__dst);
      if ((*(char *)(v3 + 199) & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_134;
    }
  }
  else if ((SHIBYTE(v149) & 0x80000000) == 0)
  {
    goto LABEL_128;
  }
  operator delete((void *)v148);
  if (SHIBYTE(v151) < 0)
    goto LABEL_133;
LABEL_129:
  if ((*(char *)(v3 + 199) & 0x80000000) == 0)
  {
LABEL_130:
    __dst = *(_OWORD *)(v3 + 176);
    v151 = *(_QWORD *)(v3 + 192);
    goto LABEL_135;
  }
LABEL_134:
  sub_20E860C04(&__dst, *(void **)(v3 + 176), *(_QWORD *)(v3 + 184));
LABEL_135:
  v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 264) + 48))(*(_QWORD *)(v3 + 264));
  v61 = sub_20EBA60E8();
  if (*((char *)v61 + 23) < 0)
  {
    sub_20E860C04(&v148, (void *)*v61, v61[1]);
  }
  else
  {
    v62 = *(_OWORD *)v61;
    v149 = v61[2];
    v148 = v62;
  }
  v63 = HIBYTE(v149);
  if (v149 >= 0)
  {
    v64 = &v148;
  }
  else
  {
    v63 = *((_QWORD *)&v148 + 1);
    v64 = (__int128 *)v148;
  }
  if (v63 >= 4)
  {
    v65 = (char *)v64 + v63;
    v66 = v64;
    do
    {
      v67 = (char *)memchr(v66, 118, v63 - 3);
      if (!v67)
        break;
      if (*(_DWORD *)v67 == 1684631414)
      {
        if (v67 == v65 || v67 - (char *)v64 == -1)
          break;
        v142[0] = (void *)v60;
        LODWORD(v142[1]) = 4;
        if (SHIBYTE(v151) < 0)
        {
          sub_20E860C04(&v143, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v143 = __dst;
          v144 = v151;
        }
        if (*(char *)(v3 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v3 + 200);
          *(_QWORD *)v146 = *(_QWORD *)(v3 + 216);
        }
        sub_20EBC4B0C();
        if (byte_254A5B9E7 < 0)
        {
          sub_20E860C04(&v146[8], (void *)xmmword_254A5B9D0, *((unint64_t *)&xmmword_254A5B9D0 + 1));
        }
        else
        {
          *(_OWORD *)&v146[8] = xmmword_254A5B9D0;
          v147 = unk_254A5B9E0;
        }
        v68 = v135;
        if ((unint64_t)v135 < v136)
          goto LABEL_161;
        goto LABEL_164;
      }
      v66 = (__int128 *)(v67 + 1);
      v63 = v65 - (char *)v66;
    }
    while (v65 - (char *)v66 >= 4);
  }
  v142[0] = (void *)v60;
  LODWORD(v142[1]) = 2;
  if (SHIBYTE(v151) < 0)
  {
    sub_20E860C04(&v143, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v143 = __dst;
    v144 = v151;
  }
  if (*(char *)(v3 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v3 + 200);
    *(_QWORD *)v146 = *(_QWORD *)(v3 + 216);
  }
  sub_20EBC4B0C();
  if (byte_254A5B9E7 < 0)
  {
    sub_20E860C04(&v146[8], (void *)xmmword_254A5B9D0, *((unint64_t *)&xmmword_254A5B9D0 + 1));
  }
  else
  {
    *(_OWORD *)&v146[8] = xmmword_254A5B9D0;
    v147 = unk_254A5B9E0;
  }
  v68 = v135;
  if ((unint64_t)v135 >= v136)
  {
LABEL_164:
    v135 = sub_20EBA558C((char **)&v134, (uint64_t)v142);
    if (SHIBYTE(v147) < 0)
    {
      operator delete(*(void **)&v146[8]);
      if ((v146[7] & 0x80000000) == 0)
        goto LABEL_166;
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_166;
    }
LABEL_162:
    operator delete((void *)__p);
    if ((SHIBYTE(v144) & 0x80000000) == 0)
      goto LABEL_167;
    goto LABEL_163;
  }
LABEL_161:
  v69 = v142[0];
  *((_DWORD *)v68 + 2) = v142[1];
  *(_QWORD *)v68 = v69;
  v70 = v143;
  *((_QWORD *)v68 + 4) = v144;
  *((_OWORD *)v68 + 1) = v70;
  v144 = 0;
  v143 = 0uLL;
  v71 = *(_QWORD *)v146;
  *(_OWORD *)(v68 + 40) = __p;
  *((_QWORD *)v68 + 7) = v71;
  *(_QWORD *)v146 = 0;
  __p = 0uLL;
  v72 = *(_OWORD *)&v146[8];
  *((_QWORD *)v68 + 10) = v147;
  *((_OWORD *)v68 + 4) = v72;
  *(_QWORD *)&v146[8] = 0;
  *(_QWORD *)&v146[16] = 0;
  v147 = 0;
  v135 = v68 + 88;
  if ((v146[7] & 0x80000000) != 0)
    goto LABEL_162;
LABEL_166:
  if (SHIBYTE(v144) < 0)
LABEL_163:
    operator delete((void *)v143);
LABEL_167:
  v73 = sub_20EBA4AA4();
  if (*((char *)v73 + 23) < 0)
  {
    sub_20E860C04(v140, (void *)*v73, v73[1]);
  }
  else
  {
    v74 = *(_OWORD *)v73;
    v141 = v73[2];
    *(_OWORD *)v140 = v74;
  }
  v75 = HIBYTE(v141);
  if (v141 >= 0)
  {
    v76 = v140;
  }
  else
  {
    v75 = (uint64_t)v140[1];
    v76 = (void **)v140[0];
  }
  if (v75 >= 18)
  {
    v77 = (char *)v76 + v75;
    v78 = v76;
    do
    {
      v79 = (char *)memchr(v78, 67, v75 - 17);
      if (!v79)
        break;
      if (*(_QWORD *)v79 == 0x456C656E6E616843
        && *((_QWORD *)v79 + 1) == 0x696F763C726F7272
        && *((_WORD *)v79 + 8) == 15972)
      {
        if (v79 != v77 && v79 - (char *)v76 != -1)
          goto LABEL_211;
        break;
      }
      v78 = (void **)(v79 + 1);
      v75 = v77 - (char *)v78;
    }
    while (v77 - (char *)v78 >= 18);
  }
  v142[0] = (void *)(v60 + 1);
  LODWORD(v142[1]) = 3;
  v82 = SHIBYTE(v151);
  if (v151 >= 0)
    v83 = HIBYTE(v151);
  else
    v83 = *((_QWORD *)&__dst + 1);
  v84 = v83 + 6;
  if (v83 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v84 >= 0x17)
  {
    v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v86 = v84 | 7;
    v87 = v86 + 1;
    v85 = (__int128 *)operator new(v86 + 1);
    *((_QWORD *)&v143 + 1) = v83 + 6;
    v144 = v87 | 0x8000000000000000;
    *(_QWORD *)&v143 = v85;
  }
  else
  {
    v144 = 0;
    v143 = 0uLL;
    v85 = &v143;
    HIBYTE(v144) = v83 + 6;
    if (!v83)
      goto LABEL_203;
  }
  if (v82 >= 0)
    v88 = &__dst;
  else
    v88 = (__int128 *)__dst;
  memmove(v85, v88, v83);
LABEL_203:
  strcpy((char *)v85 + v83, ".Error");
  *(_WORD *)&v146[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v147) = 0;
  v89 = v135;
  if ((unint64_t)v135 >= v136)
  {
    v135 = sub_20EBA558C((char **)&v134, (uint64_t)v142);
    if (SHIBYTE(v147) < 0)
    {
      operator delete(*(void **)&v146[8]);
      if ((v146[7] & 0x80000000) == 0)
        goto LABEL_210;
    }
    else if ((v146[7] & 0x80000000) == 0)
    {
      goto LABEL_210;
    }
LABEL_205:
    operator delete((void *)__p);
    if (SHIBYTE(v144) < 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v90 = v142[0];
  *((_DWORD *)v135 + 2) = v142[1];
  *(_QWORD *)v89 = v90;
  v91 = v143;
  *((_QWORD *)v89 + 4) = v144;
  *((_OWORD *)v89 + 1) = v91;
  v144 = 0;
  v143 = 0uLL;
  v92 = *(_QWORD *)v146;
  *(_OWORD *)(v89 + 40) = __p;
  *((_QWORD *)v89 + 7) = v92;
  *(_QWORD *)v146 = 0;
  __p = 0uLL;
  v93 = *(_OWORD *)&v146[8];
  *((_QWORD *)v89 + 10) = v147;
  *((_OWORD *)v89 + 4) = v93;
  *(_QWORD *)&v146[8] = 0;
  *(_QWORD *)&v146[16] = 0;
  v147 = 0;
  v135 = v89 + 88;
  if ((v146[7] & 0x80000000) != 0)
    goto LABEL_205;
LABEL_210:
  if (SHIBYTE(v144) < 0)
  {
LABEL_206:
    operator delete((void *)v143);
    v94 = *(std::__shared_weak_count **)(v3 + 304);
    if (!v94)
      goto LABEL_215;
    goto LABEL_212;
  }
LABEL_211:
  v94 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v94)
  {
LABEL_215:
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v98 = 0;
    goto LABEL_232;
  }
LABEL_212:
  v95 = std::__shared_weak_count::lock(v94);
  v142[1] = v95;
  if (!v95)
    goto LABEL_215;
  v96 = v95;
  v97 = *(void **)(v3 + 296);
  v142[0] = v97;
  if (v97)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v97 + 24))(&v137);
  }
  else
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
  }
  v99 = (unint64_t *)&v96->__shared_owners_;
  do
    v100 = __ldaxr(v99);
  while (__stlxr(v100 - 1, v99));
  if (v100)
  {
    v98 = v137;
    v101 = v138;
    if (v137 == v138)
      goto LABEL_232;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
    v98 = v137;
    v101 = v138;
    if (v137 == v138)
      goto LABEL_232;
  }
  do
  {
    v142[0] = (void *)v60;
    v142[1] = *v98;
    v144 = 0;
    v143 = 0uLL;
    v103 = v132;
    if ((unint64_t)v132 < v133)
    {
      *(_OWORD *)v132 = *(_OWORD *)v142;
      v102 = v143;
      *((_QWORD *)v103 + 4) = v144;
      *((_OWORD *)v103 + 1) = v102;
      v132 = v103 + 40;
    }
    else
    {
      v132 = sub_20EBA5F8C(&v131, (uint64_t)v142);
      if (SHIBYTE(v144) < 0)
        operator delete((void *)v143);
    }
    ++v98;
  }
  while (v98 != v101);
  v98 = v137;
LABEL_232:
  if (v98)
  {
    v138 = v98;
    operator delete(v98);
  }
  v104 = *(std::__shared_weak_count **)(v3 + 304);
  if (!v104 || (v105 = std::__shared_weak_count::lock(v104), (v142[1] = v105) == 0))
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v108 = 0;
    goto LABEL_253;
  }
  v106 = v105;
  v107 = *(void **)(v3 + 296);
  v142[0] = v107;
  if (v107)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v107 + 32))(&v137);
  }
  else
  {
    v137 = 0;
    v138 = 0;
    v139 = 0;
  }
  v109 = (unint64_t *)&v106->__shared_owners_;
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (v110)
  {
    v108 = v137;
    v111 = v138;
    if (v137 == v138)
      goto LABEL_253;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
    v108 = v137;
    v111 = v138;
    if (v137 == v138)
      goto LABEL_253;
  }
  v112 = (void *)(v60 + 1);
  do
  {
    v142[0] = v112;
    v142[1] = *v108;
    v144 = 0;
    v143 = 0uLL;
    v114 = v132;
    if ((unint64_t)v132 < v133)
    {
      *(_OWORD *)v132 = *(_OWORD *)v142;
      v113 = v143;
      *((_QWORD *)v114 + 4) = v144;
      *((_OWORD *)v114 + 1) = v113;
      v132 = v114 + 40;
    }
    else
    {
      v132 = sub_20EBA5F8C(&v131, (uint64_t)v142);
      if (SHIBYTE(v144) < 0)
        operator delete((void *)v143);
    }
    ++v108;
  }
  while (v108 != v111);
  v108 = v137;
LABEL_253:
  if (v108)
  {
    v138 = v108;
    operator delete(v108);
  }
  if (SHIBYTE(v141) < 0)
  {
    operator delete(v140[0]);
    if ((SHIBYTE(v149) & 0x80000000) == 0)
    {
LABEL_257:
      if ((SHIBYTE(v151) & 0x80000000) == 0)
        goto LABEL_258;
LABEL_262:
      operator delete((void *)__dst);
      if ((*(char *)(v2 + 39) & 0x80000000) == 0)
        goto LABEL_259;
      goto LABEL_263;
    }
  }
  else if ((SHIBYTE(v149) & 0x80000000) == 0)
  {
    goto LABEL_257;
  }
  operator delete((void *)v148);
  if (SHIBYTE(v151) < 0)
    goto LABEL_262;
LABEL_258:
  if ((*(char *)(v2 + 39) & 0x80000000) == 0)
  {
LABEL_259:
    *(_OWORD *)v142 = *(_OWORD *)(v2 + 16);
    *(_QWORD *)&v143 = *(_QWORD *)(v2 + 32);
    goto LABEL_264;
  }
LABEL_263:
  sub_20E860C04(v142, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
LABEL_264:
  v115 = *(_QWORD *)(v2 + 64) != 0;
  if (*(char *)(v2 + 63) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  else
  {
    __dst = *(_OWORD *)(v2 + 40);
    v151 = *(_QWORD *)(v2 + 56);
  }
  sub_20EBA690C((uint64_t)v152, (__int128 *)v142, v115, (uint64_t *)&v134, (uint64_t *)&v131, &__dst);
  if ((SHIBYTE(v151) & 0x80000000) == 0)
  {
    if ((SBYTE7(v143) & 0x80000000) == 0)
      goto LABEL_269;
LABEL_279:
    operator delete(v142[0]);
    v116 = (char *)v131;
    if (v131)
      goto LABEL_270;
LABEL_280:
    v118 = (char *)v134;
    if (v134)
      goto LABEL_281;
    goto LABEL_293;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v143) < 0)
    goto LABEL_279;
LABEL_269:
  v116 = (char *)v131;
  if (!v131)
    goto LABEL_280;
LABEL_270:
  v117 = v132;
  if (v132 == v116)
  {
    v132 = v116;
    operator delete(v116);
    v118 = (char *)v134;
    if (!v134)
      goto LABEL_293;
LABEL_281:
    v119 = v135;
    v120 = v118;
    if (v135 == v118)
    {
LABEL_292:
      v135 = v118;
      operator delete(v120);
      goto LABEL_293;
    }
    while (1)
    {
      while (*(v119 - 1) < 0)
      {
        operator delete(*((void **)v119 - 3));
        if (*(v119 - 25) < 0)
          goto LABEL_283;
LABEL_289:
        if ((*(v119 - 49) & 0x80000000) == 0)
          goto LABEL_284;
LABEL_290:
        operator delete(*((void **)v119 - 9));
        v119 -= 88;
        if (v119 == v118)
        {
LABEL_291:
          v120 = v134;
          goto LABEL_292;
        }
      }
      if ((*(v119 - 25) & 0x80000000) == 0)
        goto LABEL_289;
LABEL_283:
      operator delete(*((void **)v119 - 6));
      if (*(v119 - 49) < 0)
        goto LABEL_290;
LABEL_284:
      v119 -= 88;
      if (v119 == v118)
        goto LABEL_291;
    }
  }
  do
  {
    if (*(v117 - 1) < 0)
      operator delete(*((void **)v117 - 3));
    v117 -= 40;
  }
  while (v117 != v116);
  v132 = v116;
  operator delete(v131);
  v118 = (char *)v134;
  if (v134)
    goto LABEL_281;
LABEL_293:
  sub_20EBA4824(a2, (uint64_t)v152, 1uLL);
  return sub_20EBA8C18((uint64_t)v152);
}

void sub_20EBC3A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  __cxa_guard_abort(&qword_254A5B7D8);
  if (a56 < 0)
    operator delete(__p);
  sub_20EBA4920(&a10);
  sub_20EBA4990(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC3C78(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 64))(*(_QWORD *)(v1 + 72));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 240) + 64))(*(_QWORD *)(v1 + 240));
}

uint64_t sub_20EBC3CB4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C7BF8;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBC3D3C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C7BF8;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20EBC3DC8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B7E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B7E0))
  {
    sub_20EBC3F48();
    v1 = byte_254A5B8AF;
    if (byte_254A5B8AF >= 0)
      v2 = byte_254A5B8AF;
    else
      v2 = *((_QWORD *)&xmmword_254A5B898 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5B888 = v2 + 6;
      unk_254A5B890 = v6 | 0x8000000000000000;
      qword_254A5B880 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5B888 = 0;
      unk_254A5B890 = 0;
      qword_254A5B880 = 0x2074736E6F63;
      byte_254A5B897 = v2 + 6;
      v4 = (char *)&qword_254A5B880 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B880, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5B7E0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5B898;
    else
      v8 = (__int128 *)xmmword_254A5B898;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBC3F30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B7E0);
  _Unwind_Resume(a1);
}

void sub_20EBC3F48()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B7E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B7E8))
  {
    sub_20EBC4000();
    if (byte_254A5B8C7 < 0)
    {
      sub_20E860C04(&xmmword_254A5B898, (void *)qword_254A5B8B0, unk_254A5B8B8);
    }
    else
    {
      xmmword_254A5B898 = *(_OWORD *)&qword_254A5B8B0;
      unk_254A5B8A8 = unk_254A5B8C0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B898, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B7E8);
  }
}

void sub_20EBC3FE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B7E8);
  _Unwind_Resume(a1);
}

void sub_20EBC4000()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B7F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B7F0))
  {
    sub_20EBC42BC(__p);
    sub_20EBC40D4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5B8B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B7F0);
  }
}

void sub_20EBC4094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B7F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B7F0);
  _Unwind_Resume(a1);
}

void sub_20EBC40D4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B7F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B7F8))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EBC4498((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B8C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B7F8);
  }
  if (byte_254A5B8DF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B8C8, *((unint64_t *)&xmmword_254A5B8C8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B8C8;
    v13 = unk_254A5B8D8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5B8B0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBC424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B7F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B7F8);
  _Unwind_Resume(a1);
}

void sub_20EBC4290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBC42BC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5B820);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B820))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<std::vector<cv3d::vio::DenseDepthStore>>>]", qword_254A5B940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B940, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B820);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5B828);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B828))
  {
    v5 = sub_20E8A2354(qword_254A5B940, "<", 0);
    sub_20E89FC08(qword_254A5B940, 0, v5, qword_254A5B958);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B958, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B828);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5B830);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B830))
  {
    sub_21023CD84((uint64_t)qword_254A5B958, (uint64_t)&xmmword_254A5B970);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B970, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B830);
  }
  if (byte_254A5B987 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B970, *((unint64_t *)&xmmword_254A5B970 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B970;
    __dst[2] = unk_254A5B980;
  }
}

void sub_20EBC4450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B830);
  _Unwind_Resume(a1);
}

void sub_20EBC4468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B828);
  _Unwind_Resume(a1);
}

void sub_20EBC4480(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B820);
  _Unwind_Resume(a1);
}

void sub_20EBC4498(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B800);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B800))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EBC4680((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B8E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B800);
  }
  if (byte_254A5B8F7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B8E0, *((unint64_t *)&xmmword_254A5B8E0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B8E0;
    v13 = unk_254A5B8F0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5B8C8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBC4610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5B800);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5B800);
  _Unwind_Resume(a1);
}

void sub_20EBC4654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBC4680(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5B808);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B808))
  {
    sub_20EBC4854();
    if (byte_254A5B93F < 0)
    {
      sub_20E860C04(&xmmword_254A5B8F8, (void *)xmmword_254A5B928, *((unint64_t *)&xmmword_254A5B928 + 1));
    }
    else
    {
      xmmword_254A5B8F8 = xmmword_254A5B928;
      unk_254A5B908 = unk_254A5B938;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B8F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B808);
  }
  if (byte_254A5B90F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5B8F8, *((unint64_t *)&xmmword_254A5B8F8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5B8F8;
    v11 = unk_254A5B908;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5B8E0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBC480C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B808);
  _Unwind_Resume(a1);
}

void sub_20EBC4828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBC4854()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B810);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B810))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::DenseDepthStore]", qword_254A5B910);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B910, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B810);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B818);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B818))
    {
      sub_21023CD84((uint64_t)qword_254A5B910, (uint64_t)&xmmword_254A5B928);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B928, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B818);
    }
  }
}

void sub_20EBC4924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B818);
  _Unwind_Resume(a1);
}

void sub_20EBC493C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B810);
  _Unwind_Resume(a1);
}

void sub_20EBC4954()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B838);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B838))
  {
    sub_20EBC4A0C();
    if (byte_254A5B9CF < 0)
    {
      sub_20E860C04(&xmmword_254A5B988, (void *)xmmword_254A5B9B8, *((unint64_t *)&xmmword_254A5B9B8 + 1));
    }
    else
    {
      xmmword_254A5B988 = xmmword_254A5B9B8;
      unk_254A5B998 = unk_254A5B9C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B988, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B838);
  }
}

void sub_20EBC49F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B838);
  _Unwind_Resume(a1);
}

void sub_20EBC4A0C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B840);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B840))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<std::vector<cv3d::vio::DenseDepthStore>> (const std::shared_ptr<cv3d::vio::feature_detection::VIODepthFeatureEvent> &)]", qword_254A5B9A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B840);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B848);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B848))
    {
      sub_21023CD84((uint64_t)qword_254A5B9A0, (uint64_t)&xmmword_254A5B9B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B9B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B848);
    }
  }
}

void sub_20EBC4ADC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B848);
  _Unwind_Resume(a1);
}

void sub_20EBC4AF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B840);
  _Unwind_Resume(a1);
}

void sub_20EBC4B0C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B850))
  {
    sub_20EBC4BC4();
    if (byte_254A5BA17 < 0)
    {
      sub_20E860C04(&xmmword_254A5B9D0, (void *)xmmword_254A5BA00, *((unint64_t *)&xmmword_254A5BA00 + 1));
    }
    else
    {
      xmmword_254A5B9D0 = xmmword_254A5BA00;
      unk_254A5B9E0 = unk_254A5BA10;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5B9D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B850);
  }
}

void sub_20EBC4BAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B850);
  _Unwind_Resume(a1);
}

void sub_20EBC4BC4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5B858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5B858))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<cv3d::vio::cv_types::JasperPointCloudWithPose> &)]", qword_254A5B9E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5B9E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5B858);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5B860);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5B860))
    {
      sub_21023CD84((uint64_t)qword_254A5B9E8, (uint64_t)&xmmword_254A5BA00);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5BA00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5B860);
    }
  }
}

void sub_20EBC4C94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B860);
  _Unwind_Resume(a1);
}

void sub_20EBC4CAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5B858);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC4CC4(uint64_t a1, unsigned int **a2, int a3)
{
  _QWORD *v5;
  char *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  void *v139;
  void *v140;
  void *v141;
  char v142;
  char v143;
  uint64_t v144;
  char *v145;
  std::__shared_weak_count *v146;
  void *__dst[7];
  __int128 v148;
  __int128 v149;
  uint64_t (**v150)();
  __int128 v151;
  uint64_t v152;
  uint64_t (**v153)();
  __int128 v154;
  uint64_t (**v155)();
  __int128 v156;
  char *v157;
  std::__shared_weak_count *v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  _QWORD v161[7];
  __int128 v162;
  __int128 v163;
  uint64_t (**v164)();
  __int128 v165;
  uint64_t v166;
  uint64_t (**v167)();
  __int128 v168;
  uint64_t (**v169)();
  __int128 v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  char *v173;
  std::__shared_weak_count *v174;
  void *v175[4];
  void *__p[3];
  uint64_t v177;
  std::__shared_weak_count *v178;
  _QWORD *v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _QWORD v185[2];
  _QWORD v186[2];
  _QWORD v187[2];
  _QWORD v188[5];

  v188[2] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = a3;
  if (a3)
  {
    v161[0] = 0xC0000000C0;
    LODWORD(v161[1]) = 45;
    *(_OWORD *)&v161[2] = xmmword_21031CD60;
    LOBYTE(v161[4]) = 0;
    HIDWORD(v161[4]) = 1061997773;
    v5 = (_QWORD *)operator new();
    sub_20E89D600(v5, (uint64_t)a2, (__int128 *)v161);
  }
  else
  {
    v5 = 0;
  }
  v6 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C9C7C40;
  v161[0] = v5;
  sub_20EBBF15C((uint64_t)(v6 + 24), a2, v161);
  if (v161[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v161[0] + 8))(v161[0]);
  v145 = v6 + 24;
  v146 = (std::__shared_weak_count *)v6;
  *(_QWORD *)(a1 + 8) = &off_24C9C7C90;
  if (v6[159] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 16), *((void **)v6 + 17), *((_QWORD *)v6 + 18));
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v6 + 136);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)v6 + 19);
  }
  v144 = a1;
  if (v6[183] < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 40), *((void **)v6 + 20), *((_QWORD *)v6 + 21));
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *((_OWORD *)v6 + 10);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)v6 + 22);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (std::__shared_weak_count *)operator new(0x58uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  v10 = &v8[1].__vftable;
  MEMORY[0x212BC5E10](&v8[1]);
  v171 = &v8[1].__vftable;
  v172 = v8;
  v159 = &v8[1].__vftable;
  v160 = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v157 = v6 + 24;
  v158 = (std::__shared_weak_count *)v6;
  do
    v12 = __ldxr(v7);
  while (__stxr(v12 + 1, v7));
  if (v6[55] < 0)
  {
    sub_20E860C04(__dst, *((void **)v6 + 4), *((_QWORD *)v6 + 5));
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v6 + 2);
    __dst[2] = *((void **)v6 + 6);
  }
  if (v6[79] < 0)
  {
    sub_20E860C04(__p, *((void **)v6 + 7), *((_QWORD *)v6 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v6 + 56);
    __p[2] = *((void **)v6 + 9);
  }
  v159 = 0;
  v160 = 0;
  v173 = v6 + 24;
  v174 = (std::__shared_weak_count *)v6;
  do
    v13 = __ldxr(v7);
  while (__stxr(v13 + 1, v7));
  v140 = __dst[0];
  *(void **)&v182 = __dst[1];
  *(void **)((char *)&v182 + 7) = *(void **)((char *)&__dst[1] + 7);
  v142 = HIBYTE(__dst[2]);
  memset(__dst, 0, 24);
  v14 = __p[0];
  v188[0] = __p[1];
  *(void **)((char *)v188 + 7) = *(void **)((char *)&__p[1] + 7);
  v15 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v178 = 0;
  v177 = 0;
  *(_QWORD *)&v183 = 0;
  *(_QWORD *)((char *)&v183 + 7) = 0;
  *(_QWORD *)&v181 = v8 + 1;
  *((_QWORD *)&v181 + 1) = v8;
  v179 = 0;
  v180 = 0;
  v16 = (char *)operator new();
  *(_QWORD *)&v184 = v183;
  *(_QWORD *)((char *)&v184 + 7) = *(_QWORD *)((char *)&v183 + 7);
  *(_QWORD *)&v183 = 0;
  *(_QWORD *)((char *)&v183 + 7) = 0;
  v181 = 0uLL;
  v16[8] = 1;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *(_QWORD *)v16 = &off_24C9C7E00;
  *((_QWORD *)v16 + 2) = &unk_24C9C7E78;
  *((_QWORD *)v16 + 3) = &unk_24C9C7EB8;
  v17 = v184;
  *(_QWORD *)(v16 + 63) = *(_QWORD *)((char *)&v184 + 7);
  *((_QWORD *)v16 + 6) = 0;
  *((_QWORD *)v16 + 7) = v17;
  v16[71] = 0;
  *(_QWORD *)&v184 = 0;
  *(_QWORD *)((char *)&v184 + 7) = 0;
  *((_QWORD *)v16 + 9) = v10;
  *((_QWORD *)v16 + 10) = v8;
  v175[1] = 0;
  v175[0] = 0;
  v18 = (_QWORD *)operator new();
  *v18 = &off_24C9C7FB0;
  v18[1] = v6 + 24;
  v18[2] = v6;
  v174 = 0;
  v173 = 0;
  *((_QWORD *)v16 + 11) = v18;
  *((_QWORD *)v16 + 12) = v16 + 96;
  *((_QWORD *)v16 + 13) = v16 + 96;
  *((_QWORD *)v16 + 14) = 0;
  *((_QWORD *)v16 + 15) = v16 + 120;
  *((_QWORD *)v16 + 16) = v16 + 120;
  *((_QWORD *)v16 + 17) = 0;
  v19 = (std::__shared_weak_count *)operator new();
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C8000;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v16 + 5);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_37;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_37:
  v29 = (std::__shared_weak_count *)v175[1];
  if (v175[1])
  {
    v30 = (unint64_t *)((char *)v175[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v175[0] = v16;
  v175[1] = v19;
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v161[0] = &off_24C9C7CC0;
  v161[1] = v140;
  v161[2] = v182;
  *(_QWORD *)((char *)&v161[2] + 7) = *(_QWORD *)((char *)&v182 + 7);
  HIBYTE(v161[3]) = v142;
  *(_QWORD *)&v182 = 0;
  *(_QWORD *)((char *)&v182 + 7) = 0;
  v161[4] = v14;
  v161[5] = v188[0];
  *(_QWORD *)((char *)&v161[5] + 7) = *(_QWORD *)((char *)v188 + 7);
  HIBYTE(v161[6]) = v15;
  v188[0] = 0;
  *(_QWORD *)((char *)v188 + 7) = 0;
  v162 = 0uLL;
  v181 = 0uLL;
  v35 = v175[0];
  v36 = (char *)v175[1];
  v163 = *(_OWORD *)v175;
  v175[0] = 0;
  v175[1] = 0;
  if (*((_QWORD *)&v163 + 1))
  {
    v37 = (unint64_t *)(v36 + 16);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v164 = &off_24C9C7CF0;
  v39 = (_QWORD *)operator new();
  *v39 = &off_24C9C8050;
  v39[1] = v35;
  v39[2] = v36;
  *(_QWORD *)&v165 = v39;
  v41 = *((_QWORD *)&v163 + 1);
  v40 = v163;
  if (!*((_QWORD *)&v163 + 1))
  {
    *((_QWORD *)&v165 + 1) = v163;
    v166 = 0;
    if ((_QWORD)v163)
      v45 = v163 + 16;
    else
      v45 = 0;
    goto LABEL_67;
  }
  v42 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 16);
  do
    v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  v44 = *((_QWORD *)&v163 + 1);
  *((_QWORD *)&v165 + 1) = v40;
  v166 = v41;
  if ((_QWORD)v163)
    v45 = v163 + 16;
  else
    v45 = 0;
  if (!*((_QWORD *)&v163 + 1))
  {
    v40 = v163;
LABEL_67:
    v48 = 0;
    v167 = &off_24C9C7D28;
    v168 = v45;
    goto LABEL_68;
  }
  v46 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 16);
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  v48 = *((_QWORD *)&v163 + 1);
  v40 = v163;
  v167 = &off_24C9C7D28;
  *(_QWORD *)&v168 = v45;
  *((_QWORD *)&v168 + 1) = v44;
  if (*((_QWORD *)&v163 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 16);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
LABEL_68:
  if (v40)
    v51 = v40 + 24;
  else
    v51 = 0;
  v169 = &off_24C9B2310;
  *(_QWORD *)&v170 = v51;
  *((_QWORD *)&v170 + 1) = v48;
  v52 = v180;
  if (v180)
  {
    v53 = (unint64_t *)&v180->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v174;
  if (v174)
  {
    v56 = (unint64_t *)&v174->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v178;
  if (!v178)
    goto LABEL_85;
  v59 = (unint64_t *)&v178->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_86:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_87;
      goto LABEL_91;
    }
  }
  else
  {
LABEL_85:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_86;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if (v157)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(__dst[0]);
  if (v157)
    goto LABEL_93;
LABEL_92:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_93:
  *(_QWORD *)&v183 = v8 + 1;
  *((_QWORD *)&v183 + 1) = v8;
  do
    v61 = __ldxr(p_shared_owners);
  while (__stxr(v61 + 1, p_shared_owners));
  if (v145)
    v62 = v145 + 56;
  else
    v62 = 0;
  *(_QWORD *)&v182 = v62;
  *((_QWORD *)&v182 + 1) = v146;
  if (v146)
  {
    v63 = (unint64_t *)&v146->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  if (v62[31] < 0)
  {
    sub_20E860C04(__p, *((void **)v62 + 1), *((_QWORD *)v62 + 2));
  }
  else
  {
    v65 = *(_OWORD *)(v62 + 8);
    __p[2] = *((void **)v62 + 3);
    *(_OWORD *)__p = v65;
  }
  if (v145[111] < 0)
  {
    sub_20E860C04(v175, *((void **)v145 + 11), *((_QWORD *)v145 + 12));
  }
  else
  {
    *(_OWORD *)v175 = *(_OWORD *)(v145 + 88);
    v175[2] = *((void **)v145 + 13);
  }
  v183 = 0uLL;
  *(_QWORD *)&v184 = v62;
  *((_QWORD *)&v184 + 1) = v146;
  if (v146)
  {
    v66 = (unint64_t *)&v146->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = __p[0];
  v186[0] = __p[1];
  *(void **)((char *)v186 + 7) = *(void **)((char *)&__p[1] + 7);
  v143 = HIBYTE(__p[2]);
  memset(__p, 0, sizeof(__p));
  v139 = v175[0];
  v141 = v68;
  v185[0] = v175[1];
  *(void **)((char *)v185 + 7) = *(void **)((char *)&v175[1] + 7);
  v69 = HIBYTE(v175[2]);
  memset(v175, 0, 24);
  v174 = 0;
  v173 = 0;
  v187[0] = 0;
  *(_QWORD *)((char *)v187 + 7) = 0;
  v179 = &v8[1].__vftable;
  v180 = v8;
  v178 = 0;
  v177 = 0;
  v70 = operator new();
  v188[0] = v187[0];
  *(_QWORD *)((char *)v188 + 7) = *(_QWORD *)((char *)v187 + 7);
  v187[0] = 0;
  *(_QWORD *)((char *)v187 + 7) = 0;
  v179 = 0;
  v180 = 0;
  *(_BYTE *)(v70 + 8) = 1;
  *(_QWORD *)(v70 + 32) = 0;
  *(_QWORD *)(v70 + 40) = 0;
  *(_QWORD *)v70 = &off_24C9C80C8;
  *(_QWORD *)(v70 + 16) = &unk_24C9C8140;
  *(_QWORD *)(v70 + 24) = &unk_24C9C8180;
  v71 = v188[0];
  *(_QWORD *)(v70 + 63) = *(_QWORD *)((char *)v188 + 7);
  *(_QWORD *)(v70 + 48) = 0;
  *(_QWORD *)(v70 + 56) = v71;
  *(_BYTE *)(v70 + 71) = 0;
  v188[0] = 0;
  *(_QWORD *)((char *)v188 + 7) = 0;
  *(_QWORD *)(v70 + 72) = v10;
  *(_QWORD *)(v70 + 80) = v8;
  v181 = 0uLL;
  v72 = (_QWORD *)operator new();
  *v72 = &off_24C9C8268;
  v72[1] = v62;
  v72[2] = v146;
  v184 = 0uLL;
  *(_QWORD *)(v70 + 88) = v72;
  *(_QWORD *)(v70 + 96) = v70 + 96;
  *(_QWORD *)(v70 + 104) = v70 + 96;
  *(_QWORD *)(v70 + 112) = 0;
  *(_QWORD *)(v70 + 120) = v70 + 120;
  *(_QWORD *)(v70 + 128) = v70 + 120;
  *(_QWORD *)(v70 + 136) = 0;
  v73 = (std::__shared_weak_count *)operator new();
  v73->__shared_owners_ = 0;
  v74 = (unint64_t *)&v73->__shared_owners_;
  v73->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C82B8;
  v73->__shared_weak_owners_ = 0;
  v73[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  v75 = *(std::__shared_weak_count **)(v70 + 40);
  if (v75)
  {
    if (v75->__shared_owners_ != -1)
      goto LABEL_123;
    do
      v76 = __ldxr(v74);
    while (__stxr(v76 + 1, v74));
    v77 = (unint64_t *)&v73->__shared_weak_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
    *(_QWORD *)(v70 + 32) = v70;
    *(_QWORD *)(v70 + 40) = v73;
    std::__shared_weak_count::__release_weak(v75);
  }
  else
  {
    do
      v79 = __ldxr(v74);
    while (__stxr(v79 + 1, v74));
    v80 = (unint64_t *)&v73->__shared_weak_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    *(_QWORD *)(v70 + 32) = v70;
    *(_QWORD *)(v70 + 40) = v73;
  }
  do
    v82 = __ldaxr(v74);
  while (__stlxr(v82 - 1, v74));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
LABEL_123:
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  *(_QWORD *)&v181 = v70;
  *((_QWORD *)&v181 + 1) = v73;
  v86 = v180;
  if (v180)
  {
    v87 = (unint64_t *)&v180->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  __dst[0] = &off_24C9C7D98;
  __dst[1] = v141;
  __dst[2] = (void *)v186[0];
  *(void **)((char *)&__dst[2] + 7) = *(void **)((char *)v186 + 7);
  HIBYTE(__dst[3]) = v143;
  v186[0] = 0;
  *(_QWORD *)((char *)v186 + 7) = 0;
  __dst[4] = v139;
  __dst[5] = (void *)v185[0];
  *(void **)((char *)&__dst[5] + 7) = *(void **)((char *)v185 + 7);
  HIBYTE(__dst[6]) = v69;
  v185[0] = 0;
  *(_QWORD *)((char *)v185 + 7) = 0;
  v148 = 0uLL;
  v179 = 0;
  v180 = 0;
  v89 = v181;
  v149 = v181;
  v181 = 0uLL;
  if (*((_QWORD *)&v149 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 16);
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v150 = &off_24C9C7DC8;
  v92 = operator new();
  *(_QWORD *)v92 = &off_24C9C8308;
  *(_OWORD *)(v92 + 8) = v89;
  *(_QWORD *)&v151 = v92;
  v94 = *((_QWORD *)&v149 + 1);
  v93 = v149;
  if (!*((_QWORD *)&v149 + 1))
  {
    *((_QWORD *)&v151 + 1) = v149;
    v152 = 0;
    if ((_QWORD)v149)
      v98 = v149 + 16;
    else
      v98 = 0;
    goto LABEL_153;
  }
  v95 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 16);
  do
    v96 = __ldxr(v95);
  while (__stxr(v96 + 1, v95));
  v97 = *((_QWORD *)&v149 + 1);
  *((_QWORD *)&v151 + 1) = v93;
  v152 = v94;
  if ((_QWORD)v149)
    v98 = v149 + 16;
  else
    v98 = 0;
  if (!*((_QWORD *)&v149 + 1))
  {
    v93 = v149;
LABEL_153:
    v101 = 0;
    v153 = &off_24C9B2520;
    v154 = v98;
    goto LABEL_154;
  }
  v99 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 16);
  do
    v100 = __ldxr(v99);
  while (__stxr(v100 + 1, v99));
  v101 = *((_QWORD *)&v149 + 1);
  v93 = v149;
  v153 = &off_24C9B2520;
  *(_QWORD *)&v154 = v98;
  *((_QWORD *)&v154 + 1) = v97;
  if (*((_QWORD *)&v149 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 16);
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
LABEL_154:
  if (v93)
    v104 = v93 + 24;
  else
    v104 = 0;
  v155 = &off_24C9B2310;
  *(_QWORD *)&v156 = v104;
  *((_QWORD *)&v156 + 1) = v101;
  v105 = v178;
  if (v178)
  {
    v106 = (unint64_t *)&v178->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v109 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v174;
  if (!v174)
    goto LABEL_171;
  v112 = (unint64_t *)&v174->__shared_owners_;
  do
    v113 = __ldaxr(v112);
  while (__stlxr(v113 - 1, v112));
  if (!v113)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0)
    {
LABEL_172:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_173;
      goto LABEL_177;
    }
  }
  else
  {
LABEL_171:
    if ((SHIBYTE(v175[2]) & 0x80000000) == 0)
      goto LABEL_172;
  }
  operator delete(v175[0]);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_173:
    if ((_QWORD)v182)
      goto LABEL_179;
    goto LABEL_178;
  }
LABEL_177:
  operator delete(__p[0]);
  if ((_QWORD)v182)
    goto LABEL_179;
LABEL_178:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_179:
  v114 = operator new();
  *(_QWORD *)v114 = &off_24C9C7CC0;
  *(_OWORD *)(v114 + 8) = *(_OWORD *)&v161[1];
  *(_QWORD *)(v114 + 24) = v161[3];
  memset(&v161[1], 0, 24);
  *(_OWORD *)(v114 + 32) = *(_OWORD *)&v161[4];
  *(_QWORD *)(v114 + 48) = v161[6];
  memset(&v161[4], 0, 24);
  *(_OWORD *)(v114 + 56) = v162;
  v162 = 0uLL;
  *(_OWORD *)(v114 + 72) = v163;
  v163 = 0uLL;
  *(_QWORD *)(v114 + 88) = &off_24C9C7CF0;
  *(_OWORD *)(v114 + 96) = v165;
  v115 = v166;
  *((_QWORD *)&v165 + 1) = 0;
  v166 = 0;
  *(_QWORD *)(v114 + 112) = v115;
  *(_QWORD *)(v114 + 120) = &off_24C9C7D28;
  *(_OWORD *)(v114 + 128) = v168;
  v168 = 0uLL;
  *(_QWORD *)&v165 = 0;
  *(_QWORD *)(v114 + 144) = &off_24C9B2310;
  *(_OWORD *)(v114 + 152) = v170;
  v170 = 0uLL;
  *(_QWORD *)(v114 + 168) = &off_24C9C7D98;
  v116 = *(_OWORD *)&__dst[1];
  *(void **)(v114 + 192) = __dst[3];
  *(_OWORD *)(v114 + 176) = v116;
  memset(&__dst[1], 0, 24);
  v117 = *(_OWORD *)&__dst[4];
  *(void **)(v114 + 216) = __dst[6];
  *(_OWORD *)(v114 + 200) = v117;
  memset(&__dst[4], 0, 24);
  v118 = v148;
  v148 = 0uLL;
  v119 = v149;
  *(_OWORD *)(v114 + 224) = v118;
  *(_OWORD *)(v114 + 240) = v119;
  v149 = 0uLL;
  *(_QWORD *)(v114 + 256) = &off_24C9C7DC8;
  *(_OWORD *)(v114 + 264) = v151;
  v120 = v152;
  *((_QWORD *)&v151 + 1) = 0;
  v152 = 0;
  *(_QWORD *)(v114 + 280) = v120;
  *(_QWORD *)(v114 + 288) = &off_24C9B2520;
  *(_OWORD *)(v114 + 296) = v154;
  v154 = 0uLL;
  *(_QWORD *)&v151 = 0;
  *(_QWORD *)(v114 + 312) = &off_24C9B2310;
  *(_OWORD *)(v114 + 320) = v156;
  v156 = 0uLL;
  *(_QWORD *)(v144 + 80) = v114;
  sub_20EBC8AF4((uint64_t)__dst);
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
  if (*((_QWORD *)&v182 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
  if (*((_QWORD *)&v183 + 1))
  {
    v125 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  sub_20EBC8CD8((uint64_t)v161);
  v127 = v158;
  if (v158)
  {
    v128 = (unint64_t *)&v158->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v160;
  if (v160)
  {
    v131 = (unint64_t *)&v160->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v172;
  if (v172)
  {
    v134 = (unint64_t *)&v172->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (v146)
  {
    v136 = (unint64_t *)&v146->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  if (!*(_BYTE *)v144)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v144 + 80) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v144 + 80) + 96));
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v144 + 80) + 264) + 32))(*(_QWORD *)(*(_QWORD *)(v144 + 80) + 264));
  }
  return v144;
}

void sub_20EBC5DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  sub_20E86665C(v71 - 216);
  sub_20E9AF634(v71 - 200);
  sub_20EBC8CD8((uint64_t)&a50);
  sub_20E86665C((uint64_t)&a46);
  sub_20E9AF634((uint64_t)&a48);
  sub_20E9AF634((uint64_t)&a71);
  sub_20E86665C(a12);
  if (*(char *)(a20 + 63) < 0)
  {
    operator delete(*a10);
    if ((*(char *)(a20 + 39) & 0x80000000) == 0)
    {
LABEL_5:
      sub_20E86665C((uint64_t)&a21);
      sub_20E86665C((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(a20 + 39) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*a11);
  sub_20E86665C((uint64_t)&a21);
  sub_20E86665C((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_20EBC6248()
{
  std::__shared_weak_count *v0;
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v1);
  JUMPOUT(0x20EBC6190);
}

void sub_20EBC625C()
{
  JUMPOUT(0x20EBC6190);
}

void sub_20EBC6264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__shared_weak_count *v50;
  void *v52;

  if (a50)
    (*(void (**)(uint64_t))(*(_QWORD *)a50 + 8))(a50);
  std::__shared_weak_count::~__shared_weak_count(v50);
  operator delete(v52);
  _Unwind_Resume(a1);
}

void sub_20EBC6290(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EBC62BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBC62CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C7C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC62FC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EBC630C(uint64_t a1)
{
  sub_20EBC8EBC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC6338(uint64_t a1)
{
  sub_20EBC8CD8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBC635C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7CF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBC639C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7CF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC63EC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EBC63FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C7D28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBC6434(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C7D28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC647C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9C7D60;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9C7D60;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBC6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBC657C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7D60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBC65BC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7D60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC660C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBC661C(uint64_t a1)
{
  sub_20EBC8AF4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBC6640(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7DC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBC6680(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C7DC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC66D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBC66E4(uint64_t a1)
{
  sub_20EBC6F0C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC6708(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBC7068(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBC742C(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBC67C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBC742C(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC67EC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBC67FC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBC6808(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBC6818(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBC7068(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBC742C(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBC69B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBC68DCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBC6A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBC6A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBC742C(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBC6AA8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBC6B2C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9C7D60;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBC6BDC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC6BF0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBC6C80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC6C94(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBC7554(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBC6CD8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC6CEC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBC6D20(uint64_t a1)
{
  return sub_20EBC6F0C(a1 - 16);
}

void sub_20EBC6D28(uint64_t a1)
{
  sub_20EBC6F0C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC6D50(uint64_t a1, uint64_t a2)
{
  sub_20EBC6B2C(a1 - 16, a2);
}

void sub_20EBC6D58(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBC7554(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBC6D9C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC6DB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBC6DE4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBC6DEC(uint64_t a1)
{
  return sub_20EBC6F0C(a1 - 24);
}

void sub_20EBC6DF4(uint64_t a1)
{
  sub_20EBC6F0C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC6E1C(uint64_t a1)
{
  sub_20EBC6BF0(a1 - 24);
}

uint64_t sub_20EBC6E24(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBC6E2C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBC6E94(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC6EFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBC6F0C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C7E00;
  *(_QWORD *)(a1 + 16) = &unk_24C9C7E78;
  *(_QWORD *)(a1 + 24) = &unk_24C9C7EB8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBC7068(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EBC7324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBC7400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBC7420);
}

uint64_t *sub_20EBC742C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBC7518(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBC7474);
}

char *sub_20EBC7554(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBC7630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBC7654(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC7678(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBC7690(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_det"
                     "ection20VIODepthFeatureEventEEENS0_INS_6vectorINS6_15DenseDepthStoreENS_9allocatorISB_EEEEEEvSF_Lb0"
                     "EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17"
                                "feature_detection20VIODepthFeatureEventEEENS0_INS_6vectorINS6_15DenseDepthStoreENS_9allo"
                                "catorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection20VIODepthFeatureEventEEENS0_INS_6vectorINS6_15DenseDepthStoreENS_9allocatorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection20VIODepthFeatureEventEEENS0_INS_6vectorINS6_15DenseDepthStoreENS_9allocatorISB_EEEEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBC7700(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBC772C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBC7768@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C8050;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBC77D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBC7860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBC7874(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBC7904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC7918(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBC79DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC79F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBC7AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBC7AC8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBC7B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBC7B84(uint64_t a1)
{
  sub_20EBC830C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC7BA8(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_20EBC8454(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x212BC623C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBC7C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC7C8C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBC7C9C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBC7CA8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBC7CB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBC8454(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x212BC623C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBC7E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x20EBC7D7CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBC7EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x212BC623C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_20EBC7F10(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBC7F94(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBC8024(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC8038(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBC80C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBC80DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EBC8110(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBC8144(uint64_t a1)
{
  return sub_20EBC830C(a1 - 16);
}

void sub_20EBC814C(uint64_t a1)
{
  sub_20EBC830C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC8174(uint64_t a1)
{
  sub_20EBC7F94(a1 - 16);
}

void sub_20EBC817C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_20EBC81B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBC81E4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBC81EC(uint64_t a1)
{
  return sub_20EBC830C(a1 - 24);
}

void sub_20EBC81F4(uint64_t a1)
{
  sub_20EBC830C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBC821C(uint64_t a1)
{
  sub_20EBC8038(a1 - 24);
}

uint64_t sub_20EBC8224(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBC822C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBC8294(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC82FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBC830C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C80C8;
  *(_QWORD *)(a1 + 16) = &unk_24C9C8140;
  *(_QWORD *)(a1 + 24) = &unk_24C9C8180;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBC8454(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EBC84EC()
{
  __break(1u);
}

void sub_20EBC8598(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBC85B8);
}

void sub_20EBC85C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBC85EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBC8604(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types24Ja"
                     "sperPointCloudWithPoseEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8c"
                                "v_types24JasperPointCloudWithPoseEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types24JasperPointCloudWithPoseEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio8cv_types24JasperPointCloudWithPoseEEEvvvLb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBC8674(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBC86A0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBC86DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9C8308;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBC8744(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBC87D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBC87E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBC8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC888C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBC8950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC8964(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBC8A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBC8A3C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBC8AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC8AF4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C7D98;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C7DC8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBC8CD8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C7CC0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C7D28;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C7CF0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBC8EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C7C90;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EBC8AF4(v2 + 168);
    v3 = sub_20EBC8CD8(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EBC8AF4(v7 + 168);
    v8 = sub_20EBC8CD8(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C4059065CFELL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBC900C(uint64_t result)
{
  if (result)
  {
    sub_20EBC8EBC(result + 8);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EBC904C(uint64_t a1)
{
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBC90B0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  void **v28;
  _BYTE *v29;
  size_t v30;
  char *v31;
  void **v32;
  char *v33;
  char *v34;
  void **v35;
  _BYTE __p[24];

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v6 = (_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_24C9C8398;
  *(_QWORD *)(a1 + 56) = &unk_24C9C83C8;
  v7 = *a2;
  v8 = a2[2];
  *(_OWORD *)(a1 + 176) = a2[1];
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 160) = v7;
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[6];
  *(_OWORD *)(a1 + 240) = a2[5];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  v12 = a2[7];
  v13 = a2[8];
  v14 = a2[10];
  *(_OWORD *)(a1 + 304) = a2[9];
  *(_OWORD *)(a1 + 320) = v14;
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 288) = v13;
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 352) = v15;
  v16 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 368) = v16;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a3 + 56);
  v17 = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 400) = v17;
  v18 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a1 + 424) = v18;
  v19 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 448) = v19;
  v20 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(a1 + 472) = v20;
  v22 = *(_OWORD *)(a3 + 192);
  v21 = *(_OWORD *)(a3 + 208);
  v23 = *(_OWORD *)(a3 + 176);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a3 + 224);
  *(_OWORD *)(a1 + 528) = v22;
  *(_OWORD *)(a1 + 544) = v21;
  *(_OWORD *)(a1 + 512) = v23;
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a3 + 160);
  v24 = *(_OWORD *)(a3 + 248);
  v25 = *(_OWORD *)(a3 + 264);
  v26 = *(_OWORD *)(a3 + 280);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a3 + 296);
  *(_OWORD *)(a1 + 600) = v25;
  *(_OWORD *)(a1 + 616) = v26;
  *(_OWORD *)(a1 + 584) = v24;
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  v27 = (char *)operator new(0x28uLL);
  strcpy(v27, "Map and Trajectory Optimizer Node");
  *(_QWORD *)__p = operator new(0x50uLL);
  *(_OWORD *)&__p[8] = xmmword_2102E3F70;
  strcpy(*(char **)__p, "Optimizes the map and trajectory based on input from the debug metadata.");
  sub_20E867BF8(v6, v27, 0x21uLL);
  v28 = (void **)(a1 + 136);
  if ((_BYTE *)(a1 + 136) != __p)
  {
    if (*(char *)(a1 + 159) < 0)
    {
      if (__p[23] >= 0)
        v29 = __p;
      else
        v29 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v30 = __p[23];
      else
        v30 = *(_QWORD *)&__p[8];
      sub_20E867CBC(v28, v29, v30);
    }
    else if ((__p[23] & 0x80) != 0)
    {
      sub_20E867BF8(v28, *(void **)__p, *(size_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)&__p[16];
    }
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  operator delete(v27);
  v31 = (char *)operator new(0x60uLL);
  strcpy(v31, "Stores data from the VIOMetadata to be used later to offline optimize the map and trajectory.");
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v4);
  strcpy((char *)(a1 + 8), "Input Metadata Channel");
  *(_BYTE *)(a1 + 31) = 22;
  sub_20E860C04(__p, v31, 0x5DuLL);
  v32 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v32);
  *(_OWORD *)v32 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&__p[16];
  operator delete(v31);
  v33 = (char *)operator new(0x30uLL);
  strcpy(v33, "Output Optimize Map and Trajectory Channel");
  v34 = (char *)operator new(0x30uLL);
  strcpy(v34, "Outputs the optimized map and trajectory.");
  sub_20E860C04(__p, v33, 0x2AuLL);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)&__p[16];
  sub_20E860C04(__p, v34, 0x29uLL);
  v35 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)&__p[16];
  operator delete(v34);
  operator delete(v33);
  return a1;
}

void sub_20EBC9474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void *v18;

  operator delete(v16);
  sub_20EBCBB98(v15 + 688);
  v18 = *(void **)(v15 + 664);
  if (v18)
  {
    *(_QWORD *)(v15 + 672) = v18;
    operator delete(v18);
  }
  sub_20E9DD680((void **)(v15 + 640));
  sub_20EBC9504(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBC9504(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C9C8460;
  *(_QWORD *)(a1 + 56) = &unk_24C9C8488;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 56) = off_24C9C84D8;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C84D8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)a1 = off_24C9C84B0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C84B0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBC9600(uint64_t a1, uint64_t **a2)
{
  _BYTE *v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  _OWORD *v13;
  char *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *j;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *i;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  unint64_t v183;
  void **v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  unint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  void *v253;
  void *v254;
  unint64_t v255;
  char *v256;
  void *v257;
  char *v258;
  char *v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  int64_t v266;
  char *v267;
  char *v268;
  char *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  int64_t v275;
  unint64_t v276;
  char *v277;
  unint64_t v278;
  void *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  char *v286;
  unint64_t v287;
  int64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int128 *v295;
  char *v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  __int128 *v309;
  char *v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  int64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int128 *v325;
  char *v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  int64_t v335;
  unint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  __int128 *v341;
  char *v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  char *v346;
  char *v347;
  unint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  _QWORD *v353;
  uint64_t v354;
  uint64_t v355;
  int64_t v356;
  unint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  __int128 v362;
  __int128 v363;
  char *v364;
  void *v365;
  _QWORD *v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;

  v2 = (_BYTE *)(*a2)[2];
  if (!v2[16])
    return;
  v4 = *(_QWORD *)v2;
  v5 = *(int **)(**(_QWORD **)v2 + 304);
  v6 = *(_QWORD *)(a1 + 696);
  v7 = *(_QWORD *)(a1 + 720);
  v8 = (_QWORD *)(v6 + 8 * (v7 / 0x13));
  v9 = *(_QWORD *)(a1 + 704);
  v383 = v4;
  if (v9 == v6)
    v10 = 0;
  else
    v10 = *v8 + 208 * (v7 % 0x13);
  v11 = (void **)(a1 + 664);
  v12 = *v5;
  while (1)
  {
    if (v9 == v6)
    {
      if (!v10)
        break;
    }
    else if (v10 == *(_QWORD *)(v6 + 8 * ((*(_QWORD *)(a1 + 728) + v7) / 0x13))
                   + 208 * ((*(_QWORD *)(a1 + 728) + v7) % 0x13))
    {
      break;
    }
    if (*(_QWORD *)v10 >= v12)
      break;
    v13 = (_OWORD *)(v10 + 8);
    v14 = *(char **)(a1 + 672);
    v15 = *(_QWORD *)(a1 + 680);
    if ((unint64_t)v14 < v15)
    {
      *(_OWORD *)v14 = *v13;
      v16 = *(_OWORD *)(v10 + 24);
      v17 = *(_OWORD *)(v10 + 40);
      v18 = *(_OWORD *)(v10 + 72);
      *((_OWORD *)v14 + 3) = *(_OWORD *)(v10 + 56);
      *((_OWORD *)v14 + 4) = v18;
      *((_OWORD *)v14 + 1) = v16;
      *((_OWORD *)v14 + 2) = v17;
      v19 = *(_OWORD *)(v10 + 88);
      v20 = *(_OWORD *)(v10 + 104);
      v21 = *(_OWORD *)(v10 + 136);
      *((_OWORD *)v14 + 7) = *(_OWORD *)(v10 + 120);
      *((_OWORD *)v14 + 8) = v21;
      *((_OWORD *)v14 + 5) = v19;
      *((_OWORD *)v14 + 6) = v20;
      v22 = *(_OWORD *)(v10 + 152);
      v23 = *(_OWORD *)(v10 + 168);
      v24 = *(_OWORD *)(v10 + 184);
      *((_QWORD *)v14 + 24) = *(_QWORD *)(v10 + 200);
      *((_OWORD *)v14 + 10) = v23;
      *((_OWORD *)v14 + 11) = v24;
      *((_OWORD *)v14 + 9) = v22;
      *(_QWORD *)(a1 + 672) = v14 + 200;
      v10 += 208;
      if (v10 - *v8 != 3952)
        goto LABEL_6;
LABEL_31:
      v52 = v8[1];
      ++v8;
      v10 = v52;
      goto LABEL_6;
    }
    v25 = (char *)*v11;
    v26 = 0x8F5C28F5C28F5C29 * ((v14 - (_BYTE *)*v11) >> 3);
    v27 = v26 + 1;
    if (v26 + 1 > 0x147AE147AE147AELL)
      sub_20E867F44();
    v28 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v15 - (_QWORD)v25) >> 3);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0xA3D70A3D70A3D7)
      v29 = 0x147AE147AE147AELL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 > 0x147AE147AE147AELL)
LABEL_307:
        sub_20E877A38();
      v30 = (char *)operator new(200 * v29);
    }
    else
    {
      v30 = 0;
    }
    v31 = &v30[200 * v26];
    *(_OWORD *)v31 = *v13;
    v32 = *(_OWORD *)(v10 + 24);
    v33 = *(_OWORD *)(v10 + 40);
    v34 = *(_OWORD *)(v10 + 72);
    *((_OWORD *)v31 + 3) = *(_OWORD *)(v10 + 56);
    *((_OWORD *)v31 + 4) = v34;
    *((_OWORD *)v31 + 1) = v32;
    *((_OWORD *)v31 + 2) = v33;
    v35 = *(_OWORD *)(v10 + 88);
    v36 = *(_OWORD *)(v10 + 104);
    v37 = *(_OWORD *)(v10 + 136);
    *((_OWORD *)v31 + 7) = *(_OWORD *)(v10 + 120);
    *((_OWORD *)v31 + 8) = v37;
    *((_OWORD *)v31 + 5) = v35;
    *((_OWORD *)v31 + 6) = v36;
    v38 = *(_OWORD *)(v10 + 152);
    v39 = *(_OWORD *)(v10 + 168);
    v40 = *(_OWORD *)(v10 + 184);
    *((_QWORD *)v31 + 24) = *(_QWORD *)(v10 + 200);
    *((_OWORD *)v31 + 10) = v39;
    *((_OWORD *)v31 + 11) = v40;
    *((_OWORD *)v31 + 9) = v38;
    v41 = v31;
    if (v14 != v25)
    {
      do
      {
        *(_OWORD *)(v41 - 200) = *(_OWORD *)(v14 - 200);
        v42 = *(_OWORD *)(v14 - 184);
        v43 = *(_OWORD *)(v14 - 168);
        v44 = *(_OWORD *)(v14 - 152);
        *(_OWORD *)(v41 - 136) = *(_OWORD *)(v14 - 136);
        *(_OWORD *)(v41 - 152) = v44;
        *(_OWORD *)(v41 - 168) = v43;
        *(_OWORD *)(v41 - 184) = v42;
        v45 = *(_OWORD *)(v14 - 120);
        v46 = *(_OWORD *)(v14 - 104);
        v47 = *(_OWORD *)(v14 - 88);
        *(_OWORD *)(v41 - 72) = *(_OWORD *)(v14 - 72);
        *(_OWORD *)(v41 - 88) = v47;
        *(_OWORD *)(v41 - 104) = v46;
        *(_OWORD *)(v41 - 120) = v45;
        v48 = *(_OWORD *)(v14 - 56);
        v49 = *(_OWORD *)(v14 - 40);
        v50 = *(_OWORD *)(v14 - 24);
        *((_QWORD *)v41 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v41 - 24) = v50;
        *(_OWORD *)(v41 - 40) = v49;
        *(_OWORD *)(v41 - 56) = v48;
        v41 -= 200;
        v14 -= 200;
      }
      while (v14 != v25);
      v14 = (char *)*v11;
    }
    *(_QWORD *)(a1 + 664) = v41;
    v51 = v31 + 200;
    *(_QWORD *)(a1 + 672) = v31 + 200;
    *(_QWORD *)(a1 + 680) = &v30[200 * v29];
    if (v14)
      operator delete(v14);
    *(_QWORD *)(a1 + 672) = v51;
    v10 += 208;
    if (v10 - *v8 == 3952)
      goto LABEL_31;
LABEL_6:
    v7 = *(_QWORD *)(a1 + 720);
    v6 = *(_QWORD *)(a1 + 696);
    v9 = *(_QWORD *)(a1 + 704);
  }
  v53 = (uint64_t *)(v6 + 8 * (v7 / 0x13));
  if (v9 == v6)
  {
    v54 = 0;
    v55 = v383;
    if (!v10)
      goto LABEL_41;
LABEL_34:
    v56 = 19 * (v8 - v53)
        + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - *v8) >> 4)
        - 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - *v53) >> 4);
    if (v9 != v6)
      goto LABEL_35;
LABEL_42:
    v57 = 0;
    if (!v54)
      goto LABEL_43;
LABEL_36:
    v58 = (uint64_t)(v57 - *v53) >> 4;
    v59 = 0xB13B13B13B13B13BLL * v58 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - *v53) >> 4);
    if (v59)
    {
      v60 = v59 + 0x4EC4EC4EC4EC4EC5 * v58;
      if (v60 < 1)
      {
        v62 = 18 - v60;
        v61 = &v53[-(v62 / 0x13)];
        v54 = *v61 + 208 * (19 * (v62 / 0x13) - v62) + 3744;
        if (v56 < 1)
          goto LABEL_149;
      }
      else
      {
        v61 = &v53[v60 / 0x13uLL];
        v54 = *v61 + 208 * (v60 % 0x13uLL);
        if (v56 < 1)
          goto LABEL_149;
      }
    }
    else
    {
      v54 = v57;
      v61 = (uint64_t *)(v6 + 8 * (v7 / 0x13));
      if (v56 < 1)
        goto LABEL_149;
    }
LABEL_48:
    v63 = *(_QWORD *)(a1 + 728);
    v64 = *v61;
    v65 = v56 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - *v61) >> 4);
    if (v59 > (unint64_t)(v63 - v56) >> 1)
    {
      if (v65 < 1)
      {
        v118 = (18 - v65) / 0x13uLL;
        v66 = &v61[-v118];
        v67 = *v66;
        v68 = *v66 + 208 * (19 * v118 - (18 - v65)) + 3744;
      }
      else
      {
        v66 = &v61[v65 / 0x13uLL];
        v67 = *v66;
        v68 = *v66 + 208 * (v65 % 0x13uLL);
      }
      v119 = v63 + v7;
      v120 = (v63 + v7) / 0x13;
      v121 = (uint64_t *)(v6 + 8 * v120);
      if (v9 == v6)
      {
        v122 = 0;
        if (v66 != v121)
          goto LABEL_87;
      }
      else
      {
        v122 = *v121 + 208 * (v119 - 19 * v120);
        if (v66 != v121)
        {
LABEL_87:
          v123 = v67 + 3952;
          if (v67 + 3952 != v68)
          {
            while (1)
            {
              v124 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v64 - v54 + 3952) >> 4);
              if (0x4EC4EC4EC4EC4EC5 * ((v123 - v68) >> 4) < v124)
                v124 = 0x4EC4EC4EC4EC4EC5 * ((v123 - v68) >> 4);
              if (v124)
              {
                v125 = v68 + 208 * v124;
                do
                {
                  *(_QWORD *)v54 = *(_QWORD *)v68;
                  *(_OWORD *)(v54 + 8) = *(_OWORD *)(v68 + 8);
                  v126 = *(_OWORD *)(v68 + 24);
                  v127 = *(_OWORD *)(v68 + 40);
                  v128 = *(_OWORD *)(v68 + 56);
                  *(_OWORD *)(v54 + 72) = *(_OWORD *)(v68 + 72);
                  *(_OWORD *)(v54 + 56) = v128;
                  *(_OWORD *)(v54 + 40) = v127;
                  *(_OWORD *)(v54 + 24) = v126;
                  v129 = *(_OWORD *)(v68 + 88);
                  v130 = *(_OWORD *)(v68 + 104);
                  v131 = *(_OWORD *)(v68 + 120);
                  *(_OWORD *)(v54 + 136) = *(_OWORD *)(v68 + 136);
                  *(_OWORD *)(v54 + 120) = v131;
                  *(_OWORD *)(v54 + 104) = v130;
                  *(_OWORD *)(v54 + 88) = v129;
                  v132 = *(_OWORD *)(v68 + 152);
                  v133 = *(_OWORD *)(v68 + 168);
                  v134 = *(_OWORD *)(v68 + 184);
                  *(_QWORD *)(v54 + 200) = *(_QWORD *)(v68 + 200);
                  *(_OWORD *)(v54 + 184) = v134;
                  *(_OWORD *)(v54 + 168) = v133;
                  *(_OWORD *)(v54 + 152) = v132;
                  v54 += 208;
                  v68 += 208;
                }
                while (v68 != v125);
                v68 = v125;
              }
              if (v68 == v123)
                break;
              v135 = v61[1];
              ++v61;
              v64 = v135;
              v54 = v135;
            }
            v64 = *v61;
            if (*v61 + 3952 == v54)
            {
              v136 = v61[1];
              ++v61;
              v64 = v136;
              v54 = v136;
            }
          }
          for (i = v66 + 1; i != v121; ++i)
          {
            while (1)
            {
              v138 = 0;
              v139 = *i;
              while (1)
              {
                v140 = v139 + 208 * v138;
                v141 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v64 - v54 + 3952) >> 4);
                if (0x4EC4EC4EC4EC4EC5 * ((-208 * v138 + 3952) >> 4) < v141)
                  v141 = 0x4EC4EC4EC4EC4EC5 * ((-208 * v138 + 3952) >> 4);
                if (v141)
                {
                  v142 = v140 + 208 * v141;
                  v143 = v139 + 208 * v138;
                  do
                  {
                    *(_QWORD *)v54 = *(_QWORD *)v143;
                    *(_OWORD *)(v54 + 8) = *(_OWORD *)(v143 + 8);
                    v144 = *(_OWORD *)(v143 + 24);
                    v145 = *(_OWORD *)(v143 + 40);
                    v146 = *(_OWORD *)(v143 + 56);
                    *(_OWORD *)(v54 + 72) = *(_OWORD *)(v143 + 72);
                    *(_OWORD *)(v54 + 56) = v146;
                    *(_OWORD *)(v54 + 40) = v145;
                    *(_OWORD *)(v54 + 24) = v144;
                    v147 = *(_OWORD *)(v143 + 88);
                    v148 = *(_OWORD *)(v143 + 104);
                    v149 = *(_OWORD *)(v143 + 120);
                    *(_OWORD *)(v54 + 136) = *(_OWORD *)(v143 + 136);
                    *(_OWORD *)(v54 + 120) = v149;
                    *(_OWORD *)(v54 + 104) = v148;
                    *(_OWORD *)(v54 + 88) = v147;
                    v150 = *(_OWORD *)(v143 + 152);
                    v151 = *(_OWORD *)(v143 + 168);
                    v152 = *(_OWORD *)(v143 + 184);
                    *(_QWORD *)(v54 + 200) = *(_QWORD *)(v143 + 200);
                    *(_OWORD *)(v54 + 184) = v152;
                    *(_OWORD *)(v54 + 168) = v151;
                    *(_OWORD *)(v54 + 152) = v150;
                    v54 += 208;
                    v143 += 208;
                  }
                  while (v143 != v142);
                  v138 += 0x4EC4EC4EC4EC4EC5 * ((v142 - v140) >> 4);
                  if (v138 == 19)
                    break;
                }
                v153 = v61[1];
                ++v61;
                v64 = v153;
                v54 = v153;
              }
              v64 = *v61;
              if (*v61 + 3952 == v54)
                break;
              if (++i == v121)
                goto LABEL_111;
            }
            v154 = v61[1];
            ++v61;
            v64 = v154;
            v54 = v154;
          }
LABEL_111:
          v155 = *v121;
          if (v155 != v122)
          {
            while (1)
            {
              v156 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v64 - v54 + 3952) >> 4);
              if (0x4EC4EC4EC4EC4EC5 * ((v122 - v155) >> 4) < v156)
                v156 = 0x4EC4EC4EC4EC4EC5 * ((v122 - v155) >> 4);
              if (v156)
              {
                v157 = v155 + 208 * v156;
                do
                {
                  *(_QWORD *)v54 = *(_QWORD *)v155;
                  *(_OWORD *)(v54 + 8) = *(_OWORD *)(v155 + 8);
                  v158 = *(_OWORD *)(v155 + 24);
                  v159 = *(_OWORD *)(v155 + 40);
                  v160 = *(_OWORD *)(v155 + 56);
                  *(_OWORD *)(v54 + 72) = *(_OWORD *)(v155 + 72);
                  *(_OWORD *)(v54 + 56) = v160;
                  *(_OWORD *)(v54 + 40) = v159;
                  *(_OWORD *)(v54 + 24) = v158;
                  v161 = *(_OWORD *)(v155 + 88);
                  v162 = *(_OWORD *)(v155 + 104);
                  v163 = *(_OWORD *)(v155 + 120);
                  *(_OWORD *)(v54 + 136) = *(_OWORD *)(v155 + 136);
                  *(_OWORD *)(v54 + 120) = v163;
                  *(_OWORD *)(v54 + 104) = v162;
                  *(_OWORD *)(v54 + 88) = v161;
                  v164 = *(_OWORD *)(v155 + 152);
                  v165 = *(_OWORD *)(v155 + 168);
                  v166 = *(_OWORD *)(v155 + 184);
                  *(_QWORD *)(v54 + 200) = *(_QWORD *)(v155 + 200);
                  *(_OWORD *)(v54 + 184) = v166;
                  *(_OWORD *)(v54 + 168) = v165;
                  *(_OWORD *)(v54 + 152) = v164;
                  v155 += 208;
                  v54 += 208;
                }
                while (v155 != v157);
                v155 = v157;
              }
              if (v155 == v122)
                break;
              v167 = v61[1];
              ++v61;
              v64 = v167;
              v54 = v167;
            }
          }
          goto LABEL_143;
        }
      }
      if (v68 != v122)
      {
        while (1)
        {
          v186 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v64 - v54 + 3952) >> 4);
          if (0x4EC4EC4EC4EC4EC5 * ((v122 - v68) >> 4) < v186)
            v186 = 0x4EC4EC4EC4EC4EC5 * ((v122 - v68) >> 4);
          if (v186)
          {
            v187 = v68 + 208 * v186;
            do
            {
              *(_QWORD *)v54 = *(_QWORD *)v68;
              *(_OWORD *)(v54 + 8) = *(_OWORD *)(v68 + 8);
              v188 = *(_OWORD *)(v68 + 24);
              v189 = *(_OWORD *)(v68 + 40);
              v190 = *(_OWORD *)(v68 + 56);
              *(_OWORD *)(v54 + 72) = *(_OWORD *)(v68 + 72);
              *(_OWORD *)(v54 + 56) = v190;
              *(_OWORD *)(v54 + 40) = v189;
              *(_OWORD *)(v54 + 24) = v188;
              v191 = *(_OWORD *)(v68 + 88);
              v192 = *(_OWORD *)(v68 + 104);
              v193 = *(_OWORD *)(v68 + 120);
              *(_OWORD *)(v54 + 136) = *(_OWORD *)(v68 + 136);
              *(_OWORD *)(v54 + 120) = v193;
              *(_OWORD *)(v54 + 104) = v192;
              *(_OWORD *)(v54 + 88) = v191;
              v194 = *(_OWORD *)(v68 + 152);
              v195 = *(_OWORD *)(v68 + 168);
              v196 = *(_OWORD *)(v68 + 184);
              *(_QWORD *)(v54 + 200) = *(_QWORD *)(v68 + 200);
              *(_OWORD *)(v54 + 184) = v196;
              *(_OWORD *)(v54 + 168) = v195;
              *(_OWORD *)(v54 + 152) = v194;
              v68 += 208;
              v54 += 208;
            }
            while (v68 != v187);
            v68 = v187;
          }
          if (v68 == v122)
            break;
          v197 = v61[1];
          ++v61;
          v64 = v197;
          v54 = v197;
        }
      }
LABEL_143:
      v198 = *(_QWORD *)(a1 + 696);
      v199 = *(_QWORD *)(a1 + 704);
      v200 = 19 * ((v199 - v198) >> 3) - 1;
      if (v199 == v198)
        v200 = 0;
      v201 = *(_QWORD *)(a1 + 728) - v56;
      *(_QWORD *)(a1 + 728) = v201;
      if ((unint64_t)(v200 - (*(_QWORD *)(a1 + 720) + v201)) >= 0x26)
      {
        do
        {
          operator delete(*(void **)(v199 - 8));
          v199 = *(_QWORD *)(a1 + 704) - 8;
          v202 = v199 == *(_QWORD *)(a1 + 696);
          v203 = 19 * ((v199 - *(_QWORD *)(a1 + 696)) >> 3) - 1;
          *(_QWORD *)(a1 + 704) = v199;
          if (v202)
            v203 = 0;
        }
        while ((unint64_t)(v203 - (*(_QWORD *)(a1 + 728) + *(_QWORD *)(a1 + 720))) > 0x25);
      }
      goto LABEL_149;
    }
    if (v65 < 1)
    {
      v168 = (18 - v65) / 0x13uLL;
      v69 = &v61[-v168];
      v70 = *v69;
      v71 = *v69 + 208 * (v65 - 18 + 19 * v168) + 3744;
      if (v53 != v61)
        goto LABEL_53;
    }
    else
    {
      v69 = &v61[v65 / 0x13uLL];
      v70 = *v69;
      v71 = *v69 + 208 * (v65 % 0x13uLL);
      if (v53 != v61)
      {
LABEL_53:
        if (v64 != v54)
        {
          while (1)
          {
            v72 = 0x4EC4EC4EC4EC4EC5 * ((v71 - v70) >> 4);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - v64) >> 4) < v72)
              v72 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - v64) >> 4);
            if (v72)
            {
              v73 = v54 - 208;
              v74 = -208 * v72;
              do
              {
                *(_QWORD *)(v71 - 208) = *(_QWORD *)v73;
                v71 -= 208;
                *(_OWORD *)(v71 + 8) = *(_OWORD *)(v73 + 8);
                v75 = *(_OWORD *)(v73 + 24);
                v76 = *(_OWORD *)(v73 + 40);
                v77 = *(_OWORD *)(v73 + 56);
                *(_OWORD *)(v71 + 72) = *(_OWORD *)(v73 + 72);
                *(_OWORD *)(v71 + 56) = v77;
                *(_OWORD *)(v71 + 40) = v76;
                *(_OWORD *)(v71 + 24) = v75;
                v78 = *(_OWORD *)(v73 + 88);
                v79 = *(_OWORD *)(v73 + 104);
                v80 = *(_OWORD *)(v73 + 120);
                *(_OWORD *)(v71 + 136) = *(_OWORD *)(v73 + 136);
                *(_OWORD *)(v71 + 120) = v80;
                *(_OWORD *)(v71 + 104) = v79;
                *(_OWORD *)(v71 + 88) = v78;
                v81 = *(_OWORD *)(v73 + 152);
                v82 = *(_OWORD *)(v73 + 168);
                v83 = *(_OWORD *)(v73 + 184);
                *(_QWORD *)(v71 + 200) = *(_QWORD *)(v73 + 200);
                *(_OWORD *)(v71 + 184) = v83;
                *(_OWORD *)(v71 + 168) = v82;
                *(_OWORD *)(v71 + 152) = v81;
                v73 -= 208;
                v74 += 208;
              }
              while (v74);
            }
            v54 -= 208 * v72;
            if (v54 == v64)
              break;
            v84 = *--v69;
            v70 = v84;
            v71 = v84 + 3952;
          }
          v70 = *v69;
          if (*v69 + 3952 == v71)
          {
            v85 = v69[1];
            ++v69;
            v70 = v85;
            v71 = v85;
          }
        }
        for (j = v61 - 1; j != v53; --j)
        {
          while (1)
          {
            v87 = *j;
            v88 = *j + 3952;
            while (1)
            {
              v89 = 0x4EC4EC4EC4EC4EC5 * ((v71 - v70) >> 4);
              if (0x4EC4EC4EC4EC4EC5 * ((v88 - v87) >> 4) < v89)
                v89 = 0x4EC4EC4EC4EC4EC5 * ((v88 - v87) >> 4);
              if (v89)
              {
                v90 = v88 - 208;
                v91 = -208 * v89;
                do
                {
                  *(_QWORD *)(v71 - 208) = *(_QWORD *)v90;
                  v71 -= 208;
                  *(_OWORD *)(v71 + 8) = *(_OWORD *)(v90 + 8);
                  v92 = *(_OWORD *)(v90 + 24);
                  v93 = *(_OWORD *)(v90 + 40);
                  v94 = *(_OWORD *)(v90 + 56);
                  *(_OWORD *)(v71 + 72) = *(_OWORD *)(v90 + 72);
                  *(_OWORD *)(v71 + 56) = v94;
                  *(_OWORD *)(v71 + 40) = v93;
                  *(_OWORD *)(v71 + 24) = v92;
                  v95 = *(_OWORD *)(v90 + 88);
                  v96 = *(_OWORD *)(v90 + 104);
                  v97 = *(_OWORD *)(v90 + 120);
                  *(_OWORD *)(v71 + 136) = *(_OWORD *)(v90 + 136);
                  *(_OWORD *)(v71 + 120) = v97;
                  *(_OWORD *)(v71 + 104) = v96;
                  *(_OWORD *)(v71 + 88) = v95;
                  v98 = *(_OWORD *)(v90 + 152);
                  v99 = *(_OWORD *)(v90 + 168);
                  v100 = *(_OWORD *)(v90 + 184);
                  *(_QWORD *)(v71 + 200) = *(_QWORD *)(v90 + 200);
                  *(_OWORD *)(v71 + 184) = v100;
                  *(_OWORD *)(v71 + 168) = v99;
                  *(_OWORD *)(v71 + 152) = v98;
                  v90 -= 208;
                  v91 += 208;
                }
                while (v91);
              }
              v88 -= 208 * v89;
              if (v88 == v87)
                break;
              v101 = *--v69;
              v70 = v101;
              v71 = v101 + 3952;
            }
            v70 = *v69;
            if (*v69 + 3952 == v71)
              break;
            if (--j == v53)
              goto LABEL_76;
          }
          v102 = v69[1];
          ++v69;
          v70 = v102;
          v71 = v102;
        }
LABEL_76:
        v103 = *v53 + 3952;
        if (v103 != v57)
        {
          while (1)
          {
            v104 = 0x4EC4EC4EC4EC4EC5 * ((v71 - v70) >> 4);
            if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v103 - v57) >> 4) < v104)
              v104 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v103 - v57) >> 4);
            if (v104)
            {
              v105 = v71 - 208;
              v106 = v103 - 208;
              v107 = -208 * v104;
              do
              {
                *(_QWORD *)v105 = *(_QWORD *)v106;
                *(_OWORD *)(v105 + 8) = *(_OWORD *)(v106 + 8);
                v108 = *(_OWORD *)(v106 + 24);
                v109 = *(_OWORD *)(v106 + 40);
                v110 = *(_OWORD *)(v106 + 56);
                *(_OWORD *)(v105 + 72) = *(_OWORD *)(v106 + 72);
                *(_OWORD *)(v105 + 56) = v110;
                *(_OWORD *)(v105 + 40) = v109;
                *(_OWORD *)(v105 + 24) = v108;
                v111 = *(_OWORD *)(v106 + 88);
                v112 = *(_OWORD *)(v106 + 104);
                v113 = *(_OWORD *)(v106 + 120);
                *(_OWORD *)(v105 + 136) = *(_OWORD *)(v106 + 136);
                *(_OWORD *)(v105 + 120) = v113;
                *(_OWORD *)(v105 + 104) = v112;
                *(_OWORD *)(v105 + 88) = v111;
                v114 = *(_OWORD *)(v106 + 152);
                v115 = *(_OWORD *)(v106 + 168);
                v116 = *(_OWORD *)(v106 + 184);
                *(_QWORD *)(v105 + 200) = *(_QWORD *)(v106 + 200);
                *(_OWORD *)(v105 + 184) = v116;
                *(_OWORD *)(v105 + 168) = v115;
                *(_OWORD *)(v105 + 152) = v114;
                v105 -= 208;
                v106 -= 208;
                v107 += 208;
              }
              while (v107);
            }
            v103 -= 208 * v104;
            if (v103 == v57)
              break;
            v117 = *--v69;
            v70 = v117;
            v71 = v117 + 3952;
          }
        }
        goto LABEL_129;
      }
    }
    if (v54 != v57)
    {
      while (1)
      {
        v169 = 0x4EC4EC4EC4EC4EC5 * ((v71 - v70) >> 4);
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - v57) >> 4) < v169)
          v169 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v54 - v57) >> 4);
        if (v169)
        {
          v170 = v71 - 208;
          v171 = v54 - 208;
          v172 = -208 * v169;
          do
          {
            *(_QWORD *)v170 = *(_QWORD *)v171;
            *(_OWORD *)(v170 + 8) = *(_OWORD *)(v171 + 8);
            v173 = *(_OWORD *)(v171 + 24);
            v174 = *(_OWORD *)(v171 + 40);
            v175 = *(_OWORD *)(v171 + 56);
            *(_OWORD *)(v170 + 72) = *(_OWORD *)(v171 + 72);
            *(_OWORD *)(v170 + 56) = v175;
            *(_OWORD *)(v170 + 40) = v174;
            *(_OWORD *)(v170 + 24) = v173;
            v176 = *(_OWORD *)(v171 + 88);
            v177 = *(_OWORD *)(v171 + 104);
            v178 = *(_OWORD *)(v171 + 120);
            *(_OWORD *)(v170 + 136) = *(_OWORD *)(v171 + 136);
            *(_OWORD *)(v170 + 120) = v178;
            *(_OWORD *)(v170 + 104) = v177;
            *(_OWORD *)(v170 + 88) = v176;
            v179 = *(_OWORD *)(v171 + 152);
            v180 = *(_OWORD *)(v171 + 168);
            v181 = *(_OWORD *)(v171 + 184);
            *(_QWORD *)(v170 + 200) = *(_QWORD *)(v171 + 200);
            *(_OWORD *)(v170 + 184) = v181;
            *(_OWORD *)(v170 + 168) = v180;
            *(_OWORD *)(v170 + 152) = v179;
            v170 -= 208;
            v171 -= 208;
            v172 += 208;
          }
          while (v172);
        }
        v54 -= 208 * v169;
        if (v54 == v57)
          break;
        v182 = *--v69;
        v70 = v182;
        v71 = v182 + 3952;
      }
    }
LABEL_129:
    *(_QWORD *)(a1 + 728) -= v56;
    v183 = *(_QWORD *)(a1 + 720) + v56;
    *(_QWORD *)(a1 + 720) = v183;
    if (v183 >= 0x26)
    {
      v184 = *(void ***)(a1 + 696);
      do
      {
        operator delete(*v184);
        v184 = (void **)(*(_QWORD *)(a1 + 696) + 8);
        *(_QWORD *)(a1 + 696) = v184;
        v185 = *(_QWORD *)(a1 + 720) - 19;
        *(_QWORD *)(a1 + 720) = v185;
      }
      while (v185 >= 0x26);
    }
    goto LABEL_149;
  }
  v54 = *v53 + 208 * (v7 % 0x13);
  v55 = v383;
  if (v10 != v54)
    goto LABEL_34;
LABEL_41:
  v56 = 0;
  if (v9 == v6)
    goto LABEL_42;
LABEL_35:
  v57 = *v53 + 208 * (v7 % 0x13);
  if (v54 != v57)
    goto LABEL_36;
LABEL_43:
  v59 = 0;
  v61 = (uint64_t *)(v6 + 8 * (v7 / 0x13));
  if (v56 >= 1)
    goto LABEL_48;
LABEL_149:
  v204 = *(_QWORD **)v55;
  v205 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v55 + 8) - **(_QWORD **)v55) >> 3);
  v207 = *(_QWORD *)(*(_QWORD *)v55 + 304);
  v206 = *(_QWORD *)(*(_QWORD *)v55 + 312);
  if (v205 == (v206 - v207) >> 2)
    goto LABEL_152;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VFusionUtil.h", 168, (uint64_t)"bundle.num_frames() == state_ids.size()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_308;
  }
  v207 = v204[38];
  v206 = v204[39];
  v205 = (v206 - v207) >> 2;
LABEL_152:
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v204[4] - v204[3]) >> 7) != v205)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VFusionUtil.h", 169, (uint64_t)"bundle.vision_sensor_models().size() == state_ids.size()", 56, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v207 = v204[38];
      v206 = v204[39];
      v205 = (v206 - v207) >> 2;
      goto LABEL_155;
    }
    goto LABEL_308;
  }
LABEL_155:
  if (v205 != (uint64_t)(v204[42] - v204[41]) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VFusionUtil.h", 170, (uint64_t)"state_timestamps.size() == state_ids.size()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_308;
    }
    v207 = v204[38];
    v206 = v204[39];
  }
  if ((uint64_t)(v204[45] - v204[44]) >> 3 != (v206 - v207) >> 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VFusionUtil.h", 172, (uint64_t)"!original_state_timestamps || original_state_timestamps->size() == state_ids.size()", 83, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_308:
    abort();
  }
  v208 = *v204;
  if (v204[1] != *v204)
  {
    v209 = 0;
    v367 = v204;
    while (1)
    {
      v211 = *(int *)(v204[38] + 4 * v209);
      v212 = *(_QWORD *)(v204[41] + 8 * v209);
      v213 = *(_QWORD *)(v204[44] + 8 * v209);
      v214 = (uint64_t *)(v208 + 168 * v209);
      v216 = *v214;
      v215 = v214[1];
      v218 = v214[2];
      v217 = v214[3];
      v219 = v214[4];
      v220 = v214[5];
      v222 = v214[6];
      v221 = v214[7];
      v224 = v214[18];
      v223 = v214[19];
      v225 = v214[20];
      v226 = v214[8];
      v227 = v214[9];
      v229 = v214[10];
      v228 = v214[11];
      v231 = v214[12];
      v230 = v214[13];
      v233 = v214[14];
      v232 = v214[15];
      v235 = v214[16];
      v234 = v214[17];
      v236 = *(_QWORD *)(a1 + 728);
      if (!v236)
        break;
      v237 = *(_QWORD *)(a1 + 720);
      v238 = *(char **)(a1 + 696);
      v239 = *(char **)(a1 + 704);
      if (*(_QWORD *)(*(_QWORD *)&v238[8 * ((v236 + v237 - 1) / 0x13)] + 208 * ((v236 + v237 - 1) % 0x13)) < v211)
        goto LABEL_173;
      if (v239 == v238)
      {
LABEL_180:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VFusionUtil.h", 226, (uint64_t)"status", 6, (uint64_t)"Tried to insert an item with ID < last that was not present", 59, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_308;
        }
      }
      else
      {
        v240 = &v238[8 * (v237 / 0x13)];
        v241 = *(char **)v240;
        v242 = (char *)(*(_QWORD *)v240 + 208 * (v237 % 0x13));
        v243 = *(_QWORD *)&v238[8 * ((v237 + v236) / 0x13)] + 208 * ((v237 + v236) % 0x13);
        while (1)
        {
          if (v242 == (char *)v243)
            goto LABEL_180;
          if (*(_QWORD *)v242 == v211)
            break;
          v242 += 208;
          if (v242 - v241 == 3952)
          {
            v244 = (char *)*((_QWORD *)v240 + 1);
            v240 += 8;
            v241 = v244;
            v242 = v244;
          }
        }
        *((_QWORD *)v242 + 1) = v211;
        *((_QWORD *)v242 + 2) = v212;
        *((_QWORD *)v242 + 3) = 0;
        *((_QWORD *)v242 + 4) = v216;
        *((_QWORD *)v242 + 5) = v215;
        *((_QWORD *)v242 + 6) = v218;
        *((_QWORD *)v242 + 7) = v217;
        *((_QWORD *)v242 + 8) = v219;
        *((_QWORD *)v242 + 9) = v220;
        *((_QWORD *)v242 + 10) = v222;
        *((_QWORD *)v242 + 11) = v221;
        *((_QWORD *)v242 + 12) = v226;
        *((_QWORD *)v242 + 13) = v227;
        *((_QWORD *)v242 + 14) = v229;
        *((_QWORD *)v242 + 15) = v228;
        *((_QWORD *)v242 + 16) = v231;
        *((_QWORD *)v242 + 17) = v230;
        *((_QWORD *)v242 + 18) = v233;
        *((_QWORD *)v242 + 19) = v232;
        *((_QWORD *)v242 + 20) = v235;
        *((_QWORD *)v242 + 21) = v234;
        *((_QWORD *)v242 + 22) = v224;
        *((_QWORD *)v242 + 23) = v223;
        *((_QWORD *)v242 + 24) = v225;
        *((_QWORD *)v242 + 25) = v213;
      }
LABEL_163:
      ++v209;
      v208 = *v204;
      if (v209 >= 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v204[1] - *v204) >> 3))
        goto LABEL_285;
    }
    v238 = *(char **)(a1 + 696);
    v237 = *(_QWORD *)(a1 + 720);
    v239 = *(char **)(a1 + 704);
LABEL_173:
    v245 = v239 - v238;
    v246 = (v239 - v238) >> 3;
    if (v239 == v238)
      v247 = 0;
    else
      v247 = 19 * v246 - 1;
    v248 = v237 + v236;
    if (v247 != v237 + v236)
    {
LABEL_162:
      v210 = (unint64_t *)(*(_QWORD *)&v238[8 * (v248 / 0x13)] + 208 * (v248 % 0x13));
      *v210 = v211;
      v210[1] = v211;
      v210[2] = v212;
      v210[3] = 0;
      v210[4] = v216;
      v210[5] = v215;
      v210[6] = v218;
      v210[7] = v217;
      v210[8] = v219;
      v210[9] = v220;
      v210[10] = v222;
      v210[11] = v221;
      v210[12] = v226;
      v210[13] = v227;
      v210[14] = v229;
      v210[15] = v228;
      v210[16] = v231;
      v210[17] = v230;
      v210[18] = v233;
      v210[19] = v232;
      v210[20] = v235;
      v210[21] = v234;
      v210[22] = v224;
      v210[23] = v223;
      v210[24] = v225;
      v210[25] = v213;
      ++*(_QWORD *)(a1 + 728);
      goto LABEL_163;
    }
    v382 = v225;
    v384 = *(_QWORD *)(v204[44] + 8 * v209);
    v380 = v224;
    v381 = v223;
    v378 = v235;
    v379 = v234;
    v376 = v233;
    v377 = v232;
    v374 = v231;
    v375 = v230;
    v372 = v221;
    v373 = v228;
    v370 = v222;
    v371 = v229;
    v369 = v227;
    v368 = *(int *)(v204[38] + 4 * v209);
    if (v237 >= 0x13)
    {
      *(_QWORD *)(a1 + 720) = v237 - 19;
      v250 = v238 + 8;
      v249 = *(_QWORD *)v238;
      *(_QWORD *)(a1 + 696) = v238 + 8;
      if (v239 != *(char **)(a1 + 712))
      {
LABEL_269:
        *(_QWORD *)v239 = v249;
        *(_QWORD *)(a1 + 704) += 8;
        goto LABEL_270;
      }
      v261 = *(char **)(a1 + 688);
      if (v250 > v261)
      {
        v262 = (v250 - v261) >> 3;
        if (v262 >= -1)
          v263 = v262 + 1;
        else
          v263 = v262 + 2;
        v264 = v263 >> 1;
        v265 = &v250[-8 * (v263 >> 1)];
        v266 = v239 - v250;
        if (v239 != v250)
        {
          memmove(&v250[-8 * (v263 >> 1)], v250, v239 - v250);
          v227 = v369;
          v222 = v370;
          v229 = v371;
          v221 = v372;
          v228 = v373;
          v231 = v374;
          v230 = v375;
          v233 = v376;
          v232 = v377;
          v235 = v378;
          v234 = v379;
          v224 = v380;
          v223 = v381;
          v225 = v382;
          v213 = v384;
          v239 = *(char **)(a1 + 696);
        }
        v267 = &v239[-8 * v264];
        v239 = &v265[v266];
        *(_QWORD *)(a1 + 704) = &v265[v266];
        *(_QWORD *)(a1 + 696) = v267;
        goto LABEL_269;
      }
      v270 = (v239 - v261) >> 2;
      if (v239 == v261)
        v270 = 1;
      if (v270 >> 61)
        goto LABEL_307;
      v271 = v270 >> 2;
      v272 = 8 * v270;
      v273 = (char *)operator new(8 * v270);
      v274 = &v273[8 * v271];
      v275 = v239 - v250;
      v202 = v239 == v250;
      v239 = v274;
      v225 = v382;
      v213 = v384;
      v224 = v380;
      v223 = v381;
      v235 = v378;
      v234 = v379;
      v233 = v376;
      v232 = v377;
      v231 = v374;
      v230 = v375;
      v221 = v372;
      v228 = v373;
      v222 = v370;
      v229 = v371;
      v227 = v369;
      if (!v202)
      {
        v239 = &v274[v275 & 0xFFFFFFFFFFFFFFF8];
        v276 = v275 - 8;
        if ((unint64_t)(v275 - 8) < 0x38)
        {
          v277 = &v273[8 * v271];
          do
          {
LABEL_266:
            v329 = *(_QWORD *)v250;
            v250 += 8;
            *(_QWORD *)v277 = v329;
            v277 += 8;
          }
          while (v277 != v239);
          goto LABEL_267;
        }
        v277 = &v273[8 * v271];
        if ((unint64_t)(v277 - v250) < 0x20)
          goto LABEL_266;
        v323 = (v276 >> 3) + 1;
        v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
        v277 = &v274[v324];
        v250 += v324;
        v325 = (__int128 *)(v238 + 24);
        v326 = &v273[8 * v271 + 16];
        v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v328 = *v325;
          *((_OWORD *)v326 - 1) = *(v325 - 1);
          *(_OWORD *)v326 = v328;
          v325 += 2;
          v326 += 32;
          v327 -= 4;
        }
        while (v327);
        if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_266;
      }
LABEL_267:
      *(_QWORD *)(a1 + 688) = v273;
      *(_QWORD *)(a1 + 696) = v274;
      *(_QWORD *)(a1 + 704) = v239;
      *(_QWORD *)(a1 + 712) = &v273[v272];
      if (v261)
      {
        operator delete(v261);
        v227 = v369;
        v222 = v370;
        v229 = v371;
        v221 = v372;
        v228 = v373;
        v231 = v374;
        v230 = v375;
        v233 = v376;
        v232 = v377;
        v235 = v378;
        v234 = v379;
        v224 = v380;
        v223 = v381;
        v225 = v382;
        v213 = v384;
        v239 = *(char **)(a1 + 704);
      }
      goto LABEL_269;
    }
    v251 = *(char **)(a1 + 712);
    v252 = *(char **)(a1 + 688);
    if (v246 < (unint64_t)((v251 - v252) >> 3))
    {
      v253 = operator new(0xF70uLL);
      v254 = v253;
      if (v251 != v239)
      {
        *(_QWORD *)v239 = v253;
        *(_QWORD *)(a1 + 704) += 8;
        v204 = v367;
        v225 = v382;
        v213 = v384;
        v224 = v380;
        v223 = v381;
        v235 = v378;
        v234 = v379;
        v233 = v376;
        v232 = v377;
        v231 = v374;
        v230 = v375;
        v221 = v372;
        v228 = v373;
        v222 = v370;
        v229 = v371;
        v227 = v369;
LABEL_270:
        v238 = *(char **)(a1 + 696);
        v248 = *(_QWORD *)(a1 + 728) + *(_QWORD *)(a1 + 720);
        v211 = v368;
        goto LABEL_162;
      }
      v225 = v382;
      v213 = v384;
      v224 = v380;
      v223 = v381;
      v235 = v378;
      v234 = v379;
      v233 = v376;
      v232 = v377;
      v231 = v374;
      v230 = v375;
      v221 = v372;
      v228 = v373;
      v222 = v370;
      v229 = v371;
      v227 = v369;
      if (v238 == v252)
      {
        v300 = (v251 - v238) >> 2;
        if (v239 == v238)
          v300 = 1;
        if (v300 >> 61)
          goto LABEL_307;
        v301 = (v300 + 3) >> 2;
        v302 = 8 * v300;
        v303 = (char *)operator new(8 * v300);
        v269 = &v303[8 * v301];
        v304 = v269;
        v204 = v367;
        v225 = v382;
        v213 = v384;
        v224 = v380;
        v223 = v381;
        v235 = v378;
        v234 = v379;
        v233 = v376;
        v232 = v377;
        v231 = v374;
        v230 = v375;
        v221 = v372;
        v228 = v373;
        v222 = v370;
        v229 = v371;
        v227 = v369;
        if (v239 != v238)
        {
          v304 = &v269[8 * v246];
          v305 = &v303[8 * v301];
          v306 = v238;
          if ((unint64_t)(v245 - 8) < 0x38)
            goto LABEL_315;
          v305 = &v303[8 * v301];
          v306 = v238;
          if ((unint64_t)(v305 - v238) < 0x20)
            goto LABEL_315;
          v307 = ((unint64_t)(v245 - 8) >> 3) + 1;
          v308 = 8 * (v307 & 0x3FFFFFFFFFFFFFFCLL);
          v305 = &v269[v308];
          v306 = &v238[v308];
          v309 = (__int128 *)(v238 + 16);
          v310 = &v303[8 * v301 + 16];
          v311 = v307 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v312 = *v309;
            *((_OWORD *)v310 - 1) = *(v309 - 1);
            *(_OWORD *)v310 = v312;
            v309 += 2;
            v310 += 32;
            v311 -= 4;
          }
          while (v311);
          if (v307 != (v307 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_315:
            do
            {
              v313 = *(_QWORD *)v306;
              v306 += 8;
              *(_QWORD *)v305 = v313;
              v305 += 8;
            }
            while (v305 != v304);
          }
        }
        *(_QWORD *)(a1 + 688) = v303;
        *(_QWORD *)(a1 + 696) = v269;
        *(_QWORD *)(a1 + 704) = v304;
        *(_QWORD *)(a1 + 712) = &v303[v302];
        if (v238)
        {
          operator delete(v238);
          v227 = v369;
          v222 = v370;
          v229 = v371;
          v221 = v372;
          v228 = v373;
          v231 = v374;
          v230 = v375;
          v233 = v376;
          v232 = v377;
          v235 = v378;
          v234 = v379;
          v224 = v380;
          v223 = v381;
          v225 = v382;
          v213 = v384;
          v269 = *(char **)(a1 + 696);
        }
      }
      else
      {
        v269 = v238;
        v204 = v367;
      }
      *((_QWORD *)v269 - 1) = v254;
      v314 = *(char **)(a1 + 696);
      *(_QWORD *)(a1 + 696) = v314 - 8;
      v315 = *((_QWORD *)v314 - 1);
      *(_QWORD *)(a1 + 696) = v314;
      v316 = *(char **)(a1 + 704);
      if (v316 != *(char **)(a1 + 712))
      {
LABEL_284:
        *(_QWORD *)v316 = v315;
        *(_QWORD *)(a1 + 704) += 8;
        goto LABEL_270;
      }
      v317 = *(char **)(a1 + 688);
      if (v314 > v317)
      {
        v318 = (v314 - v317) >> 3;
        if (v318 >= -1)
          v319 = v318 + 1;
        else
          v319 = v318 + 2;
        v320 = v319 >> 1;
        v321 = &v314[-8 * (v319 >> 1)];
        v322 = v316 - v314;
        if (v316 != v314)
        {
          memmove(&v314[-8 * (v319 >> 1)], v314, v316 - v314);
          v227 = v369;
          v222 = v370;
          v229 = v371;
          v221 = v372;
          v228 = v373;
          v231 = v374;
          v230 = v375;
          v233 = v376;
          v232 = v377;
          v235 = v378;
          v234 = v379;
          v224 = v380;
          v223 = v381;
          v225 = v382;
          v213 = v384;
          v314 = *(char **)(a1 + 696);
        }
        v316 = &v321[v322];
        *(_QWORD *)(a1 + 704) = &v321[v322];
        *(_QWORD *)(a1 + 696) = &v314[-8 * v320];
        goto LABEL_284;
      }
      v330 = (v316 - v317) >> 2;
      if (v316 == v317)
        v330 = 1;
      if (v330 >> 61)
        goto LABEL_307;
      v331 = v330 >> 2;
      v332 = 8 * v330;
      v333 = (char *)operator new(8 * v330);
      v334 = &v333[8 * v331];
      v335 = v316 - v314;
      v202 = v316 == v314;
      v316 = v334;
      v225 = v382;
      v213 = v384;
      v224 = v380;
      v223 = v381;
      v235 = v378;
      v234 = v379;
      v233 = v376;
      v232 = v377;
      v231 = v374;
      v230 = v375;
      v221 = v372;
      v228 = v373;
      v222 = v370;
      v229 = v371;
      v227 = v369;
      if (!v202)
      {
        v316 = &v334[v335 & 0xFFFFFFFFFFFFFFF8];
        v336 = v335 - 8;
        if ((unint64_t)(v335 - 8) < 0x38)
        {
          v337 = &v333[8 * v331];
          do
          {
LABEL_281:
            v345 = *(_QWORD *)v314;
            v314 += 8;
            *(_QWORD *)v337 = v345;
            v337 += 8;
          }
          while (v337 != v316);
          goto LABEL_282;
        }
        v337 = &v333[8 * v331];
        if ((unint64_t)(v337 - v314) < 0x20)
          goto LABEL_281;
        v338 = (v336 >> 3) + 1;
        v339 = 8 * (v338 & 0x3FFFFFFFFFFFFFFCLL);
        v337 = &v334[v339];
        v340 = &v314[v339];
        v341 = (__int128 *)(v314 + 16);
        v342 = &v333[8 * v331 + 16];
        v343 = v338 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v344 = *v341;
          *((_OWORD *)v342 - 1) = *(v341 - 1);
          *(_OWORD *)v342 = v344;
          v341 += 2;
          v342 += 32;
          v343 -= 4;
        }
        while (v343);
        v314 = v340;
        if (v338 != (v338 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_281;
      }
LABEL_282:
      *(_QWORD *)(a1 + 688) = v333;
      *(_QWORD *)(a1 + 696) = v334;
      *(_QWORD *)(a1 + 704) = v316;
      *(_QWORD *)(a1 + 712) = &v333[v332];
      if (v317)
      {
        operator delete(v317);
        v227 = v369;
        v222 = v370;
        v229 = v371;
        v221 = v372;
        v228 = v373;
        v231 = v374;
        v230 = v375;
        v233 = v376;
        v232 = v377;
        v235 = v378;
        v234 = v379;
        v224 = v380;
        v223 = v381;
        v225 = v382;
        v213 = v384;
        v316 = *(char **)(a1 + 704);
      }
      goto LABEL_284;
    }
    if (v251 == v252)
      v255 = 1;
    else
      v255 = (v251 - v252) >> 2;
    if (v255 >> 61)
      goto LABEL_307;
    v256 = (char *)operator new(8 * v255);
    v257 = operator new(0xF70uLL);
    v258 = &v256[8 * v246];
    v259 = &v256[8 * v255];
    v225 = v382;
    v213 = v384;
    v224 = v380;
    v223 = v381;
    v235 = v378;
    v234 = v379;
    v233 = v376;
    v232 = v377;
    v231 = v374;
    v230 = v375;
    v221 = v372;
    v228 = v373;
    v222 = v370;
    v229 = v371;
    v227 = v369;
    if (v246 == v255)
    {
      v365 = v257;
      v204 = v367;
      if (v245 < 1)
      {
        if (v239 == v238)
          v278 = 1;
        else
          v278 = v245 >> 2;
        if (v278 >> 61)
          sub_20E877A38();
        v258 = (char *)operator new(8 * v278);
        v259 = &v258[8 * v278];
        operator delete(v256);
        v239 = *(char **)(a1 + 704);
        v238 = *(char **)(a1 + 696);
        v256 = v258;
        v225 = v382;
        v213 = v384;
        v224 = v380;
        v223 = v381;
        v235 = v378;
        v234 = v379;
        v233 = v376;
        v232 = v377;
        v231 = v374;
        v230 = v375;
        v221 = v372;
        v228 = v373;
        v222 = v370;
        v229 = v371;
        v227 = v369;
      }
      else
      {
        v260 = v246 + 2;
        if (v246 >= -1)
          v260 = v246 + 1;
        v258 -= 8 * (v260 >> 1);
      }
      *(_QWORD *)v258 = v365;
      v268 = v258 + 8;
      if (v239 == v238)
        goto LABEL_218;
    }
    else
    {
      v204 = v367;
      *(_QWORD *)v258 = v257;
      v268 = v258 + 8;
      if (v239 == v238)
      {
LABEL_218:
        v279 = *(void **)(a1 + 688);
        *(_QWORD *)(a1 + 688) = v256;
        *(_QWORD *)(a1 + 696) = v258;
        *(_QWORD *)(a1 + 704) = v268;
        *(_QWORD *)(a1 + 712) = v259;
        if (v279)
        {
          operator delete(v279);
          v227 = v369;
          v222 = v370;
          v229 = v371;
          v221 = v372;
          v228 = v373;
          v231 = v374;
          v230 = v375;
          v233 = v376;
          v232 = v377;
          v235 = v378;
          v234 = v379;
          v224 = v380;
          v223 = v381;
          v225 = v382;
          v213 = v384;
        }
        goto LABEL_270;
      }
    }
    do
    {
      if (v258 == v256)
      {
        if (v268 >= v259)
        {
          if (v259 == v258)
            v285 = 1;
          else
            v285 = (v259 - v258) >> 2;
          if (v285 >> 61)
            sub_20E877A38();
          v286 = (char *)operator new(8 * v285);
          v256 = v286;
          v287 = (v285 + 3) >> 2;
          v280 = &v286[8 * v287];
          v281 = v280;
          v288 = v268 - v258;
          if (v268 != v258)
          {
            v281 = &v280[v288 & 0xFFFFFFFFFFFFFFF8];
            v289 = v288 - 8;
            v290 = &v286[8 * v287];
            v291 = v258;
            if (v289 < 0x38)
              goto LABEL_316;
            v292 = 8 * v287;
            v290 = &v286[8 * v287];
            v291 = v258;
            if ((unint64_t)(v290 - v258) < 0x20)
              goto LABEL_316;
            v293 = (v289 >> 3) + 1;
            v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
            v290 = &v280[v294];
            v291 = &v258[v294];
            v295 = (__int128 *)(v258 + 16);
            v296 = &v286[v292 + 16];
            v297 = v293 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v298 = *v295;
              *((_OWORD *)v296 - 1) = *(v295 - 1);
              *(_OWORD *)v296 = v298;
              v295 += 2;
              v296 += 32;
              v297 -= 4;
            }
            while (v297);
            if (v293 != (v293 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_316:
              do
              {
                v299 = *(_QWORD *)v291;
                v291 += 8;
                *(_QWORD *)v290 = v299;
                v290 += 8;
              }
              while (v290 != v281);
            }
          }
          v259 = &v286[8 * v285];
          operator delete(v258);
          v225 = v382;
          v213 = v384;
          v224 = v380;
          v223 = v381;
          v235 = v378;
          v234 = v379;
          v233 = v376;
          v232 = v377;
          v231 = v374;
          v230 = v375;
          v221 = v372;
          v228 = v373;
          v222 = v370;
          v229 = v371;
          v227 = v369;
        }
        else
        {
          v283 = (v259 - v268) >> 3;
          if (v283 >= -1)
            v284 = v283 + 1;
          else
            v284 = v283 + 2;
          v281 = &v268[8 * (v284 >> 1)];
          v280 = &v258[8 * (v284 >> 1)];
          if (v268 == v258)
          {
            v256 = v268;
          }
          else
          {
            memmove(&v258[8 * (v284 >> 1)], v258, v268 - v258);
            v227 = v369;
            v222 = v370;
            v229 = v371;
            v221 = v372;
            v228 = v373;
            v231 = v374;
            v230 = v375;
            v233 = v376;
            v232 = v377;
            v235 = v378;
            v234 = v379;
            v224 = v380;
            v223 = v381;
            v225 = v382;
            v213 = v384;
            v256 = v258;
          }
        }
      }
      else
      {
        v280 = v258;
        v281 = v268;
      }
      v282 = *((_QWORD *)v239 - 1);
      v239 -= 8;
      *((_QWORD *)v280 - 1) = v282;
      v258 = v280 - 8;
      v268 = v281;
    }
    while (v239 != *(char **)(a1 + 696));
    goto LABEL_218;
  }
LABEL_285:
  v346 = *(char **)(a1 + 672);
  v347 = *(char **)(a1 + 664);
  v348 = *(_QWORD *)(a1 + 312);
  if (0x8F5C28F5C28F5C29 * ((v346 - v347) >> 3) > v348)
  {
    v349 = &v346[-200 * v348];
    if (v347 != v349)
    {
      v350 = 200 * v348;
      if (v346 != v349)
        memmove(*(void **)(a1 + 664), v349, 200 * v348);
      *(_QWORD *)(a1 + 672) = &v347[v350];
    }
  }
  v351 = **a2;
  if (*(_BYTE *)(v351 + 772) && *(_BYTE *)(v351 + 3704))
  {
    v352 = *(uint64_t **)(v351 + 3688);
    if (v352)
    {
      v353 = *(_QWORD **)(a1 + 648);
      if ((unint64_t)v353 < *(_QWORD *)(a1 + 656))
      {
LABEL_294:
        *v353 = 0;
        v353[1] = 0;
        v353[2] = 0;
        v354 = *v352;
        v355 = v352[1];
        v356 = v355 - *v352;
        if (v355 != *v352)
        {
          v357 = 0x6DB6DB6DB6DB6DB7 * (v356 >> 3);
          if (v357 >= 0x492492492492493)
            sub_20EABADD4();
          v358 = (char *)operator new(v356);
          v359 = 0;
          *v353 = v358;
          v353[1] = v358;
          v353[2] = &v358[56 * v357];
          do
          {
            v360 = v354 + v359;
            v361 = &v358[v359];
            *(_QWORD *)v361 = *(_QWORD *)(v354 + v359);
            v362 = *(_OWORD *)(v354 + v359 + 8);
            *((_QWORD *)v361 + 3) = *(_QWORD *)(v354 + v359 + 24);
            *(_OWORD *)(v361 + 8) = v362;
            v363 = *(_OWORD *)(v354 + v359 + 32);
            *((_QWORD *)v361 + 6) = *(_QWORD *)(v354 + v359 + 48);
            *((_OWORD *)v361 + 2) = v363;
            v359 += 56;
          }
          while (v360 + 56 != v355);
          v353[1] = &v358[v359];
        }
        v364 = (char *)(v353 + 3);
        *(_QWORD *)(a1 + 648) = v353 + 3;
        goto LABEL_304;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/MapAndTrajectoryOptimizerNode.cpp", 73, (uint64_t)"odometry_metadata.vio_frame_data_bundle.value()", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_308;
      }
      if (!*(_BYTE *)(v351 + 3704))
        sub_20E866B34();
      v352 = *(uint64_t **)(v351 + 3688);
      v353 = *(_QWORD **)(a1 + 648);
      if ((unint64_t)v353 < *(_QWORD *)(a1 + 656))
        goto LABEL_294;
    }
    v364 = sub_20EBCBC5C((char **)(a1 + 640), v352);
LABEL_304:
    *(_QWORD *)(a1 + 648) = v364;
  }
}

void sub_20EBCB4A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 648) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20EBCB4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(__p);
  operator delete(v10);
  _Unwind_Resume(a1);
}

void sub_20EBCB4E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EBCB4F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EBCB50C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EBCB524(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t **v5;
  void **v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  void **v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  _QWORD *v67;
  _BYTE *v68;
  uint64_t v70;
  void **v71;
  _BYTE v72[16];
  void *__p;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  int v77;
  void *v78[6];
  void *v79;
  void *v80;

  v3 = a3;
  v4 = (_BYTE *)(a1 + 160);
  if (!*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_DWORD *)(a3 + 56) = 1065353216;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    return;
  }
  v5 = a2;
  v71 = (void **)(a1 + 664);
  v7 = *(void ***)(a1 + 696);
  v8 = *(void ***)(a1 + 704);
  if (v8 == v7)
  {
    *(_QWORD *)(a1 + 728) = 0;
    v54 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 720);
    v10 = (unint64_t)v7[v9 / 0x13] + 208 * (v9 % 0x13);
    v11 = (_QWORD *)(a1 + 728);
    v12 = (unint64_t)v7[(*(_QWORD *)(a1 + 728) + v9) / 0x13] + 208 * ((*(_QWORD *)(a1 + 728) + v9) % 0x13);
    if (v10 != v12)
    {
      v67 = (_QWORD *)(a1 + 728);
      v68 = (_BYTE *)(a1 + 160);
      v70 = v3;
      v13 = *(_OWORD **)(a1 + 672);
      v14 = &v7[v9 / 0x13];
      while (1)
      {
        v15 = (_OWORD *)(v10 + 8);
        v16 = *(_QWORD *)(a1 + 680);
        if ((unint64_t)v13 < v16)
        {
          *v13 = *v15;
          v17 = *(_OWORD *)(v10 + 24);
          v18 = *(_OWORD *)(v10 + 40);
          v19 = *(_OWORD *)(v10 + 72);
          v13[3] = *(_OWORD *)(v10 + 56);
          v13[4] = v19;
          v13[1] = v17;
          v13[2] = v18;
          v20 = *(_OWORD *)(v10 + 88);
          v21 = *(_OWORD *)(v10 + 104);
          v22 = *(_OWORD *)(v10 + 136);
          v13[7] = *(_OWORD *)(v10 + 120);
          v13[8] = v22;
          v13[5] = v20;
          v13[6] = v21;
          v23 = *(_OWORD *)(v10 + 152);
          v24 = *(_OWORD *)(v10 + 168);
          v25 = *(_OWORD *)(v10 + 184);
          *((_QWORD *)v13 + 24) = *(_QWORD *)(v10 + 200);
          v13[10] = v24;
          v13[11] = v25;
          v13[9] = v23;
          v13 = (_OWORD *)((char *)v13 + 200);
          *(_QWORD *)(a1 + 672) = v13;
          v10 += 208;
          if (v10 - (_QWORD)*v14 == 3952)
            goto LABEL_25;
          goto LABEL_5;
        }
        v26 = *v71;
        v27 = 0x8F5C28F5C28F5C29 * (((char *)v13 - (_BYTE *)*v71) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0x147AE147AE147AELL)
          sub_20E867F44();
        v29 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v16 - (_QWORD)v26) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0xA3D70A3D70A3D7)
          v30 = 0x147AE147AE147AELL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 > 0x147AE147AE147AELL)
            sub_20E877A38();
          v31 = (char *)operator new(200 * v30);
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[200 * v27];
        *(_OWORD *)v32 = *v15;
        v33 = *(_OWORD *)(v10 + 24);
        v34 = *(_OWORD *)(v10 + 40);
        v35 = *(_OWORD *)(v10 + 72);
        *((_OWORD *)v32 + 3) = *(_OWORD *)(v10 + 56);
        *((_OWORD *)v32 + 4) = v35;
        *((_OWORD *)v32 + 1) = v33;
        *((_OWORD *)v32 + 2) = v34;
        v36 = *(_OWORD *)(v10 + 88);
        v37 = *(_OWORD *)(v10 + 104);
        v38 = *(_OWORD *)(v10 + 136);
        *((_OWORD *)v32 + 7) = *(_OWORD *)(v10 + 120);
        *((_OWORD *)v32 + 8) = v38;
        *((_OWORD *)v32 + 5) = v36;
        *((_OWORD *)v32 + 6) = v37;
        v39 = *(_OWORD *)(v10 + 152);
        v40 = *(_OWORD *)(v10 + 168);
        v41 = *(_OWORD *)(v10 + 184);
        *((_QWORD *)v32 + 24) = *(_QWORD *)(v10 + 200);
        *((_OWORD *)v32 + 10) = v40;
        *((_OWORD *)v32 + 11) = v41;
        *((_OWORD *)v32 + 9) = v39;
        if (v13 == v26)
        {
          v52 = v13;
          *(_QWORD *)(a1 + 664) = v32;
          v13 = v32 + 200;
          *(_QWORD *)(a1 + 672) = v32 + 200;
          *(_QWORD *)(a1 + 680) = &v31[200 * v30];
          if (v52)
            goto LABEL_23;
        }
        else
        {
          v42 = &v31[200 * v27];
          do
          {
            *(_OWORD *)(v42 - 200) = *(_OWORD *)((char *)v13 - 200);
            v43 = *(_OWORD *)((char *)v13 - 184);
            v44 = *(_OWORD *)((char *)v13 - 168);
            v45 = *(_OWORD *)((char *)v13 - 152);
            *(_OWORD *)(v42 - 136) = *(_OWORD *)((char *)v13 - 136);
            *(_OWORD *)(v42 - 152) = v45;
            *(_OWORD *)(v42 - 168) = v44;
            *(_OWORD *)(v42 - 184) = v43;
            v46 = *(_OWORD *)((char *)v13 - 120);
            v47 = *(_OWORD *)((char *)v13 - 104);
            v48 = *(_OWORD *)((char *)v13 - 88);
            *(_OWORD *)(v42 - 72) = *(_OWORD *)((char *)v13 - 72);
            *(_OWORD *)(v42 - 88) = v48;
            *(_OWORD *)(v42 - 104) = v47;
            *(_OWORD *)(v42 - 120) = v46;
            v49 = *(_OWORD *)((char *)v13 - 56);
            v50 = *(_OWORD *)((char *)v13 - 40);
            v51 = *(_OWORD *)((char *)v13 - 24);
            *((_QWORD *)v42 - 1) = *((_QWORD *)v13 - 1);
            *(_OWORD *)(v42 - 24) = v51;
            *(_OWORD *)(v42 - 40) = v50;
            *(_OWORD *)(v42 - 56) = v49;
            v42 -= 200;
            v13 = (_OWORD *)((char *)v13 - 200);
          }
          while (v13 != v26);
          v52 = *v71;
          *(_QWORD *)(a1 + 664) = v42;
          v13 = v32 + 200;
          *(_QWORD *)(a1 + 672) = v32 + 200;
          *(_QWORD *)(a1 + 680) = &v31[200 * v30];
          if (v52)
LABEL_23:
            operator delete(v52);
        }
        *(_QWORD *)(a1 + 672) = v13;
        v10 += 208;
        if (v10 - (_QWORD)*v14 == 3952)
        {
LABEL_25:
          v53 = (unint64_t)v14[1];
          ++v14;
          v10 = v53;
        }
LABEL_5:
        if (v10 == v12)
        {
          v7 = *(void ***)(a1 + 696);
          v8 = *(void ***)(a1 + 704);
          v5 = a2;
          v3 = v70;
          v11 = v67;
          v4 = v68;
          break;
        }
      }
    }
    *v11 = 0;
    v54 = (char *)v8 - (char *)v7;
    if (v54 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v7 = (void **)(*(_QWORD *)(a1 + 696) + 8);
        *(_QWORD *)(a1 + 696) = v7;
        v54 = *(_QWORD *)(a1 + 704) - (_QWORD)v7;
      }
      while (v54 > 0x10);
    }
  }
  if (v54 >> 3 == 1)
  {
    v55 = 9;
    goto LABEL_37;
  }
  if (v54 >> 3 == 2)
  {
    v55 = 19;
LABEL_37:
    *(_QWORD *)(a1 + 720) = v55;
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20EE71B18((_QWORD *)(a1 + 640), rep, (uint64_t)v78);
  sub_20EE72C4C(v4, (uint64_t)v78, a1 + 336, *v5, rep);
  sub_20EE74504((uint64_t)v4);
  v57 = *v5;
  v72[0] = 0;
  v72[8] = 0;
  sub_20F436790(v57, (uint64_t)v72, (_QWORD *)v3);
  v59 = v75;
  v58 = v76;
  *(_QWORD *)(v3 + 40) = v75;
  v60 = __p;
  v61 = v74;
  *(_QWORD *)(v3 + 24) = __p;
  __p = 0;
  v74 = 0;
  *(_QWORD *)(v3 + 32) = v61;
  *(_QWORD *)(v3 + 48) = v58;
  *(_DWORD *)(v3 + 56) = v77;
  if (v58)
  {
    v62 = v59[1];
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v62 >= v61)
        v62 %= v61;
    }
    else
    {
      v62 &= v61 - 1;
    }
    v60[v62] = v3 + 40;
    v75 = 0;
    v76 = 0;
  }
  sub_20FD33BBC(v78, (_QWORD *)(v3 + 64));
  v63 = (char *)v75;
  if (v75)
  {
    do
    {
      v65 = *(char **)v63;
      v66 = (void *)*((_QWORD *)v63 + 5);
      if (v66)
      {
        *((_QWORD *)v63 + 6) = v66;
        operator delete(v66);
      }
      if (v63[39] < 0)
        operator delete(*((void **)v63 + 2));
      operator delete(v63);
      v63 = v65;
    }
    while (v65);
  }
  v64 = __p;
  __p = 0;
  if (v64)
    operator delete(v64);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v78[0])
  {
    v78[1] = v78[0];
    operator delete(v78[0]);
  }
}

void sub_20EBCBA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E9B91F8(v9);
  v11 = *(void **)v8;
  if (*(_QWORD *)v8)
  {
    *(_QWORD *)(v8 + 8) = v11;
    operator delete(v11);
  }
  sub_20E9B91F8((uint64_t)va);
  sub_20EBCBAD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EBCBAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20EBCBAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBCBAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20EBCBAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCBAD8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20EBCBB18(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_20EBCB524(a1 - 56, a2, a3);
}

void sub_20EBCBB24(uint64_t a1)
{
  sub_20EBCBEBC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBCBB48(uint64_t a1)
{
  return sub_20EBCBEBC(a1 - 56);
}

void sub_20EBCBB50(uint64_t a1)
{
  sub_20EBCBEBC(a1 - 56);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBCBB98(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 9;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 19;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EBCBC5C(char **a1, uint64_t *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  __int128 v31;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)&v31 + 1) = v11;
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v14 = *a2;
  v13 = a2[1];
  v15 = v13 - v14;
  if (v13 != v14)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 3);
    if (v16 >= 0x492492492492493)
      sub_20EABADD4();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *(_QWORD *)v10 = v17;
    *v12 = v17;
    *((_QWORD *)v10 + 2) = &v17[56 * v16];
    do
    {
      v19 = v14 + v18;
      v20 = &v17[v18];
      *(_QWORD *)v20 = *(_QWORD *)(v14 + v18);
      v21 = *(_OWORD *)(v14 + v18 + 8);
      *((_QWORD *)v20 + 3) = *(_QWORD *)(v14 + v18 + 24);
      *(_OWORD *)(v20 + 8) = v21;
      v22 = *(_OWORD *)(v14 + v18 + 32);
      *((_QWORD *)v20 + 6) = *(_QWORD *)(v14 + v18 + 48);
      *((_OWORD *)v20 + 2) = v22;
      v18 += 56;
    }
    while (v19 + 56 != v13);
    *v12 = &v17[v18];
  }
  v23 = v10 + 24;
  *(_QWORD *)&v31 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v23;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v24 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v25 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v25;
      v10 -= 24;
      *((_QWORD *)v24 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v26 = a1[1];
    *a1 = v10;
    *(_OWORD *)(a1 + 1) = v31;
    v23 = (char *)v31;
    if (v26 != v3)
    {
      v27 = v26;
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 3);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *((_QWORD *)v26 - 2) = v28;
          operator delete(v28);
        }
        v26 = v27;
      }
      while (v27 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v23;
}

void sub_20EBCBE98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCBEBC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = &off_24C9C8398;
  *(_QWORD *)(a1 + 56) = &unk_24C9C83C8;
  sub_20EBCBB98(a1 + 688);
  v2 = *(void **)(a1 + 664);
  if (v2)
  {
    *(_QWORD *)(a1 + 672) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 640);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 648);
    v5 = *(void **)(a1 + 640);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 648);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 640);
    }
    *(_QWORD *)(a1 + 648) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C9C8460;
  *(_QWORD *)(a1 + 56) = &unk_24C9C8488;
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_13:
      *(_QWORD *)(a1 + 56) = off_24C9C84D8;
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_20;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 112));
  *(_QWORD *)(a1 + 56) = off_24C9C84D8;
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_14:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)a1 = off_24C9C84B0;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_22:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_23;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 64));
  *(_QWORD *)a1 = off_24C9C84B0;
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_22;
LABEL_16:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_23:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBCC03C(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x212BC5E10]();
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(v2 + 144) = 0;
  *(_BYTE *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 224) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 160) = xmmword_21031E488;
  *(_OWORD *)(v2 + 176) = unk_21031E498;
  *(_OWORD *)(v2 + 192) = xmmword_21031E4A8;
  *(_OWORD *)(v2 + 208) = unk_21031E4B8;
  *(_QWORD *)(v2 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 280) = unk_21031E500;
  *(_OWORD *)(v2 + 264) = xmmword_21031E4F0;
  *(_OWORD *)(v2 + 248) = unk_21031E4E0;
  *(_OWORD *)(v2 + 232) = xmmword_21031E4D0;
  *(_QWORD *)(v2 + 368) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 304) = xmmword_21031E518;
  *(_OWORD *)(v2 + 320) = unk_21031E528;
  *(_OWORD *)(v2 + 336) = xmmword_21031E538;
  *(_OWORD *)(v2 + 352) = unk_21031E548;
  *(_QWORD *)(v2 + 440) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 408) = xmmword_21031E580;
  *(_OWORD *)(v2 + 424) = unk_21031E590;
  *(_OWORD *)(v2 + 376) = xmmword_21031E560;
  *(_OWORD *)(v2 + 392) = *(_OWORD *)algn_21031E570;
  *(_QWORD *)(v2 + 512) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 480) = xmmword_21031E5C8;
  *(_OWORD *)(v2 + 496) = unk_21031E5D8;
  *(_OWORD *)(v2 + 448) = xmmword_21031E5A8;
  *(_OWORD *)(v2 + 464) = unk_21031E5B8;
  *(_QWORD *)(v2 + 584) = 0x3FF0000000000000;
  *(_OWORD *)(v2 + 552) = xmmword_21031E610;
  *(_OWORD *)(v2 + 568) = unk_21031E620;
  *(_OWORD *)(v2 + 520) = xmmword_21031E5F0;
  *(_OWORD *)(v2 + 536) = unk_21031E600;
  *(_QWORD *)(v2 + 648) = 0;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_OWORD *)(v2 + 616) = 0u;
  *(_OWORD *)(v2 + 600) = 0u;
  *(_QWORD *)(v2 + 592) = 0x3FF0000000000000;
  *(_QWORD *)(v2 + 624) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v2 + 656) = _Q1;
  *(_OWORD *)(v2 + 672) = _Q1;
  *(_OWORD *)(v2 + 688) = _Q1;
  *(_QWORD *)(v2 + 704) = 0x3FF0000000000000;
  *(_WORD *)(v2 + 760) = 0;
  *(_OWORD *)(v2 + 728) = 0u;
  *(_OWORD *)(v2 + 744) = 0u;
  *(_OWORD *)(v2 + 712) = 0u;
  sub_20EA96B70(v2 + 768);
  sub_20E8EC534(a1 + 1856);
  *(_BYTE *)(a1 + 3280) = 0;
  *(_BYTE *)(a1 + 3288) = 0;
  *(_BYTE *)(a1 + 3296) = 0;
  *(_BYTE *)(a1 + 3304) = 0;
  *(_BYTE *)(a1 + 3312) = 0;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  return a1;
}

void sub_20EBCC1BC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  _QWORD *v2;

  sub_20E86A6B8(v2);
  std::recursive_mutex::~recursive_mutex(v1);
  _Unwind_Resume(a1);
}

void sub_20EBCC1D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::~recursive_mutex(v1);
  _Unwind_Resume(a1);
}

void sub_20EBCC1EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 3360);
  *(_QWORD *)(a1 + 3360) = 0;
  if (v2)
  {
    v3 = sub_20EBD0CE0(v2);
    MEMORY[0x212BC6398](v3, 0x10E2C40CE9CDB17);
  }
  v4 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = 0;
  if (v4)
  {
    sub_20E86872C(v4 + 704, *(_QWORD **)(v4 + 712));
    MEMORY[0x212BC6398](v4, 0x1020C4035D8B18FLL);
  }
  v5 = *(_QWORD *)(a1 + 3240);
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 3216);
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 3184);
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *(_QWORD *)(a1 + 3160);
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = *(void **)(a1 + 2784);
  if (v9)
  {
    *(_QWORD *)(a1 + 2792) = v9;
    operator delete(v9);
  }
  sub_20E86A6B8((_QWORD *)(a1 + 768));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)a1);
}

BOOL sub_20EBCC2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  BOOL v76;
  void *v77;
  _DWORD *v78;
  _DWORD *v79;
  std::logic_error *exception;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::recursive_mutex *v114;
  std::recursive_mutex *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t *v120;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v122;
  int v123;
  const char *v124;
  int v125;
  const char *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  _BYTE __p[48];
  size_t v133;
  unint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  sub_20EBCD274(&v129);
  if (**(int **)(v129 + 56) > 3)
    goto LABEL_91;
  v6 = *(unsigned __int8 *)(v129 + 72);
  v7 = sub_20E8C31DC(v129, "OSLogSurrogateAppender", 1, 0);
  v8 = v7;
  if (!v6 && v7 == 0)
    goto LABEL_91;
  v120 = &v129;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v122 = std::chrono::system_clock::now().__d_.__rep_;
  v123 = 3;
  v124 = "unknown file";
  v125 = 67;
  v127 = 0;
  v128 = 0;
  v126 = "unknown function";
  v10 = v129;
  if (*(char *)(v129 + 39) < 0)
  {
    v12 = *(const char **)(v129 + 16);
    v11 = *(_QWORD *)(v129 + 24);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v129 + 39);
    v12 = (const char *)(*v120 + 16);
  }
  v116 = *v120 + 16;
  v118 = a3;
  v117 = *(_DWORD *)(a2 + 1040);
  v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A50F >= 0)
    v14 = (const char *)&xmmword_254A4A4F8;
  else
    v14 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v15 = byte_254A4A50F;
  else
    v15 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  *(_QWORD *)__p = os_log_create(v14, v12);
  v16 = &__p[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v114 = (std::recursive_mutex *)v12;
    v17 = v8;
    v18 = v10;
    v19 = v6;
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    v16 = operator new(v20 + 1);
    *(_QWORD *)&__p[16] = v15;
    *(_QWORD *)&__p[24] = v21 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v16;
    v6 = v19;
    v10 = v18;
    v8 = v17;
    v12 = (const char *)v114;
    goto LABEL_23;
  }
  __p[31] = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  __p[32] = 1;
  v22 = &__p[40];
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v11 >= 0x17)
  {
    v24 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v24 = v11 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    v133 = v11;
    v134 = v25 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v22;
    a3 = v118;
  }
  else
  {
    HIBYTE(v134) = v11;
    a3 = v118;
    if (!v11)
    {
      __p[40] = 0;
      LOBYTE(v135) = 1;
      v23 = *(NSObject **)__p;
      if ((SHIBYTE(v134) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v12, v11);
  v22[v11] = 0;
  LOBYTE(v135) = 1;
  v23 = *(NSObject **)__p;
  if ((SHIBYTE(v134) & 0x80000000) == 0)
  {
LABEL_28:
    if (!__p[32])
      goto LABEL_37;
LABEL_35:
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_37;
  }
LABEL_34:
  operator delete(*(void **)&__p[40]);
  if (__p[32])
    goto LABEL_35;
LABEL_37:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v8 && *(_QWORD *)(v8 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    *(_QWORD *)__p = v27;
    *(_QWORD *)&__p[8] = v27;
    *(_QWORD *)&__p[16] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    memset(&__p[24], 0, 24);
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = *(_QWORD *)__p;
    v34 = (_DWORD *)_os_log_pack_fill();
    *v34 = 67109120;
    v34[1] = v117;
    v35 = operator new();
    v36 = *(unsigned __int8 *)(v10 + 39);
    v37 = v116;
    if ((v36 & 0x80u) != 0)
    {
      v37 = *(_QWORD *)(v10 + 16);
      v36 = *(_QWORD *)(v10 + 24);
    }
    *(_QWORD *)v35 = v33;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v35 + 24) = *(_OWORD *)&__p[24];
    *(_OWORD *)&__p[24] = 0uLL;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 48) = v36;
    *(_BYTE *)(v35 + 56) = 1;
    v130 = 0;
    v131 = (void **)v35;
    (*(void (**)(_QWORD, void ***))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v131);
    v38 = (uint64_t)v131;
    v131 = 0;
    a3 = v118;
    if (v38)
    {
      v39 = *(std::__shared_weak_count **)(v38 + 32);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)(v38 + 16);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
      v45 = v130;
      v130 = 0;
      if (v45)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 32);
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = *(std::__shared_weak_count **)(v45 + 16);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
      }
    }
    v52 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v53 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v56 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v117;
    v58 = (void *)_os_log_send_and_compose_impl();
    if (v58)
      free(v58);
  }
  if (v6)
  {
    sub_20E8C003C((uint64_t)&v120, "Create the predictor with the given algorithm %u", *(_DWORD *)(a2 + 1040));
    sub_20E863570((uint64_t)&v120);
  }
  sub_20E863570((uint64_t)&v120);
  v59 = v128;
  if (v128)
  {
    v60 = (unint64_t *)&v128->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_91:
  kdebug_trace();
  if (!a3)
    return a3 != 0;
  v119 = *(unsigned __int8 *)(a1 + 2900);
  if (*(_BYTE *)(a1 + 2900))
  {
    std::recursive_mutex::lock((std::recursive_mutex *)a1);
    v115 = (std::recursive_mutex *)a1;
  }
  else
  {
    v115 = 0;
  }
  memcpy((void *)(a1 + 64), (const void *)(a3 + 24), 0x220uLL);
  v62 = *(_OWORD *)(a3 + 568);
  v63 = *(_OWORD *)(a3 + 584);
  v64 = *(_OWORD *)(a3 + 600);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a3 + 616);
  *(_OWORD *)(a1 + 624) = v63;
  *(_OWORD *)(a1 + 640) = v64;
  *(_OWORD *)(a1 + 608) = v62;
  v65 = *(_OWORD *)(a3 + 624);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a3 + 640);
  *(_OWORD *)(a1 + 664) = v65;
  v66 = *(_QWORD *)(a3 + 664);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a3 + 648);
  *(_QWORD *)(a1 + 704) = v66;
  v67 = *(_QWORD *)(a3 + 688);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a3 + 672);
  *(_QWORD *)(a1 + 728) = v67;
  v68 = *(_QWORD *)(a3 + 712);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a3 + 696);
  *(_QWORD *)(a1 + 752) = v68;
  *(_WORD *)(a1 + 760) = *(_WORD *)(a3 + 720);
  memset(__p, 0, 24);
  v69 = *(_DWORD **)a3;
  v70 = *(_DWORD **)(a3 + 8);
  v120 = (uint64_t *)__p;
  if (v69 == v70)
  {
    v71 = 0;
    v72 = 0;
  }
  else
  {
    do
    {
      LODWORD(v131) = *v69;
      sub_20EA9AB98((uint64_t *)&v120, &v131);
      v69 += 272;
    }
    while (v69 != v70);
    v71 = *(_QWORD *)__p;
    v72 = *(_DWORD **)&__p[8];
    if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
    {
      v73 = *(_DWORD **)__p;
      while (*v73)
      {
        if (++v73 == *(_DWORD **)&__p[8])
          goto LABEL_104;
      }
      v72 = v73;
    }
  }
LABEL_104:
  v120 = 0;
  rep = 0;
  v122 = 0;
  v74 = *(_DWORD **)a3;
  v75 = *(_DWORD **)(a3 + 8);
  v131 = (void **)&v120;
  if (v74 == v75)
  {
    v76 = v71 == 0;
    v77 = *(void **)__p;
    if (!*(_QWORD *)__p)
      goto LABEL_110;
  }
  else
  {
    do
    {
      LODWORD(v130) = *v74;
      sub_20EA9AB98((uint64_t *)&v131, &v130);
      v74 += 272;
    }
    while (v74 != v75);
    v76 = v72 == (_DWORD *)rep;
    if (v120)
    {
      rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v120;
      operator delete(v120);
    }
    v77 = *(void **)__p;
    if (!*(_QWORD *)__p)
      goto LABEL_110;
  }
  *(_QWORD *)&__p[8] = v77;
  operator delete(v77);
LABEL_110:
  if (!v76)
  {
    v79 = *(_DWORD **)a3;
    v78 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v78)
    {
      while (*v79)
      {
        v79 += 272;
        if (v79 == v78)
          goto LABEL_114;
      }
    }
    if (v79 == v78)
    {
LABEL_114:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    *(_QWORD *)(a1 + 768) = *(_QWORD *)v79;
    sub_20E92D63C(a1 + 776, (uint64_t *)v79 + 1);
    *(_QWORD *)(a1 + 1296) = *((_QWORD *)v79 + 66);
    sub_20E92D63C(a1 + 1304, (uint64_t *)v79 + 67);
    v81 = *((_OWORD *)v79 + 66);
    *(_OWORD *)(a1 + 1833) = *(_OWORD *)((char *)v79 + 1065);
    *(_OWORD *)(a1 + 1824) = v81;
  }
  memcpy((void *)(a1 + 1856), (const void *)a2, 0x356uLL);
  *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a2 + 856);
  v83 = *(_OWORD *)(a2 + 888);
  v82 = *(_OWORD *)(a2 + 904);
  v84 = *(_OWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 2776) = *(_QWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 2744) = v83;
  *(_OWORD *)(a1 + 2760) = v82;
  *(_OWORD *)(a1 + 2728) = v84;
  if (a1 + 1856 != a2)
    sub_20E86A1AC(a1 + 2784, *(char **)(a2 + 928), *(char **)(a2 + 936), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 936) - *(_QWORD *)(a2 + 928)) >> 3));
  v85 = *(_OWORD *)(a2 + 952);
  v86 = *(_OWORD *)(a2 + 968);
  v87 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 2840) = *(_OWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 2856) = v87;
  *(_OWORD *)(a1 + 2808) = v85;
  *(_OWORD *)(a1 + 2824) = v86;
  v88 = *(_OWORD *)(a2 + 1128);
  v90 = *(_OWORD *)(a2 + 1080);
  v89 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 2968) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 2984) = v88;
  *(_OWORD *)(a1 + 2936) = v90;
  *(_OWORD *)(a1 + 2952) = v89;
  v91 = *(_OWORD *)(a2 + 1192);
  v93 = *(_OWORD *)(a2 + 1144);
  v92 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 3032) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 3048) = v91;
  *(_OWORD *)(a1 + 3000) = v93;
  *(_OWORD *)(a1 + 3016) = v92;
  v94 = *(_OWORD *)(a2 + 1016);
  v95 = *(_OWORD *)(a2 + 1032);
  v96 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 2920) = v96;
  *(_OWORD *)(a1 + 2872) = v94;
  *(_OWORD *)(a1 + 2888) = v95;
  sub_20E869F44(a1 + 3064, a2 + 1208);
  *(_BYTE *)(a1 + 3272) = *(_BYTE *)(a2 + 1416);
  v97 = *(_QWORD *)(a2 + 1024);
  v98 = *(_QWORD *)(a2 + 1032);
  if (*(_BYTE *)(a1 + 2900))
  {
    std::recursive_mutex::lock((std::recursive_mutex *)a1);
    *(_QWORD *)(a1 + 3336) = v97;
    *(_QWORD *)(a1 + 3344) = v98;
    std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  }
  else
  {
    *(_QWORD *)(a1 + 3336) = v97;
    *(_QWORD *)(a1 + 3344) = v98;
  }
  v99 = operator new();
  memcpy((void *)v99, (const void *)(a3 + 24), 0x210uLL);
  v100 = *(_OWORD *)(a3 + 600);
  *(_OWORD *)(v99 + 560) = *(_OWORD *)(a3 + 584);
  *(_OWORD *)(v99 + 576) = v100;
  *(_QWORD *)(v99 + 592) = *(_QWORD *)(a3 + 616);
  v101 = *(_OWORD *)(a3 + 568);
  *(_OWORD *)(v99 + 528) = *(_OWORD *)(a3 + 552);
  *(_OWORD *)(v99 + 544) = v101;
  *(_OWORD *)(v99 + 600) = *(_OWORD *)(a3 + 624);
  *(_QWORD *)(v99 + 616) = *(_QWORD *)(a3 + 640);
  *(_QWORD *)(v99 + 640) = *(_QWORD *)(a3 + 664);
  *(_OWORD *)(v99 + 624) = *(_OWORD *)(a3 + 648);
  *(_OWORD *)(v99 + 648) = *(_OWORD *)(a3 + 672);
  *(_QWORD *)(v99 + 664) = *(_QWORD *)(a3 + 688);
  *(_OWORD *)(v99 + 672) = *(_OWORD *)(a3 + 696);
  *(_QWORD *)(v99 + 688) = *(_QWORD *)(a3 + 712);
  *(_WORD *)(v99 + 696) = *(_WORD *)(a3 + 720);
  sub_20EA940EC((uint64_t *)a3, (uint64_t **)(v99 + 704));
  v102 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = v99;
  if (v102)
  {
    sub_20E86872C(v102 + 704, *(_QWORD **)(v102 + 712));
    MEMORY[0x212BC6398](v102, 0x1020C4035D8B18FLL);
  }
  v103 = *(_QWORD *)(a1 + 120);
  __asm { FMOV            V1.2D, #1.0 }
  v135 = _Q1;
  v136 = 0x3FF0000000000000;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v140 = _Q1;
  v143 = 0;
  v146 = 0;
  v142 = 0u;
  v145 = 0u;
  v148 = 0u;
  v141 = 0x3FF0000000000000;
  v144 = 0x3FF0000000000000;
  v149 = 0;
  v147 = 0x3FF0000000000000;
  v152 = 0;
  v154 = 0u;
  v150 = _Q1;
  v151 = 0u;
  v155 = 0;
  v156 = 0x3FF0000000000000;
  v153 = 0x3FF0000000000000;
  v108 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&__p[16] = v108;
  *(_OWORD *)&__p[32] = *(_OWORD *)(a1 + 96);
  v133 = *(_QWORD *)(a1 + 112);
  v134 = v103;
  if (*(_BYTE *)(a2 + 856))
  {
    v109 = (uint64_t *)operator new();
    sub_20F1D0DB4((uint64_t)v109, (uint64_t)__p, (unsigned __int8 *)a2);
  }
  else
  {
    v109 = (uint64_t *)operator new();
    sub_20F1AFA8C((uint64_t)v109, (uint64_t)__p);
  }
  v110 = operator new();
  v120 = v109;
  sub_20EAFA504(v110, (uint64_t *)&v120, (char *)a2);
  if (v120)
    (*(void (**)(uint64_t *))(*v120 + 8))(v120);
  v111 = *(_QWORD *)(a1 + 3360);
  *(_QWORD *)(a1 + 3360) = v110;
  if (v111)
  {
    v112 = sub_20EBD0CE0(v111);
    MEMORY[0x212BC6398](v112, 0x10E2C40CE9CDB17);
  }
  if (v119)
    std::recursive_mutex::unlock(v115);
  return a3 != 0;
}

void sub_20EBCCFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EBCD008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E8C4(&a26);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EBCD03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v7, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBCD068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBCD07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, uint64_t a12, uint64_t a13, int a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EBCD248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a27)
    JUMPOUT(0x20EBCD254);
  JUMPOUT(0x20EBCD224);
}

void sub_20EBCD274(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BA20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA20))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5BA18);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5BA20);
  }
  *a1 = qword_254A5BA18;
}

void sub_20EBCD310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BA20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BA20);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCD368(std::recursive_mutex *this, uint64_t a2)
{
  int v4;
  std::recursive_mutex *v5;
  uint64_t *v6;
  uint64_t v8;
  double *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  std::recursive_mutex *v93;
  void *v94;
  char *v95;
  char v96;
  _QWORD __src[135];
  uint64_t v98;
  uint64_t v99;
  void *object[140];

  object[137] = *(void **)MEMORY[0x24BDAC8D0];
  if (!a2 || !*(_QWORD *)&this[52].__m_.__opaque[16] || !*(_QWORD *)&this[52].__m_.__opaque[24])
    return 0;
  v4 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v5 = this;
    v6 = *(uint64_t **)(a2 + 8);
    if (!v6)
      goto LABEL_25;
  }
  else
  {
    v5 = 0;
    v6 = *(uint64_t **)(a2 + 8);
    if (!v6)
    {
LABEL_25:
      v13 = 0.0;
      goto LABEL_26;
    }
  }
  v8 = *v6;
  v9 = (double *)v6[4];
  v10 = (std::__shared_weak_count *)v6[5];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v9)
  {
    v13 = *(double *)(v8 + 32);
    goto LABEL_16;
  }
  v13 = *v9;
  if (*v9 >= *(double *)(v8 + 40))
  {
LABEL_16:
    v14 = 1;
    goto LABEL_17;
  }
  v14 = 0;
  v13 = 0.0;
LABEL_17:
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v14)
    v13 = COERCE_DOUBLE(3);
  if ((v14 & 1) == 0)
    goto LABEL_25;
LABEL_26:
  sub_20EBCD274(&v98);
  if (**(int **)(v98 + 56) <= 2)
  {
    v17 = *(unsigned __int8 *)(v98 + 72);
    v18 = sub_20E8C31DC(v98, "OSLogSurrogateAppender", 1, 0);
    v19 = v18;
    if (v17 || v18 != 0)
    {
      v93 = v5;
      __src[0] = &v98;
      __src[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __src[2] = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__src[3]) = 2;
      __src[4] = "unknown file";
      LODWORD(__src[5]) = 112;
      __src[7] = 0;
      __src[8] = 0;
      __src[6] = "unknown function";
      v21 = (const char *)(v98 + 16);
      v91 = v98 + 16;
      v92 = v98;
      if (*(char *)(v98 + 39) < 0)
      {
        v21 = *(const char **)(v98 + 16);
        v22 = *(_QWORD *)(v98 + 24);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v98 + 39);
      }
      v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v24 = (const char *)&xmmword_254A4A4F8;
      else
        v24 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v25 = byte_254A4A50F;
      else
        v25 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      object[0] = os_log_create(v24, v21);
      v26 = &object[1];
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v25 >= 0x17)
      {
        v90 = v4;
        v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v27 = v25 | 7;
        v28 = v27 + 1;
        v26 = (void **)operator new(v27 + 1);
        object[3] = (void *)(v28 | 0x8000000000000000);
        object[1] = v26;
        object[2] = (void *)v25;
        v4 = v90;
      }
      else
      {
        HIBYTE(object[3]) = v25;
        if (!v25)
        {
LABEL_49:
          *((_BYTE *)v26 + v25) = 0;
          LOBYTE(object[4]) = 1;
          v29 = &object[5];
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v30 = v22 | 7;
            v31 = v30 + 1;
            v29 = (void **)operator new(v30 + 1);
            object[7] = (void *)(v31 | 0x8000000000000000);
            object[5] = v29;
            object[6] = (void *)v22;
          }
          else
          {
            HIBYTE(object[7]) = v22;
            if (!v22)
              goto LABEL_57;
          }
          memmove(v29, v21, v22);
LABEL_57:
          *((_BYTE *)v29 + v22) = 0;
          LOBYTE(object[8]) = 1;
          v32 = object[0];
          if (SHIBYTE(object[7]) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v19 && *(_QWORD *)(v19 + 24))
          {
            v33 = _os_log_pack_size();
            v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
            v35 = (std::__shared_weak_count *)operator new();
            v36 = v35;
            v35->__shared_owners_ = 0;
            v37 = (unint64_t *)&v35->__shared_owners_;
            v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v35->__shared_weak_owners_ = 0;
            v35[1].__vftable = v34;
            object[0] = v34;
            object[1] = v34;
            object[2] = v35;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            memset(&object[3], 0, 24);
            do
              v39 = __ldaxr(v37);
            while (__stlxr(v39 - 1, v37));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v36);
            }
            v40 = object[0];
            v41 = _os_log_pack_fill();
            *(_DWORD *)v41 = 134217984;
            *(double *)(v41 + 4) = v13;
            v42 = (char *)operator new();
            v43 = *(unsigned __int8 *)(v92 + 39);
            v44 = v91;
            if ((v43 & 0x80u) != 0)
            {
              v44 = *(_QWORD *)(v92 + 16);
              v43 = *(_QWORD *)(v92 + 24);
            }
            *(_QWORD *)v42 = v40;
            *(_OWORD *)(v42 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v42 + 24) = *(_OWORD *)&object[3];
            object[3] = 0;
            object[4] = 0;
            *((_QWORD *)v42 + 5) = v44;
            *((_QWORD *)v42 + 6) = v43;
            v42[56] = 2;
            v99 = 0;
            v94 = v42;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v19 + 24) + 40))(*(_QWORD *)(v19 + 24), &v94);
            v45 = v94;
            v94 = 0;
            if (v45)
            {
              v46 = (std::__shared_weak_count *)*((_QWORD *)v45 + 4);
              if (v46)
              {
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              v49 = (std::__shared_weak_count *)*((_QWORD *)v45 + 2);
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              MEMORY[0x212BC6398](v45, 0x10F0C40B62ED6C6);
              v52 = v99;
              v99 = 0;
              if (v52)
              {
                v53 = *(std::__shared_weak_count **)(v52 + 32);
                if (v53)
                {
                  v54 = (unint64_t *)&v53->__shared_owners_;
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                v56 = *(std::__shared_weak_count **)(v52 + 16);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
              }
            }
            v59 = (std::__shared_weak_count *)object[4];
            v5 = v93;
            if (object[4])
            {
              v60 = (unint64_t *)((char *)object[4] + 8);
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            v62 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v63 = (unint64_t *)((char *)object[2] + 8);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
          }
          else
          {
            os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG);
            LODWORD(object[0]) = 134217984;
            *(void **)((char *)object + 4) = *(void **)&v13;
            v65 = (void *)_os_log_send_and_compose_impl();
            v5 = v93;
            if (v65)
              free(v65);
          }
          if (v17)
          {
            sub_20E8C003C((uint64_t)__src, "CV3DPosePrediction received SLAM state at timestamp %f", v13);
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v66 = (std::__shared_weak_count *)__src[8];
          if (__src[8])
          {
            v67 = (unint64_t *)(__src[8] + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          goto LABEL_116;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_49;
    }
  }
LABEL_116:
  kdebug_trace();
  v69 = *(_QWORD *)(a2 + 8);
  v70 = *(_QWORD *)v69;
  v71 = *(std::__shared_weak_count **)(v69 + 40);
  object[0] = *(void **)(v69 + 32);
  object[1] = v71;
  if (v71)
  {
    v72 = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  sub_20F3E82C0((uint64_t)__src, v70, (uint64_t)object);
  if (v71)
  {
    v74 = (unint64_t *)&v71->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  this[51].__m_.__opaque[8] |= (BYTE1(__src[75]) | LOBYTE(__src[116])) != 0;
  v76 = *(unint64_t **)(a2 + 16);
  object[0] = *(void **)(a2 + 8);
  object[1] = v76;
  if (v76)
  {
    v77 = v76 + 1;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  memcpy(&object[2], __src, 0x431uLL);
  sub_20EAFC00C(*(_QWORD *)&this[52].__m_.__opaque[24], (uint64_t)object, (uint64_t)&v94);
  sub_20EBCDED4((uint64_t)this, (uint64_t)&v94);
  if (v96)
  {
    v79 = (char *)v94;
    if (v94)
    {
      v80 = v95;
      if (v95 != v94)
      {
        do
        {
          v81 = (std::__shared_weak_count *)*((_QWORD *)v80 - 1);
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v84 = (std::__shared_weak_count *)*((_QWORD *)v80 - 3);
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v80 -= 32;
        }
        while (v80 != v79);
        v79 = (char *)v94;
      }
      operator delete(v79);
    }
  }
  v87 = (std::__shared_weak_count *)object[1];
  if (object[1])
  {
    v88 = (unint64_t *)((char *)object[1] + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (v4)
    std::recursive_mutex::unlock(v5);
  return 1;
}

void sub_20EBCDD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  if (LOBYTE(STACK[0x4B8]) && SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  if (a5)
    std::recursive_mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCDED4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  double v25;
  double v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  const char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  const char *v76;
  uint64_t v77;
  int v78;
  _QWORD v79[3];
  int v80;
  const char *v81;
  int v82;
  const char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  uint64_t v87[2];
  void *__p[2];
  char v89;
  char v90;
  uint64_t v91;
  uint64_t (**v92)();
  _BYTE v93[1080];
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  int v104;
  _BYTE v105[24];
  __int128 v106;
  void *v107[2];
  unint64_t v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    if (*(_QWORD *)(result + 3328))
    {
      v3 = *(uint64_t **)a2;
      v4 = *(uint64_t **)(a2 + 8);
      if (*(uint64_t **)a2 != v4)
      {
        v74 = result;
        v75 = *(uint64_t **)(a2 + 8);
        while (1)
        {
          v5 = (std::__shared_weak_count *)v3[1];
          v87[0] = *v3;
          v87[1] = (uint64_t)v5;
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
          }
          v8 = sub_210106EC8(v87);
          if (v5)
          {
            v9 = (unint64_t *)&v5->__shared_owners_;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
              break;
          }
          v11 = v3[2];
          v93[0] = 0;
          v94 = -1;
          v12 = *(unsigned int *)(v11 + 1080);
          if ((_DWORD)v12 != -1)
            goto LABEL_14;
LABEL_15:
          v95 = *(_OWORD *)(v11 + 1088);
          v13 = *(_OWORD *)(v11 + 1104);
          v14 = *(_OWORD *)(v11 + 1120);
          v15 = *(_OWORD *)(v11 + 1152);
          v98 = *(_OWORD *)(v11 + 1136);
          v99 = v15;
          v96 = v13;
          v97 = v14;
          v16 = *(_OWORD *)(v11 + 1168);
          v17 = *(_OWORD *)(v11 + 1184);
          v18 = *(_OWORD *)(v11 + 1200);
          v103 = *(_BYTE *)(v11 + 1216);
          v101 = v17;
          v102 = v18;
          v100 = v16;
          v104 = 1;
          v92 = off_24C9C3BA8;
          sub_20EBCD274(&v86);
          if (**(int **)(v86 + 56) <= 2)
          {
            v19 = *(unsigned __int8 *)(v86 + 72);
            v20 = sub_20E8C31DC(v86, "OSLogSurrogateAppender", 1, 0);
            v21 = v20;
            if (v19 || v20)
            {
              v79[0] = &v86;
              v79[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v79[2] = std::chrono::system_clock::now().__d_.__rep_;
              v80 = 2;
              v81 = "unknown file";
              v82 = 417;
              v83 = "unknown function";
              v84 = 0;
              v85 = 0;
              v22 = *(_QWORD *)v79[0];
              v23 = (const char *)(*(_QWORD *)v79[0] + 16);
              v76 = v23;
              if (*(char *)(*(_QWORD *)v79[0] + 39) < 0)
              {
                v23 = *(const char **)(v22 + 16);
                v24 = *(_QWORD *)(v22 + 24);
              }
              else
              {
                v24 = *(unsigned __int8 *)(*(_QWORD *)v79[0] + 39);
              }
              v77 = *(_QWORD *)v79[0];
              v25 = *((double *)&v101 + 1);
              v26 = *(double *)&v102;
              v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)__p);
                sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
                if (v90 && v89 < 0)
                  operator delete(__p[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v2 = v74;
              }
              if (byte_254A4A50F >= 0)
                v28 = (const char *)&xmmword_254A4A4F8;
              else
                v28 = (const char *)xmmword_254A4A4F8;
              if (byte_254A4A50F >= 0)
                v29 = byte_254A4A50F;
              else
                v29 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
              *(_QWORD *)v105 = os_log_create(v28, v23);
              if (v29 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v78 = v19;
              if (v29 >= 0x17)
              {
                v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v31 = v29 | 7;
                v32 = v31 + 1;
                v30 = operator new(v31 + 1);
                *(_QWORD *)&v105[16] = v29;
                *(_QWORD *)&v106 = v32 | 0x8000000000000000;
                *(_QWORD *)&v105[8] = v30;
                v2 = v74;
              }
              else
              {
                BYTE7(v106) = v29;
                v30 = &v105[8];
                if (!v29)
                {
LABEL_38:
                  v30[v29] = 0;
                  BYTE8(v106) = 1;
                  if (v24 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v24 >= 0x17)
                  {
                    v35 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v24 | 7) != 0x17)
                      v35 = v24 | 7;
                    v36 = v35 + 1;
                    v33 = (void **)operator new(v35 + 1);
                    v107[1] = (void *)v24;
                    v108 = v36 | 0x8000000000000000;
                    v107[0] = v33;
                  }
                  else
                  {
                    HIBYTE(v108) = v24;
                    v33 = v107;
                    if (!v24)
                    {
                      LOBYTE(v107[0]) = 0;
                      v109 = 1;
                      v34 = *(NSObject **)v105;
                      if ((SHIBYTE(v108) & 0x80000000) == 0)
                        goto LABEL_42;
LABEL_48:
                      operator delete(v107[0]);
                      if (BYTE8(v106))
                        goto LABEL_49;
                      goto LABEL_51;
                    }
                  }
                  memmove(v33, v23, v24);
                  *((_BYTE *)v33 + v24) = 0;
                  v109 = 1;
                  v34 = *(NSObject **)v105;
                  if (SHIBYTE(v108) < 0)
                    goto LABEL_48;
LABEL_42:
                  if (BYTE8(v106))
                  {
LABEL_49:
                    if (SBYTE7(v106) < 0)
                      operator delete(*(void **)&v105[8]);
                  }
LABEL_51:
                  if (*(_QWORD *)v105)
                    os_release(*(void **)v105);
                  v37 = v25 + v26;
                  if (v21 && *(_QWORD *)(v21 + 24))
                  {
                    v38 = _os_log_pack_size();
                    v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
                    v40 = (std::__shared_weak_count *)operator new();
                    v41 = v40;
                    v40->__shared_owners_ = 0;
                    v42 = (unint64_t *)&v40->__shared_owners_;
                    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v40->__shared_weak_owners_ = 0;
                    v40[1].__vftable = v39;
                    *(_QWORD *)v105 = v39;
                    *(_QWORD *)&v105[8] = v39;
                    *(_QWORD *)&v105[16] = v40;
                    do
                      v43 = __ldxr(v42);
                    while (__stxr(v43 + 1, v42));
                    v106 = 0uLL;
                    v107[0] = 0;
                    do
                      v44 = __ldaxr(v42);
                    while (__stlxr(v44 - 1, v42));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v41);
                    }
                    v45 = *(_QWORD *)v105;
                    v46 = _os_log_pack_fill();
                    *(_DWORD *)v46 = 134217984;
                    *(double *)(v46 + 4) = v37;
                    v47 = (char *)operator new();
                    v48 = *(unsigned __int8 *)(v77 + 39);
                    v49 = v76;
                    if ((v48 & 0x80u) != 0)
                    {
                      v49 = *(const char **)(v77 + 16);
                      v48 = *(_QWORD *)(v77 + 24);
                    }
                    *(_QWORD *)v47 = v45;
                    *(_OWORD *)(v47 + 8) = *(_OWORD *)&v105[8];
                    *(_QWORD *)&v105[8] = 0;
                    *(_QWORD *)&v105[16] = 0;
                    *(_OWORD *)(v47 + 24) = v106;
                    v106 = 0uLL;
                    *((_QWORD *)v47 + 5) = v49;
                    *((_QWORD *)v47 + 6) = v48;
                    v47[56] = 2;
                    v91 = 0;
                    __p[0] = v47;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), __p);
                    v50 = __p[0];
                    __p[0] = 0;
                    if (v50)
                    {
                      v51 = (std::__shared_weak_count *)*((_QWORD *)v50 + 4);
                      if (v51)
                      {
                        v52 = (unint64_t *)&v51->__shared_owners_;
                        do
                          v53 = __ldaxr(v52);
                        while (__stlxr(v53 - 1, v52));
                        if (!v53)
                        {
                          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                          std::__shared_weak_count::__release_weak(v51);
                        }
                      }
                      v54 = (std::__shared_weak_count *)*((_QWORD *)v50 + 2);
                      if (v54)
                      {
                        v55 = (unint64_t *)&v54->__shared_owners_;
                        do
                          v56 = __ldaxr(v55);
                        while (__stlxr(v56 - 1, v55));
                        if (!v56)
                        {
                          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                          std::__shared_weak_count::__release_weak(v54);
                        }
                      }
                      MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
                      v57 = v91;
                      v91 = 0;
                      if (v57)
                      {
                        v58 = *(std::__shared_weak_count **)(v57 + 32);
                        if (v58)
                        {
                          v59 = (unint64_t *)&v58->__shared_owners_;
                          do
                            v60 = __ldaxr(v59);
                          while (__stlxr(v60 - 1, v59));
                          if (!v60)
                          {
                            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                            std::__shared_weak_count::__release_weak(v58);
                          }
                        }
                        v61 = *(std::__shared_weak_count **)(v57 + 16);
                        if (v61)
                        {
                          v62 = (unint64_t *)&v61->__shared_owners_;
                          do
                            v63 = __ldaxr(v62);
                          while (__stlxr(v63 - 1, v62));
                          if (!v63)
                          {
                            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                            std::__shared_weak_count::__release_weak(v61);
                          }
                        }
                        MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
                      }
                    }
                    v64 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
                    v4 = v75;
                    if (*((_QWORD *)&v106 + 1))
                    {
                      v65 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
                      do
                        v66 = __ldaxr(v65);
                      while (__stlxr(v66 - 1, v65));
                      if (!v66)
                      {
                        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                        std::__shared_weak_count::__release_weak(v64);
                      }
                    }
                    v67 = *(std::__shared_weak_count **)&v105[16];
                    if (*(_QWORD *)&v105[16])
                    {
                      v68 = (unint64_t *)(*(_QWORD *)&v105[16] + 8);
                      do
                        v69 = __ldaxr(v68);
                      while (__stlxr(v69 - 1, v68));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)v105 = 134217984;
                    *(double *)&v105[4] = v37;
                    v70 = (void *)_os_log_send_and_compose_impl();
                    v4 = v75;
                    if (v70)
                      free(v70);
                  }
                  if (v78)
                  {
                    sub_20E8C003C((uint64_t)v79, "CV3DPosePrediction produced pose at timestamp %f", *((double *)&v101 + 1) + *(double *)&v102);
                    sub_20E863570((uint64_t)v79);
                  }
                  sub_20E863570((uint64_t)v79);
                  v71 = v85;
                  if (v85)
                  {
                    v72 = (unint64_t *)&v85->__shared_owners_;
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                  goto LABEL_105;
                }
              }
              memmove(v30, v28, v29);
              goto LABEL_38;
            }
          }
LABEL_105:
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t (***)()))(v2 + 3328))(*(_QWORD *)(v2 + 3320), v8, &v92);
          if (v94 != -1)
            result = ((uint64_t (*)(_BYTE *, _BYTE *))off_24C9C3C08[v94])(v105, v93);
          v3 += 4;
          if (v3 == v4)
            return result;
        }
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v11 = v3[2];
        v93[0] = 0;
        v94 = -1;
        v12 = *(unsigned int *)(v11 + 1080);
        if ((_DWORD)v12 == -1)
          goto LABEL_15;
LABEL_14:
        ((void (*)(_QWORD *, _BYTE *, uint64_t))*(&off_24C9C8500 + v12))(v79, v93, v11);
        v94 = v12;
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_20EBCE7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,char a44)
{
  if (a42)
  {
    if (a41 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a24);
  sub_20EADE4B4((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_20EBCE814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20E86E8C4(&a36);
  sub_20E86E8C4(&a40);
  sub_20E86E658(v41 - 192);
  sub_20E863714((uint64_t)&a24);
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EBCE850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  MEMORY[0x212BC6398](v41, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a24);
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EBCE884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863714((uint64_t)&a24);
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EBCE900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EBCE914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v21;

  v21 = LODWORD(STACK[0x540]);
  if ((_DWORD)v21 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C9C84F0[v21])(v19 - 192, a19);
  _Unwind_Resume(a1);
}

void sub_20EBCE940(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20EBCE974);
}

void sub_20EBCE954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20EBCE968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_20E86665C((uint64_t)&a34);
  JUMPOUT(0x20EBCE974);
}

void sub_20EBCE97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20EADE4B4((uint64_t)&a41);
  _Unwind_Resume(a1);
}

char **sub_20EBCE990(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 == v2)
      {
LABEL_18:
        a1[1] = v2;
        operator delete(v4);
        return a1;
      }
      while (1)
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (!v5)
          goto LABEL_10;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
          if (v8)
          {
LABEL_11:
            v9 = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
        else
        {
LABEL_10:
          v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
          if (v8)
            goto LABEL_11;
        }
        v3 -= 32;
        if (v3 == v2)
        {
          v4 = *a1;
          goto LABEL_18;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_20EBCEA74(std::recursive_mutex *this, double a2, double a3, double a4, double a5)
{
  int v10;
  std::recursive_mutex *v11;
  uint64_t v12;
  uint64_t v14;
  const double *v15;
  double v16;
  float64x2_t v18;
  uint64_t v23;
  char *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  char *v33;
  char v34;
  double v35;
  float64x2_t v36;
  double v37;
  float64x2x3_t v38;

  if (a5 < 0.0 || !*(_QWORD *)&this[52].__m_.__opaque[16] || !*(_QWORD *)&this[52].__m_.__opaque[24])
    return 0;
  v10 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v11 = this;
  }
  else
  {
    v11 = 0;
  }
  *(double *)&this[51].__m_.__opaque[16] = a5;
  this[51].__m_.__opaque[24] = 1;
  kdebug_trace();
  v36.f64[0] = a2 * 0.0174532925;
  v36.f64[1] = a3 * 0.0174532925;
  v14 = *(_QWORD *)&this[52].__m_.__opaque[16];
  v15 = (const double *)(v14 + 168);
  v38 = vld3q_f64(v15);
  v37 = a4 * 0.0174532925;
  v16 = *(double *)(v14 + 232);
  _Q6 = *(_OWORD *)(v14 + 216);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38.val[0], a2 * 0.0174532925), v38.val[1], v36, 1), v38.val[2], a4 * 0.0174532925);
  v38.val[1].f64[0] = a3 * 0.0174532925;
  __asm { FMLA            D1, D2, V6.D[1] }
  v36 = v18;
  v37 = v38.val[0].f64[0] + v16 * (a4 * 0.0174532925);
  v35 = *(double *)(v14 + 64) + a5;
  v23 = *(_QWORD *)&this[52].__m_.__opaque[24];
  kdebug_trace();
  sub_20EAFBA34(v23);
  sub_20EAFB2A8(v23, (uint64_t)&__p);
  sub_20EBCDED4((uint64_t)this, (uint64_t)&__p);
  if (v34)
  {
    v24 = (char *)__p;
    if (__p)
    {
      v25 = v33;
      if (v33 != __p)
      {
        do
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)v25 - 3);
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v25 -= 32;
        }
        while (v25 != v24);
        v24 = (char *)__p;
      }
      operator delete(v24);
    }
  }
  if (this[51].__m_.__opaque[0]
    && !this[51].__m_.__opaque[8]
    && this[51].__m_.__opaque[24]
    && this[51].__m_.__opaque[40])
  {
    v12 = sub_20EBCED08((uint64_t)this, a5 + 0.05);
    if (!v10)
      return v12;
    goto LABEL_29;
  }
  v12 = 1;
  if (v10)
LABEL_29:
    std::recursive_mutex::unlock(v11);
  return v12;
}

void sub_20EBCECD4(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBCED08(uint64_t a1, double a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  char v47;
  int v48;
  unint64_t v49;
  __int16 v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  int v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  _BYTE v62[95];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  _BYTE v69[23];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[32];

  *(_BYTE *)(a1 + 3280) = 1;
  v70 = 0;
  *(_OWORD *)&v69[7] = 0u;
  v64 = 0u;
  v65 = 0;
  v44 = 0;
  v45 = 0u;
  v2 = *(_QWORD *)(a1 + 1152);
  v3 = *(_OWORD *)(a1 + 1104);
  v4 = *(_OWORD *)(a1 + 1136);
  v73 = *(_OWORD *)(a1 + 1120);
  v74 = v4;
  v71 = *(_OWORD *)(a1 + 1088);
  v72 = v3;
  *(_OWORD *)&v75[8] = *(_OWORD *)(a1 + 1064);
  v5 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)v75 = v2;
  *(_QWORD *)&v75[24] = v5;
  v35 = *(_OWORD *)&v75[16];
  v34 = *(_OWORD *)v75;
  v31 = v3;
  v30 = v71;
  v33 = v4;
  v32 = v73;
  v6 = *(_OWORD *)(a1 + 888);
  v7 = *(_QWORD *)(a1 + 952);
  v8 = *(_OWORD *)(a1 + 904);
  v9 = *(_OWORD *)(a1 + 936);
  v40 = *(_OWORD *)(a1 + 920);
  v41 = v9;
  v38 = v6;
  v39 = v8;
  v36 = 0;
  v37 = 0;
  v42 = v7;
  *(_QWORD *)&v6 = *(_QWORD *)(a1 + 1296);
  v15 = 0;
  v16 = 0;
  v17 = a2;
  v18 = a2;
  v29 = 0;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = xmmword_21030D320;
  v22 = 0u;
  v21 = xmmword_21030D320;
  v20 = 0u;
  v19 = xmmword_21030D320;
  v43 = v6;
  v46 = 1;
  v47 = 0;
  v48 = 16843009;
  v49 = 0xBFF0000000000000;
  v50 = 1;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 3;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = -1;
  v61 = 0;
  *(_OWORD *)v62 = *(_OWORD *)v69;
  *(_OWORD *)&v62[47] = unk_2103B3098;
  *(_OWORD *)&v62[63] = xmmword_2103B30A8;
  *(_OWORD *)&v62[79] = unk_2103B30B8;
  v63 = 0x3FF0000000000000;
  *(_OWORD *)&v62[15] = 0uLL;
  *(_OWORD *)&v62[31] = xmmword_2103B3088;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  result = sub_20EAFBE10(*(_QWORD *)(a1 + 3360), &v15);
  v11 = result;
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      return v11;
    }
  }
  return result;
}

void sub_20EBCEF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCEF54(std::recursive_mutex *this, double a2, double a3, double a4, double a5)
{
  int v10;
  std::recursive_mutex *v11;
  uint64_t v12;
  uint64_t v14;
  const double *v15;
  double v16;
  float64x2_t v18;
  uint64_t v23;
  char *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  char *v33;
  char v34;
  double v35;
  float64x2_t v36;
  double v37;
  float64x2x3_t v38;

  if (a5 < 0.0 || !*(_QWORD *)&this[52].__m_.__opaque[16] || !*(_QWORD *)&this[52].__m_.__opaque[24])
    return 0;
  v10 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v11 = this;
  }
  else
  {
    v11 = 0;
  }
  *(double *)&this[51].__m_.__opaque[32] = a5;
  this[51].__m_.__opaque[40] = 1;
  kdebug_trace();
  v14 = *(_QWORD *)&this[52].__m_.__opaque[16];
  v15 = (const double *)(v14 + 96);
  v38 = vld3q_f64(v15);
  v16 = *(double *)&this[1].__m_.__opaque[40];
  v36.f64[0] = -(v16 * a2);
  v36.f64[1] = -(v16 * a3);
  v37 = -(v16 * a4);
  _Q6 = *(_OWORD *)(v14 + 144);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38.val[0], v36.f64[0]), v38.val[1], v36, 1), v38.val[2], v37);
  v38.val[1].f64[0] = v36.f64[1];
  __asm { FMLA            D0, D1, V6.D[1] }
  v37 = v38.val[0].f64[0] + *(double *)(v14 + 160) * v37;
  v36 = v18;
  v35 = *(double *)(v14 + 56) + *(double *)(v14 + 64) + a5;
  v23 = *(_QWORD *)&this[52].__m_.__opaque[24];
  (*(void (**)(_QWORD, double *))(**(_QWORD **)(v23 + 128) + 24))(*(_QWORD *)(v23 + 128), &v35);
  kdebug_trace();
  sub_20EAFB2A8(v23, (uint64_t)&__p);
  sub_20EBCDED4((uint64_t)this, (uint64_t)&__p);
  if (v34)
  {
    v24 = (char *)__p;
    if (__p)
    {
      v25 = v33;
      if (v33 != __p)
      {
        do
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v29 = (std::__shared_weak_count *)*((_QWORD *)v25 - 3);
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v25 -= 32;
        }
        while (v25 != v24);
        v24 = (char *)__p;
      }
      operator delete(v24);
    }
  }
  if (this[51].__m_.__opaque[0]
    && !this[51].__m_.__opaque[8]
    && this[51].__m_.__opaque[24]
    && this[51].__m_.__opaque[40])
  {
    v12 = sub_20EBCED08((uint64_t)this, a5 + 0.05);
    if (!v10)
      return v12;
    goto LABEL_29;
  }
  v12 = 1;
  if (v10)
LABEL_29:
    std::recursive_mutex::unlock(v11);
  return v12;
}

void sub_20EBCF1BC(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_20EBCF1F0(std::recursive_mutex *this, uint64_t a2, uint64_t a3, double a4)
{
  int v8;
  std::recursive_mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _OWORD v15[10];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v8 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v9 = this;
  }
  else
  {
    v9 = 0;
  }
  kdebug_trace();
  if (a2)
    v10 = a2 + 8;
  else
    v10 = 0;
  v11 = *(unsigned int *)(v10 + 1080);
  if ((_DWORD)v11 == -1)
    sub_20E877AB8();
  *(_QWORD *)&v15[0] = &v24;
  ((void (*)(_OWORD *, uint64_t))*(&off_24C9C4760 + v11))(v15, v10);
  if (*(_BYTE *)(v10 + 1184))
    *(_BYTE *)(v10 + 1184) = 0;
  *(_QWORD *)(v10 + 1208) = 0;
  *(_OWORD *)(v10 + 1192) = 0u;
  v12 = *(_QWORD *)&this[52].__m_.__opaque[24];
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0;
  v13 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t *, uint64_t, uint64_t, double))(**(_QWORD **)(v12 + 128)
                                                                                           + 56))(*(_QWORD *)(v12 + 128), &v24, &v23, 1, a3, a4);
  if (!v13)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    v15[8] = v32;
    v15[9] = v33;
    v16 = v34;
    v15[4] = v28;
    v15[5] = v29;
    v15[6] = v30;
    v15[7] = v31;
    v15[0] = v24;
    v15[1] = v25;
    v15[2] = v26;
    v15[3] = v27;
    v17 = 1;
    sub_20EAFA92C();
    *(double *)(v10 + 1192) = a4;
    *(_QWORD *)(v10 + 1200) = 0;
  }
  kdebug_trace();
  if (v8)
    std::recursive_mutex::unlock(v9);
  return v13 == 0;
}

void sub_20EBCF3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::recursive_mutex *v31;
  int v32;

  sub_20EAF8694((uint64_t)&a31);
  if (v32)
    std::recursive_mutex::unlock(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBCF414(std::recursive_mutex *this, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  BOOL v9;
  int v15;
  std::recursive_mutex *v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char *v21;

  v9 = a5 < 0.0 || a2 == 0 || a3 == 0 || a4 == 0;
  if (!v9 && a5 + a6 >= 0.0 && a5 + a7 >= 0.0)
  {
    v15 = this[45].__m_.__opaque[12];
    if (this[45].__m_.__opaque[12])
    {
      std::recursive_mutex::lock(this);
      v16 = this;
    }
    else
    {
      v16 = 0;
    }
    if (sub_20EBCF1F0(this, a2, 0, a5))
    {
      kdebug_trace();
      v17 = *(unsigned int *)(a3 + 1088);
      if ((_DWORD)v17 == -1)
        sub_20E877AB8();
      v21 = &v20;
      ((void (*)(char **, uint64_t))*(&off_24C9C4760 + v17))(&v21, a3 + 8);
      if (*(_BYTE *)(a3 + 1192))
        *(_BYTE *)(a3 + 1192) = 0;
      *(_QWORD *)(a3 + 1216) = 0;
      *(_OWORD *)(a3 + 1200) = 0u;
      v18 = *(unsigned int *)(a4 + 1088);
      if ((_DWORD)v18 == -1)
        sub_20E877AB8();
      v21 = &v20;
      ((void (*)(char **, uint64_t))*(&off_24C9C4760 + v18))(&v21, a4 + 8);
      if (*(_BYTE *)(a4 + 1192))
        *(_BYTE *)(a4 + 1192) = 0;
      *(_QWORD *)(a4 + 1216) = 0;
      *(_OWORD *)(a4 + 1200) = 0u;
      kdebug_trace();
    }
    if (v15)
      std::recursive_mutex::unlock(v16);
  }
  return 0;
}

void sub_20EBCF5C4(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBCF5E4(std::recursive_mutex *this, unsigned int *a2, unsigned int *a3, std::__shared_weak_count_vtbl *a4, uint64_t a5, double a6)
{
  uint64_t v10;
  int v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  size_t v50;
  const char *v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  const char *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  unsigned int v63;
  size_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  unsigned int v125;
  unsigned int v126;
  _BOOL4 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  std::recursive_mutex *v132;
  __int128 v133;
  unsigned int v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[25];
  __int128 v140;
  __int128 v141;
  _QWORD *v142;
  std::__shared_weak_count *v143;
  _BYTE v144[73];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _BYTE v156[31];
  char v157;
  _BYTE v158[7];
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  __int128 v163;
  double v164[4];
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  char v170;
  _BYTE v171[7];
  char v172;
  uint64_t v173;
  _BYTE object[48];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _OWORD v179[2];
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)&this[52].__m_.__opaque[16])
    return 0;
  if (a6 < 0.0 || *(_QWORD *)&this[52].__m_.__opaque[24] == 0)
    return 0;
  v10 = a5;
  v14 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v132 = this;
    if (v10)
      goto LABEL_10;
  }
  else
  {
    v132 = 0;
    if (a5)
    {
LABEL_10:
      v15 = *(double *)v10;
      v10 = 1;
      v16 = 0;
      v17 = 0;
      if (!a2)
        goto LABEL_16;
      goto LABEL_14;
    }
  }
  v15 = 0.0;
  v16 = 0;
  v17 = 0;
  if (!a2)
    goto LABEL_16;
LABEL_14:
  if (a3)
  {
    v17 = *a2;
    v16 = *a3;
  }
LABEL_16:
  v144[0] = 0;
  v144[72] = 0;
  memset(&v144[8], 0, 57);
  v157 = 0;
  LOBYTE(v159) = 0;
  LOBYTE(v160) = 0;
  LOBYTE(v161) = 0;
  LOBYTE(v162) = 0;
  LOBYTE(v163) = 0;
  BYTE8(v163) = 0;
  LOBYTE(v164[0]) = 0;
  LOBYTE(v164[1]) = 0;
  LOBYTE(v164[2]) = 0;
  LOBYTE(v164[3]) = 0;
  LOBYTE(v165) = 0;
  BYTE8(v165) = 0;
  LOBYTE(v166) = 0;
  BYTE8(v166) = 0;
  v146 = 0u;
  v147 = 0u;
  v148 = 0;
  v145 = 0u;
  v172 = 0;
  v169 = 0;
  v167 = 0;
  v168 = 0;
  v170 = 0;
  *(double *)&v147 = a6;
  if (a4)
  {
    sub_21015D058(object, a4, 1, 0);
    v18 = (std::__shared_weak_count *)operator new(0x30uLL);
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA18420;
    v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1A9A0;
    v19 = *(_QWORD *)&object[16];
    v18[1].__shared_owners_ = *(_QWORD *)&object[8];
    v18[1].__shared_weak_owners_ = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(std::__shared_weak_count **)&object[16];
      v142 = &v18[1].__vftable;
      v143 = v18;
      *(_QWORD *)object = &off_24CA1A9A0;
      if (*(_QWORD *)&object[16])
      {
        v23 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      v142 = &v18[1].__vftable;
      v143 = v18;
    }
    sub_210107D4C((uint64_t *)&v142, 1, (uint64_t)&v136);
    if (v17 >= 0x10000
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v16 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v25 = v140;
    v26 = v141;
    v140 = 0uLL;
    v141 = 0uLL;
    *(_OWORD *)&v144[32] = v138;
    *(_OWORD *)&v144[48] = *(_OWORD *)v139;
    *(_OWORD *)&v144[57] = *(_OWORD *)&v139[9];
    *(_OWORD *)v144 = v136;
    *(_OWORD *)&v144[16] = v137;
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    v145 = v25;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        v133 = v26;
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        v26 = v133;
      }
    }
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    v146 = v26;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v147 = *(unint64_t *)&a6;
    v148 = 0;
    v154 = v177;
    v155 = v178;
    *(_OWORD *)v156 = v179[0];
    *(_OWORD *)&v156[15] = *(_OWORD *)((char *)v179 + 15);
    v150 = *(_OWORD *)&object[16];
    v151 = *(_OWORD *)&object[32];
    v152 = v175;
    v153 = v176;
    v149 = *(_OWORD *)object;
    v157 = 0;
    *(_DWORD *)v158 = v173;
    *(_DWORD *)&v158[3] = *(_DWORD *)((char *)&v173 + 3);
    v159 = 0;
    v160 = 0;
    v161 = v15;
    v163 = 0u;
    memset(v164, 0, 28);
    v165 = 0u;
    v166 = 0u;
    v162 = v10;
    v167 = v17 | (unint64_t)(v16 << 32);
    v33 = v169;
    v168 = 0;
    v169 = 0;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v170 = 0;
    *(_DWORD *)v171 = v135;
    *(_DWORD *)&v171[3] = *(_DWORD *)((char *)&v135 + 3);
    v172 = 0;
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
    if (*((_QWORD *)&v141 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
    if (*((_QWORD *)&v140 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v143;
    if (v143)
    {
      v43 = (unint64_t *)&v143->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  sub_20EBCD274(&v135);
  if (**(int **)(v135 + 56) <= 2)
  {
    v45 = *(unsigned __int8 *)(v135 + 72);
    v46 = sub_20E8C31DC(v135, "OSLogSurrogateAppender", 1, 0);
    v47 = v46;
    if (v45 || v46 != 0)
    {
      *(_QWORD *)&v136 = &v135;
      *((std::chrono::steady_clock::time_point *)&v136 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v137 = std::chrono::system_clock::now();
      DWORD2(v137) = 2;
      *(_QWORD *)&v138 = "unknown file";
      DWORD2(v138) = 320;
      *(_QWORD *)&v139[8] = 0;
      *(_QWORD *)&v139[16] = 0;
      *(_QWORD *)v139 = "unknown function";
      v49 = *(_QWORD *)v136;
      v129 = *(_QWORD *)v136;
      if (*(char *)(*(_QWORD *)v136 + 39) < 0)
      {
        v51 = *(const char **)(v49 + 16);
        v50 = *(_QWORD *)(v49 + 24);
      }
      else
      {
        v50 = *(unsigned __int8 *)(*(_QWORD *)v136 + 39);
        v51 = (const char *)(*(_QWORD *)v136 + 16);
      }
      v130 = *(_QWORD *)v136 + 16;
      v131 = v45;
      v134 = v17;
      v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A50F >= 0)
        v53 = (const char *)&xmmword_254A4A4F8;
      else
        v53 = (const char *)xmmword_254A4A4F8;
      if (byte_254A4A50F >= 0)
        v54 = byte_254A4A50F;
      else
        v54 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
      v55 = v51;
      *(_QWORD *)object = os_log_create(v53, v51);
      v56 = &object[8];
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v54 >= 0x17)
      {
        v128 = v14;
        v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v57 = v54 | 7;
        v58 = v57 + 1;
        v56 = operator new(v57 + 1);
        *(_QWORD *)&object[24] = v58 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v56;
        *(_QWORD *)&object[16] = v54;
        v14 = v128;
      }
      else
      {
        object[31] = v54;
        if (!v54)
        {
LABEL_83:
          v56[v54] = 0;
          object[32] = 1;
          v59 = &object[40];
          if (v50 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v50 >= 0x17)
          {
            v60 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v50 | 7) != 0x17)
              v60 = v50 | 7;
            v61 = v60 + 1;
            v59 = operator new(v60 + 1);
            *((_QWORD *)&v175 + 1) = v61 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v59;
            *(_QWORD *)&v175 = v50;
          }
          else
          {
            HIBYTE(v175) = v50;
            if (!v50)
              goto LABEL_91;
          }
          memmove(v59, v55, v50);
LABEL_91:
          v59[v50] = 0;
          LOBYTE(v176) = 1;
          v62 = *(NSObject **)object;
          if (SHIBYTE(v175) < 0)
            operator delete(*(void **)&object[40]);
          v63 = v134;
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v47 && *(_QWORD *)(v47 + 24))
          {
            v64 = _os_log_pack_size();
            v65 = (std::__shared_weak_count_vtbl *)operator new(v64, (std::align_val_t)8uLL);
            v66 = (std::__shared_weak_count *)operator new();
            v67 = v66;
            v66->__shared_owners_ = 0;
            v68 = (unint64_t *)&v66->__shared_owners_;
            v66->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v66->__shared_weak_owners_ = 0;
            v66[1].__vftable = v65;
            *(_QWORD *)object = v65;
            *(_QWORD *)&object[8] = v65;
            *(_QWORD *)&object[16] = v66;
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
            memset(&object[24], 0, 24);
            do
              v70 = __ldaxr(v68);
            while (__stlxr(v70 - 1, v68));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v67);
            }
            v71 = *(_QWORD *)object;
            v72 = _os_log_pack_fill();
            *(_DWORD *)v72 = 134218496;
            *(double *)(v72 + 4) = a6;
            *(_WORD *)(v72 + 12) = 1024;
            *(_DWORD *)(v72 + 14) = v134;
            *(_WORD *)(v72 + 18) = 1024;
            *(_DWORD *)(v72 + 20) = v16;
            v73 = operator new();
            v74 = *(unsigned __int8 *)(v129 + 39);
            v75 = *(_QWORD *)(v129 + 16);
            v76 = *(_QWORD *)(v129 + 24);
            v77 = *(_OWORD *)&object[24];
            *(_OWORD *)(v73 + 8) = *(_OWORD *)&object[8];
            if ((v74 & 0x80u) != 0)
              v74 = v76;
            else
              v75 = v130;
            *(_QWORD *)v73 = v71;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v73 + 24) = v77;
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v73 + 40) = v75;
            *(_QWORD *)(v73 + 48) = v74;
            *(_BYTE *)(v73 + 56) = 2;
            v173 = 0;
            v142 = (_QWORD *)v73;
            (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), &v142);
            v78 = (uint64_t)v142;
            v142 = 0;
            v63 = v134;
            if (v78)
            {
              v79 = *(std::__shared_weak_count **)(v78 + 32);
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              v82 = *(std::__shared_weak_count **)(v78 + 16);
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
              MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
              v85 = v173;
              v173 = 0;
              if (v85)
              {
                v86 = *(std::__shared_weak_count **)(v85 + 32);
                if (v86)
                {
                  v87 = (unint64_t *)&v86->__shared_owners_;
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(std::__shared_weak_count **)(v85 + 16);
                if (v89)
                {
                  v90 = (unint64_t *)&v89->__shared_owners_;
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                    std::__shared_weak_count::__release_weak(v89);
                  }
                }
                MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
              }
            }
            v92 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v93 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v96 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
          }
          else
          {
            os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)object = 134218496;
            *(double *)&object[4] = a6;
            *(_WORD *)&object[12] = 1024;
            *(_DWORD *)&object[14] = v134;
            *(_WORD *)&object[18] = 1024;
            *(_DWORD *)&object[20] = v16;
            v98 = (void *)_os_log_send_and_compose_impl();
            if (v98)
              free(v98);
          }
          if (v131)
          {
            sub_20E8C003C((uint64_t)&v136, "CV3DPosePrediction received frame at timestamp %f for camera id %d and stream id %d", a6, v63, v16);
            sub_20E863570((uint64_t)&v136);
          }
          sub_20E863570((uint64_t)&v136);
          v99 = *(std::__shared_weak_count **)&v139[16];
          if (*(_QWORD *)&v139[16])
          {
            v100 = (unint64_t *)(*(_QWORD *)&v139[16] + 8);
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          goto LABEL_151;
        }
      }
      memmove(v56, v53, v54);
      goto LABEL_83;
    }
  }
LABEL_151:
  if ((_BYTE)v162)
  {
    if (LOBYTE(v164[1]))
    {
      v102 = v164[0];
      if (v164[0] >= 0.0)
LABEL_154:
        *((double *)&v147 + 1) = (v102 - v161) * 0.5;
    }
    else
    {
      v121 = *(_QWORD *)&this[52].__m_.__opaque[16];
      v122 = (uint64_t *)(v121 + 712);
      v123 = *(uint64_t **)(v121 + 712);
      if (!v123)
        goto LABEL_200;
      v124 = (uint64_t *)(v121 + 712);
      do
      {
        while (1)
        {
          v125 = *((_DWORD *)v123 + 8);
          if (v125 >= v167 && (v125 != (_DWORD)v167 || *((_DWORD *)v123 + 9) >= HIDWORD(v167)))
            break;
          v123 = (uint64_t *)v123[1];
          if (!v123)
            goto LABEL_198;
        }
        v124 = v123;
        v123 = (uint64_t *)*v123;
      }
      while (v123);
LABEL_198:
      if (v124 == v122
        || (v126 = *((_DWORD *)v124 + 8), v167 < v126)
        || (_DWORD)v167 == v126 && HIDWORD(v167) < *((_DWORD *)v124 + 9))
      {
LABEL_200:
        v127 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataCorrection/src/DataCorrection.cpp", 43, (uint64_t)"rt != camera_readout_times_.end()", 33, (uint64_t)"Readout time not found in calibration.", 38, (void (*)(void **))sub_21023DDB0);
        v124 = v122;
        if (v127)
          abort();
      }
      v102 = *((double *)v124 + 5);
      if (v102 >= 0.0)
        goto LABEL_154;
    }
  }
  sub_20EAFBC68(*(_QWORD *)&this[52].__m_.__opaque[24], (uint64_t)v144, (uint64_t)object);
  sub_20EBCDED4((uint64_t)this, (uint64_t)object);
  if (!object[24])
    goto LABEL_173;
  v103 = *(_QWORD *)object;
  if (!*(_QWORD *)object)
    goto LABEL_173;
  v104 = *(_QWORD *)&object[8];
  v105 = *(void **)object;
  if (*(_QWORD *)&object[8] != *(_QWORD *)object)
  {
    while (1)
    {
      v106 = *(std::__shared_weak_count **)(v104 - 8);
      if (!v106)
        goto LABEL_164;
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
        v109 = *(std::__shared_weak_count **)(v104 - 24);
        if (v109)
        {
LABEL_165:
          v110 = (unint64_t *)&v109->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
      }
      else
      {
LABEL_164:
        v109 = *(std::__shared_weak_count **)(v104 - 24);
        if (v109)
          goto LABEL_165;
      }
      v104 -= 32;
      if (v104 == v103)
      {
        v105 = *(void **)object;
        break;
      }
    }
  }
  *(_QWORD *)&object[8] = v103;
  operator delete(v105);
LABEL_173:
  v112 = v169;
  if (v169)
  {
    v113 = (unint64_t *)&v169->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v116 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v14)
    std::recursive_mutex::unlock(v132);
  return 1;
}

void sub_20EBD04B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::recursive_mutex *v38;

  if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a22);
  sub_20E98046C(&a38);
  if (a13)
    std::recursive_mutex::unlock(v38);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBD065C(uint64_t a1, _BYTE *a2, CFTypeRef *a3)
{
  const void *v6;
  int v7;
  std::recursive_mutex *v8;
  int v9;
  void *v10;
  CFErrorRef v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFErrorRef v15;
  unint64_t *v16;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  __int128 v30;
  char v31;
  void *__p;
  _OWORD v33[68];
  CFErrorRef v34;
  std::__shared_weak_count *v35;
  std::error_condition v36;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 3352) && *(_QWORD *)(a1 + 3360))
    {
      v6 = a2 + 8;
      kdebug_trace();
      kdebug_trace();
      v7 = *(unsigned __int8 *)(a1 + 2900);
      if (*(_BYTE *)(a1 + 2900))
      {
        std::recursive_mutex::lock((std::recursive_mutex *)a1);
        v8 = (std::recursive_mutex *)a1;
        if (a2[609])
        {
LABEL_6:
          v9 = 1;
          goto LABEL_35;
        }
      }
      else
      {
        v8 = 0;
        if (a2[609])
          goto LABEL_6;
      }
      v9 = a2[936];
LABEL_35:
      *(_BYTE *)(a1 + 3280) = (v9 | *(unsigned __int8 *)(a1 + 3280)) != 0;
      __p = 0;
      *(_QWORD *)&v33[0] = 0;
      memcpy((char *)v33 + 8, v6, 0x431uLL);
      sub_20EAFC00C(*(_QWORD *)(a1 + 3360), (uint64_t)&__p, (uint64_t)&v29);
      sub_20EBCDED4(a1, (uint64_t)&v29);
      if (v31)
      {
        v18 = (char *)v29;
        if (v29)
        {
          v19 = (char *)v30;
          if ((void *)v30 != v29)
          {
            do
            {
              v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
              if (v20)
              {
                p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
              if (v23)
              {
                v24 = (unint64_t *)&v23->__shared_owners_;
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
              v19 -= 32;
            }
            while (v19 != v18);
            v18 = (char *)v29;
          }
          operator delete(v18);
        }
      }
      v26 = *(std::__shared_weak_count **)&v33[0];
      if (*(_QWORD *)&v33[0])
      {
        v27 = (unint64_t *)(*(_QWORD *)&v33[0] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v7)
        std::recursive_mutex::unlock(v8);
      return 1;
    }
    __p = operator new(0x40uLL);
    v33[0] = xmmword_2102DBC10;
    strcpy((char *)__p, "Pose Predictor is not initialized, did you call Initialize?");
    v10 = operator new(0x70uLL);
    v29 = v10;
    v30 = xmmword_2102E0CA0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/PosePredictionContext.cpp");
    if (!a3)
      goto LABEL_27;
    *(_QWORD *)&v36.__val_ = 22;
    v36.__cat_ = std::generic_category();
    sub_20EA67538(&v36, (uint64_t)&__p, &v34);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v11 = v34;
    if (v34)
      CFRetain(v34);
    *a3 = v11;
    v12 = v35;
    if (!v35)
      goto LABEL_25;
    v13 = (unint64_t *)&v35->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  else
  {
    __p = operator new(0x30uLL);
    v33[0] = xmmword_2102DC8D0;
    strcpy((char *)__p, "Trying to push a null predictor metadata");
    v10 = operator new(0x70uLL);
    v29 = v10;
    v30 = xmmword_2102E0CA0;
    strcpy((char *)v10, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/PosePredictionContext.cpp");
    if (!a3)
    {
LABEL_27:
      operator delete(v10);
      goto LABEL_28;
    }
    *(_QWORD *)&v36.__val_ = 22;
    v36.__cat_ = std::generic_category();
    sub_20EA67538(&v36, (uint64_t)&__p, &v34);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = v34;
    if (v34)
      CFRetain(v34);
    *a3 = v15;
    v12 = v35;
    if (!v35)
      goto LABEL_25;
    v16 = (unint64_t *)&v35->__shared_owners_;
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_26;
  }
LABEL_25:
  if (SHIBYTE(v30) < 0)
  {
LABEL_26:
    v10 = v29;
    goto LABEL_27;
  }
LABEL_28:
  if (SHIBYTE(v33[0]) < 0)
    operator delete(__p);
  return 0;
}

void sub_20EBD0A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::recursive_mutex *v19;
  int v20;

  sub_20EBCE990(&a10);
  sub_20E86665C((uint64_t)&__p);
  if (v20)
  {
    std::recursive_mutex::unlock(v19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EBD0B18(std::recursive_mutex *this, uint64_t a2, unsigned int a3)
{
  int v6;
  std::recursive_mutex *v7;
  uint64_t v9;
  int *v10;
  double v11;

  if (!a2 || !*(_QWORD *)&this[52].__m_.__opaque[16] || !*(_QWORD *)&this[52].__m_.__opaque[24])
    return 0;
  v6 = this[45].__m_.__opaque[12];
  if (this[45].__m_.__opaque[12])
  {
    std::recursive_mutex::lock(this);
    v7 = this;
  }
  else
  {
    v7 = 0;
  }
  kdebug_trace();
  kdebug_trace();
  if (a3)
  {
    v9 = 58 * a3;
    v10 = (int *)(a2 + 50);
    do
    {
      if ((~*(v10 - 9) & 6) == 0)
      {
        v11 = (double)(unint64_t)(1000 * *(_QWORD *)((char *)v10 - 46)
                                       - *(_QWORD *)this[52].__m_.__opaque
                                       + *(_QWORD *)&this[52].__m_.__opaque[8])
            * 0.000000001;
        sub_20EBCEA74(this, (double)*(v10 - 2) * 0.0000152587891, (double)*(v10 - 1) * 0.0000152587891, (double)*v10 * 0.0000152587891, v11);
        sub_20EBCEF54(this, (double)*(v10 - 5) * 0.0000152587891, (double)*(v10 - 4) * 0.0000152587891, (double)*(v10 - 3) * 0.0000152587891, v11);
      }
      v10 = (int *)((char *)v10 + 58);
      v9 -= 58;
    }
    while (v9);
  }
  if (v6)
    std::recursive_mutex::unlock(v7);
  return 1;
}

void sub_20EBD0CC4(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBD0CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 2896);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 2904);
    v4 = *(void **)(a1 + 2896);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 24);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v6 = *(std::__shared_weak_count **)(v3 - 40);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 2896);
    }
    *(_QWORD *)(a1 + 2904) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD *)(a1 + 2848);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 2856);
    v9 = *(void **)(a1 + 2848);
    if (v8 == v7)
    {
LABEL_27:
      *(_QWORD *)(a1 + 2856) = v7;
      operator delete(v9);
      goto LABEL_28;
    }
    while (1)
    {
      v10 = v8 - 400;
      v11 = *(std::__shared_weak_count **)(v8 - 296);
      if (!v11)
        goto LABEL_19;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        v14 = *(std::__shared_weak_count **)(v8 - 312);
        if (v14)
        {
LABEL_20:
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
LABEL_19:
        v14 = *(std::__shared_weak_count **)(v8 - 312);
        if (v14)
          goto LABEL_20;
      }
      v8 -= 400;
      if (v10 == v7)
      {
        v9 = *(void **)(a1 + 2848);
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  v17 = *(_QWORD *)(a1 + 2808);
  if (v17)
    MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
  v18 = *(_QWORD *)(a1 + 2784);
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  v19 = *(_QWORD *)(a1 + 2752);
  if (v19)
    MEMORY[0x212BC6368](v19, 0x1000C8000313F17);
  v20 = *(_QWORD *)(a1 + 2728);
  if (v20)
    MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
  v21 = *(void **)(a1 + 2352);
  if (v21)
  {
    *(_QWORD *)(a1 + 2360) = v21;
    operator delete(v21);
  }
  if (*(_BYTE *)(a1 + 1232))
  {
    v22 = *(std::__shared_weak_count **)(a1 + 144);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  v25 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

void sub_20EBD0EF8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void *sub_20EBD0F1C(int a1, void *__dst, void *__src)
{
  return memcpy(__dst, __src, 0x438uLL);
}

void sub_20EBD0F30(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBD0F54(uint64_t a1@<X4>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  v4 = operator new();
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  v10 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20EBF0F10();
  *a2 = v4;
  a2[1] = (uint64_t)sub_20EC20078;
  if (v10)
  {
    v8 = (unint64_t *)&v10->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20EBD1048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C((uint64_t)&a9);
  MEMORY[0x212BC6398](v9, 0x10B2C40703BEBA1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBD1074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  char *v7;
  uint64_t v8;
  uint64_t v10[2];
  char v11;

  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (char *)(a1 + 8);
  v11 = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = off_24C9C8548;
  sub_20EBD0F54(a6, v10);
  v8 = v10[1];
  *(_QWORD *)(a1 + 56) = v10[0];
  *(_QWORD *)(a1 + 64) = v8;
  if (*(char *)(a1 + 31) < 0)
  {
    *(_QWORD *)(a1 + 16) = 15;
    v7 = *(char **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)(a1 + 31) = 15;
  }
  strcpy(v7, "SLAM Node Group");
  sub_20E8B43E8((std::string *)(a1 + 32), "Root node for the SLAM interface. Connects the API to the underlying computer vision algorithms.", 0x60uLL);
  return a1;
}

void sub_20EBD1138(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 64))();
  sub_20EBC904C(v1);
  _Unwind_Resume(a1);
}

void sub_20EBD116C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  _DWORD v15[2];
  void *__p;
  char v17;

  v3 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a2 + 304))
  {
    if (*(_BYTE *)(a2 + 336))
    {
      v4 = *(double *)(a2 + 328);
      if (v4 >= 0.0)
LABEL_4:
        *(double *)(a2 + 120) = (v4 - *(double *)(a2 + 296)) * 0.5;
    }
    else
    {
      v8 = *(uint64_t **)(v3 + 760);
      if (!v8)
        goto LABEL_21;
      v9 = *(_DWORD *)(a2 + 392);
      v10 = *(_DWORD *)(a2 + 396);
      v11 = (uint64_t *)(v3 + 760);
      do
      {
        while (1)
        {
          v12 = *((_DWORD *)v8 + 8);
          if (v12 >= v9 && (v12 != v9 || *((_DWORD *)v8 + 9) >= v10))
            break;
          v8 = (uint64_t *)v8[1];
          if (!v8)
            goto LABEL_17;
        }
        v11 = v8;
        v8 = (uint64_t *)*v8;
      }
      while (v8);
LABEL_17:
      if (v11 == (uint64_t *)(v3 + 760)
        || (v13 = *((_DWORD *)v11 + 8), v9 < v13)
        || v9 == v13 && v10 < *((_DWORD *)v11 + 9))
      {
LABEL_21:
        v14 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataCorrection/src/DataCorrection.cpp", 43, (uint64_t)"rt != camera_readout_times_.end()", 33, (uint64_t)"Readout time not found in calibration.", 38, (void (*)(void **))sub_21023DDB0);
        v11 = (uint64_t *)(v3 + 760);
        if (v14)
          abort();
      }
      v4 = *((double *)v11 + 5);
      if (v4 >= 0.0)
        goto LABEL_4;
    }
  }
  v5 = sub_20EB890B0(v3 + 776, a2, (uint64_t)v15);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3720) + 56) + 96) + 1768;
  (*(void (**)(uint64_t, _DWORD *, double))(*(_QWORD *)v6 + 16))(v6, v15, v5);
  if ((v15[1] - 8) <= 0xFFFFFFFC)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3712) + 56) + 168);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 + 88) + 16))(v7 + 88, a2);
    if (*(_BYTE *)(v3 + 20224))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 4432) + 88) + 16))(*(_QWORD *)(v3 + 4432) + 88, a2);
  }
  if (v17 < 0)
    operator delete(__p);
}

void sub_20EBD1330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBD134C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  _BYTE v36[4];
  int v37;
  void *__p;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  double v48[36];
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  _OWORD v52[3];
  _OWORD v53[2];
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  _BYTE v58[288];
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = a2[3];
  v42 = a2[2];
  v43[0] = v4;
  *(_OWORD *)((char *)v43 + 9) = *(__int128 *)((char *)a2 + 57);
  v5 = a2[1];
  v40 = *a2;
  v41 = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 11);
  v35 = *((_QWORD *)a2 + 10);
  v44 = v35;
  v45 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *((_QWORD *)a2 + 12);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 13);
  v46 = v9;
  v47 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  memcpy(v48, a2 + 7, sizeof(v48));
  v14 = *((_QWORD *)a2 + 50);
  v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 51);
  v49 = v14;
  v50 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v51 = a2[26];
  if (LOBYTE(v48[24]))
  {
    if (LOBYTE(v48[28]))
    {
      v17 = v48[27];
      if (v48[27] >= 0.0)
LABEL_13:
        v48[1] = (v17 - v48[23]) * 0.5;
    }
    else
    {
      v30 = *(uint64_t **)(v3 + 760);
      if (!v30)
        goto LABEL_44;
      v31 = (uint64_t *)(v3 + 760);
      do
      {
        while (1)
        {
          v32 = *((_DWORD *)v30 + 8);
          if (v32 >= LODWORD(v48[35]) && (v32 != LODWORD(v48[35]) || *((_DWORD *)v30 + 9) >= HIDWORD(v48[35])))
            break;
          v30 = (uint64_t *)v30[1];
          if (!v30)
            goto LABEL_42;
        }
        v31 = v30;
        v30 = (uint64_t *)*v30;
      }
      while (v30);
LABEL_42:
      if (v31 == (uint64_t *)(v3 + 760)
        || (v33 = *((_DWORD *)v31 + 8), LODWORD(v48[35]) < v33)
        || LODWORD(v48[35]) == v33 && HIDWORD(v48[35]) < *((_DWORD *)v31 + 9))
      {
LABEL_44:
        v34 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/DataCorrection/src/DataCorrection.cpp", 43, (uint64_t)"rt != camera_readout_times_.end()", 33, (uint64_t)"Readout time not found in calibration.", 38, (void (*)(void **))sub_21023DDB0);
        v31 = (uint64_t *)(v3 + 760);
        if (v34)
          abort();
      }
      v17 = *((double *)v31 + 5);
      if (v17 >= 0.0)
        goto LABEL_13;
    }
  }
  v52[2] = v42;
  v53[0] = v43[0];
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)((char *)v43 + 9);
  v52[0] = v40;
  v52[1] = v41;
  v54 = v35;
  v55 = v6;
  v44 = 0;
  v45 = 0;
  v56 = v9;
  v57 = v10;
  v46 = 0;
  v47 = 0;
  memcpy(v58, v48, sizeof(v58));
  v59 = v14;
  v60 = v13;
  v49 = 0;
  v50 = 0;
  v61 = v51;
  v18 = sub_20EB890B0(v3 + 776, (uint64_t)v52, (uint64_t)v36);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3720) + 56) + 96) + 1768;
  (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)v19 + 16))(v19, v36, v18);
  if ((v37 - 8) <= 0xFFFFFFFC)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3712) + 56) + 168);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v20 + 88) + 16))(v20 + 88, v52);
    if (*(_BYTE *)(v3 + 20224))
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(v3 + 4432) + 88) + 16))(*(_QWORD *)(v3 + 4432) + 88, a2);
  }
  if (v39 < 0)
    operator delete(__p);
  v21 = v60;
  if (v60)
  {
    v22 = (unint64_t *)&v60->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v57;
  if (v57)
  {
    v25 = (unint64_t *)&v57->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v55;
  if (v55)
  {
    v28 = (unint64_t *)&v55->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20EBD16D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (a32)
  {
    v36 = (unint64_t *)&a32->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
      std::__shared_weak_count::__release_weak(a32);
    }
  }
  if (a30)
  {
    v38 = (unint64_t *)&a30->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
      std::__shared_weak_count::__release_weak(a30);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EBD17B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const double *v3;
  double v4;
  double v5;
  float64x2_t v7;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void *__p;
  char v19;
  double v20;
  float64x2_t v21;
  double v22;
  float64x2x3_t v23;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (const double *)(v2 + 144);
  v23 = vld3q_f64(v3);
  v4 = *(double *)(a2 + 24);
  v5 = *(double *)(v2 + 208);
  _Q7 = *(_OWORD *)(v2 + 192);
  v7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23.val[0], *(double *)(a2 + 8)), v23.val[1], *(float64x2_t *)(a2 + 8), 1), v23.val[2], v4);
  v23.val[1].f64[0] = *(float64_t *)(a2 + 16);
  __asm { FMLA            D0, D1, V7.D[1] }
  v12 = *(double *)a2 + *(double *)(v2 + 104) + *(double *)(v2 + 112);
  v20 = v12;
  v21 = v7;
  v22 = v23.val[0].f64[0] + v5 * v4;
  sub_20EB8D5C4(v2 + 776, &v16, v12);
  sub_20EB89C44(&v16, *(unsigned __int8 *)(v2 + 3704));
  if (v17 == 7)
    sub_20EB8D488((_QWORD *)(v2 + 776));
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3720) + 56) + 96) + 1768;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 16))(v13, &v16);
  if ((v17 - 8) <= 0xFFFFFFFC)
  {
    if (*(_BYTE *)(v2 + 4937))
    {
      v14 = v2 + 4520;
      if (*(_BYTE *)(v2 + 7720))
        sub_20EAEA444(v14, (uint64_t)&v20);
      else
        sub_20EAEAF6C(v14, (uint64_t)&v20);
      if (!*(_BYTE *)(v2 + 8776))
      {
        *(_BYTE *)(v2 + 8776) = 1;
        *(double *)(v2 + 8680) = v12;
      }
    }
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3720) + 56) + 96) + 256;
    (*(void (**)(uint64_t, double *))(*(_QWORD *)v15 + 16))(v15, &v20);
  }
  if (v19 < 0)
    operator delete(__p);
}

void sub_20EBD1924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBD1944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const double *v3;
  double v4;
  float64x2_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void *__p;
  char v18;
  double v19;
  float64x2_t v20;
  float64_t v21;
  float64x2x3_t v22;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (const double *)(v2 + 216);
  v22 = vld3q_f64(v3);
  v4 = *(double *)(a2 + 24);
  _Q7 = *(_OWORD *)(v2 + 264);
  v6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v22.val[0], *(double *)(a2 + 8)), v22.val[1], *(float64x2_t *)(a2 + 8), 1), v22.val[2], v4);
  v22.val[1].f64[0] = *(float64_t *)(a2 + 16);
  __asm { FMLA            D0, D1, V7.D[1] }
  v22.val[1].f64[0] = v22.val[0].f64[0] + *(double *)(v2 + 280) * v4;
  v19 = *(double *)a2 + *(double *)(v2 + 112);
  v20 = v6;
  v21 = v22.val[1].f64[0];
  sub_20EB8D954(v2 + 776, &v15, v19);
  sub_20EB89C44(&v15, *(unsigned __int8 *)(v2 + 3704));
  if (v16 == 7)
    sub_20EB8D488((_QWORD *)(v2 + 776));
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3720) + 56) + 96) + 1768;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 16))(v11, &v15);
  if ((v16 - 8) <= 0xFFFFFFFC)
  {
    if (*(_BYTE *)(v2 + 4937))
    {
      v12 = v2 + 4520;
      if (*(_BYTE *)(v2 + 7720))
        sub_20EAE913C(v12, (uint64_t)&v19);
      else
        sub_20EAE9C5C(v12, (uint64_t)&v19);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3720) + 56) + 96);
    (*(void (**)(uint64_t, double *))(*(_QWORD *)(v13 + 88) + 16))(v13 + 88, &v19);
    if (*(_BYTE *)(v2 + 14632))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 3712) + 56) + 168) + 592;
      (*(void (**)(uint64_t, double *))(*(_QWORD *)v14 + 16))(v14, &v19);
    }
  }
  if (v18 < 0)
    operator delete(__p);
}

void sub_20EBD1ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBD1ADC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

uint64_t sub_20EBD1AF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 232))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

uint64_t sub_20EBD1B04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20EBD1B18(uint64_t a1, float32x2_t *a2)
{
  return sub_20EAEB4E4(*(_QWORD *)(a1 + 56) + 4520, a2);
}

uint64_t sub_20EBD1B28(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = *(_QWORD *)(result + 56);
  if (*(_BYTE *)(v1 + 4937))
  {
    if (!*(_BYTE *)(v1 + 4936))
    {
      sub_20EAF4568(v1 + 4520);
      v2 = 257;
      return sub_20EC4DF34(*(_QWORD *)(*(_QWORD *)(v1 + 3720) + 56), (uint64_t)&v2);
    }
  }
  return result;
}

void sub_20EBD1B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v15;
  void *__p[2];
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v1 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v1 + 4937) && *(_BYTE *)(v1 + 4936))
  {
    sub_20EAF4ABC(v1 + 4520);
    LOWORD(__p[0]) = 256;
    sub_20EC4DF34(*(_QWORD *)(*(_QWORD *)(v1 + 3720) + 56), (uint64_t)__p);
    if (*(_BYTE *)(v1 + 7704))
    {
      v2 = *(_QWORD *)(v1 + 8784);
      v3 = *(_QWORD *)(v1 + 7568);
      v4 = *(_OWORD *)(v1 + 7472);
      v5 = *(_OWORD *)(v1 + 7456);
      v19 = *(_OWORD *)(v1 + 7440);
      v20 = v5;
      v6 = *(_OWORD *)(v1 + 7424);
      v25 = *(_QWORD *)(v1 + 7536);
      v7 = *(_OWORD *)(v1 + 7520);
      v23 = *(_OWORD *)(v1 + 7504);
      v24 = v7;
      v8 = *(_OWORD *)(v1 + 7488);
      v21 = v4;
      v22 = v8;
      v9 = *(_OWORD *)(v1 + 7392);
      *(_OWORD *)__p = *(_OWORD *)(v1 + 7376);
      v17 = v9;
      *(_OWORD *)v18 = *(_OWORD *)(v1 + 7408);
      *(_OWORD *)&v18[16] = v6;
      v26 = v3;
      v27 = 1;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 360))(v2, __p);
    }
    v18[0] = 0;
    v17 = 0uLL;
    __p[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v18[8] = _Q0;
    *(_QWORD *)&v18[24] = 0xBFF0000000000000;
    HIDWORD(__p[0]) = 7;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 3720) + 56) + 96) + 1768;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 16))(v15, __p);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[1]);
  }
}

void sub_20EBD1CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20EBD1CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 7576) = *(_QWORD *)a2;
  *(_QWORD *)(v2 + 7584) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 7592) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v2 + 7600) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v2 + 7608) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v2 + 7616) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v2 + 7624) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v2 + 7632) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v2 + 7640) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v2 + 7648) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v2 + 7656) = *(_QWORD *)(a2 + 80);
  result = *(double *)(a2 + 88);
  *(double *)(v2 + 7664) = result;
  return result;
}

uint64_t sub_20EBD1D50(uint64_t a1, float64x2_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  sub_20EAF500C(v2 + 4520, a2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8784) + 248))(*(_QWORD *)(v2 + 8784));
}

uint64_t sub_20EBD1D84(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 3448;
}

uint64_t sub_20EBD1D9C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 592;
}

uint64_t sub_20EBD1DB4(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 336);
  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v1 + 88) + 16))(v1 + 88, &v3);
}

uint64_t sub_20EBD1DF0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 336);
  v3 = 1;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v1 + 88) + 16))(v1 + 88, &v3);
}

uint64_t sub_20EBD1E30(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 336);
  v3 = 2;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v1 + 88) + 16))(v1 + 88, &v3);
}

uint64_t sub_20EBD1E70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 1264;
}

uint64_t sub_20EBD1E88(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 1432;
}

uint64_t sub_20EBD1EA0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 1600;
}

uint64_t sub_20EBD1EB8(uint64_t a1)
{
  return *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3728) + 56) + 72) + 88;
}

uint64_t sub_20EBD1ED4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3712) + 56) + 168) + 928;
}

void sub_20EBD1EEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(v2 + 8784);
    v16 = v4;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 8784);
    v16 = 0;
  }
  v15 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 72))(v7, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v14)
  {
    v12 = (unint64_t *)&v14->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20EBD1FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBD2004(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 2944;
}

uint64_t sub_20EBD201C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 4112) + 72) + 424;
}

_QWORD *sub_20EBD2030@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = v3 + 4120;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t sub_20EBD2080(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 928;
}

uint64_t sub_20EBD2098(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 1096;
}

uint64_t sub_20EBD20B0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 4288;
}

uint64_t sub_20EBD20CC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 4624;
}

uint64_t sub_20EBD20E8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 4960;
}

uint64_t sub_20EBD2104(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 224))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

uint64_t sub_20EBD2118(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 4792;
}

uint64_t sub_20EBD2134(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 344))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

uint64_t sub_20EBD2148(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8784) + 352))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8784));
}

uint64_t sub_20EBD215C@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  return sub_20EC4DE18(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56), a2, a3);
}

uint64_t *sub_20EBD216C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96);
  v4 = 1;
  return sub_20EC51D68((uint64_t *)(v2 + 2456), (uint64_t)&v4, a2);
}

uint64_t sub_20EBD21A8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 176) + 288;
}

uint64_t sub_20EBD21C0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t result;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD v20[10];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 40);
  if (v6 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 655, (uint64_t)"user_session_id_ != cv_types::kInvalidUserSessionID", 51, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = a2[1];
  v20[0] = *a2;
  v20[1] = v7;
  v8 = a2[7];
  v20[6] = a2[6];
  v20[7] = v8;
  v9 = a2[9];
  v20[8] = a2[8];
  v20[9] = v9;
  v10 = a2[3];
  v20[2] = a2[2];
  v20[3] = v10;
  v11 = a2[5];
  v20[4] = a2[4];
  v20[5] = v11;
  v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 3736) + 72) + 272);
  *(_QWORD *)&v20[0] = v6;
  sub_20E9C7EA0(v12, (uint64_t)v20, &v19);
  v13 = v19;
  v19 = 0;
  sub_20E9C822C(v13, a3);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  result = v19;
  if (v19)
  {
    v17 = (unint64_t *)(v19 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20EBD231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBD238C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  sub_20E9C8D18((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3736) + 72) + 440), a2, &v10);
  v4 = v10;
  v10 = 0;
  sub_20E9C90A4(v4, a3);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  result = v10;
  if (v10)
  {
    v8 = (unint64_t *)(v10 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_20EBD2444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EBD24A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;

  return sub_20EC52290((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 96) + 2624), (uint64_t)&v3, a2);
}

uint64_t sub_20EBD24DC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 4352) + 792;
}

void sub_20EBD24EC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::unique_lock<std::mutex>::mutex_type *m;
  unint64_t *opaque;
  unint64_t v14;
  std::unique_lock<std::mutex>::mutex_type *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::exception_ptr v21;
  uint64_t v22;
  __int128 v23;
  std::exception_ptr v24;
  std::unique_lock<std::mutex> __lk;

  v3 = *(_QWORD *)(a1 + 56);
  sub_20EC52564((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3720) + 56) + 96) + 3128), (uint64_t)&__lk, &v22);
  v4 = v22;
  v22 = 0;
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v4 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v4, &__lk);
  v5 = *(_QWORD *)(v4 + 16);
  v24.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v24);
  if (v5)
  {
    std::exception_ptr::exception_ptr(&v24, (const std::exception_ptr *)(v4 + 16));
    v21.__ptr_ = &v24;
    std::rethrow_exception(v21);
    __break(1u);
    return;
  }
  v23 = *(_OWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v6 = (unint64_t *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v8 = v22;
  if (v22)
  {
    v9 = (unint64_t *)(v22 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  sub_20E9C7734((uint64_t *)(*(_QWORD *)(v3 + 4104) + 272), (uint64_t)&v23, (uint64_t *)&__lk);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 3720) + 56) + 96) + 3280;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, &v23);
  m = __lk.__m_;
  __lk.__m_ = 0;
  sub_20E9C7B5C((uint64_t)m, a2);
  if (m)
  {
    opaque = (unint64_t *)m->__m_.__opaque;
    do
      v14 = __ldaxr(opaque);
    while (__stlxr(v14 - 1, opaque));
    if (!v14)
      (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(m->__m_.__sig + 16))(m);
  }
  v15 = __lk.__m_;
  if (!__lk.__m_)
    goto LABEL_22;
  v16 = (unint64_t *)__lk.__m_->__m_.__opaque;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(v15->__m_.__sig + 16))(v15);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      return;
  }
  else
  {
LABEL_22:
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      return;
  }
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_20EBD2704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::exception_ptr a14, std::mutex *a15, char a16)
{
  unint64_t *v16;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *opaque;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (v16)
  {
    v18 = v16 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
      (*(void (**)(unint64_t *))(*v16 + 16))(v16);
  }
  if (a15)
  {
    opaque = (unint64_t *)a15->__m_.__opaque;
    do
      v21 = __ldaxr(opaque);
    while (__stlxr(v21 - 1, opaque));
    if (!v21)
      (*(void (**)(std::mutex *))(a15->__m_.__sig + 16))(a15);
  }
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBD283C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 4352) + 624;
}

uint64_t sub_20EBD284C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 176) + 456;
}

uint64_t sub_20EBD2864(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 176) + 624;
}

uint64_t sub_20EBD287C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56) + 176) + 792;
}

uint64_t sub_20EBD2894@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_20EBD28A0(a2, *(_QWORD *)(a1 + 56));
}

uint64_t sub_20EBD28A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  int v24;
  size_t v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *p_dst;
  char *v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void *v39;
  void **v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  void **v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  void *v49;
  void **v50;
  unint64_t *v51;
  unint64_t v52;
  void **v53;
  void *v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  __int128 *v60;
  char *v61;
  __int128 *v62;
  char *v63;
  char *v64;
  void *v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t *v69;
  __int128 v70;
  uint64_t v71;
  void **v72;
  char *v73;
  void **v74;
  char *v75;
  int v78;
  size_t v79;
  unint64_t v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  char *v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  void *v93;
  void **v94;
  unint64_t *v95;
  unint64_t v96;
  void **v97;
  __int128 v98;
  char *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  void *v103;
  void **v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  void *v108;
  __int128 v109;
  char *v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  __int128 *v114;
  char *v115;
  __int128 *v116;
  char *v117;
  char *v118;
  void *v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t *v123;
  __int128 v124;
  uint64_t v125;
  void **v126;
  char *v127;
  void **v128;
  char *v129;
  int v132;
  size_t v133;
  unint64_t v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  char *v139;
  void *v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  void *v147;
  void **v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  __int128 v152;
  char *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  void *v157;
  uint64_t v158;
  void **v159;
  unint64_t *v160;
  unint64_t v161;
  void **v162;
  void *v163;
  __int128 v164;
  char *v165;
  __int128 v166;
  _BOOL4 v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  void *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  __int128 *v178;
  char *v179;
  __int128 *v180;
  char *v181;
  __int128 v182;
  char *v183;
  void *v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t *v188;
  __int128 v189;
  uint64_t v190;
  void **v191;
  char *v192;
  void **v193;
  char *v194;
  int v197;
  size_t v198;
  unint64_t v199;
  __int128 *v200;
  uint64_t v201;
  uint64_t v202;
  __int128 *v203;
  char *v204;
  void *v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  void *v212;
  void **v213;
  unint64_t *v214;
  unint64_t v215;
  void **v216;
  __int128 v217;
  char *v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count *v221;
  void *v222;
  void **v223;
  unint64_t *v224;
  unint64_t v225;
  void **v226;
  void *v227;
  __int128 v228;
  char *v229;
  _BOOL4 v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  void *v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  unsigned __int8 v239;
  uint64_t v240;
  __int128 *v241;
  char *v242;
  __int128 *v243;
  char *v244;
  __int128 v245;
  char *v246;
  void *v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  uint64_t *v251;
  __int128 v252;
  uint64_t v253;
  void **v254;
  char *v255;
  void **v256;
  char *v257;
  int v260;
  size_t v261;
  unint64_t v262;
  __int128 *v263;
  uint64_t v264;
  uint64_t v265;
  __int128 *v266;
  char *v267;
  void *v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count *v274;
  void *v275;
  void **v276;
  unint64_t *v277;
  unint64_t v278;
  void **v279;
  __int128 v280;
  char *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count *v284;
  void *v285;
  void **v286;
  unint64_t *v287;
  unint64_t v288;
  void **v289;
  void *v290;
  __int128 v291;
  char *v292;
  _BOOL4 v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  void *v298;
  uint64_t v299;
  __int128 v300;
  uint64_t v301;
  uint64_t *v302;
  __int128 v303;
  uint64_t v304;
  __int128 *v305;
  char *v306;
  __int128 *v307;
  char *v308;
  __int128 v309;
  char *v310;
  void *v311;
  __int128 v312;
  uint64_t v313;
  __int128 v314;
  uint64_t *v315;
  __int128 v316;
  uint64_t v317;
  void **v318;
  char *v319;
  void **v320;
  char *v321;
  int v324;
  size_t v325;
  unint64_t v326;
  __int128 *v327;
  uint64_t v328;
  uint64_t v329;
  __int128 *v330;
  char *v331;
  void *v332;
  __int128 v333;
  uint64_t v334;
  __int128 v335;
  std::__shared_weak_count *v336;
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  void *v339;
  void **v340;
  unint64_t *v341;
  unint64_t v342;
  void **v343;
  __int128 v344;
  char *v345;
  std::__shared_weak_count *v346;
  std::__shared_weak_count *v347;
  std::__shared_weak_count *v348;
  void *v349;
  void **v350;
  unint64_t *v351;
  unint64_t v352;
  void **v353;
  void *v354;
  __int128 v355;
  char *v356;
  uint64_t v357;
  unsigned __int8 v358;
  uint64_t v359;
  __int128 *v360;
  char *v361;
  __int128 *v362;
  char *v363;
  char *v364;
  void *v365;
  __int128 v366;
  uint64_t v367;
  __int128 v368;
  uint64_t *v369;
  __int128 v370;
  uint64_t v371;
  void **v372;
  char *v373;
  void **v374;
  char *v375;
  int v378;
  size_t v379;
  unint64_t v380;
  __int128 *v381;
  uint64_t v382;
  uint64_t v383;
  __int128 *v384;
  char *v385;
  void *v386;
  __int128 v387;
  uint64_t v388;
  __int128 v389;
  std::__shared_weak_count *v390;
  std::__shared_weak_count *v391;
  std::__shared_weak_count *v392;
  void *v393;
  void **v394;
  unint64_t *v395;
  unint64_t v396;
  void **v397;
  __int128 v398;
  char *v399;
  std::__shared_weak_count *v400;
  std::__shared_weak_count *v401;
  std::__shared_weak_count *v402;
  void *v403;
  void **v404;
  unint64_t *v405;
  unint64_t v406;
  void **v407;
  void *v408;
  __int128 v409;
  char *v410;
  _BOOL4 v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  __int128 v419;
  uint64_t v420;
  unsigned __int8 v421;
  uint64_t v422;
  __int128 *v423;
  char *v424;
  __int128 *v425;
  char *v426;
  __int128 v427;
  char *v428;
  void *v429;
  __int128 v430;
  uint64_t v431;
  __int128 v432;
  uint64_t *v433;
  __int128 v434;
  uint64_t v435;
  void **v436;
  char *v437;
  void **v438;
  char *v439;
  int v442;
  size_t v443;
  unint64_t v444;
  __int128 *v445;
  uint64_t v446;
  uint64_t v447;
  __int128 *v448;
  char *v449;
  void *v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  std::__shared_weak_count *v454;
  std::__shared_weak_count *v455;
  std::__shared_weak_count *v456;
  void *v457;
  void **v458;
  unint64_t *v459;
  unint64_t v460;
  void **v461;
  __int128 v462;
  char *v463;
  std::__shared_weak_count *v464;
  std::__shared_weak_count *v465;
  std::__shared_weak_count *v466;
  void *v467;
  void **v468;
  unint64_t *v469;
  unint64_t v470;
  void **v471;
  void *v472;
  __int128 v473;
  char *v474;
  uint64_t v475;
  uint64_t *v476;
  __int128 v477;
  uint64_t v478;
  __int128 *v479;
  char *v480;
  __int128 *v481;
  char *v482;
  char *v483;
  void *v484;
  __int128 v485;
  uint64_t v486;
  __int128 v487;
  uint64_t *v488;
  __int128 v489;
  uint64_t v490;
  void **v491;
  char *v492;
  void **v493;
  char *v494;
  int v497;
  size_t v498;
  unint64_t v499;
  __int128 *v500;
  uint64_t v501;
  uint64_t v502;
  __int128 *v503;
  char *v504;
  void *v505;
  __int128 v506;
  uint64_t v507;
  __int128 v508;
  std::__shared_weak_count *v509;
  std::__shared_weak_count *v510;
  std::__shared_weak_count *v511;
  void *v512;
  void **v513;
  unint64_t *v514;
  unint64_t v515;
  void **v516;
  __int128 v517;
  char *v518;
  std::__shared_weak_count *v519;
  std::__shared_weak_count *v520;
  std::__shared_weak_count *v521;
  void *v522;
  void **v523;
  unint64_t *v524;
  unint64_t v525;
  void **v526;
  void *v527;
  __int128 v528;
  char *v529;
  uint64_t v530;
  uint64_t *v531;
  __int128 v532;
  uint64_t v533;
  __int128 *v534;
  char *v535;
  __int128 *v536;
  char *v537;
  char *v538;
  void *v539;
  __int128 v540;
  uint64_t v541;
  __int128 v542;
  uint64_t *v543;
  __int128 v544;
  uint64_t v545;
  void **v546;
  char *v547;
  void **v548;
  char *v549;
  int v552;
  size_t v553;
  unint64_t v554;
  __int128 *v555;
  uint64_t v556;
  uint64_t v557;
  __int128 *v558;
  char *v559;
  void *v560;
  __int128 v561;
  uint64_t v562;
  __int128 v563;
  std::__shared_weak_count *v564;
  std::__shared_weak_count *v565;
  std::__shared_weak_count *v566;
  void *v567;
  void **v568;
  unint64_t *v569;
  unint64_t v570;
  void **v571;
  __int128 v572;
  char *v573;
  std::__shared_weak_count *v574;
  std::__shared_weak_count *v575;
  std::__shared_weak_count *v576;
  void *v577;
  uint64_t v578;
  void **v579;
  unint64_t *v580;
  unint64_t v581;
  void **v582;
  void *v583;
  __int128 v584;
  char *v585;
  __int128 v586;
  _BOOL4 v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  void *v592;
  uint64_t v593;
  __int128 v594;
  uint64_t v595;
  unsigned __int8 v596;
  uint64_t v597;
  __int128 *v598;
  char *v599;
  __int128 *v600;
  char *v601;
  __int128 v602;
  char *v603;
  void *v604;
  __int128 v605;
  uint64_t v606;
  __int128 v607;
  uint64_t *v608;
  __int128 v609;
  uint64_t v610;
  void **v611;
  char *v612;
  void **v613;
  char *v614;
  int v617;
  size_t v618;
  unint64_t v619;
  __int128 *v620;
  uint64_t v621;
  uint64_t v622;
  __int128 *v623;
  char *v624;
  void *v625;
  __int128 v626;
  uint64_t v627;
  __int128 v628;
  std::__shared_weak_count *v629;
  std::__shared_weak_count *v630;
  std::__shared_weak_count *v631;
  void *v632;
  void **v633;
  unint64_t *v634;
  unint64_t v635;
  void **v636;
  __int128 v637;
  char *v638;
  std::__shared_weak_count *v639;
  std::__shared_weak_count *v640;
  std::__shared_weak_count *v641;
  void *v642;
  void **v643;
  unint64_t *v644;
  unint64_t v645;
  void **v646;
  void *v647;
  __int128 v648;
  char *v649;
  char *v650;
  _BOOL4 v651;
  char *v652;
  char *v653;
  char *v654;
  char *v655;
  void *v656;
  uint64_t v657;
  __int128 v658;
  uint64_t v659;
  unsigned __int8 v660;
  uint64_t v661;
  __int128 *v662;
  char *v663;
  __int128 *v664;
  char *v665;
  __int128 v666;
  char *v667;
  void *v668;
  __int128 v669;
  uint64_t v670;
  __int128 v671;
  char *v672;
  uint64_t *v673;
  __int128 v674;
  uint64_t v675;
  void **v676;
  char *v677;
  void **v678;
  char *v679;
  int v682;
  size_t v683;
  unint64_t v684;
  __int128 *v685;
  uint64_t v686;
  uint64_t v687;
  __int128 *v688;
  char *v689;
  void *v690;
  __int128 v691;
  uint64_t v692;
  __int128 v693;
  std::__shared_weak_count *v694;
  std::__shared_weak_count *v695;
  std::__shared_weak_count *v696;
  void *v697;
  void **v698;
  unint64_t *v699;
  unint64_t v700;
  void **v701;
  __int128 v702;
  char *v703;
  std::__shared_weak_count *v704;
  std::__shared_weak_count *v705;
  std::__shared_weak_count *v706;
  void *v707;
  void **v708;
  unint64_t *v709;
  unint64_t v710;
  void **v711;
  void *v712;
  __int128 v713;
  char *v714;
  _BOOL4 v715;
  char *v716;
  char *v717;
  char *v718;
  char *v719;
  void *v720;
  uint64_t v721;
  __int128 v722;
  uint64_t v723;
  uint64_t *v724;
  __int128 v725;
  uint64_t v726;
  __int128 *v727;
  char *v728;
  __int128 *v729;
  char *v730;
  __int128 v731;
  char *v732;
  void *v733;
  __int128 v734;
  uint64_t v735;
  __int128 v736;
  uint64_t *v737;
  __int128 v738;
  uint64_t v739;
  void **v740;
  char *v741;
  void **v742;
  char *v743;
  int v746;
  size_t v747;
  unint64_t v748;
  __int128 *v749;
  uint64_t v750;
  uint64_t v751;
  __int128 *v752;
  char *v753;
  void *v754;
  __int128 v755;
  uint64_t v756;
  __int128 v757;
  std::__shared_weak_count *v758;
  std::__shared_weak_count *v759;
  std::__shared_weak_count *v760;
  void *v761;
  void **v762;
  unint64_t *v763;
  unint64_t v764;
  void **v765;
  __int128 v766;
  char *v767;
  std::__shared_weak_count *v768;
  std::__shared_weak_count *v769;
  std::__shared_weak_count *v770;
  void *v771;
  void **v772;
  char *v773;
  unint64_t *v774;
  unint64_t v775;
  void **v776;
  void *v777;
  __int128 v778;
  char *v779;
  _BOOL4 v780;
  char *v781;
  char *v782;
  char *v783;
  char *v784;
  void *v785;
  uint64_t v786;
  __int128 v787;
  uint64_t v788;
  unsigned __int8 v789;
  uint64_t v790;
  __int128 *v791;
  char *v792;
  __int128 *v793;
  char *v794;
  __int128 v795;
  char *v796;
  void *v797;
  __int128 v798;
  uint64_t v799;
  __int128 v800;
  uint64_t *v801;
  __int128 v802;
  uint64_t v803;
  void **v804;
  char *v805;
  void **v806;
  char *v807;
  int v810;
  size_t v811;
  unint64_t v812;
  __int128 *v813;
  uint64_t v814;
  uint64_t v815;
  __int128 *v816;
  char *v817;
  void *v818;
  __int128 v819;
  uint64_t v820;
  __int128 v821;
  std::__shared_weak_count *v822;
  std::__shared_weak_count *v823;
  std::__shared_weak_count *v824;
  void *v825;
  void **v826;
  unint64_t *v827;
  unint64_t v828;
  void **v829;
  __int128 v830;
  char *v831;
  std::__shared_weak_count *v832;
  std::__shared_weak_count *v833;
  std::__shared_weak_count *v834;
  void *v835;
  void **v836;
  char *v837;
  unint64_t *v838;
  unint64_t v839;
  void **v840;
  void *v841;
  __int128 v842;
  char *v843;
  _BOOL4 v844;
  char *v845;
  char *v846;
  char *v847;
  char *v848;
  void *v849;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  size_t v860;
  unint64_t v861;
  int v862;
  __int128 *v863;
  size_t v864;
  unint64_t v865;
  int v866;
  __int128 *v867;
  int v868;
  size_t v869;
  unint64_t v870;
  __int128 *v871;
  int v872;
  size_t v873;
  unint64_t v874;
  __int128 *v875;
  int v876;
  size_t v877;
  unint64_t v878;
  __int128 *v879;
  int v880;
  size_t v881;
  unint64_t v882;
  __int128 *v883;
  int v884;
  size_t v885;
  unint64_t v886;
  __int128 *v887;
  int v888;
  size_t v889;
  unint64_t v890;
  __int128 *v891;
  int v892;
  size_t v893;
  unint64_t v894;
  __int128 *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t *v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t *v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t *v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t *v922;
  uint64_t v924;
  uint64_t v925;
  char *v926;
  void *v927;
  char *v928;
  unint64_t v929;
  void *v930;
  char *v931;
  unint64_t v932;
  void **v933;
  void **v934;
  uint64_t v935;
  void *v936[2];
  uint64_t v937;
  void *v938[2];
  __int128 v939;
  unint64_t v940;
  __int128 __p;
  _BYTE v942[24];
  uint64_t v943;
  __int128 v944;
  uint64_t v945;
  __int128 __dst;
  int64_t v947;
  _BYTE v948[128];
  _BYTE v949[128];
  _BYTE v950[128];
  _BYTE v951[128];
  _BYTE v952[128];
  _BYTE v953[128];
  _BYTE v954[128];
  _BYTE v955[128];
  _BYTE v956[128];
  _BYTE v957[128];
  _BYTE v958[128];
  _BYTE v959[128];
  _BYTE v960[128];
  _BYTE v961[128];
  _QWORD v962[19];

  v962[16] = *MEMORY[0x24BDAC8D0];
  sub_210216980(*(_QWORD *)(a2 + 3712), (uint64_t)v948);
  sub_210216980(*(_QWORD *)(a2 + 3720), (uint64_t)v949);
  sub_210216980(*(_QWORD *)(a2 + 3728), (uint64_t)v950);
  v3 = *(_QWORD *)(a2 + 3736);
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v924 = v3;
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v947 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(v924 + 72);
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = sub_20EBA60E8();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20E860C04(&v944, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v945 = v7[2];
    v944 = v8;
  }
  v9 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v10 = &v944;
  }
  else
  {
    v9 = *((_QWORD *)&v944 + 1);
    v10 = (__int128 *)v944;
  }
  if (v9 >= 4)
  {
    v11 = (char *)v10 + v9;
    v12 = v10;
    do
    {
      v13 = (char *)memchr(v12, 118, v9 - 3);
      if (!v13)
        break;
      if (*(_DWORD *)v13 == 1684631414)
      {
        if (v13 == v11 || v13 - (char *)v10 == -1)
          break;
        v938[0] = (void *)v6;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v851 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v4 + 48);
          __p = v851;
        }
        sub_20EBE51FC();
        if ((byte_254A5C007 & 0x80000000) == 0)
        {
          *(_OWORD *)&v942[8] = xmmword_254A5BFF0;
          v943 = unk_254A5C000;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v12 = (__int128 *)(v13 + 1);
      v9 = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 4);
  }
  v938[0] = (void *)v6;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v14 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v4 + 48);
    __p = v14;
  }
  sub_20EBE51FC();
  if (byte_254A5C007 < 0)
  {
LABEL_31:
    sub_20E860C04(&v942[8], (void *)xmmword_254A5BFF0, *((unint64_t *)&xmmword_254A5BFF0 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5BFF0;
    v943 = unk_254A5C000;
  }
LABEL_34:
  v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
  if ((SHIBYTE(v943) & 0x80000000) == 0)
  {
    if ((v942[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v942[8]);
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v940) < 0)
LABEL_33:
    operator delete((void *)v939);
LABEL_37:
  v15 = sub_20EBA4AA4();
  if (*((char *)v15 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v15, v15[1]);
  }
  else
  {
    v16 = *(_OWORD *)v15;
    v937 = v15[2];
    *(_OWORD *)v936 = v16;
  }
  v17 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v18 = v936;
  }
  else
  {
    v17 = (uint64_t)v936[1];
    v18 = (void **)v936[0];
  }
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_81;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  v938[0] = (void *)(v6 + 1);
  LODWORD(v938[1]) = 3;
  v24 = SHIBYTE(v947);
  if (v947 >= 0)
    v25 = HIBYTE(v947);
  else
    v25 = *((_QWORD *)&__dst + 1);
  v26 = v25 + 6;
  if (v25 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v27 = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&v939 + 1) = v25 + 6;
    v940 = v29 | 0x8000000000000000;
    *(_QWORD *)&v939 = v27;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v27 = &v939;
    HIBYTE(v940) = v25 + 6;
    if (!v25)
      goto LABEL_73;
  }
  if (v24 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v27, p_dst, v25);
LABEL_73:
  strcpy((char *)v27 + v25, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v31 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v32 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v31 = v32;
  v33 = v939;
  *((_QWORD *)v31 + 4) = v940;
  *((_OWORD *)v31 + 1) = v33;
  v940 = 0;
  v939 = 0uLL;
  v34 = *(_QWORD *)v942;
  *(_OWORD *)(v31 + 40) = __p;
  *((_QWORD *)v31 + 7) = v34;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v35 = *(_OWORD *)&v942[8];
  *((_QWORD *)v31 + 10) = v943;
  *((_OWORD *)v31 + 4) = v35;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v31 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v940) < 0)
  {
LABEL_76:
    operator delete((void *)v939);
    v36 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v36)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v36 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v36)
  {
LABEL_85:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v40 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v37 = std::__shared_weak_count::lock(v36);
  v938[1] = v37;
  if (!v37)
    goto LABEL_85;
  v38 = v37;
  v39 = *(void **)(v4 + 128);
  v938[0] = v39;
  if (v39)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v39 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (v42)
  {
    v40 = v933;
    v43 = v934;
    if (v933 == v934)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v40 = v933;
    v43 = v934;
    if (v933 == v934)
      goto LABEL_100;
  }
  do
  {
    v938[0] = (void *)v6;
    v938[1] = *v40;
    v940 = 0;
    v939 = 0uLL;
    v45 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v44 = v939;
      *((_QWORD *)v45 + 4) = v940;
      *((_OWORD *)v45 + 1) = v44;
      v928 = v45 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v40;
  }
  while (v40 != v43);
  v40 = v933;
LABEL_100:
  if (v40)
  {
    v934 = v40;
    operator delete(v40);
  }
  v46 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v46 || (v47 = std::__shared_weak_count::lock(v46), (v938[1] = v47) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v50 = 0;
    goto LABEL_121;
  }
  v48 = v47;
  v49 = *(void **)(v4 + 128);
  v938[0] = v49;
  if (v49)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v49 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v51 = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
    v50 = v933;
    v53 = v934;
    if (v933 == v934)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v50 = v933;
    v53 = v934;
    if (v933 == v934)
      goto LABEL_121;
  }
  v54 = (void *)(v6 + 1);
  do
  {
    v938[0] = v54;
    v938[1] = *v50;
    v940 = 0;
    v939 = 0uLL;
    v56 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v55 = v939;
      *((_QWORD *)v56 + 4) = v940;
      *((_OWORD *)v56 + 1) = v55;
      v928 = v56 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v50;
  }
  while (v50 != v53);
  v50 = v933;
LABEL_121:
  if (v50)
  {
    v934 = v50;
    operator delete(v50);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
LABEL_131:
      sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
      goto LABEL_132;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_130;
LABEL_126:
  if (*(char *)(v4 + 199) < 0)
    goto LABEL_131;
LABEL_127:
  __dst = *(_OWORD *)(v4 + 176);
  v947 = *(_QWORD *)(v4 + 192);
LABEL_132:
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v58 = atomic_load((unsigned __int8 *)&qword_254A5BA40);
  if ((v58 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BA40))
    goto LABEL_133;
  sub_20EBE53B4();
  if (byte_254A5C067 >= 0)
    v860 = byte_254A5C067;
  else
    v860 = qword_254A5C058;
  v861 = v860 + 1;
  if (v860 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v862 = byte_254A5C067;
  if (v861 >= 0x17)
  {
    v896 = (v861 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v861 | 7) != 0x17)
      v896 = v861 | 7;
    v897 = v896 + 1;
    v863 = (__int128 *)operator new(v896 + 1);
    *((_QWORD *)&xmmword_254A5C038 + 1) = v860 + 1;
    unk_254A5C048 = v897 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5C038 = v863;
    goto LABEL_2354;
  }
  unk_254A5C048 = 0;
  xmmword_254A5C038 = 0uLL;
  v863 = &xmmword_254A5C038;
  byte_254A5C04F = v860 + 1;
  if (v860)
  {
LABEL_2354:
    if (v862 >= 0)
      v898 = &qword_254A5C050;
    else
      v898 = (uint64_t *)qword_254A5C050;
    memmove(v863, v898, v860);
  }
  *(_WORD *)((char *)v863 + v860) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C038, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BA40);
LABEL_133:
  if (byte_254A5C04F < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5C038, *((unint64_t *)&xmmword_254A5C038 + 1));
  }
  else
  {
    v944 = xmmword_254A5C038;
    v945 = unk_254A5C048;
  }
  v59 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v60 = &v944;
  }
  else
  {
    v59 = *((_QWORD *)&v944 + 1);
    v60 = (__int128 *)v944;
  }
  if (v59 >= 4)
  {
    v61 = (char *)v60 + v59;
    v62 = v60;
    do
    {
      v63 = (char *)memchr(v62, 118, v59 - 3);
      if (!v63)
        break;
      if (*(_DWORD *)v63 == 1684631414)
      {
        if (v63 == v61 || v63 - (char *)v60 == -1)
          break;
        v938[0] = (void *)v57;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v942 = *(_QWORD *)(v4 + 216);
        }
        sub_20EBE5B70();
        if (byte_254A5C13F < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5C128, *((unint64_t *)&xmmword_254A5C128 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5C128;
          v943 = unk_254A5C138;
        }
        v64 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_159;
        goto LABEL_162;
      }
      v62 = (__int128 *)(v63 + 1);
      v59 = v61 - (char *)v62;
    }
    while (v61 - (char *)v62 >= 4);
  }
  v938[0] = (void *)v57;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v942 = *(_QWORD *)(v4 + 216);
  }
  sub_20EBE5B70();
  if (byte_254A5C13F < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5C128, *((unint64_t *)&xmmword_254A5C128 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5C128;
    v943 = unk_254A5C138;
  }
  v64 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_162:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_164;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
LABEL_160:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_165;
    goto LABEL_161;
  }
LABEL_159:
  v65 = v938[0];
  *((_DWORD *)v64 + 2) = v938[1];
  *(_QWORD *)v64 = v65;
  v66 = v939;
  *((_QWORD *)v64 + 4) = v940;
  *((_OWORD *)v64 + 1) = v66;
  v940 = 0;
  v939 = 0uLL;
  v67 = *(_QWORD *)v942;
  *(_OWORD *)(v64 + 40) = __p;
  *((_QWORD *)v64 + 7) = v67;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v68 = *(_OWORD *)&v942[8];
  *((_QWORD *)v64 + 10) = v943;
  *((_OWORD *)v64 + 4) = v68;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v64 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_160;
LABEL_164:
  if (SHIBYTE(v940) < 0)
LABEL_161:
    operator delete((void *)v939);
LABEL_165:
  v69 = sub_20EBA4AA4();
  if (*((char *)v69 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v69, v69[1]);
  }
  else
  {
    v70 = *(_OWORD *)v69;
    v937 = v69[2];
    *(_OWORD *)v936 = v70;
  }
  v71 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v72 = v936;
  }
  else
  {
    v71 = (uint64_t)v936[1];
    v72 = (void **)v936[0];
  }
  if (v71 >= 18)
  {
    v73 = (char *)v72 + v71;
    v74 = v72;
    do
    {
      v75 = (char *)memchr(v74, 67, v71 - 17);
      if (!v75)
        break;
      if (*(_QWORD *)v75 == 0x456C656E6E616843
        && *((_QWORD *)v75 + 1) == 0x696F763C726F7272
        && *((_WORD *)v75 + 8) == 15972)
      {
        if (v75 != v73 && v75 - (char *)v72 != -1)
          goto LABEL_209;
        break;
      }
      v74 = (void **)(v75 + 1);
      v71 = v73 - (char *)v74;
    }
    while (v73 - (char *)v74 >= 18);
  }
  v938[0] = (void *)(v57 + 1);
  LODWORD(v938[1]) = 3;
  v78 = SHIBYTE(v947);
  if (v947 >= 0)
    v79 = HIBYTE(v947);
  else
    v79 = *((_QWORD *)&__dst + 1);
  v80 = v79 + 6;
  if (v79 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v80 >= 0x17)
  {
    v82 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v80 | 7) != 0x17)
      v82 = v80 | 7;
    v83 = v82 + 1;
    v81 = (__int128 *)operator new(v82 + 1);
    *((_QWORD *)&v939 + 1) = v79 + 6;
    v940 = v83 | 0x8000000000000000;
    *(_QWORD *)&v939 = v81;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v81 = &v939;
    HIBYTE(v940) = v79 + 6;
    if (!v79)
      goto LABEL_201;
  }
  if (v78 >= 0)
    v84 = &__dst;
  else
    v84 = (__int128 *)__dst;
  memmove(v81, v84, v79);
LABEL_201:
  strcpy((char *)v81 + v79, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v85 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_208;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_208;
    }
LABEL_203:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_204;
    goto LABEL_209;
  }
  v86 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v85 = v86;
  v87 = v939;
  *((_QWORD *)v85 + 4) = v940;
  *((_OWORD *)v85 + 1) = v87;
  v940 = 0;
  v939 = 0uLL;
  v88 = *(_QWORD *)v942;
  *(_OWORD *)(v85 + 40) = __p;
  *((_QWORD *)v85 + 7) = v88;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v89 = *(_OWORD *)&v942[8];
  *((_QWORD *)v85 + 10) = v943;
  *((_OWORD *)v85 + 4) = v89;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v85 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_203;
LABEL_208:
  if (SHIBYTE(v940) < 0)
  {
LABEL_204:
    operator delete((void *)v939);
    v90 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v90)
      goto LABEL_213;
    goto LABEL_210;
  }
LABEL_209:
  v90 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v90)
  {
LABEL_213:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v94 = 0;
    goto LABEL_230;
  }
LABEL_210:
  v91 = std::__shared_weak_count::lock(v90);
  v938[1] = v91;
  if (!v91)
    goto LABEL_213;
  v92 = v91;
  v93 = *(void **)(v4 + 296);
  v938[0] = v93;
  if (v93)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v93 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v95 = (unint64_t *)&v92->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
    v94 = v933;
    v97 = v934;
    if (v933 == v934)
      goto LABEL_230;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
    v94 = v933;
    v97 = v934;
    if (v933 == v934)
      goto LABEL_230;
  }
  do
  {
    v938[0] = (void *)v57;
    v938[1] = *v94;
    v940 = 0;
    v939 = 0uLL;
    v99 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v98 = v939;
      *((_QWORD *)v99 + 4) = v940;
      *((_OWORD *)v99 + 1) = v98;
      v928 = v99 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v94;
  }
  while (v94 != v97);
  v94 = v933;
LABEL_230:
  if (v94)
  {
    v934 = v94;
    operator delete(v94);
  }
  v100 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v100 || (v101 = std::__shared_weak_count::lock(v100), (v938[1] = v101) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v104 = 0;
    goto LABEL_251;
  }
  v102 = v101;
  v103 = *(void **)(v4 + 296);
  v938[0] = v103;
  if (v103)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v103 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v105 = (unint64_t *)&v102->__shared_owners_;
  do
    v106 = __ldaxr(v105);
  while (__stlxr(v106 - 1, v105));
  if (v106)
  {
    v104 = v933;
    v107 = v934;
    if (v933 == v934)
      goto LABEL_251;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
    std::__shared_weak_count::__release_weak(v102);
    v104 = v933;
    v107 = v934;
    if (v933 == v934)
      goto LABEL_251;
  }
  v108 = (void *)(v57 + 1);
  do
  {
    v938[0] = v108;
    v938[1] = *v104;
    v940 = 0;
    v939 = 0uLL;
    v110 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v109 = v939;
      *((_QWORD *)v110 + 4) = v940;
      *((_OWORD *)v110 + 1) = v109;
      v928 = v110 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v104;
  }
  while (v104 != v107);
  v104 = v933;
LABEL_251:
  if (v104)
  {
    v934 = v104;
    operator delete(v104);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_255:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_256;
LABEL_260:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_257;
LABEL_261:
      sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
      goto LABEL_262;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_255;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_260;
LABEL_256:
  if (*(char *)(v4 + 367) < 0)
    goto LABEL_261;
LABEL_257:
  __dst = *(_OWORD *)(v4 + 344);
  v947 = *(_QWORD *)(v4 + 360);
LABEL_262:
  v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v112 = atomic_load((unsigned __int8 *)&qword_254A5BAA8);
  if ((v112 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BAA8))
    goto LABEL_263;
  sub_20EBE5D28();
  if (byte_254A5C19F >= 0)
    v864 = byte_254A5C19F;
  else
    v864 = qword_254A5C190;
  v865 = v864 + 1;
  if (v864 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v866 = byte_254A5C19F;
  if (v865 >= 0x17)
  {
    v899 = (v865 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v865 | 7) != 0x17)
      v899 = v865 | 7;
    v900 = v899 + 1;
    v867 = (__int128 *)operator new(v899 + 1);
    *((_QWORD *)&xmmword_254A5C170 + 1) = v864 + 1;
    unk_254A5C180 = v900 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5C170 = v867;
    goto LABEL_2362;
  }
  unk_254A5C180 = 0;
  xmmword_254A5C170 = 0uLL;
  v867 = &xmmword_254A5C170;
  byte_254A5C187 = v864 + 1;
  if (v864)
  {
LABEL_2362:
    if (v866 >= 0)
      v901 = &qword_254A5C188;
    else
      v901 = (uint64_t *)qword_254A5C188;
    memmove(v867, v901, v864);
  }
  *(_WORD *)((char *)v867 + v864) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C170, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BAA8);
LABEL_263:
  if (byte_254A5C187 < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5C170, *((unint64_t *)&xmmword_254A5C170 + 1));
  }
  else
  {
    v944 = xmmword_254A5C170;
    v945 = unk_254A5C180;
  }
  v113 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v114 = &v944;
  }
  else
  {
    v113 = *((_QWORD *)&v944 + 1);
    v114 = (__int128 *)v944;
  }
  if (v113 >= 4)
  {
    v115 = (char *)v114 + v113;
    v116 = v114;
    do
    {
      v117 = (char *)memchr(v116, 118, v113 - 3);
      if (!v117)
        break;
      if (*(_DWORD *)v117 == 1684631414)
      {
        if (v117 == v115 || v117 - (char *)v114 == -1)
          break;
        v938[0] = (void *)v111;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v942 = *(_QWORD *)(v4 + 384);
        }
        sub_20EBE64E4();
        if (byte_254A5C277 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5C260, *((unint64_t *)&xmmword_254A5C260 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5C260;
          v943 = unk_254A5C270;
        }
        v118 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_289;
        goto LABEL_292;
      }
      v116 = (__int128 *)(v117 + 1);
      v113 = v115 - (char *)v116;
    }
    while (v115 - (char *)v116 >= 4);
  }
  v938[0] = (void *)v111;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v942 = *(_QWORD *)(v4 + 384);
  }
  sub_20EBE64E4();
  if (byte_254A5C277 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5C260, *((unint64_t *)&xmmword_254A5C260 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5C260;
    v943 = unk_254A5C270;
  }
  v118 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_292:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_294;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_294;
    }
LABEL_290:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_295;
    goto LABEL_291;
  }
LABEL_289:
  v119 = v938[0];
  *((_DWORD *)v118 + 2) = v938[1];
  *(_QWORD *)v118 = v119;
  v120 = v939;
  *((_QWORD *)v118 + 4) = v940;
  *((_OWORD *)v118 + 1) = v120;
  v940 = 0;
  v939 = 0uLL;
  v121 = *(_QWORD *)v942;
  *(_OWORD *)(v118 + 40) = __p;
  *((_QWORD *)v118 + 7) = v121;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v122 = *(_OWORD *)&v942[8];
  *((_QWORD *)v118 + 10) = v943;
  *((_OWORD *)v118 + 4) = v122;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v118 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_290;
LABEL_294:
  if (SHIBYTE(v940) < 0)
LABEL_291:
    operator delete((void *)v939);
LABEL_295:
  v123 = sub_20EBA4AA4();
  if (*((char *)v123 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v123, v123[1]);
  }
  else
  {
    v124 = *(_OWORD *)v123;
    v937 = v123[2];
    *(_OWORD *)v936 = v124;
  }
  v125 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v126 = v936;
  }
  else
  {
    v125 = (uint64_t)v936[1];
    v126 = (void **)v936[0];
  }
  if (v125 >= 18)
  {
    v127 = (char *)v126 + v125;
    v128 = v126;
    do
    {
      v129 = (char *)memchr(v128, 67, v125 - 17);
      if (!v129)
        break;
      if (*(_QWORD *)v129 == 0x456C656E6E616843
        && *((_QWORD *)v129 + 1) == 0x696F763C726F7272
        && *((_WORD *)v129 + 8) == 15972)
      {
        if (v129 != v127 && v129 - (char *)v126 != -1)
          goto LABEL_339;
        break;
      }
      v128 = (void **)(v129 + 1);
      v125 = v127 - (char *)v128;
    }
    while (v127 - (char *)v128 >= 18);
  }
  v938[0] = (void *)(v111 + 1);
  LODWORD(v938[1]) = 3;
  v132 = SHIBYTE(v947);
  if (v947 >= 0)
    v133 = HIBYTE(v947);
  else
    v133 = *((_QWORD *)&__dst + 1);
  v134 = v133 + 6;
  if (v133 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v134 >= 0x17)
  {
    v136 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v134 | 7) != 0x17)
      v136 = v134 | 7;
    v137 = v136 + 1;
    v135 = (__int128 *)operator new(v136 + 1);
    *((_QWORD *)&v939 + 1) = v133 + 6;
    v940 = v137 | 0x8000000000000000;
    *(_QWORD *)&v939 = v135;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v135 = &v939;
    HIBYTE(v940) = v133 + 6;
    if (!v133)
      goto LABEL_331;
  }
  if (v132 >= 0)
    v138 = &__dst;
  else
    v138 = (__int128 *)__dst;
  memmove(v135, v138, v133);
LABEL_331:
  strcpy((char *)v135 + v133, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v139 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_338;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_338;
    }
LABEL_333:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_334;
    goto LABEL_339;
  }
  v140 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v139 = v140;
  v141 = v939;
  *((_QWORD *)v139 + 4) = v940;
  *((_OWORD *)v139 + 1) = v141;
  v940 = 0;
  v939 = 0uLL;
  v142 = *(_QWORD *)v942;
  *(_OWORD *)(v139 + 40) = __p;
  *((_QWORD *)v139 + 7) = v142;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v143 = *(_OWORD *)&v942[8];
  *((_QWORD *)v139 + 10) = v943;
  *((_OWORD *)v139 + 4) = v143;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v139 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_333;
LABEL_338:
  if (SHIBYTE(v940) < 0)
  {
LABEL_334:
    operator delete((void *)v939);
    v144 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v144)
      goto LABEL_343;
    goto LABEL_340;
  }
LABEL_339:
  v144 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v144)
  {
LABEL_343:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v148 = 0;
    goto LABEL_360;
  }
LABEL_340:
  v145 = std::__shared_weak_count::lock(v144);
  v938[1] = v145;
  if (!v145)
    goto LABEL_343;
  v146 = v145;
  v147 = *(void **)(v4 + 464);
  v938[0] = v147;
  if (v147)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v147 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v149 = (unint64_t *)&v146->__shared_owners_;
  do
    v150 = __ldaxr(v149);
  while (__stlxr(v150 - 1, v149));
  if (v150)
  {
    v148 = v933;
    v151 = v934;
    if (v933 == v934)
      goto LABEL_360;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
    std::__shared_weak_count::__release_weak(v146);
    v148 = v933;
    v151 = v934;
    if (v933 == v934)
      goto LABEL_360;
  }
  do
  {
    v938[0] = (void *)v111;
    v938[1] = *v148;
    v940 = 0;
    v939 = 0uLL;
    v153 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v152 = v939;
      *((_QWORD *)v153 + 4) = v940;
      *((_OWORD *)v153 + 1) = v152;
      v928 = v153 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v148;
  }
  while (v148 != v151);
  v148 = v933;
LABEL_360:
  if (v148)
  {
    v934 = v148;
    operator delete(v148);
  }
  v154 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v154 || (v155 = std::__shared_weak_count::lock(v154), (v938[1] = v155) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v158 = v924;
    v159 = 0;
    goto LABEL_381;
  }
  v156 = v155;
  v157 = *(void **)(v4 + 464);
  v938[0] = v157;
  if (v157)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v157 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v160 = (unint64_t *)&v156->__shared_owners_;
  v158 = v924;
  do
    v161 = __ldaxr(v160);
  while (__stlxr(v161 - 1, v160));
  if (v161)
  {
    v159 = v933;
    v162 = v934;
    if (v933 == v934)
      goto LABEL_381;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
    v159 = v933;
    v162 = v934;
    if (v933 == v934)
      goto LABEL_381;
  }
  v163 = (void *)(v111 + 1);
  do
  {
    v938[0] = v163;
    v938[1] = *v159;
    v940 = 0;
    v939 = 0uLL;
    v165 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v164 = v939;
      *((_QWORD *)v165 + 4) = v940;
      *((_OWORD *)v165 + 1) = v164;
      v928 = v165 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v159;
  }
  while (v159 != v162);
  v159 = v933;
LABEL_381:
  if (v159)
  {
    v934 = v159;
    operator delete(v159);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_385:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_386;
LABEL_390:
      operator delete((void *)__dst);
      if ((*(char *)(v158 + 31) & 0x80000000) == 0)
        goto LABEL_387;
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_385;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_390;
LABEL_386:
  if ((*(char *)(v158 + 31) & 0x80000000) == 0)
  {
LABEL_387:
    v166 = *(_OWORD *)(v158 + 8);
    *(_QWORD *)&v939 = *(_QWORD *)(v158 + 24);
    *(_OWORD *)v938 = v166;
    goto LABEL_392;
  }
LABEL_391:
  sub_20E860C04(v938, *(void **)(v158 + 8), *(_QWORD *)(v158 + 16));
LABEL_392:
  v167 = *(_QWORD *)(v158 + 56) != 0;
  if (*(char *)(v158 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v158 + 32), *(_QWORD *)(v158 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v158 + 32);
    v947 = *(_QWORD *)(v158 + 48);
  }
  sub_20EBA690C((uint64_t)v951, (__int128 *)v938, v167, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_397:
      v168 = (char *)v927;
      if (v927)
        goto LABEL_398;
LABEL_408:
      v170 = (char *)v930;
      if (!v930)
        goto LABEL_421;
      goto LABEL_409;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_397;
  }
  operator delete(v938[0]);
  v168 = (char *)v927;
  if (!v927)
    goto LABEL_408;
LABEL_398:
  v169 = v928;
  if (v928 == v168)
  {
    v928 = v168;
    operator delete(v168);
    v170 = (char *)v930;
    if (!v930)
      goto LABEL_421;
    goto LABEL_409;
  }
  do
  {
    if (*(v169 - 1) < 0)
      operator delete(*((void **)v169 - 3));
    v169 -= 40;
  }
  while (v169 != v168);
  v928 = v168;
  operator delete(v927);
  v170 = (char *)v930;
  if (v930)
  {
LABEL_409:
    v171 = v931;
    v172 = v170;
    if (v931 == v170)
    {
LABEL_420:
      v931 = v170;
      operator delete(v172);
      goto LABEL_421;
    }
    while (1)
    {
      while (*(v171 - 1) < 0)
      {
        operator delete(*((void **)v171 - 3));
        if (*(v171 - 25) < 0)
          goto LABEL_411;
LABEL_417:
        if ((*(v171 - 49) & 0x80000000) == 0)
          goto LABEL_412;
LABEL_418:
        operator delete(*((void **)v171 - 9));
        v171 -= 88;
        if (v171 == v170)
        {
LABEL_419:
          v172 = v930;
          goto LABEL_420;
        }
      }
      if ((*(v171 - 25) & 0x80000000) == 0)
        goto LABEL_417;
LABEL_411:
      operator delete(*((void **)v171 - 6));
      if (*(v171 - 49) < 0)
        goto LABEL_418;
LABEL_412:
      v171 -= 88;
      if (v171 == v170)
        goto LABEL_419;
    }
  }
LABEL_421:
  sub_20EBDF144((uint64_t)v952, *(_QWORD *)(a2 + 3744));
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v173 = *(_QWORD *)(a2 + 3936);
  if (!v173)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v173 = *(_QWORD *)(a2 + 3936);
    if ((*(char *)(v173 + 31) & 0x80000000) == 0)
      goto LABEL_423;
LABEL_426:
    sub_20E860C04(&__dst, *(void **)(v173 + 8), *(_QWORD *)(v173 + 16));
    goto LABEL_427;
  }
  if (*(char *)(v173 + 31) < 0)
    goto LABEL_426;
LABEL_423:
  v174 = *(_OWORD *)(v173 + 8);
  v947 = *(_QWORD *)(v173 + 24);
  __dst = v174;
LABEL_427:
  v175 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v173 + 96) + 48))(*(_QWORD *)(v173 + 96));
  v176 = atomic_load((unsigned __int8 *)&qword_254A5BBE0);
  if ((v176 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BBE0))
    goto LABEL_428;
  sub_20EBE7A30();
  v868 = byte_254A5C547;
  if (byte_254A5C547 >= 0)
    v869 = byte_254A5C547;
  else
    v869 = qword_254A5C538;
  v870 = v869 + 1;
  if (v869 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v870 >= 0x17)
  {
    v902 = (v870 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v870 | 7) != 0x17)
      v902 = v870 | 7;
    v903 = v902 + 1;
    v871 = (__int128 *)operator new(v902 + 1);
    *((_QWORD *)&xmmword_254A5C518 + 1) = v869 + 1;
    unk_254A5C528 = v903 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5C518 = v871;
    goto LABEL_2370;
  }
  unk_254A5C528 = 0;
  xmmword_254A5C518 = 0uLL;
  v871 = &xmmword_254A5C518;
  byte_254A5C52F = v869 + 1;
  if (v869)
  {
LABEL_2370:
    if (v868 >= 0)
      v904 = &qword_254A5C530;
    else
      v904 = (uint64_t *)qword_254A5C530;
    memmove(v871, v904, v869);
  }
  *(_WORD *)((char *)v871 + v869) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C518, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BBE0);
LABEL_428:
  if (byte_254A5C52F < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5C518, *((unint64_t *)&xmmword_254A5C518 + 1));
  }
  else
  {
    v944 = xmmword_254A5C518;
    v945 = unk_254A5C528;
  }
  v177 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v178 = &v944;
  }
  else
  {
    v177 = *((_QWORD *)&v944 + 1);
    v178 = (__int128 *)v944;
  }
  if (v177 >= 4)
  {
    v179 = (char *)v178 + v177;
    v180 = v178;
    do
    {
      v181 = (char *)memchr(v180, 118, v177 - 3);
      if (!v181)
        break;
      if (*(_DWORD *)v181 == 1684631414)
      {
        if (v181 == v179 || v181 - (char *)v178 == -1)
          break;
        v938[0] = (void *)v175;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v173 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v173 + 32), *(_QWORD *)(v173 + 40));
        }
        else
        {
          v852 = *(_OWORD *)(v173 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v173 + 48);
          __p = v852;
        }
        sub_20EBE92C4();
        if (byte_254A5C76F < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5C758, *((unint64_t *)&xmmword_254A5C758 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5C758;
          v943 = unk_254A5C768;
        }
        v183 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_454;
        goto LABEL_457;
      }
      v180 = (__int128 *)(v181 + 1);
      v177 = v179 - (char *)v180;
    }
    while (v179 - (char *)v180 >= 4);
  }
  v938[0] = (void *)v175;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v173 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v173 + 32), *(_QWORD *)(v173 + 40));
  }
  else
  {
    v182 = *(_OWORD *)(v173 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v173 + 48);
    __p = v182;
  }
  sub_20EBE92C4();
  if (byte_254A5C76F < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5C758, *((unint64_t *)&xmmword_254A5C758 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5C758;
    v943 = unk_254A5C768;
  }
  v183 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_457:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_459;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_459;
    }
LABEL_455:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_460;
    goto LABEL_456;
  }
LABEL_454:
  v184 = v938[0];
  *((_DWORD *)v183 + 2) = v938[1];
  *(_QWORD *)v183 = v184;
  v185 = v939;
  *((_QWORD *)v183 + 4) = v940;
  *((_OWORD *)v183 + 1) = v185;
  v940 = 0;
  v939 = 0uLL;
  v186 = *(_QWORD *)v942;
  *(_OWORD *)(v183 + 40) = __p;
  *((_QWORD *)v183 + 7) = v186;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v187 = *(_OWORD *)&v942[8];
  *((_QWORD *)v183 + 10) = v943;
  *((_OWORD *)v183 + 4) = v187;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v183 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_455;
LABEL_459:
  if (SHIBYTE(v940) < 0)
LABEL_456:
    operator delete((void *)v939);
LABEL_460:
  v188 = sub_20EBA4AA4();
  if (*((char *)v188 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v188, v188[1]);
  }
  else
  {
    v189 = *(_OWORD *)v188;
    v937 = v188[2];
    *(_OWORD *)v936 = v189;
  }
  v190 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v191 = v936;
  }
  else
  {
    v190 = (uint64_t)v936[1];
    v191 = (void **)v936[0];
  }
  if (v190 >= 18)
  {
    v192 = (char *)v191 + v190;
    v193 = v191;
    do
    {
      v194 = (char *)memchr(v193, 67, v190 - 17);
      if (!v194)
        break;
      if (*(_QWORD *)v194 == 0x456C656E6E616843
        && *((_QWORD *)v194 + 1) == 0x696F763C726F7272
        && *((_WORD *)v194 + 8) == 15972)
      {
        if (v194 != v192 && v194 - (char *)v191 != -1)
          goto LABEL_504;
        break;
      }
      v193 = (void **)(v194 + 1);
      v190 = v192 - (char *)v193;
    }
    while (v192 - (char *)v193 >= 18);
  }
  v938[0] = (void *)(v175 + 1);
  LODWORD(v938[1]) = 3;
  v197 = SHIBYTE(v947);
  if (v947 >= 0)
    v198 = HIBYTE(v947);
  else
    v198 = *((_QWORD *)&__dst + 1);
  v199 = v198 + 6;
  if (v198 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v199 >= 0x17)
  {
    v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17)
      v201 = v199 | 7;
    v202 = v201 + 1;
    v200 = (__int128 *)operator new(v201 + 1);
    *((_QWORD *)&v939 + 1) = v198 + 6;
    v940 = v202 | 0x8000000000000000;
    *(_QWORD *)&v939 = v200;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v200 = &v939;
    HIBYTE(v940) = v198 + 6;
    if (!v198)
      goto LABEL_496;
  }
  if (v197 >= 0)
    v203 = &__dst;
  else
    v203 = (__int128 *)__dst;
  memmove(v200, v203, v198);
LABEL_496:
  strcpy((char *)v200 + v198, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v204 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_503;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_503;
    }
LABEL_498:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_499;
    goto LABEL_504;
  }
  v205 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v204 = v205;
  v206 = v939;
  *((_QWORD *)v204 + 4) = v940;
  *((_OWORD *)v204 + 1) = v206;
  v940 = 0;
  v939 = 0uLL;
  v207 = *(_QWORD *)v942;
  *(_OWORD *)(v204 + 40) = __p;
  *((_QWORD *)v204 + 7) = v207;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v208 = *(_OWORD *)&v942[8];
  *((_QWORD *)v204 + 10) = v943;
  *((_OWORD *)v204 + 4) = v208;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v204 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_498;
LABEL_503:
  if (SHIBYTE(v940) < 0)
  {
LABEL_499:
    operator delete((void *)v939);
    v209 = *(std::__shared_weak_count **)(v173 + 136);
    if (!v209)
      goto LABEL_508;
    goto LABEL_505;
  }
LABEL_504:
  v209 = *(std::__shared_weak_count **)(v173 + 136);
  if (!v209)
  {
LABEL_508:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v213 = 0;
    goto LABEL_525;
  }
LABEL_505:
  v210 = std::__shared_weak_count::lock(v209);
  v938[1] = v210;
  if (!v210)
    goto LABEL_508;
  v211 = v210;
  v212 = *(void **)(v173 + 128);
  v938[0] = v212;
  if (v212)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v212 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v214 = (unint64_t *)&v211->__shared_owners_;
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (v215)
  {
    v213 = v933;
    v216 = v934;
    if (v933 == v934)
      goto LABEL_525;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
    std::__shared_weak_count::__release_weak(v211);
    v213 = v933;
    v216 = v934;
    if (v933 == v934)
      goto LABEL_525;
  }
  do
  {
    v938[0] = (void *)v175;
    v938[1] = *v213;
    v940 = 0;
    v939 = 0uLL;
    v218 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v217 = v939;
      *((_QWORD *)v218 + 4) = v940;
      *((_OWORD *)v218 + 1) = v217;
      v928 = v218 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v213;
  }
  while (v213 != v216);
  v213 = v933;
LABEL_525:
  if (v213)
  {
    v934 = v213;
    operator delete(v213);
  }
  v219 = *(std::__shared_weak_count **)(v173 + 136);
  if (!v219 || (v220 = std::__shared_weak_count::lock(v219), (v938[1] = v220) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v223 = 0;
    goto LABEL_546;
  }
  v221 = v220;
  v222 = *(void **)(v173 + 128);
  v938[0] = v222;
  if (v222)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v222 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v224 = (unint64_t *)&v221->__shared_owners_;
  do
    v225 = __ldaxr(v224);
  while (__stlxr(v225 - 1, v224));
  if (v225)
  {
    v223 = v933;
    v226 = v934;
    if (v933 == v934)
      goto LABEL_546;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
    std::__shared_weak_count::__release_weak(v221);
    v223 = v933;
    v226 = v934;
    if (v933 == v934)
      goto LABEL_546;
  }
  v227 = (void *)(v175 + 1);
  do
  {
    v938[0] = v227;
    v938[1] = *v223;
    v940 = 0;
    v939 = 0uLL;
    v229 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v228 = v939;
      *((_QWORD *)v229 + 4) = v940;
      *((_OWORD *)v229 + 1) = v228;
      v928 = v229 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v223;
  }
  while (v223 != v226);
  v223 = v933;
LABEL_546:
  if (v223)
  {
    v934 = v223;
    operator delete(v223);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_550:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_551;
LABEL_555:
      operator delete((void *)__dst);
      if ((*(char *)(a2 + 3895) & 0x80000000) == 0)
        goto LABEL_552;
      goto LABEL_556;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_550;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_555;
LABEL_551:
  if ((*(char *)(a2 + 3895) & 0x80000000) == 0)
  {
LABEL_552:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 3872);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 3888);
    goto LABEL_557;
  }
LABEL_556:
  sub_20E860C04(v938, *(void **)(a2 + 3872), *(_QWORD *)(a2 + 3880));
LABEL_557:
  v230 = *(_QWORD *)(a2 + 3920) != 0;
  if (*(char *)(a2 + 3919) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 3896), *(_QWORD *)(a2 + 3904));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 3896);
    v947 = *(_QWORD *)(a2 + 3912);
  }
  sub_20EBA690C((uint64_t)v953, (__int128 *)v938, v230, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_562:
      v231 = (char *)v927;
      if (v927)
        goto LABEL_563;
LABEL_573:
      v233 = (char *)v930;
      if (!v930)
        goto LABEL_586;
      goto LABEL_574;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_562;
  }
  operator delete(v938[0]);
  v231 = (char *)v927;
  if (!v927)
    goto LABEL_573;
LABEL_563:
  v232 = v928;
  if (v928 == v231)
  {
    v928 = v231;
    operator delete(v231);
    v233 = (char *)v930;
    if (!v930)
      goto LABEL_586;
    goto LABEL_574;
  }
  do
  {
    if (*(v232 - 1) < 0)
      operator delete(*((void **)v232 - 3));
    v232 -= 40;
  }
  while (v232 != v231);
  v928 = v231;
  operator delete(v927);
  v233 = (char *)v930;
  if (v930)
  {
LABEL_574:
    v234 = v931;
    v235 = v233;
    if (v931 == v233)
    {
LABEL_585:
      v931 = v233;
      operator delete(v235);
      goto LABEL_586;
    }
    while (1)
    {
      while (*(v234 - 1) < 0)
      {
        operator delete(*((void **)v234 - 3));
        if (*(v234 - 25) < 0)
          goto LABEL_576;
LABEL_582:
        if ((*(v234 - 49) & 0x80000000) == 0)
          goto LABEL_577;
LABEL_583:
        operator delete(*((void **)v234 - 9));
        v234 -= 88;
        if (v234 == v233)
        {
LABEL_584:
          v235 = v930;
          goto LABEL_585;
        }
      }
      if ((*(v234 - 25) & 0x80000000) == 0)
        goto LABEL_582;
LABEL_576:
      operator delete(*((void **)v234 - 6));
      if (*(v234 - 49) < 0)
        goto LABEL_583;
LABEL_577:
      v234 -= 88;
      if (v234 == v233)
        goto LABEL_584;
    }
  }
LABEL_586:
  sub_210216980(*(_QWORD *)(a2 + 3944), (uint64_t)v954);
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v236 = *(_QWORD *)(a2 + 4024);
  if (!v236)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v236 = *(_QWORD *)(a2 + 4024);
    if ((*(char *)(v236 + 31) & 0x80000000) == 0)
      goto LABEL_588;
LABEL_591:
    sub_20E860C04(&__dst, *(void **)(v236 + 8), *(_QWORD *)(v236 + 16));
    goto LABEL_592;
  }
  if (*(char *)(v236 + 31) < 0)
    goto LABEL_591;
LABEL_588:
  v237 = *(_OWORD *)(v236 + 8);
  v947 = *(_QWORD *)(v236 + 24);
  __dst = v237;
LABEL_592:
  v238 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v236 + 96) + 48))(*(_QWORD *)(v236 + 96));
  v239 = atomic_load((unsigned __int8 *)&qword_254A5BCB8);
  if ((v239 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BCB8))
    goto LABEL_593;
  sub_20EBE947C();
  v872 = byte_254A5C7CF;
  if (byte_254A5C7CF >= 0)
    v873 = byte_254A5C7CF;
  else
    v873 = qword_254A5C7C0;
  v874 = v873 + 1;
  if (v873 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v874 >= 0x17)
  {
    v905 = (v874 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v874 | 7) != 0x17)
      v905 = v874 | 7;
    v906 = v905 + 1;
    v875 = (__int128 *)operator new(v905 + 1);
    *((_QWORD *)&xmmword_254A5C7A0 + 1) = v873 + 1;
    unk_254A5C7B0 = v906 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5C7A0 = v875;
    goto LABEL_2378;
  }
  unk_254A5C7B0 = 0;
  xmmword_254A5C7A0 = 0uLL;
  v875 = &xmmword_254A5C7A0;
  byte_254A5C7B7 = v873 + 1;
  if (v873)
  {
LABEL_2378:
    if (v872 >= 0)
      v907 = &qword_254A5C7B8;
    else
      v907 = (uint64_t *)qword_254A5C7B8;
    memmove(v875, v907, v873);
  }
  *(_WORD *)((char *)v875 + v873) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C7A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BCB8);
LABEL_593:
  if (byte_254A5C7B7 < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5C7A0, *((unint64_t *)&xmmword_254A5C7A0 + 1));
  }
  else
  {
    v944 = xmmword_254A5C7A0;
    v945 = unk_254A5C7B0;
  }
  v240 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v241 = &v944;
  }
  else
  {
    v240 = *((_QWORD *)&v944 + 1);
    v241 = (__int128 *)v944;
  }
  if (v240 >= 4)
  {
    v242 = (char *)v241 + v240;
    v243 = v241;
    do
    {
      v244 = (char *)memchr(v243, 118, v240 - 3);
      if (!v244)
        break;
      if (*(_DWORD *)v244 == 1684631414)
      {
        if (v244 == v242 || v244 - (char *)v241 == -1)
          break;
        v938[0] = (void *)v238;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v236 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v236 + 32), *(_QWORD *)(v236 + 40));
        }
        else
        {
          v853 = *(_OWORD *)(v236 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v236 + 48);
          __p = v853;
        }
        sub_20EBE9E20();
        if (byte_254A5C8BF < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5C8A8, *((unint64_t *)&xmmword_254A5C8A8 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5C8A8;
          v943 = unk_254A5C8B8;
        }
        v246 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_619;
        goto LABEL_622;
      }
      v243 = (__int128 *)(v244 + 1);
      v240 = v242 - (char *)v243;
    }
    while (v242 - (char *)v243 >= 4);
  }
  v938[0] = (void *)v238;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v236 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v236 + 32), *(_QWORD *)(v236 + 40));
  }
  else
  {
    v245 = *(_OWORD *)(v236 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v236 + 48);
    __p = v245;
  }
  sub_20EBE9E20();
  if (byte_254A5C8BF < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5C8A8, *((unint64_t *)&xmmword_254A5C8A8 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5C8A8;
    v943 = unk_254A5C8B8;
  }
  v246 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_622:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_624;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_624;
    }
LABEL_620:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_625;
    goto LABEL_621;
  }
LABEL_619:
  v247 = v938[0];
  *((_DWORD *)v246 + 2) = v938[1];
  *(_QWORD *)v246 = v247;
  v248 = v939;
  *((_QWORD *)v246 + 4) = v940;
  *((_OWORD *)v246 + 1) = v248;
  v940 = 0;
  v939 = 0uLL;
  v249 = *(_QWORD *)v942;
  *(_OWORD *)(v246 + 40) = __p;
  *((_QWORD *)v246 + 7) = v249;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v250 = *(_OWORD *)&v942[8];
  *((_QWORD *)v246 + 10) = v943;
  *((_OWORD *)v246 + 4) = v250;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v246 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_620;
LABEL_624:
  if (SHIBYTE(v940) < 0)
LABEL_621:
    operator delete((void *)v939);
LABEL_625:
  v251 = sub_20EBA4AA4();
  if (*((char *)v251 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v251, v251[1]);
  }
  else
  {
    v252 = *(_OWORD *)v251;
    v937 = v251[2];
    *(_OWORD *)v936 = v252;
  }
  v253 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v254 = v936;
  }
  else
  {
    v253 = (uint64_t)v936[1];
    v254 = (void **)v936[0];
  }
  if (v253 >= 18)
  {
    v255 = (char *)v254 + v253;
    v256 = v254;
    do
    {
      v257 = (char *)memchr(v256, 67, v253 - 17);
      if (!v257)
        break;
      if (*(_QWORD *)v257 == 0x456C656E6E616843
        && *((_QWORD *)v257 + 1) == 0x696F763C726F7272
        && *((_WORD *)v257 + 8) == 15972)
      {
        if (v257 != v255 && v257 - (char *)v254 != -1)
          goto LABEL_669;
        break;
      }
      v256 = (void **)(v257 + 1);
      v253 = v255 - (char *)v256;
    }
    while (v255 - (char *)v256 >= 18);
  }
  v938[0] = (void *)(v238 + 1);
  LODWORD(v938[1]) = 3;
  v260 = SHIBYTE(v947);
  if (v947 >= 0)
    v261 = HIBYTE(v947);
  else
    v261 = *((_QWORD *)&__dst + 1);
  v262 = v261 + 6;
  if (v261 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v262 >= 0x17)
  {
    v264 = (v262 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v262 | 7) != 0x17)
      v264 = v262 | 7;
    v265 = v264 + 1;
    v263 = (__int128 *)operator new(v264 + 1);
    *((_QWORD *)&v939 + 1) = v261 + 6;
    v940 = v265 | 0x8000000000000000;
    *(_QWORD *)&v939 = v263;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v263 = &v939;
    HIBYTE(v940) = v261 + 6;
    if (!v261)
      goto LABEL_661;
  }
  if (v260 >= 0)
    v266 = &__dst;
  else
    v266 = (__int128 *)__dst;
  memmove(v263, v266, v261);
LABEL_661:
  strcpy((char *)v263 + v261, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v267 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_668;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_668;
    }
LABEL_663:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_664;
    goto LABEL_669;
  }
  v268 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v267 = v268;
  v269 = v939;
  *((_QWORD *)v267 + 4) = v940;
  *((_OWORD *)v267 + 1) = v269;
  v940 = 0;
  v939 = 0uLL;
  v270 = *(_QWORD *)v942;
  *(_OWORD *)(v267 + 40) = __p;
  *((_QWORD *)v267 + 7) = v270;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v271 = *(_OWORD *)&v942[8];
  *((_QWORD *)v267 + 10) = v943;
  *((_OWORD *)v267 + 4) = v271;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v267 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_663;
LABEL_668:
  if (SHIBYTE(v940) < 0)
  {
LABEL_664:
    operator delete((void *)v939);
    v272 = *(std::__shared_weak_count **)(v236 + 136);
    if (!v272)
      goto LABEL_673;
    goto LABEL_670;
  }
LABEL_669:
  v272 = *(std::__shared_weak_count **)(v236 + 136);
  if (!v272)
  {
LABEL_673:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v276 = 0;
    goto LABEL_690;
  }
LABEL_670:
  v273 = std::__shared_weak_count::lock(v272);
  v938[1] = v273;
  if (!v273)
    goto LABEL_673;
  v274 = v273;
  v275 = *(void **)(v236 + 128);
  v938[0] = v275;
  if (v275)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v275 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v277 = (unint64_t *)&v274->__shared_owners_;
  do
    v278 = __ldaxr(v277);
  while (__stlxr(v278 - 1, v277));
  if (v278)
  {
    v276 = v933;
    v279 = v934;
    if (v933 == v934)
      goto LABEL_690;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
    std::__shared_weak_count::__release_weak(v274);
    v276 = v933;
    v279 = v934;
    if (v933 == v934)
      goto LABEL_690;
  }
  do
  {
    v938[0] = (void *)v238;
    v938[1] = *v276;
    v940 = 0;
    v939 = 0uLL;
    v281 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v280 = v939;
      *((_QWORD *)v281 + 4) = v940;
      *((_OWORD *)v281 + 1) = v280;
      v928 = v281 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v276;
  }
  while (v276 != v279);
  v276 = v933;
LABEL_690:
  if (v276)
  {
    v934 = v276;
    operator delete(v276);
  }
  v282 = *(std::__shared_weak_count **)(v236 + 136);
  if (!v282 || (v283 = std::__shared_weak_count::lock(v282), (v938[1] = v283) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v286 = 0;
    goto LABEL_711;
  }
  v284 = v283;
  v285 = *(void **)(v236 + 128);
  v938[0] = v285;
  if (v285)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v285 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v287 = (unint64_t *)&v284->__shared_owners_;
  do
    v288 = __ldaxr(v287);
  while (__stlxr(v288 - 1, v287));
  if (v288)
  {
    v286 = v933;
    v289 = v934;
    if (v933 == v934)
      goto LABEL_711;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
    std::__shared_weak_count::__release_weak(v284);
    v286 = v933;
    v289 = v934;
    if (v933 == v934)
      goto LABEL_711;
  }
  v290 = (void *)(v238 + 1);
  do
  {
    v938[0] = v290;
    v938[1] = *v286;
    v940 = 0;
    v939 = 0uLL;
    v292 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v291 = v939;
      *((_QWORD *)v292 + 4) = v940;
      *((_OWORD *)v292 + 1) = v291;
      v928 = v292 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v286;
  }
  while (v286 != v289);
  v286 = v933;
LABEL_711:
  if (v286)
  {
    v934 = v286;
    operator delete(v286);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_715:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_716;
LABEL_720:
      operator delete((void *)__dst);
      if ((*(char *)(a2 + 3983) & 0x80000000) == 0)
        goto LABEL_717;
      goto LABEL_721;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_715;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_720;
LABEL_716:
  if ((*(char *)(a2 + 3983) & 0x80000000) == 0)
  {
LABEL_717:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 3960);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 3976);
    goto LABEL_722;
  }
LABEL_721:
  sub_20E860C04(v938, *(void **)(a2 + 3960), *(_QWORD *)(a2 + 3968));
LABEL_722:
  v293 = *(_QWORD *)(a2 + 4008) != 0;
  if (*(char *)(a2 + 4007) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 3984), *(_QWORD *)(a2 + 3992));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 3984);
    v947 = *(_QWORD *)(a2 + 4000);
  }
  sub_20EBA690C((uint64_t)v955, (__int128 *)v938, v293, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_727:
      v294 = (char *)v927;
      if (v927)
        goto LABEL_728;
LABEL_738:
      v296 = (char *)v930;
      if (!v930)
        goto LABEL_751;
      goto LABEL_739;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_727;
  }
  operator delete(v938[0]);
  v294 = (char *)v927;
  if (!v927)
    goto LABEL_738;
LABEL_728:
  v295 = v928;
  if (v928 == v294)
  {
    v928 = v294;
    operator delete(v294);
    v296 = (char *)v930;
    if (!v930)
      goto LABEL_751;
    goto LABEL_739;
  }
  do
  {
    if (*(v295 - 1) < 0)
      operator delete(*((void **)v295 - 3));
    v295 -= 40;
  }
  while (v295 != v294);
  v928 = v294;
  operator delete(v927);
  v296 = (char *)v930;
  if (v930)
  {
LABEL_739:
    v297 = v931;
    v298 = v296;
    if (v931 == v296)
    {
LABEL_750:
      v931 = v296;
      operator delete(v298);
      goto LABEL_751;
    }
    while (1)
    {
      while (*(v297 - 1) < 0)
      {
        operator delete(*((void **)v297 - 3));
        if (*(v297 - 25) < 0)
          goto LABEL_741;
LABEL_747:
        if ((*(v297 - 49) & 0x80000000) == 0)
          goto LABEL_742;
LABEL_748:
        operator delete(*((void **)v297 - 9));
        v297 -= 88;
        if (v297 == v296)
        {
LABEL_749:
          v298 = v930;
          goto LABEL_750;
        }
      }
      if ((*(v297 - 25) & 0x80000000) == 0)
        goto LABEL_747;
LABEL_741:
      operator delete(*((void **)v297 - 6));
      if (*(v297 - 49) < 0)
        goto LABEL_748;
LABEL_742:
      v297 -= 88;
      if (v297 == v296)
        goto LABEL_749;
    }
  }
LABEL_751:
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v299 = *(_QWORD *)(a2 + 4104);
  if (v299)
  {
    if ((*(char *)(v299 + 31) & 0x80000000) == 0)
    {
LABEL_753:
      v300 = *(_OWORD *)(v299 + 8);
      v947 = *(_QWORD *)(v299 + 24);
      __dst = v300;
      goto LABEL_757;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v299 = *(_QWORD *)(a2 + 4104);
    if ((*(char *)(v299 + 31) & 0x80000000) == 0)
      goto LABEL_753;
  }
  sub_20E860C04(&__dst, *(void **)(v299 + 8), *(_QWORD *)(v299 + 16));
LABEL_757:
  v301 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v299 + 96) + 48))(*(_QWORD *)(v299 + 96));
  v302 = sub_20EBA60E8();
  if (*((char *)v302 + 23) < 0)
  {
    sub_20E860C04(&v944, (void *)*v302, v302[1]);
  }
  else
  {
    v303 = *(_OWORD *)v302;
    v945 = v302[2];
    v944 = v303;
  }
  v304 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v305 = &v944;
  }
  else
  {
    v304 = *((_QWORD *)&v944 + 1);
    v305 = (__int128 *)v944;
  }
  if (v304 >= 4)
  {
    v306 = (char *)v305 + v304;
    v307 = v305;
    do
    {
      v308 = (char *)memchr(v307, 118, v304 - 3);
      if (!v308)
        break;
      if (*(_DWORD *)v308 == 1684631414)
      {
        if (v308 == v306 || v308 - (char *)v305 == -1)
          break;
        v938[0] = (void *)v301;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v299 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v299 + 32), *(_QWORD *)(v299 + 40));
        }
        else
        {
          v854 = *(_OWORD *)(v299 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v299 + 48);
          __p = v854;
        }
        sub_20EBE9FD8();
        if (byte_254A5C907 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5C8F0, *((unint64_t *)&xmmword_254A5C8F0 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5C8F0;
          v943 = unk_254A5C900;
        }
        v310 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_783;
        goto LABEL_786;
      }
      v307 = (__int128 *)(v308 + 1);
      v304 = v306 - (char *)v307;
    }
    while (v306 - (char *)v307 >= 4);
  }
  v938[0] = (void *)v301;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v299 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v299 + 32), *(_QWORD *)(v299 + 40));
  }
  else
  {
    v309 = *(_OWORD *)(v299 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v299 + 48);
    __p = v309;
  }
  sub_20EBE9FD8();
  if (byte_254A5C907 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5C8F0, *((unint64_t *)&xmmword_254A5C8F0 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5C8F0;
    v943 = unk_254A5C900;
  }
  v310 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_786:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_788;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_788;
    }
LABEL_784:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_789;
    goto LABEL_785;
  }
LABEL_783:
  v311 = v938[0];
  *((_DWORD *)v310 + 2) = v938[1];
  *(_QWORD *)v310 = v311;
  v312 = v939;
  *((_QWORD *)v310 + 4) = v940;
  *((_OWORD *)v310 + 1) = v312;
  v940 = 0;
  v939 = 0uLL;
  v313 = *(_QWORD *)v942;
  *(_OWORD *)(v310 + 40) = __p;
  *((_QWORD *)v310 + 7) = v313;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v314 = *(_OWORD *)&v942[8];
  *((_QWORD *)v310 + 10) = v943;
  *((_OWORD *)v310 + 4) = v314;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v310 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_784;
LABEL_788:
  if (SHIBYTE(v940) < 0)
LABEL_785:
    operator delete((void *)v939);
LABEL_789:
  v315 = sub_20EBA4AA4();
  if (*((char *)v315 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v315, v315[1]);
  }
  else
  {
    v316 = *(_OWORD *)v315;
    v937 = v315[2];
    *(_OWORD *)v936 = v316;
  }
  v317 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v318 = v936;
  }
  else
  {
    v317 = (uint64_t)v936[1];
    v318 = (void **)v936[0];
  }
  if (v317 >= 18)
  {
    v319 = (char *)v318 + v317;
    v320 = v318;
    do
    {
      v321 = (char *)memchr(v320, 67, v317 - 17);
      if (!v321)
        break;
      if (*(_QWORD *)v321 == 0x456C656E6E616843
        && *((_QWORD *)v321 + 1) == 0x696F763C726F7272
        && *((_WORD *)v321 + 8) == 15972)
      {
        if (v321 != v319 && v321 - (char *)v318 != -1)
          goto LABEL_833;
        break;
      }
      v320 = (void **)(v321 + 1);
      v317 = v319 - (char *)v320;
    }
    while (v319 - (char *)v320 >= 18);
  }
  v938[0] = (void *)(v301 + 1);
  LODWORD(v938[1]) = 3;
  v324 = SHIBYTE(v947);
  if (v947 >= 0)
    v325 = HIBYTE(v947);
  else
    v325 = *((_QWORD *)&__dst + 1);
  v326 = v325 + 6;
  if (v325 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v326 >= 0x17)
  {
    v328 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v326 | 7) != 0x17)
      v328 = v326 | 7;
    v329 = v328 + 1;
    v327 = (__int128 *)operator new(v328 + 1);
    *((_QWORD *)&v939 + 1) = v325 + 6;
    v940 = v329 | 0x8000000000000000;
    *(_QWORD *)&v939 = v327;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v327 = &v939;
    HIBYTE(v940) = v325 + 6;
    if (!v325)
      goto LABEL_825;
  }
  if (v324 >= 0)
    v330 = &__dst;
  else
    v330 = (__int128 *)__dst;
  memmove(v327, v330, v325);
LABEL_825:
  strcpy((char *)v327 + v325, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v331 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_832;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_832;
    }
LABEL_827:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_828;
    goto LABEL_833;
  }
  v332 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v331 = v332;
  v333 = v939;
  *((_QWORD *)v331 + 4) = v940;
  *((_OWORD *)v331 + 1) = v333;
  v940 = 0;
  v939 = 0uLL;
  v334 = *(_QWORD *)v942;
  *(_OWORD *)(v331 + 40) = __p;
  *((_QWORD *)v331 + 7) = v334;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v335 = *(_OWORD *)&v942[8];
  *((_QWORD *)v331 + 10) = v943;
  *((_OWORD *)v331 + 4) = v335;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v331 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_827;
LABEL_832:
  if (SHIBYTE(v940) < 0)
  {
LABEL_828:
    operator delete((void *)v939);
    v336 = *(std::__shared_weak_count **)(v299 + 136);
    if (!v336)
      goto LABEL_837;
    goto LABEL_834;
  }
LABEL_833:
  v336 = *(std::__shared_weak_count **)(v299 + 136);
  if (!v336)
  {
LABEL_837:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v340 = 0;
    goto LABEL_854;
  }
LABEL_834:
  v337 = std::__shared_weak_count::lock(v336);
  v938[1] = v337;
  if (!v337)
    goto LABEL_837;
  v338 = v337;
  v339 = *(void **)(v299 + 128);
  v938[0] = v339;
  if (v339)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v339 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v341 = (unint64_t *)&v338->__shared_owners_;
  do
    v342 = __ldaxr(v341);
  while (__stlxr(v342 - 1, v341));
  if (v342)
  {
    v340 = v933;
    v343 = v934;
    if (v933 == v934)
      goto LABEL_854;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
    std::__shared_weak_count::__release_weak(v338);
    v340 = v933;
    v343 = v934;
    if (v933 == v934)
      goto LABEL_854;
  }
  do
  {
    v938[0] = (void *)v301;
    v938[1] = *v340;
    v940 = 0;
    v939 = 0uLL;
    v345 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v344 = v939;
      *((_QWORD *)v345 + 4) = v940;
      *((_OWORD *)v345 + 1) = v344;
      v928 = v345 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v340;
  }
  while (v340 != v343);
  v340 = v933;
LABEL_854:
  if (v340)
  {
    v934 = v340;
    operator delete(v340);
  }
  v346 = *(std::__shared_weak_count **)(v299 + 136);
  if (!v346 || (v347 = std::__shared_weak_count::lock(v346), (v938[1] = v347) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v350 = 0;
    goto LABEL_875;
  }
  v348 = v347;
  v349 = *(void **)(v299 + 128);
  v938[0] = v349;
  if (v349)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v349 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v351 = (unint64_t *)&v348->__shared_owners_;
  do
    v352 = __ldaxr(v351);
  while (__stlxr(v352 - 1, v351));
  if (v352)
  {
    v350 = v933;
    v353 = v934;
    if (v933 == v934)
      goto LABEL_875;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
    std::__shared_weak_count::__release_weak(v348);
    v350 = v933;
    v353 = v934;
    if (v933 == v934)
      goto LABEL_875;
  }
  v354 = (void *)(v301 + 1);
  do
  {
    v938[0] = v354;
    v938[1] = *v350;
    v940 = 0;
    v939 = 0uLL;
    v356 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v355 = v939;
      *((_QWORD *)v356 + 4) = v940;
      *((_OWORD *)v356 + 1) = v355;
      v928 = v356 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v350;
  }
  while (v350 != v353);
  v350 = v933;
LABEL_875:
  if (v350)
  {
    v934 = v350;
    operator delete(v350);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_879:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_880;
LABEL_884:
      operator delete((void *)__dst);
      if ((*(char *)(v299 + 199) & 0x80000000) == 0)
        goto LABEL_881;
LABEL_885:
      sub_20E860C04(&__dst, *(void **)(v299 + 176), *(_QWORD *)(v299 + 184));
      goto LABEL_886;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_879;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_884;
LABEL_880:
  if (*(char *)(v299 + 199) < 0)
    goto LABEL_885;
LABEL_881:
  __dst = *(_OWORD *)(v299 + 176);
  v947 = *(_QWORD *)(v299 + 192);
LABEL_886:
  v357 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v299 + 264) + 48))(*(_QWORD *)(v299 + 264));
  v358 = atomic_load((unsigned __int8 *)&qword_254A5BD40);
  if ((v358 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BD40))
    goto LABEL_887;
  sub_20EBEA190();
  v876 = byte_254A5C967;
  if (byte_254A5C967 >= 0)
    v877 = byte_254A5C967;
  else
    v877 = qword_254A5C958;
  v878 = v877 + 1;
  if (v877 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v878 >= 0x17)
  {
    v908 = (v878 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v878 | 7) != 0x17)
      v908 = v878 | 7;
    v909 = v908 + 1;
    v879 = (__int128 *)operator new(v908 + 1);
    *((_QWORD *)&xmmword_254A5C938 + 1) = v877 + 1;
    unk_254A5C948 = v909 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5C938 = v879;
    goto LABEL_2386;
  }
  v879 = &xmmword_254A5C938;
  unk_254A5C948 = 0;
  xmmword_254A5C938 = 0uLL;
  byte_254A5C94F = v877 + 1;
  if (v877)
  {
LABEL_2386:
    if (v876 >= 0)
      v910 = &qword_254A5C950;
    else
      v910 = (uint64_t *)qword_254A5C950;
    memmove(v879, v910, v877);
  }
  *(_WORD *)((char *)v879 + v877) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C938, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BD40);
LABEL_887:
  if (byte_254A5C94F < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5C938, *((unint64_t *)&xmmword_254A5C938 + 1));
  }
  else
  {
    v944 = xmmword_254A5C938;
    v945 = unk_254A5C948;
  }
  v359 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v360 = &v944;
  }
  else
  {
    v359 = *((_QWORD *)&v944 + 1);
    v360 = (__int128 *)v944;
  }
  if (v359 >= 4)
  {
    v361 = (char *)v360 + v359;
    v362 = v360;
    do
    {
      v363 = (char *)memchr(v362, 118, v359 - 3);
      if (!v363)
        break;
      if (*(_DWORD *)v363 == 1684631414)
      {
        if (v363 == v361 || v363 - (char *)v360 == -1)
          break;
        v938[0] = (void *)v357;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v299 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v299 + 200), *(_QWORD *)(v299 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v299 + 200);
          *(_QWORD *)v942 = *(_QWORD *)(v299 + 216);
        }
        sub_20EBEA954();
        if (byte_254A5CA3F < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CA28, *((unint64_t *)&xmmword_254A5CA28 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CA28;
          v943 = unk_254A5CA38;
        }
        v364 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_913;
        goto LABEL_916;
      }
      v362 = (__int128 *)(v363 + 1);
      v359 = v361 - (char *)v362;
    }
    while (v361 - (char *)v362 >= 4);
  }
  v938[0] = (void *)v357;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v299 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v299 + 200), *(_QWORD *)(v299 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v299 + 200);
    *(_QWORD *)v942 = *(_QWORD *)(v299 + 216);
  }
  sub_20EBEA954();
  if (byte_254A5CA3F < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CA28, *((unint64_t *)&xmmword_254A5CA28 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CA28;
    v943 = unk_254A5CA38;
  }
  v364 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_916:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_918;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_918;
    }
LABEL_914:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_919;
    goto LABEL_915;
  }
LABEL_913:
  v365 = v938[0];
  *((_DWORD *)v364 + 2) = v938[1];
  *(_QWORD *)v364 = v365;
  v366 = v939;
  *((_QWORD *)v364 + 4) = v940;
  *((_OWORD *)v364 + 1) = v366;
  v940 = 0;
  v939 = 0uLL;
  v367 = *(_QWORD *)v942;
  *(_OWORD *)(v364 + 40) = __p;
  *((_QWORD *)v364 + 7) = v367;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v368 = *(_OWORD *)&v942[8];
  *((_QWORD *)v364 + 10) = v943;
  *((_OWORD *)v364 + 4) = v368;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v364 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_914;
LABEL_918:
  if (SHIBYTE(v940) < 0)
LABEL_915:
    operator delete((void *)v939);
LABEL_919:
  v369 = sub_20EBA4AA4();
  if (*((char *)v369 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v369, v369[1]);
  }
  else
  {
    v370 = *(_OWORD *)v369;
    v937 = v369[2];
    *(_OWORD *)v936 = v370;
  }
  v371 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v372 = v936;
  }
  else
  {
    v371 = (uint64_t)v936[1];
    v372 = (void **)v936[0];
  }
  if (v371 >= 18)
  {
    v373 = (char *)v372 + v371;
    v374 = v372;
    do
    {
      v375 = (char *)memchr(v374, 67, v371 - 17);
      if (!v375)
        break;
      if (*(_QWORD *)v375 == 0x456C656E6E616843
        && *((_QWORD *)v375 + 1) == 0x696F763C726F7272
        && *((_WORD *)v375 + 8) == 15972)
      {
        if (v375 != v373 && v375 - (char *)v372 != -1)
          goto LABEL_963;
        break;
      }
      v374 = (void **)(v375 + 1);
      v371 = v373 - (char *)v374;
    }
    while (v373 - (char *)v374 >= 18);
  }
  v938[0] = (void *)(v357 + 1);
  LODWORD(v938[1]) = 3;
  v378 = SHIBYTE(v947);
  if (v947 >= 0)
    v379 = HIBYTE(v947);
  else
    v379 = *((_QWORD *)&__dst + 1);
  v380 = v379 + 6;
  if (v379 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v380 >= 0x17)
  {
    v382 = (v380 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v380 | 7) != 0x17)
      v382 = v380 | 7;
    v383 = v382 + 1;
    v381 = (__int128 *)operator new(v382 + 1);
    *((_QWORD *)&v939 + 1) = v379 + 6;
    v940 = v383 | 0x8000000000000000;
    *(_QWORD *)&v939 = v381;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v381 = &v939;
    HIBYTE(v940) = v379 + 6;
    if (!v379)
      goto LABEL_955;
  }
  if (v378 >= 0)
    v384 = &__dst;
  else
    v384 = (__int128 *)__dst;
  memmove(v381, v384, v379);
LABEL_955:
  strcpy((char *)v381 + v379, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v385 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_962;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_962;
    }
LABEL_957:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_958;
    goto LABEL_963;
  }
  v386 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v385 = v386;
  v387 = v939;
  *((_QWORD *)v385 + 4) = v940;
  *((_OWORD *)v385 + 1) = v387;
  v940 = 0;
  v939 = 0uLL;
  v388 = *(_QWORD *)v942;
  *(_OWORD *)(v385 + 40) = __p;
  *((_QWORD *)v385 + 7) = v388;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v389 = *(_OWORD *)&v942[8];
  *((_QWORD *)v385 + 10) = v943;
  *((_OWORD *)v385 + 4) = v389;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v385 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_957;
LABEL_962:
  if (SHIBYTE(v940) < 0)
  {
LABEL_958:
    operator delete((void *)v939);
    v390 = *(std::__shared_weak_count **)(v299 + 304);
    if (!v390)
      goto LABEL_967;
    goto LABEL_964;
  }
LABEL_963:
  v390 = *(std::__shared_weak_count **)(v299 + 304);
  if (!v390)
  {
LABEL_967:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v394 = 0;
    goto LABEL_984;
  }
LABEL_964:
  v391 = std::__shared_weak_count::lock(v390);
  v938[1] = v391;
  if (!v391)
    goto LABEL_967;
  v392 = v391;
  v393 = *(void **)(v299 + 296);
  v938[0] = v393;
  if (v393)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v393 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v395 = (unint64_t *)&v392->__shared_owners_;
  do
    v396 = __ldaxr(v395);
  while (__stlxr(v396 - 1, v395));
  if (v396)
  {
    v394 = v933;
    v397 = v934;
    if (v933 == v934)
      goto LABEL_984;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
    std::__shared_weak_count::__release_weak(v392);
    v394 = v933;
    v397 = v934;
    if (v933 == v934)
      goto LABEL_984;
  }
  do
  {
    v938[0] = (void *)v357;
    v938[1] = *v394;
    v940 = 0;
    v939 = 0uLL;
    v399 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v398 = v939;
      *((_QWORD *)v399 + 4) = v940;
      *((_OWORD *)v399 + 1) = v398;
      v928 = v399 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v394;
  }
  while (v394 != v397);
  v394 = v933;
LABEL_984:
  if (v394)
  {
    v934 = v394;
    operator delete(v394);
  }
  v400 = *(std::__shared_weak_count **)(v299 + 304);
  if (!v400 || (v401 = std::__shared_weak_count::lock(v400), (v938[1] = v401) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v404 = 0;
    goto LABEL_1005;
  }
  v402 = v401;
  v403 = *(void **)(v299 + 296);
  v938[0] = v403;
  if (v403)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v403 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v405 = (unint64_t *)&v402->__shared_owners_;
  do
    v406 = __ldaxr(v405);
  while (__stlxr(v406 - 1, v405));
  if (v406)
  {
    v404 = v933;
    v407 = v934;
    if (v933 == v934)
      goto LABEL_1005;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
    std::__shared_weak_count::__release_weak(v402);
    v404 = v933;
    v407 = v934;
    if (v933 == v934)
      goto LABEL_1005;
  }
  v408 = (void *)(v357 + 1);
  do
  {
    v938[0] = v408;
    v938[1] = *v404;
    v940 = 0;
    v939 = 0uLL;
    v410 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v409 = v939;
      *((_QWORD *)v410 + 4) = v940;
      *((_OWORD *)v410 + 1) = v409;
      v928 = v410 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v404;
  }
  while (v404 != v407);
  v404 = v933;
LABEL_1005:
  if (v404)
  {
    v934 = v404;
    operator delete(v404);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1009:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1010;
LABEL_1014:
      operator delete((void *)__dst);
      if ((*(char *)(a2 + 4063) & 0x80000000) == 0)
        goto LABEL_1011;
      goto LABEL_1015;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1009;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1014;
LABEL_1010:
  if ((*(char *)(a2 + 4063) & 0x80000000) == 0)
  {
LABEL_1011:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 4040);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 4056);
    goto LABEL_1016;
  }
LABEL_1015:
  sub_20E860C04(v938, *(void **)(a2 + 4040), *(_QWORD *)(a2 + 4048));
LABEL_1016:
  v411 = *(_QWORD *)(a2 + 4088) != 0;
  if (*(char *)(a2 + 4087) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 4064), *(_QWORD *)(a2 + 4072));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 4064);
    v947 = *(_QWORD *)(a2 + 4080);
  }
  sub_20EBA690C((uint64_t)v956, (__int128 *)v938, v411, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_1021:
      v412 = (char *)v927;
      if (v927)
        goto LABEL_1022;
LABEL_1032:
      v414 = (char *)v930;
      if (!v930)
        goto LABEL_1045;
      goto LABEL_1033;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_1021;
  }
  operator delete(v938[0]);
  v412 = (char *)v927;
  if (!v927)
    goto LABEL_1032;
LABEL_1022:
  v413 = v928;
  if (v928 == v412)
  {
    v928 = v412;
    operator delete(v412);
    v414 = (char *)v930;
    if (!v930)
      goto LABEL_1045;
    goto LABEL_1033;
  }
  do
  {
    if (*(v413 - 1) < 0)
      operator delete(*((void **)v413 - 3));
    v413 -= 40;
  }
  while (v413 != v412);
  v928 = v412;
  operator delete(v927);
  v414 = (char *)v930;
  if (v930)
  {
LABEL_1033:
    v415 = v931;
    v416 = v414;
    if (v931 == v414)
    {
LABEL_1044:
      v931 = v414;
      operator delete(v416);
      goto LABEL_1045;
    }
    while (1)
    {
      while (*(v415 - 1) < 0)
      {
        operator delete(*((void **)v415 - 3));
        if (*(v415 - 25) < 0)
          goto LABEL_1035;
LABEL_1041:
        if ((*(v415 - 49) & 0x80000000) == 0)
          goto LABEL_1036;
LABEL_1042:
        operator delete(*((void **)v415 - 9));
        v415 -= 88;
        if (v415 == v414)
        {
LABEL_1043:
          v416 = v930;
          goto LABEL_1044;
        }
      }
      if ((*(v415 - 25) & 0x80000000) == 0)
        goto LABEL_1041;
LABEL_1035:
      operator delete(*((void **)v415 - 6));
      if (*(v415 - 49) < 0)
        goto LABEL_1042;
LABEL_1036:
      v415 -= 88;
      if (v415 == v414)
        goto LABEL_1043;
    }
  }
LABEL_1045:
  v417 = *(_QWORD *)(a2 + 4112);
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v925 = v417;
  v418 = *(_QWORD *)(v417 + 72);
  if (!v418)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v418 = *(_QWORD *)(v925 + 72);
    if ((*(char *)(v418 + 31) & 0x80000000) == 0)
      goto LABEL_1047;
LABEL_1050:
    sub_20E860C04(&__dst, *(void **)(v418 + 8), *(_QWORD *)(v418 + 16));
    goto LABEL_1051;
  }
  if (*(char *)(v418 + 31) < 0)
    goto LABEL_1050;
LABEL_1047:
  v419 = *(_OWORD *)(v418 + 8);
  v947 = *(_QWORD *)(v418 + 24);
  __dst = v419;
LABEL_1051:
  v420 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v418 + 96) + 48))(*(_QWORD *)(v418 + 96));
  v421 = atomic_load((unsigned __int8 *)&qword_254A5BDA8);
  if ((v421 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BDA8))
    goto LABEL_1052;
  sub_20EBEAB18();
  v880 = byte_254A5CA9F;
  if (byte_254A5CA9F >= 0)
    v881 = byte_254A5CA9F;
  else
    v881 = qword_254A5CA90;
  v882 = v881 + 1;
  if (v881 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v882 >= 0x17)
  {
    v911 = (v882 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v882 | 7) != 0x17)
      v911 = v882 | 7;
    v912 = v911 + 1;
    v883 = (__int128 *)operator new(v911 + 1);
    *((_QWORD *)&xmmword_254A5CA70 + 1) = v881 + 1;
    unk_254A5CA80 = v912 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5CA70 = v883;
    goto LABEL_2394;
  }
  v883 = &xmmword_254A5CA70;
  unk_254A5CA80 = 0;
  xmmword_254A5CA70 = 0uLL;
  byte_254A5CA87 = v881 + 1;
  if (v881)
  {
LABEL_2394:
    if (v880 >= 0)
      v913 = &qword_254A5CA88;
    else
      v913 = (uint64_t *)qword_254A5CA88;
    memmove(v883, v913, v881);
  }
  *(_WORD *)((char *)v883 + v881) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CA70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BDA8);
LABEL_1052:
  if (byte_254A5CA87 < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5CA70, *((unint64_t *)&xmmword_254A5CA70 + 1));
  }
  else
  {
    v944 = xmmword_254A5CA70;
    v945 = unk_254A5CA80;
  }
  v422 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v423 = &v944;
  }
  else
  {
    v422 = *((_QWORD *)&v944 + 1);
    v423 = (__int128 *)v944;
  }
  if (v422 >= 4)
  {
    v424 = (char *)v423 + v422;
    v425 = v423;
    do
    {
      v426 = (char *)memchr(v425, 118, v422 - 3);
      if (!v426)
        break;
      if (*(_DWORD *)v426 == 1684631414)
      {
        if (v426 == v424 || v426 - (char *)v423 == -1)
          break;
        v938[0] = (void *)v420;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v418 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v418 + 32), *(_QWORD *)(v418 + 40));
        }
        else
        {
          v855 = *(_OWORD *)(v418 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v418 + 48);
          __p = v855;
        }
        sub_20EBEB2E0();
        if (byte_254A5CB77 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CB60, *((unint64_t *)&xmmword_254A5CB60 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CB60;
          v943 = unk_254A5CB70;
        }
        v428 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1078;
        goto LABEL_1081;
      }
      v425 = (__int128 *)(v426 + 1);
      v422 = v424 - (char *)v425;
    }
    while (v424 - (char *)v425 >= 4);
  }
  v938[0] = (void *)v420;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v418 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v418 + 32), *(_QWORD *)(v418 + 40));
  }
  else
  {
    v427 = *(_OWORD *)(v418 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v418 + 48);
    __p = v427;
  }
  sub_20EBEB2E0();
  if (byte_254A5CB77 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CB60, *((unint64_t *)&xmmword_254A5CB60 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CB60;
    v943 = unk_254A5CB70;
  }
  v428 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1081:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1083;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1083;
    }
LABEL_1079:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1084;
    goto LABEL_1080;
  }
LABEL_1078:
  v429 = v938[0];
  *((_DWORD *)v428 + 2) = v938[1];
  *(_QWORD *)v428 = v429;
  v430 = v939;
  *((_QWORD *)v428 + 4) = v940;
  *((_OWORD *)v428 + 1) = v430;
  v940 = 0;
  v939 = 0uLL;
  v431 = *(_QWORD *)v942;
  *(_OWORD *)(v428 + 40) = __p;
  *((_QWORD *)v428 + 7) = v431;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v432 = *(_OWORD *)&v942[8];
  *((_QWORD *)v428 + 10) = v943;
  *((_OWORD *)v428 + 4) = v432;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v428 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1079;
LABEL_1083:
  if (SHIBYTE(v940) < 0)
LABEL_1080:
    operator delete((void *)v939);
LABEL_1084:
  v433 = sub_20EBA4AA4();
  if (*((char *)v433 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v433, v433[1]);
  }
  else
  {
    v434 = *(_OWORD *)v433;
    v937 = v433[2];
    *(_OWORD *)v936 = v434;
  }
  v435 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v436 = v936;
  }
  else
  {
    v435 = (uint64_t)v936[1];
    v436 = (void **)v936[0];
  }
  if (v435 >= 18)
  {
    v437 = (char *)v436 + v435;
    v438 = v436;
    do
    {
      v439 = (char *)memchr(v438, 67, v435 - 17);
      if (!v439)
        break;
      if (*(_QWORD *)v439 == 0x456C656E6E616843
        && *((_QWORD *)v439 + 1) == 0x696F763C726F7272
        && *((_WORD *)v439 + 8) == 15972)
      {
        if (v439 != v437 && v439 - (char *)v436 != -1)
          goto LABEL_1128;
        break;
      }
      v438 = (void **)(v439 + 1);
      v435 = v437 - (char *)v438;
    }
    while (v437 - (char *)v438 >= 18);
  }
  v938[0] = (void *)(v420 + 1);
  LODWORD(v938[1]) = 3;
  v442 = SHIBYTE(v947);
  if (v947 >= 0)
    v443 = HIBYTE(v947);
  else
    v443 = *((_QWORD *)&__dst + 1);
  v444 = v443 + 6;
  if (v443 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v444 >= 0x17)
  {
    v446 = (v444 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v444 | 7) != 0x17)
      v446 = v444 | 7;
    v447 = v446 + 1;
    v445 = (__int128 *)operator new(v446 + 1);
    *((_QWORD *)&v939 + 1) = v443 + 6;
    v940 = v447 | 0x8000000000000000;
    *(_QWORD *)&v939 = v445;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v445 = &v939;
    HIBYTE(v940) = v443 + 6;
    if (!v443)
      goto LABEL_1120;
  }
  if (v442 >= 0)
    v448 = &__dst;
  else
    v448 = (__int128 *)__dst;
  memmove(v445, v448, v443);
LABEL_1120:
  strcpy((char *)v445 + v443, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v449 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1127;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1127;
    }
LABEL_1122:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1123;
    goto LABEL_1128;
  }
  v450 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v449 = v450;
  v451 = v939;
  *((_QWORD *)v449 + 4) = v940;
  *((_OWORD *)v449 + 1) = v451;
  v940 = 0;
  v939 = 0uLL;
  v452 = *(_QWORD *)v942;
  *(_OWORD *)(v449 + 40) = __p;
  *((_QWORD *)v449 + 7) = v452;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v453 = *(_OWORD *)&v942[8];
  *((_QWORD *)v449 + 10) = v943;
  *((_OWORD *)v449 + 4) = v453;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v449 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1122;
LABEL_1127:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1123:
    operator delete((void *)v939);
    v454 = *(std::__shared_weak_count **)(v418 + 136);
    if (!v454)
      goto LABEL_1132;
    goto LABEL_1129;
  }
LABEL_1128:
  v454 = *(std::__shared_weak_count **)(v418 + 136);
  if (!v454)
  {
LABEL_1132:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v458 = 0;
    goto LABEL_1149;
  }
LABEL_1129:
  v455 = std::__shared_weak_count::lock(v454);
  v938[1] = v455;
  if (!v455)
    goto LABEL_1132;
  v456 = v455;
  v457 = *(void **)(v418 + 128);
  v938[0] = v457;
  if (v457)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v457 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v459 = (unint64_t *)&v456->__shared_owners_;
  do
    v460 = __ldaxr(v459);
  while (__stlxr(v460 - 1, v459));
  if (v460)
  {
    v458 = v933;
    v461 = v934;
    if (v933 == v934)
      goto LABEL_1149;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
    std::__shared_weak_count::__release_weak(v456);
    v458 = v933;
    v461 = v934;
    if (v933 == v934)
      goto LABEL_1149;
  }
  do
  {
    v938[0] = (void *)v420;
    v938[1] = *v458;
    v940 = 0;
    v939 = 0uLL;
    v463 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v462 = v939;
      *((_QWORD *)v463 + 4) = v940;
      *((_OWORD *)v463 + 1) = v462;
      v928 = v463 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v458;
  }
  while (v458 != v461);
  v458 = v933;
LABEL_1149:
  if (v458)
  {
    v934 = v458;
    operator delete(v458);
  }
  v464 = *(std::__shared_weak_count **)(v418 + 136);
  if (!v464 || (v465 = std::__shared_weak_count::lock(v464), (v938[1] = v465) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v468 = 0;
    goto LABEL_1170;
  }
  v466 = v465;
  v467 = *(void **)(v418 + 128);
  v938[0] = v467;
  if (v467)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v467 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v469 = (unint64_t *)&v466->__shared_owners_;
  do
    v470 = __ldaxr(v469);
  while (__stlxr(v470 - 1, v469));
  if (v470)
  {
    v468 = v933;
    v471 = v934;
    if (v933 == v934)
      goto LABEL_1170;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
    std::__shared_weak_count::__release_weak(v466);
    v468 = v933;
    v471 = v934;
    if (v933 == v934)
      goto LABEL_1170;
  }
  v472 = (void *)(v420 + 1);
  do
  {
    v938[0] = v472;
    v938[1] = *v468;
    v940 = 0;
    v939 = 0uLL;
    v474 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v473 = v939;
      *((_QWORD *)v474 + 4) = v940;
      *((_OWORD *)v474 + 1) = v473;
      v928 = v474 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v468;
  }
  while (v468 != v471);
  v468 = v933;
LABEL_1170:
  if (v468)
  {
    v934 = v468;
    operator delete(v468);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1174:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1175;
LABEL_1179:
      operator delete((void *)__dst);
      if ((*(char *)(v418 + 199) & 0x80000000) == 0)
        goto LABEL_1176;
      goto LABEL_1180;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1174;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1179;
LABEL_1175:
  if ((*(char *)(v418 + 199) & 0x80000000) == 0)
  {
LABEL_1176:
    __dst = *(_OWORD *)(v418 + 176);
    v947 = *(_QWORD *)(v418 + 192);
    goto LABEL_1181;
  }
LABEL_1180:
  sub_20E860C04(&__dst, *(void **)(v418 + 176), *(_QWORD *)(v418 + 184));
LABEL_1181:
  v475 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v418 + 264) + 48))(*(_QWORD *)(v418 + 264));
  v476 = sub_20EBA60E8();
  if (*((char *)v476 + 23) < 0)
  {
    sub_20E860C04(&v944, (void *)*v476, v476[1]);
  }
  else
  {
    v477 = *(_OWORD *)v476;
    v945 = v476[2];
    v944 = v477;
  }
  v478 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v479 = &v944;
  }
  else
  {
    v478 = *((_QWORD *)&v944 + 1);
    v479 = (__int128 *)v944;
  }
  if (v478 >= 4)
  {
    v480 = (char *)v479 + v478;
    v481 = v479;
    do
    {
      v482 = (char *)memchr(v481, 118, v478 - 3);
      if (!v482)
        break;
      if (*(_DWORD *)v482 == 1684631414)
      {
        if (v482 == v480 || v482 - (char *)v479 == -1)
          break;
        v938[0] = (void *)v475;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v418 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v418 + 200), *(_QWORD *)(v418 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v418 + 200);
          *(_QWORD *)v942 = *(_QWORD *)(v418 + 216);
        }
        sub_20EBEB4A4();
        if (byte_254A5CBBF < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CBA8, *((unint64_t *)&xmmword_254A5CBA8 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CBA8;
          v943 = unk_254A5CBB8;
        }
        v483 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1207;
        goto LABEL_1210;
      }
      v481 = (__int128 *)(v482 + 1);
      v478 = v480 - (char *)v481;
    }
    while (v480 - (char *)v481 >= 4);
  }
  v938[0] = (void *)v475;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v418 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v418 + 200), *(_QWORD *)(v418 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v418 + 200);
    *(_QWORD *)v942 = *(_QWORD *)(v418 + 216);
  }
  sub_20EBEB4A4();
  if (byte_254A5CBBF < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CBA8, *((unint64_t *)&xmmword_254A5CBA8 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CBA8;
    v943 = unk_254A5CBB8;
  }
  v483 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1210:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1212;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1212;
    }
LABEL_1208:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1213;
    goto LABEL_1209;
  }
LABEL_1207:
  v484 = v938[0];
  *((_DWORD *)v483 + 2) = v938[1];
  *(_QWORD *)v483 = v484;
  v485 = v939;
  *((_QWORD *)v483 + 4) = v940;
  *((_OWORD *)v483 + 1) = v485;
  v940 = 0;
  v939 = 0uLL;
  v486 = *(_QWORD *)v942;
  *(_OWORD *)(v483 + 40) = __p;
  *((_QWORD *)v483 + 7) = v486;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v487 = *(_OWORD *)&v942[8];
  *((_QWORD *)v483 + 10) = v943;
  *((_OWORD *)v483 + 4) = v487;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v483 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1208;
LABEL_1212:
  if (SHIBYTE(v940) < 0)
LABEL_1209:
    operator delete((void *)v939);
LABEL_1213:
  v488 = sub_20EBA4AA4();
  if (*((char *)v488 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v488, v488[1]);
  }
  else
  {
    v489 = *(_OWORD *)v488;
    v937 = v488[2];
    *(_OWORD *)v936 = v489;
  }
  v490 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v491 = v936;
  }
  else
  {
    v490 = (uint64_t)v936[1];
    v491 = (void **)v936[0];
  }
  if (v490 >= 18)
  {
    v492 = (char *)v491 + v490;
    v493 = v491;
    do
    {
      v494 = (char *)memchr(v493, 67, v490 - 17);
      if (!v494)
        break;
      if (*(_QWORD *)v494 == 0x456C656E6E616843
        && *((_QWORD *)v494 + 1) == 0x696F763C726F7272
        && *((_WORD *)v494 + 8) == 15972)
      {
        if (v494 != v492 && v494 - (char *)v491 != -1)
          goto LABEL_1257;
        break;
      }
      v493 = (void **)(v494 + 1);
      v490 = v492 - (char *)v493;
    }
    while (v492 - (char *)v493 >= 18);
  }
  v938[0] = (void *)(v475 + 1);
  LODWORD(v938[1]) = 3;
  v497 = SHIBYTE(v947);
  if (v947 >= 0)
    v498 = HIBYTE(v947);
  else
    v498 = *((_QWORD *)&__dst + 1);
  v499 = v498 + 6;
  if (v498 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v499 >= 0x17)
  {
    v501 = (v499 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v499 | 7) != 0x17)
      v501 = v499 | 7;
    v502 = v501 + 1;
    v500 = (__int128 *)operator new(v501 + 1);
    *((_QWORD *)&v939 + 1) = v498 + 6;
    v940 = v502 | 0x8000000000000000;
    *(_QWORD *)&v939 = v500;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v500 = &v939;
    HIBYTE(v940) = v498 + 6;
    if (!v498)
      goto LABEL_1249;
  }
  if (v497 >= 0)
    v503 = &__dst;
  else
    v503 = (__int128 *)__dst;
  memmove(v500, v503, v498);
LABEL_1249:
  strcpy((char *)v500 + v498, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v504 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1256;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1256;
    }
LABEL_1251:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1252;
    goto LABEL_1257;
  }
  v505 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v504 = v505;
  v506 = v939;
  *((_QWORD *)v504 + 4) = v940;
  *((_OWORD *)v504 + 1) = v506;
  v940 = 0;
  v939 = 0uLL;
  v507 = *(_QWORD *)v942;
  *(_OWORD *)(v504 + 40) = __p;
  *((_QWORD *)v504 + 7) = v507;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v508 = *(_OWORD *)&v942[8];
  *((_QWORD *)v504 + 10) = v943;
  *((_OWORD *)v504 + 4) = v508;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v504 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1251;
LABEL_1256:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1252:
    operator delete((void *)v939);
    v509 = *(std::__shared_weak_count **)(v418 + 304);
    if (!v509)
      goto LABEL_1261;
    goto LABEL_1258;
  }
LABEL_1257:
  v509 = *(std::__shared_weak_count **)(v418 + 304);
  if (!v509)
  {
LABEL_1261:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v513 = 0;
    goto LABEL_1278;
  }
LABEL_1258:
  v510 = std::__shared_weak_count::lock(v509);
  v938[1] = v510;
  if (!v510)
    goto LABEL_1261;
  v511 = v510;
  v512 = *(void **)(v418 + 296);
  v938[0] = v512;
  if (v512)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v512 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v514 = (unint64_t *)&v511->__shared_owners_;
  do
    v515 = __ldaxr(v514);
  while (__stlxr(v515 - 1, v514));
  if (v515)
  {
    v513 = v933;
    v516 = v934;
    if (v933 == v934)
      goto LABEL_1278;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
    std::__shared_weak_count::__release_weak(v511);
    v513 = v933;
    v516 = v934;
    if (v933 == v934)
      goto LABEL_1278;
  }
  do
  {
    v938[0] = (void *)v475;
    v938[1] = *v513;
    v940 = 0;
    v939 = 0uLL;
    v518 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v517 = v939;
      *((_QWORD *)v518 + 4) = v940;
      *((_OWORD *)v518 + 1) = v517;
      v928 = v518 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v513;
  }
  while (v513 != v516);
  v513 = v933;
LABEL_1278:
  if (v513)
  {
    v934 = v513;
    operator delete(v513);
  }
  v519 = *(std::__shared_weak_count **)(v418 + 304);
  if (!v519 || (v520 = std::__shared_weak_count::lock(v519), (v938[1] = v520) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v523 = 0;
    goto LABEL_1299;
  }
  v521 = v520;
  v522 = *(void **)(v418 + 296);
  v938[0] = v522;
  if (v522)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v522 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v524 = (unint64_t *)&v521->__shared_owners_;
  do
    v525 = __ldaxr(v524);
  while (__stlxr(v525 - 1, v524));
  if (v525)
  {
    v523 = v933;
    v526 = v934;
    if (v933 == v934)
      goto LABEL_1299;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
    std::__shared_weak_count::__release_weak(v521);
    v523 = v933;
    v526 = v934;
    if (v933 == v934)
      goto LABEL_1299;
  }
  v527 = (void *)(v475 + 1);
  do
  {
    v938[0] = v527;
    v938[1] = *v523;
    v940 = 0;
    v939 = 0uLL;
    v529 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v528 = v939;
      *((_QWORD *)v529 + 4) = v940;
      *((_OWORD *)v529 + 1) = v528;
      v928 = v529 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v523;
  }
  while (v523 != v526);
  v523 = v933;
LABEL_1299:
  if (v523)
  {
    v934 = v523;
    operator delete(v523);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1303:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1304;
LABEL_1308:
      operator delete((void *)__dst);
      if ((*(char *)(v418 + 367) & 0x80000000) == 0)
        goto LABEL_1305;
      goto LABEL_1309;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1303;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1308;
LABEL_1304:
  if ((*(char *)(v418 + 367) & 0x80000000) == 0)
  {
LABEL_1305:
    __dst = *(_OWORD *)(v418 + 344);
    v947 = *(_QWORD *)(v418 + 360);
    goto LABEL_1310;
  }
LABEL_1309:
  sub_20E860C04(&__dst, *(void **)(v418 + 344), *(_QWORD *)(v418 + 352));
LABEL_1310:
  v530 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v418 + 432) + 48))(*(_QWORD *)(v418 + 432));
  v531 = sub_20EBA60E8();
  if (*((char *)v531 + 23) < 0)
  {
    sub_20E860C04(&v944, (void *)*v531, v531[1]);
  }
  else
  {
    v532 = *(_OWORD *)v531;
    v945 = v531[2];
    v944 = v532;
  }
  v533 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v534 = &v944;
  }
  else
  {
    v533 = *((_QWORD *)&v944 + 1);
    v534 = (__int128 *)v944;
  }
  if (v533 >= 4)
  {
    v535 = (char *)v534 + v533;
    v536 = v534;
    do
    {
      v537 = (char *)memchr(v536, 118, v533 - 3);
      if (!v537)
        break;
      if (*(_DWORD *)v537 == 1684631414)
      {
        if (v537 == v535 || v537 - (char *)v534 == -1)
          break;
        v938[0] = (void *)v530;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v418 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v418 + 368), *(_QWORD *)(v418 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v418 + 368);
          *(_QWORD *)v942 = *(_QWORD *)(v418 + 384);
        }
        sub_20EBEB668();
        if (byte_254A5CC07 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CBF0, *((unint64_t *)&xmmword_254A5CBF0 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CBF0;
          v943 = unk_254A5CC00;
        }
        v538 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1336;
        goto LABEL_1339;
      }
      v536 = (__int128 *)(v537 + 1);
      v533 = v535 - (char *)v536;
    }
    while (v535 - (char *)v536 >= 4);
  }
  v938[0] = (void *)v530;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v418 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v418 + 368), *(_QWORD *)(v418 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v418 + 368);
    *(_QWORD *)v942 = *(_QWORD *)(v418 + 384);
  }
  sub_20EBEB668();
  if (byte_254A5CC07 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CBF0, *((unint64_t *)&xmmword_254A5CBF0 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CBF0;
    v943 = unk_254A5CC00;
  }
  v538 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1339:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1341;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1341;
    }
LABEL_1337:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1342;
    goto LABEL_1338;
  }
LABEL_1336:
  v539 = v938[0];
  *((_DWORD *)v538 + 2) = v938[1];
  *(_QWORD *)v538 = v539;
  v540 = v939;
  *((_QWORD *)v538 + 4) = v940;
  *((_OWORD *)v538 + 1) = v540;
  v940 = 0;
  v939 = 0uLL;
  v541 = *(_QWORD *)v942;
  *(_OWORD *)(v538 + 40) = __p;
  *((_QWORD *)v538 + 7) = v541;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v542 = *(_OWORD *)&v942[8];
  *((_QWORD *)v538 + 10) = v943;
  *((_OWORD *)v538 + 4) = v542;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v538 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1337;
LABEL_1341:
  if (SHIBYTE(v940) < 0)
LABEL_1338:
    operator delete((void *)v939);
LABEL_1342:
  v543 = sub_20EBA4AA4();
  if (*((char *)v543 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v543, v543[1]);
  }
  else
  {
    v544 = *(_OWORD *)v543;
    v937 = v543[2];
    *(_OWORD *)v936 = v544;
  }
  v545 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v546 = v936;
  }
  else
  {
    v545 = (uint64_t)v936[1];
    v546 = (void **)v936[0];
  }
  if (v545 >= 18)
  {
    v547 = (char *)v546 + v545;
    v548 = v546;
    do
    {
      v549 = (char *)memchr(v548, 67, v545 - 17);
      if (!v549)
        break;
      if (*(_QWORD *)v549 == 0x456C656E6E616843
        && *((_QWORD *)v549 + 1) == 0x696F763C726F7272
        && *((_WORD *)v549 + 8) == 15972)
      {
        if (v549 != v547 && v549 - (char *)v546 != -1)
          goto LABEL_1386;
        break;
      }
      v548 = (void **)(v549 + 1);
      v545 = v547 - (char *)v548;
    }
    while (v547 - (char *)v548 >= 18);
  }
  v938[0] = (void *)(v530 + 1);
  LODWORD(v938[1]) = 3;
  v552 = SHIBYTE(v947);
  if (v947 >= 0)
    v553 = HIBYTE(v947);
  else
    v553 = *((_QWORD *)&__dst + 1);
  v554 = v553 + 6;
  if (v553 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v554 >= 0x17)
  {
    v556 = (v554 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v554 | 7) != 0x17)
      v556 = v554 | 7;
    v557 = v556 + 1;
    v555 = (__int128 *)operator new(v556 + 1);
    *((_QWORD *)&v939 + 1) = v553 + 6;
    v940 = v557 | 0x8000000000000000;
    *(_QWORD *)&v939 = v555;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v555 = &v939;
    HIBYTE(v940) = v553 + 6;
    if (!v553)
      goto LABEL_1378;
  }
  if (v552 >= 0)
    v558 = &__dst;
  else
    v558 = (__int128 *)__dst;
  memmove(v555, v558, v553);
LABEL_1378:
  strcpy((char *)v555 + v553, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v559 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1385;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1385;
    }
LABEL_1380:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1381;
    goto LABEL_1386;
  }
  v560 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v559 = v560;
  v561 = v939;
  *((_QWORD *)v559 + 4) = v940;
  *((_OWORD *)v559 + 1) = v561;
  v940 = 0;
  v939 = 0uLL;
  v562 = *(_QWORD *)v942;
  *(_OWORD *)(v559 + 40) = __p;
  *((_QWORD *)v559 + 7) = v562;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v563 = *(_OWORD *)&v942[8];
  *((_QWORD *)v559 + 10) = v943;
  *((_OWORD *)v559 + 4) = v563;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v559 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1380;
LABEL_1385:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1381:
    operator delete((void *)v939);
    v564 = *(std::__shared_weak_count **)(v418 + 472);
    if (!v564)
      goto LABEL_1390;
    goto LABEL_1387;
  }
LABEL_1386:
  v564 = *(std::__shared_weak_count **)(v418 + 472);
  if (!v564)
  {
LABEL_1390:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v568 = 0;
    goto LABEL_1407;
  }
LABEL_1387:
  v565 = std::__shared_weak_count::lock(v564);
  v938[1] = v565;
  if (!v565)
    goto LABEL_1390;
  v566 = v565;
  v567 = *(void **)(v418 + 464);
  v938[0] = v567;
  if (v567)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v567 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v569 = (unint64_t *)&v566->__shared_owners_;
  do
    v570 = __ldaxr(v569);
  while (__stlxr(v570 - 1, v569));
  if (v570)
  {
    v568 = v933;
    v571 = v934;
    if (v933 == v934)
      goto LABEL_1407;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
    std::__shared_weak_count::__release_weak(v566);
    v568 = v933;
    v571 = v934;
    if (v933 == v934)
      goto LABEL_1407;
  }
  do
  {
    v938[0] = (void *)v530;
    v938[1] = *v568;
    v940 = 0;
    v939 = 0uLL;
    v573 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v572 = v939;
      *((_QWORD *)v573 + 4) = v940;
      *((_OWORD *)v573 + 1) = v572;
      v928 = v573 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v568;
  }
  while (v568 != v571);
  v568 = v933;
LABEL_1407:
  if (v568)
  {
    v934 = v568;
    operator delete(v568);
  }
  v574 = *(std::__shared_weak_count **)(v418 + 472);
  if (!v574 || (v575 = std::__shared_weak_count::lock(v574), (v938[1] = v575) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v578 = v925;
    v579 = 0;
    goto LABEL_1428;
  }
  v576 = v575;
  v577 = *(void **)(v418 + 464);
  v938[0] = v577;
  if (v577)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v577 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v580 = (unint64_t *)&v576->__shared_owners_;
  v578 = v925;
  do
    v581 = __ldaxr(v580);
  while (__stlxr(v581 - 1, v580));
  if (v581)
  {
    v579 = v933;
    v582 = v934;
    if (v933 == v934)
      goto LABEL_1428;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
    std::__shared_weak_count::__release_weak(v576);
    v579 = v933;
    v582 = v934;
    if (v933 == v934)
      goto LABEL_1428;
  }
  v583 = (void *)(v530 + 1);
  do
  {
    v938[0] = v583;
    v938[1] = *v579;
    v940 = 0;
    v939 = 0uLL;
    v585 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v584 = v939;
      *((_QWORD *)v585 + 4) = v940;
      *((_OWORD *)v585 + 1) = v584;
      v928 = v585 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v579;
  }
  while (v579 != v582);
  v579 = v933;
LABEL_1428:
  if (v579)
  {
    v934 = v579;
    operator delete(v579);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1432:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1433;
LABEL_1437:
      operator delete((void *)__dst);
      if ((*(char *)(v578 + 31) & 0x80000000) == 0)
        goto LABEL_1434;
      goto LABEL_1438;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1432;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1437;
LABEL_1433:
  if ((*(char *)(v578 + 31) & 0x80000000) == 0)
  {
LABEL_1434:
    v586 = *(_OWORD *)(v578 + 8);
    *(_QWORD *)&v939 = *(_QWORD *)(v578 + 24);
    *(_OWORD *)v938 = v586;
    goto LABEL_1439;
  }
LABEL_1438:
  sub_20E860C04(v938, *(void **)(v578 + 8), *(_QWORD *)(v578 + 16));
LABEL_1439:
  v587 = *(_QWORD *)(v578 + 56) != 0;
  if (*(char *)(v578 + 55) < 0)
  {
    sub_20E860C04(&__dst, *(void **)(v578 + 32), *(_QWORD *)(v578 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(v578 + 32);
    v947 = *(_QWORD *)(v578 + 48);
  }
  sub_20EBA690C((uint64_t)v957, (__int128 *)v938, v587, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_1444:
      v588 = (char *)v927;
      if (v927)
        goto LABEL_1445;
LABEL_1455:
      v590 = (char *)v930;
      if (!v930)
        goto LABEL_1468;
      goto LABEL_1456;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_1444;
  }
  operator delete(v938[0]);
  v588 = (char *)v927;
  if (!v927)
    goto LABEL_1455;
LABEL_1445:
  v589 = v928;
  if (v928 == v588)
  {
    v928 = v588;
    operator delete(v588);
    v590 = (char *)v930;
    if (!v930)
      goto LABEL_1468;
    goto LABEL_1456;
  }
  do
  {
    if (*(v589 - 1) < 0)
      operator delete(*((void **)v589 - 3));
    v589 -= 40;
  }
  while (v589 != v588);
  v928 = v588;
  operator delete(v927);
  v590 = (char *)v930;
  if (v930)
  {
LABEL_1456:
    v591 = v931;
    v592 = v590;
    if (v931 == v590)
    {
LABEL_1467:
      v931 = v590;
      operator delete(v592);
      goto LABEL_1468;
    }
    while (1)
    {
      while (*(v591 - 1) < 0)
      {
        operator delete(*((void **)v591 - 3));
        if (*(v591 - 25) < 0)
          goto LABEL_1458;
LABEL_1464:
        if ((*(v591 - 49) & 0x80000000) == 0)
          goto LABEL_1459;
LABEL_1465:
        operator delete(*((void **)v591 - 9));
        v591 -= 88;
        if (v591 == v590)
        {
LABEL_1466:
          v592 = v930;
          goto LABEL_1467;
        }
      }
      if ((*(v591 - 25) & 0x80000000) == 0)
        goto LABEL_1464;
LABEL_1458:
      operator delete(*((void **)v591 - 6));
      if (*(v591 - 49) < 0)
        goto LABEL_1465;
LABEL_1459:
      v591 -= 88;
      if (v591 == v590)
        goto LABEL_1466;
    }
  }
LABEL_1468:
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v593 = *(_QWORD *)(a2 + 4192);
  if (!v593)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v593 = *(_QWORD *)(a2 + 4192);
    if ((*(char *)(v593 + 31) & 0x80000000) == 0)
      goto LABEL_1470;
LABEL_1473:
    sub_20E860C04(&__dst, *(void **)(v593 + 8), *(_QWORD *)(v593 + 16));
    goto LABEL_1474;
  }
  if (*(char *)(v593 + 31) < 0)
    goto LABEL_1473;
LABEL_1470:
  v594 = *(_OWORD *)(v593 + 8);
  v947 = *(_QWORD *)(v593 + 24);
  __dst = v594;
LABEL_1474:
  v595 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v593 + 96) + 48))(*(_QWORD *)(v593 + 96));
  v596 = atomic_load((unsigned __int8 *)&qword_254A5BE40);
  if ((v596 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BE40))
    goto LABEL_1475;
  sub_20EBEB82C();
  v884 = byte_254A5CC67;
  if (byte_254A5CC67 >= 0)
    v885 = byte_254A5CC67;
  else
    v885 = qword_254A5CC58;
  v886 = v885 + 1;
  if (v885 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v886 >= 0x17)
  {
    v914 = (v886 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v886 | 7) != 0x17)
      v914 = v886 | 7;
    v915 = v914 + 1;
    v887 = (__int128 *)operator new(v914 + 1);
    *((_QWORD *)&xmmword_254A5CC38 + 1) = v885 + 1;
    unk_254A5CC48 = v915 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5CC38 = v887;
    goto LABEL_2402;
  }
  v887 = &xmmword_254A5CC38;
  unk_254A5CC48 = 0;
  xmmword_254A5CC38 = 0uLL;
  byte_254A5CC4F = v885 + 1;
  if (v885)
  {
LABEL_2402:
    if (v884 >= 0)
      v916 = &qword_254A5CC50;
    else
      v916 = (uint64_t *)qword_254A5CC50;
    memmove(v887, v916, v885);
  }
  *(_WORD *)((char *)v887 + v885) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CC38, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BE40);
LABEL_1475:
  if (byte_254A5CC4F < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5CC38, *((unint64_t *)&xmmword_254A5CC38 + 1));
  }
  else
  {
    v944 = xmmword_254A5CC38;
    v945 = unk_254A5CC48;
  }
  v597 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v598 = &v944;
  }
  else
  {
    v597 = *((_QWORD *)&v944 + 1);
    v598 = (__int128 *)v944;
  }
  if (v597 >= 4)
  {
    v599 = (char *)v598 + v597;
    v600 = v598;
    do
    {
      v601 = (char *)memchr(v600, 118, v597 - 3);
      if (!v601)
        break;
      if (*(_DWORD *)v601 == 1684631414)
      {
        if (v601 == v599 || v601 - (char *)v598 == -1)
          break;
        v938[0] = (void *)v595;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v593 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v593 + 32), *(_QWORD *)(v593 + 40));
        }
        else
        {
          v856 = *(_OWORD *)(v593 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v593 + 48);
          __p = v856;
        }
        sub_20EBEBFF4();
        if (byte_254A5CD3F < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CD28, *((unint64_t *)&xmmword_254A5CD28 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CD28;
          v943 = unk_254A5CD38;
        }
        v603 = v931;
        if ((unint64_t)v931 >= v932)
        {
          v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
          if ((SHIBYTE(v943) & 0x80000000) == 0)
            goto LABEL_1504;
          goto LABEL_1503;
        }
        goto LABEL_1501;
      }
      v600 = (__int128 *)(v601 + 1);
      v597 = v599 - (char *)v600;
    }
    while (v599 - (char *)v600 >= 4);
  }
  v938[0] = (void *)v595;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v593 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v593 + 32), *(_QWORD *)(v593 + 40));
  }
  else
  {
    v602 = *(_OWORD *)(v593 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v593 + 48);
    __p = v602;
  }
  sub_20EBEBFF4();
  if (byte_254A5CD3F < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CD28, *((unint64_t *)&xmmword_254A5CD28 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CD28;
    v943 = unk_254A5CD38;
  }
  v603 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
LABEL_1503:
      operator delete(*(void **)&v942[8]);
  }
  else
  {
LABEL_1501:
    v604 = v938[0];
    *((_DWORD *)v931 + 2) = v938[1];
    *(_QWORD *)v603 = v604;
    v605 = v939;
    *((_QWORD *)v603 + 4) = v940;
    *((_OWORD *)v603 + 1) = v605;
    v940 = 0;
    v939 = 0uLL;
    v606 = *(_QWORD *)v942;
    *(_OWORD *)(v603 + 40) = __p;
    *((_QWORD *)v603 + 7) = v606;
    *(_QWORD *)v942 = 0;
    __p = 0uLL;
    v607 = *(_OWORD *)&v942[8];
    *((_QWORD *)v603 + 10) = v943;
    *((_OWORD *)v603 + 4) = v607;
    *(_QWORD *)&v942[8] = 0;
    *(_QWORD *)&v942[16] = 0;
    v943 = 0;
    v931 = v603 + 88;
  }
LABEL_1504:
  if ((v942[7] & 0x80000000) != 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1506;
  }
  else if ((SHIBYTE(v940) & 0x80000000) == 0)
  {
    goto LABEL_1506;
  }
  operator delete((void *)v939);
LABEL_1506:
  v608 = sub_20EBA4AA4();
  if (*((char *)v608 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v608, v608[1]);
  }
  else
  {
    v609 = *(_OWORD *)v608;
    v937 = v608[2];
    *(_OWORD *)v936 = v609;
  }
  v610 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v611 = v936;
  }
  else
  {
    v610 = (uint64_t)v936[1];
    v611 = (void **)v936[0];
  }
  if (v610 >= 18)
  {
    v612 = (char *)v611 + v610;
    v613 = v611;
    do
    {
      v614 = (char *)memchr(v613, 67, v610 - 17);
      if (!v614)
        break;
      if (*(_QWORD *)v614 == 0x456C656E6E616843
        && *((_QWORD *)v614 + 1) == 0x696F763C726F7272
        && *((_WORD *)v614 + 8) == 15972)
      {
        if (v614 != v612 && v614 - (char *)v611 != -1)
          goto LABEL_1550;
        break;
      }
      v613 = (void **)(v614 + 1);
      v610 = v612 - (char *)v613;
    }
    while (v612 - (char *)v613 >= 18);
  }
  v938[0] = (void *)(v595 + 1);
  LODWORD(v938[1]) = 3;
  v617 = SHIBYTE(v947);
  if (v947 >= 0)
    v618 = HIBYTE(v947);
  else
    v618 = *((_QWORD *)&__dst + 1);
  v619 = v618 + 6;
  if (v618 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v619 >= 0x17)
  {
    v621 = (v619 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v619 | 7) != 0x17)
      v621 = v619 | 7;
    v622 = v621 + 1;
    v620 = (__int128 *)operator new(v621 + 1);
    *((_QWORD *)&v939 + 1) = v618 + 6;
    v940 = v622 | 0x8000000000000000;
    *(_QWORD *)&v939 = v620;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v620 = &v939;
    HIBYTE(v940) = v618 + 6;
    if (!v618)
      goto LABEL_1542;
  }
  if (v617 >= 0)
    v623 = &__dst;
  else
    v623 = (__int128 *)__dst;
  memmove(v620, v623, v618);
LABEL_1542:
  strcpy((char *)v620 + v618, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v624 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1549;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1549;
    }
LABEL_1544:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1545;
    goto LABEL_1550;
  }
  v625 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v624 = v625;
  v626 = v939;
  *((_QWORD *)v624 + 4) = v940;
  *((_OWORD *)v624 + 1) = v626;
  v940 = 0;
  v939 = 0uLL;
  v627 = *(_QWORD *)v942;
  *(_OWORD *)(v624 + 40) = __p;
  *((_QWORD *)v624 + 7) = v627;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v628 = *(_OWORD *)&v942[8];
  *((_QWORD *)v624 + 10) = v943;
  *((_OWORD *)v624 + 4) = v628;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v624 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1544;
LABEL_1549:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1545:
    operator delete((void *)v939);
    v629 = *(std::__shared_weak_count **)(v593 + 136);
    if (!v629)
      goto LABEL_1554;
    goto LABEL_1551;
  }
LABEL_1550:
  v629 = *(std::__shared_weak_count **)(v593 + 136);
  if (!v629)
  {
LABEL_1554:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v633 = 0;
    goto LABEL_1571;
  }
LABEL_1551:
  v630 = std::__shared_weak_count::lock(v629);
  v938[1] = v630;
  if (!v630)
    goto LABEL_1554;
  v631 = v630;
  v632 = *(void **)(v593 + 128);
  v938[0] = v632;
  if (v632)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v632 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v634 = (unint64_t *)&v631->__shared_owners_;
  do
    v635 = __ldaxr(v634);
  while (__stlxr(v635 - 1, v634));
  if (v635)
  {
    v633 = v933;
    v636 = v934;
    if (v933 == v934)
      goto LABEL_1571;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
    std::__shared_weak_count::__release_weak(v631);
    v633 = v933;
    v636 = v934;
    if (v933 == v934)
      goto LABEL_1571;
  }
  do
  {
    v938[0] = (void *)v595;
    v938[1] = *v633;
    v940 = 0;
    v939 = 0uLL;
    v638 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v637 = v939;
      *((_QWORD *)v638 + 4) = v940;
      *((_OWORD *)v638 + 1) = v637;
      v928 = v638 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v633;
  }
  while (v633 != v636);
  v633 = v933;
LABEL_1571:
  if (v633)
  {
    v934 = v633;
    operator delete(v633);
  }
  v639 = *(std::__shared_weak_count **)(v593 + 136);
  if (!v639 || (v640 = std::__shared_weak_count::lock(v639), (v938[1] = v640) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v643 = 0;
    goto LABEL_1592;
  }
  v641 = v640;
  v642 = *(void **)(v593 + 128);
  v938[0] = v642;
  if (v642)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v642 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v644 = (unint64_t *)&v641->__shared_owners_;
  do
    v645 = __ldaxr(v644);
  while (__stlxr(v645 - 1, v644));
  if (v645)
  {
    v643 = v933;
    v646 = v934;
    if (v933 == v934)
      goto LABEL_1592;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
    std::__shared_weak_count::__release_weak(v641);
    v643 = v933;
    v646 = v934;
    if (v933 == v934)
      goto LABEL_1592;
  }
  v647 = (void *)(v595 + 1);
  do
  {
    v938[0] = v647;
    v938[1] = *v643;
    v940 = 0;
    v939 = 0uLL;
    v649 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v648 = v939;
      *((_QWORD *)v649 + 4) = v940;
      *((_OWORD *)v649 + 1) = v648;
      v928 = v649 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v643;
  }
  while (v643 != v646);
  v643 = v933;
LABEL_1592:
  if (v643)
  {
    v934 = v643;
    operator delete(v643);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    v650 = (char *)(a2 + 4151);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1596:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1597;
LABEL_1601:
      operator delete((void *)__dst);
      if ((*v650 & 0x80000000) == 0)
        goto LABEL_1598;
      goto LABEL_1602;
    }
  }
  else
  {
    v650 = (char *)(a2 + 4151);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
      goto LABEL_1596;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1601;
LABEL_1597:
  if ((*v650 & 0x80000000) == 0)
  {
LABEL_1598:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 4128);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 4144);
    goto LABEL_1603;
  }
LABEL_1602:
  sub_20E860C04(v938, *(void **)(a2 + 4128), *(_QWORD *)(a2 + 4136));
LABEL_1603:
  v651 = *(_QWORD *)(a2 + 4176) != 0;
  if (v650[24] < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 4152), *(_QWORD *)(a2 + 4160));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 4152);
    v947 = *(_QWORD *)(a2 + 4168);
  }
  sub_20EBA690C((uint64_t)v958, (__int128 *)v938, v651, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_1608:
      v652 = (char *)v927;
      if (v927)
        goto LABEL_1609;
LABEL_1619:
      v654 = (char *)v930;
      if (!v930)
        goto LABEL_1632;
      goto LABEL_1620;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_1608;
  }
  operator delete(v938[0]);
  v652 = (char *)v927;
  if (!v927)
    goto LABEL_1619;
LABEL_1609:
  v653 = v928;
  if (v928 == v652)
  {
    v928 = v652;
    operator delete(v652);
    v654 = (char *)v930;
    if (!v930)
      goto LABEL_1632;
    goto LABEL_1620;
  }
  do
  {
    if (*(v653 - 1) < 0)
      operator delete(*((void **)v653 - 3));
    v653 -= 40;
  }
  while (v653 != v652);
  v928 = v652;
  operator delete(v927);
  v654 = (char *)v930;
  if (v930)
  {
LABEL_1620:
    v655 = v931;
    v656 = v654;
    if (v931 == v654)
    {
LABEL_1631:
      v931 = v654;
      operator delete(v656);
      goto LABEL_1632;
    }
    while (1)
    {
      while (*(v655 - 1) < 0)
      {
        operator delete(*((void **)v655 - 3));
        if (*(v655 - 25) < 0)
          goto LABEL_1622;
LABEL_1628:
        if ((*(v655 - 49) & 0x80000000) == 0)
          goto LABEL_1623;
LABEL_1629:
        operator delete(*((void **)v655 - 9));
        v655 -= 88;
        if (v655 == v654)
        {
LABEL_1630:
          v656 = v930;
          goto LABEL_1631;
        }
      }
      if ((*(v655 - 25) & 0x80000000) == 0)
        goto LABEL_1628;
LABEL_1622:
      operator delete(*((void **)v655 - 6));
      if (*(v655 - 49) < 0)
        goto LABEL_1629;
LABEL_1623:
      v655 -= 88;
      if (v655 == v654)
        goto LABEL_1630;
    }
  }
LABEL_1632:
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v657 = *(_QWORD *)(a2 + 4272);
  if (!v657)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v657 = *(_QWORD *)(a2 + 4272);
    if ((*(char *)(v657 + 31) & 0x80000000) == 0)
      goto LABEL_1634;
LABEL_1637:
    sub_20E860C04(&__dst, *(void **)(v657 + 8), *(_QWORD *)(v657 + 16));
    goto LABEL_1638;
  }
  if (*(char *)(v657 + 31) < 0)
    goto LABEL_1637;
LABEL_1634:
  v658 = *(_OWORD *)(v657 + 8);
  v947 = *(_QWORD *)(v657 + 24);
  __dst = v658;
LABEL_1638:
  v926 = v650;
  v659 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v657 + 96) + 48))(*(_QWORD *)(v657 + 96));
  v660 = atomic_load((unsigned __int8 *)&qword_254A5BEA8);
  if ((v660 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BEA8))
    goto LABEL_1639;
  sub_20EBEC1B8();
  v888 = byte_254A5CD9F;
  if (byte_254A5CD9F >= 0)
    v889 = byte_254A5CD9F;
  else
    v889 = qword_254A5CD90;
  v890 = v889 + 1;
  if (v889 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v890 >= 0x17)
  {
    v917 = (v890 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v890 | 7) != 0x17)
      v917 = v890 | 7;
    v918 = v917 + 1;
    v891 = (__int128 *)operator new(v917 + 1);
    *((_QWORD *)&xmmword_254A5CD70 + 1) = v889 + 1;
    unk_254A5CD80 = v918 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5CD70 = v891;
    goto LABEL_2410;
  }
  unk_254A5CD80 = 0;
  xmmword_254A5CD70 = 0uLL;
  v891 = &xmmword_254A5CD70;
  byte_254A5CD87 = v889 + 1;
  if (v889)
  {
LABEL_2410:
    if (v888 >= 0)
      v919 = &qword_254A5CD88;
    else
      v919 = (uint64_t *)qword_254A5CD88;
    memmove(v891, v919, v889);
  }
  *(_WORD *)((char *)v891 + v889) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CD70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BEA8);
LABEL_1639:
  if (byte_254A5CD87 < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5CD70, *((unint64_t *)&xmmword_254A5CD70 + 1));
  }
  else
  {
    v944 = xmmword_254A5CD70;
    v945 = unk_254A5CD80;
  }
  v661 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v662 = &v944;
  }
  else
  {
    v661 = *((_QWORD *)&v944 + 1);
    v662 = (__int128 *)v944;
  }
  if (v661 >= 4)
  {
    v663 = (char *)v662 + v661;
    v664 = v662;
    do
    {
      v665 = (char *)memchr(v664, 118, v661 - 3);
      if (!v665)
        break;
      if (*(_DWORD *)v665 == 1684631414)
      {
        if (v665 == v663 || v665 - (char *)v662 == -1)
          break;
        v938[0] = (void *)v659;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v657 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v657 + 32), *(_QWORD *)(v657 + 40));
        }
        else
        {
          v857 = *(_OWORD *)(v657 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v657 + 48);
          __p = v857;
        }
        sub_20EBEC980();
        if (byte_254A5CE77 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CE60, *((unint64_t *)&xmmword_254A5CE60 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CE60;
          v943 = unk_254A5CE70;
        }
        v667 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1665;
        goto LABEL_1668;
      }
      v664 = (__int128 *)(v665 + 1);
      v661 = v663 - (char *)v664;
    }
    while (v663 - (char *)v664 >= 4);
  }
  v938[0] = (void *)v659;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v657 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v657 + 32), *(_QWORD *)(v657 + 40));
  }
  else
  {
    v666 = *(_OWORD *)(v657 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v657 + 48);
    __p = v666;
  }
  sub_20EBEC980();
  if (byte_254A5CE77 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CE60, *((unint64_t *)&xmmword_254A5CE60 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CE60;
    v943 = unk_254A5CE70;
  }
  v667 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1668:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    v672 = v926;
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1670;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1670;
    }
LABEL_1666:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1671;
    goto LABEL_1667;
  }
LABEL_1665:
  v668 = v938[0];
  *((_DWORD *)v667 + 2) = v938[1];
  *(_QWORD *)v667 = v668;
  v669 = v939;
  *((_QWORD *)v667 + 4) = v940;
  *((_OWORD *)v667 + 1) = v669;
  v940 = 0;
  v939 = 0uLL;
  v670 = *(_QWORD *)v942;
  *(_OWORD *)(v667 + 40) = __p;
  *((_QWORD *)v667 + 7) = v670;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v671 = *(_OWORD *)&v942[8];
  *((_QWORD *)v667 + 10) = v943;
  *((_OWORD *)v667 + 4) = v671;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v667 + 88;
  v672 = v926;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1666;
LABEL_1670:
  if (SHIBYTE(v940) < 0)
LABEL_1667:
    operator delete((void *)v939);
LABEL_1671:
  v673 = sub_20EBA4AA4();
  if (*((char *)v673 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v673, v673[1]);
  }
  else
  {
    v674 = *(_OWORD *)v673;
    v937 = v673[2];
    *(_OWORD *)v936 = v674;
  }
  v675 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v676 = v936;
  }
  else
  {
    v675 = (uint64_t)v936[1];
    v676 = (void **)v936[0];
  }
  if (v675 >= 18)
  {
    v677 = (char *)v676 + v675;
    v678 = v676;
    do
    {
      v679 = (char *)memchr(v678, 67, v675 - 17);
      if (!v679)
        break;
      if (*(_QWORD *)v679 == 0x456C656E6E616843
        && *((_QWORD *)v679 + 1) == 0x696F763C726F7272
        && *((_WORD *)v679 + 8) == 15972)
      {
        if (v679 != v677 && v679 - (char *)v676 != -1)
          goto LABEL_1715;
        break;
      }
      v678 = (void **)(v679 + 1);
      v675 = v677 - (char *)v678;
    }
    while (v677 - (char *)v678 >= 18);
  }
  v938[0] = (void *)(v659 + 1);
  LODWORD(v938[1]) = 3;
  v682 = SHIBYTE(v947);
  if (v947 >= 0)
    v683 = HIBYTE(v947);
  else
    v683 = *((_QWORD *)&__dst + 1);
  v684 = v683 + 6;
  if (v683 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v684 >= 0x17)
  {
    v686 = (v684 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v684 | 7) != 0x17)
      v686 = v684 | 7;
    v687 = v686 + 1;
    v685 = (__int128 *)operator new(v686 + 1);
    *((_QWORD *)&v939 + 1) = v683 + 6;
    v940 = v687 | 0x8000000000000000;
    *(_QWORD *)&v939 = v685;
    v672 = v926;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v685 = &v939;
    HIBYTE(v940) = v683 + 6;
    if (!v683)
      goto LABEL_1707;
  }
  if (v682 >= 0)
    v688 = &__dst;
  else
    v688 = (__int128 *)__dst;
  memmove(v685, v688, v683);
LABEL_1707:
  strcpy((char *)v685 + v683, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v689 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1714;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1714;
    }
LABEL_1709:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1710;
    goto LABEL_1715;
  }
  v690 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v689 = v690;
  v691 = v939;
  *((_QWORD *)v689 + 4) = v940;
  *((_OWORD *)v689 + 1) = v691;
  v940 = 0;
  v939 = 0uLL;
  v692 = *(_QWORD *)v942;
  *(_OWORD *)(v689 + 40) = __p;
  *((_QWORD *)v689 + 7) = v692;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v693 = *(_OWORD *)&v942[8];
  *((_QWORD *)v689 + 10) = v943;
  *((_OWORD *)v689 + 4) = v693;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v689 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1709;
LABEL_1714:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1710:
    operator delete((void *)v939);
    v694 = *(std::__shared_weak_count **)(v657 + 136);
    if (!v694)
      goto LABEL_1719;
    goto LABEL_1716;
  }
LABEL_1715:
  v694 = *(std::__shared_weak_count **)(v657 + 136);
  if (!v694)
  {
LABEL_1719:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v698 = 0;
    goto LABEL_1736;
  }
LABEL_1716:
  v695 = std::__shared_weak_count::lock(v694);
  v938[1] = v695;
  if (!v695)
    goto LABEL_1719;
  v696 = v695;
  v697 = *(void **)(v657 + 128);
  v938[0] = v697;
  if (v697)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v697 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v699 = (unint64_t *)&v696->__shared_owners_;
  do
    v700 = __ldaxr(v699);
  while (__stlxr(v700 - 1, v699));
  if (v700)
  {
    v698 = v933;
    v701 = v934;
    if (v933 == v934)
      goto LABEL_1736;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
    std::__shared_weak_count::__release_weak(v696);
    v698 = v933;
    v701 = v934;
    if (v933 == v934)
      goto LABEL_1736;
  }
  do
  {
    v938[0] = (void *)v659;
    v938[1] = *v698;
    v940 = 0;
    v939 = 0uLL;
    v703 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v702 = v939;
      *((_QWORD *)v703 + 4) = v940;
      *((_OWORD *)v703 + 1) = v702;
      v928 = v703 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v698;
  }
  while (v698 != v701);
  v698 = v933;
LABEL_1736:
  if (v698)
  {
    v934 = v698;
    operator delete(v698);
  }
  v704 = *(std::__shared_weak_count **)(v657 + 136);
  if (!v704 || (v705 = std::__shared_weak_count::lock(v704), (v938[1] = v705) == 0))
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v708 = 0;
    goto LABEL_1757;
  }
  v706 = v705;
  v707 = *(void **)(v657 + 128);
  v938[0] = v707;
  if (v707)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v707 + 32))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v709 = (unint64_t *)&v706->__shared_owners_;
  do
    v710 = __ldaxr(v709);
  while (__stlxr(v710 - 1, v709));
  if (v710)
  {
    v708 = v933;
    v711 = v934;
    if (v933 == v934)
      goto LABEL_1757;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v706->__on_zero_shared)(v706);
    std::__shared_weak_count::__release_weak(v706);
    v708 = v933;
    v711 = v934;
    if (v933 == v934)
      goto LABEL_1757;
  }
  v712 = (void *)(v659 + 1);
  do
  {
    v938[0] = v712;
    v938[1] = *v708;
    v940 = 0;
    v939 = 0uLL;
    v714 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v713 = v939;
      *((_QWORD *)v714 + 4) = v940;
      *((_OWORD *)v714 + 1) = v713;
      v928 = v714 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v708;
  }
  while (v708 != v711);
  v708 = v933;
LABEL_1757:
  if (v708)
  {
    v934 = v708;
    operator delete(v708);
  }
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1761:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1762;
LABEL_1766:
      operator delete((void *)__dst);
      if ((v672[80] & 0x80000000) == 0)
        goto LABEL_1763;
      goto LABEL_1767;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1761;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1766;
LABEL_1762:
  if ((v672[80] & 0x80000000) == 0)
  {
LABEL_1763:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 4208);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 4224);
    goto LABEL_1768;
  }
LABEL_1767:
  sub_20E860C04(v938, *(void **)(a2 + 4208), *(_QWORD *)(a2 + 4216));
LABEL_1768:
  v715 = *(_QWORD *)(a2 + 4256) != 0;
  if (v672[104] < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 4232), *(_QWORD *)(a2 + 4240));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 4232);
    v947 = *(_QWORD *)(a2 + 4248);
  }
  sub_20EBA690C((uint64_t)v959, (__int128 *)v938, v715, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_1773:
      v716 = (char *)v927;
      if (v927)
        goto LABEL_1774;
LABEL_1784:
      v718 = (char *)v930;
      if (!v930)
        goto LABEL_1797;
      goto LABEL_1785;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_1773;
  }
  operator delete(v938[0]);
  v716 = (char *)v927;
  if (!v927)
    goto LABEL_1784;
LABEL_1774:
  v717 = v928;
  if (v928 == v716)
  {
    v928 = v716;
    operator delete(v716);
    v718 = (char *)v930;
    if (!v930)
      goto LABEL_1797;
    goto LABEL_1785;
  }
  do
  {
    if (*(v717 - 1) < 0)
      operator delete(*((void **)v717 - 3));
    v717 -= 40;
  }
  while (v717 != v716);
  v928 = v716;
  operator delete(v927);
  v718 = (char *)v930;
  if (v930)
  {
LABEL_1785:
    v719 = v931;
    v720 = v718;
    if (v931 == v718)
    {
LABEL_1796:
      v931 = v718;
      operator delete(v720);
      goto LABEL_1797;
    }
    while (1)
    {
      while (*(v719 - 1) < 0)
      {
        operator delete(*((void **)v719 - 3));
        if (*(v719 - 25) < 0)
          goto LABEL_1787;
LABEL_1793:
        if ((*(v719 - 49) & 0x80000000) == 0)
          goto LABEL_1788;
LABEL_1794:
        operator delete(*((void **)v719 - 9));
        v719 -= 88;
        if (v719 == v718)
        {
LABEL_1795:
          v720 = v930;
          goto LABEL_1796;
        }
      }
      if ((*(v719 - 25) & 0x80000000) == 0)
        goto LABEL_1793;
LABEL_1787:
      operator delete(*((void **)v719 - 6));
      if (*(v719 - 49) < 0)
        goto LABEL_1794;
LABEL_1788:
      v719 -= 88;
      if (v719 == v718)
        goto LABEL_1795;
    }
  }
LABEL_1797:
  sub_20EBE21A0((uint64_t)v960, a2 + 4280);
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v721 = *(_QWORD *)(a2 + 4432);
  if (v721)
  {
    if ((*(char *)(v721 + 31) & 0x80000000) == 0)
    {
LABEL_1799:
      v722 = *(_OWORD *)(v721 + 8);
      v947 = *(_QWORD *)(v721 + 24);
      __dst = v722;
      goto LABEL_1803;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v721 = *(_QWORD *)(a2 + 4432);
    if ((*(char *)(v721 + 31) & 0x80000000) == 0)
      goto LABEL_1799;
  }
  sub_20E860C04(&__dst, *(void **)(v721 + 8), *(_QWORD *)(v721 + 16));
LABEL_1803:
  v723 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v721 + 96) + 48))(*(_QWORD *)(v721 + 96));
  v724 = sub_20EBEEAE8();
  if (*((char *)v724 + 23) < 0)
  {
    sub_20E860C04(&v944, (void *)*v724, v724[1]);
  }
  else
  {
    v725 = *(_OWORD *)v724;
    v945 = v724[2];
    v944 = v725;
  }
  v726 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v727 = &v944;
  }
  else
  {
    v726 = *((_QWORD *)&v944 + 1);
    v727 = (__int128 *)v944;
  }
  if (v726 >= 4)
  {
    v728 = (char *)v727 + v726;
    v729 = v727;
    do
    {
      v730 = (char *)memchr(v729, 118, v726 - 3);
      if (!v730)
        break;
      if (*(_DWORD *)v730 == 1684631414)
      {
        if (v730 == v728 || v730 - (char *)v727 == -1)
          break;
        v938[0] = (void *)v723;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v721 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v721 + 32), *(_QWORD *)(v721 + 40));
        }
        else
        {
          v858 = *(_OWORD *)(v721 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v721 + 48);
          __p = v858;
        }
        sub_20EBEF484();
        if (byte_254A5CFDF < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5CFC8, *((unint64_t *)&xmmword_254A5CFC8 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5CFC8;
          v943 = unk_254A5CFD8;
        }
        v732 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1829;
        goto LABEL_1832;
      }
      v729 = (__int128 *)(v730 + 1);
      v726 = v728 - (char *)v729;
    }
    while (v728 - (char *)v729 >= 4);
  }
  v938[0] = (void *)v723;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v721 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v721 + 32), *(_QWORD *)(v721 + 40));
  }
  else
  {
    v731 = *(_OWORD *)(v721 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v721 + 48);
    __p = v731;
  }
  sub_20EBEF484();
  if (byte_254A5CFDF < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5CFC8, *((unint64_t *)&xmmword_254A5CFC8 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5CFC8;
    v943 = unk_254A5CFD8;
  }
  v732 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1832:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1834;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1834;
    }
LABEL_1830:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_1835;
    goto LABEL_1831;
  }
LABEL_1829:
  v733 = v938[0];
  *((_DWORD *)v732 + 2) = v938[1];
  *(_QWORD *)v732 = v733;
  v734 = v939;
  *((_QWORD *)v732 + 4) = v940;
  *((_OWORD *)v732 + 1) = v734;
  v940 = 0;
  v939 = 0uLL;
  v735 = *(_QWORD *)v942;
  *(_OWORD *)(v732 + 40) = __p;
  *((_QWORD *)v732 + 7) = v735;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v736 = *(_OWORD *)&v942[8];
  *((_QWORD *)v732 + 10) = v943;
  *((_OWORD *)v732 + 4) = v736;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v732 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1830;
LABEL_1834:
  if (SHIBYTE(v940) < 0)
LABEL_1831:
    operator delete((void *)v939);
LABEL_1835:
  v737 = sub_20EBA4AA4();
  if (*((char *)v737 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v737, v737[1]);
  }
  else
  {
    v738 = *(_OWORD *)v737;
    v937 = v737[2];
    *(_OWORD *)v936 = v738;
  }
  v739 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v740 = v936;
  }
  else
  {
    v739 = (uint64_t)v936[1];
    v740 = (void **)v936[0];
  }
  if (v739 >= 18)
  {
    v741 = (char *)v740 + v739;
    v742 = v740;
    do
    {
      v743 = (char *)memchr(v742, 67, v739 - 17);
      if (!v743)
        break;
      if (*(_QWORD *)v743 == 0x456C656E6E616843
        && *((_QWORD *)v743 + 1) == 0x696F763C726F7272
        && *((_WORD *)v743 + 8) == 15972)
      {
        if (v743 != v741 && v743 - (char *)v740 != -1)
          goto LABEL_1879;
        break;
      }
      v742 = (void **)(v743 + 1);
      v739 = v741 - (char *)v742;
    }
    while (v741 - (char *)v742 >= 18);
  }
  v938[0] = (void *)(v723 + 1);
  LODWORD(v938[1]) = 3;
  v746 = SHIBYTE(v947);
  if (v947 >= 0)
    v747 = HIBYTE(v947);
  else
    v747 = *((_QWORD *)&__dst + 1);
  v748 = v747 + 6;
  if (v747 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v748 >= 0x17)
  {
    v750 = (v748 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v748 | 7) != 0x17)
      v750 = v748 | 7;
    v751 = v750 + 1;
    v749 = (__int128 *)operator new(v750 + 1);
    *((_QWORD *)&v939 + 1) = v747 + 6;
    v940 = v751 | 0x8000000000000000;
    *(_QWORD *)&v939 = v749;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v749 = &v939;
    HIBYTE(v940) = v747 + 6;
    if (!v747)
      goto LABEL_1871;
  }
  if (v746 >= 0)
    v752 = &__dst;
  else
    v752 = (__int128 *)__dst;
  memmove(v749, v752, v747);
LABEL_1871:
  strcpy((char *)v749 + v747, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v753 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_1878;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_1878;
    }
LABEL_1873:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_1874;
    goto LABEL_1879;
  }
  v754 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v753 = v754;
  v755 = v939;
  *((_QWORD *)v753 + 4) = v940;
  *((_OWORD *)v753 + 1) = v755;
  v940 = 0;
  v939 = 0uLL;
  v756 = *(_QWORD *)v942;
  *(_OWORD *)(v753 + 40) = __p;
  *((_QWORD *)v753 + 7) = v756;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v757 = *(_OWORD *)&v942[8];
  *((_QWORD *)v753 + 10) = v943;
  *((_OWORD *)v753 + 4) = v757;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v753 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1873;
LABEL_1878:
  if (SHIBYTE(v940) < 0)
  {
LABEL_1874:
    operator delete((void *)v939);
    v758 = *(std::__shared_weak_count **)(v721 + 136);
    if (!v758)
      goto LABEL_1883;
    goto LABEL_1880;
  }
LABEL_1879:
  v758 = *(std::__shared_weak_count **)(v721 + 136);
  if (!v758)
  {
LABEL_1883:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v762 = 0;
    goto LABEL_1900;
  }
LABEL_1880:
  v759 = std::__shared_weak_count::lock(v758);
  v938[1] = v759;
  if (!v759)
    goto LABEL_1883;
  v760 = v759;
  v761 = *(void **)(v721 + 128);
  v938[0] = v761;
  if (v761)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v761 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v763 = (unint64_t *)&v760->__shared_owners_;
  do
    v764 = __ldaxr(v763);
  while (__stlxr(v764 - 1, v763));
  if (v764)
  {
    v762 = v933;
    v765 = v934;
    if (v933 == v934)
      goto LABEL_1900;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
    std::__shared_weak_count::__release_weak(v760);
    v762 = v933;
    v765 = v934;
    if (v933 == v934)
      goto LABEL_1900;
  }
  do
  {
    v938[0] = (void *)v723;
    v938[1] = *v762;
    v940 = 0;
    v939 = 0uLL;
    v767 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v766 = v939;
      *((_QWORD *)v767 + 4) = v940;
      *((_OWORD *)v767 + 1) = v766;
      v928 = v767 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v762;
  }
  while (v762 != v765);
  v762 = v933;
LABEL_1900:
  if (v762)
  {
    v934 = v762;
    operator delete(v762);
  }
  v768 = *(std::__shared_weak_count **)(v721 + 136);
  if (v768 && (v769 = std::__shared_weak_count::lock(v768), (v938[1] = v769) != 0))
  {
    v770 = v769;
    v771 = *(void **)(v721 + 128);
    v938[0] = v771;
    if (v771)
    {
      (*(void (**)(void ***__return_ptr))(*(_QWORD *)v771 + 32))(&v933);
    }
    else
    {
      v933 = 0;
      v934 = 0;
      v935 = 0;
    }
    v774 = (unint64_t *)&v770->__shared_owners_;
    do
      v775 = __ldaxr(v774);
    while (__stlxr(v775 - 1, v774));
    if (v775)
    {
      v772 = v933;
      v776 = v934;
      if (v933 != v934)
      {
LABEL_1916:
        v777 = (void *)(v723 + 1);
        v773 = v926;
        do
        {
          v938[0] = v777;
          v938[1] = *v772;
          v940 = 0;
          v939 = 0uLL;
          v779 = v928;
          if ((unint64_t)v928 < v929)
          {
            *(_OWORD *)v928 = *(_OWORD *)v938;
            v778 = v939;
            *((_QWORD *)v779 + 4) = v940;
            *((_OWORD *)v779 + 1) = v778;
            v928 = v779 + 40;
          }
          else
          {
            v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
            if (SHIBYTE(v940) < 0)
              operator delete((void *)v939);
          }
          ++v772;
        }
        while (v772 != v776);
        v772 = v933;
        if (v933)
          goto LABEL_1923;
        goto LABEL_1924;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
      std::__shared_weak_count::__release_weak(v770);
      v772 = v933;
      v776 = v934;
      if (v933 != v934)
        goto LABEL_1916;
    }
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v772 = 0;
  }
  v773 = v926;
  if (v772)
  {
LABEL_1923:
    v934 = v772;
    operator delete(v772);
  }
LABEL_1924:
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_1926:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_1927;
LABEL_1931:
      operator delete((void *)__dst);
      if ((v773[240] & 0x80000000) == 0)
        goto LABEL_1928;
      goto LABEL_1932;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_1926;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_1931;
LABEL_1927:
  if ((v773[240] & 0x80000000) == 0)
  {
LABEL_1928:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 4368);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 4384);
    goto LABEL_1933;
  }
LABEL_1932:
  sub_20E860C04(v938, *(void **)(a2 + 4368), *(_QWORD *)(a2 + 4376));
LABEL_1933:
  v780 = *(_QWORD *)(a2 + 4416) != 0;
  if (v773[264] < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 4392), *(_QWORD *)(a2 + 4400));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 4392);
    v947 = *(_QWORD *)(a2 + 4408);
  }
  sub_20EBA690C((uint64_t)v961, (__int128 *)v938, v780, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if (SHIBYTE(v947) < 0)
  {
    operator delete((void *)__dst);
    if ((SBYTE7(v939) & 0x80000000) == 0)
    {
LABEL_1938:
      v781 = (char *)v927;
      if (v927)
        goto LABEL_1939;
LABEL_1949:
      v783 = (char *)v930;
      if (!v930)
        goto LABEL_1962;
      goto LABEL_1950;
    }
  }
  else if ((SBYTE7(v939) & 0x80000000) == 0)
  {
    goto LABEL_1938;
  }
  operator delete(v938[0]);
  v781 = (char *)v927;
  if (!v927)
    goto LABEL_1949;
LABEL_1939:
  v782 = v928;
  if (v928 == v781)
  {
    v928 = v781;
    operator delete(v781);
    v783 = (char *)v930;
    if (!v930)
      goto LABEL_1962;
    goto LABEL_1950;
  }
  do
  {
    if (*(v782 - 1) < 0)
      operator delete(*((void **)v782 - 3));
    v782 -= 40;
  }
  while (v782 != v781);
  v928 = v781;
  operator delete(v927);
  v783 = (char *)v930;
  if (v930)
  {
LABEL_1950:
    v784 = v931;
    v785 = v783;
    if (v931 == v783)
    {
LABEL_1961:
      v931 = v783;
      operator delete(v785);
      goto LABEL_1962;
    }
    while (1)
    {
      while (*(v784 - 1) < 0)
      {
        operator delete(*((void **)v784 - 3));
        if (*(v784 - 25) < 0)
          goto LABEL_1952;
LABEL_1958:
        if ((*(v784 - 49) & 0x80000000) == 0)
          goto LABEL_1953;
LABEL_1959:
        operator delete(*((void **)v784 - 9));
        v784 -= 88;
        if (v784 == v783)
        {
LABEL_1960:
          v785 = v930;
          goto LABEL_1961;
        }
      }
      if ((*(v784 - 25) & 0x80000000) == 0)
        goto LABEL_1958;
LABEL_1952:
      operator delete(*((void **)v784 - 6));
      if (*(v784 - 49) < 0)
        goto LABEL_1959;
LABEL_1953:
      v784 -= 88;
      if (v784 == v783)
        goto LABEL_1960;
    }
  }
LABEL_1962:
  v930 = 0;
  v931 = 0;
  v932 = 0;
  v927 = 0;
  v928 = 0;
  v929 = 0;
  v786 = *(_QWORD *)(a2 + 4512);
  if (!v786)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v786 = *(_QWORD *)(a2 + 4512);
    if ((*(char *)(v786 + 31) & 0x80000000) == 0)
      goto LABEL_1964;
LABEL_1967:
    sub_20E860C04(&__dst, *(void **)(v786 + 8), *(_QWORD *)(v786 + 16));
    goto LABEL_1968;
  }
  if (*(char *)(v786 + 31) < 0)
    goto LABEL_1967;
LABEL_1964:
  v787 = *(_OWORD *)(v786 + 8);
  v947 = *(_QWORD *)(v786 + 24);
  __dst = v787;
LABEL_1968:
  v788 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v786 + 96) + 48))(*(_QWORD *)(v786 + 96));
  v789 = atomic_load((unsigned __int8 *)&qword_254A5BF88);
  if ((v789 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5BF88))
    goto LABEL_1969;
  sub_20EBEF648();
  v892 = byte_254A5D03F;
  if (byte_254A5D03F >= 0)
    v893 = byte_254A5D03F;
  else
    v893 = qword_254A5D030;
  v894 = v893 + 1;
  if (v893 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v894 >= 0x17)
  {
    v920 = (v894 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v894 | 7) != 0x17)
      v920 = v894 | 7;
    v921 = v920 + 1;
    v895 = (__int128 *)operator new(v920 + 1);
    *((_QWORD *)&xmmword_254A5D010 + 1) = v893 + 1;
    unk_254A5D020 = v921 | 0x8000000000000000;
    *(_QWORD *)&xmmword_254A5D010 = v895;
    goto LABEL_2418;
  }
  v895 = &xmmword_254A5D010;
  unk_254A5D020 = 0;
  xmmword_254A5D010 = 0uLL;
  byte_254A5D027 = v893 + 1;
  if (v893)
  {
LABEL_2418:
    if (v892 >= 0)
      v922 = &qword_254A5D028;
    else
      v922 = (uint64_t *)qword_254A5D028;
    memmove(v895, v922, v893);
  }
  *(_WORD *)((char *)v895 + v893) = 38;
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D010, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5BF88);
LABEL_1969:
  if (byte_254A5D027 < 0)
  {
    sub_20E860C04(&v944, (void *)xmmword_254A5D010, *((unint64_t *)&xmmword_254A5D010 + 1));
  }
  else
  {
    v944 = xmmword_254A5D010;
    v945 = unk_254A5D020;
  }
  v790 = HIBYTE(v945);
  if (v945 >= 0)
  {
    v791 = &v944;
  }
  else
  {
    v790 = *((_QWORD *)&v944 + 1);
    v791 = (__int128 *)v944;
  }
  if (v790 >= 4)
  {
    v792 = (char *)v791 + v790;
    v793 = v791;
    do
    {
      v794 = (char *)memchr(v793, 118, v790 - 3);
      if (!v794)
        break;
      if (*(_DWORD *)v794 == 1684631414)
      {
        if (v794 == v792 || v794 - (char *)v791 == -1)
          break;
        v938[0] = (void *)v788;
        LODWORD(v938[1]) = 4;
        if (SHIBYTE(v947) < 0)
        {
          sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v939 = __dst;
          v940 = v947;
        }
        if (*(char *)(v786 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v786 + 32), *(_QWORD *)(v786 + 40));
        }
        else
        {
          v859 = *(_OWORD *)(v786 + 32);
          *(_QWORD *)v942 = *(_QWORD *)(v786 + 48);
          __p = v859;
        }
        sub_20EBEFE10();
        if (byte_254A5D117 < 0)
        {
          sub_20E860C04(&v942[8], (void *)xmmword_254A5D100, *((unint64_t *)&xmmword_254A5D100 + 1));
        }
        else
        {
          *(_OWORD *)&v942[8] = xmmword_254A5D100;
          v943 = unk_254A5D110;
        }
        v796 = v931;
        if ((unint64_t)v931 < v932)
          goto LABEL_1995;
        goto LABEL_1998;
      }
      v793 = (__int128 *)(v794 + 1);
      v790 = v792 - (char *)v793;
    }
    while (v792 - (char *)v793 >= 4);
  }
  v938[0] = (void *)v788;
  LODWORD(v938[1]) = 2;
  if (SHIBYTE(v947) < 0)
  {
    sub_20E860C04(&v939, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v939 = __dst;
    v940 = v947;
  }
  if (*(char *)(v786 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v786 + 32), *(_QWORD *)(v786 + 40));
  }
  else
  {
    v795 = *(_OWORD *)(v786 + 32);
    *(_QWORD *)v942 = *(_QWORD *)(v786 + 48);
    __p = v795;
  }
  sub_20EBEFE10();
  if (byte_254A5D117 < 0)
  {
    sub_20E860C04(&v942[8], (void *)xmmword_254A5D100, *((unint64_t *)&xmmword_254A5D100 + 1));
  }
  else
  {
    *(_OWORD *)&v942[8] = xmmword_254A5D100;
    v943 = unk_254A5D110;
  }
  v796 = v931;
  if ((unint64_t)v931 >= v932)
  {
LABEL_1998:
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_2000;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_2000;
    }
LABEL_1996:
    operator delete((void *)__p);
    if ((SHIBYTE(v940) & 0x80000000) == 0)
      goto LABEL_2001;
    goto LABEL_1997;
  }
LABEL_1995:
  v797 = v938[0];
  *((_DWORD *)v796 + 2) = v938[1];
  *(_QWORD *)v796 = v797;
  v798 = v939;
  *((_QWORD *)v796 + 4) = v940;
  *((_OWORD *)v796 + 1) = v798;
  v940 = 0;
  v939 = 0uLL;
  v799 = *(_QWORD *)v942;
  *(_OWORD *)(v796 + 40) = __p;
  *((_QWORD *)v796 + 7) = v799;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v800 = *(_OWORD *)&v942[8];
  *((_QWORD *)v796 + 10) = v943;
  *((_OWORD *)v796 + 4) = v800;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v796 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_1996;
LABEL_2000:
  if (SHIBYTE(v940) < 0)
LABEL_1997:
    operator delete((void *)v939);
LABEL_2001:
  v801 = sub_20EBA4AA4();
  if (*((char *)v801 + 23) < 0)
  {
    sub_20E860C04(v936, (void *)*v801, v801[1]);
  }
  else
  {
    v802 = *(_OWORD *)v801;
    v937 = v801[2];
    *(_OWORD *)v936 = v802;
  }
  v803 = HIBYTE(v937);
  if (v937 >= 0)
  {
    v804 = v936;
  }
  else
  {
    v803 = (uint64_t)v936[1];
    v804 = (void **)v936[0];
  }
  if (v803 >= 18)
  {
    v805 = (char *)v804 + v803;
    v806 = v804;
    do
    {
      v807 = (char *)memchr(v806, 67, v803 - 17);
      if (!v807)
        break;
      if (*(_QWORD *)v807 == 0x456C656E6E616843
        && *((_QWORD *)v807 + 1) == 0x696F763C726F7272
        && *((_WORD *)v807 + 8) == 15972)
      {
        if (v807 != v805 && v807 - (char *)v804 != -1)
          goto LABEL_2045;
        break;
      }
      v806 = (void **)(v807 + 1);
      v803 = v805 - (char *)v806;
    }
    while (v805 - (char *)v806 >= 18);
  }
  v938[0] = (void *)(v788 + 1);
  LODWORD(v938[1]) = 3;
  v810 = SHIBYTE(v947);
  if (v947 >= 0)
    v811 = HIBYTE(v947);
  else
    v811 = *((_QWORD *)&__dst + 1);
  v812 = v811 + 6;
  if (v811 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v812 >= 0x17)
  {
    v814 = (v812 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v812 | 7) != 0x17)
      v814 = v812 | 7;
    v815 = v814 + 1;
    v813 = (__int128 *)operator new(v814 + 1);
    *((_QWORD *)&v939 + 1) = v811 + 6;
    v940 = v815 | 0x8000000000000000;
    *(_QWORD *)&v939 = v813;
  }
  else
  {
    v940 = 0;
    v939 = 0uLL;
    v813 = &v939;
    HIBYTE(v940) = v811 + 6;
    if (!v811)
      goto LABEL_2037;
  }
  if (v810 >= 0)
    v816 = &__dst;
  else
    v816 = (__int128 *)__dst;
  memmove(v813, v816, v811);
LABEL_2037:
  strcpy((char *)v813 + v811, ".Error");
  *(_WORD *)&v942[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v943) = 0;
  v817 = v931;
  if ((unint64_t)v931 >= v932)
  {
    v931 = sub_20EBA558C((char **)&v930, (uint64_t)v938);
    if (SHIBYTE(v943) < 0)
    {
      operator delete(*(void **)&v942[8]);
      if ((v942[7] & 0x80000000) == 0)
        goto LABEL_2044;
    }
    else if ((v942[7] & 0x80000000) == 0)
    {
      goto LABEL_2044;
    }
LABEL_2039:
    operator delete((void *)__p);
    if (SHIBYTE(v940) < 0)
      goto LABEL_2040;
    goto LABEL_2045;
  }
  v818 = v938[0];
  *((_DWORD *)v931 + 2) = v938[1];
  *(_QWORD *)v817 = v818;
  v819 = v939;
  *((_QWORD *)v817 + 4) = v940;
  *((_OWORD *)v817 + 1) = v819;
  v940 = 0;
  v939 = 0uLL;
  v820 = *(_QWORD *)v942;
  *(_OWORD *)(v817 + 40) = __p;
  *((_QWORD *)v817 + 7) = v820;
  *(_QWORD *)v942 = 0;
  __p = 0uLL;
  v821 = *(_OWORD *)&v942[8];
  *((_QWORD *)v817 + 10) = v943;
  *((_OWORD *)v817 + 4) = v821;
  *(_QWORD *)&v942[8] = 0;
  *(_QWORD *)&v942[16] = 0;
  v943 = 0;
  v931 = v817 + 88;
  if ((v942[7] & 0x80000000) != 0)
    goto LABEL_2039;
LABEL_2044:
  if (SHIBYTE(v940) < 0)
  {
LABEL_2040:
    operator delete((void *)v939);
    v822 = *(std::__shared_weak_count **)(v786 + 136);
    if (!v822)
      goto LABEL_2049;
    goto LABEL_2046;
  }
LABEL_2045:
  v822 = *(std::__shared_weak_count **)(v786 + 136);
  if (!v822)
  {
LABEL_2049:
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v826 = 0;
    goto LABEL_2066;
  }
LABEL_2046:
  v823 = std::__shared_weak_count::lock(v822);
  v938[1] = v823;
  if (!v823)
    goto LABEL_2049;
  v824 = v823;
  v825 = *(void **)(v786 + 128);
  v938[0] = v825;
  if (v825)
  {
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v825 + 24))(&v933);
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
  }
  v827 = (unint64_t *)&v824->__shared_owners_;
  do
    v828 = __ldaxr(v827);
  while (__stlxr(v828 - 1, v827));
  if (v828)
  {
    v826 = v933;
    v829 = v934;
    if (v933 == v934)
      goto LABEL_2066;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
    std::__shared_weak_count::__release_weak(v824);
    v826 = v933;
    v829 = v934;
    if (v933 == v934)
      goto LABEL_2066;
  }
  do
  {
    v938[0] = (void *)v788;
    v938[1] = *v826;
    v940 = 0;
    v939 = 0uLL;
    v831 = v928;
    if ((unint64_t)v928 < v929)
    {
      *(_OWORD *)v928 = *(_OWORD *)v938;
      v830 = v939;
      *((_QWORD *)v831 + 4) = v940;
      *((_OWORD *)v831 + 1) = v830;
      v928 = v831 + 40;
    }
    else
    {
      v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
      if (SHIBYTE(v940) < 0)
        operator delete((void *)v939);
    }
    ++v826;
  }
  while (v826 != v829);
  v826 = v933;
LABEL_2066:
  if (v826)
  {
    v934 = v826;
    operator delete(v826);
  }
  v832 = *(std::__shared_weak_count **)(v786 + 136);
  if (v832 && (v833 = std::__shared_weak_count::lock(v832), (v938[1] = v833) != 0))
  {
    v834 = v833;
    v835 = *(void **)(v786 + 128);
    v938[0] = v835;
    if (v835)
    {
      (*(void (**)(void ***__return_ptr))(*(_QWORD *)v835 + 32))(&v933);
    }
    else
    {
      v933 = 0;
      v934 = 0;
      v935 = 0;
    }
    v838 = (unint64_t *)&v834->__shared_owners_;
    do
      v839 = __ldaxr(v838);
    while (__stlxr(v839 - 1, v838));
    if (v839)
    {
      v836 = v933;
      v840 = v934;
      if (v933 != v934)
      {
LABEL_2082:
        v841 = (void *)(v788 + 1);
        v837 = v926;
        do
        {
          v938[0] = v841;
          v938[1] = *v836;
          v940 = 0;
          v939 = 0uLL;
          v843 = v928;
          if ((unint64_t)v928 < v929)
          {
            *(_OWORD *)v928 = *(_OWORD *)v938;
            v842 = v939;
            *((_QWORD *)v843 + 4) = v940;
            *((_OWORD *)v843 + 1) = v842;
            v928 = v843 + 40;
          }
          else
          {
            v928 = sub_20EBA5F8C(&v927, (uint64_t)v938);
            if (SHIBYTE(v940) < 0)
              operator delete((void *)v939);
          }
          ++v836;
        }
        while (v836 != v840);
        v836 = v933;
        if (v933)
          goto LABEL_2089;
        goto LABEL_2090;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
      std::__shared_weak_count::__release_weak(v834);
      v836 = v933;
      v840 = v934;
      if (v933 != v934)
        goto LABEL_2082;
    }
  }
  else
  {
    v933 = 0;
    v934 = 0;
    v935 = 0;
    v836 = 0;
  }
  v837 = v926;
  if (v836)
  {
LABEL_2089:
    v934 = v836;
    operator delete(v836);
  }
LABEL_2090:
  if (SHIBYTE(v937) < 0)
  {
    operator delete(v936[0]);
    if ((SHIBYTE(v945) & 0x80000000) == 0)
    {
LABEL_2092:
      if ((SHIBYTE(v947) & 0x80000000) == 0)
        goto LABEL_2093;
LABEL_2097:
      operator delete((void *)__dst);
      if ((v837[320] & 0x80000000) == 0)
        goto LABEL_2094;
      goto LABEL_2098;
    }
  }
  else if ((SHIBYTE(v945) & 0x80000000) == 0)
  {
    goto LABEL_2092;
  }
  operator delete((void *)v944);
  if (SHIBYTE(v947) < 0)
    goto LABEL_2097;
LABEL_2093:
  if ((v837[320] & 0x80000000) == 0)
  {
LABEL_2094:
    *(_OWORD *)v938 = *(_OWORD *)(a2 + 4448);
    *(_QWORD *)&v939 = *(_QWORD *)(a2 + 4464);
    goto LABEL_2099;
  }
LABEL_2098:
  sub_20E860C04(v938, *(void **)(a2 + 4448), *(_QWORD *)(a2 + 4456));
LABEL_2099:
  v844 = *(_QWORD *)(a2 + 4496) != 0;
  if (v837[344] < 0)
  {
    sub_20E860C04(&__dst, *(void **)(a2 + 4472), *(_QWORD *)(a2 + 4480));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 4472);
    v947 = *(_QWORD *)(a2 + 4488);
  }
  sub_20EBA690C((uint64_t)v962, (__int128 *)v938, v844, (uint64_t *)&v930, (uint64_t *)&v927, &__dst);
  if ((SHIBYTE(v947) & 0x80000000) == 0)
  {
    if ((SBYTE7(v939) & 0x80000000) == 0)
      goto LABEL_2104;
LABEL_2114:
    operator delete(v938[0]);
    v845 = (char *)v927;
    if (v927)
      goto LABEL_2105;
LABEL_2115:
    v847 = (char *)v930;
    if (v930)
      goto LABEL_2116;
    goto LABEL_2128;
  }
  operator delete((void *)__dst);
  if (SBYTE7(v939) < 0)
    goto LABEL_2114;
LABEL_2104:
  v845 = (char *)v927;
  if (!v927)
    goto LABEL_2115;
LABEL_2105:
  v846 = v928;
  if (v928 == v845)
  {
    v928 = v845;
    operator delete(v845);
    v847 = (char *)v930;
    if (!v930)
      goto LABEL_2128;
LABEL_2116:
    v848 = v931;
    v849 = v847;
    if (v931 == v847)
    {
LABEL_2127:
      v931 = v847;
      operator delete(v849);
      goto LABEL_2128;
    }
    while (1)
    {
      while (*(v848 - 1) < 0)
      {
        operator delete(*((void **)v848 - 3));
        if (*(v848 - 25) < 0)
          goto LABEL_2118;
LABEL_2124:
        if ((*(v848 - 49) & 0x80000000) == 0)
          goto LABEL_2119;
LABEL_2125:
        operator delete(*((void **)v848 - 9));
        v848 -= 88;
        if (v848 == v847)
        {
LABEL_2126:
          v849 = v930;
          goto LABEL_2127;
        }
      }
      if ((*(v848 - 25) & 0x80000000) == 0)
        goto LABEL_2124;
LABEL_2118:
      operator delete(*((void **)v848 - 6));
      if (*(v848 - 49) < 0)
        goto LABEL_2125;
LABEL_2119:
      v848 -= 88;
      if (v848 == v847)
        goto LABEL_2126;
    }
  }
  do
  {
    if (*(v846 - 1) < 0)
      operator delete(*((void **)v846 - 3));
    v846 -= 40;
  }
  while (v846 != v845);
  v928 = v845;
  operator delete(v927);
  v847 = (char *)v930;
  if (v930)
    goto LABEL_2116;
LABEL_2128:
  sub_20EBA4824(a1, (uint64_t)v948, 0xFuLL);
  sub_20EBA8C18((uint64_t)v962);
  sub_20EBA8C18((uint64_t)v961);
  sub_20EBA8C18((uint64_t)v960);
  sub_20EBA8C18((uint64_t)v959);
  sub_20EBA8C18((uint64_t)v958);
  sub_20EBA8C18((uint64_t)v957);
  sub_20EBA8C18((uint64_t)v956);
  sub_20EBA8C18((uint64_t)v955);
  sub_20EBA8C18((uint64_t)v954);
  sub_20EBA8C18((uint64_t)v953);
  sub_20EBA8C18((uint64_t)v952);
  sub_20EBA8C18((uint64_t)v951);
  sub_20EBA8C18((uint64_t)v950);
  sub_20EBA8C18((uint64_t)v949);
  return sub_20EBA8C18((uint64_t)v948);
}

void sub_20EBDBF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_Unwind_Exception *exception_object,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  __cxa_guard_abort(&qword_254A5BF88);
  if (a60 < 0)
    operator delete(__p);
  sub_20EBA4920(&a26);
  sub_20EBA4990(&a29);
  do
  {
    a10 -= 128;
    sub_20EBA8C18((uint64_t)a10);
  }
  while (a10 != &a61);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBDD094(uint64_t a1, uint64_t a2)
{
  return sub_20EC4DF34(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 3720) + 56), a2);
}

uint64_t sub_20EBDD0A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;

  v1 = *(_QWORD *)(a1 + 56);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 3712) + 24))(*(_QWORD *)(v1 + 3712));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 3720) + 24))(*(_QWORD *)(v1 + 3720));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 3728) + 24))(*(_QWORD *)(v1 + 3728));
  v2 = *(_QWORD ***)(*(_QWORD *)(v1 + 3736) + 72);
  (*(void (**)(_QWORD *))(*v2[9] + 64))(v2[9]);
  (*(void (**)(_QWORD *))(*v2[30] + 64))(v2[30]);
  (*(void (**)(_QWORD *))(*v2[51] + 64))(v2[51]);
  v3 = *(_QWORD ***)(*(_QWORD *)(v1 + 3744) + 72);
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  (*(void (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
  (*(void (**)(_QWORD *))(*v3[72] + 64))(v3[72]);
  (*(void (**)(_QWORD *))(*v3[93] + 64))(v3[93]);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 3936) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 3936) + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 3944) + 24))(*(_QWORD *)(v1 + 3944));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 4024) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 4024) + 72));
  v4 = *(_QWORD *)(v1 + 4104);
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 72) + 64))(*(_QWORD *)(v4 + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 240) + 64))(*(_QWORD *)(v4 + 240));
  v5 = *(_QWORD ***)(*(_QWORD *)(v1 + 4112) + 72);
  (*(void (**)(_QWORD *))(*v5[9] + 64))(v5[9]);
  (*(void (**)(_QWORD *))(*v5[30] + 64))(v5[30]);
  (*(void (**)(_QWORD *))(*v5[51] + 64))(v5[51]);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 4192) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 4192) + 72));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 4272) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 4272) + 72));
  v6 = *(_QWORD ***)(v1 + 4352);
  (*(void (**)(_QWORD *))(*v6[9] + 64))(v6[9]);
  (*(void (**)(_QWORD *))(*v6[30] + 64))(v6[30]);
  (*(void (**)(_QWORD *))(*v6[51] + 64))(v6[51]);
  (*(void (**)(_QWORD *))(*v6[72] + 64))(v6[72]);
  (*(void (**)(_QWORD *))(*v6[93] + 64))(v6[93]);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 4432) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 4432) + 72));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 4512) + 72) + 64))(*(_QWORD *)(*(_QWORD *)(v1 + 4512) + 72));
}

void sub_20EBDD2B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  int v59;
  void *v60[2];
  void *v61[2];
  int v62;
  void *__p[2];
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  void *v70[2];
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *v80[2];
  void *v81[2];
  int v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[2];
  void *v90[2];
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;

  v58 = a5;
  v59 = a6;
  v13 = *(_QWORD *)(a1 + 56);
  sub_20E86CD34((char *)__p, (__int128 *)(a2 + 8872));
  if (*(_BYTE *)(a2 + 280))
  {
    if (SHIBYTE(v64) < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    __p[1] = 0;
    v64 = 0;
  }
  if ((_BYTE)v76)
    v14 = a4;
  else
    v14 = 0;
  LOBYTE(v76) = v14;
  if (*(_BYTE *)(a2 + 6181))
  {
    *(_OWORD *)v60 = 0u;
    *(_OWORD *)v61 = 0u;
    v62 = 1065353216;
  }
  else
  {
    sub_20E96A108((uint64_t)v60, v13);
  }
  v15 = operator new();
  v16 = v15;
  *(_OWORD *)v83 = *(_OWORD *)__p;
  v17 = v64;
  __p[0] = 0;
  __p[1] = 0;
  v18 = *(_OWORD *)v65;
  v64 = 0;
  v65[0] = 0;
  v85 = v18;
  v84 = v17;
  v86 = v66;
  v65[1] = 0;
  v66 = 0;
  *(_OWORD *)((char *)v89 + 9) = *(_OWORD *)((char *)v69 + 9);
  v87 = v67;
  v88 = v68;
  v89[0] = v69[0];
  *(_OWORD *)v90 = *(_OWORD *)v70;
  v70[0] = 0;
  v70[1] = 0;
  v19 = v71;
  v71 = 0;
  v91 = v19;
  v95 = v75;
  v94 = v74;
  v93 = v73;
  v92 = v72;
  v97 = v77;
  v96 = v76;
  v20 = v60[0];
  v21 = (unint64_t)v60[1];
  v80[0] = v60[0];
  v80[1] = v60[1];
  v60[0] = 0;
  v60[1] = 0;
  v81[0] = v61[0];
  v81[1] = v61[1];
  v82 = v62;
  if (v61[1])
  {
    v22 = *((_QWORD *)v61[0] + 1);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v22 >= v21)
        v22 %= v21;
    }
    else
    {
      v22 &= v21 - 1;
    }
    v20[v22] = v81;
    v61[0] = 0;
    v61[1] = 0;
  }
  v23 = *(std::__shared_weak_count **)(v13 + 3760);
  v78 = *(_QWORD *)(v13 + 3752);
  v79 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  sub_20EFA5704(v15, a3, (uint64_t)v83, &v58, (uint64_t)v80, &v78, a7);
  *a8 = v16;
  v26 = v79;
  if (v79)
  {
    v27 = (unint64_t *)&v79->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v81[0];
  if (v81[0])
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v31 = v80[0];
  v80[0] = 0;
  if (v31)
    operator delete(v31);
  if (SHIBYTE(v91) < 0)
  {
    operator delete(v90[0]);
    if ((SHIBYTE(v86) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v86) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete((void *)v85);
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    v32 = *a8;
    v33 = *(_QWORD *)(*a8 + 56);
    v34 = *(unsigned __int8 *)(v33 + 80);
    *(_BYTE *)(v13 + 20224) = v34;
    if (!v34)
      goto LABEL_40;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v83[0]);
  v32 = *a8;
  v33 = *(_QWORD *)(*a8 + 56);
  v35 = *(unsigned __int8 *)(v33 + 80);
  *(_BYTE *)(v13 + 20224) = v35;
  if (!v35)
    goto LABEL_40;
LABEL_37:
  v36 = *(_QWORD *)(v13 + 4432);
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 3720) + 56) + 336);
  v83[0] = &off_24C9CC538;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v37 + 96) + 16))(&v83[1]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v36 + 120) + 16))(v36 + 120, v83);
  v38 = v83[1];
  v83[0] = &off_24C9CC538;
  v83[1] = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v33 = *(_QWORD *)(v32 + 56);
LABEL_40:
  v39 = *(_QWORD *)(v33 + 160);
  v40 = *(_QWORD *)(*(_QWORD *)(v13 + 3744) + 72);
  v83[0] = &off_24C9B46A0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v40 + 768) + 16))(&v83[1]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v39 + 120) + 16))(v39 + 120, v83);
  v41 = v83[1];
  v83[0] = &off_24C9B46A0;
  v83[1] = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 3720) + 56) + 176);
  v43 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 240);
  v83[0] = &off_24C9B46D8;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v43 + 264) + 16))(&v83[1]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v42 + 456) + 16))(v42 + 456, v83);
  v44 = v83[1];
  v83[0] = &off_24C9B46D8;
  v83[1] = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 240);
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 3720) + 56) + 96);
  v83[0] = &off_24C9CC570;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v46 + 936) + 16))(&v83[1]);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v45 + 624) + 16))(v45 + 624, v83);
  v47 = v83[1];
  v83[0] = &off_24C9CC570;
  v83[1] = 0;
  if (v47)
    (*(void (**)(void *))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(v32 + 56);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = 72;
  if (!*(_BYTE *)(v48 + 80))
    v50 = 240;
  v51 = *(_QWORD *)(v48 + v50);
  v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 3720) + 56) + 96);
  v83[0] = &off_24C9B4710;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v52 + 1104) + 16))(&v83[1]);
  v53 = 624;
  if (!v49)
    v53 = 1128;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)(v51 + v53) + 16))(v51 + v53, v83);
  v54 = v83[1];
  v83[0] = &off_24C9B4710;
  v83[1] = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = v61[0];
  if (v61[0])
  {
    do
    {
      v56 = (_QWORD *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  v57 = v60[0];
  v60[0] = 0;
  if (v57)
    operator delete(v57);
  if (SHIBYTE(v71) < 0)
  {
    operator delete(v70[0]);
    if ((SHIBYTE(v66) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        return;
LABEL_62:
      operator delete(__p[0]);
      return;
    }
  }
  else if ((SHIBYTE(v66) & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v65[0]);
  if (SHIBYTE(v64) < 0)
    goto LABEL_62;
}

void sub_20EBDD828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBDD9E4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  _QWORD *v38;

  v10 = result[7];
  v11 = *(_QWORD *)(a5 + 56);
  if (*(_BYTE *)v11)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 176);
    v14 = *(_QWORD *)(v11 + 80);
    v37 = &off_24C9C7CF0;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v14 + 96) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v13 + 1128) + 16))(v13 + 1128, &v37);
    v15 = v38;
    v37 = &off_24C9C7CF0;
    v38 = 0;
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    v16 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 80);
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 96);
    v37 = &off_24C9C7D60;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v17 + 3792) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v16 + 120) + 16))(v16 + 120, &v37);
    result = v38;
    v37 = &off_24C9C7D60;
    v38 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v18 = *(_QWORD *)(a4 + 56);
  if (*(_BYTE *)v18)
  {
    v19 = *(_QWORD *)(v18 + 160);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 96);
    v37 = &off_24C9C6280;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v20 + 3624) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v19 + 120) + 16))(v19 + 120, &v37);
    result = v38;
    v37 = &off_24C9C6280;
    v38 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_BYTE *)(a2 + 8566))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 176);
    v22 = *(_QWORD *)(*(_QWORD *)(a6 + 56) + 240);
    v37 = &off_24C9B4748;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v22 + 432) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v21 + 792) + 16))(v21 + 792, &v37);
    result = v38;
    v37 = &off_24C9B4748;
    v38 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (*(_BYTE *)(*(_QWORD *)(a3 + 56) + 80))
  {
    v23 = *(_QWORD *)(a4 + 56);
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 176) + 624;
    if (*(_BYTE *)v23)
    {
      v25 = *(_QWORD *)(v23 + 160);
      v37 = &off_24C9B4780;
      (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v25 + 264) + 16))(&v38);
      (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v24 + 16))(v24, &v37);
      v26 = v38;
      v37 = &off_24C9B4780;
      v38 = 0;
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
      v27 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 160);
      v28 = *(_QWORD *)(v10 + 4512);
      v37 = &off_24C9B4780;
      (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v28 + 96) + 16))(&v38);
      (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v27 + 288) + 16))(v27 + 288, &v37);
      v29 = v38;
      v37 = &off_24C9B4780;
      v38 = 0;
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
    }
    else
    {
      v30 = *(_QWORD *)(v10 + 4512);
      v37 = &off_24C9B4780;
      (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v30 + 96) + 16))(&v38);
      (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v24 + 16))(v24, &v37);
      v31 = v38;
      v37 = &off_24C9B4780;
      v38 = 0;
      if (v31)
        (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    }
    v32 = *(_QWORD *)(v10 + 4512);
    v33 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 72);
    v37 = &off_24C9CC290;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v33 + 96) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v32 + 120) + 16))(v32 + 120, &v37);
    v34 = v38;
    v37 = &off_24C9CC290;
    v38 = 0;
    if (v34)
      (*(void (**)(_QWORD *))(*v34 + 8))(v34);
    v35 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 72);
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 3720) + 56) + 96);
    v37 = &off_24C9B47B8;
    (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v36 + 3456) + 16))(&v38);
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v35 + 120) + 16))(v35 + 120, &v37);
    result = v38;
    v37 = &off_24C9B47B8;
    v38 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_20EBDDE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBDDE9C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (**v19)();
  _QWORD *v20;

  if (!*(_BYTE *)(*(_QWORD *)(a3 + 8) + 40))
    return result;
  v4 = *(_QWORD *)(result + 56);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 3944) + 56) + 80);
  v6 = (_QWORD *)operator new();
  *v6 = &off_24C9C8760;
  v6[1] = &off_24C9C87C8;
  v7 = v6 + 1;
  v6[2] = v4;
  v6[3] = a3;
  v6[4] = v6 + 1;
  v19 = &off_24C9B5708;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C9C8760;
  v9 = v8 + 1;
  v10 = v6[4];
  if (!v10)
    goto LABEL_5;
  if ((_QWORD *)v10 != v7)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 16))(v10, v9);
LABEL_5:
    v8[4] = v10;
    goto LABEL_7;
  }
  v8[4] = v9;
  (*(void (**)(_QWORD *))(*v7 + 24))(v7);
LABEL_7:
  v20 = v8;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v5 + 120) + 16))(v5 + 120, &v19);
  v11 = v20;
  v19 = &off_24C9B5708;
  v20 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 3720) + 56) + 176);
  v13 = (_QWORD *)operator new();
  *v13 = &off_24C9B47F0;
  v13[1] = &off_24C9C8858;
  v14 = v13 + 1;
  v13[2] = v4;
  v13[3] = a3;
  v13[4] = v13 + 1;
  v19 = &off_24C9B46D8;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9B47F0;
  v16 = v15 + 1;
  v17 = v13[4];
  if (v17)
  {
    if ((_QWORD *)v17 == v14)
    {
      v15[4] = v16;
      (*(void (**)(_QWORD *))(*v14 + 24))(v14);
      goto LABEL_14;
    }
    v17 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v16);
  }
  v15[4] = v17;
LABEL_14:
  v20 = v15;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v12 + 456) + 16))(v12 + 456, &v19);
  v18 = v20;
  v19 = &off_24C9B46D8;
  v20 = 0;
  if (v18)
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
}

void sub_20EBDE0D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20EBDE108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    _Unwind_Resume(a1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBDE170(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_20EBDE178(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  std::runtime_error_vtbl *v20;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 4352);
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9CC470;
  v20 = (std::runtime_error_vtbl *)v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = *(std::__shared_weak_count **)(v3 + 280);
  if (!v8 || (v9 = std::__shared_weak_count::lock(v8)) == 0 || (v10 = *(_QWORD *)(v3 + 272)) == 0)
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v19.__vftable = v20;
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, std::runtime_error *))(*(_QWORD *)v10 + 56))(v10, a2, &v19);
  sub_20EBF0AB0((uint64_t *)&v19);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_20EBF0AB0((uint64_t *)&v20);
  sub_20E991998((std::__assoc_sub_state *)v4);
  v14 = v13;
  do
    v15 = __ldaxr(v5);
  while (__stlxr(v15 - 1, v5));
  if (!v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return v14;
}

void sub_20EBDE354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20EBF0AB0((uint64_t *)va);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_20EBF0AB0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20EBDE364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EBDE394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_20EBF0AB0(&a13);
  _Unwind_Resume(a1);
}

void sub_20EBDE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EBF0AB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EBDE3C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, std::__assoc_sub_state *a12, std::exception_ptr a13)
{
  uint64_t v13;
  std::__assoc_sub_state *v14;
  std::exception_ptr v15;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v14 = a12;
  if (a12)
  {
    std::exception_ptr::exception_ptr(&a13, &a11);
    v15.__ptr_ = &a13;
    std::__assoc_sub_state::set_exception(v14, v15);
    std::exception_ptr::~exception_ptr(&a13);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v13)
      JUMPOUT(0x20EBDE2A8);
    JUMPOUT(0x20EBDE278);
  }
  sub_20E96CE78(3u);
}

void sub_20EBDE420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, std::exception_ptr a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    JUMPOUT(0x20EBDE480);
  }
  JUMPOUT(0x20EBDE49CLL);
}

void sub_20EBDE464()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EBDE46CLL);
  JUMPOUT(0x20EBDE49CLL);
}

void sub_20EBDE4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  int v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::runtime_error *exception;
  std::runtime_error *v14;
  uint64_t v15;
  std::runtime_error v16;
  std::runtime_error_vtbl *v17;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 4352);
  v15 = a2;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = 0;
  v4 = (unint64_t *)(v3 + 8);
  *(_QWORD *)(v3 + 24) = 850045863;
  *(_QWORD *)(v3 + 16) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 1018212795;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 124) = 0u;
  *(_QWORD *)v3 = &off_24C9CC4B8;
  v17 = (std::runtime_error_vtbl *)v3;
  std::mutex::lock((std::mutex *)(v3 + 24));
  v5 = *(_DWORD *)(v3 + 136);
  if ((v5 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v6 = __ldxr(v4);
  while (__stxr(v6 + 1, v4));
  *(_DWORD *)(v3 + 136) = v5 | 2;
  std::mutex::unlock((std::mutex *)(v3 + 24));
  v7 = *(std::__shared_weak_count **)(v2 + 448);
  if (!v7 || (v8 = std::__shared_weak_count::lock(v7)) == 0 || (v9 = *(_QWORD *)(v2 + 440)) == 0)
  {
    std::runtime_error::runtime_error(&v16, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v16.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v14 = std::runtime_error::runtime_error(exception, &v16);
    v14->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v14, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v16.__vftable = v17;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::runtime_error *))(*(_QWORD *)v9 + 56))(v9, &v15, &v16);
  sub_20EBF0C90((uint64_t *)&v16);
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_20EBF0C90((uint64_t *)&v17);
  sub_20EBF0DB8((std::__assoc_sub_state *)v3);
  do
    v12 = __ldaxr(v4);
  while (__stlxr(v12 - 1, v4));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
}

void sub_20EBDE6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20EBF0C90((uint64_t *)va);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  do
    v8 = __ldaxr(v4);
  while (__stlxr(v8 - 1, v4));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_20EBF0C90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20EBDE6CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20EBDE6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  sub_20EBF0C90(&a13);
  _Unwind_Resume(a1);
}

void sub_20EBDE718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EBF0C90((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20EBDE72C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, std::__assoc_sub_state *a12, std::exception_ptr a13)
{
  uint64_t v13;
  std::__assoc_sub_state *v14;
  std::exception_ptr v15;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v14 = a12;
  if (a12)
  {
    std::exception_ptr::exception_ptr(&a13, &a11);
    v15.__ptr_ = &a13;
    std::__assoc_sub_state::set_exception(v14, v15);
    std::exception_ptr::~exception_ptr(&a13);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v13)
      JUMPOUT(0x20EBDE5FCLL);
    JUMPOUT(0x20EBDE5CCLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EBDE788(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, std::exception_ptr a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    JUMPOUT(0x20EBDE7E8);
  }
  JUMPOUT(0x20EBDE804);
}

void sub_20EBDE7CC()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EBDE7D4);
  JUMPOUT(0x20EBDE804);
}

uint64_t sub_20EBDE838(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 9050);
}

void sub_20EBDE848(unsigned int *a1@<X0>, int64x2_t *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  int v12;
  unsigned int v13;
  __int128 v14;
  void **v15;
  void **v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  void **v30;
  void *v31;
  void *v32;
  char *v33;
  char *v34;
  int64x2_t v35;
  char *v36;
  void *__p[2];
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  char v42;

  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "MLFeatureDetectionNodeGroup");
  v33 = 0;
  v34 = 0;
  v32 = 0;
  __p[0] = &v32;
  LOBYTE(__p[1]) = 0;
  v5 = (char *)operator new(0xE0uLL);
  v32 = v5;
  v33 = v5;
  v34 = v5 + 224;
  strcpy(v5, "CAPIFwdScheduler");
  v5[23] = 16;
  *((_DWORD *)v5 + 6) = 1;
  strcpy(v5 + 32, "ErrorTransformNode");
  v5[55] = 18;
  *((_DWORD *)v5 + 14) = 0;
  sub_20E860C04(v5 + 64, v4, 0x1BuLL);
  *((_DWORD *)v5 + 22) = 0;
  strcpy(v5 + 96, "SemanticsNodeGroup");
  v5[119] = 18;
  *((_DWORD *)v5 + 30) = 0;
  strcpy(v5 + 128, "DenseDepthNodeGroup");
  v5[151] = 19;
  *((_DWORD *)v5 + 38) = 0;
  *((_QWORD *)v5 + 20) = 0x69676E456D616C53;
  *((_QWORD *)v5 + 21) = 25966;
  v5[183] = 10;
  *((_DWORD *)v5 + 46) = 0;
  *((_QWORD *)v5 + 24) = 0x49676E697070614DLL;
  *((_QWORD *)v5 + 25) = 79;
  v5[215] = 9;
  *((_DWORD *)v5 + 54) = 4;
  v33 = v5 + 224;
  operator delete(v4);
  v7 = (char *)v32;
  v6 = v33;
  v35 = 0uLL;
  v36 = 0;
  v8 = v33 - (_BYTE *)v32;
  if (v33 == v32)
  {
    v10 = 0;
    goto LABEL_36;
  }
  if (v8 < 0)
    sub_20E867F44();
  v9 = v8 >> 5;
  v10 = operator new(40 * (v8 >> 5));
  v8 = (uint64_t)v10 + 40 * v9;
  v35.i64[0] = (uint64_t)v10;
  v35.i64[1] = (uint64_t)v10;
  v36 = (char *)v8;
  if (v6 == v7)
  {
LABEL_36:
    *a2 = vdupq_n_s64((unint64_t)v10);
    a2[1].i64[0] = v8;
    if (!v6)
      return;
    goto LABEL_37;
  }
  do
  {
    v13 = *((_DWORD *)v7 + 6);
    v41 = *a1;
    v42 = *((_BYTE *)a1 + 4);
    if (v7[23] < 0)
    {
      sub_20E860C04(__p, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v14 = *(_OWORD *)v7;
      v38 = *((_QWORD *)v7 + 2);
      *(_OWORD *)__p = v14;
    }
    v39 = __PAIR64__(v41, v13);
    LOBYTE(v40) = v42;
    v15 = (void **)v35.i64[1];
    if (v35.i64[1] < (unint64_t)v36)
    {
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v35.i64[1] + 16) = v38;
      *(_OWORD *)v15 = v11;
      __p[1] = 0;
      v38 = 0;
      __p[0] = 0;
      v12 = v40;
      v15[3] = (void *)v39;
      *((_DWORD *)v15 + 8) = v12;
      v35.i64[1] = (uint64_t)(v15 + 5);
    }
    else
    {
      v16 = (void **)v35.i64[0];
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((v35.i64[1] - v35.i64[0]) >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0x666666666666666)
        sub_20E867F44();
      if (0x999999999999999ALL * ((uint64_t)&v36[-v35.i64[0]] >> 3) > v18)
        v18 = 0x999999999999999ALL * ((uint64_t)&v36[-v35.i64[0]] >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v36[-v35.i64[0]] >> 3) >= 0x333333333333333)
        v19 = 0x666666666666666;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 > 0x666666666666666)
          sub_20E877A38();
        v20 = (char *)operator new(40 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[40 * v17];
      v22 = &v20[40 * v19];
      *(_OWORD *)v21 = *(_OWORD *)__p;
      v23 = v38;
      __p[1] = 0;
      v38 = 0;
      __p[0] = 0;
      v24 = v39;
      *((_QWORD *)v21 + 2) = v23;
      *((_QWORD *)v21 + 3) = v24;
      *((_DWORD *)v21 + 8) = v40;
      v25 = v21 + 40;
      if (v15 == v16)
      {
        v35.i64[0] = (uint64_t)v21;
        v35.i64[1] = (uint64_t)(v21 + 40);
        v36 = &v20[40 * v19];
      }
      else
      {
        do
        {
          v26 = *(_OWORD *)(v15 - 5);
          *((_QWORD *)v21 - 3) = *(v15 - 3);
          *(_OWORD *)(v21 - 40) = v26;
          *(v15 - 4) = 0;
          *(v15 - 3) = 0;
          *(v15 - 5) = 0;
          v27 = (uint64_t)*(v15 - 2);
          *((_DWORD *)v21 - 2) = *((_DWORD *)v15 - 2);
          *((_QWORD *)v21 - 2) = v27;
          v21 -= 40;
          v15 -= 5;
        }
        while (v15 != v16);
        v28 = (void **)v35.i64[1];
        v15 = (void **)v35.i64[0];
        v35.i64[0] = (uint64_t)v21;
        v35.i64[1] = (uint64_t)v25;
        v36 = v22;
        while (v28 != v15)
        {
          if (*((char *)v28 - 17) < 0)
            operator delete(*(v28 - 5));
          v28 -= 5;
        }
      }
      if (v15)
        operator delete(v15);
      v35.i64[1] = (uint64_t)v25;
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
    }
    v7 += 32;
  }
  while (v7 != v6);
  v6 = (char *)v32;
  v29 = (uint64_t)v36;
  *a2 = v35;
  a2[1].i64[0] = v29;
  if (v6)
  {
LABEL_37:
    v30 = (void **)v33;
    v31 = v6;
    if (v33 != v6)
    {
      do
      {
        if (*((char *)v30 - 9) < 0)
          operator delete(*(v30 - 4));
        v30 -= 4;
      }
      while (v30 != (void **)v6);
      v31 = v32;
    }
    v33 = v6;
    operator delete(v31);
  }
}

void sub_20EBDECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  if (*(char *)(v10 + 55) < 0)
    operator delete(*(void **)(v10 + 32));
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  sub_20EBF0E7C((void ***)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20EBDED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_20EBF0E7C((void ***)va);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20EBDED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20E92DA24(&a13);
  sub_20EB9B93C(&a10);
  _Unwind_Resume(a1);
}

void sub_20EBDEDA8(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  int *v12;
  int *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  std::logic_error *exception;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int **v22;

  sub_20E8A1408(a4, a1);
  if (a3)
  {
    sub_20EA8F108((int **)a4, a2);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v7 = *(int **)a4;
    v8 = *(int **)(a4 + 8);
    v22 = &v18;
    if (v7 != v8)
    {
      do
      {
        v21 = *v7;
        sub_20EA9AB98((uint64_t *)&v22, &v21);
        v7 += 272;
      }
      while (v7 != v8);
      v10 = v18;
      v9 = v19;
      if (v18 != v19)
      {
        do
        {
          v11 = *v10;
          v13 = *(int **)a4;
          v12 = *(int **)(a4 + 8);
          if (*(int **)a4 != v12)
          {
            while (*v13 != v11)
            {
              v13 += 272;
              if (v13 == v12)
                goto LABEL_25;
            }
          }
          if (v13 == v12)
          {
LABEL_25:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Requested camera id not found.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          if (v13[1] != 1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1271, (uint64_t)"camera_set.camera_mode == calibration::CameraMode::Mono", 55, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_26;
            }
            v11 = *v10;
          }
          v14 = v13[2];
          if (v11 == 1)
          {
            if (v14 <= 0x13F
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1274, (uint64_t)"camera_set.primary.image_width_ >= kSecondaryCameraRes", 54, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_26;
            }
            v15 = 320;
          }
          else
          {
            v15 = a2;
            if (v14 < a2)
            {
              v16 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1278, (uint64_t)"camera_set.primary.image_width_ >= image_processing_width_for_points", 68, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
              v15 = a2;
              if (v16)
LABEL_26:
                abort();
            }
          }
          sub_20EA8ED20((uint64_t)v13, v15, -1);
          ++v10;
        }
        while (v10 != v9);
        v9 = v18;
      }
      if (v9)
      {
        v19 = v9;
        operator delete(v9);
      }
    }
  }
}

void sub_20EBDEFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86A810(v1);
  _Unwind_Resume(a1);
}

void sub_20EBDEFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  sub_20E86A810(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBDF030(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C8548;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBDF0B8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C9C8548;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 64))();
  *(_QWORD *)a1 = off_24CA1E1D8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

void sub_20EBDF144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  void **v16;
  char *v17;
  void **v18;
  char *v19;
  int v22;
  size_t v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *p_dst;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  char *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  char *v58;
  __int128 *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t *v66;
  __int128 v67;
  uint64_t v68;
  void **v69;
  char *v70;
  void **v71;
  char *v72;
  int v75;
  size_t v76;
  unint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  __int128 v95;
  char *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  __int128 *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t *v119;
  __int128 v120;
  uint64_t v121;
  void **v122;
  char *v123;
  void **v124;
  char *v125;
  int v128;
  size_t v129;
  unint64_t v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  __int128 v148;
  char *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  _QWORD *v154;
  unint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  __int128 v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 *v163;
  char *v164;
  __int128 *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t *v172;
  __int128 v173;
  uint64_t v174;
  void **v175;
  char *v176;
  void **v177;
  char *v178;
  int v181;
  size_t v182;
  unint64_t v183;
  __int128 *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  __int128 v201;
  char *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  __int128 v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 *v216;
  char *v217;
  __int128 *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  uint64_t *v225;
  __int128 v226;
  uint64_t v227;
  void **v228;
  char *v229;
  void **v230;
  char *v231;
  int v234;
  size_t v235;
  unint64_t v236;
  __int128 *v237;
  uint64_t v238;
  uint64_t v239;
  __int128 *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count *v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  _QWORD *v250;
  unint64_t *v251;
  unint64_t v252;
  _QWORD *v253;
  __int128 v254;
  char *v255;
  std::__shared_weak_count *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  __int128 v264;
  char *v265;
  _BOOL4 v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  void *v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  void *v275[2];
  uint64_t v276;
  void *v277[2];
  uint64_t v278;
  void *v279;
  char *v280;
  unint64_t v281;
  void *v282;
  char *v283;
  unint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  void *v288[2];
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  unint64_t v292;
  __int128 __p;
  _BYTE v294[24];
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  __int128 __dst;
  int64_t v299;

  v282 = 0;
  v283 = 0;
  v284 = 0;
  v279 = 0;
  v280 = 0;
  v281 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v273 = a2;
    v274 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v299 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v273 = a2;
    v274 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v296, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v296 = xmmword_254A5C2A8;
    v297 = unk_254A5C2B8;
  }
  v7 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v8 = &v296;
  }
  else
  {
    v7 = *((_QWORD *)&v296 + 1);
    v8 = (__int128 *)v296;
  }
  if (v7 >= 4)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = (char *)memchr(v10, 118, v7 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 1684631414)
      {
        if (v11 == v9 || v11 - (char *)v8 == -1)
          break;
        *(_QWORD *)&v290 = v6;
        DWORD2(v290) = 4;
        if (SHIBYTE(v299) < 0)
        {
          sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v291 = __dst;
          v292 = v299;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v272 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v294 = *(_QWORD *)(v4 + 48);
          __p = v272;
        }
        sub_20EBE7198();
        if ((byte_254A5C3C7 & 0x80000000) == 0)
        {
          *(_OWORD *)&v294[8] = xmmword_254A5C3B0;
          v295 = unk_254A5C3C0;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v10 = (__int128 *)(v11 + 1);
      v7 = v9 - (char *)v10;
    }
    while (v9 - (char *)v10 >= 4);
  }
  *(_QWORD *)&v290 = v6;
  DWORD2(v290) = 2;
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v291 = __dst;
    v292 = v299;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v12 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v294 = *(_QWORD *)(v4 + 48);
    __p = v12;
  }
  sub_20EBE7198();
  if (byte_254A5C3C7 < 0)
  {
LABEL_31:
    sub_20E860C04(&v294[8], (void *)xmmword_254A5C3B0, *((unint64_t *)&xmmword_254A5C3B0 + 1));
  }
  else
  {
    *(_OWORD *)&v294[8] = xmmword_254A5C3B0;
    v295 = unk_254A5C3C0;
  }
LABEL_34:
  v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
  if ((SHIBYTE(v295) & 0x80000000) == 0)
  {
    if ((v294[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v294[8]);
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v292) < 0)
LABEL_33:
    operator delete((void *)v291);
LABEL_37:
  v13 = sub_20EBA4AA4();
  if (*((char *)v13 + 23) < 0)
  {
    sub_20E860C04(v288, (void *)*v13, v13[1]);
  }
  else
  {
    v14 = *(_OWORD *)v13;
    v289 = v13[2];
    *(_OWORD *)v288 = v14;
  }
  v15 = HIBYTE(v289);
  if (v289 >= 0)
  {
    v16 = v288;
  }
  else
  {
    v15 = (uint64_t)v288[1];
    v16 = (void **)v288[0];
  }
  if (v15 >= 18)
  {
    v17 = (char *)v16 + v15;
    v18 = v16;
    do
    {
      v19 = (char *)memchr(v18, 67, v15 - 17);
      if (!v19)
        break;
      if (*(_QWORD *)v19 == 0x456C656E6E616843
        && *((_QWORD *)v19 + 1) == 0x696F763C726F7272
        && *((_WORD *)v19 + 8) == 15972)
      {
        if (v19 != v17 && v19 - (char *)v16 != -1)
          goto LABEL_81;
        break;
      }
      v18 = (void **)(v19 + 1);
      v15 = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 18);
  }
  *(_QWORD *)&v290 = v6 + 1;
  DWORD2(v290) = 3;
  v22 = SHIBYTE(v299);
  if (v299 >= 0)
    v23 = HIBYTE(v299);
  else
    v23 = *((_QWORD *)&__dst + 1);
  v24 = v23 + 6;
  if (v23 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v24 >= 0x17)
  {
    v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v26 = v24 | 7;
    v27 = v26 + 1;
    v25 = (__int128 *)operator new(v26 + 1);
    *((_QWORD *)&v291 + 1) = v23 + 6;
    v292 = v27 | 0x8000000000000000;
    *(_QWORD *)&v291 = v25;
  }
  else
  {
    v292 = 0;
    v291 = 0uLL;
    v25 = &v291;
    HIBYTE(v292) = v23 + 6;
    if (!v23)
      goto LABEL_73;
  }
  if (v22 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v25, p_dst, v23);
LABEL_73:
  strcpy((char *)v25 + v23, ".Error");
  *(_WORD *)&v294[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v295) = 0;
  v29 = v283;
  if ((unint64_t)v283 >= v284)
  {
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v292) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v30 = v290;
  *((_DWORD *)v283 + 2) = DWORD2(v290);
  *(_QWORD *)v29 = v30;
  v31 = v291;
  *((_QWORD *)v29 + 4) = v292;
  *((_OWORD *)v29 + 1) = v31;
  v292 = 0;
  v291 = 0uLL;
  v32 = *(_QWORD *)v294;
  *(_OWORD *)(v29 + 40) = __p;
  *((_QWORD *)v29 + 7) = v32;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v33 = *(_OWORD *)&v294[8];
  *((_QWORD *)v29 + 10) = v295;
  *((_OWORD *)v29 + 4) = v33;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v29 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v292) < 0)
  {
LABEL_76:
    operator delete((void *)v291);
    v34 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v34)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v34 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v34)
  {
LABEL_85:
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v38 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v35 = std::__shared_weak_count::lock(v34);
  *((_QWORD *)&v290 + 1) = v35;
  if (!v35)
    goto LABEL_85;
  v36 = v35;
  v37 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v290 = v37;
  if (v37)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v37 + 24))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v40 = __ldaxr(p_shared_owners);
  while (__stlxr(v40 - 1, p_shared_owners));
  if (v40)
  {
    v38 = v285;
    v41 = v286;
    if (v285 == v286)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v38 = v285;
    v41 = v286;
    if (v285 == v286)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v290 = v6;
    *((_QWORD *)&v290 + 1) = *v38;
    v292 = 0;
    v291 = 0uLL;
    v43 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v42 = v291;
      *((_QWORD *)v43 + 4) = v292;
      *((_OWORD *)v43 + 1) = v42;
      v280 = v43 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v38;
  }
  while (v38 != v41);
  v38 = v285;
LABEL_100:
  if (v38)
  {
    v286 = v38;
    operator delete(v38);
  }
  v44 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v44 || (v45 = std::__shared_weak_count::lock(v44), (*((_QWORD *)&v290 + 1) = v45) == 0))
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v48 = 0;
    goto LABEL_121;
  }
  v46 = v45;
  v47 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v290 = v47;
  if (v47)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v47 + 32))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v49 = (unint64_t *)&v46->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
    v48 = v285;
    v51 = v286;
    if (v285 == v286)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v48 = v285;
    v51 = v286;
    if (v285 == v286)
      goto LABEL_121;
  }
  v52 = v6 + 1;
  do
  {
    *(_QWORD *)&v290 = v52;
    *((_QWORD *)&v290 + 1) = *v48;
    v292 = 0;
    v291 = 0uLL;
    v54 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v53 = v291;
      *((_QWORD *)v54 + 4) = v292;
      *((_OWORD *)v54 + 1) = v53;
      v280 = v54 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v48;
  }
  while (v48 != v51);
  v48 = v285;
LABEL_121:
  if (v48)
  {
    v286 = v48;
    operator delete(v48);
  }
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v299) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v296);
  if (SHIBYTE(v299) < 0)
    goto LABEL_130;
LABEL_126:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_127:
    __dst = *(_OWORD *)(v4 + 176);
    v299 = *(_QWORD *)(v4 + 192);
    goto LABEL_132;
  }
LABEL_131:
  sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_132:
  v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v296, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v296 = xmmword_254A5C2A8;
    v297 = unk_254A5C2B8;
  }
  v56 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v57 = &v296;
  }
  else
  {
    v56 = *((_QWORD *)&v296 + 1);
    v57 = (__int128 *)v296;
  }
  if (v56 >= 4)
  {
    v58 = (char *)v57 + v56;
    v59 = v57;
    do
    {
      v60 = (char *)memchr(v59, 118, v56 - 3);
      if (!v60)
        break;
      if (*(_DWORD *)v60 == 1684631414)
      {
        if (v60 == v58 || v60 - (char *)v57 == -1)
          break;
        *(_QWORD *)&v290 = v55;
        DWORD2(v290) = 4;
        if (SHIBYTE(v299) < 0)
        {
          sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v291 = __dst;
          v292 = v299;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v294 = *(_QWORD *)(v4 + 216);
        }
        sub_20EBE7350();
        if (byte_254A5C40F < 0)
        {
          sub_20E860C04(&v294[8], (void *)xmmword_254A5C3F8, *((unint64_t *)&xmmword_254A5C3F8 + 1));
        }
        else
        {
          *(_OWORD *)&v294[8] = xmmword_254A5C3F8;
          v295 = unk_254A5C408;
        }
        v61 = v283;
        if ((unint64_t)v283 < v284)
          goto LABEL_158;
        goto LABEL_161;
      }
      v59 = (__int128 *)(v60 + 1);
      v56 = v58 - (char *)v59;
    }
    while (v58 - (char *)v59 >= 4);
  }
  *(_QWORD *)&v290 = v55;
  DWORD2(v290) = 2;
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v291 = __dst;
    v292 = v299;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v294 = *(_QWORD *)(v4 + 216);
  }
  sub_20EBE7350();
  if (byte_254A5C40F < 0)
  {
    sub_20E860C04(&v294[8], (void *)xmmword_254A5C3F8, *((unint64_t *)&xmmword_254A5C3F8 + 1));
  }
  else
  {
    *(_OWORD *)&v294[8] = xmmword_254A5C3F8;
    v295 = unk_254A5C408;
  }
  v61 = v283;
  if ((unint64_t)v283 >= v284)
  {
LABEL_161:
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_163;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
LABEL_159:
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_160;
  }
LABEL_158:
  v62 = v290;
  *((_DWORD *)v61 + 2) = DWORD2(v290);
  *(_QWORD *)v61 = v62;
  v63 = v291;
  *((_QWORD *)v61 + 4) = v292;
  *((_OWORD *)v61 + 1) = v63;
  v292 = 0;
  v291 = 0uLL;
  v64 = *(_QWORD *)v294;
  *(_OWORD *)(v61 + 40) = __p;
  *((_QWORD *)v61 + 7) = v64;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v65 = *(_OWORD *)&v294[8];
  *((_QWORD *)v61 + 10) = v295;
  *((_OWORD *)v61 + 4) = v65;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v61 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_159;
LABEL_163:
  if (SHIBYTE(v292) < 0)
LABEL_160:
    operator delete((void *)v291);
LABEL_164:
  v66 = sub_20EBA4AA4();
  if (*((char *)v66 + 23) < 0)
  {
    sub_20E860C04(v288, (void *)*v66, v66[1]);
  }
  else
  {
    v67 = *(_OWORD *)v66;
    v289 = v66[2];
    *(_OWORD *)v288 = v67;
  }
  v68 = HIBYTE(v289);
  if (v289 >= 0)
  {
    v69 = v288;
  }
  else
  {
    v68 = (uint64_t)v288[1];
    v69 = (void **)v288[0];
  }
  if (v68 >= 18)
  {
    v70 = (char *)v69 + v68;
    v71 = v69;
    do
    {
      v72 = (char *)memchr(v71, 67, v68 - 17);
      if (!v72)
        break;
      if (*(_QWORD *)v72 == 0x456C656E6E616843
        && *((_QWORD *)v72 + 1) == 0x696F763C726F7272
        && *((_WORD *)v72 + 8) == 15972)
      {
        if (v72 != v70 && v72 - (char *)v69 != -1)
          goto LABEL_208;
        break;
      }
      v71 = (void **)(v72 + 1);
      v68 = v70 - (char *)v71;
    }
    while (v70 - (char *)v71 >= 18);
  }
  *(_QWORD *)&v290 = v55 + 1;
  DWORD2(v290) = 3;
  v75 = SHIBYTE(v299);
  if (v299 >= 0)
    v76 = HIBYTE(v299);
  else
    v76 = *((_QWORD *)&__dst + 1);
  v77 = v76 + 6;
  if (v76 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v77 >= 0x17)
  {
    v79 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v77 | 7) != 0x17)
      v79 = v77 | 7;
    v80 = v79 + 1;
    v78 = (__int128 *)operator new(v79 + 1);
    *((_QWORD *)&v291 + 1) = v76 + 6;
    v292 = v80 | 0x8000000000000000;
    *(_QWORD *)&v291 = v78;
  }
  else
  {
    v292 = 0;
    v291 = 0uLL;
    v78 = &v291;
    HIBYTE(v292) = v76 + 6;
    if (!v76)
      goto LABEL_200;
  }
  if (v75 >= 0)
    v81 = &__dst;
  else
    v81 = (__int128 *)__dst;
  memmove(v78, v81, v76);
LABEL_200:
  strcpy((char *)v78 + v76, ".Error");
  *(_WORD *)&v294[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v295) = 0;
  v82 = v283;
  if ((unint64_t)v283 >= v284)
  {
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_207;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_207;
    }
LABEL_202:
    operator delete((void *)__p);
    if (SHIBYTE(v292) < 0)
      goto LABEL_203;
    goto LABEL_208;
  }
  v83 = v290;
  *((_DWORD *)v283 + 2) = DWORD2(v290);
  *(_QWORD *)v82 = v83;
  v84 = v291;
  *((_QWORD *)v82 + 4) = v292;
  *((_OWORD *)v82 + 1) = v84;
  v292 = 0;
  v291 = 0uLL;
  v85 = *(_QWORD *)v294;
  *(_OWORD *)(v82 + 40) = __p;
  *((_QWORD *)v82 + 7) = v85;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v86 = *(_OWORD *)&v294[8];
  *((_QWORD *)v82 + 10) = v295;
  *((_OWORD *)v82 + 4) = v86;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v82 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_202;
LABEL_207:
  if (SHIBYTE(v292) < 0)
  {
LABEL_203:
    operator delete((void *)v291);
    v87 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v87)
      goto LABEL_212;
    goto LABEL_209;
  }
LABEL_208:
  v87 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v87)
  {
LABEL_212:
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v91 = 0;
    goto LABEL_229;
  }
LABEL_209:
  v88 = std::__shared_weak_count::lock(v87);
  *((_QWORD *)&v290 + 1) = v88;
  if (!v88)
    goto LABEL_212;
  v89 = v88;
  v90 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v290 = v90;
  if (v90)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v90 + 24))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v92 = (unint64_t *)&v89->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (v93)
  {
    v91 = v285;
    v94 = v286;
    if (v285 == v286)
      goto LABEL_229;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v91 = v285;
    v94 = v286;
    if (v285 == v286)
      goto LABEL_229;
  }
  do
  {
    *(_QWORD *)&v290 = v55;
    *((_QWORD *)&v290 + 1) = *v91;
    v292 = 0;
    v291 = 0uLL;
    v96 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v95 = v291;
      *((_QWORD *)v96 + 4) = v292;
      *((_OWORD *)v96 + 1) = v95;
      v280 = v96 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v91;
  }
  while (v91 != v94);
  v91 = v285;
LABEL_229:
  if (v91)
  {
    v286 = v91;
    operator delete(v91);
  }
  v97 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v97 || (v98 = std::__shared_weak_count::lock(v97), (*((_QWORD *)&v290 + 1) = v98) == 0))
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v101 = 0;
    goto LABEL_250;
  }
  v99 = v98;
  v100 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v290 = v100;
  if (v100)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v100 + 32))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v102 = (unint64_t *)&v99->__shared_owners_;
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (v103)
  {
    v101 = v285;
    v104 = v286;
    if (v285 == v286)
      goto LABEL_250;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    v101 = v285;
    v104 = v286;
    if (v285 == v286)
      goto LABEL_250;
  }
  v105 = v55 + 1;
  do
  {
    *(_QWORD *)&v290 = v105;
    *((_QWORD *)&v290 + 1) = *v101;
    v292 = 0;
    v291 = 0uLL;
    v107 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v106 = v291;
      *((_QWORD *)v107 + 4) = v292;
      *((_OWORD *)v107 + 1) = v106;
      v280 = v107 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v101;
  }
  while (v101 != v104);
  v101 = v285;
LABEL_250:
  if (v101)
  {
    v286 = v101;
    operator delete(v101);
  }
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
    {
LABEL_254:
      if ((SHIBYTE(v299) & 0x80000000) == 0)
        goto LABEL_255;
LABEL_259:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_256;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete((void *)v296);
  if (SHIBYTE(v299) < 0)
    goto LABEL_259;
LABEL_255:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_256:
    __dst = *(_OWORD *)(v4 + 344);
    v299 = *(_QWORD *)(v4 + 360);
    goto LABEL_261;
  }
LABEL_260:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_261:
  v108 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v296, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v296 = xmmword_254A5C2A8;
    v297 = unk_254A5C2B8;
  }
  v109 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v110 = &v296;
  }
  else
  {
    v109 = *((_QWORD *)&v296 + 1);
    v110 = (__int128 *)v296;
  }
  if (v109 >= 4)
  {
    v111 = (char *)v110 + v109;
    v112 = v110;
    do
    {
      v113 = (char *)memchr(v112, 118, v109 - 3);
      if (!v113)
        break;
      if (*(_DWORD *)v113 == 1684631414)
      {
        if (v113 == v111 || v113 - (char *)v110 == -1)
          break;
        *(_QWORD *)&v290 = v108;
        DWORD2(v290) = 4;
        if (SHIBYTE(v299) < 0)
        {
          sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v291 = __dst;
          v292 = v299;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v294 = *(_QWORD *)(v4 + 384);
        }
        sub_20EBE7508();
        if (byte_254A5C457 < 0)
        {
          sub_20E860C04(&v294[8], (void *)xmmword_254A5C440, *((unint64_t *)&xmmword_254A5C440 + 1));
        }
        else
        {
          *(_OWORD *)&v294[8] = xmmword_254A5C440;
          v295 = unk_254A5C450;
        }
        v114 = v283;
        if ((unint64_t)v283 < v284)
          goto LABEL_287;
        goto LABEL_290;
      }
      v112 = (__int128 *)(v113 + 1);
      v109 = v111 - (char *)v112;
    }
    while (v111 - (char *)v112 >= 4);
  }
  *(_QWORD *)&v290 = v108;
  DWORD2(v290) = 2;
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v291 = __dst;
    v292 = v299;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v294 = *(_QWORD *)(v4 + 384);
  }
  sub_20EBE7508();
  if (byte_254A5C457 < 0)
  {
    sub_20E860C04(&v294[8], (void *)xmmword_254A5C440, *((unint64_t *)&xmmword_254A5C440 + 1));
  }
  else
  {
    *(_OWORD *)&v294[8] = xmmword_254A5C440;
    v295 = unk_254A5C450;
  }
  v114 = v283;
  if ((unint64_t)v283 >= v284)
  {
LABEL_290:
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_292;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
LABEL_288:
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_289;
  }
LABEL_287:
  v115 = v290;
  *((_DWORD *)v114 + 2) = DWORD2(v290);
  *(_QWORD *)v114 = v115;
  v116 = v291;
  *((_QWORD *)v114 + 4) = v292;
  *((_OWORD *)v114 + 1) = v116;
  v292 = 0;
  v291 = 0uLL;
  v117 = *(_QWORD *)v294;
  *(_OWORD *)(v114 + 40) = __p;
  *((_QWORD *)v114 + 7) = v117;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v118 = *(_OWORD *)&v294[8];
  *((_QWORD *)v114 + 10) = v295;
  *((_OWORD *)v114 + 4) = v118;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v114 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_288;
LABEL_292:
  if (SHIBYTE(v292) < 0)
LABEL_289:
    operator delete((void *)v291);
LABEL_293:
  v119 = sub_20EBA4AA4();
  if (*((char *)v119 + 23) < 0)
  {
    sub_20E860C04(v288, (void *)*v119, v119[1]);
  }
  else
  {
    v120 = *(_OWORD *)v119;
    v289 = v119[2];
    *(_OWORD *)v288 = v120;
  }
  v121 = HIBYTE(v289);
  if (v289 >= 0)
  {
    v122 = v288;
  }
  else
  {
    v121 = (uint64_t)v288[1];
    v122 = (void **)v288[0];
  }
  if (v121 >= 18)
  {
    v123 = (char *)v122 + v121;
    v124 = v122;
    do
    {
      v125 = (char *)memchr(v124, 67, v121 - 17);
      if (!v125)
        break;
      if (*(_QWORD *)v125 == 0x456C656E6E616843
        && *((_QWORD *)v125 + 1) == 0x696F763C726F7272
        && *((_WORD *)v125 + 8) == 15972)
      {
        if (v125 != v123 && v125 - (char *)v122 != -1)
          goto LABEL_337;
        break;
      }
      v124 = (void **)(v125 + 1);
      v121 = v123 - (char *)v124;
    }
    while (v123 - (char *)v124 >= 18);
  }
  *(_QWORD *)&v290 = v108 + 1;
  DWORD2(v290) = 3;
  v128 = SHIBYTE(v299);
  if (v299 >= 0)
    v129 = HIBYTE(v299);
  else
    v129 = *((_QWORD *)&__dst + 1);
  v130 = v129 + 6;
  if (v129 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v130 >= 0x17)
  {
    v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v132 = v130 | 7;
    v133 = v132 + 1;
    v131 = (__int128 *)operator new(v132 + 1);
    *((_QWORD *)&v291 + 1) = v129 + 6;
    v292 = v133 | 0x8000000000000000;
    *(_QWORD *)&v291 = v131;
  }
  else
  {
    v292 = 0;
    v291 = 0uLL;
    v131 = &v291;
    HIBYTE(v292) = v129 + 6;
    if (!v129)
      goto LABEL_329;
  }
  if (v128 >= 0)
    v134 = &__dst;
  else
    v134 = (__int128 *)__dst;
  memmove(v131, v134, v129);
LABEL_329:
  strcpy((char *)v131 + v129, ".Error");
  *(_WORD *)&v294[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v295) = 0;
  v135 = v283;
  if ((unint64_t)v283 >= v284)
  {
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v292) < 0)
      goto LABEL_332;
    goto LABEL_337;
  }
  v136 = v290;
  *((_DWORD *)v283 + 2) = DWORD2(v290);
  *(_QWORD *)v135 = v136;
  v137 = v291;
  *((_QWORD *)v135 + 4) = v292;
  *((_OWORD *)v135 + 1) = v137;
  v292 = 0;
  v291 = 0uLL;
  v138 = *(_QWORD *)v294;
  *(_OWORD *)(v135 + 40) = __p;
  *((_QWORD *)v135 + 7) = v138;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v139 = *(_OWORD *)&v294[8];
  *((_QWORD *)v135 + 10) = v295;
  *((_OWORD *)v135 + 4) = v139;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v135 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_331;
LABEL_336:
  if (SHIBYTE(v292) < 0)
  {
LABEL_332:
    operator delete((void *)v291);
    v140 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v140)
      goto LABEL_341;
    goto LABEL_338;
  }
LABEL_337:
  v140 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v140)
  {
LABEL_341:
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v144 = 0;
    goto LABEL_358;
  }
LABEL_338:
  v141 = std::__shared_weak_count::lock(v140);
  *((_QWORD *)&v290 + 1) = v141;
  if (!v141)
    goto LABEL_341;
  v142 = v141;
  v143 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v290 = v143;
  if (v143)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v143 + 24))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v145 = (unint64_t *)&v142->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
    v144 = v285;
    v147 = v286;
    if (v285 == v286)
      goto LABEL_358;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
    std::__shared_weak_count::__release_weak(v142);
    v144 = v285;
    v147 = v286;
    if (v285 == v286)
      goto LABEL_358;
  }
  do
  {
    *(_QWORD *)&v290 = v108;
    *((_QWORD *)&v290 + 1) = *v144;
    v292 = 0;
    v291 = 0uLL;
    v149 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v148 = v291;
      *((_QWORD *)v149 + 4) = v292;
      *((_OWORD *)v149 + 1) = v148;
      v280 = v149 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v144;
  }
  while (v144 != v147);
  v144 = v285;
LABEL_358:
  if (v144)
  {
    v286 = v144;
    operator delete(v144);
  }
  v150 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v150 || (v151 = std::__shared_weak_count::lock(v150), (*((_QWORD *)&v290 + 1) = v151) == 0))
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v154 = 0;
    goto LABEL_379;
  }
  v152 = v151;
  v153 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v290 = v153;
  if (v153)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v153 + 32))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v155 = (unint64_t *)&v152->__shared_owners_;
  do
    v156 = __ldaxr(v155);
  while (__stlxr(v156 - 1, v155));
  if (v156)
  {
    v154 = v285;
    v157 = v286;
    if (v285 == v286)
      goto LABEL_379;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    v154 = v285;
    v157 = v286;
    if (v285 == v286)
      goto LABEL_379;
  }
  v158 = v108 + 1;
  do
  {
    *(_QWORD *)&v290 = v158;
    *((_QWORD *)&v290 + 1) = *v154;
    v292 = 0;
    v291 = 0uLL;
    v160 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v159 = v291;
      *((_QWORD *)v160 + 4) = v292;
      *((_OWORD *)v160 + 1) = v159;
      v280 = v160 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v154;
  }
  while (v154 != v157);
  v154 = v285;
LABEL_379:
  if (v154)
  {
    v286 = v154;
    operator delete(v154);
  }
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v299) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_389;
    }
  }
  else if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    goto LABEL_383;
  }
  operator delete((void *)v296);
  if (SHIBYTE(v299) < 0)
    goto LABEL_388;
LABEL_384:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_385:
    __dst = *(_OWORD *)(v4 + 512);
    v299 = *(_QWORD *)(v4 + 528);
    goto LABEL_390;
  }
LABEL_389:
  sub_20E860C04(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_390:
  v161 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v296, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v296 = xmmword_254A5C2A8;
    v297 = unk_254A5C2B8;
  }
  v162 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v163 = &v296;
  }
  else
  {
    v162 = *((_QWORD *)&v296 + 1);
    v163 = (__int128 *)v296;
  }
  if (v162 >= 4)
  {
    v164 = (char *)v163 + v162;
    v165 = v163;
    do
    {
      v166 = (char *)memchr(v165, 118, v162 - 3);
      if (!v166)
        break;
      if (*(_DWORD *)v166 == 1684631414)
      {
        if (v166 == v164 || v166 - (char *)v163 == -1)
          break;
        *(_QWORD *)&v290 = v161;
        DWORD2(v290) = 4;
        if (SHIBYTE(v299) < 0)
        {
          sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v291 = __dst;
          v292 = v299;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v294 = *(_QWORD *)(v4 + 552);
        }
        sub_20EBE76C0();
        if (byte_254A5C49F < 0)
        {
          sub_20E860C04(&v294[8], (void *)xmmword_254A5C488, *((unint64_t *)&xmmword_254A5C488 + 1));
        }
        else
        {
          *(_OWORD *)&v294[8] = xmmword_254A5C488;
          v295 = unk_254A5C498;
        }
        v167 = v283;
        if ((unint64_t)v283 < v284)
          goto LABEL_416;
        goto LABEL_419;
      }
      v165 = (__int128 *)(v166 + 1);
      v162 = v164 - (char *)v165;
    }
    while (v164 - (char *)v165 >= 4);
  }
  *(_QWORD *)&v290 = v161;
  DWORD2(v290) = 2;
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v291 = __dst;
    v292 = v299;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v294 = *(_QWORD *)(v4 + 552);
  }
  sub_20EBE76C0();
  if (byte_254A5C49F < 0)
  {
    sub_20E860C04(&v294[8], (void *)xmmword_254A5C488, *((unint64_t *)&xmmword_254A5C488 + 1));
  }
  else
  {
    *(_OWORD *)&v294[8] = xmmword_254A5C488;
    v295 = unk_254A5C498;
  }
  v167 = v283;
  if ((unint64_t)v283 >= v284)
  {
LABEL_419:
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_421;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_421;
    }
LABEL_417:
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
      goto LABEL_422;
    goto LABEL_418;
  }
LABEL_416:
  v168 = v290;
  *((_DWORD *)v167 + 2) = DWORD2(v290);
  *(_QWORD *)v167 = v168;
  v169 = v291;
  *((_QWORD *)v167 + 4) = v292;
  *((_OWORD *)v167 + 1) = v169;
  v292 = 0;
  v291 = 0uLL;
  v170 = *(_QWORD *)v294;
  *(_OWORD *)(v167 + 40) = __p;
  *((_QWORD *)v167 + 7) = v170;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v171 = *(_OWORD *)&v294[8];
  *((_QWORD *)v167 + 10) = v295;
  *((_OWORD *)v167 + 4) = v171;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v167 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_417;
LABEL_421:
  if (SHIBYTE(v292) < 0)
LABEL_418:
    operator delete((void *)v291);
LABEL_422:
  v172 = sub_20EBA4AA4();
  if (*((char *)v172 + 23) < 0)
  {
    sub_20E860C04(v288, (void *)*v172, v172[1]);
  }
  else
  {
    v173 = *(_OWORD *)v172;
    v289 = v172[2];
    *(_OWORD *)v288 = v173;
  }
  v174 = HIBYTE(v289);
  if (v289 >= 0)
  {
    v175 = v288;
  }
  else
  {
    v174 = (uint64_t)v288[1];
    v175 = (void **)v288[0];
  }
  if (v174 >= 18)
  {
    v176 = (char *)v175 + v174;
    v177 = v175;
    do
    {
      v178 = (char *)memchr(v177, 67, v174 - 17);
      if (!v178)
        break;
      if (*(_QWORD *)v178 == 0x456C656E6E616843
        && *((_QWORD *)v178 + 1) == 0x696F763C726F7272
        && *((_WORD *)v178 + 8) == 15972)
      {
        if (v178 != v176 && v178 - (char *)v175 != -1)
          goto LABEL_466;
        break;
      }
      v177 = (void **)(v178 + 1);
      v174 = v176 - (char *)v177;
    }
    while (v176 - (char *)v177 >= 18);
  }
  *(_QWORD *)&v290 = v161 + 1;
  DWORD2(v290) = 3;
  v181 = SHIBYTE(v299);
  if (v299 >= 0)
    v182 = HIBYTE(v299);
  else
    v182 = *((_QWORD *)&__dst + 1);
  v183 = v182 + 6;
  if (v182 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v183 >= 0x17)
  {
    v185 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v183 | 7) != 0x17)
      v185 = v183 | 7;
    v186 = v185 + 1;
    v184 = (__int128 *)operator new(v185 + 1);
    *((_QWORD *)&v291 + 1) = v182 + 6;
    v292 = v186 | 0x8000000000000000;
    *(_QWORD *)&v291 = v184;
  }
  else
  {
    v292 = 0;
    v291 = 0uLL;
    v184 = &v291;
    HIBYTE(v292) = v182 + 6;
    if (!v182)
      goto LABEL_458;
  }
  if (v181 >= 0)
    v187 = &__dst;
  else
    v187 = (__int128 *)__dst;
  memmove(v184, v187, v182);
LABEL_458:
  strcpy((char *)v184 + v182, ".Error");
  *(_WORD *)&v294[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v295) = 0;
  v188 = v283;
  if ((unint64_t)v283 >= v284)
  {
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_465;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_465;
    }
LABEL_460:
    operator delete((void *)__p);
    if (SHIBYTE(v292) < 0)
      goto LABEL_461;
    goto LABEL_466;
  }
  v189 = v290;
  *((_DWORD *)v283 + 2) = DWORD2(v290);
  *(_QWORD *)v188 = v189;
  v190 = v291;
  *((_QWORD *)v188 + 4) = v292;
  *((_OWORD *)v188 + 1) = v190;
  v292 = 0;
  v291 = 0uLL;
  v191 = *(_QWORD *)v294;
  *(_OWORD *)(v188 + 40) = __p;
  *((_QWORD *)v188 + 7) = v191;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v192 = *(_OWORD *)&v294[8];
  *((_QWORD *)v188 + 10) = v295;
  *((_OWORD *)v188 + 4) = v192;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v188 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_460;
LABEL_465:
  if (SHIBYTE(v292) < 0)
  {
LABEL_461:
    operator delete((void *)v291);
    v193 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v193)
      goto LABEL_470;
    goto LABEL_467;
  }
LABEL_466:
  v193 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v193)
  {
LABEL_470:
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v197 = 0;
    goto LABEL_487;
  }
LABEL_467:
  v194 = std::__shared_weak_count::lock(v193);
  *((_QWORD *)&v290 + 1) = v194;
  if (!v194)
    goto LABEL_470;
  v195 = v194;
  v196 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v290 = v196;
  if (v196)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v196 + 24))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v198 = (unint64_t *)&v195->__shared_owners_;
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 - 1, v198));
  if (v199)
  {
    v197 = v285;
    v200 = v286;
    if (v285 == v286)
      goto LABEL_487;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
    std::__shared_weak_count::__release_weak(v195);
    v197 = v285;
    v200 = v286;
    if (v285 == v286)
      goto LABEL_487;
  }
  do
  {
    *(_QWORD *)&v290 = v161;
    *((_QWORD *)&v290 + 1) = *v197;
    v292 = 0;
    v291 = 0uLL;
    v202 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v201 = v291;
      *((_QWORD *)v202 + 4) = v292;
      *((_OWORD *)v202 + 1) = v201;
      v280 = v202 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v197;
  }
  while (v197 != v200);
  v197 = v285;
LABEL_487:
  if (v197)
  {
    v286 = v197;
    operator delete(v197);
  }
  v203 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v203 || (v204 = std::__shared_weak_count::lock(v203), (*((_QWORD *)&v290 + 1) = v204) == 0))
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v207 = 0;
    goto LABEL_508;
  }
  v205 = v204;
  v206 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v290 = v206;
  if (v206)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v206 + 32))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v208 = (unint64_t *)&v205->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (v209)
  {
    v207 = v285;
    v210 = v286;
    if (v285 == v286)
      goto LABEL_508;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
    std::__shared_weak_count::__release_weak(v205);
    v207 = v285;
    v210 = v286;
    if (v285 == v286)
      goto LABEL_508;
  }
  v211 = v161 + 1;
  do
  {
    *(_QWORD *)&v290 = v211;
    *((_QWORD *)&v290 + 1) = *v207;
    v292 = 0;
    v291 = 0uLL;
    v213 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v212 = v291;
      *((_QWORD *)v213 + 4) = v292;
      *((_OWORD *)v213 + 1) = v212;
      v280 = v213 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v207;
  }
  while (v207 != v210);
  v207 = v285;
LABEL_508:
  if (v207)
  {
    v286 = v207;
    operator delete(v207);
  }
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
    {
LABEL_512:
      if ((SHIBYTE(v299) & 0x80000000) == 0)
        goto LABEL_513;
LABEL_517:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_514;
      goto LABEL_518;
    }
  }
  else if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    goto LABEL_512;
  }
  operator delete((void *)v296);
  if (SHIBYTE(v299) < 0)
    goto LABEL_517;
LABEL_513:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_514:
    __dst = *(_OWORD *)(v4 + 680);
    v299 = *(_QWORD *)(v4 + 696);
    goto LABEL_519;
  }
LABEL_518:
  sub_20E860C04(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_519:
  v214 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v296, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v296 = xmmword_254A5C2A8;
    v297 = unk_254A5C2B8;
  }
  v215 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v216 = &v296;
  }
  else
  {
    v215 = *((_QWORD *)&v296 + 1);
    v216 = (__int128 *)v296;
  }
  if (v215 >= 4)
  {
    v217 = (char *)v216 + v215;
    v218 = v216;
    do
    {
      v219 = (char *)memchr(v218, 118, v215 - 3);
      if (!v219)
        break;
      if (*(_DWORD *)v219 == 1684631414)
      {
        if (v219 == v217 || v219 - (char *)v216 == -1)
          break;
        *(_QWORD *)&v290 = v214;
        DWORD2(v290) = 4;
        if (SHIBYTE(v299) < 0)
        {
          sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v291 = __dst;
          v292 = v299;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v294 = *(_QWORD *)(v4 + 720);
        }
        sub_20EBE7878();
        if (byte_254A5C4E7 < 0)
        {
          sub_20E860C04(&v294[8], (void *)xmmword_254A5C4D0, *((unint64_t *)&xmmword_254A5C4D0 + 1));
        }
        else
        {
          *(_OWORD *)&v294[8] = xmmword_254A5C4D0;
          v295 = unk_254A5C4E0;
        }
        v220 = v283;
        if ((unint64_t)v283 < v284)
          goto LABEL_545;
        goto LABEL_548;
      }
      v218 = (__int128 *)(v219 + 1);
      v215 = v217 - (char *)v218;
    }
    while (v217 - (char *)v218 >= 4);
  }
  *(_QWORD *)&v290 = v214;
  DWORD2(v290) = 2;
  if (SHIBYTE(v299) < 0)
  {
    sub_20E860C04(&v291, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v291 = __dst;
    v292 = v299;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v294 = *(_QWORD *)(v4 + 720);
  }
  sub_20EBE7878();
  if (byte_254A5C4E7 < 0)
  {
    sub_20E860C04(&v294[8], (void *)xmmword_254A5C4D0, *((unint64_t *)&xmmword_254A5C4D0 + 1));
  }
  else
  {
    *(_OWORD *)&v294[8] = xmmword_254A5C4D0;
    v295 = unk_254A5C4E0;
  }
  v220 = v283;
  if ((unint64_t)v283 >= v284)
  {
LABEL_548:
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_550;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_550;
    }
LABEL_546:
    operator delete((void *)__p);
    if ((SHIBYTE(v292) & 0x80000000) == 0)
      goto LABEL_551;
    goto LABEL_547;
  }
LABEL_545:
  v221 = v290;
  *((_DWORD *)v220 + 2) = DWORD2(v290);
  *(_QWORD *)v220 = v221;
  v222 = v291;
  *((_QWORD *)v220 + 4) = v292;
  *((_OWORD *)v220 + 1) = v222;
  v292 = 0;
  v291 = 0uLL;
  v223 = *(_QWORD *)v294;
  *(_OWORD *)(v220 + 40) = __p;
  *((_QWORD *)v220 + 7) = v223;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v224 = *(_OWORD *)&v294[8];
  *((_QWORD *)v220 + 10) = v295;
  *((_OWORD *)v220 + 4) = v224;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v220 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_546;
LABEL_550:
  if (SHIBYTE(v292) < 0)
LABEL_547:
    operator delete((void *)v291);
LABEL_551:
  v225 = sub_20EBA4AA4();
  if (*((char *)v225 + 23) < 0)
  {
    sub_20E860C04(v288, (void *)*v225, v225[1]);
  }
  else
  {
    v226 = *(_OWORD *)v225;
    v289 = v225[2];
    *(_OWORD *)v288 = v226;
  }
  v227 = HIBYTE(v289);
  if (v289 >= 0)
  {
    v228 = v288;
  }
  else
  {
    v227 = (uint64_t)v288[1];
    v228 = (void **)v288[0];
  }
  if (v227 >= 18)
  {
    v229 = (char *)v228 + v227;
    v230 = v228;
    do
    {
      v231 = (char *)memchr(v230, 67, v227 - 17);
      if (!v231)
        break;
      if (*(_QWORD *)v231 == 0x456C656E6E616843
        && *((_QWORD *)v231 + 1) == 0x696F763C726F7272
        && *((_WORD *)v231 + 8) == 15972)
      {
        if (v231 != v229 && v231 - (char *)v228 != -1)
          goto LABEL_595;
        break;
      }
      v230 = (void **)(v231 + 1);
      v227 = v229 - (char *)v230;
    }
    while (v229 - (char *)v230 >= 18);
  }
  *(_QWORD *)&v290 = v214 + 1;
  DWORD2(v290) = 3;
  v234 = SHIBYTE(v299);
  if (v299 >= 0)
    v235 = HIBYTE(v299);
  else
    v235 = *((_QWORD *)&__dst + 1);
  v236 = v235 + 6;
  if (v235 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v236 >= 0x17)
  {
    v238 = (v236 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v236 | 7) != 0x17)
      v238 = v236 | 7;
    v239 = v238 + 1;
    v237 = (__int128 *)operator new(v238 + 1);
    *((_QWORD *)&v291 + 1) = v235 + 6;
    v292 = v239 | 0x8000000000000000;
    *(_QWORD *)&v291 = v237;
  }
  else
  {
    v292 = 0;
    v291 = 0uLL;
    v237 = &v291;
    HIBYTE(v292) = v235 + 6;
    if (!v235)
      goto LABEL_587;
  }
  if (v234 >= 0)
    v240 = &__dst;
  else
    v240 = (__int128 *)__dst;
  memmove(v237, v240, v235);
LABEL_587:
  strcpy((char *)v237 + v235, ".Error");
  *(_WORD *)&v294[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v295) = 0;
  v241 = v283;
  if ((unint64_t)v283 >= v284)
  {
    v283 = sub_20EBA558C((char **)&v282, (uint64_t)&v290);
    if (SHIBYTE(v295) < 0)
    {
      operator delete(*(void **)&v294[8]);
      if ((v294[7] & 0x80000000) == 0)
        goto LABEL_594;
    }
    else if ((v294[7] & 0x80000000) == 0)
    {
      goto LABEL_594;
    }
LABEL_589:
    operator delete((void *)__p);
    if (SHIBYTE(v292) < 0)
      goto LABEL_590;
    goto LABEL_595;
  }
  v242 = v290;
  *((_DWORD *)v283 + 2) = DWORD2(v290);
  *(_QWORD *)v241 = v242;
  v243 = v291;
  *((_QWORD *)v241 + 4) = v292;
  *((_OWORD *)v241 + 1) = v243;
  v292 = 0;
  v291 = 0uLL;
  v244 = *(_QWORD *)v294;
  *(_OWORD *)(v241 + 40) = __p;
  *((_QWORD *)v241 + 7) = v244;
  *(_QWORD *)v294 = 0;
  __p = 0uLL;
  v245 = *(_OWORD *)&v294[8];
  *((_QWORD *)v241 + 10) = v295;
  *((_OWORD *)v241 + 4) = v245;
  *(_QWORD *)&v294[8] = 0;
  *(_QWORD *)&v294[16] = 0;
  v295 = 0;
  v283 = v241 + 88;
  if ((v294[7] & 0x80000000) != 0)
    goto LABEL_589;
LABEL_594:
  if (SHIBYTE(v292) < 0)
  {
LABEL_590:
    operator delete((void *)v291);
    v246 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v246)
      goto LABEL_599;
    goto LABEL_596;
  }
LABEL_595:
  v246 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v246)
  {
LABEL_599:
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v250 = 0;
    goto LABEL_616;
  }
LABEL_596:
  v247 = std::__shared_weak_count::lock(v246);
  *((_QWORD *)&v290 + 1) = v247;
  if (!v247)
    goto LABEL_599;
  v248 = v247;
  v249 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v290 = v249;
  if (v249)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v249 + 24))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v251 = (unint64_t *)&v248->__shared_owners_;
  do
    v252 = __ldaxr(v251);
  while (__stlxr(v252 - 1, v251));
  if (v252)
  {
    v250 = v285;
    v253 = v286;
    if (v285 == v286)
      goto LABEL_616;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
    std::__shared_weak_count::__release_weak(v248);
    v250 = v285;
    v253 = v286;
    if (v285 == v286)
      goto LABEL_616;
  }
  do
  {
    *(_QWORD *)&v290 = v214;
    *((_QWORD *)&v290 + 1) = *v250;
    v292 = 0;
    v291 = 0uLL;
    v255 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v254 = v291;
      *((_QWORD *)v255 + 4) = v292;
      *((_OWORD *)v255 + 1) = v254;
      v280 = v255 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v250;
  }
  while (v250 != v253);
  v250 = v285;
LABEL_616:
  if (v250)
  {
    v286 = v250;
    operator delete(v250);
  }
  v256 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v256 || (v257 = std::__shared_weak_count::lock(v256), (*((_QWORD *)&v290 + 1) = v257) == 0))
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
    v260 = 0;
    goto LABEL_637;
  }
  v258 = v257;
  v259 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v290 = v259;
  if (v259)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v259 + 32))(&v285);
  }
  else
  {
    v285 = 0;
    v286 = 0;
    v287 = 0;
  }
  v261 = (unint64_t *)&v258->__shared_owners_;
  do
    v262 = __ldaxr(v261);
  while (__stlxr(v262 - 1, v261));
  if (v262)
  {
    v260 = v285;
    v263 = v286;
    if (v285 == v286)
      goto LABEL_637;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
    std::__shared_weak_count::__release_weak(v258);
    v260 = v285;
    v263 = v286;
    if (v285 == v286)
      goto LABEL_637;
  }
  do
  {
    *(_QWORD *)&v290 = v214 + 1;
    *((_QWORD *)&v290 + 1) = *v260;
    v292 = 0;
    v291 = 0uLL;
    v265 = v280;
    if ((unint64_t)v280 < v281)
    {
      *(_OWORD *)v280 = v290;
      v264 = v291;
      *((_QWORD *)v265 + 4) = v292;
      *((_OWORD *)v265 + 1) = v264;
      v280 = v265 + 40;
    }
    else
    {
      v280 = sub_20EBA5F8C(&v279, (uint64_t)&v290);
      if (SHIBYTE(v292) < 0)
        operator delete((void *)v291);
    }
    ++v260;
  }
  while (v260 != v263);
  v260 = v285;
LABEL_637:
  if (v260)
  {
    v286 = v260;
    operator delete(v260);
  }
  if (SHIBYTE(v289) < 0)
  {
    operator delete(v288[0]);
    if ((SHIBYTE(v297) & 0x80000000) == 0)
    {
LABEL_641:
      if ((SHIBYTE(v299) & 0x80000000) == 0)
        goto LABEL_642;
LABEL_646:
      operator delete((void *)__dst);
      if ((*(char *)(v273 + 31) & 0x80000000) == 0)
        goto LABEL_643;
      goto LABEL_647;
    }
  }
  else if ((SHIBYTE(v297) & 0x80000000) == 0)
  {
    goto LABEL_641;
  }
  operator delete((void *)v296);
  if (SHIBYTE(v299) < 0)
    goto LABEL_646;
LABEL_642:
  if ((*(char *)(v273 + 31) & 0x80000000) == 0)
  {
LABEL_643:
    *(_OWORD *)v277 = *(_OWORD *)(v273 + 8);
    v278 = *(_QWORD *)(v273 + 24);
    goto LABEL_648;
  }
LABEL_647:
  sub_20E860C04(v277, *(void **)(v273 + 8), *(_QWORD *)(v273 + 16));
LABEL_648:
  v266 = *(_QWORD *)(v273 + 56) != 0;
  if (*(char *)(v273 + 55) < 0)
  {
    sub_20E860C04(v275, *(void **)(v273 + 32), *(_QWORD *)(v273 + 40));
  }
  else
  {
    *(_OWORD *)v275 = *(_OWORD *)(v273 + 32);
    v276 = *(_QWORD *)(v273 + 48);
  }
  sub_20EBA690C(v274, (__int128 *)v277, v266, (uint64_t *)&v282, (uint64_t *)&v279, (__int128 *)v275);
  if (SHIBYTE(v276) < 0)
  {
    operator delete(v275[0]);
    if ((SHIBYTE(v278) & 0x80000000) == 0)
    {
LABEL_653:
      v267 = (char *)v279;
      if (v279)
        goto LABEL_654;
LABEL_664:
      v269 = (char *)v282;
      if (!v282)
        return;
LABEL_665:
      v270 = v283;
      v271 = v269;
      if (v283 == v269)
      {
LABEL_676:
        v283 = v269;
        operator delete(v271);
        return;
      }
      while (1)
      {
        while (*(v270 - 1) < 0)
        {
          operator delete(*((void **)v270 - 3));
          if (*(v270 - 25) < 0)
            goto LABEL_667;
LABEL_673:
          if ((*(v270 - 49) & 0x80000000) == 0)
            goto LABEL_668;
LABEL_674:
          operator delete(*((void **)v270 - 9));
          v270 -= 88;
          if (v270 == v269)
          {
LABEL_675:
            v271 = v282;
            goto LABEL_676;
          }
        }
        if ((*(v270 - 25) & 0x80000000) == 0)
          goto LABEL_673;
LABEL_667:
        operator delete(*((void **)v270 - 6));
        if (*(v270 - 49) < 0)
          goto LABEL_674;
LABEL_668:
        v270 -= 88;
        if (v270 == v269)
          goto LABEL_675;
      }
    }
  }
  else if ((SHIBYTE(v278) & 0x80000000) == 0)
  {
    goto LABEL_653;
  }
  operator delete(v277[0]);
  v267 = (char *)v279;
  if (!v279)
    goto LABEL_664;
LABEL_654:
  v268 = v280;
  if (v280 == v267)
  {
    v280 = v267;
    operator delete(v267);
    v269 = (char *)v282;
    if (!v282)
      return;
    goto LABEL_665;
  }
  do
  {
    if (*(v268 - 1) < 0)
      operator delete(*((void **)v268 - 3));
    v268 -= 40;
  }
  while (v268 != v267);
  v280 = v267;
  operator delete(v279);
  v269 = (char *)v282;
  if (v282)
    goto LABEL_665;
}

void sub_20EBE1E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

void sub_20EBE21A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  char *v19;
  void **v20;
  char *v21;
  int v24;
  size_t v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *p_dst;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD *v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  __int128 *v61;
  char *v62;
  __int128 *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t *v70;
  __int128 v71;
  uint64_t v72;
  void **v73;
  char *v74;
  void **v75;
  char *v76;
  int v79;
  size_t v80;
  unint64_t v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  __int128 v99;
  char *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  __int128 v114;
  uint64_t v115;
  __int128 *v116;
  char *v117;
  __int128 *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t *v125;
  __int128 v126;
  uint64_t v127;
  void **v128;
  char *v129;
  void **v130;
  char *v131;
  int v134;
  size_t v135;
  unint64_t v136;
  __int128 *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  __int128 v154;
  char *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t *v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  __int128 v165;
  char *v166;
  uint64_t v167;
  uint64_t *v168;
  __int128 v169;
  uint64_t v170;
  __int128 *v171;
  char *v172;
  __int128 *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  uint64_t *v180;
  __int128 v181;
  uint64_t v182;
  void **v183;
  char *v184;
  void **v185;
  char *v186;
  int v189;
  size_t v190;
  unint64_t v191;
  __int128 *v192;
  uint64_t v193;
  uint64_t v194;
  __int128 *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t *v206;
  unint64_t v207;
  _QWORD *v208;
  __int128 v209;
  char *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t *v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  __int128 v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  char *v225;
  __int128 *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  uint64_t *v233;
  __int128 v234;
  uint64_t v235;
  void **v236;
  char *v237;
  void **v238;
  char *v239;
  int v242;
  size_t v243;
  unint64_t v244;
  __int128 *v245;
  uint64_t v246;
  uint64_t v247;
  __int128 *v248;
  char *v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  __int128 v262;
  char *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count *v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  __int128 v272;
  char *v273;
  _BOOL4 v274;
  char *v275;
  char *v276;
  char *v277;
  char *v278;
  void *v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  void *v283[2];
  uint64_t v284;
  void *v285[2];
  uint64_t v286;
  void *v287;
  char *v288;
  unint64_t v289;
  void *v290;
  char *v291;
  unint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  void *v296[2];
  uint64_t v297;
  __int128 v298;
  __int128 v299;
  unint64_t v300;
  __int128 __p;
  _BYTE v302[24];
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  __int128 __dst;
  int64_t v307;

  v290 = 0;
  v291 = 0;
  v292 = 0;
  v287 = 0;
  v288 = 0;
  v289 = 0;
  v4 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    v281 = a2;
    v282 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v5 = *(_OWORD *)(v4 + 8);
      v307 = *(_QWORD *)(v4 + 24);
      __dst = v5;
      goto LABEL_7;
    }
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 220, (uint64_t)"channels_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 72);
    v281 = a2;
    v282 = a1;
    if ((*(char *)(v4 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  sub_20E860C04(&__dst, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
LABEL_7:
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 48))(*(_QWORD *)(v4 + 96));
  v7 = sub_20EBA60E8();
  if (*((char *)v7 + 23) < 0)
  {
    sub_20E860C04(&v304, (void *)*v7, v7[1]);
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v305 = v7[2];
    v304 = v8;
  }
  v9 = HIBYTE(v305);
  if (v305 >= 0)
  {
    v10 = &v304;
  }
  else
  {
    v9 = *((_QWORD *)&v304 + 1);
    v10 = (__int128 *)v304;
  }
  if (v9 >= 4)
  {
    v11 = (char *)v10 + v9;
    v12 = v10;
    do
    {
      v13 = (char *)memchr(v12, 118, v9 - 3);
      if (!v13)
        break;
      if (*(_DWORD *)v13 == 1684631414)
      {
        if (v13 == v11 || v13 - (char *)v10 == -1)
          break;
        *(_QWORD *)&v298 = v6;
        DWORD2(v298) = 4;
        if (SHIBYTE(v307) < 0)
        {
          sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v299 = __dst;
          v300 = v307;
        }
        if (*(char *)(v4 + 55) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
        }
        else
        {
          v280 = *(_OWORD *)(v4 + 32);
          *(_QWORD *)v302 = *(_QWORD *)(v4 + 48);
          __p = v280;
        }
        sub_20EBE9FD8();
        if ((byte_254A5C907 & 0x80000000) == 0)
        {
          *(_OWORD *)&v302[8] = xmmword_254A5C8F0;
          v303 = unk_254A5C900;
          goto LABEL_34;
        }
        goto LABEL_31;
      }
      v12 = (__int128 *)(v13 + 1);
      v9 = v11 - (char *)v12;
    }
    while (v11 - (char *)v12 >= 4);
  }
  *(_QWORD *)&v298 = v6;
  DWORD2(v298) = 2;
  if (SHIBYTE(v307) < 0)
  {
    sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v299 = __dst;
    v300 = v307;
  }
  if (*(char *)(v4 + 55) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 32), *(_QWORD *)(v4 + 40));
  }
  else
  {
    v14 = *(_OWORD *)(v4 + 32);
    *(_QWORD *)v302 = *(_QWORD *)(v4 + 48);
    __p = v14;
  }
  sub_20EBE9FD8();
  if (byte_254A5C907 < 0)
  {
LABEL_31:
    sub_20E860C04(&v302[8], (void *)xmmword_254A5C8F0, *((unint64_t *)&xmmword_254A5C8F0 + 1));
  }
  else
  {
    *(_OWORD *)&v302[8] = xmmword_254A5C8F0;
    v303 = unk_254A5C900;
  }
LABEL_34:
  v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
  if ((SHIBYTE(v303) & 0x80000000) == 0)
  {
    if ((v302[7] & 0x80000000) == 0)
      goto LABEL_36;
LABEL_32:
    operator delete((void *)__p);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  operator delete(*(void **)&v302[8]);
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_32;
LABEL_36:
  if (SHIBYTE(v300) < 0)
LABEL_33:
    operator delete((void *)v299);
LABEL_37:
  v15 = sub_20EBA4AA4();
  if (*((char *)v15 + 23) < 0)
  {
    sub_20E860C04(v296, (void *)*v15, v15[1]);
  }
  else
  {
    v16 = *(_OWORD *)v15;
    v297 = v15[2];
    *(_OWORD *)v296 = v16;
  }
  v17 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v18 = v296;
  }
  else
  {
    v17 = (uint64_t)v296[1];
    v18 = (void **)v296[0];
  }
  if (v17 >= 18)
  {
    v19 = (char *)v18 + v17;
    v20 = v18;
    do
    {
      v21 = (char *)memchr(v20, 67, v17 - 17);
      if (!v21)
        break;
      if (*(_QWORD *)v21 == 0x456C656E6E616843
        && *((_QWORD *)v21 + 1) == 0x696F763C726F7272
        && *((_WORD *)v21 + 8) == 15972)
      {
        if (v21 != v19 && v21 - (char *)v18 != -1)
          goto LABEL_81;
        break;
      }
      v20 = (void **)(v21 + 1);
      v17 = v19 - (char *)v20;
    }
    while (v19 - (char *)v20 >= 18);
  }
  *(_QWORD *)&v298 = v6 + 1;
  DWORD2(v298) = 3;
  v24 = SHIBYTE(v307);
  if (v307 >= 0)
    v25 = HIBYTE(v307);
  else
    v25 = *((_QWORD *)&__dst + 1);
  v26 = v25 + 6;
  if (v25 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v27 = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&v299 + 1) = v25 + 6;
    v300 = v29 | 0x8000000000000000;
    *(_QWORD *)&v299 = v27;
  }
  else
  {
    v300 = 0;
    v299 = 0uLL;
    v27 = &v299;
    HIBYTE(v300) = v25 + 6;
    if (!v25)
      goto LABEL_73;
  }
  if (v24 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  memmove(v27, p_dst, v25);
LABEL_73:
  strcpy((char *)v27 + v25, ".Error");
  *(_WORD *)&v302[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v303) = 0;
  v31 = v291;
  if ((unint64_t)v291 >= v292)
  {
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_80;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_80;
    }
LABEL_75:
    operator delete((void *)__p);
    if (SHIBYTE(v300) < 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  v32 = v298;
  *((_DWORD *)v291 + 2) = DWORD2(v298);
  *(_QWORD *)v31 = v32;
  v33 = v299;
  *((_QWORD *)v31 + 4) = v300;
  *((_OWORD *)v31 + 1) = v33;
  v300 = 0;
  v299 = 0uLL;
  v34 = *(_QWORD *)v302;
  *(_OWORD *)(v31 + 40) = __p;
  *((_QWORD *)v31 + 7) = v34;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v35 = *(_OWORD *)&v302[8];
  *((_QWORD *)v31 + 10) = v303;
  *((_OWORD *)v31 + 4) = v35;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v31 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_75;
LABEL_80:
  if (SHIBYTE(v300) < 0)
  {
LABEL_76:
    operator delete((void *)v299);
    v36 = *(std::__shared_weak_count **)(v4 + 136);
    if (!v36)
      goto LABEL_85;
    goto LABEL_82;
  }
LABEL_81:
  v36 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v36)
  {
LABEL_85:
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v40 = 0;
    goto LABEL_100;
  }
LABEL_82:
  v37 = std::__shared_weak_count::lock(v36);
  *((_QWORD *)&v298 + 1) = v37;
  if (!v37)
    goto LABEL_85;
  v38 = v37;
  v39 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v298 = v39;
  if (v39)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v39 + 24))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  p_shared_owners = (unint64_t *)&v38->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (v42)
  {
    v40 = v293;
    v43 = v294;
    if (v293 == v294)
      goto LABEL_100;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v40 = v293;
    v43 = v294;
    if (v293 == v294)
      goto LABEL_100;
  }
  do
  {
    *(_QWORD *)&v298 = v6;
    *((_QWORD *)&v298 + 1) = *v40;
    v300 = 0;
    v299 = 0uLL;
    v45 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v44 = v299;
      *((_QWORD *)v45 + 4) = v300;
      *((_OWORD *)v45 + 1) = v44;
      v288 = v45 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v40;
  }
  while (v40 != v43);
  v40 = v293;
LABEL_100:
  if (v40)
  {
    v294 = v40;
    operator delete(v40);
  }
  v46 = *(std::__shared_weak_count **)(v4 + 136);
  if (!v46 || (v47 = std::__shared_weak_count::lock(v46), (*((_QWORD *)&v298 + 1) = v47) == 0))
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v50 = 0;
    goto LABEL_121;
  }
  v48 = v47;
  v49 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)&v298 = v49;
  if (v49)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v49 + 32))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v51 = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
    v50 = v293;
    v53 = v294;
    if (v293 == v294)
      goto LABEL_121;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    v50 = v293;
    v53 = v294;
    if (v293 == v294)
      goto LABEL_121;
  }
  v54 = v6 + 1;
  do
  {
    *(_QWORD *)&v298 = v54;
    *((_QWORD *)&v298 + 1) = *v50;
    v300 = 0;
    v299 = 0uLL;
    v56 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v55 = v299;
      *((_QWORD *)v56 + 4) = v300;
      *((_OWORD *)v56 + 1) = v55;
      v288 = v56 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v50;
  }
  while (v50 != v53);
  v50 = v293;
LABEL_121:
  if (v50)
  {
    v294 = v50;
    operator delete(v50);
  }
  if (SHIBYTE(v297) < 0)
  {
    operator delete(v296[0]);
    if ((SHIBYTE(v305) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(v307) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_130:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 199) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_131;
    }
  }
  else if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete((void *)v304);
  if (SHIBYTE(v307) < 0)
    goto LABEL_130;
LABEL_126:
  if ((*(char *)(v4 + 199) & 0x80000000) == 0)
  {
LABEL_127:
    __dst = *(_OWORD *)(v4 + 176);
    v307 = *(_QWORD *)(v4 + 192);
    goto LABEL_132;
  }
LABEL_131:
  sub_20E860C04(&__dst, *(void **)(v4 + 176), *(_QWORD *)(v4 + 184));
LABEL_132:
  v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 264) + 48))(*(_QWORD *)(v4 + 264));
  v58 = sub_20EBECB44();
  if (*((char *)v58 + 23) < 0)
  {
    sub_20E860C04(&v304, (void *)*v58, v58[1]);
  }
  else
  {
    v59 = *(_OWORD *)v58;
    v305 = v58[2];
    v304 = v59;
  }
  v60 = HIBYTE(v305);
  if (v305 >= 0)
  {
    v61 = &v304;
  }
  else
  {
    v60 = *((_QWORD *)&v304 + 1);
    v61 = (__int128 *)v304;
  }
  if (v60 >= 4)
  {
    v62 = (char *)v61 + v60;
    v63 = v61;
    do
    {
      v64 = (char *)memchr(v63, 118, v60 - 3);
      if (!v64)
        break;
      if (*(_DWORD *)v64 == 1684631414)
      {
        if (v64 == v62 || v64 - (char *)v61 == -1)
          break;
        *(_QWORD *)&v298 = v57;
        DWORD2(v298) = 4;
        if (SHIBYTE(v307) < 0)
        {
          sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v299 = __dst;
          v300 = v307;
        }
        if (*(char *)(v4 + 223) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 200);
          *(_QWORD *)v302 = *(_QWORD *)(v4 + 216);
        }
        sub_20EBED2C0();
        if (byte_254A5CEBF < 0)
        {
          sub_20E860C04(&v302[8], (void *)xmmword_254A5CEA8, *((unint64_t *)&xmmword_254A5CEA8 + 1));
        }
        else
        {
          *(_OWORD *)&v302[8] = xmmword_254A5CEA8;
          v303 = unk_254A5CEB8;
        }
        v65 = v291;
        if ((unint64_t)v291 < v292)
          goto LABEL_158;
        goto LABEL_161;
      }
      v63 = (__int128 *)(v64 + 1);
      v60 = v62 - (char *)v63;
    }
    while (v62 - (char *)v63 >= 4);
  }
  *(_QWORD *)&v298 = v57;
  DWORD2(v298) = 2;
  if (SHIBYTE(v307) < 0)
  {
    sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v299 = __dst;
    v300 = v307;
  }
  if (*(char *)(v4 + 223) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 200), *(_QWORD *)(v4 + 208));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 200);
    *(_QWORD *)v302 = *(_QWORD *)(v4 + 216);
  }
  sub_20EBED2C0();
  if (byte_254A5CEBF < 0)
  {
    sub_20E860C04(&v302[8], (void *)xmmword_254A5CEA8, *((unint64_t *)&xmmword_254A5CEA8 + 1));
  }
  else
  {
    *(_OWORD *)&v302[8] = xmmword_254A5CEA8;
    v303 = unk_254A5CEB8;
  }
  v65 = v291;
  if ((unint64_t)v291 >= v292)
  {
LABEL_161:
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_163;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_163;
    }
LABEL_159:
    operator delete((void *)__p);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_164;
    goto LABEL_160;
  }
LABEL_158:
  v66 = v298;
  *((_DWORD *)v65 + 2) = DWORD2(v298);
  *(_QWORD *)v65 = v66;
  v67 = v299;
  *((_QWORD *)v65 + 4) = v300;
  *((_OWORD *)v65 + 1) = v67;
  v300 = 0;
  v299 = 0uLL;
  v68 = *(_QWORD *)v302;
  *(_OWORD *)(v65 + 40) = __p;
  *((_QWORD *)v65 + 7) = v68;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v69 = *(_OWORD *)&v302[8];
  *((_QWORD *)v65 + 10) = v303;
  *((_OWORD *)v65 + 4) = v69;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v65 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_159;
LABEL_163:
  if (SHIBYTE(v300) < 0)
LABEL_160:
    operator delete((void *)v299);
LABEL_164:
  v70 = sub_20EBA4AA4();
  if (*((char *)v70 + 23) < 0)
  {
    sub_20E860C04(v296, (void *)*v70, v70[1]);
  }
  else
  {
    v71 = *(_OWORD *)v70;
    v297 = v70[2];
    *(_OWORD *)v296 = v71;
  }
  v72 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v73 = v296;
  }
  else
  {
    v72 = (uint64_t)v296[1];
    v73 = (void **)v296[0];
  }
  if (v72 >= 18)
  {
    v74 = (char *)v73 + v72;
    v75 = v73;
    do
    {
      v76 = (char *)memchr(v75, 67, v72 - 17);
      if (!v76)
        break;
      if (*(_QWORD *)v76 == 0x456C656E6E616843
        && *((_QWORD *)v76 + 1) == 0x696F763C726F7272
        && *((_WORD *)v76 + 8) == 15972)
      {
        if (v76 != v74 && v76 - (char *)v73 != -1)
          goto LABEL_208;
        break;
      }
      v75 = (void **)(v76 + 1);
      v72 = v74 - (char *)v75;
    }
    while (v74 - (char *)v75 >= 18);
  }
  *(_QWORD *)&v298 = v57 + 1;
  DWORD2(v298) = 3;
  v79 = SHIBYTE(v307);
  if (v307 >= 0)
    v80 = HIBYTE(v307);
  else
    v80 = *((_QWORD *)&__dst + 1);
  v81 = v80 + 6;
  if (v80 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v81 >= 0x17)
  {
    v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v83 = v81 | 7;
    v84 = v83 + 1;
    v82 = (__int128 *)operator new(v83 + 1);
    *((_QWORD *)&v299 + 1) = v80 + 6;
    v300 = v84 | 0x8000000000000000;
    *(_QWORD *)&v299 = v82;
  }
  else
  {
    v300 = 0;
    v299 = 0uLL;
    v82 = &v299;
    HIBYTE(v300) = v80 + 6;
    if (!v80)
      goto LABEL_200;
  }
  if (v79 >= 0)
    v85 = &__dst;
  else
    v85 = (__int128 *)__dst;
  memmove(v82, v85, v80);
LABEL_200:
  strcpy((char *)v82 + v80, ".Error");
  *(_WORD *)&v302[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v303) = 0;
  v86 = v291;
  if ((unint64_t)v291 >= v292)
  {
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_207;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_207;
    }
LABEL_202:
    operator delete((void *)__p);
    if (SHIBYTE(v300) < 0)
      goto LABEL_203;
    goto LABEL_208;
  }
  v87 = v298;
  *((_DWORD *)v291 + 2) = DWORD2(v298);
  *(_QWORD *)v86 = v87;
  v88 = v299;
  *((_QWORD *)v86 + 4) = v300;
  *((_OWORD *)v86 + 1) = v88;
  v300 = 0;
  v299 = 0uLL;
  v89 = *(_QWORD *)v302;
  *(_OWORD *)(v86 + 40) = __p;
  *((_QWORD *)v86 + 7) = v89;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v90 = *(_OWORD *)&v302[8];
  *((_QWORD *)v86 + 10) = v303;
  *((_OWORD *)v86 + 4) = v90;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v86 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_202;
LABEL_207:
  if (SHIBYTE(v300) < 0)
  {
LABEL_203:
    operator delete((void *)v299);
    v91 = *(std::__shared_weak_count **)(v4 + 304);
    if (!v91)
      goto LABEL_212;
    goto LABEL_209;
  }
LABEL_208:
  v91 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v91)
  {
LABEL_212:
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v95 = 0;
    goto LABEL_229;
  }
LABEL_209:
  v92 = std::__shared_weak_count::lock(v91);
  *((_QWORD *)&v298 + 1) = v92;
  if (!v92)
    goto LABEL_212;
  v93 = v92;
  v94 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v298 = v94;
  if (v94)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v94 + 24))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v96 = (unint64_t *)&v93->__shared_owners_;
  do
    v97 = __ldaxr(v96);
  while (__stlxr(v97 - 1, v96));
  if (v97)
  {
    v95 = v293;
    v98 = v294;
    if (v293 == v294)
      goto LABEL_229;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    v95 = v293;
    v98 = v294;
    if (v293 == v294)
      goto LABEL_229;
  }
  do
  {
    *(_QWORD *)&v298 = v57;
    *((_QWORD *)&v298 + 1) = *v95;
    v300 = 0;
    v299 = 0uLL;
    v100 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v99 = v299;
      *((_QWORD *)v100 + 4) = v300;
      *((_OWORD *)v100 + 1) = v99;
      v288 = v100 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v95;
  }
  while (v95 != v98);
  v95 = v293;
LABEL_229:
  if (v95)
  {
    v294 = v95;
    operator delete(v95);
  }
  v101 = *(std::__shared_weak_count **)(v4 + 304);
  if (!v101 || (v102 = std::__shared_weak_count::lock(v101), (*((_QWORD *)&v298 + 1) = v102) == 0))
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v105 = 0;
    goto LABEL_250;
  }
  v103 = v102;
  v104 = *(_QWORD *)(v4 + 296);
  *(_QWORD *)&v298 = v104;
  if (v104)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v104 + 32))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v106 = (unint64_t *)&v103->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
    v105 = v293;
    v108 = v294;
    if (v293 == v294)
      goto LABEL_250;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
    v105 = v293;
    v108 = v294;
    if (v293 == v294)
      goto LABEL_250;
  }
  v109 = v57 + 1;
  do
  {
    *(_QWORD *)&v298 = v109;
    *((_QWORD *)&v298 + 1) = *v105;
    v300 = 0;
    v299 = 0uLL;
    v111 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v110 = v299;
      *((_QWORD *)v111 + 4) = v300;
      *((_OWORD *)v111 + 1) = v110;
      v288 = v111 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v105;
  }
  while (v105 != v108);
  v105 = v293;
LABEL_250:
  if (v105)
  {
    v294 = v105;
    operator delete(v105);
  }
  if (SHIBYTE(v297) < 0)
  {
    operator delete(v296[0]);
    if ((SHIBYTE(v305) & 0x80000000) == 0)
    {
LABEL_254:
      if ((SHIBYTE(v307) & 0x80000000) == 0)
        goto LABEL_255;
LABEL_259:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 367) & 0x80000000) == 0)
        goto LABEL_256;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
  operator delete((void *)v304);
  if (SHIBYTE(v307) < 0)
    goto LABEL_259;
LABEL_255:
  if ((*(char *)(v4 + 367) & 0x80000000) == 0)
  {
LABEL_256:
    __dst = *(_OWORD *)(v4 + 344);
    v307 = *(_QWORD *)(v4 + 360);
    goto LABEL_261;
  }
LABEL_260:
  sub_20E860C04(&__dst, *(void **)(v4 + 344), *(_QWORD *)(v4 + 352));
LABEL_261:
  v112 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 432) + 48))(*(_QWORD *)(v4 + 432));
  v113 = sub_20EBED484();
  if (*((char *)v113 + 23) < 0)
  {
    sub_20E860C04(&v304, (void *)*v113, v113[1]);
  }
  else
  {
    v114 = *(_OWORD *)v113;
    v305 = v113[2];
    v304 = v114;
  }
  v115 = HIBYTE(v305);
  if (v305 >= 0)
  {
    v116 = &v304;
  }
  else
  {
    v115 = *((_QWORD *)&v304 + 1);
    v116 = (__int128 *)v304;
  }
  if (v115 >= 4)
  {
    v117 = (char *)v116 + v115;
    v118 = v116;
    do
    {
      v119 = (char *)memchr(v118, 118, v115 - 3);
      if (!v119)
        break;
      if (*(_DWORD *)v119 == 1684631414)
      {
        if (v119 == v117 || v119 - (char *)v116 == -1)
          break;
        *(_QWORD *)&v298 = v112;
        DWORD2(v298) = 4;
        if (SHIBYTE(v307) < 0)
        {
          sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v299 = __dst;
          v300 = v307;
        }
        if (*(char *)(v4 + 391) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 368);
          *(_QWORD *)v302 = *(_QWORD *)(v4 + 384);
        }
        sub_20EBEDC00();
        if (byte_254A5CF07 < 0)
        {
          sub_20E860C04(&v302[8], (void *)xmmword_254A5CEF0, *((unint64_t *)&xmmword_254A5CEF0 + 1));
        }
        else
        {
          *(_OWORD *)&v302[8] = xmmword_254A5CEF0;
          v303 = unk_254A5CF00;
        }
        v120 = v291;
        if ((unint64_t)v291 < v292)
          goto LABEL_287;
        goto LABEL_290;
      }
      v118 = (__int128 *)(v119 + 1);
      v115 = v117 - (char *)v118;
    }
    while (v117 - (char *)v118 >= 4);
  }
  *(_QWORD *)&v298 = v112;
  DWORD2(v298) = 2;
  if (SHIBYTE(v307) < 0)
  {
    sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v299 = __dst;
    v300 = v307;
  }
  if (*(char *)(v4 + 391) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 368), *(_QWORD *)(v4 + 376));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 368);
    *(_QWORD *)v302 = *(_QWORD *)(v4 + 384);
  }
  sub_20EBEDC00();
  if (byte_254A5CF07 < 0)
  {
    sub_20E860C04(&v302[8], (void *)xmmword_254A5CEF0, *((unint64_t *)&xmmword_254A5CEF0 + 1));
  }
  else
  {
    *(_OWORD *)&v302[8] = xmmword_254A5CEF0;
    v303 = unk_254A5CF00;
  }
  v120 = v291;
  if ((unint64_t)v291 >= v292)
  {
LABEL_290:
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_292;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
LABEL_288:
    operator delete((void *)__p);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_289;
  }
LABEL_287:
  v121 = v298;
  *((_DWORD *)v120 + 2) = DWORD2(v298);
  *(_QWORD *)v120 = v121;
  v122 = v299;
  *((_QWORD *)v120 + 4) = v300;
  *((_OWORD *)v120 + 1) = v122;
  v300 = 0;
  v299 = 0uLL;
  v123 = *(_QWORD *)v302;
  *(_OWORD *)(v120 + 40) = __p;
  *((_QWORD *)v120 + 7) = v123;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v124 = *(_OWORD *)&v302[8];
  *((_QWORD *)v120 + 10) = v303;
  *((_OWORD *)v120 + 4) = v124;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v120 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_288;
LABEL_292:
  if (SHIBYTE(v300) < 0)
LABEL_289:
    operator delete((void *)v299);
LABEL_293:
  v125 = sub_20EBA4AA4();
  if (*((char *)v125 + 23) < 0)
  {
    sub_20E860C04(v296, (void *)*v125, v125[1]);
  }
  else
  {
    v126 = *(_OWORD *)v125;
    v297 = v125[2];
    *(_OWORD *)v296 = v126;
  }
  v127 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v128 = v296;
  }
  else
  {
    v127 = (uint64_t)v296[1];
    v128 = (void **)v296[0];
  }
  if (v127 >= 18)
  {
    v129 = (char *)v128 + v127;
    v130 = v128;
    do
    {
      v131 = (char *)memchr(v130, 67, v127 - 17);
      if (!v131)
        break;
      if (*(_QWORD *)v131 == 0x456C656E6E616843
        && *((_QWORD *)v131 + 1) == 0x696F763C726F7272
        && *((_WORD *)v131 + 8) == 15972)
      {
        if (v131 != v129 && v131 - (char *)v128 != -1)
          goto LABEL_337;
        break;
      }
      v130 = (void **)(v131 + 1);
      v127 = v129 - (char *)v130;
    }
    while (v129 - (char *)v130 >= 18);
  }
  *(_QWORD *)&v298 = v112 + 1;
  DWORD2(v298) = 3;
  v134 = SHIBYTE(v307);
  if (v307 >= 0)
    v135 = HIBYTE(v307);
  else
    v135 = *((_QWORD *)&__dst + 1);
  v136 = v135 + 6;
  if (v135 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v136 >= 0x17)
  {
    v138 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v136 | 7) != 0x17)
      v138 = v136 | 7;
    v139 = v138 + 1;
    v137 = (__int128 *)operator new(v138 + 1);
    *((_QWORD *)&v299 + 1) = v135 + 6;
    v300 = v139 | 0x8000000000000000;
    *(_QWORD *)&v299 = v137;
  }
  else
  {
    v300 = 0;
    v299 = 0uLL;
    v137 = &v299;
    HIBYTE(v300) = v135 + 6;
    if (!v135)
      goto LABEL_329;
  }
  if (v134 >= 0)
    v140 = &__dst;
  else
    v140 = (__int128 *)__dst;
  memmove(v137, v140, v135);
LABEL_329:
  strcpy((char *)v137 + v135, ".Error");
  *(_WORD *)&v302[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v303) = 0;
  v141 = v291;
  if ((unint64_t)v291 >= v292)
  {
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_336;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_336;
    }
LABEL_331:
    operator delete((void *)__p);
    if (SHIBYTE(v300) < 0)
      goto LABEL_332;
    goto LABEL_337;
  }
  v142 = v298;
  *((_DWORD *)v291 + 2) = DWORD2(v298);
  *(_QWORD *)v141 = v142;
  v143 = v299;
  *((_QWORD *)v141 + 4) = v300;
  *((_OWORD *)v141 + 1) = v143;
  v300 = 0;
  v299 = 0uLL;
  v144 = *(_QWORD *)v302;
  *(_OWORD *)(v141 + 40) = __p;
  *((_QWORD *)v141 + 7) = v144;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v145 = *(_OWORD *)&v302[8];
  *((_QWORD *)v141 + 10) = v303;
  *((_OWORD *)v141 + 4) = v145;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v141 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_331;
LABEL_336:
  if (SHIBYTE(v300) < 0)
  {
LABEL_332:
    operator delete((void *)v299);
    v146 = *(std::__shared_weak_count **)(v4 + 472);
    if (!v146)
      goto LABEL_341;
    goto LABEL_338;
  }
LABEL_337:
  v146 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v146)
  {
LABEL_341:
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v150 = 0;
    goto LABEL_358;
  }
LABEL_338:
  v147 = std::__shared_weak_count::lock(v146);
  *((_QWORD *)&v298 + 1) = v147;
  if (!v147)
    goto LABEL_341;
  v148 = v147;
  v149 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v298 = v149;
  if (v149)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v149 + 24))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v151 = (unint64_t *)&v148->__shared_owners_;
  do
    v152 = __ldaxr(v151);
  while (__stlxr(v152 - 1, v151));
  if (v152)
  {
    v150 = v293;
    v153 = v294;
    if (v293 == v294)
      goto LABEL_358;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
    v150 = v293;
    v153 = v294;
    if (v293 == v294)
      goto LABEL_358;
  }
  do
  {
    *(_QWORD *)&v298 = v112;
    *((_QWORD *)&v298 + 1) = *v150;
    v300 = 0;
    v299 = 0uLL;
    v155 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v154 = v299;
      *((_QWORD *)v155 + 4) = v300;
      *((_OWORD *)v155 + 1) = v154;
      v288 = v155 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v150;
  }
  while (v150 != v153);
  v150 = v293;
LABEL_358:
  if (v150)
  {
    v294 = v150;
    operator delete(v150);
  }
  v156 = *(std::__shared_weak_count **)(v4 + 472);
  if (!v156 || (v157 = std::__shared_weak_count::lock(v156), (*((_QWORD *)&v298 + 1) = v157) == 0))
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v160 = 0;
    goto LABEL_379;
  }
  v158 = v157;
  v159 = *(_QWORD *)(v4 + 464);
  *(_QWORD *)&v298 = v159;
  if (v159)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v159 + 32))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v161 = (unint64_t *)&v158->__shared_owners_;
  do
    v162 = __ldaxr(v161);
  while (__stlxr(v162 - 1, v161));
  if (v162)
  {
    v160 = v293;
    v163 = v294;
    if (v293 == v294)
      goto LABEL_379;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
    v160 = v293;
    v163 = v294;
    if (v293 == v294)
      goto LABEL_379;
  }
  v164 = v112 + 1;
  do
  {
    *(_QWORD *)&v298 = v164;
    *((_QWORD *)&v298 + 1) = *v160;
    v300 = 0;
    v299 = 0uLL;
    v166 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v165 = v299;
      *((_QWORD *)v166 + 4) = v300;
      *((_OWORD *)v166 + 1) = v165;
      v288 = v166 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v160;
  }
  while (v160 != v163);
  v160 = v293;
LABEL_379:
  if (v160)
  {
    v294 = v160;
    operator delete(v160);
  }
  if (SHIBYTE(v297) < 0)
  {
    operator delete(v296[0]);
    if ((SHIBYTE(v305) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(v307) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 535) & 0x80000000) == 0)
        goto LABEL_385;
      goto LABEL_389;
    }
  }
  else if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
    goto LABEL_383;
  }
  operator delete((void *)v304);
  if (SHIBYTE(v307) < 0)
    goto LABEL_388;
LABEL_384:
  if ((*(char *)(v4 + 535) & 0x80000000) == 0)
  {
LABEL_385:
    __dst = *(_OWORD *)(v4 + 512);
    v307 = *(_QWORD *)(v4 + 528);
    goto LABEL_390;
  }
LABEL_389:
  sub_20E860C04(&__dst, *(void **)(v4 + 512), *(_QWORD *)(v4 + 520));
LABEL_390:
  v167 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 600) + 48))(*(_QWORD *)(v4 + 600));
  v168 = sub_20EBEDDC4();
  if (*((char *)v168 + 23) < 0)
  {
    sub_20E860C04(&v304, (void *)*v168, v168[1]);
  }
  else
  {
    v169 = *(_OWORD *)v168;
    v305 = v168[2];
    v304 = v169;
  }
  v170 = HIBYTE(v305);
  if (v305 >= 0)
  {
    v171 = &v304;
  }
  else
  {
    v170 = *((_QWORD *)&v304 + 1);
    v171 = (__int128 *)v304;
  }
  if (v170 >= 4)
  {
    v172 = (char *)v171 + v170;
    v173 = v171;
    do
    {
      v174 = (char *)memchr(v173, 118, v170 - 3);
      if (!v174)
        break;
      if (*(_DWORD *)v174 == 1684631414)
      {
        if (v174 == v172 || v174 - (char *)v171 == -1)
          break;
        *(_QWORD *)&v298 = v167;
        DWORD2(v298) = 4;
        if (SHIBYTE(v307) < 0)
        {
          sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v299 = __dst;
          v300 = v307;
        }
        if (*(char *)(v4 + 559) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 536);
          *(_QWORD *)v302 = *(_QWORD *)(v4 + 552);
        }
        sub_20EBEE760();
        if (byte_254A5CF4F < 0)
        {
          sub_20E860C04(&v302[8], (void *)xmmword_254A5CF38, *((unint64_t *)&xmmword_254A5CF38 + 1));
        }
        else
        {
          *(_OWORD *)&v302[8] = xmmword_254A5CF38;
          v303 = unk_254A5CF48;
        }
        v175 = v291;
        if ((unint64_t)v291 < v292)
          goto LABEL_416;
        goto LABEL_419;
      }
      v173 = (__int128 *)(v174 + 1);
      v170 = v172 - (char *)v173;
    }
    while (v172 - (char *)v173 >= 4);
  }
  *(_QWORD *)&v298 = v167;
  DWORD2(v298) = 2;
  if (SHIBYTE(v307) < 0)
  {
    sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v299 = __dst;
    v300 = v307;
  }
  if (*(char *)(v4 + 559) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 536), *(_QWORD *)(v4 + 544));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 536);
    *(_QWORD *)v302 = *(_QWORD *)(v4 + 552);
  }
  sub_20EBEE760();
  if (byte_254A5CF4F < 0)
  {
    sub_20E860C04(&v302[8], (void *)xmmword_254A5CF38, *((unint64_t *)&xmmword_254A5CF38 + 1));
  }
  else
  {
    *(_OWORD *)&v302[8] = xmmword_254A5CF38;
    v303 = unk_254A5CF48;
  }
  v175 = v291;
  if ((unint64_t)v291 >= v292)
  {
LABEL_419:
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_421;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_421;
    }
LABEL_417:
    operator delete((void *)__p);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_422;
    goto LABEL_418;
  }
LABEL_416:
  v176 = v298;
  *((_DWORD *)v175 + 2) = DWORD2(v298);
  *(_QWORD *)v175 = v176;
  v177 = v299;
  *((_QWORD *)v175 + 4) = v300;
  *((_OWORD *)v175 + 1) = v177;
  v300 = 0;
  v299 = 0uLL;
  v178 = *(_QWORD *)v302;
  *(_OWORD *)(v175 + 40) = __p;
  *((_QWORD *)v175 + 7) = v178;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v179 = *(_OWORD *)&v302[8];
  *((_QWORD *)v175 + 10) = v303;
  *((_OWORD *)v175 + 4) = v179;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v175 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_417;
LABEL_421:
  if (SHIBYTE(v300) < 0)
LABEL_418:
    operator delete((void *)v299);
LABEL_422:
  v180 = sub_20EBA4AA4();
  if (*((char *)v180 + 23) < 0)
  {
    sub_20E860C04(v296, (void *)*v180, v180[1]);
  }
  else
  {
    v181 = *(_OWORD *)v180;
    v297 = v180[2];
    *(_OWORD *)v296 = v181;
  }
  v182 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v183 = v296;
  }
  else
  {
    v182 = (uint64_t)v296[1];
    v183 = (void **)v296[0];
  }
  if (v182 >= 18)
  {
    v184 = (char *)v183 + v182;
    v185 = v183;
    do
    {
      v186 = (char *)memchr(v185, 67, v182 - 17);
      if (!v186)
        break;
      if (*(_QWORD *)v186 == 0x456C656E6E616843
        && *((_QWORD *)v186 + 1) == 0x696F763C726F7272
        && *((_WORD *)v186 + 8) == 15972)
      {
        if (v186 != v184 && v186 - (char *)v183 != -1)
          goto LABEL_466;
        break;
      }
      v185 = (void **)(v186 + 1);
      v182 = v184 - (char *)v185;
    }
    while (v184 - (char *)v185 >= 18);
  }
  *(_QWORD *)&v298 = v167 + 1;
  DWORD2(v298) = 3;
  v189 = SHIBYTE(v307);
  if (v307 >= 0)
    v190 = HIBYTE(v307);
  else
    v190 = *((_QWORD *)&__dst + 1);
  v191 = v190 + 6;
  if (v190 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v191 >= 0x17)
  {
    v193 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v193 = v191 | 7;
    v194 = v193 + 1;
    v192 = (__int128 *)operator new(v193 + 1);
    *((_QWORD *)&v299 + 1) = v190 + 6;
    v300 = v194 | 0x8000000000000000;
    *(_QWORD *)&v299 = v192;
  }
  else
  {
    v300 = 0;
    v299 = 0uLL;
    v192 = &v299;
    HIBYTE(v300) = v190 + 6;
    if (!v190)
      goto LABEL_458;
  }
  if (v189 >= 0)
    v195 = &__dst;
  else
    v195 = (__int128 *)__dst;
  memmove(v192, v195, v190);
LABEL_458:
  strcpy((char *)v192 + v190, ".Error");
  *(_WORD *)&v302[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v303) = 0;
  v196 = v291;
  if ((unint64_t)v291 >= v292)
  {
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_465;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_465;
    }
LABEL_460:
    operator delete((void *)__p);
    if (SHIBYTE(v300) < 0)
      goto LABEL_461;
    goto LABEL_466;
  }
  v197 = v298;
  *((_DWORD *)v291 + 2) = DWORD2(v298);
  *(_QWORD *)v196 = v197;
  v198 = v299;
  *((_QWORD *)v196 + 4) = v300;
  *((_OWORD *)v196 + 1) = v198;
  v300 = 0;
  v299 = 0uLL;
  v199 = *(_QWORD *)v302;
  *(_OWORD *)(v196 + 40) = __p;
  *((_QWORD *)v196 + 7) = v199;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v200 = *(_OWORD *)&v302[8];
  *((_QWORD *)v196 + 10) = v303;
  *((_OWORD *)v196 + 4) = v200;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v196 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_460;
LABEL_465:
  if (SHIBYTE(v300) < 0)
  {
LABEL_461:
    operator delete((void *)v299);
    v201 = *(std::__shared_weak_count **)(v4 + 640);
    if (!v201)
      goto LABEL_470;
    goto LABEL_467;
  }
LABEL_466:
  v201 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v201)
  {
LABEL_470:
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v205 = 0;
    goto LABEL_487;
  }
LABEL_467:
  v202 = std::__shared_weak_count::lock(v201);
  *((_QWORD *)&v298 + 1) = v202;
  if (!v202)
    goto LABEL_470;
  v203 = v202;
  v204 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v298 = v204;
  if (v204)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v204 + 24))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v206 = (unint64_t *)&v203->__shared_owners_;
  do
    v207 = __ldaxr(v206);
  while (__stlxr(v207 - 1, v206));
  if (v207)
  {
    v205 = v293;
    v208 = v294;
    if (v293 == v294)
      goto LABEL_487;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
    v205 = v293;
    v208 = v294;
    if (v293 == v294)
      goto LABEL_487;
  }
  do
  {
    *(_QWORD *)&v298 = v167;
    *((_QWORD *)&v298 + 1) = *v205;
    v300 = 0;
    v299 = 0uLL;
    v210 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v209 = v299;
      *((_QWORD *)v210 + 4) = v300;
      *((_OWORD *)v210 + 1) = v209;
      v288 = v210 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v205;
  }
  while (v205 != v208);
  v205 = v293;
LABEL_487:
  if (v205)
  {
    v294 = v205;
    operator delete(v205);
  }
  v211 = *(std::__shared_weak_count **)(v4 + 640);
  if (!v211 || (v212 = std::__shared_weak_count::lock(v211), (*((_QWORD *)&v298 + 1) = v212) == 0))
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v215 = 0;
    goto LABEL_508;
  }
  v213 = v212;
  v214 = *(_QWORD *)(v4 + 632);
  *(_QWORD *)&v298 = v214;
  if (v214)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v214 + 32))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v216 = (unint64_t *)&v213->__shared_owners_;
  do
    v217 = __ldaxr(v216);
  while (__stlxr(v217 - 1, v216));
  if (v217)
  {
    v215 = v293;
    v218 = v294;
    if (v293 == v294)
      goto LABEL_508;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
    std::__shared_weak_count::__release_weak(v213);
    v215 = v293;
    v218 = v294;
    if (v293 == v294)
      goto LABEL_508;
  }
  v219 = v167 + 1;
  do
  {
    *(_QWORD *)&v298 = v219;
    *((_QWORD *)&v298 + 1) = *v215;
    v300 = 0;
    v299 = 0uLL;
    v221 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v220 = v299;
      *((_QWORD *)v221 + 4) = v300;
      *((_OWORD *)v221 + 1) = v220;
      v288 = v221 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v215;
  }
  while (v215 != v218);
  v215 = v293;
LABEL_508:
  if (v215)
  {
    v294 = v215;
    operator delete(v215);
  }
  if (SHIBYTE(v297) < 0)
  {
    operator delete(v296[0]);
    if ((SHIBYTE(v305) & 0x80000000) == 0)
    {
LABEL_512:
      if ((SHIBYTE(v307) & 0x80000000) == 0)
        goto LABEL_513;
LABEL_517:
      operator delete((void *)__dst);
      if ((*(char *)(v4 + 703) & 0x80000000) == 0)
        goto LABEL_514;
      goto LABEL_518;
    }
  }
  else if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
    goto LABEL_512;
  }
  operator delete((void *)v304);
  if (SHIBYTE(v307) < 0)
    goto LABEL_517;
LABEL_513:
  if ((*(char *)(v4 + 703) & 0x80000000) == 0)
  {
LABEL_514:
    __dst = *(_OWORD *)(v4 + 680);
    v307 = *(_QWORD *)(v4 + 696);
    goto LABEL_519;
  }
LABEL_518:
  sub_20E860C04(&__dst, *(void **)(v4 + 680), *(_QWORD *)(v4 + 688));
LABEL_519:
  v222 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 768) + 48))(*(_QWORD *)(v4 + 768));
  sub_20EBE669C();
  if (byte_254A5C2BF < 0)
  {
    sub_20E860C04(&v304, (void *)xmmword_254A5C2A8, *((unint64_t *)&xmmword_254A5C2A8 + 1));
  }
  else
  {
    v304 = xmmword_254A5C2A8;
    v305 = unk_254A5C2B8;
  }
  v223 = HIBYTE(v305);
  if (v305 >= 0)
  {
    v224 = &v304;
  }
  else
  {
    v223 = *((_QWORD *)&v304 + 1);
    v224 = (__int128 *)v304;
  }
  if (v223 >= 4)
  {
    v225 = (char *)v224 + v223;
    v226 = v224;
    do
    {
      v227 = (char *)memchr(v226, 118, v223 - 3);
      if (!v227)
        break;
      if (*(_DWORD *)v227 == 1684631414)
      {
        if (v227 == v225 || v227 - (char *)v224 == -1)
          break;
        *(_QWORD *)&v298 = v222;
        DWORD2(v298) = 4;
        if (SHIBYTE(v307) < 0)
        {
          sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          v299 = __dst;
          v300 = v307;
        }
        if (*(char *)(v4 + 727) < 0)
        {
          sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
        }
        else
        {
          __p = *(_OWORD *)(v4 + 704);
          *(_QWORD *)v302 = *(_QWORD *)(v4 + 720);
        }
        sub_20EBEE924();
        if (byte_254A5CF97 < 0)
        {
          sub_20E860C04(&v302[8], (void *)xmmword_254A5CF80, *((unint64_t *)&xmmword_254A5CF80 + 1));
        }
        else
        {
          *(_OWORD *)&v302[8] = xmmword_254A5CF80;
          v303 = unk_254A5CF90;
        }
        v228 = v291;
        if ((unint64_t)v291 < v292)
          goto LABEL_545;
        goto LABEL_548;
      }
      v226 = (__int128 *)(v227 + 1);
      v223 = v225 - (char *)v226;
    }
    while (v225 - (char *)v226 >= 4);
  }
  *(_QWORD *)&v298 = v222;
  DWORD2(v298) = 2;
  if (SHIBYTE(v307) < 0)
  {
    sub_20E860C04(&v299, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    v299 = __dst;
    v300 = v307;
  }
  if (*(char *)(v4 + 727) < 0)
  {
    sub_20E860C04(&__p, *(void **)(v4 + 704), *(_QWORD *)(v4 + 712));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 704);
    *(_QWORD *)v302 = *(_QWORD *)(v4 + 720);
  }
  sub_20EBEE924();
  if (byte_254A5CF97 < 0)
  {
    sub_20E860C04(&v302[8], (void *)xmmword_254A5CF80, *((unint64_t *)&xmmword_254A5CF80 + 1));
  }
  else
  {
    *(_OWORD *)&v302[8] = xmmword_254A5CF80;
    v303 = unk_254A5CF90;
  }
  v228 = v291;
  if ((unint64_t)v291 >= v292)
  {
LABEL_548:
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_550;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_550;
    }
LABEL_546:
    operator delete((void *)__p);
    if ((SHIBYTE(v300) & 0x80000000) == 0)
      goto LABEL_551;
    goto LABEL_547;
  }
LABEL_545:
  v229 = v298;
  *((_DWORD *)v228 + 2) = DWORD2(v298);
  *(_QWORD *)v228 = v229;
  v230 = v299;
  *((_QWORD *)v228 + 4) = v300;
  *((_OWORD *)v228 + 1) = v230;
  v300 = 0;
  v299 = 0uLL;
  v231 = *(_QWORD *)v302;
  *(_OWORD *)(v228 + 40) = __p;
  *((_QWORD *)v228 + 7) = v231;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v232 = *(_OWORD *)&v302[8];
  *((_QWORD *)v228 + 10) = v303;
  *((_OWORD *)v228 + 4) = v232;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v228 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_546;
LABEL_550:
  if (SHIBYTE(v300) < 0)
LABEL_547:
    operator delete((void *)v299);
LABEL_551:
  v233 = sub_20EBA4AA4();
  if (*((char *)v233 + 23) < 0)
  {
    sub_20E860C04(v296, (void *)*v233, v233[1]);
  }
  else
  {
    v234 = *(_OWORD *)v233;
    v297 = v233[2];
    *(_OWORD *)v296 = v234;
  }
  v235 = HIBYTE(v297);
  if (v297 >= 0)
  {
    v236 = v296;
  }
  else
  {
    v235 = (uint64_t)v296[1];
    v236 = (void **)v296[0];
  }
  if (v235 >= 18)
  {
    v237 = (char *)v236 + v235;
    v238 = v236;
    do
    {
      v239 = (char *)memchr(v238, 67, v235 - 17);
      if (!v239)
        break;
      if (*(_QWORD *)v239 == 0x456C656E6E616843
        && *((_QWORD *)v239 + 1) == 0x696F763C726F7272
        && *((_WORD *)v239 + 8) == 15972)
      {
        if (v239 != v237 && v239 - (char *)v236 != -1)
          goto LABEL_595;
        break;
      }
      v238 = (void **)(v239 + 1);
      v235 = v237 - (char *)v238;
    }
    while (v237 - (char *)v238 >= 18);
  }
  *(_QWORD *)&v298 = v222 + 1;
  DWORD2(v298) = 3;
  v242 = SHIBYTE(v307);
  if (v307 >= 0)
    v243 = HIBYTE(v307);
  else
    v243 = *((_QWORD *)&__dst + 1);
  v244 = v243 + 6;
  if (v243 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v244 >= 0x17)
  {
    v246 = (v244 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v244 | 7) != 0x17)
      v246 = v244 | 7;
    v247 = v246 + 1;
    v245 = (__int128 *)operator new(v246 + 1);
    *((_QWORD *)&v299 + 1) = v243 + 6;
    v300 = v247 | 0x8000000000000000;
    *(_QWORD *)&v299 = v245;
  }
  else
  {
    v300 = 0;
    v299 = 0uLL;
    v245 = &v299;
    HIBYTE(v300) = v243 + 6;
    if (!v243)
      goto LABEL_587;
  }
  if (v242 >= 0)
    v248 = &__dst;
  else
    v248 = (__int128 *)__dst;
  memmove(v245, v248, v243);
LABEL_587:
  strcpy((char *)v245 + v243, ".Error");
  *(_WORD *)&v302[7] = 0;
  LOBYTE(__p) = 0;
  HIBYTE(v303) = 0;
  v249 = v291;
  if ((unint64_t)v291 >= v292)
  {
    v291 = sub_20EBA558C((char **)&v290, (uint64_t)&v298);
    if (SHIBYTE(v303) < 0)
    {
      operator delete(*(void **)&v302[8]);
      if ((v302[7] & 0x80000000) == 0)
        goto LABEL_594;
    }
    else if ((v302[7] & 0x80000000) == 0)
    {
      goto LABEL_594;
    }
LABEL_589:
    operator delete((void *)__p);
    if (SHIBYTE(v300) < 0)
      goto LABEL_590;
    goto LABEL_595;
  }
  v250 = v298;
  *((_DWORD *)v291 + 2) = DWORD2(v298);
  *(_QWORD *)v249 = v250;
  v251 = v299;
  *((_QWORD *)v249 + 4) = v300;
  *((_OWORD *)v249 + 1) = v251;
  v300 = 0;
  v299 = 0uLL;
  v252 = *(_QWORD *)v302;
  *(_OWORD *)(v249 + 40) = __p;
  *((_QWORD *)v249 + 7) = v252;
  *(_QWORD *)v302 = 0;
  __p = 0uLL;
  v253 = *(_OWORD *)&v302[8];
  *((_QWORD *)v249 + 10) = v303;
  *((_OWORD *)v249 + 4) = v253;
  *(_QWORD *)&v302[8] = 0;
  *(_QWORD *)&v302[16] = 0;
  v303 = 0;
  v291 = v249 + 88;
  if ((v302[7] & 0x80000000) != 0)
    goto LABEL_589;
LABEL_594:
  if (SHIBYTE(v300) < 0)
  {
LABEL_590:
    operator delete((void *)v299);
    v254 = *(std::__shared_weak_count **)(v4 + 808);
    if (!v254)
      goto LABEL_599;
    goto LABEL_596;
  }
LABEL_595:
  v254 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v254)
  {
LABEL_599:
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v258 = 0;
    goto LABEL_616;
  }
LABEL_596:
  v255 = std::__shared_weak_count::lock(v254);
  *((_QWORD *)&v298 + 1) = v255;
  if (!v255)
    goto LABEL_599;
  v256 = v255;
  v257 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v298 = v257;
  if (v257)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v257 + 24))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v259 = (unint64_t *)&v256->__shared_owners_;
  do
    v260 = __ldaxr(v259);
  while (__stlxr(v260 - 1, v259));
  if (v260)
  {
    v258 = v293;
    v261 = v294;
    if (v293 == v294)
      goto LABEL_616;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
    v258 = v293;
    v261 = v294;
    if (v293 == v294)
      goto LABEL_616;
  }
  do
  {
    *(_QWORD *)&v298 = v222;
    *((_QWORD *)&v298 + 1) = *v258;
    v300 = 0;
    v299 = 0uLL;
    v263 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v262 = v299;
      *((_QWORD *)v263 + 4) = v300;
      *((_OWORD *)v263 + 1) = v262;
      v288 = v263 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v258;
  }
  while (v258 != v261);
  v258 = v293;
LABEL_616:
  if (v258)
  {
    v294 = v258;
    operator delete(v258);
  }
  v264 = *(std::__shared_weak_count **)(v4 + 808);
  if (!v264 || (v265 = std::__shared_weak_count::lock(v264), (*((_QWORD *)&v298 + 1) = v265) == 0))
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
    v268 = 0;
    goto LABEL_637;
  }
  v266 = v265;
  v267 = *(_QWORD *)(v4 + 800);
  *(_QWORD *)&v298 = v267;
  if (v267)
  {
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v267 + 32))(&v293);
  }
  else
  {
    v293 = 0;
    v294 = 0;
    v295 = 0;
  }
  v269 = (unint64_t *)&v266->__shared_owners_;
  do
    v270 = __ldaxr(v269);
  while (__stlxr(v270 - 1, v269));
  if (v270)
  {
    v268 = v293;
    v271 = v294;
    if (v293 == v294)
      goto LABEL_637;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
    std::__shared_weak_count::__release_weak(v266);
    v268 = v293;
    v271 = v294;
    if (v293 == v294)
      goto LABEL_637;
  }
  do
  {
    *(_QWORD *)&v298 = v222 + 1;
    *((_QWORD *)&v298 + 1) = *v268;
    v300 = 0;
    v299 = 0uLL;
    v273 = v288;
    if ((unint64_t)v288 < v289)
    {
      *(_OWORD *)v288 = v298;
      v272 = v299;
      *((_QWORD *)v273 + 4) = v300;
      *((_OWORD *)v273 + 1) = v272;
      v288 = v273 + 40;
    }
    else
    {
      v288 = sub_20EBA5F8C(&v287, (uint64_t)&v298);
      if (SHIBYTE(v300) < 0)
        operator delete((void *)v299);
    }
    ++v268;
  }
  while (v268 != v271);
  v268 = v293;
LABEL_637:
  if (v268)
  {
    v294 = v268;
    operator delete(v268);
  }
  if (SHIBYTE(v297) < 0)
  {
    operator delete(v296[0]);
    if ((SHIBYTE(v305) & 0x80000000) == 0)
    {
LABEL_641:
      if ((SHIBYTE(v307) & 0x80000000) == 0)
        goto LABEL_642;
LABEL_646:
      operator delete((void *)__dst);
      if ((*(char *)(v281 + 31) & 0x80000000) == 0)
        goto LABEL_643;
      goto LABEL_647;
    }
  }
  else if ((SHIBYTE(v305) & 0x80000000) == 0)
  {
    goto LABEL_641;
  }
  operator delete((void *)v304);
  if (SHIBYTE(v307) < 0)
    goto LABEL_646;
LABEL_642:
  if ((*(char *)(v281 + 31) & 0x80000000) == 0)
  {
LABEL_643:
    *(_OWORD *)v285 = *(_OWORD *)(v281 + 8);
    v286 = *(_QWORD *)(v281 + 24);
    goto LABEL_648;
  }
LABEL_647:
  sub_20E860C04(v285, *(void **)(v281 + 8), *(_QWORD *)(v281 + 16));
LABEL_648:
  v274 = *(_QWORD *)(v281 + 56) != 0;
  if (*(char *)(v281 + 55) < 0)
  {
    sub_20E860C04(v283, *(void **)(v281 + 32), *(_QWORD *)(v281 + 40));
  }
  else
  {
    *(_OWORD *)v283 = *(_OWORD *)(v281 + 32);
    v284 = *(_QWORD *)(v281 + 48);
  }
  sub_20EBA690C(v282, (__int128 *)v285, v274, (uint64_t *)&v290, (uint64_t *)&v287, (__int128 *)v283);
  if (SHIBYTE(v284) < 0)
  {
    operator delete(v283[0]);
    if ((SHIBYTE(v286) & 0x80000000) == 0)
    {
LABEL_653:
      v275 = (char *)v287;
      if (v287)
        goto LABEL_654;
LABEL_664:
      v277 = (char *)v290;
      if (!v290)
        return;
LABEL_665:
      v278 = v291;
      v279 = v277;
      if (v291 == v277)
      {
LABEL_676:
        v291 = v277;
        operator delete(v279);
        return;
      }
      while (1)
      {
        while (*(v278 - 1) < 0)
        {
          operator delete(*((void **)v278 - 3));
          if (*(v278 - 25) < 0)
            goto LABEL_667;
LABEL_673:
          if ((*(v278 - 49) & 0x80000000) == 0)
            goto LABEL_668;
LABEL_674:
          operator delete(*((void **)v278 - 9));
          v278 -= 88;
          if (v278 == v277)
          {
LABEL_675:
            v279 = v290;
            goto LABEL_676;
          }
        }
        if ((*(v278 - 25) & 0x80000000) == 0)
          goto LABEL_673;
LABEL_667:
        operator delete(*((void **)v278 - 6));
        if (*(v278 - 49) < 0)
          goto LABEL_674;
LABEL_668:
        v278 -= 88;
        if (v278 == v277)
          goto LABEL_675;
      }
    }
  }
  else if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
    goto LABEL_653;
  }
  operator delete(v285[0]);
  v275 = (char *)v287;
  if (!v287)
    goto LABEL_664;
LABEL_654:
  v276 = v288;
  if (v288 == v275)
  {
    v288 = v275;
    operator delete(v275);
    v277 = (char *)v290;
    if (!v290)
      return;
    goto LABEL_665;
  }
  do
  {
    if (*(v276 - 1) < 0)
      operator delete(*((void **)v276 - 3));
    v276 -= 40;
  }
  while (v276 != v275);
  v288 = v275;
  operator delete(v287);
  v277 = (char *)v290;
  if (v290)
    goto LABEL_665;
}

void sub_20EBE4E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  sub_20EBA4920(&a24);
  sub_20EBA4990(&a27);
  _Unwind_Resume(a1);
}

void sub_20EBE51FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA28))
  {
    sub_20EBE52B4();
    if (byte_254A5C037 < 0)
    {
      sub_20E860C04(&xmmword_254A5BFF0, (void *)xmmword_254A5C020, *((unint64_t *)&xmmword_254A5C020 + 1));
    }
    else
    {
      xmmword_254A5BFF0 = xmmword_254A5C020;
      unk_254A5C000 = unk_254A5C030;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5BFF0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA28);
  }
}

void sub_20EBE529C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA28);
  _Unwind_Resume(a1);
}

void sub_20EBE52B4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA30))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::vector<std::pair<unsigned long long, cva::SE3GroupStorage<double, cva::Matrix<double, 4, 4>>>> &)]", qword_254A5C008);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C008, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BA38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BA38))
    {
      sub_21023CD84((uint64_t)qword_254A5C008, (uint64_t)&xmmword_254A5C020);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C020, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BA38);
    }
  }
}

void sub_20EBE5384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA38);
  _Unwind_Resume(a1);
}

void sub_20EBE539C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA30);
  _Unwind_Resume(a1);
}

void sub_20EBE53B4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA48))
  {
    sub_20EBE5534();
    v1 = byte_254A5C07F;
    if (byte_254A5C07F >= 0)
      v2 = byte_254A5C07F;
    else
      v2 = *((_QWORD *)&xmmword_254A5C068 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C058 = v2 + 6;
      unk_254A5C060 = v6 | 0x8000000000000000;
      qword_254A5C050 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C058 = 0;
      unk_254A5C060 = 0;
      qword_254A5C050 = 0x2074736E6F63;
      byte_254A5C067 = v2 + 6;
      v4 = (char *)&qword_254A5C050 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C050, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BA48);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C068;
    else
      v8 = (__int128 *)xmmword_254A5C068;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBE551C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA48);
  _Unwind_Resume(a1);
}

void sub_20EBE5534()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA50))
  {
    sub_20EBE55EC();
    if (byte_254A5C097 < 0)
    {
      sub_20E860C04(&xmmword_254A5C068, (void *)qword_254A5C080, unk_254A5C088);
    }
    else
    {
      xmmword_254A5C068 = *(_OWORD *)&qword_254A5C080;
      unk_254A5C078 = unk_254A5C090;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C068, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA50);
  }
}

void sub_20EBE55D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA50);
  _Unwind_Resume(a1);
}

void sub_20EBE55EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA58))
  {
    sub_20EBE5894(__p);
    sub_20EBE56C0((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C080, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA58);
  }
}

void sub_20EBE5680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BA58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BA58);
  _Unwind_Resume(a1);
}

void sub_20EBE56C0(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BA60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA60))
  {
    sub_20EBE5A70();
    if (byte_254A5C0DF < 0)
    {
      sub_20E860C04(&xmmword_254A5C098, (void *)xmmword_254A5C0C8, *((unint64_t *)&xmmword_254A5C0C8 + 1));
    }
    else
    {
      xmmword_254A5C098 = xmmword_254A5C0C8;
      unk_254A5C0A8 = unk_254A5C0D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C098, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA60);
  }
  if (byte_254A5C0AF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C098, *((unint64_t *)&xmmword_254A5C098 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C098;
    v11 = unk_254A5C0A8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C080, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE584C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA60);
  _Unwind_Resume(a1);
}

void sub_20EBE5868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE5894(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BA78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_types::OriginToPoseAnchor>]", qword_254A5C0E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C0E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BA80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA80))
  {
    v5 = sub_20E8A2354(qword_254A5C0E0, "<", 0);
    sub_20E89FC08(qword_254A5C0E0, 0, v5, qword_254A5C0F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C0F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA80);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BA88);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA88))
  {
    sub_21023CD84((uint64_t)qword_254A5C0F8, (uint64_t)&xmmword_254A5C110);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C110, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA88);
  }
  if (byte_254A5C127 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C110, *((unint64_t *)&xmmword_254A5C110 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C110;
    __dst[2] = unk_254A5C120;
  }
}

void sub_20EBE5A28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA88);
  _Unwind_Resume(a1);
}

void sub_20EBE5A40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA80);
  _Unwind_Resume(a1);
}

void sub_20EBE5A58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA78);
  _Unwind_Resume(a1);
}

void sub_20EBE5A70()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA68))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::OriginToPoseAnchor]", qword_254A5C0B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C0B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA68);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BA70);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BA70))
    {
      sub_21023CD84((uint64_t)qword_254A5C0B0, (uint64_t)&xmmword_254A5C0C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C0C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BA70);
    }
  }
}

void sub_20EBE5B40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA70);
  _Unwind_Resume(a1);
}

void sub_20EBE5B58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA68);
  _Unwind_Resume(a1);
}

void sub_20EBE5B70()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA90))
  {
    sub_20EBE5C28();
    if (byte_254A5C16F < 0)
    {
      sub_20E860C04(&xmmword_254A5C128, (void *)xmmword_254A5C158, *((unint64_t *)&xmmword_254A5C158 + 1));
    }
    else
    {
      xmmword_254A5C128 = xmmword_254A5C158;
      unk_254A5C138 = unk_254A5C168;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C128, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA90);
  }
}

void sub_20EBE5C10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA90);
  _Unwind_Resume(a1);
}

void sub_20EBE5C28()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BA98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BA98))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::mapping_types::OriginToPoseAnchor> (const cv3d::vio::mapping_types::GlobalPoseAnchor &)]", qword_254A5C140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C140, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BA98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BAA0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BAA0))
    {
      sub_21023CD84((uint64_t)qword_254A5C140, (uint64_t)&xmmword_254A5C158);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C158, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BAA0);
    }
  }
}

void sub_20EBE5CF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAA0);
  _Unwind_Resume(a1);
}

void sub_20EBE5D10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BA98);
  _Unwind_Resume(a1);
}

void sub_20EBE5D28()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BAB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAB0))
  {
    sub_20EBE5EA8();
    v1 = byte_254A5C1B7;
    if (byte_254A5C1B7 >= 0)
      v2 = byte_254A5C1B7;
    else
      v2 = *((_QWORD *)&xmmword_254A5C1A0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C190 = v2 + 6;
      unk_254A5C198 = v6 | 0x8000000000000000;
      qword_254A5C188 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C190 = 0;
      unk_254A5C198 = 0;
      qword_254A5C188 = 0x2074736E6F63;
      byte_254A5C19F = v2 + 6;
      v4 = (char *)&qword_254A5C188 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C188, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BAB0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C1A0;
    else
      v8 = (__int128 *)xmmword_254A5C1A0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBE5E90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAB0);
  _Unwind_Resume(a1);
}

void sub_20EBE5EA8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BAB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAB8))
  {
    sub_20EBE5F60();
    if (byte_254A5C1CF < 0)
    {
      sub_20E860C04(&xmmword_254A5C1A0, (void *)qword_254A5C1B8, unk_254A5C1C0);
    }
    else
    {
      xmmword_254A5C1A0 = *(_OWORD *)&qword_254A5C1B8;
      unk_254A5C1B0 = unk_254A5C1C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C1A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAB8);
  }
}

void sub_20EBE5F48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAB8);
  _Unwind_Resume(a1);
}

void sub_20EBE5F60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BAC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAC0))
  {
    sub_20EBE6208(__p);
    sub_20EBE6034((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C1B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAC0);
  }
}

void sub_20EBE5FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BAC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BAC0);
  _Unwind_Resume(a1);
}

void sub_20EBE6034(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BAC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAC8))
  {
    sub_20EBE63E4();
    if (byte_254A5C217 < 0)
    {
      sub_20E860C04(&xmmword_254A5C1D0, (void *)xmmword_254A5C200, *((unint64_t *)&xmmword_254A5C200 + 1));
    }
    else
    {
      xmmword_254A5C1D0 = xmmword_254A5C200;
      unk_254A5C1E0 = unk_254A5C210;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C1D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAC8);
  }
  if (byte_254A5C1E7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C1D0, *((unint64_t *)&xmmword_254A5C1D0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C1D0;
    v11 = unk_254A5C1E0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C1B8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE61C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAC8);
  _Unwind_Resume(a1);
}

void sub_20EBE61DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE6208(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BAE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_types::GlobalPoseAnchor>]", qword_254A5C218);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C218, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BAE8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAE8))
  {
    v5 = sub_20E8A2354(qword_254A5C218, "<", 0);
    sub_20E89FC08(qword_254A5C218, 0, v5, qword_254A5C230);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C230, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAE8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BAF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAF0))
  {
    sub_21023CD84((uint64_t)qword_254A5C230, (uint64_t)&xmmword_254A5C248);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C248, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAF0);
  }
  if (byte_254A5C25F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C248, *((unint64_t *)&xmmword_254A5C248 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C248;
    __dst[2] = unk_254A5C258;
  }
}

void sub_20EBE639C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAF0);
  _Unwind_Resume(a1);
}

void sub_20EBE63B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAE8);
  _Unwind_Resume(a1);
}

void sub_20EBE63CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAE0);
  _Unwind_Resume(a1);
}

void sub_20EBE63E4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BAD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAD0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_types::GlobalPoseAnchor]", qword_254A5C1E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C1E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAD0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BAD8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BAD8))
    {
      sub_21023CD84((uint64_t)qword_254A5C1E8, (uint64_t)&xmmword_254A5C200);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C200, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BAD8);
    }
  }
}

void sub_20EBE64B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAD8);
  _Unwind_Resume(a1);
}

void sub_20EBE64CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAD0);
  _Unwind_Resume(a1);
}

void sub_20EBE64E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BAF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BAF8))
  {
    sub_20EBE659C();
    if (byte_254A5C2A7 < 0)
    {
      sub_20E860C04(&xmmword_254A5C260, (void *)xmmword_254A5C290, *((unint64_t *)&xmmword_254A5C290 + 1));
    }
    else
    {
      xmmword_254A5C260 = xmmword_254A5C290;
      unk_254A5C270 = unk_254A5C2A0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C260, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BAF8);
  }
}

void sub_20EBE6584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BAF8);
  _Unwind_Resume(a1);
}

void sub_20EBE659C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB00))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::mapping_types::GlobalPoseAnchor> (const cv3d::vio::mapping_types::OriginToPoseAnchor &)]", qword_254A5C278);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C278, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BB08);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BB08))
    {
      sub_21023CD84((uint64_t)qword_254A5C278, (uint64_t)&xmmword_254A5C290);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C290, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BB08);
    }
  }
}

void sub_20EBE666C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB08);
  _Unwind_Resume(a1);
}

void sub_20EBE6684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB00);
  _Unwind_Resume(a1);
}

void sub_20EBE669C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB10))
  {
    sub_20EBE67F4();
    v1 = byte_254A5C2D7;
    if (byte_254A5C2D7 >= 0)
      v2 = byte_254A5C2D7;
    else
      v2 = qword_254A5C2C8;
    v3 = v2 + 1;
    if (v2 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v4 = (__int128 *)operator new(v5 + 1);
      *((_QWORD *)&xmmword_254A5C2A8 + 1) = v2 + 1;
      unk_254A5C2B8 = v6 | 0x8000000000000000;
      *(_QWORD *)&xmmword_254A5C2A8 = v4;
    }
    else
    {
      v4 = &xmmword_254A5C2A8;
      unk_254A5C2B8 = 0;
      xmmword_254A5C2A8 = 0uLL;
      byte_254A5C2BF = v2 + 1;
      if (!v2)
      {
LABEL_18:
        *(_WORD *)((char *)v4 + v2) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C2A8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BB10);
        return;
      }
    }
    if (v1 >= 0)
      v7 = &qword_254A5C2C0;
    else
      v7 = (uint64_t *)qword_254A5C2C0;
    memmove(v4, v7, v2);
    goto LABEL_18;
  }
}

void sub_20EBE67DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB10);
  _Unwind_Resume(a1);
}

void sub_20EBE67F4()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB18))
  {
    sub_20EBE6974();
    v1 = byte_254A5C2EF;
    if (byte_254A5C2EF >= 0)
      v2 = byte_254A5C2EF;
    else
      v2 = *((_QWORD *)&xmmword_254A5C2D8 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C2C8 = v2 + 6;
      unk_254A5C2D0 = v6 | 0x8000000000000000;
      qword_254A5C2C0 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C2C8 = 0;
      unk_254A5C2D0 = 0;
      qword_254A5C2C0 = 0x2074736E6F63;
      byte_254A5C2D7 = v2 + 6;
      v4 = (char *)&qword_254A5C2C0 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C2C0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BB18);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C2D8;
    else
      v8 = (__int128 *)xmmword_254A5C2D8;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBE695C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB18);
  _Unwind_Resume(a1);
}

void sub_20EBE6974()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB20))
  {
    sub_20EBE6A2C();
    if (byte_254A5C307 < 0)
    {
      sub_20E860C04(&xmmword_254A5C2D8, (void *)qword_254A5C2F0, unk_254A5C2F8);
    }
    else
    {
      xmmword_254A5C2D8 = *(_OWORD *)&qword_254A5C2F0;
      unk_254A5C2E8 = unk_254A5C300;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C2D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB20);
  }
}

void sub_20EBE6A14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB20);
  _Unwind_Resume(a1);
}

void sub_20EBE6A2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB28))
  {
    sub_20EBE6CE8(__p);
    sub_20EBE6B00((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C2F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB28);
  }
}

void sub_20EBE6AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BB28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BB28);
  _Unwind_Resume(a1);
}

void sub_20EBE6B00(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BB30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB30))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EBE6EC4((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C308, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB30);
  }
  if (byte_254A5C31F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C308, *((unint64_t *)&xmmword_254A5C308 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C308;
    v13 = unk_254A5C318;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C2F0, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE6C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BB30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BB30);
  _Unwind_Resume(a1);
}

void sub_20EBE6CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE6CE8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BB50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB50))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::vector<cv3d::kit::cf::ErrorRef>>]", qword_254A5C368);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C368, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB50);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BB58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB58))
  {
    v5 = sub_20E8A2354(qword_254A5C368, "<", 0);
    sub_20E89FC08(qword_254A5C368, 0, v5, qword_254A5C380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C380, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BB60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB60))
  {
    sub_21023CD84((uint64_t)qword_254A5C380, (uint64_t)&xmmword_254A5C398);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C398, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB60);
  }
  if (byte_254A5C3AF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C398, *((unint64_t *)&xmmword_254A5C398 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C398;
    __dst[2] = unk_254A5C3A8;
  }
}

void sub_20EBE6E7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB60);
  _Unwind_Resume(a1);
}

void sub_20EBE6E94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB58);
  _Unwind_Resume(a1);
}

void sub_20EBE6EAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB50);
  _Unwind_Resume(a1);
}

void sub_20EBE6EC4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BB38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB38))
  {
    sub_20EBE7098();
    if (byte_254A5C367 < 0)
    {
      sub_20E860C04(&xmmword_254A5C320, (void *)xmmword_254A5C350, *((unint64_t *)&xmmword_254A5C350 + 1));
    }
    else
    {
      xmmword_254A5C320 = xmmword_254A5C350;
      unk_254A5C330 = unk_254A5C360;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C320, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB38);
  }
  if (byte_254A5C337 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C320, *((unint64_t *)&xmmword_254A5C320 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C320;
    v11 = unk_254A5C330;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5C308, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE7050(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB38);
  _Unwind_Resume(a1);
}

void sub_20EBE706C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE7098()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB40))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cf::ErrorRef]", qword_254A5C338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C338, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB40);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BB48);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BB48))
    {
      sub_21023CD84((uint64_t)qword_254A5C338, (uint64_t)&xmmword_254A5C350);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C350, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BB48);
    }
  }
}

void sub_20EBE7168(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB48);
  _Unwind_Resume(a1);
}

void sub_20EBE7180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB40);
  _Unwind_Resume(a1);
}

void sub_20EBE7198()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB68))
  {
    sub_20EBE7250();
    if (byte_254A5C3F7 < 0)
    {
      sub_20E860C04(&xmmword_254A5C3B0, (void *)xmmword_254A5C3E0, *((unint64_t *)&xmmword_254A5C3E0 + 1));
    }
    else
    {
      xmmword_254A5C3B0 = xmmword_254A5C3E0;
      unk_254A5C3C0 = unk_254A5C3F0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C3B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB68);
  }
}

void sub_20EBE7238(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB68);
  _Unwind_Resume(a1);
}

void sub_20EBE7250()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB70))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<std::vector<cv3d::kit::cf::ErrorRef>> (const cv3d::vio::data_verification::DataVerificationStatus &)]", qword_254A5C3C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C3C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB70);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BB78);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BB78))
    {
      sub_21023CD84((uint64_t)qword_254A5C3C8, (uint64_t)&xmmword_254A5C3E0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C3E0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BB78);
    }
  }
}

void sub_20EBE7320(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB78);
  _Unwind_Resume(a1);
}

void sub_20EBE7338(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB70);
  _Unwind_Resume(a1);
}

void sub_20EBE7350()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB80))
  {
    sub_20EBE7408();
    if (byte_254A5C43F < 0)
    {
      sub_20E860C04(&xmmword_254A5C3F8, (void *)xmmword_254A5C428, *((unint64_t *)&xmmword_254A5C428 + 1));
    }
    else
    {
      xmmword_254A5C3F8 = xmmword_254A5C428;
      unk_254A5C408 = unk_254A5C438;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C3F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB80);
  }
}

void sub_20EBE73F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB80);
  _Unwind_Resume(a1);
}

void sub_20EBE7408()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB88))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::kit::cf::ErrorRef> (const std::variant<cv3d::vio::frame_downsample_node_group::FrameDownsamplerError, cv3d::vio::frame_downsample_node_group::JasperFrameSelectorError, cv3d::vio::feature_detection_node_group::FeatureDetectionError> &)]", qword_254A5C410);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB88);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BB90);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BB90))
    {
      sub_21023CD84((uint64_t)qword_254A5C410, (uint64_t)&xmmword_254A5C428);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C428, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BB90);
    }
  }
}

void sub_20EBE74D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB90);
  _Unwind_Resume(a1);
}

void sub_20EBE74F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB88);
  _Unwind_Resume(a1);
}

void sub_20EBE7508()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BB98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BB98))
  {
    sub_20EBE75C0();
    if (byte_254A5C487 < 0)
    {
      sub_20E860C04(&xmmword_254A5C440, (void *)xmmword_254A5C470, *((unint64_t *)&xmmword_254A5C470 + 1));
    }
    else
    {
      xmmword_254A5C440 = xmmword_254A5C470;
      unk_254A5C450 = unk_254A5C480;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C440, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BB98);
  }
}

void sub_20EBE75A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BB98);
  _Unwind_Resume(a1);
}

void sub_20EBE75C0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBA0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::kit::cf::ErrorRef> (const cv3d::vio::slam_engine_node_group::SlamEngineNodeError &)]", qword_254A5C458);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C458, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBA0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BBA8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BBA8))
    {
      sub_21023CD84((uint64_t)qword_254A5C458, (uint64_t)&xmmword_254A5C470);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C470, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BBA8);
    }
  }
}

void sub_20EBE7690(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBA8);
  _Unwind_Resume(a1);
}

void sub_20EBE76A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBA0);
  _Unwind_Resume(a1);
}

void sub_20EBE76C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBB0))
  {
    sub_20EBE7778();
    if (byte_254A5C4CF < 0)
    {
      sub_20E860C04(&xmmword_254A5C488, (void *)xmmword_254A5C4B8, *((unint64_t *)&xmmword_254A5C4B8 + 1));
    }
    else
    {
      xmmword_254A5C488 = xmmword_254A5C4B8;
      unk_254A5C498 = unk_254A5C4C8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C488, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBB0);
  }
}

void sub_20EBE7760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBB0);
  _Unwind_Resume(a1);
}

void sub_20EBE7778()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBB8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::kit::cf::ErrorRef> (const cv3d::vio::user_anchor_node_group::UserAnchorNodeGroupError &)]", qword_254A5C4A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C4A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBB8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BBC0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BBC0))
    {
      sub_21023CD84((uint64_t)qword_254A5C4A0, (uint64_t)&xmmword_254A5C4B8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C4B8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BBC0);
    }
  }
}

void sub_20EBE7848(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBC0);
  _Unwind_Resume(a1);
}

void sub_20EBE7860(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBB8);
  _Unwind_Resume(a1);
}

void sub_20EBE7878()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBC8))
  {
    sub_20EBE7930();
    if (byte_254A5C517 < 0)
    {
      sub_20E860C04(&xmmword_254A5C4D0, (void *)xmmword_254A5C500, *((unint64_t *)&xmmword_254A5C500 + 1));
    }
    else
    {
      xmmword_254A5C4D0 = xmmword_254A5C500;
      unk_254A5C4E0 = unk_254A5C510;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C4D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBC8);
  }
}

void sub_20EBE7918(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBC8);
  _Unwind_Resume(a1);
}

void sub_20EBE7930()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBD0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::kit::cf::ErrorRef> (const cv3d::vio::mapping_io::MappingIONodeGroupError &)]", qword_254A5C4E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C4E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBD0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BBD8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BBD8))
    {
      sub_21023CD84((uint64_t)qword_254A5C4E8, (uint64_t)&xmmword_254A5C500);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C500, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BBD8);
    }
  }
}

void sub_20EBE7A00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBD8);
  _Unwind_Resume(a1);
}

void sub_20EBE7A18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBD0);
  _Unwind_Resume(a1);
}

void sub_20EBE7A30()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBE8))
  {
    sub_20EBE7BB0();
    v1 = byte_254A5C55F;
    if (byte_254A5C55F >= 0)
      v2 = byte_254A5C55F;
    else
      v2 = *((_QWORD *)&xmmword_254A5C548 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C538 = v2 + 6;
      unk_254A5C540 = v6 | 0x8000000000000000;
      qword_254A5C530 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C538 = 0;
      unk_254A5C540 = 0;
      qword_254A5C530 = 0x2074736E6F63;
      byte_254A5C547 = v2 + 6;
      v4 = (char *)&qword_254A5C530 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C530, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BBE8);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C548;
    else
      v8 = (__int128 *)xmmword_254A5C548;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBE7B98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBE8);
  _Unwind_Resume(a1);
}

void sub_20EBE7BB0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBF0))
  {
    sub_20EBE7C68();
    if (byte_254A5C577 < 0)
    {
      sub_20E860C04(&xmmword_254A5C548, (void *)qword_254A5C560, unk_254A5C568);
    }
    else
    {
      xmmword_254A5C548 = *(_OWORD *)&qword_254A5C560;
      unk_254A5C558 = unk_254A5C570;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C548, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBF0);
  }
}

void sub_20EBE7C50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BBF0);
  _Unwind_Resume(a1);
}

void sub_20EBE7C68()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BBF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BBF8))
  {
    sub_20EBE7F24(__p);
    sub_20EBE7D3C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BBF8);
  }
}

void sub_20EBE7CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BBF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BBF8);
  _Unwind_Resume(a1);
}

void sub_20EBE7D3C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC00))
  {
    sub_20E8610C0(v10, "std::vector");
    sub_20EBE8100((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C578, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC00);
  }
  if (byte_254A5C58F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C578, *((unint64_t *)&xmmword_254A5C578 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C578;
    v13 = unk_254A5C588;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C560, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE7EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BC00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BC00);
  _Unwind_Resume(a1);
}

void sub_20EBE7EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE7F24(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC88))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::vector<std::pair<unsigned long long, cva::SE3GroupStorage<double, cva::Matrix<double, 4, 4>>>>>]", qword_254A5C710);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C710, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC88);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BC90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC90))
  {
    v5 = sub_20E8A2354(qword_254A5C710, "<", 0);
    sub_20E89FC08(qword_254A5C710, 0, v5, qword_254A5C728);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C728, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BC98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC98))
  {
    sub_21023CD84((uint64_t)qword_254A5C728, (uint64_t)&xmmword_254A5C740);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C740, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC98);
  }
  if (byte_254A5C757 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C740, *((unint64_t *)&xmmword_254A5C740 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C740;
    __dst[2] = unk_254A5C750;
  }
}

void sub_20EBE80B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC98);
  _Unwind_Resume(a1);
}

void sub_20EBE80D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC90);
  _Unwind_Resume(a1);
}

void sub_20EBE80E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC88);
  _Unwind_Resume(a1);
}

void sub_20EBE8100(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC08);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC08))
  {
    sub_20EBE82D4();
    if (byte_254A5C5BF < 0)
    {
      sub_20E860C04(&xmmword_254A5C590, (void *)qword_254A5C5A8, unk_254A5C5B0);
    }
    else
    {
      xmmword_254A5C590 = *(_OWORD *)&qword_254A5C5A8;
      unk_254A5C5A0 = unk_254A5C5B8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C590, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC08);
  }
  if (byte_254A5C5A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C590, *((unint64_t *)&xmmword_254A5C590 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C590;
    v11 = unk_254A5C5A0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5C578, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE828C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC08);
  _Unwind_Resume(a1);
}

void sub_20EBE82A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE82D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BC10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC10))
  {
    sub_20EBE85F8(__p);
    sub_20EBE83A8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C5A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC10);
  }
}

void sub_20EBE8368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BC10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BC10);
  _Unwind_Resume(a1);
}

void sub_20EBE83A8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v10 = *(_OWORD *)"uint64";
  v11 = 0x600000000000000;
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC18))
  {
    sub_20EBE87D4();
    if (byte_254A5C5EF < 0)
    {
      sub_20E860C04(&xmmword_254A5C5C0, (void *)qword_254A5C5D8, unk_254A5C5E0);
    }
    else
    {
      xmmword_254A5C5C0 = *(_OWORD *)&qword_254A5C5D8;
      unk_254A5C5D0 = unk_254A5C5E8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C5C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC18);
  }
  if (byte_254A5C5D7 < 0)
  {
    sub_20E860C04(&v12, (void *)xmmword_254A5C5C0, *((unint64_t *)&xmmword_254A5C5C0 + 1));
  }
  else
  {
    v12 = xmmword_254A5C5C0;
    v13 = unk_254A5C5D0;
  }
  sub_20E877C80(&__p, (uint64_t)v10, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C5A8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v10[0]);
    return;
  }
  operator delete((void *)v12);
  if (SHIBYTE(v11) < 0)
    goto LABEL_17;
}

void sub_20EBE8580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_guard_abort(&qword_254A5BC18);
  if ((a18 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE85F8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC70))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::pair<unsigned long long, cva::SE3GroupStorage<double, cva::Matrix<double, 4, 4>>>]", qword_254A5C6C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C6C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BC78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC78))
  {
    v5 = sub_20E8A2354(qword_254A5C6C8, "<", 0);
    sub_20E89FC08(qword_254A5C6C8, 0, v5, qword_254A5C6E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C6E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BC80);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC80))
  {
    sub_21023CD84((uint64_t)qword_254A5C6E0, (uint64_t)&xmmword_254A5C6F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C6F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC80);
  }
  if (byte_254A5C70F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C6F8, *((unint64_t *)&xmmword_254A5C6F8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C6F8;
    __dst[2] = unk_254A5C708;
  }
}

void sub_20EBE878C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC80);
  _Unwind_Resume(a1);
}

void sub_20EBE87A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC78);
  _Unwind_Resume(a1);
}

void sub_20EBE87BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC70);
  _Unwind_Resume(a1);
}

void sub_20EBE87D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BC20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC20))
  {
    sub_20EBE8AF8(__p);
    sub_20EBE88A8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C5D8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC20);
  }
}

void sub_20EBE8868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BC20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BC20);
  _Unwind_Resume(a1);
}

void sub_20EBE88A8(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v10 = *(_OWORD *)"float64";
  v11 = 0x700000000000000;
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC28))
  {
    sub_20EBE8CD4();
    if (byte_254A5C61F < 0)
    {
      sub_20E860C04(&xmmword_254A5C5F0, (void *)qword_254A5C608, unk_254A5C610);
    }
    else
    {
      xmmword_254A5C5F0 = *(_OWORD *)&qword_254A5C608;
      unk_254A5C600 = unk_254A5C618;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C5F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC28);
  }
  if (byte_254A5C607 < 0)
  {
    sub_20E860C04(&v12, (void *)xmmword_254A5C5F0, *((unint64_t *)&xmmword_254A5C5F0 + 1));
  }
  else
  {
    v12 = xmmword_254A5C5F0;
    v13 = unk_254A5C600;
  }
  sub_20E877C80(&__p, (uint64_t)v10, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C5D8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(v10[0]);
    return;
  }
  operator delete((void *)v12);
  if (SHIBYTE(v11) < 0)
    goto LABEL_17;
}

void sub_20EBE8A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __cxa_guard_abort(&qword_254A5BC28);
  if ((a18 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE8AF8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC58))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cva::SE3GroupStorage<double, cva::Matrix<double, 4, 4>>]", qword_254A5C680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C680, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BC60);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC60))
  {
    v5 = sub_20E8A2354(qword_254A5C680, "<", 0);
    sub_20E89FC08(qword_254A5C680, 0, v5, qword_254A5C698);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C698, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC60);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BC68);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC68))
  {
    sub_21023CD84((uint64_t)qword_254A5C698, (uint64_t)&xmmword_254A5C6B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C6B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC68);
  }
  if (byte_254A5C6C7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C6B0, *((unint64_t *)&xmmword_254A5C6B0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C6B0;
    __dst[2] = unk_254A5C6C0;
  }
}

void sub_20EBE8C8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC68);
  _Unwind_Resume(a1);
}

void sub_20EBE8CA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC60);
  _Unwind_Resume(a1);
}

void sub_20EBE8CBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC58);
  _Unwind_Resume(a1);
}

void sub_20EBE8CD4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BC30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC30))
  {
    sub_20EBE90E8(__p);
    sub_20EBE8DA8((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C608, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC30);
  }
}

void sub_20EBE8D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BC30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BC30);
  _Unwind_Resume(a1);
}

void sub_20EBE8DA8(char *a1)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  unsigned __int8 v6;
  int64x2_t v7;
  int8x16_t v8;
  void **v9;
  void **v10;
  void *v11;
  void *__p;
  void **v13;
  void *v14[2];
  char v15;
  void *v16[2];
  uint64_t v17;
  __int128 v18;
  std::string::size_type v19;
  __int128 v20;
  std::string::size_type v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v16 = *(_OWORD *)"float64";
  v17 = 0x700000000000000;
  v2 = sub_20EA6BF74();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v19 = v2->__r_.__value_.__r.__words[2];
    v18 = v3;
  }
  v4 = sub_20EA6BF74();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v20, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v21 = v4->__r_.__value_.__r.__words[2];
    v20 = v5;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_254A5BC38);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC38))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = true]", v14);
    sub_21023CFB0((uint64_t)v14, (std::string *)&xmmword_254A5C620);
    if (v15 < 0)
      operator delete(v14[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C620, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC38);
  }
  if (byte_254A5C637 < 0)
  {
    sub_20E860C04(&v22, (void *)xmmword_254A5C620, *((unint64_t *)&xmmword_254A5C620 + 1));
  }
  else
  {
    v22 = xmmword_254A5C620;
    v23 = unk_254A5C630;
  }
  sub_20E877C80(&__p, (uint64_t)v16, 4uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C608, v7, v8);
  v9 = (void **)__p;
  if (__p)
  {
    v10 = v13;
    v11 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*(v10 - 3));
        v10 -= 3;
      }
      while (v10 != v9);
      v11 = __p;
    }
    v13 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)v22);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete((void *)v20);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(v16[0]);
    return;
  }
LABEL_26:
  operator delete((void *)v18);
  if (SHIBYTE(v17) < 0)
    goto LABEL_27;
}

void sub_20EBE9018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void **v41;

  if (a17 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A5BC38);
  while (1)
  {
    if (*((char *)v41 - 1) < 0)
      operator delete(*(v41 - 3));
    v41 -= 3;
    if (v41 == &a18)
      _Unwind_Resume(a1);
  }
}

void sub_20EBE90E8(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BC40);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC40))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cva::Matrix<double, 4, 4>]", qword_254A5C638);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C638, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC40);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BC48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC48))
  {
    v5 = sub_20E8A2354(qword_254A5C638, "<", 0);
    sub_20E89FC08(qword_254A5C638, 0, v5, qword_254A5C650);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C650, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC48);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BC50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BC50))
  {
    sub_21023CD84((uint64_t)qword_254A5C650, (uint64_t)&xmmword_254A5C668);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C668, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BC50);
  }
  if (byte_254A5C67F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C668, *((unint64_t *)&xmmword_254A5C668 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C668;
    __dst[2] = unk_254A5C678;
  }
}

void sub_20EBE927C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC50);
  _Unwind_Resume(a1);
}

void sub_20EBE9294(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC48);
  _Unwind_Resume(a1);
}

void sub_20EBE92AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BC40);
  _Unwind_Resume(a1);
}

void sub_20EBE92C4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCA0))
  {
    sub_20EBE937C();
    if (byte_254A5C79F < 0)
    {
      sub_20E860C04(&xmmword_254A5C758, (void *)xmmword_254A5C788, *((unint64_t *)&xmmword_254A5C788 + 1));
    }
    else
    {
      xmmword_254A5C758 = xmmword_254A5C788;
      unk_254A5C768 = unk_254A5C798;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C758, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCA0);
  }
}

void sub_20EBE9364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCA0);
  _Unwind_Resume(a1);
}

void sub_20EBE937C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCA8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<std::pair<unsigned long long, cva::SE3GroupStorage<double, cva::Matrix<double, 4, 4>>>> (std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>)]", qword_254A5C770);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C770, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCA8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BCB0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BCB0))
    {
      sub_21023CD84((uint64_t)qword_254A5C770, (uint64_t)&xmmword_254A5C788);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C788, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BCB0);
    }
  }
}

void sub_20EBE944C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCB0);
  _Unwind_Resume(a1);
}

void sub_20EBE9464(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCA8);
  _Unwind_Resume(a1);
}

void sub_20EBE947C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCC0))
  {
    sub_20EBE95FC();
    v1 = byte_254A5C7E7;
    if (byte_254A5C7E7 >= 0)
      v2 = byte_254A5C7E7;
    else
      v2 = *((_QWORD *)&xmmword_254A5C7D0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C7C0 = v2 + 6;
      unk_254A5C7C8 = v6 | 0x8000000000000000;
      qword_254A5C7B8 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C7C0 = 0;
      unk_254A5C7C8 = 0;
      qword_254A5C7B8 = 0x2074736E6F63;
      byte_254A5C7CF = v2 + 6;
      v4 = (char *)&qword_254A5C7B8 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C7B8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BCC0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C7D0;
    else
      v8 = (__int128 *)xmmword_254A5C7D0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBE95E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCC0);
  _Unwind_Resume(a1);
}

void sub_20EBE95FC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCC8))
  {
    sub_20EBE96B4();
    if (byte_254A5C7FF < 0)
    {
      sub_20E860C04(&xmmword_254A5C7D0, (void *)qword_254A5C7E8, unk_254A5C7F0);
    }
    else
    {
      xmmword_254A5C7D0 = *(_OWORD *)&qword_254A5C7E8;
      unk_254A5C7E0 = unk_254A5C7F8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C7D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCC8);
  }
}

void sub_20EBE969C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCC8);
  _Unwind_Resume(a1);
}

void sub_20EBE96B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCD0))
  {
    sub_20EBE9970(__p);
    sub_20EBE9788((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C7E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCD0);
  }
}

void sub_20EBE9748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BCD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BCD0);
  _Unwind_Resume(a1);
}

void sub_20EBE9788(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *v10[2];
  char v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BCD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCD8))
  {
    sub_20E8610C0(v10, "std::shared_ptr");
    sub_20EBE9B4C((char *)v10);
    if (v11 < 0)
      operator delete(v10[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C800, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCD8);
  }
  if (byte_254A5C817 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C800, *((unint64_t *)&xmmword_254A5C800 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C800;
    v13 = unk_254A5C810;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C7E8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE9900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BCD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BCD8);
  _Unwind_Resume(a1);
}

void sub_20EBE9944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_20E89FB98((void **)&a9);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE9970(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BCF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCF8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<std::shared_ptr<cv3d::vio::metadata::VIOPoseMetadata>>]", qword_254A5C860);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C860, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BD00);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD00))
  {
    v5 = sub_20E8A2354(qword_254A5C860, "<", 0);
    sub_20E89FC08(qword_254A5C860, 0, v5, qword_254A5C878);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C878, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD00);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BD08);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD08))
  {
    sub_21023CD84((uint64_t)qword_254A5C878, (uint64_t)&xmmword_254A5C890);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C890, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD08);
  }
  if (byte_254A5C8A7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C890, *((unint64_t *)&xmmword_254A5C890 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C890;
    __dst[2] = unk_254A5C8A0;
  }
}

void sub_20EBE9B04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD08);
  _Unwind_Resume(a1);
}

void sub_20EBE9B1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD00);
  _Unwind_Resume(a1);
}

void sub_20EBE9B34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCF8);
  _Unwind_Resume(a1);
}

void sub_20EBE9B4C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BCE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCE0))
  {
    sub_20EBE9D20();
    if (byte_254A5C85F < 0)
    {
      sub_20E860C04(&xmmword_254A5C818, (void *)xmmword_254A5C848, *((unint64_t *)&xmmword_254A5C848 + 1));
    }
    else
    {
      xmmword_254A5C818 = xmmword_254A5C848;
      unk_254A5C828 = unk_254A5C858;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C818, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCE0);
  }
  if (byte_254A5C82F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C818, *((unint64_t *)&xmmword_254A5C818 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C818;
    v11 = unk_254A5C828;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&xmmword_254A5C800, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBE9CD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCE0);
  _Unwind_Resume(a1);
}

void sub_20EBE9CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBE9D20()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BCE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BCE8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::metadata::VIOPoseMetadata]", qword_254A5C830);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C830, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BCE8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BCF0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BCF0))
    {
      sub_21023CD84((uint64_t)qword_254A5C830, (uint64_t)&xmmword_254A5C848);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C848, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BCF0);
    }
  }
}

void sub_20EBE9DF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCF0);
  _Unwind_Resume(a1);
}

void sub_20EBE9E08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BCE8);
  _Unwind_Resume(a1);
}

void sub_20EBE9E20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD10))
  {
    sub_20EBE9ED8();
    if (byte_254A5C8EF < 0)
    {
      sub_20E860C04(&xmmword_254A5C8A8, (void *)xmmword_254A5C8D8, *((unint64_t *)&xmmword_254A5C8D8 + 1));
    }
    else
    {
      xmmword_254A5C8A8 = xmmword_254A5C8D8;
      unk_254A5C8B8 = unk_254A5C8E8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C8A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD10);
  }
}

void sub_20EBE9EC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD10);
  _Unwind_Resume(a1);
}

void sub_20EBE9ED8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::shared_ptr<cv3d::vio::metadata::VIOPoseMetadata> (const std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata> &)]", qword_254A5C8C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C8C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BD20);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BD20))
    {
      sub_21023CD84((uint64_t)qword_254A5C8C0, (uint64_t)&xmmword_254A5C8D8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C8D8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BD20);
    }
  }
}

void sub_20EBE9FA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD20);
  _Unwind_Resume(a1);
}

void sub_20EBE9FC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD18);
  _Unwind_Resume(a1);
}

void sub_20EBE9FD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD28))
  {
    sub_20EBEA090();
    if (byte_254A5C937 < 0)
    {
      sub_20E860C04(&xmmword_254A5C8F0, (void *)xmmword_254A5C920, *((unint64_t *)&xmmword_254A5C920 + 1));
    }
    else
    {
      xmmword_254A5C8F0 = xmmword_254A5C920;
      unk_254A5C900 = unk_254A5C930;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C8F0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD28);
  }
}

void sub_20EBEA078(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD28);
  _Unwind_Resume(a1);
}

void sub_20EBEA090()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD30))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata> &)]", qword_254A5C908);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C908, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BD38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BD38))
    {
      sub_21023CD84((uint64_t)qword_254A5C908, (uint64_t)&xmmword_254A5C920);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C920, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BD38);
    }
  }
}

void sub_20EBEA160(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD38);
  _Unwind_Resume(a1);
}

void sub_20EBEA178(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD30);
  _Unwind_Resume(a1);
}

void sub_20EBEA190()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD48))
  {
    sub_20EBEA310();
    v1 = byte_254A5C97F;
    if (byte_254A5C97F >= 0)
      v2 = byte_254A5C97F;
    else
      v2 = *((_QWORD *)&xmmword_254A5C968 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5C958 = v2 + 6;
      unk_254A5C960 = v6 | 0x8000000000000000;
      qword_254A5C950 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5C958 = 0;
      unk_254A5C960 = 0;
      qword_254A5C950 = 0x2074736E6F63;
      byte_254A5C967 = v2 + 6;
      v4 = (char *)&qword_254A5C950 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C950, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BD48);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5C968;
    else
      v8 = (__int128 *)xmmword_254A5C968;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBEA2F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD48);
  _Unwind_Resume(a1);
}

void sub_20EBEA310()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD50))
  {
    sub_20EBEA3C8();
    if (byte_254A5C997 < 0)
    {
      sub_20E860C04(&xmmword_254A5C968, (void *)qword_254A5C980, unk_254A5C988);
    }
    else
    {
      xmmword_254A5C968 = *(_OWORD *)&qword_254A5C980;
      unk_254A5C978 = unk_254A5C990;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C968, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD50);
  }
}

void sub_20EBEA3B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD50);
  _Unwind_Resume(a1);
}

void sub_20EBEA3C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD58))
  {
    sub_20EBEA670(__p);
    sub_20EBEA49C((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5C980, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD58);
  }
}

void sub_20EBEA45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BD58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BD58);
  _Unwind_Resume(a1);
}

void sub_20EBEA49C(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BD60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD60))
  {
    sub_20EBEA854();
    if (byte_254A5C9DF < 0)
    {
      sub_20E860C04(&xmmword_254A5C998, (void *)xmmword_254A5C9C8, *((unint64_t *)&xmmword_254A5C9C8 + 1));
    }
    else
    {
      xmmword_254A5C998 = xmmword_254A5C9C8;
      unk_254A5C9A8 = unk_254A5C9D8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C998, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD60);
  }
  if (byte_254A5C9AF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5C998, *((unint64_t *)&xmmword_254A5C998 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5C998;
    v11 = unk_254A5C9A8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5C980, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEA628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD60);
  _Unwind_Resume(a1);
}

void sub_20EBEA644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEA670(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BD78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::slam_engine_node_group::OptimizeMapAndTrajectoryResult>]", qword_254A5C9E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C9E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BD80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD80))
  {
    v5 = sub_20E8A2354(qword_254A5C9E0, "<", 0);
    sub_20E89FC08(qword_254A5C9E0, 0, v5, qword_254A5C9F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C9F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD80);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BD88);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD88))
  {
    sub_21023CD84((uint64_t)qword_254A5C9F8, (uint64_t)&xmmword_254A5CA10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CA10, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD88);
  }
  if (byte_254A5CA27 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CA10, *((unint64_t *)&xmmword_254A5CA10 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CA10;
    __dst[2] = unk_254A5CA20;
  }
}

void sub_20EBEA80C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD88);
  _Unwind_Resume(a1);
}

void sub_20EBEA824(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD80);
  _Unwind_Resume(a1);
}

void sub_20EBEA83C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD78);
  _Unwind_Resume(a1);
}

void sub_20EBEA854()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD68))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::slam_engine_node_group::OptimizeMapAndTrajectoryResult]", qword_254A5C9B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5C9B0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD68);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BD70);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BD70))
    {
      sub_21023CD84((uint64_t)qword_254A5C9B0, (uint64_t)&xmmword_254A5C9C8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5C9C8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BD70);
    }
  }
}

void sub_20EBEA924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD70);
  _Unwind_Resume(a1);
}

void sub_20EBEA93C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD68);
  _Unwind_Resume(a1);
}

void sub_20EBEA954()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD90))
  {
    sub_20EBEAA10();
    if (byte_254A5CA6F < 0)
    {
      sub_20E860C04(&xmmword_254A5CA28, (void *)xmmword_254A5CA58, *((unint64_t *)&xmmword_254A5CA58 + 1));
    }
    else
    {
      xmmword_254A5CA28 = xmmword_254A5CA58;
      unk_254A5CA38 = unk_254A5CA68;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CA28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD90);
  }
}

void sub_20EBEA9F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD90);
  _Unwind_Resume(a1);
}

void sub_20EBEAA10()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BD98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BD98))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::slam_engine_node_group::OptimizeMapAndTrajectoryResult (const std::shared_ptr<cv3d::vio::mapping_types::MapData> &)]", qword_254A5CA40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CA40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BD98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BDA0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BDA0))
    {
      sub_21023CD84((uint64_t)qword_254A5CA40, (uint64_t)&xmmword_254A5CA58);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CA58, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BDA0);
    }
  }
}

void sub_20EBEAAE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDA0);
  _Unwind_Resume(a1);
}

void sub_20EBEAB00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BD98);
  _Unwind_Resume(a1);
}

void sub_20EBEAB18()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BDB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDB0))
  {
    sub_20EBEAC90();
    v1 = byte_254A5CAB7;
    if (byte_254A5CAB7 >= 0)
      v2 = byte_254A5CAB7;
    else
      v2 = *((_QWORD *)&xmmword_254A5CAA0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5CA90 = v2 + 6;
      unk_254A5CA98 = v6 | 0x8000000000000000;
      qword_254A5CA88 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5CA90 = 0;
      unk_254A5CA98 = 0;
      qword_254A5CA88 = 0x2074736E6F63;
      byte_254A5CA9F = v2 + 6;
      v4 = (char *)&qword_254A5CA88 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CA88, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BDB0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5CAA0;
    else
      v8 = (__int128 *)xmmword_254A5CAA0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBEAC78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDB0);
  _Unwind_Resume(a1);
}

void sub_20EBEAC90()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BDB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDB8))
  {
    sub_20EBEAD4C();
    if (byte_254A5CACF < 0)
    {
      sub_20E860C04(&xmmword_254A5CAA0, (void *)qword_254A5CAB8, unk_254A5CAC0);
    }
    else
    {
      xmmword_254A5CAA0 = *(_OWORD *)&qword_254A5CAB8;
      unk_254A5CAB0 = unk_254A5CAC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CAA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDB8);
  }
}

void sub_20EBEAD34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDB8);
  _Unwind_Resume(a1);
}

void sub_20EBEAD4C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BDC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDC0))
  {
    sub_20EBEAFFC(__p);
    sub_20EBEAE24((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CAB8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDC0);
  }
}

void sub_20EBEADE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BDC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BDC0);
  _Unwind_Resume(a1);
}

void sub_20EBEAE24(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BDC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDC8))
  {
    sub_20EBEB1D8();
    if (byte_254A5CB17 < 0)
    {
      sub_20E860C04(&xmmword_254A5CAD0, (void *)xmmword_254A5CB00, *((unint64_t *)&xmmword_254A5CB00 + 1));
    }
    else
    {
      xmmword_254A5CAD0 = xmmword_254A5CB00;
      unk_254A5CAE0 = unk_254A5CB10;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CAD0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDC8);
  }
  if (byte_254A5CAE7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CAD0, *((unint64_t *)&xmmword_254A5CAD0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CAD0;
    v11 = unk_254A5CAE0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5CAB8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEAFB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDC8);
  _Unwind_Resume(a1);
}

void sub_20EBEAFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEAFFC(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BDE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::feature_detection_node_group::LineEnablerOutput>]", qword_254A5CB18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CB18, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BDE8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDE8))
  {
    v5 = sub_20E8A2354(qword_254A5CB18, "<", 0);
    sub_20E89FC08(qword_254A5CB18, 0, v5, qword_254A5CB30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CB30, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDE8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BDF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDF0))
  {
    sub_21023CD84((uint64_t)qword_254A5CB30, (uint64_t)&xmmword_254A5CB48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CB48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDF0);
  }
  if (byte_254A5CB5F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CB48, *((unint64_t *)&xmmword_254A5CB48 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CB48;
    __dst[2] = unk_254A5CB58;
  }
}

void sub_20EBEB190(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDF0);
  _Unwind_Resume(a1);
}

void sub_20EBEB1A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDE8);
  _Unwind_Resume(a1);
}

void sub_20EBEB1C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDE0);
  _Unwind_Resume(a1);
}

void sub_20EBEB1D8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BDD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDD0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection_node_group::LineEnablerOutput]", qword_254A5CAE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CAE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDD0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BDD8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BDD8))
    {
      sub_21023CD84((uint64_t)qword_254A5CAE8, (uint64_t)&xmmword_254A5CB00);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CB00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BDD8);
    }
  }
}

void sub_20EBEB2B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDD8);
  _Unwind_Resume(a1);
}

void sub_20EBEB2C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDD0);
  _Unwind_Resume(a1);
}

void sub_20EBEB2E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BDF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BDF8))
  {
    sub_20EBEB39C();
    if (byte_254A5CBA7 < 0)
    {
      sub_20E860C04(&xmmword_254A5CB60, (void *)xmmword_254A5CB90, *((unint64_t *)&xmmword_254A5CB90 + 1));
    }
    else
    {
      xmmword_254A5CB60 = xmmword_254A5CB90;
      unk_254A5CB70 = unk_254A5CBA0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CB60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BDF8);
  }
}

void sub_20EBEB384(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BDF8);
  _Unwind_Resume(a1);
}

void sub_20EBEB39C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE00))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection_node_group::LineEnablerOutput (const cv3d::vio::feature_detection_node_group::LineTrackingEnablerVIOHealthStatistics &)]", qword_254A5CB78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CB78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BE08);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BE08))
    {
      sub_21023CD84((uint64_t)qword_254A5CB78, (uint64_t)&xmmword_254A5CB90);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CB90, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BE08);
    }
  }
}

void sub_20EBEB474(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE08);
  _Unwind_Resume(a1);
}

void sub_20EBEB48C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE00);
  _Unwind_Resume(a1);
}

void sub_20EBEB4A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE10))
  {
    sub_20EBEB560();
    if (byte_254A5CBEF < 0)
    {
      sub_20E860C04(&xmmword_254A5CBA8, (void *)xmmword_254A5CBD8, *((unint64_t *)&xmmword_254A5CBD8 + 1));
    }
    else
    {
      xmmword_254A5CBA8 = xmmword_254A5CBD8;
      unk_254A5CBB8 = unk_254A5CBE8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CBA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE10);
  }
}

void sub_20EBEB548(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE10);
  _Unwind_Resume(a1);
}

void sub_20EBEB560()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::odometry::LineTrackingEnablerConfig &)]", qword_254A5CBC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CBC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BE20);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BE20))
    {
      sub_21023CD84((uint64_t)qword_254A5CBC0, (uint64_t)&xmmword_254A5CBD8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CBD8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BE20);
    }
  }
}

void sub_20EBEB638(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE20);
  _Unwind_Resume(a1);
}

void sub_20EBEB650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE18);
  _Unwind_Resume(a1);
}

void sub_20EBEB668()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE28))
  {
    sub_20EBEB724();
    if (byte_254A5CC37 < 0)
    {
      sub_20E860C04(&xmmword_254A5CBF0, (void *)xmmword_254A5CC20, *((unint64_t *)&xmmword_254A5CC20 + 1));
    }
    else
    {
      xmmword_254A5CBF0 = xmmword_254A5CC20;
      unk_254A5CC00 = unk_254A5CC30;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CBF0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE28);
  }
}

void sub_20EBEB70C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE28);
  _Unwind_Resume(a1);
}

void sub_20EBEB724()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE30))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = void (const cv3d::vio::odometry::LineEnablerType &)]", qword_254A5CC08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CC08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BE38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BE38))
    {
      sub_21023CD84((uint64_t)qword_254A5CC08, (uint64_t)&xmmword_254A5CC20);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CC20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BE38);
    }
  }
}

void sub_20EBEB7FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE38);
  _Unwind_Resume(a1);
}

void sub_20EBEB814(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE30);
  _Unwind_Resume(a1);
}

void sub_20EBEB82C()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE48))
  {
    sub_20EBEB9A4();
    v1 = byte_254A5CC7F;
    if (byte_254A5CC7F >= 0)
      v2 = byte_254A5CC7F;
    else
      v2 = *((_QWORD *)&xmmword_254A5CC68 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5CC58 = v2 + 6;
      unk_254A5CC60 = v6 | 0x8000000000000000;
      qword_254A5CC50 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5CC58 = 0;
      unk_254A5CC60 = 0;
      qword_254A5CC50 = 0x2074736E6F63;
      byte_254A5CC67 = v2 + 6;
      v4 = (char *)&qword_254A5CC50 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CC50, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BE48);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5CC68;
    else
      v8 = (__int128 *)xmmword_254A5CC68;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBEB98C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE48);
  _Unwind_Resume(a1);
}

void sub_20EBEB9A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE50))
  {
    sub_20EBEBA60();
    if (byte_254A5CC97 < 0)
    {
      sub_20E860C04(&xmmword_254A5CC68, (void *)qword_254A5CC80, unk_254A5CC88);
    }
    else
    {
      xmmword_254A5CC68 = *(_OWORD *)&qword_254A5CC80;
      unk_254A5CC78 = unk_254A5CC90;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CC68, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE50);
  }
}

void sub_20EBEBA48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE50);
  _Unwind_Resume(a1);
}

void sub_20EBEBA60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE58))
  {
    sub_20EBEBD10(__p);
    sub_20EBEBB38((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CC80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE58);
  }
}

void sub_20EBEBAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BE58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BE58);
  _Unwind_Resume(a1);
}

void sub_20EBEBB38(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BE60);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE60))
  {
    sub_20EBEBEEC();
    if (byte_254A5CCDF < 0)
    {
      sub_20E860C04(&xmmword_254A5CC98, (void *)xmmword_254A5CCC8, *((unint64_t *)&xmmword_254A5CCC8 + 1));
    }
    else
    {
      xmmword_254A5CC98 = xmmword_254A5CCC8;
      unk_254A5CCA8 = unk_254A5CCD8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CC98, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE60);
  }
  if (byte_254A5CCAF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CC98, *((unint64_t *)&xmmword_254A5CC98 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CC98;
    v11 = unk_254A5CCA8;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5CC80, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEBCC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE60);
  _Unwind_Resume(a1);
}

void sub_20EBEBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEBD10(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BE78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::feature_detection_node_group::LineTrackingEnablerVIOHealthStatistics>]", qword_254A5CCE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CCE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BE80);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE80))
  {
    v5 = sub_20E8A2354(qword_254A5CCE0, "<", 0);
    sub_20E89FC08(qword_254A5CCE0, 0, v5, qword_254A5CCF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CCF8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE80);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BE88);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE88))
  {
    sub_21023CD84((uint64_t)qword_254A5CCF8, (uint64_t)&xmmword_254A5CD10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CD10, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE88);
  }
  if (byte_254A5CD27 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CD10, *((unint64_t *)&xmmword_254A5CD10 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CD10;
    __dst[2] = unk_254A5CD20;
  }
}

void sub_20EBEBEA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE88);
  _Unwind_Resume(a1);
}

void sub_20EBEBEBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE80);
  _Unwind_Resume(a1);
}

void sub_20EBEBED4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE78);
  _Unwind_Resume(a1);
}

void sub_20EBEBEEC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE68))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection_node_group::LineTrackingEnablerVIOHealthStatistics]", qword_254A5CCB0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CCB0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE68);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BE70);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BE70))
    {
      sub_21023CD84((uint64_t)qword_254A5CCB0, (uint64_t)&xmmword_254A5CCC8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CCC8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BE70);
    }
  }
}

void sub_20EBEBFC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE70);
  _Unwind_Resume(a1);
}

void sub_20EBEBFDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE68);
  _Unwind_Resume(a1);
}

void sub_20EBEBFF4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE90))
  {
    sub_20EBEC0B0();
    if (byte_254A5CD6F < 0)
    {
      sub_20E860C04(&xmmword_254A5CD28, (void *)xmmword_254A5CD58, *((unint64_t *)&xmmword_254A5CD58 + 1));
    }
    else
    {
      xmmword_254A5CD28 = xmmword_254A5CD58;
      unk_254A5CD38 = unk_254A5CD68;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CD28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE90);
  }
}

void sub_20EBEC098(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE90);
  _Unwind_Resume(a1);
}

void sub_20EBEC0B0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BE98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BE98))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::feature_detection_node_group::LineTrackingEnablerVIOHealthStatistics (std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>)]", qword_254A5CD40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CD40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BE98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BEA0);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BEA0))
    {
      sub_21023CD84((uint64_t)qword_254A5CD40, (uint64_t)&xmmword_254A5CD58);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CD58, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BEA0);
    }
  }
}

void sub_20EBEC188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEA0);
  _Unwind_Resume(a1);
}

void sub_20EBEC1A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BE98);
  _Unwind_Resume(a1);
}

void sub_20EBEC1B8()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BEB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEB0))
  {
    sub_20EBEC330();
    v1 = byte_254A5CDB7;
    if (byte_254A5CDB7 >= 0)
      v2 = byte_254A5CDB7;
    else
      v2 = *((_QWORD *)&xmmword_254A5CDA0 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5CD90 = v2 + 6;
      unk_254A5CD98 = v6 | 0x8000000000000000;
      qword_254A5CD88 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5CD90 = 0;
      unk_254A5CD98 = 0;
      qword_254A5CD88 = 0x2074736E6F63;
      byte_254A5CD9F = v2 + 6;
      v4 = (char *)&qword_254A5CD88 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CD88, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BEB0);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5CDA0;
    else
      v8 = (__int128 *)xmmword_254A5CDA0;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBEC318(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEB0);
  _Unwind_Resume(a1);
}

void sub_20EBEC330()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BEB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEB8))
  {
    sub_20EBEC3EC();
    if (byte_254A5CDCF < 0)
    {
      sub_20E860C04(&xmmword_254A5CDA0, (void *)qword_254A5CDB8, unk_254A5CDC0);
    }
    else
    {
      xmmword_254A5CDA0 = *(_OWORD *)&qword_254A5CDB8;
      unk_254A5CDB0 = unk_254A5CDC8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CDA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEB8);
  }
}

void sub_20EBEC3D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEB8);
  _Unwind_Resume(a1);
}

void sub_20EBEC3EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BEC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEC0))
  {
    sub_20EBEC69C(__p);
    sub_20EBEC4C4((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5CDB8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEC0);
  }
}

void sub_20EBEC484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BEC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BEC0);
  _Unwind_Resume(a1);
}

void sub_20EBEC4C4(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BEC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEC8))
  {
    sub_20EBEC878();
    if (byte_254A5CE17 < 0)
    {
      sub_20E860C04(&xmmword_254A5CDD0, (void *)xmmword_254A5CE00, *((unint64_t *)&xmmword_254A5CE00 + 1));
    }
    else
    {
      xmmword_254A5CDD0 = xmmword_254A5CE00;
      unk_254A5CDE0 = unk_254A5CE10;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CDD0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEC8);
  }
  if (byte_254A5CDE7 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CDD0, *((unint64_t *)&xmmword_254A5CDD0 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CDD0;
    v11 = unk_254A5CDE0;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5CDB8, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEC654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEC8);
  _Unwind_Resume(a1);
}

void sub_20EBEC670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEC69C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BEE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::frame_downsample_node_group::JasperFrameSelectorEnableInfo>]", qword_254A5CE18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CE18, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BEE8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEE8))
  {
    v5 = sub_20E8A2354(qword_254A5CE18, "<", 0);
    sub_20E89FC08(qword_254A5CE18, 0, v5, qword_254A5CE30);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CE30, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEE8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BEF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEF0))
  {
    sub_21023CD84((uint64_t)qword_254A5CE30, (uint64_t)&xmmword_254A5CE48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CE48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEF0);
  }
  if (byte_254A5CE5F < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5CE48, *((unint64_t *)&xmmword_254A5CE48 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5CE48;
    __dst[2] = unk_254A5CE58;
  }
}

void sub_20EBEC830(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEF0);
  _Unwind_Resume(a1);
}

void sub_20EBEC848(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEE8);
  _Unwind_Resume(a1);
}

void sub_20EBEC860(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEE0);
  _Unwind_Resume(a1);
}

void sub_20EBEC878()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BED0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BED0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::frame_downsample_node_group::JasperFrameSelectorEnableInfo]", qword_254A5CDE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CDE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BED0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BED8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BED8))
    {
      sub_21023CD84((uint64_t)qword_254A5CDE8, (uint64_t)&xmmword_254A5CE00);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CE00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BED8);
    }
  }
}

void sub_20EBEC950(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BED8);
  _Unwind_Resume(a1);
}

void sub_20EBEC968(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BED0);
  _Unwind_Resume(a1);
}

void sub_20EBEC980()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BEF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BEF8))
  {
    sub_20EBECA3C();
    if (byte_254A5CEA7 < 0)
    {
      sub_20E860C04(&xmmword_254A5CE60, (void *)xmmword_254A5CE90, *((unint64_t *)&xmmword_254A5CE90 + 1));
    }
    else
    {
      xmmword_254A5CE60 = xmmword_254A5CE90;
      unk_254A5CE70 = unk_254A5CEA0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CE60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BEF8);
  }
}

void sub_20EBECA24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BEF8);
  _Unwind_Resume(a1);
}

void sub_20EBECA3C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF00))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::frame_downsample_node_group::JasperFrameSelectorEnableInfo (std::shared_ptr<const cv3d::vio::odometry_engine::VIOMetadata>)]", qword_254A5CE78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CE78, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF00);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF08);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF08))
    {
      sub_21023CD84((uint64_t)qword_254A5CE78, (uint64_t)&xmmword_254A5CE90);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CE90, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF08);
    }
  }
}

void sub_20EBECB14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF08);
  _Unwind_Resume(a1);
}

void sub_20EBECB2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF00);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBECB44()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50A80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50A80))
  {
    v2 = sub_20EBECC88();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50A68;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50A70 = v5 + 1;
      unk_254A50A78 = v9 | 0x8000000000000000;
      qword_254A50A68 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50A70 = 0;
      unk_254A50A78 = 0;
      qword_254A50A68 = 0;
      byte_254A50A7F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50A68, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50A80);
        return &qword_254A50A68;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50A68;
}

void sub_20EBECC70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50A80);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBECC88()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50AA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50AA0))
  {
    v2 = sub_20EBECE00();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50A90 = v5 + 6;
      unk_254A50A98 = v9 | 0x8000000000000000;
      qword_254A50A88 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50A90 = 0;
      unk_254A50A98 = 0;
      qword_254A50A88 = 0x2074736E6F63;
      byte_254A50A9F = v5 + 6;
      v7 = (char *)&qword_254A50A88 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50A88, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50AA0);
        return &qword_254A50A88;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50A88;
}

void sub_20EBECDE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50AA0);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBECE00()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50AC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50AC0))
    return &xmmword_254A50AA8;
  v2 = sub_20EBECEDC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50AA8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50AB8 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50AA8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50AA8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50AC0);
  return &xmmword_254A50AA8;
}

void sub_20EBECEC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50AC0);
  _Unwind_Resume(a1);
}

std::string *sub_20EBECEDC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50AE0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50AE0))
    return &stru_254A50AC8;
  sub_20EBED0DC((uint64_t)__p);
  sub_20EBECFCC((char *)__p, &stru_254A50AC8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50AC8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50AE0);
  return &stru_254A50AC8;
}

void sub_20EBECF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50AE0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50AE0);
  _Unwind_Resume(a1);
}

void sub_20EBECFCC(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"uint64";
  v12 = 0x600000000000000;
  sub_20E877C80(&__p, (uint64_t)v11, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20EBED0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBED0DC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50B00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50B00))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<unsigned long long>]", qword_254A50AE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50AE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50B00);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50B20);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50B20))
  {
    v5 = sub_20E8A2354(qword_254A50AE8, "<", 0);
    sub_20E89FC08(qword_254A50AE8, 0, v5, qword_254A50B08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50B08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50B20);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50B40);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50B40))
  {
    sub_21023CD84((uint64_t)qword_254A50B08, (uint64_t)&xmmword_254A50B28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50B28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50B40);
  }
  if (byte_254A50B3F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50B28, *((unint64_t *)&xmmword_254A50B28 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50B28;
    *(_QWORD *)(a1 + 16) = unk_254A50B38;
  }
}

void sub_20EBED278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50B40);
  _Unwind_Resume(a1);
}

void sub_20EBED290(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50B20);
  _Unwind_Resume(a1);
}

void sub_20EBED2A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50B00);
  _Unwind_Resume(a1);
}

void sub_20EBED2C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF10))
  {
    sub_20EBED37C();
    if (byte_254A5CEEF < 0)
    {
      sub_20E860C04(&xmmword_254A5CEA8, (void *)xmmword_254A5CED8, *((unint64_t *)&xmmword_254A5CED8 + 1));
    }
    else
    {
      xmmword_254A5CEA8 = xmmword_254A5CED8;
      unk_254A5CEB8 = unk_254A5CEE8;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CEA8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF10);
  }
}

void sub_20EBED364(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF10);
  _Unwind_Resume(a1);
}

void sub_20EBED37C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF18))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = unsigned long long (const cv3d::kit::capi::Block<void (^)(const CV3DSLAMStateContext *)> &)]", qword_254A5CEC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CEC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF20);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF20))
    {
      sub_21023CD84((uint64_t)qword_254A5CEC0, (uint64_t)&xmmword_254A5CED8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CED8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF20);
    }
  }
}

void sub_20EBED454(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF20);
  _Unwind_Resume(a1);
}

void sub_20EBED46C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF18);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBED484()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50B60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50B60))
  {
    v2 = sub_20EBED5C8();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50B48;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50B50 = v5 + 1;
      unk_254A50B58 = v9 | 0x8000000000000000;
      qword_254A50B48 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50B50 = 0;
      unk_254A50B58 = 0;
      qword_254A50B48 = 0;
      byte_254A50B5F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50B48, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50B60);
        return &qword_254A50B48;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50B48;
}

void sub_20EBED5B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50B60);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBED5C8()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50B80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50B80))
  {
    v2 = sub_20EBED740();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50B70 = v5 + 6;
      unk_254A50B78 = v9 | 0x8000000000000000;
      qword_254A50B68 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50B70 = 0;
      unk_254A50B78 = 0;
      qword_254A50B68 = 0x2074736E6F63;
      byte_254A50B7F = v5 + 6;
      v7 = (char *)&qword_254A50B68 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50B68, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50B80);
        return &qword_254A50B68;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50B68;
}

void sub_20EBED728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50B80);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBED740()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50BA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50BA0))
    return &xmmword_254A50B88;
  v2 = sub_20EBED81C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50B88, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50B98 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50B88 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50B88, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50BA0);
  return &xmmword_254A50B88;
}

void sub_20EBED804(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50BA0);
  _Unwind_Resume(a1);
}

std::string *sub_20EBED81C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50BC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50BC0))
    return &stru_254A50BA8;
  sub_20EBEDA1C((uint64_t)__p);
  sub_20EBED90C((char *)__p, &stru_254A50BA8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50BA8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50BC0);
  return &stru_254A50BA8;
}

void sub_20EBED8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50BC0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50BC0);
  _Unwind_Resume(a1);
}

void sub_20EBED90C(char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v4;
  int8x16_t v5;
  void **v6;
  void **v7;
  void *v8;
  void *__p;
  void **v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v11 = *(_OWORD *)"BOOL";
  v12 = 0x400000000000000;
  sub_20E877C80(&__p, (uint64_t)v11, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v4, v5);
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v10;
    v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_20EBED9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEDA1C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50BE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50BE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<BOOL>]", qword_254A50BC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50BC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50BE0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50C00);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50C00))
  {
    v5 = sub_20E8A2354(qword_254A50BC8, "<", 0);
    sub_20E89FC08(qword_254A50BC8, 0, v5, qword_254A50BE8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50BE8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50C00);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50C20);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50C20))
  {
    sub_21023CD84((uint64_t)qword_254A50BE8, (uint64_t)&xmmword_254A50C08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50C08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50C20);
  }
  if (byte_254A50C1F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50C08, *((unint64_t *)&xmmword_254A50C08 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50C08;
    *(_QWORD *)(a1 + 16) = unk_254A50C18;
  }
}

void sub_20EBEDBB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50C20);
  _Unwind_Resume(a1);
}

void sub_20EBEDBD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50C00);
  _Unwind_Resume(a1);
}

void sub_20EBEDBE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50BE0);
  _Unwind_Resume(a1);
}

void sub_20EBEDC00()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF28))
  {
    sub_20EBEDCBC();
    if (byte_254A5CF37 < 0)
    {
      sub_20E860C04(&xmmword_254A5CEF0, (void *)xmmword_254A5CF20, *((unint64_t *)&xmmword_254A5CF20 + 1));
    }
    else
    {
      xmmword_254A5CEF0 = xmmword_254A5CF20;
      unk_254A5CF00 = unk_254A5CF30;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CEF0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF28);
  }
}

void sub_20EBEDCA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF28);
  _Unwind_Resume(a1);
}

void sub_20EBEDCBC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF30))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = BOOL (const unsigned long long &)]", qword_254A5CF08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CF08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF30);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF38);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF38))
    {
      sub_21023CD84((uint64_t)qword_254A5CF08, (uint64_t)&xmmword_254A5CF20);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CF20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF38);
    }
  }
}

void sub_20EBEDD94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF38);
  _Unwind_Resume(a1);
}

void sub_20EBEDDAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF30);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBEDDC4()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50940);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50940))
  {
    v2 = sub_20EBEDF08();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50928;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50930 = v5 + 1;
      unk_254A50938 = v9 | 0x8000000000000000;
      qword_254A50928 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50930 = 0;
      unk_254A50938 = 0;
      qword_254A50928 = 0;
      byte_254A5093F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50928, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50940);
        return &qword_254A50928;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50928;
}

void sub_20EBEDEF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50940);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBEDF08()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50960);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50960))
  {
    v2 = sub_20EBEE080();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50950 = v5 + 6;
      unk_254A50958 = v9 | 0x8000000000000000;
      qword_254A50948 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50950 = 0;
      unk_254A50958 = 0;
      qword_254A50948 = 0x2074736E6F63;
      byte_254A5095F = v5 + 6;
      v7 = (char *)&qword_254A50948 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50948, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50960);
        return &qword_254A50948;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50948;
}

void sub_20EBEE068(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50960);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBEE080()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50980);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50980))
    return &xmmword_254A50968;
  v2 = sub_20EBEE15C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50968, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50978 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50968 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50968, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50980);
  return &xmmword_254A50968;
}

void sub_20EBEE144(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50980);
  _Unwind_Resume(a1);
}

std::string *sub_20EBEE15C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A509A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A509A0))
    return &stru_254A50988;
  sub_20EBEE380((uint64_t)__p);
  sub_20EBEE24C((char *)__p, &stru_254A50988);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50988, &dword_20E81F000);
  __cxa_guard_release(&qword_254A509A0);
  return &stru_254A50988;
}

void sub_20EBEE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A509A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A509A0);
  _Unwind_Resume(a1);
}

void sub_20EBEE24C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EBEE564();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v14 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEE348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBEE380(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50A20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50A20))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::user_anchor_node_group::AnchorAddedResult>]", qword_254A50A08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50A08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50A20);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50A40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50A40))
  {
    v5 = sub_20E8A2354(qword_254A50A08, "<", 0);
    sub_20E89FC08(qword_254A50A08, 0, v5, qword_254A50A28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50A28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50A40);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50A60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50A60))
  {
    sub_21023CD84((uint64_t)qword_254A50A28, (uint64_t)&xmmword_254A50A48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50A48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50A60);
  }
  if (byte_254A50A5F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50A48, *((unint64_t *)&xmmword_254A50A48 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50A48;
    *(_QWORD *)(a1 + 16) = unk_254A50A58;
  }
}

void sub_20EBEE51C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50A60);
  _Unwind_Resume(a1);
}

void sub_20EBEE534(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50A40);
  _Unwind_Resume(a1);
}

void sub_20EBEE54C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50A20);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBEE564()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A509C0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A509C0))
    return &xmmword_254A509A8;
  v2 = (char *)sub_20EBEE640();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A509A8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A509B8 = *((_QWORD *)v2 + 2);
    xmmword_254A509A8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A509A8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A509C0);
  return &xmmword_254A509A8;
}

void sub_20EBEE628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A509C0);
  _Unwind_Resume(a1);
}

void *sub_20EBEE640()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A509E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A509E0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::user_anchor_node_group::AnchorAddedResult]", qword_254A509C8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A509C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A509E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50A00);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50A00))
    return &unk_254A509E8;
  sub_21023CD84((uint64_t)qword_254A509C8, (uint64_t)&unk_254A509E8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A509E8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50A00);
  return &unk_254A509E8;
}

void sub_20EBEE730(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50A00);
  _Unwind_Resume(a1);
}

void sub_20EBEE748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A509E0);
  _Unwind_Resume(a1);
}

void sub_20EBEE760()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF40))
  {
    sub_20EBEE81C();
    if (byte_254A5CF7F < 0)
    {
      sub_20E860C04(&xmmword_254A5CF38, (void *)xmmword_254A5CF68, *((unint64_t *)&xmmword_254A5CF68 + 1));
    }
    else
    {
      xmmword_254A5CF38 = xmmword_254A5CF68;
      unk_254A5CF48 = unk_254A5CF78;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CF38, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF40);
  }
}

void sub_20EBEE804(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF40);
  _Unwind_Resume(a1);
}

void sub_20EBEE81C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF48))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::user_anchor_node_group::AnchorAddedResult (const cv3d::vio::user_anchor_node_group::AnchorAddedResult &)]", qword_254A5CF50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CF50, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF48);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF50);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF50))
    {
      sub_21023CD84((uint64_t)qword_254A5CF50, (uint64_t)&xmmword_254A5CF68);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CF68, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF50);
    }
  }
}

void sub_20EBEE8F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF50);
  _Unwind_Resume(a1);
}

void sub_20EBEE90C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF48);
  _Unwind_Resume(a1);
}

void sub_20EBEE924()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF58))
  {
    sub_20EBEE9E0();
    if (byte_254A5CFC7 < 0)
    {
      sub_20E860C04(&xmmword_254A5CF80, (void *)xmmword_254A5CFB0, *((unint64_t *)&xmmword_254A5CFB0 + 1));
    }
    else
    {
      xmmword_254A5CF80 = xmmword_254A5CFB0;
      unk_254A5CF90 = unk_254A5CFC0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CF80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF58);
  }
}

void sub_20EBEE9C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF58);
  _Unwind_Resume(a1);
}

void sub_20EBEE9E0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF60))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = std::vector<cv3d::kit::cf::ErrorRef> (const std::vector<cv3d::kit::cf::ErrorRef> &)]", qword_254A5CF98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CF98, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF60);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF68);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF68))
    {
      sub_21023CD84((uint64_t)qword_254A5CF98, (uint64_t)&xmmword_254A5CFB0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CFB0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF68);
    }
  }
}

void sub_20EBEEAB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF68);
  _Unwind_Resume(a1);
}

void sub_20EBEEAD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF60);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBEEAE8()
{
  unsigned __int8 v0;
  uint64_t *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50C40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50C40))
  {
    v2 = sub_20EBEEC2C();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = v2[1];
    v6 = v5 + 1;
    if (v5 + 1 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v7 = &qword_254A50C28;
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (uint64_t *)operator new(v8 + 1);
      qword_254A50C30 = v5 + 1;
      unk_254A50C38 = v9 | 0x8000000000000000;
      qword_254A50C28 = (uint64_t)v10;
      v7 = v10;
    }
    else
    {
      qword_254A50C30 = 0;
      unk_254A50C38 = 0;
      qword_254A50C28 = 0;
      byte_254A50C3F = v5 + 1;
      if (!v5)
      {
LABEL_18:
        *(_WORD *)((char *)v7 + v5) = 38;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50C28, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50C40);
        return &qword_254A50C28;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50C28;
}

void sub_20EBEEC14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50C40);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EBEEC2C()
{
  unsigned __int8 v0;
  __int128 *v2;
  const void **v3;
  int v4;
  size_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50C60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50C60))
  {
    v2 = sub_20EBEEDA4();
    v3 = (const void **)v2;
    v4 = *((char *)v2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)v2 + 23);
    else
      v5 = *((_QWORD *)v2 + 1);
    v6 = v5 + 6;
    if (v5 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v6 >= 0x17)
    {
      v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v8 = v6 | 7;
      v9 = v8 + 1;
      v10 = (char *)operator new(v8 + 1);
      qword_254A50C50 = v5 + 6;
      unk_254A50C58 = v9 | 0x8000000000000000;
      qword_254A50C48 = (uint64_t)v10;
      *(_DWORD *)v10 = 1936617315;
      v7 = v10 + 6;
      *((_WORD *)v10 + 2) = 8308;
    }
    else
    {
      qword_254A50C50 = 0;
      unk_254A50C58 = 0;
      qword_254A50C48 = 0x2074736E6F63;
      byte_254A50C5F = v5 + 6;
      v7 = (char *)&qword_254A50C48 + 6;
      if (!v5)
      {
LABEL_18:
        v7[v5] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A50C48, &dword_20E81F000);
        __cxa_guard_release(&qword_254A50C60);
        return &qword_254A50C48;
      }
    }
    if (v4 >= 0)
      v11 = v3;
    else
      v11 = *v3;
    memmove(v7, v11, v5);
    goto LABEL_18;
  }
  return &qword_254A50C48;
}

void sub_20EBEED8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50C60);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBEEDA4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50C80);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50C80))
    return &xmmword_254A50C68;
  v2 = sub_20EBEEE80();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A50C68, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A50C78 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A50C68 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50C68, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50C80);
  return &xmmword_254A50C68;
}

void sub_20EBEEE68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50C80);
  _Unwind_Resume(a1);
}

std::string *sub_20EBEEE80()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50CA0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50CA0))
    return &stru_254A50C88;
  sub_20EBEF0A4((uint64_t)__p);
  sub_20EBEEF70((char *)__p, &stru_254A50C88);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A50C88, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50CA0);
  return &stru_254A50C88;
}

void sub_20EBEEF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A50CA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A50CA0);
  _Unwind_Resume(a1);
}

void sub_20EBEEF70(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20EBEF288();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v14 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEF06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98((void **)&a9);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBEF0A4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A50D20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A50D20))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::mapping_io::MapSaveRequest>]", qword_254A50D08);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50D08, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50D20);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A50D40);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A50D40))
  {
    v5 = sub_20E8A2354(qword_254A50D08, "<", 0);
    sub_20E89FC08(qword_254A50D08, 0, v5, qword_254A50D28);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50D28, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50D40);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A50D60);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A50D60))
  {
    sub_21023CD84((uint64_t)qword_254A50D28, (uint64_t)&xmmword_254A50D48);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50D48, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50D60);
  }
  if (byte_254A50D5F < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A50D48, *((unint64_t *)&xmmword_254A50D48 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A50D48;
    *(_QWORD *)(a1 + 16) = unk_254A50D58;
  }
}

void sub_20EBEF240(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50D60);
  _Unwind_Resume(a1);
}

void sub_20EBEF258(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50D40);
  _Unwind_Resume(a1);
}

void sub_20EBEF270(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50D20);
  _Unwind_Resume(a1);
}

__int128 *sub_20EBEF288()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50CC0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50CC0))
    return &xmmword_254A50CA8;
  v2 = (char *)sub_20EBEF364();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A50CA8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A50CB8 = *((_QWORD *)v2 + 2);
    xmmword_254A50CA8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A50CA8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50CC0);
  return &xmmword_254A50CA8;
}

void sub_20EBEF34C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50CC0);
  _Unwind_Resume(a1);
}

void *sub_20EBEF364()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A50CE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A50CE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::mapping_io::MapSaveRequest]", qword_254A50CC8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A50CC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A50CE0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A50D00);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A50D00))
    return &unk_254A50CE8;
  sub_21023CD84((uint64_t)qword_254A50CC8, (uint64_t)&unk_254A50CE8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A50CE8, &dword_20E81F000);
  __cxa_guard_release(&qword_254A50D00);
  return &unk_254A50CE8;
}

void sub_20EBEF454(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50D00);
  _Unwind_Resume(a1);
}

void sub_20EBEF46C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A50CE0);
  _Unwind_Resume(a1);
}

void sub_20EBEF484()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF70))
  {
    sub_20EBEF540();
    if (byte_254A5D00F < 0)
    {
      sub_20E860C04(&xmmword_254A5CFC8, (void *)xmmword_254A5CFF8, *((unint64_t *)&xmmword_254A5CFF8 + 1));
    }
    else
    {
      xmmword_254A5CFC8 = xmmword_254A5CFF8;
      unk_254A5CFD8 = unk_254A5D008;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CFC8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF70);
  }
}

void sub_20EBEF528(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF70);
  _Unwind_Resume(a1);
}

void sub_20EBEF540()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::OptionalReturn<cv3d::vio::mapping_io::MapSaveRequest> (const cv3d::vio::cv_types::ImageProcessingSample &)]", qword_254A5CFE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5CFE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF78);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BF80);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BF80))
    {
      sub_21023CD84((uint64_t)qword_254A5CFE0, (uint64_t)&xmmword_254A5CFF8);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5CFF8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BF80);
    }
  }
}

void sub_20EBEF618(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF80);
  _Unwind_Resume(a1);
}

void sub_20EBEF630(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF78);
  _Unwind_Resume(a1);
}

void sub_20EBEF648()
{
  unsigned __int8 v0;
  int v1;
  size_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF90))
  {
    sub_20EBEF7C0();
    v1 = byte_254A5D057;
    if (byte_254A5D057 >= 0)
      v2 = byte_254A5D057;
    else
      v2 = *((_QWORD *)&xmmword_254A5D040 + 1);
    v3 = v2 + 6;
    if (v2 + 6 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    if (v3 >= 0x17)
    {
      v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v5 = v3 | 7;
      v6 = v5 + 1;
      v7 = (char *)operator new(v5 + 1);
      qword_254A5D030 = v2 + 6;
      unk_254A5D038 = v6 | 0x8000000000000000;
      qword_254A5D028 = (uint64_t)v7;
      *(_DWORD *)v7 = 1936617315;
      *((_WORD *)v7 + 2) = 8308;
      v4 = v7 + 6;
    }
    else
    {
      qword_254A5D030 = 0;
      unk_254A5D038 = 0;
      qword_254A5D028 = 0x2074736E6F63;
      byte_254A5D03F = v2 + 6;
      v4 = (char *)&qword_254A5D028 + 6;
      if (!v2)
      {
LABEL_18:
        v4[v2] = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5D028, &dword_20E81F000);
        __cxa_guard_release(&qword_254A5BF90);
        return;
      }
    }
    if (v1 >= 0)
      v8 = &xmmword_254A5D040;
    else
      v8 = (__int128 *)xmmword_254A5D040;
    memmove(v4, v8, v2);
    goto LABEL_18;
  }
}

void sub_20EBEF7A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF90);
  _Unwind_Resume(a1);
}

void sub_20EBEF7C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BF98))
  {
    sub_20EBEF87C();
    if (byte_254A5D06F < 0)
    {
      sub_20E860C04(&xmmword_254A5D040, (void *)qword_254A5D058, unk_254A5D060);
    }
    else
    {
      xmmword_254A5D040 = *(_OWORD *)&qword_254A5D058;
      unk_254A5D050 = unk_254A5D068;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D040, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BF98);
  }
}

void sub_20EBEF864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BF98);
  _Unwind_Resume(a1);
}

void sub_20EBEF87C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BFA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFA0))
  {
    sub_20EBEFB2C(__p);
    sub_20EBEF954((char *)__p);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254A5D058, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFA0);
  }
}

void sub_20EBEF914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5BFA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5BFA0);
  _Unwind_Resume(a1);
}

void sub_20EBEF954(char *a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;
  void *__dst[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254A5BFA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFA8))
  {
    sub_20EBEFD08();
    if (byte_254A5D0B7 < 0)
    {
      sub_20E860C04(&xmmword_254A5D070, (void *)xmmword_254A5D0A0, *((unint64_t *)&xmmword_254A5D0A0 + 1));
    }
    else
    {
      xmmword_254A5D070 = xmmword_254A5D0A0;
      unk_254A5D080 = unk_254A5D0B0;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D070, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFA8);
  }
  if (byte_254A5D087 < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5D070, *((unint64_t *)&xmmword_254A5D070 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5D070;
    v11 = unk_254A5D080;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 1uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, (std::string *)&qword_254A5D058, v3, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20EBEFAE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFA8);
  _Unwind_Resume(a1);
}

void sub_20EBEFB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20E89FB98(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EBEFB2C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5BFC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFC0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::concurrency::ChannelOutput<cv3d::vio::ml_feature_detection_node_group::InputMetadata>]", qword_254A5D0B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D0B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFC0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A5BFC8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFC8))
  {
    v5 = sub_20E8A2354(qword_254A5D0B8, "<", 0);
    sub_20E89FC08(qword_254A5D0B8, 0, v5, qword_254A5D0D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D0D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFC8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A5BFD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFD0))
  {
    sub_21023CD84((uint64_t)qword_254A5D0D0, (uint64_t)&xmmword_254A5D0E8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D0E8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFD0);
  }
  if (byte_254A5D0FF < 0)
  {
    sub_20E860C04(__dst, (void *)xmmword_254A5D0E8, *((unint64_t *)&xmmword_254A5D0E8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_254A5D0E8;
    __dst[2] = unk_254A5D0F8;
  }
}

void sub_20EBEFCC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFD0);
  _Unwind_Resume(a1);
}

void sub_20EBEFCD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFC8);
  _Unwind_Resume(a1);
}

void sub_20EBEFCF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFC0);
  _Unwind_Resume(a1);
}

void sub_20EBEFD08()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BFB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFB0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::ml_feature_detection_node_group::InputMetadata]", qword_254A5D088);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D088, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFB0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BFB8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BFB8))
    {
      sub_21023CD84((uint64_t)qword_254A5D088, (uint64_t)&xmmword_254A5D0A0);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D0A0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BFB8);
    }
  }
}

void sub_20EBEFDE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFB8);
  _Unwind_Resume(a1);
}

void sub_20EBEFDF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFB0);
  _Unwind_Resume(a1);
}

void sub_20EBEFE10()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BFD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFD8))
  {
    sub_20EBEFECC();
    if (byte_254A5D147 < 0)
    {
      sub_20E860C04(&xmmword_254A5D100, (void *)xmmword_254A5D130, *((unint64_t *)&xmmword_254A5D130 + 1));
    }
    else
    {
      xmmword_254A5D100 = xmmword_254A5D130;
      unk_254A5D110 = unk_254A5D140;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D100, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFD8);
  }
}

void sub_20EBEFEB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFD8);
  _Unwind_Resume(a1);
}

void sub_20EBEFECC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5BFE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A5BFE0))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::ml_feature_detection_node_group::InputMetadata (const std::shared_ptr<cv3d::vio::feature_detection::VIOMLFeatureEvent> &)]", qword_254A5D118);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A5D118, &dword_20E81F000);
    __cxa_guard_release(&qword_254A5BFE0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A5BFE8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254A5BFE8))
    {
      sub_21023CD84((uint64_t)qword_254A5D118, (uint64_t)&xmmword_254A5D130);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A5D130, &dword_20E81F000);
      __cxa_guard_release(&qword_254A5BFE8);
    }
  }
}

void sub_20EBEFFA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFE8);
  _Unwind_Resume(a1);
}

void sub_20EBEFFBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5BFE0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBEFFD4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBF0014(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC538;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF0064(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EBF0074(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC570;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBF00B4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC570;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF0104(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EBF0114(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC290;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBF0154(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC290;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF01A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBF01B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20EBF0204(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF0264@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9C8760;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_20EBF0304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_20EBF0328()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)&unk_21025775D, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

void sub_20EBF0364()
{
  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)&unk_21025775D, 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_21023DDB0);
  abort();
}

uint64_t sub_20EBF03A0()
{
  return 1;
}

uint64_t sub_20EBF03AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_20E86D37C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_20EBF0428()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EBF043C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9C87C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EBF0474(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9C87C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EBF0494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  float64x2_t **v11;
  std::__shared_weak_count *v12;

  v2 = *(_QWORD *)(a1 + 8);
  sub_20EE2AB9C(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, &v11);
  sub_20EBF0670(&v9, v2, &v11);
  if (!*(_BYTE *)(v9 + 48))
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(*(_QWORD *)(v2 + 4352) + 88) + 16))(*(_QWORD *)(v2 + 4352) + 88, &v9);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v12;
  if (v12)
  {
    v7 = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20EBF0574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBF05F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMCo"
                     "nfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK1"
                                "4CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBF0664()
{
  return &unk_24C9C8838;
}

void sub_20EBF0670(_QWORD *a1, uint64_t a2, float64x2_t ***a3)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  char v40;
  char v41;

  sub_20EAEBA68(a2 + 4520, a3, (uint64_t)&v38);
  if (!v41)
    goto LABEL_4;
  LOBYTE(__p[0]) = v40;
  BYTE1(__p[0]) = 1;
  sub_20EC4DF34(*(_QWORD *)(*(_QWORD *)(a2 + 3720) + 56), (uint64_t)__p);
  if (v40)
    goto LABEL_4;
  v28[0] = 0;
  v27 = 0uLL;
  __p[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v28[8] = _Q0;
  *(_QWORD *)&v28[24] = 0xBFF0000000000000;
  HIDWORD(__p[0]) = 7;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3720) + 56) + 96) + 1768;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 16))(v10, __p);
  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p[1]);
    v11 = v38;
    if (!*(_BYTE *)(*(_QWORD *)v38 + 216))
      goto LABEL_7;
  }
  else
  {
LABEL_4:
    v11 = v38;
    if (!*(_BYTE *)(*(_QWORD *)v38 + 216))
      goto LABEL_7;
  }
  if (*(_BYTE *)(a2 + 7704))
  {
    v12 = *(_QWORD *)(a2 + 8784);
    v13 = *(_QWORD *)(a2 + 7568);
    v14 = *(_OWORD *)(a2 + 7472);
    v15 = *(_OWORD *)(a2 + 7456);
    v29 = *(_OWORD *)(a2 + 7440);
    v30 = v15;
    v16 = *(_OWORD *)(a2 + 7424);
    v35 = *(_QWORD *)(a2 + 7536);
    v17 = *(_OWORD *)(a2 + 7520);
    v33 = *(_OWORD *)(a2 + 7504);
    v34 = v17;
    v18 = *(_OWORD *)(a2 + 7488);
    v31 = v14;
    v32 = v18;
    v19 = *(_OWORD *)(a2 + 7392);
    *(_OWORD *)__p = *(_OWORD *)(a2 + 7376);
    v27 = v19;
    *(_OWORD *)v28 = *(_OWORD *)(a2 + 7408);
    *(_OWORD *)&v28[16] = v16;
    v36 = v13;
    v37 = 1;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 360))(v12, __p);
    v11 = v38;
  }
LABEL_7:
  v20 = v39;
  *a1 = v11;
  a1[1] = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v23 = v39;
    if (v39)
    {
      v24 = (unint64_t *)&v39->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_20EBF0834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_20E86665C(v15 - 40);
    _Unwind_Resume(a1);
  }
  sub_20E86665C(v15 - 40);
  _Unwind_Resume(a1);
}

void sub_20EBF0874()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EBF0888(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9C8858;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EBF08C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9C8858;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EBF08E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  char v4;

  v1 = *(_QWORD *)(a1 + 8);
  sub_20EE2A654(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v3);
  if (!v4)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 3744) + 72) + 592;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v3);
    if (!v4)
      (*(void (**)(_QWORD *))v3[0])(v3);
  }
}

void sub_20EBF095C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(_QWORD), uint64_t a10, uint64_t a11, char a12)
{
  if (!a12)
    (*a9)(&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBF0980(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMCo"
                     "nfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK1"
                                "4CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl27ConnectUserAnchorNodeGroupsERK14CV3DSLAMConfigPNS0_22user_anchor_node_group19UserAnchorNodeGroupEEUlRKT_E0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EBF09EC()
{
  return &unk_24C9C88B8;
}

void sub_20EBF09F8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EBF0A44(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF0AA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EBF0AB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBF0B9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBF0AF8);
}

void sub_20EBF0BD8(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EBF0C24(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBF0C84(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_20EBF0C90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBF0D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBF0CD8);
}

void sub_20EBF0DB8(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_20EBF0E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void ***sub_20EBF0E7C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20EBF0F10()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned __int8 v25;
  _WORD *v26;
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v105;
  __int128 v110;
  uint64_t *v111;
  _QWORD *v112;
  std::__shared_weak_count *size;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  char v121;
  uint64_t v122;
  __int128 v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  std::__shared_weak_count *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  unint64_t *v192;
  char *v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char v199;
  char *v200;
  uint64_t v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  std::__shared_weak_count *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void *v219;
  char *v220;
  unint64_t *v221;
  unint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *tv_nsec;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  char *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  int *v295;
  std::chrono::steady_clock::time_point v296;
  _QWORD *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  uint64_t *v306;
  double v307;
  unsigned __int8 v308;
  unint64_t v309;
  double v310;
  char *v311;
  size_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t i;
  uint64_t v316;
  int v317;
  uint64_t v318;
  char *v319;
  char *v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  char *v326;
  char *v327;
  int *v328;
  int *v329;
  int v330;
  char *v331;
  char *v332;
  uint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  _QWORD *v337;
  _BYTE *v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  _BYTE *v344;
  _QWORD *v345;
  char *v346;
  unint64_t v347;
  std::string::size_type v348;
  std::string::size_type v349;
  uint64_t v350;
  unint64_t v351;
  int64_t v352;
  unint64_t v353;
  _BYTE *v354;
  _QWORD *v355;
  char *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  _OWORD *v362;
  char *v363;
  uint64_t v364;
  __int128 v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  _BYTE *v375;
  uint64_t *v376;
  char *v377;
  unint64_t v378;
  char *v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  _OWORD *v384;
  char *v385;
  uint64_t v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  std::string::size_type v390;
  std::string::size_type v391;
  std::string::size_type v392;
  uint64_t v393;
  unint64_t v394;
  int64_t v395;
  unint64_t v396;
  _BYTE *v397;
  uint64_t *v398;
  char *v399;
  unint64_t v400;
  _QWORD *v401;
  BOOL v402;
  uint64_t v403;
  uint64_t v404;
  _OWORD *v405;
  char *v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _OWORD *v412;
  __int128 *v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  _QWORD *v417;
  __int16 v418;
  uint64_t v419;
  char *v420;
  void *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  std::__shared_weak_count *v424;
  char *v425;
  char *v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  uint64_t *v435;
  double v436;
  std::chrono::steady_clock::time_point v437;
  unsigned __int8 v438;
  unint64_t v439;
  double v440;
  char *v441;
  size_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t j;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  double v452;
  std::chrono::steady_clock::time_point v453;
  unsigned __int8 v454;
  unint64_t v455;
  double v456;
  char *v457;
  size_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t k;
  uint64_t v462;
  uint64_t v463;
  int v464;
  void *v465;
  int64_t v466;
  uint64_t v467;
  void *v468;
  int64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  double v475;
  std::chrono::steady_clock::time_point v476;
  unsigned __int8 v477;
  unint64_t v478;
  double v479;
  char *v480;
  size_t v481;
  __darwin_time_t v482;
  uint64_t v483;
  uint64_t m;
  uint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  __darwin_time_t v489;
  std::__shared_weak_count *v490;
  __darwin_time_t tv_sec;
  __darwin_time_t v492;
  __int128 v493;
  __int128 v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  uint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  uint64_t v509;
  __int128 v510;
  __int128 v511;
  uint64_t *v512;
  uint64_t *v513;
  unint64_t v514;
  char *v515;
  char *v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  unint64_t v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  double v530;
  std::chrono::steady_clock::time_point v531;
  unsigned __int8 v532;
  unint64_t v533;
  double v534;
  char *v535;
  size_t v536;
  __darwin_time_t v537;
  uint64_t v538;
  uint64_t n;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  __int16 v548;
  __int16 v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t *v552;
  unint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t *v558;
  double v559;
  unsigned __int8 v560;
  unint64_t v561;
  double v562;
  char *v563;
  size_t v564;
  __darwin_time_t v565;
  uint64_t v566;
  uint64_t ii;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  _QWORD *v571;
  _QWORD *v572;
  _QWORD *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _QWORD *v580;
  _QWORD *v581;
  _QWORD *v582;
  _QWORD *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  _QWORD *v596;
  _QWORD *v597;
  _QWORD *v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _QWORD *v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  _QWORD *v654;
  _QWORD *v655;
  _QWORD *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  _QWORD *v672;
  _QWORD *v673;
  _QWORD *v674;
  _QWORD *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  _QWORD *v682;
  _QWORD *v683;
  _QWORD *v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  _QWORD *v689;
  _QWORD *v690;
  _QWORD *v691;
  _QWORD *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  std::__assoc_sub_state *v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t *v706;
  unint64_t v707;
  __darwin_time_t v708;
  unint64_t *v709;
  unint64_t v710;
  std::__shared_weak_count *v711;
  unint64_t *v712;
  unint64_t v713;
  std::__shared_weak_count *v714;
  unint64_t *v715;
  unint64_t v716;
  std::__shared_weak_count *v717;
  unint64_t *v718;
  unint64_t v719;
  std::logic_error *exception;
  std::runtime_error *v722;
  _BYTE *v723;
  char v724;
  uint64_t v725;
  uint64_t v726;
  std::string::size_type v727;
  std::chrono::steady_clock::time_point v728;
  char v729;
  uint64_t v730;
  uint64_t v731;
  unsigned __int8 *v732;
  _BYTE *v733;
  uint64_t v734;
  int *v735;
  int v736;
  uint64_t v737;
  int *v738;
  uint64_t v739;
  __int128 v740[2];
  char v741;
  int v742;
  int v743;
  int v744;
  uint64_t v745;
  std::__shared_weak_count *v746;
  void *v747;
  std::__shared_weak_count *v748;
  std::__shared_weak_count *v749;
  void *v750[2];
  void *v751[4];
  __int128 v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  void *v761;
  std::__shared_weak_count *v762;
  __int128 v763;
  timespec v764;
  int v765;
  char v766;
  _DWORD v767[2];
  _WORD *v768;
  std::__shared_weak_count *v769;
  unsigned __int128 v770;
  uint64_t (**v771)();
  std::__shared_weak_count *v772;
  timespec v773;
  _BYTE __p[24];
  _BYTE v775[8];
  void *v776;
  char v777;
  char v778;
  void *v779;
  char v780;
  char v781;
  void *v782;
  char v783;
  void *v784;
  char v785;
  void *v786;
  void *v787;
  void *v788;
  void *v789;
  void *v790;
  char v791;
  void *v792;
  void *v793;
  char *v794;
  void *v795;
  void *v796;
  void *v797;
  char v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  std::string __dst;
  char v810;
  void *v811;
  char v812;
  char v813;
  void *v814;
  char v815;
  char v816;
  void *v817;
  char v818;
  void *v819;
  char v820;
  uint64_t v821;
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  uint64_t v825;
  __int128 v826;
  uint64_t v827;
  __int128 v828;
  uint64_t v829;
  int v830;
  char v831;
  char v832;
  char v833;
  char v834;
  char v835;
  _BYTE v836[11424];
  _BYTE v837[112];
  __int128 v838;
  _BYTE v839[64];
  uint64_t v840;
  __int128 v841;
  uint64_t v842;
  __int128 v843;
  __int128 v844;
  uint64_t v845;
  uint64_t v846;
  __int128 v847;
  uint64_t v848;
  uint64_t v849;
  _QWORD v850[2];
  _QWORD v851[2];
  _QWORD v852[2];
  _QWORD v853[2];
  unsigned __int128 v854;
  char *v855;
  char v856;
  char v857;
  void *v858;
  char v859;
  char v860;
  char v861;
  void *v862;
  char v863;
  char v864;
  void *v865;
  char v866;
  void *v867;
  char v868;
  uint64_t v869;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v724 = v3;
  v5 = v4;
  v734 = v6;
  v8 = v7;
  v9 = v0;
  v869 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  *(_QWORD *)(v0 + 40) = -1;
  v10 = v7 + 24;
  memcpy((void *)(v0 + 48), (const void *)(v7 + 24), 0x210uLL);
  *(_OWORD *)(v9 + 576) = *(_OWORD *)(v10 + 528);
  v11 = *(_OWORD *)(v10 + 544);
  v12 = *(_OWORD *)(v10 + 560);
  v13 = *(_OWORD *)(v10 + 576);
  *(_QWORD *)(v9 + 640) = *(_QWORD *)(v8 + 616);
  *(_OWORD *)(v9 + 608) = v12;
  *(_OWORD *)(v9 + 624) = v13;
  *(_OWORD *)(v9 + 592) = v11;
  v14 = *(_OWORD *)(v8 + 624);
  *(_QWORD *)(v9 + 664) = *(_QWORD *)(v8 + 640);
  *(_OWORD *)(v9 + 648) = v14;
  v15 = *(_QWORD *)(v8 + 664);
  *(_OWORD *)(v9 + 672) = *(_OWORD *)(v10 + 624);
  *(_QWORD *)(v9 + 688) = v15;
  v16 = *(_QWORD *)(v8 + 688);
  *(_OWORD *)(v9 + 696) = *(_OWORD *)(v8 + 672);
  *(_QWORD *)(v9 + 712) = v16;
  v17 = *(_QWORD *)(v8 + 712);
  *(_OWORD *)(v9 + 720) = *(_OWORD *)(v10 + 672);
  *(_QWORD *)(v9 + 736) = v17;
  *(_WORD *)(v9 + 744) = *(_WORD *)(v8 + 720);
  sub_20EA940EC((uint64_t *)v8, (uint64_t **)(v9 + 752));
  sub_20EB8D0E8(v9 + 776, (uint64_t)(v5 + 1494), v8);
  v738 = v5;
  v735 = v5 + 1254;
  *(_BYTE *)(v9 + 3704) = *((_BYTE *)v5 + 6057);
  *(_OWORD *)(v9 + 3712) = 0u;
  *(_OWORD *)(v9 + 3728) = 0u;
  *(_QWORD *)(v9 + 3744) = 0;
  v18 = (_WORD *)*v2;
  *(_QWORD *)(v9 + 3752) = *v2;
  v19 = v2[1];
  *(_QWORD *)(v9 + 3760) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = *(std::__shared_weak_count **)(v9 + 3760);
    v768 = *(_WORD **)(v9 + 3752);
    v769 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
  }
  else
  {
    v768 = v18;
    v769 = 0;
  }
  v731 = v9 + 3712;
  v25 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
  v739 = v9;
  v737 = v8;
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
  {
    sub_20FDBEA28(qword_254A6DA60);
    __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA78);
  }
  v26 = v768;
  *(_WORD *)(v9 + 3768) = *v768;
  v27 = (_BYTE *)(v9 + 3776);
  if (*((char *)v26 + 31) < 0)
  {
    sub_20E860C04(v27, *((void **)v26 + 1), *((_QWORD *)v26 + 2));
  }
  else
  {
    v28 = *(_OWORD *)(v26 + 4);
    *(_QWORD *)(v9 + 3792) = *((_QWORD *)v26 + 3);
    *(_OWORD *)v27 = v28;
  }
  v29 = *((_OWORD *)v26 + 2);
  *(_QWORD *)(v9 + 3816) = *((_QWORD *)v26 + 6);
  *(_OWORD *)(v9 + 3800) = v29;
  *(_QWORD *)(v9 + 3824) = qword_254A6DA60;
  v30 = v769;
  if (v769)
  {
    v31 = &v769->__shared_owners_;
    do
      v32 = __ldxr((unint64_t *)v31);
    while (__stxr(v32 + 1, (unint64_t *)v31));
    v33 = *(_QWORD *)(v9 + 3824);
    *(_QWORD *)(v9 + 3832) = v26;
    *(_QWORD *)(v9 + 3840) = v30;
    do
      v34 = __ldxr((unint64_t *)v31);
    while (__stxr(v34 + 1, (unint64_t *)v31));
    *(_QWORD *)(v9 + 3848) = v33;
    do
      v35 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v35 - 1, (unint64_t *)v31));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    *(_QWORD *)(v9 + 3832) = v26;
    *(_QWORD *)(v9 + 3840) = 0;
    *(_QWORD *)(v9 + 3848) = qword_254A6DA60;
  }
  if (v769)
  {
    v36 = &v769->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v769->__on_zero_shared)(v769);
      std::__shared_weak_count::__release_weak(v769);
    }
  }
  v38 = (char *)operator new(0x20uLL);
  strcpy(v38, "CMPoseAnchorTransformNode_fwd");
  *(_QWORD *)(v9 + 3864) = &off_24C9C88D8;
  *(_QWORD *)(v9 + 3872) = v38;
  *(_QWORD *)(v9 + 3880) = 29;
  *(_QWORD *)(v9 + 3888) = 0x8000000000000020;
  *(_OWORD *)(v9 + 3896) = 0u;
  *(_QWORD *)(v9 + 3928) = 0;
  *(_OWORD *)(v9 + 3912) = 0u;
  v39 = (std::__shared_weak_count *)operator new(0x58uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v39[1]);
  v733 = (_BYTE *)(v9 + 18008);
  v723 = (_BYTE *)(v9 + 17479);
  v732 = (unsigned __int8 *)(v9 + 9048);
  v730 = (uint64_t)(v5 + 2);
  v725 = v8 + 624;
  v726 = v8 + 672;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  v42 = operator new();
  *(_BYTE *)(v42 + 8) = 1;
  *(_QWORD *)(v42 + 48) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  *(_QWORD *)(v42 + 40) = 0;
  *(_QWORD *)v42 = &off_24C9C8970;
  *(_QWORD *)(v42 + 16) = &unk_24C9C89E8;
  *(_QWORD *)(v42 + 24) = &unk_24C9C8A28;
  *(_QWORD *)(v42 + 56) = 0;
  *(_QWORD *)(v42 + 64) = 0;
  *(_QWORD *)(v42 + 72) = v39 + 1;
  *(_QWORD *)(v42 + 80) = v39;
  v43 = (_QWORD *)operator new();
  *v43 = &off_24C9C8B10;
  *(_QWORD *)(v42 + 88) = v43;
  *(_QWORD *)(v42 + 96) = v42 + 96;
  *(_QWORD *)(v42 + 104) = v42 + 96;
  *(_QWORD *)(v42 + 112) = 0;
  *(_QWORD *)(v42 + 120) = v42 + 120;
  *(_QWORD *)(v42 + 128) = v42 + 120;
  *(_QWORD *)(v42 + 136) = 0;
  v44 = (std::__shared_weak_count *)operator new();
  v44->__shared_owners_ = 0;
  v45 = (unint64_t *)&v44->__shared_owners_;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C8B60;
  v44->__shared_weak_owners_ = 0;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
  v46 = *(std::__shared_weak_count **)(v42 + 40);
  if (v46)
  {
    if (v46->__shared_owners_ != -1)
      goto LABEL_43;
    do
      v47 = __ldxr(v45);
    while (__stxr(v47 + 1, v45));
    p_shared_weak_owners = (unint64_t *)&v44->__shared_weak_owners_;
    do
      v49 = __ldxr(p_shared_weak_owners);
    while (__stxr(v49 + 1, p_shared_weak_owners));
    *(_QWORD *)(v42 + 32) = v42;
    *(_QWORD *)(v42 + 40) = v44;
    std::__shared_weak_count::__release_weak(v46);
  }
  else
  {
    do
      v50 = __ldxr(v45);
    while (__stxr(v50 + 1, v45));
    v51 = (unint64_t *)&v44->__shared_weak_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    *(_QWORD *)(v42 + 32) = v42;
    *(_QWORD *)(v42 + 40) = v44;
  }
  do
    v53 = __ldaxr(v45);
  while (__stlxr(v53 - 1, v45));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_43:
  *(_QWORD *)v837 = &off_24C9C8908;
  strcpy(&v837[8], "channel");
  *(_QWORD *)&v837[16] = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v837[23] = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  v837[31] = 7;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
  *(_QWORD *)&v837[32] = 0x7974706D45;
  *(_QWORD *)&v837[40] = *(_QWORD *)__p;
  *(_QWORD *)&v837[47] = *(_QWORD *)&__p[7];
  v837[55] = 5;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_QWORD *)&v837[72] = v42;
  v54 = (unint64_t *)&v44->__shared_weak_owners_;
  *(_QWORD *)&v837[80] = v44;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  *(_QWORD *)&v837[88] = &off_24C9B5708;
  v56 = (_QWORD *)operator new();
  *v56 = &off_24C9B5A58;
  v56[1] = v42;
  v56[2] = v44;
  *(_QWORD *)&v837[96] = v56;
  v57 = *(_QWORD *)&v837[72];
  if (*(_QWORD *)&v837[80])
  {
    v58 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = *(_QWORD *)&v837[80];
    if (*(_QWORD *)&v837[72])
      v60 = *(_QWORD *)&v837[72] + 16;
    else
      v60 = 0;
    v61 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v57 = *(_QWORD *)&v837[72];
    v63 = *(_QWORD *)&v837[80];
    *((_QWORD *)&v838 + 1) = &off_24C9C8938;
    *(_QWORD *)v839 = v60;
    *(_QWORD *)&v839[8] = *(_QWORD *)&v837[80];
    v64 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  else
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v66 = *(_QWORD *)&v837[72] + 16;
    else
      v66 = 0;
    v63 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9C8938;
    *(_QWORD *)v839 = v66;
    *(_QWORD *)&v839[8] = 0;
  }
  if (v57)
    v67 = v57 + 24;
  else
    v67 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v67;
  *(_QWORD *)&v839[32] = v63;
  v68 = operator new();
  *(_QWORD *)v68 = &off_24C9C8908;
  *(_OWORD *)(v68 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v68 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v68 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v68 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v68 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v68 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v68 + 88) = &off_24C9B5708;
  *(_OWORD *)(v68 + 96) = *(_OWORD *)&v837[96];
  v69 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v68 + 112) = v69;
  *(_QWORD *)(v68 + 120) = &off_24C9C8938;
  *(_OWORD *)(v68 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v68 + 144) = &off_24C9B2310;
  *(_OWORD *)(v68 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 3936) = v68;
  sub_20EBFA424((uint64_t)v837);
  do
    v70 = __ldaxr(v40);
  while (__stlxr(v70 - 1, v40));
  if (!v70)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  *(_QWORD *)(v9 + 3944) = 0;
  *(_QWORD *)(v9 + 3952) = &off_24C9C8BB0;
  strcpy((char *)(v9 + 3960), "PoseMetadataFwd");
  *(_DWORD *)(v9 + 3976) = v767[0];
  *(_DWORD *)(v9 + 3979) = *(_DWORD *)((char *)v767 + 3);
  *(_BYTE *)(v9 + 3983) = 15;
  v767[0] = 0;
  *(_DWORD *)((char *)v767 + 3) = 0;
  *(_OWORD *)(v9 + 3984) = 0u;
  *(_OWORD *)(v9 + 4000) = 0u;
  *(_QWORD *)(v9 + 4016) = 0;
  v71 = (std::__shared_weak_count *)operator new(0x58uLL);
  v71->__shared_owners_ = 0;
  v72 = (unint64_t *)&v71->__shared_owners_;
  v71->__shared_weak_owners_ = 0;
  v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v71[1]);
  do
    v73 = __ldxr(v72);
  while (__stxr(v73 + 1, v72));
  v74 = operator new();
  *(_BYTE *)(v74 + 8) = 1;
  *(_QWORD *)(v74 + 48) = 0;
  *(_QWORD *)(v74 + 32) = 0;
  *(_QWORD *)(v74 + 40) = 0;
  *(_QWORD *)v74 = &off_24C9C8C48;
  *(_QWORD *)(v74 + 16) = &unk_24C9C8CC0;
  *(_QWORD *)(v74 + 24) = &unk_24C9C8D00;
  *(_QWORD *)(v74 + 56) = 0;
  *(_QWORD *)(v74 + 64) = 0;
  *(_QWORD *)(v74 + 72) = v71 + 1;
  *(_QWORD *)(v74 + 80) = v71;
  v75 = (_QWORD *)operator new();
  *v75 = &off_24C9C8DE8;
  *(_QWORD *)(v74 + 88) = v75;
  *(_QWORD *)(v74 + 96) = v74 + 96;
  *(_QWORD *)(v74 + 104) = v74 + 96;
  *(_QWORD *)(v74 + 112) = 0;
  *(_QWORD *)(v74 + 120) = v74 + 120;
  *(_QWORD *)(v74 + 128) = v74 + 120;
  *(_QWORD *)(v74 + 136) = 0;
  v76 = (std::__shared_weak_count *)operator new();
  v76->__shared_owners_ = 0;
  v77 = (unint64_t *)&v76->__shared_owners_;
  v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C8E38;
  v76->__shared_weak_owners_ = 0;
  v76[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  v78 = *(std::__shared_weak_count **)(v74 + 40);
  if (v78)
  {
    if (v78->__shared_owners_ != -1)
      goto LABEL_82;
    do
      v79 = __ldxr(v77);
    while (__stxr(v79 + 1, v77));
    v80 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
    *(_QWORD *)(v74 + 32) = v74;
    *(_QWORD *)(v74 + 40) = v76;
    std::__shared_weak_count::__release_weak(v78);
  }
  else
  {
    do
      v82 = __ldxr(v77);
    while (__stxr(v82 + 1, v77));
    v83 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    *(_QWORD *)(v74 + 32) = v74;
    *(_QWORD *)(v74 + 40) = v76;
  }
  do
    v85 = __ldaxr(v77);
  while (__stlxr(v85 - 1, v77));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_82:
  *(_QWORD *)v837 = &off_24C9C8BE0;
  strcpy(&v837[8], "channel");
  *(_QWORD *)&v837[16] = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v837[23] = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  v837[31] = 7;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
  *(_QWORD *)&v837[32] = 0x7974706D45;
  *(_QWORD *)&v837[40] = *(_QWORD *)__p;
  *(_QWORD *)&v837[47] = *(_QWORD *)&__p[7];
  v837[55] = 5;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_QWORD *)&v837[72] = v74;
  v86 = (unint64_t *)&v76->__shared_weak_owners_;
  *(_QWORD *)&v837[80] = v76;
  do
    v87 = __ldxr(v86);
  while (__stxr(v87 + 1, v86));
  *(_QWORD *)&v837[88] = &off_24C9B5708;
  v88 = (_QWORD *)operator new();
  *v88 = &off_24C9B5A58;
  v88[1] = v74;
  v88[2] = v76;
  *(_QWORD *)&v837[96] = v88;
  v89 = *(_QWORD *)&v837[72];
  v90 = *(_QWORD *)&v837[80];
  if (!*(_QWORD *)&v837[80])
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v94 = *(_QWORD *)&v837[72] + 16;
    else
      v94 = 0;
    goto LABEL_101;
  }
  v91 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v92 = __ldxr(v91);
  while (__stxr(v92 + 1, v91));
  v93 = *(_QWORD *)&v837[80];
  *(_QWORD *)&v837[104] = v89;
  *(_QWORD *)&v838 = v90;
  if (*(_QWORD *)&v837[72])
    v94 = *(_QWORD *)&v837[72] + 16;
  else
    v94 = 0;
  if (!*(_QWORD *)&v837[80])
  {
    v89 = *(_QWORD *)&v837[72];
LABEL_101:
    v97 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9C8C10;
    *(_QWORD *)v839 = v94;
    *(_QWORD *)&v839[8] = 0;
    goto LABEL_102;
  }
  v95 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v96 = __ldxr(v95);
  while (__stxr(v96 + 1, v95));
  v89 = *(_QWORD *)&v837[72];
  v97 = *(_QWORD *)&v837[80];
  *((_QWORD *)&v838 + 1) = &off_24C9C8C10;
  *(_QWORD *)v839 = v94;
  *(_QWORD *)&v839[8] = v93;
  if (*(_QWORD *)&v837[80])
  {
    v98 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
LABEL_102:
  if (v89)
    v100 = v89 + 24;
  else
    v100 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v100;
  *(_QWORD *)&v839[32] = v97;
  v101 = operator new();
  *(_QWORD *)v101 = &off_24C9C8BE0;
  *(_OWORD *)(v101 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v101 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v101 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v101 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v101 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v101 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v101 + 88) = &off_24C9B5708;
  *(_OWORD *)(v101 + 96) = *(_OWORD *)&v837[96];
  v102 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v101 + 112) = v102;
  *(_QWORD *)(v101 + 120) = &off_24C9C8C10;
  *(_OWORD *)(v101 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v101 + 144) = &off_24C9B2310;
  *(_OWORD *)(v101 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 4024) = v101;
  sub_20EBFB7C8((uint64_t)v837);
  do
    v103 = __ldaxr(v72);
  while (__stlxr(v103 - 1, v72));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v105 = *(_QWORD *)(v737 + 80);
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)&v837[64] = _Q1;
  *(_QWORD *)&v837[80] = 0x3FF0000000000000;
  memset(&v837[88], 0, 24);
  v838 = _Q1;
  memset(&v839[8], 0, 24);
  memset(&v839[40], 0, 24);
  v841 = 0u;
  *(_QWORD *)v839 = 0x3FF0000000000000;
  *(_QWORD *)&v839[32] = 0x3FF0000000000000;
  v842 = 0;
  v840 = 0x3FF0000000000000;
  v845 = 0;
  v847 = 0u;
  v843 = _Q1;
  v844 = 0u;
  v848 = 0;
  v846 = 0x3FF0000000000000;
  v849 = 0x3FF0000000000000;
  v110 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v837 = *(_OWORD *)v10;
  *(_OWORD *)&v837[16] = v110;
  *(_QWORD *)&v837[48] = *(_QWORD *)(v737 + 72);
  *(_OWORD *)&v837[32] = *(_OWORD *)(v737 + 56);
  *(_QWORD *)&v837[56] = v105;
  sub_20EB842DC((uint64_t)v837, (float64x2_t *)(v10 + 528));
  v838 = *(_OWORD *)v725;
  *(_QWORD *)v839 = *(_QWORD *)(v725 + 16);
  *(_OWORD *)&v837[64] = *(_OWORD *)(v10 + 624);
  *(_QWORD *)&v837[80] = *(_QWORD *)(v10 + 640);
  *(_OWORD *)&v839[8] = *(_OWORD *)v726;
  *(_QWORD *)&v839[24] = *(_QWORD *)(v726 + 16);
  *(_QWORD *)&v837[104] = *(_QWORD *)(v10 + 688);
  *(_OWORD *)&v837[88] = *(_OWORD *)(v10 + 672);
  v111 = sub_210219C18();
  *(double *)v750 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)&v854, (uint64_t)v111, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)v750);
  v112 = operator new(0x2F8uLL);
  v112[1] = 0;
  v112[2] = 0;
  *v112 = &off_24C9B60E8;
  __dst.__r_.__value_.__r.__words[0] = sub_20EBC90B0((uint64_t)(v112 + 3), (__int128 *)v5 + 576, (uint64_t)v837);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v112;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)__p = 0;
  sub_20E9B58F0(v9 + 4032, (uint64_t *)&__dst);
  size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v114 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v116 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v117 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *((unsigned __int8 *)v5 + 257);
  if (*((_BYTE *)v5 + 256))
    _ZF = v119 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/LineTrackingEnablerConfig.h", 65, (uint64_t)"", 0, (uint64_t)"Cannot enable lines both 'always' and 'when needed'.", 52, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v121 = 2 * (v119 != 0);
  if (*((_BYTE *)v5 + 256))
    v121 = 1;
  v837[0] = v121;
  v122 = *((_QWORD *)v5 + 55);
  v123 = *(_OWORD *)(v5 + 1362);
  *(_OWORD *)&v837[16] = *(_OWORD *)(v5 + 1358);
  *(_OWORD *)&v837[32] = v123;
  *(_QWORD *)&v837[8] = v122;
  *(_QWORD *)&v837[48] = 0x500000014;
  *(_OWORD *)&v837[56] = xmmword_2102E6720;
  sub_20EEB3B80((uint64_t)v837, (uint64_t *)(v9 + 4112));
  v124 = (char *)operator new(0x19uLL);
  strcpy(v124, "Line Enabler Health FWD");
  *(_QWORD *)(v9 + 4120) = &off_24C9C8E88;
  *(_QWORD *)(v9 + 4128) = v124;
  *(_QWORD *)(v9 + 4136) = 23;
  *(_QWORD *)(v9 + 4144) = 0x8000000000000019;
  *(_OWORD *)(v9 + 4168) = 0u;
  *(_OWORD *)(v9 + 4152) = 0u;
  *(_QWORD *)(v9 + 4184) = 0;
  v125 = (std::__shared_weak_count *)operator new(0x58uLL);
  v125->__shared_owners_ = 0;
  v126 = (unint64_t *)&v125->__shared_owners_;
  v125->__shared_weak_owners_ = 0;
  v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v125[1]);
  do
    v127 = __ldxr(v126);
  while (__stxr(v127 + 1, v126));
  v128 = operator new();
  *(_BYTE *)(v128 + 8) = 1;
  *(_QWORD *)(v128 + 48) = 0;
  *(_QWORD *)(v128 + 32) = 0;
  *(_QWORD *)(v128 + 40) = 0;
  *(_QWORD *)v128 = &off_24C9C8F58;
  *(_QWORD *)(v128 + 16) = &unk_24C9C8FD0;
  *(_QWORD *)(v128 + 24) = &unk_24C9C9010;
  *(_QWORD *)(v128 + 56) = 0;
  *(_QWORD *)(v128 + 64) = 0;
  *(_QWORD *)(v128 + 72) = v125 + 1;
  *(_QWORD *)(v128 + 80) = v125;
  v129 = (_QWORD *)operator new();
  *v129 = &off_24C9C90F8;
  *(_QWORD *)(v128 + 88) = v129;
  *(_QWORD *)(v128 + 96) = v128 + 96;
  *(_QWORD *)(v128 + 104) = v128 + 96;
  *(_QWORD *)(v128 + 112) = 0;
  *(_QWORD *)(v128 + 120) = v128 + 120;
  *(_QWORD *)(v128 + 128) = v128 + 120;
  *(_QWORD *)(v128 + 136) = 0;
  v130 = (std::__shared_weak_count *)operator new();
  v130->__shared_owners_ = 0;
  v131 = (unint64_t *)&v130->__shared_owners_;
  v130->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9148;
  v130->__shared_weak_owners_ = 0;
  v130[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  v132 = *(std::__shared_weak_count **)(v128 + 40);
  if (v132)
  {
    if (v132->__shared_owners_ != -1)
      goto LABEL_141;
    do
      v133 = __ldxr(v131);
    while (__stxr(v133 + 1, v131));
    v134 = (unint64_t *)&v130->__shared_weak_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
    *(_QWORD *)(v128 + 32) = v128;
    *(_QWORD *)(v128 + 40) = v130;
    std::__shared_weak_count::__release_weak(v132);
  }
  else
  {
    do
      v136 = __ldxr(v131);
    while (__stxr(v136 + 1, v131));
    v137 = (unint64_t *)&v130->__shared_weak_owners_;
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
    *(_QWORD *)(v128 + 32) = v128;
    *(_QWORD *)(v128 + 40) = v130;
  }
  do
    v139 = __ldaxr(v131);
  while (__stlxr(v139 - 1, v131));
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
LABEL_141:
  *(_QWORD *)v837 = &off_24C9C8EB8;
  strcpy(&v837[8], "channel");
  *(_QWORD *)&v837[16] = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v837[23] = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  v837[31] = 7;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
  *(_QWORD *)&v837[32] = 0x7974706D45;
  *(_QWORD *)&v837[40] = *(_QWORD *)__p;
  *(_QWORD *)&v837[47] = *(_QWORD *)&__p[7];
  v837[55] = 5;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_QWORD *)&v837[72] = v128;
  v140 = (unint64_t *)&v130->__shared_weak_owners_;
  *(_QWORD *)&v837[80] = v130;
  do
    v141 = __ldxr(v140);
  while (__stxr(v141 + 1, v140));
  *(_QWORD *)&v837[88] = &off_24C9B5708;
  v142 = (_QWORD *)operator new();
  *v142 = &off_24C9B5A58;
  v142[1] = v128;
  v142[2] = v130;
  *(_QWORD *)&v837[96] = v142;
  v143 = *(_QWORD *)&v837[72];
  v144 = *(_QWORD *)&v837[80];
  if (!*(_QWORD *)&v837[80])
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v148 = *(_QWORD *)&v837[72] + 16;
    else
      v148 = 0;
    goto LABEL_160;
  }
  v145 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v146 = __ldxr(v145);
  while (__stxr(v146 + 1, v145));
  v147 = *(_QWORD *)&v837[80];
  *(_QWORD *)&v837[104] = v143;
  *(_QWORD *)&v838 = v144;
  if (*(_QWORD *)&v837[72])
    v148 = *(_QWORD *)&v837[72] + 16;
  else
    v148 = 0;
  if (!*(_QWORD *)&v837[80])
  {
    v143 = *(_QWORD *)&v837[72];
LABEL_160:
    v151 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9C8EE8;
    *(_QWORD *)v839 = v148;
    *(_QWORD *)&v839[8] = 0;
    goto LABEL_161;
  }
  v149 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v150 = __ldxr(v149);
  while (__stxr(v150 + 1, v149));
  v143 = *(_QWORD *)&v837[72];
  v151 = *(_QWORD *)&v837[80];
  *((_QWORD *)&v838 + 1) = &off_24C9C8EE8;
  *(_QWORD *)v839 = v148;
  *(_QWORD *)&v839[8] = v147;
  if (*(_QWORD *)&v837[80])
  {
    v152 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
LABEL_161:
  if (v143)
    v154 = v143 + 24;
  else
    v154 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v154;
  *(_QWORD *)&v839[32] = v151;
  v155 = operator new();
  *(_QWORD *)v155 = &off_24C9C8EB8;
  *(_OWORD *)(v155 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v155 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v155 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v155 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v155 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v155 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v155 + 88) = &off_24C9B5708;
  *(_OWORD *)(v155 + 96) = *(_OWORD *)&v837[96];
  v156 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v155 + 112) = v156;
  *(_QWORD *)(v155 + 120) = &off_24C9C8EE8;
  *(_OWORD *)(v155 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v155 + 144) = &off_24C9B2310;
  *(_OWORD *)(v155 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 4192) = v155;
  sub_20EBFCAF4((uint64_t)v837);
  do
    v157 = __ldaxr(v126);
  while (__stlxr(v157 - 1, v126));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  *(_QWORD *)(v9 + 4200) = &off_24C9C9198;
  strcpy((char *)(v9 + 4208), "Jasper Health Fwd");
  *(_DWORD *)(v9 + 4226) = v765;
  *(_BYTE *)(v9 + 4230) = v766;
  *(_BYTE *)(v9 + 4231) = 17;
  v765 = 0;
  v766 = 0;
  *(_OWORD *)(v9 + 4232) = 0u;
  *(_QWORD *)(v9 + 4264) = 0;
  *(_OWORD *)(v9 + 4248) = 0u;
  v158 = (std::__shared_weak_count *)operator new(0x58uLL);
  v158->__shared_owners_ = 0;
  v159 = (unint64_t *)&v158->__shared_owners_;
  v158->__shared_weak_owners_ = 0;
  v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v158[1]);
  do
    v160 = __ldxr(v159);
  while (__stxr(v160 + 1, v159));
  v161 = operator new();
  *(_BYTE *)(v161 + 8) = 1;
  *(_QWORD *)(v161 + 48) = 0;
  *(_QWORD *)(v161 + 32) = 0;
  *(_QWORD *)(v161 + 40) = 0;
  *(_QWORD *)v161 = &off_24C9C9230;
  *(_QWORD *)(v161 + 16) = &unk_24C9C92A8;
  *(_QWORD *)(v161 + 24) = &unk_24C9C92E8;
  *(_QWORD *)(v161 + 56) = 0;
  *(_QWORD *)(v161 + 64) = 0;
  *(_QWORD *)(v161 + 72) = v158 + 1;
  *(_QWORD *)(v161 + 80) = v158;
  v162 = (_QWORD *)operator new();
  *v162 = &off_24C9C93D0;
  *(_QWORD *)(v161 + 88) = v162;
  *(_QWORD *)(v161 + 96) = v161 + 96;
  *(_QWORD *)(v161 + 104) = v161 + 96;
  *(_QWORD *)(v161 + 112) = 0;
  *(_QWORD *)(v161 + 120) = v161 + 120;
  *(_QWORD *)(v161 + 128) = v161 + 120;
  *(_QWORD *)(v161 + 136) = 0;
  v163 = (std::__shared_weak_count *)operator new();
  v163->__shared_owners_ = 0;
  v164 = (unint64_t *)&v163->__shared_owners_;
  v163->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9420;
  v163->__shared_weak_owners_ = 0;
  v163[1].__vftable = (std::__shared_weak_count_vtbl *)v161;
  v165 = *(std::__shared_weak_count **)(v161 + 40);
  if (v165)
  {
    if (v165->__shared_owners_ != -1)
      goto LABEL_183;
    do
      v166 = __ldxr(v164);
    while (__stxr(v166 + 1, v164));
    v167 = (unint64_t *)&v163->__shared_weak_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
    *(_QWORD *)(v161 + 32) = v161;
    *(_QWORD *)(v161 + 40) = v163;
    std::__shared_weak_count::__release_weak(v165);
  }
  else
  {
    do
      v169 = __ldxr(v164);
    while (__stxr(v169 + 1, v164));
    v170 = (unint64_t *)&v163->__shared_weak_owners_;
    do
      v171 = __ldxr(v170);
    while (__stxr(v171 + 1, v170));
    *(_QWORD *)(v161 + 32) = v161;
    *(_QWORD *)(v161 + 40) = v163;
  }
  do
    v172 = __ldaxr(v164);
  while (__stlxr(v172 - 1, v164));
  if (!v172)
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
  }
LABEL_183:
  *(_QWORD *)v837 = &off_24C9C91C8;
  strcpy(&v837[8], "channel");
  *(_QWORD *)&v837[16] = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v837[23] = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  v837[31] = 7;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
  *(_QWORD *)&v837[32] = 0x7974706D45;
  *(_QWORD *)&v837[40] = *(_QWORD *)__p;
  *(_QWORD *)&v837[47] = *(_QWORD *)&__p[7];
  v837[55] = 5;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_QWORD *)&v837[72] = v161;
  v173 = (unint64_t *)&v163->__shared_weak_owners_;
  *(_QWORD *)&v837[80] = v163;
  do
    v174 = __ldxr(v173);
  while (__stxr(v174 + 1, v173));
  *(_QWORD *)&v837[88] = &off_24C9B5708;
  v175 = (_QWORD *)operator new();
  *v175 = &off_24C9B5A58;
  v175[1] = v161;
  v175[2] = v163;
  *(_QWORD *)&v837[96] = v175;
  v176 = *(_QWORD *)&v837[72];
  v177 = *(_QWORD *)&v837[80];
  if (!*(_QWORD *)&v837[80])
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v181 = *(_QWORD *)&v837[72] + 16;
    else
      v181 = 0;
    goto LABEL_202;
  }
  v178 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v179 = __ldxr(v178);
  while (__stxr(v179 + 1, v178));
  v180 = *(_QWORD *)&v837[80];
  *(_QWORD *)&v837[104] = v176;
  *(_QWORD *)&v838 = v177;
  if (*(_QWORD *)&v837[72])
    v181 = *(_QWORD *)&v837[72] + 16;
  else
    v181 = 0;
  if (!*(_QWORD *)&v837[80])
  {
    v176 = *(_QWORD *)&v837[72];
LABEL_202:
    v184 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9C91F8;
    *(_QWORD *)v839 = v181;
    *(_QWORD *)&v839[8] = 0;
    goto LABEL_203;
  }
  v182 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v183 = __ldxr(v182);
  while (__stxr(v183 + 1, v182));
  v176 = *(_QWORD *)&v837[72];
  v184 = *(_QWORD *)&v837[80];
  *((_QWORD *)&v838 + 1) = &off_24C9C91F8;
  *(_QWORD *)v839 = v181;
  *(_QWORD *)&v839[8] = v180;
  if (*(_QWORD *)&v837[80])
  {
    v185 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v186 = __ldxr(v185);
    while (__stxr(v186 + 1, v185));
  }
LABEL_203:
  if (v176)
    v187 = v176 + 24;
  else
    v187 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v187;
  *(_QWORD *)&v839[32] = v184;
  v188 = operator new();
  *(_QWORD *)v188 = &off_24C9C91C8;
  *(_OWORD *)(v188 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v188 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v188 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v188 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v188 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v188 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v188 + 88) = &off_24C9B5708;
  *(_OWORD *)(v188 + 96) = *(_OWORD *)&v837[96];
  v189 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v188 + 112) = v189;
  *(_QWORD *)(v188 + 120) = &off_24C9C91F8;
  *(_OWORD *)(v188 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v188 + 144) = &off_24C9B2310;
  *(_OWORD *)(v188 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 4272) = v188;
  sub_20EBFDE1C((uint64_t)v837);
  do
    v190 = __ldaxr(v159);
  while (__stlxr(v190 - 1, v159));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
    std::__shared_weak_count::__release_weak(v158);
  }
  sub_20EC202EC(v734, v9 + 4280);
  v191 = (char *)operator new(0x98uLL);
  *((_QWORD *)v191 + 1) = 0;
  v192 = (unint64_t *)(v191 + 8);
  *((_QWORD *)v191 + 2) = 0;
  *(_QWORD *)v191 = &off_24C9C9470;
  sub_20EFDC5B8((uint64_t)(v191 + 24), *((double *)v5 + 1116));
  v764.tv_sec = (__darwin_time_t)(v191 + 24);
  v764.tv_nsec = (uint64_t)v191;
  v763 = 0uLL;
  *(_QWORD *)(v9 + 4360) = &off_24C9C94C0;
  if (v191[103] < 0)
  {
    sub_20E860C04((_BYTE *)(v9 + 4368), *((void **)v191 + 10), *((_QWORD *)v191 + 11));
  }
  else
  {
    *(_OWORD *)(v9 + 4368) = *((_OWORD *)v191 + 5);
    *(_QWORD *)(v9 + 4384) = *((_QWORD *)v191 + 12);
  }
  if (v191[127] < 0)
  {
    sub_20E860C04((_BYTE *)(v9 + 4392), *((void **)v191 + 13), *((_QWORD *)v191 + 14));
  }
  else
  {
    *(_OWORD *)(v9 + 4392) = *(_OWORD *)(v191 + 104);
    *(_QWORD *)(v9 + 4408) = *((_QWORD *)v191 + 15);
  }
  *(_QWORD *)(v9 + 4424) = 0;
  *(_QWORD *)(v9 + 4416) = 0;
  v193 = (char *)operator new(0x58uLL);
  *((_QWORD *)v193 + 1) = 0;
  v194 = (unint64_t *)(v193 + 8);
  *((_QWORD *)v193 + 2) = 0;
  *(_QWORD *)v193 = &unk_24C9B6A90;
  MEMORY[0x212BC5E10](v193 + 24);
  v773.tv_sec = (__darwin_time_t)(v193 + 24);
  v773.tv_nsec = (uint64_t)v193;
  v771 = (uint64_t (**)())(v193 + 24);
  v772 = (std::__shared_weak_count *)v193;
  do
    v195 = __ldxr(v194);
  while (__stxr(v195 + 1, v194));
  *(_QWORD *)&v770 = v191 + 24;
  *((_QWORD *)&v770 + 1) = v191;
  do
    v196 = __ldxr(v192);
  while (__stxr(v196 + 1, v192));
  if (v191[55] < 0)
    sub_20E860C04(&__dst, *((void **)v191 + 4), *((_QWORD *)v191 + 5));
  else
    __dst = *(std::string *)(v191 + 32);
  if (v191[79] < 0)
  {
    sub_20E860C04(__p, *((void **)v191 + 7), *((_QWORD *)v191 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v191 + 56);
    *(_QWORD *)&__p[16] = *((_QWORD *)v191 + 9);
  }
  v772 = 0;
  v771 = 0;
  v747 = v191 + 24;
  v748 = (std::__shared_weak_count *)v191;
  do
    v197 = __ldxr(v192);
  while (__stxr(v197 + 1, v192));
  v851[0] = __dst.__r_.__value_.__l.__size_;
  v727 = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v851 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
  v729 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  memset(&__dst, 0, sizeof(__dst));
  v198 = *(_QWORD *)__p;
  v850[0] = *(_QWORD *)&__p[8];
  *(_QWORD *)((char *)v850 + 7) = *(_QWORD *)&__p[15];
  v199 = __p[23];
  memset(__p, 0, sizeof(__p));
  v762 = 0;
  v761 = 0;
  v852[0] = 0;
  *(_QWORD *)((char *)v852 + 7) = 0;
  *(_QWORD *)&v854 = v193 + 24;
  *((_QWORD *)&v854 + 1) = v193;
  v740[0] = 0uLL;
  v200 = (char *)operator new();
  v853[0] = v852[0];
  *(_QWORD *)((char *)v853 + 7) = *(_QWORD *)((char *)v852 + 7);
  v852[0] = 0;
  *(_QWORD *)((char *)v852 + 7) = 0;
  *((_QWORD *)&v854 + 1) = 0;
  *(_QWORD *)&v854 = 0;
  v200[8] = 1;
  *((_QWORD *)v200 + 4) = 0;
  *((_QWORD *)v200 + 5) = 0;
  *(_QWORD *)v200 = &off_24C9C9520;
  *((_QWORD *)v200 + 2) = &unk_24C9C9598;
  *((_QWORD *)v200 + 3) = &unk_24C9C95D8;
  v201 = v853[0];
  *(_QWORD *)(v200 + 63) = *(_QWORD *)((char *)v853 + 7);
  *((_QWORD *)v200 + 6) = 0;
  *((_QWORD *)v200 + 7) = v201;
  v200[71] = 0;
  v853[0] = 0;
  *(_QWORD *)((char *)v853 + 7) = 0;
  *((_QWORD *)v200 + 9) = v193 + 24;
  *((_QWORD *)v200 + 10) = v193;
  v750[0] = 0;
  v750[1] = 0;
  v202 = (_QWORD *)operator new();
  *v202 = &off_24C9C96B0;
  v202[1] = v191 + 24;
  v202[2] = v191;
  v747 = 0;
  v748 = 0;
  *((_QWORD *)v200 + 11) = v202;
  *((_QWORD *)v200 + 12) = v200 + 96;
  *((_QWORD *)v200 + 13) = v200 + 96;
  *((_QWORD *)v200 + 14) = 0;
  *((_QWORD *)v200 + 15) = v200 + 120;
  *((_QWORD *)v200 + 16) = v200 + 120;
  *((_QWORD *)v200 + 17) = 0;
  v203 = (std::__shared_weak_count *)operator new();
  v203->__shared_owners_ = 0;
  v204 = (unint64_t *)&v203->__shared_owners_;
  v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9700;
  v203->__shared_weak_owners_ = 0;
  v203[1].__vftable = (std::__shared_weak_count_vtbl *)v200;
  v205 = (std::__shared_weak_count *)*((_QWORD *)v200 + 5);
  if (v205)
  {
    if (v205->__shared_owners_ != -1)
      goto LABEL_241;
    do
      v206 = __ldxr(v204);
    while (__stxr(v206 + 1, v204));
    v207 = (unint64_t *)&v203->__shared_weak_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
    *((_QWORD *)v200 + 4) = v200;
    *((_QWORD *)v200 + 5) = v203;
    std::__shared_weak_count::__release_weak(v205);
  }
  else
  {
    do
      v209 = __ldxr(v204);
    while (__stxr(v209 + 1, v204));
    v210 = (unint64_t *)&v203->__shared_weak_owners_;
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
    *((_QWORD *)v200 + 4) = v200;
    *((_QWORD *)v200 + 5) = v203;
  }
  do
    v212 = __ldaxr(v204);
  while (__stlxr(v212 - 1, v204));
  if (!v212)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
  }
LABEL_241:
  v213 = (std::__shared_weak_count *)v750[1];
  if (v750[1])
  {
    v214 = (unint64_t *)((char *)v750[1] + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v750[0] = v200;
  v750[1] = v203;
  v216 = (std::__shared_weak_count *)*((_QWORD *)&v854 + 1);
  if (*((_QWORD *)&v854 + 1))
  {
    v217 = (unint64_t *)(*((_QWORD *)&v854 + 1) + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  *(_QWORD *)v837 = &off_24C9C94F0;
  *(_QWORD *)&v837[8] = v727;
  *(_QWORD *)&v837[16] = v851[0];
  *(_QWORD *)&v837[23] = *(_QWORD *)((char *)v851 + 7);
  v837[31] = v729;
  v851[0] = 0;
  *(_QWORD *)((char *)v851 + 7) = 0;
  *(_QWORD *)&v837[32] = v198;
  *(_QWORD *)&v837[40] = v850[0];
  *(_QWORD *)&v837[47] = *(_QWORD *)((char *)v850 + 7);
  v837[55] = v199;
  v850[0] = 0;
  *(_QWORD *)((char *)v850 + 7) = 0;
  *(_QWORD *)&v837[56] = 0;
  *((_QWORD *)&v854 + 1) = 0;
  *(_QWORD *)&v854 = 0;
  v219 = v750[0];
  v220 = (char *)v750[1];
  *(_QWORD *)&v837[64] = 0;
  *(void **)&v837[72] = v750[0];
  *(void **)&v837[80] = v750[1];
  v750[0] = 0;
  v750[1] = 0;
  if (*(_QWORD *)&v837[80])
  {
    v221 = (unint64_t *)(v220 + 16);
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
  }
  *(_QWORD *)&v837[88] = &off_24C9CC340;
  v223 = (_QWORD *)operator new();
  *v223 = &off_24C9CC388;
  v223[1] = v219;
  v223[2] = v220;
  *(_QWORD *)&v837[96] = v223;
  v224 = *(_QWORD *)&v837[72];
  v225 = *(_QWORD *)&v837[80];
  if (!*(_QWORD *)&v837[80])
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v229 = *(_QWORD *)&v837[72] + 16;
    else
      v229 = 0;
    goto LABEL_271;
  }
  v226 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v227 = __ldxr(v226);
  while (__stxr(v227 + 1, v226));
  v228 = *(_QWORD *)&v837[80];
  *(_QWORD *)&v837[104] = v224;
  *(_QWORD *)&v838 = v225;
  if (*(_QWORD *)&v837[72])
    v229 = *(_QWORD *)&v837[72] + 16;
  else
    v229 = 0;
  if (!*(_QWORD *)&v837[80])
  {
    v224 = *(_QWORD *)&v837[72];
LABEL_271:
    v232 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9CC820;
    *(_QWORD *)v839 = v229;
    *(_QWORD *)&v839[8] = 0;
    goto LABEL_272;
  }
  v230 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v231 = __ldxr(v230);
  while (__stxr(v231 + 1, v230));
  v224 = *(_QWORD *)&v837[72];
  v232 = *(_QWORD *)&v837[80];
  *((_QWORD *)&v838 + 1) = &off_24C9CC820;
  *(_QWORD *)v839 = v229;
  *(_QWORD *)&v839[8] = v228;
  if (*(_QWORD *)&v837[80])
  {
    v233 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v234 = __ldxr(v233);
    while (__stxr(v234 + 1, v233));
  }
LABEL_272:
  if (v224)
    v235 = v224 + 24;
  else
    v235 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v235;
  *(_QWORD *)&v839[32] = v232;
  if (*((_QWORD *)&v740[0] + 1))
  {
    v236 = (unint64_t *)(*((_QWORD *)&v740[0] + 1) + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v740[0] + 1) + 16))(*((_QWORD *)&v740[0] + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v740[0] + 1));
    }
  }
  if (!v748)
    goto LABEL_284;
  v238 = &v748->__shared_owners_;
  do
    v239 = __ldaxr((unint64_t *)v238);
  while (__stlxr(v239 - 1, (unint64_t *)v238));
  if (!v239)
  {
    ((void (*)(std::__shared_weak_count *))v748->__on_zero_shared)(v748);
    std::__shared_weak_count::__release_weak(v748);
    v240 = v762;
    if (!v762)
      goto LABEL_288;
  }
  else
  {
LABEL_284:
    v240 = v762;
    if (!v762)
      goto LABEL_288;
  }
  v241 = (unint64_t *)&v240->__shared_owners_;
  do
    v242 = __ldaxr(v241);
  while (__stlxr(v242 - 1, v241));
  if (v242)
  {
LABEL_288:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_289;
    goto LABEL_295;
  }
  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
  std::__shared_weak_count::__release_weak(v240);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_289:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_290;
    goto LABEL_296;
  }
LABEL_295:
  operator delete(*(void **)__p);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_290:
    if ((_QWORD)v770)
      goto LABEL_298;
    goto LABEL_297;
  }
LABEL_296:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((_QWORD)v770)
    goto LABEL_298;
LABEL_297:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 534, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_298:
  v243 = operator new();
  *(_QWORD *)v243 = &off_24C9C94F0;
  *(_OWORD *)(v243 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v243 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v243 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v243 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v243 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v243 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v243 + 88) = &off_24C9CC340;
  *(_OWORD *)(v243 + 96) = *(_OWORD *)&v837[96];
  v244 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v243 + 112) = v244;
  *(_QWORD *)(v243 + 120) = &off_24C9CC820;
  *(_OWORD *)(v243 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v243 + 144) = &off_24C9B2310;
  *(_OWORD *)(v243 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 4432) = v243;
  sub_20EBFF708((uint64_t)v837);
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
  if (*((_QWORD *)&v770 + 1))
  {
    v246 = (unint64_t *)(*((_QWORD *)&v770 + 1) + 8);
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v772;
  if (v772)
  {
    v249 = (unint64_t *)&v772->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  tv_nsec = (std::__shared_weak_count *)v773.tv_nsec;
  if (v773.tv_nsec)
  {
    v252 = (unint64_t *)(v773.tv_nsec + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))tv_nsec->__on_zero_shared)(tv_nsec);
      std::__shared_weak_count::__release_weak(tv_nsec);
    }
  }
  v254 = (std::__shared_weak_count *)v764.tv_nsec;
  if (v764.tv_nsec)
  {
    v255 = (unint64_t *)(v764.tv_nsec + 8);
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = (std::__shared_weak_count *)*((_QWORD *)&v763 + 1);
  if (*((_QWORD *)&v763 + 1))
  {
    v258 = (unint64_t *)(*((_QWORD *)&v763 + 1) + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = (char *)operator new(0x20uLL);
  strcpy(v260, "Forward Pose Metadata to ML");
  *(_QWORD *)(v9 + 4440) = &off_24C9C9750;
  *(_QWORD *)(v9 + 4448) = v260;
  *(_QWORD *)(v9 + 4456) = 27;
  *(_QWORD *)(v9 + 4464) = 0x8000000000000020;
  *(_OWORD *)(v9 + 4488) = 0u;
  *(_OWORD *)(v9 + 4472) = 0u;
  *(_QWORD *)(v9 + 4504) = 0;
  v261 = (std::__shared_weak_count *)operator new(0x58uLL);
  v261->__shared_owners_ = 0;
  v262 = (unint64_t *)&v261->__shared_owners_;
  v261->__shared_weak_owners_ = 0;
  v261->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v261[1]);
  do
    v263 = __ldxr(v262);
  while (__stxr(v263 + 1, v262));
  v264 = operator new();
  *(_BYTE *)(v264 + 8) = 1;
  *(_QWORD *)(v264 + 48) = 0;
  *(_QWORD *)(v264 + 32) = 0;
  *(_QWORD *)(v264 + 40) = 0;
  *(_QWORD *)v264 = &off_24C9C97E8;
  *(_QWORD *)(v264 + 16) = &unk_24C9C9860;
  *(_QWORD *)(v264 + 24) = &unk_24C9C98A0;
  *(_QWORD *)(v264 + 56) = 0;
  *(_QWORD *)(v264 + 64) = 0;
  *(_QWORD *)(v264 + 72) = v261 + 1;
  *(_QWORD *)(v264 + 80) = v261;
  v265 = (_QWORD *)operator new();
  *v265 = &off_24C9C9988;
  *(_QWORD *)(v264 + 88) = v265;
  *(_QWORD *)(v264 + 96) = v264 + 96;
  *(_QWORD *)(v264 + 104) = v264 + 96;
  *(_QWORD *)(v264 + 112) = 0;
  *(_QWORD *)(v264 + 120) = v264 + 120;
  *(_QWORD *)(v264 + 128) = v264 + 120;
  *(_QWORD *)(v264 + 136) = 0;
  v266 = (std::__shared_weak_count *)operator new();
  v266->__shared_owners_ = 0;
  v267 = (unint64_t *)&v266->__shared_owners_;
  v266->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C99D8;
  v266->__shared_weak_owners_ = 0;
  v266[1].__vftable = (std::__shared_weak_count_vtbl *)v264;
  v268 = *(std::__shared_weak_count **)(v264 + 40);
  if (v268)
  {
    if (v268->__shared_owners_ != -1)
      goto LABEL_338;
    do
      v269 = __ldxr(v267);
    while (__stxr(v269 + 1, v267));
    v270 = (unint64_t *)&v266->__shared_weak_owners_;
    do
      v271 = __ldxr(v270);
    while (__stxr(v271 + 1, v270));
    *(_QWORD *)(v264 + 32) = v264;
    *(_QWORD *)(v264 + 40) = v266;
    std::__shared_weak_count::__release_weak(v268);
  }
  else
  {
    do
      v272 = __ldxr(v267);
    while (__stxr(v272 + 1, v267));
    v273 = (unint64_t *)&v266->__shared_weak_owners_;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    *(_QWORD *)(v264 + 32) = v264;
    *(_QWORD *)(v264 + 40) = v266;
  }
  do
    v275 = __ldaxr(v267);
  while (__stlxr(v275 - 1, v267));
  if (!v275)
  {
    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
    std::__shared_weak_count::__release_weak(v266);
  }
LABEL_338:
  *(_QWORD *)v837 = &off_24C9C9780;
  strcpy(&v837[8], "channel");
  *(_QWORD *)&v837[16] = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v837[23] = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  v837[31] = 7;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = 0;
  *(_QWORD *)&v837[32] = 0x7974706D45;
  *(_QWORD *)&v837[40] = *(_QWORD *)__p;
  *(_QWORD *)&v837[47] = *(_QWORD *)&__p[7];
  v837[55] = 5;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_QWORD *)&v837[72] = v264;
  v276 = (unint64_t *)&v266->__shared_weak_owners_;
  *(_QWORD *)&v837[80] = v266;
  do
    v277 = __ldxr(v276);
  while (__stxr(v277 + 1, v276));
  *(_QWORD *)&v837[88] = &off_24C9B4780;
  v278 = (_QWORD *)operator new();
  *v278 = &off_24C9C5E78;
  v278[1] = v264;
  v278[2] = v266;
  *(_QWORD *)&v837[96] = v278;
  v279 = *(_QWORD *)&v837[72];
  v280 = *(_QWORD *)&v837[80];
  if (!*(_QWORD *)&v837[80])
  {
    *(_QWORD *)&v837[104] = *(_QWORD *)&v837[72];
    *(_QWORD *)&v838 = 0;
    if (*(_QWORD *)&v837[72])
      v284 = *(_QWORD *)&v837[72] + 16;
    else
      v284 = 0;
    goto LABEL_357;
  }
  v281 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v282 = __ldxr(v281);
  while (__stxr(v282 + 1, v281));
  v283 = *(_QWORD *)&v837[80];
  *(_QWORD *)&v837[104] = v279;
  *(_QWORD *)&v838 = v280;
  if (*(_QWORD *)&v837[72])
    v284 = *(_QWORD *)&v837[72] + 16;
  else
    v284 = 0;
  if (!*(_QWORD *)&v837[80])
  {
    v279 = *(_QWORD *)&v837[72];
LABEL_357:
    v287 = 0;
    *((_QWORD *)&v838 + 1) = &off_24C9C97B0;
    *(_QWORD *)v839 = v284;
    *(_QWORD *)&v839[8] = 0;
    goto LABEL_358;
  }
  v285 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
  do
    v286 = __ldxr(v285);
  while (__stxr(v286 + 1, v285));
  v279 = *(_QWORD *)&v837[72];
  v287 = *(_QWORD *)&v837[80];
  *((_QWORD *)&v838 + 1) = &off_24C9C97B0;
  *(_QWORD *)v839 = v284;
  *(_QWORD *)&v839[8] = v283;
  if (*(_QWORD *)&v837[80])
  {
    v288 = (unint64_t *)(*(_QWORD *)&v837[80] + 16);
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
LABEL_358:
  if (v279)
    v290 = v279 + 24;
  else
    v290 = 0;
  *(_QWORD *)&v839[16] = &off_24C9B2310;
  *(_QWORD *)&v839[24] = v290;
  *(_QWORD *)&v839[32] = v287;
  v291 = operator new();
  *(_QWORD *)v291 = &off_24C9C9780;
  *(_OWORD *)(v291 + 8) = *(_OWORD *)&v837[8];
  *(_QWORD *)(v291 + 24) = *(_QWORD *)&v837[24];
  memset(&v837[8], 0, 24);
  *(_OWORD *)(v291 + 32) = *(_OWORD *)&v837[32];
  *(_QWORD *)(v291 + 48) = *(_QWORD *)&v837[48];
  memset(&v837[32], 0, 24);
  *(_OWORD *)(v291 + 56) = *(_OWORD *)&v837[56];
  *(_QWORD *)&v837[56] = 0;
  *(_QWORD *)&v837[64] = 0;
  *(_OWORD *)(v291 + 72) = *(_OWORD *)&v837[72];
  *(_QWORD *)&v837[72] = 0;
  *(_QWORD *)&v837[80] = 0;
  *(_QWORD *)(v291 + 88) = &off_24C9B4780;
  *(_OWORD *)(v291 + 96) = *(_OWORD *)&v837[96];
  v292 = v838;
  *(_QWORD *)&v837[104] = 0;
  *(_QWORD *)&v838 = 0;
  *(_QWORD *)(v291 + 112) = v292;
  *(_QWORD *)(v291 + 120) = &off_24C9C97B0;
  *(_OWORD *)(v291 + 128) = *(_OWORD *)v839;
  *(_QWORD *)&v839[8] = 0;
  *(_QWORD *)&v837[96] = 0;
  *(_QWORD *)v839 = 0;
  *(_QWORD *)(v291 + 144) = &off_24C9B2310;
  *(_OWORD *)(v291 + 152) = *(_OWORD *)&v839[24];
  *(_QWORD *)&v839[24] = 0;
  *(_QWORD *)&v839[32] = 0;
  *(_QWORD *)(v9 + 4512) = v291;
  sub_20EC00A14((uint64_t)v837);
  do
    v293 = __ldaxr(v262);
  while (__stlxr(v293 - 1, v262));
  v294 = v737;
  v295 = v738;
  if (!v293)
  {
    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
    std::__shared_weak_count::__release_weak(v261);
  }
  sub_20EAE8584(v9 + 4520, (uint64_t)(v738 + 2692), *((_BYTE *)v738 + 280) != 0);
  *(_OWORD *)(v9 + 8784) = 0u;
  sub_20EE7D5CC(v9 + 8800);
  *(_BYTE *)(v9 + 20224) = 0;
  v296.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v297 = operator new(0x108uLL);
  v297[1] = 0;
  v297[2] = 0;
  *v297 = &off_24C9B6098;
  sub_20F215F9C((uint64_t)(v297 + 3));
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v297 + 3);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v297;
  v298 = operator new();
  *(_QWORD *)v837 = v297 + 3;
  *(_QWORD *)&v837[8] = v297;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  sub_20E9AE8C4(v298, (uint64_t *)v837);
  v299 = *(std::__shared_weak_count **)&v837[8];
  if (*(_QWORD *)&v837[8])
  {
    v300 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = *(_QWORD *)(v9 + 3736);
  *(_QWORD *)(v9 + 3736) = v298;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
  if (__dst.__r_.__value_.__l.__size_)
  {
    v304 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  v306 = sub_210219C18();
  v307 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v296.__d_.__rep_);
  v728.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v308 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v308 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v309 = atomic_load(&qword_254A5A450);
  v310 = v307 / 1000000.0;
  if (v309)
  {
    *(_DWORD *)v837 = 134217984;
    *(double *)&v837[4] = v310;
    v311 = (char *)_os_log_send_and_compose_impl();
    v312 = strlen(v311);
    __dst.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&__dst);
    v313 = __dst.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&__dst, 1);
    sub_210219E20(v837, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v306 + 1), (__int128 *)(v306 + 5), "CMPoseAnchorTransformNode completed in %f ms", 0x2CuLL, v311, v312, v313, &__dst);
    std::mutex::lock(&stru_254A5A410);
    v314 = qword_254A5A458;
    for (i = unk_254A5A460; v314 != i; v314 += 40)
    {
      v316 = *(_QWORD *)(v314 + 32);
      if (!v316)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v316 + 48))(v316, v837);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v839[15] & 0x80000000) != 0)
    {
      operator delete(*((void **)&v838 + 1));
      v294 = v737;
      if ((SBYTE7(v838) & 0x80000000) == 0)
      {
LABEL_384:
        if (!v837[88])
        {
LABEL_390:
          if (v837[56] && (v837[55] & 0x80000000) != 0)
            operator delete(*(void **)&v837[32]);
          if ((v837[31] & 0x80000000) != 0)
            operator delete(*(void **)&v837[8]);
          if (v311)
            free(v311);
          goto LABEL_397;
        }
LABEL_388:
        if ((v837[87] & 0x80000000) != 0)
          operator delete(*(void **)&v837[64]);
        goto LABEL_390;
      }
    }
    else
    {
      v294 = v737;
      if ((SBYTE7(v838) & 0x80000000) == 0)
        goto LABEL_384;
    }
    operator delete(*(void **)&v837[96]);
    if (!v837[88])
      goto LABEL_390;
    goto LABEL_388;
  }
LABEL_397:
  if (os_signpost_enabled((os_log_t)*v306))
  {
    *(_DWORD *)v837 = 134217984;
    *(double *)&v837[4] = v310;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20EA8F3C4((char **)v294, v738[1], (char **)&v761);
  sub_210218050("SlamEngine", 0xAuLL, v734, 0, &v771);
  v317 = v738[3219];
  v736 = *v738;
  v318 = *((_QWORD *)v738 + 756);
  *(_OWORD *)v750 = 0u;
  memset(v751, 0, sizeof(v751));
  LODWORD(v752) = 0;
  *(_QWORD *)((char *)&v752 + 4) = 0x5A00000028;
  v753 = xmmword_21031E640;
  v754 = xmmword_21031E650;
  *(_QWORD *)&v755 = 0x3FE0000000000000;
  DWORD2(v755) = 1028443341;
  *(_QWORD *)&v756 = 0x4049000000000000;
  DWORD2(v756) = 200;
  BYTE12(v756) = 1;
  *(_QWORD *)&v757 = 30;
  DWORD2(v757) = 20;
  v758 = xmmword_21031E660;
  *(_QWORD *)&v759 = 0xF0000001ELL;
  DWORD2(v759) = 3;
  v760 = xmmword_21031E670;
  if (v317 == 3)
  {
    memset(v837, 0, 24);
    v319 = *(char **)v294;
    v320 = *(char **)(v294 + 8);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v837;
    if (v319 == v320)
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    else
    {
      do
      {
        *(_DWORD *)__p = *(_DWORD *)v319;
        sub_20EA9AB98((uint64_t *)&__dst, __p);
        v319 += 1088;
      }
      while (v319 != v320);
      v321 = *(_QWORD *)&v837[8] - *(_QWORD *)v837;
      if (*(_QWORD *)v837)
      {
        *(_QWORD *)&v837[8] = *(_QWORD *)v837;
        operator delete(*(void **)v837);
      }
      v322 = (v321 >> 2);
      memset(&__dst, 0, sizeof(__dst));
      if (v322)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8 * v322);
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[0] + 8 * v322;
        *(_QWORD *)__p = operator new(8 * v322);
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        *(_QWORD *)&__p[16] = *(_QWORD *)__p + 8 * v322;
        goto LABEL_411;
      }
    }
    memset(__p, 0, sizeof(__p));
LABEL_411:
    memset(v837, 0, 24);
    v326 = *(char **)v294;
    v327 = *(char **)(v294 + 8);
    *(_QWORD *)&v854 = v837;
    if (v326 == v327)
    {
      if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
      {
LABEL_543:
        sub_20ED5DBF0(&__dst.__r_.__value_.__l.__data_, (char **)__p, v730, (uint64_t)v837);
        v751[0] = *(void **)&v837[16];
        *(_OWORD *)v750 = *(_OWORD *)v837;
        memset(v837, 0, 24);
        *(_OWORD *)&v751[1] = *(_OWORD *)&v837[24];
        v751[3] = *(void **)&v837[40];
        v754 = *(_OWORD *)&v837[80];
        v755 = *(_OWORD *)&v837[96];
        v759 = *(_OWORD *)&v839[32];
        v760 = *(_OWORD *)&v839[48];
        v756 = v838;
        v757 = *(_OWORD *)v839;
        v758 = *(_OWORD *)&v839[16];
        v752 = *(_OWORD *)&v837[48];
        v753 = *(_OWORD *)&v837[64];
        if (*(_QWORD *)__p)
        {
          *(_QWORD *)&__p[8] = *(_QWORD *)__p;
          operator delete(*(void **)__p);
        }
        if (__dst.__r_.__value_.__r.__words[0])
        {
          __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_549;
      }
    }
    else
    {
      do
      {
        LODWORD(v740[0]) = *(_DWORD *)v326;
        sub_20EA9AB98((uint64_t *)&v854, v740);
        v326 += 1088;
      }
      while (v326 != v327);
      v328 = *(int **)v837;
      if (*(_QWORD *)v837 != *(_QWORD *)&v837[8])
      {
        v329 = *(int **)&v837[8];
        while (1)
        {
          v330 = *v328;
          v332 = *(char **)v294;
          v331 = *(char **)(v294 + 8);
          if (*(char **)v294 != v331)
          {
            while (*(_DWORD *)v332 != v330)
            {
              v332 += 1088;
              if (v332 == v331)
                goto LABEL_935;
            }
          }
          if (v332 == v331)
          {
LABEL_935:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Requested camera id not found.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          if (*((_DWORD *)v332 + 2) != v736)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1302, (uint64_t)"image_processing_width_for_points == cam_set.primary.image_width_", 65, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_944:
              abort();
            }
            v330 = *v328;
          }
          v333 = *(unsigned int *)v332;
          if (v330)
          {
            if (v333 >= 0x10000)
            {
              v294 = v737;
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            v334 = *(char **)&__p[8];
            if (*(_QWORD *)&__p[8] < *(_QWORD *)&__p[16])
            {
              **(_QWORD **)&__p[8] = v333;
              v335 = v334 + 8;
              v9 = v739;
              goto LABEL_466;
            }
            v338 = *(_BYTE **)__p;
            v339 = *(_QWORD *)&__p[8] - *(_QWORD *)__p;
            v340 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3;
            v341 = v340 + 1;
            if ((unint64_t)(v340 + 1) >> 61)
              sub_20E92CED8();
            v342 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
            if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2 > v341)
              v341 = v342 >> 2;
            if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF8)
              v343 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v343 = v341;
            if (v343)
            {
              if (v343 >> 61)
                sub_20E877A38();
              v344 = operator new(8 * v343);
              v345 = &v344[8 * v340];
              *v345 = v333;
              v335 = (char *)(v345 + 1);
              v346 = (char *)(v334 - v338);
              if (v334 != v338)
              {
LABEL_443:
                v347 = (unint64_t)(v346 - 8);
                v9 = v739;
                if (v347 < 0x58)
                {
                  v294 = v737;
                  goto LABEL_463;
                }
                v358 = v334 - v344 - v339;
                v294 = v737;
                if (v358 < 0x20)
                  goto LABEL_982;
                v359 = (v347 >> 3) + 1;
                v360 = 8 * (v359 & 0x3FFFFFFFFFFFFFFCLL);
                v361 = &v334[-v360];
                v345 = (_QWORD *)((char *)v345 - v360);
                v362 = &v344[8 * v340 - 16];
                v363 = v334 - 16;
                v364 = v359 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v365 = *(_OWORD *)v363;
                  *(v362 - 1) = *((_OWORD *)v363 - 1);
                  *v362 = v365;
                  v362 -= 2;
                  v363 -= 32;
                  v364 -= 4;
                }
                while (v364);
                v334 = v361;
                if (v359 != (v359 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_982:
                  do
                  {
LABEL_463:
                    v366 = *((_QWORD *)v334 - 1);
                    v334 -= 8;
                    *--v345 = v366;
                  }
                  while (v334 != v338);
                }
                v334 = *(char **)__p;
                *(_QWORD *)__p = v345;
                *(_QWORD *)&__p[8] = v335;
                *(_QWORD *)&__p[16] = &v344[8 * v343];
                if (v334)
LABEL_465:
                  operator delete(v334);
LABEL_466:
                *(_QWORD *)&__p[8] = v335;
                if (*((_DWORD *)v332 + 1) != 2)
                  goto LABEL_416;
                v367 = *(unsigned int *)v332;
                if (v367 >= 0x10000)
                {
                  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
                  {
                    abort();
                  }
                  v335 = *(char **)&__p[8];
                  v9 = v739;
                }
                if ((unint64_t)v335 < *(_QWORD *)&__p[16])
                {
                  *(_QWORD *)v335 = v367 | 0x100000000;
                  v368 = (uint64_t)(v335 + 8);
                  goto LABEL_513;
                }
                v369 = *(char **)__p;
                v370 = &v335[-*(_QWORD *)__p];
                v371 = (uint64_t)&v335[-*(_QWORD *)__p] >> 3;
                v372 = v371 + 1;
                if ((unint64_t)(v371 + 1) >> 61)
                  sub_20E92CED8();
                v373 = *(_QWORD *)&__p[16] - *(_QWORD *)__p;
                if ((uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)__p) >> 2 > v372)
                  v372 = v373 >> 2;
                if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFF8)
                  v374 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v374 = v372;
                if (v374)
                {
                  if (v374 >> 61)
                    sub_20E877A38();
                  v375 = operator new(8 * v374);
                  v376 = (uint64_t *)&v375[8 * v371];
                  *v376 = v367 | 0x100000000;
                  v368 = (uint64_t)(v376 + 1);
                  v377 = (char *)(v335 - v369);
                  if (v335 != v369)
                  {
LABEL_481:
                    v378 = (unint64_t)(v377 - 8);
                    if (v378 < 0x58)
                    {
                      v379 = v335;
                      goto LABEL_527;
                    }
                    if ((unint64_t)(v335 - v375 - (_QWORD)v370) < 0x20)
                    {
                      v379 = v335;
                      goto LABEL_527;
                    }
                    v403 = (v378 >> 3) + 1;
                    v404 = 8 * (v403 & 0x3FFFFFFFFFFFFFFCLL);
                    v379 = &v335[-v404];
                    v376 = (uint64_t *)((char *)v376 - v404);
                    v405 = &v375[8 * v371 - 16];
                    v406 = v335 - 16;
                    v407 = v403 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v408 = *(_OWORD *)v406;
                      *(v405 - 1) = *((_OWORD *)v406 - 1);
                      *v405 = v408;
                      v405 -= 2;
                      v406 -= 32;
                      v407 -= 4;
                    }
                    while (v407);
                    if (v403 != (v403 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_527:
                        v409 = *((_QWORD *)v379 - 1);
                        v379 -= 8;
                        *--v376 = v409;
                      }
                      while (v379 != v369);
                    }
                    v335 = *(char **)__p;
                    *(_QWORD *)__p = v376;
                    *(_QWORD *)&__p[8] = v368;
                    *(_QWORD *)&__p[16] = &v375[8 * v374];
                    v9 = v739;
                    if (!v335)
                    {
LABEL_513:
                      *(_QWORD *)&__p[8] = v368;
                      if (*((_DWORD *)v332 + 134) != v736)
                      {
                        v402 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1320, (uint64_t)"image_processing_width_for_points == cam_set.secondary.image_width_", 67, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
                        goto LABEL_415;
                      }
                      goto LABEL_416;
                    }
LABEL_512:
                    operator delete(v335);
                    goto LABEL_513;
                  }
                }
                else
                {
                  v375 = 0;
                  v376 = (uint64_t *)(8 * v371);
                  *(_QWORD *)(8 * v371) = v367 | 0x100000000;
                  v368 = 8 * v371 + 8;
                  v377 = (char *)(v335 - v369);
                  if (v335 != v369)
                    goto LABEL_481;
                }
                *(_QWORD *)__p = v376;
                *(_QWORD *)&__p[8] = v368;
                *(_QWORD *)&__p[16] = &v375[8 * v374];
                v9 = v739;
                if (!v335)
                  goto LABEL_513;
                goto LABEL_512;
              }
            }
            else
            {
              v344 = 0;
              v345 = (_QWORD *)(8 * v340);
              *(_QWORD *)(8 * v340) = v333;
              v335 = (char *)(8 * v340 + 8);
              v346 = (char *)(v334 - v338);
              if (v334 != v338)
                goto LABEL_443;
            }
            v9 = v739;
            v294 = v737;
            *(_QWORD *)__p = v345;
            *(_QWORD *)&__p[8] = v335;
            *(_QWORD *)&__p[16] = &v344[8 * v343];
            if (v334)
              goto LABEL_465;
            goto LABEL_466;
          }
          if (v333 >= 0x10000)
          {
            v294 = v737;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
          v336 = (char *)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_ < __dst.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)__dst.__r_.__value_.__l.__size_ = v333;
            v337 = v336 + 8;
            v9 = v739;
            goto LABEL_493;
          }
          v348 = __dst.__r_.__value_.__r.__words[0];
          v349 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
          v350 = (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3;
          v351 = v350 + 1;
          if ((unint64_t)(v350 + 1) >> 61)
            sub_20E92CED8();
          v352 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2 > v351)
            v351 = v352 >> 2;
          if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFF8)
            v353 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v353 = v351;
          if (v353)
          {
            if (v353 >> 61)
              sub_20E877A38();
            v354 = operator new(8 * v353);
            v355 = &v354[8 * v350];
            *v355 = v333;
            v337 = v355 + 1;
            v356 = &v336[-v348];
            if (v336 != (char *)v348)
            {
LABEL_454:
              v357 = (unint64_t)(v356 - 8);
              v9 = v739;
              if (v357 < 0x58)
              {
                v294 = v737;
                goto LABEL_490;
              }
              v380 = v336 - v354 - v349;
              v294 = v737;
              if (v380 < 0x20)
                goto LABEL_983;
              v381 = (v357 >> 3) + 1;
              v382 = 8 * (v381 & 0x3FFFFFFFFFFFFFFCLL);
              v383 = &v336[-v382];
              v355 = (_QWORD *)((char *)v355 - v382);
              v384 = &v354[8 * v350 - 16];
              v385 = v336 - 16;
              v386 = v381 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v387 = *(_OWORD *)v385;
                *(v384 - 1) = *((_OWORD *)v385 - 1);
                *v384 = v387;
                v384 -= 2;
                v385 -= 32;
                v386 -= 4;
              }
              while (v386);
              v336 = v383;
              if (v381 != (v381 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_983:
                do
                {
LABEL_490:
                  v388 = *((_QWORD *)v336 - 1);
                  v336 -= 8;
                  *--v355 = v388;
                }
                while (v336 != (char *)v348);
              }
              v336 = (char *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v355;
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v337;
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v354[8 * v353];
              if (!v336)
                goto LABEL_493;
LABEL_492:
              operator delete(v336);
              goto LABEL_493;
            }
          }
          else
          {
            v354 = 0;
            v355 = (_QWORD *)(8 * v350);
            *(_QWORD *)(8 * v350) = v333;
            v337 = (_QWORD *)(8 * v350 + 8);
            v356 = &v336[-v348];
            if (v336 != (char *)v348)
              goto LABEL_454;
          }
          v9 = v739;
          v294 = v737;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v355;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v337;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v354[8 * v353];
          if (v336)
            goto LABEL_492;
LABEL_493:
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v337;
          if (*((_DWORD *)v332 + 1) != 2)
            goto LABEL_416;
          v389 = *(unsigned int *)v332;
          if (v389 >= 0x10000)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v337 = (_QWORD *)__dst.__r_.__value_.__l.__size_;
            v9 = v739;
          }
          if ((unint64_t)v337 < __dst.__r_.__value_.__r.__words[2])
          {
            *v337 = v389 | 0x100000000;
            v390 = (std::string::size_type)(v337 + 1);
            goto LABEL_520;
          }
          v391 = __dst.__r_.__value_.__r.__words[0];
          v392 = (std::string::size_type)v337 - __dst.__r_.__value_.__r.__words[0];
          v393 = (uint64_t)((uint64_t)v337 - __dst.__r_.__value_.__r.__words[0]) >> 3;
          v394 = v393 + 1;
          if ((unint64_t)(v393 + 1) >> 61)
            sub_20E92CED8();
          v395 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2 > v394)
            v394 = v395 >> 2;
          if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFF8)
            v396 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v396 = v394;
          if (v396)
          {
            if (v396 >> 61)
              sub_20E877A38();
            v397 = operator new(8 * v396);
            v398 = (uint64_t *)&v397[8 * v393];
            *v398 = v389 | 0x100000000;
            v390 = (std::string::size_type)(v398 + 1);
            v399 = (char *)v337 - v391;
            if (v337 == (_QWORD *)v391)
            {
LABEL_518:
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v398;
              __dst.__r_.__value_.__l.__size_ = v390;
              __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v397[8 * v396];
              v9 = v739;
              if (!v337)
                goto LABEL_520;
LABEL_519:
              operator delete(v337);
              goto LABEL_520;
            }
          }
          else
          {
            v397 = 0;
            v398 = (uint64_t *)(8 * v393);
            *(_QWORD *)(8 * v393) = v389 | 0x100000000;
            v390 = 8 * v393 + 8;
            v399 = (char *)v337 - v391;
            if (v337 == (_QWORD *)v391)
              goto LABEL_518;
          }
          v400 = (unint64_t)(v399 - 8);
          if (v400 < 0x58)
          {
            v401 = v337;
            goto LABEL_533;
          }
          if ((char *)v337 - v397 - v392 < 0x20)
          {
            v401 = v337;
            do
            {
LABEL_533:
              v416 = *--v401;
              *--v398 = v416;
            }
            while (v401 != (_QWORD *)v391);
            goto LABEL_534;
          }
          v410 = (v400 >> 3) + 1;
          v411 = 8 * (v410 & 0x3FFFFFFFFFFFFFFCLL);
          v401 = &v337[v411 / 0xFFFFFFFFFFFFFFF8];
          v398 = (uint64_t *)((char *)v398 - v411);
          v412 = &v397[8 * v393 - 16];
          v413 = (__int128 *)(v337 - 2);
          v414 = v410 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v415 = *v413;
            *(v412 - 1) = *(v413 - 1);
            *v412 = v415;
            v412 -= 2;
            v413 -= 2;
            v414 -= 4;
          }
          while (v414);
          if (v410 != (v410 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_533;
LABEL_534:
          v337 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v398;
          __dst.__r_.__value_.__l.__size_ = v390;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v397[8 * v396];
          v9 = v739;
          if (v337)
            goto LABEL_519;
LABEL_520:
          __dst.__r_.__value_.__l.__size_ = v390;
          if (*((_DWORD *)v332 + 134) != v736)
          {
            v402 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1311, (uint64_t)"image_processing_width_for_points == cam_set.secondary.image_width_", 67, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
LABEL_415:
            if (v402)
              goto LABEL_944;
          }
LABEL_416:
          ++v328;
          v295 = v738;
          if (v328 == v329)
          {
            v328 = *(int **)v837;
            break;
          }
        }
      }
      if (v328)
      {
        *(_QWORD *)&v837[8] = v328;
        operator delete(v328);
      }
      if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
        goto LABEL_543;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1324, (uint64_t)"!primary_camera_streams.empty()", 31, (uint64_t)"Primary cameras can't be empty", 30, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_543;
  }
  LODWORD(v752) = v317;
  v323 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(v294 + 8) - *(_QWORD *)v294) >> 6);
  if (v323 != 1)
  {
    if (v323 == 2)
    {
      v324 = operator new(8uLL);
      v750[0] = v324;
      *v324 = 0;
      v750[1] = v324 + 1;
      v751[0] = v324 + 1;
      v325 = operator new(8uLL);
      v751[1] = v325;
      *v325 = 1;
      v751[2] = v325 + 1;
      v751[3] = v325 + 1;
      goto LABEL_549;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/SlamEngineNodeGroup/src/SlamNodeGroup.cpp", 1335, (uint64_t)"scaled_hardware_params.num_cameras() == 1", 41, (uint64_t)"VIO only support 1 or 2 cameras.", 32, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v417 = operator new(8uLL);
  v750[0] = v417;
  *v417 = 0;
  v750[1] = v417 + 1;
  v751[0] = v417 + 1;
LABEL_549:
  *((_QWORD *)&v760 + 1) = v318;
  *(_QWORD *)&v763 = *((_QWORD *)v295 + 1607);
  *(_QWORD *)((char *)&v763 + 6) = *(_QWORD *)((char *)v295 + 12862);
  v418 = *((_WORD *)v738 + 6435);
  v420 = *(char **)v294;
  v419 = *(_QWORD *)(v294 + 8);
  sub_20EBF8D9C((uint64_t)v750, (char **)v837);
  v421 = *(void **)v837;
  if (v295[3219] == 3)
  {
    v747 = 0;
    v748 = 0;
    v749 = 0;
    if (*(_QWORD *)&v837[8] != *(_QWORD *)v837)
    {
      v422 = *(_QWORD *)&v837[8] - *(_QWORD *)v837;
      if (*(_QWORD *)&v837[8] - *(_QWORD *)v837 >= 0x7FFFFFFFFFFFFFF9uLL)
        sub_20E867F44();
      v423 = (std::__shared_weak_count *)operator new(2 * v422);
      v424 = (std::__shared_weak_count *)((char *)v423 + 16 * (v422 >> 3));
      v747 = v423;
      v749 = v424;
      do
      {
        v423->__vftable = (std::__shared_weak_count_vtbl *)v763;
        *(std::__shared_weak_count_vtbl **)((char *)&v423->__vftable + 6) = *(std::__shared_weak_count_vtbl **)((char *)&v763 + 6);
        HIWORD(v423->__shared_owners_) = v418;
        v423 = (std::__shared_weak_count *)((char *)v423 + 16);
      }
      while (v423 != v424);
      v748 = v424;
    }
  }
  else
  {
    v747 = 0;
    v748 = 0;
    v749 = 0;
    v425 = (char *)operator new(0x10uLL);
    *(_QWORD *)v425 = v763;
    *(_QWORD *)(v425 + 6) = *(_QWORD *)((char *)&v763 + 6);
    *((_WORD *)v425 + 7) = v418;
    v748 = (std::__shared_weak_count *)(v425 + 16);
    v749 = (std::__shared_weak_count *)(v425 + 16);
    v747 = v425;
    if (v419 - (_QWORD)v420 == 2176)
    {
      v426 = (char *)operator new(0x20uLL);
      v427 = v763;
      *((_QWORD *)v426 + 2) = v763;
      *(_QWORD *)(v426 + 21) = *(_QWORD *)((char *)&v763 + 5);
      v426[29] = 0;
      *((_WORD *)v426 + 15) = v418;
      *(_QWORD *)v426 = v427;
      *(_QWORD *)(v426 + 6) = *(_QWORD *)((char *)&v763 + 6);
      v426[14] = v418;
      v428 = (std::__shared_weak_count *)(v426 + 32);
      v747 = v426;
      v749 = (std::__shared_weak_count *)(v426 + 32);
      operator delete(v425);
      v748 = v428;
      v421 = *(void **)v837;
    }
  }
  if (v421)
  {
    *(_QWORD *)&v837[8] = v421;
    operator delete(v421);
  }
  sub_20E86AC88((uint64_t)v836, v730);
  v429 = *(std::__shared_weak_count **)(v9 + 3760);
  v745 = *(_QWORD *)(v9 + 3752);
  v746 = v429;
  if (v429)
  {
    v430 = (unint64_t *)&v429->__shared_owners_;
    do
      v431 = __ldxr(v430);
    while (__stxr(v431 + 1, v430));
  }
  sub_20EE71298((int **)v294, (uint64_t)v836, (uint64_t)&v745, (uint64_t)v837);
  v432 = v746;
  if (v746)
  {
    v433 = (unint64_t *)&v746->__shared_owners_;
    do
      v434 = __ldaxr(v433);
    while (__stlxr(v434 - 1, v433));
    if (!v434)
    {
      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
      std::__shared_weak_count::__release_weak(v432);
    }
  }
  sub_20E869418((uint64_t)v836);
  if (!*(_QWORD *)v837)
  {
    v722 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&__dst, "Fails to instantiate SLAM engine");
    std::runtime_error::runtime_error(v722, &__dst);
    v722->__vftable = (std::runtime_error_vtbl *)&off_24C9C8520;
    __cxa_throw(v722, (struct type_info *)&unk_24C9C8720, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v435 = sub_210219C18();
  v436 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v728.__d_.__rep_);
  v437.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v438 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v438 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v439 = atomic_load(&qword_254A5A450);
  v440 = v436 / 1000000.0;
  if (v439)
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__r_.__value_.__r.__words + 4) = v440;
    v441 = (char *)_os_log_send_and_compose_impl();
    v442 = strlen(v441);
    *(_QWORD *)__p = 0;
    pthread_threadid_np(0, (__uint64_t *)__p);
    v443 = *(_QWORD *)__p;
    timespec_get((timespec *)__p, 1);
    sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v435 + 1), (__int128 *)(v435 + 5), "BuildLocalSlamEngineForCAPI completed in %f ms", 0x2EuLL, v441, v442, v443, __p);
    std::mutex::lock(&stru_254A5A410);
    v444 = qword_254A5A458;
    for (j = unk_254A5A460; v444 != j; v444 += 40)
    {
      v446 = *(_QWORD *)(v444 + 32);
      if (!v446)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v446 + 48))(v446, &__dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v820 < 0)
    {
      operator delete(v819);
      v294 = v737;
      if ((v818 & 0x80000000) == 0)
      {
LABEL_575:
        if (!v816)
        {
LABEL_581:
          if (v813 && v812 < 0)
            operator delete(v811);
          if (v810 < 0)
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
          if (v441)
            free(v441);
          goto LABEL_588;
        }
LABEL_579:
        if (v815 < 0)
          operator delete(v814);
        goto LABEL_581;
      }
    }
    else
    {
      v294 = v737;
      if ((v818 & 0x80000000) == 0)
        goto LABEL_575;
    }
    operator delete(v817);
    if (!v816)
      goto LABEL_581;
    goto LABEL_579;
  }
LABEL_588:
  if (os_signpost_enabled((os_log_t)*v435))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__r_.__value_.__r.__words + 4) = v440;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v447 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v837 + 280))(*(_QWORD *)v837);
  v448 = operator new();
  *(_OWORD *)(v448 + 8) = 0u;
  *(_OWORD *)(v448 + 40) = 0u;
  *(_OWORD *)(v448 + 24) = 0u;
  *(_QWORD *)v448 = off_24C9FB5B8;
  v449 = operator new();
  *(_QWORD *)(v448 + 56) = sub_20F2281E4(v449, v447 + 40);
  *(_QWORD *)(v448 + 64) = sub_20F22C0D0;
  sub_20E8B43E8((std::string *)(v448 + 8), "CMDataDeserializationNodeGroup", 0x1EuLL);
  sub_20E8B43E8((std::string *)(v448 + 32), "Node group that deserializes collaborative mapping data into its respective type", 0x50uLL);
  v450 = *(_QWORD *)(v9 + 3728);
  *(_QWORD *)(v9 + 3728) = v448;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = sub_210219C18();
  v452 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v437.__d_.__rep_);
  v453.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v454 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v454 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v455 = atomic_load(&qword_254A5A450);
  v456 = v452 / 1000000.0;
  if (v455)
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__r_.__value_.__r.__words + 4) = v456;
    v457 = (char *)_os_log_send_and_compose_impl();
    v458 = strlen(v457);
    *(_QWORD *)__p = 0;
    pthread_threadid_np(0, (__uint64_t *)__p);
    v459 = *(_QWORD *)__p;
    timespec_get((timespec *)__p, 1);
    sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v451 + 1), (__int128 *)(v451 + 5), "CMDataDeserializationNodeGroup completed in %f ms", 0x31uLL, v457, v458, v459, __p);
    std::mutex::lock(&stru_254A5A410);
    v460 = qword_254A5A458;
    for (k = unk_254A5A460; v460 != k; v460 += 40)
    {
      v462 = *(_QWORD *)(v460 + 32);
      if (!v462)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v462 + 48))(v462, &__dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v820 < 0)
    {
      operator delete(v819);
      v294 = v737;
      if ((v818 & 0x80000000) == 0)
      {
LABEL_599:
        if (!v816)
        {
LABEL_605:
          if (v813 && v812 < 0)
            operator delete(v811);
          if (v810 < 0)
            operator delete((void *)__dst.__r_.__value_.__l.__size_);
          if (v457)
            free(v457);
          goto LABEL_612;
        }
LABEL_603:
        if (v815 < 0)
          operator delete(v814);
        goto LABEL_605;
      }
    }
    else
    {
      v294 = v737;
      if ((v818 & 0x80000000) == 0)
        goto LABEL_599;
    }
    operator delete(v817);
    if (!v816)
      goto LABEL_605;
    goto LABEL_603;
  }
LABEL_612:
  if (os_signpost_enabled((os_log_t)*v451))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__r_.__value_.__r.__words + 4) = v456;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v463 = *((_QWORD *)v295 + 686);
  *(_QWORD *)&v740[0] = *(_QWORD *)(v735 + 133);
  BYTE8(v740[0]) = *((_BYTE *)v735 + 520);
  BYTE9(v740[0]) = *((_BYTE *)v735 + 732);
  HIDWORD(v740[0]) = v295[1428];
  v740[1] = *((_OWORD *)v735 + 44);
  v741 = *((_BYTE *)v735 + 720);
  v742 = v295[1435];
  v464 = v295[1436];
  v744 = v295[1492];
  LODWORD(__dst.__r_.__value_.__l.__data_) = v295[3219];
  v743 = v464;
  sub_20E8A1408((uint64_t)&__dst.__r_.__value_.__l.__size_, v294);
  sub_20EEB13E0((uint64_t)&v821, v295[1261], (uint64_t)(v295 + 134), (__int128 *)(v295 + 1446), v740, (__int128 *)v295 + 365, *((double *)v295 + 691));
  sub_20E92D224((uint64_t)&v822, (uint64_t)v750);
  v823 = 0u;
  v824 = 0;
  v465 = v747;
  v466 = (char *)v748 - (_BYTE *)v747;
  if (v748 != v747)
  {
    if (v466 < 0)
      sub_20E867F44();
    *(_QWORD *)&v823 = operator new((char *)v748 - (_BYTE *)v747);
    *((_QWORD *)&v823 + 1) = v823;
    v467 = v823 + 16 * (v466 >> 4);
    v824 = v467;
    memcpy((void *)v823, v465, v466 - 1);
    *((_QWORD *)&v823 + 1) = v467;
  }
  sub_20E86C2D0((uint64_t)&v825, (__int128 *)v295 + 314);
  v826 = 0u;
  v827 = 0;
  v468 = v761;
  v469 = (char *)v762 - (_BYTE *)v761;
  if (v762 != v761)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v469 >> 3) >= 0x666666666666667)
      sub_20E867F44();
    *(_QWORD *)&v826 = operator new((char *)v762 - (_BYTE *)v761);
    *((_QWORD *)&v826 + 1) = v826;
    v470 = v826 + 8 * (v469 >> 3);
    v827 = v470;
    memcpy((void *)v826, v468, v469);
    *((_QWORD *)&v826 + 1) = v470;
  }
  v828 = xmmword_2102E6740;
  v829 = v463;
  v830 = 1;
  v831 = *((_BYTE *)v738 + 258);
  v832 = v724;
  v833 = *((_BYTE *)v738 + 12893);
  v834 = 0;
  v835 = *(_BYTE *)v735;
  v471 = operator new();
  *(_OWORD *)(v471 + 40) = 0u;
  *(_OWORD *)(v471 + 24) = 0u;
  *(_OWORD *)(v471 + 8) = 0u;
  *(_QWORD *)v471 = off_24C9E4AD0;
  v472 = operator new();
  sub_20ED63434(v472, (uint64_t)&__dst, &v771);
  *(_QWORD *)(v471 + 56) = v472;
  *(_QWORD *)(v471 + 64) = sub_20ED92128;
  v473 = *(_QWORD *)v731;
  *(_QWORD *)v731 = v471;
  if (v473)
    (*(void (**)(uint64_t))(*(_QWORD *)v473 + 8))(v473);
  v474 = sub_210219C18();
  v475 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v453.__d_.__rep_);
  v476.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v477 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v477 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v478 = atomic_load(&qword_254A5A450);
  v479 = v475 / 1000000.0;
  if (v478)
  {
    *(_DWORD *)__p = 134217984;
    *(double *)&__p[4] = v479;
    v480 = (char *)_os_log_send_and_compose_impl();
    v481 = strlen(v480);
    *(_QWORD *)&v854 = 0;
    pthread_threadid_np(0, (__uint64_t *)&v854);
    v482 = v854;
    timespec_get((timespec *)&v854, 1);
    sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v474 + 1), (__int128 *)(v474 + 5), "MultiCameraNode creation completed in %f ms", 0x2BuLL, v480, v481, v482, &v854);
    std::mutex::lock(&stru_254A5A410);
    v483 = qword_254A5A458;
    for (m = unk_254A5A460; v483 != m; v483 += 40)
    {
      v485 = *(_QWORD *)(v483 + 32);
      if (!v485)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v485 + 48))(v485, __p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v785 < 0)
    {
      operator delete(v784);
      if ((v783 & 0x80000000) == 0)
      {
LABEL_629:
        if (!v781)
        {
LABEL_635:
          if (v778 && v777 < 0)
            operator delete(v776);
          if ((v775[7] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
          if (v480)
            free(v480);
          goto LABEL_642;
        }
LABEL_633:
        if (v780 < 0)
          operator delete(v779);
        goto LABEL_635;
      }
    }
    else if ((v783 & 0x80000000) == 0)
    {
      goto LABEL_629;
    }
    operator delete(v782);
    if (!v781)
      goto LABEL_635;
    goto LABEL_633;
  }
LABEL_642:
  if (os_signpost_enabled((os_log_t)*v474))
  {
    *(_DWORD *)__p = 134217984;
    *(double *)&__p[4] = v479;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_210218050("ErrorTransformNode", 0x12uLL, v734, 0, &v770);
  v486 = operator new(0x168uLL);
  v486[1] = 0;
  v486[2] = 0;
  *v486 = &off_24C9CBD48;
  v764.tv_sec = sub_20EC3EC0C((uint64_t)(v486 + 3), *(_BYTE *)v735);
  v764.tv_nsec = (uint64_t)v486;
  v487 = operator new();
  v488 = v487;
  v489 = v770;
  v490 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
  v854 = v770;
  v770 = 0uLL;
  tv_sec = v764.tv_sec;
  v773 = v764;
  v764 = (timespec)0;
  *(_QWORD *)v487 = &off_24C9C9A28;
  v492 = tv_sec;
  if (*(char *)(tv_sec + 303) < 0)
  {
    sub_20E860C04((_BYTE *)(v487 + 8), *(void **)(tv_sec + 280), *(_QWORD *)(tv_sec + 288));
  }
  else
  {
    v493 = *(_OWORD *)(tv_sec + 280);
    *(_QWORD *)(v487 + 24) = *(_QWORD *)(v492 + 296);
    *(_OWORD *)(v487 + 8) = v493;
  }
  if (*(char *)(v492 + 327) < 0)
  {
    sub_20E860C04((_BYTE *)(v488 + 32), *(void **)(v492 + 304), *(_QWORD *)(v492 + 312));
  }
  else
  {
    v494 = *(_OWORD *)(v492 + 304);
    *(_QWORD *)(v488 + 48) = *(_QWORD *)(v492 + 320);
    *(_OWORD *)(v488 + 32) = v494;
  }
  *(_QWORD *)(v488 + 56) = v489;
  *(_QWORD *)(v488 + 64) = v490;
  *((_QWORD *)&v854 + 1) = 0;
  *(_QWORD *)&v854 = 0;
  *(_QWORD *)__p = v489;
  *(_QWORD *)&__p[8] = v490;
  if (v490)
  {
    v495 = (unint64_t *)&v490->__shared_owners_;
    do
      v496 = __ldxr(v495);
    while (__stxr(v496 + 1, v495));
  }
  sub_20EC00FB4((uint64_t *)(v488 + 72), (uint64_t)__p, &v773.tv_sec);
  if (v490)
  {
    v497 = (unint64_t *)&v490->__shared_owners_;
    do
      v498 = __ldaxr(v497);
    while (__stlxr(v498 - 1, v497));
    if (!v498)
    {
      ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
      std::__shared_weak_count::__release_weak(v490);
    }
  }
  v499 = (std::__shared_weak_count *)v773.tv_nsec;
  if (v773.tv_nsec)
  {
    v500 = (unint64_t *)(v773.tv_nsec + 8);
    do
      v501 = __ldaxr(v500);
    while (__stlxr(v501 - 1, v500));
    if (!v501)
    {
      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
      std::__shared_weak_count::__release_weak(v499);
    }
  }
  v502 = (std::__shared_weak_count *)*((_QWORD *)&v854 + 1);
  if (*((_QWORD *)&v854 + 1))
  {
    v503 = (unint64_t *)(*((_QWORD *)&v854 + 1) + 8);
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
  v505 = *(_QWORD *)(v9 + 3744);
  *(_QWORD *)(v9 + 3744) = v488;
  if (v505)
    (*(void (**)(uint64_t))(*(_QWORD *)v505 + 8))(v505);
  v506 = (std::__shared_weak_count *)v764.tv_nsec;
  if (v764.tv_nsec)
  {
    v507 = (unint64_t *)(v764.tv_nsec + 8);
    do
      v508 = __ldaxr(v507);
    while (__stlxr(v508 - 1, v507));
    if (!v508)
    {
      ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
      std::__shared_weak_count::__release_weak(v506);
    }
  }
  v509 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v837 + 280))(*(_QWORD *)v837);
  if (v509 + 40 != v9)
  {
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v509 + 72);
    sub_20EC1D1DC((_QWORD *)v9, *(uint64_t **)(v509 + 56), 0);
  }
  *(_OWORD *)__p = *(_OWORD *)(v738 + 2370);
  __p[16] = *((_BYTE *)v738 + 9496);
  sub_20E86C0E4((uint64_t)v775, (uint64_t)(v738 + 2376));
  v805 = *(_OWORD *)(v738 + 2638);
  v806 = *(_OWORD *)(v738 + 2642);
  v807 = *(_OWORD *)(v738 + 2646);
  v808 = *(_OWORD *)(v738 + 2650);
  v510 = *(_OWORD *)(v738 + 2626);
  v801 = *(_OWORD *)(v738 + 2622);
  v802 = v510;
  v803 = *(_OWORD *)(v738 + 2630);
  v804 = *(_OWORD *)(v738 + 2634);
  v511 = *(_OWORD *)(v738 + 2618);
  v799 = *(_OWORD *)(v738 + 2614);
  v800 = v511;
  v512 = (uint64_t *)v761;
  v513 = (uint64_t *)v762;
  *((_QWORD *)&v854 + 1) = 0;
  *(_QWORD *)&v854 = 0;
  v855 = 0;
  if (v762 != v761)
  {
    v514 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v762 - (_BYTE *)v761) >> 3);
    if (v514 >> 60)
      sub_20E867F44();
    v515 = (char *)operator new(0xCCCCCCCCCCCCCCD0 * (((char *)v762 - (_BYTE *)v761) >> 3));
    *((_QWORD *)&v854 + 1) = v515;
    v516 = v515;
    v517 = &v515[16 * v514];
    while (1)
    {
      while (1)
      {
        v518 = *v512;
        v519 = v512[1];
        if (v515 >= v517)
          break;
        *(_QWORD *)v515 = v518;
        *((_QWORD *)v515 + 1) = v519;
        v515 += 16;
        v512 += 5;
        if (v512 == v513)
          goto LABEL_701;
      }
      v520 = (v515 - v516) >> 4;
      v521 = v520 + 1;
      if ((unint64_t)(v520 + 1) >> 60)
      {
        v855 = v517;
        *((_QWORD *)&v854 + 1) = v515;
        *(_QWORD *)&v854 = v516;
        sub_20E867F44();
      }
      if ((v517 - v516) >> 3 > v521)
        v521 = (v517 - v516) >> 3;
      if ((unint64_t)(v517 - v516) >= 0x7FFFFFFFFFFFFFF0)
        v522 = 0xFFFFFFFFFFFFFFFLL;
      else
        v522 = v521;
      if (v522)
      {
        if (v522 >> 60)
        {
          v855 = v517;
          *((_QWORD *)&v854 + 1) = v515;
          *(_QWORD *)&v854 = v516;
          sub_20E877A38();
        }
        v523 = (char *)operator new(16 * v522);
        v524 = &v523[16 * v520];
        *(_QWORD *)v524 = v518;
        *((_QWORD *)v524 + 1) = v519;
        if (v515 == v516)
        {
LABEL_698:
          v526 = v524;
          v517 = &v523[16 * v522];
          v515 = v524 + 16;
          if (!v516)
            goto LABEL_695;
          goto LABEL_694;
        }
      }
      else
      {
        v523 = 0;
        v524 = (char *)(16 * v520);
        *(_QWORD *)v524 = v518;
        *((_QWORD *)v524 + 1) = v519;
        if (v515 == v516)
          goto LABEL_698;
      }
      v525 = v524;
      do
      {
        v526 = v525 - 16;
        *((_OWORD *)v525 - 1) = *((_OWORD *)v515 - 1);
        v515 -= 16;
        v525 -= 16;
      }
      while (v515 != v516);
      v517 = &v523[16 * v522];
      v515 = v524 + 16;
      if (!v516)
        goto LABEL_695;
LABEL_694:
      operator delete(v516);
LABEL_695:
      v516 = v526;
      v9 = v739;
      v512 += 5;
      if (v512 == v513)
        goto LABEL_701;
    }
  }
  v517 = 0;
  v515 = 0;
  v516 = 0;
LABEL_701:
  if (v792)
  {
    v793 = v792;
    operator delete(v792);
  }
  v792 = v516;
  v793 = v515;
  v794 = v517;
  v527 = operator new();
  sub_20ED296D8(v527, (__int128 *)__p, v737);
  v528 = *(_QWORD *)(v9 + 3944);
  *(_QWORD *)(v9 + 3944) = v527;
  if (v528)
    (*(void (**)(uint64_t))(*(_QWORD *)v528 + 8))(v528);
  v529 = sub_210219C18();
  v530 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v476.__d_.__rep_);
  v531.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v532 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v532 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v533 = atomic_load(&qword_254A5A450);
  v534 = v530 / 1000000.0;
  if (v533)
  {
    LODWORD(v854) = 134217984;
    *(double *)((char *)&v854 + 4) = v534;
    v535 = (char *)_os_log_send_and_compose_impl();
    v536 = strlen(v535);
    v773.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v773);
    v537 = v773.tv_sec;
    timespec_get(&v773, 1);
    sub_210219E20(&v854, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v529 + 1), (__int128 *)(v529 + 5), "VOStatePropagatorNodeGroup creation completed in %f ms", 0x36uLL, v535, v536, v537, &v773);
    std::mutex::lock(&stru_254A5A410);
    v538 = qword_254A5A458;
    for (n = unk_254A5A460; v538 != n; v538 += 40)
    {
      v540 = *(_QWORD *)(v538 + 32);
      if (!v540)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)v540 + 48))(v540, &v854);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v868 < 0)
    {
      operator delete(v867);
      if ((v866 & 0x80000000) == 0)
      {
LABEL_712:
        if (!v864)
        {
LABEL_718:
          if (v861 && v860 < 0)
            operator delete(v858);
          if (v857 < 0)
            operator delete(*((void **)&v854 + 1));
          if (v535)
            free(v535);
          goto LABEL_725;
        }
LABEL_716:
        if (v863 < 0)
          operator delete(v862);
        goto LABEL_718;
      }
    }
    else if ((v866 & 0x80000000) == 0)
    {
      goto LABEL_712;
    }
    operator delete(v865);
    if (!v864)
      goto LABEL_718;
    goto LABEL_716;
  }
LABEL_725:
  if (os_signpost_enabled((os_log_t)*v529))
  {
    LODWORD(v854) = 134217984;
    *(double *)((char *)&v854 + 4) = v534;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v541 = *(_QWORD *)v837;
  v542 = *(_QWORD *)&v837[8];
  if (*(_QWORD *)&v837[8])
  {
    v543 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
    do
      v544 = __ldxr(v543);
    while (__stxr(v544 + 1, v543));
  }
  *(_QWORD *)(v9 + 8784) = v541;
  v545 = *(std::__shared_weak_count **)(v9 + 8792);
  *(_QWORD *)(v9 + 8792) = v542;
  if (!v545)
    goto LABEL_734;
  v546 = (unint64_t *)&v545->__shared_owners_;
  do
    v547 = __ldaxr(v546);
  while (__stlxr(v547 - 1, v546));
  if (!v547)
  {
    ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
    std::__shared_weak_count::__release_weak(v545);
    v548 = *((unsigned __int8 *)v738 + 282);
    v549 = *((unsigned __int8 *)v735 + 3671);
    if ((*((char *)v735 + 3879) & 0x80000000) == 0)
      goto LABEL_735;
  }
  else
  {
LABEL_734:
    v548 = *((unsigned __int8 *)v738 + 282);
    v549 = *((unsigned __int8 *)v735 + 3671);
    if ((*((char *)v735 + 3879) & 0x80000000) == 0)
    {
LABEL_735:
      v854 = *(_OWORD *)(v738 + 2218);
      v855 = (char *)*((_QWORD *)v738 + 1111);
      goto LABEL_738;
    }
  }
  sub_20E860C04(&v854, *((void **)v738 + 1109), *((_QWORD *)v738 + 1110));
LABEL_738:
  v856 = *((_BYTE *)v738 + 280);
  v858 = (void *)*((_QWORD *)v738 + 1086);
  v859 = 0;
  v550 = operator new();
  v551 = v550;
  v773 = *(timespec *)v837;
  if (*(_QWORD *)&v837[8])
  {
    v552 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
    do
      v553 = __ldxr(v552);
    while (__stxr(v553 + 1, v552));
  }
  sub_20EC4DC58(v550, (__int128 *)&v773.tv_sec, v734, v549 | (v548 << 8), (uint64_t)&v854);
  v554 = (std::__shared_weak_count *)v773.tv_nsec;
  if (v773.tv_nsec)
  {
    v555 = (unint64_t *)(v773.tv_nsec + 8);
    do
      v556 = __ldaxr(v555);
    while (__stlxr(v556 - 1, v555));
    if (!v556)
    {
      ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
      std::__shared_weak_count::__release_weak(v554);
    }
  }
  v557 = *(_QWORD *)(v9 + 3720);
  *(_QWORD *)(v9 + 3720) = v551;
  if (v557)
    (*(void (**)(uint64_t))(*(_QWORD *)v557 + 8))(v557);
  if (SHIBYTE(v855) < 0)
    operator delete((void *)v854);
  v558 = sub_210219C18();
  v559 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v531.__d_.__rep_);
  std::chrono::steady_clock::now();
  v560 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v560 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v561 = atomic_load(&qword_254A5A450);
  v562 = v559 / 1000000.0;
  if (v561)
  {
    LODWORD(v854) = 134217984;
    *(double *)((char *)&v854 + 4) = v562;
    v563 = (char *)_os_log_send_and_compose_impl();
    v564 = strlen(v563);
    v773.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v773);
    v565 = v773.tv_sec;
    timespec_get(&v773, 1);
    sub_210219E20(&v854, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v558 + 1), (__int128 *)(v558 + 5), "SlamEngineNodeGroup creation completed in %f ms", 0x2FuLL, v563, v564, v565, &v773);
    std::mutex::lock(&stru_254A5A410);
    v566 = qword_254A5A458;
    for (ii = unk_254A5A460; v566 != ii; v566 += 40)
    {
      v568 = *(_QWORD *)(v566 + 32);
      if (!v568)
        sub_20E86D37C();
      (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)v568 + 48))(v568, &v854);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v868 < 0)
    {
      operator delete(v867);
      if ((v866 & 0x80000000) == 0)
      {
LABEL_757:
        if (!v864)
        {
LABEL_763:
          if (v861 && v860 < 0)
            operator delete(v858);
          if (v857 < 0)
            operator delete(*((void **)&v854 + 1));
          if (v563)
            free(v563);
          goto LABEL_770;
        }
LABEL_761:
        if (v863 < 0)
          operator delete(v862);
        goto LABEL_763;
      }
    }
    else if ((v866 & 0x80000000) == 0)
    {
      goto LABEL_757;
    }
    operator delete(v865);
    if (!v864)
      goto LABEL_763;
    goto LABEL_761;
  }
LABEL_770:
  if (os_signpost_enabled((os_log_t)*v558))
  {
    LODWORD(v854) = 134217984;
    *(double *)((char *)&v854 + 4) = v562;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  sub_20E862C24(v739 + 8800, &v837[16]);
  v569 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v570 = (_QWORD *)operator new();
  *v570 = &off_24C9C8760;
  v570[1] = &off_24C9CBD98;
  v571 = v570 + 1;
  v570[2] = v9;
  v570[4] = v570 + 1;
  *(_QWORD *)&v854 = &off_24C9B5708;
  v572 = (_QWORD *)operator new();
  *v572 = &off_24C9C8760;
  v573 = v572 + 1;
  v574 = v570[4];
  if (!v574)
    goto LABEL_775;
  if ((_QWORD *)v574 != v571)
  {
    v574 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v574 + 16))(v574, v573);
LABEL_775:
    v572[4] = v574;
    goto LABEL_777;
  }
  v572[4] = v573;
  (*(void (**)(_QWORD *))(*v571 + 24))(v571);
LABEL_777:
  *((_QWORD *)&v854 + 1) = v572;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v569 + 120) + 16))(v569 + 120, &v854);
  v575 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v575)
    (*(void (**)(uint64_t))(*(_QWORD *)v575 + 8))(v575);
  (*(void (**)(_QWORD *))(*v570 + 8))(v570);
  v576 = *(_QWORD *)(v9 + 4024);
  v577 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 168);
  *(_QWORD *)&v854 = &off_24C9CC400;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v577 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v576 + 120) + 16))(v576 + 120, &v854);
  v578 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC400;
  *((_QWORD *)&v854 + 1) = 0;
  if (v578)
    (*(void (**)(uint64_t))(*(_QWORD *)v578 + 8))(v578);
  v579 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v580 = (_QWORD *)operator new();
  *v580 = &off_24C9C8760;
  v580[1] = &off_24C9CBE18;
  v581 = v580 + 1;
  v580[2] = v9;
  v580[4] = v580 + 1;
  *(_QWORD *)&v854 = &off_24C9B5708;
  v582 = (_QWORD *)operator new();
  *v582 = &off_24C9C8760;
  v583 = v582 + 1;
  v584 = v580[4];
  if (!v584)
    goto LABEL_784;
  if ((_QWORD *)v584 != v581)
  {
    v584 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v584 + 16))(v584, v583);
LABEL_784:
    v582[4] = v584;
    goto LABEL_786;
  }
  v582[4] = v583;
  (*(void (**)(_QWORD *))(*v581 + 24))(v581);
LABEL_786:
  *((_QWORD *)&v854 + 1) = v582;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v579 + 120) + 16))(v579 + 120, &v854);
  v585 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v585)
    (*(void (**)(uint64_t))(*(_QWORD *)v585 + 8))(v585);
  (*(void (**)(_QWORD *))(*v580 + 8))(v580);
  v586 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 3712) + 56) + 72);
  v587 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96);
  *(_QWORD *)&v854 = &off_24C9B6AE0;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v587 + 432) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v586 + 120) + 16))(v586 + 120, &v854);
  v588 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B6AE0;
  *((_QWORD *)&v854 + 1) = 0;
  if (v588)
    (*(void (**)(uint64_t))(*(_QWORD *)v588 + 8))(v588);
  v589 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v590 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 168);
  *(_QWORD *)&v854 = &off_24C9CC760;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v590 + 432) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v589 + 960) + 16))(v589 + 960, &v854);
  v591 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC760;
  *((_QWORD *)&v854 + 1) = 0;
  if (v591)
    (*(void (**)(uint64_t))(*(_QWORD *)v591 + 8))(v591);
  v592 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 168);
  v593 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96);
  *(_QWORD *)&v854 = &off_24C9CC650;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v593 + 2784) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v592 + 792) + 16))(v592 + 792, &v854);
  v594 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC650;
  *((_QWORD *)&v854 + 1) = 0;
  if (v594)
    (*(void (**)(uint64_t))(*(_QWORD *)v594 + 8))(v594);
  v595 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v596 = (_QWORD *)operator new();
  *v596 = &off_24C9C8760;
  v596[1] = &off_24C9CBE98;
  v597 = v596 + 1;
  v596[2] = v9;
  v596[4] = v596 + 1;
  *(_QWORD *)&v854 = &off_24C9B5708;
  v598 = (_QWORD *)operator new();
  *v598 = &off_24C9C8760;
  v599 = v598 + 1;
  v600 = v596[4];
  if (!v600)
    goto LABEL_797;
  if ((_QWORD *)v600 != v597)
  {
    v600 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v600 + 16))(v600, v599);
LABEL_797:
    v598[4] = v600;
    goto LABEL_799;
  }
  v598[4] = v599;
  (*(void (**)(_QWORD *))(*v597 + 24))(v597);
LABEL_799:
  *((_QWORD *)&v854 + 1) = v598;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v595 + 120) + 16))(v595 + 120, &v854);
  v601 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v601)
    (*(void (**)(uint64_t))(*(_QWORD *)v601 + 8))(v601);
  (*(void (**)(_QWORD *))(*v596 + 8))(v596);
  v602 = *(_QWORD *)(v9 + 3936);
  v603 = *(_QWORD *)(*(_QWORD *)(v9 + 3736) + 72);
  *(_QWORD *)&v854 = &off_24C9B4C58;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v603 + 96) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v602 + 120) + 16))(v602 + 120, &v854);
  v604 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4C58;
  *((_QWORD *)&v854 + 1) = 0;
  if (v604)
    (*(void (**)(uint64_t))(*(_QWORD *)v604 + 8))(v604);
  v605 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3728) + 56) + 80);
  v606 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96);
  *(_QWORD *)&v854 = &off_24C9CC5E0;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v606 + 2112) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v605 + 120) + 16))(v605 + 120, &v854);
  v607 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC5E0;
  *((_QWORD *)&v854 + 1) = 0;
  if (v607)
    (*(void (**)(uint64_t))(*(_QWORD *)v607 + 8))(v607);
  v608 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 416);
  v609 = (_QWORD *)operator new();
  v609[1] = &off_24C9CBF80;
  v610 = v609 + 1;
  *v609 = &off_24C9CBF18;
  v609[2] = v9;
  v609[4] = v609 + 1;
  *(_QWORD *)&v854 = &off_24C9CC5A8;
  v611 = (_QWORD *)operator new();
  *v611 = &off_24C9CBF18;
  v612 = v611 + 1;
  v613 = v609[4];
  if (!v613)
    goto LABEL_808;
  if ((_QWORD *)v613 != v610)
  {
    v613 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v613 + 16))(v613, v612);
LABEL_808:
    v611[4] = v613;
    goto LABEL_810;
  }
  v611[4] = v612;
  (*(void (**)(_QWORD *))(*v610 + 24))(v610);
LABEL_810:
  *((_QWORD *)&v854 + 1) = v611;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v608 + 120) + 16))(v608 + 120, &v854);
  v614 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC5A8;
  *((_QWORD *)&v854 + 1) = 0;
  if (v614)
    (*(void (**)(uint64_t))(*(_QWORD *)v614 + 8))(v614);
  (*(void (**)(_QWORD *))(*v609 + 8))(v609);
  v615 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 416);
  v616 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  *(_QWORD *)&v854 = &off_24C9CC5A8;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v616 + 96) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v615 + 120) + 16))(v615 + 120, &v854);
  v617 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC5A8;
  *((_QWORD *)&v854 + 1) = 0;
  if (v617)
    (*(void (**)(uint64_t))(*(_QWORD *)v617 + 8))(v617);
  v618 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 64) + 72);
  v619 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v619 + 264) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v618 + 120) + 16))(v618 + 120, &v854);
  v620 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  *((_QWORD *)&v854 + 1) = 0;
  if (v620)
    (*(void (**)(uint64_t))(*(_QWORD *)v620 + 8))(v620);
  v621 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 80) + 72);
  v622 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v622 + 264) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v621 + 120) + 16))(v621 + 120, &v854);
  v623 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  *((_QWORD *)&v854 + 1) = 0;
  if (v623)
    (*(void (**)(uint64_t))(*(_QWORD *)v623 + 8))(v623);
  v624 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 48) + 72);
  v625 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v625 + 264) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v624 + 120) + 16))(v624 + 120, &v854);
  v626 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B6B38;
  *((_QWORD *)&v854 + 1) = 0;
  if (v626)
    (*(void (**)(uint64_t))(*(_QWORD *)v626 + 8))(v626);
  v627 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 256);
  v628 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  *(_QWORD *)&v854 = &off_24C9CC500;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v628 + 432) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v627 + 120) + 16))(v627 + 120, &v854);
  v629 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC500;
  *((_QWORD *)&v854 + 1) = 0;
  if (v629)
    (*(void (**)(uint64_t))(*(_QWORD *)v629 + 8))(v629);
  v630 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  v631 = *(_QWORD *)(v9 + 4352);
  *(_QWORD *)&v854 = &off_24C9B4888;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v631 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v630 + 120) + 16))(v630 + 120, &v854);
  v632 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v632)
    (*(void (**)(uint64_t))(*(_QWORD *)v632 + 8))(v632);
  v633 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  v634 = *(_QWORD *)(v9 + 4352);
  *(_QWORD *)&v854 = &off_24C9B4888;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v634 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v633 + 288) + 16))(v633 + 288, &v854);
  v635 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v635)
    (*(void (**)(uint64_t))(*(_QWORD *)v635 + 8))(v635);
  v636 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  v637 = *(_QWORD *)(v9 + 4352);
  *(_QWORD *)&v854 = &off_24C9B4888;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v637 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v636 + 456) + 16))(v636 + 456, &v854);
  v638 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v638)
    (*(void (**)(uint64_t))(*(_QWORD *)v638 + 8))(v638);
  v639 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  v640 = *(_QWORD *)(v9 + 4352);
  *(_QWORD *)&v854 = &off_24C9B4888;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v640 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v639 + 624) + 16))(v639 + 624, &v854);
  v641 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v641)
    (*(void (**)(uint64_t))(*(_QWORD *)v641 + 8))(v641);
  v642 = *(_QWORD *)(*(_QWORD *)(v9 + 3744) + 72);
  v643 = *(_QWORD *)(v9 + 4352);
  *(_QWORD *)&v854 = &off_24C9B4888;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v643 + 768) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v642 + 792) + 16))(v642 + 792, &v854);
  v644 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v644)
    (*(void (**)(uint64_t))(*(_QWORD *)v644 + 8))(v644);
  v645 = *(_QWORD *)(v9 + 4352);
  v646 = (_QWORD *)operator new();
  *v646 = &off_24C9B48D0;
  v646[1] = &off_24C9CC010;
  v647 = v646 + 1;
  v646[2] = v9;
  v646[4] = v646 + 1;
  *(_QWORD *)&v854 = &off_24C9B4888;
  v648 = (_QWORD *)operator new();
  *v648 = &off_24C9B48D0;
  v649 = v648 + 1;
  v650 = v646[4];
  if (!v650)
    goto LABEL_835;
  if ((_QWORD *)v650 != v647)
  {
    v650 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v650 + 16))(v650, v649);
LABEL_835:
    v648[4] = v650;
    goto LABEL_837;
  }
  v648[4] = v649;
  (*(void (**)(_QWORD *))(*v647 + 24))(v647);
LABEL_837:
  *((_QWORD *)&v854 + 1) = v648;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v645 + 792) + 16))(v645 + 792, &v854);
  v651 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B4888;
  *((_QWORD *)&v854 + 1) = 0;
  if (v651)
    (*(void (**)(uint64_t))(*(_QWORD *)v651 + 8))(v651);
  (*(void (**)(_QWORD *))(*v646 + 8))(v646);
  v652 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v653 = (_QWORD *)operator new();
  *v653 = &off_24C9C8760;
  v653[1] = &off_24C9CC090;
  v654 = v653 + 1;
  v653[2] = v9;
  v653[4] = v653 + 1;
  *(_QWORD *)&v854 = &off_24C9B5708;
  v655 = (_QWORD *)operator new();
  *v655 = &off_24C9C8760;
  v656 = v655 + 1;
  v657 = v653[4];
  if (!v657)
    goto LABEL_842;
  if ((_QWORD *)v657 != v654)
  {
    v657 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v657 + 16))(v657, v656);
LABEL_842:
    v655[4] = v657;
    goto LABEL_844;
  }
  v655[4] = v656;
  (*(void (**)(_QWORD *))(*v654 + 24))(v654);
LABEL_844:
  *((_QWORD *)&v854 + 1) = v655;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v652 + 120) + 16))(v652 + 120, &v854);
  v658 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v658)
    (*(void (**)(uint64_t))(*(_QWORD *)v658 + 8))(v658);
  (*(void (**)(_QWORD *))(*v653 + 8))(v653);
  v659 = *(_QWORD *)(v9 + 4272);
  v660 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 168);
  *(_QWORD *)&v854 = &off_24C9CC438;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v660 + 1104) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v659 + 120) + 16))(v659 + 120, &v854);
  v661 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC438;
  *((_QWORD *)&v854 + 1) = 0;
  if (v661)
    (*(void (**)(uint64_t))(*(_QWORD *)v661 + 8))(v661);
  v662 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3712) + 56) + 16) + 72);
  v663 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96);
  *(_QWORD *)&v854 = &off_24C9CC618;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v663 + 2280) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v662 + 120) + 16))(v662 + 120, &v854);
  v664 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9CC618;
  *((_QWORD *)&v854 + 1) = 0;
  if (v664)
    (*(void (**)(uint64_t))(*(_QWORD *)v664 + 8))(v664);
  v665 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v666 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 3944) + 56) + 72);
  *(_QWORD *)&v854 = &off_24C9B5708;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v666 + 96) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v665 + 120) + 16))(v665 + 120, &v854);
  v667 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v667)
    (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
  v668 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 3712) + 56) + 72);
  v669 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 3944) + 56) + 72);
  *(_QWORD *)&v854 = &off_24C9B6AE0;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v669 + 264) + 16))((_QWORD *)&v854 + 1);
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v668 + 120) + 16))(v668 + 120, &v854);
  v670 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B6AE0;
  *((_QWORD *)&v854 + 1) = 0;
  if (v670)
    (*(void (**)(uint64_t))(*(_QWORD *)v670 + 8))(v670);
  if (!*v723)
  {
    v671 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3944) + 56) + 80);
    v672 = (_QWORD *)operator new();
    *v672 = &off_24C9C8760;
    v672[1] = &off_24C9CC110;
    v673 = v672 + 1;
    v672[2] = v9;
    v672[4] = v672 + 1;
    *(_QWORD *)&v854 = &off_24C9B5708;
    v674 = (_QWORD *)operator new();
    *v674 = &off_24C9C8760;
    v675 = v674 + 1;
    v676 = v672[4];
    if (v676)
    {
      if ((_QWORD *)v676 == v673)
      {
        v674[4] = v675;
        (*(void (**)(_QWORD *))(*v673 + 24))(v673);
        goto LABEL_860;
      }
      v676 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v676 + 16))(v676, v675);
    }
    v674[4] = v676;
LABEL_860:
    *((_QWORD *)&v854 + 1) = v674;
    (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v671 + 120) + 16))(v671 + 120, &v854);
    v677 = *((_QWORD *)&v854 + 1);
    *(_QWORD *)&v854 = &off_24C9B5708;
    *((_QWORD *)&v854 + 1) = 0;
    if (v677)
      (*(void (**)(uint64_t))(*(_QWORD *)v677 + 8))(v677);
    (*(void (**)(_QWORD *))(*v672 + 8))(v672);
    v678 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96);
    v679 = *(_QWORD *)(v9 + 4352);
    *(_QWORD *)&v854 = &off_24C9CCB08;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v679 + 600) + 16))((_QWORD *)&v854 + 1);
    (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v678 + 1296) + 16))(v678 + 1296, &v854);
    v680 = *((_QWORD *)&v854 + 1);
    *(_QWORD *)&v854 = &off_24C9CCB08;
    *((_QWORD *)&v854 + 1) = 0;
    if (v680)
      (*(void (**)(uint64_t))(*(_QWORD *)v680 + 8))(v680);
  }
  if (!*v733)
    goto LABEL_873;
  v681 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
  v682 = (_QWORD *)operator new();
  *v682 = &off_24C9C8760;
  v682[1] = &off_24C9CC190;
  v683 = v682 + 1;
  v682[2] = v9;
  v682[4] = v682 + 1;
  *(_QWORD *)&v854 = &off_24C9B5708;
  v684 = (_QWORD *)operator new();
  *v684 = &off_24C9C8760;
  v685 = v684 + 1;
  v686 = v682[4];
  if (v686)
  {
    if ((_QWORD *)v686 == v683)
    {
      v684[4] = v685;
      (*(void (**)(_QWORD *))(*v683 + 24))(v683);
      goto LABEL_870;
    }
    v686 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v686 + 16))(v686, v685);
  }
  v684[4] = v686;
LABEL_870:
  *((_QWORD *)&v854 + 1) = v684;
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v681 + 120) + 16))(v681 + 120, &v854);
  v687 = *((_QWORD *)&v854 + 1);
  *(_QWORD *)&v854 = &off_24C9B5708;
  *((_QWORD *)&v854 + 1) = 0;
  if (v687)
    (*(void (**)(uint64_t))(*(_QWORD *)v687 + 8))(v687);
  (*(void (**)(_QWORD *))(*v682 + 8))(v682);
LABEL_873:
  if (v732[1] && *v732)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/LineTrackingEnablerConfig.h", 65, (uint64_t)&unk_210264686, 0, (uint64_t)"Cannot enable lines both 'always' and 'when needed'.", 52, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (*v732 | v732[1])
  {
    v688 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 176);
    v689 = (_QWORD *)operator new();
    *v689 = &off_24C9C8760;
    v689[1] = &off_24C9CC210;
    v690 = v689 + 1;
    v689[2] = v9;
    v689[4] = v689 + 1;
    *(_QWORD *)&v854 = &off_24C9B5708;
    v691 = (_QWORD *)operator new();
    *v691 = &off_24C9C8760;
    v692 = v691 + 1;
    v693 = v689[4];
    if (v693)
    {
      if ((_QWORD *)v693 == v690)
      {
        v691[4] = v692;
        (*(void (**)(_QWORD *))(*v690 + 24))(v690);
        goto LABEL_881;
      }
      v693 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v693 + 16))(v693, v692);
    }
    v691[4] = v693;
LABEL_881:
    *((_QWORD *)&v854 + 1) = v691;
    (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v688 + 120) + 16))(v688 + 120, &v854);
    v694 = *((_QWORD *)&v854 + 1);
    *(_QWORD *)&v854 = &off_24C9B5708;
    *((_QWORD *)&v854 + 1) = 0;
    if (v694)
      (*(void (**)(uint64_t))(*(_QWORD *)v694 + 8))(v694);
    (*(void (**)(_QWORD *))(*v689 + 8))(v689);
    v695 = *(_QWORD *)(v9 + 4192);
    v696 = *(_QWORD *)(*(_QWORD *)(v9 + 4112) + 72);
    *(_QWORD *)&v854 = &off_24C9C8F20;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v696 + 96) + 16))((_QWORD *)&v854 + 1);
    (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v695 + 120) + 16))(v695 + 120, &v854);
    v697 = *((_QWORD *)&v854 + 1);
    *(_QWORD *)&v854 = &off_24C9C8F20;
    *((_QWORD *)&v854 + 1) = 0;
    if (v697)
      (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
    v698 = *(_QWORD *)(*(_QWORD *)(v739 + 4112) + 72);
    v699 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v731 + 56) + 168);
    *(_QWORD *)&v854 = &off_24C9B6B70;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v699 + 264) + 16))((_QWORD *)&v854 + 1);
    (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)(v698 + 120) + 16))(v698 + 120, &v854);
    v700 = *((_QWORD *)&v854 + 1);
    *(_QWORD *)&v854 = &off_24C9B6B70;
    *((_QWORD *)&v854 + 1) = 0;
    if (v700)
      (*(void (**)(uint64_t))(*(_QWORD *)v700 + 8))(v700);
  }
  v701 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v9 + 3944) + 56) + 72) + 424;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v701 + 16))(v701, v9 + 19489);
  v702 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96) + 4120;
  LOBYTE(v854) = v732[4];
  (*(void (**)(uint64_t, unsigned __int128 *))(*(_QWORD *)v702 + 16))(v702, &v854);
  sub_20EC52290((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 3720) + 56) + 96) + 2624), (uint64_t)&v773, (uint64_t *)&v854);
  v703 = (std::__assoc_sub_state *)v854;
  *(_QWORD *)&v854 = 0;
  sub_20E991998(v703);
  v705 = v704;
  if (!v703)
    goto LABEL_891;
  v706 = (unint64_t *)&v703->__shared_owners_;
  do
    v707 = __ldaxr(v706);
  while (__stlxr(v707 - 1, v706));
  if (!v707)
  {
    ((void (*)(std::__assoc_sub_state *))v703->__on_zero_shared)(v703);
    *(_QWORD *)(v9 + 40) = v705;
    v708 = v854;
    if (!(_QWORD)v854)
      goto LABEL_895;
  }
  else
  {
LABEL_891:
    *(_QWORD *)(v9 + 40) = v704;
    v708 = v854;
    if (!(_QWORD)v854)
      goto LABEL_895;
  }
  v709 = (unint64_t *)(v708 + 8);
  do
    v710 = __ldaxr(v709);
  while (__stlxr(v710 - 1, v709));
  if (v710)
  {
LABEL_895:
    if ((v798 & 0x80000000) == 0)
      goto LABEL_897;
    goto LABEL_896;
  }
  (*(void (**)(__darwin_time_t))(*(_QWORD *)v708 + 16))(v708);
  if (v798 < 0)
LABEL_896:
    operator delete(v797);
LABEL_897:
  if (v795)
  {
    v796 = v795;
    operator delete(v795);
  }
  if (v792)
  {
    v793 = v792;
    operator delete(v792);
  }
  if (v791 < 0)
    operator delete(v790);
  if (v788)
  {
    v789 = v788;
    operator delete(v788);
  }
  if (v786)
  {
    v787 = v786;
    operator delete(v786);
  }
  v711 = (std::__shared_weak_count *)*((_QWORD *)&v770 + 1);
  if (*((_QWORD *)&v770 + 1))
  {
    v712 = (unint64_t *)(*((_QWORD *)&v770 + 1) + 8);
    do
      v713 = __ldaxr(v712);
    while (__stlxr(v713 - 1, v712));
    if (!v713)
    {
      ((void (*)(std::__shared_weak_count *))v711->__on_zero_shared)(v711);
      std::__shared_weak_count::__release_weak(v711);
    }
  }
  sub_20E9BC9D8((uint64_t)&__dst);
  sub_20E869418((uint64_t)&v837[16]);
  v714 = *(std::__shared_weak_count **)&v837[8];
  if (*(_QWORD *)&v837[8])
  {
    v715 = (unint64_t *)(*(_QWORD *)&v837[8] + 8);
    do
      v716 = __ldaxr(v715);
    while (__stlxr(v716 - 1, v715));
    if (!v716)
    {
      ((void (*)(std::__shared_weak_count *))v714->__on_zero_shared)(v714);
      std::__shared_weak_count::__release_weak(v714);
    }
  }
  if (v747)
  {
    v748 = (std::__shared_weak_count *)v747;
    operator delete(v747);
  }
  if (v751[1])
  {
    v751[2] = v751[1];
    operator delete(v751[1]);
  }
  if (v750[0])
  {
    v750[1] = v750[0];
    operator delete(v750[0]);
  }
  v717 = v772;
  if (v772)
  {
    v718 = (unint64_t *)&v772->__shared_owners_;
    do
      v719 = __ldaxr(v718);
    while (__stlxr(v719 - 1, v718));
    if (!v719)
    {
      ((void (*)(std::__shared_weak_count *))v717->__on_zero_shared)(v717);
      std::__shared_weak_count::__release_weak(v717);
    }
  }
  if (v761)
  {
    v762 = (std::__shared_weak_count *)v761;
    operator delete(v761);
  }
  return v9;
}

void sub_20EBF7608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  __cxa_guard_abort(&qword_254A6DA78);
  sub_20E86665C((uint64_t)&STACK[0x270]);
  sub_20E86665C(a41 + 3752);
  v44 = *(_QWORD *)(a41 + 3744);
  *(_QWORD *)(a41 + 3744) = 0;
  if (v44)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v45 = *(_QWORD *)(a41 + 3736);
    *(_QWORD *)(a41 + 3736) = 0;
    if (!v45)
    {
LABEL_3:
      v46 = *(_QWORD *)(a41 + 3728);
      *(_QWORD *)(a41 + 3728) = 0;
      if (!v46)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v45 = *(_QWORD *)(a41 + 3736);
    *(_QWORD *)(a41 + 3736) = 0;
    if (!v45)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a41 + 3728);
  *(_QWORD *)(a41 + 3728) = 0;
  if (!v46)
  {
LABEL_4:
    v47 = *(_QWORD *)(a41 + 3720);
    *(_QWORD *)(a41 + 3720) = 0;
    if (!v47)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *(_QWORD *)(a41 + 3720);
  *(_QWORD *)(a41 + 3720) = 0;
  if (!v47)
  {
LABEL_5:
    v48 = *a32;
    *a32 = 0;
    if (!v48)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *a32;
  *a32 = 0;
  if (!v48)
  {
LABEL_7:
    sub_20EBF9124(v42);
    sub_20E86872C(v41, *(_QWORD **)(a41 + 760));
    sub_20E8C25A8(a41);
    _Unwind_Resume(a1);
  }
LABEL_6:
  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  goto LABEL_7;
}

void sub_20EBF8D9C(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;

  v5 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = (uint64_t)&v4[-*(_QWORD *)a1] >> 3;
  v7 = v6 + ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v7)
  {
    if (v7 >> 61)
      sub_20E92CED8();
    v8 = (char *)operator new(8 * v7);
    *a2 = v8;
    a2[1] = v8;
    a2[2] = &v8[8 * v7];
  }
  else
  {
    v8 = 0;
  }
  sub_20EC00BF8((uint64_t)a2, (uint64_t)v8, v5, v4, v6);
  v9 = *(_DWORD **)(a1 + 24);
  v10 = *(_DWORD **)(a1 + 32);
  if (v9 != v10)
  {
    v11 = a2[1];
    do
    {
      while (1)
      {
        v12 = *a2;
        v13 = v11;
        if (*a2 != v11)
        {
          v13 = *a2;
          while (*(_DWORD *)v13 != *v9 || *((_DWORD *)v13 + 1) != v9[1])
          {
            v13 += 8;
            if (v13 == v11)
            {
              v13 = v11;
              break;
            }
          }
        }
        if (v13 == v11)
          break;
        v9 += 2;
        if (v9 == v10)
          return;
      }
      v15 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v15)
      {
        v17 = (char *)(v11 - v12);
        v18 = (v11 - v12) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          sub_20E92CED8();
        v20 = v15 - (_QWORD)v12;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_20E877A38();
          v22 = (char *)operator new(8 * v21);
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = *(_QWORD *)v9;
          v16 = (uint64_t)(v23 + 8);
          if (v12 != v11)
          {
LABEL_33:
            if ((unint64_t)(v17 - 8) < 0x168)
            {
              v24 = v11;
              goto LABEL_35;
            }
            v26 = (v11 - 8 - v12) & 0xFFFFFFFFFFFFFFF8;
            if (&v17[(_QWORD)v22 - 8 - v26] > &v17[(_QWORD)v22 - 8])
            {
              v24 = v11;
              goto LABEL_35;
            }
            if (&v11[-v26 - 8] > v11 - 8)
            {
              v24 = v11;
              goto LABEL_35;
            }
            if ((unint64_t)(v12 - v22) < 0x20)
            {
              v24 = v11;
              goto LABEL_35;
            }
            v27 = ((unint64_t)(v17 - 8) >> 3) + 1;
            v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            v24 = &v11[-v28];
            v23 -= v28;
            v29 = &v22[8 * v18 - 16];
            v30 = v11 - 16;
            v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v32 = *(_OWORD *)v30;
              *((_OWORD *)v29 - 1) = *((_OWORD *)v30 - 1);
              *(_OWORD *)v29 = v32;
              v29 -= 32;
              v30 -= 32;
              v31 -= 4;
            }
            while (v31);
            if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_35:
                v25 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v23 - 1) = v25;
                v23 -= 8;
              }
              while (v24 != v12);
            }
            v11 = *a2;
            *a2 = v23;
            a2[1] = (char *)v16;
            a2[2] = &v22[8 * v21];
            if (!v11)
              goto LABEL_30;
LABEL_29:
            operator delete(v11);
            goto LABEL_30;
          }
        }
        else
        {
          v22 = 0;
          v23 = (char *)(8 * v18);
          *(_QWORD *)(8 * v18) = *(_QWORD *)v9;
          v16 = 8 * v18 + 8;
          if (v12 != v11)
            goto LABEL_33;
        }
        *a2 = v23;
        a2[1] = (char *)v16;
        a2[2] = &v22[8 * v21];
        if (v11)
          goto LABEL_29;
      }
      else
      {
        *(_QWORD *)v11 = *(_QWORD *)v9;
        v16 = (uint64_t)(v11 + 8);
      }
LABEL_30:
      a2[1] = (char *)v16;
      v11 = (char *)v16;
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_20EBF9060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBF90A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EBF9124(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 2568);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 2552);
  *(_QWORD *)(a1 + 2552) = 0;
  if (v4)
    operator delete(v4);
  sub_20E86A810(a1 + 88);
  return a1;
}

void sub_20EBF9174(uint64_t a1)
{
  sub_20EC1FF40(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBF919C(uint64_t a1)
{
  sub_20EBFA424(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBF91C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C8938;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBF91F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C8938;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBF9240(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4C58;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4C58;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBF9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBF9344(uint64_t a1)
{
  sub_20EBF9B88(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBF9368(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBF9CE4(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBFA150(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBF9424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBFA150(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EBF944C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBF9CE4(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBFA150(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBF95E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBF9510);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBF9658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBF96B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBFA150(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBF96DC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBF9760(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9B4C58;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBF9810(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBF9824(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBF98B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBF98C8(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBFA278(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBF990C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBF9920(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBF9954(uint64_t a1)
{
  return sub_20EBF9B88(a1 - 16);
}

void sub_20EBF995C(uint64_t a1)
{
  sub_20EBF9B88(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBF9984(uint64_t a1, uint64_t a2)
{
  sub_20EBF9760(a1 - 16, a2);
}

void sub_20EBF998C(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBFA278(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBF99D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBF99E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBF9A18(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBF9A20(uint64_t a1)
{
  return sub_20EBF9B88(a1 - 24);
}

void sub_20EBF9A28(uint64_t a1)
{
  sub_20EBF9B88(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBF9A50(uint64_t a1)
{
  sub_20EBF9824(a1 - 24);
}

uint64_t sub_20EBF9A58(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EBF9A64()
{
  JUMPOUT(0x212BC6398);
}

int64_t sub_20EBF9A78@<X0>(uint64_t **a1@<X1>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = **a1;
  v4 = *(_QWORD *)(v3 + 4128);
  v5 = *(_QWORD *)(v3 + 4136);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * (result >> 3);
    if (v7 >= 0x1E1E1E1E1E1E1E2)
      sub_20EABADD4();
    result = (int64_t)operator new(result);
    v8 = 0;
    *a2 = result;
    a2[1] = result;
    a2[2] = result + 136 * v7;
    do
    {
      v9 = v4 + v8;
      v10 = result + v8;
      *(_QWORD *)v10 = *(_QWORD *)(v4 + v8);
      v11 = *(_OWORD *)(v4 + v8 + 8);
      v12 = *(_OWORD *)(v4 + v8 + 24);
      v13 = *(_OWORD *)(v4 + v8 + 40);
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v4 + v8 + 56);
      *(_OWORD *)(v10 + 40) = v13;
      *(_OWORD *)(v10 + 24) = v12;
      *(_OWORD *)(v10 + 8) = v11;
      v14 = *(_OWORD *)(v4 + v8 + 72);
      v15 = *(_OWORD *)(v4 + v8 + 88);
      v16 = *(_OWORD *)(v4 + v8 + 104);
      *(_OWORD *)(v10 + 120) = *(_OWORD *)(v4 + v8 + 120);
      *(_OWORD *)(v10 + 104) = v16;
      *(_OWORD *)(v10 + 88) = v15;
      *(_OWORD *)(v10 + 72) = v14;
      v8 += 136;
    }
    while (v9 + 136 != v5);
    a2[1] = result + v8;
  }
  return result;
}

void sub_20EBF9B6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EBF9B88(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C8970;
  *(_QWORD *)(a1 + 16) = &unk_24C9C89E8;
  *(_QWORD *)(a1 + 24) = &unk_24C9C8A28;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBF9CE4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::exception_ptr v30;
  void *__p;
  char *v32;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v30.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v30), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v32;
    v18 = v32 - (_BYTE *)__p;
    if (v32 != __p)
    {
      v19 = 0xF0F0F0F0F0F0F0F1 * (v18 >> 3);
      if (v19 >= 0x1E1E1E1E1E1E1E2)
        sub_20EABADD4();
      v20 = (char *)operator new(v18);
      v21 = 0;
      *(_QWORD *)(v14 + 144) = v20;
      *(_QWORD *)(v14 + 152) = v20;
      *(_QWORD *)(v14 + 160) = &v20[136 * v19];
      do
      {
        v22 = &v16[v21];
        v23 = &v20[v21];
        *(_QWORD *)v23 = *(_QWORD *)&v16[v21];
        v24 = *(_OWORD *)&v16[v21 + 8];
        v25 = *(_OWORD *)&v16[v21 + 24];
        v26 = *(_OWORD *)&v16[v21 + 40];
        *(_OWORD *)(v23 + 56) = *(_OWORD *)&v16[v21 + 56];
        *(_OWORD *)(v23 + 40) = v26;
        *(_OWORD *)(v23 + 24) = v25;
        *(_OWORD *)(v23 + 8) = v24;
        v27 = *(_OWORD *)&v16[v21 + 72];
        v28 = *(_OWORD *)&v16[v21 + 88];
        v29 = *(_OWORD *)&v16[v21 + 104];
        *(_OWORD *)(v23 + 120) = *(_OWORD *)&v16[v21 + 120];
        *(_OWORD *)(v23 + 104) = v29;
        *(_OWORD *)(v23 + 88) = v28;
        *(_OWORD *)(v23 + 72) = v27;
        v21 += 136;
      }
      while (v22 + 136 != v17);
      *(_QWORD *)(v14 + 152) = &v20[v21];
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20EBFA020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *__p, uint64_t a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  void **v22;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v22 = v19;
  v24 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v20 + 152) = v24;
    operator delete(v24);
  }
  std::mutex::unlock(v18);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 1)
  {
    v25 = (uint64_t *)__cxa_begin_catch(a1);
    v26 = *v25;
    a10 = *(_QWORD *)(*(_QWORD *)(*v25 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v26 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v27 = (uint64_t *)&a11;
    else
      v27 = a11;
    if ((a16 & 0x80u) == 0)
      v28 = a16;
    else
      v28 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v27, v28, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBFA124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBFA144);
}

uint64_t *sub_20EBFA150(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBFA23C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBFA198);
}

char *sub_20EBFA278(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBFA354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBFA378(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFA39C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBFA3B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEENS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNSD_6MatrixIdLj4ELj4ELb1EEEEEEENS"
                     "_9allocatorISI_EEEEvSL_Lb0EEEE27__shared_ptr_default_deleteISM_SM_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEENS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNSD_6Matrix"
                                "IdLj4ELj4ELb1EEEEEEENS_9allocatorISI_EEEEvSL_Lb0EEEE27__shared_ptr_default_deleteISM_SM_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNSD_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISI_EEEEvSL_Lb0EEEE27__shared_ptr_default_deleteISM_SM_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS_6vectorINS_4pairIyN3cva15SE3GroupStorageIdNSD_6MatrixIdLj4ELj4ELb1EEEEEEENS_9allocatorISI_EEEEvSL_Lb0EEEE27__shared_ptr_default_deleteISM_SM_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBFA424(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C8908;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C8938;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBFA608(uint64_t a1)
{
  sub_20EC1FE08(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFA630(uint64_t a1)
{
  sub_20EBFB7C8(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFA654(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C8C10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFA68C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C8C10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFA6D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC400;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC400;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFA7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBFA7D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC400;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBFA814(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC400;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFA864(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBFA878(uint64_t a1)
{
  sub_20EBFAFD4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFA89C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBFB130(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBFB4F4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBFA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBFB4F4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EBFA980(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBFB130(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBFB4F4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBFAB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBFAA44);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBFAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBFABEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBFB4F4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBFAC10(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBFAC94(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC400;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFAD44(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFAD58(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBFADE8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFADFC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBFB61C(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFAE40(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFAE54(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFAE88(uint64_t a1)
{
  return sub_20EBFAFD4(a1 - 16);
}

void sub_20EBFAE90(uint64_t a1)
{
  sub_20EBFAFD4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFAEB8(uint64_t a1, uint64_t a2)
{
  sub_20EBFAC94(a1 - 16, a2);
}

void sub_20EBFAEC0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBFB61C(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFAF04(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFAF18(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFAF4C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBFAF54(uint64_t a1)
{
  return sub_20EBFAFD4(a1 - 24);
}

void sub_20EBFAF5C(uint64_t a1)
{
  sub_20EBFAFD4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFAF84(uint64_t a1)
{
  sub_20EBFAD58(a1 - 24);
}

uint64_t sub_20EBFAF8C(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EBFAF98()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EBFAFAC(_QWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = (*a1)[1];
  *a2 = **a1;
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

uint64_t sub_20EBFAFD4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C8C48;
  *(_QWORD *)(a1 + 16) = &unk_24C9C8CC0;
  *(_QWORD *)(a1 + 24) = &unk_24C9C8D00;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBFB130(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EBFB3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E86665C((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBFB4C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBFB4E8);
}

uint64_t *sub_20EBFB4F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBFB5E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBFB53CLL);
}

char *sub_20EBFB61C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBFB6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBFB71C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFB740(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBFB758(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEENS0_INS6_8metadata15VIOPoseMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEENS0_INS6_8metadata15VIOPoseMetadataEEEvSD_Lb0EEEE27__sha"
                                "red_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS0_INS6_8metadata15VIOPoseMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS0_INS6_8metadata15VIOPoseMetadataEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBFB7C8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C8BE0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C8C10;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBFB9AC(uint64_t a1)
{
  sub_20EC1FCD0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFB9D4(uint64_t a1)
{
  sub_20EBFCAF4(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFB9F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C8EE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFBA30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C8EE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFBA78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9C8F20;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9C8F20;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFBB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBFBB78(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C8F20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBFBBB8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C8F20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFBC08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBFBC1C(uint64_t a1)
{
  sub_20EBFC364(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFBC40(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBFC4C0(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBFC820(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBFBCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBFC820(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EBFBD24(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBFC4C0(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBFC820(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBFBEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBFBDE8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBFBF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBFBF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBFC820(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBFBFB4(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBFC038(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9C8F20;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFC0E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFC0FC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBFC18C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFC1A0(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBFC948(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFC1E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFC1F8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFC22C(uint64_t a1)
{
  return sub_20EBFC364(a1 - 16);
}

void sub_20EBFC234(uint64_t a1)
{
  sub_20EBFC364(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFC25C(uint64_t a1, uint64_t a2)
{
  sub_20EBFC038(a1 - 16, a2);
}

void sub_20EBFC264(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBFC948(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFC2A8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFC2BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFC2F0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBFC2F8(uint64_t a1)
{
  return sub_20EBFC364(a1 - 24);
}

void sub_20EBFC300(uint64_t a1)
{
  sub_20EBFC364(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFC328(uint64_t a1)
{
  sub_20EBFC0FC(a1 - 24);
}

uint64_t sub_20EBFC330(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EBFC33C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFC350(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(**(_QWORD **)a2 + 376);
}

uint64_t sub_20EBFC364(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C8F58;
  *(_QWORD *)(a1 + 16) = &unk_24C9C8FD0;
  *(_QWORD *)(a1 + 24) = &unk_24C9C9010;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBFC4C0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *j;
  uint64_t v15;
  uint64_t v16;
  std::exception_ptr v17;
  __int128 v18;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  *(_QWORD *)&v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  *((_QWORD *)&v18 + 1) = v12;
  v13 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v13; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, __int128 *))(j[2] + 16))(j + 2, &v18);
  if (*((_BYTE *)a3 + 8))
  {
    v15 = *a3;
    if (!v15)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v15 + 24));
    if ((*(_BYTE *)(v15 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v16 = *(_QWORD *)(v15 + 16), std::exception_ptr::~exception_ptr(&v17), v16))
    {
      sub_20E96CE78(2u);
    }
    *(_OWORD *)(v15 + 144) = v18;
    *(_DWORD *)(v15 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v15 + 88));
    std::mutex::unlock((std::mutex *)(v15 + 24));
  }
}

void sub_20EBFC72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a11 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v22 = (uint64_t *)&a12;
    else
      v22 = a12;
    if ((a17 & 0x80u) == 0)
      v23 = a17;
    else
      v23 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v22, v23, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBFC7F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBFC814);
}

uint64_t *sub_20EBFC820(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBFC90C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBFC868);
}

char *sub_20EBFC948(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBFCA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBFCA48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFCA6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBFCA84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEENS6_28feature_detection_node_group38LineTrackingEnablerVIOHealthStatisticsEvSC"
                     "_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEENS6_28feature_detection_node_group38LineTrackingEnablerV"
                                "IOHealthStatisticsEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS6_28feature_detection_node_group38LineTrackingEnablerVIOHealthStatisticsEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS6_28feature_detection_node_group38LineTrackingEnablerVIOHealthStatisticsEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBFCAF4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C8EB8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C8EE8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBFCCD8(uint64_t a1)
{
  sub_20EC1FB98(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFCD00(uint64_t a1)
{
  sub_20EBFDE1C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFCD24(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C91F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFCD5C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C91F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFCDA4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC438;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC438;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFCE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EBFCEA4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBFCEE4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFCF34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EBFCF48(uint64_t a1)
{
  sub_20EBFD68C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFCF6C(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBFD7E8(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBFDB48(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBFD028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBFDB48(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EBFD050(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBFD7E8(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBFDB48(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBFD1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBFD114);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBFD25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBFD2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBFDB48(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBFD2E0(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBFD364(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC438;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFD414(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFD428(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBFD4B8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFD4CC(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBFDC70(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFD510(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFD524(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFD558(uint64_t a1)
{
  return sub_20EBFD68C(a1 - 16);
}

void sub_20EBFD560(uint64_t a1)
{
  sub_20EBFD68C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFD588(uint64_t a1, uint64_t a2)
{
  sub_20EBFD364(a1 - 16, a2);
}

void sub_20EBFD590(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBFDC70(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFD5D4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFD5E8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFD61C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBFD624(uint64_t a1)
{
  return sub_20EBFD68C(a1 - 24);
}

void sub_20EBFD62C(uint64_t a1)
{
  sub_20EBFD68C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFD654(uint64_t a1)
{
  sub_20EBFD428(a1 - 24);
}

uint64_t sub_20EBFD65C(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EBFD668()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFD67C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(**(_QWORD **)a2 + 3712);
}

uint64_t sub_20EBFD68C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C9230;
  *(_QWORD *)(a1 + 16) = &unk_24C9C92A8;
  *(_QWORD *)(a1 + 24) = &unk_24C9C92E8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBFD7E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  char v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, char *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_20EBFDA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBFDB1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBFDB3CLL);
}

uint64_t *sub_20EBFDB48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBFDC34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBFDB90);
}

char *sub_20EBFDC70(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBFDD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBFDD70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFDD94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBFDDAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_e"
                     "ngine11VIOMetadataEEENS6_27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvSC_Lb0EEEE27"
                     "__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio1"
                                "5odometry_engine11VIOMetadataEEENS6_27frame_downsample_node_group29JasperFrameSelectorEn"
                                "ableInfoEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS6_27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_IKNS1_3vio15odometry_engine11VIOMetadataEEENS6_27frame_downsample_node_group29JasperFrameSelectorEnableInfoEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBFDE1C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C91C8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C91F8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B5708;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBFE000(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EBFE010(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFE040(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EBFE050(uint64_t a1)
{
  sub_20EC1EACC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFE078(uint64_t a1)
{
  sub_20EBFF708(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFE09C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC340;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EBFE0DC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC340;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFE12C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EBFE13C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CC820;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFE174(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CC820;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFE1BC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC538;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC538;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFE290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBFE2C0(uint64_t a1)
{
  sub_20EBFEAE8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFE2E4(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EBFEC44(a1 + 11, a2, &v5);
    if (v6)
      sub_20EBFEFB4(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBFE3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EBFEFB4(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBFE3C8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBFE3D8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EBFE3E4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EBFE3F4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EBFEC44(a1 + 11, a2, &v14);
  if (v15)
    sub_20EBFEFB4(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBFE58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBFE4B8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBFE600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBFE660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EBFEFB4(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBFE684(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBFE708(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC538;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFE7B8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFE7CC(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EBFE85C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFE870(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EBFF0DC(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFE8B4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFE8C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFE8FC(uint64_t a1)
{
  return sub_20EBFEAE8(a1 - 16);
}

void sub_20EBFE904(uint64_t a1)
{
  sub_20EBFEAE8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFE92C(uint64_t a1, uint64_t a2)
{
  sub_20EBFE708(a1 - 16, a2);
}

void sub_20EBFE934(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EBFF0DC(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFE978(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFE98C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EBFE9C0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EBFE9C8(uint64_t a1)
{
  return sub_20EBFEAE8(a1 - 24);
}

void sub_20EBFE9D0(uint64_t a1)
{
  sub_20EBFEAE8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFE9F8(uint64_t a1)
{
  sub_20EBFE7CC(a1 - 24);
}

uint64_t sub_20EBFEA00(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EBFEA08(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EBFEA70(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFEAD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EBFEAE8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C9520;
  *(_QWORD *)(a1 + 16) = &unk_24C9C9598;
  *(_QWORD *)(a1 + 24) = &unk_24C9C95D8;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EBFEC44(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *j;
  std::exception_ptr v16;
  unsigned __int16 v17;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (v17 >= 0x100u)
  {
    v14 = a1 + 1;
    for (j = (_QWORD *)a1[2]; j != v14; j = (_QWORD *)j[1])
      (*(void (**)(_QWORD *, unsigned __int16 *))(j[2] + 16))(j + 2, &v17);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v12 = *a3;
    if (!v12)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v12 + 24));
    if ((*(_BYTE *)(v12 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v13 = *(_QWORD *)(v12 + 16), std::exception_ptr::~exception_ptr(&v16), v13))
    {
      sub_20E96CE78(2u);
    }
    *(_WORD *)(v12 + 140) = v17;
    *(_DWORD *)(v12 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v12 + 88));
    std::mutex::unlock((std::mutex *)(v12 + 24));
  }
}

void sub_20EBFEEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EBFEF88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EBFEFA8);
}

uint64_t *sub_20EBFEFB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EBFF0A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EBFEFFCLL);
}

char *sub_20EBFF0DC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EBFF1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EBFF1DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EBFF200(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EBFF218(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImagePr"
                     "ocessingSampleENS6_10mapping_io14MapSaveRequestEvNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_typ"
                                "es21ImageProcessingSampleENS6_10mapping_io14MapSaveRequestEvNS_8optionalISA_EELb0EEEE27_"
                                "_shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImageProcessingSampleENS6_10mapping_io14MapSaveRequestEvNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_3vio8cv_types21ImageProcessingSampleENS6_10mapping_io14MapSaveRequestEvNS_8optionalISA_EELb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EBFF288(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFF2B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFF2F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CC388;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EBFF358(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBFF3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBFF3FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EBFF48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBFF4A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBFF564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBFF578(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EBFF63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EBFF650(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFF6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EBFF708(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C94F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CC820;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC340;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EBFF8EC(uint64_t a1)
{
  sub_20EC1E994(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFF914(uint64_t a1)
{
  sub_20EC00A14(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EBFF938(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9C97B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EBFF970(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9C97B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFF9B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9CC290;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9CC290;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EBFFA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EBFFABC(uint64_t a1)
{
  sub_20EC00218(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EBFFAE0(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_20EC00374(a1 + 11, a2, &v5);
    if (v6)
      sub_20EC00740(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_20EBFFB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_20EC00740(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20EBFFBC4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_20E8778D4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v13, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_20EC00374(a1 + 11, a2, &v14);
  if (v15)
    sub_20EC00740(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_20EBFFD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x20EBFFC88);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EBFFDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EBFFE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_20EC00740(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_20EBFFE54(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_20EBFFED8(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C9CC290;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_20EBFFF88(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EBFFF9C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_20EC0002C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EC00040(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_20EC00868(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_20EC00084(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EC00098(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EC000CC(uint64_t a1)
{
  return sub_20EC00218(a1 - 16);
}

void sub_20EC000D4(uint64_t a1)
{
  sub_20EC00218(a1 - 16);
  JUMPOUT(0x212BC6398);
}

void sub_20EC000FC(uint64_t a1, uint64_t a2)
{
  sub_20EBFFED8(a1 - 16, a2);
}

void sub_20EC00104(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_20EC00868(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_20EC00148(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EC0015C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_20EC00190(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC00198(uint64_t a1)
{
  return sub_20EC00218(a1 - 24);
}

void sub_20EC001A0(uint64_t a1)
{
  sub_20EC00218(a1 - 24);
  JUMPOUT(0x212BC6398);
}

void sub_20EC001C8(uint64_t a1)
{
  sub_20EBFFF9C(a1 - 24);
}

uint64_t sub_20EC001D0(uint64_t a1)
{
  return a1 - 24;
}

void sub_20EC001DC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20EC001F0(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  *a2 = 0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

uint64_t sub_20EC00218(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = &off_24C9C97E8;
  *(_QWORD *)(a1 + 16) = &unk_24C9C9860;
  *(_QWORD *)(a1 + 24) = &unk_24C9C98A0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_20EC00374(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  __int128 v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, __int128 *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_OWORD *)(v14 + 144) = v23;
    v16 = v24;
    *(_QWORD *)(v14 + 160) = v24;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20EC00638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_20E8C2824((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v23, v24, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC00714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC00734);
}

uint64_t *sub_20EC00740(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC0082C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC00788);
}

char *sub_20EC00868(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_20E92CED8();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_20E9B2D04((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EC00944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EC00968(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC0098C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC009A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_det"
                     "ection17VIOMLFeatureEventEEENS6_31ml_feature_detection_node_group13InputMetadataEvSB_Lb0EEEE27__sha"
                     "red_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17"
                                "feature_detection17VIOMLFeatureEventEEENS6_31ml_feature_detection_node_group13InputMetad"
                                "ataEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEENS6_31ml_feature_detection_node_group13InputMetadataEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS0_INS1_3vio17feature_detection17VIOMLFeatureEventEEENS6_31ml_feature_detection_node_group13InputMetadataEvSB_Lb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC00A14(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9780;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9C97B0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B4780;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

char *sub_20EC00BF8(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v68;

  v5 = *(_QWORD *)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v12 = v6 >> 3;
  v14 = *(char **)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if (a5 > (v13 - (uint64_t)v14) >> 3)
  {
    v15 = a5 + ((uint64_t)&v14[-v5] >> 3);
    if (v15 >> 61)
      sub_20E92CED8();
    v16 = v13 - v5;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_20E877A38();
      v18 = v17;
      v19 = operator new(8 * v17);
      v17 = v18;
      v12 = v6 >> 3;
    }
    else
    {
      v19 = 0;
    }
    v32 = &v19[8 * v12];
    v33 = &v32[8 * a5];
    v34 = v32;
    v35 = __src;
    if ((v8 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_58;
    v34 = &v19[8 * v12];
    v35 = __src;
    if ((unint64_t)(&v19[v6 & 0xFFFFFFFFFFFFFFF8] - __src) < 0x20)
      goto LABEL_58;
    v36 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v32[v37];
    v35 = &__src[v37];
    v38 = (__int128 *)(__src + 16);
    v39 = &v19[8 * v12 + 16];
    v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *v38;
      *(v39 - 1) = *(v38 - 1);
      *v39 = v41;
      v38 += 2;
      v39 += 2;
      v40 -= 4;
    }
    while (v40);
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v42 = *(_QWORD *)v35;
        v35 += 8;
        *(_QWORD *)v34 = v42;
        v34 += 8;
      }
      while (v34 != v33);
    }
    v43 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      v47 = &v19[8 * v12];
      v57 = &v19[8 * v17];
      v58 = v14 - v7;
      if (v14 == v7)
        goto LABEL_39;
    }
    else
    {
      v44 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
      v45 = v44 - v43 - 8;
      v46 = v7;
      v47 = &v19[8 * v12];
      if (v45 < 0x68)
        goto LABEL_59;
      v46 = v7;
      v47 = &v19[8 * v12];
      if ((unint64_t)(v44 - &v19[v6 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_59;
      v48 = (v45 >> 3) + 1;
      v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      v46 = &v7[-v49];
      v47 = &v32[-v49];
      v50 = 8 * v12 - 16;
      v51 = &v19[v50];
      v52 = (__int128 *)(v5 + v50);
      v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v55 = *((_QWORD *)v46 - 1);
          v46 -= 8;
          *((_QWORD *)v47 - 1) = v55;
          v47 -= 8;
        }
        while (v46 != v43);
      }
      v56 = *(_BYTE **)(a1 + 8);
      v57 = &v19[8 * v17];
      v58 = v56 - v7;
      if (v56 == v7)
        goto LABEL_39;
    }
    memmove(v33, v7, v58);
LABEL_39:
    v59 = *(void **)a1;
    *(_QWORD *)a1 = v47;
    *(_QWORD *)(a1 + 8) = &v33[v58];
    *(_QWORD *)(a1 + 16) = v57;
    if (v59)
      operator delete(v59);
    return v32;
  }
  v20 = (v14 - v7) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(a1 + 8);
    goto LABEL_18;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
  {
    v68 = &__src[8 * v20];
    memmove(*(void **)(a1 + 8), v68, a4 - v21);
    v12 = v6 >> 3;
    v21 = v68;
  }
  v23 = &v14[v22];
  *(_QWORD *)(a1 + 8) = &v14[v22];
  if (v14 - v7 >= 1)
  {
LABEL_18:
    v24 = &v7[8 * a5];
    v25 = v23 - v24;
    v26 = (v23 - v24) >> 3;
    v27 = &v23[-8 * a5];
    v28 = v23;
    if (v27 < v14)
    {
      v29 = (v6 & 0xFFFFFFFFFFFFFFF8) + v25;
      v30 = v29 + v5 + 8;
      if ((unint64_t)v14 > v30)
        v30 = (unint64_t)v14;
      v31 = v30 + ~v5 - v29;
      if (v31 >= 0x58)
      {
        v28 = v23;
        if ((unint64_t)&v24[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] >= 0x20)
        {
          v60 = (v31 >> 3) + 1;
          v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
          v27 += v61;
          v28 = &v23[v61];
          v62 = v23 + 16;
          v63 = (__int128 *)(8 * v26 + 8 * v12 + v5 + 16);
          v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = *v63;
            *(v62 - 1) = *(v63 - 1);
            *v62 = v65;
            v62 += 2;
            v63 += 2;
            v64 -= 4;
          }
          while (v64);
          if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v28 = v23;
      }
      do
      {
        v66 = *(_QWORD *)v27;
        v27 += 8;
        *(_QWORD *)v28 = v66;
        v28 += 8;
      }
      while (v27 < v14);
    }
LABEL_49:
    *(_QWORD *)(a1 + 8) = v28;
    if (v23 != v24)
      memmove(&v23[-8 * v26], v7, v25);
    if (v21 != __src)
      memmove(v7, __src, v21 - __src);
  }
  return v7;
}

void sub_20EC00FB4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  char v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  void *v104;
  void *v105;
  char *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  char v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  __int128 v145;
  uint64_t v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  std::__shared_weak_count *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 v164;
  void *v165;
  void *v166;
  char *v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  __int128 v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  char v203;
  unint64_t *v204;
  unint64_t v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  _QWORD *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  std::__shared_weak_count *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  uint64_t v227;
  void *v228;
  char *v229;
  unint64_t *v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  void *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  __int128 v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  char v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  _QWORD *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  std::__shared_weak_count *v274;
  unint64_t v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  __int128 v288;
  __int128 v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t *v364;
  std::__shared_weak_count *v365;
  void *v366[3];
  uint64_t v367;
  __int128 v368;
  void *v369;
  __int128 v370;
  __int128 v371;
  uint64_t (**v372)();
  __int128 v373;
  uint64_t v374;
  uint64_t (**v375)();
  __int128 v376;
  uint64_t (**v377)();
  __int128 v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  void *v381;
  std::__shared_weak_count *v382;
  void *__dst[3];
  void *v384;
  __int128 v385;
  uint64_t v386;
  __int128 v387;
  __int128 v388;
  uint64_t (**v389)();
  __int128 v390;
  uint64_t v391;
  uint64_t (**v392)();
  __int128 v393;
  uint64_t (**v394)();
  __int128 v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  void *v398;
  std::__shared_weak_count *v399;
  void *__p[3];
  void *v401;
  __int128 v402;
  void *v403;
  __int128 v404;
  __int128 v405;
  uint64_t (**v406)();
  __int128 v407;
  uint64_t v408;
  uint64_t (**v409)();
  __int128 v410;
  uint64_t (**v411)();
  __int128 v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  void *v415;
  std::__shared_weak_count *v416;
  void *v417[3];
  void *v418;
  __int128 v419;
  void *v420;
  __int128 v421;
  __int128 v422;
  uint64_t (**v423)();
  __int128 v424;
  uint64_t v425;
  uint64_t (**v426)();
  __int128 v427;
  uint64_t (**v428)();
  __int128 v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  void *v432;
  std::__shared_weak_count *v433;
  uint64_t (**v434)();
  __int128 v435;
  void *v436;
  __int128 v437;
  void *v438;
  __int128 v439;
  __int128 v440;
  uint64_t (**v441)();
  __int128 v442;
  uint64_t v443;
  uint64_t (**v444)();
  __int128 v445;
  uint64_t (**v446)();
  __int128 v447;
  void *v448[2];
  void *v449;
  void *v450[4];
  void *__src[4];
  _OWORD v452[2];
  __int128 v453;
  __int128 v454;
  _QWORD v455[2];
  __int128 v456;
  _QWORD v457[2];
  __int128 v458;
  _QWORD v459[5];

  v459[2] = *MEMORY[0x24BDAC8D0];
  v7 = *(void **)a2;
  v6 = *(unint64_t **)(a2 + 8);
  v432 = *(void **)a2;
  v433 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v8 = v6 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *a3;
  v11 = (unint64_t *)a3[1];
  v430 = *a3;
  v431 = (std::__shared_weak_count *)v11;
  if (v11)
  {
    v12 = v11 + 1;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (*(char *)(v10 + 31) < 0)
  {
    sub_20E860C04(__dst, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v10 + 8);
    __dst[2] = *(void **)(v10 + 24);
    *(_OWORD *)__dst = v14;
  }
  if (*(char *)(v10 + 55) < 0)
  {
    sub_20E860C04(v366, *(void **)(v10 + 32), *(_QWORD *)(v10 + 40));
  }
  else
  {
    *(_OWORD *)v366 = *(_OWORD *)(v10 + 32);
    v366[2] = *(void **)(v10 + 48);
  }
  v450[0] = v7;
  v450[1] = v6;
  v433 = 0;
  v432 = 0;
  v448[0] = (void *)v10;
  v448[1] = v11;
  if (v11)
  {
    v15 = v11 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_20E860C04(v417, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v417 = *(_OWORD *)__dst;
    v417[2] = __dst[2];
  }
  if (SHIBYTE(v366[2]) < 0)
  {
    sub_20E860C04(__p, v366[0], (unint64_t)v366[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v366;
    __p[2] = v366[2];
  }
  *(void **)((char *)&v454 + 7) = *(void **)((char *)&__dst[1] + 7);
  v18 = __dst[0];
  v17 = __dst[1];
  BYTE7(v454) = HIBYTE(__dst[1]);
  v19 = HIBYTE(__dst[2]);
  memset(__dst, 0, sizeof(__dst));
  *(_QWORD *)&v456 = v17;
  *(_QWORD *)((char *)&v456 + 7) = *(_QWORD *)((char *)&v454 + 7);
  *(_QWORD *)((char *)&v454 + 7) = 0;
  *(_QWORD *)&v454 = 0;
  __src[0] = v7;
  __src[1] = v6;
  if (v6)
  {
    v20 = v6 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = operator new();
  *(_QWORD *)&v458 = v456;
  *(_QWORD *)((char *)&v458 + 7) = *(_QWORD *)((char *)&v456 + 7);
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  v23 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)v22 = &off_24C9C9B80;
  *(_QWORD *)(v22 + 16) = &unk_24C9C9BF8;
  *(_QWORD *)(v22 + 24) = &unk_24C9C9C38;
  v24 = v458;
  *(_QWORD *)(v22 + 63) = *(_QWORD *)((char *)&v458 + 7);
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v24;
  *(_BYTE *)(v22 + 71) = v19;
  *(_QWORD *)&v458 = 0;
  *(_QWORD *)((char *)&v458 + 7) = 0;
  *(_OWORD *)(v22 + 72) = v23;
  v452[0] = 0uLL;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9C9D10;
  v25[1] = v10;
  v25[2] = v11;
  v448[1] = 0;
  v448[0] = 0;
  *(_QWORD *)(v22 + 144) = 0;
  *(_QWORD *)(v22 + 88) = v25;
  *(_QWORD *)(v22 + 96) = v22 + 96;
  *(_QWORD *)(v22 + 104) = v22 + 96;
  *(_QWORD *)(v22 + 112) = 0;
  *(_QWORD *)(v22 + 120) = v22 + 120;
  *(_QWORD *)(v22 + 128) = v22 + 120;
  *(_QWORD *)(v22 + 136) = 0;
  if (!*(_QWORD *)(v22 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v26 = (std::__shared_weak_count *)operator new();
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA1B0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  v28 = *(std::__shared_weak_count **)(v22 + 40);
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    *(_QWORD *)(v22 + 32) = v22;
    *(_QWORD *)(v22 + 40) = v26;
  }
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_40:
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v452[0] + 1);
  if (*((_QWORD *)&v452[0] + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v452[0] + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)&v452[0] = v22;
  *((_QWORD *)&v452[0] + 1) = v26;
  v39 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v40 = (unint64_t *)((char *)__src[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(_OWORD *)v450;
  v450[0] = 0;
  v450[1] = 0;
  v435 = *(_OWORD *)v417;
  v434 = &off_24C9C9A58;
  v436 = v417[2];
  memset(v417, 0, sizeof(v417));
  v437 = *(_OWORD *)__p;
  v43 = __p[2];
  memset(__p, 0, sizeof(__p));
  v439 = v42;
  __src[1] = 0;
  __src[0] = 0;
  v44 = v452[0];
  v438 = v43;
  v440 = v452[0];
  v452[0] = 0uLL;
  if (*((_QWORD *)&v440 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 16);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v441 = &off_24C9CC5A8;
  v47 = operator new();
  *(_QWORD *)v47 = &off_24C9CC6E8;
  *(_OWORD *)(v47 + 8) = v44;
  *(_QWORD *)&v442 = v47;
  v49 = *((_QWORD *)&v440 + 1);
  v48 = v440;
  if (!*((_QWORD *)&v440 + 1))
  {
    *((_QWORD *)&v442 + 1) = v440;
    v443 = 0;
    if ((_QWORD)v440)
      v53 = v440 + 16;
    else
      v53 = 0;
    goto LABEL_70;
  }
  v50 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
  v52 = *((_QWORD *)&v440 + 1);
  *((_QWORD *)&v442 + 1) = v48;
  v443 = v49;
  if ((_QWORD)v440)
    v53 = v440 + 16;
  else
    v53 = 0;
  if (!*((_QWORD *)&v440 + 1))
  {
    v48 = v440;
LABEL_70:
    v56 = 0;
    v444 = &off_24C9CCA38;
    v445 = v53;
    goto LABEL_71;
  }
  v54 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  v56 = *((_QWORD *)&v440 + 1);
  v48 = v440;
  v444 = &off_24C9CCA38;
  *(_QWORD *)&v445 = v53;
  *((_QWORD *)&v445 + 1) = v52;
  if (*((_QWORD *)&v440 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
LABEL_71:
  if (v48)
    v59 = v48 + 24;
  else
    v59 = 0;
  v446 = &off_24C9B2310;
  *(_QWORD *)&v447 = v59;
  *((_QWORD *)&v447 + 1) = v56;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v417[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_79:
    operator delete(v417[0]);
    v60 = (std::__shared_weak_count *)v448[1];
    if (!v448[1])
      goto LABEL_84;
    goto LABEL_80;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v417[2]) < 0)
    goto LABEL_79;
LABEL_76:
  v60 = (std::__shared_weak_count *)v448[1];
  if (!v448[1])
    goto LABEL_84;
LABEL_80:
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_84:
  v63 = (std::__shared_weak_count *)v450[1];
  if (!v450[1])
    goto LABEL_88;
  v64 = (unint64_t *)((char *)v450[1] + 8);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if ((SHIBYTE(v366[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_94:
      operator delete(__dst[0]);
      if (v430)
        goto LABEL_96;
      goto LABEL_95;
    }
  }
  else
  {
LABEL_88:
    if ((SHIBYTE(v366[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(v366[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_94;
LABEL_90:
  if (v430)
    goto LABEL_96;
LABEL_95:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_96:
  v67 = *(void **)a2;
  v66 = *(unint64_t **)(a2 + 8);
  v415 = *(void **)a2;
  v416 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v68 = v66 + 1;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v71 = *a3;
  v70 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v72 = *a3 + 56;
  else
    v72 = 0;
  v413 = v72;
  v414 = v70;
  if (v70)
  {
    v73 = (unint64_t *)&v70->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  if (*(char *)(v72 + 31) < 0)
  {
    sub_20E860C04(v366, *(void **)(v72 + 8), *(_QWORD *)(v72 + 16));
  }
  else
  {
    v75 = *(_OWORD *)(v72 + 8);
    v366[2] = *(void **)(v72 + 24);
    *(_OWORD *)v366 = v75;
  }
  if (*(char *)(v71 + 111) < 0)
  {
    sub_20E860C04(v452, *(void **)(v71 + 88), *(_QWORD *)(v71 + 96));
  }
  else
  {
    v452[0] = *(_OWORD *)(v71 + 88);
    *(_QWORD *)&v452[1] = *(_QWORD *)(v71 + 104);
  }
  v448[0] = v67;
  v448[1] = v66;
  v416 = 0;
  v415 = 0;
  *(_QWORD *)&v458 = v72;
  *((_QWORD *)&v458 + 1) = v70;
  if (v70)
  {
    v76 = (unint64_t *)&v70->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  if (SHIBYTE(v366[2]) < 0)
  {
    sub_20E860C04(__p, v366[0], (unint64_t)v366[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v366;
    __p[2] = v366[2];
  }
  if (SBYTE7(v452[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v452[0], *((unint64_t *)&v452[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v452[0];
    __dst[2] = *(void **)&v452[1];
  }
  *(void **)((char *)&v453 + 7) = *(void **)((char *)&v366[1] + 7);
  v79 = v366[0];
  v78 = v366[1];
  BYTE7(v453) = HIBYTE(v366[1]);
  v80 = HIBYTE(v366[2]);
  memset(v366, 0, sizeof(v366));
  *(_QWORD *)&v454 = v78;
  *(_QWORD *)((char *)&v454 + 7) = *(_QWORD *)((char *)&v453 + 7);
  *(_QWORD *)((char *)&v453 + 7) = 0;
  *(_QWORD *)&v453 = 0;
  v450[0] = v67;
  v450[1] = v66;
  if (v66)
  {
    v81 = v66 + 1;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = (char *)operator new();
  *(_QWORD *)&v456 = v454;
  *(_QWORD *)((char *)&v456 + 7) = *(_QWORD *)((char *)&v454 + 7);
  *(_QWORD *)&v454 = 0;
  *(_QWORD *)((char *)&v454 + 7) = 0;
  v84 = *(_OWORD *)v450;
  v450[0] = 0;
  v450[1] = 0;
  v83[8] = 1;
  *((_QWORD *)v83 + 4) = 0;
  *((_QWORD *)v83 + 5) = 0;
  *(_QWORD *)v83 = &off_24C9CA200;
  *((_QWORD *)v83 + 2) = &unk_24C9CA278;
  *((_QWORD *)v83 + 3) = &unk_24C9CA2B8;
  v85 = v456;
  *(_QWORD *)(v83 + 63) = *(_QWORD *)((char *)&v456 + 7);
  *((_QWORD *)v83 + 6) = v79;
  *((_QWORD *)v83 + 7) = v85;
  v83[71] = v80;
  *(_QWORD *)&v456 = 0;
  *(_QWORD *)((char *)&v456 + 7) = 0;
  *(_OWORD *)(v83 + 72) = v84;
  __src[1] = 0;
  __src[0] = 0;
  v86 = (_QWORD *)operator new();
  *v86 = &off_24C9CA3A0;
  v86[1] = v72;
  v86[2] = v70;
  v458 = 0uLL;
  *((_QWORD *)v83 + 18) = 0;
  *((_QWORD *)v83 + 11) = v86;
  *((_QWORD *)v83 + 12) = v83 + 96;
  *((_QWORD *)v83 + 13) = v83 + 96;
  *((_QWORD *)v83 + 14) = 0;
  *((_QWORD *)v83 + 15) = v83 + 120;
  *((_QWORD *)v83 + 16) = v83 + 120;
  *((_QWORD *)v83 + 17) = 0;
  if (!*((_QWORD *)v83 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v87 = (std::__shared_weak_count *)operator new();
  v87->__shared_owners_ = 0;
  v88 = (unint64_t *)&v87->__shared_owners_;
  v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA888;
  v87->__shared_weak_owners_ = 0;
  v87[1].__vftable = (std::__shared_weak_count_vtbl *)v83;
  v89 = (std::__shared_weak_count *)*((_QWORD *)v83 + 5);
  if (v89)
  {
    if (v89->__shared_owners_ != -1)
      goto LABEL_138;
    do
      v90 = __ldxr(v88);
    while (__stxr(v90 + 1, v88));
    v91 = (unint64_t *)&v87->__shared_weak_owners_;
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
    *((_QWORD *)v83 + 4) = v83;
    *((_QWORD *)v83 + 5) = v87;
    std::__shared_weak_count::__release_weak(v89);
  }
  else
  {
    do
      v93 = __ldxr(v88);
    while (__stxr(v93 + 1, v88));
    v94 = (unint64_t *)&v87->__shared_weak_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    *((_QWORD *)v83 + 4) = v83;
    *((_QWORD *)v83 + 5) = v87;
  }
  do
    v96 = __ldaxr(v88);
  while (__stlxr(v96 - 1, v88));
  if (!v96)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
LABEL_138:
  v97 = (std::__shared_weak_count *)__src[1];
  if (__src[1])
  {
    v98 = (unint64_t *)((char *)__src[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  __src[0] = v83;
  __src[1] = v87;
  v100 = (std::__shared_weak_count *)v450[1];
  if (v450[1])
  {
    v101 = (unint64_t *)((char *)v450[1] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *(_OWORD *)v448;
  v448[0] = 0;
  v448[1] = 0;
  *(_OWORD *)&v417[1] = *(_OWORD *)__p;
  v417[0] = &off_24C9C9A88;
  v418 = __p[2];
  memset(__p, 0, sizeof(__p));
  v419 = *(_OWORD *)__dst;
  v104 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v421 = v103;
  v450[1] = 0;
  v450[0] = 0;
  v105 = __src[0];
  v106 = (char *)__src[1];
  v420 = v104;
  v422 = *(_OWORD *)__src;
  __src[0] = 0;
  __src[1] = 0;
  if (*((_QWORD *)&v422 + 1))
  {
    v107 = (unint64_t *)(v106 + 16);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  v423 = &off_24C9B6B38;
  v109 = (_QWORD *)operator new();
  *v109 = &off_24C9CA8D8;
  v109[1] = v105;
  v109[2] = v106;
  *(_QWORD *)&v424 = v109;
  v111 = *((_QWORD *)&v422 + 1);
  v110 = v422;
  if (!*((_QWORD *)&v422 + 1))
  {
    *((_QWORD *)&v424 + 1) = v422;
    v425 = 0;
    if ((_QWORD)v422)
      v115 = v422 + 16;
    else
      v115 = 0;
    goto LABEL_168;
  }
  v112 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 16);
  do
    v113 = __ldxr(v112);
  while (__stxr(v113 + 1, v112));
  v114 = *((_QWORD *)&v422 + 1);
  *((_QWORD *)&v424 + 1) = v110;
  v425 = v111;
  if ((_QWORD)v422)
    v115 = v422 + 16;
  else
    v115 = 0;
  if (!*((_QWORD *)&v422 + 1))
  {
    v110 = v422;
LABEL_168:
    v118 = 0;
    v426 = &off_24C9CCA38;
    v427 = v115;
    goto LABEL_169;
  }
  v116 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 16);
  do
    v117 = __ldxr(v116);
  while (__stxr(v117 + 1, v116));
  v118 = *((_QWORD *)&v422 + 1);
  v110 = v422;
  v426 = &off_24C9CCA38;
  *(_QWORD *)&v427 = v115;
  *((_QWORD *)&v427 + 1) = v114;
  if (*((_QWORD *)&v422 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 16);
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
LABEL_169:
  if (v110)
    v121 = v110 + 24;
  else
    v121 = 0;
  v428 = &off_24C9B2310;
  *(_QWORD *)&v429 = v121;
  *((_QWORD *)&v429 + 1) = v118;
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_174;
LABEL_177:
    operator delete(__p[0]);
    v122 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
    if (!*((_QWORD *)&v458 + 1))
      goto LABEL_182;
    goto LABEL_178;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_177;
LABEL_174:
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
  if (!*((_QWORD *)&v458 + 1))
    goto LABEL_182;
LABEL_178:
  v123 = (unint64_t *)&v122->__shared_owners_;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 - 1, v123));
  if (!v124)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
LABEL_182:
  v125 = (std::__shared_weak_count *)v448[1];
  if (!v448[1])
    goto LABEL_186;
  v126 = (unint64_t *)((char *)v448[1] + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if ((SBYTE7(v452[1]) & 0x80000000) == 0)
    {
LABEL_187:
      if ((SHIBYTE(v366[2]) & 0x80000000) == 0)
        goto LABEL_188;
LABEL_192:
      operator delete(v366[0]);
      if (v413)
        goto LABEL_194;
      goto LABEL_193;
    }
  }
  else
  {
LABEL_186:
    if ((SBYTE7(v452[1]) & 0x80000000) == 0)
      goto LABEL_187;
  }
  operator delete(*(void **)&v452[0]);
  if (SHIBYTE(v366[2]) < 0)
    goto LABEL_192;
LABEL_188:
  if (v413)
    goto LABEL_194;
LABEL_193:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_194:
  v129 = *(void **)a2;
  v128 = *(unint64_t **)(a2 + 8);
  v398 = *(void **)a2;
  v399 = (std::__shared_weak_count *)v128;
  if (v128)
  {
    v130 = v128 + 1;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v133 = *a3;
  v132 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v134 = *a3 + 112;
  else
    v134 = 0;
  v396 = v134;
  v397 = v132;
  if (v132)
  {
    v135 = (unint64_t *)&v132->__shared_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  if (*(char *)(v134 + 31) < 0)
  {
    sub_20E860C04(v452, *(void **)(v134 + 8), *(_QWORD *)(v134 + 16));
  }
  else
  {
    v137 = *(_OWORD *)(v134 + 8);
    *(_QWORD *)&v452[1] = *(_QWORD *)(v134 + 24);
    v452[0] = v137;
  }
  if (*(char *)(v133 + 167) < 0)
  {
    sub_20E860C04(__src, *(void **)(v133 + 144), *(_QWORD *)(v133 + 152));
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)(v133 + 144);
    __src[2] = *(void **)(v133 + 160);
  }
  *(_QWORD *)&v458 = v129;
  *((_QWORD *)&v458 + 1) = v128;
  v398 = 0;
  v399 = 0;
  *(_QWORD *)&v456 = v134;
  *((_QWORD *)&v456 + 1) = v132;
  if (v132)
  {
    v138 = (unint64_t *)&v132->__shared_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
  }
  if (SBYTE7(v452[1]) < 0)
  {
    sub_20E860C04(__dst, *(void **)&v452[0], *((unint64_t *)&v452[0] + 1));
  }
  else
  {
    *(_OWORD *)__dst = v452[0];
    __dst[2] = *(void **)&v452[1];
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v366, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v366 = *(_OWORD *)__src;
    v366[2] = __src[2];
  }
  *(_QWORD *)((char *)v459 + 7) = *(_QWORD *)((char *)v452 + 15);
  v140 = v452[0];
  HIBYTE(v459[0]) = HIBYTE(v452[0]);
  v141 = BYTE7(v452[1]);
  memset(v452, 0, 24);
  *(_QWORD *)&v453 = *((_QWORD *)&v140 + 1);
  *(_QWORD *)((char *)&v453 + 7) = *(_QWORD *)((char *)v459 + 7);
  *(_QWORD *)((char *)v459 + 7) = 0;
  v459[0] = 0;
  v448[0] = v129;
  v448[1] = v128;
  if (v128)
  {
    v142 = v128 + 1;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  v144 = (char *)operator new();
  *(_QWORD *)&v454 = v453;
  *(_QWORD *)((char *)&v454 + 7) = *(_QWORD *)((char *)&v453 + 7);
  *(_QWORD *)&v453 = 0;
  *(_QWORD *)((char *)&v453 + 7) = 0;
  v145 = *(_OWORD *)v448;
  v448[0] = 0;
  v448[1] = 0;
  v144[8] = 1;
  *((_QWORD *)v144 + 4) = 0;
  *((_QWORD *)v144 + 5) = 0;
  *(_QWORD *)v144 = &off_24C9CA940;
  *((_QWORD *)v144 + 2) = &unk_24C9CA9B8;
  *((_QWORD *)v144 + 3) = &unk_24C9CA9F8;
  v146 = v454;
  *(_QWORD *)(v144 + 63) = *(_QWORD *)((char *)&v454 + 7);
  *((_QWORD *)v144 + 6) = v140;
  *((_QWORD *)v144 + 7) = v146;
  v144[71] = v141;
  *(_QWORD *)&v454 = 0;
  *(_QWORD *)((char *)&v454 + 7) = 0;
  *(_OWORD *)(v144 + 72) = v145;
  v450[1] = 0;
  v450[0] = 0;
  v147 = (_QWORD *)operator new();
  *v147 = &off_24C9CAAD0;
  v147[1] = v134;
  v147[2] = v132;
  v456 = 0uLL;
  *((_QWORD *)v144 + 18) = 0;
  *((_QWORD *)v144 + 11) = v147;
  *((_QWORD *)v144 + 12) = v144 + 96;
  *((_QWORD *)v144 + 13) = v144 + 96;
  *((_QWORD *)v144 + 14) = 0;
  *((_QWORD *)v144 + 15) = v144 + 120;
  *((_QWORD *)v144 + 16) = v144 + 120;
  *((_QWORD *)v144 + 17) = 0;
  if (!*((_QWORD *)v144 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v148 = (std::__shared_weak_count *)operator new();
  v148->__shared_owners_ = 0;
  v149 = (unint64_t *)&v148->__shared_owners_;
  v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CAF70;
  v148->__shared_weak_owners_ = 0;
  v148[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  v150 = (std::__shared_weak_count *)*((_QWORD *)v144 + 5);
  if (v150)
  {
    if (v150->__shared_owners_ != -1)
      goto LABEL_236;
    do
      v151 = __ldxr(v149);
    while (__stxr(v151 + 1, v149));
    v152 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
    std::__shared_weak_count::__release_weak(v150);
  }
  else
  {
    do
      v154 = __ldxr(v149);
    while (__stxr(v154 + 1, v149));
    v155 = (unint64_t *)&v148->__shared_weak_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v148;
  }
  do
    v157 = __ldaxr(v149);
  while (__stlxr(v157 - 1, v149));
  if (!v157)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
LABEL_236:
  v158 = (std::__shared_weak_count *)v450[1];
  if (v450[1])
  {
    v159 = (unint64_t *)((char *)v450[1] + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v450[0] = v144;
  v450[1] = v148;
  v161 = (std::__shared_weak_count *)v448[1];
  if (v448[1])
  {
    v162 = (unint64_t *)((char *)v448[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v458;
  v458 = 0uLL;
  *(_OWORD *)&__p[1] = *(_OWORD *)__dst;
  __p[0] = &off_24C9C9AB8;
  v401 = __dst[2];
  memset(__dst, 0, sizeof(__dst));
  v402 = *(_OWORD *)v366;
  v165 = v366[2];
  memset(v366, 0, sizeof(v366));
  v404 = v164;
  v448[1] = 0;
  v448[0] = 0;
  v166 = v450[0];
  v167 = (char *)v450[1];
  v403 = v165;
  v405 = *(_OWORD *)v450;
  v450[0] = 0;
  v450[1] = 0;
  if (*((_QWORD *)&v405 + 1))
  {
    v168 = (unint64_t *)(v167 + 16);
    do
      v169 = __ldxr(v168);
    while (__stxr(v169 + 1, v168));
  }
  v406 = &off_24C9CC500;
  v170 = (_QWORD *)operator new();
  *v170 = &off_24C9CC7A8;
  v170[1] = v166;
  v170[2] = v167;
  *(_QWORD *)&v407 = v170;
  v172 = *((_QWORD *)&v405 + 1);
  v171 = v405;
  if (!*((_QWORD *)&v405 + 1))
  {
    *((_QWORD *)&v407 + 1) = v405;
    v408 = 0;
    if ((_QWORD)v405)
      v176 = v405 + 16;
    else
      v176 = 0;
    goto LABEL_266;
  }
  v173 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 16);
  do
    v174 = __ldxr(v173);
  while (__stxr(v174 + 1, v173));
  v175 = *((_QWORD *)&v405 + 1);
  *((_QWORD *)&v407 + 1) = v171;
  v408 = v172;
  if ((_QWORD)v405)
    v176 = v405 + 16;
  else
    v176 = 0;
  if (!*((_QWORD *)&v405 + 1))
  {
    v171 = v405;
LABEL_266:
    v179 = 0;
    v409 = &off_24C9CCA38;
    v410 = v176;
    goto LABEL_267;
  }
  v177 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 16);
  do
    v178 = __ldxr(v177);
  while (__stxr(v178 + 1, v177));
  v179 = *((_QWORD *)&v405 + 1);
  v171 = v405;
  v409 = &off_24C9CCA38;
  *(_QWORD *)&v410 = v176;
  *((_QWORD *)&v410 + 1) = v175;
  if (*((_QWORD *)&v405 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v405 + 1) + 16);
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
  }
LABEL_267:
  if (v171)
    v182 = v171 + 24;
  else
    v182 = 0;
  v411 = &off_24C9B2310;
  *(_QWORD *)&v412 = v182;
  *((_QWORD *)&v412 + 1) = v179;
  if ((SHIBYTE(v366[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_272;
LABEL_275:
    operator delete(__dst[0]);
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
    if (!*((_QWORD *)&v456 + 1))
      goto LABEL_280;
    goto LABEL_276;
  }
  operator delete(v366[0]);
  if (SHIBYTE(__dst[2]) < 0)
    goto LABEL_275;
LABEL_272:
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
  if (!*((_QWORD *)&v456 + 1))
    goto LABEL_280;
LABEL_276:
  v184 = (unint64_t *)&v183->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (!v185)
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
LABEL_280:
  v186 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
  if (!*((_QWORD *)&v458 + 1))
    goto LABEL_284;
  v187 = (unint64_t *)(*((_QWORD *)&v458 + 1) + 8);
  do
    v188 = __ldaxr(v187);
  while (__stlxr(v188 - 1, v187));
  if (!v188)
  {
    ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
    std::__shared_weak_count::__release_weak(v186);
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
    {
LABEL_285:
      if ((SBYTE7(v452[1]) & 0x80000000) == 0)
        goto LABEL_286;
LABEL_290:
      operator delete(*(void **)&v452[0]);
      if (v396)
        goto LABEL_292;
      goto LABEL_291;
    }
  }
  else
  {
LABEL_284:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_285;
  }
  operator delete(__src[0]);
  if (SBYTE7(v452[1]) < 0)
    goto LABEL_290;
LABEL_286:
  if (v396)
    goto LABEL_292;
LABEL_291:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_292:
  v190 = *(void **)a2;
  v189 = *(std::__shared_weak_count **)(a2 + 8);
  v381 = *(void **)a2;
  v382 = v189;
  if (v189)
  {
    v191 = (unint64_t *)&v189->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v194 = *a3;
  v193 = (std::__shared_weak_count *)a3[1];
  if (*a3)
    v195 = *a3 + 168;
  else
    v195 = 0;
  v379 = v195;
  v380 = v193;
  if (v193)
  {
    v196 = (unint64_t *)&v193->__shared_owners_;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  if (*(char *)(v195 + 31) < 0)
  {
    sub_20E860C04(__src, *(void **)(v195 + 8), *(_QWORD *)(v195 + 16));
  }
  else
  {
    v198 = *(_OWORD *)(v195 + 8);
    __src[2] = *(void **)(v195 + 24);
    *(_OWORD *)__src = v198;
  }
  if (*(char *)(v194 + 223) < 0)
  {
    sub_20E860C04(v450, *(void **)(v194 + 200), *(_QWORD *)(v194 + 208));
  }
  else
  {
    *(_OWORD *)v450 = *(_OWORD *)(v194 + 200);
    v450[2] = *(void **)(v194 + 216);
  }
  *(_QWORD *)&v456 = v190;
  *((_QWORD *)&v456 + 1) = v189;
  v381 = 0;
  v382 = 0;
  *(_QWORD *)&v454 = v195;
  *((_QWORD *)&v454 + 1) = v193;
  if (v193)
  {
    v199 = (unint64_t *)&v193->__shared_owners_;
    do
      v200 = __ldxr(v199);
    while (__stxr(v200 + 1, v199));
  }
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_20E860C04(v366, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v366 = *(_OWORD *)__src;
    v366[2] = __src[2];
  }
  v364 = a1;
  if (SHIBYTE(v450[2]) < 0)
  {
    sub_20E860C04(v452, v450[0], (unint64_t)v450[1]);
  }
  else
  {
    v452[0] = *(_OWORD *)v450;
    *(void **)&v452[1] = v450[2];
  }
  *(void **)((char *)v457 + 7) = *(void **)((char *)&__src[1] + 7);
  v201 = __src[0];
  v202 = __src[1];
  HIBYTE(v457[0]) = HIBYTE(__src[1]);
  v203 = HIBYTE(__src[2]);
  memset(__src, 0, 24);
  v459[0] = v202;
  *(_QWORD *)((char *)v459 + 7) = *(_QWORD *)((char *)v457 + 7);
  *(_QWORD *)((char *)v457 + 7) = 0;
  v457[0] = 0;
  *(_QWORD *)&v458 = v190;
  *((_QWORD *)&v458 + 1) = v189;
  if (v189)
  {
    v204 = (unint64_t *)&v189->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  v206 = (char *)operator new();
  *(_QWORD *)&v453 = v459[0];
  *(_QWORD *)((char *)&v453 + 7) = *(_QWORD *)((char *)v459 + 7);
  v459[0] = 0;
  *(_QWORD *)((char *)v459 + 7) = 0;
  v207 = v458;
  v458 = 0uLL;
  v206[8] = 1;
  *((_QWORD *)v206 + 4) = 0;
  *((_QWORD *)v206 + 5) = 0;
  *(_QWORD *)v206 = &off_24C9CAFC0;
  *((_QWORD *)v206 + 2) = &unk_24C9CB038;
  *((_QWORD *)v206 + 3) = &unk_24C9CB078;
  v208 = v453;
  *(_QWORD *)(v206 + 63) = *(_QWORD *)((char *)&v453 + 7);
  *((_QWORD *)v206 + 6) = v201;
  *((_QWORD *)v206 + 7) = v208;
  v206[71] = v203;
  *(_QWORD *)&v453 = 0;
  *(_QWORD *)((char *)&v453 + 7) = 0;
  *(_OWORD *)(v206 + 72) = v207;
  v448[1] = 0;
  v448[0] = 0;
  v209 = (_QWORD *)operator new();
  *v209 = &off_24C9CB160;
  v209[1] = v195;
  v209[2] = v193;
  v454 = 0uLL;
  *((_QWORD *)v206 + 18) = 0;
  *((_QWORD *)v206 + 11) = v209;
  *((_QWORD *)v206 + 12) = v206 + 96;
  *((_QWORD *)v206 + 13) = v206 + 96;
  *((_QWORD *)v206 + 14) = 0;
  *((_QWORD *)v206 + 15) = v206 + 120;
  *((_QWORD *)v206 + 16) = v206 + 120;
  *((_QWORD *)v206 + 17) = 0;
  if (!*((_QWORD *)v206 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v210 = (std::__shared_weak_count *)operator new();
  v210->__shared_owners_ = 0;
  v211 = (unint64_t *)&v210->__shared_owners_;
  v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CB600;
  v210->__shared_weak_owners_ = 0;
  v210[1].__vftable = (std::__shared_weak_count_vtbl *)v206;
  v212 = (std::__shared_weak_count *)*((_QWORD *)v206 + 5);
  if (v212)
  {
    if (v212->__shared_owners_ != -1)
      goto LABEL_334;
    do
      v213 = __ldxr(v211);
    while (__stxr(v213 + 1, v211));
    v214 = (unint64_t *)&v210->__shared_weak_owners_;
    do
      v215 = __ldxr(v214);
    while (__stxr(v215 + 1, v214));
    *((_QWORD *)v206 + 4) = v206;
    *((_QWORD *)v206 + 5) = v210;
    std::__shared_weak_count::__release_weak(v212);
  }
  else
  {
    do
      v216 = __ldxr(v211);
    while (__stxr(v216 + 1, v211));
    v217 = (unint64_t *)&v210->__shared_weak_owners_;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
    *((_QWORD *)v206 + 4) = v206;
    *((_QWORD *)v206 + 5) = v210;
  }
  do
    v219 = __ldaxr(v211);
  while (__stlxr(v219 - 1, v211));
  if (!v219)
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
  }
LABEL_334:
  v220 = (std::__shared_weak_count *)v448[1];
  if (v448[1])
  {
    v221 = (unint64_t *)((char *)v448[1] + 8);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v448[0] = v206;
  v448[1] = v210;
  v223 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
  if (*((_QWORD *)&v458 + 1))
  {
    v224 = (unint64_t *)(*((_QWORD *)&v458 + 1) + 8);
    do
      v225 = __ldaxr(v224);
    while (__stlxr(v225 - 1, v224));
    if (!v225)
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
  }
  v226 = v456;
  v456 = 0uLL;
  *(_OWORD *)&__dst[1] = *(_OWORD *)v366;
  __dst[0] = &off_24C9C9AE8;
  v384 = v366[2];
  memset(v366, 0, sizeof(v366));
  v385 = v452[0];
  v227 = *(_QWORD *)&v452[1];
  memset(v452, 0, 24);
  v387 = v226;
  v458 = 0uLL;
  v228 = v448[0];
  v229 = (char *)v448[1];
  v386 = v227;
  v388 = *(_OWORD *)v448;
  v448[0] = 0;
  v448[1] = 0;
  if (*((_QWORD *)&v388 + 1))
  {
    v230 = (unint64_t *)(v229 + 16);
    do
      v231 = __ldxr(v230);
    while (__stxr(v231 + 1, v230));
  }
  v389 = &off_24C9C9B18;
  v232 = (_QWORD *)operator new();
  *v232 = &off_24C9CB650;
  v232[1] = v228;
  v232[2] = v229;
  *(_QWORD *)&v390 = v232;
  v234 = *((_QWORD *)&v388 + 1);
  v233 = v388;
  if (!*((_QWORD *)&v388 + 1))
  {
    *((_QWORD *)&v390 + 1) = v388;
    v391 = 0;
    if ((_QWORD)v388)
      v238 = v388 + 16;
    else
      v238 = 0;
    goto LABEL_364;
  }
  v235 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 16);
  do
    v236 = __ldxr(v235);
  while (__stxr(v236 + 1, v235));
  v237 = *((_QWORD *)&v388 + 1);
  *((_QWORD *)&v390 + 1) = v233;
  v391 = v234;
  if ((_QWORD)v388)
    v238 = v388 + 16;
  else
    v238 = 0;
  if (!*((_QWORD *)&v388 + 1))
  {
    v233 = v388;
LABEL_364:
    v241 = 0;
    v392 = &off_24C9CCA38;
    v393 = v238;
    goto LABEL_365;
  }
  v239 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 16);
  do
    v240 = __ldxr(v239);
  while (__stxr(v240 + 1, v239));
  v241 = *((_QWORD *)&v388 + 1);
  v233 = v388;
  v392 = &off_24C9CCA38;
  *(_QWORD *)&v393 = v238;
  *((_QWORD *)&v393 + 1) = v237;
  if (*((_QWORD *)&v388 + 1))
  {
    v242 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 16);
    do
      v243 = __ldxr(v242);
    while (__stxr(v243 + 1, v242));
  }
LABEL_365:
  if (v233)
    v244 = v233 + 24;
  else
    v244 = 0;
  v394 = &off_24C9B2310;
  *(_QWORD *)&v395 = v244;
  *((_QWORD *)&v395 + 1) = v241;
  if ((SBYTE7(v452[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v366[2]) & 0x80000000) == 0)
      goto LABEL_370;
LABEL_373:
    operator delete(v366[0]);
    v245 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
    if (!*((_QWORD *)&v454 + 1))
      goto LABEL_378;
    goto LABEL_374;
  }
  operator delete(*(void **)&v452[0]);
  if (SHIBYTE(v366[2]) < 0)
    goto LABEL_373;
LABEL_370:
  v245 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (!*((_QWORD *)&v454 + 1))
    goto LABEL_378;
LABEL_374:
  v246 = (unint64_t *)&v245->__shared_owners_;
  do
    v247 = __ldaxr(v246);
  while (__stlxr(v247 - 1, v246));
  if (!v247)
  {
    ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
    std::__shared_weak_count::__release_weak(v245);
  }
LABEL_378:
  v248 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
  if (!*((_QWORD *)&v456 + 1))
    goto LABEL_382;
  v249 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
  do
    v250 = __ldaxr(v249);
  while (__stlxr(v250 - 1, v249));
  if (!v250)
  {
    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
    std::__shared_weak_count::__release_weak(v248);
    if ((SHIBYTE(v450[2]) & 0x80000000) == 0)
    {
LABEL_383:
      if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
        goto LABEL_384;
LABEL_388:
      operator delete(__src[0]);
      if (v379)
        goto LABEL_390;
      goto LABEL_389;
    }
  }
  else
  {
LABEL_382:
    if ((SHIBYTE(v450[2]) & 0x80000000) == 0)
      goto LABEL_383;
  }
  operator delete(v450[0]);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_388;
LABEL_384:
  if (v379)
    goto LABEL_390;
LABEL_389:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_390:
  v252 = *(void **)a2;
  v251 = *(_QWORD *)(a2 + 8);
  if (v251)
  {
    v253 = (unint64_t *)(v251 + 8);
    do
      v254 = __ldxr(v253);
    while (__stxr(v254 + 1, v253));
  }
  v256 = *a3;
  v255 = a3[1];
  if (*a3)
    v257 = *a3 + 224;
  else
    v257 = 0;
  v365 = (std::__shared_weak_count *)a3[1];
  if (v255)
  {
    v258 = (unint64_t *)(v255 + 8);
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
  }
  if (*(char *)(v257 + 31) < 0)
  {
    sub_20E860C04(v450, *(void **)(v257 + 8), *(_QWORD *)(v257 + 16));
  }
  else
  {
    v260 = *(_OWORD *)(v257 + 8);
    v450[2] = *(void **)(v257 + 24);
    *(_OWORD *)v450 = v260;
  }
  if (*(char *)(v256 + 279) < 0)
  {
    sub_20E860C04(v448, *(void **)(v256 + 256), *(_QWORD *)(v256 + 264));
  }
  else
  {
    *(_OWORD *)v448 = *(_OWORD *)(v256 + 256);
    v449 = *(void **)(v256 + 272);
  }
  *(_QWORD *)&v454 = v252;
  *((_QWORD *)&v454 + 1) = v251;
  *(_QWORD *)&v453 = v257;
  *((_QWORD *)&v453 + 1) = v255;
  if (v255)
  {
    v261 = (unint64_t *)(v255 + 8);
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
  }
  if (SHIBYTE(v450[2]) < 0)
  {
    sub_20E860C04(v452, v450[0], (unint64_t)v450[1]);
  }
  else
  {
    v452[0] = *(_OWORD *)v450;
    *(void **)&v452[1] = v450[2];
  }
  if (SHIBYTE(v449) < 0)
  {
    sub_20E860C04(__src, v448[0], (unint64_t)v448[1]);
  }
  else
  {
    *(_OWORD *)__src = *(_OWORD *)v448;
    __src[2] = v449;
  }
  *(void **)((char *)v455 + 7) = *(void **)((char *)&v450[1] + 7);
  v263 = v450[0];
  v264 = v450[1];
  HIBYTE(v455[0]) = HIBYTE(v450[1]);
  v265 = HIBYTE(v450[2]);
  memset(v450, 0, 24);
  *((_QWORD *)&v456 + 1) = v251;
  v457[0] = v264;
  *(_QWORD *)((char *)v457 + 7) = *(_QWORD *)((char *)v455 + 7);
  *(_QWORD *)((char *)v455 + 7) = 0;
  v455[0] = 0;
  *(_QWORD *)&v456 = v252;
  if (v251)
  {
    v266 = (unint64_t *)(v251 + 8);
    do
      v267 = __ldxr(v266);
    while (__stxr(v267 + 1, v266));
  }
  v268 = operator new();
  v459[0] = v457[0];
  *(_QWORD *)((char *)v459 + 7) = *(_QWORD *)((char *)v457 + 7);
  v457[0] = 0;
  *(_QWORD *)((char *)v457 + 7) = 0;
  v269 = v456;
  v456 = 0uLL;
  *(_BYTE *)(v268 + 8) = 1;
  *(_QWORD *)(v268 + 32) = 0;
  *(_QWORD *)(v268 + 40) = 0;
  *(_QWORD *)v268 = &off_24C9CB6C8;
  *(_QWORD *)(v268 + 16) = &unk_24C9CB740;
  *(_QWORD *)(v268 + 24) = &unk_24C9CB780;
  v270 = v459[0];
  *(_QWORD *)(v268 + 63) = *(_QWORD *)((char *)v459 + 7);
  *(_QWORD *)(v268 + 48) = v263;
  *(_QWORD *)(v268 + 56) = v270;
  *(_BYTE *)(v268 + 71) = v265;
  v459[0] = 0;
  *(_QWORD *)((char *)v459 + 7) = 0;
  *(_OWORD *)(v268 + 72) = v269;
  v458 = 0uLL;
  v271 = (_QWORD *)operator new();
  *v271 = &off_24C9CB858;
  v271[1] = v257;
  v271[2] = v255;
  v453 = 0uLL;
  *(_QWORD *)(v268 + 144) = 0;
  *(_QWORD *)(v268 + 88) = v271;
  *(_QWORD *)(v268 + 96) = v268 + 96;
  *(_QWORD *)(v268 + 104) = v268 + 96;
  *(_QWORD *)(v268 + 112) = 0;
  *(_QWORD *)(v268 + 120) = v268 + 120;
  *(_QWORD *)(v268 + 128) = v268 + 120;
  *(_QWORD *)(v268 + 136) = 0;
  if (!*(_QWORD *)(v268 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v272 = (std::__shared_weak_count *)operator new();
  v272->__shared_owners_ = 0;
  v273 = (unint64_t *)&v272->__shared_owners_;
  v272->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CBCF8;
  v272->__shared_weak_owners_ = 0;
  v272[1].__vftable = (std::__shared_weak_count_vtbl *)v268;
  v274 = *(std::__shared_weak_count **)(v268 + 40);
  if (v274)
  {
    if (v274->__shared_owners_ != -1)
      goto LABEL_432;
    do
      v275 = __ldxr(v273);
    while (__stxr(v275 + 1, v273));
    v276 = (unint64_t *)&v272->__shared_weak_owners_;
    do
      v277 = __ldxr(v276);
    while (__stxr(v277 + 1, v276));
    *(_QWORD *)(v268 + 32) = v268;
    *(_QWORD *)(v268 + 40) = v272;
    std::__shared_weak_count::__release_weak(v274);
  }
  else
  {
    do
      v278 = __ldxr(v273);
    while (__stxr(v278 + 1, v273));
    v279 = (unint64_t *)&v272->__shared_weak_owners_;
    do
      v280 = __ldxr(v279);
    while (__stxr(v280 + 1, v279));
    *(_QWORD *)(v268 + 32) = v268;
    *(_QWORD *)(v268 + 40) = v272;
  }
  do
    v281 = __ldaxr(v273);
  while (__stlxr(v281 - 1, v273));
  if (!v281)
  {
    ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
    std::__shared_weak_count::__release_weak(v272);
  }
LABEL_432:
  v282 = (std::__shared_weak_count *)*((_QWORD *)&v458 + 1);
  if (*((_QWORD *)&v458 + 1))
  {
    v283 = (unint64_t *)(*((_QWORD *)&v458 + 1) + 8);
    do
      v284 = __ldaxr(v283);
    while (__stlxr(v284 - 1, v283));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
    }
  }
  *(_QWORD *)&v458 = v268;
  *((_QWORD *)&v458 + 1) = v272;
  v285 = (std::__shared_weak_count *)*((_QWORD *)&v456 + 1);
  if (*((_QWORD *)&v456 + 1))
  {
    v286 = (unint64_t *)(*((_QWORD *)&v456 + 1) + 8);
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = v454;
  v454 = 0uLL;
  v366[0] = &off_24C9C9B50;
  *(_OWORD *)&v366[1] = v452[0];
  v367 = *(_QWORD *)&v452[1];
  memset(v452, 0, 24);
  v368 = *(_OWORD *)__src;
  v369 = __src[2];
  memset(__src, 0, 24);
  v370 = v288;
  v456 = 0uLL;
  v289 = v458;
  v371 = v458;
  v458 = 0uLL;
  if (*((_QWORD *)&v371 + 1))
  {
    v290 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 16);
    do
      v291 = __ldxr(v290);
    while (__stxr(v291 + 1, v290));
  }
  v372 = &off_24C9B46A0;
  v292 = operator new();
  *(_QWORD *)v292 = &off_24C9CC2D8;
  *(_OWORD *)(v292 + 8) = v289;
  *(_QWORD *)&v373 = v292;
  v294 = *((_QWORD *)&v371 + 1);
  v293 = v371;
  if (!*((_QWORD *)&v371 + 1))
  {
    *((_QWORD *)&v373 + 1) = v371;
    v374 = 0;
    if ((_QWORD)v371)
      v298 = v371 + 16;
    else
      v298 = 0;
    goto LABEL_462;
  }
  v295 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 16);
  do
    v296 = __ldxr(v295);
  while (__stxr(v296 + 1, v295));
  v297 = *((_QWORD *)&v371 + 1);
  *((_QWORD *)&v373 + 1) = v293;
  v374 = v294;
  if ((_QWORD)v371)
    v298 = v371 + 16;
  else
    v298 = 0;
  if (!*((_QWORD *)&v371 + 1))
  {
    v293 = v371;
LABEL_462:
    v301 = 0;
    v375 = &off_24C9CCA38;
    v376 = v298;
    goto LABEL_463;
  }
  v299 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 16);
  do
    v300 = __ldxr(v299);
  while (__stxr(v300 + 1, v299));
  v301 = *((_QWORD *)&v371 + 1);
  v293 = v371;
  v375 = &off_24C9CCA38;
  *(_QWORD *)&v376 = v298;
  *((_QWORD *)&v376 + 1) = v297;
  if (*((_QWORD *)&v371 + 1))
  {
    v302 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 16);
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
  }
LABEL_463:
  if (v293)
    v304 = v293 + 24;
  else
    v304 = 0;
  v377 = &off_24C9B2310;
  *(_QWORD *)&v378 = v304;
  *((_QWORD *)&v378 + 1) = v301;
  if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
  {
    if ((SBYTE7(v452[1]) & 0x80000000) == 0)
      goto LABEL_468;
LABEL_471:
    operator delete(*(void **)&v452[0]);
    v305 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
    if (!*((_QWORD *)&v453 + 1))
      goto LABEL_476;
    goto LABEL_472;
  }
  operator delete(__src[0]);
  if (SBYTE7(v452[1]) < 0)
    goto LABEL_471;
LABEL_468:
  v305 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
  if (!*((_QWORD *)&v453 + 1))
    goto LABEL_476;
LABEL_472:
  v306 = (unint64_t *)&v305->__shared_owners_;
  do
    v307 = __ldaxr(v306);
  while (__stlxr(v307 - 1, v306));
  if (!v307)
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
  }
LABEL_476:
  v308 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (!*((_QWORD *)&v454 + 1))
    goto LABEL_480;
  v309 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
  do
    v310 = __ldaxr(v309);
  while (__stlxr(v310 - 1, v309));
  if (!v310)
  {
    ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
    std::__shared_weak_count::__release_weak(v308);
    if ((SHIBYTE(v449) & 0x80000000) == 0)
    {
LABEL_481:
      if ((SHIBYTE(v450[2]) & 0x80000000) == 0)
        goto LABEL_482;
      goto LABEL_486;
    }
  }
  else
  {
LABEL_480:
    if ((SHIBYTE(v449) & 0x80000000) == 0)
      goto LABEL_481;
  }
  operator delete(v448[0]);
  if ((SHIBYTE(v450[2]) & 0x80000000) == 0)
  {
LABEL_482:
    if (v257)
      goto LABEL_488;
    goto LABEL_487;
  }
LABEL_486:
  operator delete(v450[0]);
  if (v257)
    goto LABEL_488;
LABEL_487:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 542, (uint64_t)"worker", 6, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_488:
  v311 = operator new();
  *(_QWORD *)v311 = &off_24C9C9A58;
  *(_QWORD *)(v311 + 88) = &off_24C9CC5A8;
  *(_QWORD *)(v311 + 168) = &off_24C9C9A88;
  *(_QWORD *)(v311 + 24) = v436;
  v312 = v435;
  v435 = 0uLL;
  v436 = 0;
  *(_QWORD *)(v311 + 48) = v438;
  v313 = v437;
  v437 = 0uLL;
  v438 = 0;
  v314 = v439;
  v439 = 0uLL;
  *(_OWORD *)(v311 + 8) = v312;
  *(_OWORD *)(v311 + 32) = v313;
  v315 = v440;
  v440 = 0uLL;
  *(_OWORD *)(v311 + 344) = *(_OWORD *)&__p[1];
  v316 = v442;
  v317 = v443;
  *((_QWORD *)&v442 + 1) = 0;
  v443 = 0;
  *(_OWORD *)(v311 + 56) = v314;
  *(_OWORD *)(v311 + 72) = v315;
  v318 = v445;
  v319 = v447;
  v447 = 0uLL;
  *(_QWORD *)(v311 + 192) = v418;
  *(_OWORD *)(v311 + 96) = v316;
  v320 = *(_OWORD *)&v417[1];
  v417[1] = 0;
  v417[2] = 0;
  v418 = 0;
  *(_QWORD *)(v311 + 216) = v420;
  *(_OWORD *)(v311 + 128) = v318;
  v321 = v419;
  v419 = 0uLL;
  v420 = 0;
  *(_OWORD *)(v311 + 152) = v319;
  v322 = v421;
  v421 = 0uLL;
  *(_OWORD *)(v311 + 176) = v320;
  v323 = v422;
  v422 = 0uLL;
  *(_QWORD *)(v311 + 256) = &off_24C9B6B38;
  *(_QWORD *)(v311 + 280) = v425;
  *(_OWORD *)(v311 + 200) = v321;
  v324 = v424;
  *((_QWORD *)&v424 + 1) = 0;
  v425 = 0;
  *(_OWORD *)(v311 + 224) = v322;
  *(_OWORD *)(v311 + 240) = v323;
  v325 = v429;
  v429 = 0uLL;
  *(_QWORD *)(v311 + 336) = &off_24C9C9AB8;
  *(_QWORD *)(v311 + 360) = v401;
  *(_QWORD *)(v311 + 112) = v317;
  *(_QWORD *)(v311 + 120) = &off_24C9CCA38;
  *(_QWORD *)&v442 = 0;
  v445 = 0uLL;
  *(_QWORD *)(v311 + 144) = &off_24C9B2310;
  *(_OWORD *)(v311 + 264) = v324;
  *(_QWORD *)(v311 + 288) = &off_24C9CCA38;
  *(_OWORD *)(v311 + 296) = v427;
  *(_QWORD *)&v424 = 0;
  v427 = 0uLL;
  *(_QWORD *)(v311 + 312) = &off_24C9B2310;
  *(_OWORD *)(v311 + 320) = v325;
  __p[1] = 0;
  __p[2] = 0;
  v401 = 0;
  v326 = v402;
  *(_QWORD *)(v311 + 384) = v403;
  *(_OWORD *)(v311 + 368) = v326;
  v402 = 0uLL;
  v403 = 0;
  v327 = v404;
  v404 = 0uLL;
  v328 = v405;
  *(_OWORD *)(v311 + 392) = v327;
  *(_OWORD *)(v311 + 408) = v328;
  v405 = 0uLL;
  *(_QWORD *)(v311 + 424) = &off_24C9CC500;
  *(_OWORD *)(v311 + 432) = v407;
  v329 = v408;
  *((_QWORD *)&v407 + 1) = 0;
  v408 = 0;
  *(_QWORD *)(v311 + 448) = v329;
  *(_QWORD *)(v311 + 456) = &off_24C9CCA38;
  *(_OWORD *)(v311 + 464) = v410;
  *(_QWORD *)&v407 = 0;
  v410 = 0uLL;
  *(_QWORD *)(v311 + 480) = &off_24C9B2310;
  *(_OWORD *)(v311 + 488) = v412;
  v412 = 0uLL;
  *(_QWORD *)(v311 + 504) = &off_24C9C9AE8;
  v330 = *(_OWORD *)&__dst[1];
  *(_QWORD *)(v311 + 528) = v384;
  *(_OWORD *)(v311 + 512) = v330;
  __dst[1] = 0;
  __dst[2] = 0;
  v384 = 0;
  v331 = v385;
  *(_QWORD *)(v311 + 552) = v386;
  *(_OWORD *)(v311 + 536) = v331;
  v385 = 0uLL;
  v386 = 0;
  v332 = v387;
  v387 = 0uLL;
  v333 = v388;
  *(_OWORD *)(v311 + 560) = v332;
  *(_OWORD *)(v311 + 576) = v333;
  v388 = 0uLL;
  *(_QWORD *)(v311 + 592) = &off_24C9C9B18;
  *(_OWORD *)(v311 + 600) = v390;
  *(_QWORD *)(v311 + 616) = v391;
  *((_QWORD *)&v390 + 1) = 0;
  v391 = 0;
  *(_QWORD *)(v311 + 624) = &off_24C9CCA38;
  *(_OWORD *)(v311 + 632) = v393;
  v393 = 0uLL;
  *(_QWORD *)&v390 = 0;
  *(_QWORD *)(v311 + 648) = &off_24C9B2310;
  *(_OWORD *)(v311 + 656) = v395;
  v395 = 0uLL;
  *(_QWORD *)(v311 + 672) = &off_24C9C9B50;
  v334 = *(_OWORD *)&v366[1];
  *(_QWORD *)(v311 + 696) = v367;
  *(_OWORD *)(v311 + 680) = v334;
  v366[1] = 0;
  v366[2] = 0;
  v367 = 0;
  v335 = v368;
  *(_QWORD *)(v311 + 720) = v369;
  *(_OWORD *)(v311 + 704) = v335;
  v368 = 0uLL;
  v369 = 0;
  v336 = v370;
  v370 = 0uLL;
  v337 = v371;
  *(_OWORD *)(v311 + 728) = v336;
  *(_OWORD *)(v311 + 744) = v337;
  v371 = 0uLL;
  *(_QWORD *)(v311 + 760) = &off_24C9B46A0;
  *(_OWORD *)(v311 + 768) = v373;
  *(_QWORD *)(v311 + 784) = v374;
  *((_QWORD *)&v373 + 1) = 0;
  v374 = 0;
  *(_QWORD *)(v311 + 792) = &off_24C9CCA38;
  *(_OWORD *)(v311 + 800) = v376;
  v376 = 0uLL;
  *(_QWORD *)&v373 = 0;
  *(_QWORD *)(v311 + 816) = &off_24C9B2310;
  *(_OWORD *)(v311 + 824) = v378;
  v378 = 0uLL;
  *v364 = v311;
  sub_20EC1C698((uint64_t)v366);
  if (v365)
  {
    v338 = (unint64_t *)&v365->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
      std::__shared_weak_count::__release_weak(v365);
    }
  }
  sub_20EC1C87C((uint64_t)__dst);
  v340 = v380;
  if (v380)
  {
    v341 = (unint64_t *)&v380->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
  v343 = v382;
  if (v382)
  {
    v344 = (unint64_t *)&v382->__shared_owners_;
    do
      v345 = __ldaxr(v344);
    while (__stlxr(v345 - 1, v344));
    if (!v345)
    {
      ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
      std::__shared_weak_count::__release_weak(v343);
    }
  }
  sub_20EC1CA60((uint64_t)__p);
  v346 = v397;
  if (v397)
  {
    v347 = (unint64_t *)&v397->__shared_owners_;
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = v399;
  if (v399)
  {
    v350 = (unint64_t *)&v399->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  sub_20EC1CC44((uint64_t)v417);
  v352 = v414;
  if (v414)
  {
    v353 = (unint64_t *)&v414->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = v416;
  if (v416)
  {
    v356 = (unint64_t *)&v416->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  sub_20EC1CE28((uint64_t)&v434);
  v358 = v431;
  if (v431)
  {
    v359 = (unint64_t *)&v431->__shared_owners_;
    do
      v360 = __ldaxr(v359);
    while (__stlxr(v360 - 1, v359));
    if (!v360)
    {
      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
      std::__shared_weak_count::__release_weak(v358);
    }
  }
  v361 = v433;
  if (v433)
  {
    v362 = (unint64_t *)&v433->__shared_owners_;
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 - 1, v362));
    if (!v363)
    {
      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
      std::__shared_weak_count::__release_weak(v361);
    }
  }
}

void sub_20EC03764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_objecta, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a69;
  void *a71;
  uint64_t v71;

  if (*(char *)(v71 - 233) < 0)
  {
    operator delete(*(void **)(v71 - 256));
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20E86665C(v71 - 224);
    sub_20E86665C(v71 - 208);
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x430]);
  if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_5:
    sub_20E86665C((uint64_t)&a15);
    sub_20E86665C((uint64_t)&a17);
    sub_20EC1C87C((uint64_t)&a45);
    sub_20E86665C((uint64_t)&a41);
    sub_20E86665C((uint64_t)&a43);
    sub_20EC1CA60((uint64_t)&a71);
    sub_20E86665C((uint64_t)&a67);
    sub_20E86665C((uint64_t)&a69);
    sub_20EC1CC44((uint64_t)&STACK[0x2C0]);
    sub_20E86665C((uint64_t)&STACK[0x2A0]);
    sub_20E86665C((uint64_t)&STACK[0x2B0]);
    sub_20EC1CE28((uint64_t)&STACK[0x388]);
    sub_20E86665C((uint64_t)&STACK[0x368]);
    sub_20E86665C((uint64_t)&STACK[0x378]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete((void *)STACK[0x450]);
  goto LABEL_5;
}

void sub_20EC03CEC()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 144);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EC03C10);
}

void sub_20EC03D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;

  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_20E86665C(v73);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x430]);
        sub_20E86665C((uint64_t)&STACK[0x450]);
        JUMPOUT(0x20EC03DF4);
      }
LABEL_4:
      operator delete(__p);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v73);
    sub_20E86665C(v74);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC03D84()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x450]);
  JUMPOUT(0x20EC03DECLL);
}

void sub_20EC03E74()
{
  int v0;
  void *v1;

  sub_20E86665C((uint64_t)&STACK[0x430]);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EC03DF4);
}

void sub_20EC03E90()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x450]);
        sub_20E86665C((uint64_t)&STACK[0x470]);
        JUMPOUT(0x20EC03F80);
      }
LABEL_4:
      operator delete((void *)STACK[0x2C8]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x2E0]);
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC03F10()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x470]);
  JUMPOUT(0x20EC03F78);
}

void sub_20EC04000()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x450]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC03F80);
}

void sub_20EC0401C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C((uint64_t)&STACK[0x470]);
        sub_20E86665C(v3 - 256);
        JUMPOUT(0x20EC04108);
      }
LABEL_4:
      operator delete((void *)STACK[0x390]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v1);
    sub_20E86665C(v2);
    if ((SLOBYTE(STACK[0x3BF]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x3A8]);
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EC04098()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C(v1 - 256);
  JUMPOUT(0x20EC04100);
}

void sub_20EC0419C()
{
  void *v0;
  int v1;

  sub_20E86665C((uint64_t)&STACK[0x470]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x20EC04108);
}

void sub_20EC041BC(uint64_t a1)
{
  sub_20EC1D00C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC041F4(uint64_t a1)
{
  sub_20EC1CE28(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC04218(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC5A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC04258(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC5A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC042A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC042B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CCA38;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC042F0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CCA38;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC04338(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C9B4888;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C9B4888;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC0440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC04438(uint64_t a1)
{
  sub_20EC1CC44(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC0445C(uint64_t a1)
{
  sub_20EC1CA60(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC04480(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC500;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC044C0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC500;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC04510(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC04520(uint64_t a1)
{
  sub_20EC1C87C(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC04544(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C9B18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC04584(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9C9B18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC045D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC045E4(uint64_t a1)
{
  sub_20EC1C698(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC0460C(uint64_t a1)
{
  sub_20EC060C4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC04630(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  _BYTE *v8;
  uint64_t **v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::mutex **v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  __int128 v50;
  _OWORD *v51;
  __int128 v52;
  __int128 *v53;
  uint64_t v54;
  std::__shared_weak_count *v55[2];
  uint64_t v56;
  __int128 __p;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (char *)operator new(0x58uLL);
    *((_QWORD *)v5 + 1) = 0;
    v6 = (unint64_t *)(v5 + 8);
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24C9CC698;
    *((_QWORD *)v5 + 3) = *a2;
    v7 = v5 + 24;
    v8 = v5 + 32;
    if (*((char *)a2 + 31) < 0)
    {
      sub_20E860C04(v8, (void *)a2[1], a2[2]);
      v4 = (uint64_t *)a1[18];
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)(a2 + 1);
      *((_QWORD *)v5 + 6) = a2[3];
    }
    v18 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v5 + 56) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v5 + 72) = v18;
    v61 = v5 + 24;
    v62 = (std::__shared_weak_count *)v5;
    v19 = (unint64_t *)(v5 + 16);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = (_QWORD *)operator new();
    *v21 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v63 = v21;
    *((_QWORD *)&v63 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v22 = v4[4];
    v23 = *v4;
    v24 = (_QWORD *)(*v4 + 16 * v22);
    do
      v25 = __ldxr(v6);
    while (__stxr(v25 + 1, v6));
    *v24 = v7;
    v26 = v23 + 16 * v22;
    v27 = *(std::__shared_weak_count **)(v26 + 8);
    *(_QWORD *)(v26 + 8) = v5;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (v4[1] - *v4) >> 4;
    v31 = v4[5];
    v32 = v4[4] + 1;
    if (v32 >= v30)
      v33 = (v4[1] - *v4) >> 4;
    else
      v33 = 0;
    v4[4] = v32 - v33;
    if (v31 == v30)
    {
      v34 = v4[3] + 1;
      if (v34 < v30)
        v30 = 0;
      v4[3] = v34 - v30;
      v35 = (std::mutex **)v63;
      if (!(_QWORD)v63)
      {
LABEL_36:
        v36 = (uint64_t **)a1[9];
        v63 = 0uLL;
        v37 = (std::__shared_weak_count *)a1[5];
        if (v37)
        {
          v38 = std::__shared_weak_count::lock(v37);
          if (v38)
          {
            v39 = v38;
            v40 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
            *(_QWORD *)&v63 = v40;
            *((_QWORD *)&v63 + 1) = v38;
            v43 = (unint64_t *)&v38->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          else
          {
            v63 = 0uLL;
          }
        }
        v45 = (char *)operator new(0x30uLL);
        *(_QWORD *)v45 = &off_24C9C9D60;
        *(_OWORD *)(v45 + 8) = v63;
        v63 = 0uLL;
        *((_QWORD *)v45 + 3) = v7;
        *((_QWORD *)v45 + 4) = v5;
        v64 = 0;
        v65 = 0;
        v67 = v45;
        sub_210216F3C(*v36, (uint64_t)v66);
        v46 = v67;
        if (v67 == v66)
        {
          v47 = 4;
          v46 = v66;
        }
        else
        {
          if (!v67)
            goto LABEL_50;
          v47 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_50:
        if (v62)
        {
          v48 = &v62->__shared_owners_;
          do
            v49 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v49 - 1, (unint64_t *)v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v31 + 1;
      v35 = (std::mutex **)v63;
      if (!(_QWORD)v63)
        goto LABEL_36;
    }
    std::mutex::unlock(*v35);
    MEMORY[0x212BC6398](v35, 0x20C4093837F09);
    goto LABEL_36;
  }
  v9 = (uint64_t **)a1[9];
  *(_OWORD *)v55 = 0uLL;
  v10 = (std::__shared_weak_count *)a1[5];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = v11;
      v13 = (std::__shared_weak_count *)a1[4];
      v14 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v55[0] = v13;
      v55[1] = v11;
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      *(_OWORD *)v55 = 0uLL;
    }
  }
  v56 = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    sub_20E860C04(&__p, (void *)a2[1], a2[2]);
  }
  else
  {
    __p = *(_OWORD *)(a2 + 1);
    v58 = a2[3];
  }
  v50 = *((_OWORD *)a2 + 3);
  v59 = *((_OWORD *)a2 + 2);
  v60 = v50;
  v65 = 0;
  v51 = operator new(0x58uLL);
  *(_OWORD *)((char *)v51 + 8) = *(_OWORD *)v55;
  v51[2] = __p;
  v52 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)v51 + 56) = *((_OWORD *)a2 + 2);
  *(_QWORD *)v51 = off_24C9C9DE0;
  *((_QWORD *)v51 + 3) = v56;
  *((_QWORD *)v51 + 6) = v58;
  __p = 0uLL;
  v58 = 0;
  *(_OWORD *)((char *)v51 + 72) = v52;
  v65 = v51;
  sub_210216F3C(*v9, (uint64_t)&v63);
  v53 = v65;
  if (v65 == &v63)
  {
    v54 = 4;
    v53 = &v63;
  }
  else
  {
    if (!v65)
      goto LABEL_64;
    v54 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v53 + 8 * v54))(v53);
LABEL_64:
  if (SHIBYTE(v58) < 0)
    operator delete((void *)__p);
}

void sub_20EC04B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC04B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v24;
  char *v26;
  uint64_t v27;

  v26 = a24;
  if (a24 == v24)
  {
    v27 = 4;
    v26 = &a21;
  }
  else
  {
    if (!a24)
    {
      sub_20EC062C4((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
  sub_20EC062C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC04B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v14 = *(_QWORD **)(v12 - 64);
  if (v14 == v11)
  {
    v15 = 4;
    v14 = (_QWORD *)(v12 - 88);
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  sub_20EA02254((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC04BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  std::__shared_weak_count *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC04C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  std::__shared_weak_count *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  MEMORY[0x212BC6398](v12, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v11);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC04C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__shared_weak_count *v19;

  std::__shared_weak_count::__release_weak(v19);
  sub_20E86665C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC04C58(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC04C68(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC04C74(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC04C84(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  char *v11;
  _BYTE *v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::mutex **v40;
  uint64_t **v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 *v73;
  std::string *v74;
  std::runtime_error *exception;
  std::runtime_error *v76;
  std::__shared_weak_count *v77[2];
  uint64_t v78;
  __int128 __p;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::runtime_error v89;
  char *v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  _QWORD *v93;
  __int128 *v94;
  _QWORD v95[3];
  std::string v96;
  std::string *v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v92 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v92 + 1) = 45;
    v72 = (_QWORD *)a1[6];
    v71 = a1 + 6;
    v70 = v72;
    v73 = (__int128 *)*((unsigned __int8 *)v71 + 23);
    if ((char)v73 < 0)
      v73 = (__int128 *)v71[1];
    else
      v70 = v71;
    v93 = v70;
    v94 = v73;
    sub_20E8778D4((uint64_t)&v92, (uint64_t)v95, 0, 0, &v96);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &v96;
    else
      v74 = (std::string *)v96.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v89, (const char *)v74);
    v89.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v76 = std::runtime_error::runtime_error(exception, &v89);
    v76->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v76, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v13 = (uint64_t **)a1[9];
    *(_OWORD *)v77 = 0uLL;
    v14 = (std::__shared_weak_count *)a1[5];
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      if (!v15)
      {
        *(_OWORD *)v77 = 0uLL;
        v78 = *a2;
        if ((*((char *)a2 + 31) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_71;
      }
      v16 = v15;
      v17 = (std::__shared_weak_count *)a1[4];
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
      v77[0] = v17;
      v77[1] = v15;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v16);
        v78 = *a2;
        if ((*((char *)a2 + 31) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_71;
      }
    }
    v78 = *a2;
    if ((*((char *)a2 + 31) & 0x80000000) == 0)
    {
LABEL_19:
      __p = *(_OWORD *)(a2 + 1);
      v80 = a2[3];
      goto LABEL_72;
    }
LABEL_71:
    sub_20E860C04(&__p, (void *)a2[1], a2[2]);
LABEL_72:
    v61 = *((_OWORD *)a2 + 3);
    v81 = *((_OWORD *)a2 + 2);
    v82 = v61;
    v62 = (std::__shared_weak_count *)operator new(0x20uLL);
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9E60;
    v62[1].__vftable = *a3;
    *a3 = 0;
    v83 = &v62[1].__vftable;
    v84 = v62;
    v94 = 0;
    v63 = operator new(0x68uLL);
    *(_OWORD *)((char *)v63 + 8) = *(_OWORD *)v77;
    v63[2] = __p;
    v64 = v82;
    *(_OWORD *)((char *)v63 + 56) = v81;
    *(_QWORD *)v63 = off_24C9C9F30;
    *((_QWORD *)v63 + 3) = v78;
    *((_QWORD *)v63 + 6) = v80;
    __p = 0uLL;
    v80 = 0;
    *(_OWORD *)((char *)v63 + 72) = v64;
    *((_QWORD *)v63 + 11) = v62 + 1;
    *((_QWORD *)v63 + 12) = v62;
    v83 = 0;
    v84 = 0;
    v94 = v63;
    sub_210216F3C(*v13, (uint64_t)&v92);
    v65 = v94;
    if (v94 == &v92)
    {
      v66 = 4;
      v65 = &v92;
    }
    else
    {
      if (!v94)
      {
LABEL_77:
        v67 = v84;
        if (!v84)
          goto LABEL_81;
        v68 = (unint64_t *)&v84->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
          if ((SHIBYTE(v80) & 0x80000000) == 0)
            return;
        }
        else
        {
LABEL_81:
          if ((SHIBYTE(v80) & 0x80000000) == 0)
            return;
        }
        operator delete((void *)__p);
        return;
      }
      v66 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v65 + 8 * v66))(v65);
    goto LABEL_77;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9E60;
  v6[1].__vftable = *a3;
  v87 = v6 + 1;
  v88 = v6;
  v85 = v6 + 1;
  v86 = v6;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (char *)operator new(0x58uLL);
  *((_QWORD *)v9 + 1) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24C9CC698;
  *((_QWORD *)v9 + 3) = *a2;
  v11 = v9 + 24;
  v12 = v9 + 32;
  if (*((char *)a2 + 31) < 0)
  {
    sub_20E860C04(v12, (void *)a2[1], a2[2]);
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)(a2 + 1);
    *((_QWORD *)v9 + 6) = a2[3];
  }
  v22 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v9 + 56) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v9 + 72) = v22;
  v90 = v9 + 24;
  v91 = (std::__shared_weak_count *)v9;
  v23 = (unint64_t *)(v9 + 16);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = (uint64_t *)a1[18];
  v26 = (_QWORD *)operator new();
  *v26 = v25 + 7;
  std::mutex::lock((std::mutex *)(v25 + 7));
  *(_QWORD *)&v92 = v26;
  *((_QWORD *)&v92 + 1) = v25;
  if (!*((_BYTE *)v25 + 48))
    sub_20E866B34();
  v27 = v25[4];
  v28 = *v25;
  v29 = (_QWORD *)(*v25 + 16 * v27);
  do
    v30 = __ldxr(v10);
  while (__stxr(v30 + 1, v10));
  *v29 = v11;
  v31 = v28 + 16 * v27;
  v32 = *(std::__shared_weak_count **)(v31 + 8);
  *(_QWORD *)(v31 + 8) = v9;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (v25[1] - *v25) >> 4;
  v36 = v25[5];
  v37 = v25[4] + 1;
  if (v37 >= v35)
    v38 = (v25[1] - *v25) >> 4;
  else
    v38 = 0;
  v25[4] = v37 - v38;
  if (v36 != v35)
  {
    v25[5] = v36 + 1;
    v40 = (std::mutex **)v92;
    if (!(_QWORD)v92)
      goto LABEL_41;
    goto LABEL_40;
  }
  v39 = v25[3] + 1;
  if (v39 < v35)
    v35 = 0;
  v25[3] = v39 - v35;
  v40 = (std::mutex **)v92;
  if ((_QWORD)v92)
  {
LABEL_40:
    std::mutex::unlock(*v40);
    MEMORY[0x212BC6398](v40, 0x20C4093837F09);
  }
LABEL_41:
  v41 = (uint64_t **)a1[9];
  v92 = 0uLL;
  v42 = (std::__shared_weak_count *)a1[5];
  if (v42)
  {
    v43 = std::__shared_weak_count::lock(v42);
    if (v43)
    {
      v44 = v43;
      v45 = a1[4];
      v46 = (unint64_t *)&v43->__shared_weak_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      *(_QWORD *)&v92 = v45;
      *((_QWORD *)&v92 + 1) = v43;
      v48 = (unint64_t *)&v43->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      v92 = 0uLL;
    }
  }
  v50 = v85;
  v51 = v86;
  v85 = 0;
  v86 = 0;
  v52 = (char *)operator new(0x38uLL);
  *(_QWORD *)v52 = &off_24C9C9EB0;
  *(_OWORD *)(v52 + 8) = v92;
  v92 = 0uLL;
  *((_QWORD *)v52 + 3) = v11;
  *((_QWORD *)v52 + 4) = v9;
  v93 = 0;
  v94 = 0;
  *((_QWORD *)v52 + 5) = v50;
  *((_QWORD *)v52 + 6) = v51;
  v95[0] = 0;
  v95[1] = 0;
  v97 = (std::string *)v52;
  sub_210216F3C(*v41, (uint64_t)&v96);
  v53 = v97;
  if (v97 == &v96)
  {
    v54 = 4;
    v53 = &v96;
  }
  else
  {
    if (!v97)
      goto LABEL_55;
    v54 = 5;
  }
  (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_55:
  if (v91)
  {
    v55 = &v91->__shared_owners_;
    do
      v56 = __ldaxr((unint64_t *)v55);
    while (__stlxr(v56 - 1, (unint64_t *)v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v86)
  {
    v57 = &v86->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (v88)
  {
    v59 = &v88->__shared_owners_;
    do
      v60 = __ldaxr((unint64_t *)v59);
    while (__stlxr(v60 - 1, (unint64_t *)v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
}

void sub_20EC053CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC053D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  std::__shared_weak_count *v24;
  void *v26;

  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20EC053FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26,std::exception_ptr a27)
{
  std::__assoc_sub_state **v27;
  uint64_t v28;
  std::__assoc_sub_state *v29;
  std::exception_ptr v30;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v29 = *v27;
    if (*v27)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v28 - 160), &a27);
      v30.__ptr_ = (void *)(v28 - 160);
      std::__assoc_sub_state::set_exception(v29, v30);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v28 - 160));
      std::exception_ptr::~exception_ptr(&a27);
      std::runtime_error::~runtime_error(&a26);
      if (*(char *)(v28 - 81) < 0)
        operator delete(*(void **)(v28 - 104));
      JUMPOUT(0x20EC05288);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(a1);
}

void sub_20EC05470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::runtime_error a26,std::exception_ptr a27)
{
  uint64_t v27;

  std::exception_ptr::~exception_ptr(&a27);
  std::runtime_error::~runtime_error(&a26);
  if (*(char *)(v27 - 81) < 0)
  {
    operator delete(*(void **)(v27 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC054C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_20EC073AC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_20EC073AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC05518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EC05544);
}

void sub_20EC0554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 80);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 104);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v30 - 160));
  sub_20E86665C((uint64_t)&a29);
  sub_20E86665C((uint64_t)&a22);
  sub_20E86665C((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20EC055EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  uint64_t v17;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC05608(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC0567C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9C9FB0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC057AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC05820(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CA030;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC05930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC05994@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CA0B0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC05BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC05C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CA130;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC05E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC05F54(uint64_t a1)
{
  return sub_20EC060C4(a1 - 16);
}

void sub_20EC05F5C(uint64_t a1)
{
  sub_20EC060C4(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC05F84(uint64_t a1, uint64_t a2)
{
  return sub_20EC0567C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC05F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC05994((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC05F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC05C74((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC05F9C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC05FA4(uint64_t a1)
{
  return sub_20EC060C4(a1 - 24);
}

void sub_20EC05FAC(uint64_t a1)
{
  sub_20EC060C4(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC05FD4(uint64_t a1)
{
  return sub_20EC05820((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC05FDC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC05FE4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC0604C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC060B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC060C4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9C9B80;
  *(_QWORD *)(a1 + 16) = &unk_24C9C9BF8;
  *(_QWORD *)(a1 + 24) = &unk_24C9C9C38;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EC062C4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0630C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CC698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC0631C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CC698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC0634C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_QWORD *sub_20EC06364(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C9D60;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC063A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C9D60;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC063FC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C9D60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC0646C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C9D60;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC064BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC064F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC06530(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC06854((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC06E6C(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC066F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC06E6C(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC067DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispat"
                     "chIZNKSG_4SendERKS6_EUlT_T0_E_EEvSJ_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25E"
                                "nqueueMessageAndDispatchIZNKSG_4SendERKS6_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKS6_EUlT_T0_E_EEvSJ_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKS6_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC06848()
{
  return &unk_24C9C9DC0;
}

void sub_20EC06854(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::exception_ptr v17;
  void *__p;
  char *v19;
  char v20;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 251, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  if (v20)
  {
    v7 = a1 + 1;
    for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
      (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &__p);
  }
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v17), v10))
    {
      sub_20E96CE78(2u);
    }
    *(_BYTE *)(v9 + 144) = 0;
    *(_BYTE *)(v9 + 168) = 0;
    if (v20)
    {
      *(_QWORD *)(v9 + 144) = 0;
      *(_QWORD *)(v9 + 152) = 0;
      *(_QWORD *)(v9 + 160) = 0;
      sub_20EC06C80((_QWORD *)(v9 + 144), (uint64_t)__p, (uint64_t)v19, (v19 - (_BYTE *)__p) >> 4);
      *(_BYTE *)(v9 + 168) = 1;
    }
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  if (v20)
  {
    v11 = (char *)__p;
    if (__p)
    {
      v12 = v19;
      v13 = __p;
      if (v19 != __p)
      {
        do
        {
          v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v12 -= 16;
        }
        while (v12 != v11);
        v13 = __p;
      }
      v19 = v11;
      operator delete(v13);
    }
  }
}

void sub_20EC06A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char *a18)
{
  std::mutex *v18;
  void **v19;
  uint64_t v20;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = v20;
  if (*(_BYTE *)(v20 + 168))
  {
    v23 = (char *)*v19;
    if (*v19)
    {
      v24 = *(char **)(v20 + 152);
      v25 = *v19;
      if (v24 != v23)
      {
        do
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
          if (v26)
          {
            p_shared_owners = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v24 -= 16;
        }
        while (v24 != v23);
        v25 = *v19;
      }
      *(_QWORD *)(v33 + 152) = v23;
      operator delete(v25);
    }
  }
  std::mutex::unlock(v18);
  sub_20EC06BE0(&a18);
  if (a2 == 1)
  {
    v29 = (uint64_t *)__cxa_begin_catch(a1);
    v30 = *v29;
    a11 = *(_QWORD *)(*(_QWORD *)(*v29 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v30 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v31 = (uint64_t *)&a12;
    else
      v31 = a12;
    if ((a17 & 0x80u) == 0)
      v32 = a17;
    else
      v32 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v31, v32, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC06BB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC06BD4);
}

char **sub_20EC06BE0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_20EC06C80(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20E867F44();
    result = operator new(16 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EA5ABC4(&v8[v9 / 8], a2 + v9);
        v9 += 16;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20EC06D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20EC06DA4(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC06D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v12)
  {
    do
    {
      v14 = *(std::__shared_weak_count **)(v11 - 8);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v11 -= 16;
    }
    while (v11 != v10);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20EC06DA4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20EC06DA4(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20EC06E6C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC06F58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC06EB4);
}

uint64_t sub_20EC06F94(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_24C9C9DE0;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC06FE8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_24C9C9DE0;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      goto LABEL_6;
  }
  std::__shared_weak_count::__release_weak(v2);
LABEL_6:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0704C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;

  v2 = operator new(0x58uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C9C9DE0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  v8 = v2 + 4;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20E860C04(v8, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 32);
    v3[6] = *(_QWORD *)(a1 + 48);
  }
  *(_OWORD *)(v3 + 7) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 9) = *(_OWORD *)(a1 + 72);
  return v3;
}

void sub_20EC070E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20EC07108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_24C9C9DE0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  v8 = (_BYTE *)(a2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20E860C04(v8, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)v8 = v9;
  }
  result = *(__n128 *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(__n128 *)(a2 + 56) = result;
  return result;
}

void sub_20EC07198(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC071B0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20EC071F8(void **__p)
{
  std::__shared_weak_count *v2;

  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:
  operator delete(__p);
}

void sub_20EC07240(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC06854((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC06E6C(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC072E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC06E6C(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC07334(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC073A0()
{
  return &unk_24C9C9E40;
}

uint64_t sub_20EC073AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    operator delete(*(void **)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v5)
      return a1;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_10;
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC07434(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC07444(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C9E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC07474(uint64_t a1)
{
  return sub_20EC06E6C((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC07480(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C9EB0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC07508(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9C9EB0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC075A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9C9EB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC07630(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9C9EB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC076A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC07720(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC0779C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC06854(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC06E6C((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC07A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC07AA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC078B0);
    JUMPOUT(0x20EC07880);
  }
  sub_20E96CE78(3u);
}

void sub_20EC07B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC07B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC06E6C(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC07C18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispat"
                     "chIZNKSG_7ProcessERKS6_NS7_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25E"
                                "nqueueMessageAndDispatchIZNKSG_7ProcessERKS6_NS7_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKS6_NS7_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKS6_NS7_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC07C84()
{
  return &unk_24C9C9F10;
}

uint64_t sub_20EC07C90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24C9C9F30;
  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    operator delete(*(void **)(a1 + 32));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return a1;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_10;
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC07D24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_24C9C9F30;
  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_11;
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
LABEL_11:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC07DC8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = operator new(0x68uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C9C9F30;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  v8 = v2 + 4;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20E860C04(v8, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)(a1 + 32);
    v3[6] = *(_QWORD *)(a1 + 48);
  }
  *(_OWORD *)(v3 + 7) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 9) = *(_OWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 96);
  v3[11] = *(_QWORD *)(a1 + 88);
  v3[12] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return v3;
}

void sub_20EC07E84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20EC07EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_24C9C9F30;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  result = (_BYTE *)(a2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)result = v9;
  }
  v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v10;
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 96) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

void sub_20EC07F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC07F6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_6:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return;
      goto LABEL_7;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC07FF4(char *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 12);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((__p[55] & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    operator delete(*((void **)__p + 4));
    v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (__p[55] < 0)
    goto LABEL_10;
LABEL_6:
  v5 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v5)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  operator delete(__p);
}

void sub_20EC0807C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[11];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC06854((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC06E6C((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC0818C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC08204(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC08238);
  JUMPOUT(0x20EC08268);
}

uint64_t sub_20EC08270(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE7ProcessERKS6_NS7_7promiseISF_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE7Pr"
                                "ocessERKS6_NS7_7promiseISF_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE7ProcessERKS6_NS7_7promiseISF_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE7ProcessERKS6_NS7_7promiseISF_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC082DC()
{
  return &unk_24C9C9F90;
}

_QWORD *sub_20EC082E8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C9FB0;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC08340(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9C9FB0;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC083A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9C9FB0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC08420(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC08440(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9C9FB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC084A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC084C0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC08510(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC0855C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC08610(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0864C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__"
                     "16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationSt"
                                "atusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE9Sub"
                                "scribeENS1_12ChannelInputISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC086B8()
{
  return &unk_24C9CA010;
}

_QWORD *sub_20EC086C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA030;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC086FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA030;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC08744(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CA030;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC08794(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CA030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC087C4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC087D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC08800(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC08894(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC088D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__"
                     "16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15AddErrorHandlerENS1_12Ch"
                     "annelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationSt"
                                "atusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15Ad"
                                "dErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0893C()
{
  return &unk_24C9CA090;
}

_QWORD *sub_20EC08948(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA0B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC08980(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA0B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC089C8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA0B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC08A20(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA0B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC08A58(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC08A68(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC08A94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC08C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC08C80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE16O"
                                "utputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC08CEC()
{
  return &unk_24C9CA110;
}

_QWORD *sub_20EC08CF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA130;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC08D30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA130;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC08D78(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA130;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC08DD0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA130;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC08E08(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC08E18(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC08E44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC08EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC08F48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3_"
                     "_16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationS"
                                "tatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15E"
                                "rrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio17data_verification22DataVerificationStatusENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvNS7_8optionalISD_EELb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC08FB4()
{
  return &unk_24C9CA190;
}

void sub_20EC08FC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC08FE8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC09000(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio17data_verification22DataVerif"
                     "icationStatusENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvNS_8optionalISE_EELb0EEEE27__shared"
                     "_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio17data_verification"
                                "22DataVerificationStatusENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvNS_8optionalI"
                                "SE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio17data_verification22DataVerificationStatusENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvNS_8optionalISE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio17data_verification22DataVerificationStatusENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvNS_8optionalISE_EELb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC09070(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0909C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC090D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CC6E8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC09140(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC091D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC091E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC09274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC09288(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC0934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC09360(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC09424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC09438(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC094DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC094F4(uint64_t a1)
{
  sub_20EC0B098(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC09518(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count **v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::mutex **v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 *v51;
  uint64_t v52;
  std::__shared_weak_count *v53[2];
  _BYTE v54[40];
  unsigned int v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59;
  __int128 *v60;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x48uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA3F0;
    LOBYTE(v5[1].__vftable) = 0;
    v7 = v5 + 1;
    LODWORD(v5[2].__shared_weak_owners_) = -1;
    v8 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(_BYTE *, std::__shared_weak_count *, uint64_t))*(&off_24C9CA4C8 + v8))(v61, v7, a2);
      LODWORD(v5[2].__shared_weak_owners_) = v8;
      v4 = (uint64_t *)a1[18];
    }
    v56 = v5 + 1;
    v57 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v11 = (_QWORD *)operator new();
    *v11 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v58 = v11;
    *((_QWORD *)&v58 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v12 = v4[4];
    v13 = *v4;
    v14 = (std::__shared_weak_count **)(*v4 + 16 * v12);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *v14 = v7;
    v16 = v13 + 16 * v12;
    v17 = *(std::__shared_weak_count **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v5;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (v4[1] - *v4) >> 4;
    v21 = v4[5];
    v22 = v4[4] + 1;
    if (v22 >= v20)
      v23 = (v4[1] - *v4) >> 4;
    else
      v23 = 0;
    v4[4] = v22 - v23;
    if (v21 == v20)
    {
      v24 = v4[3] + 1;
      if (v24 < v20)
        v20 = 0;
      v4[3] = v24 - v20;
      v25 = (std::mutex **)v58;
      if (!(_QWORD)v58)
      {
LABEL_35:
        v35 = (uint64_t **)a1[9];
        v58 = 0uLL;
        v36 = (std::__shared_weak_count *)a1[5];
        if (v36)
        {
          v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            v38 = v37;
            v39 = a1[4];
            v40 = (unint64_t *)&v37->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            *(_QWORD *)&v58 = v39;
            *((_QWORD *)&v58 + 1) = v37;
            v42 = (unint64_t *)&v37->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          else
          {
            v58 = 0uLL;
          }
        }
        v62 = 0;
        v44 = (char *)operator new(0x30uLL);
        *(_QWORD *)v44 = &off_24C9CA458;
        *(_OWORD *)(v44 + 8) = v58;
        v58 = 0uLL;
        *((_QWORD *)v44 + 3) = v7;
        *((_QWORD *)v44 + 4) = v5;
        v59 = 0;
        v60 = 0;
        v62 = v44;
        sub_210216F3C(*v35, (uint64_t)v61);
        v45 = v62;
        if (v62 == v61)
        {
          v46 = 4;
          v45 = v61;
        }
        else
        {
          if (!v62)
            goto LABEL_49;
          v46 = 5;
        }
        (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_49:
        if (v57)
        {
          v47 = &v57->__shared_owners_;
          do
            v48 = __ldaxr((unint64_t *)v47);
          while (__stlxr(v48 - 1, (unint64_t *)v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v21 + 1;
      v25 = (std::mutex **)v58;
      if (!(_QWORD)v58)
        goto LABEL_35;
    }
    std::mutex::unlock(*v25);
    MEMORY[0x212BC6398](v25, 0x20C4093837F09);
    goto LABEL_35;
  }
  v26 = (uint64_t **)a1[9];
  *(_OWORD *)v53 = 0uLL;
  v27 = (std::__shared_weak_count *)a1[5];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      v29 = v28;
      v30 = (std::__shared_weak_count *)a1[4];
      v31 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v53[0] = v30;
      v53[1] = v28;
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      *(_OWORD *)v53 = 0uLL;
    }
  }
  v54[0] = 0;
  v55 = -1;
  v49 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v49 != -1)
  {
    ((void (*)(std::__shared_weak_count **, _BYTE *, uint64_t))*(&off_24C9CA4C8 + v49))(&v56, v54, a2);
    v55 = v49;
  }
  v60 = 0;
  v50 = (char *)operator new(0x48uLL);
  *(_QWORD *)v50 = off_24C9CA4F0;
  *(_OWORD *)(v50 + 8) = *(_OWORD *)v53;
  v50[24] = 0;
  *((_DWORD *)v50 + 16) = -1;
  if ((_DWORD)v49 != -1)
  {
    ((void (*)(_BYTE *, char *, _BYTE *))*(&off_24C9CA550 + v49))(v61, v50 + 24, v54);
    *((_DWORD *)v50 + 16) = v49;
  }
  v60 = (__int128 *)v50;
  sub_210216F3C(*v26, (uint64_t)&v58);
  v51 = v60;
  if (v60 == &v58)
  {
    v52 = 4;
    v51 = &v58;
    goto LABEL_63;
  }
  if (v60)
  {
    v52 = 5;
LABEL_63:
    (*(void (**)(__int128 *))(*(_QWORD *)v51 + 8 * v52))(v51);
  }
  if (v55 != -1)
    ((void (*)(_BYTE *, _BYTE *))*(&off_24C9CA430 + v55))(v61, v54);
  v55 = -1;
}

void sub_20EC09A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20EC09B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v12 = *(_QWORD **)(v10 - 80);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 104);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  sub_20EA02254((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC09B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v9);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC09B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  MEMORY[0x212BC6398](v10, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v9);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC09BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__shared_weak_count *v17;

  std::__shared_weak_count::__release_weak(v17);
  sub_20E86665C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC09BDC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC09BEC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC09BF8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC09C08(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count **v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::mutex **v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t **v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  char *v51;
  std::string *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  char *v63;
  __int128 *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  __int128 *v73;
  std::string *v74;
  std::runtime_error *exception;
  std::runtime_error *v76;
  std::__shared_weak_count *v77[2];
  _BYTE v78[40];
  unsigned int v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::runtime_error v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  _QWORD *v90;
  __int128 *v91;
  _QWORD v92[3];
  std::string v93;
  std::string *v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v89 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v89 + 1) = 45;
    v72 = (_QWORD *)a1[6];
    v71 = a1 + 6;
    v70 = v72;
    v73 = (__int128 *)*((unsigned __int8 *)v71 + 23);
    if ((char)v73 < 0)
      v73 = (__int128 *)v71[1];
    else
      v70 = v71;
    v90 = v70;
    v91 = v73;
    sub_20E8778D4((uint64_t)&v89, (uint64_t)v92, 0, 0, &v93);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &v93;
    else
      v74 = (std::string *)v93.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v86, (const char *)v74);
    v86.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v76 = std::runtime_error::runtime_error(exception, &v86);
    v76->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v76, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v31 = (uint64_t **)a1[9];
    *(_OWORD *)v77 = 0uLL;
    v32 = (std::__shared_weak_count *)a1[5];
    if (v32)
    {
      v33 = std::__shared_weak_count::lock(v32);
      if (v33)
      {
        v34 = v33;
        v35 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
        do
          v37 = __ldxr(p_shared_weak_owners);
        while (__stxr(v37 + 1, p_shared_weak_owners));
        v77[0] = v35;
        v77[1] = v33;
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      else
      {
        *(_OWORD *)v77 = 0uLL;
      }
    }
    v78[0] = 0;
    v79 = -1;
    v60 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v60 != -1)
    {
      ((void (*)(std::__shared_weak_count **, _BYTE *, uint64_t))*(&off_24C9CA4C8 + v60))(&v87, v78, a2);
      v79 = v60;
    }
    v61 = (std::__shared_weak_count *)operator new(0x20uLL);
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
    v61[1].__vftable = *a3;
    v62 = &v61[1].__vftable;
    *a3 = 0;
    v80 = &v61[1].__vftable;
    v81 = v61;
    v91 = 0;
    v63 = (char *)operator new(0x58uLL);
    *(_QWORD *)v63 = off_24C9CA608;
    *(_OWORD *)(v63 + 8) = *(_OWORD *)v77;
    v63[24] = 0;
    *((_DWORD *)v63 + 16) = -1;
    if ((_DWORD)v60 != -1)
    {
      ((void (*)(std::string *, char *, _BYTE *))*(&off_24C9CA550 + v60))(&v93, v63 + 24, v78);
      *((_DWORD *)v63 + 16) = v60;
      v62 = v80;
      v61 = v81;
    }
    *((_QWORD *)v63 + 9) = v62;
    *((_QWORD *)v63 + 10) = v61;
    v80 = 0;
    v81 = 0;
    v91 = (__int128 *)v63;
    sub_210216F3C(*v31, (uint64_t)&v89);
    v64 = v91;
    if (v91 == &v89)
    {
      v65 = 4;
      v64 = &v89;
    }
    else
    {
      if (!v91)
      {
LABEL_78:
        v66 = v81;
        if (!v81)
          goto LABEL_82;
        v67 = (unint64_t *)&v81->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
          v69 = v79;
          if (v79 == -1)
            goto LABEL_84;
        }
        else
        {
LABEL_82:
          v69 = v79;
          if (v79 == -1)
          {
LABEL_84:
            v79 = -1;
            return;
          }
        }
        ((void (*)(std::string *, _BYTE *))*(&off_24C9CA430 + v69))(&v93, v78);
        goto LABEL_84;
      }
      v65 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v64 + 8 * v65))(v64);
    goto LABEL_78;
  }
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
  v6[1].__vftable = *a3;
  v84 = v6 + 1;
  v85 = v6;
  v82 = v6 + 1;
  v83 = v6;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = (std::__shared_weak_count *)operator new(0x48uLL);
  v9->__shared_owners_ = 0;
  v10 = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA3F0;
  LOBYTE(v9[1].__vftable) = 0;
  v11 = v9 + 1;
  LODWORD(v9[2].__shared_weak_owners_) = -1;
  v12 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(std::string *, std::__shared_weak_count *, uint64_t))*(&off_24C9CA4C8 + v12))(&v93, v11, a2);
    LODWORD(v9[2].__shared_weak_owners_) = v12;
  }
  v87 = v9 + 1;
  v88 = v9;
  v13 = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = (uint64_t *)a1[18];
  v16 = (_QWORD *)operator new();
  *v16 = v15 + 7;
  std::mutex::lock((std::mutex *)(v15 + 7));
  *(_QWORD *)&v89 = v16;
  *((_QWORD *)&v89 + 1) = v15;
  if (!*((_BYTE *)v15 + 48))
    sub_20E866B34();
  v17 = v15[4];
  v18 = *v15;
  v19 = (std::__shared_weak_count **)(*v15 + 16 * v17);
  do
    v20 = __ldxr(v10);
  while (__stxr(v20 + 1, v10));
  *v19 = v11;
  v21 = v18 + 16 * v17;
  v22 = *(std::__shared_weak_count **)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v9;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (v15[1] - *v15) >> 4;
  v26 = v15[5];
  v27 = v15[4] + 1;
  if (v27 >= v25)
    v28 = (v15[1] - *v15) >> 4;
  else
    v28 = 0;
  v15[4] = v27 - v28;
  if (v26 != v25)
  {
    v15[5] = v26 + 1;
    v30 = (std::mutex **)v89;
    if (!(_QWORD)v89)
      goto LABEL_39;
    goto LABEL_38;
  }
  v29 = v15[3] + 1;
  if (v29 < v25)
    v25 = 0;
  v15[3] = v29 - v25;
  v30 = (std::mutex **)v89;
  if ((_QWORD)v89)
  {
LABEL_38:
    std::mutex::unlock(*v30);
    MEMORY[0x212BC6398](v30, 0x20C4093837F09);
  }
LABEL_39:
  v40 = (uint64_t **)a1[9];
  v89 = 0uLL;
  v41 = (std::__shared_weak_count *)a1[5];
  if (v41)
  {
    v42 = std::__shared_weak_count::lock(v41);
    if (v42)
    {
      v43 = v42;
      v44 = a1[4];
      v45 = (unint64_t *)&v42->__shared_weak_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      *(_QWORD *)&v89 = v44;
      *((_QWORD *)&v89 + 1) = v42;
      v47 = (unint64_t *)&v42->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    else
    {
      v89 = 0uLL;
    }
  }
  v49 = v82;
  v50 = v83;
  v82 = 0;
  v83 = 0;
  v94 = 0;
  v51 = (char *)operator new(0x38uLL);
  *(_QWORD *)v51 = &off_24C9CA588;
  *(_OWORD *)(v51 + 8) = v89;
  v89 = 0uLL;
  *((_QWORD *)v51 + 3) = v11;
  *((_QWORD *)v51 + 4) = v9;
  v90 = 0;
  v91 = 0;
  *((_QWORD *)v51 + 5) = v49;
  *((_QWORD *)v51 + 6) = v50;
  v92[0] = 0;
  v92[1] = 0;
  v94 = (std::string *)v51;
  sub_210216F3C(*v40, (uint64_t)&v93);
  v52 = v94;
  if (v94 == &v93)
  {
    v53 = 4;
    v52 = &v93;
  }
  else
  {
    if (!v94)
      goto LABEL_53;
    v53 = 5;
  }
  (*(void (**)(void))(v52->__r_.__value_.__r.__words[0] + 8 * v53))();
LABEL_53:
  if (v88)
  {
    v54 = &v88->__shared_owners_;
    do
      v55 = __ldaxr((unint64_t *)v54);
    while (__stlxr(v55 - 1, (unint64_t *)v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v83)
  {
    v56 = &v83->__shared_owners_;
    do
      v57 = __ldaxr((unint64_t *)v56);
    while (__stlxr(v57 - 1, (unint64_t *)v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v85)
  {
    v58 = &v85->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_20EC0A348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  uint64_t v16;
  uint64_t v17;

  if (a16 != -1)
    ((void (*)(uint64_t, uint64_t))*(&off_24C9CA430 + a16))(v17 - 104, v16);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EC0A518);
}

void sub_20EC0A380(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  std::__assoc_sub_state **v28;
  uint64_t v29;
  std::__assoc_sub_state *v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v30 = *v28;
    if (*v28)
    {
      std::exception_ptr::exception_ptr(&a28, &a25);
      v31.__ptr_ = &a28;
      std::__assoc_sub_state::set_exception(v30, v31);
      std::exception_ptr::~exception_ptr(&a28);
      std::exception_ptr::~exception_ptr(&a25);
      std::runtime_error::~runtime_error(&a24);
      if (*(char *)(v29 - 81) < 0)
        operator delete(*(void **)(v29 - 104));
      JUMPOUT(0x20EC0A22CLL);
    }
    sub_20E96CE78(3u);
  }
  JUMPOUT(0x20EC0A518);
}

void sub_20EC0A3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::runtime_error a24,std::exception_ptr a25,uint64_t a26,uint64_t a27,std::exception_ptr a28)
{
  uint64_t v28;

  std::exception_ptr::~exception_ptr(&a25);
  std::runtime_error::~runtime_error(&a24);
  if (*(char *)(v28 - 81) < 0)
  {
    operator delete(*(void **)(v28 - 104));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EC0A518);
}

void sub_20EC0A43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  char *v34;
  uint64_t v35;

  v34 = a32;
  if (a32 == v32)
  {
    v35 = 4;
    v34 = &a29;
  }
  else
  {
    if (!a32)
    {
      sub_20EC0C6B0((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v35 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
  sub_20EC0C6B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0A490()
{
  uint64_t v0;

  sub_20EC0B394(v0);
  JUMPOUT(0x20EC0A49CLL);
}

void sub_20EC0A4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void *v33;

  v32 = *(unsigned int *)(v29 + 64);
  if ((_DWORD)v32 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v32))(&a29, v30);
  *(_DWORD *)(v29 + 64) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v29);
  operator delete(v33);
  sub_20E86665C((uint64_t)&a20);
  sub_20E86665C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20EC0A504(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EC0A520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 80);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 104);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  sub_20EA031A8(&a29);
  sub_20E86665C((uint64_t)&a27);
  sub_20E86665C((uint64_t)&a20);
  sub_20E86665C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20EC0A5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC0A5DC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC0A650(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CA688;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC0A780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC0A7F4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CA708;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC0A904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC0A968@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CA788;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC0AB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC0AC48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CA808;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC0AE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0AF28(uint64_t a1)
{
  return sub_20EC0B098(a1 - 16);
}

void sub_20EC0AF30(uint64_t a1)
{
  sub_20EC0B098(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0AF58(uint64_t a1, uint64_t a2)
{
  return sub_20EC0A650((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC0AF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC0A968((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC0AF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC0AC48((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC0AF70(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC0AF78(uint64_t a1)
{
  return sub_20EC0B098(a1 - 24);
}

void sub_20EC0AF80(uint64_t a1)
{
  sub_20EC0B098(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0AFA8(uint64_t a1)
{
  return sub_20EC0A7F4((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC0AFB0(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC0AFB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC0B020(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC0B088(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC0B098(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CA200;
  *(_QWORD *)(a1 + 16) = &unk_24C9CA278;
  *(_QWORD *)(a1 + 24) = &unk_24C9CA2B8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EC0B298(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  char v5;

  v2 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 56) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC0B2FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC0B30C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CA3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC0B33C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 64);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v3, result + 24);
  *(_DWORD *)(v1 + 64) = -1;
  return result;
}

uint64_t sub_20EC0B394(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_20EC0B3EC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_20EC0B400(int a1, std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
}

void sub_20EC0B408(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

_QWORD *sub_20EC0B41C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CA458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC0B460(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CA458;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0B4B4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA458;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC0B524(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA458;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC0B574(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC0B5B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC0B5E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC0B90C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC0BEE8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC0B7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC0BEE8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0B894(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispat"
                     "chIZNKSJ_4SendERKSC_EUlT_T0_E_EEvSM_SN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_4SendERKSC_EUlT_T0_E_EEvSM_SN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_4SendERKSC_EUlT_T0_E_EEvSM_SN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_4SendERKSC_EUlT_T0_E_EEvSM_SN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0B900()
{
  return &unk_24C9CA4B8;
}

void sub_20EC0B90C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count_vtbl **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::exception_ptr v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;
  char v44;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v39.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v39), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (void **)__p;
    v17 = v42;
    v43 = v14 + 144;
    v44 = 0;
    v18 = (char *)v42 - (_BYTE *)__p;
    if (v42 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = (std::__shared_weak_count_vtbl **)operator new((char *)v42 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      v20 = v19;
      while (1)
      {
        v22 = (std::__shared_weak_count_vtbl *)*v16;
        v21 = (std::__shared_weak_count *)v16[1];
        v39.__ptr_ = *v16;
        v40 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v22)
          CFRetain(v22);
        v25 = (std::__shared_weak_count *)operator new();
        v26 = v25;
        v25->__shared_owners_ = 0;
        v27 = (unint64_t *)&v25->__shared_owners_;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
        v25->__shared_weak_owners_ = 0;
        v25[1].__vftable = v22;
        *v20 = v22;
        v20[1] = (std::__shared_weak_count_vtbl *)v25;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (v29)
        {
          v30 = v40;
          if (v40)
            goto LABEL_34;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v26);
          v30 = v40;
          if (v40)
          {
LABEL_34:
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v16 += 2;
        v20 += 2;
        if (v16 == v17)
        {
          *(_QWORD *)(v14 + 152) = v20;
          break;
        }
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v33 = (void **)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*(v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 2;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void sub_20EC0BD34(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17, uint64_t a18, uint64_t a19, void **a20)
{
  std::mutex *v20;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  sub_20EC06DA4(&a20);
  std::mutex::unlock(v20);
  sub_20E8C3144(&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a20 = (void **)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    a10 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a20, "\n", "message: ", (const char *)&a10, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = &a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC0BEBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC0BEDCLL);
}

uint64_t *sub_20EC0BEE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EC0BFD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EC0BF30);
}

double sub_20EC0C010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __int128 v6;
  double result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_20E860C04(v5, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    result = *(double *)(a3 + 32);
    *(double *)(a2 + 32) = result;
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)v5 = v6;
    result = *(double *)(a3 + 32);
    *(double *)(a2 + 32) = result;
  }
  return result;
}

std::runtime_error *sub_20EC0C07C(int a1, std::runtime_error *this, std::runtime_error *a3)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a3);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
  LODWORD(result[1].__vftable) = a3[1].__vftable;
  return result;
}

_BYTE *sub_20EC0C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *result;
  __int128 v6;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  result = (_BYTE *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    result = sub_20E860C04(result, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)result = v6;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  }
  return result;
}

uint64_t sub_20EC0C124(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  char v5;

  *(_QWORD *)a1 = off_24C9CA4F0;
  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v5, a1 + 24);
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_20EC0C194(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  char v5;

  *(_QWORD *)a1 = off_24C9CA4F0;
  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v5, a1 + 24);
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return MEMORY[0x212BC6398](a1, 0x10F3C401D499FE0);
}

_QWORD *sub_20EC0C218(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v10[2];

  v2 = operator new(0x48uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C9CA4F0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_BYTE *)v2 + 24) = 0;
  *((_DWORD *)v2 + 16) = -1;
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))*(&off_24C9CA4C8 + v8))(v10, v2 + 3, a1 + 24);
    *((_DWORD *)v3 + 16) = v8;
  }
  return v3;
}

void sub_20EC0C2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v16))(&a13, v14);
  *(_DWORD *)(v13 + 64) = -1;
  v17 = *(std::__shared_weak_count **)(v13 + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  operator delete((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0C30C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[2];

  v4 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_24C9CA4F0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 64) = -1;
  v7 = *(unsigned int *)(result + 64);
  if ((_DWORD)v7 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))*(&off_24C9CA4C8 + v7))(v8, a2 + 24, result + 24);
    *(_DWORD *)(a2 + 64) = v7;
  }
  return result;
}

void sub_20EC0C3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v16))(&a13, v14);
  *(_DWORD *)(v13 + 64) = -1;
  v17 = *(std::__shared_weak_count **)(v13 + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(exception_object);
}

void sub_20EC0C3E8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  char v4;

  v2 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v2))(&v4, a1 + 24);
  *(_DWORD *)(a1 + 64) = -1;
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC0C448(_DWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  char v4;

  v2 = __p[16];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, _DWORD *))*(&off_24C9CA430 + v2))(&v4, __p + 6);
  __p[16] = -1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC0C4B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC0B90C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC0BEE8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0C558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC0BEE8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0C5A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE4SendERKSC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE4SendERKSC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE4SendERKSC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE4SendERKSC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0C610()
{
  return &unk_24C9CA568;
}

double sub_20EC0C61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  double result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = *(double *)(a3 + 32);
  *(double *)(a2 + 32) = result;
  return result;
}

std::runtime_error *sub_20EC0C648(int a1, std::runtime_error *this, std::runtime_error *a3)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a3);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9FFFA0;
  LODWORD(result[1].__vftable) = a3[1].__vftable;
  return result;
}

__n128 sub_20EC0C684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  result = *(__n128 *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  return result;
}

uint64_t sub_20EC0C6B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v8;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v5))(&v8, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 56) = -1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC0C75C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC0C76C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EC0C79C(uint64_t a1)
{
  return sub_20EC0BEE8((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EC0C7A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CA588;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC0C830(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CA588;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC0C8C8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA588;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC0C958(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA588;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC0C9C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC0CA48(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC0CAC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC0B90C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC0CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC0CDCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC0CBD8);
    JUMPOUT(0x20EC0CBA8);
  }
  sub_20E96CE78(3u);
}

void sub_20EC0CE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC0CE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC0BEE8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0CF40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispat"
                     "chIZNKSJ_7ProcessERKSC_NS4_7promiseISI_EEEUlT_T0_E_EEvSM_SP_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_7ProcessERKSC_NS4_7promiseISI_EEEUlT_T0_E_EEvSM_SP_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_7ProcessERKSC_NS4_7promiseISI_EEEUlT_T0_E_EEvSM_SP_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE25EnqueueMessageAndDispatchIZNKSJ_7ProcessERKSC_NS4_7promiseISI_EEEUlT_T0_E_EEvSM_SP_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0CFAC()
{
  return &unk_24C9CA5E8;
}

uint64_t sub_20EC0CFB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v8;

  *(_QWORD *)a1 = off_24C9CA608;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v5))(&v8, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 64) = -1;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_20EC0D070(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v8;

  *(_QWORD *)a1 = off_24C9CA608;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v5))(&v8, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 64) = -1;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return MEMORY[0x212BC6398](a1, 0x10F3C403CE886F2);
}

_QWORD *sub_20EC0D13C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v13[2];

  v2 = operator new(0x58uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C9CA608;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_BYTE *)v2 + 24) = 0;
  *((_DWORD *)v2 + 16) = -1;
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(char *, _QWORD *, uint64_t))*(&off_24C9CA4C8 + v8))(v13, v2 + 3, a1 + 24);
    *((_DWORD *)v3 + 16) = v8;
  }
  v9 = *(_QWORD *)(a1 + 80);
  v3[9] = *(_QWORD *)(a1 + 72);
  v3[10] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return v3;
}

void sub_20EC0D200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v16))(&a13, v14);
  *(_DWORD *)(v13 + 64) = -1;
  v17 = *(std::__shared_weak_count **)(v13 + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  operator delete((void *)v13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0D250(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[2];

  v3 = result;
  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = off_24C9CA608;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 64) = -1;
  v8 = *(unsigned int *)(result + 64);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))*(&off_24C9CA4C8 + v8))(v12, a2 + 24, result + 24);
    *(_DWORD *)(a2 + 64) = v8;
  }
  v9 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(a2 + 80) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC0D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v16 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v16))(&a13, v14);
  *(_DWORD *)(v13 + 64) = -1;
  v17 = *(std::__shared_weak_count **)(v13 + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(exception_object);
}

void sub_20EC0D350(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v7;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C9CA430 + v5))(&v7, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 64) = -1;
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC0D3F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char v7;

  v2 = (std::__shared_weak_count *)__p[10];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *((unsigned int *)__p + 16);
    if ((_DWORD)v5 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *((unsigned int *)__p + 16);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))*(&off_24C9CA430 + v5))(&v7, __p + 3);
LABEL_7:
  *((_DWORD *)__p + 16) = -1;
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC0D4A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[9];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC0B90C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC0D5B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC0D630(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC0D664);
  JUMPOUT(0x20EC0D694);
}

uint64_t sub_20EC0D69C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE7ProcessERKSC_NS4_7promiseISI_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE7ProcessERKSC_NS4_7promiseISI_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE7ProcessERKSC_NS4_7promiseISI_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE7ProcessERKSC_NS4_7promiseISI_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0D708()
{
  return &unk_24C9CA668;
}

_QWORD *sub_20EC0D714(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CA688;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC0D76C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CA688;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0D7D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CA688;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC0D84C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0D86C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CA688;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC0D8D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC0D8EC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC0D93C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC0D988(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0DA3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0DA78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21Fr"
                     "ameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetec"
                     "tionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE9SubscribeENS1_12ChannelInputISI_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_nod"
                                "e_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_no"
                                "de_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvS"
                                "I_Lb0EE9SubscribeENS1_12ChannelInputISI_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE9SubscribeENS1_12ChannelInputISI_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE9SubscribeENS1_12ChannelInputISI_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0DAE4()
{
  return &unk_24C9CA6E8;
}

_QWORD *sub_20EC0DAF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA708;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0DB28(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA708;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0DB70(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CA708;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC0DBC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CA708;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC0DBF0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC0DC00(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC0DC2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0DCC0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0DCFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21Fr"
                     "ameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetec"
                     "tionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15AddErrorHandlerENS1_12Ch"
                     "annelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_nod"
                                "e_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_no"
                                "de_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvS"
                                "I_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0DD68()
{
  return &unk_24C9CA768;
}

_QWORD *sub_20EC0DD74(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA788;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0DDAC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA788;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0DDF4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA788;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC0DE4C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA788;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC0DE84(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC0DE94(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC0DEC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC0E03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0E0AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0E118()
{
  return &unk_24C9CA7E8;
}

_QWORD *sub_20EC0E124(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CA808;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0E15C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CA808;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0E1A4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CA808;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC0E1FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CA808;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC0E234(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC0E244(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC0E270(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0E328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC0E374(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21F"
                     "rameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDete"
                     "ctionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_no"
                                "de_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_n"
                                "ode_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEv"
                                "SI_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__17variantIJNS_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS7_24JasperFrameSelectorErrorENS6_28feature_detection_node_group21FeatureDetectionErrorEEEENS4_6vectorINS0_2cf8ErrorRefENS4_9allocatorISF_EEEEvSI_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC0E3E0()
{
  return &unk_24C9CA868;
}

void sub_20EC0E3F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC0E414(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC0E42C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_7variantIJNS1_3vio27frame_downsampl"
                     "e_node_group21FrameDownsamplerErrorENS8_24JasperFrameSelectorErrorENS7_28feature_detection_node_gro"
                     "up21FeatureDetectionErrorEEEENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISG_EEEEvSJ_Lb0EEEE27__shared"
                     "_ptr_default_deleteISK_SK_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_7variantIJNS1_3vio27fram"
                                "e_downsample_node_group21FrameDownsamplerErrorENS8_24JasperFrameSelectorErrorENS7_28feat"
                                "ure_detection_node_group21FeatureDetectionErrorEEEENS_6vectorINS2_2cf8ErrorRefENS_9alloc"
                                "atorISG_EEEEvSJ_Lb0EEEE27__shared_ptr_default_deleteISK_SK_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_7variantIJNS1_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS8_24JasperFrameSelectorErrorENS7_28feature_detection_node_group21FeatureDetectionErrorEEEENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISG_EEEEvSJ_Lb0EEEE27__shared_ptr_default_deleteISK_SK_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_7variantIJNS1_3vio27frame_downsample_node_group21FrameDownsamplerErrorENS8_24JasperFrameSelectorErrorENS7_28feature_detection_node_group21FeatureDetectionErrorEEEENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISG_EEEEvSJ_Lb0EEEE27__shared_ptr_default_deleteISK_SK_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC0E49C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC0E4C8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC0E504@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CA8D8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC0E56C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0E610(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC0E6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0E6B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC0E778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0E78C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC0E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0E864(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC0E908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0E920(uint64_t a1)
{
  sub_20EC10284(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC0E944(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  std::runtime_error v52;
  int v53;
  char *v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;
  __int128 *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    std::runtime_error::runtime_error(&v52, (const std::runtime_error *)a2);
    v52.__vftable = (std::runtime_error_vtbl *)&off_24C9D0E90;
    v53 = *(_DWORD *)(a2 + 16);
    v58 = 0;
    v48 = (char *)operator new(0x30uLL);
    *(_QWORD *)v48 = &off_24C9CABF0;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    std::runtime_error::runtime_error((std::runtime_error *)(v48 + 24), &v52);
    *((_QWORD *)v48 + 3) = &off_24C9D0E90;
    *((_DWORD *)v48 + 10) = v53;
    v58 = (__int128 *)v48;
    sub_210216F3C(*v25, (uint64_t)&v56);
    v49 = v58;
    if (v58 == &v56)
    {
      v50 = 4;
      v49 = &v56;
    }
    else
    {
      if (!v58)
      {
LABEL_58:
        std::runtime_error::~runtime_error(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  v6 = (unint64_t *)(v4 + 16);
  *(_QWORD *)v4 = &off_24C9CAB20;
  v7 = v4 + 24;
  std::runtime_error::runtime_error((std::runtime_error *)(v4 + 24), (const std::runtime_error *)a2);
  *((_QWORD *)v4 + 3) = &off_24C9D0E90;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 16);
  v54 = v4 + 24;
  v55 = (std::__shared_weak_count *)v4;
  do
    v8 = __ldxr(v6);
  while (__stxr(v8 + 1, v6));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v56 = v10;
  *((_QWORD *)&v56 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_20E866B34();
  v11 = v9[4];
  v12 = *v9;
  v13 = (_QWORD *)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v7;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v56;
    if (!(_QWORD)v56)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v56;
  if ((_QWORD)v56)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v56 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v56 = v38;
      *((_QWORD *)&v56 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v56 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24C9CAB70;
  *(_OWORD *)(v43 + 8) = v56;
  v56 = 0uLL;
  *((_QWORD *)v43 + 3) = v7;
  *((_QWORD *)v43 + 4) = v4;
  v57 = 0;
  v58 = 0;
  v60 = v43;
  sub_210216F3C(*v34, (uint64_t)v59);
  v44 = v60;
  if (v60 == v59)
  {
    v45 = 4;
    v44 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v55)
  {
    v46 = &v55->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_20EC0EDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
    {
      sub_20EC10484(&a9);
      _Unwind_Resume(a1);
    }
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  sub_20EC10484(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0EE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  sub_20EA02254((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EC0EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC0EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v8, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC0EEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;

  std::__shared_weak_count::__release_weak(v15);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC0EEE4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC0EEF4(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC0EF00(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC0EF10(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  std::runtime_error v74;
  int v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::runtime_error v81;
  char *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  _QWORD *v85;
  __int128 *v86;
  _QWORD v87[3];
  std::string v88;
  std::string *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v84 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v84 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v85 = v66;
    v86 = v69;
    sub_20E8778D4((uint64_t)&v84, (uint64_t)v87, 0, 0, &v88);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v88;
    else
      v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v81, (const char *)v70);
    v81.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v81);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v72, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
    v6[1].__vftable = *a3;
    v79 = v6 + 1;
    v80 = v6;
    v77 = v6 + 1;
    v78 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x30uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9CAB20;
    v12 = v9 + 24;
    std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), (const std::runtime_error *)a2);
    *((_QWORD *)v9 + 3) = &off_24C9D0E90;
    *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 16);
    v82 = v9 + 24;
    v83 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v84 = v15;
    *((_QWORD *)&v84 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v84 = v43;
            *((_QWORD *)&v84 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v48 = v77;
        v49 = v78;
        v77 = 0;
        v78 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9CAC70;
        *(_OWORD *)(v50 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v50 + 3) = v12;
        *((_QWORD *)v50 + 4) = v9;
        v85 = 0;
        v86 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v87[0] = 0;
        v87[1] = 0;
        v89 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v88);
        v51 = v89;
        if (v89 == &v88)
        {
          v52 = 4;
          v51 = &v88;
        }
        else
        {
          if (!v89)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v83)
        {
          v53 = &v83->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v78)
        {
          v55 = &v78->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (v80)
        {
          v57 = &v80->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)a2);
  v74.__vftable = (std::runtime_error_vtbl *)&off_24C9D0E90;
  v75 = *(_DWORD *)(a2 + 16);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24C9CCA80;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v76 = v59 + 3;
  *((_QWORD *)&v76 + 1) = v59;
  v86 = 0;
  v60 = (char *)operator new(0x40uLL);
  *(_QWORD *)v60 = &off_24C9CACF0;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v73;
  std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v74);
  *((_QWORD *)v60 + 3) = &off_24C9D0E90;
  *((_DWORD *)v60 + 10) = v75;
  *((_OWORD *)v60 + 3) = v76;
  v76 = 0uLL;
  v86 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v84);
  v61 = v86;
  if (v86 == &v84)
  {
    v62 = 4;
    v61 = &v84;
  }
  else
  {
    if (!v86)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::runtime_error::~runtime_error(&v74);
}

void sub_20EC0F5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EC0F4D8);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC0F638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC0F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
    {
      sub_20EC11318(&a9);
      _Unwind_Resume(a1);
    }
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
  sub_20EC11318(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC0F6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::runtime_error *v10;

  std::runtime_error::~runtime_error(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC0F70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC0F7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC0F7C8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC0F83C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CAD70;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC0F96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC0F9E0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CADF0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC0FAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC0FB54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CAE70;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC0FD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC0FE34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CAEF0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC1004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC10114(uint64_t a1)
{
  return sub_20EC10284(a1 - 16);
}

void sub_20EC1011C(uint64_t a1)
{
  sub_20EC10284(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC10144(uint64_t a1, uint64_t a2)
{
  return sub_20EC0F83C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC1014C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC0FB54((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC10154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC0FE34((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC1015C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC10164(uint64_t a1)
{
  return sub_20EC10284(a1 - 24);
}

void sub_20EC1016C(uint64_t a1)
{
  sub_20EC10284(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC10194(uint64_t a1)
{
  return sub_20EC0F9E0((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC1019C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC101A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC1020C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC10274(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC10284(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CA940;
  *(_QWORD *)(a1 + 16) = &unk_24C9CA9B8;
  *(_QWORD *)(a1 + 24) = &unk_24C9CA9F8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

std::runtime_error *sub_20EC10484(std::runtime_error *a1)
{
  std::__shared_weak_count *imp;

  std::runtime_error::~runtime_error(a1 + 1);
  imp = (std::__shared_weak_count *)a1->__imp_.__imp_;
  if (imp)
    std::__shared_weak_count::__release_weak(imp);
  return a1;
}

void sub_20EC104B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CAB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC104C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CAB20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC104F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20EC10508(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CAB70;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC1054C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CAB70;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC105A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CAB70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC10610(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CAB70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC10660(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC1069C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC106D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC109F8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC0BEE8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC1089C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC0BEE8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC10980(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4Send"
                     "ERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageA"
                                "ndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC109EC()
{
  return &unk_24C9CABD0;
}

void sub_20EC109F8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count_vtbl **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::exception_ptr v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;
  char v44;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v39.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v39), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (void **)__p;
    v17 = v42;
    v43 = v14 + 144;
    v44 = 0;
    v18 = (char *)v42 - (_BYTE *)__p;
    if (v42 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = (std::__shared_weak_count_vtbl **)operator new((char *)v42 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      v20 = v19;
      while (1)
      {
        v22 = (std::__shared_weak_count_vtbl *)*v16;
        v21 = (std::__shared_weak_count *)v16[1];
        v39.__ptr_ = *v16;
        v40 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v22)
          CFRetain(v22);
        v25 = (std::__shared_weak_count *)operator new();
        v26 = v25;
        v25->__shared_owners_ = 0;
        v27 = (unint64_t *)&v25->__shared_owners_;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
        v25->__shared_weak_owners_ = 0;
        v25[1].__vftable = v22;
        *v20 = v22;
        v20[1] = (std::__shared_weak_count_vtbl *)v25;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (v29)
        {
          v30 = v40;
          if (v40)
            goto LABEL_34;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v26);
          v30 = v40;
          if (v40)
          {
LABEL_34:
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v16 += 2;
        v20 += 2;
        if (v16 == v17)
        {
          *(_QWORD *)(v14 + 152) = v20;
          break;
        }
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v33 = (void **)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*(v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 2;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void sub_20EC10E20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17, uint64_t a18, uint64_t a19, void **a20)
{
  std::mutex *v20;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  sub_20EC06DA4(&a20);
  std::mutex::unlock(v20);
  sub_20E8C3144(&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a20 = (void **)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    a10 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a20, "\n", "message: ", (const char *)&a10, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = &a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC10FA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC10FC8);
}

uint64_t sub_20EC10FD4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CABF0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC11010(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CABF0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x212BC6398);
}

char *sub_20EC1105C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CABF0;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9D0E90;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  return v3;
}

std::runtime_error *sub_20EC110D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CABF0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9D0E90;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void sub_20EC11140(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20EC11178(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete((void *)a1);
}

void sub_20EC111AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC109F8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC0BEE8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC11254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC0BEE8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC112A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1130C()
{
  return &unk_24C9CAC50;
}

std::runtime_error *sub_20EC11318(std::runtime_error *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *imp;

  v2 = (std::__shared_weak_count *)a1[3].__vftable;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error(a1 + 1);
      imp = (std::__shared_weak_count *)a1->__imp_.__imp_;
      if (!imp)
        return a1;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error(a1 + 1);
  imp = (std::__shared_weak_count *)a1->__imp_.__imp_;
  if (imp)
LABEL_6:
    std::__shared_weak_count::__release_weak(imp);
  return a1;
}

_QWORD *sub_20EC11398(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CAC70;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC11420(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CAC70;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC114B8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CAC70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC11548(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CAC70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC115B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC11638(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC116B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC109F8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC11990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC119BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC117C8);
    JUMPOUT(0x20EC11798);
  }
  sub_20E96CE78(3u);
}

void sub_20EC11A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC11A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC0BEE8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC11B30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7Proc"
                     "essERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageA"
                                "ndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC11B9C()
{
  return &unk_24C9CACD0;
}

uint64_t sub_20EC11BA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CACF0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC11C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CACF0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20EC11CD0(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CACF0;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9D0E90;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v3 + 7) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

std::runtime_error *sub_20EC11D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CACF0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9D0E90;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC11DF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC11E74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete((void *)a1);
}

void sub_20EC11EF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC109F8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC12004(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC1207C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC120B0);
  JUMPOUT(0x20EC120E0);
}

uint64_t sub_20EC120E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7"
                                "_7promiseISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC12154()
{
  return &unk_24C9CAD50;
}

_QWORD *sub_20EC12160(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CAD70;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC121B8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CAD70;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC12220(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CAD70;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC12298(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC122B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CAD70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC12320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC12338(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC12388(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC123D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC12488(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC124C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3"
                     "__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNod"
                                "eErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12C"
                                "hannelInputISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC12530()
{
  return &unk_24C9CADD0;
}

_QWORD *sub_20EC1253C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CADF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC12574(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CADF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC125BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CADF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC1260C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CADF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC1263C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC1264C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC12678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1270C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC12748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3"
                     "__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNod"
                                "eErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerE"
                                "NS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC127B4()
{
  return &unk_24C9CAE50;
}

_QWORD *sub_20EC127C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CAE70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC127F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CAE70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC12840(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CAE70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC12898(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CAE70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC128D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC128E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC1290C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC12A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC12AF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC12B64()
{
  return &unk_24C9CAED0;
}

_QWORD *sub_20EC12B70(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CAEF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC12BA8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CAEF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC12BF0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CAEF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC12C48(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CAEF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC12C80(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC12C90(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC12CBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC12D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC12DC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt"
                     "3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNo"
                                "deErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22slam_engine_node_group19SlamEngineNodeErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC12E2C()
{
  return &unk_24C9CAF50;
}

void sub_20EC12E3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC12E60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC12E78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19Slam"
                     "EngineNodeErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_"
                                "group19SlamEngineNodeErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE2"
                                "7__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19SlamEngineNodeErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22slam_engine_node_group19SlamEngineNodeErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC12EE8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC12F14(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC12F50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CC7A8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC12FB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC13048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC1305C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC130EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC13100(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC131C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC131D8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC1329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC132B0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC13354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC1336C(uint64_t a1)
{
  sub_20EC14CD0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC13390(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  std::runtime_error v52;
  int v53;
  char *v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;
  __int128 *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    std::runtime_error::runtime_error(&v52, (const std::runtime_error *)a2);
    v52.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
    v53 = *(_DWORD *)(a2 + 16);
    v58 = 0;
    v48 = (char *)operator new(0x30uLL);
    *(_QWORD *)v48 = &off_24C9CB280;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    std::runtime_error::runtime_error((std::runtime_error *)(v48 + 24), &v52);
    *((_QWORD *)v48 + 3) = &off_24C9EDA58;
    *((_DWORD *)v48 + 10) = v53;
    v58 = (__int128 *)v48;
    sub_210216F3C(*v25, (uint64_t)&v56);
    v49 = v58;
    if (v58 == &v56)
    {
      v50 = 4;
      v49 = &v56;
    }
    else
    {
      if (!v58)
      {
LABEL_58:
        std::runtime_error::~runtime_error(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  v6 = (unint64_t *)(v4 + 16);
  *(_QWORD *)v4 = &off_24C9CB1B0;
  v7 = v4 + 24;
  std::runtime_error::runtime_error((std::runtime_error *)(v4 + 24), (const std::runtime_error *)a2);
  *((_QWORD *)v4 + 3) = &off_24C9EDA58;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 16);
  v54 = v4 + 24;
  v55 = (std::__shared_weak_count *)v4;
  do
    v8 = __ldxr(v6);
  while (__stxr(v8 + 1, v6));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v56 = v10;
  *((_QWORD *)&v56 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_20E866B34();
  v11 = v9[4];
  v12 = *v9;
  v13 = (_QWORD *)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v7;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v56;
    if (!(_QWORD)v56)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v56;
  if ((_QWORD)v56)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v56 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v56 = v38;
      *((_QWORD *)&v56 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v56 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24C9CB200;
  *(_OWORD *)(v43 + 8) = v56;
  v56 = 0uLL;
  *((_QWORD *)v43 + 3) = v7;
  *((_QWORD *)v43 + 4) = v4;
  v57 = 0;
  v58 = 0;
  v60 = v43;
  sub_210216F3C(*v34, (uint64_t)v59);
  v44 = v60;
  if (v60 == v59)
  {
    v45 = 4;
    v44 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v55)
  {
    v46 = &v55->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_20EC13814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
    {
      sub_20EC10484(&a9);
      _Unwind_Resume(a1);
    }
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  sub_20EC10484(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC13868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  sub_20EA02254((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EC138B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC138DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v8, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC13910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;

  std::__shared_weak_count::__release_weak(v15);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC13930(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC13940(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC1394C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC1395C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  std::runtime_error v74;
  int v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::runtime_error v81;
  char *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  _QWORD *v85;
  __int128 *v86;
  _QWORD v87[3];
  std::string v88;
  std::string *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v84 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v84 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v85 = v66;
    v86 = v69;
    sub_20E8778D4((uint64_t)&v84, (uint64_t)v87, 0, 0, &v88);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v88;
    else
      v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v81, (const char *)v70);
    v81.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v81);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v72, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
    v6[1].__vftable = *a3;
    v79 = v6 + 1;
    v80 = v6;
    v77 = v6 + 1;
    v78 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x30uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9CB1B0;
    v12 = v9 + 24;
    std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), (const std::runtime_error *)a2);
    *((_QWORD *)v9 + 3) = &off_24C9EDA58;
    *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 16);
    v82 = v9 + 24;
    v83 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v84 = v15;
    *((_QWORD *)&v84 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v84 = v43;
            *((_QWORD *)&v84 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v48 = v77;
        v49 = v78;
        v77 = 0;
        v78 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9CB300;
        *(_OWORD *)(v50 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v50 + 3) = v12;
        *((_QWORD *)v50 + 4) = v9;
        v85 = 0;
        v86 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v87[0] = 0;
        v87[1] = 0;
        v89 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v88);
        v51 = v89;
        if (v89 == &v88)
        {
          v52 = 4;
          v51 = &v88;
        }
        else
        {
          if (!v89)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v83)
        {
          v53 = &v83->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v78)
        {
          v55 = &v78->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (v80)
        {
          v57 = &v80->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)a2);
  v74.__vftable = (std::runtime_error_vtbl *)&off_24C9EDA58;
  v75 = *(_DWORD *)(a2 + 16);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24C9CCA80;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v76 = v59 + 3;
  *((_QWORD *)&v76 + 1) = v59;
  v86 = 0;
  v60 = (char *)operator new(0x40uLL);
  *(_QWORD *)v60 = &off_24C9CB380;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v73;
  std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v74);
  *((_QWORD *)v60 + 3) = &off_24C9EDA58;
  *((_DWORD *)v60 + 10) = v75;
  *((_OWORD *)v60 + 3) = v76;
  v76 = 0uLL;
  v86 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v84);
  v61 = v86;
  if (v86 == &v84)
  {
    v62 = 4;
    v61 = &v84;
  }
  else
  {
    if (!v86)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::runtime_error::~runtime_error(&v74);
}

void sub_20EC14010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EC13F24);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC14084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC140D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
    {
      sub_20EC11318(&a9);
      _Unwind_Resume(a1);
    }
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
  sub_20EC11318(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC1412C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::runtime_error *v10;

  std::runtime_error::~runtime_error(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC14158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC141F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC14214(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC14288(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CB400;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC143B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC1442C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CB480;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC1453C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC145A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CB500;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC147B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC14880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CB580;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC14A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC14B60(uint64_t a1)
{
  return sub_20EC14CD0(a1 - 16);
}

void sub_20EC14B68(uint64_t a1)
{
  sub_20EC14CD0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC14B90(uint64_t a1, uint64_t a2)
{
  return sub_20EC14288((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC14B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC145A0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC14BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC14880((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC14BA8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC14BB0(uint64_t a1)
{
  return sub_20EC14CD0(a1 - 24);
}

void sub_20EC14BB8(uint64_t a1)
{
  sub_20EC14CD0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC14BE0(uint64_t a1)
{
  return sub_20EC1442C((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC14BE8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC14BF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC14C58(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC14CC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC14CD0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CAFC0;
  *(_QWORD *)(a1 + 16) = &unk_24C9CB038;
  *(_QWORD *)(a1 + 24) = &unk_24C9CB078;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC14ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CB1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC14EE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CB1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC14F10(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20EC14F20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB200;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC14F64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB200;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC14FB8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB200;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC15028(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB200;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC15078(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC150B4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC150EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC15410((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC0BEE8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC152B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC0BEE8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC15398(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_"
                     "4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMes"
                                "sageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC15404()
{
  return &unk_24C9CB260;
}

void sub_20EC15410(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count_vtbl **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::exception_ptr v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;
  char v44;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v39.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v39), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (void **)__p;
    v17 = v42;
    v43 = v14 + 144;
    v44 = 0;
    v18 = (char *)v42 - (_BYTE *)__p;
    if (v42 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = (std::__shared_weak_count_vtbl **)operator new((char *)v42 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      v20 = v19;
      while (1)
      {
        v22 = (std::__shared_weak_count_vtbl *)*v16;
        v21 = (std::__shared_weak_count *)v16[1];
        v39.__ptr_ = *v16;
        v40 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v22)
          CFRetain(v22);
        v25 = (std::__shared_weak_count *)operator new();
        v26 = v25;
        v25->__shared_owners_ = 0;
        v27 = (unint64_t *)&v25->__shared_owners_;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
        v25->__shared_weak_owners_ = 0;
        v25[1].__vftable = v22;
        *v20 = v22;
        v20[1] = (std::__shared_weak_count_vtbl *)v25;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (v29)
        {
          v30 = v40;
          if (v40)
            goto LABEL_34;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v26);
          v30 = v40;
          if (v40)
          {
LABEL_34:
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v16 += 2;
        v20 += 2;
        if (v16 == v17)
        {
          *(_QWORD *)(v14 + 152) = v20;
          break;
        }
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v33 = (void **)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*(v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 2;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void sub_20EC15838(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17, uint64_t a18, uint64_t a19, void **a20)
{
  std::mutex *v20;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  sub_20EC06DA4(&a20);
  std::mutex::unlock(v20);
  sub_20E8C3144(&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a20 = (void **)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    a10 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a20, "\n", "message: ", (const char *)&a10, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = &a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC159C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC159E0);
}

uint64_t sub_20EC159EC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CB280;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC15A28(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CB280;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x212BC6398);
}

char *sub_20EC15A74(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CB280;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9EDA58;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  return v3;
}

std::runtime_error *sub_20EC15AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CB280;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9EDA58;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void sub_20EC15B58(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20EC15B90(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete((void *)a1);
}

void sub_20EC15BC4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC15410((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC0BEE8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC15C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC0BEE8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC15CB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC15D24()
{
  return &unk_24C9CB2E0;
}

_QWORD *sub_20EC15D30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CB300;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC15DB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CB300;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC15E50(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB300;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC15EE0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB300;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC15F50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC15FD0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC1604C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC15410(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC16328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC16354(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC16160);
    JUMPOUT(0x20EC16130);
  }
  sub_20E96CE78(3u);
}

void sub_20EC163B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC163DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC0BEE8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC164C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_"
                     "7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMes"
                                "sageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC16534()
{
  return &unk_24C9CB360;
}

uint64_t sub_20EC16540(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CB380;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC165CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CB380;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20EC16668(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CB380;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9EDA58;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v3 + 7) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

std::runtime_error *sub_20EC16700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CB380;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9EDA58;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC1678C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC1680C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete((void *)a1);
}

void sub_20EC1688C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC15410((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC1699C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC16A14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC16A48);
  JUMPOUT(0x20EC16A78);
}

uint64_t sub_20EC16A80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS"
                                "6_NS7_7promiseISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC16AEC()
{
  return &unk_24C9CB3E0;
}

_QWORD *sub_20EC16AF8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB400;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC16B50(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB400;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC16BB8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CB400;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC16C30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC16C50(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CB400;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC16CB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC16CD0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC16D20(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC16D6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC16E20(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC16E5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupError"
                     "ENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNod"
                                "eGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS"
                                "1_12ChannelInputISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC16EC8()
{
  return &unk_24C9CB460;
}

_QWORD *sub_20EC16ED4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CB480;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC16F0C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CB480;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC16F54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CB480;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC16FA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CB480;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC16FD4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC16FE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC17010(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC170A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC170E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupError"
                     "ENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNod"
                                "eGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHan"
                                "dlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1714C()
{
  return &unk_24C9CB4E0;
}

_QWORD *sub_20EC17158(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CB500;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC17190(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CB500;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC171D8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB500;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC17230(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB500;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC17268(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC17278(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC172A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC17420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC17490(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC174FC()
{
  return &unk_24C9CB560;
}

_QWORD *sub_20EC17508(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CB580;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC17540(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CB580;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC17588(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB580;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC175E0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB580;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC17618(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC17628(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC17654(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1770C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC17758(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErro"
                     "rENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNo"
                                "deGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC177C4()
{
  return &unk_24C9CB5E0;
}

void sub_20EC177D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC177F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC17810(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group24User"
                     "AnchorNodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_def"
                     "ault_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_"
                                "group24UserAnchorNodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0"
                                "EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio22user_anchor_node_group24UserAnchorNodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC17880(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC178AC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC178E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CB650;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC17950(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC179E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC179F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC17A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC17A98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC17B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC17B70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC17C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC17C48(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC17CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC17D04(uint64_t a1)
{
  sub_20EC19668(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EC17D28(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  std::runtime_error v52;
  int v53;
  char *v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  uint64_t v57;
  __int128 *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    std::runtime_error::runtime_error(&v52, (const std::runtime_error *)a2);
    v52.__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    v53 = *(_DWORD *)(a2 + 16);
    v58 = 0;
    v48 = (char *)operator new(0x30uLL);
    *(_QWORD *)v48 = &off_24C9CB978;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    std::runtime_error::runtime_error((std::runtime_error *)(v48 + 24), &v52);
    *((_QWORD *)v48 + 3) = &off_24C9F2020;
    *((_DWORD *)v48 + 10) = v53;
    v58 = (__int128 *)v48;
    sub_210216F3C(*v25, (uint64_t)&v56);
    v49 = v58;
    if (v58 == &v56)
    {
      v50 = 4;
      v49 = &v56;
    }
    else
    {
      if (!v58)
      {
LABEL_58:
        std::runtime_error::~runtime_error(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (char *)operator new(0x30uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  v6 = (unint64_t *)(v4 + 16);
  *(_QWORD *)v4 = &off_24C9CB8A8;
  v7 = v4 + 24;
  std::runtime_error::runtime_error((std::runtime_error *)(v4 + 24), (const std::runtime_error *)a2);
  *((_QWORD *)v4 + 3) = &off_24C9F2020;
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 16);
  v54 = v4 + 24;
  v55 = (std::__shared_weak_count *)v4;
  do
    v8 = __ldxr(v6);
  while (__stxr(v8 + 1, v6));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v56 = v10;
  *((_QWORD *)&v56 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_20E866B34();
  v11 = v9[4];
  v12 = *v9;
  v13 = (_QWORD *)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v7;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v56;
    if (!(_QWORD)v56)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v56;
  if ((_QWORD)v56)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v56 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v56 = v38;
      *((_QWORD *)&v56 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v56 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24C9CB8F8;
  *(_OWORD *)(v43 + 8) = v56;
  v56 = 0uLL;
  *((_QWORD *)v43 + 3) = v7;
  *((_QWORD *)v43 + 4) = v4;
  v57 = 0;
  v58 = 0;
  v60 = v43;
  sub_210216F3C(*v34, (uint64_t)v59);
  v44 = v60;
  if (v60 == v59)
  {
    v45 = 4;
    v44 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v55)
  {
    v46 = &v55->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_20EC181AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
    {
      sub_20EC10484(&a9);
      _Unwind_Resume(a1);
    }
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  sub_20EC10484(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC18200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  sub_20EA02254((uint64_t)&a17);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20EC18250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC18274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v8, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EC182A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;

  std::__shared_weak_count::__release_weak(v15);
  sub_20E86665C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC182C8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC182D8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EC182E4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EC182F4(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  __int128 *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *v70;
  std::runtime_error *exception;
  std::runtime_error *v72;
  std::__shared_weak_count *v73[2];
  std::runtime_error v74;
  int v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::runtime_error v81;
  char *v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  _QWORD *v85;
  __int128 *v86;
  _QWORD v87[3];
  std::string v88;
  std::string *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v84 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v84 + 1) = 45;
    v68 = (_QWORD *)a1[6];
    v67 = a1 + 6;
    v66 = v68;
    v69 = (__int128 *)*((unsigned __int8 *)v67 + 23);
    if ((char)v69 < 0)
      v69 = (__int128 *)v67[1];
    else
      v66 = v67;
    v85 = v66;
    v86 = v69;
    sub_20E8778D4((uint64_t)&v84, (uint64_t)v87, 0, 0, &v88);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v88;
    else
      v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v81, (const char *)v70);
    v81.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v72 = std::runtime_error::runtime_error(exception, &v81);
    v72->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v72, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CCA80;
    v6[1].__vftable = *a3;
    v79 = v6 + 1;
    v80 = v6;
    v77 = v6 + 1;
    v78 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x30uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9CB8A8;
    v12 = v9 + 24;
    std::runtime_error::runtime_error((std::runtime_error *)(v9 + 24), (const std::runtime_error *)a2);
    *((_QWORD *)v9 + 3) = &off_24C9F2020;
    *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 16);
    v82 = v9 + 24;
    v83 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v84 = v15;
    *((_QWORD *)&v84 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v84 = v43;
            *((_QWORD *)&v84 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v48 = v77;
        v49 = v78;
        v77 = 0;
        v78 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24C9CB9F8;
        *(_OWORD *)(v50 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v50 + 3) = v12;
        *((_QWORD *)v50 + 4) = v9;
        v85 = 0;
        v86 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v87[0] = 0;
        v87[1] = 0;
        v89 = (std::string *)v50;
        sub_210216F3C(*v39, (uint64_t)&v88);
        v51 = v89;
        if (v89 == &v88)
        {
          v52 = 4;
          v51 = &v88;
        }
        else
        {
          if (!v89)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v83)
        {
          v53 = &v83->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        if (v78)
        {
          v55 = &v78->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (v80)
        {
          v57 = &v80->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v73 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v73[0] = v34;
      v73[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v73 = 0uLL;
    }
  }
  std::runtime_error::runtime_error(&v74, (const std::runtime_error *)a2);
  v74.__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
  v75 = *(_DWORD *)(a2 + 16);
  v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *v59 = &off_24C9CCA80;
  v59[3] = *a3;
  *a3 = 0;
  *(_QWORD *)&v76 = v59 + 3;
  *((_QWORD *)&v76 + 1) = v59;
  v86 = 0;
  v60 = (char *)operator new(0x40uLL);
  *(_QWORD *)v60 = &off_24C9CBA78;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v73;
  std::runtime_error::runtime_error((std::runtime_error *)(v60 + 24), &v74);
  *((_QWORD *)v60 + 3) = &off_24C9F2020;
  *((_DWORD *)v60 + 10) = v75;
  *((_OWORD *)v60 + 3) = v76;
  v76 = 0uLL;
  v86 = (__int128 *)v60;
  sub_210216F3C(*v30, (uint64_t)&v84);
  v61 = v86;
  if (v86 == &v84)
  {
    v62 = 4;
    v61 = &v84;
  }
  else
  {
    if (!v86)
      goto LABEL_72;
    v62 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v61 + 8 * v62))(v61);
LABEL_72:
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  std::runtime_error::~runtime_error(&v74);
}

void sub_20EC189A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EC188BCLL);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EC18A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC18A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27)
{
  char *v27;
  char *v29;
  uint64_t v30;

  v29 = a27;
  if (a27 == v27)
  {
    v30 = 4;
    v29 = &a24;
  }
  else
  {
    if (!a27)
    {
      sub_20EC11318(&a9);
      _Unwind_Resume(a1);
    }
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
  sub_20EC11318(&a9);
  _Unwind_Resume(a1);
}

void sub_20EC18AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::runtime_error *v10;

  std::runtime_error::~runtime_error(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EC18AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC18B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EC18BAC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EC18C20(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9CBAF8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B4888;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EC18D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EC18DC4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9CBB78;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EC18ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EC18F38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CBBF8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC19150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EC19218@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9CBC78;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EC19430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC194F8(uint64_t a1)
{
  return sub_20EC19668(a1 - 16);
}

void sub_20EC19500(uint64_t a1)
{
  sub_20EC19668(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC19528(uint64_t a1, uint64_t a2)
{
  return sub_20EC18C20((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC19530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC18F38((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EC19538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EC19218((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EC19540(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EC19548(uint64_t a1)
{
  return sub_20EC19668(a1 - 24);
}

void sub_20EC19550(uint64_t a1)
{
  sub_20EC19668(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC19578(uint64_t a1)
{
  return sub_20EC18DC4((_QWORD *)(a1 - 24));
}

uint64_t sub_20EC19580(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EC19588(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EC195F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC19658(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC19668(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9CB6C8;
  *(_QWORD *)(a1 + 16) = &unk_24C9CB740;
  *(_QWORD *)(a1 + 24) = &unk_24C9CB780;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EC19868(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CB8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC19878(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CB8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC198A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20EC198B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB8F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC198FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CB8F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC19950(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB8F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EC199C0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB8F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EC19A10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC19A4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC19A84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EC19DA8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EC0BEE8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC19C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EC0BEE8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC19D30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EU"
                     "lT_T0_E_EEvSH_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispat"
                                "chIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC19D9C()
{
  return &unk_24C9CB958;
}

void sub_20EC19DA8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl **v19;
  std::__shared_weak_count_vtbl **v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void **v33;
  void **v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::exception_ptr v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;
  char v44;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)&unk_21025775D, 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, &unk_21025775D, 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, &unk_21025775D, 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v39.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v39), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (void **)__p;
    v17 = v42;
    v43 = v14 + 144;
    v44 = 0;
    v18 = (char *)v42 - (_BYTE *)__p;
    if (v42 != __p)
    {
      if (v18 < 0)
        sub_20E867F44();
      v19 = (std::__shared_weak_count_vtbl **)operator new((char *)v42 - (_BYTE *)__p);
      *(_QWORD *)(v14 + 144) = v19;
      *(_QWORD *)(v14 + 152) = v19;
      *(_QWORD *)(v14 + 160) = &v19[2 * (v18 >> 4)];
      v20 = v19;
      while (1)
      {
        v22 = (std::__shared_weak_count_vtbl *)*v16;
        v21 = (std::__shared_weak_count *)v16[1];
        v39.__ptr_ = *v16;
        v40 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        if (v22)
          CFRetain(v22);
        v25 = (std::__shared_weak_count *)operator new();
        v26 = v25;
        v25->__shared_owners_ = 0;
        v27 = (unint64_t *)&v25->__shared_owners_;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9AD888;
        v25->__shared_weak_owners_ = 0;
        v25[1].__vftable = v22;
        *v20 = v22;
        v20[1] = (std::__shared_weak_count_vtbl *)v25;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (v29)
        {
          v30 = v40;
          if (v40)
            goto LABEL_34;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v26);
          v30 = v40;
          if (v40)
          {
LABEL_34:
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v16 += 2;
        v20 += 2;
        if (v16 == v17)
        {
          *(_QWORD *)(v14 + 152) = v20;
          break;
        }
      }
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v33 = (void **)__p;
  if (__p)
  {
    v34 = v42;
    v35 = __p;
    if (v42 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*(v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 2;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v42 = v33;
    operator delete(v35);
  }
}

void sub_20EC1A1D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17, uint64_t a18, uint64_t a19, void **a20)
{
  std::mutex *v20;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  sub_20EC06DA4(&a20);
  std::mutex::unlock(v20);
  sub_20E8C3144(&a17);
  if (a2 == 1)
  {
    v23 = (uint64_t *)__cxa_begin_catch(a1);
    v24 = *v23;
    a20 = (void **)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
    a10 = (*(uint64_t (**)(void))(v24 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a20, "\n", "message: ", (const char *)&a10, "\n");
    if ((a16 & 0x80u) == 0)
      v25 = &a11;
    else
      v25 = a11;
    if ((a16 & 0x80u) == 0)
      v26 = a16;
    else
      v26 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)&unk_21025775D, 0, (uint64_t)v25, v26, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EC1A358(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EC1A378);
}

uint64_t sub_20EC1A384(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CB978;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1A3C0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24C9CB978;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x212BC6398);
}

char *sub_20EC1A40C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CB978;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9F2020;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  return v3;
}

std::runtime_error *sub_20EC1A484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CB978;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9F2020;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void sub_20EC1A4F0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_20EC1A528(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete((void *)a1);
}

void sub_20EC1A55C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EC19DA8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EC0BEE8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1A604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EC0BEE8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1A650(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1A6BC()
{
  return &unk_24C9CB9D8;
}

_QWORD *sub_20EC1A6C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CB9F8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EC1A750(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9CB9F8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EC1A7E8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CB9F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EC1A878(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CB9F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC1A8E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EC1A968(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EC1A9E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EC19DA8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EC1ACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC1ACEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EC1AAF8);
    JUMPOUT(0x20EC1AAC8);
  }
  sub_20E96CE78(3u);
}

void sub_20EC1AD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EC1AD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EC0BEE8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1AE60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6"
                     "_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispat"
                                "chIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1AECC()
{
  return &unk_24C9CBA58;
}

uint64_t sub_20EC1AED8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CBA78;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EC1AF64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24C9CBA78;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20EC1B000(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9CBA78;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), (const std::runtime_error *)(a1 + 24));
  *((_QWORD *)v3 + 3) = &off_24C9F2020;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v3 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v3 + 7) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

std::runtime_error *sub_20EC1B098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::runtime_error *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9CBA78;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = std::runtime_error::runtime_error((std::runtime_error *)(a2 + 24), (const std::runtime_error *)(a1 + 24));
  *(_QWORD *)(a2 + 24) = &off_24C9F2020;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EC1B124(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EC1B1A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 24));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete((void *)a1);
}

void sub_20EC1B224(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EC19DA8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EC0BEE8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EC1B334(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EC1B3AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EC1B3E0);
  JUMPOUT(0x20EC1B410);
}

uint64_t sub_20EC1B418(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1B484()
{
  return &unk_24C9CBAD8;
}

_QWORD *sub_20EC1B490(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CBAF8;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EC1B4E8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9CBAF8;
  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1B550(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9CBAF8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B4888;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EC1B5C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1B5E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9CBAF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B4888;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EC1B650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EC1B668(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B4888;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EC1B6B8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B4888;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EC1B704(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B4888;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1B7B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1B7F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vect"
                     "orINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorEN"
                                "St3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1B860()
{
  return &unk_24C9CBB58;
}

_QWORD *sub_20EC1B86C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CBB78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1B8A4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CBB78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1B8EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CBB78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EC1B93C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9CBB78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EC1B96C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC1B97C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC1B9A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1BA3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1BA78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vect"
                     "orINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorEN"
                                "St3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12Ch"
                                "annelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1BAE4()
{
  return &unk_24C9CBBD8;
}

_QWORD *sub_20EC1BAF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CBBF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1BB28(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CBBF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1BB70(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CBBF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC1BBC8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CBBF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC1BC00(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC1BC10(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC1BC3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EC1BDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1BE28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1BE94()
{
  return &unk_24C9CBC58;
}

_QWORD *sub_20EC1BEA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9CBC78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1BED8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9CBC78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1BF20(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9CBC78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EC1BF78(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9CBC78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EC1BFB0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EC1BFC0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EC1BFEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1C0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EC1C0F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vec"
                     "torINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorE"
                                "NSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3vio10mapping_io23MappingIONodeGroupErrorENSt3__16vectorINS0_2cf8ErrorRefENS7_9allocatorISA_EEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1C15C()
{
  return &unk_24C9CBCD8;
}

void sub_20EC1C16C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1C190(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EC1C1A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io23MappingIONodeGro"
                     "upErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io23Mappi"
                                "ngIONodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__share"
                                "d_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io23MappingIONodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3vio10mapping_io23MappingIONodeGroupErrorENS_6vectorINS2_2cf8ErrorRefENS_9allocatorISB_EEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EC1C218(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EC1C244(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1C280@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9CC2D8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EC1C2E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1C378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC1C38C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EC1C41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1C430(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC1C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1C508(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EC1C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EC1C5E0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EC1C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EC1C698(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9B50;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B46A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1C87C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9AE8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9C9B18;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1CA60(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9AB8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC500;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1CC44(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9A88;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9B6B38;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1CE28(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24C9C9A58;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_210217048(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C9CCA38;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C9CC5A8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_20EC1D00C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C9C9A28;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_20EC1C698(v2 + 672);
    sub_20EC1C87C(v2 + 504);
    sub_20EC1CA60(v2 + 336);
    sub_20EC1CC44(v2 + 168);
    v3 = sub_20EC1CE28(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40BB27B6B6);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_20EC1C698(v7 + 672);
    sub_20EC1C87C(v7 + 504);
    sub_20EC1CA60(v7 + 336);
    sub_20EC1CC44(v7 + 168);
    v8 = sub_20EC1CE28(v7);
    MEMORY[0x212BC6398](v8, 0x10B2C40BB27B6B6);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20EC1D18C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CBD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EC1D19C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9CBD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1D1CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EC1D1DC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      v8[5] = *((_DWORD *)a2 + 5);
      v9 = *(unsigned int **)v8;
      sub_20EC1D308(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = *(unsigned int **)v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = (unsigned int *)operator new(0x18uLL);
      *(_QWORD *)v10 = 0;
      v11 = a2[2];
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v11;
      sub_20EC1D308(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20EC1D2C0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20EC1D2E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EC1D2F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_20EC1D308(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = (int *)(a2 + 4);
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_20EC1D42C((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_20EC1D42C(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  int v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_20EC1D6B4(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (uint64_t *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_20EC1D6B4(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_20E877A38();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_20EC1D888()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1D89C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CBD98;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1D8D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CBD98;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EC1D8EC(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 4024) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 4024) + 88);
  return result;
}

uint64_t sub_20EC1D910(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1D97C()
{
  return &unk_24C9CBDF8;
}

void sub_20EC1D98C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1D9A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CBE18;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1D9D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CBE18;
  a2[1] = v2;
  return result;
}

void sub_20EC1D9F0(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  if (!*((_BYTE *)*a2 + 48))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v2 + 3769))
    {
      v3 = **a2;
      v4 = *(_QWORD *)(v3 + 4496);
      for (i = *(_QWORD *)(v3 + 4504); v4 != i; v4 += 104)
        sub_20FDC0A98(v2 + 3856, (const char *)(v2 + 3776), v4, *(void (****)(_QWORD, _BYTE *, xpc_object_t *))(v2 + 3824));
    }
  }
}

uint64_t sub_20EC1DA70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1DADC()
{
  return &unk_24C9CBE78;
}

_QWORD *sub_20EC1DAE8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC760;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1DB28(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC760;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1DB78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_20EC1DB88(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC650;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1DBC8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC650;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1DC18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_20EC1DC2C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EC1DC40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9CBE98;
  result[1] = v3;
  return result;
}

uint64_t sub_20EC1DC74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9CBE98;
  a2[1] = v2;
  return result;
}

uint64_t sub_20EC1DC90(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(*(_QWORD *)a2 + 48))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 3936) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(result + 8) + 3936) + 88);
  return result;
}

uint64_t sub_20EC1DCB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E1_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15Map"
                                "EngineConfigEEUlRKT_E1_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E1_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio22slam_engine_node_group13SlamNodeGroup4Impl7ConnectERKNS0_11slam_engine15MapEngineConfigEEUlRKT_E1_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EC1DD20()
{
  return &unk_24C9CBEF8;
}

_QWORD *sub_20EC1DD2C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC5E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20EC1DD6C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C9CC5E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EC1DDBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20EC1DDCC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

