#error "20E82906C: call analysis failed (funcsize=201)"

#error "20E829374: call analysis failed (funcsize=193)"

void sub_20E8293A8(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, double *a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float64x2_t v20;
  int8x16_t v21;
  float64x2_t v22;
  double *v23;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  double *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64_t *v47;
  _QWORD *f64;
  float64_t *v49;
  double *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  _QWORD *v64;
  float64_t v65;
  float64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  _QWORD *v72;
  float64_t v73;
  _QWORD *v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  __n128 *v80;
  int8x16_t *v81;
  double *v82;
  double *v83;
  double v84;
  double *v85;
  double *v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  char v110;

  v23 = a6;
  v27 = a17;
  v100 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  v28 = 0;
  if (a2 >= 2)
  {
    v29 = a2 - 1;
    v30 = 3 * a5;
    v31 = a1 - 3;
    v32 = 32 * a5;
    v33 = a5;
    v34 = 8 * a5;
    v35 = a6;
    v36 = 16 * a7;
    v98 = a17;
    v99 = a8;
    do
    {
      v37 = (__n128 *)(a8 + 8 * v28 * v27);
      v38 = v28 | 1;
      v39 = (int8x16_t *)(a8 + 8 * (v28 | 1) * v27);
      if (a1 <= 3)
      {
        v41 = 0;
        v43 = v38 * a7;
      }
      else
      {
        v40 = v36;
        v41 = 0;
        v42 = (float64x2_t *)&v23[v28 * a7];
        v43 = v38 * a7;
        v44 = v23;
        v45 = (float64x2_t *)&v23[v38 * a7];
        v46 = a4;
        do
        {
          v47 = &a4->f64[(unint64_t)v34 / 8];
          f64 = (_QWORD *)a4[v33].f64;
          v49 = &a4->f64[v30];
          v50 = (double *)v42;
          v51 = (double *)v45;
          v52 = a4;
          v53 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
          v54 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
          v55 = (float64x2_t)veorq_s8(v17, v17);
          v56 = (float64x2_t)veorq_s8(v18, v18);
          v57 = (float64x2_t)veorq_s8(v19, v19);
          v58 = (float64x2_t)veorq_s8((int8x16_t)v20, (int8x16_t)v20);
          v59 = (float64x2_t)veorq_s8(v21, v21);
          v60 = (float64x2_t)veorq_s8((int8x16_t)v22, (int8x16_t)v22);
          if (a3 >= 2)
          {
            v62.f64[0] = a4->f64[0];
            v52 = a4 + 1;
            v63.f64[0] = a4->f64[1];
            v62.f64[1] = *v47;
            v63.f64[1] = v47[1];
            v61 = v47 + 2;
            v65 = *(double *)f64;
            v64 = f64 + 1;
            v67.f64[0] = v65;
            v66 = *(double *)v64;
            f64 = v64 + 1;
            v68.f64[0] = v66;
            v67.f64[1] = *v49;
            v68.f64[1] = v49[1];
            v49 += 2;
            v50 = v42[1].f64;
            v69 = *v42;
            v51 = v45[1].f64;
            v70 = *v45;
            v71 = ((unint64_t)a3 >> 1) - 1;
            if ((unint64_t)a3 >> 1 > 1)
            {
              do
              {
                v53 = vmlaq_n_f64(v53, v62, v69.f64[0]);
                v54 = vmlaq_n_f64(v54, v67, v69.f64[0]);
                v55 = vmlaq_n_f64(v55, v62, v70.f64[0]);
                v73 = v52->f64[0];
                v72 = (_QWORD *)&v52->f64[1];
                v62.f64[0] = v73;
                v56 = vmlaq_n_f64(v56, v67, v70.f64[0]);
                v75 = *(double *)f64;
                v74 = f64 + 1;
                v67.f64[0] = v75;
                v57 = vmlaq_laneq_f64(v57, v63, v69, 1);
                v58 = vmlaq_laneq_f64(v58, v68, v69, 1);
                v76 = *(float64x2_t *)v50;
                v50 += 2;
                v69 = v76;
                v59 = vmlaq_laneq_f64(v59, v63, v70, 1);
                v76.f64[0] = *(float64_t *)v72;
                v52 = (float64x2_t *)(v72 + 1);
                v63.f64[0] = v76.f64[0];
                v60 = vmlaq_laneq_f64(v60, v68, v70, 1);
                v76.f64[0] = *(float64_t *)v74;
                f64 = v74 + 1;
                v68.f64[0] = v76.f64[0];
                v62.f64[1] = *v61;
                v63.f64[1] = v61[1];
                v61 += 2;
                v67.f64[1] = *v49;
                v68.f64[1] = v49[1];
                v49 += 2;
                v77 = *(float64x2_t *)v51;
                v51 += 2;
                v70 = v77;
              }
              while (v71-- > 1);
            }
            v53 = vaddq_f64(vmlaq_n_f64(v53, v62, v69.f64[0]), vmlaq_laneq_f64(v57, v63, v69, 1));
            v54 = vaddq_f64(vmlaq_n_f64(v54, v67, v69.f64[0]), vmlaq_laneq_f64(v58, v68, v69, 1));
            v55 = vaddq_f64(vmlaq_n_f64(v55, v62, v70.f64[0]), vmlaq_laneq_f64(v59, v63, v70, 1));
            v56 = vaddq_f64(vmlaq_n_f64(v56, v67, v70.f64[0]), vmlaq_laneq_f64(v60, v68, v70, 1));
          }
          if ((a3 & 1) != 0)
          {
            v79.f64[0] = *(float64_t *)f64;
            v79.f64[1] = *v49;
            v53 = vmlaq_n_f64(v53, *v52, *v50);
            v54 = vmlaq_n_f64(v54, v79, *v50);
            v55 = vmlaq_n_f64(v55, *v52, *v51);
            v56 = vmlaq_n_f64(v56, v79, *v51);
          }
          v19 = *(int8x16_t *)v37;
          v20 = (float64x2_t)v37[1];
          v21 = *v39;
          v22 = (float64x2_t)v39[1];
          a15 = vmlaq_laneq_f64(vmulq_n_f64(v53, a9.f64[0]), *(float64x2_t *)v37, a9, 1);
          a16 = vmlaq_laneq_f64(vmulq_n_f64(v54, a9.f64[0]), v20, a9, 1);
          v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v55, a9.f64[0]), *(float64x2_t *)v39, a9, 1);
          v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), v22, a9, 1);
          *v37 = (__n128)a15;
          v80 = v37 + 1;
          *v80 = (__n128)a16;
          v37 = v80 + 1;
          *v39 = v17;
          v81 = v39 + 1;
          *v81 = v18;
          v39 = v81 + 1;
          v41 += 4;
          a4 = (float64x2_t *)((char *)a4 + v32);
        }
        while (v41 < v31);
        a4 = v46;
        v36 = v40;
        v23 = v44;
        v27 = a17;
        a8 = v99;
      }
      if (v41 < a1)
      {
        v82 = &v23[v43];
        v83 = (double *)((char *)a4->f64 + v34 * v41);
        do
        {
          if (a3 < 1)
          {
            v89 = 0.0;
            v84 = 0.0;
          }
          else
          {
            v84 = 0.0;
            v85 = v35;
            v86 = v83;
            v87 = v82;
            v88 = a3;
            v89 = 0.0;
            do
            {
              v90 = *v85++;
              v91 = v90;
              v92 = *v86++;
              v93 = v92;
              v89 = v89 + v91 * v92;
              v94 = *v87++;
              v84 = v84 + v94 * v93;
              --v88;
            }
            while (v88);
          }
          a14.f64[0] = a9.f64[0];
          v37->n128_f64[0] = v89 * a9.f64[0] + v37->n128_f64[0] * *(double *)&v100;
          v37 = (__n128 *)((char *)v37 + 8);
          *(_QWORD *)&a11.f64[0] = v39->i64[0];
          *(_QWORD *)&a12.f64[0] = v100;
          a13.f64[0] = a9.f64[0];
          *(double *)v39->i64 = v84 * a9.f64[0] + *(double *)v39->i64 * *(double *)&v100;
          v39 = (int8x16_t *)((char *)v39 + 8);
          ++v41;
          v83 = (double *)((char *)v83 + v34);
        }
        while (v41 != a1);
      }
      v28 += 2;
      v35 = (double *)((char *)v35 + v36);
    }
    while (v28 < v29);
  }
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)&a10.f64[0] = v100;
    LODWORD(v95) = 1;
    sub_20E83D294(101, 111, a1, a3, (uint64_t)a4, a5, (uint64_t)&v23[v28 * a7], 1, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v28 * v27), v95, a5,
      a2,
      v98,
      v99,
      v100,
      *(uint64_t *)&a9.f64[0],
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110);
  }
}

void sub_20E829704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17)
{
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  double *v28;
  double *f64;
  double *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  __n128 *v58;
  int8x16_t *v59;
  double *v60;
  double v61;
  double *v62;
  uint64_t v63;
  double *v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  char vars0;

  v68 = *(uint64_t *)&a10.f64[0];
  a9.f64[1] = a10.f64[0];
  if (a2 < 2)
  {
    v20 = 0;
    if ((a2 & 1) == 0)
      return;
    goto LABEL_25;
  }
  v20 = 0;
  v21 = (double *)(a6 + 8);
  v22 = 8 * a5;
  do
  {
    v23 = (float64x2_t *)(a8 + 8 * v20 * a17);
    v24 = (float64x2_t *)(a8 + 8 * (v20 | 1) * a17);
    if (a1 < 4)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v26 = (float64x2_t *)(a6 + 8 * v20);
      v27 = (float64x2_t *)a4;
      do
      {
        v28 = &v27->f64[(unint64_t)v22 / 8];
        f64 = v27[a5].f64;
        v30 = &v27->f64[3 * a5];
        v31 = (double *)v27;
        v32 = (float64x2_t *)(a6 + 8 * v20);
        v33 = (float64x2_t)veorq_s8((int8x16_t)a15, (int8x16_t)a15);
        v34 = (float64x2_t)veorq_s8((int8x16_t)a16, (int8x16_t)a16);
        v35 = (float64x2_t)veorq_s8(v17, v17);
        v36 = (float64x2_t)veorq_s8(v18, v18);
        if (a3 >= 2)
        {
          v37 = *v26;
          v38 = *(float64x2_t *)((char *)v26 + 8 * a7);
          v31 = v27[1].f64;
          v39 = *v27;
          v40 = *(float64x2_t *)v28;
          v28 += 2;
          v41 = v40;
          v42 = *(float64x2_t *)f64;
          f64 += 2;
          v43 = v42;
          v44 = *(float64x2_t *)v30;
          v30 += 2;
          v45 = v44;
          v46 = ((unint64_t)a3 >> 1) - 1;
          if ((unint64_t)a3 >> 1 > 1)
          {
            do
            {
              v32 += a7;
              v47 = vmlaq_n_f64(v33, v37, v39.f64[0]);
              v48 = vmlaq_n_f64(v34, v37, v41.f64[0]);
              v49 = vmlaq_n_f64(v35, v37, v43.f64[0]);
              v50 = vmlaq_n_f64(v36, v37, v45.f64[0]);
              v37 = *v32;
              v33 = vmlaq_laneq_f64(v47, v38, v39, 1);
              v51 = *(float64x2_t *)v31;
              v31 += 2;
              v39 = v51;
              v34 = vmlaq_laneq_f64(v48, v38, v41, 1);
              v52 = *(float64x2_t *)v28;
              v28 += 2;
              v41 = v52;
              v35 = vmlaq_laneq_f64(v49, v38, v43, 1);
              v53 = *(float64x2_t *)f64;
              f64 += 2;
              v43 = v53;
              v36 = vmlaq_laneq_f64(v50, v38, v45, 1);
              v54 = *(float64x2_t *)v30;
              v30 += 2;
              v45 = v54;
              v38 = *(float64x2_t *)((char *)v32 + 8 * a7);
            }
            while (v46-- > 1);
          }
          v32 += a7;
          v33 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v37, v39.f64[0]), v38, v39, 1);
          v34 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v37, v41.f64[0]), v38, v41, 1);
          v35 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v37, v43.f64[0]), v38, v43, 1);
          v36 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v37, v45.f64[0]), v38, v45, 1);
        }
        if ((a3 & 1) != 0)
        {
          v33 = vmlaq_n_f64(v33, *v32, *v31);
          v34 = vmlaq_n_f64(v34, *v32, *v28);
          v35 = vmlaq_n_f64(v35, *v32, *f64);
          v36 = vmlaq_n_f64(v36, *v32, *v30);
        }
        v56 = (float64x2_t)vtrn2q_s64((int64x2_t)v33, (int64x2_t)v34);
        v57 = (float64x2_t)vtrn2q_s64((int64x2_t)v35, (int64x2_t)v36);
        a15 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v33, (int64x2_t)v34), a9.f64[0]), *v23, a9, 1);
        a16 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vtrn1q_s64((int64x2_t)v35, (int64x2_t)v36), a9.f64[0]), v23[1], a9, 1);
        v17 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v56, a9.f64[0]), *v24, a9, 1);
        v18 = (int8x16_t)vmlaq_laneq_f64(vmulq_n_f64(v57, a9.f64[0]), v24[1], a9, 1);
        *v23 = a15;
        v58 = (__n128 *)&v23[1];
        *v58 = (__n128)a16;
        v23 = (float64x2_t *)&v58[1];
        *v24 = (float64x2_t)v17;
        v59 = (int8x16_t *)&v24[1];
        *v59 = v18;
        v24 = (float64x2_t *)&v59[1];
        v25 += 4;
        v27 += 2 * a5;
      }
      while (v25 < a1 - 3);
    }
    if (v25 < a1)
    {
      v60 = (double *)(a4 + v22 * v25);
      do
      {
        if (a3 < 1)
        {
          v65 = 0.0;
          v61 = 0.0;
        }
        else
        {
          v61 = 0.0;
          v62 = v60;
          v63 = a3;
          v64 = v21;
          v65 = 0.0;
          do
          {
            v66 = *v62++;
            v65 = v65 + *(v64 - 1) * v66;
            v61 = v61 + *v64 * v66;
            v64 += a7;
            --v63;
          }
          while (v63);
        }
        a14.f64[0] = a9.f64[0];
        v23->f64[0] = v65 * a9.f64[0] + v23->f64[0] * *(double *)&v68;
        v23 = (float64x2_t *)((char *)v23 + 8);
        a11.f64[0] = v24->f64[0];
        *(_QWORD *)&a12.f64[0] = v68;
        a13.f64[0] = a9.f64[0];
        v24->f64[0] = v61 * a9.f64[0] + v24->f64[0] * *(double *)&v68;
        v24 = (float64x2_t *)((char *)v24 + 8);
        ++v25;
        v60 = (double *)((char *)v60 + v22);
      }
      while (v25 != a1);
    }
    v20 += 2;
    v21 += 2;
  }
  while (v20 < a2 - 1);
  if ((a2 & 1) != 0)
  {
LABEL_25:
    *(_QWORD *)&a10.f64[0] = v68;
    LODWORD(v67) = 1;
    sub_20E83D294(101, 111, a1, a3, a4, a5, a6 + 8 * v20, a7, a9, a10, a11, a12, a13, a14, a15, a16, (double *)(a8 + 8 * v20 * a17), v67, v68,
      *(uint64_t *)&a9.f64[0],
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      vars0);
  }
}

uint64_t sub_20E829A08(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, __CLPK_integer *a5, __CLPK_integer *a6, __CLPK_integer *a7, __CLPK_doublereal *a8, __CLPK_integer *a9, int a10, int *a11, __CLPK_doublereal *a12, __CLPK_integer *a13, uint64_t a14, int *a15)
{
  uint64_t v18;
  uint64_t v19;
  __CLPK_doublereal *v20;
  char v21;
  int v22;
  int v23;
  __CLPK_integer v24;
  __CLPK_integer v25;
  __CLPK_integer v26;
  int v27;
  uint64_t v28;
  double *v29;
  double *v30;
  __CLPK_integer v31;
  __CLPK_integer v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double v42;
  int v43;
  int v44;
  __CLPK_integer v45;
  __CLPK_integer v46;
  __CLPK_integer v47;
  int v48;
  uint64_t v49;
  double *v50;
  double *v51;
  __CLPK_integer v52;
  __CLPK_integer v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  int *v64;
  __CLPK_integer v65;
  __CLPK_integer v66;
  __CLPK_integer v67;
  int v68;
  uint64_t v69;
  double *v70;
  __CLPK_integer v71;
  __CLPK_integer v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  int v81;
  double v82;
  __CLPK_integer v83;
  __CLPK_integer v84;
  __CLPK_integer v85;
  int v86;
  uint64_t v87;
  double *v88;
  double *v89;
  __CLPK_integer v90;
  __CLPK_integer v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  double *v101;
  double v102;
  int *v103;
  __CLPK_integer v104;
  __CLPK_integer v105;
  __CLPK_integer v106;
  int v107;
  uint64_t v108;
  double *v109;
  __CLPK_integer v110;
  __CLPK_integer v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double *v119;
  int v120;
  double v121;
  __CLPK_integer v122;
  __CLPK_integer v123;
  __CLPK_integer v124;
  int v125;
  uint64_t v126;
  double *v127;
  __CLPK_integer v128;
  __CLPK_integer v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  uint64_t v137;
  double *v138;
  double v139;
  __CLPK_integer v140;
  __CLPK_integer v141;
  __CLPK_integer v142;
  int v143;
  uint64_t v144;
  double *v145;
  double *v146;
  __CLPK_integer v147;
  __CLPK_integer v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double *v157;
  double *v158;
  double v159;
  __CLPK_integer v160;
  __CLPK_integer v161;
  __CLPK_integer v162;
  int v163;
  uint64_t v164;
  double *v165;
  __CLPK_integer v166;
  __CLPK_integer v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  double *v174;
  uint64_t v175;
  double *v176;
  double v177;
  __CLPK_doublereal *v179;
  __CLPK_doublereal *v180;
  uint64_t v182;
  __CLPK_doublereal *v183;
  __CLPK_integer v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  __CLPK_integer __m;
  int n;
  int v191[3];

  if (*a5 >= 1 && *a6 >= 1)
  {
    v18 = a14;
    v184 = *a9;
    v183 = &a8[~*a9];
    v19 = *a13;
    v182 = ~(_DWORD)v19;
    v20 = &a12[v182];
    v185 = *a15;
    v186 = ~(_DWORD)v185;
    n = 0;
    if (lsame_())
      v21 = 84;
    else
      v21 = 78;
    v188 = v21;
    if (lsame_())
    {
      v22 = lsame_();
      v23 = lsame_();
      if (v22)
      {
        if (v23)
        {
          v191[0] = *a7;
          v24 = iladlr_(a5, a7, a8, a9);
          if (v191[0] <= v24)
            v25 = v24;
          else
            v25 = v191[0];
          __m = v25;
          v26 = iladlc_(&__m, a6, a12, a13);
          v27 = *a7;
          n = v26;
          v191[0] = v27;
          if (v27 >= 1)
          {
            v28 = 0;
            v29 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v30 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v30, a13, v29, (int *)&unk_254A4A420);
              ++v28;
              v29 += v185;
              ++v30;
            }
            while (v28 < v191[0]);
          }
          sub_20E8396D8("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v31 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("Transpose", "No transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * (v31 + 1 + v19), a13, (uint64_t)&v183[v31 + 1 + v184], a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
          }
          sub_20E8396D8("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
          v32 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("No transpose", "Transpose", v191, &n, a7, (uint64_t)&unk_254A4A430, (_DWORD)v183 + 8 * (v32 + 1 + v184), a9, a14, a15, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * (v32 + 1 + v19), (unint64_t)&v20[v32 + 1 + (int)v19] >> 32, a13);
          }
          sub_20E8396D8("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v33 = *a7;
          if ((int)v33 >= 1)
          {
            v34 = n;
            v35 = v33 + 1;
            v36 = (uint64_t)&a12[v19 + 1 + v182];
            v37 = 8 * v185 + 8 * v186 + a14 + 8;
            v38 = 1;
            do
            {
              if (v34 >= 1)
              {
                v39 = (v34 + 1) - 1;
                v40 = (double *)v37;
                v41 = (double *)v36;
                do
                {
                  v42 = *v40++;
                  *v41 = *v41 - v42;
                  v41 += v19;
                  --v39;
                }
                while (v39);
              }
              ++v38;
              v36 += 8;
              v37 += 8 * v185;
            }
            while (v38 != v35);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v83 = iladlr_(a6, a7, a8, a9);
          if (v191[0] <= v83)
            v84 = v83;
          else
            v84 = v191[0];
          __m = v84;
          v85 = iladlr_(a5, &__m, a12, a13);
          v86 = *a7;
          n = v85;
          v191[0] = v86;
          if (v86 >= 1)
          {
            v87 = 0;
            v88 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v89 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v89, (int *)&unk_254A4A420, v88, (int *)&unk_254A4A420);
              ++v87;
              v88 += v185;
              v89 += v19;
            }
            while (v87 < v191[0]);
          }
          sub_20E8396D8("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v90 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("No transpose", "No transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * ((v90 + 1) * v19 + 1), a13, (uint64_t)&v183[v90 + 1 + v184], a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
          }
          sub_20E8396D8("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
          v91 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v92 = v91 + 1;
            v179 = &v20[v92 * (int)v19 + 1];
            sub_20E8395AC("No transpose", "Transpose", &n, v191, a7, (uint64_t)&unk_254A4A430, a14, a15, (uint64_t)&v183[v92 + v184], a9, (uint64_t)&unk_254A4A428, (int)v179, SHIDWORD(v179), a13);
          }
          sub_20E8396D8("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v93 = *a7;
          if ((int)v93 >= 1)
          {
            v94 = n;
            v95 = v93 + 1;
            v96 = (uint64_t)&a12[v19 + 1 + v182];
            v97 = 8 * v185 + 8 * v186 + a14 + 8;
            v98 = 1;
            do
            {
              if (v94 >= 1)
              {
                v99 = (v94 + 1) - 1;
                v100 = (double *)v97;
                v101 = (double *)v96;
                do
                {
                  v102 = *v100++;
                  *v101 = *v101 - v102;
                  ++v101;
                  --v99;
                }
                while (v99);
              }
              ++v98;
              v96 += 8 * v19;
              v97 += 8 * v185;
            }
            while (v98 != v95);
          }
        }
      }
      else if (v23)
      {
        v191[0] = *a7;
        v64 = a9;
        v65 = iladlr_(a5, a7, a8, a9);
        if (v191[0] <= v65)
          v66 = v65;
        else
          v66 = v191[0];
        __m = v66;
        v67 = iladlc_(&__m, a6, a12, a13);
        v68 = *a7;
        n = v67;
        v191[0] = v68;
        if (v68 >= 1)
        {
          v69 = 0;
          v70 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v69++ + __m - *a7], a13, v70, (int *)&unk_254A4A420);
            v70 += v185;
          }
          while (v69 < v191[0]);
          v68 = *a7;
          v18 = a14;
          v64 = a9;
        }
        sub_20E8396D8("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + 1 + __m - v68), v64, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("Transpose", "No transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (int)a12, a13, (uint64_t)a8, v64, (uint64_t)&unk_254A4A428, v18, SHIDWORD(v18), a15);
        }
        sub_20E8396D8("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, v18, a15);
        v71 = __m;
        v72 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("No transpose", "Transpose", v191, &n, a7, (uint64_t)&unk_254A4A430, (int)a8, v64, v18, a15, (uint64_t)&unk_254A4A428, (int)a12, SHIDWORD(a12), a13);
          v71 = __m;
          v72 = *a7;
        }
        sub_20E8396D8("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + 1 + v71 - v72), v64, v18, a15);
        v73 = *a7;
        if ((int)v73 >= 1)
        {
          v74 = n;
          v75 = v73 + 1;
          v76 = __m + v19 - v73 + 1;
          v77 = 8 * v185 + 8 * v186 + v18 + 8;
          v78 = 1;
          do
          {
            if (v74 >= 1)
            {
              v79 = (v74 + 1) - 1;
              v80 = (double *)v77;
              v81 = v76;
              do
              {
                v82 = *v80++;
                v20[v81] = v20[v81] - v82;
                v81 += v19;
                --v79;
              }
              while (v79);
            }
            ++v78;
            ++v76;
            v77 += 8 * v185;
          }
          while (v78 != v75);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v122 = iladlr_(a6, a7, a8, a9);
        if (v191[0] <= v122)
          v123 = v122;
        else
          v123 = v191[0];
        __m = v123;
        v124 = iladlr_(a5, &__m, a12, a13);
        v125 = *a7;
        n = v124;
        v191[0] = v125;
        if (v125 >= 1)
        {
          v126 = 0;
          v127 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v126++ + *a6 - *a7)], (int *)&unk_254A4A420, v127, (int *)&unk_254A4A420);
            v127 += v185;
          }
          while (v126 < v191[0]);
          v125 = *a7;
        }
        sub_20E8396D8("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + 1 + __m - v125), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("No transpose", "No transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
        }
        sub_20E8396D8("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
        v128 = __m;
        v129 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("No transpose", "Transpose", &n, v191, a7, (uint64_t)&unk_254A4A430, a14, a15, (uint64_t)a8, a9, (uint64_t)&unk_254A4A428, (int)a12, SHIDWORD(a12), a13);
          v128 = __m;
          v129 = *a7;
        }
        sub_20E8396D8("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + 1 + v128 - v129), a9, a14, a15);
        v130 = *a7;
        if ((int)v130 >= 1)
        {
          v131 = n;
          v132 = v130 + 1;
          v133 = v19 + v19 * (__m - v130);
          v134 = 8 * v185 + 8 * v186 + a14 + 8;
          v135 = 1;
          do
          {
            if (v131 >= 1)
            {
              v136 = &a12[v182 + 1 + v133];
              v137 = (v131 + 1) - 1;
              v138 = (double *)v134;
              do
              {
                v139 = *v138++;
                *v136 = *v136 - v139;
                ++v136;
                --v137;
              }
              while (v137);
            }
            ++v135;
            v133 += v19;
            v134 += 8 * v185;
          }
          while (v135 != v132);
        }
      }
    }
    else if (lsame_())
    {
      v43 = lsame_();
      v44 = lsame_();
      if (v43)
      {
        if (v44)
        {
          v191[0] = *a7;
          v45 = iladlc_(a7, a5, a8, a9);
          if (v191[0] <= v45)
            v46 = v45;
          else
            v46 = v191[0];
          __m = v46;
          v47 = iladlc_(&__m, a6, a12, a13);
          v48 = *a7;
          n = v47;
          v191[0] = v48;
          if (v48 >= 1)
          {
            v49 = 0;
            v50 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v51 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v51, a13, v50, (int *)&unk_254A4A420);
              ++v49;
              v50 += v185;
              ++v51;
            }
            while (v49 < v191[0]);
          }
          sub_20E8396D8("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v52 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("Transpose", "Transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * (v52 + 1 + v19), a13, (uint64_t)&v183[(v52 + 1) * v184 + 1], a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
          }
          sub_20E8396D8("Right", "Upper", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
          v53 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("Transpose", "Transpose", v191, &n, a7, (uint64_t)&unk_254A4A430, (_DWORD)v183 + 8 * ((v53 + 1) * v184 + 1), a9, a14, a15, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * (v53 + 1 + v19), (unint64_t)&v20[v53 + 1 + (int)v19] >> 32, a13);
          }
          sub_20E8396D8("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v54 = *a7;
          if ((int)v54 >= 1)
          {
            v55 = n;
            v56 = v54 + 1;
            v57 = (uint64_t)&a12[v19 + 1 + v182];
            v58 = 8 * v185 + 8 * v186 + a14 + 8;
            v59 = 1;
            do
            {
              if (v55 >= 1)
              {
                v60 = (v55 + 1) - 1;
                v61 = (double *)v58;
                v62 = (double *)v57;
                do
                {
                  v63 = *v61++;
                  *v62 = *v62 - v63;
                  v62 += v19;
                  --v60;
                }
                while (v60);
              }
              ++v59;
              v57 += 8;
              v58 += 8 * v185;
            }
            while (v59 != v56);
          }
        }
        else if (lsame_())
        {
          v191[0] = *a7;
          v140 = iladlc_(a7, a6, a8, a9);
          if (v191[0] <= v140)
            v141 = v140;
          else
            v141 = v191[0];
          __m = v141;
          v142 = iladlr_(a5, &__m, a12, a13);
          v143 = *a7;
          n = v142;
          v191[0] = v143;
          if (v143 >= 1)
          {
            v144 = 0;
            v145 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
            v146 = &a12[v19 + 1 + v182];
            do
            {
              dcopy_(&n, v146, (int *)&unk_254A4A420, v145, (int *)&unk_254A4A420);
              ++v144;
              v145 += v185;
              v146 += v19;
            }
            while (v144 < v191[0]);
          }
          sub_20E8396D8("Right", "Upper", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v147 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            sub_20E8395AC("No transpose", "Transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (_DWORD)v20 + 8 * ((v147 + 1) * v19 + 1), a13, (uint64_t)&v183[(v147 + 1) * v184 + 1], a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
          }
          sub_20E8396D8("Right", "Upper", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
          v148 = *a7;
          if (__m > *a7)
          {
            v191[0] = __m - *a7;
            v149 = v148 + 1;
            v180 = &v20[v149 * (int)v19 + 1];
            sub_20E8395AC("No transpose", "No transpose", &n, v191, a7, (uint64_t)&unk_254A4A430, a14, a15, (uint64_t)&v183[v149 * v184 + 1], a9, (uint64_t)&unk_254A4A428, (int)v180, SHIDWORD(v180), a13);
          }
          sub_20E8396D8("Right", "Upper", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (int)a8, a9, a14, a15);
          v150 = *a7;
          if ((int)v150 >= 1)
          {
            v151 = n;
            v152 = v150 + 1;
            v153 = (uint64_t)&a12[v19 + 1 + v182];
            v154 = 8 * v185 + 8 * v186 + a14 + 8;
            v155 = 1;
            do
            {
              if (v151 >= 1)
              {
                v156 = (v151 + 1) - 1;
                v157 = (double *)v154;
                v158 = (double *)v153;
                do
                {
                  v159 = *v157++;
                  *v158 = *v158 - v159;
                  ++v158;
                  --v156;
                }
                while (v156);
              }
              ++v155;
              v153 += 8 * v19;
              v154 += 8 * v185;
            }
            while (v155 != v152);
          }
        }
      }
      else if (v44)
      {
        v191[0] = *a7;
        v103 = a9;
        v104 = iladlc_(a7, a5, a8, a9);
        if (v191[0] <= v104)
          v105 = v104;
        else
          v105 = v191[0];
        __m = v105;
        v106 = iladlc_(&__m, a6, a12, a13);
        v107 = *a7;
        n = v106;
        v191[0] = v107;
        if (v107 >= 1)
        {
          v108 = 0;
          v109 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v108++ + __m - *a7], a13, v109, (int *)&unk_254A4A420);
            v109 += v185;
          }
          while (v108 < v191[0]);
          v107 = *a7;
          v18 = a14;
          v103 = a9;
        }
        sub_20E8396D8("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + v184 * (__m - v107) + 1), v103, v18, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("Transpose", "Transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (int)a12, a13, (uint64_t)a8, v103, (uint64_t)&unk_254A4A428, v18, SHIDWORD(v18), a15);
        }
        sub_20E8396D8("Right", "Lower", &v188, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, v18, a15);
        v110 = __m;
        v111 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("Transpose", "Transpose", v191, &n, a7, (uint64_t)&unk_254A4A430, (int)a8, v103, v18, a15, (uint64_t)&unk_254A4A428, (int)a12, SHIDWORD(a12), a13);
          v110 = __m;
          v111 = *a7;
        }
        sub_20E8396D8("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + v184 * (v110 - v111) + 1), v103, v18, a15);
        v112 = *a7;
        if ((int)v112 >= 1)
        {
          v113 = n;
          v114 = v112 + 1;
          v115 = __m + v19 - v112 + 1;
          v116 = 8 * v185 + 8 * v186 + v18 + 8;
          v117 = 1;
          do
          {
            if (v113 >= 1)
            {
              v118 = (v113 + 1) - 1;
              v119 = (double *)v116;
              v120 = v115;
              do
              {
                v121 = *v119++;
                v20[v120] = v20[v120] - v121;
                v120 += v19;
                --v118;
              }
              while (v118);
            }
            ++v117;
            ++v115;
            v116 += 8 * v185;
          }
          while (v117 != v114);
        }
      }
      else if (lsame_())
      {
        v191[0] = *a7;
        v160 = iladlc_(a7, a6, a8, a9);
        if (v191[0] <= v160)
          v161 = v160;
        else
          v161 = v191[0];
        __m = v161;
        v162 = iladlr_(a5, &__m, a12, a13);
        v163 = *a7;
        n = v162;
        v191[0] = v163;
        if (v163 >= 1)
        {
          v164 = 0;
          v165 = (double *)(8 * v185 + 8 * v186 + a14 + 8);
          do
          {
            dcopy_(&n, &v20[(int)v19 + 1 + (int)v19 * ((int)v164++ + __m - *a7)], (int *)&unk_254A4A420, v165, (int *)&unk_254A4A420);
            v165 += v185;
          }
          while (v164 < v191[0]);
          v163 = *a7;
        }
        sub_20E8396D8("Right", "Lower", "Transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + v184 * (__m - v163) + 1), a9, a14, a15);
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("No transpose", "Transpose", &n, a7, v191, (uint64_t)&unk_254A4A428, (int)a12, a13, (uint64_t)a8, a9, (uint64_t)&unk_254A4A428, a14, SHIDWORD(a14), a15);
        }
        sub_20E8396D8("Right", "Lower", a2, "Non-unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, a10, a11, a14, a15);
        v166 = __m;
        v167 = *a7;
        if (__m > *a7)
        {
          v191[0] = __m - *a7;
          sub_20E8395AC("No transpose", "No transpose", &n, v191, a7, (uint64_t)&unk_254A4A430, a14, a15, (uint64_t)a8, a9, (uint64_t)&unk_254A4A428, (int)a12, SHIDWORD(a12), a13);
          v166 = __m;
          v167 = *a7;
        }
        sub_20E8396D8("Right", "Lower", "No transpose", "Unit", (unsigned int *)&n, (unsigned int *)a7, (uint64_t)&unk_254A4A428, (_DWORD)v183 + 8 * (v184 + v184 * (v166 - v167) + 1), a9, a14, a15);
        v168 = *a7;
        if ((int)v168 >= 1)
        {
          v169 = n;
          v170 = v168 + 1;
          v171 = v19 + v19 * (__m - v168);
          v172 = 8 * v185 + 8 * v186 + a14 + 8;
          v173 = 1;
          do
          {
            if (v169 >= 1)
            {
              v174 = &a12[v182 + 1 + v171];
              v175 = (v169 + 1) - 1;
              v176 = (double *)v172;
              do
              {
                v177 = *v176++;
                *v174 = *v174 - v177;
                ++v174;
                --v175;
              }
              while (v175);
            }
            ++v173;
            v171 += v19;
            v172 += 8 * v185;
          }
          while (v173 != v170);
        }
      }
    }
  }
  return 0;
}

uint64_t sub_20E82B2D8(char *a1, __CLPK_integer *a2, __CLPK_doublereal *a3, int *a4, __CLPK_integer *a5)
{
  int v9;
  int v10;
  __CLPK_integer v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __CLPK_integer v20;
  __CLPK_doublereal *v21;
  __CLPK_doublereal *v22;
  __CLPK_integer v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  __CLPK_integer v29;
  __CLPK_doublereal *v30;
  int v31;
  __CLPK_integer *v32;
  __CLPK_doublereal *v33;
  uint64_t v34;
  __CLPK_integer __n;
  __CLPK_integer v37;
  int v38;

  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v12 = -1;
    goto LABEL_15;
  }
  v34 = *a2;
  if ((v34 & 0x80000000) != 0)
  {
    v12 = -2;
    goto LABEL_15;
  }
  if (v34 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  if (*a4 < v11)
  {
    v12 = -4;
LABEL_15:
    *a5 = v12;
    goto LABEL_16;
  }
  v12 = *a5;
  if (*a5)
  {
LABEL_16:
    v38 = -v12;
    xerbla_();
    return 0;
  }
  v31 = v9;
  if ((_DWORD)v34)
  {
    if (v34 > 0x18)
    {
      v14 = ~v9;
      v32 = a2;
      v33 = &a3[v14];
      if (v10)
      {
        v15 = 0;
        v16 = 0;
        v17 = (uint64_t)&a3[v31 + 1 + v14];
        v18 = 1;
        v19 = v31;
        do
        {
          v20 = v15 + *a2;
          v37 = v20;
          v38 = v16;
          if (v20 - 1 > 22)
            v20 = 24;
          __n = v20;
          v21 = &v33[v16 + v19];
          v22 = v21 + 1;
          sub_20E8396D8("Right", "Upper", "Transpose", "Non-unit", (unsigned int *)&v38, (unsigned int *)&__n, (uint64_t)&dbl_254A4A438, (_DWORD)v21 + 8, a4, v17, a4);
          dlauu2_("Upper", &__n, v22, a4, a5);
          v23 = v16 + __n + 1;
          if (v23 <= *a2)
          {
            v37 = v15 + *a2 - __n;
            v38 = v16;
            sub_20E8395AC("No transpose", "Transpose", &v38, &__n, &v37, (uint64_t)&dbl_254A4A438, (_DWORD)v33 + 8 * (v23 * v31 + 1), a4, (uint64_t)&v33[v16 + 1 + v31 * (__n + v18)], a4, (uint64_t)&dbl_254A4A438, v17, SHIDWORD(v17), a4);
            v38 = v15 + *v32 - __n;
            a2 = v32;
            sub_20E839A00("Upper", "No transpose", (unsigned int *)&__n, (unsigned int *)&v38, &dbl_254A4A438, (uint64_t)&v33[v16 + 1 + v31 * (__n + v18)], (unsigned int *)a4, &dbl_254A4A438, (uint64_t)v22, a4);
          }
          v24 = v16 + 25;
          v16 += 24;
          v15 -= 24;
          v19 += 24 * v31;
          v17 += 192 * v31;
          v18 += 24;
        }
        while (v24 <= v34);
      }
      else
      {
        v25 = 0;
        v26 = v31 + 1;
        v27 = (uint64_t)&a3[v14 + 1 + v31];
        v28 = 1;
        do
        {
          v29 = v25 + *a2;
          v37 = v29;
          if (v29 - 1 > 22)
            v29 = 24;
          __n = v29;
          v38 = v28 - 1;
          v30 = &v33[v26];
          sub_20E8396D8("Left", "Lower", "Transpose", "Non-unit", (unsigned int *)&__n, (unsigned int *)&v38, (uint64_t)&dbl_254A4A438, (_DWORD)v33 + 8 * v26, a4, v27, a4);
          dlauu2_("Lower", &__n, v30, a4, a5);
          if (v28 + __n <= *a2)
          {
            v37 = v25 + *a2 - __n;
            v38 = v28 - 1;
            sub_20E8395AC("Transpose", "No transpose", &__n, &v38, &v37, (uint64_t)&dbl_254A4A438, (_DWORD)v33 + 8 * (v26 + __n), a4, (uint64_t)&v33[v31 + v28 + __n], a4, (uint64_t)&dbl_254A4A438, v27, SHIDWORD(v27), a4);
            v38 = v25 + *v32 - __n;
            a2 = v32;
            sub_20E839A00("Lower", "Transpose", (unsigned int *)&__n, (unsigned int *)&v38, &dbl_254A4A438, (uint64_t)&v33[v26 + __n], (unsigned int *)a4, &dbl_254A4A438, (uint64_t)v30, a4);
          }
          v28 += 24;
          v25 -= 24;
          v26 += 24 * v31 + 24;
          v27 += 192;
        }
        while (v28 <= (int)v34);
      }
    }
    else
    {
      dlauu2_(a1, a2, a3, a4, a5);
    }
  }
  return 0;
}

#error "20E82B890: call analysis failed (funcsize=190)"

void sub_20E82BA84(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  double *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  uint64_t v84;
  float64x2_t *v85;
  double *v86;
  uint64_t v87;
  float64_t *v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  double *v92;
  float64x2_t v93;
  float64_t v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t *v101;
  float64_t v102;
  double *v103;
  float64x2_t v104;
  float64_t v105;
  double *v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  double *v113;
  double *v114;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v23 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8);
        v23 = 2;
        v28 = __X;
        v29 = __N;
        do
        {
          v30 = *v28 * a7;
          *v28 = v30;
          v28[a6] = v28[a6] * a7 - v30 * a8.f64[0];
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v23 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v23 = 0;
    }
  }
  else if (__N < 1)
  {
    v23 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8);
    v21 = *(double *)(a3 + 16);
    v22 = *(double *)(a3 + 8 * a4 + 16);
    v23 = 3;
    v24 = __X;
    v25 = __N;
    do
    {
      v26 = *v24 * a7;
      *v24 = v26;
      v27 = v24[a6] * a7 - v26 * a8.f64[0];
      v24[a6] = v27;
      v24[2 * a6] = -(v22 * v27 + *v24 * v21 - v24[2 * a6] * a7);
      ++v24;
      --v25;
    }
    while (v25);
  }
  if (v23 < a2)
  {
    v31 = a6;
    v32 = 8 * a4;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v35 = __X;
        do
        {
          v36 = v23;
          v37 = (float64x2_t *)v35;
          v34 = (float64x2_t *)(a3 + 8 * v23);
          v38 = v34;
          v39 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v40 = v39;
          v41 = v39;
          v42 = v39;
          v43 = v39;
          v44 = v39;
          v45 = v39;
          v46 = v39;
          if ((v23 & 1) != 0)
          {
            v47 = *(float64x2_t *)(v35 + 2);
            v37 = (float64x2_t *)&v35[v31];
            v48 = v34[1];
            v38 = (float64x2_t *)((char *)v34 + v32);
            v39 = vmlaq_n_f64(v39, *(float64x2_t *)v35, v34->f64[0]);
            v41 = vmlaq_laneq_f64(v41, *(float64x2_t *)v35, *v34, 1);
            v43 = vmlaq_n_f64(v43, *(float64x2_t *)v35, v48.f64[0]);
            v45 = vmlaq_laneq_f64(v45, *(float64x2_t *)v35, v48, 1);
            v40 = vmlaq_n_f64(v40, v47, v34->f64[0]);
            v42 = vmlaq_laneq_f64(v42, v47, *v34, 1);
            v44 = vmlaq_n_f64(v44, v47, v48.f64[0]);
            v46 = vmlaq_laneq_f64(v46, v47, v48, 1);
            v36 = v23 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v50 = *v37;
            v51 = v37[1];
            v49 = (float64x2_t *)((char *)v37 + v31 * 8);
            v52 = *v49;
            v53 = v49[1];
            v37 = (float64x2_t *)((char *)v49 + v31 * 8);
            v55 = *v38;
            v56 = v38[1];
            v54 = (float64x2_t *)((char *)v38 + v32);
            v57 = *v54;
            v58 = v54[1];
            v38 = (float64x2_t *)((char *)v54 + v32);
            v39 = vmlaq_n_f64(vmlaq_n_f64(v39, v50, v55.f64[0]), v52, v57.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v50, v55, 1), v52, v57, 1);
            v43 = vmlaq_n_f64(vmlaq_n_f64(v43, v50, v56.f64[0]), v52, v58.f64[0]);
            v45 = vmlaq_laneq_f64(vmlaq_laneq_f64(v45, v50, v56, 1), v52, v58, 1);
            v40 = vmlaq_n_f64(vmlaq_n_f64(v40, v51, v55.f64[0]), v53, v57.f64[0]);
            v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v51, v55, 1), v53, v57, 1);
            v44 = vmlaq_n_f64(vmlaq_n_f64(v44, v51, v56.f64[0]), v53, v58.f64[0]);
            v46 = vmlaq_laneq_f64(vmlaq_laneq_f64(v46, v51, v56, 1), v53, v58, 1);
          }
          v60 = *v37;
          v61 = v37[1];
          v59 = (float64x2_t *)((char *)v37 + v31 * 8);
          v63 = *v59;
          v64 = v59[1];
          v62 = (float64x2_t *)((char *)v59 + v31 * 8);
          v66 = *v62;
          v67 = v62[1];
          v65 = (float64x2_t *)((char *)v62 + v31 * 8);
          v68 = *v65;
          v69 = v65[1];
          v70 = (float64x2_t *)((char *)v65 + 8 * a6 + -32 * a6);
          v14 = vsubq_f64(vmulq_n_f64(v60, a7), v39);
          v71 = vsubq_f64(vmulq_n_f64(v61, a7), v40);
          v72 = *v38;
          v73 = v38[1];
          v74 = (float64x2_t *)((char *)v38 + v32 + 16);
          v75 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v63, a7), v41), v14, v72, 1);
          v76 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v64, a7), v42), v71, v72, 1);
          a8 = *v74;
          v77 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v66, a7), v43), v14, v73.f64[0], 0), v75, v74->f64[0], 0);
          v78 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v67, a7), v44), v71, v73.f64[0], 0), v76, v74->f64[0], 0);
          a8.f64[0] = v74->f64[(unint64_t)v32 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v68, a7), v45), v14, v73, 1), v75, *v74, 1), v77, a8.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v69, a7), v46), v71, v73, 1), v76, *v74, 1), v78, a8.f64[0], 0);
          *v70 = v14;
          v70[1] = v71;
          v81 = (float64x2_t *)((char *)v70 + v31 * 8);
          *v81 = v75;
          v81[1] = v76;
          v82 = (float64x2_t *)((char *)v81 + v31 * 8);
          *v82 = v77;
          v82[1] = v78;
          v83 = (float64x2_t *)((char *)v82 + v31 * 8);
          *v83 = v79;
          v83[1] = v80;
          v33 += 4;
          v35 += 4;
        }
        while (v33 < __N - 3);
      }
      v84 = __N - v33;
      if (__N > v33)
      {
        v86 = &__X[v33];
        do
        {
          v87 = v23;
          v88 = v86;
          v85 = (float64x2_t *)(a3 + 8 * v23);
          v89 = v85;
          v90 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v91 = v90;
          if ((v23 & 1) != 0)
          {
            v88 = &v86[v31];
            v89 = (float64x2_t *)((char *)v85 + v32);
            v90 = vmlaq_n_f64(v90, *v85, *v86);
            v91 = vmlaq_n_f64(v91, v85[1], *v86);
            v87 = v23 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v93.f64[0] = *v88;
            v92 = &v88[v31];
            v94 = *v92;
            v88 = &v92[v31];
            v96 = *v89;
            v97 = v89[1];
            v95 = (float64x2_t *)((char *)v89 + v32);
            v93.f64[1] = v94;
            v98 = *v95;
            a14 = v95[1];
            v89 = (float64x2_t *)((char *)v95 + v32);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v96, v93.f64[0]), v98, v93, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v93.f64[0]), a14, v93, 1);
          }
          v100.f64[0] = *v88;
          v99 = &v88[v31];
          v102 = *v99;
          v101 = &v99[v31];
          v104.f64[0] = *v101;
          v103 = &v101[v31];
          v105 = *v103;
          v106 = &v103[a6 + -4 * a6];
          v100.f64[1] = v102;
          v104.f64[1] = v105;
          v107 = vsubq_f64(vmulq_n_f64(v100, a7), v90);
          v108 = v107.f64[0];
          v109 = *v89;
          v110 = v89[1];
          v111 = (float64x2_t *)((char *)v89 + v32 + 16);
          a8 = vmlsq_lane_f64(v107, v109, v107.f64[0], 0);
          v14 = *v111;
          v112 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v104, a7), v91), v110, v108, 0), *v111, a8, 1);
          a14.f64[1] = v111->f64[(unint64_t)v32 / 8 + 1];
          *v106 = v108;
          v113 = &v106[v31];
          *v113 = a8.f64[1];
          v114 = &v113[v31];
          *v114 = v112.f64[0];
          v114[a6] = vmlsq_lane_f64(v112, a14, *(double *)&v112, 0).f64[1];
          ++v86;
          --v84;
        }
        while (v84);
      }
      v23 += 4;
    }
    while (v23 < a2);
  }
}

void sub_20E82BE58(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t *v103;
  float64x2_t *v104;
  float64x2_t *v105;
  uint64_t v106;
  float64x2_t *v107;
  double *v108;
  uint64_t v109;
  float64_t *v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t *v123;
  float64_t v124;
  double *v125;
  float64x2_t v126;
  float64_t v127;
  float64_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t *v133;
  float64x2_t v134;
  float64_t *v135;
  double *v136;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v27 = 2;
      }
      else
      {
        v33 = a3[1];
        v34 = a7 / *a3;
        v27 = 2;
        v35 = __X;
        v36 = __N;
        v37 = 1.0 / a3[a4 + 1];
        do
        {
          v38 = v34 * *v35;
          *v35 = v38;
          v35[a6] = v37 * (v35[a6] * a7 - v38 * v33);
          ++v35;
          --v36;
        }
        while (v36);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v27 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v27 = 0;
    }
  }
  else if (__N < 1)
  {
    v27 = 3;
  }
  else
  {
    v22 = a3[1];
    v21 = a3[2];
    v23 = &a3[a4];
    v24 = a7 / *a3;
    v25 = v23[2];
    v26 = 1.0 / v23[1];
    v27 = 3;
    v28 = __X;
    v29 = __N;
    v30 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v31 = v24 * *v28;
      *v28 = v31;
      v32 = v26 * (v28[a6] * a7 - v31 * v22);
      v28[a6] = v32;
      v14.f64[0] = v28[2 * a6];
      a14.f64[0] = v30 * -(v25 * v32 + *v28 * v21 - v14.f64[0] * a7);
      v28[2 * a6] = a14.f64[0];
      ++v28;
      --v29;
    }
    while (v29);
  }
  if (v27 < a2)
  {
    v39 = a4 + 1;
    v40 = a6;
    v41 = 8 * a4;
    do
    {
      v42 = &a3[v27 * a4 + v27];
      v43 = &a3[v39 + v39 * v27];
      v44 = &a3[(v27 + 2) * v39];
      v45 = &a3[(v27 + 3) * v39];
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = __X;
        do
        {
          v58 = v27;
          v59 = (float64x2_t *)v57;
          v56 = &a3[v27];
          v60 = (float64x2_t *)v56;
          v61 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v27 & 1) != 0)
          {
            v69 = *(float64x2_t *)(v57 + 2);
            v59 = (float64x2_t *)&v57[v40];
            v70 = *(float64x2_t *)(v56 + 2);
            v60 = (float64x2_t *)&v56[(unint64_t)v41 / 8];
            v61 = vmlaq_n_f64(v61, *(float64x2_t *)v57, *v56);
            v63 = vmlaq_laneq_f64(v63, *(float64x2_t *)v57, *(float64x2_t *)v56, 1);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v57, v70.f64[0]);
            v67 = vmlaq_laneq_f64(v67, *(float64x2_t *)v57, v70, 1);
            v62 = vmlaq_n_f64(v62, v69, *v56);
            v64 = vmlaq_laneq_f64(v64, v69, *(float64x2_t *)v56, 1);
            v66 = vmlaq_n_f64(v66, v69, v70.f64[0]);
            v68 = vmlaq_laneq_f64(v68, v69, v70, 1);
            v58 = v27 - 1;
          }
          for (; v58; v58 -= 2)
          {
            v72 = *v59;
            v73 = v59[1];
            v71 = (float64x2_t *)((char *)v59 + v40 * 8);
            v74 = *v71;
            v75 = v71[1];
            v59 = (float64x2_t *)((char *)v71 + v40 * 8);
            v77 = *v60;
            v78 = v60[1];
            v76 = (float64x2_t *)((char *)v60 + v41);
            v79 = *v76;
            v80 = v76[1];
            v60 = (float64x2_t *)((char *)v76 + v41);
            v61 = vmlaq_n_f64(vmlaq_n_f64(v61, v72, v77.f64[0]), v74, v79.f64[0]);
            v63 = vmlaq_laneq_f64(vmlaq_laneq_f64(v63, v72, v77, 1), v74, v79, 1);
            v65 = vmlaq_n_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v80.f64[0]);
            v67 = vmlaq_laneq_f64(vmlaq_laneq_f64(v67, v72, v78, 1), v74, v80, 1);
            v62 = vmlaq_n_f64(vmlaq_n_f64(v62, v73, v77.f64[0]), v75, v79.f64[0]);
            v64 = vmlaq_laneq_f64(vmlaq_laneq_f64(v64, v73, v77, 1), v75, v79, 1);
            v66 = vmlaq_n_f64(vmlaq_n_f64(v66, v73, v78.f64[0]), v75, v80.f64[0]);
            v68 = vmlaq_laneq_f64(vmlaq_laneq_f64(v68, v73, v78, 1), v75, v80, 1);
          }
          v82 = *v59;
          v83 = v59[1];
          v81 = (float64x2_t *)((char *)v59 + v40 * 8);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v40 * 8);
          v88 = *v84;
          v89 = v84[1];
          v87 = (float64x2_t *)((char *)v84 + v40 * 8);
          v90 = *v87;
          v91 = v87[1];
          v92 = (float64x2_t *)((char *)v87 + 8 * a6 + -32 * a6);
          v14 = vmulq_f64(vsubq_f64(vmulq_n_f64(v82, a7), v61), v51);
          v93 = vmulq_f64(vsubq_f64(vmulq_n_f64(v83, a7), v62), v51);
          v94 = *v60;
          v95 = v60[1];
          v96 = (float64x2_t *)((char *)v60 + v41 + 16);
          v97 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v85, a7), v63), v14, v94, 1), v52);
          v98 = vmulq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v86, a7), v64), v93, v94, 1), v52);
          v46 = *v96;
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88, a7), v65), v14, v95.f64[0], 0), v97, v96->f64[0], 0), v53);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v89, a7), v66), v93, v95.f64[0], 0), v98, v96->f64[0], 0), v53);
          v46.f64[0] = v96->f64[(unint64_t)v41 / 8 + 1];
          v101 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v90, a7), v67), v14, v95, 1), v97, *v96, 1), v99, v46.f64[0], 0), v54);
          v102 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v91, a7), v68), v93, v95, 1), v98, *v96, 1), v100, v46.f64[0], 0), v54);
          *v92 = v14;
          v92[1] = v93;
          v103 = (float64x2_t *)((char *)v92 + v40 * 8);
          *v103 = v97;
          v103[1] = v98;
          v104 = (float64x2_t *)((char *)v103 + v40 * 8);
          *v104 = v99;
          v104[1] = v100;
          v105 = (float64x2_t *)((char *)v104 + v40 * 8);
          *v105 = v101;
          v105[1] = v102;
          v55 += 4;
          v57 += 4;
        }
        while (v55 < __N - 3);
      }
      v106 = __N - v55;
      if (__N > v55)
      {
        v108 = &__X[v55];
        do
        {
          v109 = v27;
          v110 = v108;
          v107 = (float64x2_t *)&a3[v27];
          v111 = v107;
          v112 = (float64x2_t)veorq_s8((int8x16_t)v46, (int8x16_t)v46);
          v113 = v112;
          if ((v27 & 1) != 0)
          {
            v110 = &v108[v40];
            v111 = (float64x2_t *)((char *)v107 + v41);
            v112 = vmlaq_n_f64(v112, *v107, *v108);
            v113 = vmlaq_n_f64(v113, v107[1], *v108);
            v109 = v27 - 1;
          }
          for (; v109; v109 -= 2)
          {
            v115.f64[0] = *v110;
            v114 = &v110[v40];
            v116 = *v114;
            v110 = &v114[v40];
            v118 = *v111;
            v119 = v111[1];
            v117 = (float64x2_t *)((char *)v111 + v41);
            v115.f64[1] = v116;
            v120 = *v117;
            a14 = v117[1];
            v111 = (float64x2_t *)((char *)v117 + v41);
            v112 = vmlaq_laneq_f64(vmlaq_n_f64(v112, v118, v115.f64[0]), v120, v115, 1);
            v113 = vmlaq_laneq_f64(vmlaq_n_f64(v113, v119, v115.f64[0]), a14, v115, 1);
          }
          v122.f64[0] = *v110;
          v121 = &v110[v40];
          v124 = *v121;
          v123 = &v121[v40];
          v126.f64[0] = *v123;
          v125 = &v123[v40];
          v127 = *v125;
          v128 = &v125[a6 + -4 * a6];
          v122.f64[1] = v124;
          v126.f64[1] = v127;
          v129 = vsubq_f64(vmulq_n_f64(v122, a7), v112);
          v130.f64[0] = v129.f64[0] * v51.f64[0];
          v131 = *v111;
          v132 = v111[1];
          v133 = (float64x2_t *)((char *)v111 + v41 + 16);
          v46 = vmulq_f64(vmlsq_lane_f64(v129, v131, v129.f64[0] * v51.f64[0], 0), v52);
          v130.f64[1] = v46.f64[1];
          v14 = *v133;
          v134 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v126, a7), v113), v132, v130.f64[0], 0), *v133, v130, 1);
          a14.f64[1] = v133->f64[(unint64_t)v41 / 8 + 1];
          *v128 = v130.f64[0];
          v135 = &v128[v40];
          *v135 = v46.f64[1];
          v136 = &v135[v40];
          *v136 = v134.f64[0] * v53.f64[0];
          v136[a6] = vmulq_f64(vmlsq_lane_f64(v134, a14, *(double *)&v134 * *(double *)&v53, 0), v54).f64[1];
          ++v108;
          --v106;
        }
        while (v106);
      }
      v27 += 4;
    }
    while (v27 < a2);
  }
}

void sub_20E82C2F4(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, int64x2_t a14)
{
  int8x16_t v14;
  float64x2_t v15;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  int8x16_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t *v100;
  float64x2_t *v101;
  float64x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  double *f64;
  float64_t *v112;
  uint64_t v113;
  __n128 *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int64x2_t *v117;
  uint64_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double *v121;
  float64x2_t v122;
  float64_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t *v127;
  float64_t *v128;
  double *v129;
  float64x2_t v130;
  float64_t *v131;
  float64_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64x2_t v138;
  double *v139;
  double *v140;
  BOOL v141;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
        v33 = (double *)(a5 + 8 * v22 * a6);
        v34 = (double *)(a5 + a6 * (8 * a2 - 16));
        v35 = __N;
        do
        {
          v36 = *v33 * a7;
          *v33++ = v36;
          *v34 = *v34 * a7 - v36 * *(double *)a8.i64;
          ++v34;
          --v35;
        }
        while (v35);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      a8.i64[0] = *(_QWORD *)(a3 + 8 * (v22 + (a2 - 2) * a4));
      v23 = (double *)(a3 + 8 * (v22 + (a2 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = (double *)(a5 + 8 * v22 * a6);
      v27 = (double *)(a5 + a6 * (8 * a2 - 16));
      v28 = (double *)(a5 + a6 * (8 * a2 - 24));
      v29 = __N;
      do
      {
        v30 = *v26 * a7;
        *v26 = v30;
        v31 = *v27 * a7 - v30 * *(double *)a8.i64;
        *v27++ = v31;
        v32 = *v26++;
        *v28 = -(v25 * v31 + v32 * v24 - *v28 * a7);
        ++v28;
        --v29;
      }
      while (v29);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v37 = v22 + 1;
    v38 = 8 * a6;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v22 + 1));
    v40 = -32 * a6;
    do
    {
      v41 = v37 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v37;
        v44 = (double *)(v43 + 8 * v41 * a4);
        v45 = (double *)(v43 + 8 * (v37 - 3) * a4);
        v46 = (double *)(v43 + 8 * (v37 - 2) * a4);
        v47 = (double *)(v43 + 8 * (v37 - 1) * a4);
        v48 = a2 - v41;
        if (a2 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = v39;
        do
        {
          v51 = (float64x2_t *)v45;
          v52 = (float64x2_t *)v47;
          v53 = (float64x2_t *)v44;
          v54 = (float64x2_t *)v46;
          v55 = v50;
          v56 = v49;
          v57 = v49 + 1;
          v58 = (float64x2_t)veorq_s8(v14, v14);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v49 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v38);
            v53 = (float64x2_t *)(v44 + 1);
            v51 = (float64x2_t *)(v45 + 1);
            v54 = (float64x2_t *)(v46 + 1);
            v52 = (float64x2_t *)(v47 + 1);
            v58 = vmlaq_n_f64(v58, *v50, *v44);
            v60 = vmlaq_n_f64(v60, *v50, *v45);
            v62 = vmlaq_n_f64(v62, *v50, *v46);
            v64 = vmlaq_n_f64(v64, *v50, *v47);
            v59 = vmlaq_n_f64(v59, v66, *v44);
            v61 = vmlaq_n_f64(v61, v66, *v45);
            v63 = vmlaq_n_f64(v63, v66, *v46);
            v65 = vmlaq_n_f64(v65, v66, *v47);
            v56 = v49 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v68 = *v55;
            v69 = v55[1];
            v67 = (float64x2_t *)((char *)v55 + v38);
            v70 = *v67;
            v71 = v67[1];
            v55 = (float64x2_t *)((char *)v67 + v38);
            v72 = *v53++;
            v73 = *v51++;
            v74 = *v54++;
            v75 = *v52++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v68, v72.f64[0]), v70, v72, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v68, v73.f64[0]), v70, v73, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v68, v74.f64[0]), v70, v74, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v68, v75.f64[0]), v70, v75, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v69, v72.f64[0]), v71, v72, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v69, v73.f64[0]), v71, v73, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v69, v74.f64[0]), v71, v74, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (float64x2_t *)((char *)v53 - 8 * v57 - 8);
          v77 = (float64x2_t *)((char *)v55 - v38 * (v49 + 4));
          v79 = *v77;
          v80 = v77[1];
          v78 = (float64x2_t *)((char *)v77 + v38);
          v82 = *v78;
          v83 = v78[1];
          v81 = (float64x2_t *)((char *)v78 + v38);
          v85 = *v81;
          v86 = v81[1];
          v84 = (float64x2_t *)((char *)v81 + v38);
          v87 = *v84;
          v88 = v84[1];
          v89 = (int8x16_t *)((char *)v84 + v38 + -4 * v38);
          a11 = vmulq_n_f64(v83, a7);
          a12 = vmulq_n_f64(v85, a7);
          a13 = vmulq_n_f64(v86, a7);
          v90 = vsubq_f64(vmulq_n_f64(v79, a7), v58);
          v91 = vsubq_f64(vmulq_n_f64(v80, a7), v59);
          v92 = vsubq_f64(vmulq_n_f64(v82, a7), v60);
          v93 = vsubq_f64(vmulq_n_f64(v87, a7), v64);
          v94 = vsubq_f64(vmulq_n_f64(v88, a7), v65);
          a8 = *(int8x16_t *)v76;
          v95 = *(float64x2_t *)((char *)v51 - 8 * v57 - 8);
          v82.f64[0] = v54->f64[-v57];
          v96 = vmlsq_lane_f64(vsubq_f64(a12, v62), v93, v82.f64[0], 0);
          v97 = vmlsq_lane_f64(vsubq_f64(a13, v63), v94, v82.f64[0], 0);
          v98 = vmlsq_lane_f64(vmlsq_laneq_f64(v92, v93, v95, 1), v96, v95.f64[0], 0);
          v99 = vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(a11, v61), v94, v95, 1), v97, v95.f64[0], 0);
          a8.i64[0] = *(_QWORD *)&v76[-1].f64[1];
          v14 = (int8x16_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v90, v93, *v76, 1), v96, v76->f64[0], 0), v98, *(double *)a8.i64, 0);
          v15 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v91, v94, *v76, 1), v97, v76->f64[0], 0), v99, *(double *)a8.i64, 0);
          *v89 = v14;
          v89[1] = (int8x16_t)v15;
          v100 = (float64x2_t *)&v89->i8[v38];
          *v100 = v98;
          v100[1] = v99;
          v101 = (float64x2_t *)((char *)v100 + v38);
          *v101 = v96;
          v101[1] = v97;
          v102 = (float64x2_t *)((char *)v101 + v38);
          *v102 = v93;
          v102[1] = v94;
          v42 += 4;
          v50 += 2;
        }
        while (v42 < __N - 3);
      }
      v103 = __N - v42;
      if (__N > v42)
      {
        v104 = a3 + 8 * v37;
        v105 = (unint64_t *)(v104 + 8 * v41 * a4);
        v106 = (unint64_t *)(v104 + 8 * (v37 - 3) * a4);
        v107 = (unint64_t *)(v104 + 8 * (v37 - 2) * a4);
        v108 = (unint64_t *)(v104 + 8 * (v37 - 1) * a4);
        v109 = a2 - v41;
        if (a2 - v41 <= 4)
          v109 = 4;
        v110 = v109 - 4;
        f64 = v39[(unint64_t)v42 / 2].f64;
        do
        {
          v112 = f64;
          v113 = v110;
          v114 = (__n128 *)v106;
          v115 = (int64x2_t *)v108;
          v116 = (int64x2_t *)v105;
          v117 = (int64x2_t *)v107;
          v118 = v110 + 1;
          v119 = (float64x2_t)veorq_s8(a8, a8);
          v120 = v119;
          if ((v110 & 1) != 0)
          {
            v112 = &f64[(unint64_t)v38 / 8];
            *(_QWORD *)&a11.f64[0] = *v105;
            v116 = (int64x2_t *)(v105 + 1);
            *(_QWORD *)&a12.f64[0] = *v106;
            v114 = (__n128 *)(v106 + 1);
            *(_QWORD *)&a13.f64[0] = *v107;
            v117 = (int64x2_t *)(v107 + 1);
            a14.i64[0] = *v108;
            v115 = (int64x2_t *)(v108 + 1);
            v119 = vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *f64);
            v120 = vmlaq_n_f64(v120, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v113 = v110 - 1;
          }
          for (; v113; v113 -= 2)
          {
            v122.f64[0] = *v112;
            v121 = &v112[(unint64_t)v38 / 8];
            v123 = *v121;
            v112 = &v121[(unint64_t)v38 / 8];
            v124 = *v116++;
            a12 = *(float64x2_t *)v114++;
            v125 = *v117++;
            v122.f64[1] = v123;
            v126 = *v115++;
            v15 = (float64x2_t)vtrn1q_s64(v125, v126);
            v119 = vmlaq_laneq_f64(vmlaq_n_f64(v119, (float64x2_t)vtrn1q_s64(v124, (int64x2_t)a12), v122.f64[0]), (float64x2_t)vtrn2q_s64(v124, (int64x2_t)a12), v122, 1);
            v120 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v15, v122.f64[0]), (float64x2_t)vtrn2q_s64(v125, v126), v122, 1);
          }
          v127 = (int64x2_t *)((char *)v116 - 8 * v118 - 8);
          v128 = (float64_t *)((char *)v112 - v38 * (v110 + 4));
          v130.f64[0] = *v128;
          v129 = &v128[(unint64_t)v38 / 8];
          v132 = *v129;
          v131 = &v129[(unint64_t)v38 / 8];
          v134.f64[0] = *v131;
          v133 = &v131[(unint64_t)v38 / 8];
          v135 = *v133;
          v136 = &v133[(unint64_t)v38 / 8 + v38 / 0xFFFFFFFFFFFFFFFELL];
          v130.f64[1] = v132;
          v134.f64[1] = v135;
          a11 = vmulq_n_f64(v134, a7);
          v137 = vsubq_f64(a11, v120);
          a14 = *v127;
          v14 = *(int8x16_t *)((char *)v114 - 8 * v118 - 8);
          *(_QWORD *)&v15.f64[0] = v117->i64[-v118];
          *(_QWORD *)&v137.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v137, v15, v137.f64[1], 0);
          a13 = (float64x2_t)vtrn1q_s64(*v127, (int64x2_t)v14);
          v138 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v130, a7), v119), (float64x2_t)vtrn2q_s64(*v127, (int64x2_t)v14), v137.f64[1], 0), a13, v137.f64[0], 0);
          a11.f64[0] = v138.f64[1];
          a14.i64[0] = v127[-1].i64[1];
          a8 = (int8x16_t)vmlsq_lane_f64(v138, (float64x2_t)a14, v138.f64[1], 0);
          *v136 = *(double *)a8.i64;
          v139 = &v136[(unint64_t)v38 / 8];
          *v139 = a11.f64[0];
          v140 = &v139[(unint64_t)v38 / 8];
          *v140 = v137.f64[0];
          v140[(unint64_t)v38 / 8] = v137.f64[1];
          ++f64;
          --v103;
        }
        while (v103);
      }
      v39 = (float64x2_t *)((char *)v39 + v40);
      v141 = v37 < 5;
      v37 -= 4;
    }
    while (!v141);
  }
}

void sub_20E82C818(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, int64x2_t a14)
{
  int8x16_t v14;
  float64x2_t v15;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  uint64_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  uint64_t v58;
  const double *v59;
  uint64_t v60;
  const double *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  double *v73;
  double *v74;
  double *v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t *v79;
  float64x2_t *v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t *v105;
  float64x2_t *v106;
  float64x2_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  int8x16_t *v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  double *f64;
  uint64_t v141;
  float64x2_t *v142;
  int64x2_t *v143;
  int64x2_t *v144;
  int64x2_t *v145;
  float64_t *v146;
  uint64_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double *v150;
  float64x2_t v151;
  float64_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t *v156;
  float64_t *v157;
  double *v158;
  float64x2_t v159;
  float64_t *v160;
  float64_t v161;
  double *v162;
  float64x2_t v163;
  float64_t v164;
  double *v165;
  float64x2_t v166;
  float64x2_t v167;
  double *v168;
  double *v169;
  BOOL v170;

  v22 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v39 = (a2 - 2) * a4;
        v40 = *(double *)(a3 + 8 * (v39 + v22));
        v41 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
        v42 = *(double *)(a3 + 8 * (v39 + a2 - 2));
        v43 = (double *)(a5 + 8 * v22 * a6);
        v44 = (double *)(a5 + a6 * (8 * a2 - 16));
        v45 = __N;
        v46 = 1.0 / v42;
        do
        {
          v47 = v41 * *v43;
          *v43++ = v47;
          *v44 = v46 * (*v44 * a7 - v47 * v40);
          ++v44;
          --v45;
        }
        while (v45);
      }
      v22 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v22 + v22 * a4)), (double *)(a5 + 8 * v22 * a6), 1);
      v22 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v23 = (a2 - 2) * a4;
      v24 = *(double *)(a3 + 8 * (v23 + v22));
      v25 = (a2 - 3) * a4;
      v26 = (double *)(a3 + 8 * (v25 + v22));
      v28 = *(v26 - 1);
      v27 = *v26;
      v29 = a7 / *(double *)(a3 + 8 * (v22 + v22 * a4));
      v30 = 1.0 / *(double *)(a3 + 8 * (v23 + a2 - 2));
      v31 = (double *)(a5 + 8 * v22 * a6);
      v32 = (double *)(a5 + a6 * (8 * a2 - 16));
      v33 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v34 = __N;
      v35 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 3));
      do
      {
        v36 = v29 * *v31;
        *v31 = v36;
        v37 = v30 * (*v32 * a7 - v36 * v24);
        *v32++ = v37;
        v14.i64[0] = *v33;
        v38 = *v31++;
        *(double *)v33 = v35 * -(v28 * v37 + v38 * v27 - *(double *)v33 * a7);
        ++v33;
        --v34;
      }
      while (v34);
    }
    v22 = a2 - 4;
  }
  if ((v22 & 0x8000000000000000) == 0)
  {
    v48 = v22 + 1;
    v49 = a4 + 1;
    v50 = 8 * a6;
    v51 = (float64x2_t *)(a5 + 8 * a6 * v48);
    v52 = -32 * a6;
    do
    {
      v53 = v48 - 4;
      v54 = a3 + 8 * (v48 - 4) * a4;
      v55 = (const double *)(v54 + 8 * (v48 - 4));
      v56 = v48 - 3;
      v57 = (const double *)(a3 + 8 * (v48 - 3) * v49);
      v58 = v48 - 2;
      v59 = (const double *)(a3 + 8 * (v48 - 2) * v49);
      v60 = v48 - 1;
      v61 = (const double *)(a3 + 8 * (v48 - 1) * v49);
      v62 = vld1q_dup_f64(v55);
      v63 = vld1q_dup_f64(v57);
      v64 = vld1q_dup_f64(v59);
      v65 = vld1q_dup_f64(v61);
      v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v67 = vdivq_f64(v66, v62);
      v68 = vdivq_f64(v66, v63);
      v69 = vdivq_f64(v66, v64);
      v70 = vdivq_f64(v66, v65);
      if (__N < 4)
      {
        v71 = 0;
      }
      else
      {
        v71 = 0;
        v72 = a3 + 8 * v48;
        v74 = (double *)(v72 + 8 * v56 * a4);
        v75 = (double *)(v72 + 8 * v58 * a4);
        v76 = (double *)(v72 + 8 * v60 * a4);
        v77 = a2 - v53;
        if (a2 - v53 <= 4)
          v77 = 4;
        v78 = v77 - 4;
        v79 = v51;
        do
        {
          v80 = (float64x2_t *)v74;
          v81 = (float64x2_t *)v76;
          v73 = (double *)(v54 + 8 * v48);
          v82 = (float64x2_t *)v73;
          v83 = (float64x2_t *)v75;
          v84 = v79;
          v85 = v78;
          v86 = v78 + 1;
          v87 = (float64x2_t)veorq_s8(v14, v14);
          v88 = v87;
          v89 = v87;
          v90 = v87;
          v91 = v87;
          v92 = v87;
          v93 = v87;
          v94 = v87;
          if ((v78 & 1) != 0)
          {
            v95 = v79[1];
            v84 = (float64x2_t *)((char *)v79 + v50);
            v82 = (float64x2_t *)(v73 + 1);
            v80 = (float64x2_t *)(v74 + 1);
            v83 = (float64x2_t *)(v75 + 1);
            v81 = (float64x2_t *)(v76 + 1);
            v87 = vmlaq_n_f64(v87, *v79, *v73);
            v89 = vmlaq_n_f64(v89, *v79, *v74);
            v91 = vmlaq_n_f64(v91, *v79, *v75);
            v93 = vmlaq_n_f64(v93, *v79, *v76);
            v88 = vmlaq_n_f64(v88, v95, *v73);
            v90 = vmlaq_n_f64(v90, v95, *v74);
            v92 = vmlaq_n_f64(v92, v95, *v75);
            v94 = vmlaq_n_f64(v94, v95, *v76);
            v85 = v78 - 1;
          }
          for (; v85; v85 -= 2)
          {
            v97 = *v84;
            v98 = v84[1];
            v96 = (float64x2_t *)((char *)v84 + v50);
            v99 = *v96;
            v100 = v96[1];
            v84 = (float64x2_t *)((char *)v96 + v50);
            v101 = *v82++;
            v102 = *v80++;
            v103 = *v83++;
            v104 = *v81++;
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v97, v101.f64[0]), v99, v101, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v97, v102.f64[0]), v99, v102, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v97, v103.f64[0]), v99, v103, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v97, v104.f64[0]), v99, v104, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v98, v101.f64[0]), v100, v101, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v98, v102.f64[0]), v100, v102, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v98, v103.f64[0]), v100, v103, 1);
            v94 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v98, v104.f64[0]), v100, v104, 1);
          }
          v105 = (float64x2_t *)((char *)v82 - 8 * v86 - 8);
          v106 = (float64x2_t *)((char *)v84 - v50 * (v78 + 4));
          v108 = *v106;
          v109 = v106[1];
          v107 = (float64x2_t *)((char *)v106 + v50);
          v111 = *v107;
          v112 = v107[1];
          v110 = (float64x2_t *)((char *)v107 + v50);
          v114 = *v110;
          v115 = v110[1];
          v113 = (float64x2_t *)((char *)v110 + v50);
          v116 = *v113;
          v117 = v113[1];
          v118 = (int8x16_t *)((char *)v113 + v50 + -4 * v50);
          v65 = vmulq_n_f64(v112, a7);
          v66 = vmulq_n_f64(v114, a7);
          a13 = vmulq_n_f64(v115, a7);
          v119 = vsubq_f64(vmulq_n_f64(v108, a7), v87);
          v120 = vsubq_f64(vmulq_n_f64(v109, a7), v88);
          v121 = vsubq_f64(vmulq_n_f64(v111, a7), v89);
          v122 = vmulq_f64(vsubq_f64(vmulq_n_f64(v116, a7), v93), v70);
          v123 = vmulq_f64(vsubq_f64(vmulq_n_f64(v117, a7), v94), v70);
          v62 = *v105;
          v124 = *(float64x2_t *)((char *)v80 - 8 * v86 - 8);
          v111.f64[0] = v83->f64[-v86];
          v125 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v66, v91), v122, v111.f64[0], 0), v69);
          v126 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(a13, v92), v123, v111.f64[0], 0), v69);
          v127 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v121, v122, v124, 1), v125, v124.f64[0], 0), v68);
          v128 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vsubq_f64(v65, v90), v123, v124, 1), v126, v124.f64[0], 0), v68);
          v62.f64[0] = v105[-1].f64[1];
          v14 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v119, v122, *v105, 1), v125, v105->f64[0], 0), v127, v62.f64[0], 0), v67);
          v15 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v120, v123, *v105, 1), v126, v105->f64[0], 0), v128, v62.f64[0], 0), v67);
          *v118 = v14;
          v118[1] = (int8x16_t)v15;
          v129 = (float64x2_t *)&v118->i8[v50];
          *v129 = v127;
          v129[1] = v128;
          v130 = (float64x2_t *)((char *)v129 + v50);
          *v130 = v125;
          v130[1] = v126;
          v131 = (float64x2_t *)((char *)v130 + v50);
          *v131 = v122;
          v131[1] = v123;
          v71 += 4;
          v79 += 2;
        }
        while (v71 < __N - 3);
      }
      v132 = __N - v71;
      if (__N > v71)
      {
        v133 = a3 + 8 * v48;
        v134 = (_QWORD *)(v54 + 8 * v48);
        v135 = (_QWORD *)(v133 + 8 * v56 * a4);
        v136 = (unint64_t *)(v133 + 8 * v58 * a4);
        v137 = (unint64_t *)(v133 + 8 * v60 * a4);
        v138 = a2 - v53;
        if (a2 - v53 <= 4)
          v138 = 4;
        v139 = v138 - 4;
        f64 = v51[(unint64_t)v71 / 2].f64;
        do
        {
          v141 = v139;
          v142 = (float64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (int64x2_t *)v134;
          v145 = (int64x2_t *)v136;
          v146 = f64;
          v147 = v139 + 1;
          v148 = (float64x2_t)veorq_s8((int8x16_t)v62, (int8x16_t)v62);
          v149 = v148;
          if ((v139 & 1) != 0)
          {
            v146 = &f64[(unint64_t)v50 / 8];
            v65.f64[0] = *(float64_t *)v134;
            v144 = (int64x2_t *)(v134 + 1);
            v66.f64[0] = *(float64_t *)v135;
            v142 = (float64x2_t *)(v135 + 1);
            *(_QWORD *)&a13.f64[0] = *v136;
            v145 = (int64x2_t *)(v136 + 1);
            a14.i64[0] = *v137;
            v143 = (int64x2_t *)(v137 + 1);
            v148 = vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64((int64x2_t)v65, (int64x2_t)v66), *f64);
            v149 = vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64((int64x2_t)a13, a14), *f64);
            v141 = v139 - 1;
          }
          for (; v141; v141 -= 2)
          {
            v151.f64[0] = *v146;
            v150 = &v146[(unint64_t)v50 / 8];
            v152 = *v150;
            v146 = &v150[(unint64_t)v50 / 8];
            v153 = *v144++;
            v66 = *v142++;
            v154 = *v145++;
            v151.f64[1] = v152;
            v155 = *v143++;
            v15 = (float64x2_t)vtrn1q_s64(v154, v155);
            v148 = vmlaq_laneq_f64(vmlaq_n_f64(v148, (float64x2_t)vtrn1q_s64(v153, (int64x2_t)v66), v151.f64[0]), (float64x2_t)vtrn2q_s64(v153, (int64x2_t)v66), v151, 1);
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, v15, v151.f64[0]), (float64x2_t)vtrn2q_s64(v154, v155), v151, 1);
          }
          v156 = (int64x2_t *)((char *)v144 - 8 * v147 - 8);
          v157 = (float64_t *)((char *)v146 - v50 * (v139 + 4));
          v159.f64[0] = *v157;
          v158 = &v157[(unint64_t)v50 / 8];
          v161 = *v158;
          v160 = &v158[(unint64_t)v50 / 8];
          v163.f64[0] = *v160;
          v162 = &v160[(unint64_t)v50 / 8];
          v164 = *v162;
          v165 = &v162[(unint64_t)v50 / 8 + v50 / 0xFFFFFFFFFFFFFFFELL];
          v159.f64[1] = v161;
          v163.f64[1] = v164;
          v65 = vmulq_n_f64(v163, a7);
          v166 = vsubq_f64(v65, v149);
          a14 = *v156;
          v14 = *(int8x16_t *)((char *)v142 - 8 * v147 - 8);
          *(_QWORD *)&v15.f64[0] = v145->i64[-v147];
          v166.f64[0] = vmlsq_lane_f64(v166, v15, v166.f64[1] * v70.f64[0], 0).f64[0] * v69.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, (int64x2_t)v14);
          v167 = vmlsq_lane_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v159, a7), v148), (float64x2_t)vtrn2q_s64(*v156, (int64x2_t)v14), v166.f64[1] * v70.f64[0], 0), a13, v166.f64[0], 0);
          v65.f64[0] = v167.f64[1] * v68.f64[0];
          a14.i64[0] = v156[-1].i64[1];
          v62 = vmlsq_lane_f64(v167, (float64x2_t)a14, v167.f64[1] * v68.f64[0], 0);
          v62.f64[0] = v62.f64[0] * v67.f64[0];
          *v165 = v62.f64[0];
          v168 = &v165[(unint64_t)v50 / 8];
          *v168 = v65.f64[0];
          v169 = &v168[(unint64_t)v50 / 8];
          *v169 = v166.f64[0];
          v169[(unint64_t)v50 / 8] = v166.f64[1] * v70.f64[0];
          ++f64;
          --v132;
        }
        while (v132);
      }
      v51 = (float64x2_t *)((char *)v51 + v52);
      v170 = v48 < 5;
      v48 -= 4;
    }
    while (!v170);
  }
}

uint64_t sub_20E82CE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t *v44;
  float32x4_t *v45;
  float32x2_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 *v50;
  float32x4_t v51;
  __int32 *v52;
  float32x2_t *v53;
  float32x2_t *v54;
  uint64_t result;
  float32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t *v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t *v68;
  float32x2_t *v69;
  uint64_t v70;
  unint64_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  uint64_t v85;
  unsigned __int32 *v86;
  float32x2_t v87;
  float v88;
  unsigned __int32 *v89;

  a7.i64[1] = a8.i64[0];
  v12 = 0;
  v13 = 4 * a4;
  v14 = 4 * a6;
  v15 = a1 <= 3;
  for (i = a1 - 3; !v15; v12 += 4)
  {
    v17 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v14);
    if (v12)
    {
      v18 = 0;
      do
      {
        v19 = a2;
        v20 = (float32x4_t *)(a3 + 4 * v12);
        v21 = (float32x4_t *)(a3 + 4 * v18);
        v22 = (float32x4_t)veorq_s8(a8, a8);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        do
        {
          v26 = *v21;
          v21 = (float32x4_t *)((char *)v21 + v13);
          v27 = *v20;
          v20 = (float32x4_t *)((char *)v20 + v13);
          v22 = vmlaq_n_f32(v22, v26, v27.f32[0]);
          v23 = vmlaq_lane_f32(v23, v26, *(float32x2_t *)v27.f32, 1);
          v24 = vmlaq_laneq_f32(v24, v26, v27, 2);
          v25 = vmlaq_laneq_f32(v25, v26, v27, 3);
          v15 = v19-- <= 1;
        }
        while (!v15);
        v29 = *v17;
        v28 = (float32x4_t *)((char *)v17 + v14);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v14);
        v33 = *v30;
        v32 = (float32x4_t *)((char *)v30 + v14);
        v34 = *v32;
        v35 = (__n128 *)((char *)v32 + v14 + -4 * v14);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v22, a7.f32[0]), v29, a7, 2);
        *v35 = (__n128)a8;
        v36 = (float32x4_t *)((char *)v35 + v14);
        *v36 = vmlaq_laneq_f32(vmulq_n_f32(v23, a7.f32[0]), v31, a7, 2);
        v37 = (float32x4_t *)((char *)v36 + v14);
        *v37 = vmlaq_laneq_f32(vmulq_n_f32(v24, a7.f32[0]), v33, a7, 2);
        v38 = (float32x4_t *)((char *)v37 + v14);
        *v38 = vmlaq_laneq_f32(vmulq_n_f32(v25, a7.f32[0]), v34, a7, 2);
        v17 = (float32x4_t *)((char *)v38 + v14 + -4 * v14 + 16);
        v18 += 4;
      }
      while (v18 < v12);
    }
    v39 = a2;
    v40 = (float32x4_t *)(a3 + 4 * v12);
    a8 = veorq_s8(a8, a8);
    v41 = *(float32x2_t *)a8.i8;
    v42 = (float32x4_t)a8;
    v43 = (float32x4_t)a8;
    do
    {
      a12 = *v40;
      v40 = (float32x4_t *)((char *)v40 + v13);
      *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a12.f32[0]);
      v41 = vmla_lane_f32(v41, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
      v42 = vmlaq_laneq_f32(v42, a12, a12, 2);
      v43 = vmlaq_laneq_f32(v43, a12, a12, 3);
      v15 = v39-- <= 1;
    }
    while (!v15);
    a12.i32[0] = v17->i32[0];
    v44 = (float32x2_t *)((char *)v17 + v14);
    v46 = *v44;
    v45 = (float32x4_t *)((char *)v44 + v14);
    v48 = *v45;
    v47 = (float32x4_t *)((char *)v45 + v14);
    v49 = *v47;
    v50 = (__int32 *)((char *)v47 + v14 + -4 * v14);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v51 = vmlaq_laneq_f32(vmulq_n_f32(v42, a7.f32[0]), v48, a7, 2);
    v52 = &v50[(unint64_t)v14 / 2];
    *v50 = a8.i32[0];
    v53 = (float32x2_t *)&v50[(unint64_t)v14 / 4];
    *v53 = vmla_laneq_f32(vmul_n_f32(v41, a7.f32[0]), v46, a7, 2);
    v54 = (float32x2_t *)((char *)v53 + v14);
    *v54 = *(float32x2_t *)v51.f32;
    v52[2] = v51.i32[2];
    *(float32x4_t *)&v54->f32[(unint64_t)v14 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v43, a7.f32[0]), v49, a7, 2);
    v15 = i <= 4;
    i -= 4;
  }
  v15 = i <= -3;
  result = i + 3;
  if (!v15)
  {
    if (result >= 2)
    {
      v56 = (float32x2_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v14);
      if (v12)
      {
        v57 = 0;
        do
        {
          v58 = a2;
          v59 = (float32x2_t *)(a3 + 4 * v12);
          v60 = (float32x2_t *)(a3 + 4 * v57);
          v61 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v62 = v61;
          do
          {
            v63 = *v60;
            v60 = (float32x2_t *)((char *)v60 + v13);
            v64 = *v59;
            v59 = (float32x2_t *)((char *)v59 + v13);
            v61 = vmla_n_f32(v61, v63, v64.f32[0]);
            v62 = vmla_lane_f32(v62, v63, v64, 1);
            v15 = v58-- <= 1;
          }
          while (!v15);
          v66 = *v56;
          v65 = (float32x2_t *)((char *)v56 + v14);
          v67 = *v65;
          v68 = (float32x2_t *)((char *)v65 + v14 + -2 * v14);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v66, a7, 2);
          *v68 = *(float32x2_t *)a8.i8;
          v69 = (float32x2_t *)((char *)v68 + v14);
          *v69 = vmla_laneq_f32(vmul_n_f32(v62, a7.f32[0]), v67, a7, 2);
          v56 = (float32x2_t *)((char *)v69 + v14 + -2 * v14 + 8);
          v57 += 2;
        }
        while (v57 < v12);
      }
      v70 = a2;
      v71 = (unint64_t *)(a3 + 4 * v12);
      v72 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v73 = v72;
      do
      {
        a12.i64[0] = *v71;
        v71 = (unint64_t *)((char *)v71 + v13);
        v72 = vmla_n_f32(v72, *(float32x2_t *)a12.f32, a12.f32[0]);
        v73 = vmla_lane_f32(v73, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32, 1);
        v15 = v70-- <= 1;
      }
      while (!v15);
      a12.i32[0] = v56->i32[0];
      v74 = (float32x2_t *)((char *)v56 + v14);
      v75 = *v74;
      v76 = (float32x2_t *)((char *)v74 + v14 + -2 * v14);
      v72.f32[0] = v72.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v72, *(float32x2_t *)a12.f32, a7, 2);
      v76->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v76 + v14) = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), v75, a7, 2);
      result -= 2;
      v12 += 2;
    }
    if (result >= 1)
    {
      v77 = (float32x2_t *)a5;
      v78 = 0;
      if (v12 >= 1)
      {
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + 4 * v12);
          v81 = (float32x2_t *)(a3 + 4 * v78);
          v82 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          do
          {
            v83 = *v81;
            v81 = (float32x2_t *)((char *)v81 + v13);
            v84 = *v80;
            v80 = (float *)((char *)v80 + v13);
            v82 = vmla_n_f32(v82, v83, v84);
            v15 = v79-- <= 1;
          }
          while (!v15);
          *(float32x2_t *)a12.f32 = *v77;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v82, a7.f32[0]), *v77, a7, 2);
          *v77++ = *(float32x2_t *)a8.i8;
          v78 += 2;
        }
        while (v78 < v12 - 1);
      }
      v85 = a2;
      v86 = (unsigned __int32 *)(a3 + 4 * v12);
      v87 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v88 = *(float *)v86,
            v86 = (unsigned __int32 *)((char *)v86 + v13),
            v87.f32[0] = v88 * v88,
            v85 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i32[0] = *v86;
          v89 = &v86[(unint64_t)v13 / 4];
          a12.i32[1] = *v89;
          v86 = &v89[(unint64_t)v13 / 4];
          v87 = vmla_f32(v87, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v15 = v85 <= 2;
          v85 -= 2;
        }
        while (!v15);
        v87.f32[0] = vaddv_f32(v87);
      }
      a12.i32[0] = v77->i32[0];
      v87.f32[0] = v87.f32[0] * a7.f32[0];
      v77->i32[0] = vmla_laneq_f32(v87, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void sub_20E82D0F8(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t a6, double a7, double a8, int8x16_t a9)
{
  float64x2_t v9;
  const double *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v23;
  uint64_t v24;
  const double *v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64_t *f64;
  int8x16_t *v34;
  float64x2_t v35;
  double *v36;
  float64x2_t v37;
  double *v38;
  float64x2_t v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  double *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v11 = a3;
  v13 = a6;
  v14 = 0;
  if (a2 >= 4)
  {
    v80 = a2 - 3;
    v15 = __N - 3;
    v16 = 3 * a6;
    v17 = 8 * a4;
    v18 = __N & 3;
    if (__N <= 0)
      v18 = -(-__N & 3);
    v78 = 2 * a4;
    v79 = 8 * __N;
    v77 = a4 + 1;
    v19 = 3 * a6;
    v20 = a6;
    v21 = a5;
    v23 = a5;
    while (1)
    {
      if (__N < 4)
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        v25 = v11;
        v26 = v21;
        v27 = __N;
        v28 = v79;
        do
        {
          v29 = v27 - 4;
          a9 = veorq_s8(a9, a9);
          *(double *)a9.i64 = v25[a4];
          v30 = (float64x2_t *)&v25[(unint64_t)v17 / 8 + (unint64_t)v17 / 8];
          v9 = (float64x2_t)veorq_s8((int8x16_t)v9, (int8x16_t)v9);
          v32 = *v30;
          v31 = (float64x2_t *)((char *)v30 + v17);
          f64 = v31[1].f64;
          v35 = *v31;
          v34 = (int8x16_t *)((char *)v31 + v17);
          v9.f64[0] = *f64;
          v37 = v26[1];
          v36 = v26[2].f64;
          v39 = *(float64x2_t *)((char *)v26 + v13 * 8 + 16);
          v38 = &v26[2].f64[v13];
          v41 = v26[v20 + 1];
          v40 = v26[v20 + 2].f64;
          v43 = *(float64x2_t *)((char *)v26 + v19 * 8 + 16);
          v42 = &v26[2].f64[v19];
          v44 = vmlaq_laneq_f64(v37, v9, v37, 1);
          v45 = vmlaq_laneq_f64(v39, v9, v39, 1);
          v46 = vmlaq_laneq_f64(v41, v9, v41, 1);
          v47 = vmlaq_laneq_f64(v43, v9, v43, 1);
          v48 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*v26, (float64x2_t)a9, *v26, 1), v32, v37.f64[0]), v35, v37, 1);
          v49 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*(float64x2_t *)((char *)v26 + 8 * a6), (float64x2_t)a9, *(float64x2_t *)((char *)v26 + 8 * a6), 1), v32, v39.f64[0]), v35, v39, 1);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v26[a6], (float64x2_t)a9, v26[a6], 1), v32, v41.f64[0]), v35, v41, 1);
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(*(float64x2_t *)((char *)v26 + 24 * a6), (float64x2_t)a9, *(float64x2_t *)((char *)v26 + 24 * a6), 1), v32, v43.f64[0]), v35, v43, 1);
          if ((((_DWORD)v27 - 4) & 1) != 0)
          {
            v52 = *(float64x2_t *)v34;
            a9 = v34[1];
            v34 = (int8x16_t *)((char *)v34 + v17);
            v53 = *v36;
            v36 = &v26[2].f64[1];
            v54 = *v38;
            v38 = &v26[2].f64[v13 + 1];
            v55 = *v40;
            v40 = &v26[v20 + 2].f64[1];
            v56 = *v42;
            v42 = &v26[2].f64[v19 + 1];
            v48 = vmlaq_n_f64(v48, v52, v53);
            v49 = vmlaq_n_f64(v49, v52, v54);
            v50 = vmlaq_n_f64(v50, v52, v55);
            v51 = vmlaq_n_f64(v51, v52, v56);
            v44 = vmlaq_n_f64(v44, (float64x2_t)a9, v53);
            v45 = vmlaq_n_f64(v45, (float64x2_t)a9, v54);
            v46 = vmlaq_n_f64(v46, (float64x2_t)a9, v55);
            v47 = vmlaq_n_f64(v47, (float64x2_t)a9, v56);
            v29 = v27 - 5;
          }
          for (; v29; v29 -= 2)
          {
            v58 = *(float64x2_t *)v34;
            a9 = v34[1];
            v57 = (float64x2_t *)&v34->i8[v17];
            v59 = *v57;
            v9 = v57[1];
            v34 = (int8x16_t *)((char *)v57 + v17);
            v60 = *(float64x2_t *)v36;
            v36 += 2;
            v61 = *(float64x2_t *)v38;
            v38 += 2;
            v62 = *(float64x2_t *)v40;
            v40 += 2;
            v63 = *(float64x2_t *)v42;
            v42 += 2;
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v58, v60.f64[0]), v59, v60, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v58, v61.f64[0]), v59, v61, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v58, v62.f64[0]), v59, v62, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v58, v63.f64[0]), v59, v63, 1);
            v44 = vmlaq_laneq_f64(vmlaq_n_f64(v44, (float64x2_t)a9, v60.f64[0]), v9, v60, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, (float64x2_t)a9, v61.f64[0]), v9, v61, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, (float64x2_t)a9, v62.f64[0]), v9, v62, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, (float64x2_t)a9, v63.f64[0]), v9, v63, 1);
          }
          v64 = (float64x2_t *)((char *)v36 - v28);
          v65 = (float64x2_t *)((char *)v38 - v28);
          v66 = (float64x2_t *)((char *)v40 - v28);
          v67 = (float64x2_t *)((char *)v42 - v28);
          *v64 = vmulq_n_f64(v48, a7);
          v64[1] = vmulq_n_f64(v44, a7);
          *v65 = vmulq_n_f64(v49, a7);
          v65[1] = vmulq_n_f64(v45, a7);
          *v66 = vmulq_n_f64(v50, a7);
          v66[1] = vmulq_n_f64(v46, a7);
          *v67 = vmulq_n_f64(v51, a7);
          v67[1] = vmulq_n_f64(v47, a7);
          v24 += 4;
          v28 -= 32;
          v27 -= 4;
          v26 += 2;
          v25 += 4 * a4 + 4;
        }
        while (v24 < v15);
      }
      a5 = v23;
      v68 = &v23->f64[v14 * a6 + v24];
      v11 = a3;
      v69 = (uint64_t)&a3[v24 + v24 * a4];
      if (v18 == 3)
        break;
      if (v18 == 2)
      {
        v70 = a7;
        v72 = (2 * a6) | 1;
        v71 = a6 + 1;
        v73 = v16 + 1;
LABEL_20:
        *v68 = v70 * (*v68 + v68[1] * *(double *)(v69 + 8 * a4));
        v68[a6] = v70 * (v68[a6] + v68[v71] * *(double *)(v69 + 8 * a4));
        v68[2 * a6] = v70 * (v68[2 * a6] + v68[v72] * *(double *)(v69 + 8 * a4));
        v68[3 * a6] = v70 * (v68[3 * a6] + v68[v73] * *(double *)(v69 + 8 * a4));
        ++v68;
        goto LABEL_21;
      }
      if (v18 == 1)
      {
        v70 = a7;
LABEL_21:
        *v68 = v70 * *v68;
        v68[a6] = v70 * v68[a6];
        v68[2 * a6] = a7 * v68[2 * a6];
        *(double *)a9.i64 = v68[3 * a6];
        v68[3 * a6] = a7 * *(double *)a9.i64;
      }
      v14 += 4;
      v21 += 2 * a6;
      if (v14 >= v80)
        goto LABEL_23;
    }
    v70 = a7;
    *v68 = a7 * (*v68 + v68[1] * *(double *)(v69 + 8 * a4) + v68[2] * *(double *)(v69 + 8 * v78));
    v71 = a6 + 1;
    v68[a6] = a7 * (v68[a6] + v68[a6 + 1] * *(double *)(v69 + 8 * a4) + v68[a6 + 2] * *(double *)(v69 + 8 * v78));
    v72 = (2 * a6) | 1;
    v68[2 * a6] = a7
                * (v68[2 * a6] + v68[v72] * *(double *)(v69 + 8 * a4) + v68[2 * a6 + 2] * *(double *)(v69 + 8 * v78));
    v73 = v16 + 1;
    v68[3 * a6] = a7
                * (v68[3 * a6] + v68[v16 + 1] * *(double *)(v69 + 8 * a4) + v68[v16 + 2] * *(double *)(v69 + 8 * v78));
    v69 += 8 * v77;
    ++v68;
    goto LABEL_20;
  }
LABEL_23:
  v74 = a2 - v14;
  if (a2 > v14)
  {
    v75 = &a5->f64[v14 * a6];
    do
    {
      cblas_dscal(__N, a7, v75, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasUnit, __N, v11, a4, v75, 1);
      v75 = (double *)((char *)v75 + v13 * 8);
      --v74;
    }
    while (v74);
  }
}

void sub_20E82D5EC(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t a6, double a7, __n128 a8)
{
  const double *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v21;
  uint64_t v22;
  const double *v23;
  float64x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  __n128 *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  __n128 *v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  double *f64;
  float64x2_t v42;
  double *v43;
  float64x2_t v44;
  double *v45;
  float64x2_t v46;
  double *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;
  double *v74;
  double *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v9 = a3;
  v11 = a6;
  v12 = 0;
  if (a2 >= 4)
  {
    v87 = a2 - 3;
    v13 = __N - 3;
    v14 = 3 * a6;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v84 = 2 * a4;
    v86 = 8 * __N;
    v85 = a4 + 1;
    v17 = 3 * a6;
    v18 = a6;
    v19 = a5;
    v21 = a5;
    while (1)
    {
      if (__N < 4)
      {
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = v9;
        v24 = v19;
        v25 = __N;
        v26 = v86;
        do
        {
          v27 = v25 - 4;
          v28 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v28.f64[0] = *v23;
          v30 = *(float64x2_t *)&v23[a4];
          v29 = (__n128 *)&v23[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v31 = vmlaq_n_f64(vmulq_laneq_f64(v30, *v24, 1), v28, v24->f64[0]);
          v32 = vmlaq_n_f64(vmulq_laneq_f64(v30, *(float64x2_t *)((char *)v24 + 8 * a6), 1), v28, v24->f64[a6]);
          v33 = vmlaq_n_f64(vmulq_laneq_f64(v30, v24[a6], 1), v28, v24[a6].f64[0]);
          v34 = vmlaq_n_f64(vmulq_laneq_f64(v30, *(float64x2_t *)((char *)v24 + 24 * a6), 1), v28, v24->f64[3 * a6]);
          v35 = (float64x2_t)veorq_s8((int8x16_t)v30, (int8x16_t)v30);
          v36 = v29 + 1;
          a8 = *v29;
          v37 = (float64x2_t *)((char *)v29 + v15);
          *(_QWORD *)&v35.f64[0] = v36->n128_u64[0];
          v39 = *v37;
          v40 = v37[1];
          v38 = (float64x2_t *)((char *)v37 + v15);
          v42 = v24[1];
          f64 = v24[2].f64;
          v44 = *(float64x2_t *)((char *)v24 + v11 * 8 + 16);
          v43 = &v24[2].f64[v11];
          v46 = v24[v18 + 1];
          v45 = v24[v18 + 2].f64;
          v48 = *(float64x2_t *)((char *)v24 + v17 * 8 + 16);
          v47 = &v24[2].f64[v17];
          v49 = vmlaq_n_f64(vmulq_laneq_f64(v40, v42, 1), v35, v42.f64[0]);
          v50 = vmlaq_n_f64(vmulq_laneq_f64(v40, v44, 1), v35, v44.f64[0]);
          v51 = vmlaq_n_f64(vmulq_laneq_f64(v40, v46, 1), v35, v46.f64[0]);
          v52 = vmlaq_n_f64(vmulq_laneq_f64(v40, v48, 1), v35, v48.f64[0]);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v31, (float64x2_t)a8, v42.f64[0]), v39, v42, 1);
          v54 = vmlaq_laneq_f64(vmlaq_n_f64(v32, (float64x2_t)a8, v44.f64[0]), v39, v44, 1);
          v55 = vmlaq_laneq_f64(vmlaq_n_f64(v33, (float64x2_t)a8, v46.f64[0]), v39, v46, 1);
          v56 = vmlaq_laneq_f64(vmlaq_n_f64(v34, (float64x2_t)a8, v48.f64[0]), v39, v48, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            a8 = *(__n128 *)v38;
            v57 = v38[1];
            v38 = (float64x2_t *)((char *)v38 + v15);
            v58 = *f64;
            f64 = &v24[2].f64[1];
            v59 = *v43;
            v43 = &v24[2].f64[v11 + 1];
            v60 = *v45;
            v45 = &v24[v18 + 2].f64[1];
            v61 = *v47;
            v47 = &v24[2].f64[v17 + 1];
            v53 = vmlaq_n_f64(v53, (float64x2_t)a8, v58);
            v54 = vmlaq_n_f64(v54, (float64x2_t)a8, v59);
            v55 = vmlaq_n_f64(v55, (float64x2_t)a8, v60);
            v56 = vmlaq_n_f64(v56, (float64x2_t)a8, v61);
            v49 = vmlaq_n_f64(v49, v57, v58);
            v50 = vmlaq_n_f64(v50, v57, v59);
            v51 = vmlaq_n_f64(v51, v57, v60);
            v52 = vmlaq_n_f64(v52, v57, v61);
            v27 = v25 - 5;
          }
          for (; v27; v27 -= 2)
          {
            a8 = *(__n128 *)v38;
            v63 = v38[1];
            v62 = (float64x2_t *)((char *)v38 + v15);
            v64 = *v62;
            v65 = v62[1];
            v38 = (float64x2_t *)((char *)v62 + v15);
            v66 = *(float64x2_t *)f64;
            f64 += 2;
            v67 = *(float64x2_t *)v43;
            v43 += 2;
            v68 = *(float64x2_t *)v45;
            v45 += 2;
            v69 = *(float64x2_t *)v47;
            v47 += 2;
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)a8, v66.f64[0]), v64, v66, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, (float64x2_t)a8, v67.f64[0]), v64, v67, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, (float64x2_t)a8, v68.f64[0]), v64, v68, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)a8, v69.f64[0]), v64, v69, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v63, v66.f64[0]), v65, v66, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v63, v67.f64[0]), v65, v67, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v63, v68.f64[0]), v65, v68, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v63, v69.f64[0]), v65, v69, 1);
          }
          v70 = (float64x2_t *)((char *)f64 - v26);
          v71 = (float64x2_t *)((char *)v43 - v26);
          v72 = (float64x2_t *)((char *)v45 - v26);
          v73 = (float64x2_t *)((char *)v47 - v26);
          *v70 = vmulq_n_f64(v53, a7);
          v70[1] = vmulq_n_f64(v49, a7);
          *v71 = vmulq_n_f64(v54, a7);
          v71[1] = vmulq_n_f64(v50, a7);
          *v72 = vmulq_n_f64(v55, a7);
          v72[1] = vmulq_n_f64(v51, a7);
          *v73 = vmulq_n_f64(v56, a7);
          v73[1] = vmulq_n_f64(v52, a7);
          v22 += 4;
          v26 -= 32;
          v25 -= 4;
          v24 += 2;
          v23 += 4 * a4 + 4;
        }
        while (v22 < v13);
      }
      a5 = v21;
      v74 = &v21->f64[v12 * a6 + v22];
      v9 = a3;
      v75 = (double *)&a3[v22 + v22 * a4];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v76 = a7;
        v78 = (2 * a6) | 1;
        v77 = a6 + 1;
        v80 = v85;
        v79 = v14 + 1;
LABEL_20:
        *v74 = v76 * (*v74 * *v75 + v74[1] * v75[a4]);
        v74[a6] = v76 * (v74[a6] * *v75 + v74[v77] * v75[a4]);
        v74[2 * a6] = v76 * (v74[2 * a6] * *v75 + v74[v78] * v75[a4]);
        v74[3 * a6] = v76 * (v74[3 * a6] * *v75 + v74[v79] * v75[a4]);
        v75 += v80;
        ++v74;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v76 = a7;
LABEL_21:
        *v74 = v76 * (*v74 * *v75);
        v74[a6] = v76 * (v74[a6] * *v75);
        v74[2 * a6] = a7 * (v74[2 * a6] * *v75);
        a8.n128_f64[0] = a7 * (v74[3 * a6] * *v75);
        v74[3 * a6] = a8.n128_f64[0];
      }
      v12 += 4;
      v19 += 2 * a6;
      if (v12 >= v87)
        goto LABEL_23;
    }
    v76 = a7;
    *v74 = a7 * (v74[1] * v75[a4] + v74[2] * v75[v84] + *v74 * *v75);
    v77 = a6 + 1;
    v74[a6] = a7 * (v74[a6 + 1] * v75[a4] + v74[a6 + 2] * v75[v84] + v74[a6] * *v75);
    v78 = (2 * a6) | 1;
    v74[2 * a6] = a7 * (v74[v78] * v75[a4] + v74[2 * a6 + 2] * v75[v84] + v74[2 * a6] * *v75);
    v80 = v85;
    v79 = v14 + 1;
    v74[3 * a6] = a7 * (v74[v14 + 1] * v75[a4] + v74[v14 + 2] * v75[v84] + v74[3 * a6] * *v75);
    v75 += v85;
    ++v74;
    goto LABEL_20;
  }
LABEL_23:
  v81 = a2 - v12;
  if (a2 > v12)
  {
    v82 = &a5->f64[v12 * a6];
    do
    {
      cblas_dscal(__N, a7, v82, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, __N, v9, a4, v82, 1);
      v82 = (double *)((char *)v82 + v11 * 8);
      --v81;
    }
    while (v81);
  }
}

void sub_20E82DB40(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, int64x2_t a9)
{
  uint64_t v10;
  const double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float64x2_t v33;
  float64_t *v34;
  float64_t *v35;
  int64x2_t v36;
  unint64_t *v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  double v64;
  double v65;
  double v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  BOOL v78;
  uint64_t v79;
  double *v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const double *v105;

  v10 = a4;
  v11 = a3;
  v12 = __N;
  v13 = 0;
  if (a2 >= 4)
  {
    v103 = a2 - 3;
    v14 = 3 * a6;
    v15 = 2 * a6;
    if (__N <= 0)
      v16 = -(-__N & 3);
    else
      v16 = __N & 3;
    v94 = v15 - 2;
    v93 = v14 - 2;
    v92 = -a4;
    v17 = 8 * __N;
    v98 = (uint64_t)&a3[a4 * (__N - 1) - 4];
    v18 = 32 * ~a4;
    v97 = (uint64_t)&a3[a4 * (__N - 2) - 4];
    v96 = (uint64_t)&a3[a4 * (__N - 3) - 4];
    v95 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v19 = a5 - 32;
    v101 = 32 * a6;
    v20 = a5 - 32 + 24 * a6;
    v21 = a5 - 32 + 16 * a6;
    v22 = a5 - 32 + 8 * a6;
    v105 = v11;
    v104 = v10;
    v102 = v16;
    v100 = v15 - 1;
    v99 = v14 - 1;
    while (1)
    {
      v10 = v12;
      if (v12 >= 4)
      {
        v23 = v19;
        v24 = v22;
        v25 = v21;
        v26 = v20;
        v28 = v95;
        v27 = v96;
        v30 = v97;
        v29 = v98;
        v31 = __N;
        do
        {
          v10 = v31 - 4;
          v32 = v31 - 4;
          *(_QWORD *)&v33.f64[0] = veorq_s8((int8x16_t)a9, (int8x16_t)a9).u64[0];
          v34 = (float64_t *)(v28 + v17 - 8 * (v31 - 4));
          v33.f64[1] = *(float64_t *)(v27 + v17);
          v35 = (float64_t *)(v27 + v17 - 8 * (v31 - 4));
          v36 = *(int64x2_t *)(v30 + v17);
          v37 = (unint64_t *)(v30 + v17 - 8 * (v31 - 4));
          v38 = *(int64x2_t *)(v29 + v17);
          v39 = *(float64x2_t *)(v23 + v17);
          v40 = *(float64x2_t *)(v24 + v17);
          v41 = *(float64x2_t *)(v25 + v17);
          v42 = *(float64x2_t *)(v26 + v17);
          v43 = (float64x2_t)vtrn1q_s64(v36, v38);
          v44 = (float64x2_t)vtrn2q_s64(v36, v38);
          v45 = vmlaq_laneq_f64(vmulq_n_f64(v43, v39.f64[0]), v44, v39, 1);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v43, v40.f64[0]), v44, v40, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, v41, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v43, v42.f64[0]), v44, v42, 1);
          v49 = vmlaq_n_f64(v39, v33, v39.f64[0]);
          v50 = vmlaq_n_f64(v40, v33, v40.f64[0]);
          v51 = vmlaq_n_f64(v41, v33, v41.f64[0]);
          v52 = vmlaq_n_f64(v42, v33, v42.f64[0]);
          a9.i64[0] = veorq_s8((int8x16_t)v33, (int8x16_t)v33).u64[0];
          a9.i64[1] = *(_QWORD *)(v29 + v17 + 16);
          v53 = (unint64_t *)(v29 + v17 - 8 * (v31 - 4));
          v54 = v23 + v17 - 8 * (v31 - 4);
          v55 = v24 + v17 - 8 * (v31 - 4);
          v56 = v25 + v17 - 8 * (v31 - 4);
          v57 = vmlaq_n_f64(vaddq_f64(v45, *(float64x2_t *)(v23 + v17 + 16)), (float64x2_t)a9, *(double *)(v23 + v17 + 16));
          v58 = v26 + v17 - 8 * (v31 - 4);
          v59 = vmlaq_n_f64(vaddq_f64(v46, *(float64x2_t *)(v24 + v17 + 16)), (float64x2_t)a9, *(double *)(v24 + v17 + 16));
          v60 = vmlaq_n_f64(vaddq_f64(v47, *(float64x2_t *)(v25 + v17 + 16)), (float64x2_t)a9, *(double *)(v25 + v17 + 16));
          v61 = vmlaq_n_f64(vaddq_f64(v48, *(float64x2_t *)(v26 + v17 + 16)), (float64x2_t)a9, *(double *)(v26 + v17 + 16));
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            v62.f64[0] = *v34++;
            v62.f64[1] = *v35++;
            a9.i64[0] = *v37++;
            a9.i64[1] = *v53++;
            v63 = *(double *)v54;
            v54 += 8;
            v64 = *(double *)v55;
            v55 += 8;
            v65 = *(double *)v56;
            v56 += 8;
            v66 = *(double *)v58;
            v58 += 8;
            v49 = vmlaq_n_f64(v49, v62, v63);
            v50 = vmlaq_n_f64(v50, v62, v64);
            v51 = vmlaq_n_f64(v51, v62, v65);
            v52 = vmlaq_n_f64(v52, v62, v66);
            v57 = vmlaq_n_f64(v57, (float64x2_t)a9, v63);
            v59 = vmlaq_n_f64(v59, (float64x2_t)a9, v64);
            v60 = vmlaq_n_f64(v60, (float64x2_t)a9, v65);
            v61 = vmlaq_n_f64(v61, (float64x2_t)a9, v66);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v67 = *(int64x2_t *)v34;
            v34 += 2;
            v68 = *(int64x2_t *)v35;
            v35 += 2;
            v69 = *(int64x2_t *)v37;
            v37 += 2;
            v70 = *(int64x2_t *)v53;
            v53 += 2;
            v71 = *(float64x2_t *)v54;
            v54 += 16;
            v72 = *(float64x2_t *)v55;
            v55 += 16;
            v73 = *(float64x2_t *)v56;
            v56 += 16;
            v74 = *(float64x2_t *)v58;
            v58 += 16;
            v75 = (float64x2_t)vtrn1q_s64(v67, v68);
            v76 = (float64x2_t)vtrn2q_s64(v67, v68);
            v77 = (float64x2_t)vtrn1q_s64(v69, v70);
            a9 = vtrn2q_s64(v69, v70);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v75, v71.f64[0]), v76, v71, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v75, v72.f64[0]), v76, v72, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v75, v73.f64[0]), v76, v73, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v75, v74.f64[0]), v76, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v77, v71.f64[0]), (float64x2_t)a9, v71, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v77, v72.f64[0]), (float64x2_t)a9, v72, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v77, v73.f64[0]), (float64x2_t)a9, v73, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v77, v74.f64[0]), (float64x2_t)a9, v74, 1);
          }
          *(float64x2_t *)v54 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v54 + 16) = vmulq_n_f64(v57, a7);
          *(float64x2_t *)v55 = vmulq_n_f64(v50, a7);
          *(float64x2_t *)(v55 + 16) = vmulq_n_f64(v59, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v51, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v60, a7);
          *(float64x2_t *)v58 = vmulq_n_f64(v52, a7);
          *(float64x2_t *)(v58 + 16) = vmulq_n_f64(v61, a7);
          v29 += v18;
          v30 += v18;
          v27 += v18;
          v28 += v18;
          v26 -= 32;
          v25 -= 32;
          v24 -= 32;
          v23 -= 32;
          v78 = v31 > 7;
          v31 -= 4;
        }
        while (v78);
      }
      v79 = v10 - 1;
      v80 = (double *)(a5 + 8 * v13 * a6 + 8 * (v10 - 1));
      LODWORD(v10) = v104;
      v11 = v105;
      v81 = (double *)&v105[v79 * v104];
      if (v102 == 3)
        break;
      if (v102 == 2)
      {
        v84 = a7;
        v12 = __N;
        v83 = 2 * a6;
        v82 = 3 * a6;
        v86 = v100;
        v85 = a6 - 1;
        v87 = v99;
LABEL_19:
        *v80 = v84 * (*v80 + *(v80 - 1) * *v81);
        v80[a6] = v84 * (v80[a6] + v80[v85] * *v81);
        v80[v83] = v84 * (v80[v83] + v80[v86] * *v81);
        v80[v82] = v84 * (v80[v82] + v80[v87] * *v81);
        --v80;
        goto LABEL_20;
      }
      v12 = __N;
      v83 = 2 * a6;
      v82 = 3 * a6;
      if (v102 == 1)
      {
        v84 = a7;
LABEL_20:
        *v80 = v84 * *v80;
        v80[a6] = v84 * v80[a6];
        v80[v83] = a7 * v80[v83];
        *(double *)a9.i64 = v80[v82];
        v80[v82] = a7 * *(double *)a9.i64;
      }
      v13 += 4;
      v20 += v101;
      v21 += v101;
      v22 += v101;
      v19 += v101;
      if (v13 >= v103)
        goto LABEL_22;
    }
    v84 = a7;
    *v80 = a7 * (*v80 + *(v80 - 1) * v81[1] + *(v80 - 2) * *v81);
    v85 = a6 - 1;
    v83 = 2 * a6;
    v80[a6] = a7 * (v80[a6] + v80[a6 - 1] * v81[1] + v80[a6 - 2] * *v81);
    v87 = v99;
    v86 = v100;
    v80[2 * a6] = a7 * (v80[2 * a6] + v80[v100] * v81[1] + v80[v94] * *v81);
    v82 = 3 * a6;
    v80[3 * a6] = a7 * (v80[3 * a6] + v80[v99] * v81[1] + v80[v93] * *v81);
    v81 += v92;
    --v80;
    v12 = __N;
    goto LABEL_19;
  }
LABEL_22:
  v88 = a2 - v13;
  if (a2 > v13)
  {
    v89 = (double *)(a5 + 8 * v13 * a6);
    v90 = 8 * a6;
    do
    {
      cblas_dscal(v12, a7, v89, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasUnit, v12, v11, v10, v89, 1);
      v89 = (double *)((char *)v89 + v90);
      --v88;
    }
    while (v88);
  }
}

void sub_20E82E0F4(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8)
{
  int v9;
  const double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t *v34;
  int64x2_t v35;
  unint64_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64_t *v58;
  float64_t *v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t v62;
  uint64_t v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  BOOL v84;
  uint64_t v85;
  double *v86;
  double *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const double *v112;

  v9 = a4;
  v10 = a3;
  v11 = __N;
  v12 = 0;
  if (a2 >= 4)
  {
    v110 = a2 - 3;
    v13 = 3 * a6;
    v14 = 2 * a6;
    if (__N <= 0)
      v15 = -(-__N & 3);
    else
      v15 = __N & 3;
    v100 = v14 - 2;
    v99 = v13 - 2;
    v16 = 8 * __N;
    v17 = 32 * ~a4;
    v103 = (uint64_t)&a3[a4 * (__N - 2) - 4];
    v104 = (uint64_t)&a3[a4 * (__N - 1) - 4];
    v101 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v102 = (uint64_t)&a3[a4 * (__N - 3) - 4];
    v18 = a5 - 32;
    v108 = 32 * a6;
    v19 = a5 - 32 + 24 * a6;
    v20 = a5 - 32 + 16 * a6;
    v21 = a5 - 32 + 8 * a6;
    v112 = v10;
    v109 = v15;
    v106 = v13 - 1;
    v107 = v14 - 1;
    v105 = -a4;
    while (1)
    {
      v22 = v11;
      if (v11 >= 4)
      {
        v23 = v18;
        v24 = v21;
        v25 = v20;
        v26 = v19;
        v28 = v101;
        v27 = v102;
        v30 = v103;
        v29 = v104;
        v31 = __N;
        do
        {
          v22 = v31 - 4;
          v32 = v31 - 4;
          v33 = (int64x2_t)veorq_s8(a8, a8);
          v33.i64[0] = *(_QWORD *)(v28 + v16);
          v34 = (unint64_t *)(v28 + v16 - 8 * (v31 - 4));
          v35 = *(int64x2_t *)(v27 + v16);
          v36 = (unint64_t *)(v27 + v16 - 8 * (v31 - 4));
          v37 = *(int64x2_t *)(v30 + v16);
          v38 = *(int64x2_t *)(v29 + v16);
          v39 = *(float64x2_t *)(v23 + v16);
          v40 = *(float64x2_t *)(v24 + v16);
          v41 = *(float64x2_t *)(v25 + v16);
          v42 = *(float64x2_t *)(v26 + v16);
          v43 = (float64x2_t)vtrn1q_s64(v33, v35);
          v44 = (float64x2_t)vtrn2q_s64(v33, v35);
          v45 = (float64x2_t)vtrn1q_s64(v37, v38);
          v46 = (float64x2_t)vtrn2q_s64(v37, v38);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v43, v39.f64[0]), v44, v39, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v43, v40.f64[0]), v44, v40, 1);
          v49 = vmlaq_laneq_f64(vmulq_n_f64(v43, v41.f64[0]), v44, v41, 1);
          v50 = vmlaq_laneq_f64(vmulq_n_f64(v43, v42.f64[0]), v44, v42, 1);
          v51 = vmlaq_laneq_f64(vmulq_n_f64(v45, v39.f64[0]), v46, v39, 1);
          v52 = vmlaq_laneq_f64(vmulq_n_f64(v45, v40.f64[0]), v46, v40, 1);
          v53 = vmlaq_laneq_f64(vmulq_n_f64(v45, v41.f64[0]), v46, v41, 1);
          v54 = vmlaq_laneq_f64(vmulq_n_f64(v45, v42.f64[0]), v46, v42, 1);
          a8 = veorq_s8((int8x16_t)v45, (int8x16_t)v45);
          a8.i64[0] = *(_QWORD *)(v30 + v16 + 16);
          v55 = *(int64x2_t *)(v29 + v16 + 16);
          v56 = (float64x2_t)vtrn1q_s64((int64x2_t)a8, v55);
          v57 = (float64x2_t)vtrn2q_s64((int64x2_t)a8, v55);
          v58 = (float64_t *)(v30 + v16 - 8 * (v31 - 4));
          v59 = (float64_t *)(v29 + v16 - 8 * (v31 - 4));
          v60 = v23 + v16 - 8 * (v31 - 4);
          v61 = v24 + v16 - 8 * (v31 - 4);
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v56, *(double *)(v23 + v16 + 16)), v57, *(float64x2_t *)(v23 + v16 + 16), 1);
          v63 = v25 + v16 - 8 * (v31 - 4);
          v64 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v56, *(double *)(v24 + v16 + 16)), v57, *(float64x2_t *)(v24 + v16 + 16), 1);
          v65 = v26 + v16 - 8 * (v31 - 4);
          v66 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v56, *(double *)(v25 + v16 + 16)), v57, *(float64x2_t *)(v25 + v16 + 16), 1);
          v67 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v56, *(double *)(v26 + v16 + 16)), v57, *(float64x2_t *)(v26 + v16 + 16), 1);
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            a8.i64[0] = *v34++;
            a8.i64[1] = *v36++;
            v68.f64[0] = *v58++;
            v68.f64[1] = *v59++;
            v69 = *(double *)v60;
            v60 += 8;
            v70 = *(double *)v61;
            v61 += 8;
            v71 = *(double *)v63;
            v63 += 8;
            v72 = *(double *)v65;
            v65 += 8;
            v47 = vmlaq_n_f64(v47, (float64x2_t)a8, v69);
            v48 = vmlaq_n_f64(v48, (float64x2_t)a8, v70);
            v49 = vmlaq_n_f64(v49, (float64x2_t)a8, v71);
            v50 = vmlaq_n_f64(v50, (float64x2_t)a8, v72);
            v62 = vmlaq_n_f64(v62, v68, v69);
            v64 = vmlaq_n_f64(v64, v68, v70);
            v66 = vmlaq_n_f64(v66, v68, v71);
            v67 = vmlaq_n_f64(v67, v68, v72);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v73 = *(int64x2_t *)v34;
            v34 += 2;
            v74 = *(int64x2_t *)v36;
            v36 += 2;
            v75 = *(int64x2_t *)v58;
            v58 += 2;
            v76 = *(int64x2_t *)v59;
            v59 += 2;
            v77 = *(float64x2_t *)v60;
            v60 += 16;
            v78 = *(float64x2_t *)v61;
            v61 += 16;
            v79 = *(float64x2_t *)v63;
            v63 += 16;
            v80 = *(float64x2_t *)v65;
            v65 += 16;
            v81 = (float64x2_t)vtrn1q_s64(v73, v74);
            v82 = (float64x2_t)vtrn2q_s64(v73, v74);
            a8 = (int8x16_t)vtrn1q_s64(v75, v76);
            v83 = (float64x2_t)vtrn2q_s64(v75, v76);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v81, v77.f64[0]), v82, v77, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v81, v78.f64[0]), v82, v78, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v81, v79.f64[0]), v82, v79, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v81, v80.f64[0]), v82, v80, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, (float64x2_t)a8, v77.f64[0]), v83, v77, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, (float64x2_t)a8, v78.f64[0]), v83, v78, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, (float64x2_t)a8, v79.f64[0]), v83, v79, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, (float64x2_t)a8, v80.f64[0]), v83, v80, 1);
          }
          *(float64x2_t *)v60 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v60 + 16) = vmulq_n_f64(v62, a7);
          *(float64x2_t *)v61 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v61 + 16) = vmulq_n_f64(v64, a7);
          *(float64x2_t *)v63 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v63 + 16) = vmulq_n_f64(v66, a7);
          *(float64x2_t *)v65 = vmulq_n_f64(v50, a7);
          *(float64x2_t *)(v65 + 16) = vmulq_n_f64(v67, a7);
          v29 += v17;
          v30 += v17;
          v27 += v17;
          v28 += v17;
          v26 -= 32;
          v25 -= 32;
          v24 -= 32;
          v23 -= 32;
          v84 = v31 > 7;
          v31 -= 4;
        }
        while (v84);
      }
      v85 = v22 - 1;
      v86 = (double *)(a5 + 8 * v12 * a6 + 8 * (v22 - 1));
      v9 = a4;
      v10 = v112;
      v87 = (double *)&v112[v85 * a4];
      if (v109 == 3)
        break;
      if (v109 == 2)
      {
        v88 = a7;
        v11 = __N;
        v90 = 2 * a6;
        v89 = 3 * a6;
        v92 = v107;
        v91 = a6 - 1;
        v94 = v105;
        v93 = v106;
LABEL_19:
        *v86 = v88 * (*(v86 - 1) * *v87 + *v86 * v87[1]);
        v86[a6] = v88 * (v86[v91] * *v87 + v86[a6] * v87[1]);
        v86[v90] = v88 * (v86[v92] * *v87 + v86[v90] * v87[1]);
        v86[v89] = v88 * (v86[v93] * *v87 + v86[v89] * v87[1]);
        v87 += v94;
        --v86;
        goto LABEL_20;
      }
      v11 = __N;
      if (v109 == 1)
      {
        v88 = a7;
        v90 = 2 * a6;
        v89 = 3 * a6;
LABEL_20:
        *v86 = v88 * (*v86 * *v87);
        v86[a6] = v88 * (v86[a6] * *v87);
        v86[v90] = a7 * (v86[v90] * *v87);
        *(double *)a8.i64 = a7 * (v86[v89] * *v87);
        v86[v89] = *(double *)a8.i64;
      }
      v12 += 4;
      v19 += v108;
      v20 += v108;
      v21 += v108;
      v18 += v108;
      if (v12 >= v110)
        goto LABEL_22;
    }
    v88 = a7;
    *v86 = a7 * (*(v86 - 1) * v87[1] + *v86 * v87[2] + *(v86 - 2) * *v87);
    v91 = a6 - 1;
    v90 = 2 * a6;
    v86[a6] = a7 * (v86[a6 - 1] * v87[1] + v86[a6] * v87[2] + v86[a6 - 2] * *v87);
    v93 = v106;
    v92 = v107;
    v86[2 * a6] = a7 * (v86[v107] * v87[1] + v86[2 * a6] * v87[2] + v86[v100] * *v87);
    v89 = 3 * a6;
    v86[3 * a6] = a7 * (v86[v106] * v87[1] + v86[3 * a6] * v87[2] + v86[v99] * *v87);
    v94 = v105;
    v87 += v105;
    --v86;
    v11 = __N;
    goto LABEL_19;
  }
LABEL_22:
  v95 = a2 - v12;
  if (a2 > v12)
  {
    v96 = (double *)(a5 + 8 * v12 * a6);
    v97 = 8 * a6;
    do
    {
      cblas_dscal(v11, a7, v96, 1);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasNonUnit, v11, v10, v9, v96, 1);
      v96 = (double *)((char *)v96 + v97);
      --v95;
    }
    while (v95);
  }
}

uint64_t sub_20E82E720(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  _QWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  __int128 *v8;
  _QWORD *v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v5 = &a3[a4];
  v6 = (__int128 *)&a3[2 * a4];
  v7 = &v5[2 * a4];
  v8 = &v6[a4];
  v9 = &v7[2 * a4];
  v10 = &v8[a4];
  v11 = &v9[2 * a4];
  v12 = (a4 << 6) - 8 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        *(_QWORD *)&v14 = *a3;
        *(_QWORD *)&v15 = a3[1];
        a3 += 2;
        *((_QWORD *)&v14 + 1) = *v5;
        *((_QWORD *)&v15 + 1) = v5[1];
        v5 += 2;
        v16 = *v6;
        *(_QWORD *)&v17 = *((_QWORD *)v6++ + 1);
        *((_QWORD *)&v17 + 1) = v7[1];
        v7 += 2;
        v18 = *v8;
        *(_QWORD *)&v19 = *((_QWORD *)v8++ + 1);
        *((_QWORD *)&v19 + 1) = v9[1];
        v9 += 2;
        v20 = *v10;
        *(_QWORD *)&v21 = *((_QWORD *)v10++ + 1);
        *((_QWORD *)&v21 + 1) = v11[1];
        v11 += 2;
        *a5 = v14;
        a5[1] = v16;
        v22 = a5 + 2;
        *v22 = v18;
        v22[1] = v20;
        v22 += 2;
        *v22 = v15;
        v22[1] = v17;
        v22 += 2;
        *v22 = v19;
        v22[1] = v21;
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      *(_QWORD *)&v24 = *a3++;
      *((_QWORD *)&v24 + 1) = *v5++;
      v25 = *v6;
      v6 = (__int128 *)((char *)v6 + 8);
      ++v7;
      v26 = *v8;
      v8 = (__int128 *)((char *)v8 + 8);
      ++v9;
      v27 = *v10;
      v10 = (__int128 *)((char *)v10 + 8);
      ++v11;
      *a5 = v24;
      a5[1] = v25;
      a5[2] = v26;
      a5[3] = v27;
      a5 += 4;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (_QWORD *)((char *)a3 + v12);
    v5 = (_QWORD *)((char *)v5 + v12);
    v6 = (__int128 *)((char *)v6 + v12);
    v7 = (_QWORD *)((char *)v7 + v12);
    v8 = (__int128 *)((char *)v8 + v12);
    v9 = (_QWORD *)((char *)v9 + v12);
    v10 = (__int128 *)((char *)v10 + v12);
    v11 = (_QWORD *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

void sub_20E82E7F8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,int __N,uint64_t a29,uint64_t a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,char a47)
{
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *(*v77)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v78)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float64x2_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t vars8;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  double *(*v139)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  double *(*v143)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t __Na;
  uint64_t v149;
  uint64_t v150;

  v51 = MEMORY[0x24BDAC7A8](a1);
  v135 = v52;
  v126 = v53;
  v122 = v54;
  v56 = v55;
  v58 = v57;
  v59 = v51;
  v60 = v48;
  STACK[0x10298] = *MEMORY[0x24BDAC8D0];
  if (v47 == 111)
    v61 = v49;
  else
    v61 = 1;
  v121 = v61;
  v127 = v50;
  if (v47 == 111)
    v62 = v50;
  else
    v62 = 1;
  v125 = v62;
  if (v47 == 111)
    v63 = 1;
  else
    v63 = v49;
  vars8 = v63;
  v133 = v49;
  v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E835C9C;
  if (v47 == 111)
    v64 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E835DBC;
  v124 = v64;
  v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E835F4C;
  if (v47 == 111)
    v65 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E835E6C;
  vars0 = v65;
  if (v48 >= 225)
  {
    v147 = (char *)malloc_type_malloc((v48 << 8) + 8288, 0x100004000313F17uLL);
    v66 = (unint64_t *)(v147 + 8256);
  }
  else
  {
    v147 = &a47;
    v66 = &STACK[0x2260];
  }
  v141 = (uint64_t)v66;
  if (v56 >= 1)
  {
    v67 = 0;
    v129 = 8 * v133;
    v130 = v60;
    v68 = 8 * v133 + 8;
    v123 = v56;
    while (1)
    {
      v128 = v67 + 32;
      v69 = v67 + 32 <= v56 ? 32 : v56 - v67;
      v124(v69, v60, v126 + 8 * v67 * v125, v127, v141, v59);
      if (v60 >= 1)
        break;
LABEL_94:
      v67 = v128;
      v56 = v123;
      if (v128 >= v123)
        goto LABEL_95;
    }
    v70 = v69;
    v71 = 0;
    v134 = v122 + 8 * v67 * v121;
    v72 = v58 != 0.0;
    if (v58 == 1.0 || v67 != 0)
      v72 = 0;
    v140 = v72;
    v74 = v135;
    v139 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
    v143 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
    __Na = v69;
    while (1)
    {
      v149 = v71;
      v75 = v71 + 32;
      if (v71 + 32 <= v60)
        v76 = 32;
      else
        v76 = v60 - v71;
      v142 = v135 + 8 * v71;
      v77 = v143;
      if ((v76 & 7) != 0)
        v77 = sub_20E8428D0;
      v143 = v77;
      v78 = v139;
      if ((v76 & 7) != 0)
        v78 = sub_20E83B2A0;
      v139 = v78;
      vars0(v76, v70, v134 + 8 * v71 * vars8, v133, v147);
      v79 = v149;
      v80 = v76;
      v136 = v76 + v149;
      v137 = v75;
      v81 = ((v76 + v149) << 32) - 0x300000000;
      v146 = v76;
      v138 = v74;
      if (v81 >= 1)
      {
        v82 = 0;
        v83 = 0;
        v150 = v81 >> 32;
        v84 = v74;
        v85 = 32 * v133;
        v86 = v133;
        v70 = __Na;
        while (2)
        {
          v87 = v83 - v79;
          v88 = v83 & 4;
          if ((v83 & 4) != 0)
            v89 = v83 - v79 - 4;
          else
            v89 = v83 - v79;
          v90 = v89 & ~(v87 >> 63);
          if (v90 > v80)
            goto LABEL_64;
          v91 = v142 + 8 * v83 * v86;
          v92 = (float64x2_t *)(v141 + 8 * v83 * v70);
          if (v87 < 0)
          {
            v94 = 0;
            if (v140)
              goto LABEL_55;
          }
          else
          {
            v144 = 32 * (v82 & 1);
            a45 = 0u;
            a46 = 0u;
            v93 = (char *)&a31 + v144;
            a43 = 0u;
            a44 = 0u;
            a41 = 0u;
            a42 = 0u;
            a39 = 0u;
            a40 = 0u;
            a37 = 0u;
            a38 = 0u;
            a35 = 0u;
            a36 = 0u;
            a33 = 0u;
            a34 = 0u;
            if (v80 - v89 >= 8)
              v94 = 8;
            else
              v94 = v80 - v89;
            a31 = 0uLL;
            a32 = 0uLL;
            v145 = v141 + 8 * v83 * v70;
            v95 = v91;
            ((void (*)(char *))v143)(&v147[8 * v89 * v70]);
            v91 = v95 + 8 * v89;
            if (v140)
            {
              v96 = 0;
              v92 = (float64x2_t *)v145;
              v97 = v84 + v144 + 8 * v89;
              v85 = 32 * v133;
              v70 = __Na;
              v80 = v146;
              do
              {
                if (v88 < v94)
                {
                  v98 = 0;
                  do
                  {
                    *(double *)(v97 + 8 * v98) = *(double *)&v93[8 * v98] + *(double *)(v97 + 8 * v98) * v58;
                    ++v98;
                  }
                  while (v88 + v98 < v94);
                }
                ++v88;
                ++v96;
                v93 += 72;
                v97 += v68;
              }
              while (v96 != 4);
              v86 = v133;
              v79 = v149;
              if (v94 + v90 >= v146)
                goto LABEL_64;
LABEL_55:
              v139((float64x2_t *)&v147[8 * (v94 + v90) * v70], v92, (float64x2_t *)(v91 + 8 * v94), v86, v80 - (v94 + v90), v70, v58);
LABEL_63:
              v70 = __Na;
              v79 = v149;
              v80 = v146;
LABEL_64:
              v83 += 4;
              ++v82;
              v84 += v85;
              if (v83 >= v150)
                goto LABEL_67;
              continue;
            }
            v99 = 0;
            v92 = (float64x2_t *)v145;
            v100 = v84 + v144 + 8 * v89;
            v85 = 32 * v133;
            v70 = __Na;
            v80 = v146;
            do
            {
              if (v88 < v94)
              {
                v101 = 0;
                do
                {
                  *(double *)(v100 + 8 * v101) = *(double *)(v100 + 8 * v101) + *(double *)&v93[8 * v101];
                  ++v101;
                }
                while (v88 + v101 < v94);
              }
              ++v88;
              ++v99;
              v93 += 72;
              v100 += v68;
            }
            while (v99 != 4);
            v86 = v133;
            v79 = v149;
            if (v94 + v90 >= v146)
              goto LABEL_64;
          }
          break;
        }
        v143((float64x2_t *)&v147[8 * (v94 + v90) * v70], v92, (float64x2_t *)(v91 + 8 * v94), v86, v80 - (v94 + v90), v70);
        goto LABEL_63;
      }
      v83 = 0;
      v86 = v133;
      v70 = __Na;
LABEL_67:
      v102 = v136 <= 0 ? -(-v136 & 3) : v136 & 3;
      if (v102)
      {
        v103 = v83 - v79;
        v104 = (v83 - v79) & ~((v83 - v79) >> 63);
        if (v80 > v104)
          break;
      }
LABEL_93:
      v74 = v138 + 256;
      v71 = v137;
      v60 = v130;
      if (v137 >= v130)
        goto LABEL_94;
    }
    v105 = v142 + 8 * v83 * v86;
    v106 = (const double *)(v141 + 8 * v83 * v70);
    if (v103 < 0)
    {
      v108 = 0;
      v115 = 0;
      v116 = 0;
      v110 = v102;
      if (v140)
      {
LABEL_84:
        sub_20E842324((float64x2_t *)&v147[8 * v115 * v70 + 8 * v108], v106, v105, v86, v80 - v115, v110, __Na, v58);
LABEL_92:
        v70 = __Na;
        goto LABEL_93;
      }
    }
    else
    {
      a41 = 0u;
      a42 = 0u;
      a39 = 0u;
      a40 = 0u;
      a37 = 0u;
      a38 = 0u;
      a35 = 0u;
      a36 = 0u;
      a33 = 0u;
      a34 = 0u;
      a31 = 0u;
      a32 = 0u;
      if (v80 - v104 >= 8)
        v107 = 8;
      else
        v107 = v80 - v104;
      v108 = v104 & (4 * v70) & 4;
      v109 = v105 + 8 * v104;
      v110 = v102;
      sub_20E8424A0((float64x2_t *)&v147[8 * v103 * v70 + 8 * v108], (const double *)(v141 + 8 * v83 * v70), (uint64_t)&a31, 8, v107, v102, v70);
      if (v140)
      {
        v70 = __Na;
        if (v102 >= 1)
        {
          v111 = 0;
          v112 = v138 + v129 * v83 + 8 * v104;
          v113 = &a31;
          do
          {
            v114 = 0;
            do
            {
              *(double *)(v112 + 8 * v114) = *((double *)v113 + v114) + *(double *)(v112 + 8 * v114) * v58;
              ++v114;
            }
            while (v111 + v114 < v102);
            ++v111;
            v113 = (__int128 *)((char *)v113 + 72);
            v112 += v68;
          }
          while (v111 != v102);
        }
        v105 = v109 + 8 * v107;
        v115 = v107 + v104;
        v86 = v133;
        v80 = v146;
        goto LABEL_84;
      }
      v70 = __Na;
      if (v102 >= 1)
      {
        v117 = 0;
        v118 = v138 + v129 * v83 + 8 * v104;
        v119 = &a31;
        do
        {
          v120 = 0;
          do
          {
            *(double *)(v118 + 8 * v120) = *(double *)(v118 + 8 * v120) + *((double *)v119 + v120);
            ++v120;
          }
          while (v117 + v120 < v102);
          ++v117;
          v119 = (__int128 *)((char *)v119 + 72);
          v118 += v68;
        }
        while (v117 != v102);
      }
      v105 = v109 + 8 * v107;
      v116 = v107 + v104;
      v86 = v133;
      v80 = v146;
    }
    sub_20E8424A0((float64x2_t *)&v147[8 * v116 * v70 + 8 * v108], v106, v105, v86, v80 - v116, v110, __Na);
    goto LABEL_92;
  }
LABEL_95:
  if (v60 >= 225)
    free(v147);
}

uint64_t sub_20E82EF48(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double da;
  int v32;
  int n;

  v32 = 0;
  da = 0.0;
  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v13 = -1;
    goto LABEL_21;
  }
  v11 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = -2;
    goto LABEL_21;
  }
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = *a2;
  if (*a4 < v12)
  {
    v13 = -4;
LABEL_21:
    *a5 = v13;
    goto LABEL_22;
  }
  v13 = *a5;
  if (*a5)
  {
LABEL_22:
    n = -v13;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v11)
  {
    v14 = a3 + 8 * ~(_DWORD)v9;
    if (v10)
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v16 = v15 + (int)v9 * (int)v15;
        v17 = *(double *)(v14 + 8 * v16);
        v18 = (double *)(v14 + 8 * v15 * v9 + 8);
        v19 = v17 - ddot_(&n, v18, (int *)&unk_254A4A440, v18, (int *)&unk_254A4A440);
        if (v19 <= 0.0)
          break;
        v20 = sqrt(v19);
        *(double *)(v14 + 8 * v16) = v20;
        v21 = *a2;
        if (v15 >= v21)
        {
          v22 = v15 + 1;
        }
        else
        {
          v32 = v21 - v15;
          n = v15 - 1;
          v22 = v15 + 1;
          sub_20E83F474("Transpose", &n, &v32, &unk_254A4A448, v14 + 8 * (v15 + 1) * v9 + 8, a4, v18, &unk_254A4A440, &unk_254A4A450, v14 + 8 * (v15 + (int)v9 + (int)v9 * (int)v15), a4);
          n = *a2 - v15;
          da = 1.0 / v20;
          dscal_(&n, &da, (double *)(v14 + 8 * (v15 + (int)v9 + (int)v9 * (int)v15)), a4);
        }
        v23 = v15 < v11;
        v15 = v22;
        if (!v23)
          return 0;
      }
      *(double *)(v14 + 8 * v16) = v19;
    }
    else
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v25 = v15 + (int)v9 * (int)v15;
        v26 = *(double *)(v14 + 8 * v25);
        v27 = v26 - ddot_(&n, (double *)(v14 + 8 * (v15 + v9)), a4, (double *)(v14 + 8 * (v15 + v9)), a4);
        if (v27 <= 0.0)
          break;
        v28 = sqrt(v27);
        *(double *)(v14 + 8 * v25) = v28;
        v29 = *a2;
        if (v15 >= v29)
        {
          v30 = v15 + 1;
        }
        else
        {
          v32 = v15 - 1;
          n = v29 - v15;
          v30 = v15 + 1;
          sub_20E83F474("No transpose", &n, &v32, &unk_254A4A448, v14 + 8 * (v15 + 1 + v9), a4, v14 + 8 * (v15 + v9), a4, &unk_254A4A450, v14 + 8 * (v15 + 1 + v15 * v9), &unk_254A4A440);
          n = *a2 - v15;
          da = 1.0 / v28;
          dscal_(&n, &da, (double *)(v14 + 8 * (v15 + 1 + v15 * v9)), (int *)&unk_254A4A440);
        }
        v23 = v15 < v11;
        v15 = v30;
        if (!v23)
          return 0;
      }
      *(double *)(v14 + 8 * v25) = v27;
    }
    *a5 = v15;
  }
  return 0;
}

_OWORD *sub_20E82F260(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;

  v8 = _X2;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    v25 = _X2[2];
    v26 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v29 = *_X2;
    v30 = _X2[1];
    v31 = _X2[2];
    v32 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    v37 = _X2[2];
    v38 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v41 = *a2;
    v42 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v46 = vmulq_n_f64(v23, a7);
    v47 = vmulq_n_f64(v24, a7);
    v48 = vmulq_n_f64(v25, a7);
    v49 = vmulq_n_f64(v26, a7);
    v50 = vmulq_n_f64(v29, a7);
    v51 = vmulq_n_f64(v30, a7);
    v52 = vmulq_n_f64(v31, a7);
    v53 = vmulq_n_f64(v32, a7);
    v54 = vmulq_n_f64(v35, a7);
    v55 = vmulq_n_f64(v36, a7);
    v56 = vmulq_n_f64(v37, a7);
    v57 = vmulq_n_f64(v38, a7);
    v58 = vmulq_n_f64(*_X2, a7);
    v59 = vmulq_n_f64(_X2[1], a7);
    v60 = vmulq_n_f64(_X2[2], a7);
    v61 = vmulq_n_f64(_X2[3], a7);
    do
    {
      v62 = v11;
      v63 = v12;
      v46 = vmlaq_n_f64(v46, v11, v41.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v11, v41, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v64 = result + 2;
      v54 = vmlaq_n_f64(v54, v62, v42.f64[0]);
      v58 = vmlaq_laneq_f64(v58, v62, v42, 1);
      v65 = *_X6;
      v66 = _X6[1];
      _X6 += 2;
      v67 = v14;
      v47 = vmlaq_n_f64(v47, v63, v41.f64[0]);
      v51 = vmlaq_laneq_f64(v51, v63, v41, 1);
      v68 = v15;
      v55 = vmlaq_n_f64(v55, v63, v42.f64[0]);
      v59 = vmlaq_laneq_f64(v59, v63, v42, 1);
      v14 = *(float64x2_t *)v64;
      v15 = *((float64x2_t *)v64 + 1);
      result = v64 + 2;
      v48 = vmlaq_n_f64(v48, v67, v41.f64[0]);
      v52 = vmlaq_laneq_f64(v52, v67, v41, 1);
      v56 = vmlaq_n_f64(v56, v67, v42.f64[0]);
      v60 = vmlaq_laneq_f64(v60, v67, v42, 1);
      v49 = vmlaq_n_f64(v49, v68, v41.f64[0]);
      v53 = vmlaq_laneq_f64(v53, v68, v41, 1);
      v41 = v65;
      v57 = vmlaq_n_f64(v57, v68, v42.f64[0]);
      v61 = vmlaq_laneq_f64(v61, v68, v42, 1);
      v42 = v66;
      --v16;
    }
    while (v16);
    v69 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v46;
    v8[1] = v47;
    v8[2] = v48;
    v8[3] = v49;
    v8 += 4;
    *v69 = v50;
    v69[1] = v51;
    v69[2] = v52;
    v69[3] = v53;
    v70 = (float64x2_t *)((char *)v69 + v9);
    *v70 = v54;
    v70[1] = v55;
    v70[2] = v56;
    v70[3] = v57;
    v71 = (float64x2_t *)((char *)v70 + v9);
    *v71 = v58;
    v71[1] = v59;
    v71[2] = v60;
    v71[3] = v61;
    _X2 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

_OWORD *sub_20E82F3B0(_OWORD *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t *v57;
  float64x2_t *v58;

  v7 = _X2;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    __asm { PRFM            #1, [X2,#0x40] }
    v22 = *_X2;
    v23 = _X2[1];
    v24 = _X2[2];
    v25 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    v30 = _X2[2];
    v31 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    v36 = _X2[2];
    v37 = _X2[3];
    _X2 = (float64x2_t *)((char *)_X2 + v8);
    __asm { PRFM            #1, [X2,#0x40] }
    v39 = *_X2;
    v40 = _X2[1];
    v41 = _X2[2];
    v42 = _X2[3];
    v44 = *a2;
    v45 = a2[1];
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    do
    {
      v49 = v10;
      v50 = v11;
      v22 = vmlaq_n_f64(v22, v10, v44.f64[0]);
      v28 = vmlaq_laneq_f64(v28, v10, v44, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v34 = vmlaq_n_f64(v34, v49, v45.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v49, v45, 1);
      v52 = *_X6;
      v53 = _X6[1];
      _X6 += 2;
      v54 = v13;
      v23 = vmlaq_n_f64(v23, v50, v44.f64[0]);
      v29 = vmlaq_laneq_f64(v29, v50, v44, 1);
      v55 = v14;
      v35 = vmlaq_n_f64(v35, v50, v45.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v50, v45, 1);
      v13 = *(float64x2_t *)v51;
      v14 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v24 = vmlaq_n_f64(v24, v54, v44.f64[0]);
      v30 = vmlaq_laneq_f64(v30, v54, v44, 1);
      v36 = vmlaq_n_f64(v36, v54, v45.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v54, v45, 1);
      v25 = vmlaq_n_f64(v25, v55, v44.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v55, v44, 1);
      v44 = v52;
      v37 = vmlaq_n_f64(v37, v55, v45.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v55, v45, 1);
      v45 = v53;
      --v15;
    }
    while (v15);
    v56 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v22;
    v7[1] = v23;
    v7[2] = v24;
    v7[3] = v25;
    v7 += 4;
    *v56 = v28;
    v56[1] = v29;
    v56[2] = v30;
    v56[3] = v31;
    v57 = (float64x2_t *)((char *)v56 + v8);
    *v57 = v34;
    v57[1] = v35;
    v57[2] = v36;
    v57[3] = v37;
    v58 = (float64x2_t *)((char *)v57 + v8);
    *v58 = v39;
    v58[1] = v40;
    v58[2] = v41;
    v58[3] = v42;
    _X2 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_20E82F4B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x2_t *v35;
  float32x4_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  BOOL v65;
  uint64_t v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  __int32 *v74;
  float32x2_t *v75;
  float32x2_t v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  __int32 *v87;
  float32x2_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t *v103;
  float v104;
  float32x4_t *v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x2_t *v111;
  float32x4_t v112;
  float32x2_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  float32x2_t *v130;
  float32x2_t *v131;
  __int32 *v132;
  __int32 *v133;
  float32x2_t v134;
  __int32 *v135;
  float32x2_t *v136;
  float32x2_t v137;
  float32x2_t *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  __int32 *v142;
  float32x2_t v143;
  float32_t v144;
  float32_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  float32x4_t *v149;
  float *v150;
  uint64_t v151;
  float32x2_t *v152;
  float v153;
  float32x4_t *v154;
  float32x2_t v155;
  float32x4_t *v156;
  float32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  float32x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x2_t v170;
  uint64_t v171;
  float32x2_t *v172;
  __int32 *v173;
  __int32 *v174;
  float32x2_t v175;
  __int32 *v176;
  float32x2_t *v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 *v180;
  float32x2_t v181;

  v11 = 4 * a6;
  v12 = 4 * a4;
  v13 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v14 = a2 - 3;
  do
  {
    v15 = 0;
    v16 = __OFSUB__(result, 3);
    v17 = result - 3;
    if (result > 3)
    {
      do
      {
        v18 = (float32x4_t *)(a5 + v13 * v11 + 4 * v15);
        v19 = (float32x4_t *)((char *)v18 + v11);
        v20 = (float32x4_t *)((char *)v18 + 2 * v11);
        v21 = (float32x4_t *)((char *)v18 + 2 * v11 + v11);
        v22 = (float *)(a3 + v15 * v12 + 4 * v15);
        v23 = 4 * (result - v15);
        v24 = result - v15 - 4;
        v26 = *v22;
        v25 = (float32x2_t *)&v22[(unint64_t)v12 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v12);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v12);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v12);
        v34 = *v18;
        v33 = (float32x2_t *)&v18[1];
        v36 = *v19;
        v35 = (float32x2_t *)&v19[1];
        v38 = *v20;
        v37 = (float32x2_t *)&v20[1];
        v40 = *v21;
        v39 = (float32x2_t *)&v21[1];
        v30.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vmul_lane_f32(v28, *(float32x2_t *)v34.f32, 1);
        *(float32x2_t *)v8.f32 = vmul_lane_f32(v28, *(float32x2_t *)v36.f32, 1);
        *(float32x2_t *)v9.f32 = vmul_lane_f32(v28, *(float32x2_t *)v38.f32, 1);
        *(float32x2_t *)v10.f32 = vmul_lane_f32(v28, *(float32x2_t *)v40.f32, 1);
        v41 = vmulq_laneq_f32(v30, v34, 2);
        v42 = vmulq_laneq_f32(v30, v36, 2);
        v43 = vmulq_laneq_f32(v30, v38, 2);
        v44 = vmulq_laneq_f32(v30, v40, 2);
        v41.f32[0] = (float)(v26 * v34.f32[0]) + v41.f32[0];
        v42.f32[0] = (float)(v26 * v36.f32[0]) + v42.f32[0];
        v43.f32[0] = (float)(v26 * v38.f32[0]) + v43.f32[0];
        v44.f32[0] = (float)(v26 * v40.f32[0]) + v44.f32[0];
        v45 = vaddq_f32(vmlaq_laneq_f32(v7, v32, v34, 3), v41);
        v46 = vaddq_f32(vmlaq_laneq_f32(v8, v32, v36, 3), v42);
        v47 = vaddq_f32(vmlaq_laneq_f32(v9, v32, v38, 3), v43);
        v48 = vaddq_f32(vmlaq_laneq_f32(v10, v32, v40, 3), v44);
        if ((v24 & 1) != 0)
        {
          v49 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v12);
          v50 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v51 = v35->f32[0];
          v35 = (float32x2_t *)((char *)v35 + 4);
          v52 = v37->f32[0];
          v37 = (float32x2_t *)((char *)v37 + 4);
          v53 = v39->f32[0];
          v39 = (float32x2_t *)((char *)v39 + 4);
          v45 = vmlaq_n_f32(v45, v49, v50);
          v46 = vmlaq_n_f32(v46, v49, v51);
          v47 = vmlaq_n_f32(v47, v49, v52);
          v48 = vmlaq_n_f32(v48, v49, v53);
          v24 = result - v15 - 5;
        }
        if (v24)
        {
          v54 = 0uLL;
          v55 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          do
          {
            v59 = *v31;
            v58 = (float32x4_t *)((char *)v31 + v12);
            v60 = *v58;
            v31 = (float32x4_t *)((char *)v58 + v12);
            v61 = *v33++;
            v62 = *v35++;
            v63 = *v37++;
            v64 = *v39++;
            v45 = vmlaq_n_f32(v45, v59, v61.f32[0]);
            v46 = vmlaq_n_f32(v46, v59, v62.f32[0]);
            v47 = vmlaq_n_f32(v47, v59, v63.f32[0]);
            v48 = vmlaq_n_f32(v48, v59, v64.f32[0]);
            v54 = vmlaq_lane_f32(v54, v60, v61, 1);
            v55 = vmlaq_lane_f32(v55, v60, v62, 1);
            v56 = vmlaq_lane_f32(v56, v60, v63, 1);
            v57 = vmlaq_lane_f32(v57, v60, v64, 1);
            v65 = v24 <= 2;
            v24 -= 2;
          }
          while (!v65);
          v45 = vaddq_f32(v45, v54);
          v46 = vaddq_f32(v46, v55);
          v47 = vaddq_f32(v47, v56);
          v48 = vaddq_f32(v48, v57);
        }
        v7 = vmulq_n_f32(v45, a7);
        v8 = vmulq_n_f32(v46, a7);
        v9 = vmulq_n_f32(v47, a7);
        v10 = vmulq_n_f32(v48, a7);
        *(float32x4_t *)&v33->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v7;
        *(float32x4_t *)&v35->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v8;
        *(float32x4_t *)&v37->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v9;
        *(float32x4_t *)&v39->f32[v23 / 0xFFFFFFFFFFFFFFFCLL] = v10;
        v15 += 4;
        v16 = __OFSUB__(v17, 4);
        v65 = v17 <= 4;
        v17 -= 4;
      }
      while (!v65);
    }
    v66 = result & 3;
    if (!v16 && v66 != 0)
    {
      v67 = (float32x2_t *)(a5 + v13 * v11 + 4 * v15);
      v68 = (float32x2_t *)((char *)v67 + v11);
      v69 = &v67[(unint64_t)v11 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v11 / 4] + v11);
      v71 = (__int32 *)(a3 + v15 * v12 + 4 * v15);
      if (v66 != 1)
      {
        if (v66 != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v12 / 4];
          v73.i32[1] = *v72;
          v74 = &v72[(unint64_t)v12 / 4];
          v76 = *v67;
          v75 = v67 + 1;
          v78 = *v68;
          v77 = v68 + 1;
          v80 = *v69;
          v79 = v69 + 1;
          v82 = *v70;
          v81 = v70 + 1;
          v83 = vmul_f32(v73, v76);
          v84 = vmul_f32(v73, v78);
          v85 = vmul_f32(v73, v80);
          v86 = vmul_f32(v73, v82);
          v73.i32[0] = *v74;
          v76.i32[0] = v75->i32[0];
          --v75;
          v78.i32[0] = v77->i32[0];
          --v77;
          v80.i32[0] = v79->i32[0];
          --v79;
          v82.i32[0] = v81->i32[0];
          --v81;
          v71 = &v74[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v75->f32[0] = (float)(vaddv_f32(v83) + (float)(v73.f32[0] * v76.f32[0])) * a7;
          v67 = (float32x2_t *)((char *)v75 + 4);
          v77->f32[0] = (float)(vaddv_f32(v84) + (float)(v73.f32[0] * v78.f32[0])) * a7;
          v68 = (float32x2_t *)((char *)v77 + 4);
          v79->f32[0] = (float)(vaddv_f32(v85) + (float)(v73.f32[0] * v80.f32[0])) * a7;
          v69 = (float32x2_t *)((char *)v79 + 4);
          v81->f32[0] = (float)(vaddv_f32(v86) + (float)(v73.f32[0] * v82.f32[0])) * a7;
          v70 = (float32x2_t *)((char *)v81 + 4);
        }
        v88.i32[0] = *v71;
        v87 = &v71[(unint64_t)v12 / 4];
        v88.i32[1] = *v87;
        v71 = v87 + 1;
        v89 = vaddv_f32(vmul_f32(v88, *v68)) * a7;
        v90 = vaddv_f32(vmul_f32(v88, *v69)) * a7;
        v91 = vaddv_f32(vmul_f32(v88, *v70)) * a7;
        v67->f32[0] = vaddv_f32(vmul_f32(v88, *v67)) * a7;
        v67 = (float32x2_t *)((char *)v67 + 4);
        v68->f32[0] = v89;
        v68 = (float32x2_t *)((char *)v68 + 4);
        v69->f32[0] = v90;
        v69 = (float32x2_t *)((char *)v69 + 4);
        v70->f32[0] = v91;
        v70 = (float32x2_t *)((char *)v70 + 4);
      }
      v92 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v93 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v94 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v92;
      v69->f32[0] = v93;
      v70->f32[0] = v94;
    }
    v13 += 4;
    v65 = v14 <= 4;
    v14 -= 4;
  }
  while (!v65);
  v65 = v14 <= -3;
  a2 = v14 + 3;
  if (!v65)
  {
LABEL_22:
    if (a2 > 1)
    {
      v95 = 0;
      v96 = __OFSUB__(result, 3);
      v97 = result - 3;
      if (result > 3)
      {
        do
        {
          v98 = (float32x4_t *)(a5 + v13 * v11 + 4 * v95);
          v99 = (float32x4_t *)((char *)v98 + v11);
          v100 = (float *)(a3 + v95 * v12 + 4 * v95);
          v101 = 4 * (result - v95);
          v102 = result - v95 - 4;
          v104 = *v100;
          v103 = (float32x2_t *)&v100[(unint64_t)v12 / 4];
          v106 = *v103;
          v105 = (float32x4_t *)((char *)v103 + v12);
          v108 = *v105;
          v107 = (float32x4_t *)((char *)v105 + v12);
          v110 = *v107;
          v109 = (float32x4_t *)((char *)v107 + v12);
          v112 = *v98;
          v111 = (float32x2_t *)&v98[1];
          v114 = *v99;
          v113 = (float32x2_t *)&v99[1];
          v108.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v106, *(float32x2_t *)v112.f32, 1);
          *(float32x2_t *)v8.f32 = vmul_lane_f32(v106, *(float32x2_t *)v114.f32, 1);
          v115 = vmulq_laneq_f32(v108, v112, 2);
          v116 = vmulq_laneq_f32(v108, v114, 2);
          v115.f32[0] = (float)(v104 * v112.f32[0]) + v115.f32[0];
          v116.f32[0] = (float)(v104 * v114.f32[0]) + v116.f32[0];
          v117 = vaddq_f32(vmlaq_laneq_f32(v7, v110, v112, 3), v115);
          v118 = vaddq_f32(vmlaq_laneq_f32(v8, v110, v114, 3), v116);
          if ((v102 & 1) != 0)
          {
            v119 = *v109;
            v109 = (float32x4_t *)((char *)v109 + v12);
            v120 = v111->f32[0];
            v111 = (float32x2_t *)((char *)v111 + 4);
            v121 = v113->f32[0];
            v113 = (float32x2_t *)((char *)v113 + 4);
            v117 = vmlaq_n_f32(v117, v119, v120);
            v118 = vmlaq_n_f32(v118, v119, v121);
            v102 = result - v95 - 5;
          }
          if (v102)
          {
            v122 = 0uLL;
            v123 = 0uLL;
            do
            {
              v125 = *v109;
              v124 = (float32x4_t *)((char *)v109 + v12);
              v126 = *v124;
              v109 = (float32x4_t *)((char *)v124 + v12);
              v127 = *v111++;
              v128 = *v113++;
              v117 = vmlaq_n_f32(v117, v125, v127.f32[0]);
              v118 = vmlaq_n_f32(v118, v125, v128.f32[0]);
              v122 = vmlaq_lane_f32(v122, v126, v127, 1);
              v123 = vmlaq_lane_f32(v123, v126, v128, 1);
              v65 = v102 <= 2;
              v102 -= 2;
            }
            while (!v65);
            v117 = vaddq_f32(v117, v122);
            v118 = vaddq_f32(v118, v123);
          }
          v7 = vmulq_n_f32(v117, a7);
          v8 = vmulq_n_f32(v118, a7);
          *(float32x4_t *)&v111->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v7;
          *(float32x4_t *)&v113->f32[v101 / 0xFFFFFFFFFFFFFFFCLL] = v8;
          v95 += 4;
          v96 = __OFSUB__(v97, 4);
          v65 = v97 <= 4;
          v97 -= 4;
        }
        while (!v65);
      }
      v129 = result & 3;
      if (!v96 && v129 != 0)
      {
        v130 = (float32x2_t *)(a5 + v13 * v11 + 4 * v95);
        v131 = (float32x2_t *)((char *)v130 + v11);
        v132 = (__int32 *)(a3 + v95 * v12 + 4 * v95);
        if (v129 != 1)
        {
          if (v129 != 2)
          {
            v134.i32[0] = *v132;
            v133 = &v132[(unint64_t)v12 / 4];
            v134.i32[1] = *v133;
            v135 = &v133[(unint64_t)v12 / 4];
            v137 = *v130;
            v136 = v130 + 1;
            v139 = *v131;
            v138 = v131 + 1;
            v140 = vmul_f32(v134, v137);
            v141 = vmul_f32(v134, v139);
            v134.i32[0] = *v135;
            v137.i32[0] = v136->i32[0];
            --v136;
            v139.i32[0] = v138->i32[0];
            --v138;
            v132 = &v135[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v136->f32[0] = (float)(vaddv_f32(v140) + (float)(v134.f32[0] * v137.f32[0])) * a7;
            v130 = (float32x2_t *)((char *)v136 + 4);
            v138->f32[0] = (float)(vaddv_f32(v141) + (float)(v134.f32[0] * v139.f32[0])) * a7;
            v131 = (float32x2_t *)((char *)v138 + 4);
          }
          v143.i32[0] = *v132;
          v142 = &v132[(unint64_t)v12 / 4];
          v143.i32[1] = *v142;
          v132 = v142 + 1;
          v144 = vaddv_f32(vmul_f32(v143, *v131)) * a7;
          v130->f32[0] = vaddv_f32(vmul_f32(v143, *v130)) * a7;
          v130 = (float32x2_t *)((char *)v130 + 4);
          v131->f32[0] = v144;
          v131 = (float32x2_t *)((char *)v131 + 4);
        }
        v145 = (float)(*(float *)v132 * v131->f32[0]) * a7;
        v130->f32[0] = (float)(*(float *)v132 * v130->f32[0]) * a7;
        v131->f32[0] = v145;
      }
      a2 -= 2;
      v13 += 2;
    }
    if (a2)
    {
      v146 = 0;
      v147 = __OFSUB__(result, 3);
      v148 = result - 3;
      if (result > 3)
      {
        do
        {
          v149 = (float32x4_t *)(a5 + v13 * v11 + 4 * v146);
          v150 = (float *)(a3 + v146 * v12 + 4 * v146);
          v151 = result - v146 - 4;
          v153 = *v150;
          v152 = (float32x2_t *)&v150[(unint64_t)v12 / 4];
          v155 = *v152;
          v154 = (float32x4_t *)((char *)v152 + v12);
          v157 = *v154;
          v156 = (float32x4_t *)((char *)v154 + v12);
          v159 = *v156;
          v158 = (float32x4_t *)((char *)v156 + v12);
          v161 = *v149;
          v160 = (float32x2_t *)&v149[1];
          v157.i32[3] = 0;
          *(float32x2_t *)v7.f32 = vmul_lane_f32(v155, *(float32x2_t *)v161.f32, 1);
          v162 = vmulq_laneq_f32(v157, v161, 2);
          v162.f32[0] = (float)(v153 * v161.f32[0]) + v162.f32[0];
          v163 = vaddq_f32(vmlaq_laneq_f32(v7, v159, v161, 3), v162);
          if ((v151 & 1) != 0)
          {
            v164 = *v158;
            v158 = (float32x4_t *)((char *)v158 + v12);
            v165 = v160->f32[0];
            v160 = (float32x2_t *)((char *)v160 + 4);
            v163 = vmlaq_n_f32(v163, v164, v165);
            v151 = result - v146 - 5;
          }
          if (v151)
          {
            v166 = 0uLL;
            do
            {
              v168 = *v158;
              v167 = (float32x4_t *)((char *)v158 + v12);
              v169 = *v167;
              v158 = (float32x4_t *)((char *)v167 + v12);
              v170 = *v160++;
              v163 = vmlaq_n_f32(v163, v168, v170.f32[0]);
              v166 = vmlaq_lane_f32(v166, v169, v170, 1);
              v65 = v151 <= 2;
              v151 -= 2;
            }
            while (!v65);
            v163 = vaddq_f32(v163, v166);
          }
          v7 = vmulq_n_f32(v163, a7);
          *(float32x4_t *)&v160->f32[-(result - v146)] = v7;
          v146 += 4;
          v147 = __OFSUB__(v148, 4);
          v65 = v148 <= 4;
          v148 -= 4;
        }
        while (!v65);
      }
      v171 = result & 3;
      if (!v147 && v171 != 0)
      {
        v172 = (float32x2_t *)(a5 + v13 * v11 + 4 * v146);
        v173 = (__int32 *)(a3 + v146 * v12 + 4 * v146);
        if (v171 != 1)
        {
          if (v171 != 2)
          {
            v175.i32[0] = *v173;
            v174 = &v173[(unint64_t)v12 / 4];
            v175.i32[1] = *v174;
            v176 = &v174[(unint64_t)v12 / 4];
            v178 = *v172;
            v177 = v172 + 1;
            v179 = vmul_f32(v175, v178);
            v175.i32[0] = *v176;
            v178.i32[0] = v177->i32[0];
            --v177;
            v173 = &v176[v12 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v177->f32[0] = (float)(vaddv_f32(v179) + (float)(v175.f32[0] * v178.f32[0])) * a7;
            v172 = (float32x2_t *)((char *)v177 + 4);
          }
          v181.i32[0] = *v173;
          v180 = &v173[(unint64_t)v12 / 4];
          v181.i32[1] = *v180;
          v173 = v180 + 1;
          v172->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v181, *v172), a7));
          v172 = (float32x2_t *)((char *)v172 + 4);
        }
        v172->f32[0] = (float)(*(float *)v173 * v172->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E82FB20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  float32x2_t *v21;
  unsigned int v22;
  float32x4_t *v23;
  float32x2_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x2_t *v27;
  float32x4_t v28;
  float32x2_t *v29;
  float32x4_t v30;
  float32x2_t *v31;
  float32x4_t v32;
  float32x2_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  BOOL v55;
  uint64_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  float *v61;
  __int32 *v62;
  float32x2_t v63;
  float32x2_t *v64;
  float v65;
  float32x2_t *v66;
  float v67;
  float32x2_t *v68;
  float v69;
  float32x2_t *v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  float32x2_t *v89;
  unsigned int v90;
  float32x4_t *v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x2_t *v95;
  float32x4_t v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  int32x2_t *v112;
  int32x2_t *v113;
  float *v114;
  __int32 *v115;
  float32x2_t v116;
  float32x2_t *v117;
  float v118;
  float32x2_t *v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  float32x4_t *v128;
  uint64_t v129;
  unsigned int *v130;
  float32x2_t *v131;
  unsigned int v132;
  float32x4_t *v133;
  float32x2_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x2_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int32 *v149;
  __int32 *v150;
  float32x2_t v151;
  float32x2_t *v152;
  float v153;
  float32x2_t v154;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (float32x4_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (float32x4_t *)((char *)v14 + v7);
        v16 = (float32x4_t *)((char *)v14 + 2 * v7);
        v17 = (float32x4_t *)((char *)v14 + 2 * v7 + v7);
        v18 = 4 * (result - v11);
        v19 = result - v11 - 4;
        v20 = (unsigned int *)(a3 + v11 * v8 + 4 * v11 + v8);
        v22 = *v20;
        v21 = (float32x2_t *)&v20[(unint64_t)v8 / 4];
        v24 = *v21;
        v23 = (float32x4_t *)((char *)v21 + v8);
        v26 = *v23;
        v25 = (float32x4_t *)((char *)v23 + v8);
        v28 = *v14;
        v27 = (float32x2_t *)&v14[1];
        v30 = *v15;
        v29 = (float32x2_t *)&v15[1];
        v32 = *v16;
        v31 = (float32x2_t *)&v16[1];
        v34 = *v17;
        v33 = (float32x2_t *)&v17[1];
        v26.i32[3] = 0;
        v35 = vmlaq_laneq_f32(v28, v26, v28, 3);
        v36 = vmlaq_laneq_f32(v30, v26, v30, 3);
        v37 = vmlaq_laneq_f32(v32, v26, v32, 3);
        v38 = vmlaq_laneq_f32(v34, v26, v34, 3);
        *(float32x2_t *)v35.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v28, 2), (float32x2_t)v22, *(float32x2_t *)v28.f32, 1), *(float32x2_t *)v35.f32);
        *(float32x2_t *)v36.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v30, 2), (float32x2_t)v22, *(float32x2_t *)v30.f32, 1), *(float32x2_t *)v36.f32);
        *(float32x2_t *)v37.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v32, 2), (float32x2_t)v22, *(float32x2_t *)v32.f32, 1), *(float32x2_t *)v37.f32);
        *(float32x2_t *)v38.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v24, v34, 2), (float32x2_t)v22, *(float32x2_t *)v34.f32, 1), *(float32x2_t *)v38.f32);
        if ((v19 & 1) != 0)
        {
          v39 = *v25;
          v25 = (float32x4_t *)((char *)v25 + v8);
          v40 = v27->f32[0];
          v27 = (float32x2_t *)((char *)v27 + 4);
          v41 = v29->f32[0];
          v29 = (float32x2_t *)((char *)v29 + 4);
          v42 = v31->f32[0];
          v31 = (float32x2_t *)((char *)v31 + 4);
          v43 = v33->f32[0];
          v33 = (float32x2_t *)((char *)v33 + 4);
          v35 = vmlaq_n_f32(v35, v39, v40);
          v36 = vmlaq_n_f32(v36, v39, v41);
          v37 = vmlaq_n_f32(v37, v39, v42);
          v38 = vmlaq_n_f32(v38, v39, v43);
          v19 = result - v11 - 5;
        }
        if (v19)
        {
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          do
          {
            v49 = *v25;
            v48 = (float32x4_t *)((char *)v25 + v8);
            v50 = *v48;
            v25 = (float32x4_t *)((char *)v48 + v8);
            v51 = *v27++;
            v52 = *v29++;
            v53 = *v31++;
            v54 = *v33++;
            v35 = vmlaq_n_f32(v35, v49, v51.f32[0]);
            v36 = vmlaq_n_f32(v36, v49, v52.f32[0]);
            v37 = vmlaq_n_f32(v37, v49, v53.f32[0]);
            v38 = vmlaq_n_f32(v38, v49, v54.f32[0]);
            v44 = vmlaq_lane_f32(v44, v50, v51, 1);
            v45 = vmlaq_lane_f32(v45, v50, v52, 1);
            v46 = vmlaq_lane_f32(v46, v50, v53, 1);
            v47 = vmlaq_lane_f32(v47, v50, v54, 1);
            v55 = v19 <= 2;
            v19 -= 2;
          }
          while (!v55);
          v35 = vaddq_f32(v35, v44);
          v36 = vaddq_f32(v36, v45);
          v37 = vaddq_f32(v37, v46);
          v38 = vaddq_f32(v38, v47);
        }
        *(float32x4_t *)&v27->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v35, a7);
        *(float32x4_t *)&v29->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v36, a7);
        *(float32x4_t *)&v31->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v37, a7);
        *(float32x4_t *)&v33->f32[v18 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v38, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v55 = v13 <= 4;
        v13 -= 4;
      }
      while (!v55);
    }
    v56 = result & 3;
    if (!v12 && v56 != 0)
    {
      v57 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v58 = (int32x2_t *)((char *)v57 + v7);
      v59 = &v57[(unint64_t)v7 / 4];
      v60 = (int32x2_t *)((char *)&v57[(unint64_t)v7 / 4] + v7);
      v61 = (float *)(a3 + v11 * v8 + 4 * v11 + v8);
      if (v56 != 1)
      {
        if (v56 != 2)
        {
          v63.f32[0] = *v61;
          v62 = (__int32 *)&v61[(unint64_t)v8 / 4];
          v63.i32[1] = *v62;
          v65 = *(float *)v57->i32;
          v64 = (float32x2_t *)((char *)v57 + 4);
          v67 = *(float *)v58->i32;
          v66 = (float32x2_t *)((char *)v58 + 4);
          v69 = *(float *)v59->i32;
          v68 = (float32x2_t *)((char *)v59 + 4);
          v71 = *(float *)v60->i32;
          v70 = (float32x2_t *)((char *)v60 + 4);
          v72 = vmul_f32(v63, *v64);
          v73 = vmul_f32(v63, *v66);
          v74 = vmul_f32(v63, *v68);
          v75 = vmul_f32(v63, *v70);
          v64 = (float32x2_t *)((char *)v64 - 4);
          v66 = (float32x2_t *)((char *)v66 - 4);
          v68 = (float32x2_t *)((char *)v68 - 4);
          v70 = (float32x2_t *)((char *)v70 - 4);
          v61 = (float *)(v62 + 1);
          v64->f32[0] = (float)(vaddv_f32(v72) + v65) * a7;
          v57 = (int32x2_t *)((char *)v64 + 4);
          v66->f32[0] = (float)(vaddv_f32(v73) + v67) * a7;
          v58 = (int32x2_t *)((char *)v66 + 4);
          v68->f32[0] = (float)(vaddv_f32(v74) + v69) * a7;
          v59 = (int32x2_t *)((char *)v68 + 4);
          v70->f32[0] = (float)(vaddv_f32(v75) + v71) * a7;
          v60 = (int32x2_t *)((char *)v70 + 4);
        }
        v76 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v57, *v58), vmul_n_f32((float32x2_t)vtrn2_s32(*v57, *v58), *v61)), a7);
        v77 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v59, *v60), vmul_n_f32((float32x2_t)vtrn2_s32(*v59, *v60), *v61)), a7);
        v57->i32[0] = v76.i32[0];
        v57 = (int32x2_t *)((char *)v57 + 4);
        v58->i32[0] = v76.i32[1];
        v58 = (int32x2_t *)((char *)v58 + 4);
        v59->i32[0] = v77.i32[0];
        v59 = (int32x2_t *)((char *)v59 + 4);
        v60->i32[0] = v77.i32[1];
        v60 = (int32x2_t *)((char *)v60 + 4);
      }
      v78 = *(float *)v58->i32 * a7;
      v79 = *(float *)v59->i32 * a7;
      v80 = *(float *)v60->i32 * a7;
      *(float *)v57->i32 = *(float *)v57->i32 * a7;
      *(float *)v58->i32 = v78;
      *(float *)v59->i32 = v79;
      *(float *)v60->i32 = v80;
    }
    v9 += 4;
    v55 = v10 <= 4;
    v10 -= 4;
  }
  while (!v55);
  v55 = v10 <= -3;
  a2 = v10 + 3;
  if (!v55)
  {
LABEL_22:
    if (a2 > 1)
    {
      v81 = 0;
      v82 = __OFSUB__(result, 3);
      v83 = result - 3;
      if (result > 3)
      {
        do
        {
          v84 = (float32x4_t *)(a5 + v9 * v7 + 4 * v81);
          v85 = (float32x4_t *)((char *)v84 + v7);
          v86 = 4 * (result - v81);
          v87 = result - v81 - 4;
          v88 = (unsigned int *)(a3 + v81 * v8 + 4 * v81 + v8);
          v90 = *v88;
          v89 = (float32x2_t *)&v88[(unint64_t)v8 / 4];
          v92 = *v89;
          v91 = (float32x4_t *)((char *)v89 + v8);
          v94 = *v91;
          v93 = (float32x4_t *)((char *)v91 + v8);
          v96 = *v84;
          v95 = (float32x2_t *)&v84[1];
          v98 = *v85;
          v97 = (float32x2_t *)&v85[1];
          v94.i32[3] = 0;
          v99 = vmlaq_laneq_f32(v96, v94, v96, 3);
          v100 = vmlaq_laneq_f32(v98, v94, v98, 3);
          *(float32x2_t *)v99.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v96, 2), (float32x2_t)v90, *(float32x2_t *)v96.f32, 1), *(float32x2_t *)v99.f32);
          *(float32x2_t *)v100.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v92, v98, 2), (float32x2_t)v90, *(float32x2_t *)v98.f32, 1), *(float32x2_t *)v100.f32);
          if ((v87 & 1) != 0)
          {
            v101 = *v93;
            v93 = (float32x4_t *)((char *)v93 + v8);
            v102 = v95->f32[0];
            v95 = (float32x2_t *)((char *)v95 + 4);
            v103 = v97->f32[0];
            v97 = (float32x2_t *)((char *)v97 + 4);
            v99 = vmlaq_n_f32(v99, v101, v102);
            v100 = vmlaq_n_f32(v100, v101, v103);
            v87 = result - v81 - 5;
          }
          if (v87)
          {
            v104 = 0uLL;
            v105 = 0uLL;
            do
            {
              v107 = *v93;
              v106 = (float32x4_t *)((char *)v93 + v8);
              v108 = *v106;
              v93 = (float32x4_t *)((char *)v106 + v8);
              v109 = *v95++;
              v110 = *v97++;
              v99 = vmlaq_n_f32(v99, v107, v109.f32[0]);
              v100 = vmlaq_n_f32(v100, v107, v110.f32[0]);
              v104 = vmlaq_lane_f32(v104, v108, v109, 1);
              v105 = vmlaq_lane_f32(v105, v108, v110, 1);
              v55 = v87 <= 2;
              v87 -= 2;
            }
            while (!v55);
            v99 = vaddq_f32(v99, v104);
            v100 = vaddq_f32(v100, v105);
          }
          *(float32x4_t *)&v95->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v99, a7);
          *(float32x4_t *)&v97->f32[v86 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v100, a7);
          v81 += 4;
          v82 = __OFSUB__(v83, 4);
          v55 = v83 <= 4;
          v83 -= 4;
        }
        while (!v55);
      }
      v111 = result & 3;
      if (!v82 && v111 != 0)
      {
        v112 = (int32x2_t *)(a5 + v9 * v7 + 4 * v81);
        v113 = (int32x2_t *)((char *)v112 + v7);
        v114 = (float *)(a3 + v81 * v8 + 4 * v81 + v8);
        if (v111 != 1)
        {
          if (v111 != 2)
          {
            v116.f32[0] = *v114;
            v115 = (__int32 *)&v114[(unint64_t)v8 / 4];
            v116.i32[1] = *v115;
            v118 = *(float *)v112->i32;
            v117 = (float32x2_t *)((char *)v112 + 4);
            v120 = *(float *)v113->i32;
            v119 = (float32x2_t *)((char *)v113 + 4);
            v121 = vmul_f32(v116, *v117);
            v122 = vmul_f32(v116, *v119);
            v117 = (float32x2_t *)((char *)v117 - 4);
            v119 = (float32x2_t *)((char *)v119 - 4);
            v114 = (float *)(v115 + 1);
            v117->f32[0] = (float)(vaddv_f32(v121) + v118) * a7;
            v112 = (int32x2_t *)((char *)v117 + 4);
            v119->f32[0] = (float)(vaddv_f32(v122) + v120) * a7;
            v113 = (int32x2_t *)((char *)v119 + 4);
          }
          v123 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v112, *v113), vmul_n_f32((float32x2_t)vtrn2_s32(*v112, *v113), *v114)), a7);
          v112->i32[0] = v123.i32[0];
          v112 = (int32x2_t *)((char *)v112 + 4);
          v113->i32[0] = v123.i32[1];
          v113 = (int32x2_t *)((char *)v113 + 4);
        }
        v124 = *(float *)v113->i32 * a7;
        *(float *)v112->i32 = *(float *)v112->i32 * a7;
        *(float *)v113->i32 = v124;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v125 = 0;
      v126 = __OFSUB__(result, 3);
      v127 = result - 3;
      if (result > 3)
      {
        do
        {
          v128 = (float32x4_t *)(a5 + v9 * v7 + 4 * v125);
          v129 = result - v125 - 4;
          v130 = (unsigned int *)(a3 + v125 * v8 + 4 * v125 + v8);
          v132 = *v130;
          v131 = (float32x2_t *)&v130[(unint64_t)v8 / 4];
          v134 = *v131;
          v133 = (float32x4_t *)((char *)v131 + v8);
          v136 = *v133;
          v135 = (float32x4_t *)((char *)v133 + v8);
          v138 = *v128;
          v137 = (float32x2_t *)&v128[1];
          v136.i32[3] = 0;
          v139 = vmlaq_laneq_f32(v138, v136, v138, 3);
          *(float32x2_t *)v139.f32 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v134, v138, 2), (float32x2_t)v132, *(float32x2_t *)v138.f32, 1), *(float32x2_t *)v139.f32);
          if ((v129 & 1) != 0)
          {
            v140 = *v135;
            v135 = (float32x4_t *)((char *)v135 + v8);
            v141 = v137->f32[0];
            v137 = (float32x2_t *)((char *)v137 + 4);
            v139 = vmlaq_n_f32(v139, v140, v141);
            v129 = result - v125 - 5;
          }
          if (v129)
          {
            v142 = 0uLL;
            do
            {
              v144 = *v135;
              v143 = (float32x4_t *)((char *)v135 + v8);
              v145 = *v143;
              v135 = (float32x4_t *)((char *)v143 + v8);
              v146 = *v137++;
              v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
              v142 = vmlaq_lane_f32(v142, v145, v146, 1);
              v55 = v129 <= 2;
              v129 -= 2;
            }
            while (!v55);
            v139 = vaddq_f32(v139, v142);
          }
          *(float32x4_t *)&v137->f32[-(result - v125)] = vmulq_n_f32(v139, a7);
          v125 += 4;
          v126 = __OFSUB__(v127, 4);
          v55 = v127 <= 4;
          v127 -= 4;
        }
        while (!v55);
      }
      v147 = result & 3;
      if (!v126 && v147 != 0)
      {
        v148 = (_QWORD *)(a5 + v9 * v7 + 4 * v125);
        v149 = (__int32 *)(a3 + v125 * v8 + 4 * v125 + v8);
        if (v147 != 1)
        {
          if (v147 != 2)
          {
            v151.i32[0] = *v149;
            v150 = &v149[(unint64_t)v8 / 4];
            v151.i32[1] = *v150;
            v149 = v150 + 1;
            v153 = *(float *)v148;
            v152 = (float32x2_t *)((char *)v148 + 4);
            v154 = vmul_f32(v151, *v152);
            v152 = (float32x2_t *)((char *)v152 - 4);
            v152->f32[0] = (float)(vaddv_f32(v154) + v153) * a7;
            v148 = (_QWORD *)((char *)v152 + 4);
          }
          *(float *)v148 = (float)((float)(COERCE_FLOAT(HIDWORD(*v148)) * *(float *)v149) + COERCE_FLOAT(*v148)) * a7;
          v148 = (_QWORD *)((char *)v148 + 4);
        }
        *(float *)v148 = *(float *)v148 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E830110(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  float *v17;
  float32x2_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  float v22;
  __int32 *v23;
  float32x2_t v24;
  __int32 *v25;
  float32x4_t v26;
  __int32 *v27;
  float32x4_t v28;
  __int32 *v29;
  int64x2_t v30;
  float32x2_t *v31;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  float32x2_t *v35;
  int64x2_t v36;
  float32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v75;
  BOOL v76;
  float32x2_t *v77;
  float32x2_t *v78;
  float32x2_t *v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t v82;
  float v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  float32_t v89;
  float32_t v90;
  float32_t v91;
  float32_t v92;
  float32_t v93;
  uint64_t j;
  int32x4_t *v95;
  int32x4_t *v96;
  float *v97;
  float32x2_t *v98;
  float32x4_t *v99;
  float32x4_t *v100;
  uint64_t v101;
  float v102;
  __int32 *v103;
  float32x2_t v104;
  __int32 *v105;
  float32x4_t v106;
  __int32 *v107;
  float32x4_t v108;
  __int32 *v109;
  int32x4_t v110;
  float32x2_t *v111;
  int32x4_t v112;
  float32x4_t *v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  float32x2_t *v135;
  float32x2_t v136;
  float v137;
  float32_t v138;
  float32x2_t v139;
  float32_t v140;
  float32_t v141;
  uint64_t k;
  float *v143;
  float32x2_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  uint64_t v147;
  float v148;
  __int32 *v149;
  float32x2_t v150;
  __int32 *v151;
  float32x4_t v152;
  __int32 *v153;
  float32x4_t v154;
  __int32 *v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float v163;
  float32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x2_t v169;
  float32x2_t *v170;
  float32x2_t *v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v37 = vmulq_n_f32(v56, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = (float *)(a3 + i * v9 + 4 * i);
      v18 = (float32x2_t *)&v17[(unint64_t)v9 / 4];
      v19 = (float32x4_t *)&v17[(unint64_t)v9 / 2];
      v20 = (float32x4_t *)&v17[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
      v21 = i;
      v22 = *v17;
      v23 = (__int32 *)(a3 + i * v9);
      v24 = *v18;
      v25 = (__int32 *)v18 - i;
      v26 = *v19;
      v27 = (__int32 *)v19 - i;
      v28 = *v20;
      v29 = (__int32 *)v20 - i;
      v30 = *v13;
      v31 = (float32x2_t *)(a5 + v10 * v8);
      v32 = *v14;
      v33 = (float32x2_t *)((char *)v14 - 4 * i);
      v34 = *v15;
      v35 = (float32x2_t *)((char *)v15 - 4 * i);
      v36 = *v16;
      v37 = (float32x4_t *)((char *)v16 - 4 * i);
      v38 = (int32x4_t)vtrn1q_s64(v30, v34);
      v39 = (int32x4_t)vtrn1q_s64(v32, v36);
      v40 = (int32x4_t)vtrn2q_s64(v30, v34);
      v41 = (int32x4_t)vtrn2q_s64(v32, v36);
      v42 = (float32x4_t)vtrn1q_s32(v38, v39);
      v43 = (float32x4_t)vtrn2q_s32(v38, v39);
      v44 = (float32x4_t)vtrn1q_s32(v40, v41);
      v45 = (int64x2_t)vmulq_n_f32(v42, v22);
      v46 = (int64x2_t)vaddq_f32(vmulq_n_f32(v42, v24.f32[0]), vmulq_lane_f32(v43, v24, 1));
      v47 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v26.f32[0]), v44, v26, 2), vmulq_lane_f32(v43, *(float32x2_t *)v26.f32, 1));
      v48 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v42, v28.f32[0]), v44, v28, 2), vmulq_lane_f32(v43, *(float32x2_t *)v28.f32, 1)), vmulq_laneq_f32((float32x4_t)vtrn2q_s32(v40, v41), v28, 3));
      v49 = (int32x4_t)vtrn1q_s64(v45, v47);
      v50 = (int32x4_t)vtrn1q_s64(v46, v48);
      v51 = (int32x4_t)vtrn2q_s64(v45, v47);
      v52 = (int32x4_t)vtrn2q_s64(v46, v48);
      v53 = (float32x4_t)vtrn1q_s32(v49, v50);
      v54 = (float32x4_t)vtrn2q_s32(v49, v50);
      v55 = (float32x4_t)vtrn1q_s32(v51, v52);
      v56 = (float32x4_t)vtrn2q_s32(v51, v52);
      if ((i & 1) != 0)
      {
        v57.i32[0] = *v23++;
        v57.i32[1] = *v25++;
        v57.i32[2] = *v27++;
        v57.i32[3] = *v29++;
        v58 = v31->f32[0];
        v31 = (float32x2_t *)((char *)v31 + 4);
        v59 = v33->f32[0];
        v33 = (float32x2_t *)((char *)v33 + 4);
        v60 = v35->f32[0];
        v35 = (float32x2_t *)((char *)v35 + 4);
        v61 = v37->f32[0];
        v37 = (float32x4_t *)((char *)v37 + 4);
        v53 = vmlaq_n_f32(v53, v57, v58);
        v54 = vmlaq_n_f32(v54, v57, v59);
        v55 = vmlaq_n_f32(v55, v57, v60);
        v56 = vmlaq_n_f32(v56, v57, v61);
        v21 = i - 1;
      }
      if (v21)
      {
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        do
        {
          v66.i64[0] = *(_QWORD *)v23;
          v23 += 2;
          v67.i64[0] = *(_QWORD *)v25;
          v25 += 2;
          v68 = *(_QWORD *)v27;
          v27 += 2;
          v69 = *(_QWORD *)v29;
          v29 += 2;
          v70 = *v31++;
          v71 = *v33++;
          v72 = *v35++;
          v73 = *(float32x2_t *)v37->f32;
          v37 = (float32x4_t *)((char *)v37 + 8);
          v66.i64[1] = v68;
          v67.i64[1] = v69;
          v74 = (float32x4_t)vtrn1q_s32(v66, v67);
          v75 = (float32x4_t)vtrn2q_s32(v66, v67);
          v53 = vmlaq_n_f32(v53, v74, v70.f32[0]);
          v54 = vmlaq_n_f32(v54, v74, v71.f32[0]);
          v55 = vmlaq_n_f32(v55, v74, v72.f32[0]);
          v56 = vmlaq_n_f32(v56, v74, v73.f32[0]);
          v62 = vmlaq_lane_f32(v62, v75, v70, 1);
          v63 = vmlaq_lane_f32(v63, v75, v71, 1);
          v64 = vmlaq_lane_f32(v64, v75, v72, 1);
          v65 = vmlaq_lane_f32(v65, v75, v73, 1);
          v76 = v21 <= 2;
          v21 -= 2;
        }
        while (!v76);
        v53 = vaddq_f32(v53, v62);
        v54 = vaddq_f32(v54, v63);
        v55 = vaddq_f32(v55, v64);
        v56 = vaddq_f32(v56, v65);
      }
      *(float32x4_t *)v31->f32 = vmulq_n_f32(v53, a7);
      *(float32x4_t *)v33->f32 = vmulq_n_f32(v54, a7);
      *(float32x4_t *)v35->f32 = vmulq_n_f32(v55, a7);
    }
    if (i)
    {
      v77 = (float32x2_t *)(a5 + v10 * v8);
      v78 = (float32x2_t *)((char *)v77 + v8);
      v79 = &v77[(unint64_t)v8 / 4];
      v80 = (float32x2_t *)((char *)&v77[(unint64_t)v8 / 4] + v8);
      v81 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v82 = *v81;
          v83 = v81[1].f32[0];
          v81 = (float32x2_t *)((char *)v81 - v9);
          v84 = (float)(vaddv_f32(vmul_f32(v82, *v78)) + (float)(v78[1].f32[0] * v83)) * a7;
          v85 = (float)(vaddv_f32(vmul_f32(v82, *v79)) + (float)(v79[1].f32[0] * v83)) * a7;
          v86 = (float)(vaddv_f32(vmul_f32(v82, *v80)) + (float)(v80[1].f32[0] * v83)) * a7;
          v77[1].f32[0] = (float)(vaddv_f32(vmul_f32(v82, *v77)) + (float)(v77[1].f32[0] * v83)) * a7;
          v78[1].f32[0] = v84;
          v79[1].f32[0] = v85;
          v80[1].f32[0] = v86;
        }
        v87 = *v81;
        v81 = (float32x2_t *)((char *)v81 - v9);
        v88 = vaddv_f32(vmul_f32(v87, *v78)) * a7;
        v89 = vaddv_f32(vmul_f32(v87, *v79)) * a7;
        v90 = vaddv_f32(vmul_f32(v87, *v80)) * a7;
        v77->f32[1] = vaddv_f32(vmul_f32(v87, *v77)) * a7;
        v78->f32[1] = v88;
        v79->f32[1] = v89;
        v80->f32[1] = v90;
      }
      v91 = (float)(v81->f32[0] * v78->f32[0]) * a7;
      v92 = (float)(v81->f32[0] * v79->f32[0]) * a7;
      v93 = (float)(v81->f32[0] * v80->f32[0]) * a7;
      v77->f32[0] = (float)(v81->f32[0] * v77->f32[0]) * a7;
      v78->f32[0] = v91;
      v79->f32[0] = v92;
      v80->f32[0] = v93;
    }
    v10 += 4;
    v76 = v11 <= 4;
    v11 -= 4;
  }
  while (!v76);
  v76 = v11 <= -3;
  a2 = v11 + 3;
  if (!v76)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v113 = vmulq_n_f32(v119, a7))
      {
        j -= 4;
        v95 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v96 = (int32x4_t *)((char *)v95 + v8);
        v97 = (float *)(a3 + j * v9 + 4 * j);
        v98 = (float32x2_t *)&v97[(unint64_t)v9 / 4];
        v99 = (float32x4_t *)&v97[(unint64_t)v9 / 2];
        v100 = (float32x4_t *)&v97[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v101 = j;
        v102 = *v97;
        v103 = (__int32 *)(a3 + j * v9);
        v104 = *v98;
        v105 = (__int32 *)v98 - j;
        v106 = *v99;
        v107 = (__int32 *)v99 - j;
        v108 = *v100;
        v109 = (__int32 *)v100 - j;
        v110 = *v95;
        v111 = (float32x2_t *)(a5 + v10 * v8);
        v112 = *v96;
        v113 = (float32x4_t *)((char *)v96 - 4 * j);
        v114 = vtrn1q_s32(v110, v112);
        v115 = vtrn2q_s32(v110, v112);
        *(float32x2_t *)v116.i8 = vmul_n_f32(*(float32x2_t *)v114.i8, v102);
        *(float32x2_t *)v117.i8 = vadd_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v104.f32[0]), vmul_lane_f32(*(float32x2_t *)v115.i8, v104, 1));
        v116.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v106.f32[0]), (float32x2_t)v114.u64[1], v106, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v106.f32, 1));
        v117.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_laneq_f32(vmul_n_f32(*(float32x2_t *)v114.i8, v108.f32[0]), (float32x2_t)v114.u64[1], v108, 2), vmul_lane_f32(*(float32x2_t *)v115.i8, *(float32x2_t *)v108.f32, 1)), vmul_laneq_f32((float32x2_t)v115.u64[1], v108, 3));
        v118 = (float32x4_t)vtrn1q_s32(v116, v117);
        v119 = (float32x4_t)vtrn2q_s32(v116, v117);
        if ((j & 1) != 0)
        {
          v120.i32[0] = *v103++;
          v120.i32[1] = *v105++;
          v120.i32[2] = *v107++;
          v120.i32[3] = *v109++;
          v121 = v111->f32[0];
          v111 = (float32x2_t *)((char *)v111 + 4);
          v122 = v113->f32[0];
          v113 = (float32x4_t *)((char *)v113 + 4);
          v118 = vmlaq_n_f32(v118, v120, v121);
          v119 = vmlaq_n_f32(v119, v120, v122);
          v101 = j - 1;
        }
        if (v101)
        {
          v123 = 0uLL;
          v124 = 0uLL;
          do
          {
            v125.i64[0] = *(_QWORD *)v103;
            v103 += 2;
            v126.i64[0] = *(_QWORD *)v105;
            v105 += 2;
            v127 = *(_QWORD *)v107;
            v107 += 2;
            v128 = *(_QWORD *)v109;
            v109 += 2;
            v129 = *v111++;
            v130 = *(float32x2_t *)v113->f32;
            v113 = (float32x4_t *)((char *)v113 + 8);
            v125.i64[1] = v127;
            v126.i64[1] = v128;
            v131 = (float32x4_t)vtrn1q_s32(v125, v126);
            v132 = (float32x4_t)vtrn2q_s32(v125, v126);
            v118 = vmlaq_n_f32(v118, v131, v129.f32[0]);
            v119 = vmlaq_n_f32(v119, v131, v130.f32[0]);
            v123 = vmlaq_lane_f32(v123, v132, v129, 1);
            v124 = vmlaq_lane_f32(v124, v132, v130, 1);
            v76 = v101 <= 2;
            v101 -= 2;
          }
          while (!v76);
          v118 = vaddq_f32(v118, v123);
          v119 = vaddq_f32(v119, v124);
        }
        *(float32x4_t *)v111->f32 = vmulq_n_f32(v118, a7);
      }
      if (j)
      {
        v133 = (float32x2_t *)(a5 + v10 * v8);
        v134 = (float32x2_t *)((char *)v133 + v8);
        v135 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v136 = *v135;
            v137 = v135[1].f32[0];
            v135 = (float32x2_t *)((char *)v135 - v9);
            v138 = (float)(vaddv_f32(vmul_f32(v136, *v134)) + (float)(v134[1].f32[0] * v137)) * a7;
            v133[1].f32[0] = (float)(vaddv_f32(vmul_f32(v136, *v133)) + (float)(v133[1].f32[0] * v137)) * a7;
            v134[1].f32[0] = v138;
          }
          v139 = *v135;
          v135 = (float32x2_t *)((char *)v135 - v9);
          v140 = vaddv_f32(vmul_f32(v139, *v134)) * a7;
          v133->f32[1] = vaddv_f32(vmul_f32(v139, *v133)) * a7;
          v134->f32[1] = v140;
        }
        v141 = (float)(v135->f32[0] * v134->f32[0]) * a7;
        v133->f32[0] = (float)(v135->f32[0] * v133->f32[0]) * a7;
        v134->f32[0] = v141;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v157 = vmulq_n_f32(v161, a7))
      {
        k -= 4;
        v143 = (float *)(a3 + k * v9 + 4 * k);
        v144 = (float32x2_t *)&v143[(unint64_t)v9 / 4];
        v145 = (float32x4_t *)&v143[(unint64_t)v9 / 2];
        v146 = (float32x4_t *)&v143[(unint64_t)v9 / 4 + (unint64_t)v9 / 2];
        v147 = k;
        v148 = *v143;
        v149 = (__int32 *)(a3 + k * v9);
        v150 = *v144;
        v151 = (__int32 *)v144 - k;
        v152 = *v145;
        v153 = (__int32 *)v145 - k;
        v154 = *v146;
        v155 = (__int32 *)v146 - k;
        v156 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v157 = (float32x4_t *)(a5 + v10 * v8);
        v152.i32[3] = 0;
        v158 = vmulq_f32(v154, v156);
        v159 = vmulq_f32(v152, v156);
        v160 = vmul_f32(v150, *(float32x2_t *)v156.f32);
        *(float *)v7.i32 = v148 * v156.f32[0];
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        v160.f32[0] = vaddv_f32(v160);
        v158.f32[0] = vaddv_f32(*(float32x2_t *)v158.f32);
        v159.f32[0] = vaddv_f32(*(float32x2_t *)v159.f32);
        *(int32x2_t *)v161.f32 = vtrn1_s32(v7, (int32x2_t)v160);
        *(int32x2_t *)&v161.u32[2] = vtrn1_s32(*(int32x2_t *)v159.f32, *(int32x2_t *)v158.f32);
        if ((k & 1) != 0)
        {
          v162.i32[0] = *v149++;
          v162.i32[1] = *v151++;
          v162.i32[2] = *v153++;
          v162.i32[3] = *v155++;
          v163 = v157->f32[0];
          v157 = (float32x4_t *)((char *)v157 + 4);
          v161 = vmlaq_n_f32(v161, v162, v163);
          v147 = k - 1;
        }
        if (v147)
        {
          v164 = 0uLL;
          do
          {
            v165.i64[0] = *(_QWORD *)v149;
            v149 += 2;
            v166.i64[0] = *(_QWORD *)v151;
            v151 += 2;
            v167 = *(_QWORD *)v153;
            v153 += 2;
            v168 = *(_QWORD *)v155;
            v155 += 2;
            v169 = *(float32x2_t *)v157->f32;
            v157 = (float32x4_t *)((char *)v157 + 8);
            v165.i64[1] = v167;
            v166.i64[1] = v168;
            v161 = vmlaq_n_f32(v161, (float32x4_t)vtrn1q_s32(v165, v166), v169.f32[0]);
            v164 = vmlaq_lane_f32(v164, (float32x4_t)vtrn2q_s32(v165, v166), v169, 1);
            v76 = v147 <= 2;
            v147 -= 2;
          }
          while (!v76);
          v161 = vaddq_f32(v161, v164);
        }
      }
      if (k)
      {
        v170 = (float32x2_t *)(a5 + v10 * v8);
        v171 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v172 = *v171;
            v173 = v171[1].f32[0];
            v171 = (float32x2_t *)((char *)v171 - v9);
            v170[1].f32[0] = (float)(vaddv_f32(vmul_f32(v172, *v170)) + (float)(v170[1].f32[0] * v173)) * a7;
          }
          v174 = *v171;
          v171 = (float32x2_t *)((char *)v171 - v9);
          v170->f32[1] = vaddv_f32(vmul_f32(v174, *v170)) * a7;
        }
        v170->f32[0] = (float)(v171->f32[0] * v170->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E830810(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  float *v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  __int32 *v22;
  float v23;
  __int32 *v24;
  float32x2_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  int64x2_t v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x4_t v71;
  BOOL v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  float32x2_t *v76;
  float32x2_t *v77;
  float32x2_t v78;
  float32_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  float32_t v86;
  float32_t v87;
  uint64_t j;
  int32x4_t *v89;
  int32x4_t *v90;
  uint64_t v91;
  float *v92;
  float32x2_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  __int32 *v96;
  float v97;
  __int32 *v98;
  float32x2_t v99;
  __int32 *v100;
  float32x4_t v101;
  __int32 *v102;
  int32x4_t v103;
  float32x2_t *v104;
  int32x4_t v105;
  float32x4_t *v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float32x2_t *v126;
  float32x2_t *v127;
  float32x2_t v128;
  float32_t v129;
  float32_t v130;
  float32_t v131;
  uint64_t k;
  uint64_t v133;
  float *v134;
  float32x2_t *v135;
  float32x4_t *v136;
  uint64_t v137;
  __int32 *v138;
  float v139;
  __int32 *v140;
  float32x2_t v141;
  __int32 *v142;
  float32x4_t v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x2_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  uint64_t v156;
  uint64_t v157;
  float32x2_t v158;
  float32x2_t *v159;
  float32x2_t *v160;
  float32x2_t v161;

  v8 = 4 * a6;
  v9 = 4 * a4;
  v10 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v11 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v36 = vmulq_n_f32(v53, a7))
    {
      i -= 4;
      v13 = (int64x2_t *)(a5 + v10 * v8 + 4 * i);
      v14 = (int64x2_t *)((char *)v13 + v8);
      v15 = (int64x2_t *)((char *)v13 + 2 * v8);
      v16 = (int64x2_t *)((char *)v13 + 2 * v8 + v8);
      v17 = a3 + i * v9 + 4 * i;
      v18 = (float *)(v17 + v9);
      v19 = (float32x2_t *)(v17 + 2 * v9);
      v20 = (float32x4_t *)(v17 + v9 + 2 * v9);
      v21 = i;
      v22 = (__int32 *)(a3 + i * v9);
      v23 = *v18;
      v24 = (__int32 *)&v18[-i];
      v25 = *v19;
      v26 = (__int32 *)v19 - i;
      v27 = *v20;
      v28 = (__int32 *)v20 - i;
      v29 = *v13;
      v30 = (float32x2_t *)(a5 + v10 * v8);
      v31 = *v14;
      v32 = (float32x2_t *)((char *)v14 - 4 * i);
      v33 = *v15;
      v34 = (float32x2_t *)((char *)v15 - 4 * i);
      v35 = *v16;
      v36 = (float32x4_t *)((char *)v16 - 4 * i);
      v37 = (int32x4_t)vtrn1q_s64(v29, v33);
      v38 = (int32x4_t)vtrn1q_s64(v31, v35);
      v39 = (int32x4_t)vtrn2q_s64(v29, v33);
      v40 = (int32x4_t)vtrn2q_s64(v31, v35);
      v41 = (float32x4_t)vtrn1q_s32(v37, v38);
      v42 = (float32x4_t)vtrn2q_s32(v37, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (int64x2_t)vmlaq_n_f32(v42, v41, v23);
      v45 = (int64x2_t)vaddq_f32(vmlaq_n_f32(v43, v41, v25.f32[0]), vmulq_lane_f32(v42, v25, 1));
      v46 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vtrn2q_s32(v39, v40), v41, v27.f32[0]), v43, v27, 2), vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1));
      v47 = (int32x4_t)vtrn1q_s64((int64x2_t)v41, v45);
      v48 = (int32x4_t)vtrn1q_s64(v44, v46);
      v49 = (int32x4_t)vtrn2q_s64((int64x2_t)v41, v45);
      v7 = (float32x4_t)vtrn2q_s64(v44, v46);
      v50 = (float32x4_t)vtrn1q_s32(v47, v48);
      v51 = (float32x4_t)vtrn2q_s32(v47, v48);
      v52 = (float32x4_t)vtrn1q_s32(v49, (int32x4_t)v7);
      v53 = (float32x4_t)vtrn2q_s32(v49, (int32x4_t)v7);
      if ((i & 1) != 0)
      {
        v54.i32[0] = *v22++;
        v54.i32[1] = *v24++;
        v54.i32[2] = *v26++;
        v54.i32[3] = *v28++;
        v55 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v56 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v57 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        v58 = v36->f32[0];
        v36 = (float32x4_t *)((char *)v36 + 4);
        v50 = vmlaq_n_f32(v50, v54, v55);
        v51 = vmlaq_n_f32(v51, v54, v56);
        v52 = vmlaq_n_f32(v52, v54, v57);
        v53 = vmlaq_n_f32(v53, v54, v58);
        v21 = i - 1;
      }
      if (v21)
      {
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        do
        {
          v63.i64[0] = *(_QWORD *)v22;
          v22 += 2;
          v64.i64[0] = *(_QWORD *)v24;
          v24 += 2;
          v65 = *(_QWORD *)v26;
          v26 += 2;
          v66 = *(_QWORD *)v28;
          v28 += 2;
          v67 = *v30++;
          v68 = *v32++;
          v69 = *v34++;
          v70 = *(float32x2_t *)v36->f32;
          v36 = (float32x4_t *)((char *)v36 + 8);
          v63.i64[1] = v65;
          v64.i64[1] = v66;
          v71 = (float32x4_t)vtrn1q_s32(v63, v64);
          v7 = (float32x4_t)vtrn2q_s32(v63, v64);
          v50 = vmlaq_n_f32(v50, v71, v67.f32[0]);
          v51 = vmlaq_n_f32(v51, v71, v68.f32[0]);
          v52 = vmlaq_n_f32(v52, v71, v69.f32[0]);
          v53 = vmlaq_n_f32(v53, v71, v70.f32[0]);
          v59 = vmlaq_lane_f32(v59, v7, v67, 1);
          v60 = vmlaq_lane_f32(v60, v7, v68, 1);
          v61 = vmlaq_lane_f32(v61, v7, v69, 1);
          v62 = vmlaq_lane_f32(v62, v7, v70, 1);
          v72 = v21 <= 2;
          v21 -= 2;
        }
        while (!v72);
        v50 = vaddq_f32(v50, v59);
        v51 = vaddq_f32(v51, v60);
        v52 = vaddq_f32(v52, v61);
        v53 = vaddq_f32(v53, v62);
      }
      *(float32x4_t *)v30->f32 = vmulq_n_f32(v50, a7);
      *(float32x4_t *)v32->f32 = vmulq_n_f32(v51, a7);
      *(float32x4_t *)v34->f32 = vmulq_n_f32(v52, a7);
    }
    if (i)
    {
      v73 = (float32x2_t *)(a5 + v10 * v8);
      v74 = (float32x2_t *)((char *)v73 + v8);
      v75 = &v73[(unint64_t)v8 / 4];
      v76 = (float32x2_t *)((char *)&v73[(unint64_t)v8 / 4] + v8);
      v77 = (float32x2_t *)(a3 + (i - 1) * v9);
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v78 = *v77;
          v77 = (float32x2_t *)((char *)v77 - v9);
          v79 = (float)(vaddv_f32(vmul_f32(v78, *v74)) + v74[1].f32[0]) * a7;
          v80 = (float)(vaddv_f32(vmul_f32(v78, *v75)) + v75[1].f32[0]) * a7;
          v81 = (float)(vaddv_f32(vmul_f32(v78, *v76)) + v76[1].f32[0]) * a7;
          v73[1].f32[0] = (float)(vaddv_f32(vmul_f32(v78, *v73)) + v73[1].f32[0]) * a7;
          v74[1].f32[0] = v79;
          v75[1].f32[0] = v80;
          v76[1].f32[0] = v81;
        }
        v82 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v74)) + (float)(v77->f32[0] * COERCE_FLOAT(*v74))) * a7;
        v83 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v75)) + (float)(v77->f32[0] * COERCE_FLOAT(*v75))) * a7;
        v84 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v76)) + (float)(v77->f32[0] * COERCE_FLOAT(*v76))) * a7;
        v73->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v73)) + (float)(v77->f32[0] * COERCE_FLOAT(*v73)))
                    * a7;
        v74->f32[1] = v82;
        v75->f32[1] = v83;
        v76->f32[1] = v84;
      }
      v85 = v74->f32[0] * a7;
      v86 = v75->f32[0] * a7;
      v87 = v76->f32[0] * a7;
      v73->f32[0] = v73->f32[0] * a7;
      v74->f32[0] = v85;
      v75->f32[0] = v86;
      v76->f32[0] = v87;
    }
    v10 += 4;
    v72 = v11 <= 4;
    v11 -= 4;
  }
  while (!v72);
  v72 = v11 <= -3;
  a2 = v11 + 3;
  if (!v72)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v106 = vmulq_n_f32(v112, a7))
      {
        j -= 4;
        v89 = (int32x4_t *)(a5 + v10 * v8 + 4 * j);
        v90 = (int32x4_t *)((char *)v89 + v8);
        v91 = a3 + j * v9 + 4 * j;
        v92 = (float *)(v91 + v9);
        v93 = (float32x2_t *)(v91 + 2 * v9);
        v94 = (float32x4_t *)(v91 + v9 + 2 * v9);
        v95 = j;
        v96 = (__int32 *)(a3 + j * v9);
        v97 = *v92;
        v98 = (__int32 *)&v92[-j];
        v99 = *v93;
        v100 = (__int32 *)v93 - j;
        v101 = *v94;
        v102 = (__int32 *)v94 - j;
        v103 = *v89;
        v104 = (float32x2_t *)(a5 + v10 * v8);
        v105 = *v90;
        v106 = (float32x4_t *)((char *)v90 - 4 * j);
        v107 = vtrn1q_s32(v103, v105);
        v108 = vtrn2q_s32(v103, v105);
        *(float32x2_t *)v109.i8 = vmla_n_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v107.i8, v97);
        v110 = vadd_f32(vmla_laneq_f32(vmla_n_f32((float32x2_t)v108.u64[1], *(float32x2_t *)v107.i8, v101.f32[0]), (float32x2_t)v107.u64[1], v101, 2), vmul_lane_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v101.f32, 1));
        v107.u64[1] = (unint64_t)vadd_f32(vmla_n_f32((float32x2_t)v107.u64[1], *(float32x2_t *)v107.i8, v99.f32[0]), vmul_lane_f32(*(float32x2_t *)v108.i8, v99, 1));
        v109.u64[1] = (unint64_t)v110;
        v111 = (float32x4_t)vtrn1q_s32(v107, v109);
        v112 = (float32x4_t)vtrn2q_s32(v107, v109);
        if ((j & 1) != 0)
        {
          v113.i32[0] = *v96++;
          v113.i32[1] = *v98++;
          v113.i32[2] = *v100++;
          v113.i32[3] = *v102++;
          v114 = v104->f32[0];
          v104 = (float32x2_t *)((char *)v104 + 4);
          v115 = v106->f32[0];
          v106 = (float32x4_t *)((char *)v106 + 4);
          v111 = vmlaq_n_f32(v111, v113, v114);
          v112 = vmlaq_n_f32(v112, v113, v115);
          v95 = j - 1;
        }
        if (v95)
        {
          v116 = 0uLL;
          v117 = 0uLL;
          do
          {
            v118.i64[0] = *(_QWORD *)v96;
            v96 += 2;
            v119.i64[0] = *(_QWORD *)v98;
            v98 += 2;
            v120 = *(_QWORD *)v100;
            v100 += 2;
            v121 = *(_QWORD *)v102;
            v102 += 2;
            v122 = *v104++;
            v123 = *(float32x2_t *)v106->f32;
            v106 = (float32x4_t *)((char *)v106 + 8);
            v118.i64[1] = v120;
            v119.i64[1] = v121;
            v124 = (float32x4_t)vtrn1q_s32(v118, v119);
            v7 = (float32x4_t)vtrn2q_s32(v118, v119);
            v111 = vmlaq_n_f32(v111, v124, v122.f32[0]);
            v112 = vmlaq_n_f32(v112, v124, v123.f32[0]);
            v116 = vmlaq_lane_f32(v116, v7, v122, 1);
            v117 = vmlaq_lane_f32(v117, v7, v123, 1);
            v72 = v95 <= 2;
            v95 -= 2;
          }
          while (!v72);
          v111 = vaddq_f32(v111, v116);
          v112 = vaddq_f32(v112, v117);
        }
        *(float32x4_t *)v104->f32 = vmulq_n_f32(v111, a7);
      }
      if (j)
      {
        v125 = (float32x2_t *)(a5 + v10 * v8);
        v126 = (float32x2_t *)((char *)v125 + v8);
        v127 = (float32x2_t *)(a3 + (j - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v128 = *v127;
            v127 = (float32x2_t *)((char *)v127 - v9);
            v129 = (float)(vaddv_f32(vmul_f32(v128, *v126)) + v126[1].f32[0]) * a7;
            v125[1].f32[0] = (float)(vaddv_f32(vmul_f32(v128, *v125)) + v125[1].f32[0]) * a7;
            v126[1].f32[0] = v129;
          }
          v130 = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v126)) + (float)(v127->f32[0] * COERCE_FLOAT(*v126)))
               * a7;
          v125->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v125))
                               + (float)(v127->f32[0] * COERCE_FLOAT(*v125)))
                       * a7;
          v126->f32[1] = v130;
        }
        v131 = v126->f32[0] * a7;
        v125->f32[0] = v125->f32[0] * a7;
        v126->f32[0] = v131;
      }
      a2 -= 2;
      v10 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v146 = vmulq_n_f32(v150, a7))
      {
        k -= 4;
        v133 = a3 + k * v9 + 4 * k;
        v134 = (float *)(v133 + v9);
        v135 = (float32x2_t *)(v133 + 2 * v9);
        v136 = (float32x4_t *)(v133 + v9 + 2 * v9);
        v137 = k;
        v138 = (__int32 *)(a3 + k * v9);
        v139 = *v134;
        v140 = (__int32 *)&v134[-k];
        v141 = *v135;
        v142 = (__int32 *)v135 - k;
        v143 = *v136;
        v144 = (__int32 *)v136 - k;
        v145 = *(float32x4_t *)(a5 + v10 * v8 + 4 * k);
        v146 = (float32x4_t *)(a5 + v10 * v8);
        v143.i32[3] = 0;
        v147 = vmulq_f32(v143, v145);
        v148 = vmul_f32(v141, *(float32x2_t *)v145.f32);
        v7.f32[0] = v139 * v145.f32[0];
        v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
        *(int32x2_t *)v149.f32 = vtrn1_s32(*(int32x2_t *)v145.f32, *(int32x2_t *)v7.f32);
        *(int32x2_t *)&v149.u32[2] = vtrn1_s32((int32x2_t)vpadd_f32(v148, v148), (int32x2_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32));
        v145.i32[0] = 0;
        v150 = vaddq_f32(v149, v145);
        if ((k & 1) != 0)
        {
          v151.i32[0] = *v138++;
          v151.i32[1] = *v140++;
          v151.i32[2] = *v142++;
          v151.i32[3] = *v144++;
          v152 = v146->f32[0];
          v146 = (float32x4_t *)((char *)v146 + 4);
          v150 = vmlaq_n_f32(v150, v151, v152);
          v137 = k - 1;
        }
        if (v137)
        {
          v153 = 0uLL;
          do
          {
            v154.i64[0] = *(_QWORD *)v138;
            v138 += 2;
            v155.i64[0] = *(_QWORD *)v140;
            v140 += 2;
            v156 = *(_QWORD *)v142;
            v142 += 2;
            v157 = *(_QWORD *)v144;
            v144 += 2;
            v158 = *(float32x2_t *)v146->f32;
            v146 = (float32x4_t *)((char *)v146 + 8);
            v154.i64[1] = v156;
            v155.i64[1] = v157;
            v7 = (float32x4_t)vtrn2q_s32(v154, v155);
            v150 = vmlaq_n_f32(v150, (float32x4_t)vtrn1q_s32(v154, v155), v158.f32[0]);
            v153 = vmlaq_lane_f32(v153, v7, v158, 1);
            v72 = v137 <= 2;
            v137 -= 2;
          }
          while (!v72);
          v150 = vaddq_f32(v150, v153);
        }
      }
      if (k)
      {
        v159 = (float32x2_t *)(a5 + v10 * v8);
        v160 = (float32x2_t *)(a3 + (k - 1) * v9);
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v161 = *v160;
            v160 = (float32x2_t *)((char *)v160 - v9);
            v159[1].f32[0] = (float)(vaddv_f32(vmul_f32(v161, *v159)) + v159[1].f32[0]) * a7;
          }
          v159->f32[1] = (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)v159))
                               + (float)(v160->f32[0] * COERCE_FLOAT(*v159)))
                       * a7;
        }
        v159->f32[0] = v159->f32[0] * a7;
      }
    }
  }
  return result;
}

void sub_20E830EA8(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x2_t *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  float v66;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v17 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v17 = 2;
        v23 = __X;
        v24 = __N;
        do
        {
          v25 = *v23 * v11;
          *v23 = v25;
          v23[a6] = (float)(v23[a6] * v11) - (float)(v25 * v22);
          ++v23;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v17 = 1;
      cblas_sscal(__N, a7, __X, 1);
      v11 = a7;
    }
    else
    {
      v17 = 0;
    }
  }
  else if (__N < 1)
  {
    v17 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = 3;
    v18 = __X;
    v19 = __N;
    do
    {
      v20 = *v18 * v11;
      *v18 = v20;
      v21 = (float)(v18[a6] * v11) - (float)(v20 * v14);
      v18[a6] = v21;
      v18[2 * a6] = -(float)((float)((float)(v16 * v21) + (float)(*v18 * v15)) - (float)(v18[2 * a6] * v11));
      ++v18;
      --v19;
    }
    while (v19);
  }
  if (v17 < a2)
  {
    v26 = 8 * a4;
    v27 = 8 * a6;
    v28 = v17;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x2_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29];
          v32 = 0uLL;
          if ((v17 & 1) != 0)
          {
            v38 = vmlaq_n_f32((float32x4_t)0, *v31, COERCE_FLOAT(*(_OWORD *)v30->f32));
            v35 = vmlaq_lane_f32((float32x4_t)0, *v31, *v30, 1);
            v34 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 2);
            v33 = vmlaq_laneq_f32((float32x4_t)0, *v31, *(float32x4_t *)v30->f32, 3);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v36 = v28 - 1;
            v37 = (float32x2_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v39 = 0uLL;
              v40 = 0uLL;
              v41 = 0uLL;
              do
              {
                v38 = vmlaq_n_f32(v38, *v31, COERCE_FLOAT(*(_OWORD *)v37->f32));
                v35 = vmlaq_lane_f32(v35, *v31, *v37, 1);
                v34 = vmlaq_laneq_f32(v34, *v31, *(float32x4_t *)v37->f32, 2);
                v33 = vmlaq_laneq_f32(v33, *v31, *(float32x4_t *)v37->f32, 3);
                v42 = *(float32x4_t *)&v37->f32[a4];
                v43 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v39 = vmlaq_n_f32(v39, v43, v42.f32[0]);
                v40 = vmlaq_lane_f32(v40, v43, *(float32x2_t *)v42.f32, 1);
                v41 = vmlaq_laneq_f32(v41, v43, v42, 2);
                v32 = vmlaq_laneq_f32(v32, v43, v42, 3);
                v37 = (float32x2_t *)((char *)v37 + v26);
                v31 = (float32x4_t *)((char *)v31 + v27);
                v36 -= 2;
              }
              while (v36);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v28;
            v37 = (float32x2_t *)(a3 + 4 * v28);
            v38 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v41 = 0uLL;
          v40 = 0uLL;
          v39 = 0uLL;
LABEL_27:
          v44 = vaddq_f32(v39, v38);
          v45 = vaddq_f32(v40, v35);
          v46 = vaddq_f32(v32, v33);
          v47 = vmulq_n_f32(*v31, v11);
          v48 = vsubq_f32(v47, v44);
          v49 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v11), v45);
          v45.i32[0] = v37->i32[1];
          v47.i32[0] = v37[1].i32[0];
          v50 = vmlsq_lane_f32(v49, v48, *(float32x2_t *)v45.f32, 0);
          v51 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v11), vaddq_f32(v41, v34)), v48, *(float32x2_t *)v47.f32, 0);
          v45.i32[0] = v37[1].i32[1];
          v52 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v11), v46), v48, *(float32x2_t *)v45.f32, 0);
          v53 = (char *)v37 + 4 * a4;
          v45.i32[0] = *((_DWORD *)v53 + 2);
          v47.i32[0] = *((_DWORD *)v53 + 3);
          v54 = vmlsq_lane_f32(v51, v50, *(float32x2_t *)v45.f32, 0);
          v45.i32[0] = *(_DWORD *)&v53[4 * a4 + 12];
          *v31 = v48;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v50;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v54;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(vmlsq_lane_f32(v52, v50, *(float32x2_t *)v47.f32, 0), v54, *(float32x2_t *)v45.f32, 0);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a2)
        return;
    }
    v55 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v56 = &__X[v29];
      v57 = 0uLL;
      if ((v17 & 1) != 0)
      {
        v58 = vmlaq_n_f32((float32x4_t)0, *v55, *v56);
        v56 += a6;
        v59 = v28 - 1;
        v60 = (float32x4_t *)((char *)v55 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v58 = vmlaq_n_f32(v58, *v60, *v56);
            v57 = vmlaq_n_f32(v57, *(float32x4_t *)((char *)v60 + 4 * a4), v56[a6]);
            v60 = (float32x4_t *)((char *)v60 + v26);
            v56 = (float *)((char *)v56 + v27);
            v59 -= 2;
          }
          while (v59);
        }
      }
      else
      {
        v58 = 0uLL;
        v59 = v28;
        v60 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      v61 = vaddq_f32(v57, v58);
      v62 = -(float)(v61.f32[0] - (float)(*v56 * v11));
      v63 = (float)-(float)(v61.f32[1] - (float)(v56[a6] * v11)) - (float)(v62 * v60->f32[1]);
      v64 = (float)-(float)(v61.f32[2] - (float)(v56[2 * a6] * v11)) - (float)(v62 * v60->f32[2]);
      v61.f32[0] = (float)-(float)(v61.f32[3] - (float)(v56[3 * a6] * v11)) - (float)(v62 * v60->f32[3]);
      v65 = &v60->f32[a4];
      v66 = v64 - (float)(v63 * v65[2]);
      v61.f32[0] = (float)(v61.f32[0] - (float)(v63 * v65[3])) - (float)(v66 * v65[a4 + 3]);
      *v56 = v62;
      v56[a6] = v63;
      v56[2 * a6] = v66;
      v56[3 * a6] = v61.f32[0];
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void sub_20E831290(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  char *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  float *v69;
  float32x4_t v70;
  float32x4_t *v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  float v79;
  float v80;

  v11 = a7;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v20 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v20 = 2;
        v28 = __X;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = v27 * *v28;
          *v28 = v31;
          v28[a6] = v30 * (float)((float)(v28[a6] * v11) - (float)(v31 * v26));
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v20 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v11 = a7;
    }
    else
    {
      v20 = 0;
    }
  }
  else if (__N < 1)
  {
    v20 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = 3;
    v21 = __X;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *v21;
      *v21 = v24;
      v25 = v19 * (float)((float)(v21[a6] * v11) - (float)(v24 * v15));
      v21[a6] = v25;
      v21[2 * a6] = v23
                  * (float)-(float)((float)((float)(v18 * v25) + (float)(*v21 * v14)) - (float)(v21[2 * a6] * v11));
      ++v21;
      --v22;
    }
    while (v22);
  }
  if (v20 < a2)
  {
    v32 = a4 + 1;
    v33 = 8 * a4;
    v34 = 8 * a6;
    v35 = v20;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v32];
      v37 = 1.0 / a3[v32 + v35 * v32];
      v38 = 1.0 / a3[(v35 + 2) * v32];
      v39 = 1.0 / a3[(v35 + 3) * v32];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x2_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40];
          v43 = 0uLL;
          if ((v20 & 1) != 0)
          {
            v49 = vmlaq_n_f32((float32x4_t)0, *v42, COERCE_FLOAT(*(_OWORD *)v41->f32));
            v46 = vmlaq_lane_f32((float32x4_t)0, *v42, *v41, 1);
            v45 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 2);
            v44 = vmlaq_laneq_f32((float32x4_t)0, *v42, *(float32x4_t *)v41->f32, 3);
            v42 = (float32x4_t *)((char *)v42 + 4 * a6);
            v47 = v35 - 1;
            v48 = (float32x2_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v50 = 0uLL;
              v51 = 0uLL;
              v52 = 0uLL;
              do
              {
                v49 = vmlaq_n_f32(v49, *v42, COERCE_FLOAT(*(_OWORD *)v48->f32));
                v46 = vmlaq_lane_f32(v46, *v42, *v48, 1);
                v45 = vmlaq_laneq_f32(v45, *v42, *(float32x4_t *)v48->f32, 2);
                v44 = vmlaq_laneq_f32(v44, *v42, *(float32x4_t *)v48->f32, 3);
                v53 = *(float32x4_t *)&v48->f32[a4];
                v54 = *(float32x4_t *)((char *)v42 + 4 * a6);
                v50 = vmlaq_n_f32(v50, v54, v53.f32[0]);
                v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)v53.f32, 1);
                v52 = vmlaq_laneq_f32(v52, v54, v53, 2);
                v43 = vmlaq_laneq_f32(v43, v54, v53, 3);
                v48 = (float32x2_t *)((char *)v48 + v33);
                v42 = (float32x4_t *)((char *)v42 + v34);
                v47 -= 2;
              }
              while (v47);
              goto LABEL_27;
            }
          }
          else
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = v35;
            v48 = (float32x2_t *)&a3[v35];
            v49 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v52 = 0uLL;
          v51 = 0uLL;
          v50 = 0uLL;
LABEL_27:
          v55 = vaddq_f32(v50, v49);
          v56 = vaddq_f32(v43, v44);
          v57 = vmulq_n_f32(*(float32x4_t *)((char *)v42 + 8 * a6), v11);
          v58 = vsubq_f32(vmulq_n_f32(*v42, v11), v55);
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 4 * a6), v11), vaddq_f32(v51, v46));
          v60 = vsubq_f32(v57, vaddq_f32(v52, v45));
          v61 = vmulq_n_f32(v58, v36);
          v58.i32[0] = v48->i32[1];
          v57.i32[0] = v48[1].i32[0];
          v62 = vmlsq_lane_f32(v59, v61, *(float32x2_t *)v58.f32, 0);
          v63 = vmlsq_lane_f32(v60, v61, *(float32x2_t *)v57.f32, 0);
          v58.i32[0] = v48[1].i32[1];
          v64 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v42 + 12 * a6), v11), v56), v61, *(float32x2_t *)v58.f32, 0);
          v65 = (char *)v48 + 4 * a4;
          v66 = vmulq_n_f32(v62, v37);
          v58.i32[0] = *((_DWORD *)v65 + 2);
          v57.i32[0] = *((_DWORD *)v65 + 3);
          v67 = vmulq_n_f32(vmlsq_lane_f32(v63, v66, *(float32x2_t *)v58.f32, 0), v38);
          v58.i32[0] = *(_DWORD *)&v65[4 * a4 + 12];
          *v42 = v61;
          *(float32x4_t *)((char *)v42 + 4 * a6) = v66;
          *(float32x4_t *)((char *)v42 + 8 * a6) = v67;
          *(float32x4_t *)((char *)v42 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v64, v66, *(float32x2_t *)v57.f32, 0), v67, *(float32x2_t *)v58.f32, 0), v39);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a2)
        return;
    }
    v68 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v69 = &__X[v40];
      v70 = 0uLL;
      if ((v20 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v68, *v69);
        v69 += a6;
        v71 = (float32x4_t *)((char *)v68 + 4 * a4);
        v72 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v73 = vmlaq_n_f32(v73, *v71, *v69);
            v70 = vmlaq_n_f32(v70, *(float32x4_t *)((char *)v71 + 4 * a4), v69[a6]);
            v69 = (float *)((char *)v69 + v34);
            v71 = (float32x4_t *)((char *)v71 + v33);
            v72 -= 2;
          }
          while (v72);
        }
      }
      else
      {
        v71 = (float32x4_t *)&a3[v35];
        v72 = v35;
        v73 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v74 = vaddq_f32(v73, v70);
      v75 = v36 * (float)-(float)(v74.f32[0] - (float)(*v69 * v11));
      v76 = (float)-(float)(v74.f32[1] - (float)(v69[a6] * v11)) - (float)(v75 * v71->f32[1]);
      v77 = (float)-(float)(v74.f32[2] - (float)(v69[2 * a6] * v11)) - (float)(v75 * v71->f32[2]);
      v74.f32[0] = (float)-(float)(v74.f32[3] - (float)(v69[3 * a6] * v11)) - (float)(v75 * v71->f32[3]);
      v78 = &v71->f32[a4];
      v79 = v37 * v76;
      v80 = v38 * (float)(v77 - (float)(v79 * v78[2]));
      v74.f32[0] = v39 * (float)((float)(v74.f32[0] - (float)(v79 * v78[3])) - (float)(v80 * v78[a4 + 3]));
      *v69 = v75;
      v69[a6] = v79;
      v69[2 * a6] = v80;
      v69[3 * a6] = v74.f32[0];
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

void sub_20E831718(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float32x4_t v54;
  float *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  uint64_t v84;
  uint64_t v85;
  __int32 *v86;
  uint64_t v87;
  __int32 *v88;
  uint64_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  float32x4_t v105;
  float v106;
  uint64_t v107;
  int32x4_t v108;
  uint64_t v109;
  int32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float *v115;
  float v116;
  float v117;
  float v118;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;

  v9 = __N;
  v10 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v22 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
        v23 = (float *)(a5 + 4 * v10 * a6);
        v24 = (float *)(a5 + a6 * (4 * a2 - 8));
        v25 = __N;
        do
        {
          v26 = *v23 * a7;
          *v23++ = v26;
          *v24 = (float)(*v24 * a7) - (float)(v26 * v22);
          ++v24;
          --v25;
        }
        while (v25);
      }
      v10 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v125 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v10 * a6), 1);
      a7 = v125;
      v10 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v11 = *(float *)(a3 + 4 * (v10 + (a2 - 2) * a4));
      v12 = (a2 - 3) * a4;
      v13 = *(float *)(a3 + 4 * (v12 + v10));
      v14 = *(float *)(a3 + 4 * (v12 + a2 - 2));
      v15 = (float *)(a5 + 4 * v10 * a6);
      v16 = (float *)(a5 + a6 * (4 * a2 - 8));
      v17 = (float *)(a5 + a6 * (4 * a2 - 12));
      v18 = __N;
      do
      {
        v19 = *v15 * a7;
        *v15 = v19;
        v20 = (float)(*v16 * a7) - (float)(v19 * v11);
        *v16++ = v20;
        v21 = *v15++;
        *v17 = -(float)((float)((float)(v14 * v20) + (float)(v21 * v13)) - (float)(*v17 * a7));
        ++v17;
        --v18;
      }
      while (v18);
    }
    v10 = a2 - 4;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v27 = v10 + 1;
    v124 = v9 - 3;
    v126 = v9;
    v28 = 8 * a6;
    while (1)
    {
      v29 = v27 - 4;
      v122 = v27 - 4;
      v123 = v27;
      v30 = 0;
      if (v9 >= 4)
      {
        v31 = a3 + 4 * v29;
        v32 = a3 + 4 * v27;
        v33 = (float *)(v32 + 4 * v29 * a4);
        v34 = (v27 - 3) * a4;
        v35 = (float *)(v32 + 4 * v34);
        v36 = (v27 - 2) * a4;
        v37 = (float *)(v32 + 4 * v36);
        v38 = (float *)(v32 + 4 * (v27 - 1) * a4);
        v39 = v27 * a6;
        v40 = 4;
        if (a2 - v29 > 4)
          v40 = a2 - v29;
        v41 = (_DWORD *)(v31 + 4 * v29 * a4);
        v42 = v31 + 4 * v34;
        v43 = v31 + 4 * v36;
        v44 = v29 * a6;
        do
        {
          v45 = a5 + 4 * v30;
          v46 = (float32x4_t *)(v45 + 4 * v39);
          v47 = 0uLL;
          if ((v40 & 1) != 0)
          {
            v69 = *v46;
            v54 = vmlaq_n_f32((float32x4_t)0, *v46, *v33);
            v50 = vmlaq_n_f32((float32x4_t)0, *v46, *v35);
            v49 = vmlaq_n_f32((float32x4_t)0, *v46, *v37);
            v46 = (float32x4_t *)((char *)v46 + 4 * a6);
            v51 = v40 - 5;
            v48 = vmlaq_n_f32((float32x4_t)0, v69, *v38);
            v52 = v38 + 1;
            v53 = v37 + 1;
            v55 = v35 + 1;
            v56 = v33 + 1;
            if (v40 != 5)
            {
LABEL_21:
              v57 = 0uLL;
              v58 = 0uLL;
              v59 = 0uLL;
              do
              {
                v60 = *v56;
                v61 = v56[1];
                v56 += 2;
                v54 = vmlaq_n_f32(v54, *v46, v60);
                v62 = *v55;
                v63 = v55[1];
                v55 += 2;
                v50 = vmlaq_n_f32(v50, *v46, v62);
                v64 = *v53;
                v65 = v53[1];
                v53 += 2;
                v49 = vmlaq_n_f32(v49, *v46, v64);
                v66 = *v52;
                v67 = v52[1];
                v52 += 2;
                v48 = vmlaq_n_f32(v48, *v46, v66);
                v68 = *(float32x4_t *)((char *)v46 + 4 * a6);
                v57 = vmlaq_n_f32(v57, v68, v61);
                v58 = vmlaq_n_f32(v58, v68, v63);
                v59 = vmlaq_n_f32(v59, v68, v65);
                v46 = (float32x4_t *)((char *)v46 + v28);
                v47 = vmlaq_n_f32(v47, v68, v67);
                v51 -= 2;
              }
              while (v51);
              goto LABEL_26;
            }
          }
          else
          {
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            v51 = v40 - 4;
            v52 = v38;
            v53 = v37;
            v54 = 0uLL;
            v55 = v35;
            v56 = v33;
            if (v40 != 4)
              goto LABEL_21;
          }
          v59 = 0uLL;
          v58 = 0uLL;
          v57 = 0uLL;
LABEL_26:
          v70 = vaddq_f32(v57, v54);
          v71 = vaddq_f32(v59, v49);
          v72 = vaddq_f32(v47, v48);
          v73 = (float32x4_t *)(v45 + 4 * v44);
          v74 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 4 * a6), a7);
          v75 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 8 * a6), a7);
          v76 = vmulq_n_f32(*(float32x4_t *)((char *)v73 + 12 * a6), a7);
          v77 = vsubq_f32(v74, vaddq_f32(v58, v50));
          v78 = vsubq_f32(v75, v71);
          v79 = vsubq_f32(v76, v72);
          v74.i32[0] = v41[3];
          v80 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v73, a7), v70), v79, *(float32x2_t *)v74.f32, 0);
          v75.i32[0] = *(_DWORD *)(v42 + 8);
          v74.i32[0] = *(_DWORD *)(v42 + 12);
          v81 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v74.f32, 0);
          v74.i32[0] = *(_DWORD *)(v43 + 12);
          v82 = vmlsq_lane_f32(v78, v79, *(float32x2_t *)v74.f32, 0);
          v76.i32[0] = v41[1];
          v74.i32[0] = v41[2];
          v83 = vmlsq_lane_f32(v81, v82, *(float32x2_t *)v75.f32, 0);
          *v73 = vmlsq_lane_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v74.f32, 0), v83, *(float32x2_t *)v76.f32, 0);
          *(float32x4_t *)((char *)v73 + 4 * a6) = v83;
          *(float32x4_t *)((char *)v73 + 8 * a6) = v82;
          *(float32x4_t *)((char *)v73 + 12 * a6) = v79;
          v30 += 4;
        }
        while (v30 < v124);
      }
      v9 = v126;
      if (v30 < v126)
        break;
LABEL_37:
      v27 = v122;
      if (v123 < 5)
        return;
    }
    v84 = a3 + 4 * v122;
    v85 = a3 + 4 * v123;
    v86 = (__int32 *)(v85 + 4 * v122 * a4);
    v87 = (v123 - 3) * a4;
    v88 = (__int32 *)(v85 + 4 * v87);
    v89 = (v123 - 2) * a4;
    v90 = (__int32 *)(v85 + 4 * v89);
    v91 = (__int32 *)(v85 + 4 * (v123 - 1) * a4);
    v92 = 4;
    if (a2 - v122 > 4)
      v92 = a2 - v122;
    v93 = (float *)(v84 + 4 * v122 * a4);
    v94 = v84 + 4 * v87;
    v95 = v84 + 4 * v89;
    while (1)
    {
      v96 = a5 + 4 * v30;
      v97 = (float *)(v96 + 4 * v123 * a6);
      v98 = 0uLL;
      if ((v92 & 1) != 0)
      {
        v105.i32[0] = *v86;
        v105.i32[1] = *v88;
        v105.i32[2] = *v90;
        v105.i32[3] = *v91;
        v106 = *v97;
        v97 += a6;
        v99 = v92 - 5;
        v100 = vmlaq_n_f32((float32x4_t)0, v105, v106);
        v101 = (uint64_t *)(v91 + 1);
        v102 = (uint64_t *)(v90 + 1);
        v103 = (uint64_t *)(v88 + 1);
        v104 = (uint64_t *)(v86 + 1);
        if (v92 != 5)
        {
          do
          {
LABEL_35:
            v107 = *v104++;
            v108.i64[0] = v107;
            v109 = *v103++;
            v110.i64[0] = v109;
            v111 = *v102++;
            v112 = v111;
            v113 = *v101++;
            v108.i64[1] = v112;
            v110.i64[1] = v113;
            v100 = vmlaq_n_f32(v100, (float32x4_t)vtrn1q_s32(v108, v110), *v97);
            v98 = vmlaq_n_f32(v98, (float32x4_t)vtrn2q_s32(v108, v110), v97[a6]);
            v97 = (float *)((char *)v97 + v28);
            v99 -= 2;
          }
          while (v99);
        }
      }
      else
      {
        v99 = v92 - 4;
        v100 = 0uLL;
        v101 = (uint64_t *)v91;
        v102 = (uint64_t *)v90;
        v103 = (uint64_t *)v88;
        v104 = (uint64_t *)v86;
        if (v92 != 4)
          goto LABEL_35;
      }
      v114 = vaddq_f32(v98, v100);
      v115 = (float *)(v96 + 4 * v122 * a6);
      v116 = -(float)(v114.f32[3] - (float)(v115[3 * a6] * a7));
      v117 = (float)-(float)(v114.f32[2] - (float)(v115[2 * a6] * a7)) - (float)(v116 * *(float *)(v95 + 12));
      v118 = (float)((float)-(float)(v114.f32[1] - (float)(v115[a6] * a7)) - (float)(v116 * *(float *)(v94 + 12)))
           - (float)(v117 * *(float *)(v94 + 8));
      *v115 = (float)((float)((float)-(float)(v114.f32[0] - (float)(*v115 * a7)) - (float)(v116 * v93[3]))
                    - (float)(v117 * v93[2]))
            - (float)(v118 * v93[1]);
      v115[a6] = v118;
      v115[2 * a6] = v117;
      v115[3 * a6] = v116;
      ++v30;
      v9 = v126;
      if (v30 == v126)
        goto LABEL_37;
    }
  }
}

void sub_20E831C80(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float32x4_t v69;
  float *v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  __int32 *v101;
  __int32 *v102;
  uint64_t v103;
  __int32 *v104;
  uint64_t v105;
  __int32 *v106;
  float *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  float32x4_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  float32x4_t v119;
  float v120;
  uint64_t v121;
  int32x4_t v122;
  uint64_t v123;
  int32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float32x4_t v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;

  v9 = a3;
  v10 = a7;
  v11 = __N;
  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v28 = (a2 - 2) * a4;
        v29 = *(float *)(a3 + 4 * (v28 + v12));
        v30 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
        v31 = *(float *)(a3 + 4 * (v28 + a2 - 2));
        v32 = (float *)(a5 + 4 * v12 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / v31;
        do
        {
          v36 = v30 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v29));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v12 + v12 * a4)), (float *)(a5 + 4 * v12 * a6), 1);
      v10 = a7;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = (a2 - 2) * a4;
      v14 = *(float *)(a3 + 4 * (v13 + v12));
      v15 = (a2 - 3) * a4;
      v16 = *(float *)(a3 + 4 * (v15 + v12));
      v17 = *(float *)(a3 + 4 * (v15 + a2 - 2));
      v18 = v10 / *(float *)(a3 + 4 * (v12 + v12 * a4));
      v19 = 1.0 / *(float *)(a3 + 4 * (v13 + a2 - 2));
      v20 = (float *)(a5 + 4 * v12 * a6);
      v21 = (float *)(a5 + a6 * (4 * a2 - 8));
      v22 = (float *)(a5 + a6 * (4 * a2 - 12));
      v23 = __N;
      v24 = 1.0 / *(float *)(a3 + 4 * (v15 + a2 - 3));
      do
      {
        v25 = v18 * *v20;
        *v20 = v25;
        v26 = v19 * (float)((float)(*v21 * v10) - (float)(v25 * v14));
        *v21++ = v26;
        v27 = *v20++;
        *v22 = v24 * (float)-(float)((float)((float)(v17 * v26) + (float)(v27 * v16)) - (float)(*v22 * v10));
        ++v22;
        --v23;
      }
      while (v23);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v37 = v12 + 1;
    v141 = v11 - 3;
    v143 = v11;
    v38 = 8 * a6;
    v138 = v9;
    while (1)
    {
      v39 = v37 - 4;
      v40 = (v37 - 4) * a4;
      v41 = 1.0 / *(float *)(v9 + 4 * (v40 + v37 - 4));
      v42 = (v37 - 3) * a4;
      v43 = 1.0 / *(float *)(v9 + 4 * (v37 - 3 + v42));
      v44 = (v37 - 2) * a4;
      v45 = 1.0 / *(float *)(v9 + 4 * (v37 - 2 + v44));
      v46 = (v37 - 1) * a4;
      v47 = 1.0 / *(float *)(v9 + 4 * (v37 - 1 + v46));
      v139 = v37 - 4;
      v140 = v37;
      v136 = v42;
      v137 = v40;
      v135 = v44;
      v48 = 0;
      if (v11 >= 4)
      {
        v49 = v9 + 4 * v39;
        v50 = v9 + 4 * v37;
        v51 = (float *)(v50 + 4 * v40);
        v52 = (float *)(v50 + 4 * v42);
        v53 = (float *)(v50 + 4 * v44);
        if (a2 - v39 <= 4)
          v54 = 4;
        else
          v54 = a2 - v39;
        v55 = (float *)(v50 + 4 * v46);
        v56 = v39 * a6;
        v57 = (_DWORD *)(v49 + 4 * v40);
        v58 = v49 + 4 * (v37 - 3) * a4;
        v59 = v49 + 4 * v44;
        do
        {
          v60 = a5 + 4 * v48;
          v61 = (float32x4_t *)(v60 + 4 * v37 * a6);
          v62 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v84 = *v61;
            v69 = vmlaq_n_f32((float32x4_t)0, *v61, *v51);
            v65 = vmlaq_n_f32((float32x4_t)0, *v61, *v52);
            v64 = vmlaq_n_f32((float32x4_t)0, *v61, *v53);
            v61 = (float32x4_t *)((char *)v61 + 4 * a6);
            v66 = v54 - 5;
            v63 = vmlaq_n_f32((float32x4_t)0, v84, *v55);
            v67 = v55 + 1;
            v68 = v53 + 1;
            v70 = v52 + 1;
            v71 = v51 + 1;
            if (v54 != 5)
            {
LABEL_22:
              v72 = 0uLL;
              v73 = 0uLL;
              v74 = 0uLL;
              do
              {
                v75 = *v71;
                v76 = v71[1];
                v71 += 2;
                v69 = vmlaq_n_f32(v69, *v61, v75);
                v77 = *v70;
                v78 = v70[1];
                v70 += 2;
                v65 = vmlaq_n_f32(v65, *v61, v77);
                v79 = *v68;
                v80 = v68[1];
                v68 += 2;
                v64 = vmlaq_n_f32(v64, *v61, v79);
                v81 = *v67;
                v82 = v67[1];
                v67 += 2;
                v63 = vmlaq_n_f32(v63, *v61, v81);
                v83 = *(float32x4_t *)((char *)v61 + 4 * a6);
                v72 = vmlaq_n_f32(v72, v83, v76);
                v73 = vmlaq_n_f32(v73, v83, v78);
                v74 = vmlaq_n_f32(v74, v83, v80);
                v61 = (float32x4_t *)((char *)v61 + v38);
                v62 = vmlaq_n_f32(v62, v83, v82);
                v66 -= 2;
              }
              while (v66);
              goto LABEL_27;
            }
          }
          else
          {
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = v54 - 4;
            v67 = v55;
            v68 = v53;
            v69 = 0uLL;
            v70 = v52;
            v71 = v51;
            if (v54 != 4)
              goto LABEL_22;
          }
          v74 = 0uLL;
          v73 = 0uLL;
          v72 = 0uLL;
LABEL_27:
          v85 = vaddq_f32(v72, v69);
          v86 = vaddq_f32(v74, v64);
          v87 = vaddq_f32(v62, v63);
          v88 = (float32x4_t *)(v60 + 4 * v56);
          v89 = vmulq_n_f32(*v88, v10);
          v90 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 4 * a6), v10);
          v91 = vmulq_n_f32(*(float32x4_t *)((char *)v88 + 8 * a6), v10);
          v92 = vsubq_f32(v89, v85);
          v93 = vsubq_f32(v90, vaddq_f32(v73, v65));
          v94 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v88 + 12 * a6), v10), v87), v47);
          v89.i32[0] = v57[3];
          v95 = vmlsq_lane_f32(v92, v94, *(float32x2_t *)v89.f32, 0);
          v90.i32[0] = *(_DWORD *)(v58 + 8);
          v89.i32[0] = *(_DWORD *)(v58 + 12);
          v96 = vmlsq_lane_f32(v93, v94, *(float32x2_t *)v89.f32, 0);
          v89.i32[0] = *(_DWORD *)(v59 + 12);
          v97 = vmulq_n_f32(vmlsq_lane_f32(vsubq_f32(v91, v86), v94, *(float32x2_t *)v89.f32, 0), v45);
          v91.i32[0] = v57[1];
          v89.i32[0] = v57[2];
          v98 = vmulq_n_f32(vmlsq_lane_f32(v96, v97, *(float32x2_t *)v90.f32, 0), v43);
          *v88 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v95, v97, *(float32x2_t *)v89.f32, 0), v98, *(float32x2_t *)v91.f32, 0), v41);
          *(float32x4_t *)((char *)v88 + 4 * a6) = v98;
          *(float32x4_t *)((char *)v88 + 8 * a6) = v97;
          *(float32x4_t *)((char *)v88 + 12 * a6) = v94;
          v48 += 4;
        }
        while (v48 < v141);
      }
      v11 = v143;
      if (v48 < v143)
        break;
LABEL_39:
      v37 = v139;
      v9 = v138;
      if (v140 < 5)
        return;
    }
    v99 = v138 + 4 * v139;
    v100 = v138 + 4 * v37;
    v101 = (__int32 *)(v100 + 4 * v137);
    v102 = (__int32 *)(v100 + 4 * v136);
    v103 = v37 * a6;
    v104 = (__int32 *)(v100 + 4 * v135);
    if (a2 - v139 <= 4)
      v105 = 4;
    else
      v105 = a2 - v139;
    v106 = (__int32 *)(v100 + 4 * (v37 - 1) * a4);
    v107 = (float *)(v99 + 4 * v137);
    v108 = v99 + 4 * v136;
    v109 = v99 + 4 * v135;
    while (1)
    {
      v110 = a5 + 4 * v48;
      v111 = (float *)(v110 + 4 * v103);
      v112 = 0uLL;
      if ((v105 & 1) != 0)
      {
        v119.i32[0] = *v101;
        v119.i32[1] = *v102;
        v119.i32[2] = *v104;
        v119.i32[3] = *v106;
        v120 = *v111;
        v111 += a6;
        v113 = v105 - 5;
        v114 = vmlaq_n_f32((float32x4_t)0, v119, v120);
        v115 = (uint64_t *)(v106 + 1);
        v116 = (uint64_t *)(v104 + 1);
        v117 = (uint64_t *)(v102 + 1);
        v118 = (uint64_t *)(v101 + 1);
        if (v105 != 5)
        {
          do
          {
LABEL_37:
            v121 = *v118++;
            v122.i64[0] = v121;
            v123 = *v117++;
            v124.i64[0] = v123;
            v125 = *v116++;
            v126 = v125;
            v127 = *v115++;
            v122.i64[1] = v126;
            v124.i64[1] = v127;
            v114 = vmlaq_n_f32(v114, (float32x4_t)vtrn1q_s32(v122, v124), *v111);
            v112 = vmlaq_n_f32(v112, (float32x4_t)vtrn2q_s32(v122, v124), v111[a6]);
            v111 = (float *)((char *)v111 + v38);
            v113 -= 2;
          }
          while (v113);
        }
      }
      else
      {
        v113 = v105 - 4;
        v114 = 0uLL;
        v115 = (uint64_t *)v106;
        v116 = (uint64_t *)v104;
        v117 = (uint64_t *)v102;
        v118 = (uint64_t *)v101;
        if (v105 != 4)
          goto LABEL_37;
      }
      v128 = vaddq_f32(v114, v112);
      v129 = (float *)(v110 + 4 * v139 * a6);
      v130 = -(float)(v128.f32[0] - (float)(*v129 * v10));
      v128.f32[0] = v47 * (float)-(float)(v128.f32[3] - (float)(v129[3 * a6] * v10));
      v131 = v45
           * (float)((float)-(float)(v128.f32[2] - (float)(v129[2 * a6] * v10))
                   - (float)(v128.f32[0] * *(float *)(v109 + 12)));
      v132 = v43
           * (float)((float)((float)-(float)(v128.f32[1] - (float)(v129[a6] * v10))
                           - (float)(v128.f32[0] * *(float *)(v108 + 12)))
                   - (float)(v131 * *(float *)(v108 + 8)));
      *v129 = v41
            * (float)((float)((float)(v130 - (float)(v128.f32[0] * v107[3])) - (float)(v131 * v107[2]))
                    - (float)(v132 * v107[1]));
      v129[a6] = v132;
      v129[2 * a6] = v131;
      v129[3 * a6] = v128.f32[0];
      ++v48;
      v11 = v143;
      if (v48 == v143)
        goto LABEL_39;
    }
  }
}

void sub_20E8322A8(int a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, int a11, double *a12, int a13)
{
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;

  v33 = a8;
  if ((a2 - 123) > 0xFFFFFFFD)
  {
    v23 = 2000;
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v23 = cblas_errprn(2, 2000, "UPLO must be %d or %d, but is set to %d", 121, 122, a2);
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v23 = cblas_errprn(4, v23, "N cannot be less than zero; it is set to %d.", a4);
LABEL_6:
  if (a5 < 0)
    v23 = cblas_errprn(5, v23, "K cannot be less than zero; it is set to %d.", a5);
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v24 = cblas_errprn(1, v23, "Order must be %d or %d, but is set to %d");
      goto LABEL_35;
    }
    if ((_DWORD)a3 != 111)
    {
      if ((a3 - 114) <= 0xFFFFFFFD)
        v23 = cblas_errprn(3, v23, "Trans must be %d or %d, but is set to %d", 111, 112, a3);
      if (a7 < a4 || a7 <= 0)
        goto LABEL_31;
      goto LABEL_32;
    }
    if (a7 >= a5 && a7 > 0)
    {
LABEL_23:
      if (a11 >= a5 && a11 > 0)
        goto LABEL_36;
      v24 = cblas_errprn(10, v23, "ldb must be >= MAX(K,1): ldb=%d K=%d");
LABEL_35:
      v23 = v24;
      goto LABEL_36;
    }
LABEL_22:
    v23 = cblas_errprn(8, v23, "lda must be >= MAX(K,1): lda=%d K=%d", a7, a5);
    goto LABEL_23;
  }
  if ((_DWORD)a3 != 111)
  {
    if ((a3 - 114) <= 0xFFFFFFFD)
      v23 = cblas_errprn(3, v23, "Trans must be %d or %d, but is set to %d", 111, 112, a3);
    if (a7 >= a5 && a7 > 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (a7 < a4 || a7 <= 0)
LABEL_31:
    v23 = cblas_errprn(8, v23, "lda must be >= MAX(N,1): lda=%d N=%d", a7, a4);
LABEL_32:
  if (a11 < a4 || a11 <= 0)
  {
    v24 = cblas_errprn(10, v23, "ldb must be >= MAX(N,1): ldb=%d N=%d");
    goto LABEL_35;
  }
LABEL_36:
  if (a13 < a4 || a13 <= 0)
    v23 = cblas_errprn(13, v23, "ldc must be >= MAX(N,1): ldc=%d N=%d", a13, a4);
  if (v23 == 2000)
  {
    if (a1 == 102)
    {
      v25 = a4;
      v26 = a5;
      v27 = a7;
      v34 = a12;
      v35 = a13;
      v28 = a11;
      v29 = a9;
      v30 = a10;
      v31 = a2;
      v32 = a3;
    }
    else
    {
      if (a2 == 121)
        v31 = 122;
      else
        v31 = 121;
      if ((_DWORD)a3 == 111)
        v32 = 112;
      else
        v32 = 111;
      v25 = a4;
      v26 = a5;
      v27 = a7;
      v28 = a11;
      v34 = a12;
      v35 = a13;
      v29 = a9;
      v30 = a10;
    }
    sub_20E860010(v31, v32, v25, v26, a6, v27, v33, v28, v29, v30, v34, v35);
  }
  else
  {
    cblas_xerbla(v23, "cblas_dsyr2k", "");
  }
}

_OWORD *sub_20E832630(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v6;
  float32x4_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  _OWORD *v49;
  _OWORD *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;

  v8 = _X2;
  v9 = 4 * a4;
  v11 = *(float32x4_t *)a1;
  v12 = *((float32x4_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float32x4_t *)v10;
  v15 = *((float32x4_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v6 = (float32x4_t)veorq_s8((int8x16_t)v6, (int8x16_t)v6);
    __asm { PRFM            #1, [X2,#0x40] }
    v23 = *_X2;
    v24 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v27 = *_X2;
    v28 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v31 = *_X2;
    v32 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v9);
    __asm { PRFM            #1, [X2,#0x40] }
    v34 = *_X2;
    v35 = _X2[1];
    _X2 = v8 + 2;
    v36 = v6;
    v37 = v6;
    v38 = v6;
    v39 = v6;
    v40 = v6;
    v41 = v6;
    v42 = v6;
    v44 = *(float32x4_t *)a2;
    v45 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
    v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
    v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
    v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
    v11 = v14;
    v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
    v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
    v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
    v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
    v12 = v15;
    v14 = *(float32x4_t *)result;
    v15 = *((float32x4_t *)result + 1);
    result += 2;
    v44 = *((float32x4_t *)a2 + 1);
    v45 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v16 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v23 = vmlaq_n_f32(v23, v11, v44.f32[0]);
        v27 = vmlaq_lane_f32(v27, v11, *(float32x2_t *)v44.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v11, v44, 2);
        v34 = vmlaq_laneq_f32(v34, v11, v44, 3);
        v24 = vmlaq_n_f32(v24, v12, v44.f32[0]);
        v28 = vmlaq_lane_f32(v28, v12, *(float32x2_t *)v44.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v12, v44, 2);
        v35 = vmlaq_laneq_f32(v35, v12, v44, 3);
        v11 = *(float32x4_t *)result;
        v12 = *((float32x4_t *)result + 1);
        v49 = result + 2;
        v44 = *(float32x4_t *)_X6;
        v50 = _X6 + 1;
        v6 = vmlaq_n_f32(v6, v14, v45.f32[0]);
        v37 = vmlaq_lane_f32(v37, v14, *(float32x2_t *)v45.f32, 1);
        v39 = vmlaq_laneq_f32(v39, v14, v45, 2);
        v41 = vmlaq_laneq_f32(v41, v14, v45, 3);
        v36 = vmlaq_n_f32(v36, v15, v45.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v45.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v45, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v45, 3);
        v14 = *(float32x4_t *)v49;
        v15 = *((float32x4_t *)v49 + 1);
        result = v49 + 2;
        v45 = *(float32x4_t *)v50;
        _X6 = v50 + 1;
        v16 -= 2;
      }
      while (v16);
      v23 = vaddq_f32(v23, v6);
      v24 = vaddq_f32(v24, v36);
      v27 = vaddq_f32(v27, v37);
      v28 = vaddq_f32(v28, v38);
      v31 = vaddq_f32(v31, v39);
      v32 = vaddq_f32(v32, v40);
      v34 = vaddq_f32(v34, v41);
      v35 = vaddq_f32(v35, v42);
    }
    *v8 = v23;
    v8[1] = v24;
    v51 = (float32x4_t *)((char *)v8 + v9);
    *v51 = v27;
    v51[1] = v28;
    v52 = (float32x4_t *)((char *)v51 + v9);
    *v52 = v31;
    v52[1] = v32;
    v53 = (float32x4_t *)((char *)v52 + v9);
    *v53 = v34;
    v53[1] = v35;
    v8 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

void sub_20E832794(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t *v77;
  float64x2_t *v78;
  float64x2_t *v79;
  BOOL v80;
  double *v81;
  double *v82;
  double v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v7 = a4;
  v9 = __N;
  v10 = 0;
  if (a1 >= 4)
  {
    v11 = a1 - 3;
    v12 = 8 * a6;
    v13 = __N & 3;
    if (__N <= 0)
      v13 = -(-__N & 3);
    v14 = a6 + 1;
    v94 = (2 * a6) | 1;
    v95 = 2 * a6;
    v15 = a6 + 2;
    v16 = a6 + 3;
    v92 = 2 * a6 + 3;
    v93 = 2 * a6 + 2;
    v17 = -a4;
    v18 = 32 * ~v7;
    v98 = 8 * v7 * (v9 - 3) + 8 * v9 - 32;
    v99 = 8 * v7 * (v9 - 4) + 8 * v9 - 32;
    v96 = 8 * v7 * (v9 - 1) + 8 * v9 - 32;
    v97 = 8 * v7 * (v9 - 2) + 8 * v9 - 32;
    v19 = (float64x2_t *)(a5 + 8 * a6 * (v9 - 4));
    v20 = -32 * a6;
    while (1)
    {
      v21 = v7;
      v22 = v9;
      v23 = v9;
      if (v9 >= 4)
      {
        v24 = v19;
        v25 = v96;
        v26 = v97;
        v28 = v98;
        v27 = v99;
        do
        {
          v22 = v9 - 4;
          v29 = v9 - 4;
          v30 = *(const double *)((char *)a3 + v27);
          v31 = (float64x2_t *)((char *)a3 + v27 + -8 * v9 + 32);
          v32 = *(float64x2_t *)((char *)a3 + v28);
          v33 = (float64x2_t *)((char *)a3 + v28 + -8 * v9 + 32);
          v34 = *(float64x2_t *)((char *)a3 + v26);
          v35 = *(float64x2_t *)((char *)a3 + v25);
          v36 = v24[1];
          v38 = *(float64x2_t *)((char *)v24 + v12);
          v39 = *(float64x2_t *)((char *)v24 + v12 + 16);
          v37 = (float64x2_t *)((char *)v24 + v12 + v12);
          v40 = vmulq_n_f64(*v24, v30);
          v41 = vmulq_n_f64(v36, v30);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v32.f64[0]), v38, v32, 1);
          v43 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v34.f64[0]), v38, v34, 1);
          v44 = vmlaq_laneq_f64(vmulq_n_f64(*v24, v35.f64[0]), v38, v35, 1);
          v45 = vmlaq_laneq_f64(vmulq_n_f64(v36, v32.f64[0]), v39, v32, 1);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v36, v34.f64[0]), v39, v34, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v36, v35.f64[0]), v39, v35, 1);
          v48 = *(const double *)((char *)a3 + v26 + 16);
          v49 = *(float64x2_t *)((char *)a3 + v25 + 16);
          v51 = *v37;
          v52 = v37[1];
          v50 = (float64x2_t *)((char *)v37 + v12);
          v53 = (float64x2_t *)((char *)a3 + v26 + -8 * v9 + 32);
          v54 = *v50;
          v55 = v50[1];
          v56 = (float64x2_t *)((char *)a3 + v25 + -8 * v9 + 32);
          v57 = vmlaq_n_f64(v43, v51, v48);
          v58 = vmlaq_n_f64(v46, v52, v48);
          v59 = (float64x2_t *)((char *)v50 + v12 - (v9 - 4) * v12 + -4 * v12);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v51, v49.f64[0]), v54, v49, 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v52, v49.f64[0]), v55, v49, 1);
          if ((((_DWORD)v9 - 4) & 1) != 0)
          {
            v62 = *v59;
            v63 = v59[1];
            v59 = (float64x2_t *)((char *)v59 + v12);
            v64 = v31->f64[0];
            v31 = (float64x2_t *)((char *)v31 + 8);
            v65 = v33->f64[0];
            v33 = (float64x2_t *)((char *)v33 + 8);
            v66 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v67 = v56->f64[0];
            v56 = (float64x2_t *)((char *)v56 + 8);
            v40 = vmlaq_n_f64(v40, v62, v64);
            v42 = vmlaq_n_f64(v42, v62, v65);
            v57 = vmlaq_n_f64(v57, v62, v66);
            v60 = vmlaq_n_f64(v60, v62, v67);
            v41 = vmlaq_n_f64(v41, v63, v64);
            v45 = vmlaq_n_f64(v45, v63, v65);
            v58 = vmlaq_n_f64(v58, v63, v66);
            v61 = vmlaq_n_f64(v61, v63, v67);
            v29 = v9 - 5;
          }
          for (; v29; v29 -= 2)
          {
            v69 = *v59;
            v70 = v59[1];
            v68 = (float64x2_t *)((char *)v59 + v12);
            v71 = *v68;
            v72 = v68[1];
            v59 = (float64x2_t *)((char *)v68 + v12);
            v73 = *v31++;
            v74 = *v33++;
            v75 = *v53++;
            v76 = *v56++;
            v40 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v69, v73.f64[0]), v71, v73, 1);
            v42 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v69, v74.f64[0]), v71, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v69, v75.f64[0]), v71, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v69, v76.f64[0]), v71, v76, 1);
            v41 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v70, v73.f64[0]), v72, v73, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v70, v74.f64[0]), v72, v74, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v70, v75.f64[0]), v72, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v70, v76.f64[0]), v72, v76, 1);
          }
          *v59 = vmulq_n_f64(v40, a7);
          v59[1] = vmulq_n_f64(v41, a7);
          v77 = (float64x2_t *)((char *)v59 + v12);
          *v77 = vmulq_n_f64(v42, a7);
          v77[1] = vmulq_n_f64(v45, a7);
          v78 = (float64x2_t *)((char *)v77 + v12);
          *v78 = vmulq_n_f64(v57, a7);
          v78[1] = vmulq_n_f64(v58, a7);
          v79 = (float64x2_t *)((char *)v78 + v12);
          *v79 = vmulq_n_f64(v60, a7);
          v79[1] = vmulq_n_f64(v61, a7);
          v27 += v18;
          v28 += v18;
          v26 += v18;
          v25 += v18;
          v24 = (float64x2_t *)((char *)v24 + v20);
          v80 = (unint64_t)v9 > 7;
          v9 -= 4;
        }
        while (v80);
      }
      v81 = (double *)(a5 + 8 * v10);
      v7 = v21;
      v82 = (double *)&a3[(v22 - 1) * v21];
      if (v13 == 3)
        break;
      if (v13 == 2)
      {
        v83 = a7;
        v84 = a6;
LABEL_18:
        v9 = v23;
        v81[v84] = v83 * (v81[v84] * v82[1] + *v81 * *v82);
        v81[v14] = v83 * (v81[v14] * v82[1] + v81[1] * *v82);
        v81[v15] = v83 * (v81[v15] * v82[1] + v81[2] * *v82);
        v81[v16] = v83 * (v81[v16] * v82[1] + v81[3] * *v82);
        v82 += v17;
        goto LABEL_19;
      }
      v9 = v23;
      if (v13 == 1)
      {
        v83 = a7;
LABEL_19:
        v87 = v81[1];
        *v81 = v83 * (*v81 * *v82);
        v81[1] = v83 * (v87 * *v82);
        v88 = v81[3];
        v81[2] = v83 * (v81[2] * *v82);
        v81[3] = v83 * (v88 * *v82);
      }
      v10 += 4;
      v19 += 2;
      if (v10 >= v11)
        goto LABEL_21;
    }
    v83 = a7;
    v84 = a6;
    v85 = v81[1];
    v81[v95] = a7 * (v81[a6] * v82[1] + *v81 * *v82 + v81[v95] * v82[2]);
    v81[v94] = a7 * (v81[v14] * v82[1] + v85 * *v82 + v81[v94] * v82[2]);
    v86 = v81[3];
    v81[v93] = a7 * (v81[v15] * v82[1] + v81[2] * *v82 + v81[v93] * v82[2]);
    v81[v92] = a7 * (v81[v16] * v82[1] + v86 * *v82 + v81[v92] * v82[2]);
    v82 += v17;
    goto LABEL_18;
  }
LABEL_21:
  v89 = a1 - v10;
  if (a1 > v10)
  {
    v90 = (double *)(a5 + 8 * v10);
    do
    {
      cblas_dscal(v9, a7, v90, a6);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasNonUnit, v9, a3, v7, v90++, a6);
      --v89;
    }
    while (v89);
  }
}

void sub_20E832CA0(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float64x2_t *v29;
  unint64_t v30;
  double v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  BOOL v77;
  float64x2_t *v78;
  double *v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  double *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v7 = a4;
  v10 = 0;
  if (a1 >= 4)
  {
    v11 = a1 - 3;
    v12 = 8 * a6;
    v13 = __N & 3;
    if (__N <= 0)
      v13 = -(-__N & 3);
    v14 = a6 + 1;
    v92 = (2 * a6) | 1;
    v93 = a6;
    v15 = a6 + 2;
    v16 = a6 + 3;
    v90 = 2 * a6 + 3;
    v91 = 2 * a6 + 2;
    v89 = -a4;
    v17 = 32 * a4;
    v96 = 8 * a4 * (__N - 3) + 8 * __N - 32;
    v97 = 8 * a4 * (__N - 4);
    v18 = (32 * a4) ^ 0xFFFFFFFFFFFFFFE0;
    v94 = 8 * a4 * (__N - 1) + 8 * __N - 32;
    v95 = 8 * a4 * (__N - 2) + 8 * __N - 32;
    v19 = (float64x2_t *)(a5 + 8 * a6 * (__N - 4));
    v20 = -32 * a6;
    while (1)
    {
      v21 = v7;
      v22 = __N;
      if (__N >= 4)
      {
        v23 = v19;
        v25 = v94;
        v24 = v95;
        v27 = v96;
        v26 = v97;
        v28 = __N;
        do
        {
          v22 = v28 - 4;
          v29 = (float64x2_t *)((char *)a3 + v26);
          v30 = v28 - 4;
          v31 = *(const double *)((char *)a3 + v27);
          v32 = (float64x2_t *)((char *)a3 + v27 + -8 * v28 + 32);
          v33 = *(float64x2_t *)((char *)a3 + v24);
          v34 = (float64x2_t *)((char *)a3 + v24 + -8 * v28 + 32);
          v35 = *(float64x2_t *)((char *)a3 + v25);
          v36 = *v23;
          v37 = v23[1];
          v39 = *(float64x2_t *)((char *)v23 + v12);
          v40 = *(float64x2_t *)((char *)v23 + v12 + 16);
          v38 = (float64x2_t *)((char *)v23 + v12 + v12);
          v41 = vmulq_laneq_f64(v39, v33, 1);
          v42 = vmulq_laneq_f64(v39, v35, 1);
          v43 = vmulq_laneq_f64(v40, v33, 1);
          v44 = vmulq_laneq_f64(v40, v35, 1);
          v45 = vmlaq_n_f64(v39, *v23, v31);
          v46 = vmlaq_n_f64(v40, v37, v31);
          v47 = *(const double *)((char *)a3 + v25 + 16);
          v49 = *v38;
          v50 = v38[1];
          v48 = (float64x2_t *)((char *)v38 + v12);
          v51 = *v48;
          v52 = v48[1];
          v53 = (float64x2_t *)((char *)a3 + v25 + -8 * v28 + 32);
          v54 = vaddq_f64(vmlaq_n_f64(v41, *v23, v33.f64[0]), v49);
          v55 = vaddq_f64(vmlaq_n_f64(v43, v37, v33.f64[0]), v50);
          v56 = (float64x2_t *)((char *)v48 + v12 - (v28 - 4) * v12 + -4 * v12);
          v57 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v42, *v23, v35.f64[0]), v49, v47), v51);
          v58 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v44, v37, v35.f64[0]), v50, v47), v52);
          if ((((_DWORD)v28 - 4) & 1) != 0)
          {
            v59 = *v56;
            v60 = v56[1];
            v56 = (float64x2_t *)((char *)v56 + v12);
            v61 = v29->f64[0];
            v29 = (float64x2_t *)((char *)v29 + 8);
            v62 = v32->f64[0];
            v32 = (float64x2_t *)((char *)v32 + 8);
            v63 = v34->f64[0];
            v34 = (float64x2_t *)((char *)v34 + 8);
            v64 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v36 = vmlaq_n_f64(v36, v59, v61);
            v45 = vmlaq_n_f64(v45, v59, v62);
            v54 = vmlaq_n_f64(v54, v59, v63);
            v57 = vmlaq_n_f64(v57, v59, v64);
            v37 = vmlaq_n_f64(v37, v60, v61);
            v46 = vmlaq_n_f64(v46, v60, v62);
            v55 = vmlaq_n_f64(v55, v60, v63);
            v58 = vmlaq_n_f64(v58, v60, v64);
            v30 = v28 - 5;
          }
          for (; v30; v30 -= 2)
          {
            v66 = *v56;
            v67 = v56[1];
            v65 = (float64x2_t *)((char *)v56 + v12);
            v68 = *v65;
            v69 = v65[1];
            v56 = (float64x2_t *)((char *)v65 + v12);
            v70 = *v29++;
            v71 = *v32++;
            v72 = *v34++;
            v73 = *v53++;
            v36 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v66, v70.f64[0]), v68, v70, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v66, v71.f64[0]), v68, v71, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v66, v72.f64[0]), v68, v72, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v66, v73.f64[0]), v68, v73, 1);
            v37 = vmlaq_laneq_f64(vmlaq_n_f64(v37, v67, v70.f64[0]), v69, v70, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v67, v71.f64[0]), v69, v71, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v67, v72.f64[0]), v69, v72, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v67, v73.f64[0]), v69, v73, 1);
          }
          *v56 = vmulq_n_f64(v36, a7);
          v56[1] = vmulq_n_f64(v37, a7);
          v74 = (float64x2_t *)((char *)v56 + v12);
          *v74 = vmulq_n_f64(v45, a7);
          v74[1] = vmulq_n_f64(v46, a7);
          v75 = (float64x2_t *)((char *)v74 + v12);
          *v75 = vmulq_n_f64(v54, a7);
          v75[1] = vmulq_n_f64(v55, a7);
          v76 = (float64x2_t *)((char *)v75 + v12);
          *v76 = vmulq_n_f64(v57, a7);
          v76[1] = vmulq_n_f64(v58, a7);
          v26 -= v17;
          v27 += v18;
          v24 += v18;
          v25 += v18;
          v23 = (float64x2_t *)((char *)v23 + v20);
          v77 = v28 > 7;
          v28 -= 4;
        }
        while (v77);
      }
      v78 = (float64x2_t *)(a5 + 8 * v10);
      v7 = v21;
      v79 = (double *)&a3[(v22 - 1) * v21];
      if (v13 == 3)
        break;
      if (v13 == 2)
      {
        v80 = a7;
        v81 = a6;
LABEL_18:
        v78->f64[v81] = v80 * (v78->f64[v81] + v78->f64[0] * *v79);
        v78->f64[v14] = v80 * (v78->f64[v14] + v78->f64[1] * *v79);
        v78->f64[v15] = v80 * (v78->f64[v15] + v78[1].f64[0] * *v79);
        v78->f64[v16] = v80 * (v78->f64[v16] + v78[1].f64[1] * *v79);
        goto LABEL_19;
      }
      if (v13 == 1)
      {
        v80 = a7;
LABEL_19:
        v84 = vmulq_n_f64(*v78, v80);
        v85 = vmulq_n_f64(v78[1], v80);
        *v78 = v84;
        v78[1] = v85;
      }
      v10 += 4;
      v19 += 2;
      if (v10 >= v11)
        goto LABEL_21;
    }
    v80 = a7;
    v81 = a6;
    v82 = v78->f64[1];
    v78[v93].f64[0] = a7 * (v78[v93].f64[0] + v78->f64[a6] * v79[1] + v78->f64[0] * *v79);
    v78->f64[v92] = a7 * (v78->f64[v92] + v78->f64[v14] * v79[1] + v82 * *v79);
    v83 = v78[1].f64[1];
    v78->f64[v91] = a7 * (v78->f64[v91] + v78->f64[v15] * v79[1] + v78[1].f64[0] * *v79);
    v78->f64[v90] = a7 * (v78->f64[v90] + v78->f64[v16] * v79[1] + v83 * *v79);
    v79 += v89;
    goto LABEL_18;
  }
LABEL_21:
  v86 = a1 - v10;
  if (a1 > v10)
  {
    v87 = (double *)(a5 + 8 * v10);
    do
    {
      cblas_dscal(__N, a7, v87, a6);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasTrans, CblasUnit, __N, a3, v7, v87++, a6);
      --v86;
    }
    while (v86);
  }
}

void sub_20E833124(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double *f64;
  uint64_t v85;
  uint64_t v86;

  v8 = a5;
  v11 = __N;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = 8 * __incX;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v17 = __incX + 1;
    v18 = __incX + 2;
    v85 = 2 * __incX + 2;
    v86 = 2 * __incX;
    v19 = __incX + 3;
    v20 = a4 + 1;
    while (1)
    {
      if (__N < 4)
      {
        v21 = 0;
      }
      else
      {
        v21 = 0;
        v22 = (double *)a3;
        v23 = a5;
        v24 = __N;
        do
        {
          v25 = v24 - 4;
          v27 = *(float64x2_t *)&v22[a4];
          v26 = (float64x2_t *)&v22[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v29 = *(float64x2_t *)((char *)v23 + 8 * __incX);
          v30 = *(float64x2_t *)((char *)v23 + v14 + 16);
          v28 = (float64x2_t *)((char *)v23 + v14 + v14);
          v31 = vmlaq_n_f64(vmulq_n_f64(*v23, *v22), v29, v27.f64[0]);
          v32 = vmlaq_n_f64(vmulq_n_f64(v23[1], *v22), v30, v27.f64[0]);
          v33 = vmulq_laneq_f64(v29, v27, 1);
          v34 = vmulq_laneq_f64(v30, v27, 1);
          v36 = *v26;
          v37 = v26[1];
          v35 = (float64x2_t *)((char *)v26 + v15);
          v39 = *v35;
          v40 = v35[1];
          v38 = (float64x2_t *)((char *)v35 + v15);
          v42 = *v28;
          v43 = v28[1];
          v41 = (float64x2_t *)((char *)v28 + v14);
          v45 = *v41;
          v46 = v41[1];
          v44 = (float64x2_t *)((char *)v41 + v14);
          v47 = vmlaq_n_f64(vmlaq_n_f64(v31, v42, v36.f64[0]), v45, v39.f64[0]);
          v48 = vmlaq_n_f64(vmlaq_n_f64(v32, v43, v36.f64[0]), v46, v39.f64[0]);
          v49 = vmlaq_laneq_f64(vmlaq_laneq_f64(v33, v42, v36, 1), v45, v39, 1);
          v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v34, v43, v36, 1), v46, v39, 1);
          v51 = vmlaq_n_f64(vmulq_n_f64(v42, v37.f64[0]), v45, v40.f64[0]);
          v52 = vmlaq_n_f64(vmulq_n_f64(v43, v37.f64[0]), v46, v40.f64[0]);
          v53 = vmulq_laneq_f64(v45, v40, 1);
          v54 = vmulq_laneq_f64(v46, v40, 1);
          if ((((_DWORD)v24 - 4) & 1) != 0)
          {
            v55 = *v44;
            v56 = v44[1];
            v44 = (float64x2_t *)((char *)v44 + v14);
            v57 = *v38;
            v58 = v38[1];
            v38 = (float64x2_t *)((char *)v38 + v15);
            v47 = vmlaq_n_f64(v47, v55, v57.f64[0]);
            v49 = vmlaq_laneq_f64(v49, v55, v57, 1);
            v51 = vmlaq_n_f64(v51, v55, v58.f64[0]);
            v53 = vmlaq_laneq_f64(v53, v55, v58, 1);
            v48 = vmlaq_n_f64(v48, v56, v57.f64[0]);
            v50 = vmlaq_laneq_f64(v50, v56, v57, 1);
            v52 = vmlaq_n_f64(v52, v56, v58.f64[0]);
            v54 = vmlaq_laneq_f64(v54, v56, v58, 1);
            v25 = v24 - 5;
          }
          for (; v25; v25 -= 2)
          {
            v60 = *v44;
            v61 = v44[1];
            v59 = (float64x2_t *)((char *)v44 + v14);
            v62 = *v59;
            v63 = v59[1];
            v44 = (float64x2_t *)((char *)v59 + v14);
            v65 = *v38;
            v66 = v38[1];
            v64 = (float64x2_t *)((char *)v38 + v15);
            v67 = *v64;
            v68 = v64[1];
            v38 = (float64x2_t *)((char *)v64 + v15);
            v47 = vmlaq_n_f64(vmlaq_n_f64(v47, v60, v65.f64[0]), v62, v67.f64[0]);
            v49 = vmlaq_laneq_f64(vmlaq_laneq_f64(v49, v60, v65, 1), v62, v67, 1);
            v51 = vmlaq_n_f64(vmlaq_n_f64(v51, v60, v66.f64[0]), v62, v68.f64[0]);
            v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v53, v60, v66, 1), v62, v68, 1);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v61, v65.f64[0]), v63, v67.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v61, v65, 1), v63, v67, 1);
            v52 = vmlaq_n_f64(vmlaq_n_f64(v52, v61, v66.f64[0]), v63, v68.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v61, v66, 1), v63, v68, 1);
          }
          v69 = (float64x2_t *)((char *)v44 - v24 * v14);
          *v69 = vmulq_n_f64(v47, a7);
          v69[1] = vmulq_n_f64(v48, a7);
          v70 = (float64x2_t *)((char *)v69 + v14);
          *v70 = vmulq_n_f64(v49, a7);
          v70[1] = vmulq_n_f64(v50, a7);
          v71 = (float64x2_t *)((char *)v70 + v14);
          *v71 = vmulq_n_f64(v51, a7);
          v71[1] = vmulq_n_f64(v52, a7);
          v72 = (float64x2_t *)((char *)v71 + v14);
          *v72 = vmulq_n_f64(v53, a7);
          v72[1] = vmulq_n_f64(v54, a7);
          v21 += 4;
          v23 += 2 * __incX;
          v22 += 4 * a4 + 4;
          v24 -= 4;
        }
        while (v21 < __N - 3);
      }
      v73 = &v8[(unint64_t)v12 / 2].f64[v21 * __incX];
      v74 = (double *)&a3[v21 * a4 + v21];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v75 = a7;
LABEL_20:
        v78 = v73[1];
        *v73 = v75 * (v73[__incX] * v74[a4] + *v73 * *v74);
        v73[1] = v75 * (v73[v17] * v74[a4] + v78 * *v74);
        v79 = v73[3];
        v73[2] = v75 * (v73[v18] * v74[a4] + v73[2] * *v74);
        v73[3] = v75 * (v73[v19] * v74[a4] + v79 * *v74);
        v74 += v20;
        v73 += __incX;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v75 = a7;
LABEL_21:
        v80 = v73[1];
        *v73 = v75 * (*v73 * *v74);
        v73[1] = v75 * (v80 * *v74);
        v81 = v73[3];
        v73[2] = v75 * (v73[2] * *v74);
        v73[3] = v75 * (v81 * *v74);
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v75 = a7;
    v76 = v73[1];
    *v73 = a7 * (v73[__incX] * v74[a4] + *v73 * *v74 + v73[v86] * v74[2 * a4]);
    v73[1] = a7 * (v73[v17] * v74[a4] + v76 * *v74 + v73[(2 * __incX) | 1] * v74[2 * a4]);
    v77 = v73[3];
    v73[2] = a7 * (v73[v18] * v74[a4] + v73[2] * *v74 + v73[v85] * v74[2 * a4]);
    v73[3] = a7 * (v73[v19] * v74[a4] + v77 * *v74 + v73[2 * __incX + 3] * v74[2 * a4]);
    v74 += v20;
    v73 += __incX;
    goto LABEL_20;
  }
LABEL_23:
  v82 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(v11, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, v11, a3, a4, f64++, __incX);
      --v82;
    }
    while (v82);
  }
}

void sub_20E8335A8(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;
  double *f64;
  uint64_t v75;
  uint64_t v76;

  v8 = a5;
  v9 = a4;
  v11 = __N;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = 8 * __incX;
    v15 = 8 * a4;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v17 = __incX + 1;
    v18 = __incX + 2;
    v75 = 2 * __incX + 2;
    v76 = __incX;
    v19 = __incX + 3;
    while (1)
    {
      if (__N < 4)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        v21 = a5;
        v22 = __N;
        v23 = (double *)&a3[a4];
        do
        {
          v24 = v22 - 4;
          v26 = *(float64x2_t *)((char *)v21 + 8 * __incX);
          v27 = *(float64x2_t *)((char *)v21 + v14 + 16);
          v25 = (float64x2_t *)((char *)v21 + v14 + v14);
          v29 = *(float64x2_t *)&v23[a4];
          v28 = (float64x2_t *)&v23[(unint64_t)v15 / 8 + (unint64_t)v15 / 8];
          v31 = *v28;
          v32 = v28[1];
          v30 = (float64x2_t *)((char *)v28 + v15);
          v34 = *v25;
          v35 = v25[1];
          v33 = (float64x2_t *)((char *)v25 + v14);
          v37 = *v33;
          v38 = v33[1];
          v36 = (float64x2_t *)((char *)v33 + v14);
          v39 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*v21, v26, *v23), v34, v29.f64[0]), v37, v31.f64[0]);
          v40 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v21[1], v27, *v23), v35, v29.f64[0]), v38, v31.f64[0]);
          v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v26, v34, v29, 1), v37, v31, 1);
          v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v27, v35, v29, 1), v38, v31, 1);
          v43 = vmlaq_n_f64(v34, v37, v32.f64[0]);
          v44 = vmlaq_n_f64(v35, v38, v32.f64[0]);
          if ((((_DWORD)v22 - 4) & 1) != 0)
          {
            v45 = *v36;
            v46 = v36[1];
            v36 = (float64x2_t *)((char *)v36 + v14);
            v47 = *v30;
            v48 = v30[1];
            v30 = (float64x2_t *)((char *)v30 + v15);
            v39 = vmlaq_n_f64(v39, v45, v47.f64[0]);
            v41 = vmlaq_laneq_f64(v41, v45, v47, 1);
            v43 = vmlaq_n_f64(v43, v45, v48.f64[0]);
            v37 = vmlaq_laneq_f64(v37, v45, v48, 1);
            v40 = vmlaq_n_f64(v40, v46, v47.f64[0]);
            v42 = vmlaq_laneq_f64(v42, v46, v47, 1);
            v44 = vmlaq_n_f64(v44, v46, v48.f64[0]);
            v38 = vmlaq_laneq_f64(v38, v46, v48, 1);
            v24 = v22 - 5;
          }
          for (; v24; v24 -= 2)
          {
            v50 = *v36;
            v51 = v36[1];
            v49 = (float64x2_t *)((char *)v36 + v14);
            v52 = *v49;
            v53 = v49[1];
            v36 = (float64x2_t *)((char *)v49 + v14);
            v55 = *v30;
            v56 = v30[1];
            v54 = (float64x2_t *)((char *)v30 + v15);
            v57 = *v54;
            v58 = v54[1];
            v30 = (float64x2_t *)((char *)v54 + v15);
            v39 = vmlaq_n_f64(vmlaq_n_f64(v39, v50, v55.f64[0]), v52, v57.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v50, v55, 1), v52, v57, 1);
            v43 = vmlaq_n_f64(vmlaq_n_f64(v43, v50, v56.f64[0]), v52, v58.f64[0]);
            v37 = vmlaq_laneq_f64(vmlaq_laneq_f64(v37, v50, v56, 1), v52, v58, 1);
            v40 = vmlaq_n_f64(vmlaq_n_f64(v40, v51, v55.f64[0]), v53, v57.f64[0]);
            v42 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v51, v55, 1), v53, v57, 1);
            v44 = vmlaq_n_f64(vmlaq_n_f64(v44, v51, v56.f64[0]), v53, v58.f64[0]);
            v38 = vmlaq_laneq_f64(vmlaq_laneq_f64(v38, v51, v56, 1), v53, v58, 1);
          }
          v59 = (float64x2_t *)((char *)v36 - v22 * v14);
          *v59 = vmulq_n_f64(v39, a7);
          v59[1] = vmulq_n_f64(v40, a7);
          v60 = (float64x2_t *)((char *)v59 + v14);
          *v60 = vmulq_n_f64(v41, a7);
          v60[1] = vmulq_n_f64(v42, a7);
          v61 = (float64x2_t *)((char *)v60 + v14);
          *v61 = vmulq_n_f64(v43, a7);
          v61[1] = vmulq_n_f64(v44, a7);
          v62 = (float64x2_t *)((char *)v61 + v14);
          *v62 = vmulq_n_f64(v37, a7);
          v62[1] = vmulq_n_f64(v38, a7);
          v20 += 4;
          v23 += 4 * a4 + 4;
          v21 += 2 * __incX;
          v22 -= 4;
        }
        while (v20 < __N - 3);
      }
      v63 = (float64x2_t *)((char *)&v8[(unint64_t)v12 / 2] + 8 * v20 * __incX);
      v64 = (uint64_t)&a3[v20 * a4 + v20];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v65 = a7;
LABEL_20:
        v68 = v63->f64[1];
        v63->f64[0] = v65 * (v63->f64[0] + v63->f64[__incX] * *(double *)(v64 + 8 * a4));
        v63->f64[1] = v65 * (v68 + v63->f64[v17] * *(double *)(v64 + 8 * a4));
        v69 = v63[1].f64[1];
        v63[1].f64[0] = v65 * (v63[1].f64[0] + v63->f64[v18] * *(double *)(v64 + 8 * a4));
        v63[1].f64[1] = v65 * (v69 + v63->f64[v19] * *(double *)(v64 + 8 * a4));
        v63 = (float64x2_t *)((char *)v63 + 8 * __incX);
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v65 = a7;
LABEL_21:
        v70 = vmulq_n_f64(*v63, v65);
        v71 = vmulq_n_f64(v63[1], v65);
        *v63 = v70;
        v63[1] = v71;
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v65 = a7;
    v66 = v63->f64[1];
    v63->f64[0] = a7
                * (v63->f64[0]
                 + v63->f64[__incX] * *(double *)(v64 + 8 * a4)
                 + v63[v76].f64[0] * *(double *)(v64 + 16 * a4));
    v63->f64[1] = a7
                * (v66
                 + v63->f64[v17] * *(double *)(v64 + 8 * a4)
                 + v63->f64[(2 * __incX) | 1] * *(double *)(v64 + 16 * a4));
    v67 = v63[1].f64[1];
    v63[1].f64[0] = a7
                  * (v63[1].f64[0]
                   + v63->f64[v18] * *(double *)(v64 + 8 * a4)
                   + v63->f64[v75] * *(double *)(v64 + 16 * a4));
    v63[1].f64[1] = a7
                  * (v67
                   + v63->f64[v19] * *(double *)(v64 + 8 * a4)
                   + v63[__incX + 1].f64[1] * *(double *)(v64 + 16 * a4));
    v64 += 8 * (a4 + 1);
    v63 = (float64x2_t *)((char *)v63 + 8 * __incX);
    goto LABEL_20;
  }
LABEL_23:
  v72 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(v11, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasUpper, CblasNoTrans, CblasUnit, v11, a3, v9, f64++, __incX);
      --v72;
    }
    while (v72);
  }
}

void sub_20E833998(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int128 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,__int128 a35,void *a36,uint64_t a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,char a54)
{
  int v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(double);
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128);
  unint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *(*v89)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v90)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v91;
  float64x2_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float64x2_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  float64x2_t *v114;
  __int128 v115;
  __int128 v116;
  float64x2_t *v117;
  float64x2_t *v118;
  __int128 v119;
  double *v120;
  uint64_t v121;
  uint64_t v122;
  float64x2_t *v123;
  __int128 v124;
  __int128 v125;
  float64x2_t *v126;
  float64x2_t *v127;
  __int128 v128;
  double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const double *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(double);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  double *(*v171)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  double *(*v180)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;

  v57 = MEMORY[0x24BDAC7A8](a1);
  v163 = v59;
  v149 = v60;
  v62 = v61;
  v63 = v57;
  v64 = v55;
  STACK[0x102D8] = *MEMORY[0x24BDAC8D0];
  if (v54 == 111)
    v65 = 1;
  else
    v65 = v56;
  v160 = v65;
  v161 = v56;
  if (v54 == 111)
    v66 = v56;
  else
    v66 = 1;
  v148 = v66;
  v67 = (void (*)(double))sub_20E835C9C;
  if (v54 == 111)
    v67 = (void (*)(double))sub_20E835DBC;
  v151 = v67;
  v68 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128))sub_20E835F4C;
  if (v54 == 111)
    v68 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, __n128))sub_20E835E6C;
  v159 = v68;
  v182 = v58;
  if (v55 >= 65)
  {
    v70 = (char *)malloc_type_malloc((v55 << 9) + 32864, 0x100004000313F17uLL);
    *(_QWORD *)&v58 = v182;
    v183 = v70;
    v69 = (unint64_t *)(v70 + 32832);
  }
  else
  {
    v183 = &a54;
    v69 = &STACK[0x82A0];
  }
  v164 = (uint64_t)v69;
  if (v62 >= 1)
  {
    v154 = 0;
    v71 = 0;
    v179 = v64 - 3;
    if (v64 <= 0)
      v73 = -(-v64 & 3);
    else
      v73 = v64 & 3;
    v170 = (__int128)vdupq_lane_s64(v58, 0);
    v74 = 8 * a9;
    v176 = 32 * a9;
    v75 = 64;
    vars8 = v73;
    v158 = v64;
    vars0 = 8 * a9;
    v150 = v62;
    do
    {
      v153 = v75;
      if (v62 >= v75)
        v76 = v75;
      else
        v76 = v62;
      v152 = v71 + 64;
      if (v71 + 64 <= v62)
        v77 = 64;
      else
        v77 = v62 - v71;
      v184 = v77;
      v151(v63);
      v78 = (__n128)v182;
      if (v64 >= 1)
      {
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v177 = 32 * (v76 + v154);
        v162 = v149 + 8 * v71 * v148;
        v82 = *(double *)&v182 != 0.0;
        if (*(double *)&v182 == 1.0 || v71 != 0)
          v82 = 0;
        v178 = v82;
        v155 = 8 * (v76 + v154);
        v169 = v163;
        v84 = 64;
        v171 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
        v180 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
        do
        {
          v167 = v84;
          if (v64 >= v84)
            v85 = v84;
          else
            v85 = v64;
          v86 = v85 + v80;
          v87 = (int)v81;
          v165 = v81;
          v166 = v81 + 64;
          if (v81 + 64 <= v64)
            v88 = 64;
          else
            v88 = v64 - v81;
          v89 = v180;
          if ((v88 & 7) != 0)
            v89 = sub_20E8428D0;
          v180 = v89;
          v90 = v171;
          if ((v88 & 7) != 0)
            v90 = sub_20E83B2A0;
          v171 = v90;
          v159(v88, v184, v162 + 8 * v81 * v160, v161, v183, v78);
          v168 = v79;
          v181 = v80;
          if (v87 >= v179)
          {
            v96 = *(double *)&v182;
          }
          else
          {
            v91 = v80;
            v92 = (float64x2_t *)(v164 + v155 * v87);
            v93 = v163 + v74 * v87;
            v94 = v91 + (int)v87;
            v174 = v163 + a9 * (8 * v87 + 24);
            v95 = v79;
            v172 = v163 + a9 * (8 * v87 + 8);
            v173 = v163 + a9 * (8 * v87 + 16);
            v96 = *(double *)&v182;
            do
            {
              if (v181 + v87 <= 0)
                v97 = -(-(v181 + v87) & 7);
              else
                v97 = (v181 + v87) & 7;
              if (v181 + v87 - v97 >= v88)
                v98 = v88;
              else
                v98 = v181 + v87 - v97;
              v99 = v88 - v98;
              if (v88 - v98 >= 1)
              {
                v78 = 0uLL;
                a52 = 0u;
                a53 = 0u;
                a50 = 0u;
                a51 = 0u;
                a48 = 0u;
                a49 = 0u;
                a46 = 0u;
                a47 = 0u;
                a44 = 0u;
                a45 = 0u;
                a42 = 0u;
                a43 = 0u;
                a40 = 0u;
                a41 = 0u;
                a38 = 0u;
                a39 = 0u;
              }
              v100 = (float64x2_t *)(v93 + v95);
              if (v178)
              {
                if (v98)
                {
                  v171((float64x2_t *)v183, v92, v100, a9, v98, v184, v96);
                  v96 = *(double *)&v182;
                }
                if (v99 >= 1)
                {
                  if (v99 >= 8)
                    v101 = 8;
                  else
                    v101 = v88 - v98;
                  ((void (*)(char *, float64x2_t *, __int128 *, uint64_t, uint64_t))v180)(&v183[8 * v98 * v184], v92, &a38, 8, v101);
                  v96 = *(double *)&v182;
                  v102 = v94 - v97;
                  if (v86 >= v94 - v97)
                    v103 = v94 - v97;
                  else
                    v103 = v86;
                  *(double *)(v93 + 8 * v103 + v95) = *(double *)&a38
                                                    + *(double *)(v93 + 8 * v103 + v95) * *(double *)&v182;
                  if (v86 < v102)
                    v102 = v86;
                  v104 = v95 + 8 * v102;
                  if ((v87 & 4) != 0)
                  {
                    v113 = v93 + v104;
                    *(float64x2_t *)(v113 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a38 + 8), (float64x2_t)v170, *(float64x2_t *)(v93 + v104 + 8));
                    *(float64x2_t *)(v113 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a39 + 8), (float64x2_t)v170, *(float64x2_t *)(v93 + v104 + 24));
                    v114 = (float64x2_t *)(v172 + v104);
                    v115 = a43;
                    *v114 = vmlaq_f64((float64x2_t)a42, (float64x2_t)v170, *(float64x2_t *)(v172 + v104));
                    *(float64x2_t *)(v172 + 8 * v102 + v95 + 16) = vmlaq_f64((float64x2_t)v115, (float64x2_t)v170, *(float64x2_t *)(v172 + 8 * v102 + v95 + 16));
                    v116 = a46;
                    v114[2] = vmlaq_f64((float64x2_t)a44, (float64x2_t)v170, *(float64x2_t *)(v172 + v104 + 32));
                    v117 = (float64x2_t *)(v173 + v104);
                    *v117 = vmlaq_f64((float64x2_t)v116, (float64x2_t)v170, *(float64x2_t *)(v173 + v104));
                    v118 = (float64x2_t *)(v173 + 8 * v102 + v95);
                    v119 = a48;
                    v118[1] = vmlaq_f64((float64x2_t)a47, (float64x2_t)v170, v118[1]);
                    v117[2] = vmlaq_f64((float64x2_t)v119, (float64x2_t)v170, *(float64x2_t *)(v173 + v104 + 32));
                    *(_QWORD *)&v119 = a50;
                    v118[3].f64[0] = *(double *)&a49 + v118[3].f64[0] * *(double *)&v182;
                    v120 = (double *)(v174 + v104);
                    *v120 = *(double *)&v119 + *v120 * *(double *)&v182;
                    v121 = v174 + 8 * v102 + v95;
                    *(float64x2_t *)(v121 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a50 + 8), (float64x2_t)v170, *(float64x2_t *)(v121 + 8));
                    *(float64x2_t *)(v121 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a51 + 8), (float64x2_t)v170, *(float64x2_t *)(v121 + 24));
                    v78 = *(__n128 *)(v121 + 40);
                    *(float64x2_t *)(v121 + 40) = vmlaq_f64(*(float64x2_t *)((char *)&a52 + 8), (float64x2_t)v170, (float64x2_t)v78);
                    v78.n128_f64[0] = *((double *)&a53 + 1) + v120[7] * *(double *)&v182;
                    v120[7] = v78.n128_f64[0];
                  }
                  else
                  {
                    v105 = a46;
                    *(float64x2_t *)(v172 + v104) = vmlaq_f64((float64x2_t)a42, (float64x2_t)v170, *(float64x2_t *)(v172 + v104));
                    *(float64x2_t *)(v173 + v104) = vmlaq_f64((float64x2_t)v105, (float64x2_t)v170, *(float64x2_t *)(v173 + v104));
                    *(_QWORD *)&v105 = a50;
                    *(double *)(v173 + 8 * v102 + v95 + 16) = *(double *)&a47
                                                            + *(double *)(v173 + 8 * v102 + v95 + 16) * *(double *)&v182;
                    *(double *)(v174 + v104) = *(double *)&v105 + *(double *)(v174 + v104) * *(double *)&v182;
                    v106 = v174 + 8 * v102 + v95;
                    v78 = *(__n128 *)(v106 + 8);
                    *(float64x2_t *)(v106 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a50 + 8), (float64x2_t)v170, (float64x2_t)v78);
                    v78.n128_f64[0] = *((double *)&a51 + 1) + *(double *)(v106 + 24) * *(double *)&v182;
                    *(_QWORD *)(v106 + 24) = v78.n128_u64[0];
                  }
                }
              }
              else
              {
                if (v98)
                {
                  v180((float64x2_t *)v183, v92, v100, a9, v98, v184);
                  v96 = *(double *)&v182;
                }
                if (v99 >= 1)
                {
                  if (v99 >= 8)
                    v107 = 8;
                  else
                    v107 = v88 - v98;
                  ((void (*)(char *, float64x2_t *, __int128 *, uint64_t, uint64_t))v180)(&v183[8 * v98 * v184], v92, &a38, 8, v107);
                  v108 = v94 - v97;
                  if (v86 >= v94 - v97)
                    v109 = v94 - v97;
                  else
                    v109 = v86;
                  *(double *)(v93 + 8 * v109 + v95) = *(double *)(v93 + 8 * v109 + v95) + *(double *)&a38;
                  if (v86 < v108)
                    v108 = v86;
                  v110 = v95 + 8 * v108;
                  if ((v87 & 4) != 0)
                  {
                    v122 = v93 + v110;
                    *(float64x2_t *)(v122 + 8) = vaddq_f64(*(float64x2_t *)(v93 + v110 + 8), *(float64x2_t *)((char *)&a38 + 8));
                    *(float64x2_t *)(v122 + 24) = vaddq_f64(*(float64x2_t *)(v93 + v110 + 24), *(float64x2_t *)((char *)&a39 + 8));
                    v123 = (float64x2_t *)(v172 + v110);
                    v124 = a43;
                    *v123 = vaddq_f64(*(float64x2_t *)(v172 + v110), (float64x2_t)a42);
                    *(float64x2_t *)(v172 + 8 * v108 + v95 + 16) = vaddq_f64(*(float64x2_t *)(v172 + 8 * v108 + v95 + 16), (float64x2_t)v124);
                    v125 = a46;
                    v123[2] = vaddq_f64(*(float64x2_t *)(v172 + v110 + 32), (float64x2_t)a44);
                    v126 = (float64x2_t *)(v173 + v110);
                    *v126 = vaddq_f64(*(float64x2_t *)(v173 + v110), (float64x2_t)v125);
                    v127 = (float64x2_t *)(v173 + 8 * v108 + v95);
                    v128 = a48;
                    v127[1] = vaddq_f64(v127[1], (float64x2_t)a47);
                    v126[2] = vaddq_f64(*(float64x2_t *)(v173 + v110 + 32), (float64x2_t)v128);
                    *(_QWORD *)&v128 = a50;
                    v127[3].f64[0] = v127[3].f64[0] + *(double *)&a49;
                    v129 = (double *)(v174 + v110);
                    *v129 = *v129 + *(double *)&v128;
                    v130 = v174 + 8 * v108 + v95;
                    *(float64x2_t *)(v130 + 8) = vaddq_f64(*(float64x2_t *)(v130 + 8), *(float64x2_t *)((char *)&a50 + 8));
                    *(float64x2_t *)(v130 + 24) = vaddq_f64(*(float64x2_t *)(v130 + 24), *(float64x2_t *)((char *)&a51 + 8));
                    v78 = (__n128)vaddq_f64(*(float64x2_t *)(v130 + 40), *(float64x2_t *)((char *)&a52 + 8));
                    *(__n128 *)(v130 + 40) = v78;
                    v78.n128_f64[0] = v129[7] + *((double *)&a53 + 1);
                    v129[7] = v78.n128_f64[0];
                  }
                  else
                  {
                    v111 = a46;
                    *(float64x2_t *)(v172 + v110) = vaddq_f64(*(float64x2_t *)(v172 + v110), (float64x2_t)a42);
                    *(float64x2_t *)(v173 + v110) = vaddq_f64(*(float64x2_t *)(v173 + v110), (float64x2_t)v111);
                    *(_QWORD *)&v111 = a50;
                    *(double *)(v173 + 8 * v108 + v95 + 16) = *(double *)(v173 + 8 * v108 + v95 + 16) + *(double *)&a47;
                    *(double *)(v174 + v110) = *(double *)(v174 + v110) + *(double *)&v111;
                    v112 = v174 + 8 * v108 + v95;
                    v78 = (__n128)vaddq_f64(*(float64x2_t *)(v112 + 8), *(float64x2_t *)((char *)&a50 + 8));
                    *(__n128 *)(v112 + 8) = v78;
                    v78.n128_f64[0] = *(double *)(v112 + 24) + *((double *)&a51 + 1);
                    *(_QWORD *)(v112 + 24) = v78.n128_u64[0];
                  }
                  v96 = *(double *)&v182;
                }
              }
              v87 += 4;
              v92 = (float64x2_t *)((char *)v92 + v177);
              v94 += 4;
              v95 += v176;
            }
            while (v87 < v179);
          }
          v74 = vars0;
          if (vars8)
          {
            if (v87 - v165 >= v88)
              v131 = v88;
            else
              v131 = v87 - v165;
            v132 = v88 - v131;
            if (v88 - v131 >= 3)
              v133 = 3;
            else
              v133 = v88 - v131;
            if (v132 >= 1)
            {
              v78 = 0uLL;
              a48 = 0u;
              a49 = 0u;
              a46 = 0u;
              a47 = 0u;
              a44 = 0u;
              a45 = 0u;
              a42 = 0u;
              a43 = 0u;
              a40 = 0u;
              a41 = 0u;
              a38 = 0u;
              a39 = 0u;
            }
            v134 = v163 + 8 * v165 + 8 * v87 * a9;
            v135 = (const double *)(v164 + 8 * v87 * v184);
            if (v178)
            {
              if (v131)
                sub_20E842324((float64x2_t *)v183, (const double *)(v164 + 8 * v87 * v184), v134, a9, v131, vars8, v184, v96);
              if (v132 >= 1)
              {
                sub_20E8424A0((float64x2_t *)&v183[8 * v131 * v184+ 8* (v131 & ((int)((_DWORD)v184 << 31) >> 31) & 7)], v135, (uint64_t)&a38, 8, v133, vars8, v184);
                if (vars8 >= 1)
                {
                  v136 = 0;
                  v137 = v87 + v181;
                  if (v87 + v181 >= v86)
                    v137 = v86;
                  v138 = v169 + vars0 * v87 + 8 * v137;
                  v139 = &a38;
                  v140 = 1;
                  do
                  {
                    v141 = 0;
                    do
                    {
                      v78.n128_f64[0] = *((double *)v139 + v141) + *(double *)(v138 + 8 * v141) * *(double *)&v182;
                      *(_QWORD *)(v138 + 8 * v141++) = v78.n128_u64[0];
                    }
                    while (v140 != v141);
                    ++v136;
                    ++v140;
                    v139 += 4;
                    v138 += vars0;
                  }
                  while (v136 != vars8);
                }
              }
            }
            else
            {
              if (v131)
                sub_20E8424A0((float64x2_t *)v183, (const double *)(v164 + 8 * v87 * v184), v134, a9, v131, vars8, v184);
              if (v132 >= 1)
              {
                sub_20E8424A0((float64x2_t *)&v183[8 * v131 * v184+ 8* (v131 & ((int)((_DWORD)v184 << 31) >> 31) & 7)], v135, (uint64_t)&a38, 8, v133, vars8, v184);
                if (vars8 >= 1)
                {
                  v142 = 0;
                  v143 = v87 + v181;
                  if (v87 + v181 >= v86)
                    v143 = v86;
                  v144 = v169 + vars0 * v87 + 8 * v143;
                  v145 = &a38;
                  v146 = 1;
                  do
                  {
                    v147 = 0;
                    do
                    {
                      v78.n128_f64[0] = *(double *)(v144 + 8 * v147) + *((double *)v145 + v147);
                      *(_QWORD *)(v144 + 8 * v147++) = v78.n128_u64[0];
                    }
                    while (v146 != v147);
                    ++v142;
                    ++v146;
                    v145 += 4;
                    v144 += vars0;
                  }
                  while (v142 != vars8);
                }
              }
            }
          }
          v80 = v181 - 64;
          v84 = v167 + 64;
          v79 = v168 + 512;
          v169 += 512;
          v81 = v166;
          v64 = v158;
        }
        while (v166 < v158);
      }
      v75 = v153 + 64;
      v154 -= 64;
      v71 = v152;
      v62 = v150;
    }
    while (v152 < v150);
  }
  if (v64 >= 65)
    free(v183);
}

uint64_t sub_20E83443C(_DWORD *a1, uint64_t a2, int *a3, unsigned int *a4, double *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    dposv_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E857F2C(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8344CC(_DWORD *a1, uint64_t a2, int *a3, unsigned int *a4, float *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    sposv_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E8479B4(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E83455C(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, int *a6)
{
  if (!a1)
  {
LABEL_5:
    dpotrf_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E847FBC(a2, a3, a4, a5, a6);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8345D0(_DWORD *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, int *a5, __CLPK_integer *a6)
{
  if (!a1)
  {
LABEL_5:
    dpotri_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E83CF48(a2, a3, a4, a5, a6);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E834644(_DWORD *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, double *a5, int *a6, char *a7, int *a8, int *a9)
{
  if (!a1)
  {
LABEL_5:
    dpotrs_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E837200(a2, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E8346D4(_DWORD *a1, char *a2, char *a3, __CLPK_integer *a4, __CLPK_doublereal *a5, int *a6, __CLPK_integer *a7)
{
  if (!a1)
  {
LABEL_5:
    dtrtri_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E847AF8(a2, a3, a4, a5, a6, a7);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

uint64_t sub_20E834750(_DWORD *a1, char *a2, char *a3, __CLPK_integer *a4, __CLPK_doublereal *a5, __CLPK_integer *a6, __CLPK_doublereal *a7, __CLPK_doublereal *a8, int *a9, __CLPK_integer *a10)
{
  if (!a1)
  {
LABEL_5:
    dsyev_NEWLAPACK();
    return 0;
  }
  if (*a1 == 1)
  {
    if (a1[1])
      return sub_20E856660(a2, a3, a4, a5, a6, a7, a8, a9, a10);
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
  return 0xFFFFFFFFLL;
}

void sub_20E8347F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float64x2_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  void (*v58)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  double *(*v60)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t vars0;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *(*v89)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v90;
  float64x2_t *v91;

  v23 = MEMORY[0x24BDAC7A8]();
  v71 = v30;
  v72 = v29;
  v31 = v25;
  v70 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v35 = 1;
  else
    v35 = v27;
  v81 = v35;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))sub_20E835F4C;
  v83 = v27;
  if (v23 == 111)
    v37 = v27;
  else
    v37 = 1;
  v67 = v37;
  if (v23 == 111)
    v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))sub_20E835E6C;
  v80 = v36;
  v38 = sub_20E843048;
  if (v23 == 111)
    v38 = sub_20E842D1C;
  v69 = v38;
  v39 = (v25 << 6) + 4108;
  if (a12 == -1)
  {
    v44 = 8 * v39;
    if (v25 < 65)
      v44 = 0;
    v43 = (double)(unint64_t)v44;
    goto LABEL_19;
  }
  v40 = v26;
  v41 = v24;
  v42 = v28;
  if (v25 >= 65 && a12)
  {
    if (8 * v39 > a12)
    {
      v43 = (double)(unint64_t)(8 * v39);
LABEL_19:
      *a11 = v43;
      return;
    }
    goto LABEL_22;
  }
  if (v25 >= 65)
  {
LABEL_22:
    v91 = (float64x2_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float64x2_t *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v66 = a11;
  v91 = (float64x2_t *)&a23;
LABEL_24:
  if (v40 >= 1)
  {
    vars0 = 0;
    v45 = 0;
    v84 = (__n128 *)&v91[2052];
    v90 = v31 - 3;
    if (v31 <= 0)
      v47 = -(-v31 & 3);
    else
      v47 = v31 & 3;
    v86 = v47;
    v78 = v41;
    v75 = a10 + 512;
    v48 = 64;
    v79 = v31;
    v68 = v40;
    do
    {
      v73 = v48;
      if (v40 >= v48)
        v49 = v48;
      else
        v49 = v40;
      if (v45 + 64 <= v40)
        v50 = 64;
      else
        v50 = v40 - v45;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v69)(v70, v50, v31, v72 + 8 * v45 * v83 + 8 * v45, v42);
      sub_20E835C9C(v50, v31, (float64_t *)(v71 + 8 * v45), a9, v84, -1.0, v51, v52);
      v74 = v45 + 64;
      if (v45 + 64 < v41)
      {
        v53 = v75;
        v54 = 32 * (v49 + vars0);
        v82 = v72 + 8 * v45 * v67;
        v56 = v42 != 1.0 && v45 == 0 && v42 != 0.0;
        v57 = v45 + 64;
        v89 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
        v58 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
        do
        {
          v87 = v57 + 64;
          if (v57 + 64 <= v41)
            v59 = 64;
          else
            v59 = v41 - v57;
          v85 = v57;
          if ((v59 & 7) != 0)
            v58 = (void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E8428D0;
          v60 = v89;
          if ((v59 & 7) != 0)
            v60 = sub_20E83B2A0;
          v89 = v60;
          v80(v59, v50, v82 + 8 * v57 * v81, v83, v91);
          v88 = v53;
          v61 = 0;
          if (v31 >= 4)
          {
            v62 = (float64x2_t *)v53;
            v63 = v91 + 2052;
            do
            {
              if (v56)
                v89(v91, v63, v62, a9, v59, v50, v42);
              else
                v58(v91, v63, v62, a9, v59, v50);
              v61 += 4;
              v63 = (float64x2_t *)((char *)v63 + v54);
              v62 += 2 * a9;
            }
            while (v61 < v90);
          }
          v31 = v79;
          if (v86)
          {
            v64 = a10 + 8 * v85 + 8 * v61 * a9;
            v65 = &v84->n128_f64[v61 * v50];
            if (v56)
              sub_20E842324(v91, v65, v64, a9, v59, v86, v50, v42);
            else
              sub_20E8424A0(v91, v65, v64, a9, v59, v86, v50);
          }
          v53 = v88 + 512;
          v57 = v87;
          v41 = v78;
        }
        while (v87 < v78);
      }
      v45 = v74;
      v48 = v73 + 64;
      v75 += 512;
      vars0 -= 64;
      v42 = 1.0;
      v40 = v68;
    }
    while (v74 < v68);
  }
  if (v31 >= 65 && !v66)
    free(v91);
}

void sub_20E834C50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float64x2_t v45;
  _BOOL4 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *(*v54)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v55)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  uint64_t v59;
  const double *v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int v65;
  uint64_t v66;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *(*v77)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v78)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v79;

  v19 = MEMORY[0x24BDAC7A8]();
  v66 = v25;
  v26 = v20;
  v65 = v27;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v29 = 1;
  else
    v29 = v23;
  v70 = v29;
  v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))sub_20E835F4C;
  v72 = v23;
  if (v19 == 111)
    v31 = v23;
  else
    v31 = 1;
  v63 = v31;
  if (v19 == 111)
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))sub_20E835E6C;
  vars8 = v30;
  v32 = sub_20E842EA8;
  if (v19 == 111)
    v32 = sub_20E8431D4;
  v64 = v32;
  v33 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v38 = 8 * v33;
    if (v20 < 65)
      v38 = 0;
    v37 = (double)(unint64_t)v38;
    goto LABEL_19;
  }
  v34 = v22;
  v35 = v21;
  v36 = v24;
  if (v20 >= 65 && a12)
  {
    if (8 * v33 > a12)
    {
      v37 = (double)(unint64_t)(8 * v33);
LABEL_19:
      *a11 = v37;
      return;
    }
    goto LABEL_22;
  }
  if (v20 >= 65)
  {
LABEL_22:
    v79 = (float64x2_t *)a11;
    v61 = a11;
    if (!a11)
      v79 = (float64x2_t *)malloc_type_malloc(8 * v33, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v61 = a11;
  v79 = (float64x2_t *)&a19;
LABEL_24:
  if ((uint64_t)v35 >= 1)
  {
    v73 = (__n128 *)&v79[2052];
    v39 = v26 - 3;
    if (v26 <= 0)
      v40 = -(-v26 & 3);
    else
      v40 = v26 & 3;
    v74 = v40;
    v41 = 1;
    vars0 = v26;
    v62 = v34;
    while (1)
    {
      v42 = v35 >= 0x40 ? v35 - 64 : 0;
      v43 = v35 >= 0x40 ? 64 : v35;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v64)(v65, v43, v26, v34 + 8 * v42 * v72 + 8 * v42, v36);
      sub_20E835C9C(v43, v26, (float64_t *)(v66 + 8 * v42), v70, v73, -1.0, v44, v45);
      if (v35 < 0x41)
        break;
      v71 = v34 + 8 * v42 * v63;
      v46 = v36 != 1.0;
      if (v36 == 0.0)
        v46 = 0;
      v47 = v41 & v46;
      v48 = v42;
      v78 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
      v77 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
      do
      {
        v49 = v48;
        v50 = v48 >= 0x40;
        v51 = v48 - 64;
        if (v50)
          v52 = 64;
        else
          v52 = v49;
        if (!v50)
          v51 = 0;
        v75 = v51;
        v76 = a10 + 8 * v51;
        v53 = v71 + 8 * v51 * v70;
        v54 = v77;
        if ((v52 & 7) != 0)
          v54 = sub_20E8428D0;
        v77 = v54;
        v55 = v78;
        if ((v52 & 7) != 0)
          v55 = sub_20E83B2A0;
        v78 = v55;
        vars8(v52, v43, v53, v72, v79);
        v56 = 0;
        if (v26 >= 4)
        {
          v56 = 0;
          v57 = (float64x2_t *)v76;
          v58 = v79 + 2052;
          do
          {
            if (v47)
              v78(v79, v58, v57, v70, v52, v43, v36);
            else
              v77(v79, v58, v57, v70, v52, v43);
            v56 += 4;
            v58 += 2 * v43;
            v57 += 2 * v70;
          }
          while (v56 < v39);
        }
        if (v74)
        {
          v59 = v76 + 8 * v56 * v70;
          v60 = &v73->n128_f64[v56 * v43];
          if (v47)
            sub_20E842324(v79, v60, v59, v70, v52, v74, v43, v36);
          else
            sub_20E8424A0(v79, v60, v59, v70, v52, v74, v43);
        }
        v48 = v75;
        v26 = vars0;
      }
      while (v75 > 0);
      v41 = 0;
      v36 = 1.0;
      v34 = v62;
      v35 = v42;
    }
  }
  if (v26 >= 65 && !v61)
    free(v79);
}

void sub_20E835060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  unint64_t v12;
  BOOL v13;
  uint64_t i;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  const double *v19;
  const double *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  __int32 v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  __int32 v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  double v71;
  int32x2_t v72;
  double v73;
  float32x2_t v74;
  __int32 *v75;

  v12 = 4 * a5;
  v13 = a2 <= 1;
  for (i = a2 - 1; !v13; i -= 2)
  {
    v15 = (float32x4_t *)a4;
    v16 = (float32x4_t *)(a4 + v12);
    v17 = (float32x4_t *)(a4 + 2 * v12);
    v18 = (float32x4_t *)(a4 + v12 + 2 * v12);
    v19 = a6;
    v20 = (double *)((char *)a6 + 4 * a7);
    v21 = (float32x4_t *)((char *)a8 + 8 * a12);
    v22 = __OFSUB__(a1, 3);
    v23 = a1 - 3;
    if (a1 > 3)
    {
      do
      {
        v24 = (float32x4_t)veorq_s8(a11, a11);
        v25 = v24;
        v26 = v24;
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24;
        v31 = v24;
        v32 = a3 - 3;
        if (a3 > 3)
        {
          v33 = *v15++;
          v34 = v33;
          v35 = *v16++;
          v36 = v35;
          v37 = *v17++;
          v38 = v37;
          v39 = *v18++;
          v40 = v39;
          v41 = *(float32x4_t *)v19;
          v19 += 2;
          v42 = v41;
          v43 = *(float32x4_t *)v20;
          v20 += 2;
          v44 = v43;
          v22 = __OFSUB__(v32, 4);
          v45 = v32 == 4;
          v32 = a3 - 7;
          if (!((a3 - 7 < 0) ^ v22 | v45))
          {
            do
            {
              v24 = vmlaq_f32(v24, v34, v42);
              v25 = vmlaq_f32(v25, v36, v42);
              v26 = vmlaq_f32(v26, v38, v42);
              v27 = vmlaq_f32(v27, v40, v42);
              v46 = *(float32x4_t *)v19;
              v19 += 2;
              v42 = v46;
              v28 = vmlaq_f32(v28, v34, v44);
              v47 = *v15++;
              v34 = v47;
              v29 = vmlaq_f32(v29, v36, v44);
              v48 = *v16++;
              v36 = v48;
              v30 = vmlaq_f32(v30, v38, v44);
              v49 = *v17++;
              v38 = v49;
              v31 = vmlaq_f32(v31, v40, v44);
              v50 = *v18++;
              v40 = v50;
              v51 = *(float32x4_t *)v20;
              v20 += 2;
              v44 = v51;
              v13 = v32 <= 4;
              v32 -= 4;
            }
            while (!v13);
          }
          v24 = vpaddq_f32(vmlaq_f32(v24, v34, v42), vmlaq_f32(v25, v36, v42));
          v25 = vpaddq_f32(vmlaq_f32(v26, v38, v42), vmlaq_f32(v27, v40, v42));
          v26 = vpaddq_f32(vmlaq_f32(v28, v34, v44), vmlaq_f32(v29, v36, v44));
          v27 = vpaddq_f32(vmlaq_f32(v30, v38, v44), vmlaq_f32(v31, v40, v44));
        }
        v13 = v32 <= -2;
        v52 = v32 + 2;
        if (!v13)
        {
          v53 = v15->i64[0];
          v15 = (float32x4_t *)((char *)v15 + 8);
          v54.i64[0] = v53;
          v54.i64[1] = v16->i64[0];
          v16 = (float32x4_t *)((char *)v16 + 8);
          v55 = v17->i64[0];
          v17 = (float32x4_t *)((char *)v17 + 8);
          v56.i64[0] = v55;
          v56.i64[1] = v18->i64[0];
          v18 = (float32x4_t *)((char *)v18 + 8);
          v57 = (float32x4_t)vld1q_dup_f64(v19++);
          v58 = (float32x4_t)vld1q_dup_f64(v20++);
          v24 = vmlaq_f32(v24, v54, v57);
          v25 = vmlaq_f32(v25, v56, v57);
          v26 = vmlaq_f32(v26, v54, v58);
          v27 = vmlaq_f32(v27, v56, v58);
          v52 -= 2;
        }
        v59 = vpaddq_f32(v24, v25);
        v60 = vpaddq_f32(v26, v27);
        if (v52 > -1)
        {
          v61 = v15->i32[0];
          v15 = (float32x4_t *)((char *)v15 + 4);
          v62.i32[0] = v61;
          v62.i32[1] = v16->i32[0];
          v62.i32[2] = v17->i32[0];
          v62.i32[3] = v18->i32[0];
          v59 = vmlaq_n_f32(v59, v62, *(float *)v19);
          v60 = vmlaq_n_f32(v60, v62, *(float *)v20);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v59, a9), *a8, a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v60, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)&v15[v12 / 4] - 4 * a3);
        v16 = (float32x4_t *)((char *)v15 + v12);
        v17 = (float32x4_t *)((char *)v15 + 2 * v12);
        v18 = (float32x4_t *)((char *)v15 + 2 * v12 + v12);
        v22 = __OFSUB__(v23, 4);
        v13 = v23 <= 4;
        v23 -= 4;
      }
      while (!v13);
    }
    v63 = a1 & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_18;
        v65 = v15->f32[0];
        v15 = (float32x4_t *)((char *)v15 + 4);
        v66 = v65;
        v67 = *(_DWORD *)v19;
        v19 = (const double *)((char *)v19 + 4);
        v68.i32[0] = v67;
        v68.i32[1] = *(_DWORD *)v20;
        v20 = (const double *)((char *)v20 + 4);
        *(float32x2_t *)a11.i8 = vmla_n_f32(*(float32x2_t *)a11.i8, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_18:
          do
          {
            v69 = *(float32x2_t *)v15->f32;
            v15 = (float32x4_t *)((char *)v15 + 8);
            v70 = v69;
            v71 = *v19++;
            v72 = *(int32x2_t *)&v71;
            v73 = *v20++;
            *(float32x2_t *)a11.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a11.i8, (float32x2_t)vtrn1_s32(v72, *(int32x2_t *)&v73), v70.f32[0]), (float32x2_t)vtrn2_s32(v72, *(int32x2_t *)&v73), v70, 1);
            v13 = v64 <= 2;
            v64 -= 2;
          }
          while (!v13);
        }
        v74.i32[0] = a8->i32[0];
        v74.i32[1] = a8->i32[a12];
        *(float32x2_t *)a11.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a11.i8, a9), v74, a10);
        v75 = &a8->i32[a12];
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v75 = a11.i32[1];
        v19 = a6;
        v20 = (double *)((char *)a6 + 4 * a7);
        v15 = (float32x4_t *)((char *)v15 + v12 + -4 * a3);
        v13 = v63-- <= 1;
      }
      while (!v13);
    }
    a6 += a7;
    a8 = v21;
    v13 = i <= 2;
  }
  if (i > -1)
    sub_20E83EDF4(a3, a1, a4, v12 >> 2, a6, 1, a8->f32, 1, a9, a10);
}

uint64_t sub_20E8352D0()
{
  size_t v1;
  uint64_t v2;

  v1 = 8;
  v2 = 0;
  if (!sysctlbyname("hw.cpufamily", &v2, &v1, 0, 0))
  {
    if (v2 > 1176831185)
    {
      if (v2 <= 2465937351)
      {
        if (v2 == 1176831186)
          return 8;
        if (v2 == 1741614739)
          return 5;
      }
      else
      {
        switch(v2)
        {
          case 2465937352:
            return 4;
          case 3660830781:
            return 10;
          case 3894312694:
            return 6;
        }
      }
    }
    else if (v2 <= 506291072)
    {
      if (v2 == 131287967)
        return 7;
      if (v2 == 458787763)
        return 9;
    }
    else
    {
      switch(v2)
      {
        case 506291073:
          return 1;
        case 747742334:
          return 3;
        case 933271106:
          return 2;
      }
    }
  }
  return 0;
}

uint64_t sub_20E835438()
{
  int v0;
  unsigned int v1;
  size_t v3;
  uint64_t v4;

  v3 = 8;
  v4 = 0;
  v0 = sysctlbyname("hw.cpusubfamily", &v4, &v3, 0, 0);
  if ((unint64_t)(v4 - 1) <= 4)
    v1 = v4;
  else
    v1 = 0;
  if (v0)
    return 0;
  else
    return v1;
}

unint64_t sub_20E83548C@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t result;
  size_t v17;
  uint64_t v18;

  v2 = sub_20E8352D0();
  *(_DWORD *)(a1 + 4) = v2;
  v3 = sub_20E835438();
  *(_DWORD *)(a1 + 8) = v3;
  v17 = 8;
  v18 = 0;
  v4 = sysctlbyname("hw.perflevel0.l2cachesize", &v18, &v17, 0, 0);
  v5 = v18;
  if (v4)
    v5 = 0x800000;
  *(_QWORD *)(a1 + 40) = v5;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel0.physicalcpu_max", &v18, &v17, 0, 0))
    v6 = 2;
  else
    v6 = v18;
  *(_DWORD *)(a1 + 12) = v6;
  v17 = 8;
  v18 = 0;
  v7 = sysctlbyname("hw.perflevel0.cpusperl2", &v18, &v17, 0, 0);
  v8 = v18;
  if (v7)
    v8 = 2;
  *(_DWORD *)(a1 + 28) = v8;
  *(_DWORD *)(a1 + 20) = v6 / v8;
  v17 = 8;
  v18 = 0;
  v9 = sysctlbyname("hw.perflevel1.l2cachesize", &v18, &v17, 0, 0);
  v10 = v18;
  if (v9)
    v10 = 0x400000;
  *(_QWORD *)(a1 + 48) = v10;
  v17 = 8;
  v18 = 0;
  if (sysctlbyname("hw.perflevel1.physicalcpu_max", &v18, &v17, 0, 0))
    v11 = 4;
  else
    v11 = v18;
  *(_DWORD *)(a1 + 16) = v11;
  v17 = 8;
  v18 = 0;
  v12 = sysctlbyname("hw.perflevel1.cpusperl2", &v18, &v17, 0, 0);
  v13 = v18;
  if (v12)
    v13 = 4;
  *(_DWORD *)(a1 + 32) = v13;
  *(_DWORD *)(a1 + 24) = v11 / v13;
  switch(v2)
  {
    case 8:
      v15 = 1;
      break;
    case 10:
      if ((v3 & 6) == 4)
        v15 = 8;
      else
        v15 = 3;
      break;
    case 9:
      v14 = v3 - 2;
      if (v14 >= 4)
        v15 = 2;
      else
        v15 = dword_2102D6C00[v14];
      break;
    default:
      v15 = 0;
      break;
  }
  *(_DWORD *)a1 = v15;
  result = _get_cpu_capabilities();
  *(_DWORD *)(a1 + 56) = (result >> 59) & 2;
  return result;
}

#error "20E835BC8: call analysis failed (funcsize=366)"

uint64_t sub_20E835C9C(uint64_t result, uint64_t a2, float64_t *a3, uint64_t a4, __n128 *a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float64_t *v10;
  float64_t *v11;
  float64_t *v12;
  float64_t *v13;
  uint64_t v14;
  float64_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  BOOL v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t *v26;
  float64x2_t *v27;
  uint64_t v28;
  float64x2_t v29;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = &v10[v8];
        v12 = &v10[2 * a4];
        v13 = &v10[3 * a4];
        v14 = result - 1;
        v15 = v10;
        if (result - 1 > 0)
        {
          do
          {
            v16.f64[0] = *v15;
            v17.f64[0] = v15[1];
            v15 += 2;
            v16.f64[1] = *v11;
            v17.f64[1] = v11[1];
            v11 += 2;
            v18.f64[0] = *v12;
            v19.f64[0] = v12[1];
            v12 += 2;
            v18.f64[1] = *v13;
            v19.f64[1] = v13[1];
            v13 += 2;
            a8 = vmulq_n_f64(v16, a6);
            *a5 = (__n128)a8;
            v20 = (float64x2_t *)&a5[1];
            *v20++ = vmulq_n_f64(v18, a6);
            *v20++ = vmulq_n_f64(v17, a6);
            *v20 = vmulq_n_f64(v19, a6);
            a5 = (__n128 *)&v20[1];
            v21 = v14 <= 2;
            v14 -= 2;
          }
          while (!v21);
        }
        if (v14 >= 0)
        {
          v22.f64[0] = *v15;
          v22.f64[1] = *v11;
          v23.f64[0] = *v12;
          v23.f64[1] = *v13;
          a8 = vmulq_n_f64(v22, a6);
          *a5 = (__n128)a8;
          v24 = (float64x2_t *)&a5[1];
          *v24 = vmulq_n_f64(v23, a6);
          a5 = (__n128 *)&v24[1];
        }
        v9 += 4;
        v10 += 4 * a4;
      }
      while (v9 < a2 - 3);
    }
    v25 = a2 - v9;
    if (a2 > v9)
    {
      v26 = (float64x2_t *)&a3[v9 * a4];
      do
      {
        v27 = v26;
        v28 = result - 1;
        if (result > 1)
        {
          do
          {
            v29 = *v27++;
            a8 = vmulq_n_f64(v29, a6);
            *a5++ = (__n128)a8;
            v21 = v28 <= 2;
            v28 -= 2;
          }
          while (!v21);
        }
        if (v28 >= 0)
        {
          a8.f64[0] = v27->f64[0];
          a8 = vmulq_n_f64(a8, a6);
          a5->n128_u64[0] = *(_QWORD *)&a8.f64[0];
          ++a5;
        }
        v26 = (float64x2_t *)((char *)v26 + v8 * 8);
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_20E835DBC(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t *a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64_t *f64;
  float64_t *v17;
  uint64_t v18;
  float64_t *v19;
  float64x2_t v20;
  BOOL v21;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v14 = v11[1];
          v11 = (float64x2_t *)((char *)v11 + v8 * 8);
          a8 = vmulq_n_f64(v13, a6);
          *a5 = a8;
          a5[1] = vmulq_n_f64(v14, a6);
          a5 += 2;
          --v12;
        }
        while (v12);
        v9 += 4;
        v10 += 2;
      }
      while (v9 < a2 - 3);
    }
    v15 = a2 - v9;
    if (a2 > v9)
    {
      f64 = a3[(unint64_t)v9 / 2].f64;
      do
      {
        v17 = f64;
        v18 = result - 1;
        if (result > 1)
        {
          do
          {
            v20.f64[0] = *v17;
            v19 = &v17[v8];
            v20.f64[1] = *v19;
            v17 = &v19[v8];
            a8 = vmulq_n_f64(v20, a6);
            *a5++ = a8;
            v21 = v18 <= 2;
            v18 -= 2;
          }
          while (!v21);
        }
        if (!v18)
        {
          a8.f64[0] = *v17;
          a8 = vmulq_n_f64(a8, a6);
          a5->f64[0] = a8.f64[0];
          ++a5;
        }
        ++f64;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t sub_20E835E6C(uint64_t result, uint64_t a2, __int128 *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;

  if ((result & 7) == 0)
    return sub_20E8362B0(result, a2, a3, a4, a5);
  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a3 + 2;
    do
    {
      v7 = v6;
      v8 = a2;
      if (a2 >= 1)
      {
        do
        {
          v9 = *(v7 - 1);
          v10 = *v7;
          v11 = v7[1];
          *a5 = *(v7 - 2);
          a5[1] = v9;
          a5[2] = v10;
          a5[3] = v11;
          a5 += 4;
          v7 = (__int128 *)((char *)v7 + 8 * a4);
          --v8;
        }
        while (v8);
      }
      v5 += 8;
      v6 += 4;
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    v12 = (_QWORD *)a3 + v5;
    do
    {
      if (a2 < 2)
      {
        v14 = (_QWORD *)a3 + v5;
        if ((a2 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        v13 = 0;
        v14 = v12;
        do
        {
          *(_QWORD *)&v15 = *v14;
          *((_QWORD *)&v15 + 1) = v14[a4];
          *a5++ = v15;
          v13 += 2;
          v14 += 2 * a4;
        }
        while (v13 < a2 - 1);
        if ((a2 & 1) == 0)
          goto LABEL_17;
      }
      *(_QWORD *)a5++ = *v14;
LABEL_17:
      ++v5;
      ++v12;
    }
    while (v5 != result);
  }
  return result;
}

uint64_t sub_20E835F4C(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;

  if ((result & 7) == 0)
    return sub_20E82E720(result, a2, a3, a4, a5);
  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = &a3[7 * a4];
    v7 = &a3[6 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = &a3[5 * a4];
    v11 = &a3[4 * a4];
    v12 = &a3[3 * a4];
    v13 = &a3[2 * a4];
    v14 = &a3[a4];
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          *(_QWORD *)&v16 = *v9;
          *(_QWORD *)&v17 = v9[1];
          v9 += 2;
          *((_QWORD *)&v16 + 1) = *v14;
          *((_QWORD *)&v17 + 1) = v14[1];
          v14 += 2;
          *(_QWORD *)&v18 = *v13;
          *(_QWORD *)&v19 = v13[1];
          v13 += 2;
          *((_QWORD *)&v18 + 1) = *v12;
          *((_QWORD *)&v19 + 1) = v12[1];
          v12 += 2;
          *(_QWORD *)&v20 = *v11;
          *(_QWORD *)&v21 = v11[1];
          v11 += 2;
          *((_QWORD *)&v20 + 1) = *v10;
          *((_QWORD *)&v21 + 1) = v10[1];
          v10 += 2;
          *(_QWORD *)&v22 = *v7;
          *(_QWORD *)&v23 = v7[1];
          v7 += 2;
          *((_QWORD *)&v22 + 1) = *v6;
          *((_QWORD *)&v23 + 1) = v6[1];
          v6 += 2;
          *a5 = v16;
          a5[1] = v18;
          v24 = a5 + 2;
          *v24 = v20;
          v24[1] = v22;
          v24 += 2;
          *v24 = v17;
          v24[1] = v19;
          v24 += 2;
          *v24 = v21;
          v24[1] = v23;
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        *(_QWORD *)&v26 = *v9++;
        *((_QWORD *)&v26 + 1) = *v14++;
        *(_QWORD *)&v27 = *v13++;
        *((_QWORD *)&v27 + 1) = *v12++;
        *(_QWORD *)&v28 = *v11++;
        *((_QWORD *)&v28 + 1) = *v10++;
        *(_QWORD *)&v29 = *v7++;
        *((_QWORD *)&v29 + 1) = *v6++;
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v28;
        a5[3] = v29;
        a5 += 4;
      }
      v9 += v8;
      v14 += v8;
      v13 += v8;
      v12 += v8;
      v11 += v8;
      v10 += v8;
      v7 += v8;
      v5 += 8;
      v6 += v8;
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    do
    {
      v30 = (__int128 *)&a3[v5 * a4];
      if (a2 >= 2)
      {
        v31 = 0;
        do
        {
          v32 = *v30++;
          *a5++ = v32;
          v31 += 2;
        }
        while (v31 < a2 - 1);
      }
      if ((a2 & 1) != 0)
        *(_QWORD *)a5++ = *(_QWORD *)v30;
      ++v5;
    }
    while (v5 != result);
  }
  return result;
}

uint64_t sub_20E8360B0(uint64_t a1, unsigned int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  *a8 = 0;
  v15 = lsame_();
  if (!v15 && !lsame_())
  {
    v18 = -1;
    goto LABEL_15;
  }
  v16 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v18 = -2;
    goto LABEL_15;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v18 = -3;
    goto LABEL_15;
  }
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = *a2;
  if (*a5 < v17)
  {
    v18 = -5;
LABEL_15:
    *a8 = v18;
LABEL_16:
    xerbla_();
    return 0;
  }
  if (*a7 < v17)
  {
    v18 = -7;
    goto LABEL_15;
  }
  if (*a8)
    goto LABEL_16;
  if (v16 && *a3)
  {
    if (v15)
    {
      sub_20E839318("Left", "Upper", "Transpose", "Non-unit", a2, a3, flt_254A4A458, a4, a5, a6, a7);
      sub_20E839318("Left", "Upper", "No transpose", "Non-unit", a2, a3, flt_254A4A458, a4, a5, a6, a7);
    }
    else
    {
      sub_20E839318("Left", "Lower", "No transpose", "Non-unit", a2, a3, flt_254A4A458, a4, a5, a6, a7);
      sub_20E839318("Left", "Lower", "Transpose", "Non-unit", a2, a3, flt_254A4A458, a4, a5, a6, a7);
    }
  }
  return 0;
}

uint64_t sub_20E8362B0(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v18;

  v5 = a2;
  _X3 = 8 * a4;
  v7 = _X2 + 4;
  do
  {
    do
    {
      v9 = *_X2;
      v10 = _X2[1];
      v8 = _X2 + 2;
      v11 = *v8;
      v12 = v8[1];
      _X2 = (__int128 *)((char *)v8 + _X3 - 32);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v9;
      a5[1] = v10;
      v18 = a5 + 2;
      *v18 = v11;
      v18[1] = v12;
      a5 = v18 + 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 4;
  }
  while (result);
  return result;
}

uint64_t sub_20E8362F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v10;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E82D5EC;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E82D0F8;
  v29 = v8;
  if (a2 >= 1)
  {
    v10 = a4;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v25 = (_DWORD)a5 << 9;
    v26 = a5 << 6;
    v18 = 64;
    v27 = a2;
    do
    {
      if (a2 >= v18)
        v19 = v18;
      else
        v19 = a2;
      v20 = v19 + v15;
      if (v16)
      {
        v21 = a7;
        v30 = v19 + v15;
        sub_20E82B78C(111, 111, v17, a3, v20, v10 + v13, a5, a6 + v16, a7, a6, a7);
        v20 = v30;
        v22 = a6;
        v10 = a4;
        v23 = v14;
      }
      else
      {
        v23 = 0;
        v21 = a7;
        v22 = a6;
      }
      v17 += 64;
      result = v29(v20, a3, v10 + v16 + 8 * v23, a5, v22 + v16, v21, a8);
      v16 += 512;
      v18 += 64;
      v15 -= 64;
      a2 = v27;
      v14 += v26;
      v13 += v25;
      a7 = v21;
    }
    while (v17 < v27);
  }
  return result;
}

uint64_t sub_20E836468(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E82DB40;
  else
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E82E0F4;
  if (a2 >= 1)
  {
    v16 = a2;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = a2 - (v18 + v17);
      v20 = v17 * a5;
      if (v19 >= 1)
        sub_20E82B78C(112, 111, v19, a3, v18, a4 + 8 * v20 + 8 * v17 + 8 * v18 * a5, a5, a6 + 8 * v17, a7, a6 + 8 * v17 + 8 * v18, a7);
      result = v8(v18, a3, a4 + 8 * v20 + 8 * v17, a5, a6 + 8 * v17, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t sub_20E836588(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((_DWORD)result == 132)
    v8 = sub_20E858070;
  else
    v8 = sub_20E858590;
  if (a2 >= 1)
  {
    v16 = a2;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = a2 - (v18 + v17);
      v20 = v17 * a5;
      if (v19 >= 1)
        sub_20E82B78C(111, 111, v19, a3, v18, a4 + 8 * v20 + 8 * v17 + 8 * v18, a5, a6 + 8 * v17, a7, a6 + 8 * v17 + 8 * v18, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v8)(v18, a3, a4 + 8 * v20 + 8 * v17, a5, a6 + 8 * v17, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t sub_20E8366A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);

  v20 = a4;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E859094;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E858B50;
  v23 = v8;
  if (a2 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v21 = (a5 << 9) + 512;
    v22 = a2;
    v16 = 64;
    v17 = a4;
    do
    {
      if (a2 >= v16)
        v18 = v16;
      else
        v18 = a2;
      v19 = v18 + v13;
      if (v15)
        sub_20E82B78C(112, 111, v15, a3, v19, v20 + v14, a5, a6 + v14, a7, a6, a7);
      v15 += 64;
      result = v23(v19, a3, v17, a5, a6 + v14, a7, a8);
      v14 += 512;
      a2 = v22;
      v17 += v21;
      v16 += 64;
      v13 -= 64;
    }
    while (v15 < v22);
  }
  return result;
}

uint64_t sub_20E8367DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  uint64_t v32;

  v8 = sub_20E84B1CC;
  if ((_DWORD)result == 132)
    v8 = sub_20E84B694;
  v30 = v8;
  if (a3 >= 1)
  {
    v11 = a4;
    v13 = a3;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v27 = a7 << 6;
    v28 = (a5 << 9) + 512;
    v26 = (_DWORD)a7 << 9;
    v17 = 64;
    v18 = a6;
    v19 = a4;
    do
    {
      if (v13 >= v17)
        v20 = v17;
      else
        v20 = v13;
      v21 = v20 + v15;
      if (v16)
      {
        v32 = v20 + v15;
        sub_20E82B78C(111, 111, a2, v16, v21, v18, a7, v11, a5, a6, a7);
        v22 = a2;
        v21 = v32;
        v23 = a6;
        v13 = a3;
        v24 = v14;
      }
      else
      {
        v24 = 0;
        v23 = a6;
        v22 = a2;
      }
      v16 += 64;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v30)(v22, v21, v19, a5, v23 + 8 * v24, a7, a8);
      v19 += v28;
      v17 += 64;
      v15 -= 64;
      v11 += 512;
      v14 += v27;
      v18 += v26;
    }
    while (v16 < v13);
  }
  return result;
}

uint64_t sub_20E83696C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);

  v8 = sub_20E84BAC0;
  if ((_DWORD)result == 132)
    v8 = sub_20E84BF3C;
  v20 = v8;
  if (a3 >= 1)
  {
    v16 = a3;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = v17 * a7;
      if (a3 != v17 + v18)
        sub_20E82B78C(111, 112, a2, a3 - (v17 + v18), v18, a6 + 8 * v19, a7, a4 + 8 * v17 + 8 * v18 + 8 * v17 * a5, a5, a6 + 8 * (v17 + v18) * a7, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v20)(a2, v18, a4 + 8 * v17 * a5 + 8 * v17, a5, a6 + 8 * v19, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t sub_20E836A9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((_DWORD)result == 132)
    v8 = sub_20E832CA0;
  else
    v8 = sub_20E832794;
  if (a3 >= 1)
  {
    v16 = a3;
    do
    {
      if (v16 >= 0x40)
        v17 = v16 - 64;
      else
        v17 = 0;
      if (v16 >= 0x40)
        v18 = 64;
      else
        v18 = v16;
      v19 = v17 * a7;
      if (a3 != v17 + v18)
        sub_20E82B78C(111, 111, a2, a3 - (v17 + v18), v18, a6 + 8 * v19, a7, a4 + 8 * v17 + 8 * (v17 + v18) * a5, a5, a6 + 8 * (v17 + v18) * a7, a7);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v8)(a2, v18, a4 + 8 * v17 * a5 + 8 * v17, a5, a6 + 8 * v19, a7, a8);
      v16 = v17;
    }
    while (v17 > 0);
  }
  return result;
}

uint64_t sub_20E836BBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  void (*v8)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v30)(uint64_t, uint64_t, const double *, uint64_t, float64x2_t *, uint64_t, double);

  v8 = sub_20E833124;
  if ((_DWORD)result == 132)
    v8 = sub_20E8335A8;
  v30 = v8;
  if (a3 >= 1)
  {
    v9 = a4;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v27 = (_DWORD)a5 << 9;
    v28 = a5 << 6;
    v25 = (_DWORD)a7 << 9;
    v26 = a7 << 6;
    v15 = 64;
    v16 = a6;
    v17 = a4;
    v24 = a7;
    do
    {
      v18 = a3;
      if (a3 >= v15)
        v18 = v15;
      v19 = v18 + v13;
      if (v14)
      {
        v20 = a6;
        sub_20E82B78C(111, 112, a2, v14, v19, v16, a7, v9, a5, a6, a7);
        v21 = a2;
        v22 = v11;
        v23 = v12;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        v20 = a6;
        v21 = a2;
      }
      v14 += 64;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v30)(v21, v19, v17 + 8 * v23, a5, v20 + 8 * v22, v24, a8);
      v17 += 512;
      v15 += 64;
      v13 -= 64;
      v12 += v28;
      v9 += v27;
      v11 += v26;
      v16 += v25;
      a7 = v24;
    }
    while (v14 < a3);
  }
  return result;
}

void sub_20E836D60(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N, float a8)
{
  int v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  if (a5 >= 1)
  {
    v9 = __N;
    v10 = a5;
    v14 = __N & 3;
    if (__N <= 0)
      v14 = -(-__N & 3);
    v15 = __N - v14 + 4;
    if ((__N & 3) == 0)
      v15 = __N;
    v16 = 4 * v15;
    do
    {
      v17 = *a3;
      *a3++ = cblas_sdot(v9, __X, 1, __Y, 1) + (float)(a8 * v17);
      __X = (const float *)((char *)__X + v16);
      --v10;
    }
    while (v10);
  }
}

float sub_20E836E04(const float *__X, const float *__Y, float *a3, int a4, uint64_t a5, int a6, uint64_t __N)
{
  int v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  if (a5 >= 1)
  {
    v7 = __N;
    v8 = a5;
    v12 = __N & 3;
    if (__N <= 0)
      v12 = -(-__N & 3);
    v13 = __N - v12 + 4;
    if ((__N & 3) == 0)
      v13 = __N;
    v14 = 4 * v13;
    do
    {
      result = cblas_sdot(v7, __X, 1, __Y, 1) + *a3;
      *a3++ = result;
      __X = (const float *)((char *)__X + v14);
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_20E836E9C(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, float a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;

  if (__N >= 1 && a6 >= 1)
  {
    v15 = 0;
    v16 = a5 - 7;
    if (a5 <= 0)
      v17 = -(-a5 & 7);
    else
      v17 = a5 & 7;
    v18 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = (float32x4_t *)(a3 + 4 * v15 * a4);
      if (a5 < 8)
      {
        v21 = a1;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        v20 = 0;
        v21 = a1;
        do
        {
          v22 = __Y;
          v23 = __N;
          v24 = vmulq_n_f32(*v19, a8);
          v25 = vmulq_n_f32(v19[1], a8);
          do
          {
            v26 = *v22++;
            v27 = *v21;
            v28 = v21[1];
            v21 += 2;
            v24 = vmlaq_n_f32(v24, v27, v26);
            v25 = vmlaq_n_f32(v25, v28, v26);
            --v23;
          }
          while (v23);
          *v19 = v24;
          v19[1] = v25;
          v19 += 2;
          v20 += 8;
        }
        while (v20 < v16);
        if (!v17)
          goto LABEL_14;
      }
      sub_20E836D60(v21->f32, __Y, v19->f32, a4, v17, a6, __N, a8);
LABEL_14:
      __Y += v18;
      ++v15;
    }
    while (v15 != a6);
  }
}

void sub_20E836FCC(float32x4_t *a1, const float *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  const float *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  if (__N >= 1 && a6 >= 1)
  {
    v13 = 0;
    v14 = a5 - 7;
    if (a5 <= 0)
      v15 = -(-a5 & 7);
    else
      v15 = a5 & 7;
    v16 = (__N + 3) & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = (float32x4_t *)(a3 + 4 * v13 * a4);
      if (a5 < 8)
      {
        v19 = a1;
        if (!v15)
          goto LABEL_14;
      }
      else
      {
        v18 = 0;
        v19 = a1;
        do
        {
          v20 = __Y;
          v21 = __N;
          v22 = *v17;
          v23 = v17[1];
          do
          {
            v24 = *v20++;
            v25 = *v19;
            v26 = v19[1];
            v19 += 2;
            v22 = vmlaq_n_f32(v22, v25, v24);
            v23 = vmlaq_n_f32(v23, v26, v24);
            --v21;
          }
          while (v21);
          *v17 = v22;
          v17[1] = v23;
          v17 += 2;
          v18 += 8;
        }
        while (v18 < v14);
        if (!v15)
          goto LABEL_14;
      }
      sub_20E836E04(v19->f32, __Y, v17->f32, a4, v15, a6, __N);
LABEL_14:
      __Y += v16;
      ++v13;
    }
    while (v13 != a6);
  }
}

float *sub_20E8370DC(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  __int32 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  __int32 *v17;
  __int32 *v18;

  if (a5 >= 1)
  {
    v7 = a4;
    if (a6 <= 0)
      v8 = -(-a6 & 3);
    else
      v8 = a6 & 3;
    v9 = 4 - v8;
    if (!v8)
      v9 = 0;
    do
    {
      v10 = a2;
      v11 = a6;
      v12.i32[0] = *a3;
      v13 = &a3[v7 + v7];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v13;
      v12.i32[3] = v13[a4];
      v14 = vmulq_n_f32(v12, a7);
      do
      {
        v15 = *v10++;
        v16 = *result++;
        v14 = vmlaq_n_f32(v14, v15, v16);
        --v11;
      }
      while (v11);
      v17 = &a3[v7];
      *a3++ = v14.i32[0];
      *v17 = v14.i32[1];
      v18 = &v17[v7];
      *v18 = v14.i32[2];
      v18[a4] = v14.i32[3];
      result += v9;
      --a5;
    }
    while (a5);
  }
  return result;
}

float *sub_20E837170(float *result, float32x4_t *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  __int32 *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  __int32 *v15;
  __int32 *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    if (a6 <= 0)
      v7 = -(-a6 & 3);
    else
      v7 = a6 & 3;
    v8 = 4 - v7;
    if (!v7)
      v8 = 0;
    do
    {
      v9 = a2;
      v10 = a6;
      v12.i32[0] = *a3;
      v11 = &a3[v6 + v6];
      v12.i32[1] = a3[a4];
      v12.i32[2] = *v11;
      v12.i32[3] = v11[a4];
      do
      {
        v13 = *v9++;
        v14 = *result++;
        v12 = vmlaq_n_f32(v12, v13, v14);
        --v10;
      }
      while (v10);
      v15 = &a3[v6];
      *a3++ = v12.i32[0];
      *v15 = v12.i32[1];
      v16 = &v15[v6];
      *v16 = v12.i32[2];
      v16[a4] = v12.i32[3];
      result += v8;
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t sub_20E837200(uint64_t a1, unsigned int *a2, unsigned int *a3, double *a4, int *a5, char *a6, int *a7, int *a8)
{
  int v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  unsigned int v24;
  int v25;
  int v26;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;

  *a8 = 0;
  v15 = lsame_();
  if (!v15 && !lsame_())
  {
    v26 = -1;
    goto LABEL_15;
  }
  v24 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v26 = -2;
    goto LABEL_15;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v26 = -3;
    goto LABEL_15;
  }
  if (v24 <= 1)
    v25 = 1;
  else
    v25 = *a2;
  if (*a5 < v25)
  {
    v26 = -5;
LABEL_15:
    *a8 = v26;
LABEL_16:
    xerbla_();
    return 0;
  }
  if (*a7 < v25)
  {
    v26 = -7;
    goto LABEL_15;
  }
  if (*a8)
    goto LABEL_16;
  if (v24 && *a3)
  {
    if (v15)
    {
      sub_20E83986C("Left", "Upper", "Transpose", "Non-unit", a2, a3, &dbl_254A4A460, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      sub_20E83986C("Left", "Upper", "No transpose", "Non-unit", a2, a3, &dbl_254A4A460, a4, v28, v29, v30, v31, v32, v33, v34, v35, a5, a6, a7);
    }
    else
    {
      sub_20E83986C("Left", "Lower", "No transpose", "Non-unit", a2, a3, &dbl_254A4A460, a4, v16, v17, v18, v19, v20, v21, v22, v23, a5, a6, a7);
      sub_20E83986C("Left", "Lower", "Transpose", "Non-unit", a2, a3, &dbl_254A4A460, a4, v36, v37, v38, v39, v40, v41, v42, v43, a5, a6, a7);
    }
  }
  return 0;
}

#error "20E8376F4: call analysis failed (funcsize=189)"

void sub_20E83771C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x2_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12, char *a13, uint64_t a14)
{
  float32x4_t *v18;
  uint64_t v25;
  int v26;
  double v27;
  int v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;

  if (!a3 || !a4)
    return;
  v18 = (float32x4_t *)a13;
  if (a5 && a9 != 0.0)
  {
    v25 = a12;
    if (a5 == 1)
    {
      if (a10 == 0.0)
      {
        v26 = a12;
        sub_20E85644C(a3, a4, a13, a14);
      }
      else
      {
        if (a10 == 1.0)
        {
LABEL_31:
          if ((_DWORD)a1 == 114 || (_DWORD)a1 == 111)
            v31 = 1;
          else
            v31 = a7;
          if (a2 != 114 && a2 != 111)
            LODWORD(v25) = 1;
          cblas_sger(CblasColMajor, a3, a4, a9, a6->f32, v31, (const float *)a8, v25, (float *)a13, a14);
          return;
        }
        v26 = a12;
        sub_20E85649C(a3, a4, (float *)a13, a14, a10);
      }
      LODWORD(v25) = v26;
      goto LABEL_31;
    }
    if (a10 == 0.0)
    {
      v33 = (uint64_t)a13;
      sub_20E85644C(a3, a4, a13, a14);
      v25 = a12;
      v18 = (float32x4_t *)a13;
    }
    *(double *)a11.i64 = fmax((double)a3 / (double)a4, (double)a4 / (double)a3);
    v27 = (double)a3 * (double)a4 * (double)a5;
    if (*(double *)a11.i64 <= 4.0)
    {
      if ((v27 < 4096.0 || a5 <= 31) && v27 < 262144.0)
        goto LABEL_14;
    }
    else if (v27 < 262144.0)
    {
LABEL_14:
      if (a2 == 111)
      {
        if ((_DWORD)a1 == 111)
          sub_20E83F040(a3, a4, a5, a6, a7, a8, v25, v18, a9, a10, a11, a14);
        else
          sub_20E835060(a3, a4, a5, (uint64_t)a6, a7, (double *)a8, v25, v18, a9, a10, a11, a14);
      }
      else if ((_DWORD)a1 == 111)
      {
        sub_20E847670(a3, a4, a5, a6, a7, (float32x4_t *)a8, v25, v18, a9, a10, a11, a14);
      }
      else
      {
        sub_20E83B410(a3, a4, a5, a6->f32, a7, a8, v25, v18, a9, a10, a11, a14);
      }
      return;
    }
    sub_20E8439D0(a1, a2, a3, a4, a5, (int)a6, a7, (int)a8, v25, (uint64_t)v18, a14, 0, 0, v33, v34, v35, v36, v37, v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      SWORD2(v43),
      SHIWORD(v43),
      v44);
    return;
  }
  if (a10 == 0.0)
  {
    sub_20E85644C(a3, a4, a13, a14);
  }
  else if (a10 != 1.0)
  {
    sub_20E85649C(a3, a4, (float *)a13, a14, a10);
  }
}

#error "20E83801C: call analysis failed (funcsize=366)"

void sub_20E8380F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, float64x2_t *a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v32)(uint64_t, uint64_t, unint64_t, uint64_t, char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  double *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t vars8;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, unint64_t, uint64_t, char *);
  unint64_t v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  float64_t *v78;
  float64x2_t *v79;

  v19 = MEMORY[0x24BDAC7A8]();
  v61 = v26;
  v62 = v27;
  v28 = v20;
  v60 = v29;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  v31 = sub_20E8366A4;
  if (v19 == 111)
    v31 = sub_20E8362F4;
  v59 = v31;
  v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, char *))sub_20E835F4C;
  if (v19 == 111)
    v32 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, char *))sub_20E835E6C;
  v71 = v32;
  if (v19 == 111)
    v33 = v22;
  else
    v33 = 1;
  v56 = v33;
  if (v19 == 111)
    v34 = 1;
  else
    v34 = v22;
  v70 = v34;
  v35 = (v20 << 6) + 4108;
  if (a13 == -1)
  {
    v40 = 8 * v35;
    if (v20 < 65)
      v40 = 0;
    v39 = (double)(unint64_t)v40;
    goto LABEL_19;
  }
  v36 = v22;
  v37 = v21;
  v38 = v23;
  if (v20 >= 65 && a13)
  {
    if (8 * v35 > a13)
    {
      v39 = (double)(unint64_t)(8 * v35);
LABEL_19:
      *a12 = v39;
      return;
    }
    goto LABEL_22;
  }
  if (v20 >= 65)
  {
LABEL_22:
    v41 = (char *)a12;
    v55 = a12;
    if (!a12)
      v41 = (char *)malloc_type_malloc(8 * v35, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v55 = a12;
  v41 = &a19;
LABEL_24:
  if (v37 >= 1)
  {
    v42 = 0;
    v43 = 0;
    v58 = v37;
    v74 = (__n128 *)(v41 + 32832);
    v44 = v28 - 3;
    if (v28 <= 0)
      v45 = -(-v28 & 3);
    else
      v45 = v28 & 3;
    vars8 = v45;
    v68 = v36;
    v46 = 64;
    v69 = v28;
    do
    {
      v64 = v46;
      v65 = v42;
      if (v37 < v46)
        v46 = v37;
      v63 = v43 + 64;
      if ((uint64_t)(v43 + 64) <= v37)
        v47 = 64;
      else
        v47 = v37 - v43;
      if (v43)
      {
        v48 = 32 * (v46 + v42);
        v72 = v61 + 8 * v43 * v56;
        v73 = v43;
        v76 = v43 * v36;
        v78 = (float64_t *)(v62 + 8 * v43);
        sub_20E835C9C(v47, v28, v78, a9, v74, v38, v24, v25);
        v49 = v73;
        v59(v60, v47, v28, v61 + 8 * v76 + 8 * v73, v36, (uint64_t)v78, a9, v38);
        v50 = 0;
        v79 = a10;
        do
        {
          v75 = v50;
          v77 = v50 + 64;
          if (v50 + 64 <= v49)
            v51 = 64;
          else
            v51 = v49 - v50;
          v71(v51, v47, v72 + 8 * v50 * v70, v36, v41);
          if (v28 < 4)
          {
            v52 = 0;
          }
          else
          {
            v52 = 0;
            v53 = v79;
            v54 = (float64x2_t *)(v41 + 32832);
            do
            {
              sub_20E82F3B0(v41, v54, v53, v70, v51, v47);
              v52 += 4;
              v54 = (float64x2_t *)((char *)v54 + v48);
              v53 += 2 * v70;
            }
            while (v52 < v44);
          }
          if (vars8)
            sub_20E8424A0((float64x2_t *)v41, &v74->n128_f64[v52 * v47], (uint64_t)&a10->f64[v75 + v52 * v70], v70, v51, vars8, v47);
          v79 += 32;
          v50 = v77;
          v49 = v73;
          v36 = v68;
          v28 = v69;
        }
        while (v77 < v73);
      }
      else
      {
        v59(v60, v47, v28, v61, v36, v62, a9, v38);
      }
      v46 = v64 + 64;
      v42 = v65 - 64;
      v43 = v63;
      v37 = v58;
    }
    while (v63 < v58);
  }
  if (v28 >= 65 && !v55)
    free(v41);
}

void sub_20E8384C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  float64x2_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  __n128 *v56;
  double *v57;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int vars8[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void);
  float64x2_t *v69;
  uint64_t v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v23 = MEMORY[0x24BDAC7A8]();
  v61 = v31;
  v62 = v32;
  v33 = v25;
  v60 = v34;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v36 = sub_20E836468;
  if (v23 == 111)
    v36 = sub_20E836588;
  v59 = v36;
  v37 = (void (*)(void))sub_20E835F4C;
  if (v23 == 111)
    v37 = (void (*)(void))sub_20E835E6C;
  v68 = v37;
  v70 = v27;
  if (v23 == 111)
    v38 = 1;
  else
    v38 = v27;
  v67 = v38;
  v39 = (v25 << 6) + 4108;
  if (a13 == -1)
  {
    v44 = 8 * v39;
    if (v25 < 65)
      v44 = 0;
    v43 = (double)(unint64_t)v44;
    goto LABEL_16;
  }
  v40 = v26;
  v41 = v24;
  v42 = v28;
  if (v25 >= 65 && a13)
  {
    if (8 * v39 > a13)
    {
      v43 = (double)(unint64_t)(8 * v39);
LABEL_16:
      *a12 = v43;
      return;
    }
    goto LABEL_19;
  }
  if (v25 >= 65)
  {
LABEL_19:
    v45 = (float64x2_t *)a12;
    v57 = a12;
    if (!a12)
      v45 = (float64x2_t *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_21;
  }
  v57 = a12;
  v45 = (float64x2_t *)&a23;
LABEL_21:
  if (v40 >= 1)
  {
    v71 = (__n128 *)&v45[2052];
    if (v33 <= 0)
      v46 = -(-v33 & 3);
    else
      v46 = v33 & 3;
    v65 = v41;
    v66 = v33;
    v69 = v45;
    v74 = v33 - 3;
    *(_QWORD *)vars8 = v46;
    do
    {
      if ((unint64_t)v40 >= 0x40)
        v47 = v40 - 64;
      else
        v47 = 0;
      if ((unint64_t)v40 >= 0x40)
        v48 = 64;
      else
        v48 = v40;
      v49 = v47 + v48;
      if (v47 + v48 >= v41)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v59)(v60, v48, v33, v61 + 8 * v47 * v70 + 8 * v47, v42);
        v45 = v69;
      }
      else
      {
        sub_20E835C9C(v48, v33, (float64_t *)(v62 + 8 * v47), a9, v71, v42, v29, v30);
        ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, double))v59)(v60, v48, v33, v61 + 8 * v47 * v70 + 8 * v47, v42);
        v50 = (void (*)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
        v51 = a10 + 8 * v40;
        do
        {
          v72 = v49 + 64;
          if (v49 + 64 <= v41)
            v52 = 64;
          else
            v52 = v41 - v49;
          if ((v52 & 7) != 0)
            v50 = (void (*)(float64x2_t *, __n128 *, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E8428D0;
          v53 = v52;
          v68();
          v54 = v33 < 4;
          v73 = v51;
          v55 = 0;
          if (v54)
          {
            v45 = v69;
          }
          else
          {
            v56 = v71;
            v45 = v69;
            do
            {
              v50(v69, v56, v51, v67, v53, v48);
              v55 += 4;
              v56 += 2 * v48;
              v51 += 32 * v67;
            }
            while (v55 < v74);
          }
          if (v46)
            sub_20E8424A0(v45, &v71->n128_f64[v55 * v48], a10 + 8 * v49 + 8 * v55 * v67, v67, v53, v46, v48);
          v51 = v73 + 512;
          v49 += 64;
          v41 = v65;
          v33 = v66;
        }
        while (v72 < v65);
      }
      v40 = v47;
    }
    while (v47 > 0);
  }
  if (v33 >= 65 && !v57)
    free(v45);
}

_OWORD *sub_20E8388C0(_OWORD *a1, _OWORD *a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _OWORD *result;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  _OWORD *v58;
  _OWORD *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;

  v9 = _X2;
  v10 = 4 * a4;
  v12 = *(float32x4_t *)a1;
  v13 = *((float32x4_t *)a1 + 1);
  v11 = a1 + 2;
  v15 = *(float32x4_t *)v11;
  v16 = *((float32x4_t *)v11 + 1);
  result = v11 + 2;
  do
  {
    v17 = a6;
    v7 = (float32x4_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
    __asm { PRFM            #1, [X2,#0x40] }
    v24 = *_X2;
    v25 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v28 = *_X2;
    v29 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v32 = *_X2;
    v33 = _X2[1];
    _X2 = (float32x4_t *)((char *)_X2 + v10);
    __asm { PRFM            #1, [X2,#0x40] }
    v35 = *_X2;
    v36 = _X2[1];
    _X2 = v9 + 2;
    v37 = v7;
    v38 = v7;
    v39 = v7;
    v40 = v7;
    v41 = v7;
    v42 = v7;
    v43 = v7;
    v45 = *(float32x4_t *)a2;
    v46 = *((float32x4_t *)a2 + 1);
    _X6 = a2 + 2;
    __asm
    {
      PRFM            #1, [X6]
      PRFM            #1, [X6,#0x20]
      PRFM            #1, [X6,#0x40]
    }
    v50 = vmulq_n_f32(v24, a7);
    v51 = vmulq_n_f32(v25, a7);
    v52 = vmulq_n_f32(v28, a7);
    v53 = vmulq_n_f32(v29, a7);
    v54 = vmulq_n_f32(v32, a7);
    v55 = vmulq_n_f32(v33, a7);
    v56 = vmulq_n_f32(v35, a7);
    v57 = vmulq_n_f32(v36, a7);
    if ((a6 & 1) == 0)
      goto LABEL_9;
    v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
    v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
    v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
    v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
    v12 = v15;
    v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
    v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
    v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
    v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
    v13 = v16;
    v15 = *(float32x4_t *)result;
    v16 = *((float32x4_t *)result + 1);
    result += 2;
    v45 = *((float32x4_t *)a2 + 1);
    v46 = *(float32x4_t *)_X6;
    _X6 = a2 + 3;
    v17 = a6 - 1;
    if (a6 > 1)
    {
LABEL_9:
      do
      {
        v50 = vmlaq_n_f32(v50, v12, v45.f32[0]);
        v52 = vmlaq_lane_f32(v52, v12, *(float32x2_t *)v45.f32, 1);
        v54 = vmlaq_laneq_f32(v54, v12, v45, 2);
        v56 = vmlaq_laneq_f32(v56, v12, v45, 3);
        v51 = vmlaq_n_f32(v51, v13, v45.f32[0]);
        v53 = vmlaq_lane_f32(v53, v13, *(float32x2_t *)v45.f32, 1);
        v55 = vmlaq_laneq_f32(v55, v13, v45, 2);
        v57 = vmlaq_laneq_f32(v57, v13, v45, 3);
        v12 = *(float32x4_t *)result;
        v13 = *((float32x4_t *)result + 1);
        v58 = result + 2;
        v45 = *(float32x4_t *)_X6;
        v59 = _X6 + 1;
        v7 = vmlaq_n_f32(v7, v15, v46.f32[0]);
        v38 = vmlaq_lane_f32(v38, v15, *(float32x2_t *)v46.f32, 1);
        v40 = vmlaq_laneq_f32(v40, v15, v46, 2);
        v42 = vmlaq_laneq_f32(v42, v15, v46, 3);
        v37 = vmlaq_n_f32(v37, v16, v46.f32[0]);
        v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v46.f32, 1);
        v41 = vmlaq_laneq_f32(v41, v16, v46, 2);
        v43 = vmlaq_laneq_f32(v43, v16, v46, 3);
        v15 = *(float32x4_t *)v58;
        v16 = *((float32x4_t *)v58 + 1);
        result = v58 + 2;
        v46 = *(float32x4_t *)v59;
        _X6 = v59 + 1;
        v17 -= 2;
      }
      while (v17);
      v50 = vaddq_f32(v50, v7);
      v51 = vaddq_f32(v51, v37);
      v52 = vaddq_f32(v52, v38);
      v53 = vaddq_f32(v53, v39);
      v54 = vaddq_f32(v54, v40);
      v55 = vaddq_f32(v55, v41);
      v56 = vaddq_f32(v56, v42);
      v57 = vaddq_f32(v57, v43);
    }
    *v9 = v50;
    v9[1] = v51;
    v60 = (float32x4_t *)((char *)v9 + v10);
    *v60 = v52;
    v60[1] = v53;
    v61 = (float32x4_t *)((char *)v60 + v10);
    *v61 = v54;
    v61[1] = v55;
    v62 = (float32x4_t *)((char *)v61 + v10);
    *v62 = v56;
    v62[1] = v57;
    v9 = _X2;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_20E838A54(uint64_t a1, uint64_t a2, int *a3, int *a4, uint64_t a5, int *a6, uint64_t a7, double *a8, int *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  int v21;
  const char *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int64_t v27;
  char *v28;
  double *v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  double *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  double v49;
  int v50;
  double *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  double *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int64_t v74;
  double *v75;
  double *aa;
  int v78;
  double *v79;
  int v81;
  int *v82;
  double *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  int v91;
  int n[4];

  if (*a3)
  {
    v88 = *a6;
    v11 = ~(_DWORD)v88;
    v85 = a5 + 8 * v11;
    v12 = a7 - 8;
    v89 = *a9;
    v90 = 0.0;
    v13 = ~(_DWORD)v89;
    *(_QWORD *)n = 0;
    v84 = &a8[v13];
    v91 = 0;
    v14 = lsame_();
    v15 = *a4;
    if (v14)
    {
      if ((int)v15 >= 1)
      {
        v16 = 0;
        v79 = &a8[v13];
        v17 = 8 * v88;
        v70 = a5 + 8 * v11;
        v18 = a5 + 8 * v88 + 8 * v11;
        v19 = -1;
        v20 = 1;
        v21 = *a3;
        v22 = "No transpose";
        v72 = v12;
        v74 = v15;
        do
        {
          if ((int)v20 > v21)
            v21 = v20;
          if (*(double *)(v12 + 8 * v20) == 0.0)
          {
            n[0] = v20;
            bzero(&v79[(int)v89 + 1 + (int)v89 * (int)v16], 8 * v16 + 8);
          }
          else
          {
            v23 = (_QWORD *)(v85 + 8 * (v20 + (int)v88 * (int)v20));
            v24 = *v23;
            v86 = v23;
            *v23 = 0x3FF0000000000000;
            v25 = lsame_();
            v26 = *a3;
            v27 = *a3;
            if (v25)
            {
              if (v20 < v26)
              {
                while (*(double *)(v18 + 8 * v27) == 0.0)
                {
                  if (--v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_20;
                  }
                }
                v26 = v27;
              }
LABEL_20:
              if (v26 >= v21)
                v30 = v21;
              else
                v30 = v26;
              v81 = v20 - 1;
              v91 = v20 - 1;
              n[0] = v19 + v30 + 1;
              v90 = -*(double *)(v12 + 8 * v20);
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = (char *)v22;
              v34 = v84;
              sub_20E83F474("Transpose", n, &v91, &v90, v85 + 8 * (v20 + v88), a6, v86, &dword_254A4A468, &unk_254A5A600, &v84[v32], &dword_254A4A468);
            }
            else
            {
              v28 = (char *)v22;
              if (v20 < v26)
              {
                v29 = (double *)(v70 + 8 * (v20 + (int)v88 * (uint64_t)(int)v27));
                while (*v29 == 0.0)
                {
                  --v27;
                  v29 -= v88;
                  if (v27 <= v20)
                  {
                    v26 = v20;
                    goto LABEL_25;
                  }
                }
                v26 = v27;
              }
LABEL_25:
              if (v26 >= v21)
                v35 = v21;
              else
                v35 = v26;
              v81 = v20 - 1;
              v91 = v19 + v35 + 1;
              n[0] = v20 - 1;
              v90 = -*(double *)(v12 + 8 * v20);
              v34 = v84;
              v31 = v89;
              v32 = v20 * v89 + 1;
              v33 = v28;
              sub_20E83F474(v28, n, &v91, &v90, v85 + 8 * v20 * v88 + 8, a6, v86, a6, &unk_254A5A600, &v84[v32], &dword_254A4A468);
            }
            v36 = v32;
            v37 = v31;
            v12 = v72;
            *v86 = v24;
            n[0] = v81;
            v38 = v37 * v20;
            dtrmv_("Upper", v33, "Non-unit", n, a8, a9, &v34[v36], &dword_254A4A468);
            v34[v20 + v38] = *(double *)(v72 + 8 * v20);
            if (v21 <= v26)
              v39 = v26;
            else
              v39 = v21;
            if ((unint64_t)v20 <= 1)
              v21 = v26;
            else
              v21 = v39;
            v17 = 8 * v88;
            v15 = v74;
            v22 = v33;
          }
          v19 = ~(_DWORD)v20;
          ++v16;
          v18 += v17;
        }
        while (v20++ < v15);
      }
    }
    else if ((int)v15 >= 1)
    {
      v41 = 0;
      v42 = *a4;
      v75 = &a8[v13];
      v43 = 8 * v88 * v42 + 8 * v11;
      v44 = 8 * (v88 + v42) + 8 * v11;
      v45 = -8 * v88;
      v73 = v15 * (v89 + 1);
      v69 = v88 + 1;
      v46 = v43 + a5 + 8;
      v47 = (double *)(a5 + v44);
      v87 = 1;
      v48 = v42;
      v82 = a4;
      v71 = v42;
      do
      {
        v49 = *(double *)(v12 + 8 * v48);
        v50 = *a4;
        if (v49 == 0.0)
        {
          n[1] = *a4;
          if (v48 <= v50)
            bzero(&v75[v73 + (int)v13 * (int)v41], 8 * (v50 + v41 - v42) + 8);
        }
        else
        {
          v51 = v84;
          if (v48 >= v50)
          {
            v59 = v89 + 1;
          }
          else
          {
            v52 = lsame_();
            v53 = *a3;
            v54 = *a4;
            if (v52)
            {
              v55 = v69 * v48 + v53 - v54;
              v56 = *(_QWORD *)(v85 + 8 * v55);
              *(_QWORD *)(v85 + 8 * v55) = 0x3FF0000000000000;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v57 = 0;
                while (*(double *)(v46 + 8 * v57) == 0.0)
                {
                  if (v48 - 1 == ++v57)
                  {
                    LODWORD(v58) = v48;
                    goto LABEL_63;
                  }
                }
                LODWORD(v58) = v57 + 1;
              }
LABEL_63:
              if ((int)v58 <= v87)
                v66 = v87;
              else
                v66 = v58;
              n[0] = v54 - v48;
              n[1] = v48 + v53 - v54 - v66 + 1;
              v90 = -*(double *)(v12 + 8 * v48);
              v51 = v84;
              v63 = v85;
              aa = (double *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              sub_20E83F474("Transpose", &n[1], n, &v90, v85 + 8 * ((v48 + 1) * v88 + v66), a6, v85 + 8 * (v48 * v88 + v66), &dword_254A4A468, &unk_254A5A600, &v84[(_QWORD)aa], &dword_254A4A468);
              v64 = *v82;
              v65 = v69 * (int)v48 + *a3 - *v82;
            }
            else
            {
              v60 = v48 + (v53 + (int)v48 - v54) * (int)v88;
              v56 = *(_QWORD *)(v85 + 8 * v60);
              *(_QWORD *)(v85 + 8 * v60) = 0x3FF0000000000000;
              if (v48 < 2)
              {
                LODWORD(v58) = 1;
              }
              else
              {
                v61 = v47;
                v58 = 1;
                while (*v61 == 0.0)
                {
                  ++v58;
                  v61 += v88;
                  if (v48 == v58)
                  {
                    LODWORD(v58) = v48;
                    break;
                  }
                }
              }
              if ((int)v58 <= v87)
                v62 = v87;
              else
                v62 = v58;
              n[0] = v48 + v53 - v54 - v62 + 1;
              n[1] = v54 - v48;
              v90 = -*(double *)(v12 + 8 * v48);
              v51 = v84;
              v63 = v85;
              aa = (double *)(v48 + 1 + v48 * v89);
              v78 = v48 + 1;
              sub_20E83F474("No transpose", &n[1], n, &v90, v85 + 8 * (v48 + 1 + v62 * (int)v88), a6, v85 + 8 * (v48 + v62 * (int)v88), a6, &unk_254A5A600, &v84[(_QWORD)aa], &dword_254A4A468);
              v64 = *v82;
              v65 = v48 + (*a3 + (int)v48 - *v82) * (int)v88;
            }
            *(_QWORD *)(v63 + 8 * v65) = v56;
            n[1] = v64 - v48;
            dtrmv_("Lower", "No transpose", "Non-unit", &n[1], &v51[((int)v89 + 1) * v78], a9, &v51[(_QWORD)aa], &dword_254A4A468);
            if (v87 >= (int)v58)
              v67 = v58;
            else
              v67 = v87;
            if (v48 <= 1)
              v67 = v58;
            v87 = v67;
            v59 = v89 + 1;
            v49 = *(double *)(v12 + 8 * v48);
            a4 = v82;
            v42 = v71;
            LODWORD(v13) = ~(_DWORD)v89;
            v45 = -8 * v88;
          }
          v51[v59 * (int)v48] = v49;
        }
        --v48;
        ++v41;
        v46 += v45;
        --v47;
      }
      while (v41 != v42);
    }
  }
  return 0;
}

uint64_t sub_20E8391EC(char *a1, char *a2, int *a3, int *a4, int *a5, uint64_t a6, int a7, int *a8, uint64_t a9, int *a10, uint64_t a11, int a12, int a13, int *a14)
{
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;

  v14 = *a1 - 67;
  if (v14 > 0x31)
    goto LABEL_12;
  if (((1 << v14) & 0x2000100020001) != 0)
  {
    v16 = 112;
    goto LABEL_6;
  }
  if (((1 << v14) & 0x80000000800) == 0)
  {
LABEL_12:
    v19 = 1;
LABEL_14:
    printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SGEMM ", v19);
    return 0;
  }
  v16 = 111;
LABEL_6:
  v17 = *a2 - 67;
  if (v17 > 0x31)
  {
LABEL_13:
    v19 = 2;
    goto LABEL_14;
  }
  if (((1 << v17) & 0x2000100020001) == 0)
  {
    if (((1 << v17) & 0x80000000800) != 0)
    {
      v18 = 111;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v18 = 112;
LABEL_11:
  sub_20E837AE8(102, v16, v18, *a3, *a4, *a5, a7, *a8, a9, *a10, v21, a12, a13, *a14);
  return 0;
}

uint64_t sub_20E839318(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, float *a7, float *a8, int *a9, char *a10, int *a11)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;

  v13 = *a1;
  v14 = 141;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 82)
    {
LABEL_4:
      v15 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "STRSM ", v15);
      return 0;
    }
  }
  v14 = 142;
LABEL_8:
  v16 = *a2;
  v17 = 122;
  if (v16 > 107)
  {
    if (v16 != 108)
    {
      if (v16 != 117)
        goto LABEL_11;
LABEL_14:
      v17 = 121;
    }
  }
  else if (v16 != 76)
  {
    if (v16 != 85)
    {
LABEL_11:
      v15 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v18 = *a3 - 67;
  if (v18 > 0x31)
    goto LABEL_28;
  if (((1 << v18) & 0x2000100020001) != 0)
  {
    v19 = 112;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x80000000800) == 0)
  {
LABEL_28:
    v15 = 3;
    goto LABEL_29;
  }
  v19 = 111;
LABEL_20:
  v20 = *a4;
  v21 = 131;
  if (v20 > 109)
  {
    if (v20 != 110)
    {
      if (v20 != 117)
        goto LABEL_23;
LABEL_26:
      v21 = 132;
    }
  }
  else if (v20 != 78)
  {
    if (v20 != 85)
    {
LABEL_23:
      v15 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  sub_20E83F534(102, v14, v17, v19, v21, *a5, *a6, a8, *a7, *a9, a10, *a11);
  return 0;
}

uint64_t sub_20E8394AC(char *a1, char *a2, unsigned int *a3, unsigned int *a4, float *a5, uint64_t a6, unsigned int *a7, float *a8, uint64_t a9, _DWORD *a10)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = *a1;
  v12 = 122;
  if (v11 > 107)
  {
    if (v11 == 108)
      goto LABEL_8;
    if (v11 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v11 == 76)
      goto LABEL_8;
    if (v11 != 85)
    {
LABEL_4:
      v13 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "SSYRK ", v13);
      return 0;
    }
  }
  v12 = 121;
LABEL_8:
  v14 = *a2 - 67;
  if (v14 > 0x31)
    goto LABEL_14;
  if (((1 << v14) & 0x2000100020001) == 0)
  {
    if (((1 << v14) & 0x80000000800) != 0)
    {
      v15 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v13 = 2;
    goto LABEL_15;
  }
  v15 = 112;
LABEL_13:
  sub_20E8373FC(102, v12, v15, *a3, *a4, a6, *a7, a9, *a5, *a8, *a10);
  return 0;
}

uint64_t sub_20E8395AC(char *a1, char *a2, int *a3, int *a4, int *a5, uint64_t a6, int a7, int *a8, uint64_t a9, int *a10, uint64_t a11, int a12, int a13, int *a14)
{
  unsigned int v14;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;

  v14 = *a1 - 67;
  if (v14 > 0x31)
    goto LABEL_12;
  if (((1 << v14) & 0x2000100020001) != 0)
  {
    v16 = 112;
    goto LABEL_6;
  }
  if (((1 << v14) & 0x80000000800) == 0)
  {
LABEL_12:
    v19 = 1;
LABEL_14:
    printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DGEMM ", v19);
    return 0;
  }
  v16 = 111;
LABEL_6:
  v17 = *a2 - 67;
  if (v17 > 0x31)
  {
LABEL_13:
    v19 = 2;
    goto LABEL_14;
  }
  if (((1 << v17) & 0x2000100020001) == 0)
  {
    if (((1 << v17) & 0x80000000800) != 0)
    {
      v18 = 111;
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v18 = 112;
LABEL_11:
  sub_20E835694(102, v16, v18, *a3, *a4, *a5, a7, *a8, a9, *a10, v21, a12, a13, *a14);
  return 0;
}

uint64_t sub_20E8396D8(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, int a8, int *a9, uint64_t a10, int *a11)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v13 = *a1;
  v14 = 141;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 82)
    {
LABEL_4:
      v15 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRMM ", v15);
      return 0;
    }
  }
  v14 = 142;
LABEL_8:
  v16 = *a2;
  v17 = 122;
  if (v16 > 107)
  {
    if (v16 != 108)
    {
      if (v16 != 117)
        goto LABEL_11;
LABEL_14:
      v17 = 121;
    }
  }
  else if (v16 != 76)
  {
    if (v16 != 85)
    {
LABEL_11:
      v15 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v18 = *a3 - 67;
  if (v18 > 0x31)
    goto LABEL_28;
  if (((1 << v18) & 0x2000100020001) != 0)
  {
    v19 = 112;
    goto LABEL_20;
  }
  if (((1 << v18) & 0x80000000800) == 0)
  {
LABEL_28:
    v15 = 3;
    goto LABEL_29;
  }
  v19 = 111;
LABEL_20:
  v20 = *a4;
  v21 = 131;
  if (v20 > 109)
  {
    if (v20 != 110)
    {
      if (v20 != 117)
        goto LABEL_23;
LABEL_26:
      v21 = 132;
    }
  }
  else if (v20 != 78)
  {
    if (v20 != 85)
    {
LABEL_23:
      v15 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  sub_20E843E48(102, v14, v17, v19, v21, *a5, *a6, a8, *a9, a10, *a11);
  return 0;
}

uint64_t sub_20E83986C(char *a1, char *a2, char *a3, char *a4, unsigned int *a5, unsigned int *a6, double *a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int *a17, char *a18, int *a19)
{
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;

  v21 = *a1;
  v22 = 141;
  if (v21 > 107)
  {
    if (v21 == 108)
      goto LABEL_8;
    if (v21 != 114)
      goto LABEL_4;
  }
  else
  {
    if (v21 == 76)
      goto LABEL_8;
    if (v21 != 82)
    {
LABEL_4:
      v23 = 1;
LABEL_29:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DTRSM ", v23);
      return 0;
    }
  }
  v22 = 142;
LABEL_8:
  v24 = *a2;
  v25 = 122;
  if (v24 > 107)
  {
    if (v24 != 108)
    {
      if (v24 != 117)
        goto LABEL_11;
LABEL_14:
      v25 = 121;
    }
  }
  else if (v24 != 76)
  {
    if (v24 != 85)
    {
LABEL_11:
      v23 = 2;
      goto LABEL_29;
    }
    goto LABEL_14;
  }
  v26 = *a3 - 67;
  if (v26 > 0x31)
    goto LABEL_28;
  if (((1 << v26) & 0x2000100020001) != 0)
  {
    v27 = 112;
    goto LABEL_20;
  }
  if (((1 << v26) & 0x80000000800) == 0)
  {
LABEL_28:
    v23 = 3;
    goto LABEL_29;
  }
  v27 = 111;
LABEL_20:
  v28 = *a4;
  v29 = 131;
  if (v28 > 109)
  {
    if (v28 != 110)
    {
      if (v28 != 117)
        goto LABEL_23;
LABEL_26:
      v29 = 132;
    }
  }
  else if (v28 != 78)
  {
    if (v28 != 85)
    {
LABEL_23:
      v23 = 4;
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  sub_20E85964C(102, v22, v25, v27, v29, *a5, *a6, a8, *a7, a10, a11, a12, a13, a14, a15, a16, *a17, a18, *a19);
  return 0;
}

uint64_t sub_20E839A00(char *a1, char *a2, unsigned int *a3, unsigned int *a4, double *a5, uint64_t a6, unsigned int *a7, double *a8, uint64_t a9, _DWORD *a10)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  v11 = *a1;
  v12 = 122;
  if (v11 > 107)
  {
    if (v11 == 108)
      goto LABEL_8;
    if (v11 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v11 == 76)
      goto LABEL_8;
    if (v11 != 85)
    {
LABEL_4:
      v13 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DSYRK ", v13);
      return 0;
    }
  }
  v12 = 121;
LABEL_8:
  v14 = *a2 - 67;
  if (v14 > 0x31)
    goto LABEL_14;
  if (((1 << v14) & 0x2000100020001) == 0)
  {
    if (((1 << v14) & 0x80000000800) != 0)
    {
      v15 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v13 = 2;
    goto LABEL_15;
  }
  v15 = 112;
LABEL_13:
  sub_20E8429FC(102, v12, v15, *a3, *a4, a6, *a7, a9, *a5, *a8, *a10);
  return 0;
}

uint64_t sub_20E839B00(char *a1, char *a2, int *a3, int *a4, double *a5, uint64_t a6, int *a7, uint64_t a8, int *a9, double *a10, double *a11, int *a12)
{
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  v13 = *a1;
  v14 = 122;
  if (v13 > 107)
  {
    if (v13 == 108)
      goto LABEL_8;
    if (v13 != 117)
      goto LABEL_4;
  }
  else
  {
    if (v13 == 76)
      goto LABEL_8;
    if (v13 != 85)
    {
LABEL_4:
      v15 = 1;
LABEL_15:
      printf("** On entry to %6s, parameter number %2i had an illegal value\n", "DSYR2K", v15);
      return 0;
    }
  }
  v14 = 121;
LABEL_8:
  v16 = *a2 - 67;
  if (v16 > 0x31)
    goto LABEL_14;
  if (((1 << v16) & 0x2000100020001) == 0)
  {
    if (((1 << v16) & 0x80000000800) != 0)
    {
      v17 = 111;
      goto LABEL_13;
    }
LABEL_14:
    v15 = 2;
    goto LABEL_15;
  }
  v17 = 112;
LABEL_13:
  sub_20E8322A8(102, v14, v17, *a3, *a4, a6, *a7, a8, *a5, *a10, *a9, a11, *a12);
  return 0;
}

void sub_20E839C0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(uint64_t, double);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v58)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, double);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;

  v27 = MEMORY[0x24BDAC7A8]();
  v75 = v31;
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (void (*)(uint64_t, double))sub_20E835DBC;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, double))sub_20E835C9C;
  v70 = v37;
  v38 = sub_20E843378;
  if (v27 == 111)
    v38 = sub_20E8436A4;
  vars0 = v38;
  v39 = (v29 << 6) + 4108;
  if (a12 == -1)
  {
    v46 = 8 * v39;
    if (v29 < 65)
      v46 = 0;
    v45 = (double)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = v34;
  v72 = v31;
  if (v29 >= 65 && a12)
  {
    if (8 * v39 > a12)
    {
      v45 = (double)(unint64_t)(8 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_16;
  }
  if (v29 >= 65)
  {
LABEL_16:
    v91 = (char *)a11;
    v66 = a11;
    if (!a11)
      v91 = (char *)malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v91 = &a27;
LABEL_18:
  if (v42 >= 1)
  {
    v79 = 0;
    v47 = 0;
    v90 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v85 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v89 = 32 * v41;
    v78 = 512;
    v49 = 64;
    v77 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v82 = v43;
    do
    {
      v76 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 64 <= v42)
        v51 = 64;
      else
        v51 = v42 - v47;
      v83 = v75 + 8 * v47 * v41;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))vars0)(vars8_4, v43, v51, v40 + 8 * v47 * v72 + 8 * v47, v72, v44);
      v86 = v47 + 64;
      if (v35 - (v47 + 64) >= 1)
      {
        v70(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v80 = (uint64_t)&v91[v78 * (v50 + v79) + 32832];
          v53 = 32 * (v50 + v79);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v88 = v77;
          v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
          v58 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
          do
          {
            v87 = v52 + 64;
            if (v52 + 64 <= v43)
              v59 = 64;
            else
              v59 = v43 - v52;
            v84 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E8428D0;
              v57 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E83B2A0;
            }
            v60 = v41;
            sub_20E835E6C(v59, v51, (__int128 *)(v83 + 8 * v52), v41, v91);
            v61 = v86;
            if (v86 < v90)
            {
              v62 = v88;
              v63 = v80;
              v61 = v86;
              do
              {
                if (v56)
                  v57(v91, v63, v62, v60, v59, v51, v44);
                else
                  v58(v91, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v89;
              }
              while (v61 < v90);
            }
            v41 = v60;
            if (v85)
            {
              v64 = a10 + 8 * v84 + 8 * v61 * v60;
              v65 = (const double *)&v91[8 * v61 * v51 + 32832];
              if (v56)
                sub_20E842324((float64x2_t *)v91, v65, v64, v60, v59, v85, v51, v44);
              else
                sub_20E8424A0((float64x2_t *)v91, v65, v64, v60, v59, v85, v51);
            }
            v88 += 512;
            v52 = v87;
            v43 = v82;
          }
          while (v87 < v82);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v76 + 64;
      v78 += 512;
      v79 -= 64;
      v77 += v71;
      v47 = v86;
    }
    while (v86 < v42);
  }
  if (v35 >= 65 && !v66)
    free(v91);
}

void sub_20E83A0D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, double *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v52;
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  const double *v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double *(*v76)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v77;
  char *v78;

  v17 = MEMORY[0x24BDAC7A8]();
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E835DBC;
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))sub_20E835C9C;
  v64 = v27;
  v29 = sub_20E84382C;
  if (v17 == 111)
    v29 = sub_20E843500;
  v66 = v29;
  v30 = (v20 << 6) + 4108;
  if (a12 == -1)
  {
    v39 = 8 * v30;
    if (v20 < 65)
      v39 = 0;
    v38 = (double)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = v25;
  v37 = v18;
  if (v20 >= 65 && a12)
  {
    if (8 * v30 > a12)
    {
      v38 = (double)(unint64_t)(8 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_19;
  }
  if (v20 >= 65)
  {
LABEL_19:
    v58 = a11;
    v59 = v20;
    v78 = (char *)a11;
    if (!a11)
      v78 = (char *)malloc_type_malloc(8 * v30, 0x100004000313F17uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = &a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)(v78 + 32832);
    v77 = 32 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x40;
      if ((unint64_t)v34 >= 0x40)
        v34 -= 64;
      else
        v34 = 0;
      if (v42)
        v43 = 64;
      else
        v43 = v41;
      vars8 = v33 + 8 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v66)(v37, v35, v43, v31 + 8 * v34 * v26 + 8 * v34, v26, v36);
      if (v41 >= 0x41)
      {
        v64(v43, v34, v31 + 8 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
          v49 = (void (*)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
          vars0 = v34;
          do
          {
            v74 = v45 + 64;
            if (v45 + 64 <= v35)
              v50 = 64;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(char *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E8428D0;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = sub_20E83B2A0;
            v76 = v51;
            v52 = v32;
            sub_20E835E6C(v50, v43, (__int128 *)(vars8 + 8 * v45), v32, v78);
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float64x2_t *)v75;
              v55 = (float64x2_t *)(v78 + 32832);
              do
              {
                if (v48)
                  v76((float64x2_t *)v78, v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += 2 * v43;
                v54 = (float64x2_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 8 * v72 + 8 * v53 * v52;
              v57 = (const double *)(v71 + 8 * v53 * v43);
              if (v48)
                sub_20E842324((float64x2_t *)v78, v57, v56, v52, v50, v73, v43, v36);
              else
                sub_20E8424A0((float64x2_t *)v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 65 && !v58)
    free(v78);
}

void sub_20E83A520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,char a29)
{
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  double *(*v52)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v68)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  double *(*v82)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  _OWORD *(*v83)(_OWORD *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)();
  uint64_t v96;
  double *(*v97)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  double *(*v107)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  float64x2_t *v108;

  v35 = MEMORY[0x24BDAC7A8]();
  v86 = v36;
  v78 = v37;
  v38 = v33;
  v101 = v32;
  v39 = v31;
  v41 = v40;
  v42 = v35;
  v43 = a12;
  STACK[0x10198] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_24C9AB680;
  v44 = v43 + 1;
  if (v29 == 111)
  {
    v44 = v43;
    v45 = 1;
  }
  else
  {
    v45 = v34;
  }
  v98 = v45;
  v99 = v34;
  if (v29 == 111)
    v46 = v34;
  else
    v46 = 1;
  v77 = v46;
  v47 = 3;
  if (v30 == 111)
  {
    v47 = 2;
    v48 = 1;
  }
  else
  {
    v48 = a9;
  }
  v84 = v48;
  if (MEMORY[0xFFFFFC080] <= 747742333)
  {
    if (MEMORY[0xFFFFFC080] != -1829029944)
    {
      v49 = 506291073;
      goto LABEL_17;
    }
LABEL_18:
    if (v33 <= 512)
      v50 = 64;
    else
      v50 = 384;
    if (v31 >= 512)
      v51 = 128;
    else
      v51 = 64;
    v83 = sub_20E82F3B0;
    v97 = sub_20E83B2A0;
    v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
    v52 = sub_20E8428D0;
    goto LABEL_25;
  }
  if (MEMORY[0xFFFFFC080] == 933271106)
    goto LABEL_18;
  v49 = 747742334;
LABEL_17:
  if (MEMORY[0xFFFFFC080] == v49)
    goto LABEL_18;
  if (v33 >= 512)
    v50 = 544;
  else
    v50 = 64;
  v75 = 512;
  if (v31 < 1024)
    v75 = 288;
  if (v31 >= 512)
    v51 = v75;
  else
    v51 = 64;
  v83 = sub_20E85C440;
  v97 = sub_20E83D6D0;
  v82 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E854CB0;
  v52 = sub_20E83D060;
LABEL_25:
  v95 = *v44;
  v96 = (uint64_t)v52;
  v81 = v43[v47];
  v53 = (v51 + v32) * v50;
  v76 = v53;
  if (v53 > 0x2000)
    v108 = (float64x2_t *)malloc_type_malloc((8 * v53) | 0x60, 0x100004000313F17uLL);
  else
    v108 = (float64x2_t *)&a29;
  if (v38 >= 1)
  {
    vars8 = 0;
    v54 = 0;
    v102 = (uint64_t)v108 + ((8 * v51 * (unint64_t)v50) | 0x40);
    if (v101 <= 0)
      v57 = -(-v101 & 3);
    else
      v57 = v101 & 3;
    v103 = v57;
    v91 = 8 * v51;
    v58 = v50;
    v79 = v50;
    v80 = v38;
    v93 = v51;
    v94 = v39;
    v92 = a13;
    do
    {
      vars0 = v58;
      if (v38 >= v58)
        v59 = v58;
      else
        v59 = v38;
      v87 = v54 + v50;
      if (v54 + v50 <= v38)
        v60 = v50;
      else
        v60 = v38 - v54;
      v106 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v83;
      v107 = v82;
      if (a13)
      {
        v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a13;
        v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 24);
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))v81)(v60, v101, v86 + 8 * v54 * v84, a9, v102, v42);
      if (v39 >= 1)
      {
        v61 = 0;
        v62 = 32 * (v59 + vars8);
        v100 = v78 + 8 * v54 * v77;
        v64 = v41 != 1.0 && v54 == 0 && v41 != 0.0;
        v65 = a10;
        do
        {
          v104 = v61 + v51;
          if (v61 + v51 <= v39)
            v66 = v51;
          else
            v66 = v39 - v61;
          v67 = v106;
          if ((v66 & 7) != 0)
            v67 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v96;
          v106 = v67;
          v68 = v107;
          if ((v66 & 7) != 0)
            v68 = v97;
          v107 = v68;
          if (a13 && (v66 & 7) != 0)
          {
            v106 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a13 + 8);
            v107 = *(double *(**)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))(a13 + 32);
          }
          v69 = v61;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *))v95)(v66, v60, v100 + 8 * v61 * v98, v99, v108);
          v105 = v65;
          v70 = 0;
          if (v101 < 4)
          {
            v72 = v69;
          }
          else
          {
            v71 = v102;
            do
            {
              if (v64)
                v107(v108, (float64x2_t *)v71, (float64x2_t *)v65, a11, v66, v60, v41);
              else
                v106(v108, v71, v65, a11, v66, v60);
              v70 += 4;
              v71 += v62;
              v65 += 32 * a11;
              v72 = v69;
            }
            while (v70 < v101 - 3);
          }
          a13 = v92;
          if (v103)
          {
            v73 = a10 + 8 * v72 + 8 * v70 * a11;
            v74 = (const double *)(v102 + 8 * v70 * v60);
            if (v64)
            {
              if (v92)
                (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v92 + 40))(v108, v74, v73, a11, v66, v103, v60, v41);
              else
                sub_20E842324(v108, v74, v73, a11, v66, v103, v60, v41);
            }
            else if (v92)
            {
              (*(void (**)(float64x2_t *, const double *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 16))(v108, v74, v73, a11, v66, v103, v60);
            }
            else
            {
              sub_20E8424A0(v108, v74, v73, a11, v66, v103, v60);
            }
          }
          v65 = v105 + v91;
          v61 = v104;
          v51 = v93;
          v39 = v94;
        }
        while (v104 < v94);
      }
      v50 = v79;
      v38 = v80;
      v58 = vars0 + v79;
      vars8 -= v79;
      v54 = v87;
    }
    while (v87 < v80);
  }
  if (v76 > 0x2000)
    free(v108);
}

uint64_t sub_20E83AA6C(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  double v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float sa;
  int v32;
  int n;

  sa = 0.0;
  v32 = 0;
  v9 = *a4;
  *a5 = 0;
  v10 = lsame_();
  if (!v10 && !lsame_())
  {
    v13 = -1;
    goto LABEL_21;
  }
  v11 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v13 = -2;
    goto LABEL_21;
  }
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = *a2;
  if (*a4 < v12)
  {
    v13 = -4;
LABEL_21:
    *a5 = v13;
    goto LABEL_22;
  }
  v13 = *a5;
  if (*a5)
  {
LABEL_22:
    n = -v13;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v11)
  {
    v14 = a3 + 4 * ~(_DWORD)v9;
    if (v10)
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v16 = v15 + (int)v9 * (int)v15;
        v17 = *(float *)(v14 + 4 * v16);
        v18 = (float *)(v14 + 4 * v15 * v9 + 4);
        v19 = v17 - sdot_(&n, v18, &dword_254A4A46C, v18, &dword_254A4A46C);
        if (v19 <= 0.0)
          break;
        v20 = sqrtf(v19);
        *(float *)(v14 + 4 * v16) = v20;
        v21 = *a2;
        if (v15 >= v21)
        {
          v22 = v15 + 1;
        }
        else
        {
          v32 = v21 - v15;
          n = v15 - 1;
          v22 = v15 + 1;
          sub_20E83F3B4("Transpose", &n, &v32, &unk_254A4A470, v14 + 4 * (v15 + 1) * v9 + 4, a4, v18, &dword_254A4A46C, &unk_254A4A474, v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15), a4);
          n = *a2 - v15;
          sa = 1.0 / v20;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + (int)v9 + (int)v9 * (int)v15)), a4);
        }
        v23 = v15 < v11;
        v15 = v22;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v16) = v19;
    }
    else
    {
      v15 = 1;
      while (1)
      {
        n = v15 - 1;
        v25 = v15 + (int)v9 * (int)v15;
        v26 = *(float *)(v14 + 4 * v25);
        v27 = v26 - sdot_(&n, (float *)(v14 + 4 * (v15 + v9)), a4, (float *)(v14 + 4 * (v15 + v9)), a4);
        if (v27 <= 0.0)
          break;
        v28 = sqrtf(v27);
        *(float *)(v14 + 4 * v25) = v28;
        v29 = *a2;
        if (v15 >= v29)
        {
          v30 = v15 + 1;
        }
        else
        {
          v32 = v15 - 1;
          n = v29 - v15;
          v30 = v15 + 1;
          sub_20E83F3B4("No transpose", &n, &v32, &unk_254A4A470, v14 + 4 * (v15 + 1 + v9), a4, v14 + 4 * (v15 + v9), a4, &unk_254A4A474, v14 + 4 * (v15 + 1 + v15 * v9), &dword_254A4A46C);
          n = *a2 - v15;
          sa = 1.0 / v28;
          sscal_(&n, &sa, (float *)(v14 + 4 * (v15 + 1 + v15 * v9)), &dword_254A4A46C);
        }
        v23 = v15 < v11;
        v15 = v30;
        if (!v23)
          return 0;
      }
      *(float *)(v14 + 4 * v25) = v27;
    }
    *a5 = v15;
  }
  return 0;
}

uint64_t sub_20E83AD8C(unsigned int *a1, int *a2, _DWORD *a3, uint64_t a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8, int *a9)
{
  __CLPK_integer v9;
  int v10;
  int v11;
  double *v12;
  unsigned int v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v19;
  double *v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  BOOL v48;
  char v49;
  BOOL v50;
  int v51;
  int v52;
  uint64_t v55;
  int v57;
  int v58;
  _DWORD *v59;
  double *v60;
  uint64_t v62;
  size_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72[3];

  v68 = 0;
  v9 = *a5;
  *a9 = 0;
  v10 = *a2;
  if (*a2 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  *a7 = (double)(32 * v11);
  v12 = a7 - 1;
  v13 = *a1;
  if ((*a1 & 0x80000000) != 0)
  {
    v14 = 1;
    v15 = -1;
    goto LABEL_15;
  }
  v14 = 2;
  v15 = -2;
  if (v10 < 0)
    goto LABEL_15;
  if (v10 > (int)v13)
    goto LABEL_15;
  v16 = a3;
  LODWORD(v17) = *a3;
  v14 = 3;
  v15 = -3;
  if ((*a3 & 0x80000000) != 0 || (int)v17 > v10)
    goto LABEL_15;
  if (v13 <= 1)
    v19 = 1;
  else
    v19 = *a1;
  if (*a5 < v19)
  {
    v14 = 5;
    v15 = -5;
LABEL_15:
    *a9 = v15;
    v72[0] = v14;
    xerbla_();
    return 0;
  }
  v21 = a7;
  v22 = a4;
  v23 = a1;
  v24 = *a8;
  if (*a8 < v11 && v24 != -1)
  {
    v14 = 8;
    v15 = -8;
    goto LABEL_15;
  }
  if (v24 == -1)
    return 0;
  if (!v10)
  {
    *a7 = 1.0;
    return 0;
  }
  v25 = ~v9;
  v55 = ~v9;
  v58 = *a3;
  if (v17 < 0x21)
  {
    v28 = 0;
    v26 = 32;
LABEL_30:
    v52 = v10;
    goto LABEL_33;
  }
  if (v17 < 0x81)
  {
    v26 = 32;
    v28 = 128;
    goto LABEL_30;
  }
  LODWORD(v68) = v10;
  v52 = 32 * v10;
  if (v24 >= 32 * v10)
  {
    v26 = 32;
    goto LABEL_32;
  }
  v26 = v24 / v10;
  if (v26 >= 2)
  {
LABEL_32:
    v28 = 128;
LABEL_33:
    v27 = 0;
    if (v28 >= v17 || v26 >= v17)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v64 = v26;
      v51 = (int)(v17 + ~v28) / v26 * v26;
      v71 = v51 + v26;
      v72[0] = v10;
      if ((int)v17 >= v51 + v26)
        v17 = (v51 + v26);
      else
        v17 = v17;
      v29 = v10 - v17;
      if (v10 > (int)v17)
      {
        v66 = a4 + 8 * v55;
        v30 = v9 + v9 * v17 + 1;
        v62 = 8 * v17;
        do
        {
          if ((int)v17 >= 1)
          {
            v31 = v17;
            bzero((void *)(v66 + 8 * v30), v62);
            v17 = v31;
            v23 = a1;
          }
          v30 += v9;
          --v29;
        }
        while (v29);
      }
      v27 = v51 + 1;
      v26 = v64;
      v22 = a4;
    }
    v25 = ~v9;
    goto LABEL_46;
  }
  v27 = 0;
  LODWORD(v17) = 0;
LABEL_46:
  v65 = v26;
  v63 = v22 + 8 * v25;
  v32 = a6 - 8;
  v67 = a6 - 8;
  if (v10 > (int)v17)
  {
    v71 = v10 - v17;
    v72[0] = v13 - v17;
    v70 = v58 - v17;
    v33 = v17;
    sub_20E85C510(v72, &v71, (unsigned int *)&v70, v63 + 8 * ((int)v17 + 1 + ((int)v17 + 1) * v9), a5, v32 + 8 * ((int)v17 + 1), v21, (int *)&v68 + 1);
    LODWORD(v17) = v33;
    v32 = a6 - 8;
  }
  if ((int)v17 >= 1)
  {
    v72[0] = -v65;
    v34 = v27 > 0;
    if (v65 <= 0)
      v34 = v27 < 2;
    if (v34)
    {
      v35 = v22 + 8 * v55;
      v57 = v9 + 1;
      v59 = v16;
      v60 = v21;
      do
      {
        v36 = *v16 - v27;
        v37 = v36 + 1;
        if (v65 >= v36 + 1)
          v38 = v36 + 1;
        else
          v38 = v65;
        v69 = v38;
        v70 = v37;
        v39 = v38 + v27;
        v40 = *v23;
        if (v39 <= *a2)
        {
          v71 = v40 - v27 + 1;
          v43 = v63;
          v42 = v27;
          sub_20E838A54((uint64_t)"Forward", (uint64_t)"Columnwise", &v71, &v69, v63 + 8 * v27 * v57, a5, v32 + 8 * v27, v21, (int *)&v68);
          v44 = *v23 - v27 + 1;
          v70 = *a2 - (v69 + v27) + 1;
          v71 = v44;
          sub_20E829A08((uint64_t)"Left", "No transpose", (uint64_t)"Forward", (uint64_t)"Columnwise", &v71, &v70, &v69, (__CLPK_doublereal *)(v63 + 8 * v27 * v57), a5, (int)v21, (int *)&v68, (__CLPK_doublereal *)(v63 + 8 * (v27 + (v69 + v27) * v9)), a5, (uint64_t)&v12[v69 + 1], (int *)&v68);
          v41 = v27 * v57;
          v32 = v67;
          v40 = *v23;
        }
        else
        {
          v41 = v27 * v57;
          v42 = v27;
          v43 = v63;
        }
        v71 = v40 - v27 + 1;
        sub_20E85C510(&v71, &v69, (unsigned int *)&v69, v43 + 8 * v41, a5, v32 + 8 * v42, v21, (int *)&v68 + 1);
        v45 = v69 + v27;
        v71 = v69 + v27 - 1;
        if (v69 >= 1)
        {
          v70 = v27 - 1;
          v46 = v9 * v27 + 1;
          v47 = v27;
          do
          {
            if (v27 >= 2)
              bzero((void *)(v35 + 8 * v46), 8 * (v27 - 1));
            ++v47;
            v46 += v9;
          }
          while (v47 < v45);
        }
        v48 = __OFADD__(v72[0], v27);
        v27 += v72[0];
        if ((v27 < 0) ^ v48 | (v27 == 0))
          v49 = 0;
        else
          v49 = 1;
        if (v72[0] >= 0)
          v50 = v27 < 2;
        else
          v50 = v49;
        v16 = v59;
        v21 = v60;
        v32 = v67;
      }
      while (v50);
    }
  }
  *v21 = (double)v52;
  return 0;
}

double *sub_20E83B2A0(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t *v73;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      v27 = _X2[2];
      v28 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v31 = *_X2;
      v32 = _X2[1];
      v33 = _X2[2];
      v34 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      v39 = _X2[2];
      v40 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v43 = *a2;
      v44 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v48 = vmulq_n_f64(v25, a7);
      v49 = vmulq_n_f64(v26, a7);
      v50 = vmulq_n_f64(v27, a7);
      v51 = vmulq_n_f64(v28, a7);
      v52 = vmulq_n_f64(v31, a7);
      v53 = vmulq_n_f64(v32, a7);
      v54 = vmulq_n_f64(v33, a7);
      v55 = vmulq_n_f64(v34, a7);
      v56 = vmulq_n_f64(v37, a7);
      v57 = vmulq_n_f64(v38, a7);
      v58 = vmulq_n_f64(v39, a7);
      v59 = vmulq_n_f64(v40, a7);
      v60 = vmulq_n_f64(*_X2, a7);
      v61 = vmulq_n_f64(_X2[1], a7);
      v62 = vmulq_n_f64(_X2[2], a7);
      v63 = vmulq_n_f64(_X2[3], a7);
      do
      {
        v64 = v14;
        v65 = v15;
        v48 = vmlaq_n_f64(v48, v14, v43.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v14, v43, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v66 = (float64x2_t *)(result + 4);
        v56 = vmlaq_n_f64(v56, v64, v44.f64[0]);
        v60 = vmlaq_laneq_f64(v60, v64, v44, 1);
        v67 = *_X6;
        v68 = _X6[1];
        _X6 += 2;
        v69 = v16;
        v49 = vmlaq_n_f64(v49, v65, v43.f64[0]);
        v53 = vmlaq_laneq_f64(v53, v65, v43, 1);
        v70 = v17;
        v57 = vmlaq_n_f64(v57, v65, v44.f64[0]);
        v61 = vmlaq_laneq_f64(v61, v65, v44, 1);
        v16 = *v66;
        v17 = v66[1];
        result = v66[2].f64;
        v50 = vmlaq_n_f64(v50, v69, v43.f64[0]);
        v54 = vmlaq_laneq_f64(v54, v69, v43, 1);
        v58 = vmlaq_n_f64(v58, v69, v44.f64[0]);
        v62 = vmlaq_laneq_f64(v62, v69, v44, 1);
        v51 = vmlaq_n_f64(v51, v70, v43.f64[0]);
        v55 = vmlaq_laneq_f64(v55, v70, v43, 1);
        v43 = v67;
        v59 = vmlaq_n_f64(v59, v70, v44.f64[0]);
        v63 = vmlaq_laneq_f64(v63, v70, v44, 1);
        v44 = v68;
        --v18;
      }
      while (v18);
      v71 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v50;
      v11[3] = v51;
      v11 += 4;
      *v71 = v52;
      v71[1] = v53;
      v71[2] = v54;
      v71[3] = v55;
      v72 = (float64x2_t *)((char *)v71 + v12);
      *v72 = v56;
      v72[1] = v57;
      v72[2] = v58;
      v72[3] = v59;
      v73 = (float64x2_t *)((char *)v72 + v12);
      *v73 = v60;
      v73[1] = v61;
      v73[2] = v62;
      v73[3] = v63;
      _X2 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_20E8425FC(result - 8, a2, _X2->f64, a4, v8, a6, a7);
  return result;
}

uint64_t sub_20E83B410(uint64_t result, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, _OWORD *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int32 *v75;
  float32x4_t v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t k;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  __int32 v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float32x2_t v109;
  float32x2_t v110;
  __int32 *v111;

  v12 = 4 * a5;
  v13 = a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = &a4[(unint64_t)v12 / 4];
    v19 = &a4[(unint64_t)v12 / 2];
    v20 = &a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v21 = (float32x4_t *)a6;
    v22 = &a8[a12];
    v23 = __OFSUB__(result, 3);
    v24 = result - 3;
    if (result > 3)
    {
      do
      {
        v25 = a3;
        v26 = (float32x4_t)veorq_s8(a11, a11);
        v27 = v26;
        v28 = v26;
        v29 = v26;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v30 = *v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = v32;
        v34 = *v19++;
        v35 = v34;
        v36 = *v20++;
        v37 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v14);
        v26 = vmlaq_n_f32(v26, v37, v31);
        v27 = vmlaq_n_f32(v27, v37, v33);
        v28 = vmlaq_n_f32(v28, v37, v35);
        v29 = vmlaq_n_f32(v29, v37, v36);
        v25 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v38 = *v21;
          v39 = *(float32x4_t *)((char *)v21 + v14);
          v40 = *(float32x2_t *)v17;
          v17 += 2;
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v15 = v25 <= 2;
          for (j = v25 - 2; !v15; j -= 2)
          {
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v52 = vmlaq_n_f32(v26, v38, v41.f32[0]);
            v53 = vmlaq_n_f32(v27, v38, v44.f32[0]);
            v54 = vmlaq_n_f32(v28, v38, v47.f32[0]);
            v55 = vmlaq_n_f32(v29, v38, v50.f32[0]);
            v38 = *v21;
            v26 = vmlaq_lane_f32(v52, v39, v41, 1);
            v56 = *(float32x2_t *)v17;
            v17 += 2;
            v41 = v56;
            v27 = vmlaq_lane_f32(v53, v39, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v28 = vmlaq_lane_f32(v54, v39, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v29 = vmlaq_lane_f32(v55, v39, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v39 = *(float32x4_t *)((char *)v21 + v14);
            v15 = j <= 2;
          }
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v38, v41.f32[0]), v39, v41, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v38, v44.f32[0]), v39, v44, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v38, v47.f32[0]), v39, v47, 1);
          v29 = vmlaq_lane_f32(vmlaq_n_f32(v29, v38, v50.f32[0]), v39, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        v61 = vzip1q_s32((int32x4_t)v26, (int32x4_t)v28);
        v62 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v28);
        v63 = vzip1q_s32((int32x4_t)v27, (int32x4_t)v29);
        v64 = vzip2q_s32((int32x4_t)v27, (int32x4_t)v29);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v61, v63), a9), *a8, a10);
        v65 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v62, v64), a9), *v60, a10);
        v66 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v62, v64), a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vzip2q_s32(v61, v63), a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v65;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v66;
        v21 = (float32x4_t *)a6;
        v17 = &v17[v12 - a3];
        v18 = &v17[(unint64_t)v12 / 4];
        v19 = &v17[(unint64_t)v12 / 2];
        v20 = &v17[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v23 = __OFSUB__(v24, 4);
        v15 = v24 <= 4;
        v24 -= 4;
      }
      while (!v15);
    }
    v67 = result & 3;
    if (!v23 && v67 != 0)
    {
      do
      {
        v68 = a3;
        v69 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v70 = *v17,
              ++v17,
              v71 = *v21,
              v21 = (float32x4_t *)((char *)v21 + v14),
              v69 = vmlaq_n_f32(v69, v71, v70),
              v68 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v72 = *(float32x2_t *)v17;
            v17 += 2;
            v73 = *v21;
            v74 = *(float32x4_t *)((char *)v21 + v14);
            v21 = (float32x4_t *)((char *)v21 + 2 * v14);
            v69 = vmlaq_lane_f32(vmlaq_n_f32(v69, v73, v72.f32[0]), v74, v72, 1);
            v15 = v68 <= 2;
            v68 -= 2;
          }
          while (!v15);
        }
        v76.i32[0] = a8->i32[0];
        v75 = (__int32 *)((char *)a8 + v13 * 4);
        v76.i32[1] = *v75;
        v77 = &v75[v13];
        v76.i32[2] = *v77;
        v78 = &v77[v13];
        v76.i32[3] = *v78;
        v79 = &v78[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v69, a9), v76, a10);
        v80 = &v79[v13];
        *v79 = a11.i32[0];
        a8 = (float32x4_t *)(v79 + 1);
        *v80 = a11.i32[1];
        v81 = &v80[v13];
        *v81 = a11.i32[2];
        v81[a12] = a11.i32[3];
        v21 = (float32x4_t *)a6;
        v17 = &v17[(unint64_t)v12 / 4 - a3];
        v15 = v67-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v22;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v83 = (__int32 *)a4;
    v84 = (__int32 *)&a4[(unint64_t)v12 / 4];
    v85 = (__int32 *)&a4[(unint64_t)v12 / 2];
    v86 = (__int32 *)&a4[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
    v87 = (__int32 *)a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_25;
        v93 = *v83++;
        v94.i32[0] = v93;
        v94.i32[1] = *v84++;
        v94.i32[2] = *v85++;
        v94.i32[3] = *v86++;
        v95 = *v87;
        v87 = (__int32 *)((char *)v87 + v14);
        v92 = vmlaq_n_f32(v92, v94, *(float *)&v95);
        v91 = a3 - 1;
        if (a3 > 1)
        {
LABEL_25:
          do
          {
            v96 = *(_QWORD *)v83;
            v83 += 2;
            v97.i64[0] = v96;
            v98 = *(_QWORD *)v84;
            v84 += 2;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v85;
            v85 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v86;
            v86 += 2;
            v103.i32[0] = *v87;
            v104 = &v87[(unint64_t)v14 / 4];
            v103.i32[1] = *v104;
            v87 = &v104[(unint64_t)v14 / 4];
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, (float32x4_t)vtrn1q_s32(v97, v99), v103.f32[0]), (float32x4_t)vtrn2q_s32(v97, v99), v103, 1);
            v15 = v91 <= 2;
            v91 -= 2;
          }
          while (!v15);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = (__int32 *)a6;
        v83 = &v83[v12 - a3];
        v84 = &v83[(unint64_t)v12 / 4];
        v85 = &v83[(unint64_t)v12 / 2];
        v86 = &v83[(unint64_t)v12 / 4 + (unint64_t)v12 / 2];
        v89 = __OFSUB__(v90, 4);
        v15 = v90 <= 4;
        v90 -= 4;
      }
      while (!v15);
    }
    v105 = result & 3;
    if (!v89 && v105 != 0)
    {
      do
      {
        v106 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v107 = *(float *)v83,
              ++v83,
              v108 = *(float *)v87,
              v87 = (__int32 *)((char *)v87 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v108, v107),
              v106 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v109 = *(float32x2_t *)v83;
            v83 += 2;
            v110.i32[0] = *v87;
            v111 = &v87[(unint64_t)v14 / 4];
            v110.i32[1] = *v111;
            v87 = &v111[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v110, v109);
            v15 = v106 <= 2;
            v106 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = (__int32 *)a6;
        v83 = &v83[(unint64_t)v12 / 4 - a3];
        v15 = v105-- <= 1;
      }
      while (!v15);
    }
    a6 = (_OWORD *)((char *)a6 + 4);
    a8 = v88;
    v15 = k <= 1;
  }
  return result;
}

void sub_20E83B794(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int128 a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,__int128 a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(double);
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128);
  unint64_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *(*v91)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v92)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v93;
  uint64_t v94;
  float64x2_t *v95;
  float64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  float64x2_t *v112;
  __int128 v113;
  __int128 v114;
  float64x2_t *v115;
  __int128 v116;
  double *v117;
  double v118;
  char *v119;
  float64x2_t *v120;
  __int128 v121;
  __int128 v122;
  float64x2_t *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const double *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(double);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  double *(*v168)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  double *(*v181)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  float64x2_t *v182;
  uint64_t v183;

  v61 = MEMORY[0x24BDAC7A8]();
  v176 = v63;
  v152 = v64;
  v65 = v60;
  v145 = v66;
  v68 = v67;
  v69 = v61;
  v70 = v59;
  STACK[0x10318] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v71 = 1;
  else
    v71 = v60;
  if (v58 == 111)
    v72 = v60;
  else
    v72 = 1;
  v144 = v72;
  v73 = (void (*)(double))sub_20E835C9C;
  if (v58 == 111)
    v73 = (void (*)(double))sub_20E835DBC;
  v143 = v73;
  v74 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))sub_20E835F4C;
  if (v58 == 111)
    v74 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float64x2_t *, __n128))sub_20E835E6C;
  v154 = v74;
  v177 = v62;
  if (v59 >= 225)
  {
    v76 = (char *)malloc_type_malloc((v59 << 8) + 8288, 0x100004000313F17uLL);
    *(_QWORD *)&v62 = v177;
    v182 = (float64x2_t *)v76;
    v75 = (unint64_t *)(v76 + 8256);
  }
  else
  {
    v182 = (float64x2_t *)&STACK[0x2A0];
    v75 = &STACK[0x22E0];
  }
  v153 = (uint64_t)v75;
  if (v68 >= 1)
  {
    v148 = 0;
    v77 = 0;
    v180 = v70 - 3;
    if (v70 <= 0)
      v78 = -(-v70 & 3);
    else
      v78 = v70 & 3;
    v159 = v78;
    v167 = (__int128)vdupq_lane_s64(v62, 0);
    v166 = 24 * v176 + 40;
    v174 = 24 * v176 + 24;
    v175 = 24 * v176 + 56;
    v165 = 16 * v176 + 48;
    v172 = 16 * v176 + 32;
    v173 = 24 * v176 + 8;
    v170 = 8 * v176 + 32;
    v171 = 16 * v176 + 16;
    v169 = 8 * v176;
    v164 = 8 * v176 + 16;
    v79 = 32;
    vars0 = v70;
    vars8 = v65;
    v142 = v68;
    v149 = v71;
    while (1)
    {
      v147 = v79;
      v80 = v68 >= v79 ? v79 : v68;
      v146 = v77 + 32;
      v81 = v77 + 32 <= v68 ? 32 : v68 - v77;
      v183 = v81;
      v156 = v145 + 8 * v77 * v144;
      v143(v69);
      v82 = (__n128)v177;
      if (v70 >= 1)
        break;
LABEL_119:
      v79 = v147 + 32;
      v148 -= 32;
      v77 = v146;
      v68 = v142;
      if (v146 >= v142)
        goto LABEL_120;
    }
    v83 = 0;
    v84 = 0;
    v155 = (v80 + v148) << 8;
    v178 = 32 * (v80 + v148);
    v85 = *(double *)&v177 != 0.0;
    if (*(double *)&v177 == 1.0 || v77 != 0)
      v85 = 0;
    v179 = v85;
    v161 = v152;
    v87 = 32;
    v162 = v153;
    v163 = v152;
    v168 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
    v181 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
    while (1)
    {
      if (v70 >= v87)
        v88 = v87;
      else
        v88 = v70;
      v160 = v83;
      v89 = v88 + v83;
      v157 = v84 + 32;
      v158 = v87;
      if (v84 + 32 <= v70)
        v90 = 32;
      else
        v90 = v70 - v84;
      v91 = v181;
      if ((v90 & 7) != 0)
        v91 = sub_20E8428D0;
      v181 = v91;
      v92 = v168;
      if ((v90 & 7) != 0)
        v92 = sub_20E83B2A0;
      v168 = v92;
      v154(v90, v183, v156 + 8 * v84 * v71, v65, v182, v82);
      v93 = v84;
      if (v84 < v180)
        break;
LABEL_87:
      v82 = (__n128)v177;
      if (v159)
      {
        if (v93 - v84 >= v90)
          v125 = v90;
        else
          v125 = v93 - v84;
        v126 = v90 - v125;
        if (v90 - v125 >= 3)
          v127 = 3;
        else
          v127 = v90 - v125;
        if (v126 >= 1)
        {
          a56 = 0u;
          a57 = 0u;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
          a48 = 0u;
          a49 = 0u;
          a46 = 0u;
          a47 = 0u;
        }
        v128 = v152 + 8 * v84 + 8 * v93 * v176;
        v129 = (const double *)(v153 + 8 * v93 * v183);
        if (v179)
        {
          if (v125)
            sub_20E842324(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183, *(double *)&v177);
          if (v126 >= 1)
          {
            sub_20E8424A0((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v130 = 0;
              v131 = v93 + v160;
              if (v93 + v160 >= v89)
                v131 = v89;
              v132 = v161 + v169 * v93 + 8 * v131;
              v133 = &a46;
              v134 = 1;
              do
              {
                v135 = 0;
                do
                {
                  v82.n128_f64[0] = *((double *)v133 + v135) + *(double *)(v132 + 8 * v135) * *(double *)&v177;
                  *(_QWORD *)(v132 + 8 * v135++) = v82.n128_u64[0];
                }
                while (v134 != v135);
                ++v130;
                ++v134;
                v133 += 4;
                v132 += v169;
              }
              while (v130 != v159);
            }
          }
        }
        else
        {
          if (v125)
            sub_20E8424A0(v182, (const double *)(v153 + 8 * v93 * v183), v128, v176, v125, v159, v183);
          if (v126 >= 1)
          {
            sub_20E8424A0((float64x2_t *)((char *)v182+ 8 * v125 * v183+ 8 * (v125 & ((int)((_DWORD)v183 << 31) >> 31) & 7)), v129, (uint64_t)&a46, 8, v127, v159, v183);
            if (v159 >= 1)
            {
              v136 = 0;
              v137 = v93 + v160;
              if (v93 + v160 >= v89)
                v137 = v89;
              v138 = v161 + v169 * v93 + 8 * v137;
              v139 = &a46;
              v140 = 1;
              do
              {
                v141 = 0;
                do
                {
                  v82.n128_f64[0] = *(double *)(v138 + 8 * v141) + *((double *)v139 + v141);
                  *(_QWORD *)(v138 + 8 * v141++) = v82.n128_u64[0];
                }
                while (v140 != v141);
                ++v136;
                ++v140;
                v139 += 4;
                v138 += v169;
              }
              while (v136 != v159);
            }
          }
        }
      }
      v162 += v155;
      v163 += (v176 << 8) + 256;
      v87 = v158 + 32;
      v83 = v160 - 32;
      v161 += 256;
      v84 += 32;
      if (v157 >= v70)
        goto LABEL_119;
    }
    v94 = 0;
    v96 = (float64x2_t *)v162;
    v95 = (float64x2_t *)v163;
    while (1)
    {
      if (v94 <= 0)
        v97 = -(-v94 & 7);
      else
        v97 = v94 & 7;
      v98 = v94 - v97;
      if (v94 - v97 >= v90)
        v99 = v90;
      else
        v99 = v94 - v97;
      v100 = v90 - v99;
      if (v90 - v99 >= 1)
      {
        *(_OWORD *)&STACK[0x280] = 0u;
        *(_OWORD *)&STACK[0x290] = 0u;
        a58 = 0u;
        *(_OWORD *)&STACK[0x270] = 0u;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
        a48 = 0u;
        a49 = 0u;
        a46 = 0u;
        a47 = 0u;
      }
      if (v179)
      {
        if (v99)
          ((void (*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, __n128))v168)(v182, v96, v95, v176, v99, v183, (__n128)v177);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v101 = 8;
        else
          v101 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v101);
        if (v89 >= v98)
          v102 = v98;
        else
          v102 = v89;
        v95->f64[v102] = *(double *)&a46 + v95->f64[v102] * *(double *)&v177;
        if (v89 >= v98)
          v103 = v98;
        else
          v103 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v111 = (char *)&v95->f64[v103];
          *(float64x2_t *)(v111 + 8) = vmlaq_f64(*(float64x2_t *)((char *)&a46 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 8));
          *(float64x2_t *)(v111 + 24) = vmlaq_f64(*(float64x2_t *)((char *)&a47 + 8), (float64x2_t)v167, *(float64x2_t *)(v111 + 24));
          v112 = (float64x2_t *)&v111[v170];
          v113 = a51;
          v112[-2] = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)&v111[8 * v176]);
          *(float64x2_t *)((char *)v95 + 8 * v103 + v164) = vmlaq_f64((float64x2_t)v113, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v164));
          v114 = a54;
          *v112 = vmlaq_f64((float64x2_t)a52, (float64x2_t)v167, *(float64x2_t *)&v111[v170]);
          v115 = (float64x2_t *)&v111[v172];
          v115[-2] = vmlaq_f64((float64x2_t)v114, (float64x2_t)v167, *(float64x2_t *)&v111[16 * v176]);
          v116 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v171) = vmlaq_f64((float64x2_t)a55, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v171));
          *v115 = vmlaq_f64((float64x2_t)v116, (float64x2_t)v167, *(float64x2_t *)&v111[v172]);
          *(_QWORD *)&v116 = a58;
          *(double *)((char *)&v95->f64[v103] + v165) = *(double *)&a57
                                                      + *(double *)((char *)&v95->f64[v103] + v165) * *(double *)&v177;
          v117 = (double *)&v111[v175];
          *(v117 - 7) = *(double *)&v116 + *(v117 - 7) * *(double *)&v177;
          *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v174) = vmlaq_f64(*(float64x2_t *)&STACK[0x278], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v174));
          *(float64x2_t *)((char *)v95 + 8 * v103 + v166) = vmlaq_f64(*(float64x2_t *)&STACK[0x288], (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v166));
          v118 = *(double *)&STACK[0x298] + *v117 * *(double *)&v177;
LABEL_84:
          *v117 = v118;
          goto LABEL_85;
        }
        v104 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103) = vmlaq_f64((float64x2_t)a50, (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v103));
        *(float64x2_t *)((char *)&v95[v176] + 8 * v103) = vmlaq_f64((float64x2_t)v104, (float64x2_t)v167, *(float64x2_t *)((char *)&v95[v176] + 8 * v103));
        *(_QWORD *)&v104 = a58;
        *(double *)((char *)&v95->f64[v103] + v171) = *(double *)&a55
                                                    + *(double *)((char *)&v95->f64[v103] + v171) * *(double *)&v177;
        v95->f64[3 * v176 + v103] = *(double *)&v104 + v95->f64[3 * v176 + v103] * *(double *)&v177;
        *(float64x2_t *)((char *)v95 + 8 * v103 + v173) = vmlaq_f64(*(float64x2_t *)((char *)&a58 + 8), (float64x2_t)v167, *(float64x2_t *)((char *)v95 + 8 * v103 + v173));
        v105 = v174 + 8 * v103;
        v106 = *(double *)&STACK[0x278] + *(double *)((char *)v95->f64 + v105) * *(double *)&v177;
      }
      else
      {
        if (v99)
          v181(v182, v96, v95, v176, v99, v183);
        if (v100 < 1)
          goto LABEL_85;
        if (v100 >= 8)
          v107 = 8;
        else
          v107 = v90 - v99;
        ((void (*)(float64_t *, float64x2_t *, __int128 *, uint64_t, uint64_t))v181)(&v182->f64[v99 * v183], v96, &a46, 8, v107);
        if (v89 >= v98)
          v108 = v98;
        else
          v108 = v89;
        v95->f64[v108] = v95->f64[v108] + *(double *)&a46;
        if (v89 >= v98)
          v109 = v98;
        else
          v109 = v89;
        if ((((_BYTE)v84 + (_BYTE)v94) & 4) != 0)
        {
          v119 = (char *)&v95->f64[v109];
          *(float64x2_t *)(v119 + 8) = vaddq_f64(*(float64x2_t *)(v119 + 8), *(float64x2_t *)((char *)&a46 + 8));
          *(float64x2_t *)(v119 + 24) = vaddq_f64(*(float64x2_t *)(v119 + 24), *(float64x2_t *)((char *)&a47 + 8));
          v120 = (float64x2_t *)&v119[v170];
          v121 = a51;
          v120[-2] = vaddq_f64(*(float64x2_t *)&v119[8 * v176], (float64x2_t)a50);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v164) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v164), (float64x2_t)v121);
          v122 = a54;
          *v120 = vaddq_f64(*(float64x2_t *)&v119[v170], (float64x2_t)a52);
          v123 = (float64x2_t *)&v119[v172];
          v123[-2] = vaddq_f64(*(float64x2_t *)&v119[16 * v176], (float64x2_t)v122);
          v124 = a56;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v171) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v171), (float64x2_t)a55);
          *v123 = vaddq_f64(*(float64x2_t *)&v119[v172], (float64x2_t)v124);
          *(_QWORD *)&v124 = a58;
          *(double *)((char *)&v95->f64[v109] + v165) = *(double *)((char *)&v95->f64[v109] + v165) + *(double *)&a57;
          v117 = (double *)&v119[v175];
          *(v117 - 7) = *(v117 - 7) + *(double *)&v124;
          *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
          *(float64x2_t *)((char *)v95 + 8 * v109 + v174) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v174), *(float64x2_t *)&STACK[0x278]);
          *(float64x2_t *)((char *)v95 + 8 * v109 + v166) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v166), *(float64x2_t *)&STACK[0x288]);
          v118 = *v117 + *(double *)&STACK[0x298];
          goto LABEL_84;
        }
        v110 = a54;
        *(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v176 + 8 * v109), (float64x2_t)a50);
        *(float64x2_t *)((char *)&v95[v176] + 8 * v109) = vaddq_f64(*(float64x2_t *)((char *)&v95[v176] + 8 * v109), (float64x2_t)v110);
        *(_QWORD *)&v110 = a58;
        *(double *)((char *)&v95->f64[v109] + v171) = *(double *)((char *)&v95->f64[v109] + v171) + *(double *)&a55;
        v95->f64[3 * v176 + v109] = v95->f64[3 * v176 + v109] + *(double *)&v110;
        *(float64x2_t *)((char *)v95 + 8 * v109 + v173) = vaddq_f64(*(float64x2_t *)((char *)v95 + 8 * v109 + v173), *(float64x2_t *)((char *)&a58 + 8));
        v105 = v174 + 8 * v109;
        v106 = *(double *)((char *)v95->f64 + v105) + *(double *)&STACK[0x278];
      }
      *(double *)((char *)v95->f64 + v105) = v106;
LABEL_85:
      v94 += 4;
      v93 = v84 + v94;
      v96 = (float64x2_t *)((char *)v96 + v178);
      v95 += 2 * v176;
      if (v84 + v94 >= v180)
      {
        v70 = vars0;
        v65 = vars8;
        v71 = v149;
        goto LABEL_87;
      }
    }
  }
LABEL_120:
  if (v70 >= 225)
    free(v182);
}

uint64_t sub_20E83C29C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = sub_20E84D1EC;
  if ((_DWORD)result == 132)
    v10 = sub_20E84CC58;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = a4 + 4 * v17 * a5;
        if (v16 >= 0x40)
          v21 = 64;
        else
          v21 = v16;
        v22 = v20 + 4 * v29;
        v30 = (float32x4_t *)(v20 + 4 * (v29 + v21));
        v23 = v25;
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v23 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            sub_20E83771C(112, 111, v21, v24, a2 - (v21 + v29), v30, a5, (float32x2_t *)&v19[4 * v21], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v21, v24, v22, a5, v19, a7, a8);
          v23 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t sub_20E83C43C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_20E84C774;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_20E84C338;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 32;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 32;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_20E83771C(111, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 + 4 * v16 * a5, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 16;
      v16 += 32;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t sub_20E83C5C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_20E84946C;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128))sub_20E848F4C;
  v28 = v10;
  if (a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a3 << 32;
    v27 = a7 << 8;
    do
    {
      v26 = v16 + 64;
      if (a3 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v26 <= a2)
          v19 = 64;
        else
          v19 = (int)a2 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a3)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_20E83771C(112, 111, v19, v21, v16, (float32x4_t *)(a4 + 4 * v16 * a5), a5, v18, -1.0, *(float *)&v13, a10, a7, (char *)&v18[v15], a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v19, v21, a4 + 4 * v16 * a5 + 4 * v16, a5, &v18[v15], a7, a8);
          v20 -= 0x4000000000;
          v18 = (float32x2_t *)((char *)v18 + v27);
        }
        while (v17 < a3);
      }
      v15 += 32;
      v16 += 64;
    }
    while (v26 < a2);
  }
  return result;
}

uint64_t sub_20E83C74C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);

  v10 = sub_20E849EC4;
  if ((_DWORD)result == 132)
    v10 = sub_20E849A1C;
  v32 = v10;
  if ((int)a2 >= 1)
  {
    v13 = a8.n128_u32[0];
    v25 = a3 << 32;
    v31 = a7 << 8;
    v15 = 1;
    v16 = a2;
    do
    {
      LODWORD(v17) = v16 - 64;
      if (v16 >= 0x40)
        v17 = v17;
      else
        v17 = 0;
      v29 = v17;
      if (a3 >= 1)
      {
        v18 = 0;
        v19 = (char *)(a6 + 4 * v17);
        v20 = v25;
        v21 = a4 + 4 * v17;
        if (v16 >= 0x40)
          v22 = 64;
        else
          v22 = v16;
        v23 = v21 + 4 * v29 * a5;
        v30 = (float32x4_t *)(v21 + 4 * (v29 + v22) * a5);
        do
        {
          v18 += 64;
          if (v18 <= a3)
            v24 = 64;
          else
            v24 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if ((v15 & 1) == 0)
          {
            sub_20E83771C(111, 111, v22, v24, a2 - (v22 + v29), v30, a5, (float32x2_t *)&v19[4 * v22], -1.0, *(float *)&v13, a10, a7, v19, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v32)(v22, v24, v23, a5, v19, a7, a8);
          v20 -= 0x4000000000;
          v19 += v31;
        }
        while (v18 < a3);
      }
      v15 = 0;
      v16 = v29;
    }
    while ((int)v29 >= 1);
  }
  return result;
}

uint64_t sub_20E83C8F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_20E831290;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_20E830EA8;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_20E83771C(111, 112, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 + 4 * v16 * a5, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t sub_20E83CA78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v31;

  v10 = sub_20E831C80;
  if ((_DWORD)result == 132)
    v10 = sub_20E831718;
  v30 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v24 = a2 << 32;
    v31 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v28 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        if (v15 >= 0x40)
          v19 = 64;
        else
          v19 = v15;
        v29 = a3 - (v16 + v19);
        v20 = a4 + 4 * v16 * a5 + 4 * v16;
        v21 = (float32x4_t *)(a6 + a7 * (4 * v16 + 4 * v19));
        v22 = v24;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v23 = 64;
          else
            v23 = v22 >> 32;
          a8.n128_u32[0] = v13;
          if ((v31 & 1) == 0)
          {
            sub_20E83771C(111, 111, v23, v19, v29, v21, a7, (float32x2_t *)(v20 + 4 * v19), -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v30)(v23, v19, v20, a5, v18, a7, a8);
          v22 -= 0x4000000000;
          v18 += 256;
          v21 += 16;
        }
        while (v17 < a2);
      }
      v31 = 0;
      v15 = v28;
    }
    while (v28 >= 1);
  }
  return result;
}

uint64_t sub_20E83CC1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);
  unsigned __int32 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_20E83DCE8;
  if ((_DWORD)result == 132)
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))sub_20E83D810;
  v28 = v10;
  if (a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v15 = 0;
    v16 = 0;
    v22 = a2 << 32;
    v25 = a7 << 8;
    do
    {
      v27 = v16 + 64;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = a6;
        if (v27 <= a3)
          v19 = 64;
        else
          v19 = (int)a3 - (int)v16;
        v20 = v22;
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v21 = 64;
          else
            v21 = v20 >> 32;
          a8.n128_u32[0] = v13;
          if (v16)
          {
            sub_20E83771C(111, 111, v21, v19, v16, v18, a7, (float32x2_t *)(a4 + 4 * v16 * a5), -1.0, *(float *)&v13, a10, a5, (char *)v18 + v15, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = v28(v21, v19, a4 + 4 * v16 * a5 + 4 * v16, a5, (char *)v18 + v15, a7, a8);
          v20 -= 0x4000000000;
          v18 += 16;
        }
        while (v17 < a2);
      }
      v15 += v25;
      v16 += 64;
    }
    while (v27 < a3);
  }
  return result;
}

uint64_t sub_20E83CDA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, double a9, int8x16_t a10)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  unsigned __int32 v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  char v34;

  v10 = sub_20E83E6E8;
  if ((_DWORD)result == 132)
    v10 = sub_20E83E258;
  v33 = v10;
  if ((int)a3 >= 1)
  {
    v13 = a8.n128_u32[0];
    v26 = a2 << 32;
    v34 = 1;
    v15 = a3;
    do
    {
      LODWORD(v16) = v15 - 64;
      if (v15 >= 0x40)
        v16 = v16;
      else
        v16 = 0;
      v30 = v16;
      if (a2 >= 1)
      {
        v17 = 0;
        v18 = (char *)(a6 + 4 * v16 * a7);
        v19 = v26;
        v20 = a4 + 4 * v16;
        if (v15 >= 0x40)
          v21 = 64;
        else
          v21 = v15;
        v22 = (v30 + v21);
        v31 = (float32x2_t *)(v20 + 4 * v22 * a5);
        v32 = a3 - v22;
        v23 = v20 + 4 * v30 * a5;
        v24 = (float32x4_t *)(a6 + a7 * (4 * v30 + 4 * v21));
        do
        {
          v17 += 64;
          if (v17 <= a2)
            v25 = 64;
          else
            v25 = v19 >> 32;
          a8.n128_u32[0] = v13;
          if ((v34 & 1) == 0)
          {
            sub_20E83771C(111, 112, v25, v21, v32, v24, a7, v31, -1.0, *(float *)&v13, a10, a5, v18, a7);
            a8.n128_u32[0] = 1.0;
          }
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, __n128))v33)(v25, v21, v23, a5, v18, a7, a8);
          v19 -= 0x4000000000;
          v18 += 256;
          v24 += 16;
        }
        while (v17 < a2);
      }
      v34 = 0;
      v15 = v30;
    }
    while ((int)v30 >= 1);
  }
  return result;
}

uint64_t sub_20E83CF48(char *a1, __CLPK_integer *a2, __CLPK_doublereal *a3, int *a4, __CLPK_integer *a5)
{
  unsigned int v10;
  int v11;
  int v12;

  *a5 = 0;
  if (!lsame_() && !lsame_())
  {
    v12 = -1;
    goto LABEL_15;
  }
  v10 = *a2;
  if (*a2 < 0)
  {
    v12 = -2;
    goto LABEL_15;
  }
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = *a2;
  if (*a4 < v11)
  {
    v12 = -4;
LABEL_15:
    *a5 = v12;
    goto LABEL_16;
  }
  if (*a5)
  {
LABEL_16:
    xerbla_();
    return 0;
  }
  if (v10)
  {
    sub_20E847AF8(a1, "Non-unit", a2, a3, a4, a5);
    if (*a5 <= 0)
      sub_20E82B2D8(a1, a2, a3, a4, a5);
  }
  return 0;
}

double *sub_20E83D060(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = a3;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      v19 = *a3;
      v20 = a3[1];
      v21 = a3[2];
      v22 = a3[3];
      v18 = (float64x2_t *)((char *)a3 + v11);
      v24 = *v18;
      v25 = v18[1];
      v26 = v18[2];
      v27 = v18[3];
      v23 = (float64x2_t *)((char *)v18 + v11);
      v29 = *v23;
      v30 = v23[1];
      v31 = v23[2];
      v32 = v23[3];
      v28 = (float64x2_t *)((char *)v23 + v11);
      v33 = *v28;
      v34 = v28[1];
      v35 = v28[2];
      v36 = v28[3];
      v38 = *a2;
      v39 = a2[1];
      v37 = a2 + 2;
      do
      {
        v19 = vmlaq_n_f64(v19, v13, v38.f64[0]);
        v24 = vmlaq_laneq_f64(v24, v13, v38, 1);
        v29 = vmlaq_n_f64(v29, v13, v39.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v13, v39, 1);
        v20 = vmlaq_n_f64(v20, v14, v38.f64[0]);
        v25 = vmlaq_laneq_f64(v25, v14, v38, 1);
        v30 = vmlaq_n_f64(v30, v14, v39.f64[0]);
        v34 = vmlaq_laneq_f64(v34, v14, v39, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v40 = (float64x2_t *)(result + 4);
        v21 = vmlaq_n_f64(v21, v15, v38.f64[0]);
        v26 = vmlaq_laneq_f64(v26, v15, v38, 1);
        v31 = vmlaq_n_f64(v31, v15, v39.f64[0]);
        v35 = vmlaq_laneq_f64(v35, v15, v39, 1);
        v22 = vmlaq_n_f64(v22, v16, v38.f64[0]);
        v27 = vmlaq_laneq_f64(v27, v16, v38, 1);
        v32 = vmlaq_n_f64(v32, v16, v39.f64[0]);
        v36 = vmlaq_laneq_f64(v36, v16, v39, 1);
        v15 = *v40;
        v16 = v40[1];
        result = v40[2].f64;
        v38 = *v37;
        v39 = v37[1];
        v37 += 2;
        --v17;
      }
      while (v17);
      v41 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v19;
      v10[1] = v20;
      v10[2] = v21;
      v10[3] = v22;
      v10 += 4;
      *v41 = v24;
      v41[1] = v25;
      v41[2] = v26;
      v41[3] = v27;
      v42 = (float64x2_t *)((char *)v41 + v11);
      *v42 = v29;
      v42[1] = v30;
      v42[2] = v31;
      v42[3] = v32;
      v43 = (float64x2_t *)((char *)v42 + v11);
      *v43 = v33;
      v43[1] = v34;
      v43[2] = v35;
      v43[3] = v36;
      a3 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_20E84266C(result - 8, a2, a3->f64, a4, v7, a6);
  return result;
}

void sub_20E83D154(int a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, float *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  int v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a1 - 101;
  if ((a1 - 101) > 1)
  {
    v45 = 1;
LABEL_32:
    cblas_xerbla(v45, "cblas_sgemv", "");
    return;
  }
  if ((a2 - 111) > 3)
  {
    v45 = 2;
    goto LABEL_32;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v45 = 3;
    goto LABEL_32;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v45 = 4;
    goto LABEL_32;
  }
  if (!a8)
  {
    v45 = 9;
    goto LABEL_32;
  }
  if (!(_DWORD)a18)
  {
    v45 = 12;
    goto LABEL_32;
  }
  if ((a2 - 113) >= 2)
    v40 = (a2 & 0xFFFFFFFE) == 112;
  else
    v40 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  v41 = a3;
  v42 = a4;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v44 = a18 - a18 * a4;
  }
  else
  {
    v43 = (_DWORD *)(a7 + 4 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v44 = a18 - a18 * a3;
  }
  v46 = &a17[v44];
  if ((int)a18 >= 0)
    v46 = a17;
  if (!v38)
  {
    if (a4 <= 1uLL)
      v50 = 1;
    else
      v50 = a4;
    if (v50 <= a6)
    {
      v40 ^= 1u;
      v48 = a8;
      v51 = (int)a18;
      v49 = a4;
      v42 = v41;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v41 <= 1)
    v47 = 1;
  else
    v47 = v41;
  if (v47 > a6)
  {
LABEL_31:
    v45 = 7;
    goto LABEL_32;
  }
  v48 = a8;
  v51 = (int)a18;
  v49 = v41;
LABEL_34:
  sub_20E83EDA8(v40, v49, v42, a5, a6, v43, v48, v46, a9, a10, a11, a12, a13, a14, a15, a16, v51, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34,
    a35,
    a36,
    a37,
    a38);
}

void sub_20E83D294(int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  char v35;
  _QWORD *v36;
  int v37;
  int v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((a1 - 101) > 1)
  {
LABEL_27:
    v38 = 1;
    goto LABEL_28;
  }
  if ((a2 - 111) > 3)
  {
    v38 = 2;
LABEL_28:
    cblas_xerbla(v38, "cblas_dgemv", "");
    return;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v38 = 3;
    goto LABEL_28;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v38 = 4;
    goto LABEL_28;
  }
  if (!a8)
  {
    v38 = 9;
    goto LABEL_28;
  }
  if (!(_DWORD)a18)
  {
    v38 = 12;
    goto LABEL_28;
  }
  if ((a2 - 113) >= 2)
    v35 = (a2 & 0xFFFFFFFE) == 112;
  else
    v35 = ((a2 & 0xFFFFFFFE) == 112) | 2;
  a3 = a3;
  if ((a2 & 0xFFFFFFFE) == 0x70)
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a3) & (a8 >> 31)));
    v37 = a18 - a18 * a4;
  }
  else
  {
    v36 = (_QWORD *)(a7 + 8 * (int)((a8 - a8 * a4) & (a8 >> 31)));
    v37 = a18 - a18 * a3;
  }
  v39 = &a17[v37];
  if ((int)a18 >= 0)
    v39 = a17;
  if (a1 == 102)
  {
    if (a3 <= 1uLL)
      v44 = 1;
    else
      v44 = a3;
    if (v44 <= a6)
    {
      v41 = a6;
      v42 = a8;
      v45 = (int)a18;
      v43 = a3;
      a3 = a4;
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if (a1 != 101)
    goto LABEL_27;
  if (a4 <= 1uLL)
    v40 = 1;
  else
    v40 = a4;
  if (v40 > a6)
  {
LABEL_33:
    v38 = 7;
    goto LABEL_28;
  }
  v41 = a6;
  v35 ^= 1u;
  v42 = a8;
  v45 = (int)a18;
  v43 = a4;
LABEL_35:
  sub_20E8489AC(v35, v43, a3, a5, v41, v36, v42, v39, a9, a10, a11, a12, a13, a14, a15, a16, v45, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25,
    a26,
    a27,
    a28,
    a29,
    a30,
    a31,
    a32,
    a33,
    a34);
}

void sub_20E83D3E8(int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8, float a9, char *a10, uint64_t a11, float *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,char a28)
{
  BOOL v29;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      sub_20E85644C(a5, a6, a10, a11);
    }
    else if (a5 > 95 || a6 >= 96)
    {
      v29 = a2 == 121 && (_DWORD)a3 == 111;
      if (a1 == 141)
      {
        if (v29 || a2 == 122 && (_DWORD)a3 != 111)
          sub_20E846780(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, a19, a20);
        else
          sub_20E846324(a3, a4, a5, a6, a5, (int)a7, a8, (int)a10, a11, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
            a21,
            a22,
            a23,
            a24);
      }
      else if (v29 || a2 == 122 && (_DWORD)a3 != 111)
      {
        sub_20E846D50(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, (uint64_t)a17, a18, (uint64_t)a19, a20,
          a21,
          a22,
          (uint64_t)a23,
          a24,
          a25,
          a26,
          a27,
          a28);
      }
      else
      {
        sub_20E847218(a3, a4, a5, a6, a6, (int)a10, a11, (int)a7, a8, (uint64_t)a10, a12, a13, a14, a15, a16, a17, a18);
      }
    }
    else if (a13 == -1)
    {
      *a12 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if ((_DWORD)a3 == 111)
        {
          if (a4 == 132)
            sub_20E849A1C(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
          else
            sub_20E849EC4(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
        }
        else if (a4 == 132)
        {
          sub_20E848F4C(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        }
        else
        {
          sub_20E84946C(a5, a6, a7, a8, (float *)a10, a11, a9);
        }
      }
      else if ((_DWORD)a3 == 111)
      {
        if (a4 == 132)
          sub_20E84C338(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          sub_20E84C774(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if (a4 == 132)
      {
        sub_20E84CC58(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        sub_20E84D1EC(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if (a2 == 121)
    {
      if ((_DWORD)a3 == 111)
      {
        if (a4 == 132)
          sub_20E83D810(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
        else
          sub_20E83DCE8(a5, a6, a7, a8, (float *)a10, a11, a9);
      }
      else if (a4 == 132)
      {
        sub_20E83E258(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
      else
      {
        sub_20E83E6E8(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      }
    }
    else if ((_DWORD)a3 == 111)
    {
      if (a4 == 132)
        sub_20E831718(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
      else
        sub_20E831C80(a5, a6, (uint64_t)a7, a8, (uint64_t)a10, a11, a9);
    }
    else if (a4 == 132)
    {
      sub_20E830EA8(a5, a6, (uint64_t)a7, a8, (float *)a10, a11, a9);
    }
    else
    {
      sub_20E831290(a5, a6, a7, a8, (float *)a10, a11, a9);
    }
  }
}

double *sub_20E83D6D0(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double *result;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = a3;
    v12 = 8 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f64;
    do
    {
      v18 = a6;
      v20 = *a3;
      v21 = a3[1];
      v22 = a3[2];
      v23 = a3[3];
      v19 = (float64x2_t *)((char *)a3 + v12);
      v25 = *v19;
      v26 = v19[1];
      v27 = v19[2];
      v28 = v19[3];
      v24 = (float64x2_t *)((char *)v19 + v12);
      v30 = *v24;
      v31 = v24[1];
      v32 = v24[2];
      v33 = v24[3];
      v29 = (float64x2_t *)((char *)v24 + v12);
      v35 = *a2;
      v36 = a2[1];
      v34 = a2 + 2;
      v37 = vmulq_n_f64(v20, a7);
      v38 = vmulq_n_f64(v21, a7);
      v39 = vmulq_n_f64(v22, a7);
      v40 = vmulq_n_f64(v23, a7);
      v41 = vmulq_n_f64(v25, a7);
      v42 = vmulq_n_f64(v26, a7);
      v43 = vmulq_n_f64(v27, a7);
      v44 = vmulq_n_f64(v28, a7);
      v45 = vmulq_n_f64(v30, a7);
      v46 = vmulq_n_f64(v31, a7);
      v47 = vmulq_n_f64(v32, a7);
      v48 = vmulq_n_f64(v33, a7);
      v49 = vmulq_n_f64(*v29, a7);
      v50 = vmulq_n_f64(v29[1], a7);
      v51 = vmulq_n_f64(v29[2], a7);
      v52 = vmulq_n_f64(v29[3], a7);
      do
      {
        v37 = vmlaq_n_f64(v37, v14, v35.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v14, v35, 1);
        v45 = vmlaq_n_f64(v45, v14, v36.f64[0]);
        v49 = vmlaq_laneq_f64(v49, v14, v36, 1);
        v38 = vmlaq_n_f64(v38, v15, v35.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v15, v35, 1);
        v46 = vmlaq_n_f64(v46, v15, v36.f64[0]);
        v50 = vmlaq_laneq_f64(v50, v15, v36, 1);
        v14 = *(float64x2_t *)result;
        v15 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v39 = vmlaq_n_f64(v39, v16, v35.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v16, v35, 1);
        v47 = vmlaq_n_f64(v47, v16, v36.f64[0]);
        v51 = vmlaq_laneq_f64(v51, v16, v36, 1);
        v40 = vmlaq_n_f64(v40, v17, v35.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v17, v35, 1);
        v48 = vmlaq_n_f64(v48, v17, v36.f64[0]);
        v52 = vmlaq_laneq_f64(v52, v17, v36, 1);
        v16 = *v53;
        v17 = v53[1];
        result = v53[2].f64;
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        --v18;
      }
      while (v18);
      v54 = (float64x2_t *)((char *)v11 + v12);
      *v11 = v37;
      v11[1] = v38;
      v11[2] = v39;
      v11[3] = v40;
      v11 += 4;
      *v54 = v41;
      v54[1] = v42;
      v54[2] = v43;
      v54[3] = v44;
      v55 = (float64x2_t *)((char *)v54 + v12);
      *v55 = v45;
      v55[1] = v46;
      v55[2] = v47;
      v55[3] = v48;
      v56 = (float64x2_t *)((char *)v55 + v12);
      *v56 = v49;
      v56[1] = v50;
      v56[2] = v51;
      v56[3] = v52;
      a3 = v11;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v8)
    return sub_20E8425FC(result - 8, a2, a3->f64, a4, v8, a6, a7);
  return result;
}

void sub_20E83D810(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  float32x4_t v39;
  __int32 *v40;
  float *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int32 *v62;
  __int32 *v63;
  __int32 *v64;
  __int32 *v65;
  float *v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  __int32 *v70;
  __int32 *v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float v75;
  uint64_t v76;
  int32x4_t v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;

  v9 = a7;
  v87 = a2;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v15 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v15 = 2;
        v21 = __X;
        v22 = __N;
        do
        {
          v23 = *v21 * v9;
          *v21 = v23;
          v21[a6] = (float)(v21[a6] * v9) - (float)(v23 * v20);
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v15 = 1;
      cblas_sscal(__N, a7, __X, 1);
      a2 = v87;
      v9 = a7;
    }
    else
    {
      v15 = 0;
    }
  }
  else if (__N < 1)
  {
    v15 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = 3;
    v16 = __X;
    v17 = __N;
    do
    {
      v18 = *v16 * v9;
      *v16 = v18;
      v19 = (float)(v16[a6] * v9) - (float)(v18 * v11);
      v16[a6] = v19;
      v16[2 * a6] = -(float)((float)((float)(v14 * v19) + (float)(*v16 * v13)) - (float)(v16[2 * a6] * v9));
      ++v16;
      --v17;
    }
    while (v17);
  }
  if (v15 < a2)
  {
    v24 = 8 * a6;
    v25 = v15;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (float *)(a3 + 4 * v25 * a4);
        v28 = (float *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (float *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (float *)(a3 + 4 * (v25 + 3) * a4);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26];
          v32 = 0uLL;
          if ((v15 & 1) != 0)
          {
            v47 = *v31;
            v39 = vmlaq_n_f32((float32x4_t)0, *v31, *v27);
            v35 = vmlaq_n_f32((float32x4_t)0, *v31, *v28);
            v34 = vmlaq_n_f32((float32x4_t)0, *v31, *v29);
            v31 = (float32x4_t *)((char *)v31 + 4 * a6);
            v41 = v27 + 1;
            v36 = v25 - 1;
            v33 = vmlaq_n_f32((float32x4_t)0, v47, *v30);
            v37 = (__int32 *)(v30 + 1);
            v38 = (__int32 *)(v29 + 1);
            v40 = (__int32 *)(v28 + 1);
            if (v25 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v39 = vmlaq_n_f32(v39, *v31, v41[v42]);
                v35 = vmlaq_n_f32(v35, *v31, *(float *)&v40[v42]);
                v34 = vmlaq_n_f32(v34, *v31, *(float *)&v38[v42]);
                v33 = vmlaq_n_f32(v33, *v31, *(float *)&v37[v42]);
                v46 = *(float32x4_t *)((char *)v31 + 4 * a6);
                v43 = vmlaq_n_f32(v43, v46, v41[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, *(float *)&v40[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, *(float *)&v38[v42 + 1]);
                v32 = vmlaq_n_f32(v32, v46, *(float *)&v37[v42 + 1]);
                v42 += 2;
                v31 = (float32x4_t *)((char *)v31 + v24);
                v36 -= 2;
              }
              while (v36);
              v40 = (__int32 *)((char *)v40 + v42 * 4);
              v38 = (__int32 *)((char *)v38 + v42 * 4);
              v37 = (__int32 *)((char *)v37 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v33 = 0uLL;
            v34 = 0uLL;
            v35 = 0uLL;
            v36 = v25;
            v37 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v38 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v39 = 0uLL;
            v40 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v41 = (float *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v48 = vaddq_f32(v43, v39);
          v49 = vaddq_f32(v45, v34);
          v50 = vaddq_f32(v32, v33);
          v51 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 4 * a6), v9);
          v52 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 8 * a6), v9);
          v53 = vmulq_n_f32(*(float32x4_t *)((char *)v31 + 12 * a6), v9);
          v54 = vsubq_f32(vmulq_n_f32(*v31, v9), v48);
          v55 = vsubq_f32(v51, vaddq_f32(v44, v35));
          v56 = vsubq_f32(v52, v49);
          v57 = vsubq_f32(v53, v50);
          v51.i32[0] = *v40;
          v58 = vmlsq_lane_f32(v55, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v38;
          v52.i32[0] = v38[1];
          v59 = vmlsq_lane_f32(v56, v54, *(float32x2_t *)v51.f32, 0);
          v51.i32[0] = *v37;
          v53.i32[0] = v37[1];
          v60 = vmlsq_lane_f32(v59, v58, *(float32x2_t *)v52.f32, 0);
          v61 = vmlsq_lane_f32(vmlsq_lane_f32(v57, v54, *(float32x2_t *)v51.f32, 0), v58, *(float32x2_t *)v53.f32, 0);
          v51.i32[0] = v37[2];
          *v31 = v54;
          *(float32x4_t *)((char *)v31 + 4 * a6) = v58;
          *(float32x4_t *)((char *)v31 + 8 * a6) = v60;
          *(float32x4_t *)((char *)v31 + 12 * a6) = vmlsq_lane_f32(v61, v60, *(float32x2_t *)v51.f32, 0);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v87)
        return;
    }
    v62 = (__int32 *)(a3 + 4 * v25 * a4);
    v63 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v64 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v65 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    while (1)
    {
      v66 = &__X[v26];
      v67 = 0uLL;
      if ((v15 & 1) != 0)
      {
        v74.i32[0] = *v62;
        v74.i32[1] = *v63;
        v74.i32[2] = *v64;
        v74.i32[3] = *v65;
        v75 = *v66;
        v66 += a6;
        v68 = v25 - 1;
        v69 = vmlaq_n_f32((float32x4_t)0, v74, v75);
        v70 = v65 + 1;
        v71 = v64 + 1;
        v72 = (uint64_t *)(v63 + 1);
        v73 = (uint64_t *)(v62 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v76 = *v73++;
            v77.i64[0] = v76;
            v78 = *v72++;
            v79.i64[0] = v78;
            v80 = *(_QWORD *)v71;
            v71 += 2;
            v81 = v80;
            v82 = *(_QWORD *)v70;
            v70 += 2;
            v77.i64[1] = v81;
            v79.i64[1] = v82;
            v69 = vmlaq_n_f32(v69, (float32x4_t)vtrn1q_s32(v77, v79), *v66);
            v67 = vmlaq_n_f32(v67, (float32x4_t)vtrn2q_s32(v77, v79), v66[a6]);
            v66 = (float *)((char *)v66 + v24);
            v68 -= 2;
          }
          while (v68);
        }
      }
      else
      {
        v68 = v25;
        v69 = 0uLL;
        v70 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v71 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v72 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v73 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      v83 = vaddq_f32(v67, v69);
      v84 = -(float)(v83.f32[0] - (float)(*v66 * v9));
      v85 = (float)-(float)(v83.f32[1] - (float)(v66[a6] * v9)) - (float)(v84 * *(float *)v72);
      v86 = (float)((float)-(float)(v83.f32[2] - (float)(v66[2 * a6] * v9)) - (float)(v84 * *(float *)v71))
          - (float)(v85 * *((float *)v71 + 1));
      v83.f32[0] = (float)((float)((float)-(float)(v83.f32[3] - (float)(v66[3 * a6] * v9)) - (float)(v84 * *(float *)v70))
                         - (float)(v85 * *((float *)v70 + 1)))
                 - (float)(v86 * *((float *)v70 + 2));
      *v66 = v84;
      v66[a6] = v85;
      v66[2 * a6] = v86;
      v66[3 * a6] = v83.f32[0];
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
}

void sub_20E83DCE8(uint64_t __N, uint64_t a2, float *a3, uint64_t a4, float *__X, uint64_t a6, float a7)
{
  float *v9;
  float v10;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  __int32 *v56;
  __int32 *v57;
  float32x4_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  float *v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  __int32 *v87;
  __int32 *v88;
  uint64_t *v89;
  uint64_t *v90;
  float32x4_t v91;
  float v92;
  uint64_t v93;
  int32x4_t v94;
  uint64_t v95;
  int32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v9 = a3;
  v10 = a7;
  v12 = __N;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v21 = 2;
        v31 = __X;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = v28 * *v31;
          *v31 = v34;
          v31[a6] = v33 * (float)((float)(v31[a6] * v10) - (float)(v34 * v29));
          ++v31;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v21 = 1;
      cblas_sscal(__N, a7 / *a3, __X, 1);
      v10 = a7;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = 3;
    v22 = __X;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *v22;
      *v22 = v25;
      v26 = v19 * (float)((float)(v22[a6] * v10) - (float)(v25 * v18));
      v22[a6] = v26;
      v22[2 * a6] = v24
                  * (float)-(float)((float)((float)(v16 * v26) + (float)(*v22 * v15)) - (float)(v22[2 * a6] * v10));
      ++v22;
      --v23;
    }
    while (v23);
  }
  if (v21 < a2)
  {
    v35 = v12 - 3;
    v36 = 8 * a6;
    v37 = v21;
    v105 = a2;
    v106 = v9;
    v104 = v12;
    while (1)
    {
      v38 = 1.0 / v9[v37 * a4 + v37];
      v39 = (v37 + 1) * a4;
      v40 = 1.0 / v9[v39 + 1 + v37];
      v41 = (v37 + 2) * a4;
      v42 = 1.0 / v9[v41 + 2 + v37];
      v43 = (v37 + 3) * a4;
      v44 = 1.0 / v9[v43 + 3 + v37];
      v110 = v43;
      v108 = v41;
      v109 = v39;
      v45 = 0;
      if (v12 >= 4)
      {
        v46 = &v9[v37 * a4];
        v47 = &v9[v39];
        v48 = &v9[v41];
        v49 = &v9[v43];
        do
        {
          v50 = (float32x4_t *)&__X[v45];
          v51 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v66 = *v50;
            v58 = vmlaq_n_f32((float32x4_t)0, *v50, *v46);
            v54 = vmlaq_n_f32((float32x4_t)0, *v50, *v47);
            v53 = vmlaq_n_f32((float32x4_t)0, *v50, *v48);
            v50 = (float32x4_t *)((char *)v50 + 4 * a6);
            v55 = v37 - 1;
            v52 = vmlaq_n_f32((float32x4_t)0, v66, *v49);
            v56 = (__int32 *)(v49 + 1);
            v57 = (__int32 *)(v48 + 1);
            v59 = v47 + 1;
            v60 = v46 + 1;
            if (v37 != 1)
            {
LABEL_22:
              v61 = 0;
              v62 = 0uLL;
              v63 = 0uLL;
              v64 = 0uLL;
              do
              {
                v58 = vmlaq_n_f32(v58, *v50, v60[v61]);
                v54 = vmlaq_n_f32(v54, *v50, v59[v61]);
                v53 = vmlaq_n_f32(v53, *v50, *(float *)&v57[v61]);
                v52 = vmlaq_n_f32(v52, *v50, *(float *)&v56[v61]);
                v65 = *(float32x4_t *)((char *)v50 + 4 * a6);
                v62 = vmlaq_n_f32(v62, v65, v60[v61 + 1]);
                v63 = vmlaq_n_f32(v63, v65, v59[v61 + 1]);
                v64 = vmlaq_n_f32(v64, v65, *(float *)&v57[v61 + 1]);
                v51 = vmlaq_n_f32(v51, v65, *(float *)&v56[v61 + 1]);
                v61 += 2;
                v50 = (float32x4_t *)((char *)v50 + v36);
                v55 -= 2;
              }
              while (v55);
              v59 = (float *)((char *)v59 + v61 * 4);
              v57 = (__int32 *)((char *)v57 + v61 * 4);
              v56 = (__int32 *)((char *)v56 + v61 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = v37;
            v56 = (__int32 *)&v9[v43];
            v57 = (__int32 *)&v9[v41];
            v58 = 0uLL;
            v59 = v47;
            v60 = &v9[v37 * a4];
            if (v37)
              goto LABEL_22;
          }
          v64 = 0uLL;
          v63 = 0uLL;
          v62 = 0uLL;
LABEL_27:
          v67 = vaddq_f32(v62, v58);
          v68 = vaddq_f32(v64, v53);
          v69 = vaddq_f32(v51, v52);
          v70 = vmulq_n_f32(*v50, v10);
          v71 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 4 * a6), v10);
          v72 = vmulq_n_f32(*(float32x4_t *)((char *)v50 + 8 * a6), v10);
          v73 = vmulq_n_f32(vsubq_f32(v70, v67), v38);
          v70.f32[0] = *v59;
          v74 = vmlsq_lane_f32(vsubq_f32(v71, vaddq_f32(v63, v54)), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v57;
          v71.i32[0] = v57[1];
          v75 = vmlsq_lane_f32(vsubq_f32(v72, v68), v73, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = *v56;
          v72.i32[0] = v56[1];
          v76 = vmulq_n_f32(v74, v40);
          v77 = vmlsq_lane_f32(vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v50 + 12 * a6), v10), v69), v73, *(float32x2_t *)v70.f32, 0), v76, *(float32x2_t *)v72.f32, 0);
          v78 = vmulq_n_f32(vmlsq_lane_f32(v75, v76, *(float32x2_t *)v71.f32, 0), v42);
          v70.i32[0] = v56[2];
          *v50 = v73;
          *(float32x4_t *)((char *)v50 + 4 * a6) = v76;
          *(float32x4_t *)((char *)v50 + 8 * a6) = v78;
          *(float32x4_t *)((char *)v50 + 12 * a6) = vmulq_n_f32(vmlsq_lane_f32(v77, v78, *(float32x2_t *)v70.f32, 0), v44);
          v45 += 4;
        }
        while (v45 < v35);
      }
      v12 = v104;
      v9 = v106;
      if (v45 < v104)
        break;
LABEL_36:
      v37 += 4;
      if (v37 >= v105)
        return;
    }
    v79 = (__int32 *)&v106[v37 * a4];
    v80 = (__int32 *)&v106[v109];
    v81 = (__int32 *)&v106[v41];
    v82 = (__int32 *)&v106[v110];
    while (1)
    {
      v83 = &__X[v45];
      v84 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v91.i32[0] = *v79;
        v91.i32[1] = *v80;
        v91.i32[2] = *v81;
        v91.i32[3] = *v82;
        v92 = *v83;
        v83 += a6;
        v85 = v37 - 1;
        v86 = vmlaq_n_f32((float32x4_t)0, v91, v92);
        v87 = v82 + 1;
        v88 = v81 + 1;
        v89 = (uint64_t *)(v80 + 1);
        v90 = (uint64_t *)(v79 + 1);
        if (v37 != 1)
        {
          do
          {
LABEL_34:
            v93 = *v90++;
            v94.i64[0] = v93;
            v95 = *v89++;
            v96.i64[0] = v95;
            v97 = *(_QWORD *)v88;
            v88 += 2;
            v98 = v97;
            v99 = *(_QWORD *)v87;
            v87 += 2;
            v94.i64[1] = v98;
            v96.i64[1] = v99;
            v86 = vmlaq_n_f32(v86, (float32x4_t)vtrn1q_s32(v94, v96), *v83);
            v84 = vmlaq_n_f32(v84, (float32x4_t)vtrn2q_s32(v94, v96), v83[a6]);
            v83 = (float *)((char *)v83 + v36);
            v85 -= 2;
          }
          while (v85);
        }
      }
      else
      {
        v85 = v37;
        v86 = 0uLL;
        v87 = (__int32 *)&v106[v110];
        v88 = (__int32 *)&v106[v108];
        v89 = (uint64_t *)&v106[v109];
        v90 = (uint64_t *)&v106[v37 * a4];
        if (v37)
          goto LABEL_34;
      }
      v100 = vaddq_f32(v86, v84);
      v101 = v38 * (float)-(float)(v100.f32[0] - (float)(*v83 * v10));
      v102 = v40 * (float)((float)-(float)(v100.f32[1] - (float)(v83[a6] * v10)) - (float)(v101 * *(float *)v89));
      v103 = v42
           * (float)((float)((float)-(float)(v100.f32[2] - (float)(v83[2 * a6] * v10)) - (float)(v101 * *(float *)v88))
                   - (float)(v102 * *((float *)v88 + 1)));
      v100.f32[0] = v44
                  * (float)((float)((float)((float)-(float)(v100.f32[3] - (float)(v83[3 * a6] * v10))
                                          - (float)(v101 * *(float *)v87))
                                  - (float)(v102 * *((float *)v87 + 1)))
                          - (float)(v103 * *((float *)v87 + 2)));
      *v83 = v101;
      v83[a6] = v102;
      v83[2 * a6] = v103;
      v83[3 * a6] = v100.f32[0];
      if (++v45 == v104)
        goto LABEL_36;
    }
  }
}

void sub_20E83E258(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x2_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float *v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;

  v12 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v24 = *(float *)(a3 + 4 * (v12 + v12 * a4) - 4);
        v25 = (float *)(a5 + 4 * v12 * a6);
        v26 = (float *)(a5 + a6 * (4 * a2 - 8));
        v27 = __N;
        do
        {
          v28 = *v25 * a7;
          *v25++ = v28;
          *v26 = (float)(*v26 * a7) - (float)(v28 * v24);
          ++v26;
          --v27;
        }
        while (v27);
      }
      v12 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      v82 = a7;
      cblas_sscal(__N, a7, (float *)(a5 + 4 * v12 * a6), 1);
      a7 = v82;
      v12 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v13 = a3 + 4 * (v12 + v12 * a4);
      v14 = *(float *)(v13 - 8);
      v15 = *(float *)(v13 - 4);
      v16 = *(float *)(a3 + 4 * (a2 + (a2 - 2) * a4) - 12);
      v17 = (float *)(a5 + 4 * v12 * a6);
      v18 = (float *)(a5 + a6 * (4 * a2 - 8));
      v19 = (float *)(a5 + a6 * (4 * a2 - 12));
      v20 = __N;
      do
      {
        v21 = *v17 * a7;
        *v17 = v21;
        v22 = (float)(*v18 * a7) - (float)(v21 * v15);
        *v18++ = v22;
        v23 = *v17++;
        *v19 = -(float)((float)((float)(v16 * v22) + (float)(v23 * v14)) - (float)(*v19 * a7));
        ++v19;
        --v20;
      }
      while (v20);
    }
    v12 = a2 - 4;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v29 = v12 + 1;
    v30 = 8 * a4;
    v31 = 8 * a6;
    while (1)
    {
      v32 = v29 - 4;
      if (__N >= 4)
      {
        v33 = 0;
        v34 = a3 + 4 * v32;
        v35 = (float32x2_t *)(v34 + 4 * v29 * a4);
        v36 = 4;
        if (a2 - v32 > 4)
          v36 = a2 - v32;
        v37 = (__int32 *)(v34 + 4 * (v29 - 1) * a4);
        v38 = &v37[-a4];
        while (1)
        {
          v39 = a5 + 4 * v33;
          v40 = (float32x4_t *)(v39 + 4 * v29 * a6);
          v41 = 0uLL;
          if ((v36 & 1) != 0)
          {
            v47 = vmlaq_n_f32((float32x4_t)0, *v40, COERCE_FLOAT(*(_OWORD *)v35->f32));
            v44 = vmlaq_lane_f32((float32x4_t)0, *v40, *v35, 1);
            v43 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 2);
            v42 = vmlaq_laneq_f32((float32x4_t)0, *v40, *(float32x4_t *)v35->f32, 3);
            v40 = (float32x4_t *)((char *)v40 + 4 * a6);
            v45 = v36 - 5;
            v46 = (float32x2_t *)((char *)v35 + 4 * a4);
            if (v36 != 5)
            {
LABEL_21:
              v48 = 0uLL;
              v49 = 0uLL;
              v50 = 0uLL;
              do
              {
                v47 = vmlaq_n_f32(v47, *v40, COERCE_FLOAT(*(_OWORD *)v46->f32));
                v44 = vmlaq_lane_f32(v44, *v40, *v46, 1);
                v43 = vmlaq_laneq_f32(v43, *v40, *(float32x4_t *)v46->f32, 2);
                v42 = vmlaq_laneq_f32(v42, *v40, *(float32x4_t *)v46->f32, 3);
                v51 = *(float32x4_t *)&v46->f32[a4];
                v52 = *(float32x4_t *)((char *)v40 + 4 * a6);
                v48 = vmlaq_n_f32(v48, v52, v51.f32[0]);
                v49 = vmlaq_lane_f32(v49, v52, *(float32x2_t *)v51.f32, 1);
                v50 = vmlaq_laneq_f32(v50, v52, v51, 2);
                v41 = vmlaq_laneq_f32(v41, v52, v51, 3);
                v46 = (float32x2_t *)((char *)v46 + v30);
                v40 = (float32x4_t *)((char *)v40 + v31);
                v45 -= 2;
              }
              while (v45);
              goto LABEL_26;
            }
          }
          else
          {
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            v45 = v36 - 4;
            v46 = v35;
            v47 = 0uLL;
            if (v36 != 4)
              goto LABEL_21;
          }
          v50 = 0uLL;
          v49 = 0uLL;
          v48 = 0uLL;
LABEL_26:
          v53 = vaddq_f32(v48, v47);
          v54 = vaddq_f32(v41, v42);
          v55 = (float32x4_t *)(v39 + 4 * v32 * a6);
          v56 = vmulq_n_f32(*(float32x4_t *)((char *)v55 + 4 * a6), a7);
          v57 = vsubq_f32(vmulq_n_f32(*v55, a7), v53);
          v58 = vsubq_f32(v56, vaddq_f32(v49, v44));
          v59 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 8 * a6), a7), vaddq_f32(v50, v43));
          v60 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v55 + 12 * a6), a7), v54);
          v53.i32[0] = *v37;
          v56.i32[0] = v37[1];
          v61 = vmlsq_lane_f32(v57, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[2];
          v62 = vmlsq_lane_f32(v59, v60, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v37[-a4];
          v63 = vmlsq_lane_f32(v61, v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[1];
          v64 = vmlsq_lane_f32(vmlsq_lane_f32(v58, v60, *(float32x2_t *)v56.f32, 0), v62, *(float32x2_t *)v53.f32, 0);
          v53.i32[0] = v38[-a4];
          *v55 = vmlsq_lane_f32(v63, v64, *(float32x2_t *)v53.f32, 0);
          *(float32x4_t *)((char *)v55 + 4 * a6) = v64;
          *(float32x4_t *)((char *)v55 + 8 * a6) = v62;
          *(float32x4_t *)((char *)v55 + 12 * a6) = v60;
          v33 += 4;
          if (v33 >= __N - 3)
            goto LABEL_29;
        }
      }
      v33 = 0;
LABEL_29:
      if (v33 < __N)
        break;
LABEL_39:
      v81 = v29 < 5;
      v29 -= 4;
      if (v81)
        return;
    }
    v65 = a3 + 4 * v32;
    v66 = (float32x4_t *)(v65 + 4 * v29 * a4);
    v67 = a2 - v32;
    if (a2 - v32 <= 4)
      v67 = 4;
    v68 = (float *)(v65 + 4 * (v29 - 1) * a4);
    v69 = &v68[-a4];
    while (1)
    {
      v70 = a5 + 4 * v33;
      v71 = (float *)(v70 + 4 * v29 * a6);
      v72 = 0uLL;
      if ((v67 & 1) != 0)
      {
        v73 = vmlaq_n_f32((float32x4_t)0, *v66, *v71);
        v71 += a6;
        v74 = v67 - 5;
        v75 = (float32x4_t *)((char *)v66 + 4 * a4);
        if (v67 != 5)
        {
          do
          {
LABEL_37:
            v73 = vmlaq_n_f32(v73, *v75, *v71);
            v72 = vmlaq_n_f32(v72, *(float32x4_t *)((char *)v75 + 4 * a4), v71[a6]);
            v75 = (float32x4_t *)((char *)v75 + v30);
            v71 = (float *)((char *)v71 + v31);
            v74 -= 2;
          }
          while (v74);
        }
      }
      else
      {
        v73 = 0uLL;
        v74 = v67 - 4;
        v75 = v66;
        if (v67 != 4)
          goto LABEL_37;
      }
      v76 = vaddq_f32(v72, v73);
      v77 = (float *)(v70 + 4 * v32 * a6);
      v78 = -(float)(v76.f32[0] - (float)(*v77 * a7));
      v76.f32[0] = -(float)(v76.f32[3] - (float)(v77[3 * a6] * a7));
      v79 = (float)-(float)(v76.f32[2] - (float)(v77[2 * a6] * a7)) - (float)(v76.f32[0] * v68[2]);
      v80 = (float)((float)-(float)(v76.f32[1] - (float)(v77[a6] * a7)) - (float)(v76.f32[0] * v68[1]))
          - (float)(v79 * v69[1]);
      *v77 = (float)((float)(v78 - (float)(v76.f32[0] * *v68)) - (float)(v79 * v68[-a4])) - (float)(v80 * v69[-a4]);
      v77[a6] = v80;
      v77[2 * a6] = v79;
      v77[3 * a6] = v76.f32[0];
      if (++v33 == __N)
        goto LABEL_39;
    }
  }
}

void sub_20E83E6E8(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v9;
  float v10;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float v30;
  float v31;
  float *v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t *v50;
  uint64_t v51;
  float32x2_t *v52;
  __int32 *v53;
  __int32 *v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x2_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  float *v86;
  float *v87;
  uint64_t v88;
  float *v89;
  float32x4_t v90;
  float32x4_t *v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float *v95;
  float v96;
  float v97;
  float v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;

  v9 = a4;
  v10 = a7;
  v13 = a2 - 1;
  v103 = a3;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v29 = (float *)(a3 + 4 * (a4 + 1) * v13);
        v30 = *(v29 - 1);
        v31 = v10 / *v29;
        v32 = (float *)(a5 + 4 * v13 * a6);
        v33 = (float *)(a5 + a6 * (4 * a2 - 8));
        v34 = __N;
        v35 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 2));
        do
        {
          v36 = v31 * *v32;
          *v32++ = v36;
          *v33 = v35 * (float)((float)(*v33 * v10) - (float)(v36 * v30));
          ++v33;
          --v34;
        }
        while (v34);
      }
      v13 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *(float *)(a3 + 4 * (v13 + v13 * a4)), (float *)(a5 + 4 * v13 * a6), 1);
      v10 = a7;
      a3 = v103;
      v9 = a4;
      v13 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v14 = (float *)(a3 + 4 * (a4 + 1) * v13);
      v16 = *(v14 - 2);
      v15 = *(v14 - 1);
      v17 = (a2 - 2) * a4;
      v18 = *(float *)(a3 + 4 * (a2 - 3 + v17));
      v19 = v10 / *v14;
      v20 = 1.0 / *(float *)(a3 + 4 * (v17 + a2 - 2));
      v21 = (float *)(a5 + 4 * v13 * a6);
      v22 = (float *)(a5 + a6 * (4 * a2 - 8));
      v23 = (float *)(a5 + a6 * (4 * a2 - 12));
      v24 = __N;
      v25 = 1.0 / *(float *)(a3 + 4 * (a4 + 1) * (a2 - 3));
      do
      {
        v26 = v19 * *v21;
        *v21 = v26;
        v27 = v20 * (float)((float)(*v22 * v10) - (float)(v26 * v15));
        *v22++ = v27;
        v28 = *v21++;
        *v23 = v25 * (float)-(float)((float)((float)(v18 * v27) + (float)(v28 * v16)) - (float)(*v23 * v10));
        ++v23;
        --v24;
      }
      while (v24);
    }
    v13 = a2 - 4;
  }
  v102 = a2;
  if ((v13 & 0x8000000000000000) == 0)
  {
    v37 = v13 + 1;
    v38 = 8 * v9;
    v100 = v9 + 1;
    v39 = v9;
    v40 = -v9;
    v41 = 8 * a6;
    while (1)
    {
      v42 = v37 - 4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v37 - 4) * v100);
      v44 = 1.0 / *(float *)(a3 + 4 * (v37 - 3) * v100);
      v45 = 1.0 / *(float *)(a3 + 4 * (v37 - 2) * v100);
      v46 = (v37 - 1) * v9;
      v47 = 1.0 / *(float *)(a3 + 4 * (v37 - 1 + v46));
      if (__N >= 4)
      {
        v48 = 0;
        v49 = a3 + 4 * v42;
        v50 = (float32x2_t *)(v49 + 4 * v37 * v9);
        if (v102 - v42 <= 4)
          v51 = 4;
        else
          v51 = v102 - v42;
        v52 = (float32x2_t *)((char *)v50 + 4 * v9);
        v53 = (__int32 *)(v49 + 4 * v46);
        v54 = &v53[v40];
        while (1)
        {
          v55 = a5 + 4 * v48;
          v56 = (float32x4_t *)(v55 + 4 * v37 * a6);
          v57 = 0uLL;
          if ((v51 & 1) != 0)
          {
            v63 = vmlaq_n_f32((float32x4_t)0, *v56, COERCE_FLOAT(*(_OWORD *)v50->f32));
            v60 = vmlaq_lane_f32((float32x4_t)0, *v56, *v50, 1);
            v59 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 2);
            v58 = vmlaq_laneq_f32((float32x4_t)0, *v56, *(float32x4_t *)v50->f32, 3);
            v56 = (float32x4_t *)((char *)v56 + 4 * a6);
            v61 = v51 - 5;
            v62 = v52;
            if (v51 != 5)
            {
LABEL_22:
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v63 = vmlaq_n_f32(v63, *v56, COERCE_FLOAT(*(_OWORD *)v62->f32));
                v60 = vmlaq_lane_f32(v60, *v56, *v62, 1);
                v59 = vmlaq_laneq_f32(v59, *v56, *(float32x4_t *)v62->f32, 2);
                v58 = vmlaq_laneq_f32(v58, *v56, *(float32x4_t *)v62->f32, 3);
                v67 = *(float32x4_t *)&v62->f32[v39];
                v68 = *(float32x4_t *)((char *)v56 + 4 * a6);
                v64 = vmlaq_n_f32(v64, v68, v67.f32[0]);
                v65 = vmlaq_lane_f32(v65, v68, *(float32x2_t *)v67.f32, 1);
                v66 = vmlaq_laneq_f32(v66, v68, v67, 2);
                v57 = vmlaq_laneq_f32(v57, v68, v67, 3);
                v62 = (float32x2_t *)((char *)v62 + v38);
                v56 = (float32x4_t *)((char *)v56 + v41);
                v61 -= 2;
              }
              while (v61);
              goto LABEL_27;
            }
          }
          else
          {
            v58 = 0uLL;
            v59 = 0uLL;
            v60 = 0uLL;
            v61 = v51 - 4;
            v62 = v50;
            v63 = 0uLL;
            if (v51 != 4)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v69 = vaddq_f32(v64, v63);
          v70 = vaddq_f32(v65, v60);
          v71 = vaddq_f32(v57, v58);
          v72 = (float32x4_t *)(v55 + 4 * v42 * a6);
          v73 = vmulq_n_f32(*(float32x4_t *)((char *)v72 + 8 * a6), v10);
          v74 = vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 4 * a6), v10), v70);
          v75 = vsubq_f32(v73, vaddq_f32(v66, v59));
          v76 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v72 + 12 * a6), v10), v71), v47);
          v70.i32[0] = *v53;
          v73.i32[0] = v53[1];
          v77 = vmlsq_lane_f32(vsubq_f32(vmulq_n_f32(*v72, v10), v69), v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[2];
          v78 = vmlsq_lane_f32(v75, v76, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v53[v40];
          v79 = vmulq_n_f32(v78, v45);
          v80 = vmlsq_lane_f32(v77, v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[1];
          v81 = vmlsq_lane_f32(vmlsq_lane_f32(v74, v76, *(float32x2_t *)v73.f32, 0), v79, *(float32x2_t *)v70.f32, 0);
          v70.i32[0] = v54[v40];
          v82 = vmulq_n_f32(v81, v44);
          *v72 = vmulq_n_f32(vmlsq_lane_f32(v80, v82, *(float32x2_t *)v70.f32, 0), v43);
          *(float32x4_t *)((char *)v72 + 4 * a6) = v82;
          *(float32x4_t *)((char *)v72 + 8 * a6) = v79;
          *(float32x4_t *)((char *)v72 + 12 * a6) = v76;
          v48 += 4;
          if (v48 >= __N - 3)
            goto LABEL_30;
        }
      }
      v48 = 0;
LABEL_30:
      a3 = v103;
      v9 = a4;
      if (v48 < __N)
        break;
LABEL_40:
      v99 = v37 < 5;
      v37 -= 4;
      if (v99)
        return;
    }
    v83 = v103 + 4 * v42;
    v84 = (float32x4_t *)(v83 + 4 * v37 * a4);
    v85 = v102 - v42;
    if (v102 - v42 <= 4)
      v85 = 4;
    v86 = (float *)(v83 + 4 * v46);
    v87 = &v86[v40];
    while (1)
    {
      v88 = a5 + 4 * v48;
      v89 = (float *)(v88 + 4 * v37 * a6);
      v90 = 0uLL;
      if ((v85 & 1) != 0)
      {
        v93 = vmlaq_n_f32((float32x4_t)0, *v84, *v89);
        v89 += a6;
        v91 = (float32x4_t *)((char *)v84 + 4 * a4);
        v92 = v85 - 5;
        if (v85 != 5)
        {
          do
          {
LABEL_38:
            v93 = vmlaq_n_f32(v93, *v91, *v89);
            v90 = vmlaq_n_f32(v90, *(float32x4_t *)((char *)v91 + v39 * 4), v89[a6]);
            v89 = (float *)((char *)v89 + v41);
            v91 = (float32x4_t *)((char *)v91 + v38);
            v92 -= 2;
          }
          while (v92);
        }
      }
      else
      {
        v91 = v84;
        v92 = v85 - 4;
        v93 = 0uLL;
        if (v85 != 4)
          goto LABEL_38;
      }
      v94 = vaddq_f32(v93, v90);
      v95 = (float *)(v88 + 4 * v42 * a6);
      v96 = -(float)(v94.f32[0] - (float)(*v95 * v10));
      v94.f32[0] = v47 * (float)-(float)(v94.f32[3] - (float)(v95[3 * a6] * v10));
      v97 = v45 * (float)((float)-(float)(v94.f32[2] - (float)(v95[2 * a6] * v10)) - (float)(v94.f32[0] * v86[2]));
      v98 = v44
          * (float)((float)((float)-(float)(v94.f32[1] - (float)(v95[a6] * v10)) - (float)(v94.f32[0] * v86[1]))
                  - (float)(v97 * v87[1]));
      *v95 = v43
           * (float)((float)((float)(v96 - (float)(v94.f32[0] * *v86)) - (float)(v97 * v86[v40]))
                   - (float)(v98 * v87[v40]));
      v95[a6] = v98;
      v95[2 * a6] = v97;
      v95[3 * a6] = v94.f32[0];
      if (++v48 == __N)
        goto LABEL_40;
    }
  }
}

void sub_20E83EC40(char *__b, uint64_t a2, uint64_t a3, unsigned int *a4, size_t __len)
{
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  unsigned int v21;
  char v22;

  v5 = __len;
  v6 = __b;
  v7 = *a4;
  if ((int)v7 < 1)
  {
    v16 = 0;
    v12 = __len;
  }
  else
  {
    v10 = 0;
    v11 = __b;
    v12 = __len;
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 8 * v10);
      v14 = *(int *)(a3 + 4 * v10);
      if (v13 < (unint64_t)v11 && v13 + v14 > (unint64_t)__b)
      {
        __b = (char *)malloc_type_malloc((int)__len, 0xDEECCD5uLL);
        v12 = v5;
        goto LABEL_14;
      }
      v12 -= v14;
      if (v12 < 1)
        break;
      ++v10;
      v11 += v14;
      if (v7 == v10)
        goto LABEL_13;
    }
    LODWORD(v7) = v10 + 1;
LABEL_13:
    v6 = 0;
LABEL_14:
    if ((int)v7 < 1)
    {
      v16 = v6;
      v6 = __b;
    }
    else
    {
      v17 = 0;
      v18 = __b;
      do
      {
        v19 = *(_DWORD *)(a3 + 4 * v17);
        if (v19 >= v5)
          v19 = v5;
        if (v19 >= 1)
        {
          v20 = *(char **)(a2 + 8 * v17);
          v21 = v19 + 1;
          do
          {
            v22 = *v20++;
            *v18++ = v22;
            --v21;
          }
          while (v21 > 1);
        }
        v5 -= v19;
        ++v17;
      }
      while (v17 != v7);
      v16 = v6;
      v6 = __b;
      __b = v18;
    }
  }
  if (v5 >= 1)
    memset(__b, 32, v5);
  if (v16)
  {
    memcpy(v16, v6, v12);
    free(v6);
  }
}

void sub_20E83EDA8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, float *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  if ((a1 & 1) != 0)
    sub_20E83EDF4(a2, a3, a4, a5, a6, a7, a8, a17, a9.f32[0], a10.f32[0]);
  else
    sub_20E83EFF8(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
}

void sub_20E83EDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, float *a7, uint64_t a8, float a9, float a10)
{
  float v10;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;

  v33 = a2;
  v34 = a7;
  v10 = a10;
  v31 = a3;
  v32 = a4;
  v35 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v29) = a8;
      else
        v29 = -a8;
      cblas_sscal(v33, a10, &v34[((v33 - 1) * a8) & (a8 >> 63)], v29);
    }
  }
  else
  {
    v16 = sub_20E84460C();
    v30[3] = v30;
    MEMORY[0x24BDAC7A8](v16);
    v18 = (void *)(((unint64_t)v30 - v17) & 0xFFFFFFFFFFFFFFC0);
    v20 = (uint64_t)v18 + 4 * v19;
    v22 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    bzero(v18, v21 & 0xFFFFFFFFFFFFFFFCLL);
    bzero((void *)(v20 + 2048), v22);
    if (a1 >= 1)
    {
      v23 = 0;
      v24 = a1;
      do
      {
        v25 = v24 - 512;
        if (v24 >= 512)
          v24 = 512;
        if (a1 - v23 >= 512)
          v26 = 512;
        else
          v26 = a1 - v23;
        if (a1 - v23 >= 1)
        {
          v27 = a5;
          v28 = (_DWORD *)v20;
          do
          {
            *v28++ = *v27;
            v27 += a6;
            --v24;
          }
          while (v24);
        }
        sub_20E84F68C(v26, v33, v31 + 4 * v23, v32, v20, v34, a8, a9, v10);
        v23 += 512;
        a5 += 512 * a6;
        v10 = 1.0;
        v24 = v25;
      }
      while (v23 < a1);
    }
  }
}

void sub_20E83EFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, float32x4_t a15, float32x4_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;

  if (a9.f32[0] == 0.0)
  {
    if (a10.f32[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v38) = a8;
      else
        v38 = -a8;
      cblas_sscal(a1, a10.f32[0], (float *)(a7 + 4 * (((a1 - 1) * a8) & (a8 >> 63))), v38);
    }
  }
  else
  {
    sub_20E84D9B0(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38);
  }
}

uint64_t sub_20E83F040(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x2_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t i;
  float32x4_t *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  __int32 *v20;
  float32x4_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  __int32 v32;
  float v33;
  __int32 v34;
  float v35;
  __int32 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t j;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x4_t v65;
  float v66;
  __int32 v67;
  float32x4_t v68;
  float v69;
  float v70;
  uint64_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  float32x4_t v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  uint64_t k;
  float32x4_t *v86;
  float32x2_t *v87;
  float32x4_t *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t m;
  float32x2_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float32x2_t v104;
  __int32 *v105;
  float32x2_t v106;

  v12 = 4 * a5;
  v13 = a12;
  v14 = a2 <= 3;
  for (i = a2 - 3; !v14; i -= 4)
  {
    v16 = a4;
    v17 = (__int32 *)a6;
    v18 = (__int32 *)a6 + a7;
    v19 = (__int32 *)&a6[a7];
    v20 = &v18[2 * a7];
    v21 = &a8[a12];
    v22 = __OFSUB__(result, 3);
    v23 = result - 3;
    if (result > 3)
    {
      do
      {
        v24 = a3;
        v25 = (float32x4_t)veorq_s8(a11, a11);
        v26 = v25;
        v27 = v25;
        v28 = v25;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v29 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v12);
        v30 = *(float *)v17++;
        v31 = v30;
        v32 = *v18++;
        v33 = *(float *)&v32;
        v34 = *v19++;
        v35 = *(float *)&v34;
        v36 = *v20++;
        v25 = vmlaq_n_f32(v25, v29, v31);
        v26 = vmlaq_n_f32(v26, v29, v33);
        v27 = vmlaq_n_f32(v27, v29, v35);
        v28 = vmlaq_n_f32(v28, v29, *(float *)&v36);
        v24 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v37 = *v16;
          v38 = *(float32x4_t *)((char *)v16 + v12);
          v40 = *(float32x2_t *)v17;
          v39 = (float32x2_t *)(v17 + 2);
          v41 = v40;
          v43 = *(float32x2_t *)v18;
          v42 = (float32x2_t *)(v18 + 2);
          v44 = v43;
          v46 = *(float32x2_t *)v19;
          v45 = (float32x2_t *)(v19 + 2);
          v47 = v46;
          v49 = *(float32x2_t *)v20;
          v48 = (float32x2_t *)(v20 + 2);
          v50 = v49;
          v14 = v24 <= 2;
          for (j = v24 - 2; !v14; j -= 2)
          {
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v52 = vmlaq_n_f32(v25, v37, v41.f32[0]);
            v53 = vmlaq_n_f32(v26, v37, v44.f32[0]);
            v54 = vmlaq_n_f32(v27, v37, v47.f32[0]);
            v55 = vmlaq_n_f32(v28, v37, v50.f32[0]);
            v37 = *v16;
            v25 = vmlaq_lane_f32(v52, v38, v41, 1);
            v56 = *v39++;
            v41 = v56;
            v26 = vmlaq_lane_f32(v53, v38, v44, 1);
            v57 = *v42++;
            v44 = v57;
            v27 = vmlaq_lane_f32(v54, v38, v47, 1);
            v58 = *v45++;
            v47 = v58;
            v28 = vmlaq_lane_f32(v55, v38, v50, 1);
            v59 = *v48++;
            v50 = v59;
            v38 = *(float32x4_t *)((char *)v16 + v12);
            v14 = j <= 2;
          }
          v16 = (float32x4_t *)((char *)v16 + 2 * v12);
          v25 = vmlaq_lane_f32(vmlaq_n_f32(v25, v37, v41.f32[0]), v38, v41, 1);
          v26 = vmlaq_lane_f32(vmlaq_n_f32(v26, v37, v44.f32[0]), v38, v44, 1);
          v27 = vmlaq_lane_f32(vmlaq_n_f32(v27, v37, v47.f32[0]), v38, v47, 1);
          v28 = vmlaq_lane_f32(vmlaq_n_f32(v28, v37, v50.f32[0]), v38, v50, 1);
        }
        v60 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v25, a9), *a8, a10);
        v61 = vmlaq_n_f32(vmulq_n_f32(v27, a9), *v60, a10);
        v62 = vmlaq_n_f32(vmulq_n_f32(v28, a9), *(float32x4_t *)((char *)v60 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v60 = v61;
        *(float32x4_t *)((char *)v60 + 4 * a12) = v62;
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)v16 - v12 * a3 + 16);
        v22 = __OFSUB__(v23, 4);
        v14 = v23 <= 4;
        v23 -= 4;
      }
      while (!v14);
    }
    v63 = result & 3;
    if (!v22 && v63 != 0)
    {
      do
      {
        v64 = a3;
        v65 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0)
          goto LABEL_15;
        v66 = v16->f32[0];
        v16 = (float32x4_t *)((char *)v16 + v12);
        v67 = *v17++;
        v68.i32[0] = v67;
        v68.i32[1] = *v18++;
        v68.i32[2] = *v19++;
        v68.i32[3] = *v20++;
        v65 = vmlaq_n_f32(v65, v68, v66);
        v64 = a3 - 1;
        if (a3 > 1)
        {
LABEL_15:
          do
          {
            v69 = v16->f32[0];
            v70 = v16->f32[(unint64_t)v12 / 4];
            v16 = (float32x4_t *)((char *)v16 + 2 * v12);
            v71 = *(_QWORD *)v17;
            v17 += 2;
            v72.i64[0] = v71;
            v73 = *(_QWORD *)v18;
            v18 += 2;
            v74.i64[0] = v73;
            v75 = *(_QWORD *)v19;
            v19 += 2;
            v76 = v75;
            v77 = *(_QWORD *)v20;
            v20 += 2;
            v72.i64[1] = v76;
            v74.i64[1] = v77;
            v65 = vmlaq_n_f32(vmlaq_n_f32(v65, (float32x4_t)vtrn1q_s32(v72, v74), v69), (float32x4_t)vtrn2q_s32(v72, v74), v70);
            v14 = v64 <= 2;
            v64 -= 2;
          }
          while (!v14);
        }
        v79.i32[0] = a8->i32[0];
        v78 = (__int32 *)((char *)a8 + v13 * 4);
        v79.i32[1] = *v78;
        v80 = &v78[v13];
        v79.i32[2] = *v80;
        v81 = &v80[v13];
        v79.i32[3] = *v81;
        v82 = &v81[a12 + -4 * a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v65, a9), v79, a10);
        v83 = &v82[v13];
        *v82 = a11.i32[0];
        a8 = (float32x4_t *)(v82 + 1);
        *v83 = a11.i32[1];
        v84 = &v83[v13];
        *v84 = a11.i32[2];
        v84[a12] = a11.i32[3];
        v17 = (__int32 *)a6;
        v18 = (__int32 *)a6 + a7;
        v19 = (__int32 *)&a6[a7];
        v20 = &v18[2 * a7];
        v16 = (float32x4_t *)((char *)&v16->i32[1] - v12 * a3);
        v14 = v63-- <= 1;
      }
      while (!v14);
    }
    a6 += 2 * a7;
    a8 = v21;
    v14 = i <= 4;
  }
  v14 = i <= -3;
  for (k = i + 3; !v14; --k)
  {
    v86 = a4;
    v87 = a6;
    v88 = (float32x4_t *)((char *)a8 + v13 * 4);
    v89 = __OFSUB__(result, 3);
    v90 = result - 3;
    if (result > 3)
    {
      do
      {
        v91 = a3;
        v92 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v93 = *v86,
              v86 = (float32x4_t *)((char *)v86 + v12),
              v94 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              v92 = vmlaq_n_f32(v92, v93, v94),
              v91 = a3 - 1,
              a3 > 1))
        {
          v95 = *v86;
          v96 = *(float32x4_t *)((char *)v86 + v12);
          v14 = v91 <= 2;
          for (m = v91 - 2; !v14; m -= 2)
          {
            v86 = (float32x4_t *)((char *)v86 + 2 * v12);
            v98 = *v87++;
            v99 = vmlaq_n_f32(v92, v95, v98.f32[0]);
            v95 = *v86;
            v92 = vmlaq_lane_f32(v99, v96, v98, 1);
            v96 = *(float32x4_t *)((char *)v86 + v12);
            v14 = m <= 2;
          }
          v86 = (float32x4_t *)((char *)v86 + 2 * v12);
          v92 = vmlaq_lane_f32(vmlaq_n_f32(v92, v95, COERCE_FLOAT(*v87)), v96, *v87, 1);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v92, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v87 = a6;
        v86 = (float32x4_t *)((char *)v86 - v12 * a3 + 16);
        v89 = __OFSUB__(v90, 4);
        v14 = v90 <= 4;
        v90 -= 4;
      }
      while (!v14);
    }
    v100 = result & 3;
    if (!v89 && v100 != 0)
    {
      do
      {
        v101 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v102 = v86->f32[0],
              v86 = (float32x4_t *)((char *)v86 + v12),
              v103 = v87->f32[0],
              v87 = (float32x2_t *)((char *)v87 + 4),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v103, v102),
              v101 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v104.i32[0] = v86->i32[0];
            v105 = (__int32 *)((char *)v86 + v12);
            v104.i32[1] = *v105;
            v86 = (float32x4_t *)&v105[(unint64_t)v12 / 4];
            v106 = *v87++;
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v106, v104);
            v14 = v101 <= 2;
            v101 -= 2;
          }
          while (!v14);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v87 = a6;
        v86 = (float32x4_t *)((char *)&v86->i32[1] - v12 * a3);
        v14 = v100-- <= 1;
      }
      while (!v14);
    }
    a6 = (float32x2_t *)((char *)a6 + 4 * a7);
    a8 = v88;
    v14 = k <= 1;
  }
  return result;
}

#error "20E83F440: call analysis failed (funcsize=45)"

#error "20E83F500: call analysis failed (funcsize=45)"

void sub_20E83F534(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, float *a8, float a9, int a10, char *a11, int a12)
{
  int v13;
  int v14;
  int v18;
  char *v21;
  char *v22;
  int v23;
  int v25;
  int v26;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char vars0;

  v13 = a7;
  v14 = a6;
  v18 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v23 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a10 < (int)a7 || a10 <= 0)
      {
        v33 = a10;
        v35 = a7;
        v22 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v36 = a2;
        v33 = 142;
        v35 = 141;
        v22 = "SIDE must be %d or %d, but is set to %d";
        v29 = 2;
        goto LABEL_41;
      }
      if (a10 < (int)a6 || a10 <= 0)
      {
        v33 = a10;
        v35 = a6;
        v22 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v29 = 10;
LABEL_41:
        v26 = cblas_errprn(v29, 2000, v22, v33, v35, v36);
        goto LABEL_43;
      }
    }
    v26 = 2000;
LABEL_43:
    if (a12 >= v13 && a12 > 0)
      goto LABEL_47;
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v26 = v23;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a10 >= (int)a7 && a10 > 0)
      goto LABEL_24;
    v32 = a10;
    v34 = a7;
    v21 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v34 = 141;
      v36 = a2;
      v32 = 142;
      v21 = "SIDE must be %d or %d, but is set to %d";
      v25 = 2;
      goto LABEL_26;
    }
    if (a10 >= (int)a6 && a10 > 0)
    {
LABEL_24:
      v26 = 2000;
      goto LABEL_27;
    }
    v32 = a10;
    v34 = a6;
    v21 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v25 = 10;
LABEL_26:
  v26 = cblas_errprn(v25, 2000, v21, v32, v34, v36);
LABEL_27:
  if (a12 < v14 || a12 <= 0)
  {
    v23 = cblas_errprn(12, v26, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v26 = cblas_errprn(3, v26, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v26 = cblas_errprn(4, v26, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v14 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v26 = cblas_errprn(6, v26, "M cannot be less than zero; it is set to %d.", v14);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v26 = cblas_errprn(5, v26, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v14 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v13 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v26 = cblas_errprn(7, v26, "N cannot be less than zero; it is set to %d.", v13);
LABEL_54:
  if (v26 == 2000)
  {
    if (a1 == 102)
    {
      sub_20E83D3E8(v18, a3, a4, a5, v14, v13, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
    else
    {
      if (v18 == 141)
        v30 = 142;
      else
        v30 = 141;
      if (a3 == 121)
        v31 = 122;
      else
        v31 = 121;
      sub_20E83D3E8(v30, v31, a4, a5, v13, v14, a8, a10, a9, a11, a12, 0, 0, 1, (uint64_t)a8, v38, v39, v40, v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v26, "cblas_strsm", "");
  }
}

void sub_20E83F8F0(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  double v20;
  double *v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  unint64_t *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  double *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  double *v48;
  int64x2_t *v49;
  int64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  double v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double *i64;
  float64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  uint64_t v91;
  float64x2_t *v92;
  float64x2_t *v93;
  double *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  float64x2_t *v97;
  uint64_t v98;
  int64x2_t *v99;
  int64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        v28 = *(double *)(a3 + 8 * a4);
        v29 = (unint64_t *)(__X + 1);
        v24 = 2;
        v30 = __N;
        do
        {
          *(_QWORD *)&a10.f64[0] = *v29;
          v31 = *((double *)v29 - 1) * a7;
          *((double *)v29 - 1) = v31;
          *(double *)v29 = a10.f64[0] * a7 - v31 * v28;
          v29 += __incX;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    v20 = *(double *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    a10.f64[0] = v21[1];
    v23 = __X + 2;
    v24 = 3;
    v25 = __N;
    do
    {
      v26 = *(v23 - 2) * a7;
      v27 = *(v23 - 1) * a7 - v26 * v20;
      *(v23 - 2) = v26;
      *(v23 - 1) = v27;
      *v23 = -(a10.f64[0] * v27 + v26 * v22 - *v23 * a7);
      v23 += __incX;
      --v25;
    }
    while (v25);
  }
  if (v24 < a1)
  {
    v32 = 3 * __incX;
    v33 = 32 * __incX;
    v34 = 2 * __incX;
    v35 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v37 = (unint64_t *)(a3 + 8 * v24 * a4);
        v38 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v40 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
        v41 = __X;
        do
        {
          v42 = (float64x2_t *)&v41[(unint64_t)v35 / 8];
          v43 = (float64x2_t *)&v41[v34];
          v44 = (float64x2_t *)&v41[v32];
          v39 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
          v45 = (float64x2_t *)v39;
          v46 = (float64x2_t *)v41;
          v47 = v24;
          v48 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v49 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v50 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v51 = (float64x2_t)veorq_s8(v13, v13);
          v52 = v51;
          v53 = v51;
          v54 = v51;
          v55 = v51;
          v56 = v51;
          v57 = v51;
          v58 = v51;
          if ((v24 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v37;
            v50 = (int64x2_t *)(v37 + 1);
            *(_QWORD *)&a11.f64[0] = *v38;
            v48 = (double *)(v38 + 1);
            *(_QWORD *)&a12.f64[0] = *v39;
            v45 = (float64x2_t *)(v39 + 1);
            *(_QWORD *)&a13.f64[0] = *v40;
            v49 = (int64x2_t *)(v40 + 1);
            v59 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v60 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v46 = (float64x2_t *)(v41 + 1);
            v61 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v62 = v43->f64[0];
            v43 = (float64x2_t *)((char *)v43 + 8);
            v63 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v51 = vmlaq_n_f64(v51, v59, *v41);
            v53 = vmlaq_n_f64(v53, v59, v61);
            v55 = vmlaq_n_f64(v55, v59, v62);
            v57 = vmlaq_n_f64(v57, v59, v63);
            v52 = vmlaq_n_f64(v52, v60, *v41);
            v54 = vmlaq_n_f64(v54, v60, v61);
            v56 = vmlaq_n_f64(v56, v60, v62);
            v58 = vmlaq_n_f64(v58, v60, v63);
            v47 = v24 - 1;
          }
          for (; v47; v47 -= 2)
          {
            v64 = *v50++;
            v65 = *(int64x2_t *)v48;
            v48 += 2;
            v66 = *(int64x2_t *)v45++;
            v67 = *v49++;
            v68 = (float64x2_t)vtrn1q_s64(v64, v65);
            v69 = (float64x2_t)vtrn1q_s64(v66, v67);
            v70 = (float64x2_t)vtrn2q_s64(v64, v65);
            v71 = (float64x2_t)vtrn2q_s64(v66, v67);
            v72 = *v46++;
            v73 = *v42++;
            v74 = *v43++;
            v75 = *v44++;
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v68, v72.f64[0]), v70, v72, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v68, v73.f64[0]), v70, v73, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v68, v74.f64[0]), v70, v74, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v68, v75.f64[0]), v70, v75, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v69, v72.f64[0]), v71, v72, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v69, v73.f64[0]), v71, v73, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v69, v74.f64[0]), v71, v74, 1);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v69, v75.f64[0]), v71, v75, 1);
          }
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v46, a7), v51);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v46[1], a7), v52);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v42, a7), v53);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v42[1], a7), v54);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v43, a7), v55);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(v43[1], a7), v56);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v44, a7), v57);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(v44[1], a7), v58);
          v84 = (float64x2_t)vtrn2q_s64(v76, v78);
          v85 = (float64x2_t)vtrn1q_s64(v76, v78);
          v86 = (float64x2_t)vtrn1q_s64(v80, v82);
          v88 = *(float64x2_t *)v49;
          i64 = (double *)v49[1].i64;
          a12 = vmlsq_lane_f64(v84, v85, *v48, 0);
          a13 = vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v80, v82), v86, *v48, 0);
          a10 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v85, v45->f64[0], 0), a12, *v45, 1);
          a11 = vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v81, v83), v86, v45->f64[0], 0), a13, *v45, 1);
          v89 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v77, v79), v85, v88.f64[0], 0), a12, v88, 1), a10, *i64, 0);
          v90 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v81, v83), v86, v88.f64[0], 0), a13, v88, 1), a11, *i64, 0);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v85, (int64x2_t)a12);
          *v46 = (float64x2_t)v13;
          v46[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v42 = vtrn2q_s64((int64x2_t)v85, (int64x2_t)a12);
          v42[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, v89);
          *(int64x2_t *)v43 = vtrn1q_s64((int64x2_t)v86, (int64x2_t)a13);
          v43[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, v90);
          *(int64x2_t *)v44 = vtrn2q_s64((int64x2_t)v86, (int64x2_t)a13);
          v44[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, v90);
          v36 += 4;
          v41 = (double *)((char *)v41 + v33);
        }
        while (v36 < __N - 3);
      }
      v91 = __N - v36;
      if (__N > v36)
      {
        v93 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
        v94 = (double *)((char *)__X + v35 * v36);
        do
        {
          v92 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v95 = (int64x2_t *)v92;
          v96 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v97 = (float64x2_t *)v94;
          v98 = v24;
          v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v101 = (float64x2_t)veorq_s8(v13, v13);
          v102 = v101;
          if ((v24 & 1) != 0)
          {
            v95 = (int64x2_t *)&v92->f64[1];
            v99 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4) + 8);
            v96 = (int64x2_t *)&v93->f64[1];
            v100 = (int64x2_t *)(a3 + 8 * (v24 + 3) * a4 + 8);
            a10.f64[0] = *v94;
            v97 = (float64x2_t *)(v94 + 1);
            v101 = vmlaq_n_f64(v101, *v92, *v94);
            v102 = vmlaq_n_f64(v102, *v93, *v94);
            v98 = v24 - 1;
          }
          for (; v98; v98 -= 2)
          {
            v103 = *v95++;
            v104 = *v99++;
            v105 = *v96++;
            v106 = *v100++;
            a10 = *v97++;
            v101 = vmlaq_laneq_f64(vmlaq_n_f64(v101, (float64x2_t)vtrn1q_s64(v103, v104), a10.f64[0]), (float64x2_t)vtrn2q_s64(v103, v104), a10, 1);
            v102 = vmlaq_laneq_f64(vmlaq_n_f64(v102, (float64x2_t)vtrn1q_s64(v105, v106), a10.f64[0]), (float64x2_t)vtrn2q_s64(v105, v106), a10, 1);
          }
          v107 = vsubq_f64(vmulq_n_f64(*v97, a7), v101);
          v108.f64[0] = v107.f64[0];
          *(_QWORD *)&a10.f64[1] = v99->i64[0];
          a11 = *(float64x2_t *)v96;
          a12 = *(float64x2_t *)v100;
          v13 = (int8x16_t)vmlsq_lane_f64(v107, a10, v107.f64[0], 0);
          *(_QWORD *)&v108.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v96, *v100);
          v109 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v97[1], a7), v102), (float64x2_t)vtrn1q_s64(*v96, *v100), v108.f64[0], 0), a13, v108, 1);
          v110.f64[0] = v109.f64[0];
          *(_QWORD *)&a10.f64[1] = v100[1].i64[0];
          v110.f64[1] = vmlsq_lane_f64(v109, a10, *(double *)&v109, 0).f64[1];
          *v97 = v108;
          v97[1] = v110;
          v94 = (double *)((char *)v94 + v35);
          --v91;
        }
        while (v91);
      }
      v24 += 4;
    }
    while (v24 < a1);
  }
}

void sub_20E83FDB4(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t *v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  uint64_t v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  unint64_t *v67;
  double *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  double *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  double v89;
  double v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *i64;
  float64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  uint64_t v118;
  double *v119;
  float64_t *v120;
  float64_t *v121;
  double *v122;
  uint64_t v123;
  int64x2_t *v124;
  int64x2_t *v125;
  int64x2_t *v126;
  int64x2_t *v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v28 = 2;
      }
      else
      {
        v33 = &a3[a4];
        v34 = a7 / *a3;
        v35 = *v33;
        v36 = v33[1];
        v37 = a5 + 1;
        v28 = 2;
        v38 = __N;
        v39 = 1.0 / v36;
        do
        {
          v40 = *v37;
          v41 = v34 * *(v37 - 1);
          *(v37 - 1) = v41;
          *v37 = v39 * (v40 * a7 - v41 * v35);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, a5, __incX);
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
  }
  else if (__N < 1)
  {
    v28 = 3;
  }
  else
  {
    v19 = &a3[a4];
    v20 = &a3[2 * a4];
    v21 = *v20;
    v22 = v20[1];
    v23 = a7 / *a3;
    v24 = *v19;
    v25 = 1.0 / v19[1];
    v26 = v20[2];
    v27 = a5 + 2;
    v28 = 3;
    v29 = __N;
    v30 = 1.0 / v26;
    do
    {
      v31 = v23 * *(v27 - 2);
      v32 = v25 * (*(v27 - 1) * a7 - v31 * v24);
      *(v27 - 2) = v31;
      *(v27 - 1) = v32;
      *(double *)v13.i64 = v22 * v32;
      *v27 = v30 * -(*(double *)v13.i64 + v31 * v21 - *v27 * a7);
      v27 += __incX;
      --v29;
    }
    while (v29);
  }
  if (v28 < a1)
  {
    v42 = a4 + 1;
    v43 = 3 * __incX;
    v44 = 32 * __incX;
    v45 = 2 * __incX;
    v46 = 8 * __incX;
    do
    {
      v47 = (float64x2_t *)&a3[v28 * a4];
      v48 = &v47->f64[v28];
      v49 = v28 + 1;
      v50 = &a3[(v28 + 1) * v42];
      v51 = v28 + 2;
      v52 = &a3[(v28 + 2) * v42];
      v53 = v28 + 3;
      v54 = &a3[(v28 + 3) * v42];
      v55 = vld1q_dup_f64(v48);
      v56 = vld1q_dup_f64(v50);
      v57 = vld1q_dup_f64(v52);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = &a3[v51 * a4];
        v67 = (unint64_t *)&a3[v53 * a4];
        v68 = a5;
        do
        {
          v69 = (float64x2_t *)&v68[(unint64_t)v46 / 8];
          v70 = (float64x2_t *)&v68[v45];
          v71 = (float64x2_t *)&v68[v43];
          v72 = (float64x2_t *)v68;
          v73 = v28;
          v65 = &a3[v49 * a4];
          v74 = v65;
          v75 = (int64x2_t *)&a3[v53 * a4];
          v76 = (int64x2_t *)&a3[v28 * a4];
          v77 = (float64x2_t *)&a3[v51 * a4];
          v78 = (float64x2_t)veorq_s8(v13, v13);
          v79 = v78;
          v80 = v78;
          v81 = v78;
          v82 = v78;
          v83 = v78;
          v84 = v78;
          v85 = v78;
          if ((v28 & 1) != 0)
          {
            v57.f64[0] = v47->f64[0];
            v76 = (int64x2_t *)&v47->f64[1];
            v58.f64[0] = *v65;
            v74 = v65 + 1;
            v59.f64[0] = *v66;
            v77 = (float64x2_t *)(v66 + 1);
            *(_QWORD *)&a13.f64[0] = *v67;
            v75 = (int64x2_t *)(v67 + 1);
            v86 = (float64x2_t)vtrn1q_s64((int64x2_t)v57, (int64x2_t)v58);
            v87 = (float64x2_t)vtrn1q_s64((int64x2_t)v59, (int64x2_t)a13);
            v72 = (float64x2_t *)(v68 + 1);
            v88 = v69->f64[0];
            v69 = (float64x2_t *)((char *)v69 + 8);
            v89 = v70->f64[0];
            v70 = (float64x2_t *)((char *)v70 + 8);
            v90 = v71->f64[0];
            v71 = (float64x2_t *)((char *)v71 + 8);
            v78 = vmlaq_n_f64(v78, v86, *v68);
            v80 = vmlaq_n_f64(v80, v86, v88);
            v82 = vmlaq_n_f64(v82, v86, v89);
            v84 = vmlaq_n_f64(v84, v86, v90);
            v79 = vmlaq_n_f64(v79, v87, *v68);
            v81 = vmlaq_n_f64(v81, v87, v88);
            v83 = vmlaq_n_f64(v83, v87, v89);
            v85 = vmlaq_n_f64(v85, v87, v90);
            v73 = v28 - 1;
          }
          for (; v73; v73 -= 2)
          {
            v91 = *v76++;
            v92 = *(int64x2_t *)v74;
            v74 += 2;
            v93 = *(int64x2_t *)v77++;
            v94 = *v75++;
            v95 = (float64x2_t)vtrn1q_s64(v91, v92);
            v96 = (float64x2_t)vtrn1q_s64(v93, v94);
            v97 = (float64x2_t)vtrn2q_s64(v91, v92);
            v98 = (float64x2_t)vtrn2q_s64(v93, v94);
            v99 = *v72++;
            v100 = *v69++;
            v101 = *v70++;
            v102 = *v71++;
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v95, v99.f64[0]), v97, v99, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v95, v100.f64[0]), v97, v100, 1);
            v82 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v95, v101.f64[0]), v97, v101, 1);
            v84 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v95, v102.f64[0]), v97, v102, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v96, v99.f64[0]), v98, v99, 1);
            v81 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v96, v100.f64[0]), v98, v100, 1);
            v83 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v96, v101.f64[0]), v98, v101, 1);
            v85 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v96, v102.f64[0]), v98, v102, 1);
          }
          v103 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v72, a7), v78);
          v104 = (int64x2_t)vsubq_f64(vmulq_n_f64(v72[1], a7), v79);
          v105 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v80);
          v106 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v81);
          v107 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v82);
          v108 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v83);
          v109 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v84);
          v110 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v85);
          v111 = (float64x2_t)vtrn2q_s64(v103, v105);
          v112 = vmulq_f64((float64x2_t)vtrn1q_s64(v103, v105), v60);
          v113 = vmulq_f64((float64x2_t)vtrn1q_s64(v107, v109), v60);
          v115 = *(float64x2_t *)v75;
          i64 = (double *)v75[1].i64;
          v59 = vmulq_f64(vmlsq_lane_f64(v111, v112, *v74, 0), v61);
          a13 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v107, v109), v113, *v74, 0), v61);
          v57 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v104, v106), v112, v77->f64[0], 0), v59, *v77, 1), v62);
          v58 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v108, v110), v113, v77->f64[0], 0), a13, *v77, 1), v62);
          v116 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v104, v106), v112, v115.f64[0], 0), v59, v115, 1), v57, *i64, 0), v63);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64((float64x2_t)vtrn2q_s64(v108, v110), v113, v115.f64[0], 0), a13, v115, 1), v58, *i64, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v59);
          *v72 = (float64x2_t)v13;
          v72[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v69 = vtrn2q_s64((int64x2_t)v112, (int64x2_t)v59);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v57, v116);
          *(int64x2_t *)v70 = vtrn1q_s64((int64x2_t)v113, (int64x2_t)a13);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v58, v117);
          *(int64x2_t *)v71 = vtrn2q_s64((int64x2_t)v113, (int64x2_t)a13);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v58, v117);
          v64 += 4;
          v68 = (double *)((char *)v68 + v44);
        }
        while (v64 < __N - 3);
      }
      v118 = __N - v64;
      if (__N > v64)
      {
        v119 = &a3[v49 * a4];
        v120 = &a3[v51 * a4];
        v121 = &a3[v53 * a4];
        v122 = (double *)((char *)a5 + v46 * v64);
        do
        {
          v123 = v28;
          v124 = (int64x2_t *)v119;
          v125 = (int64x2_t *)v121;
          v126 = (int64x2_t *)&a3[v28 * a4];
          v127 = (int64x2_t *)v120;
          v128 = (float64x2_t *)v122;
          v129 = (float64x2_t)veorq_s8(v13, v13);
          v130 = v129;
          if ((v28 & 1) != 0)
          {
            v126 = (int64x2_t *)&v47->f64[1];
            v124 = (int64x2_t *)(v119 + 1);
            v131.f64[0] = *v120;
            v127 = (int64x2_t *)(v120 + 1);
            v125 = (int64x2_t *)(v121 + 1);
            v57.f64[0] = *v122;
            v128 = (float64x2_t *)(v122 + 1);
            v131.f64[1] = *v121;
            v129 = vmlaq_n_f64(v129, *v47, *v122);
            v130 = vmlaq_n_f64(v130, v131, *v122);
            v123 = v28 - 1;
          }
          for (; v123; v123 -= 2)
          {
            v132 = *v126++;
            v133 = *v124++;
            v134 = *v127++;
            v135 = *v125++;
            v57 = *v128++;
            v129 = vmlaq_laneq_f64(vmlaq_n_f64(v129, (float64x2_t)vtrn1q_s64(v132, v133), v57.f64[0]), (float64x2_t)vtrn2q_s64(v132, v133), v57, 1);
            v130 = vmlaq_laneq_f64(vmlaq_n_f64(v130, (float64x2_t)vtrn1q_s64(v134, v135), v57.f64[0]), (float64x2_t)vtrn2q_s64(v134, v135), v57, 1);
          }
          v136 = vsubq_f64(vmulq_n_f64(*v128, a7), v129);
          v137.f64[0] = v136.f64[0] * v60.f64[0];
          *(_QWORD *)&v57.f64[1] = v124->i64[0];
          v13 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v136, v57, v136.f64[0] * v60.f64[0], 0), v61);
          *(_QWORD *)&v137.f64[1] = v13.i64[1];
          a13 = (float64x2_t)vtrn2q_s64(*v127, *v125);
          v138 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v128[1], a7), v130), (float64x2_t)vtrn1q_s64(*v127, *v125), v137.f64[0], 0), a13, v137, 1);
          v139.f64[0] = v138.f64[0] * v62.f64[0];
          *(_QWORD *)&v57.f64[1] = v125[1].i64[0];
          v139.f64[1] = vmulq_f64(vmlsq_lane_f64(v138, v57, *(double *)&v138 * *(double *)&v62, 0), v63).f64[1];
          *v128 = v137;
          v128[1] = v139;
          v122 = (double *)((char *)v122 + v46);
          --v118;
        }
        while (v118);
      }
      v28 += 4;
    }
    while (v28 < a1);
  }
}

void sub_20E840334(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double *v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  double *v95;
  float64x2_t v96;
  float64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  uint64_t v100;
  float64x2_t *v101;
  uint64_t v102;
  double *v103;
  float64x2_t *v104;
  uint64_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  BOOL v125;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v23 = *(double *)(a3 + 8 * (a1 + v14 * a4) - 16);
        v24 = (double *)(a5 + 8 * v14);
        v25 = __N;
        do
        {
          v26 = *(v24 - 1);
          v27 = *v24 * a7;
          *v24 = v27;
          *(v24 - 1) = v26 * a7 - v27 * v23;
          v24 += __incX;
          --v25;
        }
        while (v25);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = *(double *)(a3 + 8 * (a1 - 3 + (a1 - 2) * a4));
      v18 = (double *)(a5 + 8 * v14);
      v19 = __N;
      do
      {
        v20 = *(v18 - 1);
        v21 = *v18 * a7;
        *v18 = v21;
        v22 = v20 * a7 - v21 * v15;
        *(v18 - 2) = -(v17 * v22 + v21 * v16 - *(v18 - 2) * a7);
        *(v18 - 1) = v22;
        v18 += __incX;
        --v19;
      }
      while (v19);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v28 = 8 * a4;
    v29 = v14 + 1;
    v30 = 3 * __incX;
    v31 = a5 + 8 * v14 + 8;
    v32 = 32 * __incX;
    v33 = 2 * __incX;
    v34 = 8 * __incX;
    do
    {
      v35 = v29 - 4;
      if (__N < 4)
      {
        v36 = 0;
      }
      else
      {
        v36 = 0;
        v38 = a1 - v35;
        if (a1 - v35 <= 4)
          v38 = 4;
        v39 = (double *)v31;
        do
        {
          v40 = (float64x2_t *)&v39[(unint64_t)v34 / 8];
          v41 = (float64x2_t *)&v39[v33];
          v42 = (float64x2_t *)&v39[v30];
          v43 = (float64x2_t *)v39;
          v37 = a3 + 8 * v35 + 8 * v29 * a4;
          v44 = (float64x2_t *)v37;
          v45 = v38 - 4;
          v46 = (float64x2_t)veorq_s8(v7, v7);
          v47 = v46;
          v48 = v46;
          v49 = v46;
          v50 = v46;
          v51 = v46;
          v52 = v46;
          v53 = v46;
          if ((((_BYTE)v38 - 4) & 1) != 0)
          {
            v54 = *(float64x2_t *)(v37 + 16);
            v44 = (float64x2_t *)(v37 + v28);
            v43 = (float64x2_t *)(v39 + 1);
            v55 = v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8);
            v56 = v41->f64[0];
            v41 = (float64x2_t *)((char *)v41 + 8);
            v57 = v42->f64[0];
            v42 = (float64x2_t *)((char *)v42 + 8);
            v46 = vmlaq_n_f64(v46, *(float64x2_t *)v37, *v39);
            v48 = vmlaq_n_f64(v48, *(float64x2_t *)v37, v55);
            v50 = vmlaq_n_f64(v50, *(float64x2_t *)v37, v56);
            v52 = vmlaq_n_f64(v52, *(float64x2_t *)v37, v57);
            v47 = vmlaq_n_f64(v47, v54, *v39);
            v49 = vmlaq_n_f64(v49, v54, v55);
            v51 = vmlaq_n_f64(v51, v54, v56);
            v53 = vmlaq_n_f64(v53, v54, v57);
            v45 = v38 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v44;
            v60 = v44[1];
            v58 = (float64x2_t *)((char *)v44 + v28);
            v61 = *v58;
            v62 = v58[1];
            v44 = (float64x2_t *)((char *)v58 + v28);
            v63 = *v43++;
            v64 = *v40++;
            v65 = *v41++;
            v66 = *v42++;
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v59, v63.f64[0]), v61, v63, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v64, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v59, v65.f64[0]), v61, v65, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v59, v66.f64[0]), v61, v66, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v60, v63.f64[0]), v62, v63, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v64, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v60, v65.f64[0]), v62, v65, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v60, v66.f64[0]), v62, v66, 1);
          }
          v67 = (float64x2_t *)((char *)v44 - v28 * (v38 - 3));
          v68 = (float64x2_t *)((char *)v43 - 8 * v38);
          v69 = (float64x2_t *)((char *)v40 - 8 * v38);
          v70 = (float64x2_t *)((char *)v41 - 8 * v38);
          v71 = (float64x2_t *)((char *)v42 - 8 * v38);
          v72 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v68, a7), v46);
          v73 = (int64x2_t)vsubq_f64(vmulq_n_f64(v68[1], a7), v47);
          v74 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v69, a7), v48);
          v75 = (int64x2_t)vsubq_f64(vmulq_n_f64(v69[1], a7), v49);
          v76 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v70, a7), v50);
          v77 = (int64x2_t)vsubq_f64(vmulq_n_f64(v70[1], a7), v51);
          v78 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v71, a7), v52);
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(v71[1], a7), v53);
          v80 = (float64x2_t)vtrn2q_s64(v73, v75);
          v81 = (float64x2_t)vtrn2q_s64(v77, v79);
          v82 = (float64x2_t)vtrn1q_s64(v73, v75);
          v83 = (float64x2_t)vtrn2q_s64(v72, v74);
          v84 = (float64x2_t)vtrn1q_s64(v72, v74);
          v85 = *v67;
          v86 = v67[1];
          v87 = (float64x2_t *)((char *)v67 - v28);
          v88 = vmlsq_lane_f64(v82, v80, v86.f64[0], 0);
          v89 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v77, v79), v81, v86.f64[0], 0);
          v90 = vmlsq_laneq_f64(v83, v80, v85, 1);
          v91 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v76, v78), v81, v85, 1);
          v92 = vmlsq_lane_f64(v84, v80, v85.f64[0], 0);
          v93 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v76, v78), v81, v85.f64[0], 0);
          v94 = *v87;
          v95 = &v87->f64[v28 / 0xFFFFFFFFFFFFFFF8];
          v96 = vmlsq_laneq_f64(v90, v88, v94, 1);
          v97 = vmlsq_laneq_f64(v91, v89, v94, 1);
          v98 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v92, v88, v94.f64[0], 0), v96, *v95, 0);
          v99 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(v93, v89, v94.f64[0], 0), v97, *v95, 0);
          v7 = (int8x16_t)vtrn1q_s64(v98, (int64x2_t)v96);
          *v68 = (float64x2_t)v7;
          v68[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v69 = vtrn2q_s64(v98, (int64x2_t)v96);
          v69[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v88, (int64x2_t)v80);
          *(int64x2_t *)v70 = vtrn1q_s64(v99, (int64x2_t)v97);
          v70[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v89, (int64x2_t)v81);
          *(int64x2_t *)v71 = vtrn2q_s64(v99, (int64x2_t)v97);
          v71[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v89, (int64x2_t)v81);
          v36 += 4;
          v39 = (double *)((char *)v39 + v32);
        }
        while (v36 < __N - 3);
      }
      v100 = __N - v36;
      if (__N > v36)
      {
        v102 = a1 - v35;
        if (a1 - v35 <= 4)
          v102 = 4;
        v103 = (double *)(v31 + v34 * v36);
        do
        {
          v101 = (float64x2_t *)(a3 + 8 * v35 + 8 * v29 * a4);
          v104 = v101;
          v105 = v102 - 4;
          v106 = (float64x2_t *)v103;
          v107 = (float64x2_t)veorq_s8(v7, v7);
          v108 = v107;
          if ((((_BYTE)v102 - 4) & 1) != 0)
          {
            v104 = (float64x2_t *)((char *)v101 + v28);
            v106 = (float64x2_t *)(v103 + 1);
            v107 = vmlaq_n_f64(v107, *v101, *v103);
            v108 = vmlaq_n_f64(v108, v101[1], *v103);
            v105 = v102 - 5;
          }
          for (; v105; v105 -= 2)
          {
            v110 = *v104;
            v111 = v104[1];
            v109 = (float64x2_t *)((char *)v104 + v28);
            v112 = *v109;
            v113 = v109[1];
            v104 = (float64x2_t *)((char *)v109 + v28);
            v114 = *v106++;
            v107 = vmlaq_laneq_f64(vmlaq_n_f64(v107, v110, v114.f64[0]), v112, v114, 1);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v111, v114.f64[0]), v113, v114, 1);
          }
          v115 = (float64x2_t *)((char *)v104 - v28 * (v102 - 3));
          v116 = (float64x2_t *)((char *)v106 - 8 * v102);
          v117 = vmulq_n_f64(v116[1], a7);
          v118 = vsubq_f64(v117, v108);
          v117.f64[1] = v118.f64[1];
          v119 = *v115;
          v120 = v115[1];
          v121 = (float64x2_t *)((char *)v115 - v28);
          v122 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v116, a7), v107), v119, v117, 1);
          *(_QWORD *)&v117.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v118, v120, v117, 1);
          v123 = *v121;
          v124 = vmlsq_lane_f64(v122, *v121, v117.f64[0], 0);
          v123.f64[1] = v124.f64[1];
          v119.f64[0] = v121->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v124, v119, v123, 1);
          *(_QWORD *)&v123.f64[0] = v7.i64[0];
          *v116 = v123;
          v116[1] = v117;
          v103 = (double *)((char *)v103 + v34);
          --v100;
        }
        while (v100);
      }
      v31 -= 32;
      v125 = v29 < 5;
      v29 -= 4;
    }
    while (!v125);
  }
}

void sub_20E8407C0(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  int8x16_t v7;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  const double *v43;
  const double *v44;
  const double *v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  double v75;
  double v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t *v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double *v114;
  float64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  uint64_t v119;
  float64x2_t *v120;
  uint64_t v121;
  double *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t *v134;
  float64x2_t *v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t *v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  BOOL v146;

  v14 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v26 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
        v27 = (double *)(a5 + 8 * v14);
        v28 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
        v29 = __N;
        v30 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + (a1 - 2) * a4));
        do
        {
          v31 = *(v27 - 1);
          v32 = v28 * *v27;
          *v27 = v32;
          *(v27 - 1) = v30 * (v31 * a7 - v32 * v26);
          v27 += __incX;
          --v29;
        }
        while (v29);
      }
      v14 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v14 + v14 * a4)), (double *)(a5 + 8 * v14), __incX);
      v14 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v15 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 2));
      v16 = *(double *)(a3 + 8 * (v14 * a4 + a1 - 3));
      v17 = (a1 - 2) * a4;
      v18 = *(double *)(a3 + 8 * (v17 + a1 - 3));
      v19 = a7 / *(double *)(a3 + 8 * (v14 * a4 + v14));
      v20 = 1.0 / *(double *)(a3 + 8 * (a1 - 2 + v17));
      v21 = (double *)(a5 + 8 * v14);
      v22 = __N;
      v23 = 1.0 / *(double *)(a3 + 8 * (a1 - 3 + (a1 - 3) * a4));
      do
      {
        v24 = *(v21 - 1);
        v25 = v19 * *v21;
        *v21 = v25;
        *(double *)v7.i64 = v20 * (v24 * a7 - v25 * v15);
        *(v21 - 2) = v23 * -(v18 * *(double *)v7.i64 + v25 * v16 - *(v21 - 2) * a7);
        *(v21 - 1) = *(double *)v7.i64;
        v21 += __incX;
        --v22;
      }
      while (v22);
    }
    v14 = a1 - 4;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    v33 = 8 * a4;
    v34 = v14 + 1;
    v35 = a4 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v14 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v34 - 4;
      v42 = (const double *)(a3 + 8 * (v34 - 4) * a4 + 8 * (v34 - 4));
      v43 = (const double *)(a3 + 8 * (v34 - 3) * v35);
      v44 = (const double *)(a3 + 8 * (v34 - 2) * v35);
      v45 = (const double *)(a3 + 8 * (v34 - 1) * v35);
      v46 = vld1q_dup_f64(v42);
      v47 = vld1q_dup_f64(v43);
      v48 = vld1q_dup_f64(v44);
      v49 = vld1q_dup_f64(v45);
      v50 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v51 = vdivq_f64(v50, v46);
      v52 = vdivq_f64(v50, v47);
      v53 = vdivq_f64(v50, v48);
      v54 = vdivq_f64(v50, v49);
      if (__N < 4)
      {
        v55 = 0;
      }
      else
      {
        v55 = 0;
        v57 = a1 - v41;
        if (a1 - v41 <= 4)
          v57 = 4;
        v58 = (double *)v37;
        do
        {
          v59 = (float64x2_t *)&v58[(unint64_t)v40 / 8];
          v60 = (float64x2_t *)&v58[v39];
          v61 = (float64x2_t *)&v58[v36];
          v62 = v57 - 4;
          v63 = (float64x2_t *)v58;
          v56 = a3 + 8 * v41 + 8 * v34 * a4;
          v64 = (float64x2_t *)v56;
          v65 = (float64x2_t)veorq_s8(v7, v7);
          v66 = v65;
          v67 = v65;
          v68 = v65;
          v69 = v65;
          v70 = v65;
          v71 = v65;
          v72 = v65;
          if ((((_BYTE)v57 - 4) & 1) != 0)
          {
            v73 = *(float64x2_t *)(v56 + 16);
            v64 = (float64x2_t *)(v56 + v33);
            v63 = (float64x2_t *)(v58 + 1);
            v74 = v59->f64[0];
            v59 = (float64x2_t *)((char *)v59 + 8);
            v75 = v60->f64[0];
            v60 = (float64x2_t *)((char *)v60 + 8);
            v76 = v61->f64[0];
            v61 = (float64x2_t *)((char *)v61 + 8);
            v65 = vmlaq_n_f64(v65, *(float64x2_t *)v56, *v58);
            v67 = vmlaq_n_f64(v67, *(float64x2_t *)v56, v74);
            v69 = vmlaq_n_f64(v69, *(float64x2_t *)v56, v75);
            v71 = vmlaq_n_f64(v71, *(float64x2_t *)v56, v76);
            v66 = vmlaq_n_f64(v66, v73, *v58);
            v68 = vmlaq_n_f64(v68, v73, v74);
            v70 = vmlaq_n_f64(v70, v73, v75);
            v72 = vmlaq_n_f64(v72, v73, v76);
            v62 = v57 - 5;
          }
          for (; v62; v62 -= 2)
          {
            v78 = *v64;
            v79 = v64[1];
            v77 = (float64x2_t *)((char *)v64 + v33);
            v80 = *v77;
            v81 = v77[1];
            v64 = (float64x2_t *)((char *)v77 + v33);
            v82 = *v63++;
            v83 = *v59++;
            v84 = *v60++;
            v85 = *v61++;
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v82.f64[0]), v80, v82, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v83.f64[0]), v80, v83, 1);
            v69 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v78, v84.f64[0]), v80, v84, 1);
            v71 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v78, v85.f64[0]), v80, v85, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v82.f64[0]), v81, v82, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v83.f64[0]), v81, v83, 1);
            v70 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v79, v84.f64[0]), v81, v84, 1);
            v72 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (float64x2_t *)((char *)v64 - v33 * (v57 - 3));
          v87 = (float64x2_t *)((char *)v63 - 8 * v57);
          v88 = (float64x2_t *)((char *)v59 - 8 * v57);
          v89 = (float64x2_t *)((char *)v60 - 8 * v57);
          v90 = (float64x2_t *)((char *)v61 - 8 * v57);
          v91 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v87, a7), v65);
          v92 = (int64x2_t)vsubq_f64(vmulq_n_f64(v87[1], a7), v66);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v88, a7), v67);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v88[1], a7), v68);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v69);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v70);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v71);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v72);
          v99 = (float64x2_t)vtrn1q_s64(v92, v94);
          v100 = (float64x2_t)vtrn2q_s64(v91, v93);
          v101 = (float64x2_t)vtrn1q_s64(v91, v93);
          v102 = vmulq_f64((float64x2_t)vtrn2q_s64(v92, v94), v54);
          v103 = vmulq_f64((float64x2_t)vtrn2q_s64(v96, v98), v54);
          v104 = *v86;
          v105 = v86[1];
          v106 = (float64x2_t *)((char *)v86 - v33);
          v107 = vmlsq_laneq_f64(v100, v102, v104, 1);
          v108 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v95, v97), v103, v104, 1);
          v109 = vmlsq_lane_f64(v101, v102, v104.f64[0], 0);
          v110 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v95, v97), v103, v104.f64[0], 0);
          v111 = vmulq_f64(vmlsq_lane_f64(v99, v102, v105.f64[0], 0), v53);
          v112 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v96, v98), v103, v105.f64[0], 0), v53);
          v113 = *v106;
          v114 = &v106->f64[v33 / 0xFFFFFFFFFFFFFFF8];
          v115 = vmulq_f64(vmlsq_laneq_f64(v107, v111, v113, 1), v52);
          v116 = vmulq_f64(vmlsq_laneq_f64(v108, v112, v113, 1), v52);
          v117 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v109, v111, v113.f64[0], 0), v115, *v114, 0), v51);
          v118 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v110, v112, v113.f64[0], 0), v116, *v114, 0), v51);
          v7 = (int8x16_t)vtrn1q_s64(v117, (int64x2_t)v115);
          *v87 = (float64x2_t)v7;
          v87[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v88 = vtrn2q_s64(v117, (int64x2_t)v115);
          v88[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v111, (int64x2_t)v102);
          *(int64x2_t *)v89 = vtrn1q_s64(v118, (int64x2_t)v116);
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v112, (int64x2_t)v103);
          *(int64x2_t *)v90 = vtrn2q_s64(v118, (int64x2_t)v116);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v112, (int64x2_t)v103);
          v55 += 4;
          v58 = (double *)((char *)v58 + v38);
        }
        while (v55 < __N - 3);
      }
      v119 = __N - v55;
      if (__N > v55)
      {
        v121 = a1 - v41;
        if (a1 - v41 <= 4)
          v121 = 4;
        v122 = (double *)(v37 + v40 * v55);
        do
        {
          v120 = (float64x2_t *)(a3 + 8 * v41 + 8 * v34 * a4);
          v123 = v120;
          v124 = v121 - 4;
          v125 = (float64x2_t *)v122;
          v126 = (float64x2_t)veorq_s8(v7, v7);
          v127 = v126;
          if ((((_BYTE)v121 - 4) & 1) != 0)
          {
            v123 = (float64x2_t *)((char *)v120 + v33);
            v125 = (float64x2_t *)(v122 + 1);
            v126 = vmlaq_n_f64(v126, *v120, *v122);
            v127 = vmlaq_n_f64(v127, v120[1], *v122);
            v124 = v121 - 5;
          }
          for (; v124; v124 -= 2)
          {
            v129 = *v123;
            v130 = v123[1];
            v128 = (float64x2_t *)((char *)v123 + v33);
            v131 = *v128;
            v132 = v128[1];
            v123 = (float64x2_t *)((char *)v128 + v33);
            v133 = *v125++;
            v126 = vmlaq_laneq_f64(vmlaq_n_f64(v126, v129, v133.f64[0]), v131, v133, 1);
            v127 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v130, v133.f64[0]), v132, v133, 1);
          }
          v134 = (float64x2_t *)((char *)v123 - v33 * (v121 - 3));
          v135 = (float64x2_t *)((char *)v125 - 8 * v121);
          v136 = vmulq_n_f64(v135[1], a7);
          v137 = vsubq_f64(v136, v127);
          v136.f64[1] = v137.f64[1];
          v138 = vmulq_f64(v136, v54);
          v139 = *v134;
          v140 = v134[1];
          v141 = (float64x2_t *)((char *)v134 - v33);
          v142 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v135, a7), v126), v139, v138, 1);
          v138.f64[0] = vmlsq_laneq_f64(v137, v140, v138, 1).f64[0] * v53.f64[0];
          v143 = *v141;
          v144 = vmlsq_lane_f64(v142, *v141, v138.f64[0], 0);
          v143.f64[1] = v144.f64[1];
          v145 = vmulq_f64(v143, v52);
          v139.f64[0] = v141->f64[-a4];
          v7 = (int8x16_t)vmlsq_laneq_f64(v144, v139, v145, 1);
          *(double *)v7.i64 = *(double *)v7.i64 * v51.f64[0];
          *(_QWORD *)&v145.f64[0] = v7.i64[0];
          *v135 = v145;
          v135[1] = v138;
          v122 = (double *)((char *)v122 + v40);
          --v119;
        }
        while (v119);
      }
      v37 -= 32;
      v146 = v34 < 5;
      v34 -= 4;
    }
    while (!v146);
  }
}

uint64_t sub_20E840D40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x2_t v33;
  float *v34;
  float v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float *v62;
  unint64_t *v63;
  float v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x2_t *v81;
  float *v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  float32x4_t v86;
  float *v87;
  float32x2_t v88;
  float *v89;
  float v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t *v93;
  float32x2_t *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t *v112;
  float32x2_t *v113;
  uint64_t v114;
  float32x2_t *v115;
  float *v116;
  unint64_t *v117;
  float v118;
  float32x2_t *v119;
  float32x2_t v120;
  unint64_t *v121;
  float32x2_t v122;
  float32x2_t *v123;
  float32x2_t v124;
  unint64_t *v125;
  float32x2_t v126;
  float32x2_t *v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unsigned __int32 *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x2_t *v135;
  float *v136;
  float *v137;
  float32x4_t v138;
  float *v139;
  float32x4_t v140;
  float *v141;
  float32x2_t v142;
  float *v143;
  float v144;
  unsigned __int32 *v145;
  unsigned __int32 *v146;
  unsigned __int32 *v147;
  float *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  __int32 *v159;
  float32x2_t v160;
  float *v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float *v165;
  float *v166;
  uint64_t *v167;
  float v168;
  uint64_t v169;
  float *v170;
  float v171;
  float *v172;
  float v173;
  float v174;
  float *v175;
  float *v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = (float32x4_t *)((char *)v23 + v16);
        v25 = a2 - v19 - 4;
        v26 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 2 + 2];
        v27 = &v23->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v24;
        v30 = v24[1].f32;
        v33 = *v26;
        v32 = (float *)&v26[1];
        v35 = *v27;
        v34 = v27 + 1;
        a11 = *v22;
        v36 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        a13 = *v37;
        v38 = (float32x4_t *)((char *)v37 + v15);
        a14 = *v38;
        v39 = (float32x4_t *)((char *)v38 + v15);
        v40 = vmulq_n_f32(a14, v35);
        v41 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v31, 3), a12, *(float32x2_t *)v31.f32, 1), vmulq_laneq_f32(a13, v31, 2));
        v42 = vaddq_f32(vmulq_lane_f32(a14, v33, 1), vmulq_n_f32(a13, v33.f32[0]));
        v43 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(a14, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmlaq_n_f32(vmulq_laneq_f32(a13, v29, 2), a11, v29.f32[0]));
        if ((v25 & 1) != 0)
        {
          v44 = *v39;
          v39 = (float32x4_t *)((char *)v39 + v15);
          v45 = *f32++;
          v46 = *v30++;
          v47 = *v32++;
          v48 = *v34++;
          v43 = vmlaq_n_f32(v43, v44, v45);
          v41 = vmlaq_n_f32(v41, v44, v46);
          v42 = vmlaq_n_f32(v42, v44, v47);
          v40 = vmlaq_n_f32(v40, v44, v48);
          v25 = a2 - v19 - 5;
        }
        if (v25)
        {
          v49 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v52 = 0uLL;
          do
          {
            v54 = *v39;
            v53 = (float32x4_t *)((char *)v39 + v15);
            v55 = *v53;
            v39 = (float32x4_t *)((char *)v53 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14.i64[0] = *(_QWORD *)v34;
            v34 += 2;
            v43 = vmlaq_n_f32(v43, v54, a11.f32[0]);
            v41 = vmlaq_n_f32(v41, v54, a12.f32[0]);
            v42 = vmlaq_n_f32(v42, v54, a13.f32[0]);
            v40 = vmlaq_n_f32(v40, v54, a14.f32[0]);
            v49 = vmlaq_lane_f32(v49, v55, *(float32x2_t *)a11.f32, 1);
            v50 = vmlaq_lane_f32(v50, v55, *(float32x2_t *)a12.f32, 1);
            v51 = vmlaq_lane_f32(v51, v55, *(float32x2_t *)a13.f32, 1);
            v52 = vmlaq_lane_f32(v52, v55, *(float32x2_t *)a14.f32, 1);
            v56 = v25 <= 2;
            v25 -= 2;
          }
          while (!v56);
          v43 = vaddq_f32(v43, v49);
          v41 = vaddq_f32(v41, v50);
          v42 = vaddq_f32(v42, v51);
          v40 = vaddq_f32(v40, v52);
        }
        v14 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v39 - (a2 - v19) * v15);
        *v57 = vmulq_n_f32(v43, a7);
        v58 = (float32x4_t *)((char *)v57 + v15);
        *v58 = vmulq_n_f32(v41, a7);
        v59 = (float32x4_t *)((char *)v58 + v15);
        *v59 = vmulq_n_f32(v42, a7);
        *(float32x4_t *)((char *)v59 + v15) = v14;
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v56 = v21 <= 4;
        v21 -= 4;
      }
      while (!v56);
    }
    v60 = a2 & 3;
    if (!v20 && v60 != 0)
    {
      v61 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v62 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v60 != 1)
      {
        if (v60 != 2)
        {
          v64 = *v62;
          v63 = (unint64_t *)(v62 + 1);
          a13.i64[0] = *v63;
          v62 = (float *)((char *)v63 + v16);
          v66 = *v61;
          v65 = (float32x4_t *)((char *)v61 + v15);
          v68 = *v65;
          v67 = (float32x4_t *)((char *)v65 + v15);
          a12 = *v67;
          v69 = (float32x4_t *)((char *)v67 - 2 * v15);
          *v69 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v66, v64), vmulq_n_f32(v68, a13.f32[0])), vmulq_lane_f32(a12, *(float32x2_t *)a13.f32, 1)), a7);
          v61 = (float32x4_t *)((char *)v69 + v15);
        }
        v70 = *(float32x2_t *)v62;
        v62 = (float *)((char *)v62 + v16 + 4);
        v72 = *v61;
        v71 = (float32x4_t *)((char *)v61 + v15);
        a11 = *v71;
        v73 = (float32x4_t *)((char *)v71 - v15);
        *v73 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v72, v70.f32[0]), vmulq_lane_f32(a11, v70, 1)), a7);
        v61 = (float32x4_t *)((char *)v73 + v15);
      }
      *v61 = vmulq_n_f32(vmulq_n_f32(*v61, *v62), a7);
    }
    v17 += 4;
    v56 = v18 <= 4;
    v18 -= 4;
  }
  while (!v56);
  v56 = v18 <= -3;
  result = v18 + 3;
  if (!v56)
  {
LABEL_22:
    if (result > 1)
    {
      v74 = 0;
      v75 = __OFSUB__(a2, 3);
      v76 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v77 = (unint64_t *)(a5 + v74 * v15 + 4 * v17);
          v78 = (float32x4_t *)(a3 + v74 * v16 + 4 * v74);
          v79 = (float32x4_t *)((char *)v78 + v16);
          v80 = a2 - v74 - 4;
          v81 = (float32x2_t *)&v78->u32[(unint64_t)v16 / 2 + 2];
          v82 = &v78->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v84 = *v78;
          v83 = v78[1].f32;
          v86 = *v79;
          v85 = v79[1].f32;
          v88 = *v81;
          v87 = (float *)&v81[1];
          v90 = *v82;
          v89 = v82 + 1;
          a11.i64[0] = *v77;
          v91 = (unint64_t *)((char *)v77 + v15);
          a12.i64[0] = *v91;
          v92 = (unint64_t *)((char *)v91 + v15);
          a13.i64[0] = *v92;
          v93 = (unint64_t *)((char *)v92 + v15);
          a14.i64[0] = *v93;
          v94 = (float32x2_t *)((char *)v93 + v15);
          v95 = vmul_n_f32(*(float32x2_t *)a14.f32, v90);
          v96 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v86.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v86, 2));
          v97 = vadd_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, v88, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v88.f32[0]));
          v98 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v84, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v84.f32, 1), vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2), *(float32x2_t *)a11.f32, v84.f32[0]));
          if ((v80 & 1) != 0)
          {
            v99 = *v94;
            v94 = (float32x2_t *)((char *)v94 + v15);
            v100 = *v83++;
            v101 = *v85++;
            v102 = *v87++;
            v103 = *v89++;
            v98 = vmla_n_f32(v98, v99, v100);
            v96 = vmla_n_f32(v96, v99, v101);
            v97 = vmla_n_f32(v97, v99, v102);
            v95 = vmla_n_f32(v95, v99, v103);
            v80 = a2 - v74 - 5;
          }
          if (v80)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v109 = *v94;
              v108 = (float32x2_t *)((char *)v94 + v15);
              v110 = *v108;
              v94 = (float32x2_t *)((char *)v108 + v15);
              a11.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              a12.i64[0] = *(_QWORD *)v85;
              v85 += 2;
              a13.i64[0] = *(_QWORD *)v87;
              v87 += 2;
              a14.i64[0] = *(_QWORD *)v89;
              v89 += 2;
              v98 = vmla_n_f32(v98, v109, a11.f32[0]);
              v96 = vmla_n_f32(v96, v109, a12.f32[0]);
              v97 = vmla_n_f32(v97, v109, a13.f32[0]);
              v95 = vmla_n_f32(v95, v109, a14.f32[0]);
              v104 = vmla_lane_f32(v104, v110, *(float32x2_t *)a11.f32, 1);
              v105 = vmla_lane_f32(v105, v110, *(float32x2_t *)a12.f32, 1);
              v106 = vmla_lane_f32(v106, v110, *(float32x2_t *)a13.f32, 1);
              v107 = vmla_lane_f32(v107, v110, *(float32x2_t *)a14.f32, 1);
              v56 = v80 <= 2;
              v80 -= 2;
            }
            while (!v56);
            v98 = vadd_f32(v98, v104);
            v96 = vadd_f32(v96, v105);
            v97 = vadd_f32(v97, v106);
            v95 = vadd_f32(v95, v107);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v95, a7);
          v111 = (float32x2_t *)((char *)v94 - (a2 - v74) * v15);
          *v111 = vmul_n_f32(v98, a7);
          v112 = (float32x2_t *)((char *)v111 + v15);
          *v112 = vmul_n_f32(v96, a7);
          v113 = (float32x2_t *)((char *)v112 + v15);
          *v113 = vmul_n_f32(v97, a7);
          *(float32x2_t *)((char *)v113 + v15) = *(float32x2_t *)v14.f32;
          v74 += 4;
          v75 = __OFSUB__(v76, 4);
          v56 = v76 <= 4;
          v76 -= 4;
        }
        while (!v56);
      }
      v114 = a2 & 3;
      if (!v75 && v114 != 0)
      {
        v115 = (float32x2_t *)(a5 + v74 * v15 + 4 * v17);
        v116 = (float *)(a3 + v74 * v16 + 4 * v74);
        if (v114 != 1)
        {
          if (v114 != 2)
          {
            v118 = *v116;
            v117 = (unint64_t *)(v116 + 1);
            a13.i64[0] = *v117;
            v116 = (float *)((char *)v117 + v16);
            v120 = *v115;
            v119 = (float32x2_t *)((char *)v115 + v15);
            v122 = *v119;
            v121 = (unint64_t *)((char *)v119 + v15);
            a12.i64[0] = *v121;
            v123 = (float32x2_t *)&v121[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v123 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v120, v118), vmul_n_f32(v122, a13.f32[0])), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1)), a7);
            v115 = (float32x2_t *)((char *)v123 + v15);
          }
          v124 = *(float32x2_t *)v116;
          v116 = (float *)((char *)v116 + v16 + 4);
          v126 = *v115;
          v125 = (unint64_t *)((char *)v115 + v15);
          a11.i64[0] = *v125;
          v127 = (float32x2_t *)((char *)v125 - v15);
          *v127 = vmul_n_f32(vadd_f32(vmul_n_f32(v126, v124.f32[0]), vmul_lane_f32(*(float32x2_t *)a11.f32, v124, 1)), a7);
          v115 = (float32x2_t *)((char *)v127 + v15);
        }
        *v115 = vmul_n_f32(vmul_n_f32(*v115, *v116), a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v128 = 0;
      v129 = __OFSUB__(a2, 3);
      v130 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v131 = (unsigned __int32 *)(a5 + v128 * v15 + 4 * v17);
          v132 = (float32x4_t *)(a3 + v128 * v16 + 4 * v128);
          v133 = (float32x4_t *)((char *)v132 + v16);
          v134 = a2 - v128 - 4;
          v135 = (float32x2_t *)&v132->u32[(unint64_t)v16 / 2 + 2];
          v136 = &v132->f32[(unint64_t)v16 / 2 + 3 + (unint64_t)v16 / 4];
          v138 = *v132;
          v137 = v132[1].f32;
          v140 = *v133;
          v139 = v133[1].f32;
          v142 = *v135;
          v141 = (float *)&v135[1];
          v144 = *v136;
          v143 = v136 + 1;
          a11.i32[0] = *v131;
          v145 = &v131[(unint64_t)v15 / 4];
          a12.i32[0] = *v145;
          v146 = &v145[(unint64_t)v15 / 4];
          a13.i32[0] = *v146;
          v147 = &v146[(unint64_t)v15 / 4];
          a14.i32[0] = *v147;
          v148 = (float *)&v147[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v140.i32[0] = 0;
          v149 = vmulq_f32(v138, a11);
          v150 = vmulq_f32(v140, a11);
          v151 = vmul_f32(v142, *(float32x2_t *)a13.f32);
          v14.f32[0] = v144 * a14.f32[0];
          v152 = (float32x2_t)vpaddq_f32(v149, v149).u64[0];
          v153 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
          if ((v134 & 1) != 0)
          {
            v154 = *v148;
            v148 = (float *)((char *)v148 + v15);
            v155 = *v137++;
            v156 = *v139++;
            v157 = *v141++;
            v158 = *v143++;
            v152.f32[0] = vaddv_f32(v152) + (float)(v154 * v155);
            v153.f32[0] = vaddv_f32(v153) + (float)(v154 * v156);
            v151.f32[0] = vaddv_f32(v151) + (float)(v154 * v157);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v154 * v158);
            v134 = a2 - v128 - 5;
          }
          if (v134)
          {
            do
            {
              v160.f32[0] = *v148;
              v159 = (__int32 *)&v148[(unint64_t)v15 / 4];
              v160.i32[1] = *v159;
              v148 = (float *)&v159[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v137;
              v137 += 2;
              a12.i64[0] = *(_QWORD *)v139;
              v139 += 2;
              a13.i64[0] = *(_QWORD *)v141;
              v141 += 2;
              a14.i64[0] = *(_QWORD *)v143;
              v143 += 2;
              v152 = vmla_f32(v152, v160, *(float32x2_t *)a11.f32);
              v153 = vmla_f32(v153, v160, *(float32x2_t *)a12.f32);
              v151 = vmla_f32(v151, v160, *(float32x2_t *)a13.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v160, *(float32x2_t *)a14.f32);
              v56 = v134 <= 2;
              v134 -= 2;
            }
            while (!v56);
          }
          v161 = (float *)((char *)v148 - (a2 - v128) * v15);
          *v161 = vaddv_f32(v152) * a7;
          v162 = &v161[(unint64_t)v15 / 4];
          *v162 = vaddv_f32(v153) * a7;
          v163 = &v162[(unint64_t)v15 / 4];
          *v163 = vaddv_f32(v151) * a7;
          v163[(unint64_t)v15 / 4] = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v128 += 4;
          v129 = __OFSUB__(v130, 4);
          v56 = v130 <= 4;
          v130 -= 4;
        }
        while (!v56);
      }
      v164 = a2 & 3;
      if (!v129 && v164 != 0)
      {
        v165 = (float *)(a5 + v128 * v15 + 4 * v17);
        v166 = (float *)(a3 + v128 * v16 + 4 * v128);
        if (v164 != 1)
        {
          if (v164 != 2)
          {
            v168 = *v166;
            v167 = (uint64_t *)(v166 + 1);
            v169 = *v167;
            v166 = (float *)((char *)v167 + v16);
            v171 = *v165;
            v170 = &v165[(unint64_t)v15 / 4];
            v173 = *v170;
            v172 = &v170[(unint64_t)v15 / 4];
            v174 = *v172;
            v175 = &v172[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v175 = (float)((float)((float)(v168 * v171) + (float)(*(float *)&v169 * v173))
                          + (float)(*((float *)&v169 + 1) * v174))
                  * a7;
            v165 = &v175[(unint64_t)v15 / 4];
          }
          v177 = *v166;
          v176 = v166 + 1;
          v178 = *v176;
          v166 = &v176[(unint64_t)v16 / 4];
          v180 = *v165;
          v179 = &v165[(unint64_t)v15 / 4];
          v181 = *v179;
          v182 = &v179[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v182 = (float)((float)(v177 * v180) + (float)(v178 * v181)) * a7;
          v165 = &v182[(unint64_t)v15 / 4];
        }
        *v165 = (float)(*v165 * *v166) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E841330(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, double a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x2_t *v25;
  float *v26;
  float *v27;
  float *f32;
  float32x4_t v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  BOOL v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float *v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x2_t *v75;
  float *v76;
  float *v77;
  float *v78;
  float32x4_t v79;
  float *v80;
  float32x2_t v81;
  float *v82;
  float v83;
  unint64_t *v84;
  unint64_t *v85;
  float32x2_t *v86;
  float32x2_t *v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t *v110;
  float32x2_t v111;
  unint64_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  unint64_t *v115;
  float32x2_t v116;
  float32x2_t *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned __int32 *v121;
  float32x4_t *v122;
  uint64_t v123;
  float32x2_t *v124;
  float *v125;
  float *v126;
  float *v127;
  float32x4_t v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  unsigned __int32 *v135;
  float *v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  __int32 *v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  float *v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float32x4_t *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v25 = (float32x2_t *)&v23->u32[(unint64_t)v16 / 4 + 2];
        v26 = &v23->f32[(unint64_t)v16 / 2 + 3];
        v27 = &v23[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
        v29 = *v23;
        f32 = v23[1].f32;
        v31 = *v25;
        v30 = (float *)&v25[1];
        v33 = *v26;
        v32 = v26 + 1;
        a11 = *v22;
        v34 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a13 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v38 = *v36;
        v37 = (float32x4_t *)((char *)v36 + v15);
        v39 = vmlaq_n_f32(a13, v38, v33);
        v40 = vaddq_f32(vmlaq_lane_f32(a12, v38, v31, 1), vmulq_n_f32(a13, v31.f32[0]));
        v41 = vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a11, v38, v29, 3), a12, *(float32x2_t *)v29.f32, 1), vmulq_laneq_f32(a13, v29, 2));
        if ((v24 & 1) != 0)
        {
          v42 = *v37;
          v37 = (float32x4_t *)((char *)v37 + v15);
          v43 = *f32++;
          v44 = *v30++;
          v45 = *v32++;
          v46 = *v27++;
          v41 = vmlaq_n_f32(v41, v42, v43);
          v40 = vmlaq_n_f32(v40, v42, v44);
          v39 = vmlaq_n_f32(v39, v42, v45);
          v38 = vmlaq_n_f32(v38, v42, v46);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v47 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v50 = 0uLL;
          do
          {
            v52 = *v37;
            v51 = (float32x4_t *)((char *)v37 + v15);
            v53 = *v51;
            v37 = (float32x4_t *)((char *)v51 + v15);
            a11.i64[0] = *(_QWORD *)f32;
            f32 += 2;
            a12.i64[0] = *(_QWORD *)v30;
            v30 += 2;
            a13.i64[0] = *(_QWORD *)v32;
            v32 += 2;
            a14 = *(double *)v27;
            v27 += 2;
            v41 = vmlaq_n_f32(v41, v52, a11.f32[0]);
            v40 = vmlaq_n_f32(v40, v52, a12.f32[0]);
            v39 = vmlaq_n_f32(v39, v52, a13.f32[0]);
            v38 = vmlaq_n_f32(v38, v52, *(float *)&a14);
            v47 = vmlaq_lane_f32(v47, v53, *(float32x2_t *)a11.f32, 1);
            v48 = vmlaq_lane_f32(v48, v53, *(float32x2_t *)a12.f32, 1);
            v49 = vmlaq_lane_f32(v49, v53, *(float32x2_t *)a13.f32, 1);
            v50 = vmlaq_lane_f32(v50, v53, *(float32x2_t *)&a14, 1);
            v54 = v24 <= 2;
            v24 -= 2;
          }
          while (!v54);
          v41 = vaddq_f32(v41, v47);
          v40 = vaddq_f32(v40, v48);
          v39 = vaddq_f32(v39, v49);
          v38 = vaddq_f32(v38, v50);
        }
        v14 = vmulq_n_f32(v39, a7);
        v55 = (float32x4_t *)((char *)v37 - (a2 - v19) * v15);
        *v55 = vmulq_n_f32(v41, a7);
        v56 = (float32x4_t *)((char *)v55 + v15);
        *v56 = vmulq_n_f32(v40, a7);
        v57 = (float32x4_t *)((char *)v56 + v15);
        *v57 = v14;
        *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v38, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v54 = v21 <= 4;
        v21 -= 4;
      }
      while (!v54);
    }
    v58 = a2 & 3;
    if (!v20 && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v60 = (float *)(a3 + v19 * v16 + 4 * v19 + 4);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          a13.i64[0] = *(_QWORD *)v60;
          v60 = (float *)((char *)v60 + v16 + 4);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v15);
          v64 = *v61;
          v63 = (float32x4_t *)((char *)v61 + v15);
          a12 = *v63;
          v65 = (float32x4_t *)((char *)v63 - 2 * v15);
          *v65 = vmulq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(v62, v64, a13.f32[0]), a12, *(float32x2_t *)a13.f32, 1), a7);
          v59 = (float32x4_t *)((char *)v65 + v15);
        }
        v67 = *v59;
        v66 = (float32x4_t *)((char *)v59 + v15);
        a11 = *v66;
        v68 = (float32x4_t *)((char *)v66 - v15);
        *v68 = vmulq_n_f32(vmlaq_n_f32(v67, a11, *v60), a7);
        v59 = (float32x4_t *)((char *)v68 + v15);
      }
      *v59 = vmulq_n_f32(*v59, a7);
    }
    v17 += 4;
    v54 = v18 <= 4;
    v18 -= 4;
  }
  while (!v54);
  v54 = v18 <= -3;
  result = v18 + 3;
  if (!v54)
  {
LABEL_22:
    if (result > 1)
    {
      v69 = 0;
      v70 = __OFSUB__(a2, 3);
      v71 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v72 = (unint64_t *)(a5 + v69 * v15 + 4 * v17);
          v73 = (float32x4_t *)(a3 + v69 * v16 + 4 * v69);
          v74 = a2 - v69 - 4;
          v75 = (float32x2_t *)&v73->u32[(unint64_t)v16 / 4 + 2];
          v76 = &v73->f32[(unint64_t)v16 / 2 + 3];
          v77 = &v73[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v79 = *v73;
          v78 = v73[1].f32;
          v81 = *v75;
          v80 = (float *)&v75[1];
          v83 = *v76;
          v82 = v76 + 1;
          a11.i64[0] = *v72;
          v84 = (unint64_t *)((char *)v72 + v15);
          a12.i64[0] = *v84;
          v85 = (unint64_t *)((char *)v84 + v15);
          a13.i64[0] = *v85;
          v86 = (float32x2_t *)((char *)v85 + v15);
          v88 = *v86;
          v87 = (float32x2_t *)((char *)v86 + v15);
          v89 = vmla_n_f32(*(float32x2_t *)a13.f32, v88, v83);
          v90 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v88, v81, 1), vmul_n_f32(*(float32x2_t *)a13.f32, v81.f32[0]));
          v91 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)a11.f32, v88, v79, 3), *(float32x2_t *)a12.f32, *(float32x2_t *)v79.f32, 1), vmul_laneq_f32(*(float32x2_t *)a13.f32, v79, 2));
          if ((v74 & 1) != 0)
          {
            v92 = *v87;
            v87 = (float32x2_t *)((char *)v87 + v15);
            v93 = *v78++;
            v94 = *v80++;
            v95 = *v82++;
            v96 = *v77++;
            v91 = vmla_n_f32(v91, v92, v93);
            v90 = vmla_n_f32(v90, v92, v94);
            v89 = vmla_n_f32(v89, v92, v95);
            v88 = vmla_n_f32(v88, v92, v96);
            v74 = a2 - v69 - 5;
          }
          if (v74)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v102 = *v87;
              v101 = (float32x2_t *)((char *)v87 + v15);
              v103 = *v101;
              v87 = (float32x2_t *)((char *)v101 + v15);
              a11.i64[0] = *(_QWORD *)v78;
              v78 += 2;
              a12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              a13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              a14 = *(double *)v77;
              v77 += 2;
              v91 = vmla_n_f32(v91, v102, a11.f32[0]);
              v90 = vmla_n_f32(v90, v102, a12.f32[0]);
              v89 = vmla_n_f32(v89, v102, a13.f32[0]);
              v88 = vmla_n_f32(v88, v102, *(float *)&a14);
              v97 = vmla_lane_f32(v97, v103, *(float32x2_t *)a11.f32, 1);
              v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
              v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
              v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)&a14, 1);
              v54 = v74 <= 2;
              v74 -= 2;
            }
            while (!v54);
            v91 = vadd_f32(v91, v97);
            v90 = vadd_f32(v90, v98);
            v89 = vadd_f32(v89, v99);
            v88 = vadd_f32(v88, v100);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v89, a7);
          v104 = (float32x2_t *)((char *)v87 - (a2 - v69) * v15);
          *v104 = vmul_n_f32(v91, a7);
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v90, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = *(float32x2_t *)v14.f32;
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v88, a7);
          v69 += 4;
          v70 = __OFSUB__(v71, 4);
          v54 = v71 <= 4;
          v71 -= 4;
        }
        while (!v54);
      }
      v107 = a2 & 3;
      if (!v70 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v69 * v15 + 4 * v17);
        v109 = (float *)(a3 + v69 * v16 + 4 * v69 + 4);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            a13.i64[0] = *(_QWORD *)v109;
            v109 = (float *)((char *)v109 + v16 + 4);
            v111 = *v108;
            v110 = (float32x2_t *)((char *)v108 + v15);
            v113 = *v110;
            v112 = (unint64_t *)((char *)v110 + v15);
            a12.i64[0] = *v112;
            v114 = (float32x2_t *)&v112[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v114 = vmul_n_f32(vmla_lane_f32(vmla_n_f32(v111, v113, a13.f32[0]), *(float32x2_t *)a12.f32, *(float32x2_t *)a13.f32, 1), a7);
            v108 = (float32x2_t *)((char *)v114 + v15);
          }
          v116 = *v108;
          v115 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v115;
          v117 = (float32x2_t *)((char *)v115 - v15);
          *v117 = vmul_n_f32(vmla_n_f32(v116, *(float32x2_t *)a11.f32, *v109), a7);
          v108 = (float32x2_t *)((char *)v117 + v15);
        }
        *v108 = vmul_n_f32(*v108, a7);
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v118 = 0;
      v119 = __OFSUB__(a2, 3);
      v120 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v121 = (unsigned __int32 *)(a5 + v118 * v15 + 4 * v17);
          v122 = (float32x4_t *)(a3 + v118 * v16 + 4 * v118);
          v123 = a2 - v118 - 4;
          v124 = (float32x2_t *)&v122->u32[(unint64_t)v16 / 4 + 2];
          v125 = &v122->f32[(unint64_t)v16 / 2 + 3];
          v126 = &v122[1].f32[(unint64_t)v16 / 2 + (unint64_t)v16 / 4];
          v128 = *v122;
          v127 = v122[1].f32;
          v130 = *v124;
          v129 = (float *)&v124[1];
          v132 = *v125;
          v131 = v125 + 1;
          a11.i32[0] = *v121;
          v133 = &v121[(unint64_t)v15 / 4];
          a12.i32[0] = *v133;
          v134 = &v133[(unint64_t)v15 / 4];
          a13.i32[0] = *v134;
          v135 = &v134[(unint64_t)v15 / 4];
          LODWORD(a14) = *v135;
          v136 = (float *)&v135[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)&a14);
          a11.i64[1] = a13.i64[0];
          v128.i32[0] = 0;
          v137 = vmulq_f32(v128, a11);
          v139 = vmul_f32(v130, *(float32x2_t *)a13.f32);
          v138 = (float32x2_t)LODWORD(a14);
          v140 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
          v139.f32[0] = vaddv_f32(v139) + a12.f32[0];
          v14.f32[0] = (float)(v132 * *(float *)&a14) + a13.f32[0];
          v140.f32[0] = vaddv_f32(v140) + a11.f32[0];
          if ((v123 & 1) != 0)
          {
            v141 = *v136;
            v136 = (float *)((char *)v136 + v15);
            v142 = *v127++;
            v143 = *v129++;
            v144 = *v131++;
            v145 = *v126++;
            v140.f32[0] = vaddv_f32(v140) + (float)(v141 * v142);
            v139.f32[0] = vaddv_f32(v139) + (float)(v141 * v143);
            v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v141 * v144);
            v138.f32[0] = vaddv_f32(v138) + (float)(v141 * v145);
            v123 = a2 - v118 - 5;
          }
          if (v123)
          {
            do
            {
              v147.f32[0] = *v136;
              v146 = (__int32 *)&v136[(unint64_t)v15 / 4];
              v147.i32[1] = *v146;
              v136 = (float *)&v146[(unint64_t)v15 / 4];
              a11.i64[0] = *(_QWORD *)v127;
              v127 += 2;
              a12.i64[0] = *(_QWORD *)v129;
              v129 += 2;
              a13.i64[0] = *(_QWORD *)v131;
              v131 += 2;
              a14 = *(double *)v126;
              v126 += 2;
              v140 = vmla_f32(v140, v147, *(float32x2_t *)a11.f32);
              v139 = vmla_f32(v139, v147, *(float32x2_t *)a12.f32);
              *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v147, *(float32x2_t *)a13.f32);
              v138 = vmla_f32(v138, v147, *(float32x2_t *)&a14);
              v54 = v123 <= 2;
              v123 -= 2;
            }
            while (!v54);
          }
          v148 = (float *)((char *)v136 - (a2 - v118) * v15);
          *v148 = vaddv_f32(v140) * a7;
          v149 = &v148[(unint64_t)v15 / 4];
          *v149 = vaddv_f32(v139) * a7;
          v150 = &v149[(unint64_t)v15 / 4];
          *v150 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
          v150[(unint64_t)v15 / 4] = vaddv_f32(v138) * a7;
          v118 += 4;
          v119 = __OFSUB__(v120, 4);
          v54 = v120 <= 4;
          v120 -= 4;
        }
        while (!v54);
      }
      v151 = a2 & 3;
      if (!v119 && v151 != 0)
      {
        v152 = (float *)(a5 + v118 * v15 + 4 * v17);
        v153 = (float *)(a3 + v118 * v16 + 4 * v118 + 4);
        if (v151 != 1)
        {
          if (v151 != 2)
          {
            v154 = *(_QWORD *)v153;
            v153 = (float *)((char *)v153 + v16 + 4);
            v156 = *v152;
            v155 = &v152[(unint64_t)v15 / 4];
            v158 = *v155;
            v157 = &v155[(unint64_t)v15 / 4];
            v159 = *v157;
            v160 = &v157[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v160 = (float)((float)(v156 + (float)(*(float *)&v154 * v158)) + (float)(*((float *)&v154 + 1) * v159))
                  * a7;
            v152 = &v160[(unint64_t)v15 / 4];
          }
          v162 = *v152;
          v161 = &v152[(unint64_t)v15 / 4];
          v163 = *v161;
          v164 = &v161[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v164 = (float)(v162 + (float)(*v153 * v163)) * a7;
          v152 = &v164[(unint64_t)v15 / 4];
        }
        *v152 = *v152 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E8418E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL i;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float32x4_t *v46;
  float32x4_t *v47;
  uint64_t v48;
  float32x4_t *v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  BOOL j;
  float32x2_t *v66;
  float32x4_t *v67;
  float32x4_t *v68;
  uint64_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t *v73;
  float32x2_t *v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t *v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t *v98;
  float32x2_t *v99;
  uint64_t v100;
  float32x2_t *v101;
  float *v102;
  float *v103;
  float v104;
  float *v105;
  float v106;
  float32x2_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  float32x2_t v110;
  float v111;
  float v112;
  float v113;
  float32x2_t *v114;
  float32x2_t v115;
  uint64_t v116;
  BOOL k;
  float *v118;
  float32x4_t *v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x2_t *v125;
  float *v126;
  float v127;
  float *v128;
  float v129;
  float *v130;
  float v131;
  float v132;
  float *v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float32x4_t v140;
  float *v141;
  float v142;
  float v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  __int32 *v152;
  __int32 *v153;
  float32x2_t v154;
  float v155;
  __int32 *v156;
  float32x2_t v157;
  float *v158;
  float v159;
  float v160;
  float *v161;
  float v162;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (result <= 3)
    goto LABEL_21;
  v10 = result - 3;
  do
  {
    v11 = a2;
    for (i = __OFSUB__(a2, 3); v11 > 3; i = __OFSUB__(v11, 3))
    {
      v11 -= 4;
      v13 = (float32x4_t *)(a5 + v11 * v7 + 4 * v9);
      v14 = (float32x4_t *)(a3 + 4 * v11);
      v15 = (float32x4_t *)((char *)v14 + v11 * v8);
      v16 = v11;
      v18 = *v15;
      v17 = (float32x4_t *)((char *)v15 + v8);
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v22 = *v13;
      v21 = (float32x4_t *)((char *)v13 + v7);
      v24 = *v21;
      v23 = (float32x4_t *)((char *)v21 + v7);
      v26 = *v23;
      v25 = (float32x4_t *)((char *)v23 + v7);
      v27 = *v25;
      v28 = (float32x4_t *)((char *)v25 + v7 - v11 * v7 + -4 * v7);
      v29 = vmulq_n_f32(v22, v18.f32[0]);
      v30 = vaddq_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v24, *(float32x2_t *)v19.f32, 1));
      v31 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v22, v18, 2), v26, COERCE_FLOAT(*v20)), vmulq_laneq_f32(v24, v19, 2));
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v22, v18, 3), v26, *v20, 1), vmlaq_n_f32(vmulq_laneq_f32(v24, v19, 3), v27, v20->f32[(unint64_t)v8 / 4 + 1]));
      if ((v11 & 1) != 0)
      {
        v33 = *v28;
        v28 = (float32x4_t *)((char *)v28 + v7);
        v34 = *v14;
        v14 = (float32x4_t *)((char *)v14 + v8);
        v29 = vmlaq_n_f32(v29, v33, v34.f32[0]);
        v30 = vmlaq_lane_f32(v30, v33, *(float32x2_t *)v34.f32, 1);
        v31 = vmlaq_laneq_f32(v31, v33, v34, 2);
        v32 = vmlaq_laneq_f32(v32, v33, v34, 3);
        v16 = v11 - 1;
      }
      if (v16)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v28;
          v39 = (float32x4_t *)((char *)v28 + v7);
          v41 = *v39;
          v28 = (float32x4_t *)((char *)v39 + v7);
          v43 = *v14;
          v42 = (float32x4_t *)((char *)v14 + v8);
          v44 = *v42;
          v14 = (float32x4_t *)((char *)v42 + v8);
          v29 = vmlaq_n_f32(v29, v40, v43.f32[0]);
          v30 = vmlaq_lane_f32(v30, v40, *(float32x2_t *)v43.f32, 1);
          v31 = vmlaq_laneq_f32(v31, v40, v43, 2);
          v32 = vmlaq_laneq_f32(v32, v40, v43, 3);
          v35 = vmlaq_n_f32(v35, v41, v44.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)v44.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, v44, 2);
          v38 = vmlaq_laneq_f32(v38, v41, v44, 3);
          v45 = v16 <= 2;
          v16 -= 2;
        }
        while (!v45);
        v29 = vaddq_f32(v29, v35);
        v30 = vaddq_f32(v30, v36);
        v31 = vaddq_f32(v31, v37);
        v32 = vaddq_f32(v32, v38);
      }
      *v28 = vmulq_n_f32(v29, a7);
      v46 = (float32x4_t *)((char *)v28 + v7);
      *v46 = vmulq_n_f32(v30, a7);
      v47 = (float32x4_t *)((char *)v46 + v7);
      *v47 = vmulq_n_f32(v31, a7);
      *(float32x4_t *)((char *)v47 + v7) = vmulq_n_f32(v32, a7);
    }
    v48 = a2 & 3;
    if (!i && v48 != 0)
    {
      v49 = (float32x4_t *)(a5 + 4 * v9);
      v50 = (float *)(a3 + 4 * (v11 - 1));
      if (v48 != 1)
      {
        if (v48 != 2)
        {
          v52 = *v50;
          v51 = &v50[(unint64_t)v8 / 4];
          v54 = *v51;
          v53 = &v51[(unint64_t)v8 / 4];
          v56 = *v49;
          v55 = (float32x4_t *)((char *)v49 + v7);
          v58 = *v55;
          v57 = (float32x4_t *)((char *)v55 + v7);
          v59 = *v53;
          v50 = &v53[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
          *v57 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v56, v52), vmulq_n_f32(v58, v54)), vmulq_n_f32(*v57, v59)), a7);
          v49 = (float32x4_t *)((char *)v57 - 2 * v7);
        }
        v60 = *v50;
        v61 = v50[(unint64_t)v8 / 4];
        v63 = *v49;
        v62 = (float32x4_t *)((char *)v49 + v7);
        --v50;
        *v62 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v63, v60), vmulq_n_f32(*v62, v61)), a7);
        v49 = (float32x4_t *)((char *)v62 - v7);
      }
      *v49 = vmulq_n_f32(vmulq_n_f32(*v49, *v50), a7);
    }
    v9 += 4;
    v45 = v10 <= 4;
    v10 -= 4;
  }
  while (!v45);
  v45 = v10 <= -3;
  result = v10 + 3;
  if (!v45)
  {
LABEL_21:
    if (result > 1)
    {
      v64 = a2;
      for (j = __OFSUB__(a2, 3); v64 > 3; j = __OFSUB__(v64, 3))
      {
        v64 -= 4;
        v66 = (float32x2_t *)(a5 + v64 * v7 + 4 * v9);
        v67 = (float32x4_t *)(a3 + 4 * v64);
        v68 = (float32x4_t *)((char *)v67 + v64 * v8);
        v69 = v64;
        v71 = *v68;
        v70 = (float32x4_t *)((char *)v68 + v8);
        v72 = *v70;
        v73 = (float32x2_t *)&v70->u32[(unint64_t)v8 / 4 + 2];
        v75 = *v66;
        v74 = (float32x2_t *)((char *)v66 + v7);
        v77 = *v74;
        v76 = (float32x2_t *)((char *)v74 + v7);
        v79 = *v76;
        v78 = (float32x2_t *)((char *)v76 + v7);
        v80 = *v78;
        v81 = (float32x2_t *)((char *)v78 + v7 - v64 * v7 + -4 * v7);
        v82 = vmul_n_f32(v75, v71.f32[0]);
        v83 = vadd_f32(vmul_lane_f32(v75, *(float32x2_t *)v71.f32, 1), vmul_lane_f32(v77, *(float32x2_t *)v72.f32, 1));
        v84 = vadd_f32(vmla_n_f32(vmul_laneq_f32(v75, v71, 2), v79, COERCE_FLOAT(*v73)), vmul_laneq_f32(v77, v72, 2));
        v85 = vadd_f32(vmla_lane_f32(vmul_laneq_f32(v75, v71, 3), v79, *v73, 1), vmla_n_f32(vmul_laneq_f32(v77, v72, 3), v80, v73->f32[(unint64_t)v8 / 4 + 1]));
        if ((v64 & 1) != 0)
        {
          v86 = *v81;
          v81 = (float32x2_t *)((char *)v81 + v7);
          v87 = *v67;
          v67 = (float32x4_t *)((char *)v67 + v8);
          v82 = vmla_n_f32(v82, v86, v87.f32[0]);
          v83 = vmla_lane_f32(v83, v86, *(float32x2_t *)v87.f32, 1);
          v84 = vmla_laneq_f32(v84, v86, v87, 2);
          v85 = vmla_laneq_f32(v85, v86, v87, 3);
          v69 = v64 - 1;
        }
        if (v69)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          v91 = 0;
          do
          {
            v93 = *v81;
            v92 = (float32x2_t *)((char *)v81 + v7);
            v94 = *v92;
            v81 = (float32x2_t *)((char *)v92 + v7);
            v96 = *v67;
            v95 = (float32x4_t *)((char *)v67 + v8);
            v97 = *v95;
            v67 = (float32x4_t *)((char *)v95 + v8);
            v82 = vmla_n_f32(v82, v93, v96.f32[0]);
            v83 = vmla_lane_f32(v83, v93, *(float32x2_t *)v96.f32, 1);
            v84 = vmla_laneq_f32(v84, v93, v96, 2);
            v85 = vmla_laneq_f32(v85, v93, v96, 3);
            v88 = vmla_n_f32(v88, v94, v97.f32[0]);
            v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)v97.f32, 1);
            v90 = vmla_laneq_f32(v90, v94, v97, 2);
            v91 = vmla_laneq_f32(v91, v94, v97, 3);
            v45 = v69 <= 2;
            v69 -= 2;
          }
          while (!v45);
          v82 = vadd_f32(v82, v88);
          v83 = vadd_f32(v83, v89);
          v84 = vadd_f32(v84, v90);
          v85 = vadd_f32(v85, v91);
        }
        *v81 = vmul_n_f32(v82, a7);
        v98 = (float32x2_t *)((char *)v81 + v7);
        *v98 = vmul_n_f32(v83, a7);
        v99 = (float32x2_t *)((char *)v98 + v7);
        *v99 = vmul_n_f32(v84, a7);
        *(float32x2_t *)((char *)v99 + v7) = vmul_n_f32(v85, a7);
      }
      v100 = a2 & 3;
      if (!j && v100 != 0)
      {
        v101 = (float32x2_t *)(a5 + 4 * v9);
        v102 = (float *)(a3 + 4 * (v64 - 1));
        if (v100 != 1)
        {
          if (v100 != 2)
          {
            v104 = *v102;
            v103 = &v102[(unint64_t)v8 / 4];
            v106 = *v103;
            v105 = &v103[(unint64_t)v8 / 4];
            v108 = *v101;
            v107 = (float32x2_t *)((char *)v101 + v7);
            v110 = *v107;
            v109 = (float32x2_t *)((char *)v107 + v7);
            v111 = *v105;
            v102 = &v105[v8 / 0xFFFFFFFFFFFFFFFELL - 1];
            *v109 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v108, v104), vmul_n_f32(v110, v106)), vmul_n_f32(*v109, v111)), a7);
            v101 = &v109[v7 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v112 = *v102;
          v113 = v102[(unint64_t)v8 / 4];
          --v102;
          v115 = *v101;
          v114 = (float32x2_t *)((char *)v101 + v7);
          *v114 = vmul_n_f32(vadd_f32(vmul_n_f32(v115, v112), vmul_n_f32(*v114, v113)), a7);
          v101 = (float32x2_t *)((char *)v114 - v7);
        }
        *v101 = vmul_n_f32(vmul_n_f32(*v101, *v102), a7);
      }
      v9 += 2;
      result -= 2;
    }
    if (result)
    {
      v116 = a2;
      for (k = __OFSUB__(a2, 3); v116 > 3; k = __OFSUB__(v116, 3))
      {
        v116 -= 4;
        v118 = (float *)(a5 + v116 * v7 + 4 * v9);
        v119 = (float32x4_t *)(a3 + 4 * v116);
        v120 = (float32x4_t *)((char *)v119 + v116 * v8);
        v121 = v116;
        v123 = *v120;
        v122 = (float32x4_t *)((char *)v120 + v8);
        v124 = *v122;
        v125 = (float32x2_t *)&v122->u32[(unint64_t)v8 / 4 + 2];
        v127 = *v118;
        v126 = &v118[(unint64_t)v7 / 4];
        v129 = *v126;
        v128 = &v126[(unint64_t)v7 / 4];
        v131 = *v128;
        v130 = &v128[(unint64_t)v7 / 4];
        v132 = *v130;
        v133 = (float *)((char *)&v130[(unint64_t)v7 / 4] - v116 * v7 + -4 * v7);
        v124.i32[0] = 0;
        v134.i32[0] = 0;
        v134.f32[1] = v125->f32[(unint64_t)v8 / 4 + 1] * v132;
        v135 = vadd_f32(v134, vmul_n_f32(*v125, v131));
        v136.i64[0] = 0;
        *(float32x2_t *)&v136.u32[2] = v135;
        v137 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v123, v127), v124, v129), v136);
        if ((v116 & 1) != 0)
        {
          v138 = *v133;
          v133 = (float *)((char *)v133 + v7);
          v139 = *v119;
          v119 = (float32x4_t *)((char *)v119 + v8);
          v137 = vmlaq_n_f32(v137, v139, v138);
          v121 = v116 - 1;
        }
        if (v121)
        {
          v140 = 0uLL;
          do
          {
            v142 = *v133;
            v141 = &v133[(unint64_t)v7 / 4];
            v143 = *v141;
            v133 = &v141[(unint64_t)v7 / 4];
            v145 = *v119;
            v144 = (float32x4_t *)((char *)v119 + v8);
            v146 = *v144;
            v119 = (float32x4_t *)((char *)v144 + v8);
            v137 = vmlaq_n_f32(v137, v145, v142);
            v140 = vmlaq_n_f32(v140, v146, v143);
            v45 = v121 <= 2;
            v121 -= 2;
          }
          while (!v45);
          v137 = vaddq_f32(v137, v140);
        }
        v147 = vmulq_n_f32(v137, a7);
        *v133 = v147.f32[0];
        v148 = &v133[(unint64_t)v7 / 4];
        *v148 = v147.f32[1];
        v149 = &v148[(unint64_t)v7 / 4];
        *v149 = v147.f32[2];
        v149[(unint64_t)v7 / 4] = v147.f32[3];
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v9);
        v152 = (__int32 *)(a3 + 4 * (v116 - 1));
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v154.i32[0] = *v152;
            v153 = &v152[(unint64_t)v8 / 4];
            v154.i32[1] = *v153;
            v155 = *(float *)&v153[(unint64_t)v8 / 4];
            v152 = &v153[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v157.i32[0] = *v151;
            v156 = &v151[(unint64_t)v7 / 4];
            v157.i32[1] = *v156;
            v158 = (float *)&v156[(unint64_t)v7 / 4];
            *v158 = (float)(vaddv_f32(vmul_f32(v157, v154)) + (float)(v155 * *v158)) * a7;
            v151 = (__int32 *)&v158[v7 / 0xFFFFFFFFFFFFFFFELL];
          }
          v159 = *(float *)v152;
          v160 = *(float *)&v152[(unint64_t)v8 / 4];
          --v152;
          v162 = *(float *)v151;
          v161 = (float *)&v151[(unint64_t)v7 / 4];
          *v161 = (float)((float)(v162 * v159) + (float)(*v161 * v160)) * a7;
          v151 = (__int32 *)&v161[v7 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = (float)(*(float *)v151 * *(float *)v152) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E841E40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL i;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x2_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  BOOL v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  float32x4_t *v47;
  float *v48;
  float v49;
  float v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  BOOL j;
  float32x2_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x2_t *v64;
  unint64_t *v65;
  float32x2_t v66;
  unint64_t *v67;
  unint64_t *v68;
  float32x2_t *v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t *v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x4_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  uint64_t v84;
  float32x2_t *v85;
  float *v86;
  float v87;
  float v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;
  float32x2_t *v93;
  float32x2_t v94;
  uint64_t v95;
  BOOL k;
  unsigned __int32 *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x2_t *v102;
  unsigned __int32 *v103;
  unsigned __int32 *v104;
  unsigned __int32 *v105;
  float *v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float v112;
  float32x4_t v113;
  float *v114;
  float v115;
  float v116;
  float32x4_t *v117;
  float32x4_t v118;
  float *v119;
  float *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  __int32 *v124;
  float32x2_t v125;
  __int32 *v126;
  float32x2_t v127;
  float *v128;
  float *v129;
  float v130;

  v14 = 4 * a6;
  v15 = 4 * a4;
  v16 = 0;
  if (result <= 3)
    goto LABEL_21;
  v17 = result - 3;
  do
  {
    v18 = a2;
    for (i = __OFSUB__(a2, 3); v18 > 3; i = __OFSUB__(v18, 3))
    {
      v18 -= 4;
      v20 = (float32x4_t *)(a5 + v18 * v14 + 4 * v16);
      v21 = (float32x4_t *)(a3 + 4 * v18);
      v22 = (float32x4_t *)((char *)v21 + v18 * v15);
      v23 = v18;
      v24 = *v22;
      v25 = (float32x2_t *)&v22->u32[(unint64_t)v15 / 4 + 2];
      v27 = *v20;
      v26 = (float32x4_t *)((char *)v20 + v14);
      a12 = *v26;
      v28 = (float32x4_t *)((char *)v26 + v14);
      a13 = *v28;
      v29 = (float32x4_t *)((char *)v28 + v14);
      a14 = *v29;
      v30 = (float32x4_t *)((char *)v29 + v14 - v18 * v14 + -4 * v14);
      v31 = vmlaq_lane_f32(a12, v27, *(float32x2_t *)v24.f32, 1);
      v32 = vaddq_f32(vmlaq_laneq_f32(a13, v27, v24, 2), vmulq_n_f32(a12, COERCE_FLOAT(*v25)));
      v33 = vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32(a14, v27, v24, 3), a13, v25->f32[(unint64_t)v15 / 4 + 1]), vmulq_lane_f32(a12, *v25, 1));
      if ((v18 & 1) != 0)
      {
        v34 = *v30;
        v30 = (float32x4_t *)((char *)v30 + v14);
        a11 = *v21;
        v21 = (float32x4_t *)((char *)v21 + v15);
        v27 = vmlaq_n_f32(v27, v34, a11.f32[0]);
        v31 = vmlaq_lane_f32(v31, v34, *(float32x2_t *)a11.f32, 1);
        v32 = vmlaq_laneq_f32(v32, v34, a11, 2);
        v33 = vmlaq_laneq_f32(v33, v34, a11, 3);
        v23 = v18 - 1;
      }
      if (v23)
      {
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v40 = *v30;
          v39 = (float32x4_t *)((char *)v30 + v14);
          v41 = *v39;
          v30 = (float32x4_t *)((char *)v39 + v14);
          a11 = *v21;
          v42 = (float32x4_t *)((char *)v21 + v15);
          a12 = *v42;
          v21 = (float32x4_t *)((char *)v42 + v15);
          v27 = vmlaq_n_f32(v27, v40, a11.f32[0]);
          v31 = vmlaq_lane_f32(v31, v40, *(float32x2_t *)a11.f32, 1);
          v32 = vmlaq_laneq_f32(v32, v40, a11, 2);
          v33 = vmlaq_laneq_f32(v33, v40, a11, 3);
          v35 = vmlaq_n_f32(v35, v41, a12.f32[0]);
          v36 = vmlaq_lane_f32(v36, v41, *(float32x2_t *)a12.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v41, a12, 2);
          v38 = vmlaq_laneq_f32(v38, v41, a12, 3);
          v43 = v23 <= 2;
          v23 -= 2;
        }
        while (!v43);
        v27 = vaddq_f32(v27, v35);
        v31 = vaddq_f32(v31, v36);
        v32 = vaddq_f32(v32, v37);
        v33 = vaddq_f32(v33, v38);
      }
      *v30 = vmulq_n_f32(v27, a7);
      v44 = (float32x4_t *)((char *)v30 + v14);
      *v44 = vmulq_n_f32(v31, a7);
      v45 = (float32x4_t *)((char *)v44 + v14);
      *v45 = vmulq_n_f32(v32, a7);
      *(float32x4_t *)((char *)v45 + v14) = vmulq_n_f32(v33, a7);
    }
    v46 = a2 & 3;
    if (!i && v46 != 0)
    {
      v47 = (float32x4_t *)(a5 + 4 * v16);
      v48 = (float *)(a3 + 4 * (v18 - 1));
      if (v46 != 1)
      {
        if (v46 != 2)
        {
          v49 = *v48;
          v50 = v48[(unint64_t)v15 / 4];
          v52 = *v47;
          v51 = (float32x4_t *)((char *)v47 + v14);
          v54 = *v51;
          v53 = (float32x4_t *)((char *)v51 + v14);
          --v48;
          a12 = vmlaq_n_f32(*v53, v52, v49);
          *v53 = vmulq_n_f32(vaddq_f32(a12, vmulq_n_f32(v54, v50)), a7);
          v47 = (float32x4_t *)((char *)v53 - 2 * v14);
        }
        v56 = *v47;
        v55 = (float32x4_t *)((char *)v47 + v14);
        a11 = vmlaq_n_f32(*v55, v56, *v48);
        *v55 = vmulq_n_f32(a11, a7);
        v47 = (float32x4_t *)((char *)v55 - v14);
      }
      *v47 = vmulq_n_f32(*v47, a7);
    }
    v16 += 4;
    v43 = v17 <= 4;
    v17 -= 4;
  }
  while (!v43);
  v43 = v17 <= -3;
  result = v17 + 3;
  if (!v43)
  {
LABEL_21:
    if (result > 1)
    {
      v57 = a2;
      for (j = __OFSUB__(a2, 3); v57 > 3; j = __OFSUB__(v57, 3))
      {
        v57 -= 4;
        v59 = (float32x2_t *)(a5 + v57 * v14 + 4 * v16);
        v60 = (float32x4_t *)(a3 + 4 * v57);
        v61 = (float32x4_t *)((char *)v60 + v57 * v15);
        v62 = v57;
        v63 = *v61;
        v64 = (float32x2_t *)&v61->u32[(unint64_t)v15 / 4 + 2];
        v66 = *v59;
        v65 = (unint64_t *)((char *)v59 + v14);
        a12.i64[0] = *v65;
        v67 = (unint64_t *)((char *)v65 + v14);
        a13.i64[0] = *v67;
        v68 = (unint64_t *)((char *)v67 + v14);
        a14.i64[0] = *v68;
        v69 = (float32x2_t *)((char *)v68 + v14 - v57 * v14 + -4 * v14);
        v70 = vmla_lane_f32(*(float32x2_t *)a12.f32, v66, *(float32x2_t *)v63.f32, 1);
        v71 = vadd_f32(vmla_laneq_f32(*(float32x2_t *)a13.f32, v66, v63, 2), vmul_n_f32(*(float32x2_t *)a12.f32, COERCE_FLOAT(*v64)));
        v72 = vadd_f32(vmla_n_f32(vmla_laneq_f32(*(float32x2_t *)a14.f32, v66, v63, 3), *(float32x2_t *)a13.f32, v64->f32[(unint64_t)v15 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)a12.f32, *v64, 1));
        if ((v57 & 1) != 0)
        {
          v73 = *v69;
          v69 = (float32x2_t *)((char *)v69 + v14);
          a11 = *v60;
          v60 = (float32x4_t *)((char *)v60 + v15);
          v66 = vmla_n_f32(v66, v73, a11.f32[0]);
          v70 = vmla_lane_f32(v70, v73, *(float32x2_t *)a11.f32, 1);
          v71 = vmla_laneq_f32(v71, v73, a11, 2);
          v72 = vmla_laneq_f32(v72, v73, a11, 3);
          v62 = v57 - 1;
        }
        if (v62)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v79 = *v69;
            v78 = (float32x2_t *)((char *)v69 + v14);
            v80 = *v78;
            v69 = (float32x2_t *)((char *)v78 + v14);
            a11 = *v60;
            v81 = (float32x4_t *)((char *)v60 + v15);
            a12 = *v81;
            v60 = (float32x4_t *)((char *)v81 + v15);
            v66 = vmla_n_f32(v66, v79, a11.f32[0]);
            v70 = vmla_lane_f32(v70, v79, *(float32x2_t *)a11.f32, 1);
            v71 = vmla_laneq_f32(v71, v79, a11, 2);
            v72 = vmla_laneq_f32(v72, v79, a11, 3);
            v74 = vmla_n_f32(v74, v80, a12.f32[0]);
            v75 = vmla_lane_f32(v75, v80, *(float32x2_t *)a12.f32, 1);
            v76 = vmla_laneq_f32(v76, v80, a12, 2);
            v77 = vmla_laneq_f32(v77, v80, a12, 3);
            v43 = v62 <= 2;
            v62 -= 2;
          }
          while (!v43);
          v66 = vadd_f32(v66, v74);
          v70 = vadd_f32(v70, v75);
          v71 = vadd_f32(v71, v76);
          v72 = vadd_f32(v72, v77);
        }
        *v69 = vmul_n_f32(v66, a7);
        v82 = (float32x2_t *)((char *)v69 + v14);
        *v82 = vmul_n_f32(v70, a7);
        v83 = (float32x2_t *)((char *)v82 + v14);
        *v83 = vmul_n_f32(v71, a7);
        *(float32x2_t *)((char *)v83 + v14) = vmul_n_f32(v72, a7);
      }
      v84 = a2 & 3;
      if (!j && v84 != 0)
      {
        v85 = (float32x2_t *)(a5 + 4 * v16);
        v86 = (float *)(a3 + 4 * (v57 - 1));
        if (v84 != 1)
        {
          if (v84 != 2)
          {
            v87 = *v86;
            v88 = v86[(unint64_t)v15 / 4];
            v90 = *v85;
            v89 = (float32x2_t *)((char *)v85 + v14);
            v92 = *v89;
            v91 = (float32x2_t *)((char *)v89 + v14);
            --v86;
            *(float32x2_t *)a12.f32 = vmla_n_f32(*v91, v90, v87);
            *v91 = vmul_n_f32(vadd_f32(*(float32x2_t *)a12.f32, vmul_n_f32(v92, v88)), a7);
            v85 = &v91[v14 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v94 = *v85;
          v93 = (float32x2_t *)((char *)v85 + v14);
          *(float32x2_t *)a11.f32 = vmla_n_f32(*v93, v94, *v86);
          *v93 = vmul_n_f32(*(float32x2_t *)a11.f32, a7);
          v85 = (float32x2_t *)((char *)v93 - v14);
        }
        *v85 = vmul_n_f32(*v85, a7);
      }
      v16 += 2;
      result -= 2;
    }
    if (result)
    {
      v95 = a2;
      for (k = __OFSUB__(a2, 3); v95 > 3; k = __OFSUB__(v95, 3))
      {
        v95 -= 4;
        v97 = (unsigned __int32 *)(a5 + v95 * v14 + 4 * v16);
        v98 = (float32x4_t *)(a3 + 4 * v95);
        v99 = (float32x4_t *)((char *)v98 + v95 * v15);
        v100 = v95;
        v101 = *v99;
        v102 = (float32x2_t *)&v99->u32[(unint64_t)v15 / 4 + 2];
        a11.i32[0] = *v97;
        v103 = &v97[(unint64_t)v14 / 4];
        a12.i32[0] = *v103;
        v104 = &v103[(unint64_t)v14 / 4];
        a13.i32[0] = *v104;
        v105 = &v104[(unint64_t)v14 / 4];
        a14.i32[0] = *v105;
        v106 = (float *)((char *)&v105[(unint64_t)v14 / 4] - v95 * v14 + -4 * v14);
        v101.i32[0] = 0;
        *(int32x2_t *)v107.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)&v107.u32[2] = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v108.i32[0] = 0;
        v108.f32[1] = v102->f32[(unint64_t)v15 / 4 + 1] * a13.f32[0];
        v109 = vadd_f32(v108, vmul_n_f32(*v102, a12.f32[0]));
        v110.i64[0] = 0;
        *(float32x2_t *)&v110.u32[2] = v109;
        v111 = vaddq_f32(vaddq_f32(vmulq_n_f32(v101, a11.f32[0]), v107), v110);
        if ((v95 & 1) != 0)
        {
          v112 = *v106;
          v106 = (float *)((char *)v106 + v14);
          a11 = *v98;
          v98 = (float32x4_t *)((char *)v98 + v15);
          v111 = vmlaq_n_f32(v111, a11, v112);
          v100 = v95 - 1;
        }
        if (v100)
        {
          v113 = 0uLL;
          do
          {
            v115 = *v106;
            v114 = &v106[(unint64_t)v14 / 4];
            v116 = *v114;
            v106 = &v114[(unint64_t)v14 / 4];
            a11 = *v98;
            v117 = (float32x4_t *)((char *)v98 + v15);
            a12 = *v117;
            v98 = (float32x4_t *)((char *)v117 + v15);
            v111 = vmlaq_n_f32(v111, a11, v115);
            v113 = vmlaq_n_f32(v113, a12, v116);
            v43 = v100 <= 2;
            v100 -= 2;
          }
          while (!v43);
          v111 = vaddq_f32(v111, v113);
        }
        v118 = vmulq_n_f32(v111, a7);
        *v106 = v118.f32[0];
        v119 = &v106[(unint64_t)v14 / 4];
        *v119 = v118.f32[1];
        v120 = &v119[(unint64_t)v14 / 4];
        *v120 = v118.f32[2];
        v120[(unint64_t)v14 / 4] = v118.f32[3];
      }
      v121 = a2 & 3;
      if (!k && v121 != 0)
      {
        v122 = (__int32 *)(a5 + 4 * v16);
        v123 = (__int32 *)(a3 + 4 * (v95 - 1));
        if (v121 != 1)
        {
          if (v121 != 2)
          {
            v125.i32[0] = *v123;
            v124 = &v123[(unint64_t)v15 / 4];
            v125.i32[1] = *v124;
            v123 = &v124[v15 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v127.i32[0] = *v122;
            v126 = &v122[(unint64_t)v14 / 4];
            v127.i32[1] = *v126;
            v128 = (float *)&v126[(unint64_t)v14 / 4];
            *v128 = (float)(vaddv_f32(vmul_f32(v127, v125)) + *v128) * a7;
            v122 = (__int32 *)&v128[v14 / 0xFFFFFFFFFFFFFFFELL];
          }
          v130 = *(float *)v122;
          v129 = (float *)&v122[(unint64_t)v14 / 4];
          *v129 = (float)((float)(v130 * *(float *)v123) + *v129) * a7;
          v122 = (__int32 *)&v129[v14 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v122 = *(float *)v122 * a7;
      }
    }
  }
  return result;
}

void sub_20E842324(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N, double a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *f64;
  uint64_t v17;
  float64x2_t *v18;
  const double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  uint64_t v36;
  double v37;

  if (__N >= 1 && a6 >= 1)
  {
    v11 = 0;
    v12 = a5 - 7;
    if (a5 <= 0)
      v13 = -(-a5 & 7);
    else
      v13 = a5 & 7;
    v14 = __N & 1;
    v15 = 8 * (v14 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v11 * a4);
      if (a5 < 8)
      {
        v18 = a1;
      }
      else
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = __Y;
          v20 = __N;
          v22 = *(float64x2_t *)f64;
          v23 = *((float64x2_t *)f64 + 1);
          v21 = (float64x2_t *)(f64 + 2);
          v24 = vmulq_n_f64(v22, a8);
          v25 = vmulq_n_f64(v23, a8);
          v26 = vmulq_n_f64(*v21, a8);
          v27 = vmulq_n_f64(v21[1], a8);
          v28 = v21 - 2;
          do
          {
            v29 = *v19++;
            v31 = *v18;
            v32 = v18[1];
            v30 = v18 + 2;
            v33 = *v30;
            v34 = v30[1];
            v18 = v30 + 2;
            v24 = vmlaq_n_f64(v24, v31, v29);
            v25 = vmlaq_n_f64(v25, v32, v29);
            v26 = vmlaq_n_f64(v26, v33, v29);
            v27 = vmlaq_n_f64(v27, v34, v29);
            --v20;
          }
          while (v20);
          *v28 = v24;
          v28[1] = v25;
          v35 = v28 + 2;
          *v35 = v26;
          v35[1] = v27;
          f64 = (_OWORD *)v35[2].f64;
          v17 += 8;
        }
        while (v17 < v12);
      }
      if (v13 >= 1)
      {
        v36 = v13;
        do
        {
          v37 = *(double *)f64;
          *(double *)f64 = cblas_ddot(__N, v18->f64, 1, __Y, 1) + a8 * v37;
          f64 = (_OWORD *)((char *)f64 + 8);
          v18 = (float64x2_t *)((char *)v18 + v15);
          --v36;
        }
        while (v36);
      }
      __Y += __N + v14;
      ++v11;
    }
    while (v11 != a6);
  }
}

void sub_20E8424A0(float64x2_t *a1, const double *__Y, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t __N)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *f64;
  uint64_t v15;
  float64x2_t *v16;
  const double *v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  double v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  uint64_t v32;

  if (__N >= 1 && a6 >= 1)
  {
    v9 = 0;
    v10 = a5 - 7;
    if (a5 <= 0)
      v11 = -(-a5 & 7);
    else
      v11 = a5 & 7;
    v12 = __N & 1;
    v13 = 8 * (v12 + __N);
    do
    {
      f64 = (_OWORD *)(a3 + 8 * v9 * a4);
      if (a5 < 8)
      {
        v16 = a1;
      }
      else
      {
        v15 = 0;
        v16 = a1;
        do
        {
          v17 = __Y;
          v18 = __N;
          v20 = *(float64x2_t *)f64;
          v21 = *((float64x2_t *)f64 + 1);
          v19 = (float64x2_t *)(f64 + 2);
          v22 = *v19;
          v23 = v19[1];
          v24 = v19 - 2;
          do
          {
            v25 = *v17++;
            v27 = *v16;
            v28 = v16[1];
            v26 = v16 + 2;
            v29 = *v26;
            v30 = v26[1];
            v16 = v26 + 2;
            v20 = vmlaq_n_f64(v20, v27, v25);
            v21 = vmlaq_n_f64(v21, v28, v25);
            v22 = vmlaq_n_f64(v22, v29, v25);
            v23 = vmlaq_n_f64(v23, v30, v25);
            --v18;
          }
          while (v18);
          *v24 = v20;
          v24[1] = v21;
          v31 = v24 + 2;
          *v31 = v22;
          v31[1] = v23;
          f64 = (_OWORD *)v31[2].f64;
          v15 += 8;
        }
        while (v15 < v10);
      }
      if (v11 >= 1)
      {
        v32 = v11;
        do
        {
          *(double *)f64 = cblas_ddot(__N, v16->f64, 1, __Y, 1) + *(double *)f64;
          f64 = (_OWORD *)((char *)f64 + 8);
          v16 = (float64x2_t *)((char *)v16 + v13);
          --v32;
        }
        while (v32);
      }
      __Y += __N + v12;
      ++v9;
    }
    while (v9 != a6);
  }
}

double *sub_20E8425FC(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64_t *v18;
  float64_t *v19;

  if (a5 >= 1)
  {
    v7 = a4;
    do
    {
      v8 = a6;
      v9 = a2;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v11 = &a3[v7 + v7];
      v12.f64[0] = *v11;
      v12.f64[1] = v11[a4];
      v13 = vmulq_n_f64(v10, a7);
      v14 = vmulq_n_f64(v12, a7);
      do
      {
        v15 = *v9;
        v16 = v9[1];
        v9 += 2;
        v17 = *result++;
        v13 = vmlaq_n_f64(v13, v15, v17);
        v14 = vmlaq_n_f64(v14, v16, v17);
        --v8;
      }
      while (v8);
      v18 = &a3[v7];
      *a3++ = v13.f64[0];
      *v18 = v13.f64[1];
      v19 = &v18[v7];
      *v19 = v14.f64[0];
      v19[a4] = v14.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

double *sub_20E84266C(double *result, float64x2_t *a2, float64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  float64_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64_t *v15;
  float64_t *v16;

  if (a5 >= 1)
  {
    v6 = a4;
    do
    {
      v7 = a2;
      v8 = a6;
      v10.f64[0] = *a3;
      v10.f64[1] = a3[a4];
      v9 = &a3[v6 + v6];
      v11.f64[0] = *v9;
      v11.f64[1] = v9[a4];
      do
      {
        v12 = *v7;
        v13 = v7[1];
        v7 += 2;
        v14 = *result++;
        v10 = vmlaq_n_f64(v10, v12, v14);
        v11 = vmlaq_n_f64(v11, v13, v14);
        --v8;
      }
      while (v8);
      v15 = &a3[v6];
      *a3++ = v10.f64[0];
      *v15 = v10.f64[1];
      v16 = &v15[v6];
      *v16 = v11.f64[0];
      v16[a4] = v11.f64[1];
      result += a6 & 1;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_20E8426D4(int a1, int a2, uint64_t a3, uint64_t a4, const double *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10, double a11, int8x16_t a12, __n128 a13, float64x2_t a14, float64x2_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,__int128 a42,__int128 a43,__int128 a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55)
{
  BOOL v58;
  _BOOL4 v59;

  if (a3)
  {
    v58 = a9 == 0.0 || a4 == 0;
    v59 = v58;
    if (!v59 || a10 != 1.0)
    {
      if (v59)
      {
        sub_20E856278(a1, a3, a7, a8, a10);
      }
      else
      {
        if (a10 == 0.0)
          sub_20E856278(a1, a3, a7, a8, a10);
        if (a3 > 45 || a4 >= 46)
        {
          if (a1 == 121)
            sub_20E83B794(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              SDWORD2(a37),
              a38,
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              SDWORD2(a40),
              SHIDWORD(a40),
              a41,
              *((uint64_t *)&a41 + 1),
              (void *)a42,
              *((uint64_t *)&a42 + 1),
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55);
          else
            sub_20E85EFEC(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48);
        }
        else if (a1 == 121)
        {
          if (a2 == 111)
            sub_20E85E774(a3, a4, a5, a6, a7, a8, a9, a10);
          else
            sub_20E85E908(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else if (a2 == 111)
        {
          sub_20E85EB94(a3, a4, a5, a6, a7, a8, a9, a10);
        }
        else
        {
          sub_20E85ED58(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
        }
      }
    }
  }
}

double *sub_20E8428D0(float64x2_t *a1, float64x2_t *a2, float64x2_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  double *result;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;

  v7 = a5 & 7;
  v8 = a5 - v7;
  if (v8)
  {
    v10 = _X2;
    v11 = 8 * a4;
    v13 = *a1;
    v14 = a1[1];
    v12 = a1 + 2;
    v15 = *v12;
    v16 = v12[1];
    result = v12[2].f64;
    do
    {
      v17 = a6;
      __asm { PRFM            #1, [X2,#0x40] }
      v24 = *_X2;
      v25 = _X2[1];
      v26 = _X2[2];
      v27 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      v32 = _X2[2];
      v33 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      v38 = _X2[2];
      v39 = _X2[3];
      _X2 = (float64x2_t *)((char *)_X2 + v11);
      __asm { PRFM            #1, [X2,#0x40] }
      v41 = *_X2;
      v42 = _X2[1];
      v43 = _X2[2];
      v44 = _X2[3];
      v46 = *a2;
      v47 = a2[1];
      _X6 = a2 + 2;
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      do
      {
        v51 = v13;
        v52 = v14;
        v24 = vmlaq_n_f64(v24, v13, v46.f64[0]);
        v30 = vmlaq_laneq_f64(v30, v13, v46, 1);
        v13 = *(float64x2_t *)result;
        v14 = *(float64x2_t *)(result + 2);
        v53 = (float64x2_t *)(result + 4);
        v36 = vmlaq_n_f64(v36, v51, v47.f64[0]);
        v41 = vmlaq_laneq_f64(v41, v51, v47, 1);
        v54 = *_X6;
        v55 = _X6[1];
        _X6 += 2;
        v56 = v15;
        v25 = vmlaq_n_f64(v25, v52, v46.f64[0]);
        v31 = vmlaq_laneq_f64(v31, v52, v46, 1);
        v57 = v16;
        v37 = vmlaq_n_f64(v37, v52, v47.f64[0]);
        v42 = vmlaq_laneq_f64(v42, v52, v47, 1);
        v15 = *v53;
        v16 = v53[1];
        result = v53[2].f64;
        v26 = vmlaq_n_f64(v26, v56, v46.f64[0]);
        v32 = vmlaq_laneq_f64(v32, v56, v46, 1);
        v38 = vmlaq_n_f64(v38, v56, v47.f64[0]);
        v43 = vmlaq_laneq_f64(v43, v56, v47, 1);
        v27 = vmlaq_n_f64(v27, v57, v46.f64[0]);
        v33 = vmlaq_laneq_f64(v33, v57, v46, 1);
        v46 = v54;
        v39 = vmlaq_n_f64(v39, v57, v47.f64[0]);
        v44 = vmlaq_laneq_f64(v44, v57, v47, 1);
        v47 = v55;
        --v17;
      }
      while (v17);
      v58 = (float64x2_t *)((char *)v10 + v11);
      *v10 = v24;
      v10[1] = v25;
      v10[2] = v26;
      v10[3] = v27;
      v10 += 4;
      *v58 = v30;
      v58[1] = v31;
      v58[2] = v32;
      v58[3] = v33;
      v59 = (float64x2_t *)((char *)v58 + v11);
      *v59 = v36;
      v59[1] = v37;
      v59[2] = v38;
      v59[3] = v39;
      v60 = (float64x2_t *)((char *)v59 + v11);
      *v60 = v41;
      v60[1] = v42;
      v60[2] = v43;
      v60[3] = v44;
      _X2 = v10;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    result = a1[4].f64;
  }
  if (v7)
    return sub_20E84266C(result - 8, a2, _X2->f64, a4, v7, a6);
  return result;
}

#error "20E842CF4: call analysis failed (funcsize=189)"

uint64_t sub_20E842D1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E856EB8;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E856AB0;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            sub_20E82B78C(111, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13 * a5, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t sub_20E842EA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E8578F0;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E857384;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13 * a5;
        v27 = v17 + 8 * (v26 + v14);
        v18 = v17 + 8 * v26;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            sub_20E82B78C(112, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v29(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_20E843048(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int v25[2];
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v28;
  uint64_t v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E83FDB4;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E83F8F0;
  v27 = v8;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v12 = 0;
    v13 = 0;
    v26 = a7 << 8;
    v29 = a7;
    v23 = a2;
    do
    {
      v28 = v12;
      v24 = v13 + 32;
      if (v13 + 32 <= a2)
        v14 = 32;
      else
        v14 = a2 - v13;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a6;
        *(_QWORD *)v25 = a4 + 8 * v13 * a5;
        v18 = 32;
        do
        {
          if (a3 >= v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = v19 + v15;
          a8.n128_u64[0] = v10;
          if (v13)
          {
            sub_20E82B78C(112, 111, v14, v20, v13, v25[0], a5, v17, a7, v17 + v28, a7);
            a7 = v29;
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = v27(v14, v20, *(_QWORD *)v25 + 8 * v13, a5, v17 + v28, a7, a8);
          a7 = v29;
          v17 += v26;
          v18 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v12 = v28 + 256;
      a2 = v23;
      v13 += 32;
    }
    while (v24 < v23);
  }
  return result;
}

uint64_t sub_20E8431D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  char v30;

  v8 = sub_20E8407C0;
  if ((_DWORD)result == 132)
    v8 = sub_20E840334;
  v29 = v8;
  v25 = a2;
  if (a2 >= 1)
  {
    v10 = a8.n128_u64[0];
    v30 = 0;
    v28 = a7 << 8;
    v12 = a2;
    do
    {
      v13 = v12 - 32;
      if (v12 < 0x20)
        v13 = 0;
      v26 = v13;
      if (v12 >= 0x20)
        v14 = 32;
      else
        v14 = v12;
      if (a3 >= 1)
      {
        v15 = 0;
        v16 = 0;
        v17 = a4 + 8 * v13;
        v27 = v17 + 8 * (v26 + v14) * a5;
        v18 = v17 + 8 * v26 * a5;
        v19 = a6 + 8 * v12;
        v20 = 32;
        do
        {
          if (a3 >= v20)
            v21 = v20;
          else
            v21 = a3;
          v22 = v21 + v15;
          a8.n128_u64[0] = v10;
          if ((v30 & 1) != 0)
          {
            sub_20E82B78C(111, 111, v14, v22, v25 - (v26 + v14), v27, a5, v19, a7, v19 - 8 * v14, a7);
            a8.n128_u64[0] = 1.0;
          }
          v16 += 32;
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))v29)(v14, v22, v18, a5, v19 - 8 * v14, a7, a8);
          v19 += v28;
          v20 += 32;
          v15 -= 32;
        }
        while (v16 < a3);
      }
      v30 = 1;
      v12 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_20E843378(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E82BE58;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E82BA84;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            sub_20E82B78C(111, 112, v19, v17, v14, v16, a7, a4 + 8 * v14, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 + 8 * v14 * a5, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t sub_20E843500(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v29;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E82C818;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E82C2F4;
  v28 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v22 = a2 << 32;
    v29 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v26 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        if (v13 >= 0x20)
          v17 = 32;
        else
          v17 = v13;
        v27 = a3 - (v14 + v17);
        v18 = a4 + 8 * v14 * a5 + 8 * v14;
        v19 = a6 + a7 * (8 * v14 + 8 * v17);
        v20 = v22;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v21 = 32;
          else
            v21 = v20 >> 32;
          a8.n128_u64[0] = v11;
          if ((v29 & 1) == 0)
          {
            sub_20E82B78C(111, 111, v21, v17, v27, v19, a7, v18 + 8 * v17, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v28(v21, v17, v18, a5, v16, a7, a8);
          v20 -= 0x2000000000;
          v16 += 256;
          v19 += 256;
        }
        while (v15 < a2);
      }
      v29 = 0;
      v13 = v26;
    }
    while (v26 >= 1);
  }
  return result;
}

uint64_t sub_20E8436A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E84527C;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E844E08;
  v26 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v13 = 0;
    v14 = 0;
    v20 = a2 << 32;
    v23 = a7 << 8;
    do
    {
      v25 = v14 + 32;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6;
        if (v25 <= a3)
          v17 = 32;
        else
          v17 = (int)a3 - (int)v14;
        v18 = v20;
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v19 = 32;
          else
            v19 = v18 >> 32;
          a8.n128_u64[0] = v11;
          if (v14)
          {
            sub_20E82B78C(111, 111, v19, v17, v14, v16, a7, a4 + 8 * v14 * a5, a5, v16 + v13, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v26(v19, v17, a4 + 8 * v14 * a5 + 8 * v14, a5, v16 + v13, a7, a8);
          v18 -= 0x2000000000;
          v16 += 256;
        }
        while (v15 < a2);
      }
      v13 += v23;
      v14 += 32;
    }
    while (v25 < a3);
  }
  return result;
}

uint64_t sub_20E84382C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  char v30;

  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E845BF0;
  if ((_DWORD)result == 132)
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_20E845798;
  v29 = v8;
  if (a3 >= 1)
  {
    v11 = a8.n128_u64[0];
    v23 = a2 << 32;
    v30 = 1;
    v13 = a3;
    do
    {
      LODWORD(v14) = v13 - 32;
      if (v13 >= 0x20)
        v14 = v14;
      else
        v14 = 0;
      v27 = v14;
      if (a2 >= 1)
      {
        v15 = 0;
        v16 = a6 + 8 * v14 * a7;
        v17 = v23;
        v18 = a4 + 8 * v14;
        if (v13 >= 0x20)
          v19 = 32;
        else
          v19 = v13;
        v28 = v18 + 8 * (v27 + v19) * a5;
        v20 = v18 + 8 * v27 * a5;
        v21 = a6 + a7 * (8 * v27 + 8 * v19);
        do
        {
          v15 += 32;
          if (v15 <= a2)
            v22 = 32;
          else
            v22 = v17 >> 32;
          a8.n128_u64[0] = v11;
          if ((v30 & 1) == 0)
          {
            sub_20E82B78C(111, 112, v22, v19, a3 - (v27 + v19), v21, a7, v28, a5, v16, a7);
            a8.n128_u64[0] = 1.0;
          }
          result = v29(v22, v19, v20, a5, v16, a7, a8);
          v17 -= 0x2000000000;
          v16 += 256;
          v21 += 256;
        }
        while (v15 < a2);
      }
      v30 = 0;
      v13 = v27;
    }
    while ((int)v27 >= 1);
  }
  return result;
}

void sub_20E8439D0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (**a12)(), uint64_t (**a13)(), uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,int a24,__int16 a25,__int16 a26,char a27)
{
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t (**v42)();
  uint64_t (**v43)();
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t vars8;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *(*v96)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  _OWORD *(*v97)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  char *v98;

  v27 = MEMORY[0x24BDAC7A8](a1);
  v79 = v33;
  v73 = v34;
  v35 = v31;
  v36 = v29;
  v38 = v37;
  v40 = v39;
  v43 = a12;
  v42 = a13;
  STACK[0x10118] = *MEMORY[0x24BDAC8D0];
  if (!a12)
    v43 = off_24C9AB6C0;
  if (!a13)
    v42 = off_24C9AB700;
  v91 = (uint64_t)v42;
  v44 = v43 + 1;
  if (v27 == 111)
    v45 = 1;
  else
    v45 = v32;
  v85 = v45;
  v86 = v32;
  if (v27 == 111)
    v46 = v32;
  else
    v46 = 1;
  v72 = v46;
  if (v27 == 111)
    v44 = v43;
  v84 = *v44;
  if (v28 == 111)
    v47 = 1;
  else
    v47 = a9;
  v77 = v47;
  v78 = a9;
  v48 = 3;
  if (v28 == 111)
    v48 = 2;
  v76 = v43[v48];
  if (v31 <= 512)
    v49 = 64;
  else
    v49 = 384;
  v50 = 256;
  if (v29 < 512)
    v50 = 64;
  v87 = v50;
  a26 = 0;
  v51 = 8;
  if (v29 < 512)
    v51 = 6;
  v52 = ((((unint64_t)(v49 << v51) >> 6) & 0x1FFFF) << 8) | 0x40;
  v89 = v30;
  v53 = ((unint64_t)(v30 * v49) >> 6 << 8) | 0x20;
  if ((unint64_t)(v52 + v53) > 0x10000)
  {
    v55 = v49;
    v56 = (char *)malloc_type_malloc(v52 + v53, 0xC9775249uLL);
    v49 = v55;
    v90 = v56;
    v98 = &v56[v53];
    LOBYTE(a26) = 1;
    v54 = (__int16 *)((char *)&a26 + 1);
  }
  else
  {
    v98 = &a27;
    v90 = &a27 + v52;
    HIBYTE(a26) = 0;
    v54 = &a26;
  }
  *(_BYTE *)v54 = 0;
  if (v35 >= 1)
  {
    v82 = 0;
    v57 = 0;
    v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))v91;
    v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 24);
    if (v89 <= 0)
      v58 = -(-v89 & 3);
    else
      v58 = v89 & 3;
    v93 = v58;
    v59 = v49;
    v74 = v49;
    v75 = v35;
    vars8 = v36;
    do
    {
      v81 = v59;
      if (v35 >= v59)
        v60 = v59;
      else
        v60 = v35;
      v80 = v57 + v49;
      if (v57 + v49 <= v35)
        v61 = v49;
      else
        v61 = v35 - v57;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, float))v76)(v61, v89, v79 + 4 * v57 * v77, v78, v90, v40);
      if (v36 >= 1)
      {
        v62 = 0;
        v63 = 16 * (v60 + v82);
        v88 = v73 + 4 * v57 * v72;
        v65 = v38 != 1.0 && v57 == 0 && v38 != 0.0;
        v66 = (float32x4_t *)v85;
        do
        {
          v94 = v62 + v87;
          if (v62 + v87 <= v36)
            v67 = v87;
          else
            v67 = v36 - v62;
          if ((v67 & 7) != 0)
          {
            v96 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))(v91 + 8);
            v97 = *(_OWORD *(**)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))(v91 + 32);
          }
          v92 = v62;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))v84)(v67, v61, v88 + 4 * v62 * v85, v86, v98);
          v95 = (uint64_t)v66;
          v68 = 0;
          if (v89 >= 4)
          {
            v69 = v90;
            do
            {
              if (v65)
                v97(v98, v69, v66, v86, v67, v61, v38);
              else
                v96(v98, v69, v66, v86, v67, v61);
              v68 += 4;
              v69 += v63;
              v66 += v86;
            }
            while (v68 < v89 - 3);
          }
          if (v93)
          {
            v70 = v85 + 4 * v92 + 4 * v68 * v86;
            v71 = &v90[4 * v68 * v61];
            if (v65)
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(v91 + 40))(v98, v71, v70, v86, v67, v93, v61, v38);
            else
              (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 16))(v98, v71, v70, v86, v67, v93, v61);
          }
          v36 = vars8;
          v66 = (float32x4_t *)(v95 + 4 * v87);
          v62 = v94;
        }
        while (v94 < vars8);
      }
      v49 = v74;
      v35 = v75;
      v59 = v81 + v74;
      v82 -= v74;
      v57 = v80;
      v97 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
      v96 = (_OWORD *(*)(char *, char *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
    }
    while (v80 < v75);
  }
  if (HIBYTE(a26))
    free(v98);
  if ((_BYTE)a26)
    free(v90);
}

void sub_20E843E48(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11)
{
  int v11;
  int v12;
  int v16;
  char *v19;
  char *v20;
  int v21;
  int v23;
  int v24;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = a7;
  v12 = a6;
  v16 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v21 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a9 < (int)a7 || a9 <= 0)
      {
        v31 = a9;
        v33 = a7;
        v20 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v34 = a2;
        v31 = 142;
        v33 = 141;
        v20 = "SIDE must be %d or %d, but is set to %d";
        v27 = 2;
        goto LABEL_41;
      }
      if (a9 < (int)a6 || a9 <= 0)
      {
        v31 = a9;
        v33 = a6;
        v20 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v27 = 10;
LABEL_41:
        v24 = cblas_errprn(v27, 2000, v20, v31, v33, v34);
        goto LABEL_43;
      }
    }
    v24 = 2000;
LABEL_43:
    if (a11 >= v11 && a11 > 0)
      goto LABEL_47;
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v24 = v21;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a9 >= (int)a7 && a9 > 0)
      goto LABEL_24;
    v30 = a9;
    v32 = a7;
    v19 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v32 = 141;
      v34 = a2;
      v30 = 142;
      v19 = "SIDE must be %d or %d, but is set to %d";
      v23 = 2;
      goto LABEL_26;
    }
    if (a9 >= (int)a6 && a9 > 0)
    {
LABEL_24:
      v24 = 2000;
      goto LABEL_27;
    }
    v30 = a9;
    v32 = a6;
    v19 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v23 = 10;
LABEL_26:
  v24 = cblas_errprn(v23, 2000, v19, v30, v32, v34);
LABEL_27:
  if (a11 < v12 || a11 <= 0)
  {
    v21 = cblas_errprn(12, v24, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v24 = cblas_errprn(3, v24, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v24 = cblas_errprn(4, v24, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v24 = cblas_errprn(6, v24, "M cannot be less than zero; it is set to %d.", v12);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v24 = cblas_errprn(5, v24, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v12 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v11 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v24 = cblas_errprn(7, v24, "N cannot be less than zero; it is set to %d.", v11);
LABEL_54:
  if (v24 == 2000)
  {
    if (a1 == 102)
    {
      sub_20E85C80C(v16, a3, a4, a5, v12, v11, a8, a9, a10, a11, 0, 0);
    }
    else
    {
      if (v16 == 141)
        v28 = 142;
      else
        v28 = 141;
      if (a3 == 121)
        v29 = 122;
      else
        v29 = 121;
      sub_20E85C80C(v28, v29, a4, a5, v11, v12, a8, a9, a10, a11, 0, 0);
    }
  }
  else
  {
    cblas_xerbla(v24, "cblas_dtrmm", "");
  }
}

uint64_t sub_20E8441F0(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, double a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;
  __int32 *v20;
  BOOL v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t *v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  char *v35;
  float32x2_t v36;
  char *v37;
  char *v38;
  float32x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t *v51;
  float32x2_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x2_t *v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 *v67;
  float32x4_t v68;
  __n128 *v69;
  __n128 *v70;
  float32x2_t *v71;
  uint64_t i;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  __n128 *v89;
  float32x4_t *v90;
  float32x4_t *v91;
  float32x4_t *v92;

  a7.i64[1] = a8.i64[0];
  v13 = 0;
  v14 = 4 * a4;
  v15 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_13:
    if ((result & 2) != 0)
    {
      v29 = (float32x2_t *)&a5[v13];
      a5 = (_DWORD *)((char *)a5 + 2 * v15);
      v30 = a2;
      v31 = (float32x2_t *)&a3[v13];
      v32 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v33 = v32;
      do
      {
        v34 = *v31;
        v31 = (float32x2_t *)((char *)v31 + v14);
        v32 = vmla_n_f32(v32, v34, v34.f32[0]);
        v33 = vmla_lane_f32(v33, v34, v34, 1);
        v21 = v30-- <= 1;
      }
      while (!v21);
      v36 = *v29;
      v35 = (char *)v29 + v15;
      HIDWORD(a13) = *((_DWORD *)v35 + 1);
      v37 = &v35[-v15];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v32, a7.f32[0]), v36, a7, 2);
      *(_QWORD *)v37 = a8.i64[0];
      v38 = &v37[v15];
      *((_DWORD *)v38 + 1) = vmla_laneq_f32(vmul_n_f32(v33, *(float *)&a7), *(float32x2_t *)&a13, a7, 2).i32[1];
      v39 = (float32x2_t *)&v38[-v15 + 8];
      v40 = v13 + 2;
      if (result > v13 + 2)
      {
        do
        {
          v41 = a2;
          v42 = (float32x2_t *)&a3[v13];
          v43 = (float32x2_t *)&a3[v40];
          v44 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v45 = v44;
          do
          {
            v46 = *v43;
            v43 = (float32x2_t *)((char *)v43 + v14);
            v47 = *v42;
            v42 = (float32x2_t *)((char *)v42 + v14);
            v44 = vmla_n_f32(v44, v46, v47.f32[0]);
            v45 = vmla_lane_f32(v45, v46, v47, 1);
            v21 = v41-- <= 1;
          }
          while (!v21);
          v49 = *v39;
          v48 = (float32x2_t *)((char *)v39 + v15);
          v50 = *v48;
          v51 = (float32x2_t *)((char *)v48 + v15 + -2 * v15);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v44, a7.f32[0]), v49, a7, 2);
          *v51 = *(float32x2_t *)a8.i8;
          v52 = (float32x2_t *)((char *)v51 + v15);
          *v52 = vmla_laneq_f32(vmul_n_f32(v45, a7.f32[0]), v50, a7, 2);
          v39 = (float32x2_t *)((char *)v52 + v15 + -2 * v15 + 8);
          v40 += 2;
        }
        while (v40 < result);
        v13 += 2;
      }
      else
      {
        v13 += 2;
      }
    }
    for (; result > v13; v13 += 4)
    {
      v53 = (float32x4_t *)&a5[v13];
      a5 += v15;
      v54 = a2;
      v55 = (float32x4_t *)&a3[v13];
      v56 = (float32x4_t)veorq_s8(a8, a8);
      v57 = v56;
      v58 = *(float32x2_t *)v56.f32;
      v59 = *(float32x2_t *)v56.f32;
      do
      {
        v60 = *v55;
        v55 = (float32x4_t *)((char *)v55 + v14);
        v56 = vmlaq_n_f32(v56, v60, v60.f32[0]);
        v57 = vmlaq_lane_f32(v57, v60, *(float32x2_t *)v60.f32, 1);
        v58 = vmla_laneq_f32(v58, *(float32x2_t *)&v60.u32[2], v60, 2);
        v59 = vmla_laneq_f32(v59, *(float32x2_t *)&v60.u32[2], v60, 3);
        v21 = v54-- <= 1;
      }
      while (!v21);
      v62 = *v53;
      v61 = (float32x4_t *)((char *)v53 + v15);
      v64 = *v61;
      v63 = (float32x2_t *)((char *)v61 + v15);
      v65 = v63[1];
      v66 = *(float32x2_t *)((char *)v63 + v15 + 8);
      v67 = (__n128 *)&v63[v15 / 0xFFFFFFFFFFFFFFFCLL];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v56, a7.f32[0]), v62, a7, 2);
      v68 = vmlaq_laneq_f32(vmulq_n_f32(v57, a7.f32[0]), v64, a7, 2);
      v69 = (__n128 *)((char *)v67 + v15);
      *v67 = (__n128)a8;
      v70 = v67 + 1;
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u32[0] = v68.u32[1];
      v69 = (__n128 *)((char *)v69 + 4);
      v69->n128_u64[0] = v68.u64[1];
      v71 = (float32x2_t *)((char *)v69 + v15);
      *v71 = vmla_laneq_f32(vmul_n_f32(v58, a7.f32[0]), v65, a7, 2);
      v71->i32[(unint64_t)v15 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v59, *(float *)&a7), v66, a7, 2).i32[1];
      for (i = v13 + 4; i < result; i += 4)
      {
        v73 = a2;
        v74 = (float32x4_t *)&a3[v13];
        v75 = (float32x4_t *)&a3[i];
        v76 = (float32x4_t)veorq_s8(a8, a8);
        v77 = v76;
        v78 = v76;
        v79 = v76;
        do
        {
          v80 = *v75;
          v75 = (float32x4_t *)((char *)v75 + v14);
          v81 = *v74;
          v74 = (float32x4_t *)((char *)v74 + v14);
          v76 = vmlaq_n_f32(v76, v80, v81.f32[0]);
          v77 = vmlaq_lane_f32(v77, v80, *(float32x2_t *)v81.f32, 1);
          v78 = vmlaq_laneq_f32(v78, v80, v81, 2);
          v79 = vmlaq_laneq_f32(v79, v80, v81, 3);
          v21 = v73-- <= 1;
        }
        while (!v21);
        v83 = *(float32x4_t *)v70;
        v82 = (float32x4_t *)((char *)v70 + v15);
        v85 = *v82;
        v84 = (float32x4_t *)((char *)v82 + v15);
        v87 = *v84;
        v86 = (float32x4_t *)((char *)v84 + v15);
        v88 = *v86;
        v89 = (__n128 *)((char *)v86 + v15 + -4 * v15);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v76, a7.f32[0]), v83, a7, 2);
        *v89 = (__n128)a8;
        v90 = (float32x4_t *)((char *)v89 + v15);
        *v90 = vmlaq_laneq_f32(vmulq_n_f32(v77, a7.f32[0]), v85, a7, 2);
        v91 = (float32x4_t *)((char *)v90 + v15);
        *v91 = vmlaq_laneq_f32(vmulq_n_f32(v78, a7.f32[0]), v87, a7, 2);
        v92 = (float32x4_t *)((char *)v91 + v15);
        *v92 = vmlaq_laneq_f32(vmulq_n_f32(v79, a7.f32[0]), v88, a7, 2);
        v70 = (__n128 *)((char *)&v92[1] + v15 + -4 * v15);
      }
    }
    return result;
  }
  v16 = a5;
  a5 = (_DWORD *)((char *)a5 + v15);
  v17 = a2;
  v18 = a3;
  v19 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v18 = &a3[(unint64_t)v14 / 4], v19.f32[0] = *a3 * *a3, v17 = a2 - 1, a2 > 1))
  {
    do
    {
      a12.f32[0] = *v18;
      v20 = (__int32 *)&v18[(unint64_t)v14 / 4];
      a12.i32[1] = *v20;
      v18 = (float *)&v20[(unint64_t)v14 / 4];
      v19 = vmla_f32(v19, a12, a12);
      v21 = v17 <= 2;
      v17 -= 2;
    }
    while (!v21);
    v19.f32[0] = vaddv_f32(v19);
  }
  a12.i32[0] = *v16;
  v19.f32[0] = v19.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v19, a12, a7, 2);
  *v16 = a8.i32[0];
  v22 = (float32x2_t *)(v16 + 1);
  v23 = 1;
  if (result > 1)
  {
    do
    {
      v24 = a2;
      v25 = a3;
      v26 = (float32x2_t *)&a3[v23];
      v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      do
      {
        v28 = *v26;
        v26 = (float32x2_t *)((char *)v26 + v14);
        *(float *)&a13 = *v25;
        v25 = (float *)((char *)v25 + v14);
        v27 = vmla_n_f32(v27, v28, *(float *)&a13);
        v21 = v24-- <= 1;
      }
      while (!v21);
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v27, a7.f32[0]), *v22, a7, 2);
      *v22++ = *(float32x2_t *)a8.i8;
      v23 += 2;
    }
    while (v23 < result);
    v13 = 1;
    goto LABEL_13;
  }
  return result;
}

unint64_t sub_20E8444E4()
{
  unsigned int v0;
  unsigned int v1;
  char *v3;
  unsigned int v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  qos_class_self();
  dword_254A5A608 = pthread_qos_max_parallelism();
  v0 = pthread_qos_max_parallelism();
  dword_254A5A60C = v0;
  v1 = dword_254A5A608;
  if (dword_254A5A608 == -1 || v0 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      sub_20E84466C();
    v1 = 1;
    dword_254A5A608 = 1;
    goto LABEL_12;
  }
  if (!dword_254A5A608)
  {
    v1 = 2;
    dword_254A5A608 = 2;
  }
  if (v0 < v1)
LABEL_12:
    dword_254A5A60C = v1;
  v3 = getenv("VECLIB_MAXIMUM_THREADS");
  if (v3)
  {
    v4 = strtol(v3, 0, 0);
    if (v4)
    {
      if (dword_254A5A60C > v4)
      {
        dword_254A5A608 = v4;
        dword_254A5A60C = v4;
      }
    }
  }
  byte_254A5A614 = getenv("APPLE_LAPACK_FILL_NAN") != 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  result = sub_20E83548C((uint64_t)&v6);
  dword_254A5A618 = DWORD1(v7);
  unk_254A5A620 = *((_QWORD *)&v8 + 1);
  dword_254A5A628 = DWORD2(v9);
  return result;
}

uint64_t sub_20E84460C()
{
  if (qword_254A5A630 != -1)
    dispatch_once(&qword_254A5A630, &unk_24C9AB750);
  if ((dword_254A5A610 - 1) > 2)
    return 16;
  else
    return dword_2102D6C10[dword_254A5A610 - 1];
}

void sub_20E84466C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_20E81F000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "pthread_qos_max_parallelism() returned error in LAPACK call to initHardwareInfo()\n", v0, 2u);
}

uint64_t sub_20E8446B0(uint64_t a1, __CLPK_integer *a2, __CLPK_integer *a3, double *a4, int *a5, double *a6, __CLPK_doublereal *a7, __CLPK_integer *a8, double *a9)
{
  int v16;
  __CLPK_integer *v17;
  __CLPK_integer v18;
  int v19;
  BOOL v20;
  __CLPK_integer __m;
  int m;
  double alpha;

  v16 = lsame_();
  m = 0;
  if (*a6 != 0.0)
  {
    if (v16)
      v17 = a2;
    else
      v17 = a3;
    v18 = *v17;
    if (v18 >= 1)
    {
      if (*a5 >= 1)
        v19 = *a5 * (v18 - 1) + 1;
      else
        v19 = 1;
      while (a4[v19 - 1] == 0.0)
      {
        v19 -= *a5;
        v20 = __OFSUB__(v18--, 1);
        if ((v18 < 0) ^ v20 | (v18 == 0))
        {
          v18 = 0;
          break;
        }
      }
    }
    alpha = 0.0;
    __m = v18;
    if (v16)
    {
      m = iladlc_(&__m, a3, a7, a8);
      if (__m >= 1)
      {
        sub_20E83F474("Transpose", &__m, &m, &unk_254A4A478, a7, a8, a4, a5, &unk_254A5A638, a9, &unk_254A4A480);
        alpha = -*a6;
        dger_(&__m, &m, &alpha, a4, a5, a9, (int *)&unk_254A4A480, a7, a8);
      }
    }
    else
    {
      m = iladlr_(a2, &__m, a7, a8);
      if (__m >= 1)
      {
        sub_20E83F474("No transpose", &m, &__m, &unk_254A4A478, a7, a8, a4, a5, &unk_254A5A638, a9, &unk_254A4A480);
        alpha = -*a6;
        dger_(&m, &__m, &alpha, a9, (int *)&unk_254A4A480, a4, a5, a7, a8);
      }
    }
  }
  return 0;
}

uint64_t sub_20E8448B0(char *a1, unsigned int *a2, double *a3, int *a4, __CLPK_doublereal *a5, uint64_t a6, uint64_t a7, double *a8, int *a9, int *a10)
{
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  double v23;
  int v24;
  double *v25;
  __CLPK_doublereal *v26;
  int v27;
  int v28;
  int v30;
  __CLPK_integer v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int *p_n;
  char *v40;
  __CLPK_doublereal *v41;
  __CLPK_integer *v42;
  __CLPK_doublereal *v43;
  __CLPK_doublereal *v44;
  __CLPK_doublereal *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  char *v58;
  double *v59;
  uint64_t v60;
  __CLPK_integer v61;
  double *v62;
  int v63;
  int v64;
  double *v65;
  int v67;
  uint64_t v69;
  __CLPK_integer __info[2];
  int v72;
  int v73;
  int v74;
  __CLPK_integer __n;

  v74 = 0;
  v72 = 0;
  *(_QWORD *)__info = 0;
  v15 = *a4;
  *a10 = 0;
  v16 = lsame_();
  v17 = *a9;
  if (!v16 && !lsame_())
  {
    v20 = -1;
    goto LABEL_27;
  }
  v18 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v20 = -2;
    goto LABEL_27;
  }
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = *a2;
  if (*a4 < v19)
  {
    v20 = -4;
LABEL_27:
    *a10 = v20;
    goto LABEL_28;
  }
  v21 = *a9;
  if (*a9 <= 0 && v17 != -1)
  {
    v20 = -9;
    goto LABEL_27;
  }
  v20 = *a10;
  if (*a10)
  {
LABEL_28:
    __n = -v20;
    xerbla_();
    return 0;
  }
  v73 = 32;
  v23 = (double)(int)(32 * v18);
  *a8 = v23;
  if (v17 != -1)
  {
    if (v18)
    {
      v65 = a8;
      v24 = ~(_DWORD)v15;
      v59 = a3;
      v25 = &a3[~(_DWORD)v15];
      v26 = a5 - 1;
      if (v18 < 0x21)
      {
        v61 = 1;
        v73 = 1;
        v27 = v18;
      }
      else
      {
        __info[0] = v18;
        v27 = 32;
        v61 = 32;
        if (v21 < (int)(32 * v18))
        {
          v28 = v21 / (int)v18;
          if (v28 <= 1)
            v28 = 1;
          v73 = v28;
          if (v28 >= 2)
            v27 = 32;
          else
            v27 = v18;
          v61 = v28;
        }
      }
      v30 = v18 - v27;
      if (v16)
      {
        v72 = (int)(v18 - v27 + v61 - 1) % v61 - (v61 - v27 - 1);
        __n = v72 + 1;
        v31 = v18 - v61 + 1;
        if (v31 > v72)
        {
          v32 = v15 * v31;
          v57 = (uint64_t)&v59[v24 - 1];
          v33 = 8 * v15 + 8;
          v34 = v61;
          v58 = a1;
          do
          {
            v63 = v32;
            v74 = v31 - 1 + v34;
            sub_20E84A41C((uint64_t)a1, &v74, &v73, v59, a4, a6, a7, (uint64_t)a8, __info);
            v74 = v31 - 1;
            sub_20E839B00(a1, "No transpose", &v74, &v73, &dbl_254A4A488, (uint64_t)&v25[v31 * (int)v15 + 1], a4, (uint64_t)a8, __info, &dbl_254A4A490, v59, a4);
            v34 = v73;
            v35 = v73 + v31;
            v74 = v73 + v31 - 1;
            if (v73 >= 1)
            {
              v36 = (_QWORD *)(v57 + v33 * v31);
              v37 = v31;
              v38 = v63;
              do
              {
                *v36 = *(_QWORD *)(a6 - 16 + 8 * v37);
                v26[v37] = v25[v37 + v38];
                ++v37;
                v38 += v15;
                v36 = (_QWORD *)((char *)v36 + v33);
              }
              while (v37 < v35);
            }
            v31 -= v61;
            v32 = v63 - v61 * v15;
            a1 = v58;
          }
          while (v31 >= __n);
        }
        p_n = &v72;
        v40 = a1;
        v41 = v59;
        v42 = a4;
        v43 = a5;
        v44 = (__CLPK_doublereal *)a7;
        v45 = (__CLPK_doublereal *)a6;
      }
      else
      {
        v46 = a6 - 8;
        v69 = a7 - 8;
        __n = v61;
        v67 = v15 + 1;
        if (v30 < 1)
        {
          v56 = 0;
          v48 = 1;
        }
        else
        {
          v60 = (uint64_t)&v59[v24 + 1];
          v62 = a8 - 1;
          v47 = 8 * v15 + 8;
          v48 = 1;
          v49 = -1;
          v64 = v30;
          do
          {
            v74 = v49 + *a2 + 1;
            sub_20E84A41C((uint64_t)a1, &v74, &v73, &v25[v48 * (int)v15 + v48], a4, v46 + 8 * v48, v69 + 8 * v48, (uint64_t)v65, __info);
            v74 = *a2 - (v73 + v48) + 1;
            sub_20E839B00(a1, "No transpose", &v74, &v73, &dbl_254A4A488, (uint64_t)&v25[v73 + v48 + v48 * (int)v15], a4, (uint64_t)&v62[v73 + 1], __info, &dbl_254A4A490, &v25[(v73 + v48) * v67], a4);
            v50 = v48;
            v51 = v73 + v48;
            v74 = v73 + v48 - 1;
            if (v73 >= 1)
            {
              v52 = v15 * v48;
              v53 = v48;
              v54 = (_QWORD *)(v60 + v47 * v48);
              do
              {
                *v54 = *(_QWORD *)(v46 + 8 * v53);
                v26[v53] = v25[v53 + v52];
                v52 += v15;
                v54 = (_QWORD *)((char *)v54 + v47);
                ++v53;
              }
              while (v53 < v51);
            }
            v48 += __n;
            v49 = -(__n + v50);
            if (__n >= 0)
              v55 = __n + v50 <= v64;
            else
              v55 = __n + v50 >= v64;
          }
          while (v55);
          v18 = *a2;
          v56 = 1 - v48;
        }
        v41 = &v25[v48 * v67];
        __n = v56 + v18;
        v43 = &v26[v48];
        v45 = (__CLPK_doublereal *)(v46 + 8 * v48);
        v44 = (__CLPK_doublereal *)(v69 + 8 * v48);
        p_n = &__n;
        v40 = a1;
        v42 = a4;
      }
      dsytd2_(v40, p_n, v41, v42, v43, v45, v44, &__info[1]);
      *v65 = v23;
    }
    else
    {
      *a8 = 1.0;
    }
  }
  return 0;
}

void sub_20E844E08(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, double *__X, uint64_t a6, double a7, float64x2_t a8, double a9, double a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  double *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  double *v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t *v93;
  float64_t *v94;
  uint64_t v95;
  int64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  double *v99;
  float64x2_t v100;
  float64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  double *v105;
  float64x2_t v106;
  float64_t *v107;
  float64_t v108;
  double *v109;
  float64x2_t v110;
  float64_t v111;
  double *v112;
  float64x2_t v113;
  float64x2_t v114;
  double *v115;
  double *v116;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v24 = 2;
      }
      else
      {
        a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
        v24 = 2;
        v29 = __X;
        v30 = __N;
        do
        {
          v31 = *v29 * a7;
          *v29 = v31;
          v29[a6] = v29[a6] * a7 - v31 * a8.f64[0];
          ++v29;
          --v30;
        }
        while (v30);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v24 = 1;
      cblas_dscal(__N, a7, __X, 1);
    }
    else
    {
      v24 = 0;
    }
  }
  else if (__N < 1)
  {
    v24 = 3;
  }
  else
  {
    a8.f64[0] = *(float64_t *)(a3 + 8 * a4);
    v21 = (double *)(a3 + 16 * a4);
    v22 = *v21;
    v23 = v21[1];
    v24 = 3;
    v25 = __X;
    v26 = __N;
    do
    {
      v27 = *v25 * a7;
      *v25 = v27;
      v28 = v25[a6] * a7 - v27 * a8.f64[0];
      v25[a6] = v28;
      v25[2 * a6] = -(v23 * v28 + *v25 * v22 - v25[2 * a6] * a7);
      ++v25;
      --v26;
    }
    while (v26);
  }
  if (v24 < a2)
  {
    v32 = a6;
    do
    {
      if (__N < 4)
      {
        v33 = 0;
      }
      else
      {
        v33 = 0;
        v34 = (double *)(a3 + 8 * v24 * a4);
        v36 = (double *)(a3 + 8 * (v24 + 2) * a4);
        v37 = (double *)(a3 + 8 * (v24 + 3) * a4);
        v38 = __X;
        do
        {
          v39 = v24;
          v35 = (double *)(a3 + 8 * (a4 + v24 * a4));
          v40 = v35;
          v41 = (float64x2_t *)(a3 + 8 * (v24 + 3) * a4);
          v42 = (float64x2_t *)(a3 + 8 * v24 * a4);
          v43 = (float64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v44 = (float64x2_t *)v38;
          v45 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v46 = v45;
          v47 = v45;
          v48 = v45;
          v49 = v45;
          v50 = v45;
          v51 = v45;
          v52 = v45;
          if ((v24 & 1) != 0)
          {
            v53 = *(float64x2_t *)(v38 + 2);
            v44 = (float64x2_t *)&v38[v32];
            v42 = (float64x2_t *)(v34 + 1);
            v40 = v35 + 1;
            v43 = (float64x2_t *)(v36 + 1);
            v41 = (float64x2_t *)(v37 + 1);
            v45 = vmlaq_n_f64(v45, *(float64x2_t *)v38, *v34);
            v47 = vmlaq_n_f64(v47, *(float64x2_t *)v38, *v35);
            v49 = vmlaq_n_f64(v49, *(float64x2_t *)v38, *v36);
            v51 = vmlaq_n_f64(v51, *(float64x2_t *)v38, *v37);
            v46 = vmlaq_n_f64(v46, v53, *v34);
            v48 = vmlaq_n_f64(v48, v53, *v35);
            v50 = vmlaq_n_f64(v50, v53, *v36);
            v52 = vmlaq_n_f64(v52, v53, *v37);
            v39 = v24 - 1;
          }
          for (; v39; v39 -= 2)
          {
            v55 = *v44;
            v56 = v44[1];
            v54 = (float64x2_t *)((char *)v44 + v32 * 8);
            v57 = *v54;
            v58 = v54[1];
            v44 = (float64x2_t *)((char *)v54 + v32 * 8);
            v59 = *v42++;
            v60 = *(float64x2_t *)v40;
            v40 += 2;
            v61 = *v43++;
            v62 = *v41++;
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v55, v59.f64[0]), v57, v59, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v55, v60.f64[0]), v57, v60, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v55, v61.f64[0]), v57, v61, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v55, v62.f64[0]), v57, v62, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v56, v59.f64[0]), v58, v59, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v56, v60.f64[0]), v58, v60, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v56, v61.f64[0]), v58, v61, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v56, v62.f64[0]), v58, v62, 1);
          }
          v64 = *v44;
          v65 = v44[1];
          v63 = (float64x2_t *)((char *)v44 + v32 * 8);
          v67 = *v63;
          v68 = v63[1];
          v66 = (float64x2_t *)((char *)v63 + v32 * 8);
          v70 = *v66;
          v71 = v66[1];
          v69 = (float64x2_t *)((char *)v66 + v32 * 8);
          v72 = *v69;
          v73 = v69[1];
          v74 = (float64x2_t *)((char *)v69 + 8 * a6 + -32 * a6);
          a8 = vmulq_n_f64(v64, a7);
          a11 = vmulq_n_f64(v68, a7);
          a12 = vmulq_n_f64(v70, a7);
          a13 = vmulq_n_f64(v71, a7);
          v14 = vsubq_f64(a8, v45);
          v75 = vsubq_f64(vmulq_n_f64(v65, a7), v46);
          v76 = vsubq_f64(vmulq_n_f64(v67, a7), v47);
          v77 = *v41;
          v78 = vmlsq_lane_f64(v76, v14, *v40, 0);
          v79 = vmlsq_lane_f64(vsubq_f64(a11, v48), v75, *v40, 0);
          v80 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a12, v49), v14, v43->f64[0], 0), v78, *v43, 1);
          v81 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v50), v75, v43->f64[0], 0), v79, *v43, 1);
          a8.f64[0] = v41[1].f64[0];
          *v74 = v14;
          v74[1] = v75;
          v82 = (float64x2_t *)((char *)v74 + v32 * 8);
          *v82 = v78;
          v82[1] = v79;
          v83 = (float64x2_t *)((char *)v82 + v32 * 8);
          *v83 = v80;
          v83[1] = v81;
          v84 = (float64x2_t *)((char *)v83 + v32 * 8);
          *v84 = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v72, a7), v51), v14, v77.f64[0], 0), v78, v77, 1), v80, a8.f64[0], 0);
          v84[1] = vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v73, a7), v52), v75, v77.f64[0], 0), v79, v77, 1), v81, a8.f64[0], 0);
          v33 += 4;
          v38 += 4;
        }
        while (v33 < __N - 3);
      }
      v85 = __N - v33;
      if (__N > v33)
      {
        v86 = (unint64_t *)(a3 + 8 * v24 * a4);
        v87 = (unint64_t *)(a3 + 8 * (a4 + v24 * a4));
        v88 = (unint64_t *)(a3 + 8 * (v24 + 2) * a4);
        v90 = &__X[v33];
        do
        {
          v89 = (unint64_t *)(a3 + 8 * (v24 + 3) * a4);
          v91 = (int64x2_t *)v89;
          v92 = (int64x2_t *)(a3 + 8 * v24 * a4);
          v93 = (int64x2_t *)(a3 + 8 * (v24 + 2) * a4);
          v94 = v90;
          v95 = v24;
          v96 = (int64x2_t *)(a3 + 8 * (a4 + v24 * a4));
          v97 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v98 = v97;
          if ((v24 & 1) != 0)
          {
            v94 = &v90[v32];
            *(_QWORD *)&a11.f64[0] = *v86;
            v92 = (int64x2_t *)(v86 + 1);
            *(_QWORD *)&a12.f64[0] = *v87;
            v96 = (int64x2_t *)(v87 + 1);
            *(_QWORD *)&a13.f64[0] = *v88;
            v93 = (int64x2_t *)(v88 + 1);
            *(_QWORD *)&a14.f64[0] = *v89;
            v91 = (int64x2_t *)(v89 + 1);
            v97 = vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)a12), *v90);
            v98 = vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v90);
            v95 = v24 - 1;
          }
          for (; v95; v95 -= 2)
          {
            v100.f64[0] = *v94;
            v99 = &v94[v32];
            v101 = *v99;
            v94 = &v99[v32];
            v102 = *v92++;
            v103 = *v96++;
            v104 = *v93++;
            v100.f64[1] = v101;
            a14 = *(float64x2_t *)v91++;
            v97 = vmlaq_laneq_f64(vmlaq_n_f64(v97, (float64x2_t)vtrn1q_s64(v102, v103), v100.f64[0]), (float64x2_t)vtrn2q_s64(v102, v103), v100, 1);
            v98 = vmlaq_laneq_f64(vmlaq_n_f64(v98, (float64x2_t)vtrn1q_s64(v104, (int64x2_t)a14), v100.f64[0]), (float64x2_t)vtrn2q_s64(v104, (int64x2_t)a14), v100, 1);
          }
          v106.f64[0] = *v94;
          v105 = &v94[v32];
          v108 = *v105;
          v107 = &v105[v32];
          v110.f64[0] = *v107;
          v109 = &v107[v32];
          v111 = *v109;
          v112 = &v109[a6 + -4 * a6];
          v106.f64[1] = v108;
          v110.f64[1] = v111;
          a11 = vmulq_n_f64(v110, a7);
          v113 = vsubq_f64(vmulq_n_f64(v106, a7), v97);
          a12.f64[0] = v113.f64[0];
          *(_QWORD *)&a14.f64[1] = v96->i64[0];
          v14 = *(float64x2_t *)v93;
          a13 = (float64x2_t)vtrn1q_s64(*v93, *v91);
          a8 = vmlsq_lane_f64(v113, a14, v113.f64[0], 0);
          a12.f64[1] = a8.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v93, *v91);
          v114 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a11, v98), a13, a12.f64[0], 0), a14, a12, 1);
          *(_QWORD *)&a14.f64[1] = v91[1].i64[0];
          *v112 = a12.f64[0];
          v115 = &v112[v32];
          *v115 = a8.f64[1];
          v116 = &v115[v32];
          *v116 = v114.f64[0];
          v116[a6] = vmlsq_lane_f64(v114, a14, *(double *)&v114, 0).f64[1];
          ++v90;
          --v85;
        }
        while (v85);
      }
      v24 += 4;
    }
    while (v24 < a2);
  }
}

void sub_20E84527C(uint64_t __N, uint64_t a2, double *a3, uint64_t a4, double *__X, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13, float64x2_t a14)
{
  float64x2_t v14;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  const double *v46;
  uint64_t v47;
  const double *v48;
  uint64_t v49;
  const double *v50;
  uint64_t v51;
  const double *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  double *v63;
  double *v64;
  double *v65;
  double *v66;
  double *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t *v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t *v112;
  uint64_t v113;
  double *v114;
  unint64_t *v115;
  unint64_t *v116;
  double *v117;
  int64x2_t *v118;
  float64_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int64x2_t *v123;
  float64x2_t v124;
  float64x2_t v125;
  double *v126;
  float64x2_t v127;
  float64_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  double *v132;
  float64x2_t v133;
  float64_t *v134;
  float64_t v135;
  double *v136;
  float64x2_t v137;
  float64_t v138;
  double *v139;
  float64x2_t v140;
  float64x2_t v141;
  double *v142;
  double *v143;

  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N < 1)
      {
        v29 = 2;
      }
      else
      {
        v35 = &a3[a4];
        v36 = a7 / *a3;
        v37 = *v35;
        v38 = v35[1];
        v29 = 2;
        v39 = __X;
        v40 = __N;
        v41 = 1.0 / v38;
        do
        {
          v42 = v36 * *v39;
          *v39 = v42;
          v39[a6] = v41 * (v39[a6] * a7 - v42 * v37);
          ++v39;
          --v40;
        }
        while (v40);
      }
    }
    else if ((a2 & 1) != 0)
    {
      v29 = 1;
      cblas_dscal(__N, a7 / *a3, __X, 1);
    }
    else
    {
      v29 = 0;
    }
  }
  else if (__N < 1)
  {
    v29 = 3;
  }
  else
  {
    v21 = &a3[a4];
    v22 = &a3[2 * a4];
    v23 = *v22;
    v24 = v22[1];
    v25 = a7 / *a3;
    v26 = *v21;
    v27 = 1.0 / v21[1];
    v28 = v22[2];
    v29 = 3;
    v30 = __X;
    v31 = __N;
    v32 = 1.0 / v28;
    do
    {
      v33 = v25 * *v30;
      *v30 = v33;
      v34 = v27 * (v30[a6] * a7 - v33 * v26);
      v30[a6] = v34;
      v14.f64[0] = v30[2 * a6];
      a14.f64[0] = v32 * -(v24 * v34 + *v30 * v23 - v14.f64[0] * a7);
      v30[2 * a6] = a14.f64[0];
      ++v30;
      --v31;
    }
    while (v31);
  }
  if (v29 < a2)
  {
    v43 = a4 + 1;
    v44 = a6;
    do
    {
      v45 = &a3[v29 * a4];
      v46 = &v45[v29];
      v47 = v29 + 1;
      v48 = &a3[(v29 + 1) * v43];
      v49 = v29 + 2;
      v50 = &a3[(v29 + 2) * v43];
      v51 = v29 + 3;
      v52 = &a3[(v29 + 3) * v43];
      v53 = vld1q_dup_f64(v46);
      v54 = vld1q_dup_f64(v48);
      v55 = vld1q_dup_f64(v50);
      v56 = vld1q_dup_f64(v52);
      v57 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v58 = vdivq_f64(v57, v53);
      v59 = vdivq_f64(v57, v54);
      v60 = vdivq_f64(v57, v55);
      v61 = vdivq_f64(v57, v56);
      if (__N < 4)
      {
        v62 = 0;
      }
      else
      {
        v62 = 0;
        v64 = &a3[v49 * a4];
        v65 = &a3[v51 * a4];
        v66 = __X;
        do
        {
          v63 = &a3[v47 * a4];
          v67 = v63;
          v68 = (float64x2_t *)&a3[v51 * a4];
          v69 = (float64x2_t *)&a3[v29 * a4];
          v70 = (float64x2_t *)&a3[v49 * a4];
          v71 = (float64x2_t *)v66;
          v72 = v29;
          v73 = (float64x2_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
          v74 = v73;
          v75 = v73;
          v76 = v73;
          v77 = v73;
          v78 = v73;
          v79 = v73;
          v80 = v73;
          if ((v29 & 1) != 0)
          {
            v81 = *(float64x2_t *)(v66 + 2);
            v71 = (float64x2_t *)&v66[v44];
            v69 = (float64x2_t *)(v45 + 1);
            v67 = v63 + 1;
            v70 = (float64x2_t *)(v64 + 1);
            v68 = (float64x2_t *)(v65 + 1);
            v73 = vmlaq_n_f64(v73, *(float64x2_t *)v66, *v45);
            v75 = vmlaq_n_f64(v75, *(float64x2_t *)v66, *v63);
            v77 = vmlaq_n_f64(v77, *(float64x2_t *)v66, *v64);
            v79 = vmlaq_n_f64(v79, *(float64x2_t *)v66, *v65);
            v74 = vmlaq_n_f64(v74, v81, *v45);
            v76 = vmlaq_n_f64(v76, v81, *v63);
            v78 = vmlaq_n_f64(v78, v81, *v64);
            v80 = vmlaq_n_f64(v80, v81, *v65);
            v72 = v29 - 1;
          }
          for (; v72; v72 -= 2)
          {
            v83 = *v71;
            v84 = v71[1];
            v82 = (float64x2_t *)((char *)v71 + v44 * 8);
            v85 = *v82;
            v86 = v82[1];
            v71 = (float64x2_t *)((char *)v82 + v44 * 8);
            v87 = *v69++;
            v88 = *(float64x2_t *)v67;
            v67 += 2;
            v89 = *v70++;
            v90 = *v68++;
            v73 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v83, v87.f64[0]), v85, v87, 1);
            v75 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v83, v88.f64[0]), v85, v88, 1);
            v77 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v83, v89.f64[0]), v85, v89, 1);
            v79 = vmlaq_laneq_f64(vmlaq_n_f64(v79, v83, v90.f64[0]), v85, v90, 1);
            v74 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v84, v87.f64[0]), v86, v87, 1);
            v76 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v84, v88.f64[0]), v86, v88, 1);
            v78 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v84, v89.f64[0]), v86, v89, 1);
            v80 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v84, v90.f64[0]), v86, v90, 1);
          }
          v92 = *v71;
          v93 = v71[1];
          v91 = (float64x2_t *)((char *)v71 + v44 * 8);
          v95 = *v91;
          v96 = v91[1];
          v94 = (float64x2_t *)((char *)v91 + v44 * 8);
          v98 = *v94;
          v99 = v94[1];
          v97 = (float64x2_t *)((char *)v94 + v44 * 8);
          v100 = *v97;
          v101 = v97[1];
          v102 = (float64x2_t *)((char *)v97 + 8 * a6 + -32 * a6);
          v53 = vmulq_n_f64(v92, a7);
          v56 = vmulq_n_f64(v96, a7);
          v57 = vmulq_n_f64(v98, a7);
          a13 = vmulq_n_f64(v99, a7);
          v14 = vmulq_f64(vsubq_f64(v53, v73), v58);
          v103 = vmulq_f64(vsubq_f64(vmulq_n_f64(v93, a7), v74), v58);
          v104 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v95, a7), v75), v14, *v67, 0), v59);
          v105 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(v56, v76), v103, *v67, 0), v59);
          v106 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v57, v77), v14, v70->f64[0], 0), v104, *v70, 1), v60);
          v107 = vmulq_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(a13, v78), v103, v70->f64[0], 0), v105, *v70, 1), v60);
          v53.f64[0] = v68[1].f64[0];
          v108 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v79), v14, v68->f64[0], 0), v104, *v68, 1), v106, v53.f64[0], 0), v61);
          v109 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v80), v103, v68->f64[0], 0), v105, *v68, 1), v107, v53.f64[0], 0), v61);
          *v102 = v14;
          v102[1] = v103;
          v110 = (float64x2_t *)((char *)v102 + v44 * 8);
          *v110 = v104;
          v110[1] = v105;
          v111 = (float64x2_t *)((char *)v110 + v44 * 8);
          *v111 = v106;
          v111[1] = v107;
          v112 = (float64x2_t *)((char *)v111 + v44 * 8);
          *v112 = v108;
          v112[1] = v109;
          v62 += 4;
          v66 += 4;
        }
        while (v62 < __N - 3);
      }
      v113 = __N - v62;
      if (__N > v62)
      {
        v114 = &a3[v47 * a4];
        v115 = (unint64_t *)&a3[v49 * a4];
        v116 = (unint64_t *)&a3[v51 * a4];
        v117 = &__X[v62];
        do
        {
          v118 = (int64x2_t *)v115;
          v119 = v117;
          v120 = v29;
          v121 = (int64x2_t *)v114;
          v122 = (int64x2_t *)v116;
          v123 = (int64x2_t *)&a3[v29 * a4];
          v124 = (float64x2_t)veorq_s8((int8x16_t)v53, (int8x16_t)v53);
          v125 = v124;
          if ((v29 & 1) != 0)
          {
            v119 = &v117[v44];
            v56.f64[0] = *v45;
            v123 = (int64x2_t *)(v45 + 1);
            v57.f64[0] = *v114;
            v121 = (int64x2_t *)(v114 + 1);
            *(_QWORD *)&a13.f64[0] = *v115;
            v118 = (int64x2_t *)(v115 + 1);
            *(_QWORD *)&a14.f64[0] = *v116;
            v122 = (int64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64((int64x2_t)v56, (int64x2_t)v57), *v117);
            v125 = vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64((int64x2_t)a13, (int64x2_t)a14), *v117);
            v120 = v29 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v127.f64[0] = *v119;
            v126 = &v119[v44];
            v128 = *v126;
            v119 = &v126[v44];
            v129 = *v123++;
            v130 = *v121++;
            v131 = *v118++;
            v127.f64[1] = v128;
            a14 = *(float64x2_t *)v122++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v129, v130), v127.f64[0]), (float64x2_t)vtrn2q_s64(v129, v130), v127, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v131, (int64x2_t)a14), v127.f64[0]), (float64x2_t)vtrn2q_s64(v131, (int64x2_t)a14), v127, 1);
          }
          v133.f64[0] = *v119;
          v132 = &v119[v44];
          v135 = *v132;
          v134 = &v132[v44];
          v137.f64[0] = *v134;
          v136 = &v134[v44];
          v138 = *v136;
          v139 = &v136[a6 + -4 * a6];
          v133.f64[1] = v135;
          v137.f64[1] = v138;
          v56 = vmulq_n_f64(v137, a7);
          v140 = vsubq_f64(vmulq_n_f64(v133, a7), v124);
          v57.f64[0] = v140.f64[0] * v58.f64[0];
          *(_QWORD *)&a14.f64[1] = v121->i64[0];
          v14 = *(float64x2_t *)v118;
          a13 = (float64x2_t)vtrn1q_s64(*v118, *v122);
          v53 = vmulq_f64(vmlsq_lane_f64(v140, a14, v140.f64[0] * v58.f64[0], 0), v59);
          v57.f64[1] = v53.f64[1];
          a14 = (float64x2_t)vtrn2q_s64(*v118, *v122);
          v141 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(v56, v125), a13, v57.f64[0], 0), a14, v57, 1);
          *(_QWORD *)&a14.f64[1] = v122[1].i64[0];
          *v139 = v57.f64[0];
          v142 = &v139[v44];
          *v142 = v53.f64[1];
          v143 = &v142[v44];
          *v143 = v141.f64[0] * v60.f64[0];
          v143[a6] = vmulq_f64(vmlsq_lane_f64(v141, a14, *(double *)&v141 * *(double *)&v60, 0), v61).f64[1];
          ++v117;
          --v113;
        }
        while (v113);
      }
      v29 += 4;
    }
    while (v29 < a2);
  }
}

void sub_20E845798(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int8x16_t a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int8x16_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t *v100;
  uint64_t v101;
  float64x2_t *v102;
  uint64_t v103;
  double *f64;
  float64x2_t *v105;
  uint64_t v106;
  float64_t *v107;
  float64x2_t v108;
  float64x2_t v109;
  double *v110;
  float64x2_t v111;
  float64_t v112;
  float64x2_t *v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64_t *v118;
  double *v119;
  float64x2_t v120;
  float64_t *v121;
  float64_t v122;
  double *v123;
  float64x2_t v124;
  float64_t v125;
  double *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  float64_t *v133;
  float64_t *v134;
  BOOL v135;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        a8.i64[0] = *(_QWORD *)(a3 + 8 * (v21 + v21 * a4) - 8);
        v32 = (double *)(a5 + 8 * v21 * a6);
        v33 = (double *)(a5 + a6 * (8 * a2 - 16));
        v34 = __N;
        do
        {
          v35 = *v32 * a7;
          *v32++ = v35;
          *v33 = *v33 * a7 - v35 * *(double *)a8.i64;
          ++v33;
          --v34;
        }
        while (v34);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = a3 + 8 * (v21 + v21 * a4);
      v23 = *(double *)(v22 - 16);
      a8.i64[0] = *(_QWORD *)(v22 - 8);
      v24 = *(double *)(a3 + 8 * (a2 + (a2 - 2) * a4) - 24);
      v25 = (double *)(a5 + 8 * v21 * a6);
      v26 = (double *)(a5 + a6 * (8 * a2 - 16));
      v27 = (double *)(a5 + a6 * (8 * a2 - 24));
      v28 = __N;
      do
      {
        v29 = *v25 * a7;
        *v25 = v29;
        v30 = *v26 * a7 - v29 * *(double *)a8.i64;
        *v26++ = v30;
        v31 = *v25++;
        *v27 = -(v24 * v30 + v31 * v23 - *v27 * a7);
        ++v27;
        --v28;
      }
      while (v28);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v36 = v21 + 1;
    v37 = 8 * a6;
    v38 = 8 * a4;
    v39 = (float64x2_t *)(a5 + 8 * a6 * (v21 + 1));
    do
    {
      v40 = v36 - 4;
      if (__N < 4)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        v43 = a2 - v40;
        if (a2 - v40 <= 4)
          v43 = 4;
        v44 = v39;
        do
        {
          v45 = v43 - 4;
          v46 = v44;
          v42 = a3 + 8 * v40 + 8 * v36 * a4;
          v47 = (float64x2_t *)v42;
          v48 = (float64x2_t)veorq_s8(v14, v14);
          v49 = v48;
          v50 = v48;
          v51 = v48;
          v52 = v48;
          v53 = v48;
          v54 = v48;
          v55 = v48;
          if ((((_BYTE)v43 - 4) & 1) != 0)
          {
            v56 = v44[1];
            v46 = (float64x2_t *)((char *)v44 + v37);
            v57 = *(float64x2_t *)(v42 + 16);
            v47 = (float64x2_t *)(v42 + v38);
            v48 = vmlaq_n_f64(v48, *v44, *(double *)v42);
            v50 = vmlaq_laneq_f64(v50, *v44, *(float64x2_t *)v42, 1);
            v52 = vmlaq_n_f64(v52, *v44, v57.f64[0]);
            v54 = vmlaq_laneq_f64(v54, *v44, v57, 1);
            v49 = vmlaq_n_f64(v49, v56, *(double *)v42);
            v51 = vmlaq_laneq_f64(v51, v56, *(float64x2_t *)v42, 1);
            v53 = vmlaq_n_f64(v53, v56, v57.f64[0]);
            v55 = vmlaq_laneq_f64(v55, v56, v57, 1);
            v45 = v43 - 5;
          }
          for (; v45; v45 -= 2)
          {
            v59 = *v46;
            v60 = v46[1];
            v58 = (float64x2_t *)((char *)v46 + v37);
            v61 = *v58;
            v62 = v58[1];
            v46 = (float64x2_t *)((char *)v58 + v37);
            v64 = *v47;
            v65 = v47[1];
            v63 = (float64x2_t *)((char *)v47 + v38);
            v66 = *v63;
            v67 = v63[1];
            v47 = (float64x2_t *)((char *)v63 + v38);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v66.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v59, v64, 1), v61, v66, 1);
            v52 = vmlaq_n_f64(vmlaq_n_f64(v52, v59, v65.f64[0]), v61, v67.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v59, v65, 1), v61, v67, 1);
            v49 = vmlaq_n_f64(vmlaq_n_f64(v49, v60, v64.f64[0]), v62, v66.f64[0]);
            v51 = vmlaq_laneq_f64(vmlaq_laneq_f64(v51, v60, v64, 1), v62, v66, 1);
            v53 = vmlaq_n_f64(vmlaq_n_f64(v53, v60, v65.f64[0]), v62, v67.f64[0]);
            v55 = vmlaq_laneq_f64(vmlaq_laneq_f64(v55, v60, v65, 1), v62, v67, 1);
          }
          v68 = (float64x2_t *)((char *)v47 - v38 * (v43 - 3));
          v69 = (float64x2_t *)((char *)v46 - v37 * v43);
          v71 = *v69;
          v72 = v69[1];
          v70 = (float64x2_t *)((char *)v69 + v37);
          v74 = *v70;
          v75 = v70[1];
          v73 = (float64x2_t *)((char *)v70 + v37);
          v77 = *v73;
          v78 = v73[1];
          v76 = (float64x2_t *)((char *)v73 + v37);
          v79 = *v76;
          v80 = v76[1];
          v81 = (int8x16_t *)&v76->f64[a6 + -4 * a6];
          v82 = vsubq_f64(vmulq_n_f64(v71, a7), v48);
          v83 = vsubq_f64(vmulq_n_f64(v72, a7), v49);
          v84 = vsubq_f64(vmulq_n_f64(v79, a7), v54);
          v85 = vsubq_f64(vmulq_n_f64(v80, a7), v55);
          v86 = *v68;
          v87 = v68[1];
          v88 = (float64x2_t *)((char *)v68 - v38);
          v89 = vmlsq_lane_f64(v82, v84, v86.f64[0], 0);
          v90 = vmlsq_lane_f64(v83, v85, v86.f64[0], 0);
          v91 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v74, a7), v50), v84, v86, 1);
          v92 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v75, a7), v51), v85, v86, 1);
          v93 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v77, a7), v52), v84, v87.f64[0], 0);
          v94 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v78, a7), v53), v85, v87.f64[0], 0);
          a8 = *(int8x16_t *)v88;
          v95 = vmlsq_laneq_f64(v91, v93, *v88, 1);
          v96 = vmlsq_laneq_f64(v92, v94, *v88, 1);
          a8.i64[0] = *(_QWORD *)&v88->f64[-a4];
          v14 = (int8x16_t)vmlsq_lane_f64(vmlsq_lane_f64(v89, v93, v88->f64[0], 0), v95, *(double *)a8.i64, 0);
          v97 = vmlsq_lane_f64(vmlsq_lane_f64(v90, v94, v88->f64[0], 0), v96, *(double *)a8.i64, 0);
          *v81 = v14;
          v81[1] = (int8x16_t)v97;
          v98 = (float64x2_t *)&v81->i8[v37];
          *v98 = v95;
          v98[1] = v96;
          v99 = (float64x2_t *)((char *)v98 + v37);
          *v99 = v93;
          v99[1] = v94;
          v100 = (float64x2_t *)((char *)v99 + v37);
          *v100 = v84;
          v100[1] = v85;
          v41 += 4;
          v44 += 2;
        }
        while (v41 < __N - 3);
      }
      v101 = __N - v41;
      if (__N > v41)
      {
        v103 = a2 - v40;
        if (a2 - v40 <= 4)
          v103 = 4;
        f64 = v39[(unint64_t)v41 / 2].f64;
        do
        {
          v102 = (float64x2_t *)(a3 + 8 * v40 + 8 * v36 * a4);
          v105 = v102;
          v106 = v103 - 4;
          v107 = f64;
          v108 = (float64x2_t)veorq_s8(a8, a8);
          v109 = v108;
          if ((((_BYTE)v103 - 4) & 1) != 0)
          {
            v107 = &f64[(unint64_t)v37 / 8];
            v105 = (float64x2_t *)((char *)v102 + v38);
            v108 = vmlaq_n_f64(v108, *v102, *f64);
            v109 = vmlaq_n_f64(v109, v102[1], *f64);
            v106 = v103 - 5;
          }
          for (; v106; v106 -= 2)
          {
            v111.f64[0] = *v107;
            v110 = &v107[(unint64_t)v37 / 8];
            v112 = *v110;
            v107 = &v110[(unint64_t)v37 / 8];
            v114 = *v105;
            v115 = v105[1];
            v113 = (float64x2_t *)((char *)v105 + v38);
            v111.f64[1] = v112;
            v116 = *v113;
            a14 = v113[1];
            v105 = (float64x2_t *)((char *)v113 + v38);
            v108 = vmlaq_laneq_f64(vmlaq_n_f64(v108, v114, v111.f64[0]), v116, v111, 1);
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v115, v111.f64[0]), a14, v111, 1);
          }
          v117 = (float64x2_t *)((char *)v105 - v38 * (v103 - 3));
          v118 = (float64_t *)((char *)v107 - v37 * v103);
          v120.f64[0] = *v118;
          v119 = &v118[(unint64_t)v37 / 8];
          v122 = *v119;
          v121 = &v119[(unint64_t)v37 / 8];
          v124.f64[0] = *v121;
          v123 = &v121[(unint64_t)v37 / 8];
          v125 = *v123;
          v126 = &v123[a6 + -4 * a6];
          v120.f64[1] = v122;
          v124.f64[1] = v125;
          v127 = vsubq_f64(vmulq_n_f64(v124, a7), v109);
          v128 = *v117;
          v129 = v117[1];
          v130 = (float64x2_t *)((char *)v117 - v38);
          v131 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v120, a7), v108), v128, v127.f64[1], 0);
          *(_QWORD *)&v127.f64[0] = *(_OWORD *)&vmlsq_lane_f64(v127, v129, v127.f64[1], 0);
          v14 = *(int8x16_t *)v130;
          v132 = vmlsq_lane_f64(v131, *v130, v127.f64[0], 0);
          v124.f64[0] = v132.f64[1];
          a14.f64[0] = v130->f64[-a4];
          a8 = (int8x16_t)vmlsq_lane_f64(v132, a14, v132.f64[1], 0);
          *v126 = *(double *)a8.i64;
          v133 = &v126[(unint64_t)v37 / 8];
          *v133 = v124.f64[0];
          v134 = &v133[(unint64_t)v37 / 8];
          *v134 = v127.f64[0];
          v134[a6] = v127.f64[1];
          ++f64;
          --v101;
        }
        while (v101);
      }
      v39 -= 2 * a6;
      v135 = v36 < 5;
      v36 -= 4;
    }
    while (!v135);
  }
}

void sub_20E845BF0(uint64_t __N, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  int8x16_t v14;
  uint64_t v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  uint64_t *v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  double *v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float64x2_t *v49;
  uint64_t v50;
  const double *v51;
  const double *v52;
  const double *v53;
  const double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t *v92;
  float64x2_t *v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  int8x16_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  float64x2_t *v125;
  uint64_t v126;
  double *f64;
  float64x2_t *v128;
  uint64_t v129;
  float64_t *v130;
  float64x2_t v131;
  float64x2_t v132;
  double *v133;
  float64x2_t v134;
  float64_t v135;
  float64x2_t *v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t *v140;
  float64_t *v141;
  double *v142;
  float64x2_t v143;
  float64_t *v144;
  float64_t v145;
  double *v146;
  float64x2_t v147;
  float64_t v148;
  double *v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t *v153;
  float64x2_t v154;
  float64x2_t v155;
  float64_t *v156;
  float64_t *v157;
  BOOL v158;

  v21 = a2 - 1;
  if ((~(_BYTE)a2 & 3) != 0)
  {
    if ((a2 & 2) != 0)
    {
      if (__N >= 1)
      {
        v37 = (double *)(a3 + 8 * (a4 + 1) * v21);
        v38 = *(v37 - 1);
        v39 = a7 / *v37;
        v40 = (double *)(a5 + 8 * v21 * a6);
        v41 = (double *)(a5 + a6 * (8 * a2 - 16));
        v42 = __N;
        v43 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 2));
        do
        {
          v44 = v39 * *v40;
          *v40++ = v44;
          *v41 = v43 * (*v41 * a7 - v44 * v38);
          ++v41;
          --v42;
        }
        while (v42);
      }
      v21 = a2 - 3;
    }
    else if ((a2 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v21 + v21 * a4)), (double *)(a5 + 8 * v21 * a6), 1);
      v21 = a2 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v22 = (double *)(a3 + 8 * (a4 + 1) * v21);
      v24 = *(v22 - 2);
      v23 = *(v22 - 1);
      v25 = (a2 - 2) * a4;
      v26 = *(double *)(a3 + 8 * (a2 - 3 + v25));
      v27 = a7 / *v22;
      v28 = 1.0 / *(double *)(a3 + 8 * (v25 + a2 - 2));
      v29 = (double *)(a5 + 8 * v21 * a6);
      v30 = (double *)(a5 + a6 * (8 * a2 - 16));
      v31 = (uint64_t *)(a5 + a6 * (8 * a2 - 24));
      v32 = __N;
      v33 = 1.0 / *(double *)(a3 + 8 * (a4 + 1) * (a2 - 3));
      do
      {
        v34 = v27 * *v29;
        *v29 = v34;
        v35 = v28 * (*v30 * a7 - v34 * v23);
        *v30++ = v35;
        v14.i64[0] = *v31;
        v36 = *v29++;
        *(double *)v31 = v33 * -(v26 * v35 + v36 * v24 - *(double *)v31 * a7);
        ++v31;
        --v32;
      }
      while (v32);
    }
    v21 = a2 - 4;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    v45 = v21 + 1;
    v46 = a4 + 1;
    v47 = 8 * a6;
    v48 = 8 * a4;
    v49 = (float64x2_t *)(a5 + 8 * a6 * v45);
    do
    {
      v50 = v45 - 4;
      v51 = (const double *)(a3 + 8 * (v45 - 4) * a4 + 8 * (v45 - 4));
      v52 = (const double *)(a3 + 8 * (v45 - 3) * v46);
      v53 = (const double *)(a3 + 8 * (v45 - 2) * v46);
      v54 = (const double *)(a3 + 8 * (v45 - 1) * v46);
      v55 = vld1q_dup_f64(v51);
      v56 = vld1q_dup_f64(v52);
      v57 = vld1q_dup_f64(v53);
      v58 = vld1q_dup_f64(v54);
      v59 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v60 = vdivq_f64(v59, v55);
      v61 = vdivq_f64(v59, v56);
      v62 = vdivq_f64(v59, v57);
      v63 = vdivq_f64(v59, v58);
      if (__N < 4)
      {
        v64 = 0;
      }
      else
      {
        v64 = 0;
        v66 = a2 - v50;
        if (a2 - v50 <= 4)
          v66 = 4;
        v67 = v49;
        do
        {
          v65 = a3 + 8 * v50 + 8 * v45 * a4;
          v68 = (float64x2_t *)v65;
          v69 = v66 - 4;
          v70 = v67;
          v71 = (float64x2_t)veorq_s8(v14, v14);
          v72 = v71;
          v73 = v71;
          v74 = v71;
          v75 = v71;
          v76 = v71;
          v77 = v71;
          v78 = v71;
          if ((((_BYTE)v66 - 4) & 1) != 0)
          {
            v79 = v67[1];
            v70 = (float64x2_t *)((char *)v67 + v47);
            v80 = *(float64x2_t *)(v65 + 16);
            v68 = (float64x2_t *)(v65 + v48);
            v71 = vmlaq_n_f64(v71, *v67, *(double *)v65);
            v73 = vmlaq_laneq_f64(v73, *v67, *(float64x2_t *)v65, 1);
            v75 = vmlaq_n_f64(v75, *v67, v80.f64[0]);
            v77 = vmlaq_laneq_f64(v77, *v67, v80, 1);
            v72 = vmlaq_n_f64(v72, v79, *(double *)v65);
            v74 = vmlaq_laneq_f64(v74, v79, *(float64x2_t *)v65, 1);
            v76 = vmlaq_n_f64(v76, v79, v80.f64[0]);
            v78 = vmlaq_laneq_f64(v78, v79, v80, 1);
            v69 = v66 - 5;
          }
          for (; v69; v69 -= 2)
          {
            v82 = *v70;
            v83 = v70[1];
            v81 = (float64x2_t *)((char *)v70 + v47);
            v84 = *v81;
            v85 = v81[1];
            v70 = (float64x2_t *)((char *)v81 + v47);
            v87 = *v68;
            v88 = v68[1];
            v86 = (float64x2_t *)((char *)v68 + v48);
            v89 = *v86;
            v90 = v86[1];
            v68 = (float64x2_t *)((char *)v86 + v48);
            v71 = vmlaq_n_f64(vmlaq_n_f64(v71, v82, v87.f64[0]), v84, v89.f64[0]);
            v73 = vmlaq_laneq_f64(vmlaq_laneq_f64(v73, v82, v87, 1), v84, v89, 1);
            v75 = vmlaq_n_f64(vmlaq_n_f64(v75, v82, v88.f64[0]), v84, v90.f64[0]);
            v77 = vmlaq_laneq_f64(vmlaq_laneq_f64(v77, v82, v88, 1), v84, v90, 1);
            v72 = vmlaq_n_f64(vmlaq_n_f64(v72, v83, v87.f64[0]), v85, v89.f64[0]);
            v74 = vmlaq_laneq_f64(vmlaq_laneq_f64(v74, v83, v87, 1), v85, v89, 1);
            v76 = vmlaq_n_f64(vmlaq_n_f64(v76, v83, v88.f64[0]), v85, v90.f64[0]);
            v78 = vmlaq_laneq_f64(vmlaq_laneq_f64(v78, v83, v88, 1), v85, v90, 1);
          }
          v91 = (float64x2_t *)((char *)v68 - v48 * (v66 - 3));
          v92 = (float64x2_t *)((char *)v70 - v47 * v66);
          v94 = *v92;
          v95 = v92[1];
          v93 = (float64x2_t *)((char *)v92 + v47);
          v97 = *v93;
          v98 = v93[1];
          v96 = (float64x2_t *)((char *)v93 + v47);
          v100 = *v96;
          v101 = v96[1];
          v99 = (float64x2_t *)((char *)v96 + v47);
          v102 = *v99;
          v103 = v99[1];
          v104 = (int8x16_t *)&v99->f64[a6 + -4 * a6];
          v105 = vsubq_f64(vmulq_n_f64(v94, a7), v71);
          v106 = vsubq_f64(vmulq_n_f64(v95, a7), v72);
          v107 = vmulq_f64(vsubq_f64(vmulq_n_f64(v102, a7), v77), v63);
          v108 = vmulq_f64(vsubq_f64(vmulq_n_f64(v103, a7), v78), v63);
          v109 = *v91;
          v110 = v91[1];
          v111 = (float64x2_t *)((char *)v91 - v48);
          v112 = vmlsq_lane_f64(v105, v107, v109.f64[0], 0);
          v113 = vmlsq_lane_f64(v106, v108, v109.f64[0], 0);
          v114 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v97, a7), v73), v107, v109, 1);
          v115 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(v98, a7), v74), v108, v109, 1);
          v116 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v100, a7), v75), v107, v110.f64[0], 0), v62);
          v117 = vmulq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v101, a7), v76), v108, v110.f64[0], 0), v62);
          v55 = *v111;
          v118 = vmulq_f64(vmlsq_laneq_f64(v114, v116, *v111, 1), v61);
          v119 = vmulq_f64(vmlsq_laneq_f64(v115, v117, *v111, 1), v61);
          v55.f64[0] = v111->f64[-a4];
          v14 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v112, v116, v111->f64[0], 0), v118, v55.f64[0], 0), v60);
          v120 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v113, v117, v111->f64[0], 0), v119, v55.f64[0], 0), v60);
          *v104 = v14;
          v104[1] = (int8x16_t)v120;
          v121 = (float64x2_t *)&v104->i8[v47];
          *v121 = v118;
          v121[1] = v119;
          v122 = (float64x2_t *)((char *)v121 + v47);
          *v122 = v116;
          v122[1] = v117;
          v123 = (float64x2_t *)((char *)v122 + v47);
          *v123 = v107;
          v123[1] = v108;
          v64 += 4;
          v67 += 2;
        }
        while (v64 < __N - 3);
      }
      v124 = __N - v64;
      if (__N > v64)
      {
        v126 = a2 - v50;
        if (a2 - v50 <= 4)
          v126 = 4;
        f64 = v49[(unint64_t)v64 / 2].f64;
        do
        {
          v125 = (float64x2_t *)(a3 + 8 * v50 + 8 * v45 * a4);
          v128 = v125;
          v129 = v126 - 4;
          v130 = f64;
          v131 = (float64x2_t)veorq_s8((int8x16_t)v55, (int8x16_t)v55);
          v132 = v131;
          if ((((_BYTE)v126 - 4) & 1) != 0)
          {
            v130 = &f64[(unint64_t)v47 / 8];
            v128 = (float64x2_t *)((char *)v125 + v48);
            v131 = vmlaq_n_f64(v131, *v125, *f64);
            v132 = vmlaq_n_f64(v132, v125[1], *f64);
            v129 = v126 - 5;
          }
          for (; v129; v129 -= 2)
          {
            v134.f64[0] = *v130;
            v133 = &v130[(unint64_t)v47 / 8];
            v135 = *v133;
            v130 = &v133[(unint64_t)v47 / 8];
            v137 = *v128;
            v138 = v128[1];
            v136 = (float64x2_t *)((char *)v128 + v48);
            v134.f64[1] = v135;
            v139 = *v136;
            a14 = v136[1];
            v128 = (float64x2_t *)((char *)v136 + v48);
            v131 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v137, v134.f64[0]), v139, v134, 1);
            v132 = vmlaq_laneq_f64(vmlaq_n_f64(v132, v138, v134.f64[0]), a14, v134, 1);
          }
          v140 = (float64x2_t *)((char *)v128 - v48 * (v126 - 3));
          v141 = (float64_t *)((char *)v130 - v47 * v126);
          v143.f64[0] = *v141;
          v142 = &v141[(unint64_t)v47 / 8];
          v145 = *v142;
          v144 = &v142[(unint64_t)v47 / 8];
          v147.f64[0] = *v144;
          v146 = &v144[(unint64_t)v47 / 8];
          v148 = *v146;
          v149 = &v146[a6 + -4 * a6];
          v143.f64[1] = v145;
          v147.f64[1] = v148;
          v150 = vsubq_f64(vmulq_n_f64(v147, a7), v132);
          v151 = *v140;
          v152 = v140[1];
          v153 = (float64x2_t *)((char *)v140 - v48);
          v154 = vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v143, a7), v131), v151, v150.f64[1] * v63.f64[0], 0);
          v150.f64[0] = vmlsq_lane_f64(v150, v152, v150.f64[1] * v63.f64[0], 0).f64[0] * v62.f64[0];
          v14 = *(int8x16_t *)v153;
          v155 = vmlsq_lane_f64(v154, *v153, v150.f64[0], 0);
          v147.f64[0] = v155.f64[1] * v61.f64[0];
          a14.f64[0] = v153->f64[-a4];
          v55 = vmlsq_lane_f64(v155, a14, v155.f64[1] * v61.f64[0], 0);
          v55.f64[0] = v55.f64[0] * v60.f64[0];
          *v149 = v55.f64[0];
          v156 = &v149[(unint64_t)v47 / 8];
          *v156 = v147.f64[0];
          v157 = &v156[(unint64_t)v47 / 8];
          *v157 = v150.f64[0];
          v157[a6] = v150.f64[1] * v63.f64[0];
          ++f64;
          --v124;
        }
        while (v124);
      }
      v49 -= 2 * a6;
      v158 = v45 < 5;
      v45 -= 4;
    }
    while (!v158);
  }
}

void sub_20E846134(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, float32x4_t a14, double a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,char a57)
{
  unsigned __int32 v57;
  unsigned __int32 v58;
  BOOL v60;
  _BOOL4 v61;

  if (a3)
  {
    v57 = a10.i32[0];
    v58 = a9.i32[0];
    v60 = a9.f32[0] == 0.0 || a4 == 0;
    v61 = v60;
    if (!v61 || *(float *)a10.i32 != 1.0)
    {
      if (v61)
      {
        sub_20E856500(a1, a3, a7->f32, a8, *(float *)a10.i32);
      }
      else
      {
        if (*(float *)a10.i32 == 0.0)
          sub_20E856500(a1, a3, a7->f32, a8, *(float *)a10.i32);
        if (a3 > 85 || a4 >= 86)
        {
          if (a1 == 121)
            sub_20E85575C(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
              (uint64_t)a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              *((uint64_t *)&a33 + 1),
              a34,
              *((uint64_t *)&a34 + 1),
              a35,
              *((uint64_t *)&a35 + 1),
              a36,
              *((uint64_t *)&a36 + 1),
              a37,
              *((uint64_t *)&a37 + 1),
              a38,
              SDWORD2(a38),
              SHIDWORD(a38),
              a39,
              *((uint64_t *)&a39 + 1),
              a40,
              a41,
              a42,
              a43,
              a44,
              a45,
              a46,
              a47,
              a48,
              a49,
              a50,
              a51,
              a52,
              a53,
              a54,
              a55,
              a56,
              a57);
          else
            sub_20E85F700(a2, a3, a4, (int)a5, a6, (int)a7, a8, a8, a16, a17, a18, a19, a20, SHIDWORD(a20), a21, a22, a23, a24, a25,
              a26,
              a27,
              a28,
              a29,
              a30,
              a31,
              a32,
              a33,
              a34,
              a35,
              a36,
              a37,
              a38,
              a39,
              a40);
        }
        else
        {
          a9.i32[0] = v58;
          a10.i32[0] = v57;
          if (a1 == 121)
          {
            if ((_DWORD)a2 == 111)
              sub_20E82CE20(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
            else
              sub_20E8552A0(a3, a4, (uint64_t)a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          }
          else if ((_DWORD)a2 == 111)
          {
            sub_20E8441F0(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, a15);
          }
          else
          {
            sub_20E848490(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(float32x2_t *)a14.f32, *(float32x2_t *)&a15);
          }
        }
      }
    }
  }
}

void sub_20E846324(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  void (*v58)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  float *(*v60)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t *v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x2_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t vars0;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v90;
  float32x4_t *v91;

  v23 = MEMORY[0x24BDAC7A8](a1);
  v71 = v30;
  v72 = v29;
  v31 = v25;
  v70 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  if (v23 == 111)
    v35 = 1;
  else
    v35 = v27;
  v81 = v35;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_20E84B1BC;
  v83 = v27;
  if (v23 == 111)
    v37 = v27;
  else
    v37 = 1;
  v67 = v37;
  if (v23 == 111)
    v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_20E84B028;
  v80 = v36;
  v38 = sub_20E83C5C4;
  if (v23 == 111)
    v38 = sub_20E83C43C;
  v69 = v38;
  v39 = (v25 << 7) + 16408;
  if (a12 == -1)
  {
    v44 = 4 * v39;
    if (v25 < 1)
      v44 = 0;
    v43 = (float)(unint64_t)v44;
    goto LABEL_19;
  }
  v40 = v26;
  v41 = v24;
  v42 = v28;
  if (v25 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v43 = (float)(unint64_t)(4 * v39);
LABEL_19:
      *a11 = v43;
      return;
    }
    goto LABEL_21;
  }
  if (v25 >= 1)
  {
LABEL_21:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a23;
LABEL_24:
  if (v40 >= 1)
  {
    vars0 = 0;
    v45 = 0;
    v84 = v91 + 4100;
    v90 = v31 - 3;
    if (v31 <= 0)
      v47 = -(-v31 & 3);
    else
      v47 = v31 & 3;
    v86 = v47;
    v78 = v41;
    v75 = a10 + 512;
    v48 = 128;
    v79 = v31;
    v68 = v40;
    do
    {
      v73 = v48;
      if (v40 >= v48)
        v49 = v48;
      else
        v49 = v40;
      if (v45 + 128 <= v40)
        v50 = 128;
      else
        v50 = v40 - v45;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v69)(v70, v50, v31, v72 + 4 * v45 * v83 + 4 * v45, v42);
      sub_20E84ACFC(v50, v31, (unint64_t *)(v71 + 4 * v45), a9, v84, -1.0, v51, v52);
      v74 = v45 + 128;
      if (v45 + 128 < v41)
      {
        v53 = v75;
        v54 = 16 * (v49 + vars0);
        v82 = v72 + 4 * v45 * v67;
        v56 = v42 != 1.0 && v45 == 0 && v42 != 0.0;
        v57 = v45 + 128;
        v89 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
        v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
        do
        {
          v87 = v57 + 128;
          if (v57 + 128 <= v41)
            v59 = 128;
          else
            v59 = v41 - v57;
          v85 = v57;
          if ((v59 & 7) != 0)
            v58 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E84D820;
          v60 = v89;
          if ((v59 & 7) != 0)
            v60 = sub_20E846B90;
          v89 = v60;
          v80(v59, v50, v82 + 4 * v57 * v81, v83, v91);
          v88 = v53;
          v61 = 0;
          if (v31 >= 4)
          {
            v62 = (float32x4_t *)v53;
            v63 = v91 + 4100;
            do
            {
              if (v56)
                v89(v91, (uint64_t)v63, v62, a9, v59, v50, v42);
              else
                v58(v91, v63, v62, a9, v59, v50);
              v61 += 4;
              v63 = (float32x4_t *)((char *)v63 + v54);
              v62 += a9;
            }
            while (v61 < v90);
          }
          v31 = v79;
          if (v86)
          {
            v64 = a10 + 4 * v85 + 4 * v61 * a9;
            v65 = &v84->f32[v61 * v50];
            if (v56)
              sub_20E836E9C(v91, v65, v64, a9, v59, v86, v50, v42);
            else
              sub_20E836FCC(v91, v65, v64, a9, v59, v86, v50);
          }
          v53 = v88 + 512;
          v57 = v87;
          v41 = v78;
        }
        while (v87 < v78);
      }
      v45 = v74;
      v48 = v73 + 128;
      v75 += 512;
      vars0 -= 128;
      v42 = 1.0;
      v40 = v68;
    }
    while (v74 < v68);
  }
  if (v31 >= 1 && !v66)
    free(v91);
}

void sub_20E846780(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19)
{
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  float32x4_t v45;
  _BOOL4 v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *(*v54)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v55)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  const float *v60;
  float *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  unsigned int v65;
  uint64_t v66;
  uint64_t vars0;
  void (*vars8)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *(*v77)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v78)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float32x4_t *v79;

  v19 = MEMORY[0x24BDAC7A8](a1);
  v66 = v25;
  v26 = v20;
  v65 = v27;
  STACK[0x10128] = *MEMORY[0x24BDAC8D0];
  if (v19 == 111)
    v29 = 1;
  else
    v29 = v23;
  v70 = v29;
  v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_20E84B1BC;
  v72 = v23;
  if (v19 == 111)
    v31 = v23;
  else
    v31 = 1;
  v63 = v31;
  if (v19 == 111)
    v30 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *))sub_20E84B028;
  vars8 = v30;
  v32 = sub_20E83C29C;
  if (v19 == 111)
    v32 = sub_20E83C74C;
  v64 = v32;
  v33 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v38 = 4 * v33;
    if (v20 < 1)
      v38 = 0;
    v37 = (float)(unint64_t)v38;
    goto LABEL_19;
  }
  v34 = v22;
  v35 = v21;
  v36 = v24;
  if (v20 >= 1 && a12)
  {
    if (4 * v33 > a12)
    {
      v37 = (float)(unint64_t)(4 * v33);
LABEL_19:
      *a11 = v37;
      return;
    }
    goto LABEL_21;
  }
  if (v20 >= 1)
  {
LABEL_21:
    v79 = (float32x4_t *)a11;
    v61 = a11;
    if (!a11)
      v79 = (float32x4_t *)malloc_type_malloc(4 * v33, 0x100004052888210uLL);
    goto LABEL_24;
  }
  v61 = a11;
  v79 = (float32x4_t *)&a19;
LABEL_24:
  if ((uint64_t)v35 >= 1)
  {
    v39 = v26 - 3;
    if (v26 <= 0)
      v40 = -(-v26 & 3);
    else
      v40 = v26 & 3;
    v73 = v79 + 4100;
    v74 = v40;
    v41 = 1;
    vars0 = v26;
    v62 = v34;
    while (1)
    {
      v42 = v35 >= 0x80 ? v35 - 128 : 0;
      v43 = v35 >= 0x80 ? 128 : v35;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, float))v64)(v65, v43, v26, v34 + 4 * v42 * v72 + 4 * v42, v36);
      sub_20E84ACFC(v43, v26, (unint64_t *)(v66 + 4 * v42), v70, v73, -1.0, v44, v45);
      if (v35 < 0x81)
        break;
      v71 = v34 + 4 * v42 * v63;
      v46 = v36 != 1.0;
      if (v36 == 0.0)
        v46 = 0;
      v47 = v41 & v46;
      v48 = v42;
      v78 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
      v77 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
      do
      {
        v49 = v48;
        v50 = v48 >= 0x80;
        v51 = v48 - 128;
        if (v50)
          v52 = 128;
        else
          v52 = v49;
        if (!v50)
          v51 = 0;
        v75 = v51;
        v76 = a10 + 4 * v51;
        v53 = v71 + 4 * v51 * v70;
        v54 = v77;
        if ((v52 & 7) != 0)
          v54 = sub_20E84D820;
        v77 = v54;
        v55 = v78;
        if ((v52 & 7) != 0)
          v55 = sub_20E846B90;
        v78 = v55;
        vars8(v52, v43, v53, v72, v79);
        v56 = 0;
        if (v26 >= 4)
        {
          v56 = 0;
          v57 = (float32x4_t *)v76;
          v58 = v79 + 4100;
          do
          {
            if (v47)
              v78(v79, (uint64_t)v58, v57, v70, v52, v43, v36);
            else
              v77(v79, (uint64_t)v58, v57, v70, v52, v43);
            v56 += 4;
            v58 += v43;
            v57 += v70;
          }
          while (v56 < v39);
        }
        if (v74)
        {
          v59 = v76 + 4 * v56 * v70;
          v60 = &v73->f32[v56 * v43];
          if (v47)
            sub_20E836E9C(v79, v60, v59, v70, v52, v74, v43, v36);
          else
            sub_20E836FCC(v79, v60, v59, v70, v52, v74, v43);
        }
        v48 = v75;
        v26 = vars0;
      }
      while (v75 > 0);
      v41 = 0;
      v36 = 1.0;
      v34 = v62;
      v35 = v42;
    }
  }
  if (v26 >= 1 && !v61)
    free(v79);
}

float *sub_20E846B90(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int8x16_t v7;
  uint64_t v9;
  uint64_t v10;
  float *result;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t *v60;
  _OWORD *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;

  v9 = a5 & 7;
  v10 = a5 - v9;
  if (v10)
  {
    v12 = _X2;
    v13 = 4 * a4;
    v15 = *a1;
    v16 = a1[1];
    v14 = a1 + 2;
    v17 = *v14;
    v18 = v14[1];
    result = v14[2].f32;
    do
    {
      v19 = a6;
      v7 = veorq_s8(v7, v7);
      __asm { PRFM            #1, [X2,#0x40] }
      v26 = *_X2;
      v27 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v30 = *_X2;
      v31 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v34 = *_X2;
      v35 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v13);
      __asm { PRFM            #1, [X2,#0x40] }
      v37 = *_X2;
      v38 = _X2[1];
      _X2 = v12 + 2;
      v39 = (float32x4_t)v7;
      v40 = (float32x4_t)v7;
      v41 = (float32x4_t)v7;
      v42 = (float32x4_t)v7;
      v43 = (float32x4_t)v7;
      v44 = (float32x4_t)v7;
      v45 = (float32x4_t)v7;
      v47 = *(float32x4_t *)a2;
      v48 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      v52 = vmulq_n_f32(v26, a7);
      v53 = vmulq_n_f32(v27, a7);
      v54 = vmulq_n_f32(v30, a7);
      v55 = vmulq_n_f32(v31, a7);
      v56 = vmulq_n_f32(v34, a7);
      v57 = vmulq_n_f32(v35, a7);
      v58 = vmulq_n_f32(v37, a7);
      v59 = vmulq_n_f32(v38, a7);
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
      v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
      v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
      v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
      v15 = v17;
      v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
      v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
      v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
      v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
      v16 = v18;
      v17 = *(float32x4_t *)result;
      v18 = *(float32x4_t *)(result + 4);
      result += 8;
      v47 = *(float32x4_t *)(a2 + 16);
      v48 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v19 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v52 = vmlaq_n_f32(v52, v15, v47.f32[0]);
          v54 = vmlaq_lane_f32(v54, v15, *(float32x2_t *)v47.f32, 1);
          v56 = vmlaq_laneq_f32(v56, v15, v47, 2);
          v58 = vmlaq_laneq_f32(v58, v15, v47, 3);
          v53 = vmlaq_n_f32(v53, v16, v47.f32[0]);
          v55 = vmlaq_lane_f32(v55, v16, *(float32x2_t *)v47.f32, 1);
          v57 = vmlaq_laneq_f32(v57, v16, v47, 2);
          v59 = vmlaq_laneq_f32(v59, v16, v47, 3);
          v15 = *(float32x4_t *)result;
          v16 = *(float32x4_t *)(result + 4);
          v60 = (float32x4_t *)(result + 8);
          v47 = *(float32x4_t *)_X6;
          v61 = _X6 + 1;
          v7 = (int8x16_t)vmlaq_n_f32((float32x4_t)v7, v17, v48.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v48.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v48, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v48, 3);
          v39 = vmlaq_n_f32(v39, v18, v48.f32[0]);
          v41 = vmlaq_lane_f32(v41, v18, *(float32x2_t *)v48.f32, 1);
          v43 = vmlaq_laneq_f32(v43, v18, v48, 2);
          v45 = vmlaq_laneq_f32(v45, v18, v48, 3);
          v17 = *v60;
          v18 = v60[1];
          result = v60[2].f32;
          v48 = *(float32x4_t *)v61;
          _X6 = v61 + 1;
          v19 -= 2;
        }
        while (v19);
        v52 = vaddq_f32(v52, (float32x4_t)v7);
        v53 = vaddq_f32(v53, v39);
        v54 = vaddq_f32(v54, v40);
        v55 = vaddq_f32(v55, v41);
        v56 = vaddq_f32(v56, v42);
        v57 = vaddq_f32(v57, v43);
        v58 = vaddq_f32(v58, v44);
        v59 = vaddq_f32(v59, v45);
      }
      *v12 = v52;
      v12[1] = v53;
      v62 = (float32x4_t *)((char *)v12 + v13);
      *v62 = v54;
      v62[1] = v55;
      v63 = (float32x4_t *)((char *)v62 + v13);
      *v63 = v56;
      v63[1] = v57;
      v64 = (float32x4_t *)((char *)v63 + v13);
      *v64 = v58;
      v64[1] = v59;
      v12 = _X2;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v9)
    return sub_20E8370DC(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v9, a6, a7);
  return result;
}

void sub_20E846D50(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(uint64_t, float);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v55;
  _BOOL4 v56;
  void (*v57)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  void (*v58)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const float *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, float);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*vars0)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t, __n128, double, int8x16_t);
  unsigned int vars8_4;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;

  v27 = MEMORY[0x24BDAC7A8](a1);
  v75 = v31;
  v35 = v29;
  vars8_4 = v36;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v37 = (void (*)(uint64_t, float))sub_20E84AE38;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, float))sub_20E84ACFC;
  v70 = v37;
  v38 = sub_20E83C8F0;
  if (v27 == 111)
    v38 = sub_20E83CC1C;
  vars0 = v38;
  v39 = (v29 << 7) + 16408;
  if (a12 == -1)
  {
    v46 = 4 * v39;
    if (v29 < 1)
      v46 = 0;
    v45 = (float)(unint64_t)v46;
    goto LABEL_13;
  }
  v40 = v33;
  v41 = v32;
  v42 = v30;
  v43 = v28;
  v44 = v34;
  v72 = v31;
  if (v29 >= 1 && a12)
  {
    if (4 * v39 > a12)
    {
      v45 = (float)(unint64_t)(4 * v39);
LABEL_13:
      *a11 = v45;
      return;
    }
    goto LABEL_15;
  }
  if (v29 >= 1)
  {
LABEL_15:
    v91 = (float32x4_t *)a11;
    v66 = a11;
    if (!a11)
      v91 = (float32x4_t *)malloc_type_malloc(4 * v39, 0x100004052888210uLL);
    goto LABEL_18;
  }
  v66 = a11;
  v91 = (float32x4_t *)&a27;
LABEL_18:
  if (v42 >= 1)
  {
    v79 = 0;
    v47 = 0;
    v90 = v35 - 3;
    if (v35 <= 0)
      v48 = -(-v35 & 3);
    else
      v48 = v35 & 3;
    v85 = v48;
    v67 = v42;
    v71 = v41 << 9;
    v89 = 16 * v41;
    v78 = 512;
    v49 = 128;
    v77 = a10 + (v41 << 9);
    v68 = v40;
    v69 = v35;
    v82 = v43;
    do
    {
      v76 = v49;
      if (v42 >= v49)
        v50 = v49;
      else
        v50 = v42;
      if (v47 + 128 <= v42)
        v51 = 128;
      else
        v51 = v42 - v47;
      v83 = v75 + 4 * v47 * v41;
      ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float))vars0)(vars8_4, v43, v51, v40 + 4 * v47 * v72 + 4 * v47, v72, v44);
      v86 = v47 + 128;
      if (v35 - (v47 + 128) >= 1)
      {
        v70(v51, -1.0);
        if (v43 < 1)
        {
          v44 = 1.0;
        }
        else
        {
          v52 = 0;
          v80 = (uint64_t)&v91[4100] + v78 * (v50 + v79);
          v53 = 16 * (v50 + v79);
          v55 = v44 != 1.0 && v47 == 0;
          v56 = v44 != 0.0 && v55;
          v88 = v77;
          v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
          v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E832630;
          do
          {
            v87 = v52 + 128;
            if (v52 + 128 <= v43)
              v59 = 128;
            else
              v59 = v43 - v52;
            v84 = v52;
            if ((v59 & 7) != 0)
            {
              v58 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E84D820;
              v57 = (void (*)(float32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_20E846B90;
            }
            v60 = v41;
            sub_20E84B028(v59, v51, v83 + 4 * v52, v41, (uint64_t)v91);
            v61 = v86;
            if (v86 < v90)
            {
              v62 = v88;
              v63 = v80;
              v61 = v86;
              do
              {
                if (v56)
                  v57(v91, v63, v62, v60, v59, v51, v44);
                else
                  v58(v91, v63, v62, v60, v59, v51);
                v61 += 4;
                v63 += v53;
                v62 += v89;
              }
              while (v61 < v90);
            }
            v41 = v60;
            if (v85)
            {
              v64 = a10 + 4 * v84 + 4 * v61 * v60;
              v65 = &v91[4100].f32[v61 * v51];
              if (v56)
                sub_20E836E9C(v91, v65, v64, v60, v59, v85, v51, v44);
              else
                sub_20E836FCC(v91, v65, v64, v60, v59, v85, v51);
            }
            v88 += 512;
            v52 = v87;
            v43 = v82;
          }
          while (v87 < v82);
          v44 = 1.0;
          v40 = v68;
          v35 = v69;
          v42 = v67;
        }
      }
      v49 = v76 + 128;
      v78 += 512;
      v79 -= 128;
      v77 += v71;
      v47 = v86;
    }
    while (v86 < v42);
  }
  if (v35 >= 1 && !v66)
    free(v91);
}

void sub_20E847218(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  int v48;
  void (*v49)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  float *(*v51)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  const float *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, double, int8x16_t);
  uint64_t v68;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *(*v76)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v77;
  float32x4_t *v78;

  v17 = MEMORY[0x24BDAC7A8](a1);
  v26 = a9;
  STACK[0x10138] = *MEMORY[0x24BDAC8D0];
  v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_20E84AE38;
  if (v17 == 111)
    v28 = 1;
  else
    v28 = a9;
  v65 = v28;
  if (v17 == 111)
    v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))sub_20E84ACFC;
  v64 = v27;
  v29 = sub_20E83CDA4;
  if (v17 == 111)
    v29 = sub_20E83CA78;
  v66 = v29;
  v30 = (v20 << 7) + 16408;
  if (a12 == -1)
  {
    v39 = 4 * v30;
    if (v20 < 1)
      v39 = 0;
    v38 = (float)(unint64_t)v39;
    goto LABEL_16;
  }
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v19;
  v36 = v25;
  v37 = v18;
  if (v20 >= 1 && a12)
  {
    if (4 * v30 > a12)
    {
      v38 = (float)(unint64_t)(4 * v30);
LABEL_16:
      *a11 = v38;
      return;
    }
    goto LABEL_18;
  }
  if (v20 >= 1)
  {
LABEL_18:
    v58 = a11;
    v59 = v20;
    v78 = (float32x4_t *)a11;
    if (!a11)
      v78 = (float32x4_t *)malloc_type_malloc(4 * v30, 0x100004052888210uLL);
    goto LABEL_21;
  }
  v58 = a11;
  v59 = v20;
  v78 = (float32x4_t *)&a17;
LABEL_21:
  if (v34 >= 1)
  {
    v68 = v35;
    v71 = (uint64_t)&v78[4100];
    v77 = 16 * v32;
    v40 = 1;
    v62 = v33;
    v63 = v31;
    v61 = v37;
    v60 = v26;
    do
    {
      v41 = v34;
      v42 = (unint64_t)v34 >= 0x80;
      if ((unint64_t)v34 >= 0x80)
        v34 -= 128;
      else
        v34 = 0;
      if (v42)
        v43 = 128;
      else
        v43 = v41;
      vars8 = v33 + 4 * v34 * v32;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v66)(v37, v35, v43, v31 + 4 * v34 * v26 + 4 * v34, v26, v36);
      if (v41 >= 0x81)
      {
        v64(v43, v34, v31 + 4 * v34 * v65, v26, v71, -1.0);
        v44 = 1.0;
        if (v35 < 1)
        {
          v40 = 0;
        }
        else
        {
          v45 = 0;
          v46 = v34 - 3;
          v47 = v36 != 1.0;
          if (v36 == 0.0)
            v47 = 0;
          v48 = v47 & v40;
          v73 = v34 & 3;
          v75 = a10;
          v76 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
          v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
          vars0 = v34;
          do
          {
            v74 = v45 + 128;
            if (v45 + 128 <= v35)
              v50 = 128;
            else
              v50 = v35 - v45;
            v72 = v45;
            if ((v50 & 7) != 0)
              v49 = (void (*)(float32x4_t *, float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E84D820;
            v51 = v76;
            if ((v50 & 7) != 0)
              v51 = sub_20E846B90;
            v76 = v51;
            v52 = v32;
            sub_20E84B028(v50, v43, vars8 + 4 * v45, v32, (uint64_t)v78);
            if ((unint64_t)v34 < 4)
            {
              v53 = 0;
            }
            else
            {
              v53 = 0;
              v54 = (float32x4_t *)v75;
              v55 = v78 + 4100;
              do
              {
                if (v48)
                  v76(v78, (uint64_t)v55, v54, v52, v50, v43, v36);
                else
                  v49(v78, v55, v54, v52, v50, v43);
                v53 += 4;
                v55 += v43;
                v54 = (float32x4_t *)((char *)v54 + v77);
              }
              while (v53 < v46);
            }
            v32 = v52;
            v34 = vars0;
            if (v73)
            {
              v56 = a10 + 4 * v72 + 4 * v53 * v52;
              v57 = (const float *)(v71 + 4 * v53 * v43);
              if (v48)
                sub_20E836E9C(v78, v57, v56, v52, v50, v73, v43, v36);
              else
                sub_20E836FCC(v78, v57, v56, v52, v50, v73, v43);
            }
            v75 += 512;
            v45 = v74;
            v35 = v68;
          }
          while (v74 < v68);
          v40 = 0;
          v33 = v62;
          v31 = v63;
          v37 = v61;
          v26 = v60;
        }
      }
      else
      {
        v44 = v36;
      }
      v36 = v44;
    }
    while (v34 > 0);
  }
  if (v59 >= 1 && !v58)
    free(v78);
}

uint64_t sub_20E847670(uint64_t result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, uint64_t a7, float32x4_t *a8, float a9, float a10, int8x16_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t i;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t j;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int32 *v51;
  __int32 *v52;
  __int32 *v53;
  uint64_t k;
  float32x4_t *v55;
  float *v56;
  float32x4_t *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t m;
  float v67;
  float v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  __int32 *v74;
  float32x2_t v75;
  __int32 *v76;
  float32x2_t v77;

  v12 = 4 * a5;
  v13 = 4 * a12;
  v14 = 4 * a7;
  v15 = a2 <= 3;
  for (i = a2 - 3; !v15; i -= 4)
  {
    v17 = a4;
    v18 = a6;
    v19 = &a8[a12];
    v20 = __OFSUB__(result, 3);
    v21 = result - 3;
    if (result > 3)
    {
      do
      {
        v22 = a3;
        v23 = (float32x4_t)veorq_s8(a11, a11);
        v24 = v23;
        v25 = v23;
        v26 = v23;
        if ((a3 & 1) == 0)
          goto LABEL_5;
        v27 = *v17;
        v17 = (float32x4_t *)((char *)v17 + v12);
        v28 = *v18;
        v18 = (float32x4_t *)((char *)v18 + v14);
        v23 = vmlaq_n_f32(v23, v27, v28.f32[0]);
        v24 = vmlaq_lane_f32(v24, v27, *(float32x2_t *)v28.f32, 1);
        v25 = vmlaq_laneq_f32(v25, v27, v28, 2);
        v26 = vmlaq_laneq_f32(v26, v27, v28, 3);
        v22 = a3 - 1;
        if (a3 > 1)
        {
LABEL_5:
          v29 = *v17;
          v30 = *(float32x4_t *)((char *)v17 + v12);
          v31 = *v18;
          v32 = *(float32x4_t *)((char *)v18 + v14);
          v15 = v22 <= 2;
          for (j = v22 - 2; !v15; j -= 2)
          {
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v34 = vmlaq_n_f32(v23, v29, v31.f32[0]);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v35 = vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1);
            v36 = vmlaq_laneq_f32(v25, v29, v31, 2);
            v37 = vmlaq_laneq_f32(v26, v29, v31, 3);
            v29 = *v17;
            v23 = vmlaq_n_f32(v34, v30, v32.f32[0]);
            v31 = *v18;
            v24 = vmlaq_lane_f32(v35, v30, *(float32x2_t *)v32.f32, 1);
            v25 = vmlaq_laneq_f32(v36, v30, v32, 2);
            v26 = vmlaq_laneq_f32(v37, v30, v32, 3);
            v30 = *(float32x4_t *)((char *)v17 + v12);
            v32 = *(float32x4_t *)((char *)v18 + v14);
            v15 = j <= 2;
          }
          v17 = (float32x4_t *)((char *)v17 + 2 * v12);
          v23 = vmlaq_n_f32(vmlaq_n_f32(v23, v29, v31.f32[0]), v30, v32.f32[0]);
          v24 = vmlaq_lane_f32(vmlaq_lane_f32(v24, v29, *(float32x2_t *)v31.f32, 1), v30, *(float32x2_t *)v32.f32, 1);
          v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(v25, v29, v31, 2), v30, v32, 2);
          v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(v26, v29, v31, 3), v30, v32, 3);
        }
        v38 = (float32x4_t *)((char *)a8 + 8 * a12);
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v23, a9), *a8, a10);
        v39 = vmlaq_n_f32(vmulq_n_f32(v25, a9), *v38, a10);
        v40 = vmlaq_n_f32(vmulq_n_f32(v26, a9), *(float32x4_t *)((char *)v38 + 4 * a12), a10);
        *(float32x4_t *)((char *)a8 + 4 * a12) = vmlaq_n_f32(vmulq_n_f32(v24, a9), *(float32x4_t *)((char *)a8 + 4 * a12), a10);
        *a8++ = (float32x4_t)a11;
        *v38 = v39;
        *(float32x4_t *)((char *)v38 + 4 * a12) = v40;
        v18 = a6;
        v17 = (float32x4_t *)((char *)v17 - v12 * a3 + 16);
        v20 = __OFSUB__(v21, 4);
        v15 = v21 <= 4;
        v21 -= 4;
      }
      while (!v15);
    }
    v41 = result & 3;
    if (!v20 && v41 != 0)
    {
      do
      {
        v42 = a3;
        v43 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v44 = v17->f32[0],
              v17 = (float32x4_t *)((char *)v17 + v12),
              v45 = *v18,
              v18 = (float32x4_t *)((char *)v18 + v14),
              v43 = vmlaq_n_f32(v43, v45, v44),
              v42 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v46 = v17->f32[0];
            v47 = v17->f32[(unint64_t)v12 / 4];
            v48 = *(float32x4_t *)((char *)v18 + v14);
            v17 = (float32x4_t *)((char *)v17 + 2 * v12);
            v49 = vmlaq_n_f32(v43, *v18, v46);
            v18 = (float32x4_t *)((char *)v18 + 2 * v14);
            v43 = vmlaq_n_f32(v49, v48, v47);
            v15 = v42 <= 2;
            v42 -= 2;
          }
          while (!v15);
        }
        v50.i32[0] = a8->i32[0];
        v50.i32[1] = a8->i32[a12];
        v51 = (__int32 *)((char *)a8 + v13 + v13);
        v50.i32[2] = *v51;
        v50.i32[3] = v51[a12];
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v43, a9), v50, a10);
        v52 = (__int32 *)((char *)a8 + v13);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        *v52 = a11.i32[1];
        v53 = &v52[(unint64_t)v13 / 4];
        *v53 = a11.i32[2];
        v53[a12] = a11.i32[3];
        v18 = a6;
        v17 = (float32x4_t *)((char *)&v17->i32[1] - v12 * a3);
        v15 = v41-- <= 1;
      }
      while (!v15);
    }
    ++a6;
    a8 = v19;
    v15 = i <= 4;
  }
  v15 = i <= -3;
  for (k = i + 3; !v15; --k)
  {
    v55 = a4;
    v56 = (float *)a6;
    v57 = (float32x4_t *)((char *)a8 + v13);
    v58 = __OFSUB__(result, 3);
    v59 = result - 3;
    if (result > 3)
    {
      do
      {
        v60 = a3;
        v61 = (float32x4_t)veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v62 = *v55,
              v55 = (float32x4_t *)((char *)v55 + v12),
              v63 = *v56,
              v56 = (float *)((char *)v56 + v14),
              v61 = vmlaq_n_f32(v61, v62, v63),
              v60 = a3 - 1,
              a3 > 1))
        {
          v64 = *v55;
          v65 = *(float32x4_t *)((char *)v55 + v12);
          v15 = v60 <= 2;
          for (m = v60 - 2; !v15; m -= 2)
          {
            v55 = (float32x4_t *)((char *)v55 + 2 * v12);
            v67 = *v56;
            v68 = v56[(unint64_t)v14 / 4];
            v56 = (float *)((char *)v56 + 2 * v14);
            v69 = vmlaq_n_f32(v61, v64, v67);
            v64 = *v55;
            v61 = vmlaq_n_f32(v69, v65, v68);
            v65 = *(float32x4_t *)((char *)v55 + v12);
            v15 = m <= 2;
          }
          v55 = (float32x4_t *)((char *)v55 + 2 * v12);
          v61 = vmlaq_n_f32(vmlaq_n_f32(v61, v64, *v56), v65, v56[(unint64_t)v14 / 4]);
        }
        a11 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(v61, a9), *a8, a10);
        *a8++ = (float32x4_t)a11;
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)v55 - v12 * a3 + 16);
        v58 = __OFSUB__(v59, 4);
        v15 = v59 <= 4;
        v59 -= 4;
      }
      while (!v15);
    }
    v70 = result & 3;
    if (!v58 && v70 != 0)
    {
      do
      {
        v71 = a3;
        a11 = veorq_s8(a11, a11);
        if ((a3 & 1) == 0
          || (v72 = v55->f32[0],
              v55 = (float32x4_t *)((char *)v55 + v12),
              v73 = *v56,
              v56 = (float *)((char *)v56 + v14),
              *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32, v73, v72),
              v71 = a3 - 1,
              a3 > 1))
        {
          do
          {
            v75.i32[0] = v55->i32[0];
            v74 = (__int32 *)((char *)v55 + v12);
            v75.i32[1] = *v74;
            v55 = (float32x4_t *)&v74[(unint64_t)v12 / 4];
            v77.f32[0] = *v56;
            v76 = (__int32 *)&v56[(unint64_t)v14 / 4];
            v77.i32[1] = *v76;
            v56 = (float *)&v76[(unint64_t)v14 / 4];
            *(float32x2_t *)a11.i8 = vmla_f32(*(float32x2_t *)a11.i8, v77, v75);
            v15 = v71 <= 2;
            v71 -= 2;
          }
          while (!v15);
          *(float *)a11.i32 = vaddv_f32(*(float32x2_t *)a11.i8);
        }
        *(float *)a11.i32 = vmlas_n_f32(*(float *)a11.i32 * a9, a8->f32[0], a10);
        a8->i32[0] = a11.i32[0];
        a8 = (float32x4_t *)((char *)a8 + 4);
        v56 = (float *)a6;
        v55 = (float32x4_t *)((char *)&v55->i32[1] - v12 * a3);
        v15 = v70-- <= 1;
      }
      while (!v15);
    }
    a6 = (float32x4_t *)((char *)a6 + 4);
    a8 = v57;
    v15 = k <= 1;
  }
  return result;
}

uint64_t sub_20E8479B4(uint64_t a1, int *a2, unsigned int *a3, float *a4, int *a5, char *a6, int *a7, int *a8)
{
  signed int v16;
  int v17;

  *a8 = 0;
  if (!lsame_() && !lsame_())
  {
    v17 = -1;
    goto LABEL_14;
  }
  v16 = *a2;
  if (*a2 < 0)
  {
    v17 = -2;
    goto LABEL_14;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_14;
  }
  if (v16 <= 1)
    v16 = 1;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_14:
    *a8 = v17;
LABEL_15:
    xerbla_();
    return 0;
  }
  if (*a7 < v16)
  {
    v17 = -7;
    goto LABEL_14;
  }
  if (*a8)
    goto LABEL_15;
  sub_20E854DC4(a1, a2, (uint64_t)a4, a5, a8);
  if (!*a8)
    sub_20E8360B0(a1, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_20E847AF8(char *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, int *a5, __CLPK_integer *a6)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  __CLPK_integer v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  char *v24;
  int v25;
  double *v26;
  int v27;
  __CLPK_integer v28;
  double v29;
  float64x2_t v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  signed int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double *v47;
  uint64_t v48;
  __CLPK_integer v49;
  __CLPK_integer v50;
  __CLPK_integer v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  int v61;
  __CLPK_integer *v62;
  uint64_t v63;
  int v64;
  __CLPK_doublereal *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __CLPK_integer __n;
  char __b[2];
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v12 = *a5;
  *a6 = 0;
  v13 = lsame_();
  v14 = lsame_();
  if (!v13 && !lsame_())
  {
    v17 = -1;
    goto LABEL_23;
  }
  if (!v14 && !lsame_())
  {
    v17 = -2;
    goto LABEL_23;
  }
  v15 = *a3;
  if ((v15 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_23;
  }
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = *a3;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_23:
    *a6 = v17;
    goto LABEL_24;
  }
  v17 = *a6;
  if (*a6)
  {
LABEL_24:
    HIDWORD(v71) = -v17;
    xerbla_();
    return 0;
  }
  if ((_DWORD)v15)
  {
    v18 = ~(_DWORD)v12;
    v65 = &a4[~(_DWORD)v12];
    if (v14)
    {
      HIDWORD(v71) = *a3;
      v19 = v15 + 1;
      v20 = 1;
      v21 = v12 + 1;
      while (v65[v21] != 0.0)
      {
        ++v20;
        v21 += v12 + 1;
        if (v19 == v20)
        {
          *a6 = 0;
          goto LABEL_19;
        }
      }
      *a6 = v20;
    }
    else
    {
LABEL_19:
      v72 = 0x100000001;
      v73 = a1;
      v74 = a2;
      sub_20E83EC40(__b, (uint64_t)&v73, (uint64_t)&v72, (unsigned int *)&unk_254A4A498, 2uLL);
      if (*a3 > 32)
      {
        if (v13)
        {
          v23 = 0;
          v24 = (char *)&a4[v12 + 1 + v18];
          HIDWORD(v71) = *a3;
          v66 = (v12 << 8) + 256;
          v67 = v12 << 8;
          v25 = -1;
          v26 = (double *)v24;
          do
          {
            v27 = v25 + *a3;
            if (v27 <= 30)
              v28 = v27 + 1;
            else
              v28 = 32;
            __n = v28;
            LODWORD(v71) = v23;
            sub_20E8396D8("Left", "Upper", "No transpose", a2, (unsigned int *)&v71, (unsigned int *)&__n, (uint64_t)&unk_254A4A4A0, (int)a4, a5, (uint64_t)v24, a5);
            LODWORD(v71) = v23;
            sub_20E83986C("Right", "Upper", "No transpose", a2, (unsigned int *)&v71, (unsigned int *)&__n, &dbl_254A4A4A8, v26, v29, v30, v31, v32, v33, v34, v35, v36, a5, v24, a5);
            dtrti2_("Upper", a2, &__n, v26, a5, a6);
            v37 = v23 + 33;
            v23 += 32;
            v25 -= 32;
            v26 = (double *)((char *)v26 + v66);
            v24 += v67;
          }
          while (v37 <= SHIDWORD(v71));
        }
        else
        {
          v38 = (*a3 - 1);
          v39 = v38 & 0xFFFFFFE0 | 1;
          v40 = v38 >> 5;
          v41 = (32 * ((*a3 - 1) >> 5)) | 1;
          v42 = -32 * v40;
          v43 = v39 * v12;
          v44 = (v40 << 8) + 8 * v39 * v12 + 8 * v18;
          v45 = 32 * v40 + 33;
          v61 = v12 + 1;
          v46 = (v12 + 1) * v41;
          v64 = 32 * ~(_DWORD)v12;
          v47 = (__CLPK_doublereal *)((char *)a4 + v44 + 8);
          v62 = a3;
          v63 = ~v12 << 8;
          v48 = 32 * v12;
          v60 = v48;
          do
          {
            v68 = v41;
            HIDWORD(v71) = 32;
            v49 = *a3;
            v50 = v42 + *a3;
            if (v50 - 1 > 30)
              v50 = 32;
            __n = v50;
            v51 = v45 + v50 - 32;
            if (v51 <= v49)
            {
              HIDWORD(v71) = v42 + v49 - v50;
              sub_20E8396D8("Left", "Lower", "No transpose", a2, (unsigned int *)&v71 + 1, (unsigned int *)&__n, (uint64_t)&unk_254A4A4A0, (_DWORD)v65 + 8 * v51 * v61, a5, (uint64_t)&v65[v43 + v50 + v68], a5);
              HIDWORD(v71) = v42 + *v62 - __n;
              a3 = v62;
              v48 = v60;
              sub_20E83986C("Right", "Lower", "No transpose", a2, (unsigned int *)&v71 + 1, (unsigned int *)&__n, &dbl_254A4A4A8, v47, v52, v53, v54, v55, v56, v57, v58, v59, a5, (char *)&v65[v43 + __n + (int)v68], a5);
            }
            dtrti2_("Lower", a2, &__n, &v65[v46], a5, a6);
            v45 -= 32;
            v46 += v64;
            v42 += 32;
            v47 = (double *)((char *)v47 + v63);
            v43 -= v48;
            v41 = v68 - 32;
          }
          while (v45 > 32);
        }
      }
      else
      {
        dtrti2_(a1, a2, a3, a4, a5, a6);
      }
    }
  }
  return 0;
}

uint64_t sub_20E847FBC(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  double *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  double *v41;
  int v42;
  double v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;

  v10 = *a4;
  *a5 = 0;
  v11 = lsame_();
  if (!v11 && !lsame_())
  {
    v14 = -1;
    goto LABEL_29;
  }
  v12 = *a2;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = -2;
    goto LABEL_29;
  }
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = *a2;
  if (*a4 < v13)
  {
    v14 = -4;
LABEL_29:
    *a5 = v14;
    goto LABEL_30;
  }
  v14 = *a5;
  if (*a5)
  {
LABEL_30:
    v62 = -v14;
    xerbla_();
    return 0;
  }
  v56 = v10;
  if ((_DWORD)v12)
  {
    if (v12 <= 0x200)
      v15 = 32;
    else
      v15 = 64;
    if (v12 <= 0x1964)
      v16 = v15;
    else
      v16 = 128;
    if (v16 >= v12)
    {
      sub_20E82EF48(a1, a2, a3, a4, a5);
    }
    else
    {
      v17 = ~(_DWORD)v10;
      v57 = a3 + 8 * v17;
      v58 = a2;
      v59 = v16;
      v18 = 0;
      if (v11)
      {
        v19 = 0;
        v20 = 8 * v10 + 8 * v17 + a3 + 8;
        v21 = (int)v10 * (uint64_t)(int)v16;
        v52 = 8 * v21;
        v54 = 8 * (v21 + v16);
        v22 = 1;
        v23 = (double *)v20;
        while (1)
        {
          v24 = v18 + *a2;
          v61 = v24;
          v62 = v19;
          if ((int)v16 < v24)
            v24 = v16;
          v60 = v24;
          sub_20E839A00("Upper", "Transpose", (unsigned int *)&v60, (unsigned int *)&v62, &dbl_254A4A4B0, v20, (unsigned int *)a4, &dbl_254A4A4B8, (uint64_t)v23, a4);
          sub_20E82EF48((uint64_t)"Upper", &v60, (uint64_t)v23, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v26 = v19 + v60 + 1;
          v27 = *a2;
          if (v26 <= *a2)
          {
            v61 = v19;
            v62 = v18 + v27 - v60;
            v51 = v57 + 8 * (v19 + (int)v10 * (v60 + v22)) + 8;
            sub_20E8395AC("Transpose", "No transpose", &v60, &v62, &v61, (uint64_t)&dbl_254A4A4B0, v20, a4, v57 + 8 * (v26 * (int)v10 + 1), a4, (uint64_t)&dbl_254A4A4B8, v51, SHIDWORD(v51), a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            sub_20E83986C("Left", "Upper", "Transpose", "Non-unit", (unsigned int *)&v60, (unsigned int *)&v62, &dbl_254A4A4B8, v23, v28, v29, v30, v31, v32, v33, v34, v35, a4, (char *)(v57 + 8 * (v19 + (int)v10 * (v60 + v22)) + 8), a4);
          }
          LODWORD(v16) = v59;
          v19 += v59;
          v18 -= v59;
          v23 = (double *)((char *)v23 + v54);
          v20 += v52;
          v22 += v59;
          if (v19 + 1 > v12)
            return 0;
        }
      }
      else
      {
        v37 = v10 + 1;
        v38 = a3 + 8 * v17 + 8 * ((int)v10 + 1);
        v55 = 8 * v16;
        v53 = v16 * (v10 + 1);
        v39 = 1;
        while (1)
        {
          v40 = v18 + *a2;
          v61 = v40;
          if ((int)v16 < v40)
            v40 = v16;
          v60 = v40;
          LODWORD(v19) = v39 - 1;
          v62 = v39 - 1;
          v41 = (double *)(v57 + 8 * v37);
          sub_20E839A00("Lower", "No transpose", (unsigned int *)&v60, (unsigned int *)&v62, &dbl_254A4A4B0, v38, (unsigned int *)a4, &dbl_254A4A4B8, (uint64_t)v41, a4);
          sub_20E82EF48((uint64_t)"Lower", &v60, (uint64_t)v41, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v42 = *a2;
          if (v39 + v60 <= *a2)
          {
            v61 = v39 - 1;
            v62 = v18 + v42 - v60;
            sub_20E8395AC("No transpose", "Transpose", &v62, &v60, &v61, (uint64_t)&dbl_254A4A4B0, v57 + 8 * (v56 + v39 + v60), a4, v38, a4, (uint64_t)&dbl_254A4A4B8, v57 + 8 * (v37 + v60), (unint64_t)(v57 + 8 * (v37 + v60)) >> 32, a4);
            v62 = v18 + *v58 - v60;
            a2 = v58;
            sub_20E83986C("Right", "Lower", "Transpose", "Non-unit", (unsigned int *)&v62, (unsigned int *)&v60, &dbl_254A4A4B8, v41, v43, v44, v45, v46, v47, v48, v49, v50, a4, (char *)(v57 + 8 * (v37 + v60)), a4);
          }
          LODWORD(v16) = v59;
          v18 -= v59;
          v38 += v55;
          v37 += v53;
          v39 += v59;
          if (v39 > (int)v12)
            return 0;
        }
      }
      *a5 = v19 + v25;
    }
  }
  return 0;
}

uint64_t sub_20E848490(uint64_t result, uint64_t a2, float *a3, uint64_t a4, _DWORD *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x2_t a12, float32x2_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  double *v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int32 *v33;
  __int32 *v34;
  float32x2_t v35;
  float32x2_t *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  char *v43;
  float32x2_t v44;
  char *v45;
  char *v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  __int32 *v51;
  float *v52;
  __int32 *v53;
  float32x2_t v54;
  float32x2_t v55;
  float v56;
  float v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  __int32 *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  char *v81;
  float32x4_t v82;
  __n128 *v83;
  float32x4_t v84;
  __n128 *v85;
  __n128 *v86;
  float32x2_t *v87;
  uint64_t i;
  uint64_t v89;
  float32x2_t *v90;
  __int32 *v91;
  float32x2_t *v92;
  __int32 *v93;
  float32x2_t *v94;
  int32x2_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t *v112;
  float32x4_t v113;
  float32x4_t *v114;
  __n128 *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  float32x4_t *v118;

  a7.i64[1] = a8.i64[0];
  v21 = 0;
  v22 = 4 * a4;
  v23 = 4 * a6;
  if ((result & 1) == 0)
  {
LABEL_14:
    if ((result & 2) != 0)
    {
      v36 = (float32x2_t *)&a5[v21];
      a5 = (_DWORD *)((char *)a5 + 2 * v23);
      v37 = a2;
      v38 = (__int32 *)((char *)a3 + v21 * v22);
      v39 = &v38[(unint64_t)v22 / 4];
      v40 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v41 = v40;
      if ((a2 & 1) == 0)
        goto LABEL_18;
      v13.i32[0] = *v38++;
      v14.i32[0] = *v39++;
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v40 = vmla_n_f32(v40, *(float32x2_t *)v17.f32, v13.f32[0]);
      v41 = vmla_n_f32(v41, *(float32x2_t *)v17.f32, v14.f32[0]);
      v37 = a2 - 1;
      if (a2 > 1)
      {
LABEL_18:
        do
        {
          v13.i64[0] = *(_QWORD *)v38;
          v38 += 2;
          v14.i64[0] = *(_QWORD *)v39;
          v39 += 2;
          v42 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
          v40 = vmla_lane_f32(vmla_n_f32(v40, v42, v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v41 = vmla_lane_f32(vmla_n_f32(v41, v42, v14.f32[0]), a13, *(float32x2_t *)v14.f32, 1);
          v28 = v37 <= 2;
          v37 -= 2;
        }
        while (!v28);
      }
      v44 = *v36;
      v43 = (char *)v36 + v23;
      a13.i32[1] = *((_DWORD *)v43 + 1);
      v45 = &v43[-v23];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v40, a7.f32[0]), v44, a7, 2);
      *(_QWORD *)v45 = a8.i64[0];
      v46 = &v45[v23];
      *((_DWORD *)v46 + 1) = vmla_laneq_f32(vmul_n_f32(v41, *(float *)&a7), a13, a7, 2).i32[1];
      v47 = (float32x2_t *)&v46[-v23 + 8];
      v48 = v21 + 2;
      if (result > v21 + 2)
      {
        do
        {
          v49 = a2;
          v50 = (float *)((char *)a3 + v21 * v22);
          v51 = (__int32 *)((char *)a3 + v48 * v22);
          v52 = &v50[(unint64_t)v22 / 4];
          v53 = &v51[(unint64_t)v22 / 4];
          v54 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v55 = v54;
          if ((a2 & 1) == 0)
            goto LABEL_24;
          v17.i32[0] = *v51++;
          v18.i32[0] = *v53++;
          v56 = *v50++;
          v57 = *v52++;
          *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v54 = vmla_n_f32(v54, *(float32x2_t *)v17.f32, v56);
          v55 = vmla_n_f32(v55, *(float32x2_t *)v17.f32, v57);
          v49 = a2 - 1;
          if (a2 > 1)
          {
LABEL_24:
            do
            {
              v17.i64[0] = *(_QWORD *)v51;
              v51 += 2;
              v18.i64[0] = *(_QWORD *)v53;
              v53 += 2;
              v13.i64[0] = *(_QWORD *)v50;
              v50 += 2;
              v14.i64[0] = *(_QWORD *)v52;
              v52 += 2;
              v58 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v59 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
              v54 = vmla_lane_f32(vmla_n_f32(v54, v58, v13.f32[0]), v59, *(float32x2_t *)v13.f32, 1);
              v55 = vmla_lane_f32(vmla_n_f32(v55, v58, v14.f32[0]), v59, *(float32x2_t *)v14.f32, 1);
              v28 = v49 <= 2;
              v49 -= 2;
            }
            while (!v28);
          }
          v61 = *v47;
          v60 = (float32x2_t *)((char *)v47 + v23);
          v62 = *v60;
          v63 = (float32x2_t *)((char *)v60 + v23 + -2 * v23);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v54, a7.f32[0]), v61, a7, 2);
          *v63 = *(float32x2_t *)a8.i8;
          v64 = (float32x2_t *)((char *)v63 + v23);
          *v64 = vmla_laneq_f32(vmul_n_f32(v55, a7.f32[0]), v62, a7, 2);
          v47 = (float32x2_t *)((char *)v64 + v23 + -2 * v23 + 8);
          v48 += 2;
        }
        while (v48 < result);
        v21 += 2;
      }
      else
      {
        v21 += 2;
      }
    }
    for (; result > v21; v21 += 4)
    {
      v65 = (float32x4_t *)&a5[v21];
      a5 += v23;
      v66 = a2;
      v67 = (__int32 *)((char *)a3 + v21 * v22);
      v68 = &v67[(unint64_t)v22 / 4];
      v69 = (float32x2_t *)&v67[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
      v70 = (float32x2_t *)((char *)v69 + v22);
      v71 = (float32x4_t)veorq_s8(a8, a8);
      v72 = v71;
      v73 = *(float32x2_t *)v71.f32;
      v74 = *(float32x2_t *)v71.f32;
      if ((a2 & 1) == 0)
        goto LABEL_31;
      v13.i32[0] = *v67++;
      v14.i32[0] = *v68++;
      v15.i32[0] = v69->i32[0];
      v69 = (float32x2_t *)((char *)v69 + 4);
      v16.i32[0] = v70->i32[0];
      v70 = (float32x2_t *)((char *)v70 + 4);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
      v20 = (float32x2_t)vtrn1_s32((int32x2_t)v15, (int32x2_t)v16);
      *(float32x2_t *)&v17.u32[2] = v20;
      v71 = vmlaq_n_f32(v71, v17, v13.f32[0]);
      v72 = vmlaq_n_f32(v72, v17, v14.f32[0]);
      v73 = vmla_n_f32(v73, v20, v15.f32[0]);
      v74 = vmla_n_f32(v74, v20, v16.f32[0]);
      v66 = a2 - 1;
      if (a2 > 1)
      {
LABEL_31:
        do
        {
          v75.i64[0] = *(_QWORD *)v67;
          v67 += 2;
          v76.i64[0] = *(_QWORD *)v68;
          v68 += 2;
          v15 = *v69++;
          v16 = *v70++;
          v75.u64[1] = (unint64_t)v15;
          v76.u64[1] = (unint64_t)v16;
          v77 = (float32x4_t)vtrn1q_s32(v75, v76);
          v78 = (float32x4_t)vtrn2q_s32(v75, v76);
          v71 = vmlaq_lane_f32(vmlaq_n_f32(v71, v77, *(float *)v75.i32), v78, *(float32x2_t *)v75.i8, 1);
          v72 = vmlaq_lane_f32(vmlaq_n_f32(v72, v77, *(float *)v76.i32), v78, *(float32x2_t *)v76.i8, 1);
          v73 = vmla_lane_f32(vmla_n_f32(v73, *(float32x2_t *)&v77.u32[2], v15.f32[0]), *(float32x2_t *)&v78.u32[2], v15, 1);
          v74 = vmla_lane_f32(vmla_n_f32(v74, *(float32x2_t *)&v77.u32[2], v16.f32[0]), *(float32x2_t *)&v78.u32[2], v16, 1);
          v28 = v66 <= 2;
          v66 -= 2;
        }
        while (!v28);
      }
      v80 = *v65;
      v79 = (float32x4_t *)((char *)v65 + v23);
      v82 = *v79;
      v81 = (char *)v79 + v23;
      v13.i64[0] = *((_QWORD *)v81 + 1);
      v14.i64[0] = *(_QWORD *)&v81[v23 + 8];
      v83 = (__n128 *)&v81[-2 * v23];
      a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v71, a7.f32[0]), v80, a7, 2);
      v84 = vmlaq_laneq_f32(vmulq_n_f32(v72, a7.f32[0]), v82, a7, 2);
      v85 = (__n128 *)((char *)v83 + v23);
      *v83 = (__n128)a8;
      v86 = v83 + 1;
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u32[0] = v84.u32[1];
      v85 = (__n128 *)((char *)v85 + 4);
      v85->n128_u64[0] = v84.u64[1];
      v87 = (float32x2_t *)((char *)v85 + v23);
      *v87 = vmla_laneq_f32(vmul_n_f32(v73, a7.f32[0]), *(float32x2_t *)v13.f32, a7, 2);
      v87->i32[(unint64_t)v23 / 4 + 1] = vmla_laneq_f32(vmul_n_f32(v74, *(float *)&a7), *(float32x2_t *)&v14, a7, 2).i32[1];
      for (i = v21 + 4; i < result; i += 4)
      {
        v89 = a2;
        v90 = (float32x2_t *)((char *)a3 + v21 * v22);
        v91 = (__int32 *)((char *)a3 + i * v22);
        v92 = (float32x2_t *)((char *)v90 + v22);
        v93 = &v91[(unint64_t)v22 / 4];
        v94 = (float32x2_t *)((char *)v90 + v22 + v22);
        v95 = (int32x2_t *)&v91[(unint64_t)v22 / 4 + (unint64_t)v22 / 4];
        v96 = (float32x2_t *)((char *)v94 + v22);
        v97 = (float32x2_t *)((char *)v95 + v22);
        v98 = (float32x4_t)veorq_s8(a8, a8);
        v99 = v98;
        v100 = v98;
        v101 = v98;
        if ((a2 & 1) == 0)
          goto LABEL_36;
        v17.i32[0] = *v91++;
        v18.i32[0] = *v93++;
        v19.i32[0] = v95->i32[0];
        v95 = (int32x2_t *)((char *)v95 + 4);
        v20.i32[0] = v97->i32[0];
        v97 = (float32x2_t *)((char *)v97 + 4);
        v102 = v90->f32[0];
        v90 = (float32x2_t *)((char *)v90 + 4);
        v103 = v92->f32[0];
        v92 = (float32x2_t *)((char *)v92 + 4);
        v104 = v94->f32[0];
        v94 = (float32x2_t *)((char *)v94 + 4);
        v105 = v96->f32[0];
        v96 = (float32x2_t *)((char *)v96 + 4);
        *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
        v20 = (float32x2_t)vtrn1_s32(v19, (int32x2_t)v20);
        *(float32x2_t *)&v17.u32[2] = v20;
        v98 = vmlaq_n_f32(v98, v17, v102);
        v99 = vmlaq_n_f32(v99, v17, v103);
        v100 = vmlaq_n_f32(v100, v17, v104);
        v101 = vmlaq_n_f32(v101, v17, v105);
        v89 = a2 - 1;
        if (a2 > 1)
        {
LABEL_36:
          do
          {
            v17.i64[0] = *(_QWORD *)v91;
            v91 += 2;
            v18.i64[0] = *(_QWORD *)v93;
            v93 += 2;
            v19 = *v95++;
            v20 = *v97++;
            v106 = *v90++;
            v107 = *v92++;
            v15 = *v94++;
            v16 = *v96++;
            *(int32x2_t *)&v17.u32[2] = v19;
            v18.u64[1] = (unint64_t)v20;
            v108 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, v18);
            v109 = (float32x4_t)vtrn2q_s32((int32x4_t)v17, v18);
            v98 = vmlaq_lane_f32(vmlaq_n_f32(v98, v108, v106.f32[0]), v109, v106, 1);
            v99 = vmlaq_lane_f32(vmlaq_n_f32(v99, v108, v107.f32[0]), v109, v107, 1);
            v100 = vmlaq_lane_f32(vmlaq_n_f32(v100, v108, v15.f32[0]), v109, v15, 1);
            v101 = vmlaq_lane_f32(vmlaq_n_f32(v101, v108, v16.f32[0]), v109, v16, 1);
            v28 = v89 <= 2;
            v89 -= 2;
          }
          while (!v28);
        }
        v111 = *(float32x4_t *)v86;
        v110 = (float32x4_t *)((char *)v86 + v23);
        v113 = *v110;
        v112 = (float32x4_t *)((char *)v110 + v23);
        v13 = *v112;
        v114 = (float32x4_t *)((char *)v112 + v23);
        v14 = *v114;
        v115 = (__n128 *)((char *)v114 + v23 + -4 * v23);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v98, a7.f32[0]), v111, a7, 2);
        *v115 = (__n128)a8;
        v116 = (float32x4_t *)((char *)v115 + v23);
        *v116 = vmlaq_laneq_f32(vmulq_n_f32(v99, a7.f32[0]), v113, a7, 2);
        v117 = (float32x4_t *)((char *)v116 + v23);
        *v117 = vmlaq_laneq_f32(vmulq_n_f32(v100, a7.f32[0]), v13, a7, 2);
        v118 = (float32x4_t *)((char *)v117 + v23);
        *v118 = vmlaq_laneq_f32(vmulq_n_f32(v101, a7.f32[0]), v14, a7, 2);
        v86 = (__n128 *)((char *)&v118[1] + v23 + -4 * v23);
      }
    }
    return result;
  }
  v24 = a5;
  a5 = (_DWORD *)((char *)a5 + v23);
  v25 = a2;
  v26 = (double *)a3;
  v27 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
  if ((a2 & 1) == 0 || (v26 = (double *)(a3 + 1), v27.f32[0] = *a3 * *a3, v25 = a2 - 1, a2 > 1))
  {
    do
    {
      a12 = *(float32x2_t *)v26++;
      v27 = vmla_f32(v27, a12, a12);
      v28 = v25 <= 2;
      v25 -= 2;
    }
    while (!v28);
    v27.f32[0] = vaddv_f32(v27);
  }
  a12.i32[0] = *v24;
  v27.f32[0] = v27.f32[0] * a7.f32[0];
  *(float32x2_t *)a8.i8 = vmla_laneq_f32(v27, a12, a7, 2);
  *v24 = a8.i32[0];
  v29 = (float32x2_t *)(v24 + 1);
  v30 = 1;
  if (result > 1)
  {
    do
    {
      v31 = a2;
      v32 = (uint64_t *)a3;
      v33 = (__int32 *)((char *)a3 + v30 * v22);
      v34 = &v33[(unint64_t)v22 / 4];
      v35 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0)
        goto LABEL_11;
      v17.i32[0] = *v33++;
      v18.i32[0] = *v34++;
      v32 = (uint64_t *)(a3 + 1);
      *(int32x2_t *)v17.f32 = vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
      v35 = vmla_n_f32(v35, *(float32x2_t *)v17.f32, *a3);
      v31 = a2 - 1;
      if (a2 > 1)
      {
LABEL_11:
        do
        {
          v17.i64[0] = *(_QWORD *)v33;
          v33 += 2;
          v18.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v13.i64[0] = *v32++;
          a13 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8);
          v35 = vmla_lane_f32(vmla_n_f32(v35, (float32x2_t)vtrn1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.i8), v13.f32[0]), a13, *(float32x2_t *)v13.f32, 1);
          v28 = v31 <= 2;
          v31 -= 2;
        }
        while (!v28);
      }
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v35, a7.f32[0]), *v29, a7, 2);
      *v29++ = *(float32x2_t *)a8.i8;
      v30 += 2;
    }
    while (v30 < result);
    v21 = 1;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_20E848970(uint64_t result, uint64_t a2, __int128 *_X2, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  __int128 *v7;
  __int128 v8;
  __int128 v9;

  v5 = a2;
  _X3 = 4 * a4;
  v7 = _X2 + 2;
  do
  {
    do
    {
      v8 = *_X2;
      v9 = _X2[1];
      _X2 = (__int128 *)((char *)_X2 + _X3);
      __asm { PRFM            #1, [X2,X3,LSL#3] }
      --a2;
      *a5 = v8;
      a5[1] = v9;
      a5 += 2;
    }
    while (a2);
    a2 = v5;
    result -= 8;
    _X2 = v7;
    v7 += 2;
  }
  while (result);
  return result;
}

void sub_20E8489AC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, double *a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  if ((a1 & 1) != 0)
    sub_20E8489F8(a2, a3, a4, a5, a6, a7, a8, a17, a9.f64[0], a10.f64[0]);
  else
    sub_20E848BFC(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34);
}

void sub_20E8489F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, double *a7, uint64_t a8, double a9, double a10)
{
  double v10;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  float64x2_t *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *f64;
  uint64_t v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;

  v32 = a2;
  v33 = a7;
  v10 = a10;
  v30 = a3;
  v31 = a4;
  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1 || a9 == 0.0)
  {
    if (a10 != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v28) = a8;
      else
        v28 = -a8;
      cblas_dscal(v32, a10, &v33[((v32 - 1) * a8) & (a8 >> 63)], v28);
    }
  }
  else
  {
    sub_20E84460C();
    v29[3] = v29;
    MEMORY[0x24BDAC7A8]();
    v17 = (char *)(((unint64_t)v29 - v16) & 0xFFFFFFFFFFFFFFC0);
    v19 = (float64x2_t *)&v17[8 * v18];
    v21 = v20 & 0xFFFFFFFFFFFFFFF8;
    bzero(v17, v20 & 0xFFFFFFFFFFFFFFF8);
    bzero(&v19[128], v21);
    if (a1 >= 1)
    {
      v22 = 0;
      v23 = a1;
      do
      {
        v24 = v23 - 256;
        if (v23 >= 256)
          v23 = 256;
        if (a1 - v22 >= 256)
          v25 = 256;
        else
          v25 = a1 - v22;
        if (a1 - v22 >= 1)
        {
          v26 = a5;
          f64 = (_QWORD *)v19->f64;
          do
          {
            *f64++ = *v26;
            v26 += a6;
            --v23;
          }
          while (v23);
        }
        sub_20E852960(v25, v32, (float64x2_t *)(v30 + 8 * v22), v31, v19, v33, a8, a9, v10);
        v22 += 256;
        a5 += 256 * a6;
        v10 = 1.0;
        v23 = v24;
      }
      while (v22 < a1);
    }
  }
}

void sub_20E848BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;

  if (a9.f64[0] == 0.0)
  {
    if (a10.f64[0] != 1.0)
    {
      if (a8 >= 0)
        LODWORD(v34) = a8;
      else
        v34 = -a8;
      cblas_dscal(a1, a10.f64[0], (double *)(a7 + 8 * (((a1 - 1) * a8) & (a8 >> 63))), v34);
    }
  }
  else
  {
    sub_20E8513CC(a1, a2, a3, a4, a5, a6, a7, a8, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27,
      a28,
      a29,
      a30,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a31,
      a32,
      a33,
      a34);
  }
}

uint64_t sub_20E848C38(uint64_t a1, int *a2, __CLPK_doublereal *a3, int *a4, uint64_t a5, double *a6, int *a7, int *a8)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v22;
  double v23;
  uint64_t v24;
  __CLPK_doublereal *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v47;
  int v48;
  int v49;
  int v50;

  v47 = 0;
  v14 = *a4;
  *a8 = 0;
  v15 = *a7;
  v16 = lsame_();
  if (!v16 && !lsame_())
  {
    v19 = -1;
    goto LABEL_35;
  }
  v17 = *a2;
  if ((v17 & 0x80000000) != 0)
  {
    v19 = -2;
    goto LABEL_35;
  }
  if (v17 <= 1)
    v18 = 1;
  else
    v18 = *a2;
  if (*a4 < v18)
  {
    v19 = -4;
LABEL_35:
    *a8 = v19;
    goto LABEL_36;
  }
  if (v17 < 3)
    v20 = 1;
  else
    v20 = v17 - 1;
  if (*a7 < v20 && v15 != -1)
  {
    v19 = -7;
    goto LABEL_35;
  }
  v19 = *a8;
  if (*a8)
  {
LABEL_36:
    v50 = -v19;
    xerbla_();
    return 0;
  }
  v22 = 32 * (v17 - 1);
  if (v17 < 3)
    v22 = 32;
  v23 = (double)v22;
  *a6 = (double)v22;
  if (v15 != -1)
  {
    if ((_DWORD)v17)
    {
      v24 = ~(_DWORD)v14;
      v25 = &a3[v24];
      if (v16)
      {
        if ((_DWORD)v17 != 1)
        {
          v26 = (uint64_t)&a3[~(_DWORD)v14 + 1];
          v27 = 8 * v14;
          v28 = 1;
          do
          {
            v29 = v28 - 1;
            if (v28 <= 1)
            {
              v31 = v28 * v14;
              v30 = v28 + 1;
            }
            else
            {
              v30 = v28 + 1;
              v31 = v28 * v14;
              v32 = (_QWORD *)(v26 + v27 * v28);
              v33 = (uint64_t *)(v26 + v27 * v30);
              do
              {
                v34 = *v33++;
                *v32++ = v34;
                --v29;
              }
              while (v29);
            }
            v25[v31 + v17] = 0.0;
            v28 = v30;
          }
          while (v30 != v17);
          bzero(&a3[v24 + 1 + (int)v17 * (int)v14], 8 * (v17 - 1));
        }
        v25[(int)v17 + (int)v17 * (int)v14] = 1.0;
        v49 = v17 - 1;
        v50 = v17 - 1;
        v48 = v17 - 1;
        sub_20E859A08(&v50, &v49, &v48, a3, a4, a5, a6, a7, &v47);
      }
      else if ((_DWORD)v17 == 1)
      {
        *a3 = 1.0;
      }
      else
      {
        v36 = 0;
        v37 = (uint64_t)&a3[v17 + 1 + v17 * v14 + v24];
        v38 = 8 * ~v14;
        v39 = (uint64_t)&a3[v24 + 1 + (v17 - 1) * v14 + v17];
        v40 = v17;
        do
        {
          v25[v40 * v14 + 1] = 0.0;
          if (v40 < v17)
          {
            v41 = (uint64_t *)v39;
            v42 = (_QWORD *)v37;
            v43 = v36;
            do
            {
              v44 = *v41++;
              *v42++ = v44;
              --v43;
            }
            while (v43);
          }
          ++v36;
          v37 += v38;
          v39 += v38;
        }
        while (v40-- > 2);
        *a3 = 1.0;
        if ((int)v17 >= 2)
        {
          bzero(&a3[v24 + 2 + (int)v14], 8 * (v17 - 1));
          v49 = v17 - 1;
          v50 = v17 - 1;
          v48 = v17 - 1;
          sub_20E83AD8C((unsigned int *)&v50, &v49, &v48, (uint64_t)&v25[2 * (int)v14 + 2], a4, a5, a6, a7, &v47);
        }
      }
      *a6 = v23;
    }
    else
    {
      *a6 = 1.0;
    }
  }
  return 0;
}

uint64_t sub_20E848F4C(uint64_t result, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v9;
  float v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float32x4_t v42;
  __int32 *v43;
  __int32 *v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int64x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int64x2_t v73;
  float32x4_t v74;
  int64x2_t v75;
  float32x4_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  float32x4_t *v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  __int32 *v90;
  __int32 *v91;
  uint64_t *v92;
  uint64_t *v93;
  float32x4_t v94;
  __int32 v95;
  uint64_t v96;
  int32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32_t v117;
  float32_t v118;
  uint64_t v119;

  v9 = a7;
  v119 = result;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (__N < 1)
      {
        v16 = 2;
      }
      else
      {
        v20 = *(float *)(a3 + 4 * a4);
        v21 = __X + 1;
        v16 = 2;
        v22 = __N;
        do
        {
          v23 = *v21;
          v24 = *(v21 - 1) * v9;
          *(v21 - 1) = v24;
          *v21 = (float)(v23 * v9) - (float)(v24 * v20);
          v21 += __incX;
          --v22;
        }
        while (v22);
      }
    }
    else if ((result & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      result = v119;
      v9 = a7;
      v16 = 1;
    }
    else
    {
      v16 = 0;
    }
  }
  else if (__N < 1)
  {
    v16 = 3;
  }
  else
  {
    v11 = *(float *)(a3 + 4 * a4);
    v12 = (float *)(a3 + 8 * a4);
    v13 = *v12;
    v14 = v12[1];
    v15 = __X + 2;
    v16 = 3;
    v17 = __N;
    do
    {
      v18 = *(v15 - 2) * v9;
      v19 = (float)(*(v15 - 1) * v9) - (float)(v18 * v11);
      *(v15 - 2) = v18;
      *(v15 - 1) = v19;
      *v15 = -(float)((float)((float)(v14 * v19) + (float)(v18 * v13)) - (float)(*v15 * v9));
      v15 += __incX;
      --v17;
    }
    while (v17);
  }
  if (v16 < result)
  {
    v25 = v16;
    while (1)
    {
      if (__N >= 4)
      {
        v26 = 0;
        v27 = (__int32 *)(a3 + 4 * v25 * a4);
        v28 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
        v29 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v30 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        result = (uint64_t)(v29 + 1);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v26 * __incX];
          v32 = (float32x4_t *)&__X[(v26 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v26 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v26 | 3) * __incX];
          v35 = 0uLL;
          if ((v16 & 1) != 0)
          {
            v53.i32[0] = *v27;
            v53.i32[1] = *v28;
            v53.i32[2] = *v29;
            v53.i32[3] = *v30;
            v54 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v42 = vmlaq_n_f32((float32x4_t)0, v53, v54);
            v55 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v56 = v55;
            v57 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, v53, v56);
            v37 = vmlaq_n_f32((float32x4_t)0, v53, v57);
            v58 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v39 = v25 - 1;
            v36 = vmlaq_n_f32((float32x4_t)0, v53, v58);
            v40 = v30 + 1;
            v41 = v29 + 1;
            v43 = v28 + 1;
            v44 = v27 + 1;
            if (v25 != 1)
            {
LABEL_22:
              v45 = 0;
              v46 = 0uLL;
              v47 = 0uLL;
              v48 = 0uLL;
              do
              {
                v49.i64[0] = *(_QWORD *)&v44[v45];
                v50.i64[0] = *(_QWORD *)&v43[v45];
                v49.i64[1] = *(_QWORD *)&v41[v45];
                v50.i64[1] = *(_QWORD *)&v40[v45];
                v51 = (float32x4_t)vtrn1q_s32(v49, v50);
                v42 = vmlaq_n_f32(v42, v51, v31->f32[v45]);
                v38 = vmlaq_n_f32(v38, v51, v32->f32[v45]);
                v37 = vmlaq_n_f32(v37, v51, v33->f32[v45]);
                v36 = vmlaq_n_f32(v36, v51, v34->f32[v45]);
                v52 = (float32x4_t)vtrn2q_s32(v49, v50);
                v46 = vmlaq_n_f32(v46, v52, v31->f32[v45 + 1]);
                v47 = vmlaq_n_f32(v47, v52, v32->f32[v45 + 1]);
                v48 = vmlaq_n_f32(v48, v52, v33->f32[v45 + 1]);
                v35 = vmlaq_n_f32(v35, v52, v34->f32[v45 + 1]);
                v45 += 2;
                v39 -= 2;
              }
              while (v39);
              v43 = (__int32 *)((char *)v43 + v45 * 4);
              v41 = (__int32 *)((char *)v41 + v45 * 4);
              v40 = (__int32 *)((char *)v40 + v45 * 4);
              v31 = (float32x4_t *)((char *)v31 + v45 * 4);
              v32 = (float32x4_t *)((char *)v32 + v45 * 4);
              v33 = (float32x4_t *)((char *)v33 + v45 * 4);
              v34 = (float32x4_t *)((char *)v34 + v45 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v25;
            v40 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
            v41 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
            v42 = 0uLL;
            v43 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
            v44 = (__int32 *)(a3 + 4 * v25 * a4);
            if (v25)
              goto LABEL_22;
          }
          v48 = 0uLL;
          v47 = 0uLL;
          v46 = 0uLL;
LABEL_27:
          v59 = vaddq_f32(v48, v37);
          v60 = vmulq_n_f32(*v33, v9);
          v61 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v9), vaddq_f32(v46, v42));
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v9), vaddq_f32(v47, v38));
          v63 = (int64x2_t)vsubq_f32(v60, v59);
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v9), vaddq_f32(v35, v36));
          v65 = (int32x4_t)vzip1q_s64(v61, v63);
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip2q_s64(v61, v63);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (int64x2_t)vtrn1q_s32(v65, v66);
          v70 = (float32x4_t)vtrn2q_s32(v65, v66);
          v71 = (float32x4_t)vtrn1q_s32(v67, v68);
          v72 = (float32x4_t)vtrn2q_s32(v67, v68);
          v67.i32[0] = *v43;
          v73 = (int64x2_t)vmlsq_lane_f32(v70, (float32x4_t)v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v41;
          v66.i32[0] = v41[1];
          v74 = vmlsq_lane_f32(v71, (float32x4_t)v69, *(float32x2_t *)v67.i8, 0);
          v67.i32[0] = *v40;
          v60.i32[0] = v40[1];
          v75 = (int64x2_t)vmlsq_lane_f32(v74, (float32x4_t)v73, *(float32x2_t *)v66.i8, 0);
          v76 = vmlsq_lane_f32(vmlsq_lane_f32(v72, (float32x4_t)v69, *(float32x2_t *)v67.i8, 0), (float32x4_t)v73, *(float32x2_t *)v60.f32, 0);
          v67.i32[0] = v40[2];
          v77 = (int64x2_t)vmlsq_lane_f32(v76, (float32x4_t)v75, *(float32x2_t *)v67.i8, 0);
          v78 = (int32x4_t)vzip1q_s64(v69, v75);
          v79 = (int32x4_t)vzip1q_s64(v73, v77);
          v80 = (int32x4_t)vzip2q_s64(v69, v75);
          v81 = (int32x4_t)vzip2q_s64(v73, v77);
          *(int32x4_t *)v31 = vtrn1q_s32(v78, v79);
          *(int32x4_t *)v32 = vtrn2q_s32(v78, v79);
          *(int32x4_t *)v33 = vtrn1q_s32(v80, v81);
          *(int32x4_t *)v34 = vtrn2q_s32(v80, v81);
          v26 += 4;
          if (v26 >= __N - 3)
            goto LABEL_30;
        }
      }
      v26 = 0;
LABEL_30:
      if (v26 < __N)
        break;
LABEL_38:
      v25 += 4;
      if (v25 >= v119)
        return result;
    }
    v82 = (__int32 *)(a3 + 4 * v25 * a4);
    v83 = (__int32 *)(a3 + 4 * (a4 + v25 * a4));
    v84 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
    v85 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
    result = (uint64_t)(v84 + 1);
    while (1)
    {
      v86 = (float32x4_t *)&__X[v26 * __incX];
      v87 = 0uLL;
      if ((v16 & 1) != 0)
      {
        v94.i32[0] = *v82;
        v94.i32[1] = *v83;
        v94.i32[2] = *v84;
        v94.i32[3] = *v85;
        v95 = v86->i32[0];
        v86 = (float32x4_t *)((char *)v86 + 4);
        v88 = v25 - 1;
        v89 = vmlaq_n_f32((float32x4_t)0, v94, *(float *)&v95);
        v90 = v85 + 1;
        v91 = v84 + 1;
        v92 = (uint64_t *)(v83 + 1);
        v93 = (uint64_t *)(v82 + 1);
        if (v25 != 1)
        {
          do
          {
LABEL_36:
            v96 = *v93++;
            v97.i64[0] = v96;
            v98 = *v92++;
            v99.i64[0] = v98;
            v100 = *(_QWORD *)v91;
            v91 += 2;
            v101 = v100;
            v102 = *(_QWORD *)v90;
            v90 += 2;
            v97.i64[1] = v101;
            v99.i64[1] = v102;
            v103 = (float32x4_t)vtrn1q_s32(v97, v99);
            v104 = (float32x4_t)vtrn2q_s32(v97, v99);
            v99.i32[0] = v86->i32[0];
            v105 = v86->f32[1];
            v86 = (float32x4_t *)((char *)v86 + 8);
            v89 = vmlaq_n_f32(v89, v103, *(float *)v99.i32);
            v87 = vmlaq_n_f32(v87, v104, v105);
            v88 -= 2;
          }
          while (v88);
        }
      }
      else
      {
        v88 = v25;
        v89 = 0uLL;
        v90 = (__int32 *)(a3 + 4 * (v25 + 3) * a4);
        v91 = (__int32 *)(a3 + 4 * (v25 + 2) * a4);
        v92 = (uint64_t *)(a3 + 4 * (a4 + v25 * a4));
        v93 = (uint64_t *)(a3 + 4 * v25 * a4);
        if (v25)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v86, v9), vaddq_f32(v87, v89)).u32[0];
      _S4 = *(_DWORD *)v92;
      __asm { FMLS            S3, S4, V0.S[0] }
      _S4 = *v91;
      __asm { FMLS            S2, S4, V0.S[0] }
      _S4 = *v90;
      __asm { FMLS            S1, S4, V0.S[0] }
      v117 = _S2 - (float)(_S3 * *((float *)v91 + 1));
      v118 = (float)(_S1 - (float)(_S3 * *((float *)v90 + 1))) - (float)(v117 * *((float *)v90 + 2));
      v86->i32[0] = _S0;
      v86->f32[1] = _S3;
      v86->f32[2] = v117;
      v86->f32[3] = v118;
      if (++v26 == __N)
        goto LABEL_38;
    }
  }
  return result;
}

void sub_20E84946C(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float *v9;
  float v10;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  __int32 *v45;
  __int32 *v46;
  __int32 *v47;
  __int32 *v48;
  float32x4_t *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  __int32 *v58;
  __int32 *v59;
  float32x4_t v60;
  __int32 *v61;
  __int32 *v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int64x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  float32x4_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  __int32 *v103;
  __int32 *v104;
  __int32 *v105;
  __int32 *v106;
  float32x4_t *v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  __int32 *v111;
  __int32 *v112;
  uint64_t *v113;
  uint64_t *v114;
  float32x4_t v115;
  __int32 v116;
  uint64_t v117;
  int32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float v126;
  float32x4_t v127;
  float32_t v128;
  float32_t v129;
  float32_t v130;
  uint64_t v131;
  float *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v9 = a3;
  v10 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v22 = 2;
      }
      else
      {
        v27 = &a3[a4];
        v28 = a7 / *a3;
        v29 = *v27;
        v30 = v27[1];
        v31 = __X + 1;
        v22 = 2;
        v32 = __N;
        v33 = 1.0 / v30;
        do
        {
          v34 = *v31;
          v35 = v28 * *(v31 - 1);
          *(v31 - 1) = v35;
          *v31 = v33 * (float)((float)(v34 * v10) - (float)(v35 * v29));
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v10 = a7;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
  }
  else if (__N < 1)
  {
    v22 = 3;
  }
  else
  {
    v13 = &a3[a4];
    v14 = &a3[2 * a4];
    v15 = *v14;
    v16 = v14[1];
    v17 = v10 / *a3;
    v18 = *v13;
    v19 = 1.0 / v13[1];
    v20 = v14[2];
    v21 = __X + 2;
    v22 = 3;
    v23 = __N;
    v24 = 1.0 / v20;
    do
    {
      v25 = v17 * *(v21 - 2);
      v26 = v19 * (float)((float)(*(v21 - 1) * v10) - (float)(v25 * v18));
      *(v21 - 2) = v25;
      *(v21 - 1) = v26;
      *v21 = v24 * (float)-(float)((float)((float)(v16 * v26) + (float)(v25 * v15)) - (float)(*v21 * v10));
      v21 += __incX;
      --v23;
    }
    while (v23);
  }
  if (v22 < a1)
  {
    v36 = v22;
    v131 = a1;
    v132 = v9;
    while (1)
    {
      v37 = 1.0 / v9[v36 * a4 + v36];
      v38 = (v36 + 1) * a4;
      v39 = 1.0 / v9[v36 + 1 + v38];
      v40 = (v36 + 2) * a4;
      v41 = 1.0 / v9[v36 + 2 + v40];
      v42 = (v36 + 3) * a4;
      v43 = 1.0 / v9[v36 + 3 + v42];
      v136 = v42;
      v134 = v40;
      v135 = v38;
      v44 = 0;
      if (__N >= 4)
      {
        v45 = (__int32 *)&v9[v36 * a4];
        v46 = (__int32 *)&v9[v38];
        v47 = (__int32 *)&v9[v40];
        v48 = (__int32 *)&v9[v42];
        do
        {
          v49 = (float32x4_t *)&__X[v44 * __incX];
          v50 = (float32x4_t *)&__X[(v44 | 1) * __incX];
          v51 = (float32x4_t *)&__X[(v44 | 2) * __incX];
          v52 = (float32x4_t *)&__X[(v44 | 3) * __incX];
          v53 = 0uLL;
          if ((v22 & 1) != 0)
          {
            v71.i32[0] = *v45;
            v71.i32[1] = *v46;
            v71.i32[2] = *v47;
            v71.i32[3] = *v48;
            v72 = v49->f32[0];
            v49 = (float32x4_t *)((char *)v49 + 4);
            v60 = vmlaq_n_f32((float32x4_t)0, v71, v72);
            v73 = v50->f32[0];
            v50 = (float32x4_t *)((char *)v50 + 4);
            v74 = v73;
            v75 = v51->f32[0];
            v51 = (float32x4_t *)((char *)v51 + 4);
            v56 = vmlaq_n_f32((float32x4_t)0, v71, v74);
            v55 = vmlaq_n_f32((float32x4_t)0, v71, v75);
            v76 = v52->f32[0];
            v52 = (float32x4_t *)((char *)v52 + 4);
            v57 = v36 - 1;
            v54 = vmlaq_n_f32((float32x4_t)0, v71, v76);
            v58 = v48 + 1;
            v59 = v47 + 1;
            v61 = v46 + 1;
            v62 = v45 + 1;
            if (v36 != 1)
            {
LABEL_22:
              v63 = 0;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              do
              {
                v67.i64[0] = *(_QWORD *)&v62[v63];
                v68.i64[0] = *(_QWORD *)&v61[v63];
                v67.i64[1] = *(_QWORD *)&v59[v63];
                v68.i64[1] = *(_QWORD *)&v58[v63];
                v69 = (float32x4_t)vtrn1q_s32(v67, v68);
                v60 = vmlaq_n_f32(v60, v69, v49->f32[v63]);
                v56 = vmlaq_n_f32(v56, v69, v50->f32[v63]);
                v55 = vmlaq_n_f32(v55, v69, v51->f32[v63]);
                v54 = vmlaq_n_f32(v54, v69, v52->f32[v63]);
                v70 = (float32x4_t)vtrn2q_s32(v67, v68);
                v64 = vmlaq_n_f32(v64, v70, v49->f32[v63 + 1]);
                v65 = vmlaq_n_f32(v65, v70, v50->f32[v63 + 1]);
                v66 = vmlaq_n_f32(v66, v70, v51->f32[v63 + 1]);
                v53 = vmlaq_n_f32(v53, v70, v52->f32[v63 + 1]);
                v63 += 2;
                v57 -= 2;
              }
              while (v57);
              v61 = (__int32 *)((char *)v61 + v63 * 4);
              v59 = (__int32 *)((char *)v59 + v63 * 4);
              v58 = (__int32 *)((char *)v58 + v63 * 4);
              v49 = (float32x4_t *)((char *)v49 + v63 * 4);
              v50 = (float32x4_t *)((char *)v50 + v63 * 4);
              v51 = (float32x4_t *)((char *)v51 + v63 * 4);
              v52 = (float32x4_t *)((char *)v52 + v63 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = v36;
            v58 = (__int32 *)&v9[v42];
            v59 = v47;
            v60 = 0uLL;
            v61 = (__int32 *)&v9[v38];
            v62 = (__int32 *)&v9[v36 * a4];
            if (v36)
              goto LABEL_22;
          }
          v66 = 0uLL;
          v65 = 0uLL;
          v64 = 0uLL;
LABEL_27:
          v77 = vaddq_f32(v66, v55);
          v78 = vmulq_n_f32(*v51, v10);
          v79 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v49, v10), vaddq_f32(v64, v60));
          v80 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v50, v10), vaddq_f32(v65, v56));
          v81 = (int64x2_t)vsubq_f32(v78, v77);
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v52, v10), vaddq_f32(v53, v54));
          v83 = (int32x4_t)vzip1q_s64(v79, v81);
          v84 = (int32x4_t)vzip1q_s64(v80, v82);
          v85 = (int32x4_t)vzip2q_s64(v79, v81);
          v86 = (int32x4_t)vzip2q_s64(v80, v82);
          v87 = (float32x4_t)vtrn1q_s32(v83, v84);
          v88 = (float32x4_t)vtrn2q_s32(v83, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = (int64x2_t)vmulq_n_f32(v87, v37);
          v85.i32[0] = *v61;
          v92 = vmlsq_lane_f32(v88, (float32x4_t)v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v59;
          v84.i32[0] = v59[1];
          v93 = vmlsq_lane_f32(v89, (float32x4_t)v91, *(float32x2_t *)v85.i8, 0);
          v85.i32[0] = *v58;
          v78.i32[0] = v58[1];
          v94 = vmlsq_lane_f32(v90, (float32x4_t)v91, *(float32x2_t *)v85.i8, 0);
          v95 = (int64x2_t)vmulq_n_f32(v92, v39);
          v96 = vmlsq_lane_f32(v93, (float32x4_t)v95, *(float32x2_t *)v84.i8, 0);
          v97 = (int64x2_t)vmulq_n_f32(v96, v41);
          v96.i32[0] = v58[2];
          v98 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v94, (float32x4_t)v95, *(float32x2_t *)v78.f32, 0), (float32x4_t)v97, *(float32x2_t *)v96.f32, 0), v43);
          v99 = (int32x4_t)vzip1q_s64(v91, v97);
          v100 = (int32x4_t)vzip1q_s64(v95, v98);
          v101 = (int32x4_t)vzip2q_s64(v91, v97);
          v102 = (int32x4_t)vzip2q_s64(v95, v98);
          *(int32x4_t *)v49 = vtrn1q_s32(v99, v100);
          *(int32x4_t *)v50 = vtrn2q_s32(v99, v100);
          *(int32x4_t *)v51 = vtrn1q_s32(v101, v102);
          *(int32x4_t *)v52 = vtrn2q_s32(v101, v102);
          v44 += 4;
        }
        while (v44 < __N - 3);
      }
      v9 = v132;
      if (v44 < __N)
        break;
LABEL_36:
      v36 += 4;
      if (v36 >= v131)
        return;
    }
    v103 = (__int32 *)&v132[v36 * a4];
    v104 = (__int32 *)&v132[v38];
    v105 = (__int32 *)&v132[v134];
    v106 = (__int32 *)&v132[v136];
    while (1)
    {
      v107 = (float32x4_t *)&__X[v44 * __incX];
      v108 = 0uLL;
      if ((v22 & 1) != 0)
      {
        v115.i32[0] = *v103;
        v115.i32[1] = *v104;
        v115.i32[2] = *v105;
        v115.i32[3] = *v106;
        v116 = v107->i32[0];
        v107 = (float32x4_t *)((char *)v107 + 4);
        v109 = v36 - 1;
        v110 = vmlaq_n_f32((float32x4_t)0, v115, *(float *)&v116);
        v111 = v106 + 1;
        v112 = v105 + 1;
        v113 = (uint64_t *)(v104 + 1);
        v114 = (uint64_t *)(v103 + 1);
        if (v36 != 1)
        {
          do
          {
LABEL_34:
            v117 = *v114++;
            v118.i64[0] = v117;
            v119 = *v113++;
            v120.i64[0] = v119;
            v121 = *(_QWORD *)v112;
            v112 += 2;
            v122 = v121;
            v123 = *(_QWORD *)v111;
            v111 += 2;
            v118.i64[1] = v122;
            v120.i64[1] = v123;
            v124 = (float32x4_t)vtrn1q_s32(v118, v120);
            v125 = (float32x4_t)vtrn2q_s32(v118, v120);
            v120.i32[0] = v107->i32[0];
            v126 = v107->f32[1];
            v107 = (float32x4_t *)((char *)v107 + 8);
            v110 = vmlaq_n_f32(v110, v124, *(float *)v120.i32);
            v108 = vmlaq_n_f32(v108, v125, v126);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v109 = v36;
        v110 = 0uLL;
        v111 = (__int32 *)&v132[v136];
        v112 = (__int32 *)&v132[v134];
        v113 = (uint64_t *)&v132[v135];
        v114 = (uint64_t *)&v132[v36 * a4];
        if (v36)
          goto LABEL_34;
      }
      v127 = vsubq_f32(vmulq_n_f32(*v107, v10), vaddq_f32(v110, v108));
      v127.f32[0] = v37 * v127.f32[0];
      v128 = v39 * (float)(v127.f32[1] - (float)(v127.f32[0] * *(float *)v113));
      v129 = v41
           * (float)((float)(v127.f32[2] - (float)(v127.f32[0] * *(float *)v112)) - (float)(v128 * *((float *)v112 + 1)));
      v130 = v43
           * (float)((float)((float)(v127.f32[3] - (float)(v127.f32[0] * *(float *)v111))
                           - (float)(v128 * *((float *)v111 + 1)))
                   - (float)(v129 * *((float *)v111 + 2)));
      v107->i32[0] = v127.i32[0];
      v107->f32[1] = v128;
      v107->f32[2] = v129;
      v107->f32[3] = v130;
      if (++v44 == __N)
        goto LABEL_36;
    }
  }
}

uint64_t sub_20E849A1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x2_t *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t *v65;
  float32x4_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int64x2_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  int *v89;
  float *v90;
  uint64_t v91;
  float *v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t *v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32_t v112;
  BOOL v113;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v18 = *(float *)(a3 + 4 * (result + v7 * a4) - 8);
        v19 = (float *)(a5 + 4 * v7);
        v20 = a2;
        do
        {
          v21 = *(v19 - 1);
          v22 = *v19 * a7;
          *v19 = v22;
          *(v19 - 1) = (float)(v21 * a7) - (float)(v22 * v18);
          v19 += a6;
          --v20;
        }
        while (v20);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v16 = a2;
        v17 = (float *)(a5 + 4 * v7);
        do
        {
          *v17 = *v17 * a7;
          v17 += a6;
          --v16;
        }
        while (v16);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = *(float *)(a3 + 4 * (result - 3 + (result - 2) * a4));
      v11 = (float *)(a5 + 4 * v7);
      v12 = a2;
      do
      {
        v13 = *(v11 - 1);
        v14 = *v11 * a7;
        *v11 = v14;
        v15 = (float)(v13 * a7) - (float)(v14 * v8);
        *(v11 - 2) = -(float)((float)((float)(v10 * v15) + (float)(v14 * v9)) - (float)(*(v11 - 2) * a7));
        *(v11 - 1) = v15;
        v11 += a6;
        --v12;
      }
      while (v12);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v23 = v7 + 1;
    v24 = 8 * a4;
    while (1)
    {
      v25 = v23 - 4;
      if (a2 >= 4)
      {
        v26 = 0;
        v27 = a3 + 4 * v25;
        v28 = (float32x4_t *)(v27 + 4 * v23 * a4);
        v29 = result - v25;
        if (result - v25 <= 4)
          v29 = 4;
        v30 = (float32x4_t *)(v27 + 4 * (v23 - 1) * a4);
        v31 = (float32x2_t *)((char *)v30 - 4 * a4);
        while (1)
        {
          v32 = a5 + 4 * v26 * a6;
          v33 = (float *)(v32 + 4 * v23);
          v34 = a5 + 4 * (v26 | 1) * a6;
          v35 = (float *)(v34 + 4 * v23);
          v36 = a5 + 4 * (v26 | 2) * a6;
          v37 = (float *)(v36 + 4 * v23);
          v38 = a5 + 4 * (v26 | 3) * a6;
          v39 = (float *)(v38 + 4 * v23);
          v40 = 0uLL;
          if ((v29 & 1) != 0)
          {
            v59 = *v33++;
            v46 = vmlaq_n_f32((float32x4_t)0, *v28, v59);
            v60 = *v35++;
            v43 = vmlaq_n_f32((float32x4_t)0, *v28, v60);
            v61 = *v37++;
            v42 = vmlaq_n_f32((float32x4_t)0, *v28, v61);
            v62 = *v39++;
            v41 = vmlaq_n_f32((float32x4_t)0, *v28, v62);
            v44 = v29 - 5;
            v45 = (float32x4_t *)((char *)v28 + 4 * a4);
            if (v29 != 5)
            {
LABEL_24:
              v47 = 0uLL;
              v48 = 0uLL;
              v49 = 0uLL;
              do
              {
                v50 = *v33;
                v51 = v33[1];
                v33 += 2;
                v46 = vmlaq_n_f32(v46, *v45, v50);
                v52 = *v35;
                v53 = v35[1];
                v35 += 2;
                v43 = vmlaq_n_f32(v43, *v45, v52);
                v54 = *v37;
                v55 = v37[1];
                v37 += 2;
                v42 = vmlaq_n_f32(v42, *v45, v54);
                v56 = *v39;
                v57 = v39[1];
                v39 += 2;
                v41 = vmlaq_n_f32(v41, *v45, v56);
                v58 = *(float32x4_t *)((char *)v45 + 4 * a4);
                v47 = vmlaq_n_f32(v47, v58, v51);
                v48 = vmlaq_n_f32(v48, v58, v53);
                v49 = vmlaq_n_f32(v49, v58, v55);
                v45 = (float32x4_t *)((char *)v45 + v24);
                v40 = vmlaq_n_f32(v40, v58, v57);
                v44 -= 2;
              }
              while (v44);
              goto LABEL_29;
            }
          }
          else
          {
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = v29 - 4;
            v45 = v28;
            v46 = 0uLL;
            if (v29 != 4)
              goto LABEL_24;
          }
          v49 = 0uLL;
          v48 = 0uLL;
          v47 = 0uLL;
LABEL_29:
          v63 = (float32x4_t *)(v32 + 4 * v25);
          v64 = (float32x4_t *)(v34 + 4 * v25);
          v65 = (float32x4_t *)(v36 + 4 * v25);
          v66 = (float32x4_t *)(v38 + 4 * v25);
          v67 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v63, a7), vaddq_f32(v47, v46));
          v68 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v64, a7), vaddq_f32(v48, v43));
          v69 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v65, a7), vaddq_f32(v49, v42));
          v70 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v66, a7), vaddq_f32(v40, v41));
          v71 = (int32x4_t)vzip1q_s64(v67, v69);
          v72 = (int32x4_t)vzip1q_s64(v68, v70);
          v73 = (int32x4_t)vzip2q_s64(v67, v69);
          v74 = (int32x4_t)vzip2q_s64(v68, v70);
          v75 = (float32x4_t)vtrn1q_s32(v71, v72);
          v76 = (float32x4_t)vtrn2q_s32(v71, v72);
          v77 = (float32x4_t)vtrn1q_s32(v73, v74);
          v78 = (float32x4_t)vtrn2q_s32(v73, v74);
          v79 = vmlsq_laneq_f32(v77, v78, *v30, 2);
          *(float32x2_t *)v73.i8 = *v31;
          v80 = vmlsq_lane_f32(vmlsq_lane_f32(v76, v78, *(float32x2_t *)v30->f32, 1), v79, *v31, 1);
          v73.i32[0] = v31->i32[-a4];
          v81 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v75, v78, *(float32x2_t *)v30->f32, 0), v79, *v31, 0), v80, *(float32x2_t *)v73.i8, 0);
          v82 = (int32x4_t)vzip1q_s64(v81, (int64x2_t)v79);
          v83 = (int32x4_t)vzip1q_s64((int64x2_t)v80, (int64x2_t)v78);
          v84 = (int32x4_t)vzip2q_s64(v81, (int64x2_t)v79);
          v85 = (int32x4_t)vzip2q_s64((int64x2_t)v80, (int64x2_t)v78);
          *(int32x4_t *)v63 = vtrn1q_s32(v82, v83);
          *(int32x4_t *)v64 = vtrn2q_s32(v82, v83);
          *(int32x4_t *)v65 = vtrn1q_s32(v84, v85);
          *(int32x4_t *)v66 = vtrn2q_s32(v84, v85);
          v26 += 4;
          if (v26 >= a2 - 3)
            goto LABEL_32;
        }
      }
      v26 = 0;
LABEL_32:
      if (v26 < a2)
        break;
LABEL_42:
      v113 = v23 < 5;
      v23 -= 4;
      if (v113)
        return result;
    }
    v86 = a3 + 4 * v25;
    v87 = (float32x4_t *)(v86 + 4 * v23 * a4);
    v88 = 4;
    if (result - v25 > 4)
      v88 = result - v25;
    v89 = (int *)(v86 + 4 * (v23 - 1) * a4);
    v90 = (float *)&v89[-a4];
    while (1)
    {
      v91 = a5 + 4 * v26 * a6;
      v92 = (float *)(v91 + 4 * v23);
      v93 = 0uLL;
      if ((v88 & 1) != 0)
      {
        v97 = *v92++;
        v94 = vmlaq_n_f32((float32x4_t)0, *v87, v97);
        v95 = v88 - 5;
        v96 = (float32x4_t *)((char *)v87 + 4 * a4);
        if (v88 != 5)
        {
          do
          {
LABEL_40:
            v98 = *v92;
            v99 = v92[1];
            v92 += 2;
            v94 = vmlaq_n_f32(v94, *v96, v98);
            v93 = vmlaq_n_f32(v93, *(float32x4_t *)((char *)v96 + 4 * a4), v99);
            v96 = (float32x4_t *)((char *)v96 + v24);
            v95 -= 2;
          }
          while (v95);
        }
      }
      else
      {
        v94 = 0uLL;
        v95 = v88 - 4;
        v96 = v87;
        if (v88 != 4)
          goto LABEL_40;
      }
      v100 = (float32x4_t *)(v91 + 4 * v25);
      _Q1 = vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v94, v93));
      _S4 = v89[2];
      __asm { FMLS            S2, S4, V1.S[3] }
      _S5 = *v89;
      _S4 = v89[1];
      __asm
      {
        FMLS            S3, S4, V1.S[3]
        FMLS            S4, S5, V1.S[3]
      }
      v112 = _S3 - (float)(_S2 * v90[1]);
      v100->f32[0] = (float)(_S4 - (float)(_S2 * *(float *)&v89[-a4])) - (float)(v112 * v90[-a4]);
      v100->f32[1] = v112;
      v100->f32[2] = _S2;
      v100->i32[3] = _Q1.i32[3];
      if (++v26 == a2)
        goto LABEL_42;
    }
  }
  return result;
}

uint64_t sub_20E849EC4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t *v44;
  float32x2_t *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float32x4_t *v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float *v103;
  float *v104;
  uint64_t v105;
  float *v106;
  float32x4_t v107;
  float32x4_t *v108;
  uint64_t v109;
  float32x4_t v110;
  float v111;
  float v112;
  float v113;
  float32x4_t *v114;
  float32x4_t v115;
  float v116;
  float32_t v117;
  float32_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v23 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
        v24 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
        v25 = (float *)(a5 + 4 * v7);
        v26 = a2;
        v27 = 1.0 / *(float *)(a3 + 4 * (result - 2 + (result - 2) * a4));
        do
        {
          v28 = *(v25 - 1);
          v29 = v24 * *v25;
          *v25 = v29;
          *(v25 - 1) = v27 * (float)((float)(v28 * a7) - (float)(v29 * v23));
          v25 += a6;
          --v26;
        }
        while (v26);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v20 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v21 = (float *)(a5 + 4 * v7);
        v22 = a2;
        do
        {
          *v21 = v20 * *v21;
          v21 += a6;
          --v22;
        }
        while (v22);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 * a4 + result - 2));
      v9 = *(float *)(a3 + 4 * (v7 * a4 + result - 3));
      v10 = (result - 2) * a4;
      v11 = *(float *)(a3 + 4 * (v10 + result - 3));
      v12 = a7 / *(float *)(a3 + 4 * (v7 * a4 + v7));
      v13 = 1.0 / *(float *)(a3 + 4 * (result - 2 + v10));
      v14 = (float *)(a5 + 4 * v7);
      v15 = a2;
      v16 = 1.0 / *(float *)(a3 + 4 * (result - 3 + (result - 3) * a4));
      do
      {
        v17 = *(v14 - 1);
        v18 = v12 * *v14;
        *v14 = v18;
        v19 = v13 * (float)((float)(v17 * a7) - (float)(v18 * v8));
        *(v14 - 2) = v16 * (float)-(float)((float)((float)(v11 * v19) + (float)(v18 * v9)) - (float)(*(v14 - 2) * a7));
        *(v14 - 1) = v19;
        v14 += a6;
        --v15;
      }
      while (v15);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v30 = v7 + 1;
    v120 = a4 + 1;
    v121 = result;
    v31 = -a4;
    v32 = 8 * a4;
    v33 = 4 * a4;
    v122 = a3;
    v123 = a4;
    while (1)
    {
      v34 = v30 - 4;
      v35 = 1.0 / *(float *)(a3 + 4 * (v30 - 4) * v120);
      v36 = 1.0 / *(float *)(a3 + 4 * (v30 - 3) * v120);
      v37 = 1.0 / *(float *)(a3 + 4 * (v30 - 2) * v120);
      v38 = (v30 - 1) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v30 - 1 + v38));
      v124 = v38;
      v40 = 0;
      if (a2 >= 4)
      {
        v41 = a3 + 4 * v34;
        v42 = (float32x4_t *)(v41 + 4 * v30 * a4);
        if (result - v34 <= 4)
          v43 = 4;
        else
          v43 = result - v34;
        v44 = (float32x4_t *)(v41 + 4 * v38);
        v45 = (float32x2_t *)&v44->f32[v31];
        do
        {
          v46 = a5 + 4 * v40 * a6;
          v47 = (float *)(v46 + 4 * v30);
          v48 = a5 + 4 * (v40 | 1) * a6;
          v49 = (float *)(v48 + 4 * v30);
          v50 = a5 + 4 * (v40 | 2) * a6;
          v51 = (float *)(v50 + 4 * v30);
          v52 = a5 + 4 * (v40 | 3) * a6;
          v53 = (float *)(v52 + 4 * v30);
          v54 = 0uLL;
          if ((v43 & 1) != 0)
          {
            v73 = *v47++;
            v60 = vmlaq_n_f32((float32x4_t)0, *v42, v73);
            v74 = *v49++;
            v57 = vmlaq_n_f32((float32x4_t)0, *v42, v74);
            v75 = *v51++;
            v56 = vmlaq_n_f32((float32x4_t)0, *v42, v75);
            v76 = *v53++;
            v55 = vmlaq_n_f32((float32x4_t)0, *v42, v76);
            v58 = v43 - 5;
            v59 = (float32x4_t *)((char *)v42 + 4 * a4);
            if (v43 != 5)
            {
LABEL_25:
              v61 = 0uLL;
              v62 = 0uLL;
              v63 = 0uLL;
              do
              {
                v64 = *v47;
                v65 = v47[1];
                v47 += 2;
                v60 = vmlaq_n_f32(v60, *v59, v64);
                v66 = *v49;
                v67 = v49[1];
                v49 += 2;
                v57 = vmlaq_n_f32(v57, *v59, v66);
                v68 = *v51;
                v69 = v51[1];
                v51 += 2;
                v56 = vmlaq_n_f32(v56, *v59, v68);
                v70 = *v53;
                v71 = v53[1];
                v53 += 2;
                v55 = vmlaq_n_f32(v55, *v59, v70);
                v72 = *(float32x4_t *)((char *)v59 + v33);
                v61 = vmlaq_n_f32(v61, v72, v65);
                v62 = vmlaq_n_f32(v62, v72, v67);
                v63 = vmlaq_n_f32(v63, v72, v69);
                v59 = (float32x4_t *)((char *)v59 + v32);
                v54 = vmlaq_n_f32(v54, v72, v71);
                v58 -= 2;
              }
              while (v58);
              goto LABEL_30;
            }
          }
          else
          {
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v58 = v43 - 4;
            v59 = v42;
            v60 = 0uLL;
            if (v43 != 4)
              goto LABEL_25;
          }
          v63 = 0uLL;
          v62 = 0uLL;
          v61 = 0uLL;
LABEL_30:
          v77 = (float32x4_t *)(v46 + 4 * v34);
          v78 = (float32x4_t *)(v48 + 4 * v34);
          v79 = (float32x4_t *)(v50 + 4 * v34);
          v80 = (float32x4_t *)(v52 + 4 * v34);
          v81 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v77, a7), vaddq_f32(v61, v60));
          v82 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v78, a7), vaddq_f32(v62, v57));
          v83 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v79, a7), vaddq_f32(v63, v56));
          v84 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v80, a7), vaddq_f32(v54, v55));
          v85 = (int32x4_t)vzip1q_s64(v81, v83);
          v86 = (int32x4_t)vzip1q_s64(v82, v84);
          v87 = (int32x4_t)vzip2q_s64(v81, v83);
          v88 = (int32x4_t)vzip2q_s64(v82, v84);
          v89 = (float32x4_t)vtrn1q_s32(v85, v86);
          v90 = (float32x4_t)vtrn2q_s32(v85, v86);
          v91 = (float32x4_t)vtrn1q_s32(v87, v88);
          v92 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v87, v88), v39);
          v93 = vmulq_n_f32(vmlsq_laneq_f32(v91, v92, *v44, 2), v37);
          *(float32x2_t *)v91.f32 = *v45;
          v94 = vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v90, v92, *(float32x2_t *)v44->f32, 1), v93, *v45, 1), v36);
          v91.i32[0] = v45->i32[v31];
          v95 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(vmlsq_lane_f32(v89, v92, *(float32x2_t *)v44->f32, 0), v93, *v45, 0), v94, *(float32x2_t *)v91.f32, 0), v35);
          v96 = (int32x4_t)vzip1q_s64(v95, (int64x2_t)v93);
          v97 = (int32x4_t)vzip1q_s64((int64x2_t)v94, (int64x2_t)v92);
          v98 = (int32x4_t)vzip2q_s64(v95, (int64x2_t)v93);
          v99 = (int32x4_t)vzip2q_s64((int64x2_t)v94, (int64x2_t)v92);
          *(int32x4_t *)v77 = vtrn1q_s32(v96, v97);
          *(int32x4_t *)v78 = vtrn2q_s32(v96, v97);
          *(int32x4_t *)v79 = vtrn1q_s32(v98, v99);
          *(int32x4_t *)v80 = vtrn2q_s32(v98, v99);
          v40 += 4;
        }
        while (v40 < a2 - 3);
      }
      a3 = v122;
      a4 = v123;
      result = v121;
      if (v40 < a2)
        break;
LABEL_41:
      v119 = v30 < 5;
      v30 -= 4;
      if (v119)
        return result;
    }
    v100 = v122 + 4 * v34;
    v101 = (float32x4_t *)(v100 + 4 * v30 * v123);
    v102 = v121 - v34;
    if (v121 - v34 <= 4)
      v102 = 4;
    v103 = (float *)(v100 + 4 * v124);
    v104 = &v103[v31];
    while (1)
    {
      v105 = a5 + 4 * v40 * a6;
      v106 = (float *)(v105 + 4 * v30);
      v107 = 0uLL;
      if ((v102 & 1) != 0)
      {
        v111 = *v106++;
        v110 = vmlaq_n_f32((float32x4_t)0, *v101, v111);
        v108 = (float32x4_t *)((char *)v101 + 4 * v123);
        v109 = v102 - 5;
        if (v102 != 5)
        {
          do
          {
LABEL_39:
            v112 = *v106;
            v113 = v106[1];
            v106 += 2;
            v110 = vmlaq_n_f32(v110, *v108, v112);
            v107 = vmlaq_n_f32(v107, *(float32x4_t *)((char *)v108 + v33), v113);
            v108 = (float32x4_t *)((char *)v108 + v32);
            v109 -= 2;
          }
          while (v109);
        }
      }
      else
      {
        v108 = v101;
        v109 = v102 - 4;
        v110 = 0uLL;
        if (v102 != 4)
          goto LABEL_39;
      }
      v114 = (float32x4_t *)(v105 + 4 * v34);
      v115 = vsubq_f32(vmulq_n_f32(*v114, a7), vaddq_f32(v110, v107));
      v116 = vmuls_lane_f32(v39, v115, 3);
      v117 = v37 * (float)(v115.f32[2] - (float)(v116 * v103[2]));
      v118 = v36 * (float)((float)(v115.f32[1] - (float)(v116 * v103[1])) - (float)(v117 * v104[1]));
      v114->f32[0] = v35
                   * (float)((float)((float)(v115.f32[0] - (float)(v116 * *v103)) - (float)(v117 * v103[v31]))
                           - (float)(v118 * v104[v31]));
      v114->f32[1] = v118;
      v114->f32[2] = v117;
      v114->f32[3] = v116;
      if (++v40 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

uint64_t sub_20E84A41C(uint64_t a1, int *a2, int *a3, double *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  int *v10;
  double *v11;
  double *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __CLPK_integer v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double *v24;
  double *y;
  int v26;
  double v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  double *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double *v37;
  __CLPK_integer v38;
  uint64_t v39;
  __CLPK_integer v40;
  double *v41;
  __CLPK_integer v42;
  __CLPK_integer v43;
  double *v44;
  double v45;
  double *v46;
  int v47;
  BOOL v48;
  int *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  double *v66;
  double *v67;
  double da;
  int v70;
  int v71;
  __CLPK_integer __n[3];

  if (*a2 >= 1)
  {
    v10 = a2;
    v11 = (double *)*a5;
    v12 = &a4[~(_DWORD)v11];
    v54 = a6 - 8;
    v13 = *a9;
    v14 = a8 + 8 * ~*a9;
    v71 = 0;
    da = 0.0;
    v53 = a7 - 8;
    if (lsame_())
    {
      v15 = *v10;
      v16 = *a3;
      v70 = *v10;
      if (v16 >= 1)
      {
        v57 = v15 - v16;
        v55 = v10;
        v66 = &a4[~(_DWORD)v11];
        v64 = v13;
        v62 = v14;
        v50 = a3;
        do
        {
          v17 = v15 - *v10 + *a3;
          v60 = v17;
          if (v15 < *v10)
          {
            __n[0] = *v10 - v15;
            v18 = v13 + v13 * v17;
            sub_20E83F474("No transpose", &v70, __n, &unk_254A4A4C0, &v12[v15 * (int)v11 + 1 + (int)v11], a5, v14 + 8 * (v18 + v15), a9, &dbl_254A4A4C8, &v12[v15 * (int)v11 + 1], &dword_254A4A4D0);
            __n[0] = *v10 - v70;
            sub_20E83F474("No transpose", &v70, __n, &unk_254A4A4C0, v14 + 8 * (v18 + 1), a9, &v12[(int)v11 + v70 + v70 * (int)v11], a5, &dbl_254A4A4C8, &v12[v70 * (int)v11 + 1], &dword_254A4A4D0);
            v15 = v70;
          }
          if (v15 < 2)
          {
            v10 = v55;
            v12 = v66;
          }
          else
          {
            __n[0] = v15 - 1;
            v12 = v66;
            dlarfg_(__n, &v66[__n[0] + v15 * (int)v11], &v66[v15 * (int)v11 + 1], &dword_254A4A4D0, (__CLPK_doublereal *)(v53 + 8 * __n[0]));
            v19 = v70 - 1;
            v20 = v70 * (_DWORD)v11;
            v21 = v70 - 1 + v70 * (_DWORD)v11;
            *(double *)(v54 + 8 * v19) = v66[v21];
            v66[v21] = 1.0;
            __n[0] = v19;
            v22 = v60 * v13;
            v23 = v60 * v13 + 1;
            v24 = v11;
            y = (double *)(v14 + 8 * v23);
            dsymv_("Upper", __n, &dbl_254A4A4C8, a4, a5, &v66[v20 + 1], &dword_254A4A4D0, &dbl_254A5A640, y, &dword_254A4A4D0);
            v26 = v70;
            v10 = v55;
            if (*v55 > v70)
            {
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              v61 = (double *)(v62 + 8 * (v64 + v64 * v60 + 1));
              sub_20E83F474("Transpose", __n, &v71, &dbl_254A4A4C8, v61, a9, &v66[v70 * (int)v24 + 1], &dword_254A4A4D0, &dbl_254A5A640, v62 + 8 * (v23 + v70), &dword_254A4A4D0);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, &v66[(v70 + 1) * (int)v24 + 1], a5, v62 + 8 * (v70 + 1 + v22), &dword_254A4A4D0, &dbl_254A4A4C8, y, &dword_254A4A4D0);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              sub_20E83F474("Transpose", __n, &v71, &dbl_254A4A4C8, &v66[(v70 + 1) * (int)v24 + 1], a5, &v66[v70 * (int)v24 + 1], &dword_254A4A4D0, &dbl_254A5A640, v62 + 8 * (v70 + 1 + v22), &dword_254A4A4D0);
              v71 = *v55 - v70;
              __n[0] = v70 - 1;
              sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, v61, a9, v62 + 8 * (v23 + v70), &dword_254A4A4D0, &dbl_254A4A4C8, y, &dword_254A4A4D0);
              v26 = v70;
            }
            __n[0] = v26 - 1;
            dscal_(__n, (double *)(v53 + 8 * (v26 - 1)), y, &dword_254A4A4D0);
            __n[0] = v70 - 1;
            v27 = *(double *)(v53 + 8 * (v70 - 1)) * -0.5;
            da = v27 * ddot_(__n, y, &dword_254A4A4D0, &v66[v70 * (int)v24 + 1], &dword_254A4A4D0);
            __n[0] = v70 - 1;
            daxpy_(__n, &da, &v66[v70 * (int)v24 + 1], &dword_254A4A4D0, y, &dword_254A4A4D0);
            v15 = v70;
            v11 = v24;
            v13 = v64;
            v14 = v62;
            a3 = v50;
          }
          v70 = --v15;
        }
        while (v15 > v57);
      }
    }
    else
    {
      v56 = *a3;
      if (*a3 >= 1)
      {
        v28 = (_DWORD)v11 + 1;
        v29 = 1;
        v58 = (int)v11;
        v59 = (_DWORD)v11 + 1;
        v65 = v13;
        v63 = v14;
        v67 = &a4[~(_DWORD)v11];
        do
        {
          v30 = *v10 - v29 + 1;
          v71 = v29 - 1;
          __n[0] = v30;
          v31 = v14 + 8 * (v29 + v13);
          v32 = &v12[v29 * v28];
          sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, &v12[v29 + (int)v11], a5, v31, a9, &dbl_254A4A4C8, v32, &dword_254A4A4D0);
          v33 = *v10 - v29 + 1;
          v71 = v29 - 1;
          __n[0] = v33;
          sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, v31, a9, &v12[v29 + (int)v11], a5, &dbl_254A4A4C8, v32, &dword_254A4A4D0);
          v34 = *v10;
          if (*v10 <= v29)
          {
            v47 = v29 + 1;
            v13 = v65;
            v14 = v63;
            LODWORD(v11) = v58;
            v28 = v59;
          }
          else
          {
            __n[0] = *v10 - v29;
            v71 = v29 + 2;
            v35 = v29 + 1;
            v36 = v29 + 1 + v29 * v58;
            v37 = &v67[v36];
            if (v29 + 2 < v34)
              v34 = v29 + 2;
            dlarfg_(__n, &v67[v36], &v67[v34 + v29 * v58], &dword_254A4A4D0, (__CLPK_doublereal *)(v53 + 8 * v29));
            *(double *)(v54 + 8 * v29) = *v37;
            *v37 = 1.0;
            __n[0] = *v10 - v29;
            dsymv_("Lower", __n, &dbl_254A4A4C8, &v67[v35 * v59], a5, v37, &dword_254A4A4D0, &dbl_254A5A640, (double *)(v63 + 8 * (v35 + v29 * v65)), &dword_254A4A4D0);
            v38 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v38;
            v51 = v63 + 8 * (v35 + v65);
            v39 = v63 + 8 * (v29 * v65 + 1);
            sub_20E83F474("Transpose", __n, &v71, &dbl_254A4A4C8, v51, a9, v37, &dword_254A4A4D0, &dbl_254A5A640, v39, &dword_254A4A4D0);
            v40 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v40;
            v41 = &v67[v35 + v58];
            v11 = (double *)(v63 + 8 * (v35 + v29 * v65));
            sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, v41, a5, v39, &dword_254A4A4D0, &dbl_254A4A4C8, v11, &dword_254A4A4D0);
            v42 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v42;
            sub_20E83F474("Transpose", __n, &v71, &dbl_254A4A4C8, v41, a5, v37, &dword_254A4A4D0, &dbl_254A5A640, v39, &dword_254A4A4D0);
            v43 = *v10 - v29;
            v71 = v29 - 1;
            __n[0] = v43;
            sub_20E83F474("No transpose", __n, &v71, &unk_254A4A4C0, v51, a9, v39, &dword_254A4A4D0, &dbl_254A4A4C8, v11, &dword_254A4A4D0);
            __n[0] = *v10 - v29;
            v44 = (double *)(v53 + 8 * v29);
            dscal_(__n, v44, v11, &dword_254A4A4D0);
            __n[0] = *v10 - v29;
            v45 = *v44 * -0.5;
            da = v45 * ddot_(__n, v11, &dword_254A4A4D0, v37, &dword_254A4A4D0);
            __n[0] = *v10 - v29;
            v46 = v11;
            LODWORD(v11) = v58;
            daxpy_(__n, &da, v37, &dword_254A4A4D0, v46, &dword_254A4A4D0);
            v47 = v29 + 1;
            v13 = v65;
            v14 = v63;
            v28 = v59;
          }
          v12 = v67;
          v48 = v29 < v56;
          v29 = v47;
        }
        while (v48);
      }
    }
  }
  return 0;
}

uint64_t sub_20E84ACFC(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, float32x4_t *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  int32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t v26;

  if (result >= 1)
  {
    v8 = 4 * a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = (uint64_t *)((char *)v10 + v8);
        v12 = &v10[a4];
        v13 = (uint64_t *)((char *)v10 + 12 * a4);
        v14 = result - 1;
        v15 = v10;
        if (result != 1)
        {
          do
          {
            a8.i64[0] = *v15++;
            v16.i64[0] = *v11++;
            v17 = *v12++;
            v18 = *v13++;
            a8.i64[1] = v17;
            v16.i64[1] = v18;
            *a5 = vmulq_n_f32((float32x4_t)vtrn1q_s32((int32x4_t)a8, v16), a6);
            v19 = a5 + 1;
            *v19 = vmulq_n_f32((float32x4_t)vtrn2q_s32((int32x4_t)a8, v16), a6);
            a5 = v19 + 1;
            v20 = v14 <= 2;
            v14 -= 2;
          }
          while (!v20);
        }
        if (!v14)
        {
          v21.i32[0] = *(_DWORD *)v15;
          v21.i32[1] = *(_DWORD *)v11;
          v21.i32[2] = *(_DWORD *)v12;
          v21.i32[3] = *(_DWORD *)v13;
          a8 = vmulq_n_f32(v21, a6);
          *a5++ = a8;
        }
        v9 += 4;
        v10 += 2 * a4;
      }
      while (v9 < a2 - 3);
    }
    v22 = a2 - v9;
    if (a2 > v9)
    {
      v23 = (float32x4_t *)((char *)a3 + 4 * v9 * a4);
      do
      {
        v24 = v23;
        v25 = result - 3;
        if (result > 3)
        {
          do
          {
            v26 = *v24++;
            a8 = vmulq_n_f32(v26, a6);
            *a5++ = a8;
            v20 = v25 <= 4;
            v25 -= 4;
          }
          while (!v20);
        }
        if (v25 != -2)
        {
          if (v25)
          {
            if (v25 != -1)
              goto LABEL_24;
          }
          else
          {
            a8.i32[2] = v24->i32[2];
          }
          a8.i32[1] = v24->i32[1];
        }
        a8.i32[0] = v24->i32[0];
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = a8;
LABEL_24:
        v23 = (float32x4_t *)((char *)v23 + v8);
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t sub_20E84AE38(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, __n128 *a5, float a6, double a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  __int32 *v15;
  __int32 *v16;
  uint64_t v17;
  __int32 *v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 v21;
  __int32 *v22;
  __int32 v23;
  __int32 v24;
  BOOL v25;

  if (result >= 1)
  {
    v8 = a4;
    if (a2 < 4)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = a3;
      do
      {
        v11 = v10;
        v12 = result;
        do
        {
          v13 = *v11;
          v11 = (float32x4_t *)((char *)v11 + v8 * 4);
          a8 = vmulq_n_f32(v13, a6);
          *a5++ = (__n128)a8;
          --v12;
        }
        while (v12);
        v9 += 4;
        ++v10;
      }
      while (v9 < a2 - 3);
    }
    v14 = a2 - v9;
    if (a2 > v9)
    {
      v15 = (__int32 *)&a3[(unint64_t)v9 / 4];
      do
      {
        v16 = v15;
        v17 = result - 3;
        if (result > 3)
        {
          do
          {
            v19.i32[0] = *v16;
            v18 = &v16[v8];
            v21 = *v18;
            v20 = &v18[v8];
            v19.i32[1] = v21;
            v23 = *v20;
            v22 = &v20[v8];
            v19.i32[2] = v23;
            v24 = *v22;
            v16 = &v22[v8];
            v19.i32[3] = v24;
            a8 = vmulq_n_f32(v19, a6);
            *a5++ = (__n128)a8;
            v25 = v17 <= 4;
            v17 -= 4;
          }
          while (!v25);
        }
        if (v17 != -2)
        {
          if (v17)
          {
            if (v17 != -1)
              goto LABEL_21;
          }
          else
          {
            a8.i32[2] = v16[2 * a4];
          }
          a8.i32[1] = v16[a4];
        }
        a8.i32[0] = *v16;
        a8 = vmulq_n_f32(a8, a6);
        *a5++ = (__n128)a8;
LABEL_21:
        ++v15;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sub_20E84AF20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _DWORD *i;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;

  v5 = a4;
  if (result < 8)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int128 *)(a3 + 16);
    do
    {
      v8 = a2;
      v9 = v7;
      if (a2 >= 1)
      {
        do
        {
          v10 = *v9;
          *(_OWORD *)a5 = *(v9 - 1);
          *(_OWORD *)(a5 + 16) = v10;
          a5 += 32;
          v9 = (__int128 *)((char *)v9 + v5 * 4);
          --v8;
        }
        while (v8);
      }
      v6 += 8;
      v7 += 2;
    }
    while (v6 < result - 7);
  }
  if (v6 < result)
  {
    if (a2 <= 0)
      v11 = -(-a2 & 3);
    else
      v11 = a2 & 3;
    for (i = (_DWORD *)(a3 + 4 * v6); ; ++i)
    {
      if (a2 < 4)
      {
        v21 = (_DWORD *)(a3 + 4 * v6);
      }
      else
      {
        v13 = 0;
        v14 = i;
        do
        {
          v15 = v14;
          LODWORD(v16) = *v14;
          v17 = &v14[v5];
          HIDWORD(v16) = *v17;
          v18 = &v17[v5];
          LODWORD(v19) = *v18;
          v20 = &v18[v5];
          HIDWORD(v19) = *v20;
          v14 = &v20[v5];
          *(_QWORD *)a5 = v16;
          *(_QWORD *)(a5 + 8) = v19;
          a5 += 16;
          v13 += 4;
        }
        while (v13 < a2 - 3);
        v21 = &v15[4 * a4];
      }
      if (v11 == 1)
        goto LABEL_23;
      if (v11 == 2)
        goto LABEL_22;
      if (v11 == 3)
        break;
LABEL_24:
      if (++v6 == result)
        return result;
    }
    *(_DWORD *)(a5 + 8) = v21[2 * a4];
LABEL_22:
    *(_DWORD *)(a5 + 4) = v21[a4];
LABEL_23:
    *(_DWORD *)a5 = *v21;
    a5 += 16;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_20E84B028(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 7) != 0)
    return sub_20E84AF20(result, a2, a3, a4, a5);
  else
    return sub_20E848970(result, a2, (__int128 *)a3, a4, (_OWORD *)a5);
}

uint64_t sub_20E84B038(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  BOOL v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  int32x4_t *v29;
  uint64_t v30;
  int32x4_t v31;

  if (result < 8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a3 + 28 * a4);
    v7 = &a3[3 * a4];
    v8 = 8 * a4 - a2;
    v9 = a3;
    v10 = (uint64_t *)((char *)a3 + 20 * a4);
    v11 = &a3[2 * a4];
    v12 = (uint64_t *)((char *)a3 + 12 * a4);
    v13 = &a3[a4];
    v14 = (uint64_t *)((char *)a3 + 4 * a4);
    do
    {
      v15 = a2 - 1;
      if (a2 > 1)
      {
        do
        {
          v16.i64[0] = *v9++;
          v17.i64[0] = *v14++;
          v18 = *v13++;
          v19 = *v12++;
          v20.i64[0] = *v11++;
          v21.i64[0] = *v10++;
          v22 = *v7++;
          v23 = *v6++;
          v16.i64[1] = v18;
          v17.i64[1] = v19;
          v20.i64[1] = v22;
          v21.i64[1] = v23;
          *a5 = vtrn1q_s32(v16, v17);
          a5[1] = vtrn1q_s32(v20, v21);
          v24 = a5 + 2;
          *v24 = vtrn2q_s32(v16, v17);
          v24[1] = vtrn2q_s32(v20, v21);
          a5 = v24 + 2;
          v25 = v15 <= 2;
          v15 -= 2;
        }
        while (!v25);
      }
      if (!v15)
      {
        v26.i32[0] = *(_DWORD *)v9;
        v9 = (uint64_t *)((char *)v9 + 4);
        v26.i32[1] = *(_DWORD *)v14;
        v14 = (uint64_t *)((char *)v14 + 4);
        v26.i32[2] = *(_DWORD *)v13;
        v13 = (uint64_t *)((char *)v13 + 4);
        v26.i32[3] = *(_DWORD *)v12;
        v12 = (uint64_t *)((char *)v12 + 4);
        v27.i32[0] = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 4);
        v27.i32[1] = *(_DWORD *)v10;
        v10 = (uint64_t *)((char *)v10 + 4);
        v27.i32[2] = *(_DWORD *)v7;
        v7 = (uint64_t *)((char *)v7 + 4);
        v27.i32[3] = *(_DWORD *)v6;
        v6 = (uint64_t *)((char *)v6 + 4);
        *a5 = v26;
        a5[1] = v27;
        a5 += 2;
      }
      v9 = (uint64_t *)((char *)v9 + 4 * v8);
      v14 = (uint64_t *)((char *)v14 + 4 * v8);
      v13 = (uint64_t *)((char *)v13 + 4 * v8);
      v12 = (uint64_t *)((char *)v12 + 4 * v8);
      v11 = (uint64_t *)((char *)v11 + 4 * v8);
      v10 = (uint64_t *)((char *)v10 + 4 * v8);
      v7 = (uint64_t *)((char *)v7 + 4 * v8);
      v5 += 8;
      v6 = (uint64_t *)((char *)v6 + 4 * v8);
    }
    while (v5 < result - 7);
  }
  if (v5 < result)
  {
    if (a2 <= 0)
      v28 = -(-a2 & 3);
    else
      v28 = a2 & 3;
    while (1)
    {
      v29 = (int32x4_t *)((char *)a3 + 4 * v5 * a4);
      if (a2 >= 4)
      {
        v30 = 0;
        do
        {
          v31 = *v29++;
          *a5++ = v31;
          v30 += 4;
        }
        while (v30 < a2 - 3);
      }
      if (v28 == 1)
        goto LABEL_23;
      if (v28 == 2)
        goto LABEL_22;
      if (v28 == 3)
        break;
LABEL_24:
      if (++v5 == result)
        return result;
    }
    a5->i32[2] = v29->i32[2];
LABEL_22:
    a5->i32[1] = v29->i32[1];
LABEL_23:
    a5->i32[0] = v29->i32[0];
    ++a5;
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_20E84B1BC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  if ((result & 7) != 0)
    return sub_20E84B038(result, a2, a3, a4, a5);
  else
    return sub_20E8569E0(result, a2, a3, a4, a5);
}

void sub_20E84B1CC(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  const double *v26;
  uint64_t v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  float64x2_t v37;
  double *v38;
  float64x2_t v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  double v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  double *v77;
  double *v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double *f64;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v8 = a5;
  v9 = a4;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = __N - 3;
    v15 = 8 * __incX;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v98 = __incX + 1;
    v94 = (2 * __incX) | 1;
    v95 = 2 * __incX;
    v97 = __incX + 2;
    v93 = 2 * __incX + 2;
    v96 = __incX + 3;
    v92 = 2 * __incX + 3;
    v17 = a4 + 1;
    v18 = 24 * a4 + 24;
    v19 = 32 * a4 + 32;
    v20 = 16 * a4 + 16;
    v21 = 8 * a4 + 8;
    while (1)
    {
      if (__N < 4)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = a5;
        v25 = __N;
        v26 = a3;
        do
        {
          v27 = v25 - 4;
          v28 = *(const double *)((char *)v26 + v21);
          v30 = *(float64x2_t *)((char *)v24 + 8 * __incX);
          v31 = *(float64x2_t *)((char *)v24 + v15 + 16);
          v29 = (float64x2_t *)((char *)v24 + v15 + v15);
          v32 = vmulq_n_f64(v30, v28);
          v33 = vmulq_n_f64(v31, v28);
          v34 = vmlaq_laneq_f64(vmulq_n_f64(*v24, *v26), v30, *(float64x2_t *)v26, 1);
          v35 = vmlaq_laneq_f64(vmulq_n_f64(v24[1], *v26), v31, *(float64x2_t *)v26, 1);
          v37 = *(float64x2_t *)(v26 + 2);
          v36 = (double *)(v26 + 4);
          v39 = *(float64x2_t *)((char *)v26 + v21 + 8);
          v38 = (double *)((char *)v26 + v21 + 24);
          v41 = *(float64x2_t *)((char *)v26 + v20);
          v40 = (double *)((char *)v26 + v20 + 16);
          v43 = *(const double *)((char *)v26 + v18);
          v42 = (double *)((char *)v26 + v18 + 8);
          v45 = *v29;
          v46 = v29[1];
          v44 = (float64x2_t *)((char *)v29 + v15);
          v48 = *v44;
          v49 = v44[1];
          v47 = (float64x2_t *)((char *)v44 + v15);
          v50 = vmulq_n_f64(v48, v43);
          v51 = vmulq_n_f64(v49, v43);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v45, v37.f64[0]), v48, v37, 1);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v46, v37.f64[0]), v49, v37, 1);
          v54 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v45, v39.f64[0]), v48, v39, 1);
          v55 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v46, v39.f64[0]), v49, v39, 1);
          v56 = vmlaq_laneq_f64(vmulq_n_f64(v45, v41.f64[0]), v48, v41, 1);
          v57 = vmlaq_laneq_f64(vmulq_n_f64(v46, v41.f64[0]), v49, v41, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v58 = *v47;
            v59 = v47[1];
            v47 = (float64x2_t *)((char *)v47 + v15);
            v60 = *v36;
            v36 = (double *)(v26 + 5);
            v61 = *v38;
            v38 = (double *)((char *)v26 + v21 + 32);
            v62 = *v40;
            v40 = (double *)((char *)v26 + v20 + 24);
            v63 = *v42;
            v42 = (double *)((char *)v26 + v18 + 16);
            v52 = vmlaq_n_f64(v52, v58, v60);
            v54 = vmlaq_n_f64(v54, v58, v61);
            v56 = vmlaq_n_f64(v56, v58, v62);
            v50 = vmlaq_n_f64(v50, v58, v63);
            v53 = vmlaq_n_f64(v53, v59, v60);
            v55 = vmlaq_n_f64(v55, v59, v61);
            v57 = vmlaq_n_f64(v57, v59, v62);
            v51 = vmlaq_n_f64(v51, v59, v63);
            v27 = v25 - 5;
          }
          for (; v27; v27 -= 2)
          {
            v65 = *v47;
            v66 = v47[1];
            v64 = (float64x2_t *)((char *)v47 + v15);
            v67 = *v64;
            v68 = v64[1];
            v47 = (float64x2_t *)((char *)v64 + v15);
            v69 = *(float64x2_t *)v36;
            v36 += 2;
            v70 = *(float64x2_t *)v38;
            v38 += 2;
            v71 = *(float64x2_t *)v40;
            v40 += 2;
            v72 = *(float64x2_t *)v42;
            v42 += 2;
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v65, v69.f64[0]), v67, v69, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v65, v70.f64[0]), v67, v70, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v65, v71.f64[0]), v67, v71, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v65, v72.f64[0]), v67, v72, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v66, v69.f64[0]), v68, v69, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v66, v70.f64[0]), v68, v70, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v66, v71.f64[0]), v68, v71, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v66, v72.f64[0]), v68, v72, 1);
          }
          v73 = (float64x2_t *)((char *)v47 - v25 * v15);
          *v73 = vmulq_n_f64(v52, a7);
          v73[1] = vmulq_n_f64(v53, a7);
          v74 = (float64x2_t *)((char *)v73 + v15);
          *v74 = vmulq_n_f64(v54, a7);
          v74[1] = vmulq_n_f64(v55, a7);
          v75 = (float64x2_t *)((char *)v74 + v15);
          *v75 = vmulq_n_f64(v56, a7);
          v75[1] = vmulq_n_f64(v57, a7);
          v76 = (float64x2_t *)((char *)v75 + v15);
          *v76 = vmulq_n_f64(v50, a7);
          v76[1] = vmulq_n_f64(v51, a7);
          v23 += 4;
          v26 = (const double *)((char *)v26 + v19);
          v24 += 2 * __incX;
          v25 -= 4;
        }
        while (v23 < v14);
      }
      v77 = &v8[(unint64_t)v12 / 2].f64[v23 * __incX];
      v9 = a4;
      v78 = (double *)&a3[v23 * a4 + v23];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v79 = a7;
        v81 = v97;
        v80 = v98;
        v82 = v96;
LABEL_20:
        v85 = v77[1];
        *v77 = v79 * (v77[__incX] * v78[1] + *v77 * *v78);
        v77[1] = v79 * (v77[v80] * v78[1] + v85 * *v78);
        v86 = v77[3];
        v77[2] = v79 * (v77[v81] * v78[1] + v77[2] * *v78);
        v77[3] = v79 * (v77[v82] * v78[1] + v86 * *v78);
        v78 += v17;
        v77 += __incX;
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v79 = a7;
LABEL_21:
        v87 = v77[1];
        *v77 = v79 * (*v77 * *v78);
        v77[1] = v79 * (v87 * *v78);
        v88 = v77[3];
        v77[2] = v79 * (v77[2] * *v78);
        v77[3] = v79 * (v88 * *v78);
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v79 = a7;
    v83 = v77[1];
    *v77 = a7 * (v77[__incX] * v78[1] + *v77 * *v78 + v77[v95] * v78[2]);
    v80 = v98;
    v77[1] = a7 * (v77[v98] * v78[1] + v83 * *v78 + v77[v94] * v78[2]);
    v81 = v97;
    v84 = v77[3];
    v77[2] = a7 * (v77[v97] * v78[1] + v77[2] * *v78 + v77[v93] * v78[2]);
    v82 = v96;
    v77[3] = a7 * (v77[v96] * v78[1] + v84 * *v78 + v77[v92] * v78[2]);
    v78 += v17;
    v77 += __incX;
    goto LABEL_20;
  }
LABEL_23:
  v89 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(__N, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasNonUnit, __N, a3, v9, f64++, __incX);
      --v89;
    }
    while (v89);
  }
}

void sub_20E84B694(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, float64x2_t *a5, uint64_t __incX, double a7)
{
  float64x2_t *v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  float64x2_t *v24;
  uint64_t v25;
  const double *v26;
  float64x2_t *v27;
  uint64_t v28;
  double v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double *v35;
  float64x2_t v36;
  double *v37;
  float64x2_t v38;
  double *v39;
  double v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t v83;
  double *f64;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v8 = a5;
  v9 = a4;
  v12 = 0;
  if (a1 >= 4)
  {
    v13 = a1 - 3;
    v14 = __N - 3;
    v15 = 8 * __incX;
    v16 = __N & 3;
    if (__N <= 0)
      v16 = -(-__N & 3);
    v89 = (2 * __incX) | 1;
    v90 = __incX;
    v91 = __incX + 2;
    v92 = __incX + 1;
    v17 = __incX + 3;
    v87 = 2 * __incX + 3;
    v88 = 2 * __incX + 2;
    v86 = a4 + 1;
    v18 = 24 * a4 + 32;
    v19 = 32 * a4 + 32;
    v20 = 16 * a4 + 24;
    v21 = 8 * a4 + 16;
    while (1)
    {
      if (__N < 4)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v24 = a5;
        v25 = __N;
        v26 = a3;
        do
        {
          v27 = (float64x2_t *)((char *)v26 + v18);
          v28 = v25 - 4;
          v29 = v26[1];
          v31 = *(float64x2_t *)((char *)v24 + 8 * __incX);
          v32 = *(float64x2_t *)((char *)v24 + v15 + 16);
          v30 = (float64x2_t *)((char *)v24 + v15 + v15);
          v33 = vmlaq_n_f64(*v24, v31, v29);
          v34 = vmlaq_n_f64(v24[1], v32, v29);
          v36 = *(float64x2_t *)(v26 + 2);
          v35 = (double *)(v26 + 4);
          v38 = *(float64x2_t *)((char *)v26 + v21);
          v37 = (double *)((char *)v26 + v21 + 16);
          v40 = *(const double *)((char *)v26 + v20);
          v39 = (double *)((char *)v26 + v20 + 8);
          v42 = *v30;
          v43 = v30[1];
          v41 = (float64x2_t *)((char *)v30 + v15);
          v45 = *v41;
          v46 = v41[1];
          v44 = (float64x2_t *)((char *)v41 + v15);
          v47 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v42, v36.f64[0]), v45, v36, 1);
          v48 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v43, v36.f64[0]), v46, v36, 1);
          v49 = vmlaq_laneq_f64(vmlaq_n_f64(v31, v42, v38.f64[0]), v45, v38, 1);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v43, v38.f64[0]), v46, v38, 1);
          v51 = vmlaq_n_f64(v42, v45, v40);
          v52 = vmlaq_n_f64(v43, v46, v40);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v53 = *v44;
            v54 = v44[1];
            v44 = (float64x2_t *)((char *)v44 + v15);
            v55 = *v35;
            v35 = (double *)(v26 + 5);
            v56 = *v37;
            v37 = (double *)((char *)v26 + v21 + 24);
            v57 = *v39;
            v39 = (double *)((char *)v26 + v20 + 16);
            v58 = v27->f64[0];
            v27 = (float64x2_t *)((char *)v27 + 8);
            v47 = vmlaq_n_f64(v47, v53, v55);
            v49 = vmlaq_n_f64(v49, v53, v56);
            v51 = vmlaq_n_f64(v51, v53, v57);
            v45 = vmlaq_n_f64(v45, v53, v58);
            v48 = vmlaq_n_f64(v48, v54, v55);
            v50 = vmlaq_n_f64(v50, v54, v56);
            v52 = vmlaq_n_f64(v52, v54, v57);
            v46 = vmlaq_n_f64(v46, v54, v58);
            v28 = v25 - 5;
          }
          for (; v28; v28 -= 2)
          {
            v60 = *v44;
            v61 = v44[1];
            v59 = (float64x2_t *)((char *)v44 + v15);
            v62 = *v59;
            v63 = v59[1];
            v44 = (float64x2_t *)((char *)v59 + v15);
            v64 = *(float64x2_t *)v35;
            v35 += 2;
            v65 = *(float64x2_t *)v37;
            v37 += 2;
            v66 = *(float64x2_t *)v39;
            v39 += 2;
            v67 = *v27++;
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v60, v64.f64[0]), v62, v64, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v60, v65.f64[0]), v62, v65, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v60, v66.f64[0]), v62, v66, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v60, v67.f64[0]), v62, v67, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v61, v64.f64[0]), v63, v64, 1);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v61, v65.f64[0]), v63, v65, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v61, v66.f64[0]), v63, v66, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v61, v67.f64[0]), v63, v67, 1);
          }
          v68 = (float64x2_t *)((char *)v44 - v25 * v15);
          *v68 = vmulq_n_f64(v47, a7);
          v68[1] = vmulq_n_f64(v48, a7);
          v69 = (float64x2_t *)((char *)v68 + v15);
          *v69 = vmulq_n_f64(v49, a7);
          v69[1] = vmulq_n_f64(v50, a7);
          v70 = (float64x2_t *)((char *)v69 + v15);
          *v70 = vmulq_n_f64(v51, a7);
          v70[1] = vmulq_n_f64(v52, a7);
          v71 = (float64x2_t *)((char *)v70 + v15);
          *v71 = vmulq_n_f64(v45, a7);
          v71[1] = vmulq_n_f64(v46, a7);
          v23 += 4;
          v26 = (const double *)((char *)v26 + v19);
          v24 += 2 * __incX;
          v25 -= 4;
        }
        while (v23 < v14);
      }
      v72 = (float64x2_t *)((char *)&v8[(unint64_t)v12 / 2] + 8 * v23 * __incX);
      v9 = a4;
      v73 = (uint64_t)&a3[v23 * a4 + v23];
      if (v16 == 3)
        break;
      if (v16 == 2)
      {
        v74 = a7;
        v75 = v91;
        v76 = v92;
LABEL_20:
        v79 = v72->f64[1];
        v72->f64[0] = v74 * (v72->f64[0] + v72->f64[__incX] * *(double *)(v73 + 8));
        v72->f64[1] = v74 * (v79 + v72->f64[v76] * *(double *)(v73 + 8));
        v80 = v72[1].f64[1];
        v72[1].f64[0] = v74 * (v72[1].f64[0] + v72->f64[v75] * *(double *)(v73 + 8));
        v72[1].f64[1] = v74 * (v80 + v72->f64[v17] * *(double *)(v73 + 8));
        v72 = (float64x2_t *)((char *)v72 + 8 * __incX);
        goto LABEL_21;
      }
      if (v16 == 1)
      {
        v74 = a7;
LABEL_21:
        v81 = vmulq_n_f64(*v72, v74);
        v82 = vmulq_n_f64(v72[1], v74);
        *v72 = v81;
        v72[1] = v82;
      }
      v12 += 4;
      a5 += 2;
      if (v12 >= v13)
        goto LABEL_23;
    }
    v74 = a7;
    v77 = v72->f64[1];
    v72->f64[0] = a7 * (v72->f64[0] + v72->f64[__incX] * *(double *)(v73 + 8) + v72[v90].f64[0] * *(double *)(v73 + 16));
    v76 = v92;
    v72->f64[1] = a7 * (v77 + v72->f64[v92] * *(double *)(v73 + 8) + v72->f64[v89] * *(double *)(v73 + 16));
    v75 = v91;
    v78 = v72[1].f64[1];
    v72[1].f64[0] = a7 * (v72[1].f64[0] + v72->f64[v91] * *(double *)(v73 + 8) + v72->f64[v88] * *(double *)(v73 + 16));
    v72[1].f64[1] = a7 * (v78 + v72->f64[v17] * *(double *)(v73 + 8) + v72->f64[v87] * *(double *)(v73 + 16));
    v73 += 8 * v86;
    v72 = (float64x2_t *)((char *)v72 + 8 * __incX);
    goto LABEL_20;
  }
LABEL_23:
  v83 = a1 - v12;
  if (a1 > v12)
  {
    f64 = v8[(unint64_t)v12 / 2].f64;
    do
    {
      cblas_dscal(__N, a7, f64, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasUnit, __N, a3, v9, f64++, __incX);
      --v83;
    }
    while (v83);
  }
}

void sub_20E84BAC0(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  BOOL v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  double *v81;
  uint64_t v83;

  v11 = 0;
  if (a1 >= 4)
  {
    v12 = a1 - 3;
    v13 = 8 * __incX;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v16 = __incX + 1;
    v17 = __incX + 2;
    v83 = 2 * __incX + 2;
    v18 = __incX + 3;
    v19 = 2 * __incX + 3;
    v20 = (uint64_t)&a3[a4 * (__N - 4) - 4 + __N];
    v21 = (float64x2_t *)(a5 + 8 * __incX * (__N - 4));
    while (1)
    {
      v22 = __N;
      if (__N >= 4)
      {
        v23 = v21;
        v24 = (float64x2_t *)v20;
        v25 = __N;
        do
        {
          v22 = v25 - 4;
          v26 = v25 - 4;
          v27 = v24[1];
          v28 = *(float64x2_t *)((char *)v24 + 8 * a4);
          v29 = *(float64x2_t *)((char *)v24 + v14 + 16);
          v30 = (float64x2_t *)((char *)v24 + v14 + v14 + 16);
          v31 = v23[1];
          v33 = *(float64x2_t *)((char *)v23 + 8 * __incX);
          v34 = *(float64x2_t *)((char *)v23 + v13 + 16);
          v32 = (float64x2_t *)((char *)v23 + v13 + v13);
          v35 = vmulq_n_f64(*v23, v24->f64[0]);
          v36 = vmulq_n_f64(v31, v24->f64[0]);
          v37 = vmlaq_laneq_f64(vmulq_laneq_f64(*v23, *v24, 1), v33, v28, 1);
          v38 = vmlaq_laneq_f64(vmulq_laneq_f64(v31, *v24, 1), v34, v28, 1);
          v39 = vmlaq_n_f64(vmulq_n_f64(*v23, v27.f64[0]), v33, v29.f64[0]);
          v40 = vmlaq_n_f64(vmulq_n_f64(v31, v27.f64[0]), v34, v29.f64[0]);
          v41 = vmlaq_laneq_f64(vmulq_laneq_f64(*v23, v27, 1), v33, v29, 1);
          v42 = vmlaq_laneq_f64(vmulq_laneq_f64(v31, v27, 1), v34, v29, 1);
          v43 = *(float64x2_t *)((char *)v30 + 8 * a4);
          v45 = *v32;
          v46 = v32[1];
          v44 = (float64x2_t *)((char *)v32 + v13);
          v47 = (float64x2_t *)((char *)v24 - (v25 - 4) * v14);
          v48 = *v44;
          v49 = v44[1];
          v50 = vmlaq_n_f64(v39, v45, v30->f64[0]);
          v51 = vmlaq_n_f64(v40, v46, v30->f64[0]);
          v52 = (float64x2_t *)((char *)v44 + 8 * __incX - (v25 - 4) * v13 + -32 * __incX);
          v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v45, *v30, 1), v48, v43, 1);
          v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v42, v46, *v30, 1), v49, v43, 1);
          if ((((_DWORD)v25 - 4) & 1) != 0)
          {
            v55 = *v52;
            v56 = v52[1];
            v52 = (float64x2_t *)((char *)v52 + v13);
            v57 = *v47;
            v58 = v47[1];
            v47 = (float64x2_t *)((char *)v47 + v14);
            v35 = vmlaq_n_f64(v35, v55, v57.f64[0]);
            v37 = vmlaq_laneq_f64(v37, v55, v57, 1);
            v50 = vmlaq_n_f64(v50, v55, v58.f64[0]);
            v53 = vmlaq_laneq_f64(v53, v55, v58, 1);
            v36 = vmlaq_n_f64(v36, v56, v57.f64[0]);
            v38 = vmlaq_laneq_f64(v38, v56, v57, 1);
            v51 = vmlaq_n_f64(v51, v56, v58.f64[0]);
            v54 = vmlaq_laneq_f64(v54, v56, v58, 1);
            v26 = v25 - 5;
          }
          for (; v26; v26 -= 2)
          {
            v60 = *v52;
            v61 = v52[1];
            v59 = (float64x2_t *)((char *)v52 + v13);
            v62 = *v59;
            v63 = v59[1];
            v52 = (float64x2_t *)((char *)v59 + v13);
            v65 = *v47;
            v66 = v47[1];
            v64 = (float64x2_t *)((char *)v47 + v14);
            v67 = *v64;
            v68 = v64[1];
            v47 = (float64x2_t *)((char *)v64 + v14);
            v35 = vmlaq_n_f64(vmlaq_n_f64(v35, v60, v65.f64[0]), v62, v67.f64[0]);
            v37 = vmlaq_laneq_f64(vmlaq_laneq_f64(v37, v60, v65, 1), v62, v67, 1);
            v50 = vmlaq_n_f64(vmlaq_n_f64(v50, v60, v66.f64[0]), v62, v68.f64[0]);
            v53 = vmlaq_laneq_f64(vmlaq_laneq_f64(v53, v60, v66, 1), v62, v68, 1);
            v36 = vmlaq_n_f64(vmlaq_n_f64(v36, v61, v65.f64[0]), v63, v67.f64[0]);
            v38 = vmlaq_laneq_f64(vmlaq_laneq_f64(v38, v61, v65, 1), v63, v67, 1);
            v51 = vmlaq_n_f64(vmlaq_n_f64(v51, v61, v66.f64[0]), v63, v68.f64[0]);
            v54 = vmlaq_laneq_f64(vmlaq_laneq_f64(v54, v61, v66, 1), v63, v68, 1);
          }
          *v52 = vmulq_n_f64(v35, a7);
          v52[1] = vmulq_n_f64(v36, a7);
          v69 = (float64x2_t *)((char *)v52 + v13);
          *v69 = vmulq_n_f64(v37, a7);
          v69[1] = vmulq_n_f64(v38, a7);
          v70 = (float64x2_t *)((char *)v69 + v13);
          *v70 = vmulq_n_f64(v50, a7);
          v70[1] = vmulq_n_f64(v51, a7);
          v71 = (float64x2_t *)((char *)v70 + v13);
          *v71 = vmulq_n_f64(v53, a7);
          v71[1] = vmulq_n_f64(v54, a7);
          v24 += 2 * ~a4;
          v23 -= 2 * __incX;
          v72 = v25 > 7;
          v25 -= 4;
        }
        while (v72);
      }
      v73 = (double *)(a5 + 8 * v11);
      v74 = (double *)&a3[v22 - 1];
      if (v15 == 3)
        break;
      if (v15 == 2)
      {
        v75 = a7;
LABEL_18:
        v73[__incX] = v75 * (v73[__incX] * v74[a4] + *v73 * *v74);
        v73[v16] = v75 * (v73[v16] * v74[a4] + v73[1] * *v74);
        v73[v17] = v75 * (v73[v17] * v74[a4] + v73[2] * *v74);
        v73[v18] = v75 * (v73[v18] * v74[a4] + v73[3] * *v74);
        --v74;
        goto LABEL_19;
      }
      if (v15 == 1)
      {
        v75 = a7;
LABEL_19:
        v78 = v73[1];
        *v73 = v75 * (*v73 * *v74);
        v73[1] = v75 * (v78 * *v74);
        v79 = v73[3];
        v73[2] = v75 * (v73[2] * *v74);
        v73[3] = v75 * (v79 * *v74);
      }
      v11 += 4;
      v21 += 2;
      if (v11 >= v12)
        goto LABEL_21;
    }
    v75 = a7;
    v76 = v73[1];
    v73[2 * __incX] = a7 * (v73[__incX] * v74[a4] + *v73 * *v74 + v73[2 * __incX] * v74[2 * a4]);
    v73[(2 * __incX) | 1] = a7 * (v73[v16] * v74[a4] + v76 * *v74 + v73[(2 * __incX) | 1] * v74[2 * a4]);
    v77 = v73[3];
    v73[v83] = a7 * (v73[v17] * v74[a4] + v73[2] * *v74 + v73[v83] * v74[2 * a4]);
    v73[v19] = a7 * (v73[v18] * v74[a4] + v77 * *v74 + v73[v19] * v74[2 * a4]);
    v74 = (double *)&a3[v22 - 2];
    goto LABEL_18;
  }
LABEL_21:
  v80 = a1 - v11;
  if (a1 > v11)
  {
    v81 = (double *)(a5 + 8 * v11);
    do
    {
      cblas_dscal(__N, a7, v81, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasNonUnit, __N, a3, a4, v81++, __incX);
      --v80;
    }
    while (v80);
  }
}

void sub_20E84BF3C(uint64_t a1, uint64_t __N, const double *a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  const double *v23;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  unint64_t v27;
  unint64_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t *v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t *v69;
  BOOL v70;
  float64x2_t *v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  double *v79;

  v11 = 0;
  if (a1 >= 4)
  {
    v12 = a1 - 3;
    v13 = 8 * __incX;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v16 = __incX + 1;
    v17 = __incX + 2;
    v18 = 2 * __incX + 2;
    v19 = __incX + 3;
    v20 = 2 * __incX + 3;
    v21 = (uint64_t)&a3[a4 * (__N - 4) - 4 + __N];
    v22 = (float64x2_t *)(a5 + 8 * __incX * (__N - 4));
    while (1)
    {
      v23 = a3;
      v24 = __N;
      if (__N >= 4)
      {
        v25 = v22;
        v26 = (float64x2_t *)v21;
        v27 = __N;
        do
        {
          v24 = v27 - 4;
          v28 = v27 - 4;
          v29 = v26[1];
          v30 = (float64x2_t *)((char *)v26 + v14 + 16);
          v31 = *v25;
          v32 = v25[1];
          v34 = *(float64x2_t *)((char *)v25 + 8 * __incX);
          v35 = *(float64x2_t *)((char *)v25 + v13 + 16);
          v33 = (float64x2_t *)((char *)v25 + v13 + v13);
          v36 = vmulq_n_f64(v34, v30->f64[0]);
          v37 = vmulq_n_f64(v35, v30->f64[0]);
          v38 = vmulq_laneq_f64(v34, *v30, 1);
          v39 = vmulq_laneq_f64(v35, *v30, 1);
          v40 = vmlaq_laneq_f64(v34, *v25, *v26, 1);
          v41 = vmlaq_laneq_f64(v35, v32, *v26, 1);
          v42 = v30->f64[(unint64_t)v14 / 8 + 1];
          v44 = *v33;
          v45 = v33[1];
          v43 = (float64x2_t *)((char *)v33 + v13);
          v46 = (float64x2_t *)((char *)v26 - (v27 - 4) * v14);
          v47 = vaddq_f64(vmlaq_n_f64(v36, *v25, v29.f64[0]), v44);
          v48 = vaddq_f64(vmlaq_n_f64(v37, v32, v29.f64[0]), v45);
          v49 = vaddq_f64(vmlaq_laneq_f64(v39, v32, v29, 1), v43[1]);
          v50 = vmlaq_n_f64(vaddq_f64(vmlaq_laneq_f64(v38, *v25, v29, 1), *v43), v44, v42);
          v51 = (float64x2_t *)((char *)v43 + 8 * __incX - (v27 - 4) * v13 + -32 * __incX);
          v52 = vmlaq_n_f64(v49, v45, v42);
          if ((((_DWORD)v27 - 4) & 1) != 0)
          {
            v53 = *v51;
            v54 = v51[1];
            v51 = (float64x2_t *)((char *)v51 + v13);
            v55 = *v46;
            v56 = v46[1];
            v46 = (float64x2_t *)((char *)v46 + v14);
            v31 = vmlaq_n_f64(v31, v53, v55.f64[0]);
            v40 = vmlaq_laneq_f64(v40, v53, v55, 1);
            v47 = vmlaq_n_f64(v47, v53, v56.f64[0]);
            v50 = vmlaq_laneq_f64(v50, v53, v56, 1);
            v32 = vmlaq_n_f64(v32, v54, v55.f64[0]);
            v41 = vmlaq_laneq_f64(v41, v54, v55, 1);
            v48 = vmlaq_n_f64(v48, v54, v56.f64[0]);
            v52 = vmlaq_laneq_f64(v52, v54, v56, 1);
            v28 = v27 - 5;
          }
          for (; v28; v28 -= 2)
          {
            v58 = *v51;
            v59 = v51[1];
            v57 = (float64x2_t *)((char *)v51 + v13);
            v60 = *v57;
            v61 = v57[1];
            v51 = (float64x2_t *)((char *)v57 + v13);
            v63 = *v46;
            v64 = v46[1];
            v62 = (float64x2_t *)((char *)v46 + v14);
            v65 = *v62;
            v66 = v62[1];
            v46 = (float64x2_t *)((char *)v62 + v14);
            v31 = vmlaq_n_f64(vmlaq_n_f64(v31, v58, v63.f64[0]), v60, v65.f64[0]);
            v40 = vmlaq_laneq_f64(vmlaq_laneq_f64(v40, v58, v63, 1), v60, v65, 1);
            v47 = vmlaq_n_f64(vmlaq_n_f64(v47, v58, v64.f64[0]), v60, v66.f64[0]);
            v50 = vmlaq_laneq_f64(vmlaq_laneq_f64(v50, v58, v64, 1), v60, v66, 1);
            v32 = vmlaq_n_f64(vmlaq_n_f64(v32, v59, v63.f64[0]), v61, v65.f64[0]);
            v41 = vmlaq_laneq_f64(vmlaq_laneq_f64(v41, v59, v63, 1), v61, v65, 1);
            v48 = vmlaq_n_f64(vmlaq_n_f64(v48, v59, v64.f64[0]), v61, v66.f64[0]);
            v52 = vmlaq_laneq_f64(vmlaq_laneq_f64(v52, v59, v64, 1), v61, v66, 1);
          }
          *v51 = vmulq_n_f64(v31, a7);
          v51[1] = vmulq_n_f64(v32, a7);
          v67 = (float64x2_t *)((char *)v51 + v13);
          *v67 = vmulq_n_f64(v40, a7);
          v67[1] = vmulq_n_f64(v41, a7);
          v68 = (float64x2_t *)((char *)v67 + v13);
          *v68 = vmulq_n_f64(v47, a7);
          v68[1] = vmulq_n_f64(v48, a7);
          v69 = (float64x2_t *)((char *)v68 + v13);
          *v69 = vmulq_n_f64(v50, a7);
          v69[1] = vmulq_n_f64(v52, a7);
          v26 += 2 * ~a4;
          v25 -= 2 * __incX;
          v70 = v27 > 7;
          v27 -= 4;
        }
        while (v70);
      }
      v71 = (float64x2_t *)(a5 + 8 * v11);
      a3 = v23;
      v72 = (double *)&v23[v24 - 1];
      if (v15 == 3)
        break;
      if (v15 == 2)
      {
        v73 = a7;
LABEL_18:
        v71->f64[__incX] = v73 * (v71->f64[__incX] + v71->f64[0] * *v72);
        v71->f64[v16] = v73 * (v71->f64[v16] + v71->f64[1] * *v72);
        v71->f64[v17] = v73 * (v71->f64[v17] + v71[1].f64[0] * *v72);
        v71->f64[v19] = v73 * (v71->f64[v19] + v71[1].f64[1] * *v72);
        goto LABEL_19;
      }
      if (v15 == 1)
      {
        v73 = a7;
LABEL_19:
        v76 = vmulq_n_f64(*v71, v73);
        v77 = vmulq_n_f64(v71[1], v73);
        *v71 = v76;
        v71[1] = v77;
      }
      v11 += 4;
      v22 += 2;
      if (v11 >= v12)
        goto LABEL_21;
    }
    v74 = v71->f64[1];
    v73 = a7;
    v71[__incX].f64[0] = a7 * (v71[__incX].f64[0] + v71->f64[__incX] * v72[a4] + v71->f64[0] * *v72);
    v71->f64[(2 * __incX) | 1] = a7 * (v71->f64[(2 * __incX) | 1] + v71->f64[v16] * v72[a4] + v74 * *v72);
    v75 = v71[1].f64[1];
    v71->f64[v18] = a7 * (v71->f64[v18] + v71->f64[v17] * v72[a4] + v71[1].f64[0] * *v72);
    v71->f64[v20] = a7 * (v71->f64[v20] + v71->f64[v19] * v72[a4] + v75 * *v72);
    v72 = (double *)&v23[v24 - 2];
    goto LABEL_18;
  }
LABEL_21:
  v78 = a1 - v11;
  if (a1 > v11)
  {
    v79 = (double *)(a5 + 8 * v11);
    do
    {
      cblas_dscal(__N, a7, v79, __incX);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasUnit, __N, a3, a4, v79++, __incX);
      --v78;
    }
    while (v78);
  }
}

void sub_20E84C338(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int64x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int8 *v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float v79;
  float v80;
  float v81;
  float *v93;
  float32_t v94;
  float32_t v95;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(float *)(a3 + 4);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * v11;
          *(v23 - 1) = v26;
          *v23 = (float)(v25 * v11) - (float)(v26 * v22);
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7, __X, __incX);
      v11 = a7;
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(float *)(a3 + 4);
    v15 = *(float *)(a3 + 8);
    v16 = *(float *)(a3 + 4 * a4 + 8);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * v11;
      v21 = (float)(*(v17 - 1) * v11) - (float)(v20 * v14);
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(float)((float)((float)(v16 * v21) + (float)(v20 * v15)) - (float)(*v17 * v11));
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = v18;
    while (1)
    {
      if (__N >= 4)
      {
        v29 = 0;
        v30 = (float32x4_t *)(a3 + 4 * v28);
        while (1)
        {
          v31 = (float32x4_t *)&__X[v29 * __incX];
          v32 = (float32x4_t *)&__X[(v29 | 1) * __incX];
          v33 = (float32x4_t *)&__X[(v29 | 2) * __incX];
          v34 = (float32x4_t *)&__X[(v29 | 3) * __incX];
          v35 = 0uLL;
          if ((v18 & 1) != 0)
          {
            v47 = v31->f32[0];
            v31 = (float32x4_t *)((char *)v31 + 4);
            v41 = vmlaq_n_f32((float32x4_t)0, *v30, v47);
            v48 = v32->f32[0];
            v32 = (float32x4_t *)((char *)v32 + 4);
            v38 = vmlaq_n_f32((float32x4_t)0, *v30, v48);
            v49 = v33->f32[0];
            v33 = (float32x4_t *)((char *)v33 + 4);
            v37 = vmlaq_n_f32((float32x4_t)0, *v30, v49);
            v50 = v34->f32[0];
            v34 = (float32x4_t *)((char *)v34 + 4);
            v36 = vmlaq_n_f32((float32x4_t)0, *v30, v50);
            v39 = v28 - 1;
            v40 = (float32x4_t *)((char *)v30 + 4 * a4);
            if (v28 != 1)
            {
LABEL_22:
              v42 = 0;
              v43 = 0uLL;
              v44 = 0uLL;
              v45 = 0uLL;
              do
              {
                v41 = vmlaq_n_f32(v41, *v40, v31->f32[v42]);
                v38 = vmlaq_n_f32(v38, *v40, v32->f32[v42]);
                v37 = vmlaq_n_f32(v37, *v40, v33->f32[v42]);
                v36 = vmlaq_n_f32(v36, *v40, v34->f32[v42]);
                v46 = *(float32x4_t *)((char *)v40 + 4 * a4);
                v43 = vmlaq_n_f32(v43, v46, v31->f32[v42 + 1]);
                v44 = vmlaq_n_f32(v44, v46, v32->f32[v42 + 1]);
                v45 = vmlaq_n_f32(v45, v46, v33->f32[v42 + 1]);
                v35 = vmlaq_n_f32(v35, v46, v34->f32[v42 + 1]);
                v40 = (float32x4_t *)((char *)v40 + v27);
                v42 += 2;
                v39 -= 2;
              }
              while (v39);
              v31 = (float32x4_t *)((char *)v31 + v42 * 4);
              v32 = (float32x4_t *)((char *)v32 + v42 * 4);
              v33 = (float32x4_t *)((char *)v33 + v42 * 4);
              v34 = (float32x4_t *)((char *)v34 + v42 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v36 = 0uLL;
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v28;
            v40 = (float32x4_t *)(a3 + 4 * v28);
            v41 = 0uLL;
            if (v28)
              goto LABEL_22;
          }
          v45 = 0uLL;
          v44 = 0uLL;
          v43 = 0uLL;
LABEL_27:
          v51 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v31, v11), vaddq_f32(v43, v41));
          v52 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v32, v11), vaddq_f32(v44, v38));
          v53 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v33, v11), vaddq_f32(v45, v37));
          v54 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v34, v11), vaddq_f32(v35, v36));
          v55 = (int32x4_t)vzip1q_s64(v51, v53);
          v56 = (int32x4_t)vzip1q_s64(v52, v54);
          v57 = (int32x4_t)vzip2q_s64(v51, v53);
          v58 = (int32x4_t)vzip2q_s64(v52, v54);
          v59 = (int64x2_t)vtrn1q_s32(v55, v56);
          v60 = (float32x4_t)vtrn2q_s32(v55, v56);
          v61 = (float32x4_t)vtrn1q_s32(v57, v58);
          v62 = (float32x4_t)vtrn2q_s32(v57, v58);
          v57.i32[0] = v40->i32[1];
          v56.i32[0] = v40->i32[2];
          v63 = (int64x2_t)vmlsq_lane_f32(v60, (float32x4_t)v59, *(float32x2_t *)v57.i8, 0);
          v64 = vmlsq_lane_f32(v61, (float32x4_t)v59, *(float32x2_t *)v56.i8, 0);
          v57.i32[0] = v40->i32[3];
          v65 = vmlsq_lane_f32(v62, (float32x4_t)v59, *(float32x2_t *)v57.i8, 0);
          v66 = &v40->i8[4 * a4];
          v57.i32[0] = *((_DWORD *)v66 + 2);
          v56.i32[0] = *((_DWORD *)v66 + 3);
          v67 = (int64x2_t)vmlsq_lane_f32(v64, (float32x4_t)v63, *(float32x2_t *)v57.i8, 0);
          v57.i32[0] = *(_DWORD *)&v66[4 * a4 + 12];
          v68 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v65, (float32x4_t)v63, *(float32x2_t *)v56.i8, 0), (float32x4_t)v67, *(float32x2_t *)v57.i8, 0);
          v69 = (int32x4_t)vzip1q_s64(v59, v67);
          v70 = (int32x4_t)vzip1q_s64(v63, v68);
          v71 = (int32x4_t)vzip2q_s64(v59, v67);
          v72 = (int32x4_t)vzip2q_s64(v63, v68);
          *(int32x4_t *)v31 = vtrn1q_s32(v69, v70);
          *(int32x4_t *)v32 = vtrn2q_s32(v69, v70);
          *(int32x4_t *)v33 = vtrn1q_s32(v71, v72);
          *(int32x4_t *)v34 = vtrn2q_s32(v71, v72);
          v29 += 4;
          if (v29 >= __N - 3)
            goto LABEL_30;
        }
      }
      v29 = 0;
LABEL_30:
      if (v29 < __N)
        break;
LABEL_38:
      v28 += 4;
      if (v28 >= a1)
        return;
    }
    v73 = (float32x4_t *)(a3 + 4 * v28);
    while (1)
    {
      v74 = (float32x4_t *)&__X[v29 * __incX];
      v75 = 0uLL;
      if ((v18 & 1) != 0)
      {
        v79 = v74->f32[0];
        v74 = (float32x4_t *)((char *)v74 + 4);
        v76 = vmlaq_n_f32((float32x4_t)0, *v73, v79);
        v77 = v28 - 1;
        v78 = (float32x4_t *)((char *)v73 + 4 * a4);
        if (v28 != 1)
        {
          do
          {
LABEL_36:
            v80 = v74->f32[0];
            v81 = v74->f32[1];
            v74 = (float32x4_t *)((char *)v74 + 8);
            v76 = vmlaq_n_f32(v76, *v78, v80);
            v75 = vmlaq_n_f32(v75, *(float32x4_t *)((char *)v78 + 4 * a4), v81);
            v78 = (float32x4_t *)((char *)v78 + v27);
            v77 -= 2;
          }
          while (v77);
        }
      }
      else
      {
        v76 = 0uLL;
        v77 = v28;
        v78 = (float32x4_t *)(a3 + 4 * v28);
        if (v28)
          goto LABEL_36;
      }
      _S0 = vsubq_f32(vmulq_n_f32(*v74, v11), vaddq_f32(v75, v76)).u32[0];
      _S4 = v78->i32[1];
      _S5 = v78->i32[2];
      __asm
      {
        FMLS            S3, S4, V0.S[0]
        FMLS            S2, S5, V0.S[0]
      }
      _S4 = v78->i32[3];
      __asm { FMLS            S1, S4, V0.S[0] }
      v93 = &v78->f32[a4];
      v94 = _S2 - (float)(_S3 * v93[2]);
      v95 = (float)(_S1 - (float)(_S3 * v93[3])) - (float)(v94 * v93[a4 + 3]);
      v74->i32[0] = _S0;
      v74->f32[1] = _S3;
      v74->f32[2] = v94;
      v74->f32[3] = v95;
      if (++v29 == __N)
        goto LABEL_38;
    }
  }
}

void sub_20E84C774(uint64_t a1, uint64_t __N, float *a3, uint64_t a4, float *__X, uint64_t __incX, float a7)
{
  float v11;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int64x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __int8 *v78;
  int64x2_t v79;
  float32x4_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t *v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t v92;
  float v93;
  float v94;
  float v95;
  float32x4_t v96;
  float v97;
  float v98;
  float v99;
  float *v100;
  float32_t v101;
  float32_t v102;
  float32_t v103;

  v11 = a7;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = v11 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (float)((float)(v31 * v11) - (float)(v32 * v26));
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_sscal(__N, a7 / *a3, __X, __incX);
      v11 = a7;
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = v11 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (float)((float)(*(v20 - 1) * v11) - (float)(v24 * v15));
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *v20 = v23 * (float)-(float)((float)((float)(v18 * v25) + (float)(v24 * v14)) - (float)(*v20 * v11));
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = a4 + 1;
    v34 = 8 * a4;
    v35 = v21;
    while (1)
    {
      v36 = 1.0 / a3[v35 * v33];
      v37 = 1.0 / a3[v33 + v35 * v33];
      v38 = 1.0 / a3[(v35 + 2) * v33];
      v39 = 1.0 / a3[(v35 + 3) * v33];
      if (__N >= 4)
      {
        v40 = 0;
        v41 = (float32x4_t *)&a3[v35];
        while (1)
        {
          v42 = (float32x4_t *)&__X[v40 * __incX];
          v43 = (float32x4_t *)&__X[(v40 | 1) * __incX];
          v44 = (float32x4_t *)&__X[(v40 | 2) * __incX];
          v45 = (float32x4_t *)&__X[(v40 | 3) * __incX];
          v46 = 0uLL;
          if ((v21 & 1) != 0)
          {
            v58 = v42->f32[0];
            v42 = (float32x4_t *)((char *)v42 + 4);
            v52 = vmlaq_n_f32((float32x4_t)0, *v41, v58);
            v59 = v43->f32[0];
            v43 = (float32x4_t *)((char *)v43 + 4);
            v49 = vmlaq_n_f32((float32x4_t)0, *v41, v59);
            v60 = v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4);
            v48 = vmlaq_n_f32((float32x4_t)0, *v41, v60);
            v61 = v45->f32[0];
            v45 = (float32x4_t *)((char *)v45 + 4);
            v47 = vmlaq_n_f32((float32x4_t)0, *v41, v61);
            v50 = v35 - 1;
            v51 = (float32x4_t *)((char *)v41 + 4 * a4);
            if (v35 != 1)
            {
LABEL_22:
              v53 = 0;
              v54 = 0uLL;
              v55 = 0uLL;
              v56 = 0uLL;
              do
              {
                v52 = vmlaq_n_f32(v52, *v51, v42->f32[v53]);
                v49 = vmlaq_n_f32(v49, *v51, v43->f32[v53]);
                v48 = vmlaq_n_f32(v48, *v51, v44->f32[v53]);
                v47 = vmlaq_n_f32(v47, *v51, v45->f32[v53]);
                v57 = *(float32x4_t *)((char *)v51 + 4 * a4);
                v54 = vmlaq_n_f32(v54, v57, v42->f32[v53 + 1]);
                v55 = vmlaq_n_f32(v55, v57, v43->f32[v53 + 1]);
                v56 = vmlaq_n_f32(v56, v57, v44->f32[v53 + 1]);
                v46 = vmlaq_n_f32(v46, v57, v45->f32[v53 + 1]);
                v51 = (float32x4_t *)((char *)v51 + v34);
                v53 += 2;
                v50 -= 2;
              }
              while (v50);
              v42 = (float32x4_t *)((char *)v42 + v53 * 4);
              v43 = (float32x4_t *)((char *)v43 + v53 * 4);
              v44 = (float32x4_t *)((char *)v44 + v53 * 4);
              v45 = (float32x4_t *)((char *)v45 + v53 * 4);
              goto LABEL_27;
            }
          }
          else
          {
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = v35;
            v51 = (float32x4_t *)&a3[v35];
            v52 = 0uLL;
            if (v35)
              goto LABEL_22;
          }
          v56 = 0uLL;
          v55 = 0uLL;
          v54 = 0uLL;
LABEL_27:
          v62 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v42, v11), vaddq_f32(v54, v52));
          v63 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v43, v11), vaddq_f32(v55, v49));
          v64 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v44, v11), vaddq_f32(v56, v48));
          v65 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v45, v11), vaddq_f32(v46, v47));
          v66 = (int32x4_t)vzip1q_s64(v62, v64);
          v67 = (int32x4_t)vzip1q_s64(v63, v65);
          v68 = (int32x4_t)vzip2q_s64(v62, v64);
          v69 = (int32x4_t)vzip2q_s64(v63, v65);
          v70 = (float32x4_t)vtrn1q_s32(v66, v67);
          v71 = (float32x4_t)vtrn2q_s32(v66, v67);
          v72 = (float32x4_t)vtrn1q_s32(v68, v69);
          v73 = (float32x4_t)vtrn2q_s32(v68, v69);
          v74 = (int64x2_t)vmulq_n_f32(v70, v36);
          v68.i32[0] = v51->i32[1];
          v67.i32[0] = v51->i32[2];
          v75 = vmlsq_lane_f32(v71, (float32x4_t)v74, *(float32x2_t *)v68.i8, 0);
          v76 = vmlsq_lane_f32(v72, (float32x4_t)v74, *(float32x2_t *)v67.i8, 0);
          v68.i32[0] = v51->i32[3];
          v77 = vmlsq_lane_f32(v73, (float32x4_t)v74, *(float32x2_t *)v68.i8, 0);
          v78 = &v51->i8[4 * a4];
          v79 = (int64x2_t)vmulq_n_f32(v75, v37);
          v75.i32[0] = *((_DWORD *)v78 + 2);
          v67.i32[0] = *((_DWORD *)v78 + 3);
          v80 = vmlsq_lane_f32(v76, (float32x4_t)v79, *(float32x2_t *)v75.f32, 0);
          v81 = (int64x2_t)vmulq_n_f32(v80, v38);
          v80.i32[0] = *(_DWORD *)&v78[4 * a4 + 12];
          v82 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v77, (float32x4_t)v79, *(float32x2_t *)v67.i8, 0), (float32x4_t)v81, *(float32x2_t *)v80.f32, 0), v39);
          v83 = (int32x4_t)vzip1q_s64(v74, v81);
          v84 = (int32x4_t)vzip1q_s64(v79, v82);
          v85 = (int32x4_t)vzip2q_s64(v74, v81);
          v86 = (int32x4_t)vzip2q_s64(v79, v82);
          *(int32x4_t *)v42 = vtrn1q_s32(v83, v84);
          *(int32x4_t *)v43 = vtrn2q_s32(v83, v84);
          *(int32x4_t *)v44 = vtrn1q_s32(v85, v86);
          *(int32x4_t *)v45 = vtrn2q_s32(v85, v86);
          v40 += 4;
          if (v40 >= __N - 3)
            goto LABEL_30;
        }
      }
      v40 = 0;
LABEL_30:
      if (v40 < __N)
        break;
LABEL_38:
      v35 += 4;
      if (v35 >= a1)
        return;
    }
    v87 = (float32x4_t *)&a3[v35];
    while (1)
    {
      v88 = (float32x4_t *)&__X[v40 * __incX];
      v89 = 0uLL;
      if ((v21 & 1) != 0)
      {
        v93 = v88->f32[0];
        v88 = (float32x4_t *)((char *)v88 + 4);
        v92 = vmlaq_n_f32((float32x4_t)0, *v87, v93);
        v90 = (float32x4_t *)((char *)v87 + 4 * a4);
        v91 = v35 - 1;
        if (v35 != 1)
        {
          do
          {
LABEL_36:
            v94 = v88->f32[0];
            v95 = v88->f32[1];
            v88 = (float32x4_t *)((char *)v88 + 8);
            v92 = vmlaq_n_f32(v92, *v90, v94);
            v89 = vmlaq_n_f32(v89, *(float32x4_t *)((char *)v90 + 4 * a4), v95);
            v90 = (float32x4_t *)((char *)v90 + v34);
            v91 -= 2;
          }
          while (v91);
        }
      }
      else
      {
        v90 = (float32x4_t *)&a3[v35];
        v91 = v35;
        v92 = 0uLL;
        if (v35)
          goto LABEL_36;
      }
      v96 = vsubq_f32(vmulq_n_f32(*v88, v11), vaddq_f32(v92, v89));
      v96.f32[0] = v36 * v96.f32[0];
      v97 = v96.f32[1] - (float)(v96.f32[0] * v90->f32[1]);
      v98 = v96.f32[2] - (float)(v96.f32[0] * v90->f32[2]);
      v99 = v96.f32[3] - (float)(v96.f32[0] * v90->f32[3]);
      v100 = &v90->f32[a4];
      v101 = v37 * v97;
      v102 = v38 * (float)(v98 - (float)(v101 * v100[2]));
      v103 = v39 * (float)((float)(v99 - (float)(v101 * v100[3])) - (float)(v102 * v100[a4 + 3]));
      v88->i32[0] = v96.i32[0];
      v88->f32[1] = v101;
      v88->f32[2] = v102;
      v88->f32[3] = v103;
      if (++v40 == __N)
        goto LABEL_38;
    }
  }
}

uint64_t sub_20E84CC58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  __int32 *v30;
  uint64_t v31;
  uint64_t v32;
  __int32 *v33;
  uint64_t v34;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int32 *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  float *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  float32x4_t v56;
  uint64_t *v57;
  uint64_t *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float32x4_t *v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t *v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int64x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  __int32 *v112;
  uint64_t v113;
  uint64_t v114;
  __int32 *v115;
  uint64_t v116;
  uint64_t v117;
  __int32 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int32 *v122;
  uint64_t v123;
  float *v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  float32x4_t v132;
  __int32 v133;
  uint64_t v134;
  int32x4_t v135;
  uint64_t v136;
  int32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float v143;
  float32x4_t *v144;
  float32_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v19 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v20 = (float *)(a5 + 4 * v7);
        v21 = a2;
        do
        {
          v22 = *(v20 - 1);
          v23 = *v20 * a7;
          *v20 = v23;
          *(v20 - 1) = (float)(v22 * a7) - (float)(v23 * v19);
          v20 += a6;
          --v21;
        }
        while (v21);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v17 = a2;
        v18 = (float *)(a5 + 4 * v7);
        do
        {
          *v18 = *v18 * a7;
          v18 += a6;
          --v17;
        }
        while (v17);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = *(float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v11 = *(v9 - 1);
      v10 = *v9;
      v12 = (float *)(a5 + 4 * v7);
      v13 = a2;
      do
      {
        v14 = *(v12 - 1);
        v15 = *v12 * a7;
        *v12 = v15;
        v16 = (float)(v14 * a7) - (float)(v15 * v8);
        *(v12 - 2) = -(float)((float)((float)(v11 * v16) + (float)(v15 * v10)) - (float)(*(v12 - 2) * a7));
        *(v12 - 1) = v16;
        v12 += a6;
        --v13;
      }
      while (v13);
    }
    v7 = result - 4;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v24 = v7 + 1;
    v25 = a2 - 3;
    v158 = result;
    v159 = a2;
    while (1)
    {
      v26 = v24 - 4;
      if (a2 >= 4)
      {
        v27 = 0;
        v28 = a3 + 4 * v26 * a4;
        v29 = (_DWORD *)(v28 + 4 * v26);
        v30 = (__int32 *)(v28 + 4 * v24);
        v31 = a3 + 4 * (v24 - 3) * a4;
        v32 = v31 + 4 * v26;
        v33 = (__int32 *)(v31 + 4 * v24);
        v34 = a3 + 4 * (v24 - 2) * a4;
        v35 = v34 + 4 * v26;
        v36 = (__int32 *)(v34 + 4 * v24);
        v37 = a3 + 4 * (v24 - 1) * a4;
        if (result - v26 <= 4)
          v38 = 4;
        else
          v38 = result - v26;
        v39 = v37 + 4 * v26 + 20;
        v40 = (__int32 *)(v37 + 4 * v24);
        while (1)
        {
          v41 = a5 + 4 * v27 * a6;
          v42 = (float *)(v41 + 4 * v24);
          v43 = a5 + 4 * (v27 | 1) * a6;
          v44 = (float *)(v43 + 4 * v24);
          v45 = a5 + 4 * (v27 | 2) * a6;
          v46 = (float *)(v45 + 4 * v24);
          v47 = a5 + 4 * (v27 | 3) * a6;
          v48 = (float *)(v47 + 4 * v24);
          v49 = 0uLL;
          if ((v38 & 1) != 0)
          {
            v79.i32[0] = *v30;
            v79.i32[1] = *v33;
            v79.i32[2] = *v36;
            v79.i32[3] = *v40;
            v80 = *v42++;
            v56 = vmlaq_n_f32((float32x4_t)0, v79, v80);
            v81 = *v44++;
            v82 = v81;
            v83 = *v46++;
            v52 = vmlaq_n_f32((float32x4_t)0, v79, v82);
            v51 = vmlaq_n_f32((float32x4_t)0, v79, v83);
            v84 = *v48++;
            v53 = v38 - 5;
            v50 = vmlaq_n_f32((float32x4_t)0, v79, v84);
            v54 = (uint64_t *)v39;
            v55 = (uint64_t *)(v36 + 1);
            v57 = (uint64_t *)(v33 + 1);
            v58 = (uint64_t *)(v30 + 1);
            if (v38 != 5)
            {
LABEL_25:
              v59 = 0uLL;
              v60 = 0uLL;
              v61 = 0uLL;
              do
              {
                v62 = *v58++;
                v63.i64[0] = v62;
                v64 = *v57++;
                v65.i64[0] = v64;
                v66 = *v55++;
                v67 = v66;
                v68 = *v54++;
                v63.i64[1] = v67;
                v65.i64[1] = v68;
                v69 = (float32x4_t)vtrn1q_s32(v63, v65);
                v70 = *v42;
                v71 = v42[1];
                v42 += 2;
                v56 = vmlaq_n_f32(v56, v69, v70);
                v72 = *v44;
                v73 = v44[1];
                v44 += 2;
                v52 = vmlaq_n_f32(v52, v69, v72);
                v74 = *v46;
                v75 = v46[1];
                v46 += 2;
                v51 = vmlaq_n_f32(v51, v69, v74);
                v76 = *v48;
                v77 = v48[1];
                v48 += 2;
                v50 = vmlaq_n_f32(v50, v69, v76);
                v78 = (float32x4_t)vtrn2q_s32(v63, v65);
                v59 = vmlaq_n_f32(v59, v78, v71);
                v60 = vmlaq_n_f32(v60, v78, v73);
                v61 = vmlaq_n_f32(v61, v78, v75);
                v49 = vmlaq_n_f32(v49, v78, v77);
                v53 -= 2;
              }
              while (v53);
              goto LABEL_30;
            }
          }
          else
          {
            v50 = 0uLL;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = v38 - 4;
            v54 = (uint64_t *)v40;
            v55 = (uint64_t *)v36;
            v56 = 0uLL;
            v57 = (uint64_t *)v33;
            v58 = (uint64_t *)v30;
            if (v38 != 4)
              goto LABEL_25;
          }
          v61 = 0uLL;
          v60 = 0uLL;
          v59 = 0uLL;
LABEL_30:
          v85 = (float32x4_t *)(v41 + 4 * v26);
          v86 = (float32x4_t *)(v43 + 4 * v26);
          v87 = (float32x4_t *)(v45 + 4 * v26);
          v88 = (float32x4_t *)(v47 + 4 * v26);
          v89 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v85, a7), vaddq_f32(v59, v56));
          v90 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v86, a7), vaddq_f32(v60, v52));
          v91 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v87, a7), vaddq_f32(v61, v51));
          v92 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v88, a7), vaddq_f32(v49, v50));
          v93 = (int32x4_t)vzip1q_s64(v89, v91);
          v94 = (int32x4_t)vzip1q_s64(v90, v92);
          v95 = (int32x4_t)vzip2q_s64(v89, v91);
          v96 = (int32x4_t)vzip2q_s64(v90, v92);
          v97 = (float32x4_t)vtrn1q_s32(v93, v94);
          v98 = (float32x4_t)vtrn2q_s32(v93, v94);
          v99 = (float32x4_t)vtrn1q_s32(v95, v96);
          v100 = (float32x4_t)vtrn2q_s32(v95, v96);
          v95.i32[0] = *(_DWORD *)(v35 + 12);
          v101 = vmlsq_lane_f32(v99, v100, *(float32x2_t *)v95.i8, 0);
          v94.i32[0] = *(_DWORD *)(v32 + 8);
          v95.i32[0] = *(_DWORD *)(v32 + 12);
          v102 = vmlsq_lane_f32(v98, v100, *(float32x2_t *)v95.i8, 0);
          v95.i32[0] = v29[3];
          v103 = vmlsq_lane_f32(v97, v100, *(float32x2_t *)v95.i8, 0);
          v104 = vmlsq_lane_f32(v102, v101, *(float32x2_t *)v94.i8, 0);
          v94.i32[0] = v29[1];
          v95.i32[0] = v29[2];
          v105 = (int64x2_t)vmlsq_lane_f32(vmlsq_lane_f32(v103, v101, *(float32x2_t *)v95.i8, 0), v104, *(float32x2_t *)v94.i8, 0);
          v106 = (int32x4_t)vzip1q_s64(v105, (int64x2_t)v101);
          v107 = (int32x4_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)v100);
          v108 = (int32x4_t)vzip2q_s64(v105, (int64x2_t)v101);
          v109 = (int32x4_t)vzip2q_s64((int64x2_t)v104, (int64x2_t)v100);
          *(int32x4_t *)v85 = vtrn1q_s32(v106, v107);
          *(int32x4_t *)v86 = vtrn2q_s32(v106, v107);
          *(int32x4_t *)v87 = vtrn1q_s32(v108, v109);
          *(int32x4_t *)v88 = vtrn2q_s32(v108, v109);
          v27 += 4;
          if (v27 >= v25)
            goto LABEL_33;
        }
      }
      v27 = 0;
LABEL_33:
      result = v158;
      a2 = v159;
      if (v27 < v159)
        break;
LABEL_44:
      v157 = v24 < 5;
      v24 -= 4;
      if (v157)
        return result;
    }
    v110 = a3 + 4 * v26 * a4;
    v111 = v110 + 4 * v26;
    v112 = (__int32 *)(v110 + 4 * v24);
    v113 = a3 + 4 * (v24 - 3) * a4;
    v114 = v113 + 4 * v26;
    v115 = (__int32 *)(v113 + 4 * v24);
    v116 = a3 + 4 * (v24 - 2) * a4;
    v117 = v116 + 4 * v26;
    v118 = (__int32 *)(v116 + 4 * v24);
    v119 = a3 + 4 * (v24 - 1) * a4;
    if (v158 - v26 <= 4)
      v120 = 4;
    else
      v120 = v158 - v26;
    v121 = v119 + 4 * v26 + 20;
    v122 = (__int32 *)(v119 + 4 * v24);
    while (1)
    {
      v123 = a5 + 4 * v27 * a6;
      v124 = (float *)(v123 + 4 * v24);
      v125 = 0uLL;
      if ((v120 & 1) != 0)
      {
        v132.i32[0] = *v112;
        v132.i32[1] = *v115;
        v132.i32[2] = *v118;
        v132.i32[3] = *v122;
        v133 = *(_DWORD *)v124++;
        v126 = v120 - 5;
        v127 = vmlaq_n_f32((float32x4_t)0, v132, *(float *)&v133);
        v128 = (uint64_t *)v121;
        v129 = (uint64_t *)(v118 + 1);
        v130 = (uint64_t *)(v115 + 1);
        v131 = (uint64_t *)(v112 + 1);
        if (v120 != 5)
        {
          do
          {
LABEL_42:
            v134 = *v131++;
            v135.i64[0] = v134;
            v136 = *v130++;
            v137.i64[0] = v136;
            v138 = *v129++;
            v139 = v138;
            v140 = *v128++;
            v135.i64[1] = v139;
            v137.i64[1] = v140;
            v141 = (float32x4_t)vtrn1q_s32(v135, v137);
            v142 = (float32x4_t)vtrn2q_s32(v135, v137);
            v137.i32[0] = *(__int32 *)v124;
            v143 = v124[1];
            v124 += 2;
            v127 = vmlaq_n_f32(v127, v141, *(float *)v137.i32);
            v125 = vmlaq_n_f32(v125, v142, v143);
            v126 -= 2;
          }
          while (v126);
        }
      }
      else
      {
        v126 = v120 - 4;
        v127 = 0uLL;
        v128 = (uint64_t *)v122;
        v129 = (uint64_t *)v118;
        v130 = (uint64_t *)v115;
        v131 = (uint64_t *)v112;
        if (v120 != 4)
          goto LABEL_42;
      }
      v144 = (float32x4_t *)(v123 + 4 * v26);
      _Q1 = vsubq_f32(vmulq_n_f32(*v144, a7), vaddq_f32(v125, v127));
      _S4 = *(_DWORD *)(v117 + 12);
      __asm { FMLS            S2, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v114 + 12);
      __asm { FMLS            S3, S4, V1.S[3] }
      _S4 = *(_DWORD *)(v111 + 12);
      __asm { FMLS            S6, S4, V1.S[3] }
      v156 = _S3 - (float)(_S2 * *(float *)(v114 + 8));
      v144->f32[0] = (float)(_S6 - (float)(_S2 * *(float *)(v111 + 8))) - (float)(v156 * *(float *)(v111 + 4));
      v144->f32[1] = v156;
      v144->f32[2] = _S2;
      v144->i32[3] = _Q1.i32[3];
      if (++v27 == v159)
        goto LABEL_44;
    }
  }
  return result;
}

uint64_t sub_20E84D1EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  __int32 *v47;
  uint64_t v48;
  uint64_t v49;
  __int32 *v50;
  uint64_t v51;
  uint64_t v52;
  __int32 *v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  float *v60;
  float *v61;
  uint64_t v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  float32x4_t v71;
  uint64_t *v72;
  uint64_t *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  int32x4_t v78;
  uint64_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t *v102;
  float32x4_t *v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int64x2_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  float *v128;
  __int32 *v129;
  uint64_t v130;
  uint64_t v131;
  __int32 *v132;
  uint64_t v133;
  uint64_t v134;
  __int32 *v135;
  uint64_t v136;
  uint64_t v137;
  __int32 *v138;
  uint64_t v139;
  float *v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  float32x4_t v148;
  __int32 v149;
  uint64_t v150;
  int32x4_t v151;
  uint64_t v152;
  int32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float v159;
  float32x4_t *v160;
  float32x4_t v161;
  float v162;
  float32_t v163;
  float32_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;

  v7 = result - 1;
  if ((~(_BYTE)result & 3) != 0)
  {
    if ((result & 2) != 0)
    {
      if (a2 >= 1)
      {
        v25 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
        v26 = *v25;
        v27 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v28 = (float *)(a5 + 4 * v7);
        v29 = a2;
        v30 = 1.0 / *(v25 - 1);
        do
        {
          v31 = *(v28 - 1);
          v32 = v27 * *v28;
          *v28 = v32;
          *(v28 - 1) = v30 * (float)((float)(v31 * a7) - (float)(v32 * v26));
          v28 += a6;
          --v29;
        }
        while (v29);
      }
      v7 = result - 3;
    }
    else if ((result & 1) != 0)
    {
      if (a2 >= 1)
      {
        v22 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
        v23 = (float *)(a5 + 4 * v7);
        v24 = a2;
        do
        {
          *v23 = v22 * *v23;
          v23 += a6;
          --v24;
        }
        while (v24);
      }
      v7 = result - 2;
    }
  }
  else
  {
    if (a2 >= 1)
    {
      v8 = (float *)(a3 + 4 * (v7 + (result - 2) * a4));
      v9 = *v8;
      v10 = (float *)(a3 + 4 * (v7 + (result - 3) * a4));
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = a7 / *(float *)(a3 + 4 * (v7 + v7 * a4));
      v14 = 1.0 / *(v8 - 1);
      v15 = *(v10 - 2);
      v16 = (float *)(a5 + 4 * v7);
      v17 = a2;
      v18 = 1.0 / v15;
      do
      {
        v19 = *(v16 - 1);
        v20 = v13 * *v16;
        *v16 = v20;
        v21 = v14 * (float)((float)(v19 * a7) - (float)(v20 * v9));
        *(v16 - 2) = v18 * (float)-(float)((float)((float)(v12 * v21) + (float)(v20 * v11)) - (float)(*(v16 - 2) * a7));
        *(v16 - 1) = v21;
        v16 += a6;
        --v17;
      }
      while (v17);
    }
    v7 = result - 4;
  }
  v167 = result;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v33 = v7 + 1;
    v170 = a2 - 3;
    v166 = a3;
    v34 = a2;
    while (1)
    {
      v35 = v33 - 4;
      v36 = (v33 - 4) * a4;
      v37 = 1.0 / *(float *)(a3 + 4 * (v36 + v33 - 4));
      v38 = (v33 - 3) * a4;
      v39 = 1.0 / *(float *)(a3 + 4 * (v33 - 3 + v38));
      v40 = (v33 - 2) * a4;
      v41 = 1.0 / *(float *)(a3 + 4 * (v33 - 2 + v40));
      v42 = (v33 - 1) * a4;
      v43 = 1.0 / *(float *)(a3 + 4 * (v33 - 1 + v42));
      v44 = 0;
      if (a2 >= 4)
      {
        v45 = a3 + 4 * v36;
        v46 = (_DWORD *)(v45 + 4 * v35);
        v47 = (__int32 *)(v45 + 4 * v33);
        v48 = a3 + 4 * v38;
        v49 = v48 + 4 * v35;
        v50 = (__int32 *)(v48 + 4 * v33);
        v51 = a3 + 4 * v40;
        v52 = v51 + 4 * v35;
        v53 = (__int32 *)(v51 + 4 * v33);
        if (v167 - v35 <= 4)
          v54 = 4;
        else
          v54 = v167 - v35;
        v55 = a3 + 4 * v42;
        v169 = v55 + 4 * v35 + 20;
        v56 = (__int32 *)(v55 + 4 * v33);
        do
        {
          v57 = a5 + 4 * v44 * a6;
          v58 = (float *)(v57 + 4 * v33);
          v59 = a5 + 4 * (v44 | 1) * a6;
          v60 = (float *)(v59 + 4 * v33);
          result = a5 + 4 * (v44 | 2) * a6;
          v61 = (float *)(result + 4 * v33);
          v62 = a5 + 4 * (v44 | 3) * a6;
          v63 = (float *)(v62 + 4 * v33);
          v64 = 0uLL;
          if ((v54 & 1) != 0)
          {
            v94.i32[0] = *v47;
            v94.i32[1] = *v50;
            v94.i32[2] = *v53;
            v94.i32[3] = *v56;
            v95 = *v58++;
            v71 = vmlaq_n_f32((float32x4_t)0, v94, v95);
            v96 = *v60++;
            v97 = v96;
            v98 = *v61++;
            v67 = vmlaq_n_f32((float32x4_t)0, v94, v97);
            v66 = vmlaq_n_f32((float32x4_t)0, v94, v98);
            v99 = *v63++;
            v68 = v54 - 5;
            v65 = vmlaq_n_f32((float32x4_t)0, v94, v99);
            v69 = (uint64_t *)v169;
            v70 = (uint64_t *)(v53 + 1);
            v72 = (uint64_t *)(v50 + 1);
            v73 = (uint64_t *)(v47 + 1);
            if (v54 != 5)
            {
LABEL_25:
              v74 = 0uLL;
              v75 = 0uLL;
              v76 = 0uLL;
              do
              {
                v77 = *v73++;
                v78.i64[0] = v77;
                v79 = *v72++;
                v80.i64[0] = v79;
                v81 = *v70++;
                v82 = v81;
                v83 = *v69++;
                v78.i64[1] = v82;
                v80.i64[1] = v83;
                v84 = (float32x4_t)vtrn1q_s32(v78, v80);
                v85 = *v58;
                v86 = v58[1];
                v58 += 2;
                v71 = vmlaq_n_f32(v71, v84, v85);
                v87 = *v60;
                v88 = v60[1];
                v60 += 2;
                v67 = vmlaq_n_f32(v67, v84, v87);
                v89 = *v61;
                v90 = v61[1];
                v61 += 2;
                v66 = vmlaq_n_f32(v66, v84, v89);
                v91 = *v63;
                v92 = v63[1];
                v63 += 2;
                v65 = vmlaq_n_f32(v65, v84, v91);
                v93 = (float32x4_t)vtrn2q_s32(v78, v80);
                v74 = vmlaq_n_f32(v74, v93, v86);
                v75 = vmlaq_n_f32(v75, v93, v88);
                v76 = vmlaq_n_f32(v76, v93, v90);
                v64 = vmlaq_n_f32(v64, v93, v92);
                v68 -= 2;
              }
              while (v68);
              goto LABEL_30;
            }
          }
          else
          {
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = v54 - 4;
            v69 = (uint64_t *)v56;
            v70 = (uint64_t *)v53;
            v71 = 0uLL;
            v72 = (uint64_t *)v50;
            v73 = (uint64_t *)v47;
            if (v54 != 4)
              goto LABEL_25;
          }
          v76 = 0uLL;
          v75 = 0uLL;
          v74 = 0uLL;
LABEL_30:
          v100 = (float32x4_t *)(v57 + 4 * v35);
          v101 = (float32x4_t *)(v59 + 4 * v35);
          v102 = (float32x4_t *)(result + 4 * v35);
          v103 = (float32x4_t *)(v62 + 4 * v35);
          v104 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v100, a7), vaddq_f32(v74, v71));
          v105 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v101, a7), vaddq_f32(v75, v67));
          v106 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v102, a7), vaddq_f32(v76, v66));
          v107 = (int64x2_t)vsubq_f32(vmulq_n_f32(*v103, a7), vaddq_f32(v64, v65));
          v108 = (int32x4_t)vzip1q_s64(v104, v106);
          v109 = (int32x4_t)vzip1q_s64(v105, v107);
          v110 = (int32x4_t)vzip2q_s64(v104, v106);
          v111 = (int32x4_t)vzip2q_s64(v105, v107);
          v112 = (float32x4_t)vtrn1q_s32(v108, v109);
          v113 = (float32x4_t)vtrn2q_s32(v108, v109);
          v114 = (float32x4_t)vtrn1q_s32(v110, v111);
          v115 = vmulq_n_f32((float32x4_t)vtrn2q_s32(v110, v111), v43);
          v110.i32[0] = *(_DWORD *)(v52 + 12);
          v116 = vmlsq_lane_f32(v114, v115, *(float32x2_t *)v110.i8, 0);
          v109.i32[0] = *(_DWORD *)(v49 + 8);
          v110.i32[0] = *(_DWORD *)(v49 + 12);
          v117 = vmlsq_lane_f32(v113, v115, *(float32x2_t *)v110.i8, 0);
          v110.i32[0] = v46[3];
          v118 = vmlsq_lane_f32(v112, v115, *(float32x2_t *)v110.i8, 0);
          v119 = vmulq_n_f32(v116, v41);
          v120 = vmlsq_lane_f32(v117, v119, *(float32x2_t *)v109.i8, 0);
          v109.i32[0] = v46[1];
          v116.i32[0] = v46[2];
          v121 = vmulq_n_f32(v120, v39);
          v122 = (int64x2_t)vmulq_n_f32(vmlsq_lane_f32(vmlsq_lane_f32(v118, v119, *(float32x2_t *)v116.f32, 0), v121, *(float32x2_t *)v109.i8, 0), v37);
          v123 = (int32x4_t)vzip1q_s64(v122, (int64x2_t)v119);
          v124 = (int32x4_t)vzip1q_s64((int64x2_t)v121, (int64x2_t)v115);
          v125 = (int32x4_t)vzip2q_s64(v122, (int64x2_t)v119);
          v126 = (int32x4_t)vzip2q_s64((int64x2_t)v121, (int64x2_t)v115);
          *(int32x4_t *)v100 = vtrn1q_s32(v123, v124);
          *(int32x4_t *)v101 = vtrn2q_s32(v123, v124);
          *(int32x4_t *)v102 = vtrn1q_s32(v125, v126);
          *(int32x4_t *)v103 = vtrn2q_s32(v125, v126);
          v44 += 4;
          a2 = v34;
        }
        while (v44 < v170);
      }
      a3 = v166;
      if (v44 < a2)
        break;
LABEL_41:
      v165 = v33 < 5;
      v33 -= 4;
      if (v165)
        return result;
    }
    v127 = v166 + 4 * (v33 - 4) * a4;
    v128 = (float *)(v127 + 4 * v35);
    v129 = (__int32 *)(v127 + 4 * v33);
    v130 = v166 + 4 * (v33 - 3) * a4;
    v131 = v130 + 4 * v35;
    v132 = (__int32 *)(v130 + 4 * v33);
    v133 = v166 + 4 * (v33 - 2) * a4;
    v134 = v133 + 4 * v35;
    result = v167 - v35;
    v135 = (__int32 *)(v133 + 4 * v33);
    if (v167 - v35 <= 4)
      result = 4;
    v136 = v166 + 4 * (v33 - 1) * a4;
    v137 = v136 + 4 * v35 + 20;
    v138 = (__int32 *)(v136 + 4 * v33);
    while (1)
    {
      v139 = a5 + 4 * v44 * a6;
      v140 = (float *)(v139 + 4 * v33);
      v141 = 0uLL;
      if ((result & 1) != 0)
      {
        v148.i32[0] = *v129;
        v148.i32[1] = *v132;
        v148.i32[2] = *v135;
        v148.i32[3] = *v138;
        v149 = *(_DWORD *)v140++;
        v142 = result - 5;
        v143 = vmlaq_n_f32((float32x4_t)0, v148, *(float *)&v149);
        v144 = (uint64_t *)v137;
        v145 = (uint64_t *)(v135 + 1);
        v146 = (uint64_t *)(v132 + 1);
        v147 = (uint64_t *)(v129 + 1);
        if (result != 5)
        {
          do
          {
LABEL_39:
            v150 = *v147++;
            v151.i64[0] = v150;
            v152 = *v146++;
            v153.i64[0] = v152;
            v154 = *v145++;
            v155 = v154;
            v156 = *v144++;
            v151.i64[1] = v155;
            v153.i64[1] = v156;
            v157 = (float32x4_t)vtrn1q_s32(v151, v153);
            v158 = (float32x4_t)vtrn2q_s32(v151, v153);
            v153.i32[0] = *(__int32 *)v140;
            v159 = v140[1];
            v140 += 2;
            v143 = vmlaq_n_f32(v143, v157, *(float *)v153.i32);
            v141 = vmlaq_n_f32(v141, v158, v159);
            v142 -= 2;
          }
          while (v142);
        }
      }
      else
      {
        v142 = result - 4;
        v143 = 0uLL;
        v144 = (uint64_t *)v138;
        v145 = (uint64_t *)v135;
        v146 = (uint64_t *)v132;
        v147 = (uint64_t *)v129;
        if (result != 4)
          goto LABEL_39;
      }
      v160 = (float32x4_t *)(v139 + 4 * v35);
      v161 = vsubq_f32(vmulq_n_f32(*v160, a7), vaddq_f32(v143, v141));
      v162 = vmuls_lane_f32(v43, v161, 3);
      v163 = v41 * (float)(v161.f32[2] - (float)(v162 * *(float *)(v134 + 12)));
      v164 = v39
           * (float)((float)(v161.f32[1] - (float)(v162 * *(float *)(v131 + 12))) - (float)(v163 * *(float *)(v131 + 8)));
      v160->f32[0] = v37
                   * (float)((float)((float)(v161.f32[0] - (float)(v162 * v128[3])) - (float)(v163 * v128[2]))
                           - (float)(v164 * v128[1]));
      v160->f32[1] = v164;
      v160->f32[2] = v163;
      v160->f32[3] = v162;
      if (++v44 == a2)
        goto LABEL_41;
    }
  }
  return result;
}

float *sub_20E84D820(float32x4_t *a1, uint64_t a2, float32x4_t *_X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int8x16_t v6;
  uint64_t v8;
  uint64_t v9;
  float *result;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v51;
  _OWORD *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;

  v8 = a5 & 7;
  v9 = a5 - v8;
  if (v9)
  {
    v11 = _X2;
    v12 = 4 * a4;
    v14 = *a1;
    v15 = a1[1];
    v13 = a1 + 2;
    v16 = *v13;
    v17 = v13[1];
    result = v13[2].f32;
    do
    {
      v18 = a6;
      v6 = veorq_s8(v6, v6);
      __asm { PRFM            #1, [X2,#0x40] }
      v25 = *_X2;
      v26 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v29 = *_X2;
      v30 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v33 = *_X2;
      v34 = _X2[1];
      _X2 = (float32x4_t *)((char *)_X2 + v12);
      __asm { PRFM            #1, [X2,#0x40] }
      v36 = *_X2;
      v37 = _X2[1];
      _X2 = v11 + 2;
      v38 = (float32x4_t)v6;
      v39 = (float32x4_t)v6;
      v40 = (float32x4_t)v6;
      v41 = (float32x4_t)v6;
      v42 = (float32x4_t)v6;
      v43 = (float32x4_t)v6;
      v44 = (float32x4_t)v6;
      v46 = *(float32x4_t *)a2;
      v47 = *(float32x4_t *)(a2 + 16);
      _X6 = (_OWORD *)(a2 + 32);
      __asm
      {
        PRFM            #1, [X6]
        PRFM            #1, [X6,#0x20]
        PRFM            #1, [X6,#0x40]
      }
      if ((a6 & 1) == 0)
        goto LABEL_13;
      v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
      v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
      v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
      v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
      v14 = v16;
      v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
      v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
      v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
      v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
      v15 = v17;
      v16 = *(float32x4_t *)result;
      v17 = *(float32x4_t *)(result + 4);
      result += 8;
      v46 = *(float32x4_t *)(a2 + 16);
      v47 = *(float32x4_t *)_X6;
      _X6 = (_OWORD *)(a2 + 48);
      v18 = a6 - 1;
      if (a6 > 1)
      {
LABEL_13:
        do
        {
          v25 = vmlaq_n_f32(v25, v14, v46.f32[0]);
          v29 = vmlaq_lane_f32(v29, v14, *(float32x2_t *)v46.f32, 1);
          v33 = vmlaq_laneq_f32(v33, v14, v46, 2);
          v36 = vmlaq_laneq_f32(v36, v14, v46, 3);
          v26 = vmlaq_n_f32(v26, v15, v46.f32[0]);
          v30 = vmlaq_lane_f32(v30, v15, *(float32x2_t *)v46.f32, 1);
          v34 = vmlaq_laneq_f32(v34, v15, v46, 2);
          v37 = vmlaq_laneq_f32(v37, v15, v46, 3);
          v14 = *(float32x4_t *)result;
          v15 = *(float32x4_t *)(result + 4);
          v51 = (float32x4_t *)(result + 8);
          v46 = *(float32x4_t *)_X6;
          v52 = _X6 + 1;
          v6 = (int8x16_t)vmlaq_n_f32((float32x4_t)v6, v16, v47.f32[0]);
          v39 = vmlaq_lane_f32(v39, v16, *(float32x2_t *)v47.f32, 1);
          v41 = vmlaq_laneq_f32(v41, v16, v47, 2);
          v43 = vmlaq_laneq_f32(v43, v16, v47, 3);
          v38 = vmlaq_n_f32(v38, v17, v47.f32[0]);
          v40 = vmlaq_lane_f32(v40, v17, *(float32x2_t *)v47.f32, 1);
          v42 = vmlaq_laneq_f32(v42, v17, v47, 2);
          v44 = vmlaq_laneq_f32(v44, v17, v47, 3);
          v16 = *v51;
          v17 = v51[1];
          result = v51[2].f32;
          v47 = *(float32x4_t *)v52;
          _X6 = v52 + 1;
          v18 -= 2;
        }
        while (v18);
        v25 = vaddq_f32(v25, (float32x4_t)v6);
        v26 = vaddq_f32(v26, v38);
        v29 = vaddq_f32(v29, v39);
        v30 = vaddq_f32(v30, v40);
        v33 = vaddq_f32(v33, v41);
        v34 = vaddq_f32(v34, v42);
        v36 = vaddq_f32(v36, v43);
        v37 = vaddq_f32(v37, v44);
      }
      *v11 = v25;
      v11[1] = v26;
      v53 = (float32x4_t *)((char *)v11 + v12);
      *v53 = v29;
      v53[1] = v30;
      v54 = (float32x4_t *)((char *)v53 + v12);
      *v54 = v33;
      v54[1] = v34;
      v55 = (float32x4_t *)((char *)v54 + v12);
      *v55 = v36;
      v55[1] = v37;
      v11 = _X2;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    result = a1[4].f32;
  }
  if (v8)
    return sub_20E837170(result - 16, (float32x4_t *)a2, (__int32 *)_X2, a4, v8, a6);
  return result;
}

void sub_20E84D9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float32x4_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23,float32x4_t a24,float32x4_t a25,float32x4_t a26,uint64_t a27,float32x2_t a28,float32x4_t a29,float32x4_t a30,float32x4_t a31,float32x4_t a32,uint64_t a33,float32x2_t a34,float32x4_t a35,float32x4_t a36,float32x4_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  float32x2_t *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float v46;
  int32x2_t v47;
  float32x2_t *v48;
  __int128 v49;
  uint64_t v50;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t *v69;
  uint64_t v70;
  float32x4_t *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int64_t v96;
  float v97;
  float v98;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  int64_t v123;
  float v124;
  float v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  uint64_t v143;
  float32x4_t *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t *v156;
  _DWORD *v157;
  uint64_t v158;
  const float *v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t v166;
  float *v167;
  uint64_t m;
  int64_t v169;
  float v170;
  float v171;
  int64_t v172;
  float v173;
  float v174;
  uint64_t v175;
  float *v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  int64_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  int64_t v186;
  float32x2_t v187;
  float32x2_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t *v197;
  _DWORD *v198;
  uint64_t v199;
  const float *v200;
  float32x4_t v201;
  uint64_t v202;
  float v203;
  float32x4_t *v204;
  float32x4_t v205;
  float32x4_t v206;
  uint64_t v207;
  _DWORD *v208;
  uint64_t i;
  int64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  float32x4_t *v214;
  float *v215;
  float32x4_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t *v220;
  _DWORD *v221;
  const float *v222;
  float32x2_t v223;
  uint64_t v224;
  float v225;
  float32x2_t *v226;
  float32x2_t v227;
  float32x2_t v228;
  float v229;
  uint64_t v230;
  float *v231;
  float *v232;
  int64_t v233;
  float32x2_t v234;
  float32x2_t v235;
  float32x2_t v236;
  float32x2_t v237;
  int64_t v238;
  float32x2_t v239;
  float32x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int64_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t *v249;
  _DWORD *v250;
  uint64_t v251;
  const float *v252;
  float32x4_t v253;
  uint64_t v254;
  float v255;
  float32x4_t *v256;
  float32x4_t v257;
  float32x4_t v258;
  uint64_t v259;
  float *v260;
  uint64_t j;
  int64_t v262;
  float32x4_t v263;
  float32x4_t v264;
  uint64_t v265;
  float32x4_t *v266;
  float *v267;
  float32x4_t v268;
  uint64_t v269;
  uint64_t v270;
  float32x2_t *v271;
  float *v272;
  float32x2_t v273;
  __int32 *v274;
  uint64_t v275;
  uint64_t v276;
  float32x2_t *v277;
  _DWORD *v278;
  const float *v279;
  float32x2_t v280;
  uint64_t v281;
  float v282;
  int64_t v283;
  float32x2_t v284;
  float32x2_t v285;
  uint64_t v286;
  float32x4_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t *v295;
  _DWORD *v296;
  uint64_t v297;
  const float *v298;
  float32x4_t v299;
  uint64_t v300;
  float v301;
  float32x4_t *v302;
  float32x4_t v303;
  float32x4_t v304;
  uint64_t v305;
  float *v306;
  uint64_t k;
  int64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  uint64_t v311;
  float *v312;
  float *v313;
  int64_t v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  float32x2_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float *v321;
  float32x4_t v322;
  uint64_t v323;
  uint64_t v324;
  float *v325;
  float *v326;
  int64_t v327;
  float32x2_t v328;
  float32x2_t v329;
  float32x2_t v330;
  float32x2_t v331;
  uint64_t v332;
  float32x2_t *v333;
  float *v334;
  uint64_t v335;
  float32x2_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x2_t *v339;
  _DWORD *v340;
  const float *v341;
  float32x2_t v342;
  uint64_t v343;
  float v344;
  float32x2_t v345;
  uint64_t v346;
  float32x2_t *v347;
  float *v348;
  uint64_t v349;
  float32x2_t v350;
  uint64_t v351;
  uint64_t v352;
  float32x2_t *v353;
  _DWORD *v354;
  const float *v355;
  float32x2_t v356;
  uint64_t v357;
  float v358;
  float32x2_t v359;
  uint64_t v360;
  float32x4_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  float v365;
  float32x4_t *v366;
  float32x4_t *v367;
  float32x4_t *v368;
  float32x4_t *v369;
  uint64_t v370;
  uint64_t v371;
  __int128 vars0;
  float *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  float32x2_t *v390;
  float32x2_t *v391;
  float32x2_t *v392;
  float32x2_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;

  v38 = MEMORY[0x24BDAC7A8](a1);
  v373 = v42;
  v48 = v40;
  LODWORD(v49) = v51.i32[0];
  v50 = v38;
  STACK[0x1218] = *MEMORY[0x24BDAC8D0];
  v51.i32[0] = 1.0;
  v52 = v39 * v38;
  vars0 = v49;
  v370 = v38;
  v371 = v45;
  if (v46 != 1.0)
  {
    *(float *)v47.i32 = v46;
    if (v46 == 0.0)
    {
      if (v38 >= 16 && v52 >= 0x2000)
      {
        v75 = 0;
        v76 = 0;
        v77 = -v41 & v41;
        if (v77 >= 4)
          v77 = 4;
        v78 = __clz(v77) - 61;
        v79 = (1 << v78);
        v399 = v43 << v78;
        v403 = v41 << v78;
        v395 = 4 * v43;
        v80 = 4 * v41;
        v81 = v39 - 1;
        v363 = v45 << 12;
        v82 = 16 * v45;
        v83 = 4 * v45;
        v367 = v44;
        do
        {
          v379 = v44;
          v383 = v76;
          if (v50 - v76 >= 1024)
            v84 = 1024;
          else
            v84 = v50 - v76;
          v375 = v50 - v76;
          if (v50 - v76 >= 1)
          {
            v85 = v50 - (v75 << 10);
            if (v85 >= 1024)
              v85 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v85 - (v85 != 0)) + 4);
          }
          v387 = v75;
          v391 = v48;
          v86 = (uint64_t)v48;
          v87 = v373;
          v88 = v79;
          do
          {
            v89 = (v81 + v88) / v79;
            if (!v89)
              break;
            v51 = sub_20E854480(v84, v89, v86, v403, v87, v399, (unint64_t)&a38 | 0x10, v51);
            v87 = (float *)((char *)v87 + v395);
            v86 += v80;
            --v88;
          }
          while (v88);
          v50 = v370;
          if (v375 >= 1)
          {
            v90 = 0;
            v91 = v379;
            do
            {
              v92 = v84 - v90;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v90), *(float *)&vars0);
              if (v371 == 1 && v92 >= 4)
              {
                *(float32x4_t *)((char *)v367 + 4 * v383 * v371 + 4 * v90) = v51;
              }
              else
              {
                if (v92 >= 4)
                  v93 = 4;
                else
                  v93 = v84 - v90;
                v94 = (v93 + 4) & (v93 >> 63);
                if (v93 < 0)
                  v93 = 4;
                if (v94 < v93)
                {
                  v95 = (__int32 *)((char *)v91->i32 + v83 * v94);
                  do
                  {
                    a22 = v51;
                    *v95 = *(_DWORD *)((unint64_t)&a22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94++ & 3)));
                    v95 = (_DWORD *)((char *)v95 + v83);
                  }
                  while (v93 != v94);
                }
              }
              v90 += 4;
              v91 = (float32x4_t *)((char *)v91 + v82);
            }
            while (v90 < v84);
          }
          v76 = v383 + 1024;
          v75 = v387 + 1;
          v48 = v391 + 512;
          v44 = (float32x4_t *)((char *)v379 + v363);
        }
        while (v383 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v125 = 0.0;
            v230 = 2;
            v231 = (float *)v40;
            v124 = 0.0;
            v232 = v42;
            do
            {
              v124 = v124 + (float)(*v231 * *v232);
              v125 = v125 + (float)(v231[v41] * v232[v43]);
              v230 += 2;
              v232 += 2 * v43;
              v231 += 2 * v41;
            }
            while (v230 <= v39);
            v123 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v123 = 0;
            v124 = 0.0;
            v125 = 0.0;
          }
          if (v123 < v39)
            v124 = v124 + (float)(v40->f32[v123 * v41] * v42[v123 * v43]);
          v180 = (float)(v125 + v124) * *(float *)&v49;
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v188 = 0;
            v270 = 2;
            v271 = v40;
            v187 = 0;
            v272 = v42;
            do
            {
              v187 = vmla_n_f32(v187, *v271, *v272);
              v188 = vmla_n_f32(v188, *(float32x2_t *)((char *)v271 + 4 * v41), v272[v43]);
              v270 += 2;
              v272 += 2 * v43;
              v271 += v41;
            }
            while (v270 <= v39);
            v186 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
          }
          if (v186 < v39)
            v187 = vmla_n_f32(v187, *(float32x2_t *)((char *)v40 + 4 * v186 * v41), v42[v186 * v43]);
          v273 = vmul_n_f32(vadd_f32(v188, v187), *(float *)&v49);
          v44->i32[0] = v273.i32[0];
          v274 = &v44->i32[v45];
          goto LABEL_313;
        }
        if (v39 >= 2)
        {
          v233 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v237 = 0;
          v276 = 2;
          v277 = v40;
          v278 = v42;
          v236 = 0;
          v235 = 0;
          v234 = 0;
          v279 = v42;
          do
          {
            v280 = vld1_dup_f32(v279);
            v275 = 8 * v43;
            v279 = (const float *)((char *)v279 + v275);
            v237 = vmla_f32(v237, v280, *v277);
            v235 = vmla_f32(v235, v280, *(float32x2_t *)((char *)v277 + 4));
            v280.i32[0] = v278[v43];
            v234 = vmla_n_f32(v234, *(float32x2_t *)((char *)v277 + 4 * v41), v280.f32[0]);
            v236 = vmla_n_f32(v236, *(float32x2_t *)((char *)v277 + 4 * v41 + 4), v280.f32[0]);
            v276 += 2;
            v277 += v41;
            v278 = v279;
          }
          while (v276 <= v39);
        }
        else
        {
          v233 = 0;
          v234 = 0;
          v235 = 0;
          v236 = 0;
          v237 = 0;
        }
        if (v233 < v39)
        {
          v281 = 4 * v233 * v41;
          v282 = v42[v233 * v43];
          v237 = vmla_n_f32(v237, *(float32x2_t *)((char *)v40 + v281), v282);
          v235 = vmla_n_f32(v235, *(float32x2_t *)((char *)v40 + (v281 | 4)), v282);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->i32[0] = vmul_n_f32(vadd_f32(v234, v237), *(float *)&v49).u32[0];
        v273 = vmul_n_f32(vadd_f32(v236, v235), *(float *)&v49);
        if (v45 != 1)
        {
          v226->i32[0] = v273.i32[0];
          v274 = (__int32 *)v226 + v45;
LABEL_313:
          *v274 = v273.i32[1];
          return;
        }
LABEL_311:
        *v226 = v273;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_227:
        if (v39 >= 2)
        {
          v212 = 0uLL;
          v213 = 2;
          v214 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v211 = 0uLL;
          v215 = v373;
          do
          {
            v211 = vmlaq_n_f32(v211, *v214, *v215);
            v212 = vmlaq_n_f32(v212, *(float32x4_t *)((char *)v214 + 4 * v41), v215[v43]);
            v213 += 2;
            v215 += 2 * v43;
            v214 = (float32x4_t *)((char *)v214 + 8 * v41);
          }
          while (v213 <= v39);
          v210 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v210 = 0;
          v211 = 0uLL;
          v212 = 0uLL;
        }
        if (v210 < v39)
          v211 = vmlaq_n_f32(v211, *(float32x4_t *)&v48[-2].f32[v50 + v210 * v41], v373[v210 * v43]);
        v216 = vmulq_n_f32(vaddq_f32(v212, v211), *(float *)&v49);
        v217 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a23 = v216;
            v44->i32[0] = *(_DWORD *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v217++ & 3)));
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v217 != 4);
        }
        return;
      }
      v190 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v191 = 8;
        else
          v191 = v50;
        if (v39 >= 2)
        {
          v196 = 0uLL;
          v197 = (float32x4_t *)v48;
          v198 = v373;
          v199 = 2;
          v195 = 0uLL;
          v194 = 0uLL;
          v193 = 0uLL;
          v200 = v373;
          do
          {
            v201 = vld1q_dup_f32(v200);
            v189 = 8 * v43;
            v200 = (const float *)((char *)v200 + v189);
            v196 = vmlaq_f32(v196, v201, *v197);
            v194 = vmlaq_f32(v194, v201, *(float32x4_t *)((char *)v197 + 4 * v191 - 16));
            v201.i32[0] = v198[v43];
            v193 = vmlaq_n_f32(v193, *(float32x4_t *)((char *)v197 + 4 * v41), v201.f32[0]);
            v195 = vmlaq_n_f32(v195, *(float32x4_t *)((char *)v197 + 4 * v41 + 4 * v191 - 16), v201.f32[0]);
            v199 += 2;
            v197 = (float32x4_t *)((char *)v197 + 8 * v41);
            v198 = v200;
          }
          while (v199 <= v39);
          v192 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v192 = 0;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v196 = 0uLL;
        }
        v202 = v191 - 4;
        if (v192 < v39)
        {
          v203 = v373[v192 * v43];
          v196 = vmlaq_n_f32(v196, *(float32x4_t *)&v48->f32[v192 * v41], v203);
          v194 = vmlaq_n_f32(v194, *(float32x4_t *)&v48->f32[v192 * v41 + v202], v203);
        }
        v204 = (float32x4_t *)((char *)v44 + 4 * v202 * v45);
        v205 = vmulq_n_f32(vaddq_f32(v193, v196), *(float *)&v49);
        if (v45 == 1 && v191 == 8)
        {
          *v44 = v205;
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
        }
        else
        {
          if (v191 >= 4)
            v207 = 0;
          else
            v207 = v191;
          if (v191 < 4)
            v202 = 4;
          if (v207 < v202)
          {
            v208 = (__int32 *)((char *)v44->i32 + v190 * v207);
            do
            {
              a25 = v205;
              *v208 = *(_DWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v207++ & 3)));
              v208 = (_DWORD *)((char *)v208 + v190);
            }
            while (v202 != v207);
          }
          v206 = vmulq_n_f32(vaddq_f32(v195, v194), *(float *)&v49);
          if (v45 != 1)
          {
            for (i = 0; i != 4; ++i)
            {
              a24 = v206;
              v204->i32[0] = *(_DWORD *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v204 = (float32x4_t *)((char *)v204 + v190);
            }
            goto LABEL_225;
          }
        }
        *v204 = v206;
LABEL_225:
        v48 = (float32x2_t *)((char *)v48 + 4 * v191);
        v44 = (float32x4_t *)((char *)v44 + 4 * v191 * v45);
        v50 -= v191;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_227;
        }
      }
    }
    v100 = (v52 & 0xFFFFFFFFFFFFE000) != 0 && v38 > 15;
    v51.i32[0] = -1.0;
    if (v46 == -1.0)
    {
      if (v100)
      {
        v101 = 0;
        v102 = 0;
        v103 = -v41 & v41;
        if (v103 >= 4)
          v103 = 4;
        v104 = __clz(v103) - 61;
        v105 = (1 << v104);
        v400 = v43 << v104;
        v404 = v41 << v104;
        v396 = 4 * v43;
        v106 = 4 * v41;
        v107 = v39 - 1;
        v364 = v45 << 12;
        v108 = 16 * v45;
        v109 = 4 * v45;
        v368 = v44;
        do
        {
          v380 = v44;
          v384 = v102;
          if (v50 - v102 >= 1024)
            v110 = 1024;
          else
            v110 = v50 - v102;
          v376 = v50 - v102;
          if (v50 - v102 >= 1)
          {
            v111 = v50 - (v101 << 10);
            if (v111 >= 1024)
              v111 = 1024;
            bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v111 - (v111 != 0)) + 4);
          }
          v388 = v101;
          v392 = v48;
          v112 = (uint64_t)v48;
          v113 = v373;
          v114 = v105;
          do
          {
            v115 = (v107 + v114) / v105;
            if (!v115)
              break;
            v51 = sub_20E854480(v110, v115, v112, v404, v113, v400, (unint64_t)&a38 | 0x10, v51);
            v113 = (float *)((char *)v113 + v396);
            v112 += v106;
            --v114;
          }
          while (v114);
          v50 = v370;
          if (v376 >= 1)
          {
            v116 = 0;
            v117 = v380;
            do
            {
              v118 = v110 - v116;
              v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v116), *(float *)&vars0);
              if (v371 == 1 && v118 >= 4)
              {
                v119 = (float32x4_t *)((char *)v368 + 4 * v384 * v371 + 4 * v116);
                v51 = vsubq_f32(v51, *v119);
                *v119 = v51;
              }
              else
              {
                if (v118 >= 4)
                  v120 = 4;
                else
                  v120 = v110 - v116;
                v121 = (v120 + 4) & (v120 >> 63);
                if (v120 < 0)
                  v120 = 4;
                if (v121 < v120)
                {
                  v122 = (float *)((char *)v117->f32 + v109 * v121);
                  do
                  {
                    a26 = v51;
                    *v122 = *(float *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v121++ & 3))) - *v122;
                    v122 = (float *)((char *)v122 + v109);
                  }
                  while (v120 != v121);
                }
              }
              v116 += 4;
              v117 = (float32x4_t *)((char *)v117 + v108);
            }
            while (v116 < v110);
          }
          v102 = v384 + 1024;
          v101 = v388 + 1;
          v48 = v392 + 512;
          v44 = (float32x4_t *)((char *)v380 + v364);
        }
        while (v384 + 1024 < v370);
        return;
      }
      if (v38 < 1)
        return;
      if ((unint64_t)v38 < 4)
      {
        if ((unint64_t)v38 < 2)
        {
          if (v39 >= 2)
          {
            v171 = 0.0;
            v311 = 2;
            v312 = (float *)v40;
            v170 = 0.0;
            v313 = v42;
            do
            {
              v170 = v170 + (float)(*v312 * *v313);
              v171 = v171 + (float)(v312[v41] * v313[v43]);
              v311 += 2;
              v313 += 2 * v43;
              v312 += 2 * v41;
            }
            while (v311 <= v39);
            v169 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v169 = 0;
            v170 = 0.0;
            v171 = 0.0;
          }
          if (v169 < v39)
            v170 = v170 + (float)(v40->f32[v169 * v41] * v42[v169 * v43]);
          v180 = -(float)(v44->f32[0] - (float)(*(float *)&v49 * (float)(v171 + v170)));
          goto LABEL_352;
        }
        if (v38 == 2)
        {
          if (v39 >= 2)
          {
            v240 = 0;
            v332 = 2;
            v333 = v40;
            v239 = 0;
            v334 = v42;
            do
            {
              v239 = vmla_n_f32(v239, *v333, *v334);
              v240 = vmla_n_f32(v240, *(float32x2_t *)((char *)v333 + 4 * v41), v334[v43]);
              v332 += 2;
              v334 += 2 * v43;
              v333 += v41;
            }
            while (v332 <= v39);
            v238 = v39 & 0xFFFFFFFFFFFFFFFELL;
          }
          else
          {
            v238 = 0;
            v239 = 0;
            v240 = 0;
          }
          if (v238 < v39)
            v239 = vmla_n_f32(v239, *(float32x2_t *)((char *)v40 + 4 * v238 * v41), v42[v238 * v43]);
          v335 = 0;
          v336 = vmul_n_f32(vadd_f32(v240, v239), *(float *)&v49);
          do
          {
            a28 = v336;
            v44->f32[0] = *(float *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v335++ & 1))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v335 != 2);
          return;
        }
        if (v39 >= 2)
        {
          v314 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v318 = 0;
          v338 = 2;
          v339 = v40;
          v340 = v42;
          v317 = 0;
          v316 = 0;
          v315 = 0;
          v341 = v42;
          do
          {
            v342 = vld1_dup_f32(v341);
            v337 = 8 * v43;
            v341 = (const float *)((char *)v341 + v337);
            v318 = vmla_f32(v318, v342, *v339);
            v316 = vmla_f32(v316, v342, *(float32x2_t *)((char *)v339 + 4));
            v342.i32[0] = v340[v43];
            v315 = vmla_n_f32(v315, *(float32x2_t *)((char *)v339 + 4 * v41), v342.f32[0]);
            v317 = vmla_n_f32(v317, *(float32x2_t *)((char *)v339 + 4 * v41 + 4), v342.f32[0]);
            v338 += 2;
            v339 += v41;
            v340 = v341;
          }
          while (v338 <= v39);
        }
        else
        {
          v314 = 0;
          v315 = 0;
          v316 = 0;
          v317 = 0;
          v318 = 0;
        }
        if (v314 < v39)
        {
          v343 = 4 * v314 * v41;
          v344 = v42[v314 * v43];
          v318 = vmla_n_f32(v318, *(float32x2_t *)((char *)v40 + v343), v344);
          v316 = vmla_n_f32(v316, *(float32x2_t *)((char *)v40 + (v343 | 4)), v344);
        }
        v226 = (float32x2_t *)&v44->f32[v45];
        v44->f32[0] = vmul_n_f32(vadd_f32(v315, v318), *(float *)&v49).f32[0] - v44->f32[0];
        v345 = vmul_n_f32(vadd_f32(v317, v316), *(float *)&v49);
        if (v45 == 1)
        {
          v228 = vsub_f32(v345, *v226);
          goto LABEL_246;
        }
        v226->f32[0] = v345.f32[0] - v226->f32[0];
        v229 = v345.f32[1] - v226->f32[v45];
LABEL_248:
        v226->f32[v45] = v229;
        return;
      }
      if (v38 == 4)
      {
        v50 = 4;
LABEL_290:
        if (v39 >= 2)
        {
          v264 = 0uLL;
          v265 = 2;
          v266 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
          v263 = 0uLL;
          v267 = v373;
          do
          {
            v263 = vmlaq_n_f32(v263, *v266, *v267);
            v264 = vmlaq_n_f32(v264, *(float32x4_t *)((char *)v266 + 4 * v41), v267[v43]);
            v265 += 2;
            v267 += 2 * v43;
            v266 = (float32x4_t *)((char *)v266 + 8 * v41);
          }
          while (v265 <= v39);
          v262 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v262 = 0;
          v263 = 0uLL;
          v264 = 0uLL;
        }
        if (v262 < v39)
          v263 = vmlaq_n_f32(v263, *(float32x4_t *)&v48[-2].f32[v50 + v262 * v41], v373[v262 * v43]);
        v268 = vmulq_n_f32(vaddq_f32(v264, v263), *(float *)&v49);
        v269 = 4 - v50;
        if (4 - v50 <= 3)
        {
          do
          {
            a29 = v268;
            v44->f32[0] = *(float *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v269++ & 3))) - v44->f32[0];
            v44 = (float32x4_t *)((char *)v44 + 4 * v45);
          }
          while (v269 != 4);
        }
        return;
      }
      v242 = 4 * v45;
      while (1)
      {
        if (v50 >= 8)
          v243 = 8;
        else
          v243 = v50;
        if (v39 >= 2)
        {
          v248 = 0uLL;
          v249 = (float32x4_t *)v48;
          v250 = v373;
          v251 = 2;
          v247 = 0uLL;
          v246 = 0uLL;
          v245 = 0uLL;
          v252 = v373;
          do
          {
            v253 = vld1q_dup_f32(v252);
            v241 = 8 * v43;
            v252 = (const float *)((char *)v252 + v241);
            v248 = vmlaq_f32(v248, v253, *v249);
            v246 = vmlaq_f32(v246, v253, *(float32x4_t *)((char *)v249 + 4 * v243 - 16));
            v253.i32[0] = v250[v43];
            v245 = vmlaq_n_f32(v245, *(float32x4_t *)((char *)v249 + 4 * v41), v253.f32[0]);
            v247 = vmlaq_n_f32(v247, *(float32x4_t *)((char *)v249 + 4 * v41 + 4 * v243 - 16), v253.f32[0]);
            v251 += 2;
            v249 = (float32x4_t *)((char *)v249 + 8 * v41);
            v250 = v252;
          }
          while (v251 <= v39);
          v244 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v244 = 0;
          v245 = 0uLL;
          v246 = 0uLL;
          v247 = 0uLL;
          v248 = 0uLL;
        }
        v254 = v243 - 4;
        if (v244 < v39)
        {
          v255 = v373[v244 * v43];
          v248 = vmlaq_n_f32(v248, *(float32x4_t *)&v48->f32[v244 * v41], v255);
          v246 = vmlaq_n_f32(v246, *(float32x4_t *)&v48->f32[v244 * v41 + v254], v255);
        }
        v256 = (float32x4_t *)((char *)v44 + 4 * v254 * v45);
        v257 = vmulq_n_f32(vaddq_f32(v245, v248), *(float *)&v49);
        if (v45 == 1 && v243 == 8)
        {
          *v44 = vsubq_f32(v257, *v44);
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
        }
        else
        {
          if (v243 >= 4)
            v259 = 0;
          else
            v259 = v243;
          if (v243 < 4)
            v254 = 4;
          if (v259 < v254)
          {
            v260 = (float *)((char *)v44->f32 + v242 * v259);
            do
            {
              a31 = v257;
              *v260 = *(float *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v259++ & 3))) - *v260;
              v260 = (float *)((char *)v260 + v242);
            }
            while (v254 != v259);
          }
          v258 = vmulq_n_f32(vaddq_f32(v247, v246), *(float *)&v49);
          if (v45 != 1)
          {
            for (j = 0; j != 4; ++j)
            {
              a30 = v258;
              v256->f32[0] = *(float *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3))) - v256->f32[0];
              v256 = (float32x4_t *)((char *)v256 + v242);
            }
            goto LABEL_288;
          }
        }
        *v256 = vsubq_f32(v258, *v256);
LABEL_288:
        v48 = (float32x2_t *)((char *)v48 + 4 * v243);
        v44 = (float32x4_t *)((char *)v44 + 4 * v243 * v45);
        v50 -= v243;
        if (v50 <= 4)
        {
          if (v50 < 1)
            return;
          goto LABEL_290;
        }
      }
    }
    if (v100)
    {
      v126 = 0;
      v127 = 0;
      v128 = -v41 & v41;
      if (v128 >= 4)
        v128 = 4;
      v129 = __clz(v128) - 61;
      v130 = (1 << v129);
      v401 = v43 << v129;
      v405 = v41 << v129;
      v397 = 4 * v43;
      v131 = 4 * v41;
      v132 = v39 - 1;
      v360 = v45 << 12;
      v133 = 16 * v45;
      v134 = 4 * v45;
      v369 = v44;
      v361 = (float32x4_t)vdupq_lane_s32(v47, 0);
      v365 = v46;
      do
      {
        v381 = v44;
        v385 = v127;
        if (v50 - v127 >= 1024)
          v135 = 1024;
        else
          v135 = v50 - v127;
        v377 = v50 - v127;
        if (v50 - v127 >= 1)
        {
          v136 = v50 - (v126 << 10);
          if (v136 >= 1024)
            v136 = 1024;
          bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v136 - (v136 != 0)) + 4);
        }
        v389 = v126;
        v393 = v48;
        v137 = (uint64_t)v48;
        v138 = v373;
        v139 = v130;
        do
        {
          v140 = (v132 + v139) / v130;
          if (!v140)
            break;
          v51 = sub_20E854480(v135, v140, v137, v405, v138, v401, (unint64_t)&a38 | 0x10, v51);
          v138 = (float *)((char *)v138 + v397);
          v137 += v131;
          --v139;
        }
        while (v139);
        v50 = v370;
        if (v377 >= 1)
        {
          v141 = 0;
          v142 = v381;
          do
          {
            v143 = v135 - v141;
            v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v141), *(float *)&vars0);
            if (v371 == 1 && v143 >= 4)
            {
              v144 = (float32x4_t *)((char *)v369 + 4 * v385 * v371 + 4 * v141);
              v51 = vmlaq_f32(v51, *v144, v361);
              *v144 = v51;
            }
            else
            {
              if (v143 >= 4)
                v145 = 4;
              else
                v145 = v135 - v141;
              v146 = (v145 + 4) & (v145 >> 63);
              if (v145 < 0)
                v145 = 4;
              if (v146 < v145)
              {
                v147 = (float *)((char *)v142->f32 + v134 * v146);
                do
                {
                  a32 = v51;
                  *v147 = *(float *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v146++ & 3)))
                        + (float)(v365 * *v147);
                  v147 = (float *)((char *)v147 + v134);
                }
                while (v145 != v146);
              }
            }
            v141 += 4;
            v142 = (float32x4_t *)((char *)v142 + v133);
          }
          while (v141 < v135);
        }
        v127 = v385 + 1024;
        v126 = v389 + 1;
        v48 = v393 + 512;
        v44 = (float32x4_t *)((char *)v381 + v360);
      }
      while (v385 + 1024 < v370);
      return;
    }
    if (v38 < 1)
      return;
    if ((unint64_t)v38 < 4)
    {
      if ((unint64_t)v38 < 2)
      {
        if (v39 >= 2)
        {
          v174 = 0.0;
          v324 = 2;
          v325 = (float *)v40;
          v173 = 0.0;
          v326 = v42;
          do
          {
            v173 = v173 + (float)(*v325 * *v326);
            v174 = v174 + (float)(v325[v41] * v326[v43]);
            v324 += 2;
            v326 += 2 * v43;
            v325 += 2 * v41;
          }
          while (v324 <= v39);
          v172 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v172 = 0;
          v173 = 0.0;
          v174 = 0.0;
        }
        if (v172 < v39)
          v173 = v173 + (float)(v40->f32[v172 * v41] * v42[v172 * v43]);
        v178 = v174 + v173;
        v179 = v44->f32[0] * *(float *)v47.i32;
        goto LABEL_194;
      }
      if (v38 == 2)
      {
        if (v39 >= 2)
        {
          v285 = 0;
          v346 = 2;
          v347 = v40;
          v284 = 0;
          v348 = v42;
          do
          {
            v284 = vmla_n_f32(v284, *v347, *v348);
            v285 = vmla_n_f32(v285, *(float32x2_t *)((char *)v347 + 4 * v41), v348[v43]);
            v346 += 2;
            v348 += 2 * v43;
            v347 += v41;
          }
          while (v346 <= v39);
          v283 = v39 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v283 = 0;
          v284 = 0;
          v285 = 0;
        }
        if (v283 < v39)
          v284 = vmla_n_f32(v284, *(float32x2_t *)((char *)v40 + 4 * v283 * v41), v42[v283 * v43]);
        v349 = 0;
        v350 = vmul_n_f32(vadd_f32(v285, v284), *(float *)&v49);
        do
        {
          a34 = v350;
          v44->f32[0] = *(float *)((unint64_t)&a34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v349++ & 1)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v349 != 2);
        return;
      }
      if (v39 >= 2)
      {
        v327 = v39 & 0xFFFFFFFFFFFFFFFELL;
        v331 = 0;
        v352 = 2;
        v353 = v40;
        v354 = v42;
        v330 = 0;
        v329 = 0;
        v328 = 0;
        v355 = v42;
        do
        {
          v356 = vld1_dup_f32(v355);
          v351 = 8 * v43;
          v355 = (const float *)((char *)v355 + v351);
          v331 = vmla_f32(v331, v356, *v353);
          v329 = vmla_f32(v329, v356, *(float32x2_t *)((char *)v353 + 4));
          v356.i32[0] = v354[v43];
          v328 = vmla_n_f32(v328, *(float32x2_t *)((char *)v353 + 4 * v41), v356.f32[0]);
          v330 = vmla_n_f32(v330, *(float32x2_t *)((char *)v353 + 4 * v41 + 4), v356.f32[0]);
          v352 += 2;
          v353 += v41;
          v354 = v355;
        }
        while (v352 <= v39);
      }
      else
      {
        v327 = 0;
        v328 = 0;
        v329 = 0;
        v330 = 0;
        v331 = 0;
      }
      if (v327 < v39)
      {
        v357 = 4 * v327 * v41;
        v358 = v42[v327 * v43];
        v331 = vmla_n_f32(v331, *(float32x2_t *)((char *)v40 + v357), v358);
        v329 = vmla_n_f32(v329, *(float32x2_t *)((char *)v40 + (v357 | 4)), v358);
      }
      v226 = (float32x2_t *)&v44->f32[v45];
      v44->f32[0] = vmul_n_f32(vadd_f32(v328, v331), *(float *)&v49).f32[0] + (float)(*(float *)v47.i32 * v44->f32[0]);
      v359 = vmul_n_f32(vadd_f32(v330, v329), *(float *)&v49);
      if (v45 != 1)
      {
        v226->f32[0] = v359.f32[0] + (float)(*(float *)v47.i32 * v226->f32[0]);
        v229 = v359.f32[1] + (float)(*(float *)v47.i32 * v226->f32[v45]);
        goto LABEL_248;
      }
      v273 = vmla_f32(v359, *v226, (float32x2_t)vdup_lane_s32(v47, 0));
      goto LABEL_311;
    }
    if (v38 == 4)
    {
      v50 = 4;
LABEL_344:
      if (v39 >= 2)
      {
        v310 = 0uLL;
        v319 = 2;
        v320 = (float32x4_t *)((char *)&v48[-2] + 4 * v50);
        v309 = 0uLL;
        v321 = v373;
        do
        {
          v309 = vmlaq_n_f32(v309, *v320, *v321);
          v310 = vmlaq_n_f32(v310, *(float32x4_t *)((char *)v320 + 4 * v41), v321[v43]);
          v319 += 2;
          v321 += 2 * v43;
          v320 = (float32x4_t *)((char *)v320 + 8 * v41);
        }
        while (v319 <= v39);
        v308 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v308 = 0;
        v309 = 0uLL;
        v310 = 0uLL;
      }
      if (v308 < v39)
        v309 = vmlaq_n_f32(v309, *(float32x4_t *)&v48[-2].f32[v50 + v308 * v41], v373[v308 * v43]);
      v322 = vmulq_n_f32(vaddq_f32(v310, v309), *(float *)&v49);
      v323 = 4 - v50;
      if (4 - v50 <= 3)
      {
        do
        {
          a35 = v322;
          v44->f32[0] = *(float *)((unint64_t)&a35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v323++ & 3)))
                      + (float)(*(float *)v47.i32 * v44->f32[0]);
          v44 = (float32x4_t *)((char *)v44 + 4 * v45);
        }
        while (v323 != 4);
      }
      return;
    }
    v287 = (float32x4_t)vdupq_lane_s32(v47, 0);
    v288 = 4 * v45;
    while (1)
    {
      if (v50 >= 8)
        v289 = 8;
      else
        v289 = v50;
      if (v39 >= 2)
      {
        v294 = 0uLL;
        v295 = (float32x4_t *)v48;
        v296 = v373;
        v297 = 2;
        v293 = 0uLL;
        v292 = 0uLL;
        v291 = 0uLL;
        v298 = v373;
        do
        {
          v299 = vld1q_dup_f32(v298);
          v286 = 8 * v43;
          v298 = (const float *)((char *)v298 + v286);
          v294 = vmlaq_f32(v294, v299, *v295);
          v292 = vmlaq_f32(v292, v299, *(float32x4_t *)((char *)v295 + 4 * v289 - 16));
          v299.i32[0] = v296[v43];
          v291 = vmlaq_n_f32(v291, *(float32x4_t *)((char *)v295 + 4 * v41), v299.f32[0]);
          v293 = vmlaq_n_f32(v293, *(float32x4_t *)((char *)v295 + 4 * v41 + 4 * v289 - 16), v299.f32[0]);
          v297 += 2;
          v295 = (float32x4_t *)((char *)v295 + 8 * v41);
          v296 = v298;
        }
        while (v297 <= v39);
        v290 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v290 = 0;
        v291 = 0uLL;
        v292 = 0uLL;
        v293 = 0uLL;
        v294 = 0uLL;
      }
      v300 = v289 - 4;
      if (v290 < v39)
      {
        v301 = v373[v290 * v43];
        v294 = vmlaq_n_f32(v294, *(float32x4_t *)&v48->f32[v290 * v41], v301);
        v292 = vmlaq_n_f32(v292, *(float32x4_t *)&v48->f32[v290 * v41 + v300], v301);
      }
      v302 = (float32x4_t *)((char *)v44 + 4 * v300 * v45);
      v303 = vmulq_n_f32(vaddq_f32(v291, v294), *(float *)&v49);
      if (v45 == 1 && v289 == 8)
      {
        *v44 = vmlaq_f32(v303, *v44, v287);
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
      }
      else
      {
        if (v289 >= 4)
          v305 = 0;
        else
          v305 = v289;
        if (v289 < 4)
          v300 = 4;
        if (v305 < v300)
        {
          v306 = (float *)((char *)v44->f32 + v288 * v305);
          do
          {
            a37 = v303;
            *v306 = *(float *)((unint64_t)&a37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v305++ & 3)))
                  + (float)(*(float *)v47.i32 * *v306);
            v306 = (float *)((char *)v306 + v288);
          }
          while (v300 != v305);
        }
        v304 = vmulq_n_f32(vaddq_f32(v293, v292), *(float *)&v49);
        if (v45 != 1)
        {
          for (k = 0; k != 4; ++k)
          {
            a36 = v304;
            v302->f32[0] = *(float *)((unint64_t)&a36 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)))
                         + (float)(*(float *)v47.i32 * v302->f32[0]);
            v302 = (float32x4_t *)((char *)v302 + v288);
          }
          goto LABEL_342;
        }
      }
      *v302 = vmlaq_f32(v304, *v302, v287);
LABEL_342:
      v48 = (float32x2_t *)((char *)v48 + 4 * v289);
      v44 = (float32x4_t *)((char *)v44 + 4 * v289 * v45);
      v50 -= v289;
      if (v50 <= 4)
      {
        if (v50 < 1)
          return;
        goto LABEL_344;
      }
    }
  }
  if (v38 >= 16 && v52 >= 0x2000)
  {
    v53 = 0;
    v54 = 0;
    v55 = -v41 & v41;
    if (v55 >= 4)
      v55 = 4;
    v56 = __clz(v55) - 61;
    v57 = (1 << v56);
    v398 = v43 << v56;
    v402 = v41 << v56;
    v394 = 4 * v43;
    v58 = 4 * v41;
    v59 = v39 - 1;
    v362 = v45 << 12;
    v60 = 16 * v45;
    v61 = 4 * v45;
    v366 = v44;
    do
    {
      v378 = v44;
      v382 = v54;
      if (v50 - v54 >= 1024)
        v62 = 1024;
      else
        v62 = v50 - v54;
      v374 = v50 - v54;
      if (v50 - v54 >= 1)
      {
        v63 = v50 - (v53 << 10);
        if (v63 >= 1024)
          v63 = 1024;
        bzero((void *)((unint64_t)&a38 | 0x10), 4 * (v63 - (v63 != 0)) + 4);
      }
      v386 = v53;
      v390 = v48;
      v64 = (uint64_t)v48;
      v65 = v373;
      v66 = v57;
      do
      {
        v67 = (v59 + v66) / v57;
        if (!v67)
          break;
        v51 = sub_20E854480(v62, v67, v64, v402, v65, v398, (unint64_t)&a38 | 0x10, v51);
        v65 = (float *)((char *)v65 + v394);
        v64 += v58;
        --v66;
      }
      while (v66);
      v50 = v370;
      if (v374 >= 1)
      {
        v68 = 0;
        v69 = v378;
        do
        {
          v70 = v62 - v68;
          v51 = vmulq_n_f32(*(float32x4_t *)(((unint64_t)&a38 | 0x10) + 4 * v68), *(float *)&vars0);
          if (v371 == 1 && v70 >= 4)
          {
            v71 = (float32x4_t *)((char *)v366 + 4 * v382 * v371 + 4 * v68);
            v51 = vaddq_f32(v51, *v71);
            *v71 = v51;
          }
          else
          {
            if (v70 >= 4)
              v72 = 4;
            else
              v72 = v62 - v68;
            v73 = (v72 + 4) & (v72 >> 63);
            if (v72 < 0)
              v72 = 4;
            if (v73 < v72)
            {
              v74 = (float *)((char *)v69->f32 + v61 * v73);
              do
              {
                a19 = v51;
                *v74 = *(float *)((unint64_t)&a19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v73++ & 3))) + *v74;
                v74 = (float *)((char *)v74 + v61);
              }
              while (v72 != v73);
            }
          }
          v68 += 4;
          v69 = (float32x4_t *)((char *)v69 + v60);
        }
        while (v68 < v62);
      }
      v54 = v382 + 1024;
      v53 = v386 + 1;
      v48 = v390 + 512;
      v44 = (float32x4_t *)((char *)v378 + v362);
    }
    while (v382 + 1024 < v370);
    return;
  }
  if (v38 < 1)
    return;
  if ((unint64_t)v38 < 4)
  {
    if ((unint64_t)v38 < 2)
    {
      if (v39 >= 2)
      {
        v98 = 0.0;
        v175 = 2;
        v176 = (float *)v40;
        v97 = 0.0;
        v177 = v42;
        do
        {
          v97 = v97 + (float)(*v176 * *v177);
          v98 = v98 + (float)(v176[v41] * v177[v43]);
          v175 += 2;
          v177 += 2 * v43;
          v176 += 2 * v41;
        }
        while (v175 <= v39);
        v96 = v39 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v96 = 0;
        v97 = 0.0;
        v98 = 0.0;
      }
      if (v96 < v39)
        v97 = v97 + (float)(v40->f32[v96 * v41] * v42[v96 * v43]);
      v178 = v98 + v97;
      v179 = v44->f32[0];
LABEL_194:
      v180 = v179 + (float)(*(float *)&v49 * v178);
LABEL_352:
      v44->f32[0] = v180;
      return;
    }
    if (v38 == 2)
    {
      sub_20E854788(-2, v39, v40, v41, v42, v43, (float32x2_t *)v44, v45, *(float *)&v49);
      return;
    }
    if (v39 >= 2)
    {
      v181 = v39 & 0xFFFFFFFFFFFFFFFELL;
      v185 = 0;
      v219 = 2;
      v220 = v40;
      v221 = v42;
      v184 = 0;
      v183 = 0;
      v182 = 0;
      v222 = v42;
      do
      {
        v223 = vld1_dup_f32(v222);
        v218 = 8 * v43;
        v222 = (const float *)((char *)v222 + v218);
        v185 = vmla_f32(v185, v223, *v220);
        v183 = vmla_f32(v183, v223, *(float32x2_t *)((char *)v220 + 4));
        v223.i32[0] = v221[v43];
        v182 = vmla_n_f32(v182, *(float32x2_t *)((char *)v220 + 4 * v41), v223.f32[0]);
        v184 = vmla_n_f32(v184, *(float32x2_t *)((char *)v220 + 4 * v41 + 4), v223.f32[0]);
        v219 += 2;
        v220 += v41;
        v221 = v222;
      }
      while (v219 <= v39);
    }
    else
    {
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v184 = 0;
      v185 = 0;
    }
    if (v181 < v39)
    {
      v224 = 4 * v181 * v41;
      v225 = v42[v181 * v43];
      v185 = vmla_n_f32(v185, *(float32x2_t *)((char *)v40 + v224), v225);
      v183 = vmla_n_f32(v183, *(float32x2_t *)((char *)v40 + (v224 | 4)), v225);
    }
    v226 = (float32x2_t *)&v44->f32[v45];
    v44->f32[0] = v44->f32[0] + vmul_n_f32(vadd_f32(v182, v185), *(float *)&v49).f32[0];
    v227 = vmul_n_f32(vadd_f32(v184, v183), *(float *)&v49);
    if (v45 == 1)
    {
      v228 = vadd_f32(v227, *v226);
LABEL_246:
      *v226 = v228;
      return;
    }
    v226->f32[0] = v227.f32[0] + v226->f32[0];
    v229 = v227.f32[1] + v226->f32[v45];
    goto LABEL_248;
  }
  if (v38 == 4)
  {
    v50 = 4;
    goto LABEL_174;
  }
  v149 = 4 * v45;
  do
  {
    if (v50 >= 8)
      v150 = 8;
    else
      v150 = v50;
    if (v39 >= 2)
    {
      v155 = 0uLL;
      v156 = (float32x4_t *)v48;
      v157 = v373;
      v158 = 2;
      v154 = 0uLL;
      v153 = 0uLL;
      v152 = 0uLL;
      v159 = v373;
      do
      {
        v160 = vld1q_dup_f32(v159);
        v148 = 8 * v43;
        v159 = (const float *)((char *)v159 + v148);
        v155 = vmlaq_f32(v155, v160, *v156);
        v153 = vmlaq_f32(v153, v160, *(float32x4_t *)((char *)v156 + 4 * v150 - 16));
        v160.i32[0] = v157[v43];
        v152 = vmlaq_n_f32(v152, *(float32x4_t *)((char *)v156 + 4 * v41), v160.f32[0]);
        v154 = vmlaq_n_f32(v154, *(float32x4_t *)((char *)v156 + 4 * v41 + 4 * v150 - 16), v160.f32[0]);
        v158 += 2;
        v156 = (float32x4_t *)((char *)v156 + 8 * v41);
        v157 = v159;
      }
      while (v158 <= v39);
      v151 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v151 = 0;
      v152 = 0uLL;
      v153 = 0uLL;
      v154 = 0uLL;
      v155 = 0uLL;
    }
    v161 = v150 - 4;
    if (v151 < v39)
    {
      v162 = v373[v151 * v43];
      v155 = vmlaq_n_f32(v155, *(float32x4_t *)&v48->f32[v151 * v41], v162);
      v153 = vmlaq_n_f32(v153, *(float32x4_t *)&v48->f32[v151 * v41 + v161], v162);
    }
    v163 = (float32x4_t *)((char *)v44 + 4 * v161 * v45);
    v164 = vmulq_n_f32(vaddq_f32(v152, v155), *(float *)&v49);
    if (v45 == 1 && v150 == 8)
    {
      *v44 = vaddq_f32(v164, *v44);
      v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
LABEL_169:
      *v163 = vaddq_f32(v165, *v163);
      goto LABEL_172;
    }
    if (v150 >= 4)
      v166 = 0;
    else
      v166 = v150;
    if (v150 < 4)
      v161 = 4;
    if (v166 < v161)
    {
      v167 = (float *)((char *)v44->f32 + v149 * v166);
      do
      {
        a21 = v164;
        *v167 = *(float *)((unint64_t)&a21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v166++ & 3))) + *v167;
        v167 = (float *)((char *)v167 + v149);
      }
      while (v161 != v166);
    }
    v165 = vmulq_n_f32(vaddq_f32(v154, v153), *(float *)&v49);
    if (v45 == 1)
      goto LABEL_169;
    for (m = 0; m != 4; ++m)
    {
      a20 = v165;
      v163->f32[0] = *(float *)((unint64_t)&a20 & 0xFFFFFFFFFFFFFFF3 | (4 * (m & 3))) + v163->f32[0];
      v163 = (float32x4_t *)((char *)v163 + v149);
    }
LABEL_172:
    v48 = (float32x2_t *)((char *)v48 + 4 * v150);
    v44 = (float32x4_t *)((char *)v44 + 4 * v150 * v45);
    v50 -= v150;
  }
  while (v50 > 4);
  if (v50 >= 1)
LABEL_174:
    sub_20E854370(-v50, v39, (float32x4_t *)((char *)&v48[-2] + 4 * v50), v41, v373, v43, (float32x4_t *)((char *)v44 + 4 * (v50 - 4) * v45), v45, *(float *)&v49);
}

uint64_t sub_20E84F68C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t a7, float _S0, float a9)
{
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t *v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  __int8 *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  float32x4_t *v60;
  float32x4_t *v61;
  float32x4_t *v62;
  float32x4_t v64;
  float32x4_t v66;
  float32x4_t v73;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  float32x4_t *v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t i;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __int8 *v103;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float v113;
  uint64_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t *v117;
  uint64_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t *v122;
  float32x4_t *v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float *v129;
  float32x4_t *v132;
  float32x4_t v133;
  float32x4_t *v134;
  float32x4_t *v135;
  uint64_t j;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x2_t v141;
  float32x2_t *v142;
  int8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  __int8 *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t *v172;
  float32x4_t *v173;
  float32x4_t *v174;
  float32x4_t *v175;
  float32x4_t *v176;
  float *v177;
  float32x4_t v178;
  float32x4_t v179;
  uint64_t v180;
  float32x4_t *v181;
  uint64_t v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;
  float32x4_t *v198;
  float32x4_t *v199;
  uint64_t k;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int8 *v207;
  float32x4_t v208;
  uint64_t v209;
  float32x4_t v210;
  int8x16_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  int8x16_t v216;
  float32x4_t *v217;
  uint64_t v218;
  float32x4_t *v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float *v229;
  float32x4_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  float32x4_t *v233;
  float32x4_t *v234;
  uint64_t m;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  float32x2_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  int8x16_t v244;
  float32x2_t v245;
  float32x2_t *v246;
  int8x16_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  uint64_t v263;
  __int8 *v264;
  uint64_t v265;
  float32x4_t *v266;
  uint64_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t *v275;
  float32x4_t *v276;
  float32x4_t *v277;
  float32x4_t *v278;
  float32x4_t *v279;
  float *v280;
  uint64_t v289;
  float32x4_t *v290;
  uint64_t v291;
  float32x4_t *v292;
  uint64_t v293;
  float32x4_t *v294;
  float32x4_t *v295;
  uint64_t v296;
  uint64_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t *v304;
  float32x4_t *v305;
  float32x4_t *v306;
  float32x4_t *v307;
  uint64_t n;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  __int8 *v315;
  float32x2_t v320;
  float32x2_t *v321;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t *v335;
  float32x4_t v336;
  float32x4_t v337;
  uint64_t v338;
  __int8 *v339;
  uint64_t v340;
  float32x4_t *v341;
  uint64_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t *v350;
  float32x4_t *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  float32x4_t *v354;
  float *v355;
  uint64_t v364;
  float32x4_t *v365;
  uint64_t v366;
  float32x4_t *v367;
  uint64_t v368;
  float32x4_t *v369;
  float32x4_t *v370;
  uint64_t v371;
  uint64_t v372;
  float32x4_t *v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t *v378;
  float32x4_t *v379;
  float32x4_t *v380;
  float32x4_t *v381;
  float32x4_t *v382;
  uint64_t jj;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  __int8 *v390;
  float32x4_t *v395;
  uint64_t v396;
  float32x4_t *v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t *v400;
  float32x4_t *v401;
  float32x4_t *v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float *v407;
  float32x4_t *v410;
  float32x4_t v411;
  float32x4_t *v412;
  float32x4_t *v413;
  uint64_t ii;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int8x16_t v418;
  char *v419;
  uint64_t v420;
  float32x4_t *v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t *v425;
  uint64_t kk;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float *v431;
  float32x4_t *v434;
  float32x4_t v435;
  float32x4_t *v436;
  float32x4_t *v437;
  uint64_t mm;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  float32x4_t *v449;
  float32x4_t *v450;
  float32x4_t *v451;
  float32x4_t *v452;
  uint64_t v453;
  uint64_t v454;

  v10 = a4;
  v11 = (float32x4_t *)a3;
  v12 = result;
  if (a9 == 1.0)
  {
    if (result > 3)
    {
      v15 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v16 = *(float32x4_t *)a5;
          do
          {
            v17 = (int8x16_t)vmulq_f32(v16, *v11);
            *a6 = *a6
                + (float)(_S0
                        * vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v29 = *(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (4 - (-(int)result & 3)));
        v453 = result;
        v445 = result - 4;
        v30 = 0;
        if (a2 >= 8)
        {
          v31 = 4 * a4;
          v449 = (float32x4_t *)(a5 + 4 * v15);
          v32 = v15 + 2 * a4;
          v33 = v15 + 4 * a4;
          v34 = 32 * a4;
          v35 = 4 * v15;
          v36 = 4 * (v15 + a4);
          v37 = 4 * v32;
          v38 = 4 * (v32 + a4);
          v39 = 4 * v33;
          v40 = 4 * (v33 + a4);
          v41 = 4 * (v15 + 6 * a4);
          v42 = 4 * (v15 - a4 + 8 * a4);
          v43 = v11;
          do
          {
            v44 = 0uLL;
            v45 = 0uLL;
            v46 = v10;
            v47 = &v11->i8[4 * v30 * v10];
            v48 = a5;
            v49 = v43;
            v50 = v453;
            v51 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            do
            {
              v57 = *(float32x4_t *)a5;
              a5 += 16;
              v44 = vmlaq_f32(v44, v57, *v49);
              v45 = vmlaq_f32(v45, v57, *(float32x4_t *)((char *)v49 + v31));
              v58 = (float32x4_t *)((char *)v49 + v31 + v31);
              v51 = vmlaq_f32(v51, v57, *v58);
              v59 = (float32x4_t *)((char *)v58 + v31);
              v56 = vmlaq_f32(v56, v57, *v59);
              v60 = (float32x4_t *)((char *)v59 + v31);
              v55 = vmlaq_f32(v55, v57, *v60);
              v61 = (float32x4_t *)((char *)v60 + v31);
              v54 = vmlaq_f32(v54, v57, *v61);
              v62 = (float32x4_t *)((char *)v61 + v31);
              v53 = vmlaq_f32(v53, v57, *v62);
              v52 = vmlaq_f32(v52, v57, *(float32x4_t *)((char *)v62 + v31));
              v50 -= 4;
              ++v49;
            }
            while (v50 > 4);
            result = (uint64_t)&a6[v30 * a7];
            _Q5 = vaddq_f32(v55, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v39])));
            v64 = vaddq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v40])));
            _Q3 = vaddq_f32(v53, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v41])));
            v66 = (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v42]));
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v35]))), vaddq_f32(v45, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v36])))), vpaddq_f32(vaddq_f32(v51, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v37]))), vaddq_f32(v56, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v449, *(float32x4_t *)&v47[v38])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q6.f32[0]);
            __asm { FMLA            S7, S0, V6.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S7;
            v73 = vpaddq_f32(_Q5, v64);
            __asm { FMLA            S7, S0, V6.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S7;
            __asm { FMLA            S5, S0, V6.S[3] }
            *(_DWORD *)(result + 12 * a7) = _Q5.i32[0];
            _Q2 = vpaddq_f32(v73, vpaddq_f32(_Q3, vaddq_f32(v52, v66)));
            *(float *)(result + 16 * a7) = vmlas_n_f32(*(float *)(result + 16 * a7), _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 20 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 24 * a7) = _Q3.i32[0];
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 28 * a7) = _Q3.i32[0];
            v30 += 8;
            v43 = (float32x4_t *)((char *)v43 + v34);
            v10 = v46;
            a5 = v48;
          }
          while ((v30 | 7) < a2);
        }
        if ((v30 | 3) >= a2)
        {
          v86 = v453;
          v76 = v445;
        }
        else
        {
          v76 = v445;
          v78 = v445 + 2 * v10;
          v79 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 12));
          v80 = 16 * v10;
          v81 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 8));
          v82 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v83 = 4 * v78;
          v84 = 4 * (v78 + v10);
          v85 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          v86 = v453;
          do
          {
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = (float32x4_t *)a5;
            v92 = v85;
            v93 = v82;
            v94 = v81;
            v95 = v79;
            for (i = v453; i > 4; i -= 4)
            {
              v97 = *v91++;
              v98 = v97;
              v99 = *v92++;
              v90 = vmlaq_f32(v90, v98, v99);
              v100 = *v93++;
              v89 = vmlaq_f32(v89, v98, v100);
              v101 = *v94++;
              v88 = vmlaq_f32(v88, v98, v101);
              v102 = *v95++;
              v87 = vmlaq_f32(v87, v98, v102);
            }
            v103 = &v11->i8[4 * v30 * v10];
            result = (uint64_t)&a6[v30 * a7];
            v77 = (float32x4_t *)(a5 + 4 * v445);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v90, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445]))), vaddq_f32(v89, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[4 * v445 + 4 * v10])))), vpaddq_f32(vaddq_f32(v88, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v83]))), vaddq_f32(v87, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*v77, *(float32x4_t *)&v103[v84])))));
            *(float *)result = vmlas_n_f32(*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v30 += 4;
            v79 = (float32x4_t *)((char *)v79 + v80);
            v81 = (float32x4_t *)((char *)v81 + v80);
            v82 = (float32x4_t *)((char *)v82 + v80);
            v85 = (float32x4_t *)((char *)v85 + v80);
          }
          while ((v30 | 3) < a2);
        }
        if ((v30 | 1) < a2)
        {
          v117 = (float32x4_t *)((char *)v11 + v10 * (4 * v30 + 4));
          v118 = 8 * v10;
          v119 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v120 = 0uLL;
            v121 = 0uLL;
            v122 = (float32x4_t *)a5;
            v123 = v119;
            v124 = v117;
            for (result = v86; result > 4; result -= 4)
            {
              v125 = *v122++;
              v126 = v125;
              v127 = *v123++;
              v121 = vmlaq_f32(v121, v126, v127);
              v128 = *v124++;
              v120 = vmlaq_f32(v120, v126, v128);
            }
            v129 = &a6[v30 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v121, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76)))), vaddq_f32(v120, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v129 = vmlas_n_f32(*v129, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v129[a7] = _S3;
            v30 += 2;
            v117 = (float32x4_t *)((char *)v117 + v118);
            v119 = (float32x4_t *)((char *)v119 + v118);
          }
          while ((v30 | 1) < a2);
        }
        if (v30 < a2)
        {
          v132 = (float32x4_t *)((char *)v11 + 4 * v30 * v10);
          do
          {
            v133 = 0uLL;
            v134 = (float32x4_t *)a5;
            v135 = v132;
            for (j = v86; j > 4; j -= 4)
            {
              v137 = *v134++;
              v138 = v137;
              v139 = *v135++;
              v133 = vmlaq_f32(v133, v138, v139);
            }
            v140 = (int8x16_t)vaddq_f32(v133, (float32x4_t)vandq_s8(v29, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v76), *(float32x4_t *)((char *)v11 + 4 * v30 * v10 + 4 * v76))));
            a6[v30 * a7] = a6[v30 * a7]
                         + (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v140.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL))));
            ++v30;
            v132 = (float32x4_t *)((char *)v132 + 4 * v10);
          }
          while (v30 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v19 = *(float32x4_t *)a5;
        v20 = *(float32x4_t *)(a5 + 4 * result - 16);
        v21 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (8 - result)));
        do
        {
          v22 = (int8x16_t)vaddq_f32(vmulq_f32(v20, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v19, *v11), v21));
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v18 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = *a6 + (float)(_S0 * vaddv_f32(vmul_f32(v18, *(float32x2_t *)v11->f32)));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v27 = *(float32x2_t *)(a5 + 4);
        v28 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = *a6
              + (float)(_S0
                      * vaddv_f32(vadd_f32(vmul_f32(v27, *v28), (float32x2_t)vmul_f32(v18, *(float32x2_t *)((char *)v28 - 4)).u32[0])));
          a6 += a7;
          v28 = (float32x2_t *)((char *)v28 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v13 = *(float *)a5;
      do
      {
        *a6 = *a6 + (float)(_S0 * (float)(v13 * v11->f32[0]));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 3)
    {
      v24 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v25 = *(float32x4_t *)a5;
          do
          {
            v26 = (int8x16_t)vmulq_f32(v25, *v11);
            *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL))) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * v10);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v143 = *(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (4 - (-(int)result & 3)));
        v454 = result;
        v446 = result - 4;
        v144 = 0;
        if (a2 >= 8)
        {
          v145 = 4 * v10;
          v450 = (float32x4_t *)(a5 + 4 * v24);
          v146 = v24 + 2 * v10;
          v147 = v24 + 4 * v10;
          v148 = 32 * v10;
          v149 = 4 * v24;
          v150 = 4 * (v24 + v10);
          v151 = 4 * v146;
          v152 = 4 * (v146 + v10);
          v153 = 4 * v147;
          v154 = 4 * (v147 + v10);
          v155 = 4 * (v24 + 6 * v10);
          v156 = 4 * (v24 - v10 + 8 * v10);
          v157 = v11;
          do
          {
            v158 = 0uLL;
            v159 = 0uLL;
            v160 = v10;
            v161 = &v11->i8[4 * v144 * v10];
            v162 = a5;
            v163 = v157;
            v164 = v454;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            v169 = 0uLL;
            v170 = 0uLL;
            do
            {
              v171 = *(float32x4_t *)a5;
              a5 += 16;
              v158 = vmlaq_f32(v158, v171, *v163);
              v159 = vmlaq_f32(v159, v171, *(float32x4_t *)((char *)v163 + v145));
              v172 = (float32x4_t *)((char *)v163 + v145 + v145);
              v165 = vmlaq_f32(v165, v171, *v172);
              v173 = (float32x4_t *)((char *)v172 + v145);
              v170 = vmlaq_f32(v170, v171, *v173);
              v174 = (float32x4_t *)((char *)v173 + v145);
              v169 = vmlaq_f32(v169, v171, *v174);
              v175 = (float32x4_t *)((char *)v174 + v145);
              v168 = vmlaq_f32(v168, v171, *v175);
              v176 = (float32x4_t *)((char *)v175 + v145);
              v167 = vmlaq_f32(v167, v171, *v176);
              v166 = vmlaq_f32(v166, v171, *(float32x4_t *)((char *)v176 + v145));
              v164 -= 4;
              ++v163;
            }
            while (v164 > 4);
            v177 = &a6[v144 * a7];
            v178 = vpaddq_f32(vpaddq_f32(vaddq_f32(v158, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v149]))), vaddq_f32(v159, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v150])))), vpaddq_f32(vaddq_f32(v165, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v151]))), vaddq_f32(v170, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v152])))));
            v179 = vpaddq_f32(vpaddq_f32(vaddq_f32(v169, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v153]))), vaddq_f32(v168, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v154])))), vpaddq_f32(vaddq_f32(v167, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v155]))), vaddq_f32(v166, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v450, *(float32x4_t *)&v161[v156])))));
            *v177 = _S0 * v178.f32[0];
            v177[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v178.f32, 1);
            v177[2 * a7] = vmuls_lane_f32(_S0, v178, 2);
            v177[3 * a7] = vmuls_lane_f32(_S0, v178, 3);
            v177[4 * a7] = _S0 * v179.f32[0];
            v177[5 * a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v179.f32, 1);
            v177[6 * a7] = vmuls_lane_f32(_S0, v179, 2);
            v177[7 * a7] = vmuls_lane_f32(_S0, v179, 3);
            v144 += 8;
            result = v144 | 7;
            v157 = (float32x4_t *)((char *)v157 + v148);
            v10 = v160;
            a5 = v162;
          }
          while ((v144 | 7) < a2);
        }
        if ((v144 | 3) >= a2)
        {
          v190 = v454;
          v180 = v446;
        }
        else
        {
          v180 = v446;
          v182 = v446 + 2 * v10;
          v183 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 12));
          v184 = 16 * v10;
          v185 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 8));
          v186 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v187 = 4 * v182;
          v188 = 4 * (v182 + v10);
          v189 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          v190 = v454;
          do
          {
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = (float32x4_t *)a5;
            v196 = v189;
            v197 = v186;
            v198 = v185;
            v199 = v183;
            for (k = v454; k > 4; k -= 4)
            {
              v201 = *v195++;
              v202 = v201;
              v203 = *v196++;
              v194 = vmlaq_f32(v194, v202, v203);
              v204 = *v197++;
              v193 = vmlaq_f32(v193, v202, v204);
              v205 = *v198++;
              v192 = vmlaq_f32(v192, v202, v205);
              v206 = *v199++;
              v191 = vmlaq_f32(v191, v202, v206);
            }
            v207 = &v11->i8[4 * v144 * v10];
            result = (uint64_t)&a6[v144 * a7];
            v181 = (float32x4_t *)(a5 + 4 * v446);
            v208 = vpaddq_f32(vpaddq_f32(vaddq_f32(v194, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446]))), vaddq_f32(v193, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[4 * v446 + 4 * v10])))), vpaddq_f32(vaddq_f32(v192, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v187]))), vaddq_f32(v191, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*v181, *(float32x4_t *)&v207[v188])))));
            *(float *)result = _S0 * v208.f32[0];
            *(float *)(result + 4 * a7) = vmuls_lane_f32(_S0, *(float32x2_t *)v208.f32, 1);
            *(float *)(result + 8 * a7) = vmuls_lane_f32(_S0, v208, 2);
            *(float *)(result + 12 * a7) = vmuls_lane_f32(_S0, v208, 3);
            v144 += 4;
            v183 = (float32x4_t *)((char *)v183 + v184);
            v185 = (float32x4_t *)((char *)v185 + v184);
            v186 = (float32x4_t *)((char *)v186 + v184);
            v189 = (float32x4_t *)((char *)v189 + v184);
          }
          while ((v144 | 3) < a2);
        }
        if ((v144 | 1) < a2)
        {
          v217 = (float32x4_t *)((char *)v11 + v10 * (4 * v144 + 4));
          v218 = 8 * v10;
          v219 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = (float32x4_t *)a5;
            v223 = v219;
            v224 = v217;
            for (result = v190; result > 4; result -= 4)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f32(v221, v226, v227);
              v228 = *v224++;
              v220 = vmlaq_f32(v220, v226, v228);
            }
            v229 = &a6[v144 * a7];
            v230 = vpaddq_f32(vaddq_f32(v221, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180)))), vaddq_f32(v220, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180 + 4 * v10)))));
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            *v229 = _S0 * v230.f32[0];
            v229[a7] = vmuls_lane_f32(_S0, *(float32x2_t *)v230.f32, 1);
            v144 += 2;
            v217 = (float32x4_t *)((char *)v217 + v218);
            v219 = (float32x4_t *)((char *)v219 + v218);
          }
          while ((v144 | 1) < a2);
        }
        if (v144 < a2)
        {
          v231 = (float32x4_t *)((char *)v11 + 4 * v144 * v10);
          do
          {
            v232 = 0uLL;
            v233 = (float32x4_t *)a5;
            v234 = v231;
            for (m = v190; m > 4; m -= 4)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f32(v232, v237, v238);
            }
            v239 = (int8x16_t)vaddq_f32(v232, (float32x4_t)vandq_s8(v143, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v180), *(float32x4_t *)((char *)v11 + 4 * v144 * v10 + 4 * v180))));
            a6[v144 * a7] = vaddv_f32(vadd_f32(*(float32x2_t *)v239.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL)))* _S0;
            ++v144;
            v231 = (float32x4_t *)((char *)v231 + 4 * v10);
          }
          while (v144 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v109 = *(float32x4_t *)a5;
        v110 = *(float32x4_t *)(a5 + 4 * result - 16);
        v111 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (8 - result)));
        do
        {
          v112 = (int8x16_t)vaddq_f32(vmulq_f32(v110, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v109, *v11), v111));
          *a6 = vaddv_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL))) * _S0;
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * v10);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v108 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = vaddv_f32(vmul_f32(v108, *(float32x2_t *)v11->f32)) * _S0;
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v141 = *(float32x2_t *)(a5 + 4);
        v142 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = vaddv_f32(vadd_f32(vmul_f32(v141, *v142), (float32x2_t)vmul_f32(v108, *(float32x2_t *)((char *)v142 - 4)).u32[0]))* _S0;
          a6 += a7;
          v142 = (float32x2_t *)((char *)v142 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v14 = *(float *)a5;
      do
      {
        *a6 = (float)(v14 * v11->f32[0]) * _S0;
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 3)
    {
      v114 = result - 4;
      if (result == 4)
      {
        if (a2 >= 1)
        {
          v115 = *(float32x4_t *)a5;
          do
          {
            v116 = (int8x16_t)vmulq_f32(v115, *v11);
            *a6 = -(float)(*a6
                         - (float)(_S0
                                 * vaddv_f32(vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL)))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 8)
      {
        v247 = *(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (4 - (-(int)result & 3)));
        v443 = result - 4;
        v248 = 0;
        if (a2 >= 8)
        {
          v249 = 4 * a4;
          v451 = (float32x4_t *)(a5 + 4 * v114);
          v250 = v114 + 2 * a4;
          v251 = v114 + 4 * a4;
          v447 = 32 * a4;
          v252 = 4 * v114;
          v253 = 4 * (v114 + a4);
          v254 = 4 * v250;
          v255 = 4 * (v250 + a4);
          v256 = 4 * v251;
          v257 = 4 * (v251 + a4);
          v258 = 4 * (v114 + 6 * a4);
          v259 = 4 * (v114 - a4 + 8 * a4);
          v260 = v11;
          do
          {
            v261 = 0uLL;
            v262 = 0uLL;
            v263 = v10;
            v264 = &v11->i8[4 * v248 * v10];
            v265 = a5;
            v266 = v260;
            v267 = v12;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            v272 = 0uLL;
            v273 = 0uLL;
            do
            {
              v274 = *(float32x4_t *)a5;
              a5 += 16;
              v261 = vmlaq_f32(v261, v274, *v266);
              v262 = vmlaq_f32(v262, v274, *(float32x4_t *)((char *)v266 + v249));
              v275 = (float32x4_t *)((char *)v266 + v249 + v249);
              v268 = vmlaq_f32(v268, v274, *v275);
              v276 = (float32x4_t *)((char *)v275 + v249);
              v273 = vmlaq_f32(v273, v274, *v276);
              v277 = (float32x4_t *)((char *)v276 + v249);
              v272 = vmlaq_f32(v272, v274, *v277);
              v278 = (float32x4_t *)((char *)v277 + v249);
              v271 = vmlaq_f32(v271, v274, *v278);
              v279 = (float32x4_t *)((char *)v278 + v249);
              v270 = vmlaq_f32(v270, v274, *v279);
              v269 = vmlaq_f32(v269, v274, *(float32x4_t *)((char *)v279 + v249));
              v267 -= 4;
              ++v266;
            }
            while (v267 > 4);
            v280 = &a6[v248 * a7];
            _Q6 = vpaddq_f32(vpaddq_f32(vaddq_f32(v261, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v252]))), vaddq_f32(v262, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v253])))), vpaddq_f32(vaddq_f32(v268, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v254]))), vaddq_f32(v273, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v255])))));
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v272, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v256]))), vaddq_f32(v271, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v257])))), vpaddq_f32(vaddq_f32(v270, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v258]))), vaddq_f32(v269, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v451, *(float32x4_t *)&v264[v259])))));
            *v280 = vmlas_n_f32(-*v280, _S0, _Q6.f32[0]);
            __asm { FMLA            S3, S0, V6.S[1] }
            v280[a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[2] }
            v280[2 * a7] = _S3;
            __asm { FMLA            S3, S0, V6.S[3] }
            v280[3 * a7] = _S3;
            v280[4 * a7] = vmlas_n_f32(-v280[4 * a7], _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v280[5 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            v280[6 * a7] = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            v280[7 * a7] = _S3;
            v248 += 8;
            result = v248 | 7;
            v260 = (float32x4_t *)((char *)v260 + v447);
            v10 = v263;
            a5 = v265;
          }
          while ((v248 | 7) < a2);
        }
        if ((v248 | 3) >= a2)
        {
          v289 = v443;
        }
        else
        {
          v289 = v443;
          v291 = v443 + 2 * v10;
          v292 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 12));
          v293 = 16 * v10;
          v294 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 8));
          v295 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v296 = 4 * v291;
          v297 = 4 * (v291 + v10);
          v298 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = 0uLL;
            if (v12 >= 5)
            {
              v303 = (float32x4_t *)a5;
              v304 = v298;
              v305 = v295;
              v306 = v294;
              v307 = v292;
              for (n = v12; n > 4; n -= 4)
              {
                v309 = *v303++;
                v310 = v309;
                v311 = *v304++;
                v302 = vmlaq_f32(v302, v310, v311);
                v312 = *v305++;
                v301 = vmlaq_f32(v301, v310, v312);
                v313 = *v306++;
                v300 = vmlaq_f32(v300, v310, v313);
                v314 = *v307++;
                v299 = vmlaq_f32(v299, v310, v314);
              }
            }
            v315 = &v11->i8[4 * v248 * v10];
            result = (uint64_t)&a6[v248 * a7];
            v290 = (float32x4_t *)(a5 + 4 * v443);
            _Q2 = vpaddq_f32(vpaddq_f32(vaddq_f32(v302, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443]))), vaddq_f32(v301, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[4 * v443 + 4 * v10])))), vpaddq_f32(vaddq_f32(v300, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v296]))), vaddq_f32(v299, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*v290, *(float32x4_t *)&v315[v297])))));
            *(float *)result = vmlas_n_f32(-*(float *)result, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            *(_DWORD *)(result + 4 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[2] }
            *(_DWORD *)(result + 8 * a7) = _S3;
            __asm { FMLA            S3, S0, V2.S[3] }
            *(_DWORD *)(result + 12 * a7) = _S3;
            v248 += 4;
            v292 = (float32x4_t *)((char *)v292 + v293);
            v294 = (float32x4_t *)((char *)v294 + v293);
            v295 = (float32x4_t *)((char *)v295 + v293);
            v298 = (float32x4_t *)((char *)v298 + v293);
          }
          while ((v248 | 3) < a2);
        }
        if ((v248 | 1) < a2)
        {
          v395 = (float32x4_t *)((char *)v11 + v10 * (4 * v248 + 4));
          v396 = 8 * v10;
          v397 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v398 = 0uLL;
            v399 = 0uLL;
            if (v12 >= 5)
            {
              v400 = (float32x4_t *)a5;
              v401 = v397;
              v402 = v395;
              for (result = v12; result > 4; result -= 4)
              {
                v403 = *v400++;
                v404 = v403;
                v405 = *v401++;
                v399 = vmlaq_f32(v399, v404, v405);
                v406 = *v402++;
                v398 = vmlaq_f32(v398, v404, v406);
              }
            }
            v407 = &a6[v248 * a7];
            _Q2 = vpaddq_f32(vaddq_f32(v399, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289)))), vaddq_f32(v398, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289 + 4 * v10)))));
            _Q2.i64[0] = vpaddq_f32(_Q2, _Q2).u64[0];
            *v407 = vmlas_n_f32(-*v407, _S0, _Q2.f32[0]);
            __asm { FMLA            S3, S0, V2.S[1] }
            v407[a7] = _S3;
            v248 += 2;
            v395 = (float32x4_t *)((char *)v395 + v396);
            v397 = (float32x4_t *)((char *)v397 + v396);
          }
          while ((v248 | 1) < a2);
        }
        if (v248 < a2)
        {
          v410 = (float32x4_t *)((char *)v11 + 4 * v248 * v10);
          do
          {
            v411 = 0uLL;
            if (v12 >= 5)
            {
              v412 = (float32x4_t *)a5;
              v413 = v410;
              for (ii = v12; ii > 4; ii -= 4)
              {
                v415 = *v412++;
                v416 = v415;
                v417 = *v413++;
                v411 = vmlaq_f32(v411, v416, v417);
              }
            }
            v418 = (int8x16_t)vaddq_f32(v411, (float32x4_t)vandq_s8(v247, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v289), *(float32x4_t *)((char *)v11 + 4 * v248 * v10 + 4 * v289))));
            a6[v248 * a7] = -(float)(a6[v248 * a7]
                                   - (float)(_S0
                                           * vaddv_f32(vadd_f32(*(float32x2_t *)v418.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL)))));
            ++v248;
            v410 = (float32x4_t *)((char *)v410 + 4 * v10);
          }
          while (v248 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v213 = *(float32x4_t *)a5;
        v214 = *(float32x4_t *)(a5 + 4 * result - 16);
        v215 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (8 - result)));
        do
        {
          v216 = (int8x16_t)vaddq_f32(vmulq_f32(v214, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v213, *v11), v215));
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL)))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (result > 1)
    {
      v212 = *(float32x2_t *)a5;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          do
          {
            *a6 = -(float)(*a6 - (float)(_S0 * vaddv_f32(vmul_f32(v212, *(float32x2_t *)v11->f32))));
            a6 += a7;
            v11 = (float32x4_t *)((char *)v11 + 4 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v245 = *(float32x2_t *)(a5 + 4);
        v246 = (float32x2_t *)(a3 + 4);
        do
        {
          *a6 = -(float)(*a6
                       - (float)(_S0
                               * vaddv_f32(vadd_f32(vmul_f32(v245, *v246), (float32x2_t)vmul_f32(v212, *(float32x2_t *)((char *)v246 - 4)).u32[0]))));
          a6 += a7;
          v246 = (float32x2_t *)((char *)v246 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v23 = *(float *)a5;
      do
      {
        *a6 = -(float)(*a6 - (float)(_S0 * (float)(v23 * v11->f32[0])));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 3)
  {
    v209 = result - 4;
    if (result == 4)
    {
      if (a2 >= 1)
      {
        v210 = *(float32x4_t *)a5;
        do
        {
          v211 = (int8x16_t)vmulq_f32(v210, *v11);
          *a6 = (float)(*a6 * a9)
              + (float)(_S0
                      * vaddv_f32(vadd_f32(*(float32x2_t *)v211.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL))));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 8)
    {
      v322 = *(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (4 - (-(int)result & 3)));
      v323 = 4 * a4;
      v444 = result - 4;
      v324 = 0;
      if (a2 >= 8)
      {
        v452 = (float32x4_t *)(a5 + 4 * v209);
        v325 = v209 + 2 * a4;
        v326 = v209 + 4 * a4;
        v448 = 32 * a4;
        v327 = 4 * v209;
        v328 = 4 * (v209 + a4);
        v329 = 4 * v325;
        v330 = 4 * (v325 + a4);
        v331 = 4 * v326;
        v332 = 4 * (v326 + a4);
        v333 = 4 * (v209 + 6 * a4);
        v334 = 4 * (v209 - a4 + 8 * a4);
        v335 = v11;
        do
        {
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = v10;
          v339 = &v11->i8[4 * v324 * v10];
          v340 = a5;
          v341 = v335;
          v342 = v12;
          v343 = 0uLL;
          v344 = 0uLL;
          v345 = 0uLL;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          do
          {
            v349 = *(float32x4_t *)a5;
            a5 += 16;
            v336 = vmlaq_f32(v336, v349, *v341);
            v337 = vmlaq_f32(v337, v349, *(float32x4_t *)((char *)v341 + v323));
            v350 = (float32x4_t *)((char *)v341 + v323 + v323);
            v343 = vmlaq_f32(v343, v349, *v350);
            v351 = (float32x4_t *)((char *)v350 + v323);
            v348 = vmlaq_f32(v348, v349, *v351);
            v352 = (float32x4_t *)((char *)v351 + v323);
            v347 = vmlaq_f32(v347, v349, *v352);
            v353 = (float32x4_t *)((char *)v352 + v323);
            v346 = vmlaq_f32(v346, v349, *v353);
            v354 = (float32x4_t *)((char *)v353 + v323);
            v345 = vmlaq_f32(v345, v349, *v354);
            v344 = vmlaq_f32(v344, v349, *(float32x4_t *)((char *)v354 + v323));
            v342 -= 4;
            ++v341;
          }
          while (v342 > 4);
          v355 = &a6[v324 * a7];
          _Q7 = vpaddq_f32(vpaddq_f32(vaddq_f32(v336, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v327]))), vaddq_f32(v337, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v328])))), vpaddq_f32(vaddq_f32(v343, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v329]))), vaddq_f32(v348, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v330])))));
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v347, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v331]))), vaddq_f32(v346, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v332])))), vpaddq_f32(vaddq_f32(v345, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v333]))), vaddq_f32(v344, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v452, *(float32x4_t *)&v339[v334])))));
          *v355 = vmlas_n_f32(*v355 * a9, _S0, _Q7.f32[0]);
          __asm { FMLA            S4, S0, V7.S[1] }
          v355[a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[2] }
          v355[2 * a7] = _S4;
          __asm { FMLA            S4, S0, V7.S[3] }
          v355[3 * a7] = _S4;
          v355[4 * a7] = vmlas_n_f32(v355[4 * a7] * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v355[5 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          v355[6 * a7] = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          v355[7 * a7] = _S4;
          v324 += 8;
          result = v324 | 7;
          v335 = (float32x4_t *)((char *)v335 + v448);
          v10 = v338;
          a5 = v340;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v364 = v444;
      }
      else
      {
        v364 = v444;
        v366 = v444 + 2 * v10;
        v367 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 12));
        v368 = 16 * v10;
        v369 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 8));
        v370 = (float32x4_t *)((char *)v11 + v10 * (4 * v324 + 4));
        v371 = 4 * v366;
        v372 = 4 * (v366 + v10);
        v373 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v374 = 0uLL;
          v375 = 0uLL;
          v376 = 0uLL;
          v377 = 0uLL;
          if (v12 >= 5)
          {
            v378 = (float32x4_t *)a5;
            v379 = v373;
            v380 = v370;
            v381 = v369;
            v382 = v367;
            for (jj = v12; jj > 4; jj -= 4)
            {
              v384 = *v378++;
              v385 = v384;
              v386 = *v379++;
              v377 = vmlaq_f32(v377, v385, v386);
              v387 = *v380++;
              v376 = vmlaq_f32(v376, v385, v387);
              v388 = *v381++;
              v375 = vmlaq_f32(v375, v385, v388);
              v389 = *v382++;
              v374 = vmlaq_f32(v374, v385, v389);
            }
          }
          v390 = &v11->i8[4 * v324 * v10];
          result = (uint64_t)&a6[v324 * a7];
          v365 = (float32x4_t *)(a5 + 4 * v444);
          _Q3 = vpaddq_f32(vpaddq_f32(vaddq_f32(v377, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444]))), vaddq_f32(v376, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[4 * v444 + 4 * v10])))), vpaddq_f32(vaddq_f32(v375, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v371]))), vaddq_f32(v374, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*v365, *(float32x4_t *)&v390[v372])))));
          *(float *)result = vmlas_n_f32(*(float *)result * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          *(_DWORD *)(result + 4 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[2] }
          *(_DWORD *)(result + 8 * a7) = _S4;
          __asm { FMLA            S4, S0, V3.S[3] }
          *(_DWORD *)(result + 12 * a7) = _S4;
          v324 += 4;
          v367 = (float32x4_t *)((char *)v367 + v368);
          v369 = (float32x4_t *)((char *)v369 + v368);
          v370 = (float32x4_t *)((char *)v370 + v368);
          v373 = (float32x4_t *)((char *)v373 + v368);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v419 = (char *)v11 + v10 * (4 * v324 + 4);
        v420 = 8 * v10;
        v421 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v422 = 0uLL;
          v423 = 0uLL;
          if (v12 >= 5)
          {
            v424 = (float32x4_t *)a5;
            v425 = v421;
            result = (uint64_t)v419;
            for (kk = v12; kk > 4; kk -= 4)
            {
              v427 = *v424++;
              v428 = v427;
              v429 = *v425++;
              v423 = vmlaq_f32(v423, v428, v429);
              v430 = *(float32x4_t *)result;
              result += 16;
              v422 = vmlaq_f32(v422, v428, v430);
            }
          }
          v431 = &a6[v324 * a7];
          _Q3 = vpaddq_f32(vaddq_f32(v423, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364)))), vaddq_f32(v422, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364 + 4 * v10)))));
          _Q3.i64[0] = vpaddq_f32(_Q3, _Q3).u64[0];
          *v431 = vmlas_n_f32(*v431 * a9, _S0, _Q3.f32[0]);
          __asm { FMLA            S4, S0, V3.S[1] }
          v431[a7] = _S4;
          v324 += 2;
          v419 += v420;
          v421 = (float32x4_t *)((char *)v421 + v420);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v434 = (float32x4_t *)((char *)v11 + 4 * v324 * v10);
        do
        {
          v435 = 0uLL;
          if (v12 >= 5)
          {
            v436 = (float32x4_t *)a5;
            v437 = v434;
            for (mm = v12; mm > 4; mm -= 4)
            {
              v439 = *v436++;
              v440 = v439;
              v441 = *v437++;
              v435 = vmlaq_f32(v435, v440, v441);
            }
          }
          v442 = (int8x16_t)vaddq_f32(v435, (float32x4_t)vandq_s8(v322, (int8x16_t)vmulq_f32(*(float32x4_t *)(a5 + 4 * v364), *(float32x4_t *)((char *)v11 + 4 * v324 * v10 + 4 * v364))));
          a6[v324 * a7] = (float)(a6[v324 * a7] * a9)
                        + (float)(_S0
                                * vaddv_f32(vadd_f32(*(float32x2_t *)v442.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v442, v442, 8uLL))));
          ++v324;
          v434 = (float32x4_t *)((char *)v434 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v241 = *(float32x4_t *)a5;
      v242 = *(float32x4_t *)(a5 + 4 * result - 16);
      v243 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C40 + 4 * (8 - result)));
      do
      {
        v244 = (int8x16_t)vaddq_f32(vmulq_f32(v242, *(float32x4_t *)((char *)v11 + 4 * result - 16)), (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v241, *v11), v243));
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(*(float32x2_t *)v244.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL))));
        a6 += a7;
        v11 = (float32x4_t *)((char *)v11 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v240 = *(float32x2_t *)a5;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        do
        {
          *a6 = (float)(*a6 * a9) + (float)(_S0 * vaddv_f32(vmul_f32(v240, *(float32x2_t *)v11->f32)));
          a6 += a7;
          v11 = (float32x4_t *)((char *)v11 + 4 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v320 = *(float32x2_t *)(a5 + 4);
      v321 = (float32x2_t *)(a3 + 4);
      do
      {
        *a6 = (float)(*a6 * a9)
            + (float)(_S0
                    * vaddv_f32(vadd_f32(vmul_f32(v320, *v321), (float32x2_t)vmul_f32(v240, *(float32x2_t *)((char *)v321 - 4)).u32[0])));
        a6 += a7;
        v321 = (float32x2_t *)((char *)v321 + 4 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v113 = *(float *)a5;
    do
    {
      *a6 = (float)(*a6 * a9) + (float)(_S0 * (float)(v113 * v11->f32[0]));
      a6 += a7;
      v11 = (float32x4_t *)((char *)v11 + 4 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

void sub_20E8513CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,float64x2_t a23,float64x2_t a24,float64x2_t a25,float64x2_t a26,float64x2_t a27,float64x2_t a28,float64x2_t a29,float64x2_t a30,float64x2_t a31,float64x2_t a32,float64x2_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  float64x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  float64x2_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  uint64_t v67;
  double *v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float64x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  int64_t v90;
  double v91;
  double v92;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  uint64_t v111;
  float64x2_t *v112;
  uint64_t v113;
  uint64_t v114;
  double *v115;
  int64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t *v127;
  float64_t *v128;
  uint64_t v129;
  const double *v130;
  float64x2_t v131;
  uint64_t v132;
  double v133;
  float64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  uint64_t v137;
  double *v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float64x2_t *v154;
  uint64_t v155;
  float64x2_t *v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  uint64_t v160;
  double *v161;
  double *v162;
  double v163;
  double v164;
  double v165;
  int64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t *v177;
  float64_t *v178;
  uint64_t v179;
  const double *v180;
  float64x2_t v181;
  uint64_t v182;
  double v183;
  float64x2_t *v184;
  float64x2_t v185;
  float64x2_t v186;
  uint64_t v187;
  _QWORD *v188;
  int64_t v189;
  double v190;
  double v191;
  uint64_t v192;
  double *v193;
  double *v194;
  int64_t v195;
  float64x2_t v196;
  float64x2_t v197;
  uint64_t v198;
  float64x2_t *v199;
  double *v200;
  float64x2_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t *v211;
  float64_t *v212;
  uint64_t v213;
  const double *v214;
  float64x2_t v215;
  uint64_t v216;
  double v217;
  float64x2_t *v218;
  float64x2_t v219;
  float64x2_t v220;
  uint64_t v221;
  double *v222;
  uint64_t v223;
  float64x2_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t *v232;
  float64_t *v233;
  uint64_t v234;
  const double *v235;
  float64x2_t v236;
  uint64_t v237;
  double v238;
  float64x2_t *v239;
  float64x2_t v240;
  float64x2_t v241;
  uint64_t v242;
  double *v243;
  uint64_t v244;
  double *v245;
  double *v246;
  int64_t v247;
  float64x2_t v248;
  float64x2_t v249;
  uint64_t v250;
  float64x2_t *v251;
  double *v252;
  float64x2_t v253;
  uint64_t v254;
  uint64_t v255;
  double *v256;
  double *v257;
  int64_t v258;
  float64x2_t v259;
  float64x2_t v260;
  uint64_t v261;
  float64x2_t *v262;
  double *v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  float64x2_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  float64x2_t *vars8;
  float64x2_t *vars8a;
  float64x2_t *vars8b;
  float64x2_t *vars8c;
  uint64_t v276;
  uint64_t v277;
  double v278;
  double *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float64x2_t *v284;
  float64x2_t *v285;
  float64x2_t *v286;
  float64x2_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;

  v34 = MEMORY[0x24BDAC7A8]();
  v279 = v38;
  v43 = (uint64_t)v36;
  v44 = v46.f64[0];
  v45 = v34;
  STACK[0x11D8] = *MEMORY[0x24BDAC8D0];
  v46.f64[0] = 1.0;
  v47 = v35 * v34;
  v278 = v44;
  v276 = v34;
  v277 = v41;
  if (*(double *)&v42 == 1.0)
  {
    if (v34 >= 8 && v47 >= 0x1000)
    {
      v48 = 0;
      v49 = 0;
      v50 = -v37 & v37;
      if (v50 >= 2)
        v50 = 2;
      v51 = __clz(v50) - 62;
      v52 = (1 << v51);
      v304 = v39 << v51;
      v308 = v37 << v51;
      v300 = 8 * v39;
      v53 = 8 * v37;
      v54 = v35 - 1;
      v268 = v41 << 12;
      v55 = 16 * v41;
      v56 = 8 * v41;
      vars8 = v40;
      do
      {
        v284 = v40;
        v288 = v49;
        if (v45 - v49 >= 512)
          v57 = 512;
        else
          v57 = v45 - v49;
        v280 = v45 - v49;
        if (v45 - v49 >= 1)
        {
          v58 = v45 - (v48 << 9);
          if (v58 >= 512)
            v58 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v58 - (v58 != 0)) + 8);
        }
        v292 = v48;
        v296 = v43;
        v59 = v279;
        v60 = v52;
        do
        {
          v61 = (v54 + v60) / v52;
          if (!v61)
            break;
          v46 = sub_20E8549A8(v57, v61, v43, v308, v59, v304, (unint64_t)&a34 | 0x10, v46);
          v59 = (double *)((char *)v59 + v300);
          v43 += v53;
          --v60;
        }
        while (v60);
        v45 = v276;
        if (v280 >= 1)
        {
          v62 = 0;
          v63 = v284;
          do
          {
            v64 = v57 - v62;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v62), v278);
            if (v277 == 1 && v64 >= 2)
            {
              v65 = (float64x2_t *)((char *)vars8 + 8 * v288 * v277 + 8 * v62);
              v46 = vaddq_f64(v46, *v65);
              *v65 = v46;
            }
            else
            {
              if (v64 >= 2)
                v66 = 2;
              else
                v66 = v57 - v62;
              v67 = (v66 + 2) & (v66 >> 63);
              if (v66 < 0)
                v66 = 2;
              if (v67 < v66)
              {
                v68 = (double *)((char *)v63->f64 + v56 * v67);
                do
                {
                  a23 = v46;
                  *v68 = *(double *)((unint64_t)&a23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v67++ & 1))) + *v68;
                  v68 = (double *)((char *)v68 + v56);
                }
                while (v66 != v67);
              }
            }
            v62 += 2;
            v63 = (float64x2_t *)((char *)v63 + v55);
          }
          while (v62 < v57);
        }
        v49 = v288 + 512;
        v48 = v292 + 1;
        v43 = v296 + 4096;
        v40 = (float64x2_t *)((char *)v284 + v268);
      }
      while (v288 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v92 = 0.0;
        v160 = 2;
        v161 = v36;
        v91 = 0.0;
        v162 = v38;
        do
        {
          v91 = v91 + *v161 * *v162;
          v92 = v92 + v161[v37] * v162[v39];
          v160 += 2;
          v162 += 2 * v39;
          v161 += 2 * v37;
        }
        while (v160 <= v35);
        v90 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v90 = 0;
        v91 = 0.0;
        v92 = 0.0;
      }
      if (v90 < v35)
        v91 = v91 + v36[v90 * v37] * v38[v90 * v39];
      v163 = v92 + v91;
      v164 = v40->f64[0];
LABEL_175:
      v165 = v164 + v44 * v163;
LABEL_296:
      v40->f64[0] = v165;
      return;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
      goto LABEL_177;
    }
    v120 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v121 = 4;
      else
        v121 = v45;
      if (v35 >= 2)
      {
        v126 = 0uLL;
        v127 = (float64x2_t *)v43;
        v128 = v279;
        v129 = 2;
        v125 = 0uLL;
        v124 = 0uLL;
        v123 = 0uLL;
        v130 = v279;
        do
        {
          v131 = vld1q_dup_f64(v130);
          v119 = 16 * v39;
          v130 = (const double *)((char *)v130 + v119);
          v126 = vmlaq_f64(v126, v131, *v127);
          v124 = vmlaq_f64(v124, v131, *(float64x2_t *)((char *)v127 + 8 * v121 - 16));
          v131.f64[0] = v128[v39];
          v123 = vmlaq_n_f64(v123, *(float64x2_t *)((char *)v127 + 8 * v37), v131.f64[0]);
          v125 = vmlaq_n_f64(v125, *(float64x2_t *)((char *)v127 + 8 * v37 + 8 * v121 - 16), v131.f64[0]);
          v129 += 2;
          v127 += v37;
          v128 = (float64_t *)v130;
        }
        while (v129 <= v35);
        v122 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v122 = 0;
        v123 = 0uLL;
        v124 = 0uLL;
        v125 = 0uLL;
        v126 = 0uLL;
      }
      v132 = v121 - 2;
      if (v122 < v35)
      {
        v133 = v279[v122 * v39];
        v126 = vmlaq_n_f64(v126, *(float64x2_t *)(v43 + 8 * v122 * v37), v133);
        v124 = vmlaq_n_f64(v124, *(float64x2_t *)(v43 + 8 * (v122 * v37 + v132)), v133);
      }
      v134 = (float64x2_t *)((char *)v40 + 8 * v132 * v41);
      v135 = vmulq_n_f64(vaddq_f64(v123, v126), v44);
      if (v41 == 1 && v121 == 4)
      {
        *v40 = vaddq_f64(v135, *v40);
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
      }
      else
      {
        if (v121 >= 2)
          v137 = 0;
        else
          v137 = v121;
        if (v121 < 2)
          v132 = 2;
        if (v137 < v132)
        {
          v138 = (double *)((char *)v40->f64 + v120 * v137);
          do
          {
            a24 = v135;
            *v138 = *(double *)((unint64_t)&a24 & 0xFFFFFFFFFFFFFFF7 | (8 * (v137++ & 1))) + *v138;
            v138 = (double *)((char *)v138 + v120);
          }
          while (v132 != v137);
        }
        v136 = vmulq_n_f64(vaddq_f64(v125, v124), v44);
        if (v41 != 1)
        {
          v134->f64[0] = v136.f64[0] + v134->f64[0];
          v134->f64[v41] = v136.f64[1] + v134->f64[v41];
          goto LABEL_136;
        }
      }
      *v134 = vaddq_f64(v136, *v134);
LABEL_136:
      v43 += 8 * v121;
      v40 = (float64x2_t *)((char *)v40 + 8 * v121 * v41);
      v45 -= v121;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
LABEL_177:
        sub_20E854898(-v45, v35, (float64x2_t *)(v43 + 8 * (v45 - 2)), v37, v279, v39, (float64x2_t *)((char *)v40 + 8 * (v45 - 2) * v41), v41, v44);
        return;
      }
    }
  }
  v69 = *(double *)&v42;
  if (*(double *)&v42 != 0.0)
  {
    v94 = v34 > 7 && v47 > 0xFFF;
    v46.f64[0] = -1.0;
    if (*(double *)&v42 == -1.0)
    {
      if (v94)
      {
        v95 = 0;
        v96 = 0;
        v97 = -v37 & v37;
        if (v97 >= 2)
          v97 = 2;
        v98 = __clz(v97) - 62;
        v99 = (1 << v98);
        v306 = v39 << v98;
        v310 = v37 << v98;
        v302 = 8 * v39;
        v100 = 8 * v37;
        v101 = v35 - 1;
        v270 = v41 << 12;
        v102 = 16 * v41;
        v103 = 8 * v41;
        vars8b = v40;
        do
        {
          v286 = v40;
          v290 = v96;
          if (v45 - v96 >= 512)
            v104 = 512;
          else
            v104 = v45 - v96;
          v282 = v45 - v96;
          if (v45 - v96 >= 1)
          {
            v105 = v45 - (v95 << 9);
            if (v105 >= 512)
              v105 = 512;
            bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v105 - (v105 != 0)) + 8);
          }
          v294 = v95;
          v298 = v43;
          v106 = v279;
          v107 = v99;
          do
          {
            v108 = (v101 + v107) / v99;
            if (!v108)
              break;
            v46 = sub_20E8549A8(v104, v108, v43, v310, v106, v306, (unint64_t)&a34 | 0x10, v46);
            v106 = (double *)((char *)v106 + v302);
            v43 += v100;
            --v107;
          }
          while (v107);
          v45 = v276;
          if (v282 >= 1)
          {
            v109 = 0;
            v110 = v286;
            do
            {
              v111 = v104 - v109;
              v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v109), v278);
              if (v277 == 1 && v111 >= 2)
              {
                v112 = (float64x2_t *)((char *)vars8b + 8 * v290 * v277 + 8 * v109);
                v46 = vsubq_f64(v46, *v112);
                *v112 = v46;
              }
              else
              {
                if (v111 >= 2)
                  v113 = 2;
                else
                  v113 = v104 - v109;
                v114 = (v113 + 2) & (v113 >> 63);
                if (v113 < 0)
                  v113 = 2;
                if (v114 < v113)
                {
                  v115 = (double *)((char *)v110->f64 + v103 * v114);
                  do
                  {
                    a28 = v46;
                    *v115 = *(double *)((unint64_t)&a28 & 0xFFFFFFFFFFFFFFF7 | (8 * (v114++ & 1))) - *v115;
                    v115 = (double *)((char *)v115 + v103);
                  }
                  while (v113 != v114);
                }
              }
              v109 += 2;
              v110 = (float64x2_t *)((char *)v110 + v102);
            }
            while (v109 < v104);
          }
          v96 = v290 + 512;
          v95 = v294 + 1;
          v43 = v298 + 4096;
          v40 = (float64x2_t *)((char *)v286 + v270);
        }
        while (v290 + 512 < v276);
        return;
      }
      if (v34 < 1)
        return;
      if (v34 == 1)
      {
        if (v35 >= 2)
        {
          v168 = 0.0;
          v244 = 2;
          v245 = v36;
          v167 = 0.0;
          v246 = v38;
          do
          {
            v167 = v167 + *v245 * *v246;
            v168 = v168 + v245[v37] * v246[v39];
            v244 += 2;
            v246 += 2 * v39;
            v245 += 2 * v37;
          }
          while (v244 <= v35);
          v166 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v166 = 0;
          v167 = 0.0;
          v168 = 0.0;
        }
        if (v166 < v35)
          v167 = v167 + v36[v166 * v37] * v38[v166 * v39];
        v165 = -(v40->f64[0] - v44 * (v168 + v167));
        goto LABEL_296;
      }
      if ((unint64_t)v34 < 3)
      {
        v45 = 2;
LABEL_299:
        if (v35 >= 2)
        {
          v249 = 0uLL;
          v250 = 2;
          v251 = (float64x2_t *)(v43 + 8 * (v45 - 2));
          v248 = 0uLL;
          v252 = v279;
          do
          {
            v248 = vmlaq_n_f64(v248, *v251, *v252);
            v249 = vmlaq_n_f64(v249, *(float64x2_t *)((char *)v251 + 8 * v37), v252[v39]);
            v250 += 2;
            v252 += 2 * v39;
            v251 += v37;
          }
          while (v250 <= v35);
          v247 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v247 = 0;
          v248 = 0uLL;
          v249 = 0uLL;
        }
        if (v247 < v35)
          v248 = vmlaq_n_f64(v248, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v247 * v37), v279[v247 * v39]);
        v253 = vmulq_n_f64(vaddq_f64(v249, v248), v44);
        v254 = 2 - v45;
        if (2 - v45 <= 1)
        {
          do
          {
            a29 = v253;
            v40->f64[0] = *(double *)((unint64_t)&a29 & 0xFFFFFFFFFFFFFFF7 | (8 * (v254++ & 1))) - v40->f64[0];
            v40 = (float64x2_t *)((char *)v40 + 8 * v41);
          }
          while (v254 != 2);
        }
        return;
      }
      v204 = 8 * v41;
      while (1)
      {
        if (v45 >= 4)
          v205 = 4;
        else
          v205 = v45;
        if (v35 >= 2)
        {
          v210 = 0uLL;
          v211 = (float64x2_t *)v43;
          v212 = v279;
          v213 = 2;
          v209 = 0uLL;
          v208 = 0uLL;
          v207 = 0uLL;
          v214 = v279;
          do
          {
            v215 = vld1q_dup_f64(v214);
            v203 = 16 * v39;
            v214 = (const double *)((char *)v214 + v203);
            v210 = vmlaq_f64(v210, v215, *v211);
            v208 = vmlaq_f64(v208, v215, *(float64x2_t *)((char *)v211 + 8 * v205 - 16));
            v215.f64[0] = v212[v39];
            v207 = vmlaq_n_f64(v207, *(float64x2_t *)((char *)v211 + 8 * v37), v215.f64[0]);
            v209 = vmlaq_n_f64(v209, *(float64x2_t *)((char *)v211 + 8 * v37 + 8 * v205 - 16), v215.f64[0]);
            v213 += 2;
            v211 += v37;
            v212 = (float64_t *)v214;
          }
          while (v213 <= v35);
          v206 = v35 & 0xFFFFFFFFFFFFFFFELL;
        }
        else
        {
          v206 = 0;
          v207 = 0uLL;
          v208 = 0uLL;
          v209 = 0uLL;
          v210 = 0uLL;
        }
        v216 = v205 - 2;
        if (v206 < v35)
        {
          v217 = v279[v206 * v39];
          v210 = vmlaq_n_f64(v210, *(float64x2_t *)(v43 + 8 * v206 * v37), v217);
          v208 = vmlaq_n_f64(v208, *(float64x2_t *)(v43 + 8 * (v206 * v37 + v216)), v217);
        }
        v218 = (float64x2_t *)((char *)v40 + 8 * v216 * v41);
        v219 = vmulq_n_f64(vaddq_f64(v207, v210), v44);
        if (v41 == 1 && v205 == 4)
        {
          *v40 = vsubq_f64(v219, *v40);
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
        }
        else
        {
          if (v205 >= 2)
            v221 = 0;
          else
            v221 = v205;
          if (v205 < 2)
            v216 = 2;
          if (v221 < v216)
          {
            v222 = (double *)((char *)v40->f64 + v204 * v221);
            do
            {
              a30 = v219;
              *v222 = *(double *)((unint64_t)&a30 & 0xFFFFFFFFFFFFFFF7 | (8 * (v221++ & 1))) - *v222;
              v222 = (double *)((char *)v222 + v204);
            }
            while (v216 != v221);
          }
          v220 = vmulq_n_f64(vaddq_f64(v209, v208), v44);
          if (v41 != 1)
          {
            v218->f64[0] = v220.f64[0] - v218->f64[0];
            v218->f64[v41] = v220.f64[1] - v218->f64[v41];
            goto LABEL_258;
          }
        }
        *v218 = vsubq_f64(v220, *v218);
LABEL_258:
        v43 += 8 * v205;
        v40 = (float64x2_t *)((char *)v40 + 8 * v205 * v41);
        v45 -= v205;
        if (v45 <= 2)
        {
          if (v45 < 1)
            return;
          goto LABEL_299;
        }
      }
    }
    if (v94)
    {
      v139 = 0;
      v140 = 0;
      v141 = -v37 & v37;
      if (v141 >= 2)
        v141 = 2;
      v142 = __clz(v141) - 62;
      v143 = (1 << v142);
      v307 = v39 << v142;
      v311 = v37 << v142;
      v303 = 8 * v39;
      v144 = 8 * v37;
      v145 = v35 - 1;
      v266 = v41 << 12;
      v146 = 16 * v41;
      v147 = 8 * v41;
      vars8c = v40;
      v267 = (float64x2_t)vdupq_lane_s64(v42, 0);
      v271 = *(double *)&v42;
      do
      {
        v287 = v40;
        v291 = v140;
        if (v45 - v140 >= 512)
          v148 = 512;
        else
          v148 = v45 - v140;
        v283 = v45 - v140;
        if (v45 - v140 >= 1)
        {
          v149 = v45 - (v139 << 9);
          if (v149 >= 512)
            v149 = 512;
          bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v149 - (v149 != 0)) + 8);
        }
        v295 = v139;
        v299 = v43;
        v150 = v279;
        v151 = v143;
        do
        {
          v152 = (v145 + v151) / v143;
          if (!v152)
            break;
          v46 = sub_20E8549A8(v148, v152, v43, v311, v150, v307, (unint64_t)&a34 | 0x10, v46);
          v150 = (double *)((char *)v150 + v303);
          v43 += v144;
          --v151;
        }
        while (v151);
        v45 = v276;
        if (v283 >= 1)
        {
          v153 = 0;
          v154 = v287;
          do
          {
            v155 = v148 - v153;
            v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v153), v278);
            if (v277 == 1 && v155 >= 2)
            {
              v156 = (float64x2_t *)((char *)vars8c + 8 * v291 * v277 + 8 * v153);
              v46 = vmlaq_f64(v46, *v156, v267);
              *v156 = v46;
            }
            else
            {
              if (v155 >= 2)
                v157 = 2;
              else
                v157 = v148 - v153;
              v158 = (v157 + 2) & (v157 >> 63);
              if (v157 < 0)
                v157 = 2;
              if (v158 < v157)
              {
                v159 = (double *)((char *)v154->f64 + v147 * v158);
                do
                {
                  a31 = v46;
                  *v159 = *(double *)((unint64_t)&a31 & 0xFFFFFFFFFFFFFFF7 | (8 * (v158++ & 1))) + v271 * *v159;
                  v159 = (double *)((char *)v159 + v147);
                }
                while (v157 != v158);
              }
            }
            v153 += 2;
            v154 = (float64x2_t *)((char *)v154 + v146);
          }
          while (v153 < v148);
        }
        v140 = v291 + 512;
        v139 = v295 + 1;
        v43 = v299 + 4096;
        v40 = (float64x2_t *)((char *)v287 + v266);
      }
      while (v291 + 512 < v276);
      return;
    }
    if (v34 < 1)
      return;
    if (v34 == 1)
    {
      if (v35 >= 2)
      {
        v191 = 0.0;
        v255 = 2;
        v256 = v36;
        v190 = 0.0;
        v257 = v38;
        do
        {
          v190 = v190 + *v256 * *v257;
          v191 = v191 + v256[v37] * v257[v39];
          v255 += 2;
          v257 += 2 * v39;
          v256 += 2 * v37;
        }
        while (v255 <= v35);
        v189 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v189 = 0;
        v190 = 0.0;
        v191 = 0.0;
      }
      if (v189 < v35)
        v190 = v190 + v36[v189 * v37] * v38[v189 * v39];
      v163 = v191 + v190;
      v164 = v40->f64[0] * v69;
      goto LABEL_175;
    }
    if ((unint64_t)v34 < 3)
    {
      v45 = 2;
LABEL_316:
      if (v35 >= 2)
      {
        v260 = 0uLL;
        v261 = 2;
        v262 = (float64x2_t *)(v43 + 8 * (v45 - 2));
        v259 = 0uLL;
        v263 = v279;
        do
        {
          v259 = vmlaq_n_f64(v259, *v262, *v263);
          v260 = vmlaq_n_f64(v260, *(float64x2_t *)((char *)v262 + 8 * v37), v263[v39]);
          v261 += 2;
          v263 += 2 * v39;
          v262 += v37;
        }
        while (v261 <= v35);
        v258 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v258 = 0;
        v259 = 0uLL;
        v260 = 0uLL;
      }
      if (v258 < v35)
        v259 = vmlaq_n_f64(v259, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v258 * v37), v279[v258 * v39]);
      v264 = vmulq_n_f64(vaddq_f64(v260, v259), v44);
      v265 = 2 - v45;
      if (2 - v45 <= 1)
      {
        do
        {
          a32 = v264;
          v40->f64[0] = *(double *)((unint64_t)&a32 & 0xFFFFFFFFFFFFFFF7 | (8 * (v265++ & 1)))
                      + v69 * v40->f64[0];
          v40 = (float64x2_t *)((char *)v40 + 8 * v41);
        }
        while (v265 != 2);
      }
      return;
    }
    v224 = (float64x2_t)vdupq_lane_s64(v42, 0);
    v225 = 8 * v41;
    while (1)
    {
      if (v45 >= 4)
        v226 = 4;
      else
        v226 = v45;
      if (v35 >= 2)
      {
        v231 = 0uLL;
        v232 = (float64x2_t *)v43;
        v233 = v279;
        v234 = 2;
        v230 = 0uLL;
        v229 = 0uLL;
        v228 = 0uLL;
        v235 = v279;
        do
        {
          v236 = vld1q_dup_f64(v235);
          v223 = 16 * v39;
          v235 = (const double *)((char *)v235 + v223);
          v231 = vmlaq_f64(v231, v236, *v232);
          v229 = vmlaq_f64(v229, v236, *(float64x2_t *)((char *)v232 + 8 * v226 - 16));
          v236.f64[0] = v233[v39];
          v228 = vmlaq_n_f64(v228, *(float64x2_t *)((char *)v232 + 8 * v37), v236.f64[0]);
          v230 = vmlaq_n_f64(v230, *(float64x2_t *)((char *)v232 + 8 * v37 + 8 * v226 - 16), v236.f64[0]);
          v234 += 2;
          v232 += v37;
          v233 = (float64_t *)v235;
        }
        while (v234 <= v35);
        v227 = v35 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v227 = 0;
        v228 = 0uLL;
        v229 = 0uLL;
        v230 = 0uLL;
        v231 = 0uLL;
      }
      v237 = v226 - 2;
      if (v227 < v35)
      {
        v238 = v279[v227 * v39];
        v231 = vmlaq_n_f64(v231, *(float64x2_t *)(v43 + 8 * v227 * v37), v238);
        v229 = vmlaq_n_f64(v229, *(float64x2_t *)(v43 + 8 * (v227 * v37 + v237)), v238);
      }
      v239 = (float64x2_t *)((char *)v40 + 8 * v237 * v41);
      v240 = vmulq_n_f64(vaddq_f64(v228, v231), v44);
      if (v41 == 1 && v226 == 4)
      {
        *v40 = vmlaq_f64(v240, *v40, v224);
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
      }
      else
      {
        if (v226 >= 2)
          v242 = 0;
        else
          v242 = v226;
        if (v226 < 2)
          v237 = 2;
        if (v242 < v237)
        {
          v243 = (double *)((char *)v40->f64 + v225 * v242);
          do
          {
            a33 = v240;
            *v243 = *(double *)((unint64_t)&a33 & 0xFFFFFFFFFFFFFFF7 | (8 * (v242++ & 1))) + v69 * *v243;
            v243 = (double *)((char *)v243 + v225);
          }
          while (v237 != v242);
        }
        v241 = vmulq_n_f64(vaddq_f64(v230, v229), v44);
        if (v41 != 1)
        {
          v239->f64[0] = v241.f64[0] + v69 * v239->f64[0];
          v239->f64[v41] = v241.f64[1] + v69 * v239->f64[v41];
          goto LABEL_287;
        }
      }
      *v239 = vmlaq_f64(v241, *v239, v224);
LABEL_287:
      v43 += 8 * v226;
      v40 = (float64x2_t *)((char *)v40 + 8 * v226 * v41);
      v45 -= v226;
      if (v45 <= 2)
      {
        if (v45 < 1)
          return;
        goto LABEL_316;
      }
    }
  }
  if (v34 >= 8 && v47 >= 0x1000)
  {
    v70 = 0;
    v71 = 0;
    v72 = -v37 & v37;
    if (v72 >= 2)
      v72 = 2;
    v73 = __clz(v72) - 62;
    v74 = (1 << v73);
    v305 = v39 << v73;
    v309 = v37 << v73;
    v301 = 8 * v39;
    v75 = 8 * v37;
    v76 = v35 - 1;
    v269 = v41 << 12;
    v77 = 16 * v41;
    v78 = 8 * v41;
    vars8a = v40;
    do
    {
      v285 = v40;
      v289 = v71;
      if (v45 - v71 >= 512)
        v79 = 512;
      else
        v79 = v45 - v71;
      v281 = v45 - v71;
      if (v45 - v71 >= 1)
      {
        v80 = v45 - (v70 << 9);
        if (v80 >= 512)
          v80 = 512;
        bzero((void *)((unint64_t)&a34 | 0x10), 8 * (v80 - (v80 != 0)) + 8);
      }
      v293 = v70;
      v297 = v43;
      v81 = v279;
      v82 = v74;
      do
      {
        v83 = (v76 + v82) / v74;
        if (!v83)
          break;
        v46 = sub_20E8549A8(v79, v83, v43, v309, v81, v305, (unint64_t)&a34 | 0x10, v46);
        v81 = (double *)((char *)v81 + v301);
        v43 += v75;
        --v82;
      }
      while (v82);
      v45 = v276;
      if (v281 >= 1)
      {
        v84 = 0;
        v85 = v285;
        do
        {
          v86 = v79 - v84;
          v46 = vmulq_n_f64(*(float64x2_t *)(((unint64_t)&a34 | 0x10) + 8 * v84), v278);
          if (v277 == 1 && v86 >= 2)
          {
            *(float64x2_t *)((char *)vars8a + 8 * v289 * v277 + 8 * v84) = v46;
          }
          else
          {
            if (v86 >= 2)
              v87 = 2;
            else
              v87 = v79 - v84;
            v88 = (v87 + 2) & (v87 >> 63);
            if (v87 < 0)
              v87 = 2;
            if (v88 < v87)
            {
              v89 = (_QWORD *)((char *)v85->f64 + v78 * v88);
              do
              {
                a25 = v46;
                *v89 = *(_QWORD *)((unint64_t)&a25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v88++ & 1)));
                v89 = (_QWORD *)((char *)v89 + v78);
              }
              while (v87 != v88);
            }
          }
          v84 += 2;
          v85 = (float64x2_t *)((char *)v85 + v77);
        }
        while (v84 < v79);
      }
      v71 = v289 + 512;
      v70 = v293 + 1;
      v43 = v297 + 4096;
      v40 = (float64x2_t *)((char *)v285 + v269);
    }
    while (v289 + 512 < v276);
    return;
  }
  if (v34 < 1)
    return;
  if (v34 == 1)
  {
    if (v35 >= 2)
    {
      v118 = 0.0;
      v192 = 2;
      v193 = v36;
      v117 = 0.0;
      v194 = v38;
      do
      {
        v117 = v117 + *v193 * *v194;
        v118 = v118 + v193[v37] * v194[v39];
        v192 += 2;
        v194 += 2 * v39;
        v193 += 2 * v37;
      }
      while (v192 <= v35);
      v116 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v116 = 0;
      v117 = 0.0;
      v118 = 0.0;
    }
    if (v116 < v35)
      v117 = v117 + v36[v116 * v37] * v38[v116 * v39];
    v165 = (v118 + v117) * v44;
    goto LABEL_296;
  }
  if ((unint64_t)v34 < 3)
  {
    v45 = 2;
    goto LABEL_222;
  }
  v170 = 8 * v41;
  do
  {
    if (v45 >= 4)
      v171 = 4;
    else
      v171 = v45;
    if (v35 >= 2)
    {
      v176 = 0uLL;
      v177 = (float64x2_t *)v43;
      v178 = v279;
      v179 = 2;
      v175 = 0uLL;
      v174 = 0uLL;
      v173 = 0uLL;
      v180 = v279;
      do
      {
        v181 = vld1q_dup_f64(v180);
        v169 = 16 * v39;
        v180 = (const double *)((char *)v180 + v169);
        v176 = vmlaq_f64(v176, v181, *v177);
        v174 = vmlaq_f64(v174, v181, *(float64x2_t *)((char *)v177 + 8 * v171 - 16));
        v181.f64[0] = v178[v39];
        v173 = vmlaq_n_f64(v173, *(float64x2_t *)((char *)v177 + 8 * v37), v181.f64[0]);
        v175 = vmlaq_n_f64(v175, *(float64x2_t *)((char *)v177 + 8 * v37 + 8 * v171 - 16), v181.f64[0]);
        v179 += 2;
        v177 += v37;
        v178 = (float64_t *)v180;
      }
      while (v179 <= v35);
      v172 = v35 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v172 = 0;
      v173 = 0uLL;
      v174 = 0uLL;
      v175 = 0uLL;
      v176 = 0uLL;
    }
    v182 = v171 - 2;
    if (v172 < v35)
    {
      v183 = v279[v172 * v39];
      v176 = vmlaq_n_f64(v176, *(float64x2_t *)(v43 + 8 * v172 * v37), v183);
      v174 = vmlaq_n_f64(v174, *(float64x2_t *)(v43 + 8 * (v172 * v37 + v182)), v183);
    }
    v184 = (float64x2_t *)((char *)v40 + 8 * v182 * v41);
    v185 = vmulq_n_f64(vaddq_f64(v173, v176), v44);
    if (v41 == 1 && v171 == 4)
    {
      *v40 = v185;
      v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
LABEL_206:
      *v184 = v186;
      goto LABEL_208;
    }
    if (v171 >= 2)
      v187 = 0;
    else
      v187 = v171;
    if (v171 < 2)
      v182 = 2;
    if (v187 < v182)
    {
      v188 = (_QWORD *)((char *)v40->f64 + v170 * v187);
      do
      {
        a27 = v185;
        *v188 = *(_QWORD *)((unint64_t)&a27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v187++ & 1)));
        v188 = (_QWORD *)((char *)v188 + v170);
      }
      while (v182 != v187);
    }
    v186 = vmulq_n_f64(vaddq_f64(v175, v174), v44);
    if (v41 == 1)
      goto LABEL_206;
    v184->f64[0] = v186.f64[0];
    v184->f64[v41] = v186.f64[1];
LABEL_208:
    v43 += 8 * v171;
    v40 = (float64x2_t *)((char *)v40 + 8 * v171 * v41);
    v45 -= v171;
  }
  while (v45 > 2);
  if (v45 < 1)
    return;
LABEL_222:
  if (v35 >= 2)
  {
    v197 = 0uLL;
    v198 = 2;
    v199 = (float64x2_t *)(v43 + 8 * (v45 - 2));
    v196 = 0uLL;
    v200 = v279;
    do
    {
      v196 = vmlaq_n_f64(v196, *v199, *v200);
      v197 = vmlaq_n_f64(v197, *(float64x2_t *)((char *)v199 + 8 * v37), v200[v39]);
      v198 += 2;
      v200 += 2 * v39;
      v199 += v37;
    }
    while (v198 <= v35);
    v195 = v35 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v195 = 0;
    v196 = 0uLL;
    v197 = 0uLL;
  }
  if (v195 < v35)
    v196 = vmlaq_n_f64(v196, *(float64x2_t *)(v43 + 8 * (v45 - 2) + 8 * v195 * v37), v279[v195 * v39]);
  v201 = vmulq_n_f64(vaddq_f64(v197, v196), v44);
  v202 = 2 - v45;
  if (2 - v45 <= 1)
  {
    do
    {
      a26 = v201;
      v40->f64[0] = *(float64_t *)((unint64_t)&a26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v202++ & 1)));
      v40 = (float64x2_t *)((char *)v40 + 8 * v41);
    }
    while (v202 != 2);
  }
}

uint64_t sub_20E852960(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, float64x2_t *a5, double *a6, uint64_t a7, double _D0, double a9)
{
  uint64_t v9;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int8x16_t v17;
  double v18;
  uint64_t v19;
  float64x2_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  char *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  double *v60;
  float64x2_t v61;
  int8x16_t v63;
  uint64_t v73;
  float64x2_t *v74;
  uint64_t v75;
  float64x2_t *v76;
  uint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t *v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  uint64_t i;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  char *v100;
  double *v101;
  float64x2_t v103;
  float64x2_t v107;
  float64x2_t v108;
  int8x16_t v109;
  double v110;
  uint64_t v111;
  float64x2_t v112;
  char *v113;
  uint64_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t *v118;
  float64x2_t *v119;
  uint64_t j;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double *v125;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t *v130;
  float64x2_t *v131;
  uint64_t k;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  int8x16_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v153;
  uint64_t v154;
  char *v155;
  float64x2_t *v156;
  float64x2_t *v157;
  float64x2_t *v158;
  uint64_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t *v167;
  float64x2_t *v168;
  float64x2_t *v169;
  float64x2_t *v170;
  float64x2_t *v171;
  double *v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  uint64_t v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t *v180;
  uint64_t v181;
  float64x2_t *v182;
  float64x2_t *v183;
  uint64_t v184;
  uint64_t v185;
  float64x2_t *v186;
  uint64_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t *v192;
  float64x2_t *v193;
  float64x2_t *v194;
  float64x2_t *v195;
  float64x2_t *v196;
  uint64_t m;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  char *v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  double *v209;
  float64x2_t v210;
  float64x2_t v211;
  uint64_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  char *v217;
  uint64_t v218;
  float64x2_t *v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t *v222;
  float64x2_t *v223;
  uint64_t n;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double *v229;
  float64x2_t v230;
  float64x2_t *v231;
  float64x2_t v232;
  float64x2_t *v233;
  float64x2_t *v234;
  uint64_t ii;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  int8x16_t v241;
  int8x16_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  float64x2_t *v257;
  float64x2_t v258;
  float64x2_t v259;
  uint64_t v260;
  char *v261;
  float64x2_t *v262;
  float64x2_t *v263;
  float64x2_t *v264;
  uint64_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t *v273;
  float64x2_t *v274;
  float64x2_t *v275;
  float64x2_t *v276;
  float64x2_t *v277;
  double *v278;
  uint64_t v287;
  float64x2_t *v288;
  uint64_t v289;
  float64x2_t *v290;
  uint64_t v291;
  float64x2_t *v292;
  float64x2_t *v293;
  uint64_t v294;
  uint64_t v295;
  float64x2_t *v296;
  uint64_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t *v302;
  float64x2_t *v303;
  float64x2_t *v304;
  float64x2_t *v305;
  float64x2_t *v306;
  uint64_t jj;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  char *v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v318;
  double *v319;
  int8x16_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  float64x2_t *v337;
  float64x2_t v338;
  float64x2_t v339;
  uint64_t v340;
  char *v341;
  float64x2_t *v342;
  float64x2_t *v343;
  float64x2_t *v344;
  uint64_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t *v353;
  float64x2_t *v354;
  float64x2_t *v355;
  float64x2_t *v356;
  float64x2_t *v357;
  double *v358;
  uint64_t v367;
  float64x2_t *v368;
  uint64_t v369;
  float64x2_t *v370;
  uint64_t v371;
  float64x2_t *v372;
  float64x2_t *v373;
  uint64_t v374;
  uint64_t v375;
  float64x2_t *v376;
  uint64_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t *v382;
  float64x2_t *v383;
  float64x2_t *v384;
  float64x2_t *v385;
  float64x2_t *v386;
  uint64_t nn;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  char *v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v398;
  double *v399;
  char *v402;
  uint64_t v403;
  float64x2_t *v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t *v407;
  float64x2_t *v408;
  uint64_t kk;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double *v414;
  float64x2_t *v417;
  float64x2_t v418;
  float64x2_t *v419;
  float64x2_t *v420;
  uint64_t mm;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  char *v425;
  uint64_t v426;
  float64x2_t *v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t *v430;
  float64x2_t *v431;
  uint64_t i1;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  double *v437;
  float64x2_t *v440;
  float64x2_t v441;
  float64x2_t *v442;
  float64x2_t *v443;
  uint64_t i2;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  float64x2_t *v452;
  float64x2_t *v453;
  float64x2_t *v454;
  float64x2_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;

  v9 = a4;
  if (a9 == 1.0)
  {
    if (result > 1)
    {
      v13 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v14 = *a5;
          do
          {
            *a6 = *a6 + _D0 * vaddvq_f64(vmulq_f64(v14, *a3));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * a4);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v21 = *(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (2 - (result & 1)));
        v456 = result;
        v448 = result - 2;
        v22 = 0;
        if (a2 >= 8)
        {
          v23 = 8 * a4;
          v452 = (float64x2_t *)((char *)a5 + 8 * v13);
          v24 = v13 + 2 * a4;
          v25 = v13 + 4 * a4;
          v26 = v25 + a4;
          v27 = a4 << 6;
          v28 = 8 * v13;
          v29 = 8 * (v13 + a4);
          v30 = 8 * v24;
          v31 = 8 * (v24 + a4);
          v32 = 8 * v25;
          v33 = 8 * v26;
          v34 = 8 * (v13 + 6 * a4);
          v35 = 8 * (7 * a4 + v13);
          v36 = a3;
          do
          {
            v37 = 0uLL;
            v38 = 0uLL;
            v39 = v9;
            v40 = (char *)&a3->f64[v22 * v9];
            v41 = a5;
            v42 = a5;
            v43 = v36;
            v44 = v456;
            v45 = 0uLL;
            v46 = 0uLL;
            v47 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v50 = 0uLL;
            do
            {
              v51 = *v42++;
              v37 = vmlaq_f64(v37, v51, *v43);
              v38 = vmlaq_f64(v38, v51, *(float64x2_t *)((char *)v43 + v23));
              v52 = (float64x2_t *)((char *)v43 + v23 + v23);
              v45 = vmlaq_f64(v45, v51, *v52);
              v53 = (float64x2_t *)((char *)v52 + v23);
              v50 = vmlaq_f64(v50, v51, *v53);
              v54 = (float64x2_t *)((char *)v53 + v23);
              v49 = vmlaq_f64(v49, v51, *v54);
              v55 = (float64x2_t *)((char *)v54 + v23);
              v48 = vmlaq_f64(v48, v51, *v55);
              v56 = (float64x2_t *)((char *)v55 + v23);
              v47 = vmlaq_f64(v47, v51, *v56);
              v46 = vmlaq_f64(v46, v51, *(float64x2_t *)((char *)v56 + v23));
              v44 -= 2;
              ++v43;
            }
            while (v44 > 2);
            v57 = vaddq_f64(v45, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v30])));
            v58 = vaddq_f64(v50, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v31])));
            _Q5 = vaddq_f64(v49, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v32])));
            v60 = &a6[v22 * a7];
            v61 = vaddq_f64(v48, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v33])));
            _Q3 = vaddq_f64(v47, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v34])));
            v63 = (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v35]);
            _Q7 = vpaddq_f64(vaddq_f64(v37, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v28]))), vaddq_f64(v38, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v452, *(float64x2_t *)&v40[v29]))));
            *v60 = vmlad_n_f64(*v60, _D0, _Q7.f64[0]);
            __asm { FMLA            D17, D0, V7.D[1] }
            v60[a7] = _D17;
            _Q6 = vpaddq_f64(v57, v58);
            v60[2 * a7] = vmlad_n_f64(v60[2 * a7], _D0, _Q6.f64[0]);
            __asm { FMLA            D7, D0, V6.D[1] }
            v60[3 * a7] = _Q7.f64[0];
            _Q4 = vpaddq_f64(_Q5, v61);
            v60[4 * a7] = vmlad_n_f64(v60[4 * a7], _D0, _Q4.f64[0]);
            _Q2 = vpaddq_f64(_Q3, vaddq_f64(v46, (float64x2_t)vandq_s8(v21, v63)));
            __asm { FMLA            D5, D0, V4.D[1] }
            v60[5 * a7] = _Q5.f64[0];
            v60[6 * a7] = vmlad_n_f64(v60[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v60[7 * a7] = _Q3.f64[0];
            v22 += 8;
            result = v22 | 7;
            v36 = (float64x2_t *)((char *)v36 + v27);
            v9 = v39;
            a5 = v41;
          }
          while ((v22 | 7) < a2);
        }
        if ((v22 | 3) >= a2)
        {
          v83 = v456;
          v73 = v448;
        }
        else
        {
          v73 = v448;
          v74 = (float64x2_t *)((char *)a5 + 8 * v448);
          v75 = v448 + 2 * v9;
          v76 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 24));
          v77 = 32 * v9;
          v78 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 16));
          v79 = (float64x2_t *)((char *)a3 + v9 * (8 * v22 + 8));
          v80 = 8 * v75;
          v81 = 8 * (v75 + v9);
          v82 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          v83 = v456;
          do
          {
            v84 = 0uLL;
            v85 = 0uLL;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = a5;
            v89 = v82;
            v90 = v79;
            v91 = v78;
            v92 = v76;
            for (i = v456; i > 2; i -= 2)
            {
              v94 = *v88++;
              v95 = v94;
              v96 = *v89++;
              v87 = vmlaq_f64(v87, v95, v96);
              v97 = *v90++;
              v86 = vmlaq_f64(v86, v95, v97);
              v98 = *v91++;
              v85 = vmlaq_f64(v85, v95, v98);
              v99 = *v92++;
              v84 = vmlaq_f64(v84, v95, v99);
            }
            v100 = (char *)&a3->f64[v22 * v9];
            v101 = &a6[v22 * a7];
            _Q3 = vaddq_f64(v85, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v80])));
            v103 = vaddq_f64(v84, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[v81])));
            _Q4 = vpaddq_f64(vaddq_f64(v87, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448]))), vaddq_f64(v86, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*v74, *(float64x2_t *)&v100[8 * v448 + 8 * v9]))));
            *v101 = vmlad_n_f64(*v101, _D0, _Q4.f64[0]);
            __asm { FMLA            D5, D0, V4.D[1] }
            v101[a7] = _D5;
            _Q2 = vpaddq_f64(_Q3, v103);
            v101[2 * a7] = vmlad_n_f64(v101[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v101[3 * a7] = _Q3.f64[0];
            v22 += 4;
            result = v22 | 3;
            v76 = (float64x2_t *)((char *)v76 + v77);
            v78 = (float64x2_t *)((char *)v78 + v77);
            v79 = (float64x2_t *)((char *)v79 + v77);
            v82 = (float64x2_t *)((char *)v82 + v77);
          }
          while ((v22 | 3) < a2);
        }
        if ((v22 | 1) < a2)
        {
          v113 = (char *)a3 + v9 * (8 * v22 + 8);
          v114 = 16 * v9;
          v115 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v116 = 0uLL;
            v117 = 0uLL;
            v118 = a5;
            v119 = v115;
            result = (uint64_t)v113;
            for (j = v83; j > 2; j -= 2)
            {
              v121 = *v118++;
              v122 = v121;
              v123 = *v119++;
              v117 = vmlaq_f64(v117, v122, v123);
              v124 = *(float64x2_t *)result;
              result += 16;
              v116 = vmlaq_f64(v116, v122, v124);
            }
            v125 = &a6[v22 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v117, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))), vaddq_f64(v116, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73 + 8 * v9)))));
            *v125 = vmlad_n_f64(*v125, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v125[a7] = _D3;
            v22 += 2;
            v113 += v114;
            v115 = (float64x2_t *)((char *)v115 + v114);
          }
          while ((v22 | 1) < a2);
        }
        if (v22 < a2)
        {
          v128 = (float64x2_t *)((char *)a3 + 8 * v22 * v9);
          do
          {
            v129 = 0uLL;
            v130 = a5;
            v131 = v128;
            for (k = v83; k > 2; k -= 2)
            {
              v133 = *v130++;
              v134 = v133;
              v135 = *v131++;
              v129 = vmlaq_f64(v129, v134, v135);
            }
            a6[v22 * a7] = a6[v22 * a7]
                         + _D0
                         * vaddvq_f64(vaddq_f64(v129, (float64x2_t)vandq_s8(v21, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v73), *(float64x2_t *)((char *)a3 + 8 * v22 * v9 + 8 * v73)))));
            ++v22;
            v128 = (float64x2_t *)((char *)v128 + 8 * v9);
          }
          while (v22 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v15 = *a5;
        v16 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v17 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (4 - result)));
        do
        {
          *a6 = *a6
              + _D0
              * vaddvq_f64(vaddq_f64(vmulq_f64(v16, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v15, *a3), v17)));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * a4);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v11 = a5->f64[0];
      do
      {
        *a6 = *a6 + _D0 * (v11 * a3->f64[0]);
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == 0.0)
  {
    if (result > 1)
    {
      v19 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v20 = *a5;
          do
          {
            *a6 = vaddvq_f64(vmulq_f64(v20, *a3)) * _D0;
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v136 = *(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (2 - (result & 1)));
        v457 = result;
        v449 = result - 2;
        v137 = 0;
        if (a2 >= 8)
        {
          v138 = 8 * v9;
          v453 = (float64x2_t *)((char *)a5 + 8 * v19);
          v139 = v19 + 2 * v9;
          v140 = v19 + 4 * v9;
          v141 = v140 + v9;
          v142 = v9 << 6;
          v143 = 8 * v19;
          v144 = 8 * (v19 + v9);
          v145 = 8 * v139;
          v146 = 8 * (v139 + v9);
          v147 = 8 * v140;
          v148 = 8 * v141;
          v149 = 8 * (v19 + 6 * v9);
          v150 = 8 * (7 * v9 + v19);
          v151 = a3;
          do
          {
            v152 = 0uLL;
            v153 = 0uLL;
            v154 = v9;
            v155 = (char *)&a3->f64[v137 * v9];
            v156 = a5;
            v157 = a5;
            v158 = v151;
            v159 = v457;
            v160 = 0uLL;
            v161 = 0uLL;
            v162 = 0uLL;
            v163 = 0uLL;
            v164 = 0uLL;
            v165 = 0uLL;
            do
            {
              v166 = *v157++;
              v152 = vmlaq_f64(v152, v166, *v158);
              v153 = vmlaq_f64(v153, v166, *(float64x2_t *)((char *)v158 + v138));
              v167 = (float64x2_t *)((char *)v158 + v138 + v138);
              v160 = vmlaq_f64(v160, v166, *v167);
              v168 = (float64x2_t *)((char *)v167 + v138);
              v165 = vmlaq_f64(v165, v166, *v168);
              v169 = (float64x2_t *)((char *)v168 + v138);
              v164 = vmlaq_f64(v164, v166, *v169);
              v170 = (float64x2_t *)((char *)v169 + v138);
              v163 = vmlaq_f64(v163, v166, *v170);
              v171 = (float64x2_t *)((char *)v170 + v138);
              v162 = vmlaq_f64(v162, v166, *v171);
              v161 = vmlaq_f64(v161, v166, *(float64x2_t *)((char *)v171 + v138));
              v159 -= 2;
              ++v158;
            }
            while (v159 > 2);
            v172 = &a6[v137 * a7];
            v173 = vpaddq_f64(vaddq_f64(v152, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v143]))), vaddq_f64(v153, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v144]))));
            v174 = vpaddq_f64(vaddq_f64(v160, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v145]))), vaddq_f64(v165, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v146]))));
            v175 = vpaddq_f64(vaddq_f64(v164, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v147]))), vaddq_f64(v163, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v148]))));
            v176 = vpaddq_f64(vaddq_f64(v162, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v149]))), vaddq_f64(v161, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v453, *(float64x2_t *)&v155[v150]))));
            *v172 = _D0 * v173.f64[0];
            v172[a7] = vmuld_lane_f64(_D0, v173, 1);
            v172[2 * a7] = _D0 * v174.f64[0];
            v172[3 * a7] = vmuld_lane_f64(_D0, v174, 1);
            v172[4 * a7] = _D0 * v175.f64[0];
            v172[5 * a7] = vmuld_lane_f64(_D0, v175, 1);
            v172[6 * a7] = _D0 * v176.f64[0];
            v172[7 * a7] = vmuld_lane_f64(_D0, v176, 1);
            v137 += 8;
            result = v137 | 7;
            v151 = (float64x2_t *)((char *)v151 + v142);
            v9 = v154;
            a5 = v156;
          }
          while ((v137 | 7) < a2);
        }
        if ((v137 | 3) >= a2)
        {
          v187 = v457;
          v177 = v449;
        }
        else
        {
          v177 = v449;
          v178 = (float64x2_t *)((char *)a5 + 8 * v449);
          v179 = v449 + 2 * v9;
          v180 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 24));
          v181 = 32 * v9;
          v182 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 16));
          v183 = (float64x2_t *)((char *)a3 + v9 * (8 * v137 + 8));
          v184 = 8 * v179;
          v185 = 8 * (v179 + v9);
          v186 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          v187 = v457;
          do
          {
            v188 = 0uLL;
            v189 = 0uLL;
            v190 = 0uLL;
            v191 = 0uLL;
            v192 = a5;
            v193 = v186;
            v194 = v183;
            v195 = v182;
            v196 = v180;
            for (m = v457; m > 2; m -= 2)
            {
              v198 = *v192++;
              v199 = v198;
              v200 = *v193++;
              v191 = vmlaq_f64(v191, v199, v200);
              v201 = *v194++;
              v190 = vmlaq_f64(v190, v199, v201);
              v202 = *v195++;
              v189 = vmlaq_f64(v189, v199, v202);
              v203 = *v196++;
              v188 = vmlaq_f64(v188, v199, v203);
            }
            v204 = (char *)&a3->f64[v137 * v9];
            v205 = vaddq_f64(v191, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449])));
            v206 = vaddq_f64(v190, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[8 * v449 + 8 * v9])));
            v207 = vaddq_f64(v189, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, *(float64x2_t *)&v204[v184])));
            v208 = *(float64x2_t *)&v204[v185];
            v209 = &a6[v137 * a7];
            v210 = vpaddq_f64(v205, v206);
            v211 = vpaddq_f64(v207, vaddq_f64(v188, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*v178, v208))));
            *v209 = _D0 * v210.f64[0];
            v209[a7] = vmuld_lane_f64(_D0, v210, 1);
            v209[2 * a7] = _D0 * v211.f64[0];
            v209[3 * a7] = vmuld_lane_f64(_D0, v211, 1);
            v137 += 4;
            result = v137 | 3;
            v180 = (float64x2_t *)((char *)v180 + v181);
            v182 = (float64x2_t *)((char *)v182 + v181);
            v183 = (float64x2_t *)((char *)v183 + v181);
            v186 = (float64x2_t *)((char *)v186 + v181);
          }
          while ((v137 | 3) < a2);
        }
        if ((v137 | 1) < a2)
        {
          v217 = (char *)a3 + v9 * (8 * v137 + 8);
          v218 = 16 * v9;
          v219 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v220 = 0uLL;
            v221 = 0uLL;
            v222 = a5;
            v223 = v219;
            result = (uint64_t)v217;
            for (n = v187; n > 2; n -= 2)
            {
              v225 = *v222++;
              v226 = v225;
              v227 = *v223++;
              v221 = vmlaq_f64(v221, v226, v227);
              v228 = *(float64x2_t *)result;
              result += 16;
              v220 = vmlaq_f64(v220, v226, v228);
            }
            v229 = &a6[v137 * a7];
            v230 = vpaddq_f64(vaddq_f64(v221, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))), vaddq_f64(v220, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177 + 8 * v9)))));
            *v229 = _D0 * v230.f64[0];
            v229[a7] = vmuld_lane_f64(_D0, v230, 1);
            v137 += 2;
            v217 += v218;
            v219 = (float64x2_t *)((char *)v219 + v218);
          }
          while ((v137 | 1) < a2);
        }
        if (v137 < a2)
        {
          v231 = (float64x2_t *)((char *)a3 + 8 * v137 * v9);
          do
          {
            v232 = 0uLL;
            v233 = a5;
            v234 = v231;
            for (ii = v187; ii > 2; ii -= 2)
            {
              v236 = *v233++;
              v237 = v236;
              v238 = *v234++;
              v232 = vmlaq_f64(v232, v237, v238);
            }
            a6[v137 * a7] = vaddvq_f64(vaddq_f64(v232, (float64x2_t)vandq_s8(v136, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v177), *(float64x2_t *)((char *)a3 + 8 * v137 * v9 + 8 * v177)))))* _D0;
            ++v137;
            v231 = (float64x2_t *)((char *)v231 + 8 * v9);
          }
          while (v137 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v107 = *a5;
        v108 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v109 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (4 - result)));
        do
        {
          *a6 = vaddvq_f64(vaddq_f64(vmulq_f64(v108, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v107, *a3), v109)))* _D0;
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v12 = a5->f64[0];
      do
      {
        *a6 = v12 * a3->f64[0] * _D0;
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (a9 == -1.0)
  {
    if (result > 1)
    {
      v111 = result - 2;
      if (result == 2)
      {
        if (a2 >= 1)
        {
          v112 = *a5;
          do
          {
            *a6 = -(*a6 - _D0 * vaddvq_f64(vmulq_f64(v112, *a3)));
            a6 += a7;
            a3 = (float64x2_t *)((char *)a3 + 8 * v9);
            --a2;
          }
          while (a2);
        }
      }
      else if ((unint64_t)result > 4)
      {
        v458 = result;
        v242 = *(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (2 - (result & 1)));
        v450 = result - 2;
        v243 = 0;
        if (a2 >= 8)
        {
          v244 = 8 * v9;
          v454 = (float64x2_t *)((char *)a5 + 8 * v111);
          v245 = v111 + 2 * v9;
          v246 = v111 + 4 * v9;
          v247 = v246 + v9;
          v248 = v9 << 6;
          v249 = 8 * v111;
          v250 = 8 * (v111 + v9);
          v251 = 8 * v245;
          v252 = 8 * (v245 + v9);
          v253 = 8 * v246;
          v254 = 8 * v247;
          v255 = 8 * (v111 + 6 * v9);
          v256 = 8 * (7 * v9 + v111);
          v257 = a3;
          do
          {
            v258 = 0uLL;
            v259 = 0uLL;
            v260 = v9;
            v261 = (char *)&a3->f64[v243 * v9];
            v262 = a5;
            v263 = a5;
            v264 = v257;
            v265 = v458;
            v266 = 0uLL;
            v267 = 0uLL;
            v268 = 0uLL;
            v269 = 0uLL;
            v270 = 0uLL;
            v271 = 0uLL;
            do
            {
              v272 = *v263++;
              v258 = vmlaq_f64(v258, v272, *v264);
              v259 = vmlaq_f64(v259, v272, *(float64x2_t *)((char *)v264 + v244));
              v273 = (float64x2_t *)((char *)v264 + v244 + v244);
              v266 = vmlaq_f64(v266, v272, *v273);
              v274 = (float64x2_t *)((char *)v273 + v244);
              v271 = vmlaq_f64(v271, v272, *v274);
              v275 = (float64x2_t *)((char *)v274 + v244);
              v270 = vmlaq_f64(v270, v272, *v275);
              v276 = (float64x2_t *)((char *)v275 + v244);
              v269 = vmlaq_f64(v269, v272, *v276);
              v277 = (float64x2_t *)((char *)v276 + v244);
              v268 = vmlaq_f64(v268, v272, *v277);
              v267 = vmlaq_f64(v267, v272, *(float64x2_t *)((char *)v277 + v244));
              v265 -= 2;
              ++v264;
            }
            while (v265 > 2);
            v278 = &a6[v243 * a7];
            _Q6 = vpaddq_f64(vaddq_f64(v258, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v249]))), vaddq_f64(v259, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v250]))));
            _Q7 = vpaddq_f64(vaddq_f64(v266, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v251]))), vaddq_f64(v271, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v252]))));
            _Q4 = vpaddq_f64(vaddq_f64(v270, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v253]))), vaddq_f64(v269, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v254]))));
            _Q2 = vpaddq_f64(vaddq_f64(v268, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v255]))), vaddq_f64(v267, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v454, *(float64x2_t *)&v261[v256]))));
            *v278 = vmlad_n_f64(-*v278, _D0, _Q6.f64[0]);
            __asm { FMLA            D3, D0, V6.D[1] }
            v278[a7] = _D3;
            v278[2 * a7] = vmlad_n_f64(-v278[2 * a7], _D0, _Q7.f64[0]);
            __asm { FMLA            D3, D0, V7.D[1] }
            v278[3 * a7] = _D3;
            v278[4 * a7] = vmlad_n_f64(-v278[4 * a7], _D0, _Q4.f64[0]);
            __asm { FMLA            D3, D0, V4.D[1] }
            v278[5 * a7] = _D3;
            v278[6 * a7] = vmlad_n_f64(-v278[6 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v278[7 * a7] = _D3;
            v243 += 8;
            result = v243 | 7;
            v257 = (float64x2_t *)((char *)v257 + v248);
            v9 = v260;
            a5 = v262;
          }
          while ((v243 | 7) < a2);
        }
        if ((v243 | 3) >= a2)
        {
          v297 = v458;
          v287 = v450;
        }
        else
        {
          v287 = v450;
          v288 = (float64x2_t *)((char *)a5 + 8 * v450);
          v289 = v450 + 2 * v9;
          v290 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 24));
          v291 = 32 * v9;
          v292 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 16));
          v293 = (float64x2_t *)((char *)a3 + v9 * (8 * v243 + 8));
          v294 = 8 * v289;
          v295 = 8 * (v289 + v9);
          v296 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          v297 = v458;
          do
          {
            v298 = 0uLL;
            v299 = 0uLL;
            v300 = 0uLL;
            v301 = 0uLL;
            v302 = a5;
            v303 = v296;
            v304 = v293;
            v305 = v292;
            v306 = v290;
            for (jj = v458; jj > 2; jj -= 2)
            {
              v308 = *v302++;
              v309 = v308;
              v310 = *v303++;
              v301 = vmlaq_f64(v301, v309, v310);
              v311 = *v304++;
              v300 = vmlaq_f64(v300, v309, v311);
              v312 = *v305++;
              v299 = vmlaq_f64(v299, v309, v312);
              v313 = *v306++;
              v298 = vmlaq_f64(v298, v309, v313);
            }
            v314 = (char *)&a3->f64[v243 * v9];
            v315 = vaddq_f64(v301, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450])));
            v316 = vaddq_f64(v300, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[8 * v450 + 8 * v9])));
            _Q4 = vaddq_f64(v299, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, *(float64x2_t *)&v314[v294])));
            v318 = *(float64x2_t *)&v314[v295];
            v319 = &a6[v243 * a7];
            _Q3 = vpaddq_f64(v315, v316);
            _Q2 = vpaddq_f64(_Q4, vaddq_f64(v298, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*v288, v318))));
            *v319 = vmlad_n_f64(-*v319, _D0, _Q3.f64[0]);
            __asm { FMLA            D4, D0, V3.D[1] }
            v319[a7] = _Q4.f64[0];
            v319[2 * a7] = vmlad_n_f64(-v319[2 * a7], _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v319[3 * a7] = _Q3.f64[0];
            v243 += 4;
            result = v243 | 3;
            v290 = (float64x2_t *)((char *)v290 + v291);
            v292 = (float64x2_t *)((char *)v292 + v291);
            v293 = (float64x2_t *)((char *)v293 + v291);
            v296 = (float64x2_t *)((char *)v296 + v291);
          }
          while ((v243 | 3) < a2);
        }
        if ((v243 | 1) < a2)
        {
          v402 = (char *)a3 + v9 * (8 * v243 + 8);
          v403 = 16 * v9;
          v404 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v405 = 0uLL;
            v406 = 0uLL;
            v407 = a5;
            v408 = v404;
            result = (uint64_t)v402;
            for (kk = v297; kk > 2; kk -= 2)
            {
              v410 = *v407++;
              v411 = v410;
              v412 = *v408++;
              v406 = vmlaq_f64(v406, v411, v412);
              v413 = *(float64x2_t *)result;
              result += 16;
              v405 = vmlaq_f64(v405, v411, v413);
            }
            v414 = &a6[v243 * a7];
            _Q2 = vpaddq_f64(vaddq_f64(v406, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287)))), vaddq_f64(v405, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287 + 8 * v9)))));
            *v414 = vmlad_n_f64(-*v414, _D0, _Q2.f64[0]);
            __asm { FMLA            D3, D0, V2.D[1] }
            v414[a7] = _D3;
            v243 += 2;
            v402 += v403;
            v404 = (float64x2_t *)((char *)v404 + v403);
          }
          while ((v243 | 1) < a2);
        }
        if (v243 < a2)
        {
          v417 = (float64x2_t *)((char *)a3 + 8 * v243 * v9);
          do
          {
            v418 = 0uLL;
            v419 = a5;
            v420 = v417;
            for (mm = v297; mm > 2; mm -= 2)
            {
              v422 = *v419++;
              v423 = v422;
              v424 = *v420++;
              v418 = vmlaq_f64(v418, v423, v424);
            }
            a6[v243 * a7] = -(a6[v243 * a7]
                            - _D0
                            * vaddvq_f64(vaddq_f64(v418, (float64x2_t)vandq_s8(v242, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v287), *(float64x2_t *)((char *)a3 + 8 * v243 * v9 + 8 * v287))))));
            ++v243;
            v417 = (float64x2_t *)((char *)v417 + 8 * v9);
          }
          while (v243 != a2);
        }
      }
      else if (a2 >= 1)
      {
        v214 = *a5;
        v215 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
        v216 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (4 - result)));
        do
        {
          *a6 = -(*a6
                - _D0
                * vaddvq_f64(vaddq_f64(vmulq_f64(v215, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v214, *a3), v216))));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if (a2 >= 1)
    {
      v18 = a5->f64[0];
      do
      {
        *a6 = -(*a6 - _D0 * (v18 * a3->f64[0]));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * a4);
        --a2;
      }
      while (a2);
    }
  }
  else if (result > 1)
  {
    v212 = result - 2;
    if (result == 2)
    {
      if (a2 >= 1)
      {
        v213 = *a5;
        do
        {
          *a6 = *a6 * a9 + _D0 * vaddvq_f64(vmulq_f64(v213, *a3));
          a6 += a7;
          a3 = (float64x2_t *)((char *)a3 + 8 * v9);
          --a2;
        }
        while (a2);
      }
    }
    else if ((unint64_t)result > 4)
    {
      v459 = result;
      v322 = *(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (2 - (result & 1)));
      v323 = 8 * v9;
      v451 = result - 2;
      v324 = 0;
      if (a2 >= 8)
      {
        v455 = (float64x2_t *)((char *)a5 + 8 * v212);
        v325 = v212 + 2 * v9;
        v326 = v212 + 4 * v9;
        v327 = v326 + v9;
        v328 = v9 << 6;
        v329 = 8 * v212;
        v330 = 8 * (v212 + v9);
        v331 = 8 * v325;
        v332 = 8 * (v325 + v9);
        v333 = 8 * v326;
        v334 = 8 * v327;
        v335 = 8 * (v212 + 6 * v9);
        v336 = 8 * (7 * v9 + v212);
        v337 = a3;
        do
        {
          v338 = 0uLL;
          v339 = 0uLL;
          v340 = v9;
          v341 = (char *)&a3->f64[v324 * v9];
          v342 = a5;
          v343 = a5;
          v344 = v337;
          v345 = v459;
          v346 = 0uLL;
          v347 = 0uLL;
          v348 = 0uLL;
          v349 = 0uLL;
          v350 = 0uLL;
          v351 = 0uLL;
          do
          {
            v352 = *v343++;
            v338 = vmlaq_f64(v338, v352, *v344);
            v339 = vmlaq_f64(v339, v352, *(float64x2_t *)((char *)v344 + v323));
            v353 = (float64x2_t *)((char *)v344 + v323 + v323);
            v346 = vmlaq_f64(v346, v352, *v353);
            v354 = (float64x2_t *)((char *)v353 + v323);
            v351 = vmlaq_f64(v351, v352, *v354);
            v355 = (float64x2_t *)((char *)v354 + v323);
            v350 = vmlaq_f64(v350, v352, *v355);
            v356 = (float64x2_t *)((char *)v355 + v323);
            v349 = vmlaq_f64(v349, v352, *v356);
            v357 = (float64x2_t *)((char *)v356 + v323);
            v348 = vmlaq_f64(v348, v352, *v357);
            v347 = vmlaq_f64(v347, v352, *(float64x2_t *)((char *)v357 + v323));
            v345 -= 2;
            ++v344;
          }
          while (v345 > 2);
          v358 = &a6[v324 * a7];
          _Q7 = vpaddq_f64(vaddq_f64(v338, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v329]))), vaddq_f64(v339, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v330]))));
          _Q16 = vpaddq_f64(vaddq_f64(v346, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v331]))), vaddq_f64(v351, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v332]))));
          _Q5 = vpaddq_f64(vaddq_f64(v350, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v333]))), vaddq_f64(v349, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v334]))));
          _Q3 = vpaddq_f64(vaddq_f64(v348, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v335]))), vaddq_f64(v347, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v455, *(float64x2_t *)&v341[v336]))));
          *v358 = vmlad_n_f64(*v358 * a9, _D0, _Q7.f64[0]);
          __asm { FMLA            D4, D0, V7.D[1] }
          v358[a7] = _D4;
          v358[2 * a7] = vmlad_n_f64(v358[2 * a7] * a9, _D0, _Q16.f64[0]);
          __asm { FMLA            D4, D0, V16.D[1] }
          v358[3 * a7] = _D4;
          v358[4 * a7] = vmlad_n_f64(v358[4 * a7] * a9, _D0, _Q5.f64[0]);
          __asm { FMLA            D4, D0, V5.D[1] }
          v358[5 * a7] = _D4;
          v358[6 * a7] = vmlad_n_f64(v358[6 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v358[7 * a7] = _D4;
          v324 += 8;
          result = v324 | 7;
          v337 = (float64x2_t *)((char *)v337 + v328);
          v9 = v340;
          a5 = v342;
        }
        while ((v324 | 7) < a2);
      }
      if ((v324 | 3) >= a2)
      {
        v377 = v459;
        v367 = v451;
      }
      else
      {
        v367 = v451;
        v368 = (float64x2_t *)((char *)a5 + 8 * v451);
        v369 = v451 + 2 * v9;
        v370 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 24));
        v371 = 32 * v9;
        v372 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 16));
        v373 = (float64x2_t *)((char *)a3 + v9 * (8 * v324 + 8));
        v374 = 8 * v369;
        v375 = 8 * (v369 + v9);
        v376 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        v377 = v459;
        do
        {
          v378 = 0uLL;
          v379 = 0uLL;
          v380 = 0uLL;
          v381 = 0uLL;
          v382 = a5;
          v383 = v376;
          v384 = v373;
          v385 = v372;
          v386 = v370;
          for (nn = v459; nn > 2; nn -= 2)
          {
            v388 = *v382++;
            v389 = v388;
            v390 = *v383++;
            v381 = vmlaq_f64(v381, v389, v390);
            v391 = *v384++;
            v380 = vmlaq_f64(v380, v389, v391);
            v392 = *v385++;
            v379 = vmlaq_f64(v379, v389, v392);
            v393 = *v386++;
            v378 = vmlaq_f64(v378, v389, v393);
          }
          v394 = (char *)&a3->f64[v324 * v9];
          v395 = vaddq_f64(v381, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451])));
          v396 = vaddq_f64(v380, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[8 * v451 + 8 * v9])));
          result = v324 * a7;
          _Q5 = vaddq_f64(v379, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, *(float64x2_t *)&v394[v374])));
          v398 = *(float64x2_t *)&v394[v375];
          v399 = &a6[v324 * a7];
          _Q4 = vpaddq_f64(v395, v396);
          _Q3 = vpaddq_f64(_Q5, vaddq_f64(v378, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*v368, v398))));
          *v399 = vmlad_n_f64(*v399 * a9, _D0, _Q4.f64[0]);
          __asm { FMLA            D5, D0, V4.D[1] }
          v399[a7] = _Q5.f64[0];
          v399[2 * a7] = vmlad_n_f64(v399[2 * a7] * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v399[3 * a7] = _Q4.f64[0];
          v324 += 4;
          v370 = (float64x2_t *)((char *)v370 + v371);
          v372 = (float64x2_t *)((char *)v372 + v371);
          v373 = (float64x2_t *)((char *)v373 + v371);
          v376 = (float64x2_t *)((char *)v376 + v371);
        }
        while ((v324 | 3) < a2);
      }
      if ((v324 | 1) < a2)
      {
        v425 = (char *)a3 + v9 * (8 * v324 + 8);
        v426 = 16 * v9;
        v427 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v428 = 0uLL;
          v429 = 0uLL;
          v430 = a5;
          v431 = v427;
          result = (uint64_t)v425;
          for (i1 = v377; i1 > 2; i1 -= 2)
          {
            v433 = *v430++;
            v434 = v433;
            v435 = *v431++;
            v429 = vmlaq_f64(v429, v434, v435);
            v436 = *(float64x2_t *)result;
            result += 16;
            v428 = vmlaq_f64(v428, v434, v436);
          }
          v437 = &a6[v324 * a7];
          _Q3 = vpaddq_f64(vaddq_f64(v429, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))), vaddq_f64(v428, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367 + 8 * v9)))));
          *v437 = vmlad_n_f64(*v437 * a9, _D0, _Q3.f64[0]);
          __asm { FMLA            D4, D0, V3.D[1] }
          v437[a7] = _D4;
          v324 += 2;
          v425 += v426;
          v427 = (float64x2_t *)((char *)v427 + v426);
        }
        while ((v324 | 1) < a2);
      }
      if (v324 < a2)
      {
        v440 = (float64x2_t *)((char *)a3 + 8 * v324 * v9);
        do
        {
          v441 = 0uLL;
          v442 = a5;
          v443 = v440;
          for (i2 = v377; i2 > 2; i2 -= 2)
          {
            v445 = *v442++;
            v446 = v445;
            v447 = *v443++;
            v441 = vmlaq_f64(v441, v446, v447);
          }
          a6[v324 * a7] = a6[v324 * a7] * a9
                        + _D0
                        * vaddvq_f64(vaddq_f64(v441, (float64x2_t)vandq_s8(v322, (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)a5 + 8 * v367), *(float64x2_t *)((char *)a3 + 8 * v324 * v9 + 8 * v367)))));
          ++v324;
          v440 = (float64x2_t *)((char *)v440 + v323);
        }
        while (v324 != a2);
      }
    }
    else if (a2 >= 1)
    {
      v239 = *a5;
      v240 = *(float64x2_t *)((char *)a5 + 8 * result - 16);
      v241 = vmvnq_s8(*(int8x16_t *)((char *)&unk_2102D6C80 + 8 * (4 - result)));
      do
      {
        *a6 = *a6 * a9
            + _D0
            * vaddvq_f64(vaddq_f64(vmulq_f64(v240, *(float64x2_t *)((char *)a3 + 8 * result - 16)), (float64x2_t)vandq_s8((int8x16_t)vmulq_f64(v239, *a3), v241)));
        a6 += a7;
        a3 = (float64x2_t *)((char *)a3 + 8 * v9);
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v110 = a5->f64[0];
    do
    {
      *a6 = *a6 * a9 + _D0 * (v110 * a3->f64[0]);
      a6 += a7;
      a3 = (float64x2_t *)((char *)a3 + 8 * a4);
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_20E854370(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f32(v10, *v14, *v13);
      v11 = vmlaq_n_f32(v11, *(float32x4_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 = (float32x4_t *)((char *)v14 + 8 * a4);
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f32(v10, *(float32x4_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f32(vaddq_f32(v11, v10), a9);
  if (result == 4 && a8 == 1)
  {
    *a7 = vaddq_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 4) & (result >> 63);
    v17 = 4;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f32[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v16++ & 3))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float32x4_t sub_20E854480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, float32x4_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float v28;
  float32x4_t *v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  float32x4_t v43;
  float v44;
  float32x4_t *v45;
  float v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t *v50;
  int64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  if (v9 + 12 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 2;
  }
  else
  {
    v11 = 4 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float32x4_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f32(v24);
          v10 = 8 * a6;
          v24 = (const float *)((char *)v24 + v10);
          v13 = vmlaq_f32(v13, v25, *v21);
          v15 = vmlaq_f32(v15, v25, v21[1]);
          v17 = vmlaq_f32(v17, v25, v21[2]);
          v19 = vmlaq_f32(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f32(v14, *(float32x4_t *)((char *)v21 + 4 * a4), v26);
          v16 = vmlaq_n_f32(v16, *(float32x4_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f32(v18, *(float32x4_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f32(v20, *(float32x4_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 = (float32x4_t *)((char *)v21 + 8 * a4);
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float32x4_t *)(v8 + 4 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f32(v13, *v27, v28);
        v15 = vmlaq_n_f32(v15, v27[1], v28);
        v17 = vmlaq_n_f32(v17, v27[2], v28);
        v19 = vmlaq_n_f32(v19, v27[3], v28);
      }
      v29 = (float32x4_t *)(a7 + 4 * v9);
      v30 = vaddq_f32(vaddq_f32(v16, v15), v29[1]);
      *v29 = vaddq_f32(vaddq_f32(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f32(vaddq_f32(v20, v19), v29[3]);
      v29[2] = vaddq_f32(vaddq_f32(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 16;
      v32 = v9 + 28;
      v9 += 16;
    }
    while (v32 < a1);
  }
  if (v31 + 4 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float32x4_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f32(v42);
          v33 = 8 * a6;
          v42 = (const float *)((char *)v42 + v33);
          v35 = vmlaq_f32(v35, v43, *v39);
          v37 = vmlaq_f32(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f32(v36, *(float32x4_t *)((char *)v39 + 4 * a4), v44);
          v38 = vmlaq_n_f32(v38, *(float32x4_t *)((char *)v39 + 4 * a4 + 16), v44);
          v41 += 2;
          v39 = (float32x4_t *)((char *)v39 + 8 * a4);
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float32x4_t *)(v8 + 4 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f32(v35, *v45, v46);
        v37 = vmlaq_n_f32(v37, v45[1], v46);
      }
      v47 = (float32x4_t *)(a7 + 4 * v31);
      result = vaddq_f32(vaddq_f32(v38, v37), v47[1]);
      *v47 = vaddq_f32(vaddq_f32(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 8;
      v49 = v31 + 12;
      v31 += 8;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float32x4_t *)(a7 + 4 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float32x4_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f32(v52, *v55, *v56);
        v53 = vmlaq_n_f32(v53, *(float32x4_t *)((char *)v55 + 4 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 = (float32x4_t *)((char *)v55 + 8 * a4);
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f32(v52, *(float32x4_t *)(v8 + 4 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f32(vaddq_f32(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

uint64_t sub_20E854788(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, float a9)
{
  int64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  float32x2_t *v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0;
    v12 = 2;
    v13 = a5;
    v10 = 0;
    v14 = a3;
    do
    {
      v10 = vmla_n_f32(v10, *v14, *v13);
      v11 = vmla_n_f32(v11, *(float32x2_t *)((char *)v14 + 4 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  if (v9 < a2)
    v10 = vmla_n_f32(v10, *(float32x2_t *)((char *)a3 + 4 * v9 * a4), a5[v9 * a6]);
  v15 = vmul_n_f32(vadd_f32(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vadd_f32(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = (float *)a7 + v16 * a8;
      do
      {
        v19 = v15;
        *v18 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

uint64_t sub_20E854898(uint64_t result, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, uint64_t a6, float64x2_t *a7, uint64_t a8, double a9)
{
  int64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  double *v13;
  float64x2_t *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v19;

  if (a2 >= 2)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFELL;
    v11 = 0uLL;
    v12 = 2;
    v13 = a5;
    v10 = 0uLL;
    v14 = a3;
    do
    {
      v10 = vmlaq_n_f64(v10, *v14, *v13);
      v11 = vmlaq_n_f64(v11, *(float64x2_t *)((char *)v14 + 8 * a4), v13[a6]);
      v12 += 2;
      v14 += a4;
      v13 += 2 * a6;
    }
    while (v12 <= a2);
  }
  else
  {
    v9 = 0;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  if (v9 < a2)
    v10 = vmlaq_n_f64(v10, *(float64x2_t *)((char *)a3 + 8 * v9 * a4), a5[v9 * a6]);
  v15 = vmulq_n_f64(vaddq_f64(v11, v10), a9);
  if (result == 2 && a8 == 1)
  {
    *a7 = vaddq_f64(v15, *a7);
  }
  else
  {
    v16 = (result + 2) & (result >> 63);
    v17 = 2;
    if (result >= 0)
      v17 = result;
    if (v16 < v17)
    {
      v18 = &a7->f64[v16 * a8];
      do
      {
        v19 = v15;
        *v18 = *(double *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF7 | (8 * (v16++ & 1))) + *v18;
        v18 += a8;
      }
      while (v17 != v16);
    }
  }
  return result;
}

float64x2_t sub_20E8549A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7, float64x2_t result)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  const double *v22;
  uint64_t v23;
  const double *v24;
  float64x2_t v25;
  double v26;
  float64x2_t *v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  const double *v40;
  uint64_t v41;
  const double *v42;
  float64x2_t v43;
  double v44;
  float64x2_t *v45;
  double v46;
  float64x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  int64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t *v55;
  double *v56;

  v8 = a3 & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  if (v9 + 6 >= a1)
  {
    v31 = (uint64_t)((a3 & 0xFFFFFFFFFFFFFFF0) - a3) >> 3;
  }
  else
  {
    v11 = 8 * a4;
    do
    {
      if (a2 >= 2)
      {
        v20 = 0uLL;
        v21 = (float64x2_t *)v8;
        v19 = 0uLL;
        v22 = a5;
        v23 = 2;
        v18 = 0uLL;
        v17 = 0uLL;
        v16 = 0uLL;
        v15 = 0uLL;
        v14 = 0uLL;
        v24 = a5;
        v13 = 0uLL;
        do
        {
          v25 = vld1q_dup_f64(v24);
          v10 = 16 * a6;
          v24 = (const double *)((char *)v24 + v10);
          v13 = vmlaq_f64(v13, v25, *v21);
          v15 = vmlaq_f64(v15, v25, v21[1]);
          v17 = vmlaq_f64(v17, v25, v21[2]);
          v19 = vmlaq_f64(v19, v25, v21[3]);
          v26 = v22[a6];
          v14 = vmlaq_n_f64(v14, *(float64x2_t *)((char *)v21 + 8 * a4), v26);
          v16 = vmlaq_n_f64(v16, *(float64x2_t *)((char *)v21 + v11 + 16), v26);
          v18 = vmlaq_n_f64(v18, *(float64x2_t *)((char *)v21 + v11 + 32), v26);
          v20 = vmlaq_n_f64(v20, *(float64x2_t *)((char *)v21 + v11 + 48), v26);
          v23 += 2;
          v21 += a4;
          v22 = v24;
        }
        while (v23 <= a2);
        v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v12 = 0;
        v13 = 0uLL;
        v14 = 0uLL;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      if (v12 < a2)
      {
        v27 = (float64x2_t *)(v8 + 8 * v12 * a4);
        v28 = a5[v12 * a6];
        v13 = vmlaq_n_f64(v13, *v27, v28);
        v15 = vmlaq_n_f64(v15, v27[1], v28);
        v17 = vmlaq_n_f64(v17, v27[2], v28);
        v19 = vmlaq_n_f64(v19, v27[3], v28);
      }
      v29 = (float64x2_t *)(a7 + 8 * v9);
      v30 = vaddq_f64(vaddq_f64(v16, v15), v29[1]);
      *v29 = vaddq_f64(vaddq_f64(v14, v13), *v29);
      v29[1] = v30;
      result = vaddq_f64(vaddq_f64(v20, v19), v29[3]);
      v29[2] = vaddq_f64(vaddq_f64(v18, v17), v29[2]);
      v29[3] = result;
      v8 += 64;
      v31 = v9 + 8;
      v32 = v9 + 14;
      v9 += 8;
    }
    while (v32 < a1);
  }
  if (v31 + 2 >= a1)
  {
    v48 = v31;
  }
  else
  {
    do
    {
      if (a2 >= 2)
      {
        v38 = 0uLL;
        v39 = (float64x2_t *)v8;
        v40 = a5;
        v41 = 2;
        v37 = 0uLL;
        v36 = 0uLL;
        v35 = 0uLL;
        v42 = a5;
        do
        {
          v43 = vld1q_dup_f64(v42);
          v33 = 16 * a6;
          v42 = (const double *)((char *)v42 + v33);
          v35 = vmlaq_f64(v35, v43, *v39);
          v37 = vmlaq_f64(v37, v43, v39[1]);
          v44 = v40[a6];
          v36 = vmlaq_n_f64(v36, *(float64x2_t *)((char *)v39 + 8 * a4), v44);
          v38 = vmlaq_n_f64(v38, *(float64x2_t *)((char *)v39 + 8 * a4 + 16), v44);
          v41 += 2;
          v39 += a4;
          v40 = v42;
        }
        while (v41 <= a2);
        v34 = a2 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v34 = 0;
        v35 = 0uLL;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
      }
      if (v34 < a2)
      {
        v45 = (float64x2_t *)(v8 + 8 * v34 * a4);
        v46 = a5[v34 * a6];
        v35 = vmlaq_n_f64(v35, *v45, v46);
        v37 = vmlaq_n_f64(v37, v45[1], v46);
      }
      v47 = (float64x2_t *)(a7 + 8 * v31);
      result = vaddq_f64(vaddq_f64(v38, v37), v47[1]);
      *v47 = vaddq_f64(vaddq_f64(v36, v35), *v47);
      v47[1] = result;
      v8 += 32;
      v48 = v31 + 4;
      v49 = v31 + 6;
      v31 += 4;
    }
    while (v49 < a1);
  }
  if (v48 < a1)
  {
    v50 = (float64x2_t *)(a7 + 8 * v48);
    if (a2 >= 2)
    {
      v53 = 0uLL;
      v54 = 2;
      v55 = (float64x2_t *)v8;
      v52 = 0uLL;
      v56 = a5;
      do
      {
        v52 = vmlaq_n_f64(v52, *v55, *v56);
        v53 = vmlaq_n_f64(v53, *(float64x2_t *)((char *)v55 + 8 * a4), v56[a6]);
        v54 += 2;
        v56 += 2 * a6;
        v55 += a4;
      }
      while (v54 <= a2);
      v51 = a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v51 = 0;
      v52 = 0uLL;
      v53 = 0uLL;
    }
    if (v51 < a2)
      v52 = vmlaq_n_f64(v52, *(float64x2_t *)(v8 + 8 * v51 * a4), a5[v51 * a6]);
    result = vaddq_f64(vaddq_f64(v53, v52), *v50);
    *v50 = result;
  }
  return result;
}

_OWORD *sub_20E854CB0(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t *v8;
  uint64_t v9;
  _OWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD *result;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _OWORD *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;

  v8 = a3;
  v9 = 8 * a4;
  v11 = *(float64x2_t *)a1;
  v12 = *((float64x2_t *)a1 + 1);
  v10 = a1 + 2;
  v14 = *(float64x2_t *)v10;
  v15 = *((float64x2_t *)v10 + 1);
  result = v10 + 2;
  do
  {
    v16 = a6;
    v18 = *a3;
    v19 = a3[1];
    v20 = a3[2];
    v21 = a3[3];
    v17 = (float64x2_t *)((char *)a3 + v9);
    v23 = *v17;
    v24 = v17[1];
    v25 = v17[2];
    v26 = v17[3];
    v22 = (float64x2_t *)((char *)v17 + v9);
    v28 = *v22;
    v29 = v22[1];
    v30 = v22[2];
    v31 = v22[3];
    v27 = (float64x2_t *)((char *)v22 + v9);
    v33 = *a2;
    v34 = a2[1];
    v32 = a2 + 2;
    v35 = vmulq_n_f64(v18, a7);
    v36 = vmulq_n_f64(v19, a7);
    v37 = vmulq_n_f64(v20, a7);
    v38 = vmulq_n_f64(v21, a7);
    v39 = vmulq_n_f64(v23, a7);
    v40 = vmulq_n_f64(v24, a7);
    v41 = vmulq_n_f64(v25, a7);
    v42 = vmulq_n_f64(v26, a7);
    v43 = vmulq_n_f64(v28, a7);
    v44 = vmulq_n_f64(v29, a7);
    v45 = vmulq_n_f64(v30, a7);
    v46 = vmulq_n_f64(v31, a7);
    v47 = vmulq_n_f64(*v27, a7);
    v48 = vmulq_n_f64(v27[1], a7);
    v49 = vmulq_n_f64(v27[2], a7);
    v50 = vmulq_n_f64(v27[3], a7);
    do
    {
      v35 = vmlaq_n_f64(v35, v11, v33.f64[0]);
      v39 = vmlaq_laneq_f64(v39, v11, v33, 1);
      v43 = vmlaq_n_f64(v43, v11, v34.f64[0]);
      v47 = vmlaq_laneq_f64(v47, v11, v34, 1);
      v36 = vmlaq_n_f64(v36, v12, v33.f64[0]);
      v40 = vmlaq_laneq_f64(v40, v12, v33, 1);
      v44 = vmlaq_n_f64(v44, v12, v34.f64[0]);
      v48 = vmlaq_laneq_f64(v48, v12, v34, 1);
      v11 = *(float64x2_t *)result;
      v12 = *((float64x2_t *)result + 1);
      v51 = result + 2;
      v37 = vmlaq_n_f64(v37, v14, v33.f64[0]);
      v41 = vmlaq_laneq_f64(v41, v14, v33, 1);
      v45 = vmlaq_n_f64(v45, v14, v34.f64[0]);
      v49 = vmlaq_laneq_f64(v49, v14, v34, 1);
      v38 = vmlaq_n_f64(v38, v15, v33.f64[0]);
      v42 = vmlaq_laneq_f64(v42, v15, v33, 1);
      v46 = vmlaq_n_f64(v46, v15, v34.f64[0]);
      v50 = vmlaq_laneq_f64(v50, v15, v34, 1);
      v14 = *(float64x2_t *)v51;
      v15 = *((float64x2_t *)v51 + 1);
      result = v51 + 2;
      v33 = *v32;
      v34 = v32[1];
      v32 += 2;
      --v16;
    }
    while (v16);
    v52 = (float64x2_t *)((char *)v8 + v9);
    *v8 = v35;
    v8[1] = v36;
    v8[2] = v37;
    v8[3] = v38;
    v8 += 4;
    *v52 = v39;
    v52[1] = v40;
    v52[2] = v41;
    v52[3] = v42;
    v53 = (float64x2_t *)((char *)v52 + v9);
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v45;
    v53[3] = v46;
    v54 = (float64x2_t *)((char *)v53 + v9);
    *v54 = v47;
    v54[1] = v48;
    v54[2] = v49;
    v54[3] = v50;
    a3 = v8;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_20E854DC4(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  float *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;

  v10 = *a4;
  *a5 = 0;
  v11 = lsame_();
  if (!v11 && !lsame_())
  {
    v14 = -1;
    goto LABEL_29;
  }
  v12 = *a2;
  if ((v12 & 0x80000000) != 0)
  {
    v14 = -2;
    goto LABEL_29;
  }
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = *a2;
  if (*a4 < v13)
  {
    v14 = -4;
LABEL_29:
    *a5 = v14;
    goto LABEL_30;
  }
  v14 = *a5;
  if (*a5)
  {
LABEL_30:
    v46 = -v14;
    xerbla_();
    return 0;
  }
  v40 = v10;
  if ((_DWORD)v12)
  {
    if (v12 <= 0x200)
      v15 = 32;
    else
      v15 = 64;
    if (v12 <= 0x1964)
      v16 = v15;
    else
      v16 = 128;
    if (v16 >= v12)
    {
      sub_20E83AA6C(a1, a2, a3, a4, a5);
    }
    else
    {
      v17 = ~(_DWORD)v10;
      v41 = a3 + 4 * v17;
      v42 = a2;
      v43 = v16;
      v18 = 0;
      if (v11)
      {
        v19 = 0;
        v20 = 4 * v10 + 4 * v17 + a3 + 4;
        v21 = (int)v10 * (uint64_t)(int)v16;
        v36 = 4 * v21;
        v38 = 4 * (v21 + v16);
        v22 = 1;
        v23 = (float *)v20;
        while (1)
        {
          v24 = v18 + *a2;
          v45 = v24;
          v46 = v19;
          if ((int)v16 < v24)
            v24 = v16;
          v44 = v24;
          sub_20E8394AC("Upper", "Transpose", (unsigned int *)&v44, (unsigned int *)&v46, &flt_254A4A4D4, v20, (unsigned int *)a4, flt_254A4A4D8, (uint64_t)v23, a4);
          sub_20E83AA6C((uint64_t)"Upper", &v44, (uint64_t)v23, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v26 = v19 + v44 + 1;
          v27 = *a2;
          if (v26 <= *a2)
          {
            v45 = v19;
            v46 = v18 + v27 - v44;
            v35 = v41 + 4 * (v19 + (int)v10 * (v44 + v22)) + 4;
            sub_20E8391EC("Transpose", "No transpose", &v44, &v46, &v45, (uint64_t)&flt_254A4A4D4, v20, a4, v41 + 4 * (v26 * (int)v10 + 1), a4, (uint64_t)flt_254A4A4D8, v35, SHIDWORD(v35), a4);
            v46 = v18 + *v42 - v44;
            a2 = v42;
            sub_20E839318("Left", "Upper", "Transpose", "Non-unit", (unsigned int *)&v44, (unsigned int *)&v46, flt_254A4A4D8, v23, a4, (char *)(v41 + 4 * (v19 + (int)v10 * (v44 + v22)) + 4), a4);
          }
          LODWORD(v16) = v43;
          v19 += v43;
          v18 -= v43;
          v23 = (float *)((char *)v23 + v38);
          v20 += v36;
          v22 += v43;
          if (v19 + 1 > v12)
            return 0;
        }
      }
      else
      {
        v29 = v10 + 1;
        v30 = a3 + 4 * v17 + 4 * ((int)v10 + 1);
        v39 = 4 * v16;
        v37 = v16 * (v10 + 1);
        v31 = 1;
        while (1)
        {
          v32 = v18 + *a2;
          v45 = v32;
          if ((int)v16 < v32)
            v32 = v16;
          v44 = v32;
          LODWORD(v19) = v31 - 1;
          v46 = v31 - 1;
          v33 = (float *)(v41 + 4 * v29);
          sub_20E8394AC("Lower", "No transpose", (unsigned int *)&v44, (unsigned int *)&v46, &flt_254A4A4D4, v30, (unsigned int *)a4, flt_254A4A4D8, (uint64_t)v33, a4);
          sub_20E83AA6C((uint64_t)"Lower", &v44, (uint64_t)v33, a4, a5);
          v25 = *a5;
          if (*a5)
            break;
          v34 = *a2;
          if (v31 + v44 <= *a2)
          {
            v45 = v31 - 1;
            v46 = v18 + v34 - v44;
            sub_20E8391EC("No transpose", "Transpose", &v46, &v44, &v45, (uint64_t)&flt_254A4A4D4, v41 + 4 * (v40 + v31 + v44), a4, v30, a4, (uint64_t)flt_254A4A4D8, v41 + 4 * (v29 + v44), (unint64_t)(v41 + 4 * (v29 + v44)) >> 32, a4);
            v46 = v18 + *v42 - v44;
            a2 = v42;
            sub_20E839318("Right", "Lower", "Transpose", "Non-unit", (unsigned int *)&v46, (unsigned int *)&v44, flt_254A4A4D8, v33, a4, (char *)(v41 + 4 * (v29 + v44)), a4);
          }
          LODWORD(v16) = v43;
          v18 -= v43;
          v30 += v39;
          v29 += v37;
          v31 += v43;
          if (v31 > (int)v12)
            return 0;
        }
      }
      *a5 = v19 + v25;
    }
  }
  return 0;
}

uint64_t sub_20E8552A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t i;
  float32x4_t *v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  __int32 *v29;
  float32x2_t *v30;
  __int32 *v31;
  float32x2_t *v32;
  int32x2_t *v33;
  float32x2_t *v34;
  int32x2_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t *v51;
  __n128 *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  float32x2_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x2_t *v67;
  float32x4_t *v68;
  float32x2_t v69;
  float32x4_t *v70;
  __int32 *v71;
  float32x4_t v72;
  __int32 *v73;
  float32x2_t *v74;
  float32x2_t *v75;
  uint64_t result;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float *v80;
  __int32 *v81;
  float *v82;
  __int32 *v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t *v93;
  uint64_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t *v102;
  float32x2_t v103;
  float32x2_t *v104;
  float32x2_t *v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t *v108;
  __int32 *v109;
  __int32 *v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  uint64_t v114;
  unint64_t *v115;
  float32x2_t v116;
  float v117;

  a7.i64[1] = a8.i64[0];
  v20 = 0;
  v21 = 4 * a4;
  v22 = 4 * a6;
  v23 = a1 <= 3;
  for (i = a1 - 3; !v23; v20 += 4)
  {
    v25 = a5;
    a5 = (float32x4_t *)((char *)a5 + 4 * v22);
    if (v20)
    {
      v26 = 0;
      do
      {
        v27 = a2;
        v28 = (float32x2_t *)(a3 + v20 * v21);
        v29 = (__int32 *)(a3 + v26 * v21);
        v30 = (float32x2_t *)((char *)v28 + v21);
        v31 = &v29[(unint64_t)v21 / 4];
        v32 = (float32x2_t *)((char *)v28 + v21 + v21);
        v33 = (int32x2_t *)&v29[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
        v34 = (float32x2_t *)((char *)v32 + v21);
        v35 = (int32x2_t *)((char *)v33 + v21);
        v36 = (float32x4_t)veorq_s8(a8, a8);
        v37 = v36;
        v38 = v36;
        v39 = v36;
        if ((a2 & 1) == 0)
          goto LABEL_7;
        v16.i32[0] = *v29++;
        v17.i32[0] = *v31++;
        v18.i32[0] = v33->i32[0];
        v33 = (int32x2_t *)((char *)v33 + 4);
        v19.i32[0] = v35->i32[0];
        v35 = (int32x2_t *)((char *)v35 + 4);
        v40 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v41 = v30->f32[0];
        v30 = (float32x2_t *)((char *)v30 + 4);
        v42 = v32->f32[0];
        v32 = (float32x2_t *)((char *)v32 + 4);
        v43 = v34->f32[0];
        v34 = (float32x2_t *)((char *)v34 + 4);
        *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
        v19 = vtrn1_s32(v18, v19);
        *(int32x2_t *)&v16.u32[2] = v19;
        v36 = vmlaq_n_f32(v36, v16, v40);
        v37 = vmlaq_n_f32(v37, v16, v41);
        v38 = vmlaq_n_f32(v38, v16, v42);
        v39 = vmlaq_n_f32(v39, v16, v43);
        v27 = a2 - 1;
        if (a2 > 1)
        {
LABEL_7:
          do
          {
            v16.i64[0] = *(_QWORD *)v29;
            v29 += 2;
            v17.i64[0] = *(_QWORD *)v31;
            v31 += 2;
            v18 = *v33++;
            v19 = *v35++;
            v44 = *v28++;
            v45 = *v30++;
            v14 = *v32++;
            v15 = *v34++;
            *(int32x2_t *)&v16.u32[2] = v18;
            v17.u64[1] = (unint64_t)v19;
            v46 = (float32x4_t)vtrn1q_s32((int32x4_t)v16, v17);
            v47 = (float32x4_t)vtrn2q_s32((int32x4_t)v16, v17);
            v36 = vmlaq_lane_f32(vmlaq_n_f32(v36, v46, v44.f32[0]), v47, v44, 1);
            v37 = vmlaq_lane_f32(vmlaq_n_f32(v37, v46, v45.f32[0]), v47, v45, 1);
            v38 = vmlaq_lane_f32(vmlaq_n_f32(v38, v46, v14.f32[0]), v47, v14, 1);
            v39 = vmlaq_lane_f32(vmlaq_n_f32(v39, v46, v15.f32[0]), v47, v15, 1);
            v23 = v27 <= 2;
            v27 -= 2;
          }
          while (!v23);
        }
        a12 = *v25;
        v48 = (float32x4_t *)((char *)v25 + v22);
        v50 = *v48;
        v49 = (float32x4_t *)((char *)v48 + v22);
        v12 = *v49;
        v51 = (float32x4_t *)((char *)v49 + v22);
        v13 = *v51;
        v52 = (__n128 *)((char *)v51 + v22 + -4 * v22);
        a8 = (int8x16_t)vmlaq_laneq_f32(vmulq_n_f32(v36, a7.f32[0]), a12, a7, 2);
        *v52 = (__n128)a8;
        v53 = (float32x4_t *)((char *)v52 + v22);
        *v53 = vmlaq_laneq_f32(vmulq_n_f32(v37, a7.f32[0]), v50, a7, 2);
        v54 = (float32x4_t *)((char *)v53 + v22);
        *v54 = vmlaq_laneq_f32(vmulq_n_f32(v38, a7.f32[0]), v12, a7, 2);
        v55 = (float32x4_t *)((char *)v54 + v22);
        *v55 = vmlaq_laneq_f32(vmulq_n_f32(v39, a7.f32[0]), v13, a7, 2);
        v25 = (float32x4_t *)((char *)v55 + v22 + -4 * v22 + 16);
        v26 += 4;
      }
      while (v26 < v20);
    }
    v56 = a2;
    v57 = (__int32 *)(a3 + v20 * v21);
    v58 = &v57[(unint64_t)v21 / 4];
    v59 = (float32x2_t *)&v57[(unint64_t)v21 / 4 + (unint64_t)v21 / 4];
    v60 = (float32x2_t *)((char *)v59 + v21);
    a8 = veorq_s8(a8, a8);
    v61 = *(float32x2_t *)a8.i8;
    v62 = (float32x4_t)a8;
    v63 = (float32x4_t)a8;
    if ((a2 & 1) == 0)
      goto LABEL_12;
    v12.i32[0] = *v57++;
    v13.i32[0] = *v58++;
    v14.i32[0] = v59->i32[0];
    v59 = (float32x2_t *)((char *)v59 + 4);
    v15.i32[0] = v60->i32[0];
    v60 = (float32x2_t *)((char *)v60 + 4);
    *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
    v19 = vtrn1_s32((int32x2_t)v14, (int32x2_t)v15);
    *(int32x2_t *)&v16.u32[2] = v19;
    *(float32x2_t *)a8.i8 = vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v16.f32, v12.f32[0]);
    v61 = vmla_n_f32(v61, *(float32x2_t *)v16.f32, v13.f32[0]);
    v62 = vmlaq_n_f32(v62, v16, v14.f32[0]);
    v63 = vmlaq_n_f32(v63, v16, v15.f32[0]);
    v56 = a2 - 1;
    if (a2 > 1)
    {
LABEL_12:
      do
      {
        v64.i64[0] = *(_QWORD *)v57;
        v57 += 2;
        v65.i64[0] = *(_QWORD *)v58;
        v58 += 2;
        v14 = *v59++;
        v15 = *v60++;
        v64.u64[1] = (unint64_t)v14;
        v65.u64[1] = (unint64_t)v15;
        a12 = (float32x4_t)vtrn1q_s32(v64, v65);
        v66 = (float32x4_t)vtrn2q_s32(v64, v65);
        *(float32x2_t *)a8.i8 = vmla_lane_f32(vmla_n_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, *(float *)v64.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v64.i8, 1);
        v61 = vmla_lane_f32(vmla_n_f32(v61, *(float32x2_t *)a12.f32, *(float *)v65.i32), *(float32x2_t *)v66.f32, *(float32x2_t *)v65.i8, 1);
        v62 = vmlaq_lane_f32(vmlaq_n_f32(v62, a12, v14.f32[0]), v66, v14, 1);
        v63 = vmlaq_lane_f32(vmlaq_n_f32(v63, a12, v15.f32[0]), v66, v15, 1);
        v23 = v56 <= 2;
        v56 -= 2;
      }
      while (!v23);
    }
    a12.i32[0] = v25->i32[0];
    v67 = (float32x2_t *)((char *)v25 + v22);
    v69 = *v67;
    v68 = (float32x4_t *)((char *)v67 + v22);
    v12 = *v68;
    v70 = (float32x4_t *)((char *)v68 + v22);
    v13 = *v70;
    v71 = (__int32 *)((char *)v70 + v22 + -4 * v22);
    *(float *)a8.i32 = *(float *)a8.i32 * a7.f32[0];
    *(float32x2_t *)a8.i8 = vmla_laneq_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)a12.f32, a7, 2);
    v72 = vmlaq_laneq_f32(vmulq_n_f32(v62, a7.f32[0]), v12, a7, 2);
    v73 = &v71[(unint64_t)v22 / 2];
    *v71 = a8.i32[0];
    v74 = (float32x2_t *)&v71[(unint64_t)v22 / 4];
    *v74 = vmla_laneq_f32(vmul_n_f32(v61, a7.f32[0]), v69, a7, 2);
    v75 = (float32x2_t *)((char *)v74 + v22);
    *v75 = *(float32x2_t *)v72.f32;
    v73[2] = v72.i32[2];
    *(float32x4_t *)&v75->f32[(unint64_t)v22 / 4] = vmlaq_laneq_f32(vmulq_n_f32(v63, a7.f32[0]), v13, a7, 2);
    v23 = i <= 4;
    i -= 4;
  }
  v23 = i <= -3;
  result = i + 3;
  if (!v23)
  {
    if (result >= 2)
    {
      v77 = (unint64_t *)a5;
      a5 = (float32x4_t *)((char *)a5 + 2 * v22);
      if (v20)
      {
        v78 = 0;
        do
        {
          v79 = a2;
          v80 = (float *)(a3 + v20 * v21);
          v81 = (__int32 *)(a3 + v78 * v21);
          v82 = &v80[(unint64_t)v21 / 4];
          v83 = &v81[(unint64_t)v21 / 4];
          v84 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          v85 = v84;
          if ((a2 & 1) == 0)
            goto LABEL_22;
          v16.i32[0] = *v81++;
          v17.i32[0] = *v83++;
          v86 = *v80++;
          v87 = *v82++;
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v84 = vmla_n_f32(v84, *(float32x2_t *)v16.f32, v86);
          v85 = vmla_n_f32(v85, *(float32x2_t *)v16.f32, v87);
          v79 = a2 - 1;
          if (a2 > 1)
          {
LABEL_22:
            do
            {
              v16.i64[0] = *(_QWORD *)v81;
              v81 += 2;
              v17.i64[0] = *(_QWORD *)v83;
              v83 += 2;
              v12.i64[0] = *(_QWORD *)v80;
              v80 += 2;
              v13.i64[0] = *(_QWORD *)v82;
              v82 += 2;
              v88 = (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v89 = (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
              v84 = vmla_lane_f32(vmla_n_f32(v84, v88, v12.f32[0]), v89, *(float32x2_t *)v12.f32, 1);
              v85 = vmla_lane_f32(vmla_n_f32(v85, v88, v13.f32[0]), v89, *(float32x2_t *)v13.f32, 1);
              v23 = v79 <= 2;
              v79 -= 2;
            }
            while (!v23);
          }
          a12.i64[0] = *v77;
          v90 = (float32x2_t *)((char *)v77 + v22);
          v91 = *v90;
          v92 = (float32x2_t *)((char *)v90 + v22 + -2 * v22);
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v84, a7.f32[0]), *(float32x2_t *)a12.f32, a7, 2);
          *v92 = *(float32x2_t *)a8.i8;
          v93 = (float32x2_t *)((char *)v92 + v22);
          *v93 = vmla_laneq_f32(vmul_n_f32(v85, a7.f32[0]), v91, a7, 2);
          v77 = (unint64_t *)((char *)&v93[1] + v22 + -2 * v22);
          v78 += 2;
        }
        while (v78 < v20);
      }
      v94 = a2;
      v95 = (float32x2_t *)(a3 + v20 * v21);
      v96 = (float32x2_t *)((char *)v95 + v21);
      v97 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      v98 = v97;
      if ((a2 & 1) == 0)
        goto LABEL_27;
      v12.i32[0] = v95->i32[0];
      v95 = (float32x2_t *)((char *)v95 + 4);
      v13.i32[0] = v96->i32[0];
      v96 = (float32x2_t *)((char *)v96 + 4);
      *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v12.f32, *(int32x2_t *)v13.f32);
      v97 = vmla_n_f32(v97, *(float32x2_t *)v16.f32, v12.f32[0]);
      v98 = vmla_n_f32(v98, *(float32x2_t *)v16.f32, v13.f32[0]);
      v94 = a2 - 1;
      if (a2 > 1)
      {
LABEL_27:
        do
        {
          v99 = *v95++;
          v100 = *v96++;
          *(int32x2_t *)a12.f32 = vtrn1_s32((int32x2_t)v99, (int32x2_t)v100);
          v101 = (float32x2_t)vtrn2_s32((int32x2_t)v99, (int32x2_t)v100);
          v97 = vmla_lane_f32(vmla_n_f32(v97, *(float32x2_t *)a12.f32, v99.f32[0]), v101, v99, 1);
          v98 = vmla_lane_f32(vmla_n_f32(v98, *(float32x2_t *)a12.f32, v100.f32[0]), v101, v100, 1);
          v23 = v94 <= 2;
          v94 -= 2;
        }
        while (!v23);
      }
      a12.i32[0] = *(_DWORD *)v77;
      v102 = (float32x2_t *)((char *)v77 + v22);
      v103 = *v102;
      v104 = (float32x2_t *)((char *)v102 + v22 + -2 * v22);
      v97.f32[0] = v97.f32[0] * a7.f32[0];
      *(float32x2_t *)a8.i8 = vmla_laneq_f32(v97, *(float32x2_t *)a12.f32, a7, 2);
      v104->i32[0] = a8.i32[0];
      *(float32x2_t *)((char *)v104 + v22) = vmla_laneq_f32(vmul_n_f32(v98, a7.f32[0]), v103, a7, 2);
      result -= 2;
      v20 += 2;
    }
    if (result >= 1)
    {
      v105 = (float32x2_t *)a5;
      v106 = 0;
      if (v20 >= 1)
      {
        do
        {
          v107 = a2;
          v108 = (float32x2_t *)(a3 + v20 * v21);
          v109 = (__int32 *)(a3 + v106 * v21);
          v110 = &v109[(unint64_t)v21 / 4];
          v111 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
          if ((a2 & 1) == 0)
            goto LABEL_34;
          v16.i32[0] = *v109++;
          v17.i32[0] = *v110++;
          v112 = v108->f32[0];
          v108 = (float32x2_t *)((char *)v108 + 4);
          *(int32x2_t *)v16.f32 = vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8);
          v111 = vmla_n_f32(v111, *(float32x2_t *)v16.f32, v112);
          v107 = a2 - 1;
          if (a2 > 1)
          {
LABEL_34:
            do
            {
              v16.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v17.i64[0] = *(_QWORD *)v110;
              v110 += 2;
              v113 = *v108++;
              v111 = vmla_lane_f32(vmla_n_f32(v111, (float32x2_t)vtrn1_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113.f32[0]), (float32x2_t)vtrn2_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.i8), v113, 1);
              v23 = v107 <= 2;
              v107 -= 2;
            }
            while (!v23);
          }
          *(float32x2_t *)a12.f32 = *v105;
          *(float32x2_t *)a8.i8 = vmla_laneq_f32(vmul_n_f32(v111, a7.f32[0]), *v105, a7, 2);
          *v105++ = *(float32x2_t *)a8.i8;
          v106 += 2;
        }
        while (v106 < v20 - 1);
      }
      v114 = a2;
      v115 = (unint64_t *)(a3 + v20 * v21);
      v116 = (float32x2_t)veor_s8(*(int8x8_t *)a8.i8, *(int8x8_t *)a8.i8);
      if ((a2 & 1) == 0
        || (v117 = *(float *)v115,
            v115 = (unint64_t *)((char *)v115 + 4),
            v116.f32[0] = v117 * v117,
            v114 = a2 - 1,
            a2 > 1))
      {
        do
        {
          a12.i64[0] = *v115++;
          v116 = vmla_f32(v116, *(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
          v23 = v114 <= 2;
          v114 -= 2;
        }
        while (!v23);
        v116.f32[0] = vaddv_f32(v116);
      }
      a12.i32[0] = v105->i32[0];
      v116.f32[0] = v116.f32[0] * a7.f32[0];
      v105->i32[0] = vmla_laneq_f32(v116, *(float32x2_t *)a12.f32, a7, 2).u32[0];
    }
  }
  return result;
}

void sub_20E85575C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int128 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,char a58)
{
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(float);
  void (*v71)(__n128);
  float32x4_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float *(*v88)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  float *(*v89)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float32x2_t v110;
  float32x2_t *v111;
  __n128 *v112;
  float32x4_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x2_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const float *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(float);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*vars0)(__n128);
  uint64_t vars8;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  float32x2_t v175;
  float *(*v176)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  float *(*v185)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  float32x4_t *v191;
  uint64_t v192;
  uint64_t v193;

  v58 = MEMORY[0x24BDAC7A8](a1);
  v193 = v62;
  v186 = v63;
  v65 = v64;
  v67 = v66;
  v68 = v59;
  STACK[0x102A8] = *MEMORY[0x24BDAC8D0];
  if (v58 == 111)
    v69 = 1;
  else
    v69 = v60;
  v70 = (void (*)(float))sub_20E84ACFC;
  if (v58 == 111)
    v70 = (void (*)(float))sub_20E84AE38;
  v153 = v70;
  if (v58 == 111)
    v71 = (void (*)(__n128))sub_20E84B028;
  else
    v71 = (void (*)(__n128))sub_20E84B1BC;
  v190 = v61;
  if (v59 < 1)
  {
    v191 = (float32x4_t *)&a58;
    v73 = &STACK[0x10240];
  }
  else
  {
    v72 = (float32x4_t *)malloc_type_malloc((v59 << 9) + 65632, 0x100004052888210uLL);
    *(_QWORD *)&v61 = v190;
    v191 = v72;
    v73 = (unint64_t *)&v72[4096];
  }
  v163 = (uint64_t)(v73 + 8);
  if (v65 >= 1)
  {
    v156 = 0;
    v74 = 0;
    v184 = v68 - 3;
    v175 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&v61, 0).u64[0];
    if (v68 <= 0)
      v75 = -(-v68 & 3);
    else
      v75 = v68 & 3;
    v164 = (v193 << 9) + 512;
    v165 = v75;
    v181 = 16 * v193;
    v179 = v186 + 12 * v193;
    v162 = 4 * v193;
    v174 = v186 + 16;
    v76 = 128;
    v178 = v186 + 8 * v193;
    v177 = v186 + 4 * v193;
    v152 = v65;
    vars8 = v69;
    v161 = v68;
    vars0 = v71;
    while (1)
    {
      v77 = v65 >= v76 ? v76 : v65;
      v154 = v74 + 128;
      v155 = v76;
      v78 = v74 + 128 <= v65 ? 128 : v65 - v74;
      v192 = v78;
      v153(v67);
      v79 = (__n128)v190;
      if (v68 >= 1)
        break;
LABEL_134:
      v76 = v155 + 128;
      v156 -= 128;
      v74 = v154;
      v65 = v152;
      if (v154 >= v152)
        goto LABEL_135;
    }
    v173 = 0;
    v80 = 0;
    v81 = 0;
    v166 = (v77 + v156) << 9;
    v182 = 16 * (v77 + v156);
    v82 = *(float *)&v190 != 0.0;
    if (*(float *)&v190 == 1.0 || v74 != 0)
      v82 = 0;
    v183 = v82;
    v84 = v192 & 3;
    if (v192 <= 0)
      v84 = -(-v192 & 3);
    v157 = 4 - v84;
    v158 = v84;
    v170 = v186;
    v85 = 128;
    v172 = v186;
    v171 = v163;
    v185 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
    v176 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
    while (1)
    {
      v168 = v85;
      v169 = v80;
      if (v68 >= v85)
        v86 = v85;
      else
        v86 = v68;
      v180 = v86 + v80;
      v167 = v81 + 128;
      if (v81 + 128 <= v68)
        v87 = 128;
      else
        v87 = v68 - v81;
      v188 = v186 + 4 * v81;
      v189 = v81;
      v88 = v176;
      if ((v87 & 7) != 0)
        v88 = sub_20E846B90;
      v176 = v88;
      v89 = v185;
      if ((v87 & 7) != 0)
        v89 = sub_20E84D820;
      v185 = v89;
      v187 = v87;
      v71(v79);
      v90 = v189;
      v91 = *(float *)&v190;
      v92 = v189;
      if (v189 < v184)
        break;
LABEL_92:
      if (v165)
      {
        if (v92 - v90 >= v187)
          v131 = v187;
        else
          v131 = v92 - v90;
        v132 = v187 - v131;
        if (v187 - v131 >= 3)
          v133 = 3;
        else
          v133 = v187 - v131;
        if (v132 >= 1)
        {
          v79 = 0uLL;
          a54 = 0u;
          a55 = 0u;
          a52 = 0u;
          a53 = 0u;
          a50 = 0u;
          a51 = 0u;
        }
        v134 = v188 + 4 * v92 * v193;
        v135 = (const float *)(v163 + 4 * v92 * v192);
        if (v183)
        {
          if (v131)
            sub_20E836E9C(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192, v91);
          if (v132 >= 1)
          {
            v136 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v137 = -(-v131 & 7);
              else
                v137 = v131 & 7;
              v136 = v137 * v157;
            }
            sub_20E836FCC((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v136), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v138 = 0;
              v139 = v92 + v169;
              if (v92 + v169 >= v180)
                v139 = v180;
              v140 = v170 + v162 * v92 + 4 * v139;
              v141 = &a50;
              v142 = 1;
              do
              {
                v143 = 0;
                do
                {
                  v79.n128_f32[0] = *((float *)v141 + v143) + (float)(*(float *)(v140 + 4 * v143) * *(float *)&v190);
                  *(_DWORD *)(v140 + 4 * v143++) = v79.n128_u32[0];
                }
                while (v142 != v143);
                ++v138;
                ++v142;
                v141 += 2;
                v140 += v162;
              }
              while (v138 != v165);
            }
          }
        }
        else
        {
          if (v131)
            sub_20E836FCC(v191, (const float *)(v163 + 4 * v92 * v192), v134, v193, v131, v165, v192);
          if (v132 >= 1)
          {
            v144 = v158;
            if (v158)
            {
              if (v131 <= 0)
                v145 = -(-v131 & 7);
              else
                v145 = v131 & 7;
              v144 = v145 * v157;
            }
            sub_20E836FCC((float32x4_t *)((char *)v191 + 4 * v131 * v192 + 4 * v144), v135, (uint64_t)&a50, 8, v133, v165, v192);
            if (v165 >= 1)
            {
              v146 = 0;
              v147 = v92 + v169;
              if (v92 + v169 >= v180)
                v147 = v180;
              v148 = v170 + v162 * v92 + 4 * v147;
              v149 = &a50;
              v150 = 1;
              do
              {
                v151 = 0;
                do
                {
                  v79.n128_f32[0] = *(float *)(v148 + 4 * v151) + *((float *)v149 + v151);
                  *(_DWORD *)(v148 + 4 * v151++) = v79.n128_u32[0];
                }
                while (v150 != v151);
                ++v146;
                ++v150;
                v149 += 2;
                v148 += v162;
              }
              while (v146 != v165);
            }
          }
        }
      }
      v171 += v166;
      v172 += v164;
      v85 = v168 + 128;
      v80 = v169 - 128;
      v173 += v164;
      v170 += 512;
      v81 = v167;
      if (v167 >= v68)
        goto LABEL_134;
    }
    v93 = 0;
    v95 = v172;
    v94 = v173;
    v96 = (_OWORD *)v171;
    v97 = v189;
    while (1)
    {
      if (v93 <= 0)
        v98 = -(-v93 & 7);
      else
        v98 = v93 & 7;
      v99 = v93 - v98;
      if (v93 - v98 >= v187)
        v100 = v187;
      else
        v100 = v93 - v98;
      v101 = v187 - v100;
      if (v187 - v100 >= 1)
      {
        v79 = 0uLL;
        a56 = 0u;
        a57 = 0u;
        a54 = 0u;
        a55 = 0u;
        a52 = 0u;
        a53 = 0u;
        a50 = 0u;
        a51 = 0u;
      }
      v102 = v90 + v93;
      v103 = v188 + 4 * v97 * v193;
      v104 = (float32x4_t *)(v186 + v94);
      if (v183)
      {
        if (v100)
        {
          v176(v191, (uint64_t)v96, v104, v193, v100, v192, v91);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v105 = 8;
        else
          v105 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v105);
        v106 = v103 + 4 * v100;
        if (v180 >= v99)
          v107 = v99;
        else
          v107 = v180;
        v108 = 4 * v107;
        if ((v102 & 4) != 0)
        {
          v91 = *(float *)&v190;
          *(float32x4_t *)(v95 + v108) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v95 + v108), *(float *)&v190), (float32x4_t)a50);
          if (v180 >= v99)
            v121 = v99;
          else
            v121 = v180;
          *(float *)(v174 + 4 * v121 + v94) = *(float *)&a51
                                            + (float)(*(float *)(v174 + 4 * v121 + v94) * *(float *)&v190);
          v122 = v177 + 4 * v121 + v94;
          *(float32x4_t *)v122 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v122, *(float *)&v190), (float32x4_t)a52);
          *(float32x2_t *)(v122 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v122 + 16)), *(float32x2_t *)&a53);
          v123 = v178 + 4 * v121 + v94;
          *(float32x4_t *)v123 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)v123, *(float *)&v190), (float32x4_t)a54);
          *(float32x2_t *)(v123 + 16) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v123 + 16)), *(float32x2_t *)&a55);
          *(float *)(v123 + 24) = *((float *)&a55 + 2) + (float)(*(float *)(v123 + 24) * *(float *)&v190);
          v124 = (float32x4_t *)(v179 + v94 + 4 * v121);
          v125 = v124[1];
          *v124 = vaddq_f32(vmulq_n_f32(*v124, *(float *)&v190), (float32x4_t)a56);
          v112 = (__n128 *)(v106 + 12 * v193 + 16);
          v113 = vmulq_n_f32(v125, *(float *)&v190);
          v114 = &a57;
        }
        else
        {
          v91 = *(float *)&v190;
          *(float *)(v95 + v108) = *(float *)&a50 + (float)(*(float *)(v95 + v108) * *(float *)&v190);
          if (v180 >= v99)
            v109 = v99;
          else
            v109 = v180;
          v110 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v109 + v94) = vadd_f32(vmul_f32(v175, *(float32x2_t *)(v177 + 4 * v109 + v94)), *(float32x2_t *)&a52);
          v111 = (float32x2_t *)(v178 + 4 * v109 + v94);
          *v111 = vadd_f32(vmul_f32(v175, *v111), v110);
          v111[1].f32[0] = *((float *)&a54 + 2) + (float)(v111[1].f32[0] * *(float *)&v190);
          v112 = (__n128 *)(v106 + 12 * v193);
          v113 = vmulq_n_f32(*(float32x4_t *)(v179 + v94 + 4 * v109), *(float *)&v190);
          v114 = &a56;
        }
      }
      else
      {
        if (v100)
        {
          v185(v191, (uint64_t)v96, v104, v193, v100, v192);
          v91 = *(float *)&v190;
        }
        if (v101 < 1)
          goto LABEL_90;
        if (v101 >= 8)
          v115 = 8;
        else
          v115 = v187 - v100;
        ((void (*)(float32_t *, _OWORD *, __int128 *, uint64_t, uint64_t))v185)(&v191->f32[v100 * v192], v96, &a50, 8, v115);
        v116 = v180;
        if (v180 >= v99)
          v117 = v99;
        else
          v117 = v180;
        v118 = 4 * v117;
        if ((v102 & 4) != 0)
        {
          *(float32x4_t *)(v95 + v118) = vaddq_f32(*(float32x4_t *)(v95 + v118), (float32x4_t)a50);
          if (v180 >= v99)
            v126 = v99;
          else
            v126 = v180;
          *(float *)(v174 + 4 * v126 + v94) = *(float *)(v174 + 4 * v126 + v94) + *(float *)&a51;
          v127 = v177 + 4 * v126 + v94;
          *(float32x4_t *)v127 = vaddq_f32(*(float32x4_t *)v127, (float32x4_t)a52);
          *(float32x2_t *)(v127 + 16) = vadd_f32(*(float32x2_t *)(v127 + 16), *(float32x2_t *)&a53);
          v128 = v178 + 4 * v126 + v94;
          *(float32x4_t *)v128 = vaddq_f32(*(float32x4_t *)v128, (float32x4_t)a54);
          *(float32x2_t *)(v128 + 16) = vadd_f32(*(float32x2_t *)(v128 + 16), *(float32x2_t *)&a55);
          *(float *)(v128 + 24) = *(float *)(v128 + 24) + *((float *)&a55 + 2);
          v129 = v179 + v94 + 4 * v126;
          *(float32x4_t *)v129 = vaddq_f32(*(float32x4_t *)v129, (float32x4_t)a56);
          v130 = *(float32x4_t *)(v129 + 16);
          v112 = (__n128 *)(v129 + 16);
          v113 = v130;
          v114 = &a57;
        }
        else
        {
          *(float *)(v95 + v118) = *(float *)(v95 + v118) + *(float *)&a50;
          if (v180 >= v99)
            v116 = v99;
          v119 = (float32x2_t)a54;
          *(float32x2_t *)(v177 + 4 * v116 + v94) = vadd_f32(*(float32x2_t *)(v177 + 4 * v116 + v94), *(float32x2_t *)&a52);
          v120 = (float32x2_t *)(v178 + 4 * v116 + v94);
          *v120 = vadd_f32(*v120, v119);
          v120[1].f32[0] = v120[1].f32[0] + *((float *)&a54 + 2);
          v112 = (__n128 *)(v103 + 4 * v100 + 12 * v193);
          v113 = *(float32x4_t *)(v179 + v94 + 4 * v116);
          v114 = &a56;
        }
        v91 = *(float *)&v190;
      }
      v79 = (__n128)vaddq_f32(v113, *(float32x4_t *)v114);
      *v112 = v79;
LABEL_90:
      v97 += 4;
      v93 += 4;
      v90 = v189;
      v92 = v189 + v93;
      v96 = (_OWORD *)((char *)v96 + v182);
      v95 += v181;
      v94 += v181;
      if (v189 + v93 >= v184)
      {
        v68 = v161;
        v71 = vars0;
        goto LABEL_92;
      }
    }
  }
LABEL_135:
  if (v68 >= 1)
    free(v191);
}

void sub_20E8561C4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 8 * a1;
    v7 = 8 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_20E856214(int __N, uint64_t a2, double *__X, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 8 * a4;
    do
    {
      cblas_dscal(__N, a5, __X, 1);
      __X = (double *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_20E856278(int a1, uint64_t __N, double *__X, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __N;
  if (a5 == 0.0)
  {
    if (a1 == 121)
    {
      if (__N >= 1)
      {
        v7 = 8 * a4;
        v8 = 8;
        do
        {
          bzero(__X, v8);
          v8 += 8;
          __X = (double *)((char *)__X + v7);
          --v6;
        }
        while (v6);
      }
    }
    else if (__N >= 1)
    {
      v12 = 8 * __N;
      v13 = 8 * a4 + 8;
      do
      {
        bzero(__X, v12);
        v12 -= 8;
        __X = (double *)((char *)__X + v13);
        --v6;
      }
      while (v6);
    }
  }
  else if (a1 == 121)
  {
    if (__N >= 1)
    {
      v10 = 0;
      v11 = 8 * a4;
      do
      {
        cblas_dscal(++v10, a5, __X, 1);
        __X = (double *)((char *)__X + v11);
      }
      while (v6 != v10);
    }
  }
  else if (__N >= 1)
  {
    v14 = 8 * a4 + 8;
    do
    {
      cblas_dscal(v6, a5, __X, 1);
      __X = (double *)((char *)__X + v14);
      --v6;
    }
    while (v6);
  }
}

void sub_20E856390(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  const double *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (double *)(a3 + 8);
      v8 = 1;
      v9 = (const double *)(a3 + 8 * __incY);
      do
      {
        cblas_dcopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_dcopy(--v6, (const double *)(v5 + 8), 1, (double *)(v5 + 8 * __incY), __incY);
      v5 += 8 * __incY + 8;
    }
    while (v6 != 1);
  }
}

void sub_20E85644C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (a2 >= 1)
  {
    v5 = a2;
    v6 = 4 * a1;
    v7 = 4 * a4;
    do
    {
      bzero(a3, v6);
      a3 += v7;
      --v5;
    }
    while (v5);
  }
}

void sub_20E85649C(int __N, uint64_t a2, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v9;

  if (a2 >= 1)
  {
    v7 = a2;
    v9 = 4 * a4;
    do
    {
      cblas_sscal(__N, a5, __X, 1);
      __X = (float *)((char *)__X + v9);
      --v7;
    }
    while (v7);
  }
}

void sub_20E856500(int a1, uint64_t __N, float *__X, uint64_t a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = __N;
  if (a1 == 121)
  {
    if (__N >= 1)
    {
      v8 = 0;
      v9 = 4 * a4;
      do
      {
        cblas_sscal(++v8, a5, __X, 1);
        __X = (float *)((char *)__X + v9);
      }
      while (v7 != v8);
    }
  }
  else if (__N >= 1)
  {
    v10 = 4 * a4 + 4;
    do
    {
      cblas_sscal(v7, a5, __X, 1);
      __X = (float *)((char *)__X + v10);
      --v7;
    }
    while (v7);
  }
}

void sub_20E8565A4(int a1, uint64_t a2, uint64_t a3, uint64_t __incY)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  const float *v9;

  v5 = a3;
  v6 = a2;
  if (a1 == 121)
  {
    if (a2 >= 2)
    {
      v7 = (float *)(a3 + 4);
      v8 = 1;
      v9 = (const float *)(a3 + 4 * __incY);
      do
      {
        cblas_scopy(v8++, v9, 1, v7++, __incY);
        v9 += __incY;
      }
      while (v6 != v8);
    }
  }
  else if (a2 >= 2)
  {
    do
    {
      cblas_scopy(--v6, (const float *)(v5 + 4), 1, (float *)(v5 + 4 * __incY), __incY);
      v5 += 4 * __incY + 4;
    }
    while (v6 != 1);
  }
}

uint64_t sub_20E856660(char *a1, char *a2, __CLPK_integer *a3, __CLPK_doublereal *a4, __CLPK_integer *a5, __CLPK_doublereal *a6, __CLPK_doublereal *a7, int *a8, __CLPK_integer *a9)
{
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  __CLPK_doublereal *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __CLPK_doublereal *v30;
  int v31;
  int v32;
  __CLPK_doublereal *v33;
  __CLPK_doublereal *v34;
  int v35;
  int v36;
  double *v38;
  uint64_t v40;
  __CLPK_doublereal __cto;
  int n;
  double da;
  int v44;

  v44 = 0;
  da = 0.0;
  n = 0;
  v40 = 0;
  v15 = lsame_();
  v16 = lsame_();
  v17 = *a8;
  *a9 = 0;
  if (!v15 && !lsame_())
  {
    v20 = -1;
    goto LABEL_22;
  }
  if (!v16 && !lsame_())
  {
    v20 = -2;
    goto LABEL_22;
  }
  v18 = *a3;
  if (*a3 < 0)
  {
    v20 = -3;
    goto LABEL_22;
  }
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = *a3;
  if (*a5 < v19)
  {
    v20 = -5;
LABEL_22:
    *a9 = v20;
    goto LABEL_23;
  }
  v20 = *a9;
  __cto = 1.0;
  if (v20)
  {
LABEL_23:
    v44 = -v20;
    xerbla_();
    return 0;
  }
  v21 = 34 * v18;
  v22 = 3 * v18 - 1;
  if (!v18)
    v21 = 1;
  v23 = (double)v21;
  *a7 = (double)v21;
  if (!v18)
    v22 = 1;
  if (*a8 < v22 && v17 != -1)
  {
    v20 = -8;
    goto LABEL_22;
  }
  if (v17 != -1 && v18)
  {
    if (v18 == 1)
    {
      *a6 = *a4;
      *a7 = 2.0;
      if (v15)
        *a4 = 1.0;
    }
    else
    {
      v25 = a7 - 1;
      v26 = dlamch_("Safe minimum");
      v27 = v26 / dlamch_("Precision");
      v28 = dlansy_("M", a2, a3, a4, a5, a7);
      if ((v28 <= 0.0 || (v29 = sqrt(v27), v28 >= v29)) && (v29 = sqrt(1.0 / v27), v28 <= v29))
      {
        v36 = 0;
      }
      else
      {
        __cto = v29 / v28;
        dlascl_(a2, dword_254A5A648, dword_254A5A648, &dbl_254A4A4E0, &__cto, a3, a3, a4, a5, a9);
        v36 = 1;
      }
      v30 = a6;
      v31 = *a3 + 1;
      v32 = v31 + *a3;
      LODWORD(v40) = *a8 - v32 + 1;
      v33 = &v25[v31];
      v34 = a6;
      v38 = &v25[v32];
      sub_20E8448B0(a2, (unsigned int *)a3, a4, a5, v34, (uint64_t)a7, (uint64_t)v33, v38, (int *)&v40, (int *)&v40 + 1);
      if (v15)
      {
        sub_20E848C38((uint64_t)a2, a3, a4, a5, (uint64_t)v33, v38, (int *)&v40, (int *)&v40 + 1);
        dsteqr_(a1, a3, v30, a7, a4, a5, v33, a9);
      }
      else
      {
        dsterf_(a3, v30, a7, a9);
      }
      if (v36)
      {
        if (*a9)
          v35 = *a9 - 1;
        else
          v35 = *a3;
        n = v35;
        da = 1.0 / __cto;
        dscal_(&n, &da, v30, &dword_254A4A4E8);
      }
      *a7 = v23;
    }
  }
  return 0;
}

uint64_t sub_20E8569E0(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, int32x4_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  int32x4_t v24;
  int32x4_t v25;

  v5 = (uint64_t *)((char *)a3 + 4 * a4);
  v6 = &a3[a4];
  v7 = &v5[a4];
  v8 = &v6[a4];
  v9 = &v7[a4];
  v10 = &v8[a4];
  v11 = &v9[a4];
  v12 = 32 * a4 - 4 * a2;
  do
  {
    v13 = a2 - 1;
    if (a2 > 1)
    {
      do
      {
        v14.i64[0] = *a3++;
        v15.i64[0] = *v5++;
        v16 = *v6++;
        v17 = *v7++;
        v18.i64[0] = *v8++;
        v19.i64[0] = *v9++;
        v20 = *v10++;
        v21 = *v11++;
        v14.i64[1] = v16;
        v15.i64[1] = v17;
        v18.i64[1] = v20;
        v19.i64[1] = v21;
        *a5 = vtrn1q_s32(v14, v15);
        a5[1] = vtrn1q_s32(v18, v19);
        v22 = a5 + 2;
        *v22 = vtrn2q_s32(v14, v15);
        v22[1] = vtrn2q_s32(v18, v19);
        a5 = v22 + 2;
        v23 = v13 <= 2;
        v13 -= 2;
      }
      while (!v23);
    }
    if (!v13)
    {
      v24.i32[0] = *(_DWORD *)a3;
      a3 = (uint64_t *)((char *)a3 + 4);
      v24.i32[1] = *(_DWORD *)v5;
      v5 = (uint64_t *)((char *)v5 + 4);
      v24.i32[2] = *(_DWORD *)v6;
      v6 = (uint64_t *)((char *)v6 + 4);
      v24.i32[3] = *(_DWORD *)v7;
      v7 = (uint64_t *)((char *)v7 + 4);
      v25.i32[0] = *(_DWORD *)v8;
      v8 = (uint64_t *)((char *)v8 + 4);
      v25.i32[1] = *(_DWORD *)v9;
      v9 = (uint64_t *)((char *)v9 + 4);
      v25.i32[2] = *(_DWORD *)v10;
      v10 = (uint64_t *)((char *)v10 + 4);
      v25.i32[3] = *(_DWORD *)v11;
      v11 = (uint64_t *)((char *)v11 + 4);
      *a5 = v24;
      a5[1] = v25;
      a5 += 2;
    }
    v23 = result <= 8;
    result -= 8;
    a3 = (uint64_t *)((char *)a3 + v12);
    v5 = (uint64_t *)((char *)v5 + v12);
    v6 = (uint64_t *)((char *)v6 + v12);
    v7 = (uint64_t *)((char *)v7 + v12);
    v8 = (uint64_t *)((char *)v8 + v12);
    v9 = (uint64_t *)((char *)v9 + v12);
    v10 = (uint64_t *)((char *)v10 + v12);
    v11 = (uint64_t *)((char *)v11 + v12);
  }
  while (!v23);
  return result;
}

void sub_20E856AB0(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  double *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  double v48;
  double v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double *v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  uint64_t v83;
  float64x2_t *v84;
  double *v85;
  float64x2_t *v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v18 = 2;
      }
      else
      {
        v22 = *(double *)(a3 + 8);
        v23 = __X + 1;
        v18 = 2;
        v24 = __N;
        do
        {
          v25 = *v23;
          v26 = *(v23 - 1) * a7;
          *(v23 - 1) = v26;
          *v23 = v25 * a7 - v26 * v22;
          v23 += __incX;
          --v24;
        }
        while (v24);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, __X, __incX);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
  }
  else if (__N < 1)
  {
    v18 = 3;
  }
  else
  {
    v14 = *(double *)(a3 + 8);
    v15 = *(double *)(a3 + 16);
    v16 = *(double *)(a3 + 8 * a4 + 16);
    v17 = __X + 2;
    v18 = 3;
    v19 = __N;
    do
    {
      v20 = *(v17 - 2) * a7;
      v21 = *(v17 - 1) * a7 - v20 * v14;
      *(v17 - 2) = v20;
      *(v17 - 1) = v21;
      *v17 = -(v16 * v21 + v20 * v15 - *v17 * a7);
      v17 += __incX;
      --v19;
    }
    while (v19);
  }
  if (v18 < a1)
  {
    v27 = 8 * a4;
    v28 = 8 * __incX;
    do
    {
      if (__N < 4)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        v30 = (float64x2_t *)(a3 + 8 * v18);
        v31 = __X;
        do
        {
          v32 = (float64x2_t *)&v31[(unint64_t)v28 / 8];
          v33 = (float64x2_t *)&v31[2 * __incX];
          v34 = (float64x2_t *)&v31[3 * __incX];
          v35 = (float64x2_t *)(a3 + 8 * v18);
          v36 = v18;
          v37 = (float64x2_t *)v31;
          v38 = (float64x2_t)veorq_s8(v7, v7);
          v39 = v38;
          v40 = v38;
          v41 = v38;
          v42 = v38;
          v43 = v38;
          v44 = v38;
          v45 = v38;
          if ((v18 & 1) != 0)
          {
            v46 = v30[1];
            v35 = (float64x2_t *)((char *)v30 + v27);
            v37 = (float64x2_t *)(v31 + 1);
            v47 = v32->f64[0];
            v32 = (float64x2_t *)((char *)v32 + 8);
            v48 = v33->f64[0];
            v33 = (float64x2_t *)((char *)v33 + 8);
            v49 = v34->f64[0];
            v34 = (float64x2_t *)((char *)v34 + 8);
            v38 = vmlaq_n_f64(v38, *v30, *v31);
            v40 = vmlaq_n_f64(v40, *v30, v47);
            v42 = vmlaq_n_f64(v42, *v30, v48);
            v44 = vmlaq_n_f64(v44, *v30, v49);
            v39 = vmlaq_n_f64(v39, v46, *v31);
            v41 = vmlaq_n_f64(v41, v46, v47);
            v43 = vmlaq_n_f64(v43, v46, v48);
            v45 = vmlaq_n_f64(v45, v46, v49);
            v36 = v18 - 1;
          }
          for (; v36; v36 -= 2)
          {
            v51 = *v35;
            v52 = v35[1];
            v50 = (float64x2_t *)((char *)v35 + v27);
            v53 = *v50;
            v54 = v50[1];
            v35 = (float64x2_t *)((char *)v50 + v27);
            v55 = *v37++;
            v56 = *v32++;
            v57 = *v33++;
            v58 = *v34++;
            v38 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v51, v55.f64[0]), v53, v55, 1);
            v40 = vmlaq_laneq_f64(vmlaq_n_f64(v40, v51, v56.f64[0]), v53, v56, 1);
            v42 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v51, v57.f64[0]), v53, v57, 1);
            v44 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v51, v58.f64[0]), v53, v58, 1);
            v39 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v52, v55.f64[0]), v54, v55, 1);
            v41 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v52, v56.f64[0]), v54, v56, 1);
            v43 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v52, v57.f64[0]), v54, v57, 1);
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v52, v58.f64[0]), v54, v58, 1);
          }
          v59 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v37, a7), v38);
          v60 = (int64x2_t)vsubq_f64(vmulq_n_f64(v37[1], a7), v39);
          v61 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v32, a7), v40);
          v62 = (int64x2_t)vsubq_f64(vmulq_n_f64(v32[1], a7), v41);
          v63 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v33, a7), v42);
          v64 = (int64x2_t)vsubq_f64(vmulq_n_f64(v33[1], a7), v43);
          v65 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v34, a7), v44);
          v66 = (int64x2_t)vsubq_f64(vmulq_n_f64(v34[1], a7), v45);
          v67 = (float64x2_t)vtrn2q_s64(v60, v62);
          v68 = (float64x2_t)vtrn1q_s64(v60, v62);
          v69 = (float64x2_t)vtrn2q_s64(v59, v61);
          v70 = (float64x2_t)vtrn1q_s64(v59, v61);
          v71 = (float64x2_t)vtrn1q_s64(v63, v65);
          v72 = *v35;
          v73 = v35[1];
          v74 = (float64x2_t *)((char *)v35 + v27 + 16);
          v75 = vmlsq_laneq_f64(v69, v70, v72, 1);
          v76 = vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v63, v65), v71, v72, 1);
          v77 = *v74;
          v78 = &v74->f64[(unint64_t)v27 / 8 + 1];
          v79 = vmlsq_lane_f64(vmlsq_lane_f64(v68, v70, v73.f64[0], 0), v75, v77.f64[0], 0);
          v80 = vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v64, v66), v71, v73.f64[0], 0), v76, v77.f64[0], 0);
          v81 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v67, v70, v73, 1), v75, v77, 1), v79, *v78, 0);
          v82 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v64, v66), v71, v73, 1), v76, v77, 1), v80, *v78, 0);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v70, (int64x2_t)v75);
          *v37 = (float64x2_t)v7;
          v37[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v32 = vtrn2q_s64((int64x2_t)v70, (int64x2_t)v75);
          v32[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v79, v81);
          *(int64x2_t *)v33 = vtrn1q_s64((int64x2_t)v71, (int64x2_t)v76);
          v33[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v80, v82);
          *(int64x2_t *)v34 = vtrn2q_s64((int64x2_t)v71, (int64x2_t)v76);
          v34[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v80, v82);
          v29 += 4;
          v31 += 4 * __incX;
        }
        while (v29 < __N - 3);
      }
      v83 = __N - v29;
      if (__N > v29)
      {
        v85 = (double *)((char *)__X + v28 * v29);
        do
        {
          v84 = (float64x2_t *)(a3 + 8 * v18);
          v86 = v84;
          v87 = v18;
          v88 = (float64x2_t *)v85;
          v89 = (float64x2_t)veorq_s8(v7, v7);
          v90 = v89;
          if ((v18 & 1) != 0)
          {
            v86 = (float64x2_t *)((char *)v84 + v27);
            v88 = (float64x2_t *)(v85 + 1);
            v89 = vmlaq_n_f64(v89, *v84, *v85);
            v90 = vmlaq_n_f64(v90, v84[1], *v85);
            v87 = v18 - 1;
          }
          for (; v87; v87 -= 2)
          {
            v92 = *v86;
            v93 = v86[1];
            v91 = (float64x2_t *)((char *)v86 + v27);
            v94 = *v91;
            v95 = v91[1];
            v86 = (float64x2_t *)((char *)v91 + v27);
            v96 = *v88++;
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v92, v96.f64[0]), v94, v96, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v93, v96.f64[0]), v95, v96, 1);
          }
          v97 = vsubq_f64(vmulq_n_f64(*v88, a7), v89);
          v98.f64[0] = v97.f64[0];
          v99 = *v86;
          v100 = v86[1];
          v101 = (float64x2_t *)((char *)v86 + v27 + 16);
          v7 = (int8x16_t)vmlsq_lane_f64(v97, v99, v97.f64[0], 0);
          *(_QWORD *)&v98.f64[1] = v7.i64[1];
          v102 = *v101;
          v103 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v88[1], a7), v90), v100, v98.f64[0], 0), *v101, v98, 1);
          v104.f64[0] = v103.f64[0];
          v102.f64[1] = v101->f64[(unint64_t)v27 / 8 + 1];
          v104.f64[1] = vmlsq_lane_f64(v103, v102, *(double *)&v103, 0).f64[1];
          *v88 = v98;
          v88[1] = v104;
          v85 = (double *)((char *)v85 + v28);
          --v83;
        }
        while (v83);
      }
      v18 += 4;
    }
    while (v18 < a1);
  }
}

void sub_20E856EB8(uint64_t a1, uint64_t __N, double *a3, uint64_t a4, double *__X, uint64_t __incX, double a7)
{
  int8x16_t v7;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const double *v36;
  const double *v37;
  const double *v38;
  const double *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t *v50;
  double *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  double *v98;
  float64x2_t v99;
  float64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint64_t v103;
  float64x2_t *v104;
  double *v105;
  float64x2_t *v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t *v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;

  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N < 1)
      {
        v21 = 2;
      }
      else
      {
        v26 = a3[1];
        v27 = a7 / *a3;
        v28 = __X + 1;
        v21 = 2;
        v29 = __N;
        v30 = 1.0 / a3[a4 + 1];
        do
        {
          v31 = *v28;
          v32 = v27 * *(v28 - 1);
          *(v28 - 1) = v32;
          *v28 = v30 * (v31 * a7 - v32 * v26);
          v28 += __incX;
          --v29;
        }
        while (v29);
      }
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *a3, __X, __incX);
      v21 = 1;
    }
    else
    {
      v21 = 0;
    }
  }
  else if (__N < 1)
  {
    v21 = 3;
  }
  else
  {
    v15 = a3[1];
    v14 = a3[2];
    v16 = &a3[a4];
    v17 = a7 / *a3;
    v18 = v16[2];
    v19 = 1.0 / v16[1];
    v20 = __X + 2;
    v21 = 3;
    v22 = __N;
    v23 = 1.0 / a3[2 * a4 + 2];
    do
    {
      v24 = v17 * *(v20 - 2);
      v25 = v19 * (*(v20 - 1) * a7 - v24 * v15);
      *(v20 - 2) = v24;
      *(v20 - 1) = v25;
      *(double *)v7.i64 = v18 * v25;
      *v20 = v23 * -(*(double *)v7.i64 + v24 * v14 - *v20 * a7);
      v20 += __incX;
      --v22;
    }
    while (v22);
  }
  if (v21 < a1)
  {
    v33 = 8 * a4;
    v34 = a4 + 1;
    v35 = 8 * __incX;
    do
    {
      v36 = &a3[v21 * a4 + v21];
      v37 = &a3[v34 + v34 * v21];
      v38 = &a3[(v21 + 2) * v34];
      v39 = &a3[(v21 + 3) * v34];
      v40 = vld1q_dup_f64(v36);
      v41 = vld1q_dup_f64(v37);
      v42 = vld1q_dup_f64(v38);
      v43 = vld1q_dup_f64(v39);
      v44 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v45 = vdivq_f64(v44, v40);
      v46 = vdivq_f64(v44, v41);
      v47 = vdivq_f64(v44, v42);
      v48 = vdivq_f64(v44, v43);
      if (__N < 4)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        v50 = (float64x2_t *)&a3[v21];
        v51 = __X;
        do
        {
          v52 = (float64x2_t *)&v51[(unint64_t)v35 / 8];
          v53 = (float64x2_t *)&v51[2 * __incX];
          v54 = (float64x2_t *)&v51[3 * __incX];
          v55 = (float64x2_t *)&a3[v21];
          v56 = v21;
          v57 = (float64x2_t *)v51;
          v58 = (float64x2_t)veorq_s8(v7, v7);
          v59 = v58;
          v60 = v58;
          v61 = v58;
          v62 = v58;
          v63 = v58;
          v64 = v58;
          v65 = v58;
          if ((v21 & 1) != 0)
          {
            v66 = v50[1];
            v55 = (float64x2_t *)((char *)v50 + v33);
            v57 = (float64x2_t *)(v51 + 1);
            v67 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v68 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v69 = v54->f64[0];
            v54 = (float64x2_t *)((char *)v54 + 8);
            v58 = vmlaq_n_f64(v58, *v50, *v51);
            v60 = vmlaq_n_f64(v60, *v50, v67);
            v62 = vmlaq_n_f64(v62, *v50, v68);
            v64 = vmlaq_n_f64(v64, *v50, v69);
            v59 = vmlaq_n_f64(v59, v66, *v51);
            v61 = vmlaq_n_f64(v61, v66, v67);
            v63 = vmlaq_n_f64(v63, v66, v68);
            v65 = vmlaq_n_f64(v65, v66, v69);
            v56 = v21 - 1;
          }
          for (; v56; v56 -= 2)
          {
            v71 = *v55;
            v72 = v55[1];
            v70 = (float64x2_t *)((char *)v55 + v33);
            v73 = *v70;
            v74 = v70[1];
            v55 = (float64x2_t *)((char *)v70 + v33);
            v75 = *v57++;
            v76 = *v52++;
            v77 = *v53++;
            v78 = *v54++;
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v71, v75.f64[0]), v73, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v71, v76.f64[0]), v73, v76, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v71, v77.f64[0]), v73, v77, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v71, v78.f64[0]), v73, v78, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v75.f64[0]), v74, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v76.f64[0]), v74, v76, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v72, v77.f64[0]), v74, v77, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v72, v78.f64[0]), v74, v78, 1);
          }
          v79 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v57, a7), v58);
          v80 = (int64x2_t)vsubq_f64(vmulq_n_f64(v57[1], a7), v59);
          v81 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v52, a7), v60);
          v82 = (int64x2_t)vsubq_f64(vmulq_n_f64(v52[1], a7), v61);
          v83 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v53, a7), v62);
          v84 = (int64x2_t)vsubq_f64(vmulq_n_f64(v53[1], a7), v63);
          v85 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v54, a7), v64);
          v86 = (int64x2_t)vsubq_f64(vmulq_n_f64(v54[1], a7), v65);
          v87 = (float64x2_t)vtrn2q_s64(v80, v82);
          v88 = (float64x2_t)vtrn1q_s64(v80, v82);
          v89 = (float64x2_t)vtrn2q_s64(v79, v81);
          v90 = vmulq_f64((float64x2_t)vtrn1q_s64(v79, v81), v45);
          v91 = vmulq_f64((float64x2_t)vtrn1q_s64(v83, v85), v45);
          v92 = *v55;
          v93 = v55[1];
          v94 = (float64x2_t *)((char *)v55 + v33 + 16);
          v95 = vmulq_f64(vmlsq_laneq_f64(v89, v90, v92, 1), v46);
          v96 = vmulq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v83, v85), v91, v92, 1), v46);
          v97 = *v94;
          v98 = &v94->f64[(unint64_t)v33 / 8 + 1];
          v99 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(v88, v90, v93.f64[0], 0), v95, v97.f64[0], 0), v47);
          v100 = vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v84, v86), v91, v93.f64[0], 0), v96, v97.f64[0], 0), v47);
          v101 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v87, v90, v93, 1), v95, v97, 1), v99, *v98, 0), v48);
          v102 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v84, v86), v91, v93, 1), v96, v97, 1), v100, *v98, 0), v48);
          v7 = (int8x16_t)vtrn1q_s64((int64x2_t)v90, (int64x2_t)v95);
          *v57 = (float64x2_t)v7;
          v57[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v52 = vtrn2q_s64((int64x2_t)v90, (int64x2_t)v95);
          v52[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v99, v101);
          *(int64x2_t *)v53 = vtrn1q_s64((int64x2_t)v91, (int64x2_t)v96);
          v53[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v100, v102);
          *(int64x2_t *)v54 = vtrn2q_s64((int64x2_t)v91, (int64x2_t)v96);
          v54[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v100, v102);
          v49 += 4;
          v51 += 4 * __incX;
        }
        while (v49 < __N - 3);
      }
      v103 = __N - v49;
      if (__N > v49)
      {
        v104 = (float64x2_t *)&a3[v21];
        v105 = (double *)((char *)__X + v35 * v49);
        do
        {
          v106 = (float64x2_t *)&a3[v21];
          v107 = v21;
          v108 = (float64x2_t *)v105;
          v109 = (float64x2_t)veorq_s8(v7, v7);
          v110 = v109;
          if ((v21 & 1) != 0)
          {
            v106 = (float64x2_t *)((char *)v104 + v33);
            v108 = (float64x2_t *)(v105 + 1);
            v109 = vmlaq_n_f64(v109, *v104, *v105);
            v110 = vmlaq_n_f64(v110, v104[1], *v105);
            v107 = v21 - 1;
          }
          for (; v107; v107 -= 2)
          {
            v112 = *v106;
            v113 = v106[1];
            v111 = (float64x2_t *)((char *)v106 + v33);
            v114 = *v111;
            v115 = v111[1];
            v106 = (float64x2_t *)((char *)v111 + v33);
            v116 = *v108++;
            v109 = vmlaq_laneq_f64(vmlaq_n_f64(v109, v112, v116.f64[0]), v114, v116, 1);
            v110 = vmlaq_laneq_f64(vmlaq_n_f64(v110, v113, v116.f64[0]), v115, v116, 1);
          }
          v117 = vsubq_f64(vmulq_n_f64(*v108, a7), v109);
          v118.f64[0] = v117.f64[0] * v45.f64[0];
          v119 = *v106;
          v120 = v106[1];
          v121 = (float64x2_t *)((char *)v106 + v33 + 16);
          v7 = (int8x16_t)vmulq_f64(vmlsq_lane_f64(v117, v119, v117.f64[0] * v45.f64[0], 0), v46);
          *(_QWORD *)&v118.f64[1] = v7.i64[1];
          v122 = *v121;
          v123 = vmlsq_laneq_f64(vmlsq_lane_f64(vsubq_f64(vmulq_n_f64(v108[1], a7), v110), v120, v118.f64[0], 0), *v121, v118, 1);
          v124.f64[0] = v123.f64[0] * v47.f64[0];
          v122.f64[1] = v121->f64[(unint64_t)v33 / 8 + 1];
          v124.f64[1] = vmulq_f64(vmlsq_lane_f64(v123, v122, *(double *)&v123 * *(double *)&v47, 0), v48).f64[1];
          *v108 = v118;
          v108[1] = v124;
          v105 = (double *)((char *)v105 + v35);
          --v103;
        }
        while (v103);
      }
      v21 += 4;
    }
    while (v21 < a1);
  }
}

void sub_20E857384(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11, float64x2_t a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  double *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  float64x2_t *v56;
  uint64_t v57;
  int64x2_t *v58;
  int64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  double v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double *v86;
  float64x2_t *v87;
  double *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  float64x2_t *v91;
  float64x2_t *v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  uint64_t v108;
  uint64_t v109;
  float64x2_t *v110;
  _OWORD *v111;
  float64x2_t *v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  int64x2_t *v117;
  int64x2_t *v118;
  float64x2_t *v119;
  uint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  uint64_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  float64x2_t v130;
  int64x2_t *v131;
  float64x2_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  BOOL v138;

  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v30 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v31 = (double *)(a5 + 8 * v20);
        v32 = __N;
        do
        {
          v33 = *(v31 - 1);
          v34 = *v31 * a7;
          *v31 = v34;
          *(v31 - 1) = v33 * a7 - v34 * v30;
          v31 += __incX;
          --v32;
        }
        while (v32);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7, (double *)(a5 + 8 * v20), __incX);
      v20 = a1 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = *(double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v24 = *(v22 - 1);
      v23 = *v22;
      v25 = (double *)(a5 + 8 * v20);
      v26 = __N;
      do
      {
        v27 = *(v25 - 1);
        v28 = *v25 * a7;
        *v25 = v28;
        v29 = v27 * a7 - v28 * v21;
        *(v25 - 2) = -(v24 * v29 + v28 * v23 - *(v25 - 2) * a7);
        *(v25 - 1) = v29;
        v25 += __incX;
        --v26;
      }
      while (v26);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v35 = v20 + 1;
    v36 = 3 * __incX;
    v37 = a5 + 8 * v20 + 8;
    v38 = 32 * __incX;
    v39 = 2 * __incX;
    v40 = 8 * __incX;
    do
    {
      v41 = v35 - 4;
      if (__N < 4)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        v43 = a3 + 8 * v35;
        v44 = (unint64_t *)(v43 + 8 * v41 * a4);
        v45 = (unint64_t *)(v43 + 8 * (v35 - 3) * a4);
        v46 = (unint64_t *)(v43 + 8 * (v35 - 2) * a4);
        v47 = (unint64_t *)(v43 + 8 * (v35 - 1) * a4);
        v48 = a1 - v41;
        if (a1 - v41 <= 4)
          v48 = 4;
        v49 = v48 - 4;
        v50 = (double *)v37;
        do
        {
          v51 = (float64x2_t *)&v50[(unint64_t)v40 / 8];
          v52 = (float64x2_t *)&v50[v39];
          v53 = (float64x2_t *)&v50[v36];
          v54 = (int64x2_t *)v44;
          v55 = (int64x2_t *)v46;
          v56 = (float64x2_t *)v50;
          v57 = v49;
          v58 = (int64x2_t *)v45;
          v59 = (int64x2_t *)v47;
          v60 = v49 + 1;
          v61 = (float64x2_t)veorq_s8(v13, v13);
          v62 = v61;
          v63 = v61;
          v64 = v61;
          v65 = v61;
          v66 = v61;
          v67 = v61;
          v68 = v61;
          if ((v49 & 1) != 0)
          {
            *(_QWORD *)&a10.f64[0] = *v44;
            v54 = (int64x2_t *)(v44 + 1);
            *(_QWORD *)&a11.f64[0] = *v45;
            v58 = (int64x2_t *)(v45 + 1);
            *(_QWORD *)&a12.f64[0] = *v46;
            v55 = (int64x2_t *)(v46 + 1);
            *(_QWORD *)&a13.f64[0] = *v47;
            v59 = (int64x2_t *)(v47 + 1);
            v69 = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)a11);
            v70 = (float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13);
            v56 = (float64x2_t *)(v50 + 1);
            v71 = v51->f64[0];
            v51 = (float64x2_t *)((char *)v51 + 8);
            v72 = v52->f64[0];
            v52 = (float64x2_t *)((char *)v52 + 8);
            v73 = v53->f64[0];
            v53 = (float64x2_t *)((char *)v53 + 8);
            v61 = vmlaq_n_f64(v61, v69, *v50);
            v63 = vmlaq_n_f64(v63, v69, v71);
            v65 = vmlaq_n_f64(v65, v69, v72);
            v67 = vmlaq_n_f64(v67, v69, v73);
            v62 = vmlaq_n_f64(v62, v70, *v50);
            v64 = vmlaq_n_f64(v64, v70, v71);
            v66 = vmlaq_n_f64(v66, v70, v72);
            v68 = vmlaq_n_f64(v68, v70, v73);
            v57 = v49 - 1;
          }
          for (; v57; v57 -= 2)
          {
            v74 = *v54++;
            v75 = *v58++;
            v76 = *v55++;
            v77 = *v59++;
            v78 = (float64x2_t)vtrn1q_s64(v74, v75);
            v79 = (float64x2_t)vtrn1q_s64(v76, v77);
            v80 = (float64x2_t)vtrn2q_s64(v74, v75);
            v81 = (float64x2_t)vtrn2q_s64(v76, v77);
            v82 = *v56++;
            v83 = *v51++;
            v84 = *v52++;
            v85 = *v53++;
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v78, v82.f64[0]), v80, v82, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v78, v83.f64[0]), v80, v83, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v78, v84.f64[0]), v80, v84, 1);
            v67 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v78, v85.f64[0]), v80, v85, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v79, v82.f64[0]), v81, v82, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v79, v83.f64[0]), v81, v83, 1);
            v66 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v79, v84.f64[0]), v81, v84, 1);
            v68 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v79, v85.f64[0]), v81, v85, 1);
          }
          v86 = (double *)&v54->i64[-v60 - 1];
          v87 = (float64x2_t *)((char *)v58 - 8 * v60 - 8);
          v88 = (double *)&v55->i64[-v60];
          v89 = (float64x2_t *)((char *)v56 - 8 * v49 - 32);
          v90 = (float64x2_t *)((char *)v51 - 8 * v49 - 32);
          v91 = (float64x2_t *)((char *)v52 - 8 * v49 - 32);
          v92 = (float64x2_t *)((char *)v53 - 8 * v49 - 32);
          v93 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v89, a7), v61);
          v94 = (int64x2_t)vsubq_f64(vmulq_n_f64(v89[1], a7), v62);
          v95 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v90, a7), v63);
          v96 = (int64x2_t)vsubq_f64(vmulq_n_f64(v90[1], a7), v64);
          v97 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v91, a7), v65);
          v98 = (int64x2_t)vsubq_f64(vmulq_n_f64(v91[1], a7), v66);
          v99 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v92, a7), v67);
          v100 = (int64x2_t)vsubq_f64(vmulq_n_f64(v92[1], a7), v68);
          v101 = (float64x2_t)vtrn2q_s64(v94, v96);
          v102 = (float64x2_t)vtrn2q_s64(v98, v100);
          v103 = (float64x2_t)vtrn2q_s64(v93, v95);
          v104 = (float64x2_t)vtrn1q_s64(v93, v95);
          v105 = *(float64x2_t *)v86--;
          a10 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v94, v96), v101, *v88, 0);
          a11 = vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v98, v100), v102, *v88, 0);
          a12 = vmlsq_lane_f64(vmlsq_laneq_f64(v103, v101, *v87, 1), a10, v87->f64[0], 0);
          a13 = vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v97, v99), v102, *v87, 1), a11, v87->f64[0], 0);
          v106 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v104, v101, v105, 1), a10, v105.f64[0], 0), a12, *v86, 0);
          v107 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v97, v99), v102, v105, 1), a11, v105.f64[0], 0), a13, *v86, 0);
          v13 = (int8x16_t)vtrn1q_s64(v106, (int64x2_t)a12);
          *v89 = (float64x2_t)v13;
          v89[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v90 = vtrn2q_s64(v106, (int64x2_t)a12);
          v90[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a10, (int64x2_t)v101);
          *(int64x2_t *)v91 = vtrn1q_s64(v107, (int64x2_t)a13);
          v91[1] = (float64x2_t)vtrn1q_s64((int64x2_t)a11, (int64x2_t)v102);
          *(int64x2_t *)v92 = vtrn2q_s64(v107, (int64x2_t)a13);
          v92[1] = (float64x2_t)vtrn2q_s64((int64x2_t)a11, (int64x2_t)v102);
          v42 += 4;
          v50 = (double *)((char *)v50 + v38);
        }
        while (v42 < __N - 3);
      }
      v108 = __N - v42;
      if (__N > v42)
      {
        v109 = a3 + 8 * v35;
        v110 = (float64x2_t *)(v109 + 8 * v41 * a4);
        v111 = (_OWORD *)(v109 + 8 * (v35 - 3) * a4);
        v112 = (float64x2_t *)(v109 + 8 * (v35 - 2) * a4);
        v113 = (_OWORD *)(v109 + 8 * (v35 - 1) * a4);
        v114 = a1 - v41;
        if (a1 - v41 <= 4)
          v114 = 4;
        v115 = v114 - 4;
        v116 = (double *)(v37 + v40 * v42);
        do
        {
          v117 = (int64x2_t *)v110;
          v118 = (int64x2_t *)v112;
          v119 = (float64x2_t *)v116;
          v120 = v115;
          v121 = (int64x2_t *)v111;
          v122 = (int64x2_t *)v113;
          v123 = v115 + 1;
          v124 = (float64x2_t)veorq_s8(v13, v13);
          v125 = v124;
          if ((v115 & 1) != 0)
          {
            v117 = (int64x2_t *)&v110->f64[1];
            v121 = (int64x2_t *)((char *)v111 + 8);
            v118 = (int64x2_t *)&v112->f64[1];
            v122 = (int64x2_t *)((char *)v113 + 8);
            v119 = (float64x2_t *)(v116 + 1);
            v124 = vmlaq_n_f64(v124, *v110, *v116);
            v125 = vmlaq_n_f64(v125, *v112, *v116);
            v120 = v115 - 1;
          }
          for (; v120; v120 -= 2)
          {
            v126 = *v117++;
            v127 = *v121++;
            v128 = *v118++;
            v129 = *v122++;
            v130 = *v119++;
            v124 = vmlaq_laneq_f64(vmlaq_n_f64(v124, (float64x2_t)vtrn1q_s64(v126, v127), v130.f64[0]), (float64x2_t)vtrn2q_s64(v126, v127), v130, 1);
            v125 = vmlaq_laneq_f64(vmlaq_n_f64(v125, (float64x2_t)vtrn1q_s64(v128, v129), v130.f64[0]), (float64x2_t)vtrn2q_s64(v128, v129), v130, 1);
          }
          v131 = (int64x2_t *)((char *)v117 - 8 * v123 - 8);
          v132 = (float64x2_t *)((char *)v119 - 8 * v115 - 32);
          v133 = vmulq_n_f64(*v132, a7);
          v134 = vmulq_n_f64(v132[1], a7);
          v135 = vsubq_f64(v134, v125);
          v134.f64[1] = v135.f64[1];
          a10 = *(float64x2_t *)v131;
          a11 = *(float64x2_t *)((char *)v121 - 8 * v123 - 8);
          *(_QWORD *)&a12.f64[0] = v118->i64[-v123];
          v136 = vmlsq_laneq_f64(vsubq_f64(v133, v124), (float64x2_t)vtrn2q_s64(*v131, (int64x2_t)a11), v134, 1);
          *(_QWORD *)&v134.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v135, a12, v134, 1);
          a13 = (float64x2_t)vtrn1q_s64(*v131, (int64x2_t)a11);
          v137 = vmlsq_lane_f64(v136, a13, v134.f64[0], 0);
          v133.f64[1] = v137.f64[1];
          *(_QWORD *)&a10.f64[0] = v131[-1].i64[1];
          v13 = (int8x16_t)vmlsq_laneq_f64(v137, a10, v133, 1);
          *(_QWORD *)&v133.f64[0] = v13.i64[0];
          *v132 = v133;
          v132[1] = v134;
          v116 = (double *)((char *)v116 + v40);
          --v108;
        }
        while (v108);
      }
      v37 -= 32;
      v138 = v35 < 5;
      v35 -= 4;
    }
    while (!v138);
  }
}

void sub_20E8578F0(uint64_t a1, uint64_t __N, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t __incX, double a7, double a8, double a9, double a10, double a11, double a12, float64x2_t a13)
{
  int8x16_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double *v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const double *v51;
  uint64_t v52;
  const double *v53;
  uint64_t v54;
  const double *v55;
  uint64_t v56;
  const double *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t *v78;
  uint64_t v79;
  int64x2_t *v80;
  int64x2_t *v81;
  int64x2_t *v82;
  int64x2_t *v83;
  float64x2_t *v84;
  uint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;
  double v97;
  double v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double *v111;
  float64x2_t *v112;
  double *v113;
  float64x2_t *v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t *v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t *v135;
  _OWORD *v136;
  float64x2_t *v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t v140;
  double *v141;
  int64x2_t *v142;
  int64x2_t *v143;
  float64x2_t *v144;
  uint64_t v145;
  int64x2_t *v146;
  int64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  float64x2_t v155;
  int64x2_t *v156;
  float64x2_t *v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v16 = a4;
  v17 = a3;
  v18 = __N;
  v19 = a1;
  v20 = a1 - 1;
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((a1 & 2) != 0)
    {
      if (__N >= 1)
      {
        v33 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
        v35 = *(v33 - 1);
        v34 = *v33;
        v36 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
        v37 = (double *)(a5 + 8 * v20);
        v38 = __N;
        v39 = 1.0 / v35;
        do
        {
          v40 = *(v37 - 1);
          v41 = v36 * *v37;
          *v37 = v41;
          *(v37 - 1) = v39 * (v40 * a7 - v41 * v34);
          v37 += __incX;
          --v38;
        }
        while (v38);
      }
      v20 = a1 - 3;
    }
    else if ((a1 & 1) != 0)
    {
      cblas_dscal(__N, a7 / *(double *)(a3 + 8 * (v20 + v20 * a4)), (double *)(a5 + 8 * v20), __incX);
      v20 = v19 - 2;
    }
  }
  else
  {
    if (__N >= 1)
    {
      v21 = (double *)(a3 + 8 * (v20 + (a1 - 2) * a4));
      v22 = *v21;
      v23 = (double *)(a3 + 8 * (v20 + (a1 - 3) * a4));
      v25 = *(v23 - 1);
      v24 = *v23;
      v26 = a7 / *(double *)(a3 + 8 * (v20 + v20 * a4));
      v27 = 1.0 / *(v21 - 1);
      v28 = (double *)(a5 + 8 * v20);
      v29 = __N;
      v30 = 1.0 / *(v23 - 2);
      do
      {
        v31 = *(v28 - 1);
        v32 = v26 * *v28;
        *v28 = v32;
        *(double *)v13.i64 = v27 * (v31 * a7 - v32 * v22);
        *(v28 - 2) = v30 * -(v25 * *(double *)v13.i64 + v32 * v24 - *(v28 - 2) * a7);
        *(v28 - 1) = *(double *)v13.i64;
        v28 += __incX;
        --v29;
      }
      while (v29);
    }
    v20 = a1 - 4;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    v42 = v20 + 1;
    v166 = v16 + 1;
    v167 = v19;
    v43 = v18 - 3;
    v44 = 3 * __incX;
    v45 = a5 + 8 * v20 + 8;
    v46 = 32 * __incX;
    v47 = 2 * __incX;
    v48 = 8 * __incX;
    v169 = v17;
    v170 = v16;
    v168 = v18;
    do
    {
      v49 = v42 - 4;
      v50 = v17 + 8 * (v42 - 4) * v16;
      v51 = (const double *)(v50 + 8 * (v42 - 4));
      v52 = v42 - 3;
      v53 = (const double *)(v17 + 8 * (v42 - 3) * v166);
      v54 = v42 - 2;
      v55 = (const double *)(v17 + 8 * (v42 - 2) * v166);
      v56 = v42 - 1;
      v57 = (const double *)(v17 + 8 * (v42 - 1) * v166);
      v58 = vld1q_dup_f64(v51);
      v59 = vld1q_dup_f64(v53);
      v60 = vld1q_dup_f64(v55);
      v61 = vld1q_dup_f64(v57);
      v62 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(1.0), 0);
      v63 = vdivq_f64(v62, v58);
      v64 = vdivq_f64(v62, v59);
      v65 = vdivq_f64(v62, v60);
      v66 = vdivq_f64(v62, v61);
      if (v18 < 4)
      {
        v67 = 0;
      }
      else
      {
        v67 = 0;
        v68 = v17 + 8 * v42;
        v70 = (_QWORD *)(v68 + 8 * v52 * v16);
        v71 = (_QWORD *)(v68 + 8 * v54 * v16);
        v72 = (unint64_t *)(v68 + 8 * v56 * v16);
        v73 = v19 - v49;
        if (v19 - v49 <= 4)
          v73 = 4;
        v74 = v73 - 4;
        v75 = (double *)v45;
        do
        {
          v76 = (float64x2_t *)&v75[(unint64_t)v48 / 8];
          v77 = (float64x2_t *)&v75[v47];
          v78 = (float64x2_t *)&v75[v44];
          v79 = v74;
          v80 = (int64x2_t *)v70;
          v81 = (int64x2_t *)v72;
          v69 = (_QWORD *)(v50 + 8 * v42);
          v82 = (int64x2_t *)v69;
          v83 = (int64x2_t *)v71;
          v84 = (float64x2_t *)v75;
          v85 = v74 + 1;
          v86 = (float64x2_t)veorq_s8(v13, v13);
          v87 = v86;
          v88 = v86;
          v89 = v86;
          v90 = v86;
          v91 = v86;
          v92 = v86;
          v93 = v86;
          if ((v74 & 1) != 0)
          {
            v60.f64[0] = *(float64_t *)v69;
            v82 = (int64x2_t *)(v69 + 1);
            v61.f64[0] = *(float64_t *)v70;
            v80 = (int64x2_t *)(v70 + 1);
            v62.f64[0] = *(float64_t *)v71;
            v83 = (int64x2_t *)(v71 + 1);
            *(_QWORD *)&a13.f64[0] = *v72;
            v81 = (int64x2_t *)(v72 + 1);
            v94 = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v61);
            v95 = (float64x2_t)vtrn1q_s64((int64x2_t)v62, (int64x2_t)a13);
            v84 = (float64x2_t *)(v75 + 1);
            v96 = v76->f64[0];
            v76 = (float64x2_t *)((char *)v76 + 8);
            v97 = v77->f64[0];
            v77 = (float64x2_t *)((char *)v77 + 8);
            v98 = v78->f64[0];
            v78 = (float64x2_t *)((char *)v78 + 8);
            v86 = vmlaq_n_f64(v86, v94, *v75);
            v88 = vmlaq_n_f64(v88, v94, v96);
            v90 = vmlaq_n_f64(v90, v94, v97);
            v92 = vmlaq_n_f64(v92, v94, v98);
            v87 = vmlaq_n_f64(v87, v95, *v75);
            v89 = vmlaq_n_f64(v89, v95, v96);
            v91 = vmlaq_n_f64(v91, v95, v97);
            v93 = vmlaq_n_f64(v93, v95, v98);
            v79 = v74 - 1;
          }
          for (; v79; v79 -= 2)
          {
            v99 = *v82++;
            v100 = *v80++;
            v101 = *v83++;
            v102 = *v81++;
            v103 = (float64x2_t)vtrn1q_s64(v99, v100);
            v104 = (float64x2_t)vtrn1q_s64(v101, v102);
            v105 = (float64x2_t)vtrn2q_s64(v99, v100);
            v106 = (float64x2_t)vtrn2q_s64(v101, v102);
            v107 = *v84++;
            v108 = *v76++;
            v109 = *v77++;
            v110 = *v78++;
            v86 = vmlaq_laneq_f64(vmlaq_n_f64(v86, v103, v107.f64[0]), v105, v107, 1);
            v88 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v103, v108.f64[0]), v105, v108, 1);
            v90 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v103, v109.f64[0]), v105, v109, 1);
            v92 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v103, v110.f64[0]), v105, v110, 1);
            v87 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v104, v107.f64[0]), v106, v107, 1);
            v89 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v104, v108.f64[0]), v106, v108, 1);
            v91 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v104, v109.f64[0]), v106, v109, 1);
            v93 = vmlaq_laneq_f64(vmlaq_n_f64(v93, v104, v110.f64[0]), v106, v110, 1);
          }
          v111 = (double *)&v82->i64[-v85 - 1];
          v112 = (float64x2_t *)((char *)v80 - 8 * v85 - 8);
          v113 = (double *)&v83->i64[-v85];
          v114 = (float64x2_t *)((char *)v84 - 8 * v74 - 32);
          v115 = (float64x2_t *)((char *)v76 - 8 * v74 - 32);
          v116 = (float64x2_t *)((char *)v77 - 8 * v74 - 32);
          v117 = (float64x2_t *)((char *)v78 - 8 * v74 - 32);
          v118 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v114, a7), v86);
          v119 = (int64x2_t)vsubq_f64(vmulq_n_f64(v114[1], a7), v87);
          v120 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v115, a7), v88);
          v121 = (int64x2_t)vsubq_f64(vmulq_n_f64(v115[1], a7), v89);
          v122 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v116, a7), v90);
          v123 = (int64x2_t)vsubq_f64(vmulq_n_f64(v116[1], a7), v91);
          v124 = (int64x2_t)vsubq_f64(vmulq_n_f64(*v117, a7), v92);
          v125 = (int64x2_t)vsubq_f64(vmulq_n_f64(v117[1], a7), v93);
          v126 = (float64x2_t)vtrn2q_s64(v118, v120);
          v127 = (float64x2_t)vtrn1q_s64(v118, v120);
          v128 = vmulq_f64((float64x2_t)vtrn2q_s64(v119, v121), v66);
          v129 = vmulq_f64((float64x2_t)vtrn2q_s64(v123, v125), v66);
          v130 = *(float64x2_t *)v111--;
          v60 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v119, v121), v128, *v113, 0), v65);
          v61 = vmulq_f64(vmlsq_lane_f64((float64x2_t)vtrn1q_s64(v123, v125), v129, *v113, 0), v65);
          v62 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v126, v128, *v112, 1), v60, v112->f64[0], 0), v64);
          a13 = vmulq_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn2q_s64(v122, v124), v129, *v112, 1), v61, v112->f64[0], 0), v64);
          v131 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64(v127, v128, v130, 1), v60, v130.f64[0], 0), v62, *v111, 0), v63);
          v132 = (int64x2_t)vmulq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_laneq_f64((float64x2_t)vtrn1q_s64(v122, v124), v129, v130, 1), v61, v130.f64[0], 0), a13, *v111, 0), v63);
          v13 = (int8x16_t)vtrn1q_s64(v131, (int64x2_t)v62);
          *v114 = (float64x2_t)v13;
          v114[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v115 = vtrn2q_s64(v131, (int64x2_t)v62);
          v115[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v60, (int64x2_t)v128);
          *(int64x2_t *)v116 = vtrn1q_s64(v132, (int64x2_t)a13);
          v116[1] = (float64x2_t)vtrn1q_s64((int64x2_t)v61, (int64x2_t)v129);
          *(int64x2_t *)v117 = vtrn2q_s64(v132, (int64x2_t)a13);
          v117[1] = (float64x2_t)vtrn2q_s64((int64x2_t)v61, (int64x2_t)v129);
          v67 += 4;
          v75 = (double *)((char *)v75 + v46);
        }
        while (v67 < v43);
      }
      v18 = v168;
      v17 = v169;
      v133 = v168 - v67;
      v16 = v170;
      v19 = v167;
      if (v168 > v67)
      {
        v134 = v169 + 8 * v42;
        v135 = (float64x2_t *)(v50 + 8 * v42);
        v136 = (_OWORD *)(v134 + 8 * v52 * v170);
        v137 = (float64x2_t *)(v134 + 8 * v54 * v170);
        v138 = (_OWORD *)(v134 + 8 * v56 * v170);
        v139 = v167 - v49;
        if (v167 - v49 <= 4)
          v139 = 4;
        v140 = v139 - 4;
        v141 = (double *)(v45 + v48 * v67);
        do
        {
          v142 = (int64x2_t *)v135;
          v143 = (int64x2_t *)v137;
          v144 = (float64x2_t *)v141;
          v145 = v140;
          v146 = (int64x2_t *)v136;
          v147 = (int64x2_t *)v138;
          v148 = v140 + 1;
          v149 = (float64x2_t)veorq_s8(v13, v13);
          v150 = v149;
          if ((v140 & 1) != 0)
          {
            v142 = (int64x2_t *)&v135->f64[1];
            v146 = (int64x2_t *)((char *)v136 + 8);
            v143 = (int64x2_t *)&v137->f64[1];
            v147 = (int64x2_t *)((char *)v138 + 8);
            v144 = (float64x2_t *)(v141 + 1);
            v149 = vmlaq_n_f64(v149, *v135, *v141);
            v150 = vmlaq_n_f64(v150, *v137, *v141);
            v145 = v140 - 1;
          }
          for (; v145; v145 -= 2)
          {
            v151 = *v142++;
            v152 = *v146++;
            v153 = *v143++;
            v154 = *v147++;
            v155 = *v144++;
            v149 = vmlaq_laneq_f64(vmlaq_n_f64(v149, (float64x2_t)vtrn1q_s64(v151, v152), v155.f64[0]), (float64x2_t)vtrn2q_s64(v151, v152), v155, 1);
            v150 = vmlaq_laneq_f64(vmlaq_n_f64(v150, (float64x2_t)vtrn1q_s64(v153, v154), v155.f64[0]), (float64x2_t)vtrn2q_s64(v153, v154), v155, 1);
          }
          v156 = (int64x2_t *)((char *)v142 - 8 * v148 - 8);
          v157 = (float64x2_t *)((char *)v144 - 8 * v140 - 32);
          v158 = vsubq_f64(vmulq_n_f64(v157[1], a7), v150);
          v159 = vmulq_f64(v158, v66);
          v160 = *(float64x2_t *)v156;
          v161 = *(int64x2_t *)((char *)v146 - 8 * v148 - 8);
          *(_QWORD *)&v62.f64[0] = v143->i64[-v148];
          v162 = vmlsq_laneq_f64(vsubq_f64(vmulq_n_f64(*v157, a7), v149), (float64x2_t)vtrn2q_s64(*v156, v161), v159, 1);
          v159.f64[0] = vmlsq_laneq_f64(v158, v62, v159, 1).f64[0] * v65.f64[0];
          a13 = (float64x2_t)vtrn1q_s64(*v156, v161);
          v163 = vmlsq_lane_f64(v162, a13, v159.f64[0], 0);
          v164 = vmulq_f64(v163, v64);
          *(_QWORD *)&v160.f64[0] = v156[-1].i64[1];
          v13 = (int8x16_t)vmulq_f64(vmlsq_laneq_f64(v163, v160, v164, 1), v63);
          *(_QWORD *)&v164.f64[0] = v13.i64[0];
          *v157 = v164;
          v157[1] = v159;
          v141 = (double *)((char *)v141 + v48);
          --v133;
        }
        while (v133);
      }
      v45 -= 32;
      v165 = v42 < 5;
      v42 -= 4;
    }
    while (!v165);
  }
}

uint64_t sub_20E857F2C(uint64_t a1, int *a2, unsigned int *a3, double *a4, int *a5, char *a6, int *a7, int *a8)
{
  signed int v16;
  int v17;

  *a8 = 0;
  if (!lsame_() && !lsame_())
  {
    v17 = -1;
    goto LABEL_14;
  }
  v16 = *a2;
  if (*a2 < 0)
  {
    v17 = -2;
    goto LABEL_14;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    v17 = -3;
    goto LABEL_14;
  }
  if (v16 <= 1)
    v16 = 1;
  if (*a5 < v16)
  {
    v17 = -5;
LABEL_14:
    *a8 = v17;
LABEL_15:
    xerbla_();
    return 0;
  }
  if (*a7 < v16)
  {
    v17 = -7;
    goto LABEL_14;
  }
  if (*a8)
    goto LABEL_15;
  sub_20E847FBC(a1, a2, (uint64_t)a4, a5, a8);
  if (!*a8)
    sub_20E837200(a1, (unsigned int *)a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

void sub_20E858070(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t v7;
  const double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float64x2_t *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  BOOL v72;
  uint64_t v73;
  double *v74;
  double *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v8 = a3;
  v9 = __N;
  v10 = 0;
  if (a2 >= 4)
  {
    v11 = 2 * a6;
    v12 = 3 * a6;
    v13 = 8 * a4;
    if (__N <= 0)
      v14 = -(-__N & 3);
    else
      v14 = __N & 3;
    v91 = a2 - 3;
    v90 = v11 - 1;
    v87 = v11 - 2;
    v15 = 8 * v9;
    v89 = (uint64_t)&a3[a4 * (v9 - 4) - 4];
    v16 = 32 * ~a4;
    v17 = a5 - 32;
    v18 = 32 * a6;
    v19 = a5 - 32 + 24 * a6;
    v20 = a5 - 32 + 16 * a6;
    v21 = a5 - 32 + 8 * a6;
    while (1)
    {
      v22 = v14;
      v23 = v8;
      v24 = v9;
      v25 = v9;
      if (v9 >= 4)
      {
        v26 = v17;
        v27 = v21;
        v28 = v20;
        v29 = v19;
        v30 = v89;
        v31 = v25;
        do
        {
          v24 = v31 - 4;
          v32 = v31 - 4;
          v7 = (float64x2_t)veorq_s8((int8x16_t)v7, (int8x16_t)v7);
          v34 = *(float64x2_t *)(v30 + v15 + 16);
          v33 = (float64x2_t *)(v30 + v15 + v13);
          v35 = (float64x2_t)vtrn2q_s64((int64x2_t)v7, *(int64x2_t *)(v30 + v15));
          v36 = v33[1];
          v37 = *(float64x2_t *)(v26 + v15);
          v38 = *(float64x2_t *)(v27 + v15);
          v39 = *(float64x2_t *)(v28 + v15);
          v40 = *(float64x2_t *)(v29 + v15);
          v41 = vmlaq_laneq_f64(vmulq_n_f64(v34, v37.f64[0]), v36, v37, 1);
          v42 = vmlaq_laneq_f64(vmulq_n_f64(v34, v38.f64[0]), v36, v38, 1);
          v43 = vmlaq_laneq_f64(vmulq_n_f64(v34, v39.f64[0]), v36, v39, 1);
          v44 = vmlaq_laneq_f64(vmulq_n_f64(v34, v40.f64[0]), v36, v40, 1);
          v45 = vmlaq_n_f64(v37, v35, v37.f64[0]);
          v46 = vmlaq_n_f64(v38, v35, v38.f64[0]);
          v47 = vmlaq_n_f64(v39, v35, v39.f64[0]);
          v48 = vmlaq_n_f64(v40, v35, v40.f64[0]);
          *(_QWORD *)&v35.f64[0] = veorq_s8((int8x16_t)v35, (int8x16_t)v35).u64[0];
          v35.f64[1] = v33[1].f64[(unint64_t)v13 / 8 + 1];
          v49 = vmlaq_n_f64(vaddq_f64(v41, *(float64x2_t *)(v26 + v15 + 16)), v35, *(double *)(v26 + v15 + 16));
          v50 = v26 + v15 - 8 * (v31 - 4);
          v51 = vmlaq_n_f64(vaddq_f64(v42, *(float64x2_t *)(v27 + v15 + 16)), v35, *(double *)(v27 + v15 + 16));
          v52 = v27 + v15 - 8 * (v31 - 4);
          v53 = vmlaq_n_f64(vaddq_f64(v43, *(float64x2_t *)(v28 + v15 + 16)), v35, *(double *)(v28 + v15 + 16));
          v54 = v28 + v15 - 8 * (v31 - 4);
          v55 = vmlaq_n_f64(vaddq_f64(v44, *(float64x2_t *)(v29 + v15 + 16)), v35, *(double *)(v29 + v15 + 16));
          v56 = v29 + v15 - 8 * (v31 - 4);
          v57 = (float64x2_t *)(v30 + v15 - (v31 - 4) * v13);
          if ((((_DWORD)v31 - 4) & 1) != 0)
          {
            v58 = *v57;
            v59 = v57[1];
            v57 = (float64x2_t *)((char *)v57 + v13);
            v60 = *(double *)v50;
            v50 += 8;
            v61 = *(double *)v52;
            v52 += 8;
            v62 = *(double *)v54;
            v54 += 8;
            v63 = *(double *)v56;
            v56 += 8;
            v45 = vmlaq_n_f64(v45, v58, v60);
            v46 = vmlaq_n_f64(v46, v58, v61);
            v47 = vmlaq_n_f64(v47, v58, v62);
            v48 = vmlaq_n_f64(v48, v58, v63);
            v49 = vmlaq_n_f64(v49, v59, v60);
            v51 = vmlaq_n_f64(v51, v59, v61);
            v53 = vmlaq_n_f64(v53, v59, v62);
            v55 = vmlaq_n_f64(v55, v59, v63);
            v32 = v31 - 5;
          }
          for (; v32; v32 -= 2)
          {
            v65 = *v57;
            v66 = v57[1];
            v64 = (float64x2_t *)((char *)v57 + v13);
            v7 = *v64;
            v67 = v64[1];
            v57 = (float64x2_t *)((char *)v64 + v13);
            v68 = *(float64x2_t *)v50;
            v50 += 16;
            v69 = *(float64x2_t *)v52;
            v52 += 16;
            v70 = *(float64x2_t *)v54;
            v54 += 16;
            v71 = *(float64x2_t *)v56;
            v56 += 16;
            v45 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v65, v68.f64[0]), v7, v68, 1);
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v65, v69.f64[0]), v7, v69, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v65, v70.f64[0]), v7, v70, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v65, v71.f64[0]), v7, v71, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v66, v68.f64[0]), v67, v68, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v66, v69.f64[0]), v67, v69, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v66, v70.f64[0]), v67, v70, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, v66, v71.f64[0]), v67, v71, 1);
          }
          *(float64x2_t *)v50 = vmulq_n_f64(v45, a7);
          *(float64x2_t *)(v50 + 16) = vmulq_n_f64(v49, a7);
          *(float64x2_t *)v52 = vmulq_n_f64(v46, a7);
          *(float64x2_t *)(v52 + 16) = vmulq_n_f64(v51, a7);
          *(float64x2_t *)v54 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v54 + 16) = vmulq_n_f64(v53, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v55, a7);
          v30 += v16;
          v29 -= 32;
          v28 -= 32;
          v27 -= 32;
          v26 -= 32;
          v72 = v31 > 7;
          v31 -= 4;
        }
        while (v72);
      }
      v73 = 8 * v24 - 8;
      v74 = (double *)(a5 + 8 * v10 * a6 + v73);
      v8 = v23;
      v75 = (double *)((char *)v23 + v73);
      v14 = v22;
      if (v22 == 3)
        break;
      if (v22 == 2)
      {
        v76 = a7;
        v9 = v25;
        v78 = a6 - 1;
        v77 = 2 * a6;
        v80 = v12 - 1;
        v79 = v90;
LABEL_19:
        *v74 = v76 * (*v74 + *(v74 - 1) * *v75);
        v74[a6] = v76 * (v74[a6] + v74[v78] * *v75);
        v74[v77] = v76 * (v74[v77] + v74[v79] * *v75);
        v74[3 * a6] = v76 * (v74[3 * a6] + v74[v80] * *v75);
        --v74;
        goto LABEL_20;
      }
      v9 = v25;
      if (v22 == 1)
      {
        v76 = a7;
        v77 = 2 * a6;
LABEL_20:
        *v74 = v76 * *v74;
        v74[a6] = v76 * v74[a6];
        v74[v77] = a7 * v74[v77];
        v74[3 * a6] = a7 * v74[3 * a6];
      }
      v10 += 4;
      v19 += v18;
      v20 += v18;
      v21 += v18;
      v17 += v18;
      if (v10 >= v91)
        goto LABEL_22;
    }
    v76 = a7;
    *v74 = a7 * (*v74 + *(v74 - 1) * v75[a4] + *(v74 - 2) * *v75);
    v79 = v90;
    v78 = a6 - 1;
    v74[a6] = a7 * (v74[a6] + v74[a6 - 1] * v75[a4] + v74[a6 - 2] * *v75);
    v77 = 2 * a6;
    v74[2 * a6] = a7 * (v74[2 * a6] + v74[v90] * v75[a4] + v74[v87] * *v75);
    v80 = v12 - 1;
    v81 = v74[3 * a6] + v74[v12 - 1] * v75[a4];
    v82 = *v75--;
    v74[3 * a6] = a7 * (v81 + v74[v12 - 2] * v82);
    --v74;
    v9 = v25;
    goto LABEL_19;
  }
LABEL_22:
  v83 = a2 - v10;
  if (a2 > v10)
  {
    v84 = (double *)(a5 + 8 * v10 * a6);
    v85 = 8 * a6;
    do
    {
      cblas_dscal(v9, a7, v84, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasUnit, v9, v8, a4, v84, 1);
      v84 = (double *)((char *)v84 + v85);
      --v83;
    }
    while (v83);
  }
}

void sub_20E858590(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  float64x2_t v7;
  uint64_t v8;
  const double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  BOOL v78;
  uint64_t v79;
  double *v80;
  double *v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  double *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;

  v8 = a5;
  v9 = a3;
  v10 = __N;
  v11 = 0;
  if (a2 >= 4)
  {
    v12 = 2 * a6;
    v13 = 3 * a6;
    v14 = 8 * a4;
    v15 = __N & 3;
    if (__N <= 0)
      v15 = -(-__N & 3);
    v98 = 2 * a4;
    v101 = v12 - 1;
    v103 = a2 - 3;
    v96 = v13 - 2;
    v97 = v12 - 2;
    v16 = 8 * __N;
    v99 = (uint64_t)&a3[a4 * (__N - 4) - 4];
    v100 = v13 - 1;
    v17 = 32 * ~a4;
    v18 = a5 - 32;
    v19 = 32 * a6;
    v20 = a5 - 32 + 24 * a6;
    v21 = a5 - 32 + 16 * a6;
    v22 = a5 - 32 + 8 * a6;
    while (1)
    {
      v23 = v13;
      v24 = v15;
      v25 = v8;
      v26 = v9;
      v27 = v10;
      v28 = v10;
      if (v10 >= 4)
      {
        v29 = v18;
        v30 = v22;
        v31 = v21;
        v32 = v20;
        v33 = v99;
        v34 = v28;
        do
        {
          v27 = v34 - 4;
          v35 = v34 - 4;
          *(_QWORD *)&v36.f64[0] = veorq_s8((int8x16_t)v7, (int8x16_t)v7).u64[0];
          v38 = *(float64x2_t *)(v33 + v16);
          v39 = *(float64x2_t *)(v33 + v16 + 16);
          v37 = (float64x2_t *)(v33 + v16 + v14);
          v36.f64[1] = v37->f64[1];
          v41 = v37[1];
          v40 = (float64x2_t *)((char *)v37 + v14 + 16);
          v42 = *(float64x2_t *)(v29 + v16);
          v43 = *(float64x2_t *)(v30 + v16);
          v44 = *(float64x2_t *)(v31 + v16);
          v45 = *(float64x2_t *)(v32 + v16);
          v46 = vmlaq_laneq_f64(vmulq_n_f64(v38, v42.f64[0]), v36, v42, 1);
          v47 = vmlaq_laneq_f64(vmulq_n_f64(v38, v43.f64[0]), v36, v43, 1);
          v48 = vmlaq_laneq_f64(vmulq_n_f64(v38, v44.f64[0]), v36, v44, 1);
          v49 = vmlaq_laneq_f64(vmulq_n_f64(v38, v45.f64[0]), v36, v45, 1);
          v50 = vmlaq_laneq_f64(vmulq_n_f64(v39, v42.f64[0]), v41, v42, 1);
          v51 = vmlaq_laneq_f64(vmulq_n_f64(v39, v43.f64[0]), v41, v43, 1);
          v52 = vmlaq_laneq_f64(vmulq_n_f64(v39, v44.f64[0]), v41, v44, 1);
          v53 = vmlaq_laneq_f64(vmulq_n_f64(v39, v45.f64[0]), v41, v45, 1);
          v7 = (float64x2_t)veorq_s8((int8x16_t)v36, (int8x16_t)v36);
          v54 = (float64x2_t)vtrn2q_s64((int64x2_t)v7, *(int64x2_t *)((char *)v40 + v14));
          v55 = v29 + v16 - 8 * (v34 - 4);
          v56 = v30 + v16 - 8 * (v34 - 4);
          v57 = v31 + v16 - 8 * (v34 - 4);
          v58 = v32 + v16 - 8 * (v34 - 4);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v50, *v40, *(double *)(v29 + v16 + 16)), v54, *(float64x2_t *)(v29 + v16 + 16), 1);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v51, *v40, *(double *)(v30 + v16 + 16)), v54, *(float64x2_t *)(v30 + v16 + 16), 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v52, *v40, *(double *)(v31 + v16 + 16)), v54, *(float64x2_t *)(v31 + v16 + 16), 1);
          v62 = vmlaq_laneq_f64(vmlaq_n_f64(v53, *v40, *(double *)(v32 + v16 + 16)), v54, *(float64x2_t *)(v32 + v16 + 16), 1);
          v63 = (float64x2_t *)(v33 + v16 - (v34 - 4) * v14);
          if ((((_DWORD)v34 - 4) & 1) != 0)
          {
            v64 = *v63;
            v65 = v63[1];
            v63 = (float64x2_t *)((char *)v63 + v14);
            v66 = *(double *)v55;
            v55 += 8;
            v67 = *(double *)v56;
            v56 += 8;
            v68 = *(double *)v57;
            v57 += 8;
            v69 = *(double *)v58;
            v58 += 8;
            v46 = vmlaq_n_f64(v46, v64, v66);
            v47 = vmlaq_n_f64(v47, v64, v67);
            v48 = vmlaq_n_f64(v48, v64, v68);
            v49 = vmlaq_n_f64(v49, v64, v69);
            v59 = vmlaq_n_f64(v59, v65, v66);
            v60 = vmlaq_n_f64(v60, v65, v67);
            v61 = vmlaq_n_f64(v61, v65, v68);
            v62 = vmlaq_n_f64(v62, v65, v69);
            v35 = v34 - 5;
          }
          for (; v35; v35 -= 2)
          {
            v71 = *v63;
            v72 = v63[1];
            v70 = (float64x2_t *)((char *)v63 + v14);
            v7 = *v70;
            v73 = v70[1];
            v63 = (float64x2_t *)((char *)v70 + v14);
            v74 = *(float64x2_t *)v55;
            v55 += 16;
            v75 = *(float64x2_t *)v56;
            v56 += 16;
            v76 = *(float64x2_t *)v57;
            v57 += 16;
            v77 = *(float64x2_t *)v58;
            v58 += 16;
            v46 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v71, v74.f64[0]), v7, v74, 1);
            v47 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v71, v75.f64[0]), v7, v75, 1);
            v48 = vmlaq_laneq_f64(vmlaq_n_f64(v48, v71, v76.f64[0]), v7, v76, 1);
            v49 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v71, v77.f64[0]), v7, v77, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v72, v74.f64[0]), v73, v74, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v72, v75.f64[0]), v73, v75, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v72, v76.f64[0]), v73, v76, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v72, v77.f64[0]), v73, v77, 1);
          }
          *(float64x2_t *)v55 = vmulq_n_f64(v46, a7);
          *(float64x2_t *)(v55 + 16) = vmulq_n_f64(v59, a7);
          *(float64x2_t *)v56 = vmulq_n_f64(v47, a7);
          *(float64x2_t *)(v56 + 16) = vmulq_n_f64(v60, a7);
          *(float64x2_t *)v57 = vmulq_n_f64(v48, a7);
          *(float64x2_t *)(v57 + 16) = vmulq_n_f64(v61, a7);
          *(float64x2_t *)v58 = vmulq_n_f64(v49, a7);
          *(float64x2_t *)(v58 + 16) = vmulq_n_f64(v62, a7);
          v33 += v17;
          v32 -= 32;
          v31 -= 32;
          v30 -= 32;
          v29 -= 32;
          v78 = v34 > 7;
          v34 -= 4;
        }
        while (v78);
      }
      v8 = v25;
      v79 = 8 * v27 - 8;
      v80 = (double *)(v25 + 8 * v11 * a6 + v79);
      v9 = v26;
      v81 = (double *)((char *)v26 + v79);
      v15 = v24;
      if (v24 == 3)
        break;
      if (v24 == 2)
      {
        v82 = a7;
        v84 = a4;
        v83 = 2 * a6;
        v10 = v28;
        v86 = v101;
        v85 = a6 - 1;
        v87 = v100;
        v13 = v23;
LABEL_18:
        *v80 = v82 * (*(v80 - 1) * *v81 + *v80 * v81[v84]);
        v80[a6] = v82 * (v80[v85] * *v81 + v80[a6] * v81[v84]);
        v80[v83] = v82 * (v80[v86] * *v81 + v80[v83] * v81[v84]);
        v90 = v81[v84];
        v91 = *v81--;
        v80[v13] = v82 * (v80[v87] * v91 + v80[v13] * v90);
        --v80;
        goto LABEL_19;
      }
      v10 = v28;
      v13 = v23;
      if (v24 == 1)
      {
        v82 = a7;
        v83 = 2 * a6;
LABEL_19:
        *v80 = v82 * (*v80 * *v81);
        v80[a6] = v82 * (v80[a6] * *v81);
        v80[v83] = a7 * (v80[v83] * *v81);
        v80[v13] = a7 * (v80[v13] * *v81);
      }
      v11 += 4;
      v20 += v19;
      v21 += v19;
      v22 += v19;
      v18 += v19;
      if (v11 >= v103)
        goto LABEL_21;
    }
    v82 = a7;
    v85 = a6 - 1;
    v84 = a4;
    *v80 = a7 * (*(v80 - 1) * v81[a4] + *v80 * v81[v98] + *(v80 - 2) * *v81);
    v80[a6] = a7 * (v80[a6 - 1] * v81[a4] + v80[a6] * v81[v98] + v80[a6 - 2] * *v81);
    v83 = 2 * a6;
    v86 = v101;
    v80[2 * a6] = a7 * (v80[v101] * v81[a4] + v80[2 * a6] * v81[v98] + v80[v97] * *v81);
    v13 = v23;
    v87 = v100;
    v88 = v80[v100] * v81[a4] + v80[v23] * v81[v98];
    v89 = *v81--;
    v80[v23] = a7 * (v88 + v80[v96] * v89);
    --v80;
    v10 = v28;
    goto LABEL_18;
  }
LABEL_21:
  v92 = a2 - v11;
  if (a2 > v11)
  {
    v93 = (double *)(v8 + 8 * v11 * a6);
    v94 = 8 * a6;
    do
    {
      cblas_dscal(v10, a7, v93, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasNoTrans, CblasNonUnit, v10, v9, a4, v93, 1);
      v93 = (double *)((char *)v93 + v94);
      --v92;
    }
    while (v92);
  }
}

void sub_20E858B50(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, int64x2_t a8)
{
  float64x2_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64_t *v29;
  uint64_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  unint64_t *v36;
  unint64_t *v37;
  int64x2_t v38;
  float64_t *v39;
  double *v40;
  float64x2_t v41;
  double *v42;
  float64x2_t v43;
  double *v44;
  float64x2_t v45;
  double *v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t *v76;
  double *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v9 = a4;
  v11 = __N;
  v12 = 0;
  if (a2 >= 4)
  {
    v95 = a2 - 3;
    v13 = __N - 3;
    v14 = 3 * a6;
    if (__N <= 0)
      v15 = -(-__N & 3);
    else
      v15 = __N & 3;
    v94 = v15;
    v88 = a4 + 1;
    v92 = 24 * a4 + 32;
    v16 = 32 * a4 + 32;
    v90 = 8 * a4 + 16;
    v91 = 16 * a4 + 24;
    v89 = 8 * __N;
    v17 = 32 * a6;
    v18 = a5 + 24 * a6;
    v19 = a5;
    v20 = a5 + 16 * a6;
    v21 = a5 + 8 * a6;
    v96 = a5;
    while (1)
    {
      if (v11 < 4)
      {
        v23 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        v24 = 8;
        v26 = v89;
        v25 = v90;
        v27 = v91;
        v28 = v92;
        do
        {
          v29 = (float64_t *)((char *)a3 + v28);
          v30 = v11 - 4;
          v31 = (float64x2_t)veorq_s8((int8x16_t)a8, (int8x16_t)a8);
          v31.f64[0] = *(const double *)((char *)a3 + v24);
          v32 = vmlaq_laneq_f64(*(float64x2_t *)(v19 + v22), v31, *(float64x2_t *)(v19 + v22), 1);
          v33 = vmlaq_laneq_f64(*(float64x2_t *)(v21 + v22), v31, *(float64x2_t *)(v21 + v22), 1);
          v34 = vmlaq_laneq_f64(*(float64x2_t *)(v20 + v22), v31, *(float64x2_t *)(v20 + v22), 1);
          v35 = vmlaq_laneq_f64(*(float64x2_t *)(v18 + v22), v31, *(float64x2_t *)(v18 + v22), 1);
          v8 = (float64x2_t)veorq_s8((int8x16_t)v8, (int8x16_t)v8);
          a8 = *(int64x2_t *)((char *)a3 + v24 + 8);
          v36 = (unint64_t *)((char *)a3 + v24 + 24);
          v38 = *(int64x2_t *)((char *)a3 + v25);
          v37 = (unint64_t *)((char *)a3 + v25 + 16);
          v8.f64[0] = *(const double *)((char *)a3 + v27);
          v39 = (float64_t *)((char *)a3 + v27 + 8);
          v41 = *(float64x2_t *)(v19 + v22 + 16);
          v40 = (double *)(v19 + v22 + 32);
          v43 = *(float64x2_t *)(v21 + v22 + 16);
          v42 = (double *)(v21 + v22 + 32);
          v45 = *(float64x2_t *)(v20 + v22 + 16);
          v44 = (double *)(v20 + v22 + 32);
          v47 = *(float64x2_t *)(v18 + v22 + 16);
          v46 = (double *)(v18 + v22 + 32);
          v48 = (float64x2_t)vtrn1q_s64(a8, v38);
          v49 = (float64x2_t)vtrn2q_s64(a8, v38);
          v50 = vmlaq_laneq_f64(vmlaq_n_f64(v32, v48, v41.f64[0]), v49, v41, 1);
          v51 = vmlaq_laneq_f64(vmlaq_n_f64(v33, v48, v43.f64[0]), v49, v43, 1);
          v52 = vmlaq_laneq_f64(vmlaq_n_f64(v34, v48, v45.f64[0]), v49, v45, 1);
          v53 = vmlaq_laneq_f64(vmlaq_n_f64(v35, v48, v47.f64[0]), v49, v47, 1);
          v54 = vmlaq_laneq_f64(v41, v8, v41, 1);
          v55 = vmlaq_laneq_f64(v43, v8, v43, 1);
          v56 = vmlaq_laneq_f64(v45, v8, v45, 1);
          v57 = vmlaq_laneq_f64(v47, v8, v47, 1);
          if ((((_DWORD)v11 - 4) & 1) != 0)
          {
            a8.i64[0] = *v36;
            v36 = (unint64_t *)((char *)a3 + v24 + 32);
            a8.i64[1] = *v37;
            v37 = (unint64_t *)((char *)a3 + v25 + 24);
            v58.f64[0] = *v39;
            v39 = (float64_t *)((char *)a3 + v27 + 16);
            v58.f64[1] = *v29++;
            v59 = *v40;
            v40 = (double *)(v19 + v22 + 40);
            v60 = *v42;
            v42 = (double *)(v21 + v22 + 40);
            v61 = *v44;
            v44 = (double *)(v20 + v22 + 40);
            v62 = *v46;
            v46 = (double *)(v18 + v22 + 40);
            v50 = vmlaq_n_f64(v50, (float64x2_t)a8, v59);
            v51 = vmlaq_n_f64(v51, (float64x2_t)a8, v60);
            v52 = vmlaq_n_f64(v52, (float64x2_t)a8, v61);
            v53 = vmlaq_n_f64(v53, (float64x2_t)a8, v62);
            v54 = vmlaq_n_f64(v54, v58, v59);
            v55 = vmlaq_n_f64(v55, v58, v60);
            v56 = vmlaq_n_f64(v56, v58, v61);
            v57 = vmlaq_n_f64(v57, v58, v62);
            v30 = v11 - 5;
          }
          for (; v30; v30 -= 2)
          {
            v63 = *(int64x2_t *)v36;
            v36 += 2;
            v64 = *(int64x2_t *)v37;
            v37 += 2;
            v8 = *(float64x2_t *)v39;
            v39 += 2;
            v65 = *(int64x2_t *)v29;
            v29 += 2;
            v66 = *(float64x2_t *)v40;
            v40 += 2;
            v67 = *(float64x2_t *)v42;
            v42 += 2;
            v68 = *(float64x2_t *)v44;
            v44 += 2;
            v69 = *(float64x2_t *)v46;
            v46 += 2;
            v70 = (float64x2_t)vtrn1q_s64(v63, v64);
            v71 = (float64x2_t)vtrn2q_s64(v63, v64);
            a8 = vtrn1q_s64((int64x2_t)v8, v65);
            v72 = (float64x2_t)vtrn2q_s64((int64x2_t)v8, v65);
            v50 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v70, v66.f64[0]), v71, v66, 1);
            v51 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v70, v67.f64[0]), v71, v67, 1);
            v52 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v70, v68.f64[0]), v71, v68, 1);
            v53 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v70, v69.f64[0]), v71, v69, 1);
            v54 = vmlaq_laneq_f64(vmlaq_n_f64(v54, (float64x2_t)a8, v66.f64[0]), v72, v66, 1);
            v55 = vmlaq_laneq_f64(vmlaq_n_f64(v55, (float64x2_t)a8, v67.f64[0]), v72, v67, 1);
            v56 = vmlaq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)a8, v68.f64[0]), v72, v68, 1);
            v57 = vmlaq_laneq_f64(vmlaq_n_f64(v57, (float64x2_t)a8, v69.f64[0]), v72, v69, 1);
          }
          v73 = (float64x2_t *)((char *)v40 - v26);
          v74 = (float64x2_t *)((char *)v42 - v26);
          v75 = (float64x2_t *)((char *)v44 - v26);
          v76 = (float64x2_t *)((char *)v46 - v26);
          *v73 = vmulq_n_f64(v50, a7);
          v73[1] = vmulq_n_f64(v54, a7);
          *v74 = vmulq_n_f64(v51, a7);
          v74[1] = vmulq_n_f64(v55, a7);
          *v75 = vmulq_n_f64(v52, a7);
          v75[1] = vmulq_n_f64(v56, a7);
          *v76 = vmulq_n_f64(v53, a7);
          v76[1] = vmulq_n_f64(v57, a7);
          v23 += 4;
          v28 += v16;
          v27 += v16;
          v25 += v16;
          v26 -= 32;
          v11 -= 4;
          v22 += 32;
          v24 += v16;
        }
        while (v23 < v13);
      }
      a5 = v96;
      v9 = a4;
      v77 = (double *)(v96 + 8 * v12 * a6 + 8 * v23);
      v78 = (uint64_t)&a3[v23 + v23 * a4];
      if (v94 == 3)
        break;
      if (v94 == 2)
      {
        v80 = a7;
        v79 = 2 * a6;
        v11 = __N;
        v82 = (2 * a6) | 1;
        v81 = a6 + 1;
        v83 = v14 + 1;
LABEL_21:
        *v77 = v80 * (*v77 + v77[1] * *(double *)(v78 + 8));
        v77[a6] = v80 * (v77[a6] + v77[v81] * *(double *)(v78 + 8));
        v77[v79] = v80 * (v77[v79] + v77[v82] * *(double *)(v78 + 8));
        v77[3 * a6] = v80 * (v77[3 * a6] + v77[v83] * *(double *)(v78 + 8));
        ++v77;
        goto LABEL_22;
      }
      v79 = 2 * a6;
      v11 = __N;
      if (v94 == 1)
      {
        v80 = a7;
LABEL_22:
        *v77 = v80 * *v77;
        v77[a6] = v80 * v77[a6];
        v77[v79] = a7 * v77[v79];
        *(double *)a8.i64 = a7 * v77[3 * a6];
        v77[3 * a6] = *(double *)a8.i64;
      }
      v12 += 4;
      v18 += v17;
      v20 += v17;
      v21 += v17;
      v19 += v17;
      if (v12 >= v95)
        goto LABEL_24;
    }
    v80 = a7;
    *v77 = a7 * (*v77 + v77[1] * *(double *)(v78 + 8) + v77[2] * *(double *)(v78 + 16));
    v82 = (2 * a6) | 1;
    v81 = a6 + 1;
    v77[a6] = a7 * (v77[a6] + v77[a6 + 1] * *(double *)(v78 + 8) + v77[a6 + 2] * *(double *)(v78 + 16));
    v79 = 2 * a6;
    v11 = __N;
    v77[2 * a6] = a7 * (v77[2 * a6] + v77[v82] * *(double *)(v78 + 8) + v77[2 * a6 + 2] * *(double *)(v78 + 16));
    v83 = v14 + 1;
    v77[3 * a6] = a7 * (v77[3 * a6] + v77[v14 + 1] * *(double *)(v78 + 8) + v77[v14 + 2] * *(double *)(v78 + 16));
    v78 += 8 * v88;
    ++v77;
    goto LABEL_21;
  }
LABEL_24:
  v84 = a2 - v12;
  if (a2 > v12)
  {
    v85 = (double *)(a5 + 8 * v12 * a6);
    v86 = 8 * a6;
    do
    {
      cblas_dscal(v11, a7, v85, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasUnit, v11, a3, v9, v85, 1);
      v85 = (double *)((char *)v85 + v86);
      --v84;
    }
    while (v84);
  }
}

void sub_20E859094(uint64_t __N, uint64_t a2, const double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, int64x2_t a9)
{
  int8x16_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64_t *v40;
  int64x2_t v41;
  float64_t *v42;
  int64x2_t v43;
  unint64_t *v44;
  int64x2_t v45;
  unint64_t *v46;
  double *v47;
  float64x2_t v48;
  double *v49;
  float64x2_t v50;
  double *v51;
  float64x2_t v52;
  double *v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t *v83;
  float64x2_t *v84;
  double *v85;
  double *v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v10 = a4;
  v12 = __N;
  v13 = 0;
  if (a2 >= 4)
  {
    v103 = a2 - 3;
    v14 = __N - 3;
    v15 = 3 * a6;
    v16 = 8 * a4;
    if (__N <= 0)
      v17 = -(-__N & 3);
    else
      v17 = __N & 3;
    v102 = v17;
    v100 = a4 + 1;
    v18 = 32 * a4 + 32;
    v98 = 16 * a4 + 16;
    v99 = 24 * a4 + 24;
    v97 = 8 * __N;
    v19 = 32 * a6;
    v20 = a5 + 24 * a6;
    v21 = a5;
    v22 = a5 + 16 * a6;
    v23 = a5 + 8 * a6;
    v104 = a5;
    while (1)
    {
      if (v12 < 4)
      {
        v26 = 0;
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v28 = v97;
        v27 = v16 + 8;
        v29 = v98;
        v30 = v99;
        do
        {
          v31 = v12 - 4;
          v32.i64[0] = veorq_s8((int8x16_t)a9, (int8x16_t)a9).u64[0];
          v33 = *(int64x2_t *)((char *)a3 + v24);
          *(double *)&v32.i64[1] = *(const double *)((char *)a3 + v27);
          v34 = (float64x2_t)vtrn1q_s64(v33, v32);
          v35 = (float64x2_t)vtrn2q_s64(v33, v32);
          v36 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v21 + v25), 1), v34, *(double *)(v21 + v25));
          v37 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v23 + v25), 1), v34, *(double *)(v23 + v25));
          v38 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v22 + v25), 1), v34, *(double *)(v22 + v25));
          v39 = vmlaq_n_f64(vmulq_laneq_f64(v35, *(float64x2_t *)(v20 + v25), 1), v34, *(double *)(v20 + v25));
          v9.i64[0] = veorq_s8(v9, v9).u64[0];
          v41 = *(int64x2_t *)((char *)a3 + v24 + 16);
          v40 = (float64_t *)((char *)a3 + v24 + 32);
          v43 = *(int64x2_t *)((char *)a3 + v27 + 8);
          v42 = (float64_t *)((char *)a3 + v27 + 24);
          v45 = *(int64x2_t *)((char *)a3 + v29);
          v44 = (unint64_t *)((char *)a3 + v29 + 16);
          *(double *)&v9.i64[1] = *(const double *)((char *)a3 + v30);
          v46 = (unint64_t *)((char *)a3 + v30 + 8);
          v48 = *(float64x2_t *)(v21 + v25 + 16);
          v47 = (double *)(v21 + v25 + 32);
          v50 = *(float64x2_t *)(v23 + v25 + 16);
          v49 = (double *)(v23 + v25 + 32);
          v52 = *(float64x2_t *)(v22 + v25 + 16);
          v51 = (double *)(v22 + v25 + 32);
          v54 = *(float64x2_t *)(v20 + v25 + 16);
          v53 = (double *)(v20 + v25 + 32);
          v55 = (float64x2_t)vtrn1q_s64(v41, v43);
          v56 = (float64x2_t)vtrn2q_s64(v41, v43);
          v57 = (float64x2_t)vtrn1q_s64(v45, (int64x2_t)v9);
          a9 = vtrn2q_s64(v45, (int64x2_t)v9);
          v58 = vmlaq_laneq_f64(vmlaq_n_f64(v36, v55, v48.f64[0]), v56, v48, 1);
          v59 = vmlaq_laneq_f64(vmlaq_n_f64(v37, v55, v50.f64[0]), v56, v50, 1);
          v60 = vmlaq_laneq_f64(vmlaq_n_f64(v38, v55, v52.f64[0]), v56, v52, 1);
          v61 = vmlaq_laneq_f64(vmlaq_n_f64(v39, v55, v54.f64[0]), v56, v54, 1);
          v62 = vmlaq_laneq_f64(vmulq_n_f64(v57, v48.f64[0]), (float64x2_t)a9, v48, 1);
          v63 = vmlaq_laneq_f64(vmulq_n_f64(v57, v50.f64[0]), (float64x2_t)a9, v50, 1);
          v64 = vmlaq_laneq_f64(vmulq_n_f64(v57, v52.f64[0]), (float64x2_t)a9, v52, 1);
          v65 = vmlaq_laneq_f64(vmulq_n_f64(v57, v54.f64[0]), (float64x2_t)a9, v54, 1);
          if ((((_DWORD)v12 - 4) & 1) != 0)
          {
            v66.f64[0] = *v40;
            v40 = (float64_t *)((char *)a3 + v24 + 40);
            v66.f64[1] = *v42;
            v42 = (float64_t *)((char *)a3 + v27 + 32);
            a9.i64[0] = *v44;
            v44 = (unint64_t *)((char *)a3 + v29 + 24);
            a9.i64[1] = *v46;
            v46 = (unint64_t *)((char *)a3 + v30 + 16);
            v67 = *v47;
            v47 = (double *)(v21 + v25 + 40);
            v68 = *v49;
            v49 = (double *)(v23 + v25 + 40);
            v69 = *v51;
            v51 = (double *)(v22 + v25 + 40);
            v70 = *v53;
            v53 = (double *)(v20 + v25 + 40);
            v58 = vmlaq_n_f64(v58, v66, v67);
            v59 = vmlaq_n_f64(v59, v66, v68);
            v60 = vmlaq_n_f64(v60, v66, v69);
            v61 = vmlaq_n_f64(v61, v66, v70);
            v62 = vmlaq_n_f64(v62, (float64x2_t)a9, v67);
            v63 = vmlaq_n_f64(v63, (float64x2_t)a9, v68);
            v64 = vmlaq_n_f64(v64, (float64x2_t)a9, v69);
            v65 = vmlaq_n_f64(v65, (float64x2_t)a9, v70);
            v31 = v12 - 5;
          }
          for (; v31; v31 -= 2)
          {
            v71 = *(int64x2_t *)v40;
            v40 += 2;
            v72 = *(int64x2_t *)v42;
            v42 += 2;
            v73 = *(int64x2_t *)v44;
            v44 += 2;
            v9 = *(int8x16_t *)v46;
            v46 += 2;
            v74 = *(float64x2_t *)v47;
            v47 += 2;
            v75 = *(float64x2_t *)v49;
            v49 += 2;
            v76 = *(float64x2_t *)v51;
            v51 += 2;
            v77 = *(float64x2_t *)v53;
            v53 += 2;
            v78 = (float64x2_t)vtrn1q_s64(v71, v72);
            v79 = (float64x2_t)vtrn2q_s64(v71, v72);
            v80 = (float64x2_t)vtrn1q_s64(v73, (int64x2_t)v9);
            a9 = vtrn2q_s64(v73, (int64x2_t)v9);
            v58 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v78, v74.f64[0]), v79, v74, 1);
            v59 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v78, v75.f64[0]), v79, v75, 1);
            v60 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v78, v76.f64[0]), v79, v76, 1);
            v61 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v78, v77.f64[0]), v79, v77, 1);
            v62 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v80, v74.f64[0]), (float64x2_t)a9, v74, 1);
            v63 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v80, v75.f64[0]), (float64x2_t)a9, v75, 1);
            v64 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v80, v76.f64[0]), (float64x2_t)a9, v76, 1);
            v65 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v80, v77.f64[0]), (float64x2_t)a9, v77, 1);
          }
          v81 = (float64x2_t *)((char *)v47 - v28);
          v82 = (float64x2_t *)((char *)v49 - v28);
          v83 = (float64x2_t *)((char *)v51 - v28);
          v84 = (float64x2_t *)((char *)v53 - v28);
          *v81 = vmulq_n_f64(v58, a7);
          v81[1] = vmulq_n_f64(v62, a7);
          *v82 = vmulq_n_f64(v59, a7);
          v82[1] = vmulq_n_f64(v63, a7);
          *v83 = vmulq_n_f64(v60, a7);
          v83[1] = vmulq_n_f64(v64, a7);
          *v84 = vmulq_n_f64(v61, a7);
          v84[1] = vmulq_n_f64(v65, a7);
          v26 += 4;
          v30 += v18;
          v29 += v18;
          v27 += v18;
          v28 -= 32;
          v12 -= 4;
          v25 += 32;
          v24 += v18;
        }
        while (v26 < v14);
      }
      a5 = v104;
      v10 = a4;
      v85 = (double *)(v104 + 8 * v13 * a6 + 8 * v26);
      v86 = (double *)&a3[v26 + v26 * a4];
      if (v102 == 3)
        break;
      if (v102 == 2)
      {
        v88 = a7;
        v87 = 2 * a6;
        v12 = __N;
        v90 = (2 * a6) | 1;
        v89 = a6 + 1;
        v92 = v100;
        v91 = v15 + 1;
LABEL_21:
        *v85 = v88 * (*v85 * *v86 + v85[1] * v86[1]);
        v85[a6] = v88 * (v85[a6] * *v86 + v85[v89] * v86[1]);
        v85[v87] = v88 * (v85[v87] * *v86 + v85[v90] * v86[1]);
        v85[3 * a6] = v88 * (v85[3 * a6] * *v86 + v85[v91] * v86[1]);
        v86 += v92;
        ++v85;
        goto LABEL_22;
      }
      v87 = 2 * a6;
      v12 = __N;
      if (v102 == 1)
      {
        v88 = a7;
LABEL_22:
        *v85 = v88 * (*v85 * *v86);
        v85[a6] = v88 * (v85[a6] * *v86);
        v85[v87] = a7 * (v85[v87] * *v86);
        *(double *)a9.i64 = a7;
        v85[3 * a6] = a7 * (v85[3 * a6] * *v86);
      }
      v13 += 4;
      v20 += v19;
      v22 += v19;
      v23 += v19;
      v21 += v19;
      if (v13 >= v103)
        goto LABEL_24;
    }
    v88 = a7;
    *v85 = a7 * (v85[1] * v86[1] + v85[2] * v86[2] + *v85 * *v86);
    v90 = (2 * a6) | 1;
    v89 = a6 + 1;
    v85[a6] = a7 * (v85[a6 + 1] * v86[1] + v85[a6 + 2] * v86[2] + v85[a6] * *v86);
    v87 = 2 * a6;
    v12 = __N;
    v85[2 * a6] = a7 * (v85[v90] * v86[1] + v85[2 * a6 + 2] * v86[2] + v85[2 * a6] * *v86);
    v92 = v100;
    v91 = v15 + 1;
    v85[3 * a6] = a7 * (v85[v15 + 1] * v86[1] + v85[v15 + 2] * v86[2] + v85[3 * a6] * *v86);
    v86 += v100;
    ++v85;
    goto LABEL_21;
  }
LABEL_24:
  v93 = a2 - v13;
  if (a2 > v13)
  {
    v94 = (double *)(a5 + 8 * v13 * a6);
    v95 = 8 * a6;
    do
    {
      cblas_dscal(v12, a7, v94, 1);
      cblas_dtrmv(CblasColMajor, CblasLower, CblasTrans, CblasNonUnit, v12, a3, v10, v94, 1);
      v94 = (double *)((char *)v94 + v95);
      --v93;
    }
    while (v93);
  }
}

void sub_20E85964C(int a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, double *a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, int a17, char *a18, int a19)
{
  int v20;
  int v21;
  int v25;
  char *v28;
  char *v29;
  int v30;
  int v32;
  int v33;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char vars0;

  v20 = a7;
  v21 = a6;
  v25 = a2;
  if (a1 != 102)
  {
    if (a1 != 101)
    {
      v30 = cblas_errprn(1, 2000, "Order must be %d or %d, but is set to %d");
      goto LABEL_46;
    }
    if ((_DWORD)a2 == 142)
    {
      if (a17 < (int)a7 || a17 <= 0)
      {
        v40 = a17;
        v42 = a7;
        v29 = "lda must be >= MAX(N,1): lda=%d N=%d";
        goto LABEL_39;
      }
    }
    else
    {
      if ((_DWORD)a2 != 141)
      {
        v43 = a2;
        v40 = 142;
        v42 = 141;
        v29 = "SIDE must be %d or %d, but is set to %d";
        v36 = 2;
        goto LABEL_41;
      }
      if (a17 < (int)a6 || a17 <= 0)
      {
        v40 = a17;
        v42 = a6;
        v29 = "lda must be >= MAX(M,1): lda=%d M=%d";
LABEL_39:
        v36 = 10;
LABEL_41:
        v33 = cblas_errprn(v36, 2000, v29, v40, v42, v43);
        goto LABEL_43;
      }
    }
    v33 = 2000;
LABEL_43:
    if (a19 >= v20 && a19 > 0)
      goto LABEL_47;
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(N,1): ldb=%d N=%d");
LABEL_46:
    v33 = v30;
    goto LABEL_47;
  }
  if ((_DWORD)a2 == 142)
  {
    if (a17 >= (int)a7 && a17 > 0)
      goto LABEL_24;
    v39 = a17;
    v41 = a7;
    v28 = "lda must be >= MAX(N,1): lda=%d N=%d";
  }
  else
  {
    if ((_DWORD)a2 != 141)
    {
      v41 = 141;
      v43 = a2;
      v39 = 142;
      v28 = "SIDE must be %d or %d, but is set to %d";
      v32 = 2;
      goto LABEL_26;
    }
    if (a17 >= (int)a6 && a17 > 0)
    {
LABEL_24:
      v33 = 2000;
      goto LABEL_27;
    }
    v39 = a17;
    v41 = a6;
    v28 = "lda must be >= MAX(M,1): lda=%d M=%d";
  }
  v32 = 10;
LABEL_26:
  v33 = cblas_errprn(v32, 2000, v28, v39, v41, v43);
LABEL_27:
  if (a19 < v21 || a19 <= 0)
  {
    v30 = cblas_errprn(12, v33, "ldb must be >= MAX(M,1): ldb=%d M=%d");
    goto LABEL_46;
  }
LABEL_47:
  if ((a3 - 123) <= 0xFFFFFFFD)
    v33 = cblas_errprn(3, v33, "UPLO must be %d or %d, but is set to %d", 121, 122, a3);
  if ((a4 - 114) <= 0xFFFFFFFC)
    v33 = cblas_errprn(4, v33, "TransA must be %d, %d or %d, but is set to %d", 111, 112, 113, a4);
  if ((a5 - 133) > 0xFFFFFFFD)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_53;
LABEL_58:
    v33 = cblas_errprn(6, v33, "M cannot be less than zero; it is set to %d.", v21);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_59;
  }
  v33 = cblas_errprn(5, v33, "UPLO must be %d or %d, but is set to %d", 132, 131, a5);
  if (v21 < 0)
    goto LABEL_58;
LABEL_53:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  v33 = cblas_errprn(7, v33, "N cannot be less than zero; it is set to %d.", v20);
LABEL_54:
  if (v33 == 2000)
  {
    if (a1 == 102)
    {
      sub_20E85E494(v25, a3, a4, a5, v21, v20, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
    else
    {
      if (v25 == 141)
        v37 = 142;
      else
        v37 = 141;
      if (a3 == 121)
        v38 = 122;
      else
        v38 = 121;
      sub_20E85E494(v37, v38, a4, a5, v20, v21, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16, a18, a19, 0,
        0,
        1,
        (uint64_t)a8,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        vars0);
    }
  }
  else
  {
    cblas_xerbla(v33, "cblas_dtrsm", "");
  }
}

uint64_t sub_20E859A08(int *a1, _DWORD *a2, int *a3, __CLPK_doublereal *a4, int *a5, uint64_t a6, double *a7, int *a8, int *a9)
{
  __CLPK_integer v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  unsigned int v16;
  __CLPK_integer *v17;
  int v18;
  double *v20;
  int v22;
  double v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  __CLPK_doublereal *v29;
  int v30;
  int v31;
  uint64_t v32;
  int v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __CLPK_doublereal *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  __CLPK_integer v50;
  int v51;
  size_t v52;
  int v53;
  BOOL v54;
  int v55;
  double *v56;
  __CLPK_doublereal *v57;
  __CLPK_doublereal *v58;
  _DWORD *v60;
  int *v62;
  __CLPK_integer *v64;
  int v65;
  size_t v67;
  int v68;
  double *v69;
  uint64_t v70;
  int v71;
  __CLPK_integer v72;
  int v73;
  int v74;
  int v75[3];

  v70 = 0;
  v9 = *a5;
  *a9 = 0;
  v10 = *a1;
  if (*a1 < 0)
  {
    v13 = 1;
    v14 = -1;
    goto LABEL_12;
  }
  v11 = a2;
  v12 = *a2;
  v13 = 2;
  v14 = -2;
  if ((*a2 & 0x80000000) != 0)
    goto LABEL_12;
  if (v12 > v10)
    goto LABEL_12;
  v15 = a3;
  v16 = *a3;
  v13 = 3;
  v14 = -3;
  if (*a3 < 0 || (int)v16 > v12)
    goto LABEL_12;
  v17 = a5;
  if (v10 <= 1)
    v18 = 1;
  else
    v18 = *a1;
  if (*a5 < v18)
  {
    v13 = 5;
    v14 = -5;
LABEL_12:
    *a9 = v14;
    v75[0] = v13;
    xerbla_();
    return 0;
  }
  v20 = a7;
  v22 = *a8;
  v23 = (double)(32 * v12);
  if (v12)
    v24 = 32;
  else
    v24 = 1;
  v65 = v24;
  if (!v12)
    v23 = 1.0;
  *a7 = v23;
  if (v12 <= 1)
    v25 = 1;
  else
    v25 = v12;
  if (v22 < v25 && v22 != -1)
  {
    v13 = 8;
    v14 = -8;
    goto LABEL_12;
  }
  if (v22 != -1 && v12)
  {
    v57 = a4;
    if (v65 >= v16)
    {
      v27 = 0;
    }
    else
    {
      if (v16 >= 0x81)
      {
        LODWORD(v70) = v12;
        v55 = 32 * v12;
        if (v22 < 32 * v12)
        {
          v65 = v22 / v12;
          if (v22 / v12 <= 1)
          {
            v26 = 0;
LABEL_50:
            v75[0] = v10 - v26;
            v74 = v12 - v26;
            v73 = v16 - v26;
            sub_20E859F84(v75, &v74, &v73, a4, v17, a6, v20, (int *)&v70 + 1);
            if (v26 >= 1)
            {
              v34 = *v15;
              v74 = v65;
              v75[0] = v34;
              v35 = v34 - v26 + 1;
              v36 = v35 >= v34;
              if (v65 >= 0)
                v36 = v35 <= v34;
              if (v36)
              {
                v58 = &v57[~v9];
                v37 = a6 - 8;
                v56 = v20 - 1;
                v38 = *v11;
                v69 = v20;
                v62 = v15;
                v64 = v17;
                v60 = v11;
                do
                {
                  if (v65 >= v34 - v35 + 1)
                    v39 = v34 - v35 + 1;
                  else
                    v39 = v65;
                  v71 = v39;
                  v72 = v34 - v35 + 1;
                  v40 = v38 - v34 + v35;
                  v41 = *a1;
                  if (v40 <= 1)
                  {
                    v47 = v38;
                    v43 = v35 - 1;
                    v46 = v35;
                    v45 = &v57[~v9];
                  }
                  else
                  {
                    v73 = v35 + ~v34 + v39 + v41;
                    sub_20E838A54((uint64_t)"Backward", (uint64_t)"Columnwise", &v73, &v71, (uint64_t)&v58[v40 * v9 + 1], v17, v37 + 8 * v35, v69, (int *)&v70);
                    v42 = *v15;
                    v43 = v35 - 1;
                    v73 = v35 - 1 + *a1 - *v15 + v71;
                    v44 = *v11 - v42 + v35;
                    v72 = v44 - 1;
                    sub_20E829A08((uint64_t)"Left", "No transpose", (uint64_t)"Backward", (uint64_t)"Columnwise", &v73, &v72, &v71, &v58[v44 * v9 + 1], v17, (int)v69, (int *)&v70, v57, v17, (uint64_t)&v56[v71 + 1], (int *)&v70);
                    v37 = a6 - 8;
                    v45 = &v57[~v9];
                    v46 = v35;
                    v20 = v69;
                    v41 = *a1;
                    v34 = *v15;
                    v39 = v71;
                    v47 = *v11;
                  }
                  v73 = v43 + v41 - v34 + v39;
                  sub_20E859F84(&v73, &v71, &v71, &v45[(v35 - v34 + v47) * v9 + 1], v17, v37 + 8 * v46, v20, (int *)&v70 + 1);
                  v34 = *v15;
                  v68 = *v11;
                  v48 = *v11 - *v15 + v35;
                  v49 = v48 + v71;
                  v73 = v48 + v71 - 1;
                  if (v71 >= 1)
                  {
                    v50 = *a1;
                    v72 = v50;
                    v51 = v35 - v34 + v71 + v50;
                    v52 = 8 * (v34 - (v35 + v71)) + 8;
                    v53 = v35 + v71 + v50 + v9 * v48 - v34;
                    do
                    {
                      if (v51 <= v50)
                        bzero(&v57[~v9 + v53], v52);
                      ++v48;
                      v53 += v9;
                    }
                    while (v48 < v49);
                  }
                  v35 += v74;
                  if (v74 >= 0)
                    v54 = v35 <= v75[0];
                  else
                    v54 = v35 >= v75[0];
                  v20 = v69;
                  v15 = v62;
                  v17 = v64;
                  v11 = v60;
                  v37 = a6 - 8;
                  v38 = v68;
                }
                while (v54);
              }
            }
            *v20 = (double)v55;
            return 0;
          }
        }
        v27 = 128;
LABEL_35:
        v26 = 0;
        if (v65 < v16 && v27 < v16)
        {
          v28 = (int)(v65 - v27 + v16 - 1) / v65 * v65;
          v74 = v28;
          v26 = (int)v16 >= v28 ? v28 : v16;
          v75[0] = v12 - v26;
          if (v12 - v26 >= 1)
          {
            v29 = &a4[~v9];
            if (v10 <= v10 - v26 + 1)
              v30 = v10 - v26 + 1;
            else
              v30 = v10;
            v67 = 8 * (v26 + ~v10 + v30) + 8;
            v31 = v9 + v10 - v26 + 1;
            v32 = -(uint64_t)(v12 - v26);
            do
            {
              if (v26 >= 1)
                bzero(&v29[v31], v67);
              v31 += v9;
            }
            while (!__CFADD__(v32++, 1));
            v15 = a3;
            v17 = a5;
            a4 = v57;
            v11 = a2;
          }
        }
        goto LABEL_50;
      }
      v27 = 128;
    }
    v55 = v12;
    goto LABEL_35;
  }
  return 0;
}

uint64_t sub_20E859F84(int *a1, int *a2, _DWORD *a3, __CLPK_doublereal *a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8)
{
  __CLPK_integer v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  __CLPK_doublereal *v17;
  uint64_t v18;
  int v19;
  int v20;
  __CLPK_doublereal *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __CLPK_doublereal *v28;
  __CLPK_doublereal *v29;
  _DWORD *v30;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  __CLPK_doublereal *v40;
  int v41;
  double da;
  __CLPK_integer v44;
  int n;

  da = 0.0;
  v8 = *a5;
  *a8 = 0;
  v9 = *a1;
  if ((v9 & 0x80000000) != 0)
  {
    v11 = 1;
    v12 = -1;
    goto LABEL_12;
  }
  v10 = *a2;
  v11 = 2;
  v12 = -2;
  if (*a2 < 0)
    goto LABEL_12;
  if (v10 > (int)v9)
    goto LABEL_12;
  v13 = a3;
  v14 = *a3;
  v11 = 3;
  v12 = -3;
  if ((*a3 & 0x80000000) != 0 || v10 < v14)
    goto LABEL_12;
  if (v9 <= 1)
    v15 = 1;
  else
    v15 = *a1;
  if (*a5 < v15)
  {
    v11 = 5;
    v12 = -5;
LABEL_12:
    *a8 = v12;
    n = v11;
    xerbla_();
    return 0;
  }
  if (v10)
  {
    v35 = ~v8;
    v17 = &a4[v35];
    v33 = v14;
    v18 = (v10 - v14);
    if ((int)v18 >= 1)
    {
      v40 = &a4[v35];
      v19 = v8 + v9 - v10 + 1;
      v20 = v8 + 1;
      do
      {
        bzero(&v40[v20], 8 * v9);
        v17[v19] = 1.0;
        v19 += v8 + 1;
        v20 += v8;
        --v18;
      }
      while (v18);
    }
    if ((int)v33 >= 1)
    {
      v21 = v17;
      v22 = 0;
      v23 = 0;
      v28 = &a4[v35];
      v29 = v17;
      v24 = 1;
      v41 = -2;
      v30 = v13;
      do
      {
        v25 = *v13;
        v34 = v10 + v24 - *v13;
        v36 = v23 + v8 * v34;
        v21[v36 + 1 + (int)v9 - v25] = 1.0;
        v44 = v23 + v10 - v25;
        n = v23 + v9 - v25 + 1;
        sub_20E8446B0((uint64_t)"Left", &n, &v44, &v21[v8 + 1 + v8 * v44], &dword_254A4A4EC, (double *)(a6 + v22), a4, a5, a7);
        n = v23 + v10 + *a1 - v25 - *a2;
        da = -*(double *)(a6 + 8 * v23);
        dscal_(&n, &da, &v21[v8 + 1 + v8 * ((int)v23 + v10 - v25)], &dword_254A4A4EC);
        LODWORD(v9) = *a1;
        v26 = *a2;
        v21 = v29;
        v27 = v10 + *a1 - v25 - *a2;
        v29[v36 + 1 + v27] = 1.0 - *(double *)(a6 + 8 * v23);
        n = v9;
        if ((int)v23 + v27 + 1 < (int)v9)
          bzero(&v28[(int)v23 + 2 + v8 * v34 + v27], 8 * (v41 + v25 + v26 - v10) + 8);
        ++v23;
        ++v24;
        v22 += 8;
        --v41;
        v10 = v26;
        v13 = v30;
      }
      while (v23 < v33);
    }
  }
  return 0;
}

void sub_20E85A290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  double *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int vars0_4;
  uint64_t vars8;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v27 = MEMORY[0x24BDAC7A8]();
  vars8 = v34;
  v72 = v32;
  vars0_4 = v35;
  STACK[0x10168] = *MEMORY[0x24BDAC8D0];
  v36 = sub_20E836BBC;
  if (v27 == 111)
    v36 = sub_20E8367DC;
  v69 = v36;
  v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))sub_20E835DBC;
  if (v27 == 111)
    v37 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))sub_20E835C9C;
  v65 = v37;
  if (v27 == 111)
    v38 = v32;
  else
    v38 = 1;
  v73 = v32;
  if (v27 == 111)
    v39 = 1;
  else
    v39 = v32;
  v67 = v39;
  v68 = v38;
  v40 = (v29 << 6) + 4108;
  if (a13 == -1)
  {
    v46 = 8 * v40;
    if (v29 < 65)
      v46 = 0;
    v45 = (double)(unint64_t)v46;
    goto LABEL_19;
  }
  v41 = v31;
  v42 = v30;
  v43 = v28;
  v44 = v33;
  if (v29 >= 65 && a13)
  {
    if (8 * v40 > a13)
    {
      v45 = (double)(unint64_t)(8 * v40);
LABEL_19:
      *a12 = v45;
      return;
    }
    goto LABEL_22;
  }
  if (v29 >= 65)
  {
LABEL_22:
    v63 = a12;
    v64 = v29;
    v47 = (char *)a12;
    if (!a12)
      v47 = (char *)malloc_type_malloc(8 * v40, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v63 = a12;
  v64 = v29;
  v47 = &a27;
LABEL_24:
  if (v42 >= 1)
  {
    v76 = 0;
    v48 = 0;
    v49 = 64;
    v79 = v43;
    v80 = v41;
    v66 = v42;
    v51 = 32 * a11;
    do
    {
      v75 = v49;
      if (v42 >= v49)
        v52 = v49;
      else
        v52 = v42;
      v74 = v48 + 64;
      if (v48 + 64 <= v42)
        v53 = 64;
      else
        v53 = v42 - v48;
      v82 = vars8 + 8 * v48 * v41;
      v77 = v72 + 8 * v48 * v67;
      v78 = v48;
      if (v48)
      {
        v65(v53, v48, v77, v73, v47 + 32832, v44);
        if (v43 >= 1)
        {
          v54 = 0;
          v81 = 32 * (v52 + v76);
          v55 = v73;
          v56 = (void (*)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
          do
          {
            v57 = v54;
            v58 = v43 - v54;
            v83 = v57 + 64;
            if (v57 + 64 <= v43)
              v59 = 64;
            else
              v59 = v58;
            if ((v59 & 7) != 0)
              v56 = (void (*)(char *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E8428D0;
            sub_20E835E6C(v59, v53, (__int128 *)(v82 + 8 * v57), v41, v47);
            v60 = 0;
            v84 = v55;
            v61 = v55;
            v62 = v47 + 32832;
            do
            {
              v56(v47, v62, v61, a11, v59, v53);
              v60 += 4;
              v62 = (_OWORD *)((char *)v62 + v81);
              v61 += v51;
            }
            while (v60 < v78 - 3);
            v54 = v83;
            v55 = v84 + 512;
            v43 = v79;
            v41 = v80;
          }
          while (v83 < v79);
        }
      }
      v69(vars0_4, v43, v53, v77 + 8 * v78 * v68, v73, v82, v41, v44);
      v49 = v75 + 64;
      v76 -= 64;
      v48 = v74;
      v42 = v66;
    }
    while (v74 < v66);
  }
  if (v64 >= 65 && !v63)
    free(v47);
}

void sub_20E85A614(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, double *a12, unint64_t a13, uint64_t a14, int a15, uint64_t a16, double *__Y, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,char a24)
{
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *(*v51)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  double *(*v53)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  const double *v55;
  float64x2_t *v56;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double);
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t vars8;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v24 = MEMORY[0x24BDAC7A8]();
  v64 = v29;
  v65 = v30;
  v66 = v31;
  v63 = v32;
  STACK[0x10148] = *MEMORY[0x24BDAC8D0];
  v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))sub_20E835DBC;
  if (v24 == 111)
    v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, double))sub_20E835C9C;
  v60 = v33;
  v34 = sub_20E83696C;
  if (v24 == 111)
    v34 = sub_20E836A9C;
  v62 = v34;
  if (v24 == 111)
    v35 = a9;
  else
    v35 = 1;
  v67 = v35;
  if (v24 == 111)
    v36 = 1;
  else
    v36 = a9;
  v61 = v36;
  v37 = (v26 << 6) + 4108;
  if (a13 == -1)
  {
    v42 = 8 * v37;
    if (v26 < 65)
      v42 = 0;
    v41 = (double)(unint64_t)v42;
    goto LABEL_19;
  }
  v38 = v27;
  v39 = v25;
  v40 = v28;
  if (v26 >= 65 && a13)
  {
    if (8 * v37 > a13)
    {
      v41 = (double)(unint64_t)(8 * v37);
LABEL_19:
      *a12 = v41;
      return;
    }
    goto LABEL_22;
  }
  if (v26 >= 65)
  {
LABEL_22:
    v59 = v26;
    v43 = (char *)a12;
    v57 = a12;
    if (!a12)
      v43 = (char *)malloc_type_malloc(8 * v37, 0x100004000313F17uLL);
    goto LABEL_24;
  }
  v59 = v26;
  v57 = a12;
  v43 = &a24;
LABEL_24:
  if (v66 >= 1)
  {
    v45 = v59 - 3;
    v58 = 8 * a11;
    v71 = 32 * a11;
    v46 = v66;
    v72 = v39;
    v73 = v38;
    do
    {
      if (v46 >= 0x40)
        v47 = v46 - 64;
      else
        v47 = 0;
      if (v46 >= 0x40)
        v48 = 64;
      else
        v48 = v46;
      v74 = v64 + 8 * v47 * v38;
      vars8 = v47;
      v70 = v65 + 8 * v47 * v61;
      v76 = v47 + v48;
      if (v66 > v47 + v48)
      {
        v60(v48, v66 - (v47 + v48), v70 + 8 * v76 * v67, a9, v43 + 32832, v40);
        if (v39 >= 1)
        {
          v49 = 0;
          if (v76 - v59 >= 0)
            v50 = -((v76 - v59) & 3);
          else
            v50 = (v59 - v76) & 3;
          v78 = a10 + v58 * v46;
          v51 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
          do
          {
            v77 = v49 + 64;
            if (v49 + 64 <= v39)
              v52 = 64;
            else
              v52 = v39 - v49;
            v75 = v49;
            if ((v52 & 7) != 0)
              v53 = sub_20E8428D0;
            else
              v53 = v51;
            v79 = v52;
            sub_20E835E6C(v52, v48, (__int128 *)(v74 + 8 * v49), v38, v43);
            v54 = v76;
            v55 = (const double *)(v43 + 32832);
            if (v76 < v45)
            {
              v56 = (float64x2_t *)v78;
              v55 = (const double *)(v43 + 32832);
              v54 = v76;
              do
              {
                v53((float64x2_t *)v43, (float64x2_t *)v55, v56, a11, v79, v48);
                v54 += 4;
                v55 += 4 * v48;
                v56 = (float64x2_t *)((char *)v56 + v71);
              }
              while (v54 < v45);
            }
            v51 = v53;
            if (v50)
              sub_20E8424A0((float64x2_t *)v43, v55, a10 + 8 * v75 + 8 * v54 * a11, a11, v79, v50, v48);
            v78 += 512;
            v49 = v77;
            v39 = v72;
            v38 = v73;
          }
          while (v77 < v72);
        }
      }
      v62(v63, v39, v48, v70 + 8 * vars8 * v67, a9, v74, v38, v40);
      v46 = vars8;
    }
    while (vars8 > 0);
  }
  if (v59 >= 65 && !v57)
    free(v43);
}

uint64_t sub_20E85A9F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x2_t *v28;
  int64x2_t v29;
  float32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  BOOL v66;
  float32x2_t *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  __int32 *v71;
  __int32 *v72;
  float32x2_t v73;
  float v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  __int32 *v78;
  float32x2_t v79;
  float32_t v80;
  float32_t v81;
  float32_t v82;
  float32_t v83;
  float32_t v84;
  float32_t v85;
  uint64_t j;
  int32x4_t *v87;
  int32x4_t *v88;
  float32x4_t *v89;
  float32x4_t *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t *v95;
  int32x4_t v96;
  float32x2_t *v97;
  int32x4_t v98;
  float32x4_t *v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t *v116;
  float32x2_t *v117;
  __int32 *v118;
  __int32 *v119;
  float32x2_t v120;
  float v121;
  float32_t v122;
  __int32 *v123;
  float32x2_t v124;
  float32_t v125;
  float32_t v126;
  uint64_t k;
  float32x4_t *v128;
  float32x4_t *v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t *v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t *v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float32x4_t *v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t v146;
  float32x2_t *v147;
  __int32 *v148;
  __int32 *v149;
  float32x2_t v150;
  float v151;
  __int32 *v152;
  float32x2_t v153;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v30 = vmulq_n_f32(v49, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v20 = *v17;
      v19 = (float32x4_t *)((char *)v17 + v8);
      v21 = *v19;
      v22 = (float32x2_t *)&v19->u32[(unint64_t)v8 / 4 + 2];
      v23 = *v12;
      v24 = (float32x2_t *)(a5 + v9 * v7);
      v25 = *v13;
      v26 = (float32x2_t *)((char *)v13 - 4 * i);
      v27 = *v14;
      v28 = (float32x2_t *)((char *)v14 - 4 * i);
      v29 = *v15;
      v30 = (float32x4_t *)((char *)v15 - 4 * i);
      v31 = (int32x4_t)vtrn1q_s64(v23, v27);
      v32 = (int32x4_t)vtrn1q_s64(v25, v29);
      v33 = (int32x4_t)vtrn2q_s64(v23, v27);
      v34 = (int32x4_t)vtrn2q_s64(v25, v29);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (float32x4_t)vtrn2q_s32(v31, v32);
      v37 = (float32x4_t)vtrn1q_s32(v33, v34);
      v38 = (int64x2_t)vmulq_n_f32(v35, v20.f32[0]);
      v39 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v35, *(float32x2_t *)v20.f32, 1), vmulq_lane_f32(v36, *(float32x2_t *)v21.f32, 1));
      v40 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v35, v20, 2), v37, COERCE_FLOAT(*v22)), vmulq_laneq_f32(v36, v21, 2));
      v41 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v35, v20, 3), v37, *v22, 1), vmulq_laneq_f32(v36, v21, 3)), vmulq_n_f32((float32x4_t)vtrn2q_s32(v33, v34), v22->f32[(unint64_t)v8 / 4 + 1]));
      v42 = (int32x4_t)vtrn1q_s64(v38, v40);
      v43 = (int32x4_t)vtrn1q_s64(v39, v41);
      v44 = (int32x4_t)vtrn2q_s64(v38, v40);
      v45 = (int32x4_t)vtrn2q_s64(v39, v41);
      v46 = (float32x4_t)vtrn1q_s32(v42, v43);
      v47 = (float32x4_t)vtrn2q_s32(v42, v43);
      v48 = (float32x4_t)vtrn1q_s32(v44, v45);
      v49 = (float32x4_t)vtrn2q_s32(v44, v45);
      if ((i & 1) != 0)
      {
        v50 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v51 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v52 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v53 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v54 = v30->f32[0];
        v30 = (float32x4_t *)((char *)v30 + 4);
        v46 = vmlaq_n_f32(v46, v50, v51);
        v47 = vmlaq_n_f32(v47, v50, v52);
        v48 = vmlaq_n_f32(v48, v50, v53);
        v49 = vmlaq_n_f32(v49, v50, v54);
        v18 = i - 1;
      }
      if (v18)
      {
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        v58 = 0uLL;
        do
        {
          v60 = *v16;
          v59 = (float32x4_t *)((char *)v16 + v8);
          v61 = *v59;
          v16 = (float32x4_t *)((char *)v59 + v8);
          v62 = *v24++;
          v63 = *v26++;
          v64 = *v28++;
          v65 = *(float32x2_t *)v30->f32;
          v30 = (float32x4_t *)((char *)v30 + 8);
          v46 = vmlaq_n_f32(v46, v60, v62.f32[0]);
          v47 = vmlaq_n_f32(v47, v60, v63.f32[0]);
          v48 = vmlaq_n_f32(v48, v60, v64.f32[0]);
          v49 = vmlaq_n_f32(v49, v60, v65.f32[0]);
          v55 = vmlaq_lane_f32(v55, v61, v62, 1);
          v56 = vmlaq_lane_f32(v56, v61, v63, 1);
          v57 = vmlaq_lane_f32(v57, v61, v64, 1);
          v58 = vmlaq_lane_f32(v58, v61, v65, 1);
          v66 = v18 <= 2;
          v18 -= 2;
        }
        while (!v66);
        v46 = vaddq_f32(v46, v55);
        v47 = vaddq_f32(v47, v56);
        v48 = vaddq_f32(v48, v57);
        v49 = vaddq_f32(v49, v58);
      }
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v46, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v47, a7);
      *(float32x4_t *)v28->f32 = vmulq_n_f32(v48, a7);
    }
    if (i)
    {
      v67 = (float32x2_t *)(a5 + v9 * v7);
      v68 = (float32x2_t *)((char *)v67 + v7);
      v69 = &v67[(unint64_t)v7 / 4];
      v70 = (float32x2_t *)((char *)&v67[(unint64_t)v7 / 4] + v7);
      v71 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v73.i32[0] = *v71;
          v72 = &v71[(unint64_t)v8 / 4];
          v73.i32[1] = *v72;
          v74 = *(float *)&v72[(unint64_t)v8 / 4];
          v71 = &v72[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v75 = (float)(vaddv_f32(vmul_f32(v73, *v68)) + (float)(v68[1].f32[0] * v74)) * a7;
          v76 = (float)(vaddv_f32(vmul_f32(v73, *v69)) + (float)(v69[1].f32[0] * v74)) * a7;
          v77 = (float)(vaddv_f32(vmul_f32(v73, *v70)) + (float)(v70[1].f32[0] * v74)) * a7;
          v67[1].f32[0] = (float)(vaddv_f32(vmul_f32(v73, *v67)) + (float)(v67[1].f32[0] * v74)) * a7;
          v68[1].f32[0] = v75;
          v69[1].f32[0] = v76;
          v70[1].f32[0] = v77;
        }
        v79.i32[0] = *v71;
        v78 = &v71[(unint64_t)v8 / 4];
        v79.i32[1] = *v78;
        v71 = &v78[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
        v80 = vaddv_f32(vmul_f32(v79, *v68)) * a7;
        v81 = vaddv_f32(vmul_f32(v79, *v69)) * a7;
        v82 = vaddv_f32(vmul_f32(v79, *v70)) * a7;
        v67->f32[1] = vaddv_f32(vmul_f32(v79, *v67)) * a7;
        v68->f32[1] = v80;
        v69->f32[1] = v81;
        v70->f32[1] = v82;
      }
      v83 = (float)(*(float *)v71 * v68->f32[0]) * a7;
      v84 = (float)(*(float *)v71 * v69->f32[0]) * a7;
      v85 = (float)(*(float *)v71 * v70->f32[0]) * a7;
      v67->f32[0] = (float)(*(float *)v71 * v67->f32[0]) * a7;
      v68->f32[0] = v83;
      v69->f32[0] = v84;
      v70->f32[0] = v85;
    }
    v9 += 4;
    v66 = v10 <= 4;
    v10 -= 4;
  }
  while (!v66);
  v66 = v10 <= -3;
  a2 = v10 + 3;
  if (!v66)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v99 = vmulq_n_f32(v105, a7))
      {
        j -= 4;
        v87 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v88 = (int32x4_t *)((char *)v87 + v7);
        v89 = (float32x4_t *)(a3 + 4 * j);
        v90 = (float32x4_t *)((char *)v89 + j * v8);
        v91 = j;
        v93 = *v90;
        v92 = (float32x4_t *)((char *)v90 + v8);
        v94 = *v92;
        v95 = (float32x2_t *)&v92->u32[(unint64_t)v8 / 4 + 2];
        v96 = *v87;
        v97 = (float32x2_t *)(a5 + v9 * v7);
        v98 = *v88;
        v99 = (float32x4_t *)((char *)v88 - 4 * j);
        v100 = vtrn1q_s32(v96, v98);
        v101 = vtrn2q_s32(v96, v98);
        *(float32x2_t *)v102.i8 = vmul_n_f32(*(float32x2_t *)v100.i8, v93.f32[0]);
        *(float32x2_t *)v103.i8 = vadd_f32(vmul_lane_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v93.f32, 1), vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v94.f32, 1));
        v102.u64[1] = (unint64_t)vadd_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 2), (float32x2_t)v100.u64[1], COERCE_FLOAT(*v95)), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 2));
        v103.u64[1] = (unint64_t)vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v100.i8, v93, 3), (float32x2_t)v100.u64[1], *v95, 1), vmul_laneq_f32(*(float32x2_t *)v101.i8, v94, 3)), vmul_n_f32((float32x2_t)v101.u64[1], v95->f32[(unint64_t)v8 / 4 + 1]));
        v104 = (float32x4_t)vtrn1q_s32(v102, v103);
        v105 = (float32x4_t)vtrn2q_s32(v102, v103);
        if ((j & 1) != 0)
        {
          v106 = *v89;
          v89 = (float32x4_t *)((char *)v89 + v8);
          v107 = v97->f32[0];
          v97 = (float32x2_t *)((char *)v97 + 4);
          v108 = v99->f32[0];
          v99 = (float32x4_t *)((char *)v99 + 4);
          v104 = vmlaq_n_f32(v104, v106, v107);
          v105 = vmlaq_n_f32(v105, v106, v108);
          v91 = j - 1;
        }
        if (v91)
        {
          v109 = 0uLL;
          v110 = 0uLL;
          do
          {
            v112 = *v89;
            v111 = (float32x4_t *)((char *)v89 + v8);
            v113 = *v111;
            v89 = (float32x4_t *)((char *)v111 + v8);
            v114 = *v97++;
            v115 = *(float32x2_t *)v99->f32;
            v99 = (float32x4_t *)((char *)v99 + 8);
            v104 = vmlaq_n_f32(v104, v112, v114.f32[0]);
            v105 = vmlaq_n_f32(v105, v112, v115.f32[0]);
            v109 = vmlaq_lane_f32(v109, v113, v114, 1);
            v110 = vmlaq_lane_f32(v110, v113, v115, 1);
            v66 = v91 <= 2;
            v91 -= 2;
          }
          while (!v66);
          v104 = vaddq_f32(v104, v109);
          v105 = vaddq_f32(v105, v110);
        }
        *(float32x4_t *)v97->f32 = vmulq_n_f32(v104, a7);
      }
      if (j)
      {
        v116 = (float32x2_t *)(a5 + v9 * v7);
        v117 = (float32x2_t *)((char *)v116 + v7);
        v118 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v120.i32[0] = *v118;
            v119 = &v118[(unint64_t)v8 / 4];
            v120.i32[1] = *v119;
            v121 = *(float *)&v119[(unint64_t)v8 / 4];
            v118 = &v119[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v122 = (float)(vaddv_f32(vmul_f32(v120, *v117)) + (float)(v117[1].f32[0] * v121)) * a7;
            v116[1].f32[0] = (float)(vaddv_f32(vmul_f32(v120, *v116)) + (float)(v116[1].f32[0] * v121)) * a7;
            v117[1].f32[0] = v122;
          }
          v124.i32[0] = *v118;
          v123 = &v118[(unint64_t)v8 / 4];
          v124.i32[1] = *v123;
          v118 = &v123[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v125 = vaddv_f32(vmul_f32(v124, *v117)) * a7;
          v116->f32[1] = vaddv_f32(vmul_f32(v124, *v116)) * a7;
          v117->f32[1] = v125;
        }
        v126 = (float)(*(float *)v118 * v117->f32[0]) * a7;
        v116->f32[0] = (float)(*(float *)v118 * v116->f32[0]) * a7;
        v117->f32[0] = v126;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v137 = vmulq_n_f32(v139, a7))
      {
        k -= 4;
        v128 = (float32x4_t *)(a3 + 4 * k);
        v129 = (float32x4_t *)((char *)v128 + k * v8);
        v130 = k;
        v132 = *v129;
        v131 = (float32x4_t *)((char *)v129 + v8);
        v133 = *v131;
        v134 = (float32x2_t *)&v131->u32[(unint64_t)v8 / 4 + 2];
        v135 = *(float32x2_t *)((char *)v134 + v8);
        v136 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v137 = (float32x4_t *)(a5 + v9 * v7);
        v133.i32[0] = 0;
        v135.i32[0] = 0;
        v138.i64[0] = 0;
        *(float32x2_t *)&v138.u32[2] = vmla_laneq_f32(vmul_laneq_f32(*v134, v136, 2), v135, v136, 3);
        v139 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v136.f32[0]), v133, *(float32x2_t *)v136.f32, 1), v138);
        if ((k & 1) != 0)
        {
          v140 = *v128;
          v128 = (float32x4_t *)((char *)v128 + v8);
          v141 = v137->f32[0];
          v137 = (float32x4_t *)((char *)v137 + 4);
          v139 = vmlaq_n_f32(v139, v140, v141);
          v130 = k - 1;
        }
        if (v130)
        {
          v142 = 0uLL;
          do
          {
            v144 = *v128;
            v143 = (float32x4_t *)((char *)v128 + v8);
            v145 = *v143;
            v128 = (float32x4_t *)((char *)v143 + v8);
            v146 = *(float32x2_t *)v137->f32;
            v137 = (float32x4_t *)((char *)v137 + 8);
            v139 = vmlaq_n_f32(v139, v144, v146.f32[0]);
            v142 = vmlaq_lane_f32(v142, v145, v146, 1);
            v66 = v130 <= 2;
            v130 -= 2;
          }
          while (!v66);
          v139 = vaddq_f32(v139, v142);
        }
      }
      if (k)
      {
        v147 = (float32x2_t *)(a5 + v9 * v7);
        v148 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v150.i32[0] = *v148;
            v149 = &v148[(unint64_t)v8 / 4];
            v150.i32[1] = *v149;
            v151 = *(float *)&v149[(unint64_t)v8 / 4];
            v148 = &v149[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v147[1].f32[0] = (float)(vaddv_f32(vmul_f32(v150, *v147)) + (float)(v147[1].f32[0] * v151)) * a7;
          }
          v153.i32[0] = *v148;
          v152 = &v148[(unint64_t)v8 / 4];
          v153.i32[1] = *v152;
          v148 = &v152[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v147->f32[1] = vaddv_f32(vmul_f32(v153, *v147)) * a7;
        }
        v147->f32[0] = (float)(*(float *)v148 * v147->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85B060(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t *v20;
  int64x2_t v21;
  float32x2_t *v22;
  int64x2_t v23;
  float32x2_t *v24;
  int64x2_t v25;
  float32x2_t *v26;
  int64x2_t v27;
  float32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  BOOL v63;
  float32x2_t *v64;
  float32x2_t *v65;
  float32x2_t *v66;
  float32x2_t *v67;
  __int32 *v68;
  __int32 *v69;
  float32x2_t v70;
  float32_t v71;
  float32_t v72;
  float32_t v73;
  float32_t v74;
  float32_t v75;
  float32_t v76;
  float32_t v77;
  float32_t v78;
  float32_t v79;
  uint64_t j;
  int32x4_t *v81;
  int32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  uint64_t v85;
  float32x4_t v86;
  float32x2_t *v87;
  int32x4_t v88;
  float32x2_t *v89;
  int32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t *v108;
  float32x2_t *v109;
  __int32 *v110;
  __int32 *v111;
  float32x2_t v112;
  float32_t v113;
  float32_t v114;
  float32_t v115;
  uint64_t k;
  float32x4_t *v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t v120;
  float32x2_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x2_t v133;
  float32x2_t *v134;
  __int32 *v135;
  __int32 *v136;
  float32x2_t v137;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_21;
  v10 = a2 - 3;
  do
  {
    for (i = result; i > 3; *v28 = vmulq_n_f32(v46, a7))
    {
      i -= 4;
      v12 = (int64x2_t *)(a5 + v9 * v7 + 4 * i);
      v13 = (int64x2_t *)((char *)v12 + v7);
      v14 = (int64x2_t *)((char *)v12 + 2 * v7);
      v15 = (int64x2_t *)((char *)v12 + 2 * v7 + v7);
      v16 = (float32x4_t *)(a3 + 4 * i);
      v17 = (float32x4_t *)((char *)v16 + i * v8);
      v18 = i;
      v19 = *v17;
      v20 = (float32x2_t *)&v17->u32[(unint64_t)v8 / 4 + 2];
      v21 = *v12;
      v22 = (float32x2_t *)(a5 + v9 * v7);
      v23 = *v13;
      v24 = (float32x2_t *)((char *)v13 - 4 * i);
      v25 = *v14;
      v26 = (float32x2_t *)((char *)v14 - 4 * i);
      v27 = *v15;
      v28 = (float32x4_t *)((char *)v15 - 4 * i);
      v29 = (int32x4_t)vtrn1q_s64(v21, v25);
      v30 = (int32x4_t)vtrn1q_s64(v23, v27);
      v31 = (int32x4_t)vtrn2q_s64(v21, v25);
      v32 = (int32x4_t)vtrn2q_s64(v23, v27);
      v33 = (float32x4_t)vtrn1q_s32(v29, v30);
      v34 = (float32x4_t)vtrn2q_s32(v29, v30);
      v35 = (float32x4_t)vtrn1q_s32(v31, v32);
      v36 = (int64x2_t)vmlaq_lane_f32(v34, v33, *(float32x2_t *)v19.f32, 1);
      v37 = (int64x2_t)vaddq_f32(vmlaq_laneq_f32(v35, v33, v19, 2), vmulq_n_f32(v34, COERCE_FLOAT(*v20)));
      v38 = (int64x2_t)vaddq_f32(vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vtrn2q_s32(v31, v32), v33, v19, 3), v35, v20->f32[(unint64_t)v8 / 4 + 1]), vmulq_lane_f32(v34, *v20, 1));
      v39 = (int32x4_t)vtrn1q_s64((int64x2_t)v33, v37);
      v40 = (int32x4_t)vtrn1q_s64(v36, v38);
      v41 = (int32x4_t)vtrn2q_s64((int64x2_t)v33, v37);
      v42 = (int32x4_t)vtrn2q_s64(v36, v38);
      v43 = (float32x4_t)vtrn1q_s32(v39, v40);
      v44 = (float32x4_t)vtrn2q_s32(v39, v40);
      v45 = (float32x4_t)vtrn1q_s32(v41, v42);
      v46 = (float32x4_t)vtrn2q_s32(v41, v42);
      if ((i & 1) != 0)
      {
        v47 = *v16;
        v16 = (float32x4_t *)((char *)v16 + v8);
        v48 = v22->f32[0];
        v22 = (float32x2_t *)((char *)v22 + 4);
        v49 = v24->f32[0];
        v24 = (float32x2_t *)((char *)v24 + 4);
        v50 = v26->f32[0];
        v26 = (float32x2_t *)((char *)v26 + 4);
        v51 = v28->f32[0];
        v28 = (float32x4_t *)((char *)v28 + 4);
        v43 = vmlaq_n_f32(v43, v47, v48);
        v44 = vmlaq_n_f32(v44, v47, v49);
        v45 = vmlaq_n_f32(v45, v47, v50);
        v46 = vmlaq_n_f32(v46, v47, v51);
        v18 = i - 1;
      }
      if (v18)
      {
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v57 = *v16;
          v56 = (float32x4_t *)((char *)v16 + v8);
          v58 = *v56;
          v16 = (float32x4_t *)((char *)v56 + v8);
          v59 = *v22++;
          v60 = *v24++;
          v61 = *v26++;
          v62 = *(float32x2_t *)v28->f32;
          v28 = (float32x4_t *)((char *)v28 + 8);
          v43 = vmlaq_n_f32(v43, v57, v59.f32[0]);
          v44 = vmlaq_n_f32(v44, v57, v60.f32[0]);
          v45 = vmlaq_n_f32(v45, v57, v61.f32[0]);
          v46 = vmlaq_n_f32(v46, v57, v62.f32[0]);
          v52 = vmlaq_lane_f32(v52, v58, v59, 1);
          v53 = vmlaq_lane_f32(v53, v58, v60, 1);
          v54 = vmlaq_lane_f32(v54, v58, v61, 1);
          v55 = vmlaq_lane_f32(v55, v58, v62, 1);
          v63 = v18 <= 2;
          v18 -= 2;
        }
        while (!v63);
        v43 = vaddq_f32(v43, v52);
        v44 = vaddq_f32(v44, v53);
        v45 = vaddq_f32(v45, v54);
        v46 = vaddq_f32(v46, v55);
      }
      *(float32x4_t *)v22->f32 = vmulq_n_f32(v43, a7);
      *(float32x4_t *)v24->f32 = vmulq_n_f32(v44, a7);
      *(float32x4_t *)v26->f32 = vmulq_n_f32(v45, a7);
    }
    if (i)
    {
      v64 = (float32x2_t *)(a5 + v9 * v7);
      v65 = (float32x2_t *)((char *)v64 + v7);
      v66 = &v64[(unint64_t)v7 / 4];
      v67 = (float32x2_t *)((char *)&v64[(unint64_t)v7 / 4] + v7);
      v68 = (__int32 *)(a3 + 4 * (i - 1));
      if ((result & 3) != 1)
      {
        if ((result & 3) != 2)
        {
          v70.i32[0] = *v68;
          v69 = &v68[(unint64_t)v8 / 4];
          v70.i32[1] = *v69;
          v68 = &v69[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
          v71 = (float)(vaddv_f32(vmul_f32(v70, *v65)) + v65[1].f32[0]) * a7;
          v72 = (float)(vaddv_f32(vmul_f32(v70, *v66)) + v66[1].f32[0]) * a7;
          v73 = (float)(vaddv_f32(vmul_f32(v70, *v67)) + v67[1].f32[0]) * a7;
          v64[1].f32[0] = (float)(vaddv_f32(vmul_f32(v70, *v64)) + v64[1].f32[0]) * a7;
          v65[1].f32[0] = v71;
          v66[1].f32[0] = v72;
          v67[1].f32[0] = v73;
        }
        v74 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v65)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v65)))
            * a7;
        v75 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v66)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v66)))
            * a7;
        v76 = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v67)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v67)))
            * a7;
        v64->f32[1] = (float)((float)(*(float *)v68 * COERCE_FLOAT(*v64))
                            + COERCE_FLOAT(HIDWORD(*(unint64_t *)v64)))
                    * a7;
        v65->f32[1] = v74;
        v66->f32[1] = v75;
        v67->f32[1] = v76;
      }
      v77 = v65->f32[0] * a7;
      v78 = v66->f32[0] * a7;
      v79 = v67->f32[0] * a7;
      v64->f32[0] = v64->f32[0] * a7;
      v65->f32[0] = v77;
      v66->f32[0] = v78;
      v67->f32[0] = v79;
    }
    v9 += 4;
    v63 = v10 <= 4;
    v10 -= 4;
  }
  while (!v63);
  v63 = v10 <= -3;
  a2 = v10 + 3;
  if (!v63)
  {
LABEL_21:
    if (a2 > 1)
    {
      for (j = result; j > 3; *v91 = vmulq_n_f32(v97, a7))
      {
        j -= 4;
        v81 = (int32x4_t *)(a5 + v9 * v7 + 4 * j);
        v82 = (int32x4_t *)((char *)v81 + v7);
        v83 = (float32x4_t *)(a3 + 4 * j);
        v84 = (float32x4_t *)((char *)v83 + j * v8);
        v85 = j;
        v86 = *v84;
        v87 = (float32x2_t *)&v84->u32[(unint64_t)v8 / 4 + 2];
        v88 = *v81;
        v89 = (float32x2_t *)(a5 + v9 * v7);
        v90 = *v82;
        v91 = (float32x4_t *)((char *)v82 - 4 * j);
        v92 = vtrn1q_s32(v88, v90);
        v93 = vtrn2q_s32(v88, v90);
        *(float32x2_t *)v94.i8 = vmla_lane_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32, 1);
        v95 = vadd_f32(vmla_n_f32(vmla_laneq_f32((float32x2_t)v93.u64[1], *(float32x2_t *)v92.i8, v86, 3), (float32x2_t)v92.u64[1], v87->f32[(unint64_t)v8 / 4 + 1]), vmul_lane_f32(*(float32x2_t *)v93.i8, *v87, 1));
        v92.u64[1] = (unint64_t)vadd_f32(vmla_laneq_f32((float32x2_t)v92.u64[1], *(float32x2_t *)v92.i8, v86, 2), vmul_n_f32(*(float32x2_t *)v93.i8, COERCE_FLOAT(*v87)));
        v94.u64[1] = (unint64_t)v95;
        v96 = (float32x4_t)vtrn1q_s32(v92, v94);
        v97 = (float32x4_t)vtrn2q_s32(v92, v94);
        if ((j & 1) != 0)
        {
          v98 = *v83;
          v83 = (float32x4_t *)((char *)v83 + v8);
          v99 = v89->f32[0];
          v89 = (float32x2_t *)((char *)v89 + 4);
          v100 = v91->f32[0];
          v91 = (float32x4_t *)((char *)v91 + 4);
          v96 = vmlaq_n_f32(v96, v98, v99);
          v97 = vmlaq_n_f32(v97, v98, v100);
          v85 = j - 1;
        }
        if (v85)
        {
          v101 = 0uLL;
          v102 = 0uLL;
          do
          {
            v104 = *v83;
            v103 = (float32x4_t *)((char *)v83 + v8);
            v105 = *v103;
            v83 = (float32x4_t *)((char *)v103 + v8);
            v106 = *v89++;
            v107 = *(float32x2_t *)v91->f32;
            v91 = (float32x4_t *)((char *)v91 + 8);
            v96 = vmlaq_n_f32(v96, v104, v106.f32[0]);
            v97 = vmlaq_n_f32(v97, v104, v107.f32[0]);
            v101 = vmlaq_lane_f32(v101, v105, v106, 1);
            v102 = vmlaq_lane_f32(v102, v105, v107, 1);
            v63 = v85 <= 2;
            v85 -= 2;
          }
          while (!v63);
          v96 = vaddq_f32(v96, v101);
          v97 = vaddq_f32(v97, v102);
        }
        *(float32x4_t *)v89->f32 = vmulq_n_f32(v96, a7);
      }
      if (j)
      {
        v108 = (float32x2_t *)(a5 + v9 * v7);
        v109 = (float32x2_t *)((char *)v108 + v7);
        v110 = (__int32 *)(a3 + 4 * (j - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v112.i32[0] = *v110;
            v111 = &v110[(unint64_t)v8 / 4];
            v112.i32[1] = *v111;
            v110 = &v111[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v113 = (float)(vaddv_f32(vmul_f32(v112, *v109)) + v109[1].f32[0]) * a7;
            v108[1].f32[0] = (float)(vaddv_f32(vmul_f32(v112, *v108)) + v108[1].f32[0]) * a7;
            v109[1].f32[0] = v113;
          }
          v114 = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v109)) + COERCE_FLOAT(HIDWORD(*(unint64_t *)v109)))
               * a7;
          v108->f32[1] = (float)((float)(*(float *)v110 * COERCE_FLOAT(*v108))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v108)))
                       * a7;
          v109->f32[1] = v114;
        }
        v115 = v109->f32[0] * a7;
        v108->f32[0] = v108->f32[0] * a7;
        v109->f32[0] = v115;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      for (k = result; k > 3; *v124 = vmulq_n_f32(v126, a7))
      {
        k -= 4;
        v117 = (float32x4_t *)(a3 + 4 * k);
        v118 = (float32x4_t *)((char *)v117 + k * v8);
        v119 = k;
        v120 = *v118;
        v121 = (float32x2_t *)&v118->u32[(unint64_t)v8 / 4 + 2];
        v122 = *(float32x2_t *)((char *)v121 + v8);
        v123 = *(float32x4_t *)(a5 + v9 * v7 + 4 * k);
        v124 = (float32x4_t *)(a5 + v9 * v7);
        v120.i32[0] = 0;
        v122.i32[0] = 0;
        v125.i64[0] = 0;
        *(float32x2_t *)&v125.u32[2] = vmla_laneq_f32(vmul_lane_f32(*v121, *(float32x2_t *)v123.f32, 1), v122, v123, 2);
        v126 = vaddq_f32(vmlaq_n_f32(v123, v120, v123.f32[0]), v125);
        if ((k & 1) != 0)
        {
          v127 = *v117;
          v117 = (float32x4_t *)((char *)v117 + v8);
          v128 = v124->f32[0];
          v124 = (float32x4_t *)((char *)v124 + 4);
          v126 = vmlaq_n_f32(v126, v127, v128);
          v119 = k - 1;
        }
        if (v119)
        {
          v129 = 0uLL;
          do
          {
            v131 = *v117;
            v130 = (float32x4_t *)((char *)v117 + v8);
            v132 = *v130;
            v117 = (float32x4_t *)((char *)v130 + v8);
            v133 = *(float32x2_t *)v124->f32;
            v124 = (float32x4_t *)((char *)v124 + 8);
            v126 = vmlaq_n_f32(v126, v131, v133.f32[0]);
            v129 = vmlaq_lane_f32(v129, v132, v133, 1);
            v63 = v119 <= 2;
            v119 -= 2;
          }
          while (!v63);
          v126 = vaddq_f32(v126, v129);
        }
      }
      if (k)
      {
        v134 = (float32x2_t *)(a5 + v9 * v7);
        v135 = (__int32 *)(a3 + 4 * (k - 1));
        if ((result & 3) != 1)
        {
          if ((result & 3) != 2)
          {
            v137.i32[0] = *v135;
            v136 = &v135[(unint64_t)v8 / 4];
            v137.i32[1] = *v136;
            v135 = &v136[v8 / 0xFFFFFFFFFFFFFFFCLL - 1];
            v134[1].f32[0] = (float)(vaddv_f32(vmul_f32(v137, *v134)) + v134[1].f32[0]) * a7;
          }
          v134->f32[1] = (float)((float)(*(float *)v135 * COERCE_FLOAT(*v134))
                               + COERCE_FLOAT(HIDWORD(*(unint64_t *)v134)))
                       * a7;
        }
        v134->f32[0] = v134->f32[0] * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85B650(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x4_t v27;
  __int32 *v28;
  float32x2_t v29;
  __int32 *v30;
  float v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  float32x2_t *v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  BOOL v78;
  uint64_t v79;
  float32x2_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t *v83;
  float32x2_t *v84;
  __int32 *v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32_t v92;
  float32_t v93;
  float32_t v94;
  float32_t v95;
  float32_t v96;
  float32_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  float32x4_t *v103;
  float32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t *v107;
  __int32 *v108;
  __int32 *v109;
  float32x4_t v110;
  __int32 *v111;
  float32x4_t v112;
  __int32 *v113;
  float32x2_t v114;
  __int32 *v115;
  float v116;
  float32x2_t *v117;
  int32x4_t v118;
  float32x2_t *v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float v129;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x2_t *v141;
  float32x2_t *v142;
  float32x2_t *v143;
  __int32 *v144;
  float32x2_t v145;
  float32x2_t *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  float32_t v153;
  float32_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  float32x4_t *v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  float32x4_t v165;
  __int32 *v166;
  float32x4_t v167;
  __int32 *v168;
  float32x2_t v169;
  __int32 *v170;
  float v171;
  float32x2_t *v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  float32x2_t v184;
  uint64_t v185;
  float32x2_t *v186;
  float32x2_t *v187;
  float *v188;
  float32x2_t v189;
  float v190;
  float32x2_t v191;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = (float32x4_t *)((char *)v18 + v8);
        v20 = 4 * (result - v11);
        v21 = result - v11 - 4;
        v22 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 2 + 2];
        v23 = &v18->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v19;
        v26 = (__int32 *)&v19[1];
        v29 = *v22;
        v28 = (__int32 *)&v22[1];
        v31 = *(float *)v23;
        v30 = v23 + 1;
        v33 = *v14;
        v32 = (float32x2_t *)&v14[1];
        v35 = *v15;
        v34 = (float32x2_t *)&v15[1];
        v37 = *v16;
        v36 = (float32x2_t *)&v16[1];
        v39 = *v17;
        v38 = (float32x2_t *)&v17[1];
        v40 = (int32x4_t)vtrn1q_s64(v33, v37);
        v41 = (int32x4_t)vtrn1q_s64(v35, v39);
        v42 = (int32x4_t)vtrn2q_s64(v33, v37);
        v43 = (int32x4_t)vtrn2q_s64(v35, v39);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (float32x4_t)vtrn1q_s32(v42, v43);
        v46 = (float32x4_t)vtrn2q_s32(v42, v43);
        v47 = (int64x2_t)vmulq_n_f32(v46, v31);
        v48 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v27, 3), v44, *(float32x2_t *)v27.f32, 1), vmulq_laneq_f32(v45, v27, 2));
        v49 = (int64x2_t)vaddq_f32(vmulq_lane_f32(v46, v29, 1), vmulq_n_f32(v45, v29.f32[0]));
        v50 = (int64x2_t)vaddq_f32(vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32(v46, v25, 3), v44, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v45, v25, 2)), vmulq_n_f32((float32x4_t)vtrn1q_s32(v40, v41), v25.f32[0]));
        v51 = (int32x4_t)vtrn1q_s64(v50, v49);
        v52 = (int32x4_t)vtrn1q_s64(v48, v47);
        v53 = (int32x4_t)vtrn2q_s64(v50, v49);
        v54 = (int32x4_t)vtrn2q_s64(v48, v47);
        v55 = (float32x4_t)vtrn1q_s32(v51, v52);
        v56 = (float32x4_t)vtrn2q_s32(v51, v52);
        v57 = (float32x4_t)vtrn1q_s32(v53, v54);
        v58 = (float32x4_t)vtrn2q_s32(v53, v54);
        if ((v21 & 1) != 0)
        {
          v59.i32[0] = *v24++;
          v59.i32[1] = *v26++;
          v59.i32[2] = *v28++;
          v59.i32[3] = *v30++;
          v60 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v61 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v62 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v63 = v38->f32[0];
          v38 = (float32x2_t *)((char *)v38 + 4);
          v55 = vmlaq_n_f32(v55, v59, v60);
          v56 = vmlaq_n_f32(v56, v59, v61);
          v57 = vmlaq_n_f32(v57, v59, v62);
          v58 = vmlaq_n_f32(v58, v59, v63);
          v21 = result - v11 - 5;
        }
        if (v21)
        {
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v69.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v70 = *(_QWORD *)v28;
            v28 += 2;
            v71 = *(_QWORD *)v30;
            v30 += 2;
            v72 = *v32++;
            v73 = *v34++;
            v74 = *v36++;
            v75 = *v38++;
            v68.i64[1] = v70;
            v69.i64[1] = v71;
            v76 = (float32x4_t)vtrn1q_s32(v68, v69);
            v77 = (float32x4_t)vtrn2q_s32(v68, v69);
            v55 = vmlaq_n_f32(v55, v76, v72.f32[0]);
            v56 = vmlaq_n_f32(v56, v76, v73.f32[0]);
            v57 = vmlaq_n_f32(v57, v76, v74.f32[0]);
            v58 = vmlaq_n_f32(v58, v76, v75.f32[0]);
            v64 = vmlaq_lane_f32(v64, v77, v72, 1);
            v65 = vmlaq_lane_f32(v65, v77, v73, 1);
            v66 = vmlaq_lane_f32(v66, v77, v74, 1);
            v67 = vmlaq_lane_f32(v67, v77, v75, 1);
            v78 = v21 <= 2;
            v21 -= 2;
          }
          while (!v78);
          v55 = vaddq_f32(v55, v64);
          v56 = vaddq_f32(v56, v65);
          v57 = vaddq_f32(v57, v66);
          v58 = vaddq_f32(v58, v67);
        }
        *(float32x4_t *)&v32->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        *(float32x4_t *)&v34->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v56, a7);
        *(float32x4_t *)&v36->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v57, a7);
        *(float32x4_t *)&v38->f32[v20 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v58, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v78 = v13 <= 4;
        v13 -= 4;
      }
      while (!v78);
    }
    v79 = result & 3;
    if (!v12 && v79 != 0)
    {
      v80 = (float32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v81 = (float32x2_t *)((char *)v80 + v7);
      v82 = &v80[(unint64_t)v7 / 4];
      v83 = (float32x2_t *)((char *)&v80[(unint64_t)v7 / 4] + v7);
      v84 = (float32x2_t *)(a3 + v11 * v8 + 4 * v11);
      if (v79 != 1)
      {
        if (v79 != 2)
        {
          v86 = *v84;
          v85 = (__int32 *)&v84[1];
          v87 = vmul_f32(v86, *v80);
          v88 = vmul_f32(v86, *v81);
          v89 = vmul_f32(v86, *v82);
          v90 = vmul_f32(v86, *v83);
          v86.i32[0] = *v85;
          v84 = (float32x2_t *)&v85[(unint64_t)v8 / 4 - 1];
          v88.f32[0] = (float)(vaddv_f32(v88) + (float)(v86.f32[0] * v81[1].f32[0])) * a7;
          v89.f32[0] = (float)(vaddv_f32(v89) + (float)(v86.f32[0] * v82[1].f32[0])) * a7;
          v90.f32[0] = (float)(vaddv_f32(v90) + (float)(v86.f32[0] * v83[1].f32[0])) * a7;
          v80->f32[0] = (float)(vaddv_f32(v87) + (float)(v86.f32[0] * v80[1].f32[0])) * a7;
          v80 = (float32x2_t *)((char *)v80 + 4);
          v81->i32[0] = v88.i32[0];
          v81 = (float32x2_t *)((char *)v81 + 4);
          v82->i32[0] = v89.i32[0];
          v82 = (float32x2_t *)((char *)v82 + 4);
          v83->i32[0] = v90.i32[0];
          v83 = (float32x2_t *)((char *)v83 + 4);
        }
        v91 = *v84;
        v84 = (float32x2_t *)((char *)v84 + v8 + 4);
        v92 = vaddv_f32(vmul_f32(v91, *v81)) * a7;
        v93 = vaddv_f32(vmul_f32(v91, *v82)) * a7;
        v94 = vaddv_f32(vmul_f32(v91, *v83)) * a7;
        v80->f32[0] = vaddv_f32(vmul_f32(v91, *v80)) * a7;
        v80 = (float32x2_t *)((char *)v80 + 4);
        v81->f32[0] = v92;
        v81 = (float32x2_t *)((char *)v81 + 4);
        v82->f32[0] = v93;
        v82 = (float32x2_t *)((char *)v82 + 4);
        v83->f32[0] = v94;
        v83 = (float32x2_t *)((char *)v83 + 4);
      }
      v95 = (float)(v84->f32[0] * v81->f32[0]) * a7;
      v96 = (float)(v84->f32[0] * v82->f32[0]) * a7;
      v97 = (float)(v84->f32[0] * v83->f32[0]) * a7;
      v80->f32[0] = (float)(v84->f32[0] * v80->f32[0]) * a7;
      v81->f32[0] = v95;
      v82->f32[0] = v96;
      v83->f32[0] = v97;
    }
    v9 += 4;
    v78 = v10 <= 4;
    v10 -= 4;
  }
  while (!v78);
  v78 = v10 <= -3;
  a2 = v10 + 3;
  if (!v78)
  {
LABEL_22:
    if (a2 > 1)
    {
      v98 = 0;
      v99 = __OFSUB__(result, 3);
      v100 = result - 3;
      if (result > 3)
      {
        do
        {
          v101 = (int32x4_t *)(a5 + v9 * v7 + 4 * v98);
          v102 = (int32x4_t *)((char *)v101 + v7);
          v103 = (float32x4_t *)(a3 + v98 * v8 + 4 * v98);
          v104 = (float32x4_t *)((char *)v103 + v8);
          v105 = 4 * (result - v98);
          v106 = result - v98 - 4;
          v107 = (float32x2_t *)&v103->u32[(unint64_t)v8 / 2 + 2];
          v108 = &v103->i32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v110 = *v103;
          v109 = (__int32 *)&v103[1];
          v112 = *v104;
          v111 = (__int32 *)&v104[1];
          v114 = *v107;
          v113 = (__int32 *)&v107[1];
          v116 = *(float *)v108;
          v115 = v108 + 1;
          v118 = *v101;
          v117 = (float32x2_t *)&v101[1];
          v120 = *v102;
          v119 = (float32x2_t *)&v102[1];
          v121 = vtrn1q_s32(v118, v120);
          v122 = vtrn2q_s32(v118, v120);
          *(float32x2_t *)v123.i8 = vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v112, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v112.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v112, 2));
          *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32(vmla_lane_f32(vmul_laneq_f32((float32x2_t)v122.u64[1], v110, 3), *(float32x2_t *)v122.i8, *(float32x2_t *)v110.f32, 1), vmul_laneq_f32((float32x2_t)v121.u64[1], v110, 2)), vmul_n_f32(*(float32x2_t *)v121.i8, v110.f32[0]));
          v124.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32((float32x2_t)v122.u64[1], v114, 1), vmul_n_f32((float32x2_t)v121.u64[1], v114.f32[0]));
          v123.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)v122.u64[1], v116);
          v125 = (float32x4_t)vtrn1q_s32(v124, v123);
          v126 = (float32x4_t)vtrn2q_s32(v124, v123);
          if ((v106 & 1) != 0)
          {
            v127.i32[0] = *v109++;
            v127.i32[1] = *v111++;
            v127.i32[2] = *v113++;
            v127.i32[3] = *v115++;
            v128 = v117->f32[0];
            v117 = (float32x2_t *)((char *)v117 + 4);
            v129 = v119->f32[0];
            v119 = (float32x2_t *)((char *)v119 + 4);
            v125 = vmlaq_n_f32(v125, v127, v128);
            v126 = vmlaq_n_f32(v126, v127, v129);
            v106 = result - v98 - 5;
          }
          if (v106)
          {
            v130 = 0uLL;
            v131 = 0uLL;
            do
            {
              v132.i64[0] = *(_QWORD *)v109;
              v109 += 2;
              v133.i64[0] = *(_QWORD *)v111;
              v111 += 2;
              v134 = *(_QWORD *)v113;
              v113 += 2;
              v135 = *(_QWORD *)v115;
              v115 += 2;
              v136 = *v117++;
              v137 = *v119++;
              v132.i64[1] = v134;
              v133.i64[1] = v135;
              v138 = (float32x4_t)vtrn1q_s32(v132, v133);
              v139 = (float32x4_t)vtrn2q_s32(v132, v133);
              v125 = vmlaq_n_f32(v125, v138, v136.f32[0]);
              v126 = vmlaq_n_f32(v126, v138, v137.f32[0]);
              v130 = vmlaq_lane_f32(v130, v139, v136, 1);
              v131 = vmlaq_lane_f32(v131, v139, v137, 1);
              v78 = v106 <= 2;
              v106 -= 2;
            }
            while (!v78);
            v125 = vaddq_f32(v125, v130);
            v126 = vaddq_f32(v126, v131);
          }
          *(float32x4_t *)&v117->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v125, a7);
          *(float32x4_t *)&v119->f32[v105 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v126, a7);
          v98 += 4;
          v99 = __OFSUB__(v100, 4);
          v78 = v100 <= 4;
          v100 -= 4;
        }
        while (!v78);
      }
      v140 = result & 3;
      if (!v99 && v140 != 0)
      {
        v141 = (float32x2_t *)(a5 + v9 * v7 + 4 * v98);
        v142 = (float32x2_t *)((char *)v141 + v7);
        v143 = (float32x2_t *)(a3 + v98 * v8 + 4 * v98);
        if (v140 != 1)
        {
          if (v140 != 2)
          {
            v145 = *v143;
            v144 = (__int32 *)&v143[1];
            v147 = *v141;
            v146 = v141 + 1;
            v149 = *v142;
            v148 = v142 + 1;
            v150 = vmul_f32(v145, v147);
            v151 = vmul_f32(v145, v149);
            v145.i32[0] = *v144;
            v143 = (float32x2_t *)&v144[(unint64_t)v8 / 4 - 1];
            v147.i32[0] = v146->i32[0];
            --v146;
            v149.i32[0] = v148->i32[0];
            --v148;
            v146->f32[0] = (float)(vaddv_f32(v150) + (float)(v145.f32[0] * v147.f32[0])) * a7;
            v141 = (float32x2_t *)((char *)v146 + 4);
            v148->f32[0] = (float)(vaddv_f32(v151) + (float)(v145.f32[0] * v149.f32[0])) * a7;
            v142 = (float32x2_t *)((char *)v148 + 4);
          }
          v152 = *v143;
          v143 = (float32x2_t *)((char *)v143 + v8 + 4);
          v153 = vaddv_f32(vmul_f32(v152, *v142)) * a7;
          v141->f32[0] = vaddv_f32(vmul_f32(v152, *v141)) * a7;
          v141 = (float32x2_t *)((char *)v141 + 4);
          v142->f32[0] = v153;
          v142 = (float32x2_t *)((char *)v142 + 4);
        }
        v154 = (float)(v143->f32[0] * v142->f32[0]) * a7;
        v141->f32[0] = (float)(v143->f32[0] * v141->f32[0]) * a7;
        v142->f32[0] = v154;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v155 = 0;
      v156 = __OFSUB__(result, 3);
      v157 = result - 3;
      if (result > 3)
      {
        do
        {
          v158 = (float32x4_t *)(a5 + v9 * v7 + 4 * v155);
          v159 = (float32x4_t *)(a3 + v155 * v8 + 4 * v155);
          v160 = (float32x4_t *)((char *)v159 + v8);
          v161 = result - v155 - 4;
          v162 = (float32x2_t *)&v159->u32[(unint64_t)v8 / 2 + 2];
          v163 = &v159->f32[(unint64_t)v8 / 2 + 3 + (unint64_t)v8 / 4];
          v165 = *v159;
          v164 = (__int32 *)&v159[1];
          v167 = *v160;
          v166 = (__int32 *)&v160[1];
          v169 = *v162;
          v168 = (__int32 *)&v162[1];
          v171 = *v163;
          v170 = (__int32 *)(v163 + 1);
          v173 = *v158;
          v172 = (float32x2_t *)&v158[1];
          v167.i32[0] = 0;
          v174 = vmulq_f32(v165, v173);
          v175 = vmulq_f32(v167, v173);
          v176.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v174, v174));
          v176.f32[3] = v171 * v173.f32[3];
          v176.i32[2] = vaddv_f32(vmul_f32(v169, *(float32x2_t *)&v173.u32[2]));
          v176.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175));
          if ((v161 & 1) != 0)
          {
            v177.i32[0] = *v164++;
            v177.i32[1] = *v166++;
            v177.i32[2] = *v168++;
            v177.i32[3] = *v170++;
            v178 = v172->f32[0];
            v172 = (float32x2_t *)((char *)v172 + 4);
            v176 = vmlaq_n_f32(v176, v177, v178);
            v161 = result - v155 - 5;
          }
          if (v161)
          {
            v179 = 0uLL;
            do
            {
              v180.i64[0] = *(_QWORD *)v164;
              v164 += 2;
              v181.i64[0] = *(_QWORD *)v166;
              v166 += 2;
              v182 = *(_QWORD *)v168;
              v168 += 2;
              v183 = *(_QWORD *)v170;
              v170 += 2;
              v184 = *v172++;
              v180.i64[1] = v182;
              v181.i64[1] = v183;
              v176 = vmlaq_n_f32(v176, (float32x4_t)vtrn1q_s32(v180, v181), v184.f32[0]);
              v179 = vmlaq_lane_f32(v179, (float32x4_t)vtrn2q_s32(v180, v181), v184, 1);
              v78 = v161 <= 2;
              v161 -= 2;
            }
            while (!v78);
            v176 = vaddq_f32(v176, v179);
          }
          *(float32x4_t *)&v172->f32[-(result - v155)] = vmulq_n_f32(v176, a7);
          v155 += 4;
          v156 = __OFSUB__(v157, 4);
          v78 = v157 <= 4;
          v157 -= 4;
        }
        while (!v78);
      }
      v185 = result & 3;
      if (!v156 && v185 != 0)
      {
        v186 = (float32x2_t *)(a5 + v9 * v7 + 4 * v155);
        v187 = (float32x2_t *)(a3 + v155 * v8 + 4 * v155);
        if (v185 != 1)
        {
          if (v185 != 2)
          {
            v189 = *v187;
            v188 = (float *)&v187[1];
            v190 = *v188;
            v187 = (float32x2_t *)&v188[(unint64_t)v8 / 4 - 1];
            v186->f32[0] = (float)(vaddv_f32(vmul_f32(v189, *v186)) + (float)(v190 * v186[1].f32[0])) * a7;
            v186 = (float32x2_t *)((char *)v186 + 4);
          }
          v191 = *v187;
          v187 = (float32x2_t *)((char *)v187 + v8 + 4);
          v186->f32[0] = vaddv_f32(vmul_n_f32(vmul_f32(v191, *v186), a7));
          v186 = (float32x2_t *)((char *)v186 + 4);
        }
        v186->f32[0] = (float)(v187->f32[0] * v186->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85BD80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int64x2_t *v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  float32x4_t v25;
  __int32 *v26;
  float32x2_t v27;
  __int32 *v28;
  float v29;
  float32x2_t *v30;
  int64x2_t v31;
  float32x2_t *v32;
  int64x2_t v33;
  float32x2_t *v34;
  int64x2_t v35;
  float32x2_t *v36;
  int64x2_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  float *v81;
  float32x2_t v82;
  int32x2_t *v83;
  float v84;
  float v85;
  int32x2_t *v86;
  float v87;
  float v88;
  int32x2_t *v89;
  float v90;
  float v91;
  int32x2_t *v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int32x4_t *v106;
  int32x4_t *v107;
  float32x4_t *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t *v111;
  __int32 *v112;
  __int32 *v113;
  __int32 *v114;
  float32x4_t v115;
  __int32 *v116;
  float32x2_t v117;
  __int32 *v118;
  float v119;
  float32x2_t *v120;
  int32x4_t v121;
  float32x2_t *v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x2_t *v144;
  int32x2_t *v145;
  float *v146;
  float32x2_t v147;
  float32x2_t *v148;
  float v149;
  float32x2_t *v150;
  float v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  float32x4_t *v159;
  float32x4_t *v160;
  uint64_t v161;
  float32x2_t *v162;
  float *v163;
  __int32 *v164;
  __int32 *v165;
  float32x4_t v166;
  __int32 *v167;
  float32x2_t v168;
  __int32 *v169;
  float v170;
  float32x2_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  float32x2_t v183;
  uint64_t v184;
  _QWORD *v185;
  float32x2_t *v186;
  float32x2_t v187;
  _QWORD *v188;
  float v189;
  float32x2_t v190;

  v7 = 4 * a6;
  v8 = 4 * a4;
  v9 = 0;
  if (a2 <= 3)
    goto LABEL_22;
  v10 = a2 - 3;
  do
  {
    v11 = 0;
    v12 = __OFSUB__(result, 3);
    v13 = result - 3;
    if (result > 3)
    {
      do
      {
        v14 = (int64x2_t *)(a5 + v9 * v7 + 4 * v11);
        v15 = (int64x2_t *)((char *)v14 + v7);
        v16 = (int64x2_t *)((char *)v14 + 2 * v7);
        v17 = (int64x2_t *)((char *)v14 + 2 * v7 + v7);
        v18 = (float32x4_t *)(a3 + v11 * v8 + 4 * v11);
        v19 = 4 * (result - v11);
        v20 = result - v11 - 4;
        v21 = (float32x2_t *)&v18->u32[(unint64_t)v8 / 4 + 2];
        v22 = &v18->i32[(unint64_t)v8 / 2 + 3];
        v23 = (__int32 *)((char *)&v18[1] + 2 * v8 + v8);
        v25 = *v18;
        v24 = (__int32 *)&v18[1];
        v27 = *v21;
        v26 = (__int32 *)&v21[1];
        v29 = *(float *)v22;
        v28 = v22 + 1;
        v31 = *v14;
        v30 = (float32x2_t *)&v14[1];
        v33 = *v15;
        v32 = (float32x2_t *)&v15[1];
        v35 = *v16;
        v34 = (float32x2_t *)&v16[1];
        v37 = *v17;
        v36 = (float32x2_t *)&v17[1];
        v38 = (int32x4_t)vtrn1q_s64(v31, v35);
        v39 = (int32x4_t)vtrn1q_s64(v33, v37);
        v40 = (int32x4_t)vtrn2q_s64(v31, v35);
        v41 = (int32x4_t)vtrn2q_s64(v33, v37);
        v42 = (float32x4_t)vtrn2q_s32(v38, v39);
        v43 = (float32x4_t)vtrn1q_s32(v40, v41);
        v44 = (float32x4_t)vtrn2q_s32(v40, v41);
        v45 = (int64x2_t)vmlaq_n_f32(v43, v44, v29);
        v46 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)vtrn1q_s32(v38, v39), v44, v25, 3), v42, *(float32x2_t *)v25.f32, 1), vmulq_laneq_f32(v43, v25, 2));
        v47 = (int64x2_t)vaddq_f32(vmlaq_lane_f32(v42, v44, v27, 1), vmulq_n_f32(v43, v27.f32[0]));
        v48 = (int32x4_t)vtrn1q_s64(v46, v45);
        v49 = (int32x4_t)vtrn1q_s64(v47, (int64x2_t)v44);
        v50 = (int32x4_t)vtrn2q_s64(v46, v45);
        v51 = (int32x4_t)vtrn2q_s64(v47, (int64x2_t)v44);
        v52 = (float32x4_t)vtrn1q_s32(v48, v49);
        v53 = (float32x4_t)vtrn2q_s32(v48, v49);
        v54 = (float32x4_t)vtrn1q_s32(v50, v51);
        v55 = (float32x4_t)vtrn2q_s32(v50, v51);
        if ((v20 & 1) != 0)
        {
          v56.i32[0] = *v24++;
          v56.i32[1] = *v26++;
          v56.i32[2] = *v28++;
          v56.i32[3] = *v23++;
          v57 = v30->f32[0];
          v30 = (float32x2_t *)((char *)v30 + 4);
          v58 = v32->f32[0];
          v32 = (float32x2_t *)((char *)v32 + 4);
          v59 = v34->f32[0];
          v34 = (float32x2_t *)((char *)v34 + 4);
          v60 = v36->f32[0];
          v36 = (float32x2_t *)((char *)v36 + 4);
          v52 = vmlaq_n_f32(v52, v56, v57);
          v53 = vmlaq_n_f32(v53, v56, v58);
          v54 = vmlaq_n_f32(v54, v56, v59);
          v55 = vmlaq_n_f32(v55, v56, v60);
          v20 = result - v11 - 5;
        }
        if (v20)
        {
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          do
          {
            v65.i64[0] = *(_QWORD *)v24;
            v24 += 2;
            v66.i64[0] = *(_QWORD *)v26;
            v26 += 2;
            v67 = *(_QWORD *)v28;
            v28 += 2;
            v68 = *(_QWORD *)v23;
            v23 += 2;
            v69 = *v30++;
            v70 = *v32++;
            v71 = *v34++;
            v72 = *v36++;
            v65.i64[1] = v67;
            v66.i64[1] = v68;
            v73 = (float32x4_t)vtrn1q_s32(v65, v66);
            v74 = (float32x4_t)vtrn2q_s32(v65, v66);
            v52 = vmlaq_n_f32(v52, v73, v69.f32[0]);
            v53 = vmlaq_n_f32(v53, v73, v70.f32[0]);
            v54 = vmlaq_n_f32(v54, v73, v71.f32[0]);
            v55 = vmlaq_n_f32(v55, v73, v72.f32[0]);
            v61 = vmlaq_lane_f32(v61, v74, v69, 1);
            v62 = vmlaq_lane_f32(v62, v74, v70, 1);
            v63 = vmlaq_lane_f32(v63, v74, v71, 1);
            v64 = vmlaq_lane_f32(v64, v74, v72, 1);
            v75 = v20 <= 2;
            v20 -= 2;
          }
          while (!v75);
          v52 = vaddq_f32(v52, v61);
          v53 = vaddq_f32(v53, v62);
          v54 = vaddq_f32(v54, v63);
          v55 = vaddq_f32(v55, v64);
        }
        *(float32x4_t *)&v30->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v52, a7);
        *(float32x4_t *)&v32->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v53, a7);
        *(float32x4_t *)&v34->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v54, a7);
        *(float32x4_t *)&v36->f32[v19 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v55, a7);
        v11 += 4;
        v12 = __OFSUB__(v13, 4);
        v75 = v13 <= 4;
        v13 -= 4;
      }
      while (!v75);
    }
    v76 = result & 3;
    if (!v12 && v76 != 0)
    {
      v77 = (int32x2_t *)(a5 + v9 * v7 + 4 * v11);
      v78 = (int32x2_t *)((char *)v77 + v7);
      v79 = &v77[(unint64_t)v7 / 4];
      v80 = (int32x2_t *)((char *)&v77[(unint64_t)v7 / 4] + v7);
      v81 = (float *)(a3 + v11 * v8 + 4 * v11 + 4);
      if (v76 != 1)
      {
        if (v76 != 2)
        {
          v82 = *(float32x2_t *)v81;
          v81 = (float *)((char *)v81 + v8 + 4);
          v84 = *(float *)v77->i32;
          v83 = (int32x2_t *)((char *)v77 + 4);
          v85 = v84;
          v87 = *(float *)v78->i32;
          v86 = (int32x2_t *)((char *)v78 + 4);
          v88 = v87;
          v90 = *(float *)v79->i32;
          v89 = (int32x2_t *)((char *)v79 + 4);
          v91 = v90;
          v93 = *(float *)v80->i32;
          v92 = (int32x2_t *)((char *)v80 + 4);
          v94 = (float32x2_t)*v83;
          v83 = (int32x2_t *)((char *)v83 - 4);
          v95 = (float32x2_t)*v86;
          v86 = (int32x2_t *)((char *)v86 - 4);
          v96 = (float32x2_t)*v89;
          v89 = (int32x2_t *)((char *)v89 - 4);
          v97 = (float32x2_t)*v92;
          v92 = (int32x2_t *)((char *)v92 - 4);
          *(float *)v83->i32 = (float)(vaddv_f32(vmul_f32(v82, v94)) + v85) * a7;
          v77 = (int32x2_t *)((char *)v83 + 4);
          *(float *)v86->i32 = (float)(vaddv_f32(vmul_f32(v82, v95)) + v88) * a7;
          v78 = (int32x2_t *)((char *)v86 + 4);
          *(float *)v89->i32 = (float)(vaddv_f32(vmul_f32(v82, v96)) + v91) * a7;
          v79 = (int32x2_t *)((char *)v89 + 4);
          *(float *)v92->i32 = (float)(vaddv_f32(vmul_f32(v82, v97)) + v93) * a7;
          v80 = (int32x2_t *)((char *)v92 + 4);
        }
        v98 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v77, *v78), vmul_n_f32((float32x2_t)vtrn2_s32(*v77, *v78), *v81)), a7);
        v99 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v79, *v80), vmul_n_f32((float32x2_t)vtrn2_s32(*v79, *v80), *v81)), a7);
        v77->i32[0] = v98.i32[0];
        v77 = (int32x2_t *)((char *)v77 + 4);
        v78->i32[0] = v98.i32[1];
        v78 = (int32x2_t *)((char *)v78 + 4);
        v79->i32[0] = v99.i32[0];
        v79 = (int32x2_t *)((char *)v79 + 4);
        v80->i32[0] = v99.i32[1];
        v80 = (int32x2_t *)((char *)v80 + 4);
      }
      v100 = *(float *)v78->i32 * a7;
      v101 = *(float *)v79->i32 * a7;
      v102 = *(float *)v80->i32 * a7;
      *(float *)v77->i32 = *(float *)v77->i32 * a7;
      *(float *)v78->i32 = v100;
      *(float *)v79->i32 = v101;
      *(float *)v80->i32 = v102;
    }
    v9 += 4;
    v75 = v10 <= 4;
    v10 -= 4;
  }
  while (!v75);
  v75 = v10 <= -3;
  a2 = v10 + 3;
  if (!v75)
  {
LABEL_22:
    if (a2 > 1)
    {
      v103 = 0;
      v104 = __OFSUB__(result, 3);
      v105 = result - 3;
      if (result > 3)
      {
        do
        {
          v106 = (int32x4_t *)(a5 + v9 * v7 + 4 * v103);
          v107 = (int32x4_t *)((char *)v106 + v7);
          v108 = (float32x4_t *)(a3 + v103 * v8 + 4 * v103);
          v109 = 4 * (result - v103);
          v110 = result - v103 - 4;
          v111 = (float32x2_t *)&v108->u32[(unint64_t)v8 / 4 + 2];
          v112 = &v108->i32[(unint64_t)v8 / 2 + 3];
          v113 = (__int32 *)((char *)&v108[1] + 2 * v8 + v8);
          v115 = *v108;
          v114 = (__int32 *)&v108[1];
          v117 = *v111;
          v116 = (__int32 *)&v111[1];
          v119 = *(float *)v112;
          v118 = v112 + 1;
          v121 = *v106;
          v120 = (float32x2_t *)&v106[1];
          v123 = *v107;
          v122 = (float32x2_t *)&v107[1];
          v124 = vtrn1q_s32(v121, v123);
          v125 = vtrn2q_s32(v121, v123);
          *(float32x2_t *)v126.i8 = vadd_f32(vmla_lane_f32(vmla_laneq_f32(*(float32x2_t *)v124.i8, (float32x2_t)v125.u64[1], v115, 3), *(float32x2_t *)v125.i8, *(float32x2_t *)v115.f32, 1), vmul_laneq_f32((float32x2_t)v124.u64[1], v115, 2));
          *(float32x2_t *)v127.i8 = vadd_f32(vmla_lane_f32(*(float32x2_t *)v125.i8, (float32x2_t)v125.u64[1], v117, 1), vmul_n_f32((float32x2_t)v124.u64[1], v117.f32[0]));
          v126.u64[1] = (unint64_t)vmla_n_f32((float32x2_t)v124.u64[1], (float32x2_t)v125.u64[1], v119);
          v127.i64[1] = v125.i64[1];
          v128 = (float32x4_t)vtrn1q_s32(v126, v127);
          v129 = (float32x4_t)vtrn2q_s32(v126, v127);
          if ((v110 & 1) != 0)
          {
            v130.i32[0] = *v114++;
            v130.i32[1] = *v116++;
            v130.i32[2] = *v118++;
            v130.i32[3] = *v113++;
            v131 = v120->f32[0];
            v120 = (float32x2_t *)((char *)v120 + 4);
            v132 = v122->f32[0];
            v122 = (float32x2_t *)((char *)v122 + 4);
            v128 = vmlaq_n_f32(v128, v130, v131);
            v129 = vmlaq_n_f32(v129, v130, v132);
            v110 = result - v103 - 5;
          }
          if (v110)
          {
            v133 = 0uLL;
            v134 = 0uLL;
            do
            {
              v135.i64[0] = *(_QWORD *)v114;
              v114 += 2;
              v136.i64[0] = *(_QWORD *)v116;
              v116 += 2;
              v137 = *(_QWORD *)v118;
              v118 += 2;
              v138 = *(_QWORD *)v113;
              v113 += 2;
              v139 = *v120++;
              v140 = *v122++;
              v135.i64[1] = v137;
              v136.i64[1] = v138;
              v141 = (float32x4_t)vtrn1q_s32(v135, v136);
              v142 = (float32x4_t)vtrn2q_s32(v135, v136);
              v128 = vmlaq_n_f32(v128, v141, v139.f32[0]);
              v129 = vmlaq_n_f32(v129, v141, v140.f32[0]);
              v133 = vmlaq_lane_f32(v133, v142, v139, 1);
              v134 = vmlaq_lane_f32(v134, v142, v140, 1);
              v75 = v110 <= 2;
              v110 -= 2;
            }
            while (!v75);
            v128 = vaddq_f32(v128, v133);
            v129 = vaddq_f32(v129, v134);
          }
          *(float32x4_t *)&v120->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v128, a7);
          *(float32x4_t *)&v122->f32[v109 / 0xFFFFFFFFFFFFFFFCLL] = vmulq_n_f32(v129, a7);
          v103 += 4;
          v104 = __OFSUB__(v105, 4);
          v75 = v105 <= 4;
          v105 -= 4;
        }
        while (!v75);
      }
      v143 = result & 3;
      if (!v104 && v143 != 0)
      {
        v144 = (int32x2_t *)(a5 + v9 * v7 + 4 * v103);
        v145 = (int32x2_t *)((char *)v144 + v7);
        v146 = (float *)(a3 + v103 * v8 + 4 * v103 + 4);
        if (v143 != 1)
        {
          if (v143 != 2)
          {
            v147 = *(float32x2_t *)v146;
            v146 = (float *)((char *)v146 + v8 + 4);
            v149 = *(float *)v144->i32;
            v148 = (float32x2_t *)((char *)v144 + 4);
            v151 = *(float *)v145->i32;
            v150 = (float32x2_t *)((char *)v145 + 4);
            v152 = vmul_f32(v147, *v148);
            v153 = vmul_f32(v147, *v150);
            v148 = (float32x2_t *)((char *)v148 - 4);
            v150 = (float32x2_t *)((char *)v150 - 4);
            v148->f32[0] = (float)(vaddv_f32(v152) + v149) * a7;
            v144 = (int32x2_t *)((char *)v148 + 4);
            v150->f32[0] = (float)(vaddv_f32(v153) + v151) * a7;
            v145 = (int32x2_t *)((char *)v150 + 4);
          }
          v154 = vmul_n_f32(vadd_f32((float32x2_t)vtrn1_s32(*v144, *v145), vmul_n_f32((float32x2_t)vtrn2_s32(*v144, *v145), *v146)), a7);
          v144->i32[0] = v154.i32[0];
          v144 = (int32x2_t *)((char *)v144 + 4);
          v145->i32[0] = v154.i32[1];
          v145 = (int32x2_t *)((char *)v145 + 4);
        }
        v155 = *(float *)v145->i32 * a7;
        *(float *)v144->i32 = *(float *)v144->i32 * a7;
        *(float *)v145->i32 = v155;
      }
      a2 -= 2;
      v9 += 2;
    }
    if (a2)
    {
      v156 = 0;
      v157 = __OFSUB__(result, 3);
      v158 = result - 3;
      if (result > 3)
      {
        do
        {
          v159 = (float32x4_t *)(a5 + v9 * v7 + 4 * v156);
          v160 = (float32x4_t *)(a3 + v156 * v8 + 4 * v156);
          v161 = result - v156 - 4;
          v162 = (float32x2_t *)&v160->u32[(unint64_t)v8 / 4 + 2];
          v163 = &v160->f32[(unint64_t)v8 / 2 + 3];
          v164 = (__int32 *)((char *)&v160[1] + 2 * v8 + v8);
          v166 = *v160;
          v165 = (__int32 *)&v160[1];
          v168 = *v162;
          v167 = (__int32 *)&v162[1];
          v170 = *v163;
          v169 = (__int32 *)(v163 + 1);
          v172 = *v159;
          v171 = (float32x2_t *)&v159[1];
          v166.i32[0] = 0;
          v173 = vmulq_f32(v166, v172);
          v174.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173));
          v174.i64[1] = COERCE_UNSIGNED_INT(v170 * v172.f32[3]);
          v174.i32[1] = vaddv_f32(vmul_f32(v168, *(float32x2_t *)&v172.u32[2]));
          v175 = vaddq_f32(v174, v172);
          if ((v161 & 1) != 0)
          {
            v176.i32[0] = *v165++;
            v176.i32[1] = *v167++;
            v176.i32[2] = *v169++;
            v176.i32[3] = *v164++;
            v177 = v171->f32[0];
            v171 = (float32x2_t *)((char *)v171 + 4);
            v175 = vmlaq_n_f32(v175, v176, v177);
            v161 = result - v156 - 5;
          }
          if (v161)
          {
            v178 = 0uLL;
            do
            {
              v179.i64[0] = *(_QWORD *)v165;
              v165 += 2;
              v180.i64[0] = *(_QWORD *)v167;
              v167 += 2;
              v181 = *(_QWORD *)v169;
              v169 += 2;
              v182 = *(_QWORD *)v164;
              v164 += 2;
              v183 = *v171++;
              v179.i64[1] = v181;
              v180.i64[1] = v182;
              v175 = vmlaq_n_f32(v175, (float32x4_t)vtrn1q_s32(v179, v180), v183.f32[0]);
              v178 = vmlaq_lane_f32(v178, (float32x4_t)vtrn2q_s32(v179, v180), v183, 1);
              v75 = v161 <= 2;
              v161 -= 2;
            }
            while (!v75);
            v175 = vaddq_f32(v175, v178);
          }
          *(float32x4_t *)&v171->f32[-(result - v156)] = vmulq_n_f32(v175, a7);
          v156 += 4;
          v157 = __OFSUB__(v158, 4);
          v75 = v158 <= 4;
          v158 -= 4;
        }
        while (!v75);
      }
      v184 = result & 3;
      if (!v157 && v184 != 0)
      {
        v185 = (_QWORD *)(a5 + v9 * v7 + 4 * v156);
        v186 = (float32x2_t *)(a3 + v156 * v8 + 4 * v156 + 4);
        if (v184 != 1)
        {
          if (v184 != 2)
          {
            v187 = *v186;
            v186 = (float32x2_t *)((char *)v186 + v8 + 4);
            v189 = *(float *)v185;
            v188 = (_QWORD *)((char *)v185 + 4);
            v190 = *(float32x2_t *)v188;
            v188 = (_QWORD *)((char *)v188 - 4);
            *(float *)v188 = (float)(vaddv_f32(vmul_f32(v187, v190)) + v189) * a7;
            v185 = (_QWORD *)((char *)v188 + 4);
          }
          *(float *)v185 = (float)((float)(COERCE_FLOAT(HIDWORD(*v185)) * v186->f32[0]) + COERCE_FLOAT(*v185)) * a7;
          v185 = (_QWORD *)((char *)v185 + 4);
        }
        *(float *)v185 = *(float *)v185 * a7;
      }
    }
  }
  return result;
}

_OWORD *sub_20E85C440(_OWORD *a1, float64x2_t *a2, float64x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t *v7;
  uint64_t v8;
  _OWORD *v9;
  float64x2_t v10;
  float64x2_t v11;
  _OWORD *result;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  _OWORD *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;

  v7 = a3;
  v8 = 8 * a4;
  v10 = *(float64x2_t *)a1;
  v11 = *((float64x2_t *)a1 + 1);
  v9 = a1 + 2;
  v13 = *(float64x2_t *)v9;
  v14 = *((float64x2_t *)v9 + 1);
  result = v9 + 2;
  do
  {
    v15 = a6;
    v17 = *a3;
    v18 = a3[1];
    v19 = a3[2];
    v20 = a3[3];
    v16 = (float64x2_t *)((char *)a3 + v8);
    v22 = *v16;
    v23 = v16[1];
    v24 = v16[2];
    v25 = v16[3];
    v21 = (float64x2_t *)((char *)v16 + v8);
    v27 = *v21;
    v28 = v21[1];
    v29 = v21[2];
    v30 = v21[3];
    v26 = (float64x2_t *)((char *)v21 + v8);
    v31 = *v26;
    v32 = v26[1];
    v33 = v26[2];
    v34 = v26[3];
    v36 = *a2;
    v37 = a2[1];
    v35 = a2 + 2;
    do
    {
      v17 = vmlaq_n_f64(v17, v10, v36.f64[0]);
      v22 = vmlaq_laneq_f64(v22, v10, v36, 1);
      v27 = vmlaq_n_f64(v27, v10, v37.f64[0]);
      v31 = vmlaq_laneq_f64(v31, v10, v37, 1);
      v18 = vmlaq_n_f64(v18, v11, v36.f64[0]);
      v23 = vmlaq_laneq_f64(v23, v11, v36, 1);
      v28 = vmlaq_n_f64(v28, v11, v37.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v11, v37, 1);
      v10 = *(float64x2_t *)result;
      v11 = *((float64x2_t *)result + 1);
      v38 = result + 2;
      v19 = vmlaq_n_f64(v19, v13, v36.f64[0]);
      v24 = vmlaq_laneq_f64(v24, v13, v36, 1);
      v29 = vmlaq_n_f64(v29, v13, v37.f64[0]);
      v33 = vmlaq_laneq_f64(v33, v13, v37, 1);
      v20 = vmlaq_n_f64(v20, v14, v36.f64[0]);
      v25 = vmlaq_laneq_f64(v25, v14, v36, 1);
      v30 = vmlaq_n_f64(v30, v14, v37.f64[0]);
      v34 = vmlaq_laneq_f64(v34, v14, v37, 1);
      v13 = *(float64x2_t *)v38;
      v14 = *((float64x2_t *)v38 + 1);
      result = v38 + 2;
      v36 = *v35;
      v37 = v35[1];
      v35 += 2;
      --v15;
    }
    while (v15);
    v39 = (float64x2_t *)((char *)v7 + v8);
    *v7 = v17;
    v7[1] = v18;
    v7[2] = v19;
    v7[3] = v20;
    v7 += 4;
    *v39 = v22;
    v39[1] = v23;
    v39[2] = v24;
    v39[3] = v25;
    v40 = (float64x2_t *)((char *)v39 + v8);
    *v40 = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    v41 = (float64x2_t *)((char *)v40 + v8);
    *v41 = v31;
    v41[1] = v32;
    v41[2] = v33;
    v41[3] = v34;
    a3 = v7;
    a5 -= 8;
  }
  while (a5);
  return result;
}

uint64_t sub_20E85C510(int *a1, int *a2, unsigned int *a3, uint64_t a4, __CLPK_integer *a5, uint64_t a6, double *a7, int *a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  double *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  double *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double da;
  __CLPK_integer v48;
  int n;

  da = 0.0;
  v8 = *a5;
  *a8 = 0;
  v9 = *a1;
  if ((v9 & 0x80000000) != 0)
  {
    v11 = 1;
    v12 = -1;
    goto LABEL_12;
  }
  v10 = *a2;
  v11 = 2;
  v12 = -2;
  if (*a2 < 0)
    goto LABEL_12;
  if (v10 > (int)v9)
    goto LABEL_12;
  v13 = *a3;
  v11 = 3;
  v12 = -3;
  if ((v13 & 0x80000000) != 0 || v10 < (int)v13)
    goto LABEL_12;
  if (v9 <= 1)
    v14 = 1;
  else
    v14 = *a1;
  if (*a5 < v14)
  {
    v11 = 5;
    v12 = -5;
LABEL_12:
    *a8 = v12;
    n = v11;
    xerbla_();
    return 0;
  }
  v43 = v8;
  if (v10)
  {
    v16 = ~(_DWORD)v8;
    v17 = a4 + 8 * ~(_DWORD)v43;
    v42 = ~(_DWORD)v43;
    v46 = v17;
    if (v10 <= v13)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v39 = a6;
      v18 = v43 * (v13 + 1) + 1;
      v19 = v10 - v13;
      v20 = (v13 + 1) * (v43 + 1);
      v44 = a4;
      v21 = a4 + 8 * v16;
      do
      {
        bzero((void *)(v21 + 8 * v18), 8 * v9);
        v17 = v46;
        *(_QWORD *)(v46 + 8 * v20) = 0x3FF0000000000000;
        v20 += v43 + 1;
        v18 += v43;
        --v19;
      }
      while (v19);
      a4 = v44;
      a6 = v39;
    }
    v48 = v9;
    if ((int)v13 >= 1)
    {
      v22 = 0;
      v45 = a6 - 8;
      v36 = a4 + 8 * v42;
      v23 = -(int)v13;
      v24 = v13 + v43 * v13;
      v25 = v43 + v43 * v13;
      v26 = 8 * v13;
      v27 = (double *)(8 * (v13 + v13 * v43) + 8 * v42 + a4 + 8);
      v28 = 8 * (v13 - 1);
      v35 = v43 * v13;
      v29 = v43 * v13;
      do
      {
        v30 = v25;
        v31 = *a2;
        v32 = *a1;
        if (v13 < v31)
        {
          v33 = (double *)(v17 + 8 * v24);
          *v33 = 1.0;
          n = v23 + v32 + 1;
          v48 = v23 + v31;
          sub_20E8446B0((uint64_t)"Left", &n, &v48, v33, (int *)&unk_254A4A4F0, (double *)(v45 + v26), (__CLPK_doublereal *)(v17 + 8 * (v13 + v30)), a5, a7);
          v17 = v46;
          v32 = *a1;
        }
        if (v13 < v32)
        {
          n = v32 + v23;
          da = -*(double *)(v45 + 8 * v13);
          dscal_(&n, &da, v27, (int *)&unk_254A4A4F0);
          v17 = v46;
        }
        *(double *)(v17 + 8 * (v13 + v29)) = 1.0 - *(double *)(v45 + 8 * v13);
        v34 = v13 - 1;
        n = v13 - 1;
        if (v13 >= 2)
        {
          bzero((void *)(v36 + 8 * (v35 + v22 + 1)), v28);
          v17 = v46;
        }
        ++v23;
        v24 += v42;
        v22 -= v43;
        v29 -= v43;
        v26 -= 8;
        v25 = v30 - v43;
        v27 += ~v43;
        v28 -= 8;
        --v13;
      }
      while (v34);
    }
  }
  return 0;
}

#error "20E85C9F8: call analysis failed (funcsize=235)"

uint64_t sub_20E85CBC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, __n128 a11, __n128 a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL i;
  __n128 *v21;
  float *v22;
  float32x2_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  uint64_t v26;
  float v27;
  float *v28;
  float32x2_t v29;
  float *v30;
  float32x4_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  __n128 *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  BOOL v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t *v59;
  float32x2_t *v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  uint64_t v70;
  BOOL j;
  unint64_t *v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  float32x4_t v84;
  float *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t *v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t *v106;
  float32x2_t *v107;
  uint64_t v108;
  float32x2_t *v109;
  float32x2_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  float32x2_t v113;
  float32x2_t *v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t *v118;
  float32x2_t v119;
  uint64_t v120;
  BOOL k;
  unsigned __int32 *v122;
  float *v123;
  float32x2_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  uint64_t v127;
  float v128;
  float *v129;
  float32x2_t v130;
  float *v131;
  float32x4_t v132;
  float *v133;
  float32x4_t v134;
  float *v135;
  unsigned __int32 *v136;
  unsigned __int32 *v137;
  unsigned __int32 *v138;
  float *v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  __int32 *v150;
  float32x2_t v151;
  float *v152;
  float *v153;
  uint64_t v154;
  __int32 *v155;
  float32x2_t *v156;
  float32x2_t v157;
  __int32 *v158;
  float32x2_t v159;
  float *v160;
  float v161;
  float32x2_t v162;
  __int32 *v163;
  float32x2_t v164;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_21;
  v18 = result - 3;
  do
  {
    v19 = a2;
    for (i = __OFSUB__(a2, 3); v19 > 3; i = __OFSUB__(v19, 3))
    {
      v19 -= 4;
      v21 = (__n128 *)(a5 + v19 * v15 + 4 * v17);
      v22 = (float *)(a3 + v19 * v16 + 4 * v19);
      v23 = (float32x2_t *)&v22[(unint64_t)v16 / 4];
      v24 = (float32x4_t *)&v22[(unint64_t)v16 / 2];
      v25 = (float32x4_t *)&v22[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
      v26 = v19;
      v27 = *v22;
      v28 = (float *)(a3 + v19 * v16);
      v29 = *v23;
      v30 = (float *)v23 - v19;
      v31 = *v24;
      v32 = &v24->f32[-v19];
      v33 = *v25;
      v34 = &v25->f32[-v19];
      a11 = *v21;
      v35 = (__n128 *)((char *)v21 + v15);
      a12 = *v35;
      v36 = (float32x4_t *)((char *)v35 + v15);
      a13 = *v36;
      v37 = (float32x4_t *)((char *)v36 + v15);
      a14 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v15 - v19 * v15 + -4 * v15);
      v39 = vmulq_n_f32((float32x4_t)a11, v27);
      v40 = vaddq_f32(vmulq_n_f32((float32x4_t)a11, v29.f32[0]), vmulq_lane_f32((float32x4_t)a12, v29, 1));
      v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v31.f32[0]), a13, v31, 2), vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v31.f32, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)a11, v33.f32[0]), a13, v33, 2), vmlaq_laneq_f32(vmulq_lane_f32((float32x4_t)a12, *(float32x2_t *)v33.f32, 1), a14, v33, 3));
      if ((v19 & 1) != 0)
      {
        v43 = *v38;
        v38 = (float32x4_t *)((char *)v38 + v15);
        v44 = *v28++;
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v39 = vmlaq_n_f32(v39, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v26 = v19 - 1;
      }
      if (v26)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v38;
          v52 = (float32x4_t *)((char *)v38 + v15);
          v54 = *v52;
          v38 = (float32x4_t *)((char *)v52 + v15);
          a11.n128_u64[0] = *(_QWORD *)v28;
          v28 += 2;
          a12.n128_u64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v39 = vmlaq_n_f32(v39, v53, a11.n128_f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.n128_f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, (float32x2_t)a11.n128_u64[0], 1);
          v49 = vmlaq_lane_f32(v49, v54, (float32x2_t)a12.n128_u64[0], 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v55 = v26 <= 2;
          v26 -= 2;
        }
        while (!v55);
        v39 = vaddq_f32(v39, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v39, a7);
      *v38 = v14;
      v56 = (float32x4_t *)((char *)v38 + v15);
      *v56 = vmulq_n_f32(v40, a7);
      v57 = (float32x4_t *)((char *)v56 + v15);
      *v57 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v57 + v15) = vmulq_n_f32(v42, a7);
    }
    v58 = a2 & 3;
    if (!i && v58 != 0)
    {
      v59 = (float32x4_t *)(a5 + 4 * v17);
      v60 = (float32x2_t *)(a3 + (v19 - 1) * v16);
      if (v58 != 1)
      {
        if (v58 != 2)
        {
          v61 = *v60;
          v63 = *v59;
          v62 = (float32x4_t *)((char *)v59 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *(__n128 *)v64;
          v66 = v60[1].f32[0];
          v60 = (float32x2_t *)((char *)v60 - v16);
          *v64 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v61.f32[0]), vmulq_lane_f32(v65, v61, 1)), vmulq_n_f32(*v64, v66)), a7);
          v59 = (float32x4_t *)((char *)v64 - 2 * v15);
        }
        v67 = *v60;
        v69 = *v59;
        v68 = (float32x4_t *)((char *)v59 + v15);
        a11 = *(__n128 *)v68;
        v60 = (float32x2_t *)((char *)v60 - v16);
        *v68 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v69, v67.f32[0]), vmulq_lane_f32(*v68, v67, 1)), a7);
        v59 = (float32x4_t *)((char *)v68 - v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v59, v60->f32[0]), a7);
      *v59 = v14;
    }
    v17 += 4;
    v55 = v18 <= 4;
    v18 -= 4;
  }
  while (!v55);
  v55 = v18 <= -3;
  result = v18 + 3;
  if (!v55)
  {
LABEL_21:
    if (result > 1)
    {
      v70 = a2;
      for (j = __OFSUB__(a2, 3); v70 > 3; j = __OFSUB__(v70, 3))
      {
        v70 -= 4;
        v72 = (unint64_t *)(a5 + v70 * v15 + 4 * v17);
        v73 = (float *)(a3 + v70 * v16 + 4 * v70);
        v74 = (float32x2_t *)&v73[(unint64_t)v16 / 4];
        v75 = (float32x4_t *)&v73[(unint64_t)v16 / 2];
        v76 = (float32x4_t *)&v73[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v77 = v70;
        v78 = *v73;
        v79 = (float *)(a3 + v70 * v16);
        v80 = *v74;
        v81 = (float *)v74 - v70;
        v82 = *v75;
        v83 = &v75->f32[-v70];
        v84 = *v76;
        v85 = &v76->f32[-v70];
        a11.n128_u64[0] = *v72;
        v86 = (unint64_t *)((char *)v72 + v15);
        a12.n128_u64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v15);
        a13.i64[0] = *v87;
        v88 = (unint64_t *)((char *)v87 + v15);
        a14.i64[0] = *v88;
        v89 = (float32x2_t *)((char *)v88 + v15 - v70 * v15 + -4 * v15);
        v90 = vmul_n_f32((float32x2_t)a11.n128_u64[0], v78);
        v91 = vadd_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v80.f32[0]), vmul_lane_f32((float32x2_t)a12.n128_u64[0], v80, 1));
        v92 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v82.f32, 1));
        v93 = vadd_f32(vmla_laneq_f32(vmul_n_f32((float32x2_t)a11.n128_u64[0], v84.f32[0]), *(float32x2_t *)a13.f32, v84, 2), vmla_laneq_f32(vmul_lane_f32((float32x2_t)a12.n128_u64[0], *(float32x2_t *)v84.f32, 1), *(float32x2_t *)a14.f32, v84, 3));
        if ((v70 & 1) != 0)
        {
          v94 = *v89;
          v89 = (float32x2_t *)((char *)v89 + v15);
          v95 = *v79++;
          v96 = *v81++;
          v97 = *v83++;
          v98 = *v85++;
          v90 = vmla_n_f32(v90, v94, v95);
          v91 = vmla_n_f32(v91, v94, v96);
          v92 = vmla_n_f32(v92, v94, v97);
          v93 = vmla_n_f32(v93, v94, v98);
          v77 = v70 - 1;
        }
        if (v77)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          do
          {
            v104 = *v89;
            v103 = (float32x2_t *)((char *)v89 + v15);
            v105 = *v103;
            v89 = (float32x2_t *)((char *)v103 + v15);
            a11.n128_u64[0] = *(_QWORD *)v79;
            v79 += 2;
            a12.n128_u64[0] = *(_QWORD *)v81;
            v81 += 2;
            a13.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            a14.i64[0] = *(_QWORD *)v85;
            v85 += 2;
            v90 = vmla_n_f32(v90, v104, a11.n128_f32[0]);
            v91 = vmla_n_f32(v91, v104, a12.n128_f32[0]);
            v92 = vmla_n_f32(v92, v104, a13.f32[0]);
            v93 = vmla_n_f32(v93, v104, a14.f32[0]);
            v99 = vmla_lane_f32(v99, v105, (float32x2_t)a11.n128_u64[0], 1);
            v100 = vmla_lane_f32(v100, v105, (float32x2_t)a12.n128_u64[0], 1);
            v101 = vmla_lane_f32(v101, v105, *(float32x2_t *)a13.f32, 1);
            v102 = vmla_lane_f32(v102, v105, *(float32x2_t *)a14.f32, 1);
            v55 = v77 <= 2;
            v77 -= 2;
          }
          while (!v55);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
          v92 = vadd_f32(v92, v101);
          v93 = vadd_f32(v93, v102);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v90, a7);
        *v89 = *(float32x2_t *)v14.f32;
        v106 = (float32x2_t *)((char *)v89 + v15);
        *v106 = vmul_n_f32(v91, a7);
        v107 = (float32x2_t *)((char *)v106 + v15);
        *v107 = vmul_n_f32(v92, a7);
        *(float32x2_t *)((char *)v107 + v15) = vmul_n_f32(v93, a7);
      }
      v108 = a2 & 3;
      if (!j && v108 != 0)
      {
        v109 = (float32x2_t *)(a5 + 4 * v17);
        v110 = (float32x2_t *)(a3 + (v70 - 1) * v16);
        if (v108 != 1)
        {
          if (v108 != 2)
          {
            v111 = *v110;
            v113 = *v109;
            v112 = (float32x2_t *)((char *)v109 + v15);
            v115 = *v112;
            v114 = (float32x2_t *)((char *)v112 + v15);
            a12.n128_u64[0] = (unint64_t)*v114;
            v116 = v110[1].f32[0];
            v110 = (float32x2_t *)((char *)v110 - v16);
            *v114 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v113, v111.f32[0]), vmul_lane_f32(v115, v111, 1)), vmul_n_f32(*v114, v116)), a7);
            v109 = &v114[v15 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v117 = *v110;
          v119 = *v109;
          v118 = (float32x2_t *)((char *)v109 + v15);
          a11.n128_u64[0] = (unint64_t)*v118;
          v110 = (float32x2_t *)((char *)v110 - v16);
          *v118 = vmul_n_f32(vadd_f32(vmul_n_f32(v119, v117.f32[0]), vmul_lane_f32(*v118, v117, 1)), a7);
          v109 = (float32x2_t *)((char *)v118 - v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v109, v110->f32[0]), a7);
        *v109 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v120 = a2;
      for (k = __OFSUB__(a2, 3); v120 > 3; k = __OFSUB__(v120, 3))
      {
        v120 -= 4;
        v122 = (unsigned __int32 *)(a5 + v120 * v15 + 4 * v17);
        v123 = (float *)(a3 + v120 * v16 + 4 * v120);
        v124 = (float32x2_t *)&v123[(unint64_t)v16 / 4];
        v125 = (float32x4_t *)&v123[(unint64_t)v16 / 2];
        v126 = (float32x4_t *)&v123[(unint64_t)v16 / 4 + (unint64_t)v16 / 2];
        v127 = v120;
        v128 = *v123;
        v129 = (float *)(a3 + v120 * v16);
        v130 = *v124;
        v131 = (float *)v124 - v120;
        v132 = *v125;
        v133 = &v125->f32[-v120];
        v134 = *v126;
        v135 = &v126->f32[-v120];
        a11.n128_u32[0] = *v122;
        v136 = &v122[(unint64_t)v15 / 4];
        a12.n128_u32[0] = *v136;
        v137 = &v136[(unint64_t)v15 / 4];
        a13.i32[0] = *v137;
        v138 = &v137[(unint64_t)v15 / 4];
        a14.i32[0] = *v138;
        v139 = (float *)((char *)&v138[(unint64_t)v15 / 4] - v120 * v15 + -4 * v15);
        a11.n128_u64[0] = (unint64_t)vtrn1_s32((int32x2_t)a11.n128_u64[0], (int32x2_t)a12.n128_u64[0]);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        a11.n128_u64[1] = a13.i64[0];
        v132.i32[3] = 0;
        v14.f32[0] = v128 * a11.n128_f32[0];
        v140 = vmul_f32(v130, (float32x2_t)a11.n128_u64[0]);
        v141 = vmulq_f32(v132, (float32x4_t)a11);
        v142 = vmulq_f32(v134, (float32x4_t)a11);
        v143 = (float32x2_t)vpaddq_f32(v141, v141).u64[0];
        v144 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
        if ((v120 & 1) != 0)
        {
          v145 = *v139;
          v139 = (float *)((char *)v139 + v15);
          v146 = *v129++;
          v147 = *v131++;
          v148 = *v133++;
          v149 = *v135++;
          v14.f32[0] = vaddv_f32(*(float32x2_t *)v14.f32) + (float)(v145 * v146);
          v140.f32[0] = vaddv_f32(v140) + (float)(v145 * v147);
          v143.f32[0] = vaddv_f32(v143) + (float)(v145 * v148);
          v144.f32[0] = vaddv_f32(v144) + (float)(v145 * v149);
          v127 = v120 - 1;
        }
        if (v127)
        {
          do
          {
            v151.f32[0] = *v139;
            v150 = (__int32 *)&v139[(unint64_t)v15 / 4];
            v151.i32[1] = *v150;
            v139 = (float *)&v150[(unint64_t)v15 / 4];
            a11.n128_u64[0] = *(_QWORD *)v129;
            v129 += 2;
            a12.n128_u64[0] = *(_QWORD *)v131;
            v131 += 2;
            a13.i64[0] = *(_QWORD *)v133;
            v133 += 2;
            a14.i64[0] = *(_QWORD *)v135;
            v135 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v151, (float32x2_t)a11.n128_u64[0]);
            v140 = vmla_f32(v140, v151, (float32x2_t)a12.n128_u64[0]);
            v143 = vmla_f32(v143, v151, *(float32x2_t *)a13.f32);
            v144 = vmla_f32(v144, v151, *(float32x2_t *)a14.f32);
            v55 = v127 <= 2;
            v127 -= 2;
          }
          while (!v55);
        }
        *v139 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v152 = &v139[(unint64_t)v15 / 4];
        *v152 = vaddv_f32(v140) * a7;
        v153 = &v152[(unint64_t)v15 / 4];
        *v153 = vaddv_f32(v143) * a7;
        v153[(unint64_t)v15 / 4] = vaddv_f32(v144) * a7;
      }
      v154 = a2 & 3;
      if (!k && v154 != 0)
      {
        v155 = (__int32 *)(a5 + 4 * v17);
        v156 = (float32x2_t *)(a3 + (v120 - 1) * v16);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v157 = *v156;
            v159.i32[0] = *v155;
            v158 = &v155[(unint64_t)v15 / 4];
            v159.i32[1] = *v158;
            v160 = (float *)&v158[(unint64_t)v15 / 4];
            v161 = v156[1].f32[0];
            v156 = (float32x2_t *)((char *)v156 - v16);
            *v160 = (float)(vaddv_f32(vmul_f32(v159, v157)) + (float)(v161 * *v160)) * a7;
            v155 = (__int32 *)&v160[v15 / 0xFFFFFFFFFFFFFFFELL];
          }
          v162 = *v156;
          v164.i32[0] = *v155;
          v163 = &v155[(unint64_t)v15 / 4];
          v164.i32[1] = *v163;
          v156 = (float32x2_t *)((char *)v156 - v16);
          *(float *)v163 = vaddv_f32(vmul_f32(v164, v162)) * a7;
          v155 = &v163[v15 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v155 = (float)(*(float *)v155 * v156->f32[0]) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85D1C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL i;
  float32x4_t *v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float *v30;
  float32x2_t v31;
  float *v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x2_t v55;
  BOOL v56;
  float32x4_t *v57;
  float32x4_t *v58;
  uint64_t v59;
  float32x4_t *v60;
  float *v61;
  float32x2_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  uint64_t v69;
  BOOL j;
  float32x2_t *v71;
  uint64_t v72;
  float *v73;
  float32x2_t *v74;
  float32x4_t *v75;
  uint64_t v76;
  float32x2_t *v77;
  float v78;
  float *v79;
  float32x2_t v80;
  float *v81;
  float32x4_t v82;
  float *v83;
  unint64_t *v84;
  float32x2_t v85;
  unint64_t *v86;
  unint64_t *v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t *v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float32x2_t v110;
  float32x2_t *v111;
  float32x2_t v112;
  float32x2_t *v113;
  float32x2_t v114;
  float32x2_t *v115;
  float32x2_t v116;
  uint64_t v117;
  BOOL k;
  __int32 *v119;
  uint64_t v120;
  float *v121;
  float32x2_t *v122;
  float32x4_t *v123;
  uint64_t v124;
  float *v125;
  float v126;
  float *v127;
  float32x2_t v128;
  float *v129;
  float32x4_t v130;
  float *v131;
  unsigned __int32 *v132;
  unsigned __int32 *v133;
  unsigned __int32 *v134;
  float *v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  __int32 *v145;
  float32x2_t v146;
  float32x2_t v147;
  float *v148;
  float *v149;
  uint64_t v150;
  __int32 *v151;
  float32x2_t *v152;
  float32x2_t v153;
  __int32 *v154;
  float32x2_t v155;
  float *v156;
  float *v157;
  float v158;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_21;
  v19 = result - 3;
  do
  {
    v20 = a2;
    for (i = __OFSUB__(a2, 3); v20 > 3; i = __OFSUB__(v20, 3))
    {
      v20 -= 4;
      v22 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v23 = a3 + v20 * v17 + 4 * v20;
      v24 = (float *)(v23 + v17);
      v25 = (float32x2_t *)(v23 + 2 * v17);
      v26 = (float32x4_t *)(v23 + v17 + 2 * v17);
      v27 = v20;
      v28 = (float32x2_t *)(a3 + v20 * v17);
      v29 = *v24;
      v30 = &v24[-v20];
      v31 = *v25;
      v32 = (float *)v25 - v20;
      v33 = *v26;
      v34 = &v26->f32[-v20];
      v36 = *v22;
      v35 = (float32x4_t *)((char *)v22 + v16);
      a12 = *v35;
      v37 = (float32x4_t *)((char *)v35 + v16);
      a13 = *v37;
      v38 = (float32x4_t *)((char *)v37 + v16);
      a14 = *v38;
      v39 = (float32x4_t *)((char *)v38 + v16 - v20 * v16 + -4 * v16);
      v40 = vmlaq_n_f32(a12, v36, v29);
      v41 = vaddq_f32(vmlaq_n_f32(a13, v36, v31.f32[0]), vmulq_lane_f32(a12, v31, 1));
      v42 = vaddq_f32(vmlaq_laneq_f32(vmlaq_n_f32(a14, v36, v33.f32[0]), a13, v33, 2), vmulq_lane_f32(a12, *(float32x2_t *)v33.f32, 1));
      if ((v20 & 1) != 0)
      {
        v43 = *v39;
        v39 = (float32x4_t *)((char *)v39 + v16);
        v44 = v28->f32[0];
        v28 = (float32x2_t *)((char *)v28 + 4);
        v45 = *v30++;
        v46 = *v32++;
        v47 = *v34++;
        v36 = vmlaq_n_f32(v36, v43, v44);
        v40 = vmlaq_n_f32(v40, v43, v45);
        v41 = vmlaq_n_f32(v41, v43, v46);
        v42 = vmlaq_n_f32(v42, v43, v47);
        v27 = v20 - 1;
      }
      if (v27)
      {
        v48 = 0uLL;
        v49 = 0uLL;
        v50 = 0uLL;
        v51 = 0uLL;
        do
        {
          v53 = *v39;
          v52 = (float32x4_t *)((char *)v39 + v16);
          v54 = *v52;
          v39 = (float32x4_t *)((char *)v52 + v16);
          v55 = *v28++;
          a12.i64[0] = *(_QWORD *)v30;
          v30 += 2;
          a13.i64[0] = *(_QWORD *)v32;
          v32 += 2;
          a14.i64[0] = *(_QWORD *)v34;
          v34 += 2;
          v36 = vmlaq_n_f32(v36, v53, v55.f32[0]);
          v40 = vmlaq_n_f32(v40, v53, a12.f32[0]);
          v41 = vmlaq_n_f32(v41, v53, a13.f32[0]);
          v42 = vmlaq_n_f32(v42, v53, a14.f32[0]);
          v48 = vmlaq_lane_f32(v48, v54, v55, 1);
          v49 = vmlaq_lane_f32(v49, v54, *(float32x2_t *)a12.f32, 1);
          v50 = vmlaq_lane_f32(v50, v54, *(float32x2_t *)a13.f32, 1);
          v51 = vmlaq_lane_f32(v51, v54, *(float32x2_t *)a14.f32, 1);
          v56 = v27 <= 2;
          v27 -= 2;
        }
        while (!v56);
        v36 = vaddq_f32(v36, v48);
        v40 = vaddq_f32(v40, v49);
        v41 = vaddq_f32(v41, v50);
        v42 = vaddq_f32(v42, v51);
      }
      v14 = vmulq_n_f32(v36, a7);
      v15 = vmulq_n_f32(v40, a7);
      *v39 = v14;
      v57 = (float32x4_t *)((char *)v39 + v16);
      *v57 = v15;
      v58 = (float32x4_t *)((char *)v57 + v16);
      *v58 = vmulq_n_f32(v41, a7);
      *(float32x4_t *)((char *)v58 + v16) = vmulq_n_f32(v42, a7);
    }
    v59 = a2 & 3;
    if (!i && v59 != 0)
    {
      v60 = (float32x4_t *)(a5 + 4 * v18);
      v61 = (float *)(a3 + (v20 - 1) * v17);
      if (v59 != 1)
      {
        if (v59 != 2)
        {
          v62 = *(float32x2_t *)v61;
          v64 = *v60;
          v63 = (float32x4_t *)((char *)v60 + v16);
          v66 = *v63;
          v65 = (float32x4_t *)((char *)v63 + v16);
          v61 = (float *)((char *)v61 - v17);
          a12 = vmlaq_n_f32(*v65, v64, v62.f32[0]);
          *v65 = vmulq_n_f32(vaddq_f32(vmulq_lane_f32(v66, v62, 1), a12), a7);
          v60 = (float32x4_t *)((char *)v65 - 2 * v16);
        }
        v68 = *v60;
        v67 = (float32x4_t *)((char *)v60 + v16);
        *v67 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v68, *v61), *v67), a7);
        v60 = (float32x4_t *)((char *)v67 - v16);
      }
      v14 = vmulq_n_f32(*v60, a7);
      *v60 = v14;
    }
    v18 += 4;
    v56 = v19 <= 4;
    v19 -= 4;
  }
  while (!v56);
  v56 = v19 <= -3;
  result = v19 + 3;
  if (!v56)
  {
LABEL_21:
    if (result > 1)
    {
      v69 = a2;
      for (j = __OFSUB__(a2, 3); v69 > 3; j = __OFSUB__(v69, 3))
      {
        v69 -= 4;
        v71 = (float32x2_t *)(a5 + v69 * v16 + 4 * v18);
        v72 = a3 + v69 * v17 + 4 * v69;
        v73 = (float *)(v72 + v17);
        v74 = (float32x2_t *)(v72 + 2 * v17);
        v75 = (float32x4_t *)(v72 + v17 + 2 * v17);
        v76 = v69;
        v77 = (float32x2_t *)(a3 + v69 * v17);
        v78 = *v73;
        v79 = &v73[-v69];
        v80 = *v74;
        v81 = (float *)v74 - v69;
        v82 = *v75;
        v83 = &v75->f32[-v69];
        v85 = *v71;
        v84 = (unint64_t *)((char *)v71 + v16);
        a12.i64[0] = *v84;
        v86 = (unint64_t *)((char *)v84 + v16);
        a13.i64[0] = *v86;
        v87 = (unint64_t *)((char *)v86 + v16);
        a14.i64[0] = *v87;
        v88 = (float32x2_t *)((char *)v87 + v16 - v69 * v16 + -4 * v16);
        v89 = vmla_n_f32(*(float32x2_t *)a12.f32, v85, v78);
        v90 = vadd_f32(vmla_n_f32(*(float32x2_t *)a13.f32, v85, v80.f32[0]), vmul_lane_f32(*(float32x2_t *)a12.f32, v80, 1));
        v91 = vadd_f32(vmla_laneq_f32(vmla_n_f32(*(float32x2_t *)a14.f32, v85, v82.f32[0]), *(float32x2_t *)a13.f32, v82, 2), vmul_lane_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)v82.f32, 1));
        if ((v69 & 1) != 0)
        {
          v92 = *v88;
          v88 = (float32x2_t *)((char *)v88 + v16);
          v93 = v77->f32[0];
          v77 = (float32x2_t *)((char *)v77 + 4);
          v94 = *v79++;
          v95 = *v81++;
          v96 = *v83++;
          v85 = vmla_n_f32(v85, v92, v93);
          v89 = vmla_n_f32(v89, v92, v94);
          v90 = vmla_n_f32(v90, v92, v95);
          v91 = vmla_n_f32(v91, v92, v96);
          v76 = v69 - 1;
        }
        if (v76)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v102 = *v88;
            v101 = (float32x2_t *)((char *)v88 + v16);
            v103 = *v101;
            v88 = (float32x2_t *)((char *)v101 + v16);
            v104 = *v77++;
            a12.i64[0] = *(_QWORD *)v79;
            v79 += 2;
            a13.i64[0] = *(_QWORD *)v81;
            v81 += 2;
            a14.i64[0] = *(_QWORD *)v83;
            v83 += 2;
            v85 = vmla_n_f32(v85, v102, v104.f32[0]);
            v89 = vmla_n_f32(v89, v102, a12.f32[0]);
            v90 = vmla_n_f32(v90, v102, a13.f32[0]);
            v91 = vmla_n_f32(v91, v102, a14.f32[0]);
            v97 = vmla_lane_f32(v97, v103, v104, 1);
            v98 = vmla_lane_f32(v98, v103, *(float32x2_t *)a12.f32, 1);
            v99 = vmla_lane_f32(v99, v103, *(float32x2_t *)a13.f32, 1);
            v100 = vmla_lane_f32(v100, v103, *(float32x2_t *)a14.f32, 1);
            v56 = v76 <= 2;
            v76 -= 2;
          }
          while (!v56);
          v85 = vadd_f32(v85, v97);
          v89 = vadd_f32(v89, v98);
          v90 = vadd_f32(v90, v99);
          v91 = vadd_f32(v91, v100);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(v85, a7);
        *(float32x2_t *)v15.f32 = vmul_n_f32(v89, a7);
        *v88 = *(float32x2_t *)v14.f32;
        v105 = (float32x2_t *)((char *)v88 + v16);
        *v105 = *(float32x2_t *)v15.f32;
        v106 = (float32x2_t *)((char *)v105 + v16);
        *v106 = vmul_n_f32(v90, a7);
        *(float32x2_t *)((char *)v106 + v16) = vmul_n_f32(v91, a7);
      }
      v107 = a2 & 3;
      if (!j && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + 4 * v18);
        v109 = (float *)(a3 + (v69 - 1) * v17);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v110 = *(float32x2_t *)v109;
            v112 = *v108;
            v111 = (float32x2_t *)((char *)v108 + v16);
            v114 = *v111;
            v113 = (float32x2_t *)((char *)v111 + v16);
            *(float32x2_t *)a12.f32 = *v113;
            v109 = (float *)((char *)v109 - v17);
            *(float32x2_t *)v15.f32 = vmul_lane_f32(v114, v110, 1);
            *v113 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v112, v110.f32[0]), *(float32x2_t *)v15.f32), *v113), a7);
            v108 = &v113[v16 / 0xFFFFFFFFFFFFFFFCLL];
          }
          v116 = *v108;
          v115 = (float32x2_t *)((char *)v108 + v16);
          *v115 = vmul_n_f32(vadd_f32(vmul_n_f32(v116, *v109), *v115), a7);
          v108 = (float32x2_t *)((char *)v115 - v16);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(*v108, a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v117 = a2;
      for (k = __OFSUB__(a2, 3); v117 > 3; k = __OFSUB__(v117, 3))
      {
        v117 -= 4;
        v119 = (__int32 *)(a5 + v117 * v16 + 4 * v18);
        v120 = a3 + v117 * v17 + 4 * v117;
        v121 = (float *)(v120 + v17);
        v122 = (float32x2_t *)(v120 + 2 * v17);
        v123 = (float32x4_t *)(v120 + v17 + 2 * v17);
        v124 = v117;
        v125 = (float *)(a3 + v117 * v17);
        v126 = *v121;
        v127 = &v121[-v117];
        v128 = *v122;
        v129 = (float *)v122 - v117;
        v130 = *v123;
        v131 = &v123->f32[-v117];
        v14.i32[0] = *v119;
        v132 = (unsigned __int32 *)&v119[(unint64_t)v16 / 4];
        a12.i32[0] = *v132;
        v133 = &v132[(unint64_t)v16 / 4];
        a13.i32[0] = *v133;
        v134 = &v133[(unint64_t)v16 / 4];
        a14.i32[0] = *v134;
        v135 = (float *)((char *)&v134[(unint64_t)v16 / 4] - v117 * v16 + -4 * v16);
        *(int32x2_t *)v136.f32 = vtrn1_s32(*(int32x2_t *)v14.f32, *(int32x2_t *)a12.f32);
        *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
        v136.i64[1] = a13.i64[0];
        v130.i32[3] = 0;
        v14.i32[1] = 0;
        v138 = vmul_f32(v128, *(float32x2_t *)v136.f32);
        v137 = vmulq_f32(v130, v136);
        v15.f32[0] = (float)(v126 * v136.f32[0]) + a12.f32[0];
        v139 = (float32x2_t)vpaddq_f32(v137, v137).u64[0];
        v138.f32[0] = vaddv_f32(v138) + a13.f32[0];
        v139.f32[0] = vaddv_f32(v139) + a14.f32[0];
        if ((v117 & 1) != 0)
        {
          v140 = *v135;
          v135 = (float *)((char *)v135 + v16);
          v141 = *v125++;
          v142 = *v127++;
          v143 = *v129++;
          v144 = *v131++;
          v14.f32[0] = v14.f32[0] + (float)(v140 * v141);
          v15.f32[0] = v15.f32[0] + (float)(v140 * v142);
          v138.f32[0] = v138.f32[0] + (float)(v140 * v143);
          v139.f32[0] = v139.f32[0] + (float)(v140 * v144);
          v124 = v117 - 1;
        }
        if (v124)
        {
          do
          {
            v146.f32[0] = *v135;
            v145 = (__int32 *)&v135[(unint64_t)v16 / 4];
            v146.i32[1] = *v145;
            v135 = (float *)&v145[(unint64_t)v16 / 4];
            v147 = *(float32x2_t *)v125;
            v125 += 2;
            a12.i64[0] = *(_QWORD *)v127;
            v127 += 2;
            a13.i64[0] = *(_QWORD *)v129;
            v129 += 2;
            a14.i64[0] = *(_QWORD *)v131;
            v131 += 2;
            *(float32x2_t *)v14.f32 = vmla_f32(*(float32x2_t *)v14.f32, v146, v147);
            *(float32x2_t *)v15.f32 = vmla_f32(*(float32x2_t *)v15.f32, v146, *(float32x2_t *)a12.f32);
            v138 = vmla_f32(v138, v146, *(float32x2_t *)a13.f32);
            v139 = vmla_f32(v139, v146, *(float32x2_t *)a14.f32);
            v56 = v124 <= 2;
            v124 -= 2;
          }
          while (!v56);
        }
        *v135 = vaddv_f32(*(float32x2_t *)v14.f32) * a7;
        v148 = &v135[(unint64_t)v16 / 4];
        *v148 = vaddv_f32(*(float32x2_t *)v15.f32) * a7;
        v149 = &v148[(unint64_t)v16 / 4];
        *v149 = vaddv_f32(v138) * a7;
        v149[(unint64_t)v16 / 4] = vaddv_f32(v139) * a7;
      }
      v150 = a2 & 3;
      if (!k && v150 != 0)
      {
        v151 = (__int32 *)(a5 + 4 * v18);
        v152 = (float32x2_t *)(a3 + (v117 - 1) * v17);
        if (v150 != 1)
        {
          if (v150 != 2)
          {
            v153 = *v152;
            v155.i32[0] = *v151;
            v154 = &v151[(unint64_t)v16 / 4];
            v155.i32[1] = *v154;
            v156 = (float *)&v154[(unint64_t)v16 / 4];
            v152 = (float32x2_t *)((char *)v152 - v17);
            *v156 = (float)(vaddv_f32(vmul_f32(v155, v153)) + *v156) * a7;
            v151 = (__int32 *)&v156[v16 / 0xFFFFFFFFFFFFFFFELL];
          }
          v158 = *(float *)v151;
          v157 = (float *)&v151[(unint64_t)v16 / 4];
          *v157 = (float)((float)(v158 * v152->f32[0]) + *v157) * a7;
          v151 = (__int32 *)&v157[v16 / 0xFFFFFFFFFFFFFFFCLL];
        }
        *(float *)v151 = *(float *)v151 * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85D750(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float32x4_t *v22;
  float *v23;
  uint64_t v24;
  float32x2_t *v25;
  float v26;
  float32x4_t *v27;
  float32x2_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  BOOL v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  float *v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  float *v77;
  uint64_t v78;
  float32x2_t *v79;
  float v80;
  float32x4_t *v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t *v103;
  float32x2_t *v104;
  float32x2_t *v105;
  float32x2_t *v106;
  uint64_t v107;
  float32x2_t *v108;
  float *v109;
  float *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float32x2_t *v115;
  float32x2_t v116;
  unint64_t *v117;
  float32x2_t v118;
  float32x2_t *v119;
  float *v120;
  float v121;
  float v122;
  unint64_t *v123;
  float32x2_t v124;
  float32x2_t *v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  unsigned __int32 *v129;
  float *v130;
  uint64_t v131;
  float32x2_t *v132;
  float v133;
  float32x4_t *v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  unsigned __int32 *v140;
  unsigned __int32 *v141;
  unsigned __int32 *v142;
  float *v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float *v147;
  float v148;
  float v149;
  float32x4_t *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float v158;
  float *v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float *v164;
  float v165;
  float v166;
  float *v167;
  float *v168;
  float v169;
  float v170;
  float *v171;
  float v172;
  float v173;
  float *v174;

  v15 = 4 * a6;
  v16 = 4 * a4;
  v17 = 0;
  if (result <= 3)
    goto LABEL_22;
  v18 = result - 3;
  do
  {
    v19 = 0;
    v20 = __OFSUB__(a2, 3);
    v21 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v22 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
        v23 = (float *)(a3 + v19 * v16 + 4 * v19);
        v24 = a2 - v19 - 4;
        v26 = *v23;
        v25 = (float32x2_t *)&v23[(unint64_t)v16 / 4];
        v28 = *v25;
        v27 = (float32x4_t *)((char *)v25 + v16);
        v30 = *v27;
        v29 = (float32x4_t *)((char *)v27 + v16);
        v32 = *v29;
        v31 = (float32x4_t *)((char *)v29 + v16);
        a11 = *v22;
        v33 = (float32x4_t *)((char *)v22 + v15);
        a12 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v15);
        a13 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v15);
        a14 = *v35;
        v36 = (float32x4_t *)((char *)v35 + v15);
        v37 = vmulq_laneq_f32(a14, v32, 3);
        v38 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(a14, *(float32x2_t *)v32.f32, 1), a12, v28, 1), vmulq_lane_f32(a13, *(float32x2_t *)v30.f32, 1));
        v39 = vaddq_f32(vmulq_laneq_f32(a14, v32, 2), vmulq_laneq_f32(a13, v30, 2));
        v40 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(a14, v32.f32[0]), a12, v28.f32[0]), vmlaq_n_f32(vmulq_n_f32(a13, v30.f32[0]), a11, v26));
        if ((v24 & 1) != 0)
        {
          v41 = *v36;
          v36 = (float32x4_t *)((char *)v36 + v15);
          a11 = *v31;
          v31 = (float32x4_t *)((char *)v31 + v16);
          v40 = vmlaq_n_f32(v40, v41, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v41, *(float32x2_t *)a11.f32, 1);
          v39 = vmlaq_laneq_f32(v39, v41, a11, 2);
          v37 = vmlaq_laneq_f32(v37, v41, a11, 3);
          v24 = a2 - v19 - 5;
        }
        if (v24)
        {
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          do
          {
            v47 = *v36;
            v46 = (float32x4_t *)((char *)v36 + v15);
            v48 = *v46;
            v36 = (float32x4_t *)((char *)v46 + v15);
            a11 = *v31;
            v49 = (float32x4_t *)((char *)v31 + v16);
            a12 = *v49;
            v31 = (float32x4_t *)((char *)v49 + v16);
            v40 = vmlaq_n_f32(v40, v47, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v47, *(float32x2_t *)a11.f32, 1);
            v39 = vmlaq_laneq_f32(v39, v47, a11, 2);
            v37 = vmlaq_laneq_f32(v37, v47, a11, 3);
            v42 = vmlaq_n_f32(v42, v48, a12.f32[0]);
            v43 = vmlaq_lane_f32(v43, v48, *(float32x2_t *)a12.f32, 1);
            v44 = vmlaq_laneq_f32(v44, v48, a12, 2);
            v45 = vmlaq_laneq_f32(v45, v48, a12, 3);
            v50 = v24 <= 2;
            v24 -= 2;
          }
          while (!v50);
          v40 = vaddq_f32(v40, v42);
          v38 = vaddq_f32(v38, v43);
          v39 = vaddq_f32(v39, v44);
          v37 = vaddq_f32(v37, v45);
        }
        v14 = vmulq_n_f32(v40, a7);
        v51 = (float32x4_t *)((char *)v36 - (a2 - v19) * v15);
        *v51 = v14;
        v52 = (float32x4_t *)((char *)v51 + v15);
        *v52 = vmulq_n_f32(v38, a7);
        v53 = (float32x4_t *)((char *)v52 + v15);
        *v53 = vmulq_n_f32(v39, a7);
        *(float32x4_t *)((char *)v53 + v15) = vmulq_n_f32(v37, a7);
        v19 += 4;
        v20 = __OFSUB__(v21, 4);
        v50 = v21 <= 4;
        v21 -= 4;
      }
      while (!v50);
    }
    v54 = a2 & 3;
    if (!v20 && v54 != 0)
    {
      v55 = (float32x4_t *)(a5 + v19 * v15 + 4 * v17);
      v56 = (float *)(a3 + v19 * v16 + 4 * v19);
      if (v54 != 1)
      {
        if (v54 != 2)
        {
          v58 = *v56;
          v57 = &v56[(unint64_t)v16 / 4];
          v60 = *v57;
          v59 = &v57[(unint64_t)v16 / 4];
          v61 = *v59;
          v56 = &v59[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
          v63 = *v55;
          v62 = (float32x4_t *)((char *)v55 + v15);
          v65 = *v62;
          v64 = (float32x4_t *)((char *)v62 + v15);
          a12 = *v64;
          v66 = (float32x4_t *)((char *)v64 - 2 * v15);
          *v66 = vmulq_n_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v63, v58), vmulq_n_f32(v65, v60)), vmulq_n_f32(a12, v61)), a7);
          v55 = (float32x4_t *)((char *)v66 + v15);
        }
        v68 = *v56;
        v67 = &v56[(unint64_t)v16 / 4];
        v69 = *v67;
        v56 = v67 + 1;
        v71 = *v55;
        v70 = (float32x4_t *)((char *)v55 + v15);
        a11 = *v70;
        v72 = (float32x4_t *)((char *)v70 - v15);
        *v72 = vmulq_n_f32(vaddq_f32(vmulq_n_f32(v71, v68), vmulq_n_f32(a11, v69)), a7);
        v55 = (float32x4_t *)((char *)v72 + v15);
      }
      v14 = vmulq_n_f32(vmulq_n_f32(*v55, *v56), a7);
      *v55 = v14;
    }
    v17 += 4;
    v50 = v18 <= 4;
    v18 -= 4;
  }
  while (!v50);
  v50 = v18 <= -3;
  result = v18 + 3;
  if (!v50)
  {
LABEL_22:
    if (result > 1)
    {
      v73 = 0;
      v74 = __OFSUB__(a2, 3);
      v75 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v76 = (unint64_t *)(a5 + v73 * v15 + 4 * v17);
          v77 = (float *)(a3 + v73 * v16 + 4 * v73);
          v78 = a2 - v73 - 4;
          v80 = *v77;
          v79 = (float32x2_t *)&v77[(unint64_t)v16 / 4];
          v82 = *v79;
          v81 = (float32x4_t *)((char *)v79 + v16);
          v84 = *v81;
          v83 = (float32x4_t *)((char *)v81 + v16);
          v86 = *v83;
          v85 = (float32x4_t *)((char *)v83 + v16);
          a11.i64[0] = *v76;
          v87 = (unint64_t *)((char *)v76 + v15);
          a12.i64[0] = *v87;
          v88 = (unint64_t *)((char *)v87 + v15);
          a13.i64[0] = *v88;
          v89 = (unint64_t *)((char *)v88 + v15);
          a14.i64[0] = *v89;
          v90 = (float32x2_t *)((char *)v89 + v15);
          v91 = vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 3);
          v92 = vadd_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)a14.f32, *(float32x2_t *)v86.f32, 1), *(float32x2_t *)a12.f32, v82, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, *(float32x2_t *)v84.f32, 1));
          v93 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a14.f32, v86, 2), vmul_laneq_f32(*(float32x2_t *)a13.f32, v84, 2));
          v94 = vadd_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)a14.f32, v86.f32[0]), *(float32x2_t *)a12.f32, v82.f32[0]), vmla_n_f32(vmul_n_f32(*(float32x2_t *)a13.f32, v84.f32[0]), *(float32x2_t *)a11.f32, v80));
          if ((v78 & 1) != 0)
          {
            v95 = *v90;
            v90 = (float32x2_t *)((char *)v90 + v15);
            a11 = *v85;
            v85 = (float32x4_t *)((char *)v85 + v16);
            v94 = vmla_n_f32(v94, v95, a11.f32[0]);
            v92 = vmla_lane_f32(v92, v95, *(float32x2_t *)a11.f32, 1);
            v93 = vmla_laneq_f32(v93, v95, a11, 2);
            v91 = vmla_laneq_f32(v91, v95, a11, 3);
            v78 = a2 - v73 - 5;
          }
          if (v78)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v101 = *v90;
              v100 = (float32x2_t *)((char *)v90 + v15);
              v102 = *v100;
              v90 = (float32x2_t *)((char *)v100 + v15);
              a11 = *v85;
              v103 = (float32x4_t *)((char *)v85 + v16);
              a12 = *v103;
              v85 = (float32x4_t *)((char *)v103 + v16);
              v94 = vmla_n_f32(v94, v101, a11.f32[0]);
              v92 = vmla_lane_f32(v92, v101, *(float32x2_t *)a11.f32, 1);
              v93 = vmla_laneq_f32(v93, v101, a11, 2);
              v91 = vmla_laneq_f32(v91, v101, a11, 3);
              v96 = vmla_n_f32(v96, v102, a12.f32[0]);
              v97 = vmla_lane_f32(v97, v102, *(float32x2_t *)a12.f32, 1);
              v98 = vmla_laneq_f32(v98, v102, a12, 2);
              v99 = vmla_laneq_f32(v99, v102, a12, 3);
              v50 = v78 <= 2;
              v78 -= 2;
            }
            while (!v50);
            v94 = vadd_f32(v94, v96);
            v92 = vadd_f32(v92, v97);
            v93 = vadd_f32(v93, v98);
            v91 = vadd_f32(v91, v99);
          }
          *(float32x2_t *)v14.f32 = vmul_n_f32(v94, a7);
          v104 = (float32x2_t *)((char *)v90 - (a2 - v73) * v15);
          *v104 = *(float32x2_t *)v14.f32;
          v105 = (float32x2_t *)((char *)v104 + v15);
          *v105 = vmul_n_f32(v92, a7);
          v106 = (float32x2_t *)((char *)v105 + v15);
          *v106 = vmul_n_f32(v93, a7);
          *(float32x2_t *)((char *)v106 + v15) = vmul_n_f32(v91, a7);
          v73 += 4;
          v74 = __OFSUB__(v75, 4);
          v50 = v75 <= 4;
          v75 -= 4;
        }
        while (!v50);
      }
      v107 = a2 & 3;
      if (!v74 && v107 != 0)
      {
        v108 = (float32x2_t *)(a5 + v73 * v15 + 4 * v17);
        v109 = (float *)(a3 + v73 * v16 + 4 * v73);
        if (v107 != 1)
        {
          if (v107 != 2)
          {
            v111 = *v109;
            v110 = &v109[(unint64_t)v16 / 4];
            v113 = *v110;
            v112 = &v110[(unint64_t)v16 / 4];
            v114 = *v112;
            v109 = &v112[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v116 = *v108;
            v115 = (float32x2_t *)((char *)v108 + v15);
            v118 = *v115;
            v117 = (unint64_t *)((char *)v115 + v15);
            a12.i64[0] = *v117;
            v119 = (float32x2_t *)&v117[v15 / 0xFFFFFFFFFFFFFFFCLL];
            *v119 = vmul_n_f32(vadd_f32(vadd_f32(vmul_n_f32(v116, v111), vmul_n_f32(v118, v113)), vmul_n_f32(*(float32x2_t *)a12.f32, v114)), a7);
            v108 = (float32x2_t *)((char *)v119 + v15);
          }
          v121 = *v109;
          v120 = &v109[(unint64_t)v16 / 4];
          v122 = *v120;
          v109 = v120 + 1;
          v124 = *v108;
          v123 = (unint64_t *)((char *)v108 + v15);
          a11.i64[0] = *v123;
          v125 = (float32x2_t *)((char *)v123 - v15);
          *v125 = vmul_n_f32(vadd_f32(vmul_n_f32(v124, v121), vmul_n_f32(*(float32x2_t *)a11.f32, v122)), a7);
          v108 = (float32x2_t *)((char *)v125 + v15);
        }
        *(float32x2_t *)v14.f32 = vmul_n_f32(vmul_n_f32(*v108, *v109), a7);
        *v108 = *(float32x2_t *)v14.f32;
      }
      v17 += 2;
      result -= 2;
    }
    if (result)
    {
      v126 = 0;
      v127 = __OFSUB__(a2, 3);
      v128 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v129 = (unsigned __int32 *)(a5 + v126 * v15 + 4 * v17);
          v130 = (float *)(a3 + v126 * v16 + 4 * v126);
          v131 = a2 - v126 - 4;
          v133 = *v130;
          v132 = (float32x2_t *)&v130[(unint64_t)v16 / 4];
          v135 = *v132;
          v134 = (float32x4_t *)((char *)v132 + v16);
          v137 = *v134;
          v136 = (float32x4_t *)((char *)v134 + v16);
          v139 = *v136;
          v138 = (float32x4_t *)((char *)v136 + v16);
          a11.i32[0] = *v129;
          v140 = &v129[(unint64_t)v15 / 4];
          a12.i32[0] = *v140;
          v141 = &v140[(unint64_t)v15 / 4];
          a13.i32[0] = *v141;
          v142 = &v141[(unint64_t)v15 / 4];
          a14.i32[0] = *v142;
          v143 = (float *)&v142[(unint64_t)v15 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, *(int32x2_t *)a14.f32);
          a11.i64[1] = a13.i64[0];
          v137.i32[3] = 0;
          v14.f32[0] = v133 * a11.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(*(float32x2_t *)v14.f32, vmul_lane_f32(v135, *(float32x2_t *)a11.f32, 1));
          v144 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v137, a11, 2), vmulq_laneq_f32(v139, a11, 3)));
          if ((v131 & 1) != 0)
          {
            v145 = *v143;
            v143 = (float *)((char *)v143 + v15);
            a11 = *v138;
            v138 = (float32x4_t *)((char *)v138 + v16);
            v144 = vmlaq_n_f32(v144, a11, v145);
            v131 = a2 - v126 - 5;
          }
          if (v131)
          {
            v146 = 0uLL;
            do
            {
              v148 = *v143;
              v147 = &v143[(unint64_t)v15 / 4];
              v149 = *v147;
              v143 = &v147[(unint64_t)v15 / 4];
              a11 = *v138;
              v150 = (float32x4_t *)((char *)v138 + v16);
              a12 = *v150;
              v138 = (float32x4_t *)((char *)v150 + v16);
              v144 = vmlaq_n_f32(v144, a11, v148);
              v146 = vmlaq_n_f32(v146, a12, v149);
              v50 = v131 <= 2;
              v131 -= 2;
            }
            while (!v50);
            v144 = vaddq_f32(v144, v146);
          }
          v14 = vmulq_n_f32(v144, a7);
          v151 = (_DWORD *)((char *)v143 - (a2 - v126) * v15);
          *v151 = v14.i32[0];
          v152 = &v151[(unint64_t)v15 / 4];
          *v152 = v14.i32[1];
          v153 = &v152[(unint64_t)v15 / 4];
          *v153 = v14.i32[2];
          v153[(unint64_t)v15 / 4] = v14.i32[3];
          v126 += 4;
          v127 = __OFSUB__(v128, 4);
          v50 = v128 <= 4;
          v128 -= 4;
        }
        while (!v50);
      }
      v154 = a2 & 3;
      if (!v127 && v154 != 0)
      {
        v155 = (float *)(a5 + v126 * v15 + 4 * v17);
        v156 = (float *)(a3 + v126 * v16 + 4 * v126);
        if (v154 != 1)
        {
          if (v154 != 2)
          {
            v158 = *v156;
            v157 = &v156[(unint64_t)v16 / 4];
            v160 = *v157;
            v159 = &v157[(unint64_t)v16 / 4];
            v161 = *v159;
            v156 = &v159[v16 / 0xFFFFFFFFFFFFFFFCLL + 1];
            v163 = *v155;
            v162 = &v155[(unint64_t)v15 / 4];
            v165 = *v162;
            v164 = &v162[(unint64_t)v15 / 4];
            v166 = *v164;
            v167 = &v164[v15 / 0xFFFFFFFFFFFFFFFELL];
            *v167 = (float)((float)((float)(v158 * v163) + (float)(v160 * v165)) + (float)(v161 * v166)) * a7;
            v155 = &v167[(unint64_t)v15 / 4];
          }
          v169 = *v156;
          v168 = &v156[(unint64_t)v16 / 4];
          v170 = *v168;
          v156 = v168 + 1;
          v172 = *v155;
          v171 = &v155[(unint64_t)v15 / 4];
          v173 = *v171;
          v174 = &v171[v15 / 0xFFFFFFFFFFFFFFFCLL];
          *v174 = (float)((float)(v169 * v172) + (float)(v170 * v173)) * a7;
          v155 = &v174[(unint64_t)v15 / 4];
        }
        *v155 = (float)(*v155 * *v156) * a7;
      }
    }
  }
  return result;
}

uint64_t sub_20E85DC90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, double a9, double a10, float32x4_t a11, float32x4_t a12, float32x4_t a13, int32x2_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  float *v25;
  float32x2_t *v26;
  float v27;
  float32x4_t *v28;
  float32x2_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t *v48;
  BOOL v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  uint64_t v53;
  float32x4_t *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  float *v72;
  float32x2_t *v73;
  float v74;
  float32x4_t *v75;
  float32x2_t v76;
  float32x4_t *v77;
  float32x4_t v78;
  unint64_t *v79;
  unint64_t *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t *v92;
  float32x2_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x2_t *v96;
  float32x2_t *v97;
  float32x2_t *v98;
  uint64_t v99;
  float32x2_t *v100;
  float *v101;
  float *v102;
  float v103;
  float v104;
  float32x2_t *v105;
  float32x2_t v106;
  unint64_t *v107;
  float32x2_t v108;
  float32x2_t *v109;
  unint64_t *v110;
  float32x2_t v111;
  float32x2_t *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  unsigned __int32 *v116;
  uint64_t v117;
  float *v118;
  float32x2_t *v119;
  float v120;
  float32x4_t *v121;
  float32x2_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  unsigned __int32 *v125;
  unsigned __int32 *v126;
  __int32 *v127;
  float *v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float *v132;
  float v133;
  float v134;
  float32x4_t *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float *v147;
  float v148;
  float v149;
  float *v150;
  float *v151;
  float v152;
  float v153;
  float *v154;

  v16 = 4 * a6;
  v17 = 4 * a4;
  v18 = 0;
  if (result <= 3)
    goto LABEL_22;
  v19 = result - 3;
  do
  {
    v20 = 0;
    v21 = __OFSUB__(a2, 3);
    v22 = a2 - 3;
    if (a2 > 3)
    {
      do
      {
        v23 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
        v24 = a2 - v20 - 4;
        v25 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
        v27 = *v25;
        v26 = (float32x2_t *)&v25[(unint64_t)v17 / 4];
        v29 = *v26;
        v28 = (float32x4_t *)((char *)v26 + v17);
        v31 = *v28;
        v30 = (float32x4_t *)((char *)v28 + v17);
        a11 = *v23;
        v32 = (float32x4_t *)((char *)v23 + v16);
        a12 = *v32;
        v33 = (float32x4_t *)((char *)v32 + v16);
        a13 = *v33;
        v34 = (float32x4_t *)((char *)v33 + v16);
        v36 = *v34;
        v35 = (float32x4_t *)((char *)v34 + v16);
        v37 = vmlaq_laneq_f32(a13, v36, v31, 2);
        v38 = vaddq_f32(vmlaq_lane_f32(a12, v36, *(float32x2_t *)v31.f32, 1), vmulq_lane_f32(a13, v29, 1));
        v39 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(a11, v36, v31.f32[0]), a12, v27), vmulq_n_f32(a13, v29.f32[0]));
        if ((v24 & 1) != 0)
        {
          v40 = *v35;
          v35 = (float32x4_t *)((char *)v35 + v16);
          a11 = *v30;
          v30 = (float32x4_t *)((char *)v30 + v17);
          v39 = vmlaq_n_f32(v39, v40, a11.f32[0]);
          v38 = vmlaq_lane_f32(v38, v40, *(float32x2_t *)a11.f32, 1);
          v37 = vmlaq_laneq_f32(v37, v40, a11, 2);
          v36 = vmlaq_laneq_f32(v36, v40, a11, 3);
          v24 = a2 - v20 - 5;
        }
        if (v24)
        {
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          do
          {
            v46 = *v35;
            v45 = (float32x4_t *)((char *)v35 + v16);
            v47 = *v45;
            v35 = (float32x4_t *)((char *)v45 + v16);
            a11 = *v30;
            v48 = (float32x4_t *)((char *)v30 + v17);
            a12 = *v48;
            v30 = (float32x4_t *)((char *)v48 + v17);
            v39 = vmlaq_n_f32(v39, v46, a11.f32[0]);
            v38 = vmlaq_lane_f32(v38, v46, *(float32x2_t *)a11.f32, 1);
            v37 = vmlaq_laneq_f32(v37, v46, a11, 2);
            v36 = vmlaq_laneq_f32(v36, v46, a11, 3);
            v41 = vmlaq_n_f32(v41, v47, a12.f32[0]);
            v42 = vmlaq_lane_f32(v42, v47, *(float32x2_t *)a12.f32, 1);
            v43 = vmlaq_laneq_f32(v43, v47, a12, 2);
            v44 = vmlaq_laneq_f32(v44, v47, a12, 3);
            v49 = v24 <= 2;
            v24 -= 2;
          }
          while (!v49);
          v39 = vaddq_f32(v39, v41);
          v38 = vaddq_f32(v38, v42);
          v37 = vaddq_f32(v37, v43);
          v36 = vaddq_f32(v36, v44);
        }
        v14 = vmulq_n_f32(v39, a7);
        v15 = vmulq_n_f32(v38, a7);
        v50 = (float32x4_t *)((char *)v35 - (a2 - v20) * v16);
        *v50 = v14;
        v51 = (float32x4_t *)((char *)v50 + v16);
        *v51 = v15;
        v52 = (float32x4_t *)((char *)v51 + v16);
        *v52 = vmulq_n_f32(v37, a7);
        *(float32x4_t *)((char *)v52 + v16) = vmulq_n_f32(v36, a7);
        v20 += 4;
        v21 = __OFSUB__(v22, 4);
        v49 = v22 <= 4;
        v22 -= 4;
      }
      while (!v49);
    }
    v53 = a2 & 3;
    if (!v21 && v53 != 0)
    {
      v54 = (float32x4_t *)(a5 + v20 * v16 + 4 * v18);
      v55 = (float *)(a3 + v20 * v17 + 4 * v20 + v17);
      if (v53 != 1)
      {
        if (v53 != 2)
        {
          v57 = *v55;
          v56 = &v55[(unint64_t)v17 / 4];
          v58 = *v56;
          v55 = v56 + 1;
          v60 = *v54;
          v59 = (float32x4_t *)((char *)v54 + v16);
          v62 = *v59;
          v61 = (float32x4_t *)((char *)v59 + v16);
          a12 = *v61;
          v63 = (float32x4_t *)((char *)v61 - 2 * v16);
          *v63 = vmulq_n_f32(vaddq_f32(vmlaq_n_f32(v60, v62, v57), vmulq_n_f32(a12, v58)), a7);
          v54 = (float32x4_t *)((char *)v63 + v16);
        }
        v65 = *v54;
        v64 = (float32x4_t *)((char *)v54 + v16);
        a11 = *v64;
        v66 = (float32x4_t *)((char *)v64 - v16);
        *v66 = vmulq_n_f32(vmlaq_n_f32(v65, a11, *v55), a7);
        v54 = (float32x4_t *)((char *)v66 + v16);
      }
      v14 = vmulq_n_f32(*v54, a7);
      *v54 = v14;
    }
    v18 += 4;
    v49 = v19 <= 4;
    v19 -= 4;
  }
  while (!v49);
  v49 = v19 <= -3;
  result = v19 + 3;
  if (!v49)
  {
LABEL_22:
    if (result > 1)
    {
      v67 = 0;
      v68 = __OFSUB__(a2, 3);
      v69 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v70 = (unint64_t *)(a5 + v67 * v16 + 4 * v18);
          v71 = a2 - v67 - 4;
          v72 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
          v74 = *v72;
          v73 = (float32x2_t *)&v72[(unint64_t)v17 / 4];
          v76 = *v73;
          v75 = (float32x4_t *)((char *)v73 + v17);
          v78 = *v75;
          v77 = (float32x4_t *)((char *)v75 + v17);
          a11.i64[0] = *v70;
          v79 = (unint64_t *)((char *)v70 + v16);
          a12.i64[0] = *v79;
          v80 = (unint64_t *)((char *)v79 + v16);
          a13.i64[0] = *v80;
          v81 = (float32x2_t *)((char *)v80 + v16);
          v83 = *v81;
          v82 = (float32x2_t *)((char *)v81 + v16);
          v84 = vmla_laneq_f32(*(float32x2_t *)a13.f32, v83, v78, 2);
          v85 = vadd_f32(vmla_lane_f32(*(float32x2_t *)a12.f32, v83, *(float32x2_t *)v78.f32, 1), vmul_lane_f32(*(float32x2_t *)a13.f32, v76, 1));
          v86 = vadd_f32(vmla_n_f32(vmla_n_f32(*(float32x2_t *)a11.f32, v83, v78.f32[0]), *(float32x2_t *)a12.f32, v74), vmul_n_f32(*(float32x2_t *)a13.f32, v76.f32[0]));
          if ((v71 & 1) != 0)
          {
            v87 = *v82;
            v82 = (float32x2_t *)((char *)v82 + v16);
            a11 = *v77;
            v77 = (float32x4_t *)((char *)v77 + v17);
            v86 = vmla_n_f32(v86, v87, a11.f32[0]);
            v85 = vmla_lane_f32(v85, v87, *(float32x2_t *)a11.f32, 1);
            v84 = vmla_laneq_f32(v84, v87, a11, 2);
            v83 = vmla_laneq_f32(v83, v87, a11, 3);
            v71 = a2 - v67 - 5;
          }
          if (v71)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v93 = *v82;
              v92 = (float32x2_t *)((char *)v82 + v16);
              v94 = *v92;
              v82 = (float32x2_t *)((char *)v92 + v16);
              a11 = *v77;
              v95 = (float32x4_t *)((char *)v77 + v17);
              a12 = *v95;
              v77 = (float32x4_t *)((char *)v95 + v17);
              v86 = vmla_n_f32(v86, v93, a11.f32[0]);
              v85 = vmla_lane_f32(v85, v93, *(float32x2_t *)a11.f32, 1);
              v84 = vmla_laneq_f32(v84, v93, a11, 2);
              v83 = vmla_laneq_f32(v83, v93, a11, 3);
              v88 = vmla_n_f32(v88, v94, a12.f32[0]);
              v89 = vmla_lane_f32(v89, v94, *(float32x2_t *)a12.f32, 1);
              v90 = vmla_laneq_f32(v90, v94, a12, 2);
              v91 = vmla_laneq_f32(v91, v94, a12, 3);
              v49 = v71 <= 2;
              v71 -= 2;
            }
            while (!v49);
            v86 = vadd_f32(v86, v88);
            v85 = vadd_f32(v85, v89);
            v84 = vadd_f32(v84, v90);
            v83 = vadd_f32(v83, v91);
          }
          *(float32x2_t *)v15.f32 = vmul_n_f32(v85, a7);
          v96 = (float32x2_t *)((char *)v82 - (a2 - v67) * v16);
          *v96 = vmul_n_f32(v86, a7);
          v97 = (float32x2_t *)((char *)v96 + v16);
          *v97 = *(float32x2_t *)v15.f32;
          v98 = (float32x2_t *)((char *)v97 + v16);
          *v98 = vmul_n_f32(v84, a7);
          *(float32x2_t *)((char *)v98 + v16) = vmul_n_f32(v83, a7);
          v67 += 4;
          v68 = __OFSUB__(v69, 4);
          v49 = v69 <= 4;
          v69 -= 4;
        }
        while (!v49);
      }
      v99 = a2 & 3;
      if (!v68 && v99 != 0)
      {
        v100 = (float32x2_t *)(a5 + v67 * v16 + 4 * v18);
        v101 = (float *)(a3 + v67 * v17 + 4 * v67 + v17);
        if (v99 != 1)
        {
          if (v99 != 2)
          {
            v103 = *v101;
            v102 = &v101[(unint64_t)v17 / 4];
            v104 = *v102;
            v101 = v102 + 1;
            v106 = *v100;
            v105 = (float32x2_t *)((char *)v100 + v16);
            v108 = *v105;
            v107 = (unint64_t *)((char *)v105 + v16);
            a12.i64[0] = *v107;
            v109 = (float32x2_t *)&v107[v16 / 0xFFFFFFFFFFFFFFFCLL];
            *v109 = vmul_n_f32(vadd_f32(vmla_n_f32(v106, v108, v103), vmul_n_f32(*(float32x2_t *)a12.f32, v104)), a7);
            v100 = (float32x2_t *)((char *)v109 + v16);
          }
          v111 = *v100;
          v110 = (unint64_t *)((char *)v100 + v16);
          a11.i64[0] = *v110;
          v112 = (float32x2_t *)((char *)v110 - v16);
          *v112 = vmul_n_f32(vmla_n_f32(v111, *(float32x2_t *)a11.f32, *v101), a7);
          v100 = (float32x2_t *)((char *)v112 + v16);
        }
        *v100 = vmul_n_f32(*v100, a7);
      }
      v18 += 2;
      result -= 2;
    }
    if (result)
    {
      v113 = 0;
      v114 = __OFSUB__(a2, 3);
      v115 = a2 - 3;
      if (a2 > 3)
      {
        do
        {
          v116 = (unsigned __int32 *)(a5 + v113 * v16 + 4 * v18);
          v117 = a2 - v113 - 4;
          v118 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
          v120 = *v118;
          v119 = (float32x2_t *)&v118[(unint64_t)v17 / 4];
          v122 = *v119;
          v121 = (float32x4_t *)((char *)v119 + v17);
          v124 = *v121;
          v123 = (float32x4_t *)((char *)v121 + v17);
          a11.i32[0] = *v116;
          v125 = &v116[(unint64_t)v16 / 4];
          a12.i32[0] = *v125;
          v126 = &v125[(unint64_t)v16 / 4];
          a13.i32[0] = *v126;
          v127 = (__int32 *)&v126[(unint64_t)v16 / 4];
          a14.i32[0] = *v127;
          v128 = (float *)&v127[(unint64_t)v16 / 4];
          *(int32x2_t *)a11.f32 = vtrn1_s32(*(int32x2_t *)a11.f32, *(int32x2_t *)a12.f32);
          *(int32x2_t *)a13.f32 = vtrn1_s32(*(int32x2_t *)a13.f32, a14);
          a11.i64[1] = a13.i64[0];
          v124.i32[3] = 0;
          v15.f32[0] = v120 * a12.f32[0];
          *(float32x2_t *)v14.f32 = vadd_f32(vmul_laneq_f32(v122, a11, 2), *(float32x2_t *)v15.f32);
          v129 = vaddq_f32(v14, vaddq_f32(vmulq_laneq_f32(v124, a11, 3), a11));
          if ((v117 & 1) != 0)
          {
            v130 = *v128;
            v128 = (float *)((char *)v128 + v16);
            a11 = *v123;
            v123 = (float32x4_t *)((char *)v123 + v17);
            v129 = vmlaq_n_f32(v129, a11, v130);
            v117 = a2 - v113 - 5;
          }
          if (v117)
          {
            v131 = 0uLL;
            do
            {
              v133 = *v128;
              v132 = &v128[(unint64_t)v16 / 4];
              v134 = *v132;
              v128 = &v132[(unint64_t)v16 / 4];
              a11 = *v123;
              v135 = (float32x4_t *)((char *)v123 + v17);
              a12 = *v135;
              v123 = (float32x4_t *)((char *)v135 + v17);
              v129 = vmlaq_n_f32(v129, a11, v133);
              v131 = vmlaq_n_f32(v131, a12, v134);
              v49 = v117 <= 2;
              v117 -= 2;
            }
            while (!v49);
            v129 = vaddq_f32(v129, v131);
          }
          v14 = vmulq_n_f32(v129, a7);
          v136 = (_DWORD *)((char *)v128 - (a2 - v113) * v16);
          *v136 = v14.i32[0];
          v137 = &v136[(unint64_t)v16 / 4];
          *v137 = v14.i32[1];
          v138 = &v137[(unint64_t)v16 / 4];
          *v138 = v14.i32[2];
          v138[(unint64_t)v16 / 4] = v14.i32[3];
          v113 += 4;
          v114 = __OFSUB__(v115, 4);
          v49 = v115 <= 4;
          v115 -= 4;
        }
        while (!v49);
      }
      v139 = a2 & 3;
      if (!v114 && v139 != 0)
      {
        v140 = (float *)(a5 + v113 * v16 + 4 * v18);
        v141 = (float *)(a3 + v113 * v17 + 4 * v113 + v17);
        if (v139 != 1)
        {
          if (v139 != 2)
          {
            v143 = *v141;
            v142 = &v141[(unint64_t)v17 / 4];
            v144 = *v142;
            v141 = v142 + 1;
            v146 = *v140;
            v145 = &v140[(unint64_t)v16 / 4];
            v148 = *v145;
            v147 = &v145[(unint64_t)v16 / 4];
            v149 = *v147;
            v150 = &v147[v16 / 0xFFFFFFFFFFFFFFFELL];
            *v150 = (float)((float)(v146 + (float)(v143 * v148)) + (float)(v144 * v149)) * a7;
            v140 = &v150[(unint64_t)v16 / 4];
          }
          v152 = *v140;
          v151 = &v140[(unint64_t)v16 / 4];
          v153 = *v151;
          v154 = &v151[v16 / 0xFFFFFFFFFFFFFFFCLL];
          *v154 = (float)(v152 + (float)(*v141 * v153)) * a7;
          v140 = &v154[(unint64_t)v16 / 4];
        }
        *v140 = *v140 * a7;
      }
    }
  }
  return result;
}

void sub_20E85E164(_DWORD *a1, CBLAS_ORDER __Order, CBLAS_UPLO __Uplo, CBLAS_TRANSPOSE __TransA, CBLAS_DIAG __Diag, int __N, const double *__A, int __lda, double *__X, int __incX)
{
  if (a1 && *a1 != 1)
    printf("*** ERROR *** CONTEXT ID is incorrect");
  else
    cblas_dtrsv(__Order, __Uplo, __TransA, __Diag, __N, __A, __lda, __X, __incX);
}

void sub_20E85E1B0(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const float *a8, float a9, float a10, int __lda, float *__B, int __ldb, float *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_sgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_20E837AE8(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_20E85E250(_DWORD *a1, CBLAS_ORDER a2, CBLAS_TRANSPOSE a3, CBLAS_TRANSPOSE a4, int a5, int a6, int a7, const double *a8, double a9, double a10, int __lda, double *__B, int __ldb, double *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_dgemm(a2, a3, a4, a5, a6, a7, a9, a8, __lda, __B, __ldb, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_20E835694(a2, a3, a4, a5, a6, a7, (int)a8, __lda, (uint64_t)__B, __ldb, SHIDWORD(__B), (int)__C, SHIDWORD(__C), __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_20E85E2F0(_DWORD *a1, uint64_t __Order, uint64_t __Uplo, uint64_t __Trans, uint64_t __N, uint64_t __K, const double *__A, uint64_t __lda, double a9, double a10, double *__C, int __ldc)
{
  if (!a1)
  {
LABEL_5:
    cblas_dsyrk((const CBLAS_ORDER)__Order, (const CBLAS_UPLO)__Uplo, (const CBLAS_TRANSPOSE)__Trans, __N, __K, a9, __A, __lda, a10, __C, __ldc);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_20E8429FC(__Order, __Uplo, __Trans, __N, __K, __A, __lda, __C, a9, a10, __ldc);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_20E85E36C(_DWORD *a1, CBLAS_ORDER a2, uint64_t a3, CBLAS_UPLO a4, CBLAS_TRANSPOSE a5, CBLAS_DIAG a6, uint64_t a7, uint64_t a8, double a9, double *__A, int __lda, double *__B, int __ldb)
{
  if (!a1)
  {
LABEL_5:
    cblas_dtrmm(a2, (const CBLAS_SIDE)a3, a4, a5, a6, a7, a8, a9, __A, __lda, __B, __ldb);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_20E843E48(a2, a3, a4, a5, a6, a7, a8, (int)__A, __lda, (uint64_t)__B, __ldb);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_20E85E400(_DWORD *a1, CBLAS_ORDER a2, uint64_t a3, CBLAS_UPLO a4, CBLAS_TRANSPOSE a5, CBLAS_DIAG a6, uint64_t a7, uint64_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, double *__A, int __lda, double *__B, int __ldb)
{
  if (!a1)
  {
LABEL_5:
    cblas_dtrsm(a2, (const CBLAS_SIDE)a3, a4, a5, a6, a7, a8, a9, __A, __lda, __B, __ldb);
    return;
  }
  if (*a1 == 1)
  {
    if (a1[1])
    {
      sub_20E85964C(a2, a3, a4, a5, a6, a7, a8, __A, a9, a10, a11, a12, a13, a14, a15, a16, __lda, (char *)__B, __ldb);
      return;
    }
    goto LABEL_5;
  }
  printf("*** ERROR *** CONTEXT ID is incorrect");
}

void sub_20E85E494(int a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, float64x2_t a10, double a11, float64x2_t a12, float64x2_t a13, float64x2_t a14, float64x2_t a15, float64x2_t a16, char *a17, uint64_t a18, double *a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,char a35)
{
  BOOL v36;

  if (a5 && a6)
  {
    if (a9 == 0.0)
    {
      sub_20E8561C4(a5, a6, a17, a18);
    }
    else if (a5 > 63 || a6 >= 64)
    {
      v36 = a2 == 121 && a3 == 111;
      if (a1 == 141)
      {
        if (v36 || a2 == 122 && a3 != 111)
          sub_20E834C50(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, a26, a27);
        else
          sub_20E8347F4(a3, a4, a5, a6, a5, (int)a7, a8, (int)a17, a18, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
            a28,
            a29,
            a30,
            a31);
      }
      else if (v36 || a2 == 122 && a3 != 111)
      {
        sub_20E839C0C(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, (uint64_t)a24, a25, (uint64_t)a26, a27,
          a28,
          a29,
          (uint64_t)a30,
          a31,
          a32,
          a33,
          a34,
          a35);
      }
      else
      {
        sub_20E83A0D4(a3, a4, a5, a6, a6, (int)a17, a18, (int)a7, a8, (uint64_t)a17, a19, a20, a21, a22, a23, a24, a25);
      }
    }
    else if (a20 == -1)
    {
      *a19 = 0.0;
    }
    else if (a1 == 141)
    {
      if (a2 == 121)
      {
        if (a3 == 111)
        {
          if (a4 == 132)
            sub_20E840334(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
          else
            sub_20E8407C0(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9);
        }
        else if (a4 == 132)
        {
          sub_20E83F8F0(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
        }
        else
        {
          sub_20E83FDB4(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
        }
      }
      else if (a3 == 111)
      {
        if (a4 == 132)
          sub_20E856AB0(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9);
        else
          sub_20E856EB8(a5, a6, a7, a8, (double *)a17, a18, a9);
      }
      else if (a4 == 132)
      {
        sub_20E857384(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12, a13, a14, a15);
      }
      else
      {
        sub_20E8578F0(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15);
      }
    }
    else if (a2 == 121)
    {
      if (a3 == 111)
      {
        if (a4 == 132)
          sub_20E844E08(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13, a14, a15, a16);
        else
          sub_20E84527C(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, a16);
      }
      else if (a4 == 132)
      {
        sub_20E845798(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
      else
      {
        sub_20E845BF0(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
      }
    }
    else if (a3 == 111)
    {
      if (a4 == 132)
        sub_20E82C2F4(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, (int8x16_t)a10, a11, a12.f64[0], a13, a14, a15, (int64x2_t)a16);
      else
        sub_20E82C818(a5, a6, (uint64_t)a7, a8, (uint64_t)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15, (int64x2_t)a16);
    }
    else if (a4 == 132)
    {
      sub_20E82BA84(a5, a6, (uint64_t)a7, a8, (double *)a17, a18, a9, a10, a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
    else
    {
      sub_20E82BE58(a5, a6, a7, a8, (double *)a17, a18, a9, a10.f64[0], a11, a12.f64[0], a13.f64[0], a14.f64[0], a15.f64[0], a16);
    }
  }
}

#error "20E85E8E4: call analysis failed (funcsize=101)"

#error "20E85EB64: call analysis failed (funcsize=163)"

#error "20E85EC04: call analysis failed (funcsize=113)"

void sub_20E85ED58(uint64_t __N, uint64_t __M, const double *__A, uint64_t __lda, double *__Y, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, __n128 _Q4, float64x2_t a12, float64x2_t a13)
{
  uint64_t v19;
  float64x2_t *v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t *v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;

  if ((__N & 1) != 0)
  {
    v19 = 1;
    cblas_dgemv(CblasColMajor, CblasTrans, __M, __N, a7, __A, __lda, __A, 1, a8, __Y, 1);
  }
  else
  {
    v19 = 0;
  }
  _Q0.f64[0] = a7;
  _Q0.f64[1] = a8;
  if (v19 < __N - 1)
  {
    v21 = (float64x2_t *)((char *)__Y + v19 * (8 * a6 + 8) + 16);
    v22 = (double *)&__A[__lda * (v19 + 3)];
    v23 = 16 * __lda;
    v24 = (double *)&__A[__lda * (v19 | 2)];
    do
    {
      v25 = (double *)&__A[v19 * __lda];
      v26 = (double *)&__A[__lda + v19 * __lda];
      v27 = (float64x2_t *)&__Y[v19 * a6 + v19];
      v28 = (float64x2_t *)v25;
      v29 = __M;
      v30 = (float64x2_t *)v26;
      v31 = (float64x2_t)veorq_s8(a10, a10);
      _Q4 = (__n128)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
      a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
      if (__M)
      {
        if ((__M & 1) == 0
          || (v28 = (float64x2_t *)(v25 + 1),
              v30 = (float64x2_t *)(v26 + 1),
              v31.f64[0] = vmlad_n_f64(v31.f64[0], *v25, *v25),
              _Q4.n128_f64[0] = vmlad_n_f64(_Q4.n128_f64[0], *v26, *v25),
              a13.f64[0] = vmlad_n_f64(a13.f64[0], *v26, *v26),
              v29 = __M - 1,
              __M > 1))
        {
          do
          {
            v32 = *v28++;
            v33 = *v30++;
            v31 = vmlaq_f64(v31, v32, v32);
            _Q4 = (__n128)vmlaq_f64((float64x2_t)_Q4, v33, v32);
            a13 = vmlaq_f64(a13, v33, v33);
            v34 = v29 <= 2;
            v29 -= 2;
          }
          while (!v34);
        }
        a12.f64[0] = a13.f64[1];
        v31 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v31, (int64x2_t)_Q4), (float64x2_t)vtrn2q_s64((int64x2_t)v31, (int64x2_t)_Q4)), a7);
      }
      v35 = (uint64_t *)&v27->f64[a6 + 1];
      _D2 = *v35;
      a10 = (int8x16_t)vmlaq_laneq_f64(v31, *v27, _Q0, 1);
      __asm { FMLA            D4, D2, V0.D[1] }
      *v27 = (float64x2_t)a10;
      *v35 = _Q4.n128_u64[0];
      v19 += 2;
      if (v19 < __N)
      {
        v41 = 0;
        v42 = v21;
        v43 = v19;
        do
        {
          v44 = (float64x2_t *)((char *)v24 + v41);
          v45 = (float64x2_t *)((char *)v22 + v41);
          v46 = __M;
          v47 = (float64x2_t *)v26;
          v48 = (float64x2_t *)v25;
          v49 = (float64x2_t)veorq_s8(a10, a10);
          v50 = (float64x2_t)veorq_s8((int8x16_t)_Q4, (int8x16_t)_Q4);
          a12 = (float64x2_t)veorq_s8((int8x16_t)a12, (int8x16_t)a12);
          a13 = (float64x2_t)veorq_s8((int8x16_t)a13, (int8x16_t)a13);
          if (__M)
          {
            if ((__M & 1) == 0)
              goto LABEL_18;
            v51 = v44->f64[0];
            v44 = (float64x2_t *)((char *)v44 + 8);
            v52 = v45->f64[0];
            v45 = (float64x2_t *)((char *)v45 + 8);
            v48 = (float64x2_t *)(v25 + 1);
            v47 = (float64x2_t *)(v26 + 1);
            v49.f64[0] = vmlad_n_f64(v49.f64[0], v51, *v25);
            v50.f64[0] = vmlad_n_f64(v50.f64[0], v52, *v25);
            a12.f64[0] = vmlad_n_f64(a12.f64[0], v51, *v26);
            a13.f64[0] = vmlad_n_f64(a13.f64[0], v52, *v26);
            v46 = __M - 1;
            if (__M > 1)
            {
LABEL_18:
              do
              {
                v53 = *v44++;
                v54 = *v45++;
                v55 = *v48++;
                v56 = *v47++;
                v49 = vmlaq_f64(v49, v53, v55);
                v50 = vmlaq_f64(v50, v54, v55);
                a12 = vmlaq_f64(a12, v53, v56);
                a13 = vmlaq_f64(a13, v54, v56);
                v34 = v46 <= 2;
                v46 -= 2;
              }
              while (!v34);
            }
            v49 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)v49, (int64x2_t)v50), (float64x2_t)vtrn2q_s64((int64x2_t)v49, (int64x2_t)v50)), a7);
            v50 = vmulq_n_f64(vaddq_f64((float64x2_t)vtrn1q_s64((int64x2_t)a12, (int64x2_t)a13), (float64x2_t)vtrn2q_s64((int64x2_t)a12, (int64x2_t)a13)), a7);
          }
          a10 = (int8x16_t)vmlaq_laneq_f64(v49, *v42, _Q0, 1);
          _Q4 = (__n128)vmlaq_laneq_f64(v50, *(float64x2_t *)((char *)v42 + 8 * a6), _Q0, 1);
          *v42 = (float64x2_t)a10;
          *(__n128 *)((char *)v42 + 8 * a6) = _Q4;
          v43 += 2;
          ++v42;
          v41 += v23;
        }
        while (v43 < __N);
      }
      v21 += a6 + 1;
      v22 = (double *)((char *)v22 + v23);
      v24 = (double *)((char *)v24 + v23);
    }
    while (v19 < __N - 1);
  }
}

void sub_20E85EFEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,uint64_t a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,__int128 a34,__int128 a35,__int128 a36,__int128 a37,__int128 a38,__int128 a39,__int128 a40,__int128 a41,char a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, double);
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *(*v71)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  double *(*v72)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const double *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, double);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v123;
  uint64_t v124;
  double *(*v125)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  double *(*v130)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t __Na;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v45 = MEMORY[0x24BDAC7A8]();
  v47 = v46;
  v119 = v48;
  v113 = v49;
  v51 = v50;
  v53 = v52;
  v54 = v45;
  v55 = v43;
  STACK[0x10278] = *MEMORY[0x24BDAC8D0];
  if (v42 == 111)
    v56 = v44;
  else
    v56 = 1;
  v112 = v56;
  vars0 = v44;
  if (v42 == 111)
    v57 = 1;
  else
    v57 = v44;
  v118 = v57;
  v58 = (void (*)(uint64_t, uint64_t, double))sub_20E835C9C;
  if (v42 == 111)
    v58 = (void (*)(uint64_t, uint64_t, double))sub_20E835DBC;
  v111 = v58;
  v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E835F4C;
  if (v42 == 111)
    v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E835E6C;
  v117 = v59;
  if (v43 >= 225)
  {
    v134 = (char *)malloc_type_malloc((v43 << 8) + 8288, 0x100004000313F17uLL);
    v60 = (unint64_t *)(v134 + 8256);
  }
  else
  {
    v134 = &a42;
    v60 = &STACK[0x2240];
  }
  v128 = (uint64_t)v60;
  if (v51 >= 1)
  {
    v61 = 0;
    v137 = 32 * v47;
    v115 = 8 * v47;
    v116 = v55;
    v62 = 8 * v47 + 8;
    v126 = v47;
    v110 = v51;
    while (1)
    {
      v114 = v61 + 32;
      v63 = v61 + 32 <= v51 ? 32 : v51 - v61;
      v120 = v113 + 8 * v61 * v112;
      v111(v63, v55, v54);
      if (v55 >= 1)
        break;
LABEL_94:
      v61 = v114;
      v51 = v110;
      if (v114 >= v110)
        goto LABEL_95;
    }
    v64 = v63;
    v65 = 0;
    v66 = v53 != 0.0;
    if (v53 == 1.0 || v61 != 0)
      v66 = 0;
    v127 = v66;
    v68 = v119;
    v125 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t, double))sub_20E82F260;
    v130 = (double *(*)(float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, uint64_t, uint64_t))sub_20E82F3B0;
    __Na = v63;
    while (1)
    {
      v136 = v65;
      v69 = v65 + 32;
      if (v65 + 32 <= v55)
        v70 = 32;
      else
        v70 = v55 - v65;
      v129 = v119 + 8 * v65;
      v71 = v130;
      if ((v70 & 7) != 0)
        v71 = sub_20E8428D0;
      v130 = v71;
      v72 = v125;
      if ((v70 & 7) != 0)
        v72 = sub_20E83B2A0;
      v125 = v72;
      v117(v70, v64, v120 + 8 * v65 * v118, vars0, v134);
      v73 = v136;
      v74 = v70;
      v133 = v70;
      v123 = v69;
      v124 = v68;
      vars8 = v70 + v136;
      if (v70 + v136 >= 4)
      {
        v75 = 0;
        v76 = 0;
        v138 = v70 + v136 - 3;
        v77 = v68;
        v64 = __Na;
        while (2)
        {
          v78 = v76 - v73;
          v79 = v76 & 4;
          if ((v76 & 4) != 0)
            v80 = v76 - v73 - 4;
          else
            v80 = v76 - v73;
          if (v78 >= 0)
            v81 = v80;
          else
            v81 = 0;
          if (v81 > v74)
            goto LABEL_64;
          v82 = v129 + 8 * v76 * v47;
          v83 = (float64x2_t *)(v128 + 8 * v76 * v64);
          if (v78 < 0)
          {
            v85 = 0;
            if (v127)
              goto LABEL_55;
          }
          else
          {
            v131 = 32 * (v75 & 1);
            a40 = 0u;
            a41 = 0u;
            v84 = (char *)&a26 + v131;
            a38 = 0u;
            a39 = 0u;
            a36 = 0u;
            a37 = 0u;
            a34 = 0u;
            a35 = 0u;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            if (v74 - v80 >= 8)
              v85 = 8;
            else
              v85 = v74 - v80;
            a26 = 0uLL;
            a27 = 0uLL;
            v132 = v128 + 8 * v76 * v64;
            ((void (*)(char *))v130)(&v134[8 * v80 * v64]);
            v82 += 8 * v80;
            if (v127)
            {
              v86 = 0;
              v83 = (float64x2_t *)v132;
              v87 = v77 + v131 + 8 * v80;
              v64 = __Na;
              v74 = v133;
              do
              {
                if (v79 < v85)
                {
                  v88 = 0;
                  do
                  {
                    *(double *)(v87 + 8 * v88) = *(double *)&v84[8 * v88] + *(double *)(v87 + 8 * v88) * v53;
                    ++v88;
                  }
                  while (v79 + v88 < v85);
                }
                ++v79;
                ++v86;
                v84 += 72;
                v87 += v62;
              }
              while (v86 != 4);
              v47 = v126;
              v73 = v136;
              if (v85 + v81 >= v133)
                goto LABEL_64;
LABEL_55:
              v125((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64, v53);
LABEL_63:
              v64 = __Na;
              v73 = v136;
              v74 = v133;
LABEL_64:
              v76 += 4;
              ++v75;
              v77 += v137;
              if (v76 >= v138)
                goto LABEL_67;
              continue;
            }
            v89 = 0;
            v83 = (float64x2_t *)v132;
            v90 = v77 + v131 + 8 * v80;
            v64 = __Na;
            v74 = v133;
            do
            {
              if (v79 < v85)
              {
                v91 = 0;
                do
                {
                  *(double *)(v90 + 8 * v91) = *(double *)(v90 + 8 * v91) + *(double *)&v84[8 * v91];
                  ++v91;
                }
                while (v79 + v91 < v85);
              }
              ++v79;
              ++v89;
              v84 += 72;
              v90 += v62;
            }
            while (v89 != 4);
            v47 = v126;
            v73 = v136;
            if (v85 + v81 >= v133)
              goto LABEL_64;
          }
          break;
        }
        v130((float64x2_t *)&v134[8 * (v85 + v81) * v64], v83, (float64x2_t *)(v82 + 8 * v85), v47, v74 - (v85 + v81), v64);
        goto LABEL_63;
      }
      v76 = 0;
      v64 = __Na;
LABEL_67:
      v92 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v92)
      {
        v93 = v76 - v73;
        v94 = (v76 - v73) & ~((v76 - v73) >> 63);
        if (v74 > v94)
          break;
      }
LABEL_93:
      v68 = v124 + 256;
      v65 = v123;
      v55 = v116;
      if (v123 >= v116)
        goto LABEL_94;
    }
    v95 = v129 + 8 * v76 * v47;
    v96 = (const double *)(v128 + 8 * v76 * v64);
    if (v93 < 0)
    {
      v98 = 0;
      v104 = 0;
      v105 = 0;
      if (v127)
      {
LABEL_84:
        sub_20E842324((float64x2_t *)&v134[8 * v104 * v64 + 8 * v98], v96, v95, v47, v74 - v104, v92, __Na, v53);
LABEL_92:
        v64 = __Na;
        goto LABEL_93;
      }
    }
    else
    {
      a36 = 0u;
      a37 = 0u;
      a34 = 0u;
      a35 = 0u;
      a32 = 0u;
      a33 = 0u;
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v74 - v94 >= 8)
        v97 = 8;
      else
        v97 = v74 - v94;
      v98 = v94 & (4 * v64) & 4;
      v99 = v95 + 8 * v94;
      sub_20E8424A0((float64x2_t *)&v134[8 * v93 * v64 + 8 * v98], (const double *)(v128 + 8 * v76 * v64), (uint64_t)&a26, 8, v97, v92, v64);
      if (v127)
      {
        v64 = __Na;
        if (v92 >= 1)
        {
          v100 = 0;
          v101 = v124 + v115 * v76 + 8 * v94;
          v102 = &a26;
          do
          {
            v103 = 0;
            do
            {
              *(double *)(v101 + 8 * v103) = *((double *)v102 + v103) + *(double *)(v101 + 8 * v103) * v53;
              ++v103;
            }
            while (v100 + v103 < v92);
            ++v100;
            v102 = (__int128 *)((char *)v102 + 72);
            v101 += v62;
          }
          while (v100 != v92);
        }
        v95 = v99 + 8 * v97;
        v104 = v97 + v94;
        v74 = v133;
        goto LABEL_84;
      }
      v64 = __Na;
      if (v92 >= 1)
      {
        v106 = 0;
        v107 = v124 + v115 * v76 + 8 * v94;
        v108 = &a26;
        do
        {
          v109 = 0;
          do
          {
            *(double *)(v107 + 8 * v109) = *(double *)(v107 + 8 * v109) + *((double *)v108 + v109);
            ++v109;
          }
          while (v106 + v109 < v92);
          ++v106;
          v108 = (__int128 *)((char *)v108 + 72);
          v107 += v62;
        }
        while (v106 != v92);
      }
      v95 = v99 + 8 * v97;
      v105 = v97 + v94;
      v74 = v133;
    }
    sub_20E8424A0((float64x2_t *)&v134[8 * v105 * v64 + 8 * v98], v96, v95, v47, v74 - v105, v92, __Na);
    goto LABEL_92;
  }
LABEL_95:
  if (v55 >= 225)
    free(v134);
}

void sub_20E85F700(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,int __N,uint64_t a23,int a24,uint64_t a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,char a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, float);
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float *(*v64)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  float *(*v65)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, float);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t vars0;
  uint64_t vars8;
  uint64_t v118;
  uint64_t v119;
  float *(*v120)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float);
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  float *(*v124)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t __Na;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v34 = MEMORY[0x24BDAC7A8](a1);
  v131 = v37;
  v114 = v38;
  v106 = v39;
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v46 = v35;
  STACK[0x101F8] = *MEMORY[0x24BDAC8D0];
  if (v34 == 111)
    v47 = v36;
  else
    v47 = 1;
  v105 = v47;
  vars0 = v36;
  if (v34 == 111)
    v48 = 1;
  else
    v48 = v36;
  v113 = v48;
  v49 = (void (*)(uint64_t, uint64_t, float))sub_20E84ACFC;
  if (v34 == 111)
    v49 = (void (*)(uint64_t, uint64_t, float))sub_20E84AE38;
  v104 = v49;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E84B1BC;
  if (v34 == 111)
    v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_20E84B028;
  v112 = v50;
  if (v35 < 1)
  {
    v128 = &a34;
    v51 = &STACK[0x10180];
  }
  else
  {
    v128 = (char *)malloc_type_malloc((v35 << 9) + 65632, 0x100004052888210uLL);
    v51 = (unint64_t *)(v128 + 0x10000);
  }
  v122 = (uint64_t)(v51 + 8);
  if (v41 >= 1)
  {
    v52 = 0;
    v53 = 16 * v131;
    v108 = 4 * v131;
    v54 = 4 * v131 + 4;
    v111 = v46;
    v103 = v41;
    while (1)
    {
      v107 = v52 + 128;
      v55 = v52 + 128 <= v41 ? 128 : v41 - v52;
      v115 = v106 + 4 * v52 * v105;
      v104(v55, v46, v45);
      if (v46 >= 1)
        break;
LABEL_96:
      v52 = v107;
      v41 = v103;
      if (v107 >= v103)
        goto LABEL_97;
    }
    v56 = v55;
    v57 = 0;
    v58 = v43 != 0.0;
    if (v43 == 1.0 || v52 != 0)
      v58 = 0;
    v121 = v58;
    v60 = v55 & 3;
    if (v55 <= 0)
      v60 = -(-v55 & 3);
    v109 = 4 - v60;
    v110 = v60;
    v61 = v114;
    v120 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t, float))sub_20E8388C0;
    v124 = (float *(*)(float32x4_t *, uint64_t, float32x4_t *, uint64_t, uint64_t, uint64_t))sub_20E832630;
    __Na = v55;
    while (1)
    {
      v130 = v57;
      v62 = v57 + 128;
      if (v57 + 128 <= v46)
        v63 = 128;
      else
        v63 = v46 - v57;
      v123 = v114 + 4 * v57;
      v64 = v124;
      if ((v63 & 7) != 0)
        v64 = sub_20E84D820;
      v124 = v64;
      v65 = v120;
      if ((v63 & 7) != 0)
        v65 = sub_20E846B90;
      v120 = v65;
      v112(v63, v56, v115 + 4 * v57 * v113, vars0, v128);
      v66 = v130;
      v67 = v63;
      v127 = v63;
      v118 = v62;
      v119 = v61;
      vars8 = v63 + v130;
      if (v63 + v130 >= 4)
      {
        v68 = 0;
        v69 = 0;
        v132 = v63 + v130 - 3;
        v70 = v61;
        v56 = __Na;
        while (2)
        {
          v71 = v69 - v66;
          v72 = v69 & 4;
          if ((v69 & 4) != 0)
            v73 = v69 - v66 - 4;
          else
            v73 = v69 - v66;
          v74 = v73 & ~(v71 >> 63);
          if (v74 > v67)
            goto LABEL_63;
          v75 = v123 + 4 * v69 * v131;
          v76 = (_OWORD *)(v122 + 4 * v69 * v56);
          if (v71 < 0)
          {
            v78 = 0;
            if (v121)
              goto LABEL_54;
          }
          else
          {
            v125 = 16 * (v68 & 1);
            v126 = v122 + 4 * v69 * v56;
            v77 = (char *)&a26 + v125;
            a32 = 0u;
            a33 = 0u;
            a30 = 0u;
            a31 = 0u;
            a28 = 0u;
            a29 = 0u;
            a26 = 0u;
            a27 = 0u;
            if (v67 - v73 >= 8)
              v78 = 8;
            else
              v78 = v67 - v73;
            v124((float32x4_t *)&v128[4 * v73 * v56], (uint64_t)v76, (float32x4_t *)&a26, 8, v78, v56);
            v75 += 4 * v73;
            if (v121)
            {
              v79 = 0;
              v76 = (_OWORD *)v126;
              v80 = v70 + v125 + 4 * v73;
              v56 = __Na;
              v67 = v127;
              do
              {
                if (v72 < v78)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v80 + 4 * v81) = *(float *)&v77[4 * v81] + (float)(*(float *)(v80 + 4 * v81) * v43);
                    ++v81;
                  }
                  while (v72 + v81 < v78);
                }
                ++v72;
                ++v79;
                v77 += 36;
                v80 += v54;
              }
              while (v79 != 4);
              v53 = 16 * v131;
              v66 = v130;
              if (v78 + v74 >= v127)
                goto LABEL_63;
LABEL_54:
              v120((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56, v43);
LABEL_62:
              v56 = __Na;
              v66 = v130;
              v67 = v127;
LABEL_63:
              v69 += 4;
              ++v68;
              v70 += v53;
              if (v69 >= v132)
                goto LABEL_66;
              continue;
            }
            v82 = 0;
            v76 = (_OWORD *)v126;
            v83 = v70 + v125 + 4 * v73;
            v56 = __Na;
            v67 = v127;
            do
            {
              if (v72 < v78)
              {
                v84 = 0;
                do
                {
                  *(float *)(v83 + 4 * v84) = *(float *)(v83 + 4 * v84) + *(float *)&v77[4 * v84];
                  ++v84;
                }
                while (v72 + v84 < v78);
              }
              ++v72;
              ++v82;
              v77 += 36;
              v83 += v54;
            }
            while (v82 != 4);
            v53 = 16 * v131;
            v66 = v130;
            if (v78 + v74 >= v127)
              goto LABEL_63;
          }
          break;
        }
        v124((float32x4_t *)&v128[4 * (v78 + v74) * v56], (uint64_t)v76, (float32x4_t *)(v75 + 4 * v78), v131, v67 - (v78 + v74), v56);
        goto LABEL_62;
      }
      v69 = 0;
      v56 = __Na;
LABEL_66:
      v85 = vars8 <= 0 ? -(-vars8 & 3) : vars8 & 3;
      if (v85)
      {
        v86 = v69 - v66;
        v87 = (v69 - v66) & ~((v69 - v66) >> 63);
        if (v67 > v87)
          break;
      }
LABEL_95:
      v61 = v119 + 512;
      v57 = v118;
      v46 = v111;
      if (v118 >= v111)
        goto LABEL_96;
    }
    v88 = v123 + 4 * v69 * v131;
    v89 = (const float *)(v122 + 4 * v69 * v56);
    if (v86 < 0)
    {
      v91 = 0;
      v97 = 0;
      v98 = 0;
      if (v121)
      {
LABEL_86:
        sub_20E836E9C((float32x4_t *)&v128[4 * v97 * v56 + 4 * v91], v89, v88, v131, v67 - v97, v85, __Na, v43);
LABEL_94:
        v56 = __Na;
        goto LABEL_95;
      }
    }
    else
    {
      a30 = 0u;
      a31 = 0u;
      a28 = 0u;
      a29 = 0u;
      a26 = 0u;
      a27 = 0u;
      if (v67 - v87 >= 8)
        v90 = 8;
      else
        v90 = v67 - v87;
      if (v110)
        v91 = (v87 & 4) * v109;
      else
        v91 = 0;
      v92 = v88 + 4 * v87;
      sub_20E836FCC((float32x4_t *)&v128[4 * v86 * v56 + 4 * v91], (const float *)(v122 + 4 * v69 * v56), (uint64_t)&a26, 8, v90, v85, v56);
      if (v121)
      {
        v56 = __Na;
        if (v85 >= 1)
        {
          v93 = 0;
          v94 = v119 + v108 * v69 + 4 * v87;
          v95 = &a26;
          do
          {
            v96 = 0;
            do
            {
              *(float *)(v94 + 4 * v96) = *((float *)v95 + v96) + (float)(*(float *)(v94 + 4 * v96) * v43);
              ++v96;
            }
            while (v93 + v96 < v85);
            ++v93;
            v95 = (__int128 *)((char *)v95 + 36);
            v94 += v54;
          }
          while (v93 != v85);
        }
        v88 = v92 + 4 * v90;
        v97 = v90 + v87;
        v53 = 16 * v131;
        v67 = v127;
        goto LABEL_86;
      }
      v56 = __Na;
      if (v85 >= 1)
      {
        v99 = 0;
        v100 = v119 + v108 * v69 + 4 * v87;
        v101 = &a26;
        do
        {
          v102 = 0;
          do
          {
            *(float *)(v100 + 4 * v102) = *(float *)(v100 + 4 * v102) + *((float *)v101 + v102);
            ++v102;
          }
          while (v99 + v102 < v85);
          ++v99;
          v101 = (__int128 *)((char *)v101 + 36);
          v100 += v54;
        }
        while (v99 != v85);
      }
      v88 = v92 + 4 * v90;
      v98 = v90 + v87;
      v53 = 16 * v131;
      v67 = v127;
    }
    sub_20E836FCC((float32x4_t *)&v128[4 * v98 * v56 + 4 * v91], v89, v88, v131, v67 - v98, v85, __Na);
    goto LABEL_94;
  }
LABEL_97:
  if (v46 >= 1)
    free(v128);
}

uint64_t sub_20E85FE2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t);

  if (a3 >= 0)
    v20 = a3;
  else
    v20 = a3 + 1;
  v21 = v20 >> 1;
  v22 = a3 - (v20 >> 1);
  if ((_DWORD)a2 == 111)
  {
    v23 = a1 == 121;
    if (a1 == 121)
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))sub_20E833998;
    else
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))sub_20E82E7F8;
    v36 = v24;
    if (v23)
      v25 = a5;
    else
      v25 = a5 + 8 * v21;
    if (v23)
      v26 = a7 + 8 * v21;
    else
      v26 = a7;
    if (v23)
      v27 = v21 * a12;
    else
      v27 = v20 >> 1;
    sub_20E82B78C(111, 112, v22, v22, a4, v25, a6, v26, a8, a11 + 8 * v27, a12);
    v34 = v22;
    v35 = v22;
  }
  else
  {
    v34 = v22 * a8;
    v35 = v22 * a6;
    v28 = a1 == 121;
    if (a1 == 121)
      v29 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))sub_20E833998;
    else
      v29 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))sub_20E82E7F8;
    v36 = v29;
    if (v28)
      v30 = a5;
    else
      v30 = a5 + 8 * v21 * a6;
    if (v28)
      v31 = a7 + 8 * v21 * a8;
    else
      v31 = a7;
    if (v28)
      v32 = v21 * a12;
    else
      v32 = v20 >> 1;
    sub_20E82B78C(112, 111, v22, v22, a4, v30, a6, v31, a8, a11 + 8 * v32, a12);
  }
  v36(a2, v21, a4, a5, a6, a7, a8, a11, a9, a10, a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t))v36)(a2, v21, a4, a5 + 8 * v35, a6, a7 + 8 * v34, a8, a11 + 8 * v22 + 8 * v22 * a12, a9, a10, a12);
}

void sub_20E860010(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double *a11, uint64_t a12)
{
  BOOL v15;
  _BOOL4 v16;
  double *v20;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  double *v39;

  if (a3)
  {
    v15 = a9 == 0.0 || a4 == 0;
    v16 = v15;
    if (!v16 || a10 != 1.0)
    {
      v20 = a11;
      if (v16)
      {
        sub_20E856278(a1, a3, a11, a12, a10);
      }
      else
      {
        if (a10 == 0.0)
          sub_20E856278(a1, a3, a11, a12, a10);
        if (a3 > 45 || a4 >= 46)
        {
          sub_20E85FE2C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, a12);
          sub_20E85FE2C(a1, a2, a3, a4, a7, a8, a5, a6, a9, 1.0, (uint64_t)a11, a12);
        }
        else
        {
          v26 = malloc_type_malloc(8 * a3 * a3, 0x741A492EuLL);
          if ((_DWORD)a2 == 111)
          {
            v27 = v26;
            sub_20E82B78C(111, 112, a3, a3, a4, a5, a6, a7, a8, (uint64_t)v26, a3);
          }
          else
          {
            v27 = v26;
            sub_20E82B78C(112, 111, a3, a3, a4, a5, a6, a7, a8, (uint64_t)v26, a3);
          }
          if (a1 == 121)
          {
            v28 = v27;
            if (a3 >= 1)
            {
              v29 = 0;
              v30 = 8 * a3;
              v31 = 1;
              v32 = (double *)v27;
              v33 = (double *)v27;
              do
              {
                v34 = 0;
                v35 = v33;
                do
                {
                  v20[v34] = v32[v34] + v20[v34] * a10 + *v35;
                  ++v34;
                  v35 = (double *)((char *)v35 + v30);
                }
                while (v31 != v34);
                ++v29;
                ++v31;
                ++v33;
                v32 = (double *)((char *)v32 + v30);
                v20 += a12;
              }
              while (v29 != a3);
            }
          }
          else
          {
            v28 = v27;
            if (a3 >= 1)
            {
              v36 = 0;
              v37 = (double *)v27;
              do
              {
                v38 = 0;
                v39 = v37;
                do
                {
                  v20[v38] = v37[v38] + v20[v38] * a10 + *v39;
                  ++v38;
                  v39 += a3;
                }
                while (v36 + v38 < a3);
                ++v36;
                v37 += a3 + 1;
                v20 += a12 + 1;
              }
              while (v36 != a3);
            }
          }
          free(v28);
        }
      }
    }
  }
}

uint64_t CV3DMLModelCreate(_QWORD *a1, void *a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  void **v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  BOOL v13;
  BOOL v14;
  _QWORD *v16;
  std::string *v17;
  void *__dst[2];
  uint64_t v20;
  void *v21[2];
  char v22;
  std::string __str;
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  uint64_t v33;
  unsigned __int8 v34;
  void *__p[2];
  char v36;
  void *v37[2];
  unsigned __int8 v38;
  char v39;
  _QWORD v40[72];
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  v36 = 4;
  strcpy((char *)__p, "name");
  sub_20E8607A8((uint64_t)v37, a2, (uint64_t *)__p);
  if (v36 < 0)
    operator delete(__p[0]);
  v31 = 7;
  strcpy((char *)v30, "version");
  sub_20E8607A8((uint64_t)v32, a2, (uint64_t *)v30);
  if (v31 < 0)
    operator delete(v30[0]);
  v26 = 4;
  strcpy((char *)v25, "type");
  sub_20E8607A8((uint64_t)v27, a2, (uint64_t *)v25);
  if (v26 < 0)
    operator delete(v25[0]);
  v22 = 4;
  strcpy((char *)v21, "path");
  sub_20E8607A8((uint64_t)&__str, a2, (uint64_t *)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  v4 = v34;
  v5 = 2;
  if (v39 && v34 && v29 && v24)
  {
    if (SHIBYTE(v33) < 0)
    {
      sub_20E860C04(__dst, v32[0], (unint64_t)v32[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v32;
      v20 = v33;
    }
    if (v20 >= 0)
      v6 = __dst;
    else
      v6 = (void **)__dst[0];
    sscanf((const char *)v6, "%d.%d.%d", &v41, (char *)&v41 + 4, &v42);
    v7 = v38;
    if ((v38 & 0x80u) != 0)
      v7 = (unint64_t)v37[1];
    if (v7 == 25)
    {
      v8 = v37;
      if ((v38 & 0x80u) != 0)
        v8 = (void **)v37[0];
      v9 = *v8;
      v10 = v8[1];
      v11 = v8[2];
      v12 = *((unsigned __int8 *)v8 + 24);
      v13 = v9 == (void *)0x6E755F656E656373 && v10 == (void *)0x646E617473726564;
      v14 = v13 && v11 == (void *)0x65646F6D5F676E69;
      if (v14 && v12 == 108)
        goto LABEL_37;
    }
    if (sub_20E860918((const void **)v37, "object_region_proposal_model"))
    {
LABEL_37:
      v5 = 4;
      if (v41 <= 3 && !HIDWORD(v41))
      {
        if (sub_20E860918((const void **)v27, "espresso_model_path"))
        {
          sub_20E860998(v40);
          if (v40[17])
          {
            v16 = (_QWORD *)operator new();
            v16[1] = 0;
            v16[2] = 0;
            *a1 = v16;
            *v16 = v41;
            *((_DWORD *)v16 + 2) = v42;
            v17 = (std::string *)operator new();
            v17->__r_.__value_.__r.__words[0] = 0;
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v16[2] = v17;
            std::string::operator=(v17, &__str);
            v5 = 0;
          }
          else
          {
            v5 = 6;
          }
          sub_20E860ABC(v40);
        }
        else
        {
          v5 = 5;
        }
      }
    }
    else
    {
      v5 = 3;
    }
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
  }
  if (v24 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v29 && v28 < 0)
    operator delete(v27[0]);
  if (v4 && SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (v39 && (char)v38 < 0)
    operator delete(v37[0]);
  return v5;
}

void sub_20E8606B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59)
{
  sub_20E860ABC(&a59);
  if (a18 < 0)
    operator delete(__p);
  if (a28 && a27 < 0)
    operator delete(a22);
  if (a38 && a37 < 0)
    operator delete(a32);
  if (a48 && a47 < 0)
    operator delete(a42);
  if (a58)
  {
    if (a57 < 0)
      operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void sub_20E8607A8(uint64_t a1, void *a2, uint64_t *a3)
{
  id v5;
  void *v6;
  void *v7;
  const char *v8;
  size_t v9;
  size_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 __dst;
  unint64_t v16;

  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a3);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v5 = a2;
  objc_msgSend(v5, "valueForKey:", v14);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = (const char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    v9 = strlen(v8);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_dst = (__int128 *)operator new(v12 + 1);
      *((_QWORD *)&__dst + 1) = v10;
      v16 = v13 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v16) = v9;
      p_dst = &__dst;
      if (!v9)
        goto LABEL_13;
    }
    memmove(p_dst, v8, v10);
LABEL_13:
    *((_BYTE *)p_dst + v10) = 0;
    *(_OWORD *)a1 = __dst;
    *(_QWORD *)(a1 + 16) = v16;
    *(_BYTE *)(a1 + 24) = 1;
    goto LABEL_14;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_14:

}

void sub_20E8608E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_20E8608FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

BOOL sub_20E860918(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

_QWORD *sub_20E860998(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x212BC5B40](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20E860A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212BC6290](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E860ABC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212BC5B4C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x212BC6290](a1 + 53);
  return a1;
}

uint64_t CV3DMLModelRelease(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      MEMORY[0x212BC6398](v1, 0x1012C40EC159624);
    }
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20E860B7C()
{
  sub_20E860B90("basic_string");
}

void sub_20E860B90(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20E860BE0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C9AA9F8, MEMORY[0x24BEDAAF0]);
}

void sub_20E860BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20E860BE0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *sub_20E860C04(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void *CV3DSLAMJasperPointCloudCreateFromADPointCloud(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "length"))
  {
    v3 = operator new(0x200uLL, MEMORY[0x24BEDB6B8]);
    v4 = v3;
    if (v3)
      sub_20E861408((uint64_t)v3, v2);

    return v4;
  }
  else
  {

    return 0;
  }
}

void sub_20E860D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *CV3DLuxEstimationSessionCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = operator new(0x10uLL, MEMORY[0x24BEDB6B8]);
  v1 = v0;
  if (v0)
  {
    *v0 = 0;
    v0[1] = 0;
    nullsub_1(v0);
    *((_DWORD *)v1 + 2) = 1;
    *v1 = &unk_24C9B1E20;
  }
  return v1;
}

uint64_t sub_20E860D6C(void *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6380](v1, MEMORY[0x24BEDB6B8]);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void sub_20E860DA4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_20E860DB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 496))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 480);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E86177C((_QWORD *)(a1 + 200));
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(void **)(a1 + 16);
    if (v6 != v5)
    {
      do
      {
        if (*(_QWORD *)(v6 - 104))
        {
          v8 = *(void **)(v6 - 120);
          if ((void *)(v6 - 96) != v8)
            operator delete(v8);
        }
        v6 -= 120;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_20E860E84(uint64_t a1)
{
  sub_20E860DB8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E860EAC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E860ED0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::runtime_error *exception;
  std::runtime_error *v11;
  std::string v12;
  std::__shared_weak_count *v13;

  v4 = (void *)MEMORY[0x212BC6CE0]();
  objc_msgSend(MEMORY[0x24BE05F70], "makeWithDataBuffer:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&v12, "Unable to create ADJasperPointCloud from the given CVDataBufferRef");
    std::runtime_error::runtime_error(exception, &v12);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9AB780;
    __cxa_throw(exception, (struct type_info *)&unk_24C9AB798, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!objc_msgSend(v5, "length"))
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E8610C0(&v12, "CVDataBufferRef contains no points");
    std::runtime_error::runtime_error(v11, &v12);
    v11->__vftable = (std::runtime_error_vtbl *)&off_24C9AB780;
    __cxa_throw(v11, (struct type_info *)&unk_24C9AB798, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_20E8A7834(v6, (uint64_t)&v12);
  sub_20EAAB5EC((uint64_t)&v12, a2);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20E86177C(&v12);

  objc_autoreleasePoolPop(v4);
}

void sub_20E86104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v16);

  _Unwind_Resume(a1);
}

_QWORD *sub_20E8610C0(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_20E861170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  char v60;
  char v61;

  sub_20E860ED0(a2, (uint64_t)&v20);
  *(_QWORD *)(a1 + 8) = v20;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v3 = v22;
  v4 = v23;
  v22 = 0;
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = v25;
  v6 = v27;
  *(_OWORD *)(a1 + 80) = v26;
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = v29;
  *(_BYTE *)(a1 + 124) = v30;
  *(_BYTE *)(a1 + 192) = 0;
  if (v35)
  {
    v7 = v32;
    *(_OWORD *)(a1 + 128) = v31;
    *(_OWORD *)(a1 + 144) = v7;
    v8 = v34;
    *(_OWORD *)(a1 + 160) = v33;
    *(_OWORD *)(a1 + 176) = v8;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (!v61)
  {
    *(_DWORD *)(a1 + 504) = 1;
    *(_QWORD *)a1 = &off_24C9AB7C0;
    return a1;
  }
  v9 = v38;
  *(_QWORD *)(a1 + 200) = v36;
  *(_QWORD *)(a1 + 224) = v9;
  v10 = v42;
  *(_QWORD *)(a1 + 248) = v40;
  *(_OWORD *)(a1 + 208) = v37;
  v37 = 0uLL;
  *(_OWORD *)(a1 + 232) = v39;
  v38 = 0;
  v39 = 0uLL;
  v40 = 0;
  *(_OWORD *)(a1 + 256) = v41;
  *(_QWORD *)(a1 + 272) = v10;
  v41 = 0uLL;
  *(_OWORD *)(a1 + 280) = v43;
  v11 = v46;
  *(_QWORD *)(a1 + 296) = v44;
  v42 = 0;
  v43 = 0uLL;
  v44 = 0;
  *(_OWORD *)(a1 + 304) = v45;
  *(_QWORD *)(a1 + 320) = v11;
  v45 = 0uLL;
  v46 = 0;
  *(_OWORD *)(a1 + 328) = v47;
  v12 = v50;
  *(_QWORD *)(a1 + 344) = v48;
  v47 = 0uLL;
  *(_OWORD *)(a1 + 352) = v49;
  *(_QWORD *)(a1 + 368) = v12;
  v49 = 0uLL;
  v50 = 0;
  *(_OWORD *)(a1 + 376) = v51;
  v13 = v54;
  *(_QWORD *)(a1 + 392) = v52;
  v48 = 0;
  v51 = 0uLL;
  v52 = 0;
  *(_OWORD *)(a1 + 400) = v53;
  *(_QWORD *)(a1 + 416) = v13;
  v53 = 0uLL;
  v54 = 0;
  *(_OWORD *)(a1 + 424) = v55;
  v14 = v58;
  *(_QWORD *)(a1 + 440) = v56;
  v55 = 0uLL;
  *(_OWORD *)(a1 + 448) = v57;
  *(_QWORD *)(a1 + 464) = v14;
  v57 = 0uLL;
  v58 = 0;
  *(_OWORD *)(a1 + 472) = v59;
  v59 = 0uLL;
  v56 = 0;
  *(_BYTE *)(a1 + 488) = v60;
  *(_BYTE *)(a1 + 496) = 1;
  *(_DWORD *)(a1 + 504) = 1;
  *(_QWORD *)a1 = &off_24C9AB7C0;
  sub_20E86177C(&v36);
  v15 = (char *)__p[0];
  if (!__p[0])
    return a1;
  v16 = (char *)__p[1];
  v17 = __p[0];
  if (__p[1] != __p[0])
  {
    do
    {
      if (*((_QWORD *)v16 - 13))
      {
        v18 = (char *)*((_QWORD *)v16 - 15);
        if (v16 - 96 != v18)
          operator delete(v18);
      }
      v16 -= 120;
    }
    while (v16 != v15);
    v17 = __p[0];
  }
  __p[1] = v15;
  operator delete(v17);
  return a1;
}

uint64_t sub_20E861408(uint64_t a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  char *v22;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  char v65;
  _QWORD v66[35];
  std::__shared_weak_count *v67;

  v3 = a2;
  sub_20E8A7834(v3, (uint64_t)v66);
  sub_20EAAB5EC((uint64_t)v66, (uint64_t)&v24);
  v4 = v67;
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_20E86177C(v66);
  *(_QWORD *)(a1 + 8) = v24;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v7 = v26;
  v8 = v27;
  v26 = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v29;
  v10 = v31;
  *(_OWORD *)(a1 + 80) = v30;
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 112) = v32;
  *(_OWORD *)(a1 + 48) = v28;
  *(_OWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 120) = v33;
  *(_BYTE *)(a1 + 124) = v34;
  *(_BYTE *)(a1 + 192) = 0;
  if (v39)
  {
    v11 = v36;
    *(_OWORD *)(a1 + 128) = v35;
    *(_OWORD *)(a1 + 144) = v11;
    v12 = v38;
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 176) = v12;
    *(_BYTE *)(a1 + 192) = 1;
  }
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  if (v65)
  {
    v13 = v42;
    *(_QWORD *)(a1 + 200) = v40;
    *(_QWORD *)(a1 + 224) = v13;
    v14 = v46;
    *(_QWORD *)(a1 + 248) = v44;
    *(_OWORD *)(a1 + 208) = v41;
    v41 = 0uLL;
    *(_OWORD *)(a1 + 232) = v43;
    v42 = 0;
    v43 = 0uLL;
    v44 = 0;
    *(_OWORD *)(a1 + 256) = v45;
    *(_QWORD *)(a1 + 272) = v14;
    v45 = 0uLL;
    *(_OWORD *)(a1 + 280) = v47;
    v15 = v50;
    *(_QWORD *)(a1 + 296) = v48;
    v46 = 0;
    v47 = 0uLL;
    v48 = 0;
    *(_OWORD *)(a1 + 304) = v49;
    *(_QWORD *)(a1 + 320) = v15;
    v49 = 0uLL;
    v50 = 0;
    *(_OWORD *)(a1 + 328) = v51;
    v16 = v54;
    *(_QWORD *)(a1 + 344) = v52;
    v51 = 0uLL;
    *(_OWORD *)(a1 + 352) = v53;
    *(_QWORD *)(a1 + 368) = v16;
    v53 = 0uLL;
    v54 = 0;
    *(_OWORD *)(a1 + 376) = v55;
    v17 = v58;
    *(_QWORD *)(a1 + 392) = v56;
    v52 = 0;
    v55 = 0uLL;
    v56 = 0;
    *(_OWORD *)(a1 + 400) = v57;
    *(_QWORD *)(a1 + 416) = v17;
    v57 = 0uLL;
    v58 = 0;
    *(_OWORD *)(a1 + 424) = v59;
    v18 = v62;
    *(_QWORD *)(a1 + 440) = v60;
    v59 = 0uLL;
    *(_OWORD *)(a1 + 448) = v61;
    *(_QWORD *)(a1 + 464) = v18;
    v61 = 0uLL;
    v62 = 0;
    *(_OWORD *)(a1 + 472) = v63;
    v63 = 0uLL;
    v60 = 0;
    *(_BYTE *)(a1 + 488) = v64;
    *(_BYTE *)(a1 + 496) = 1;
    *(_DWORD *)(a1 + 504) = 1;
    *(_QWORD *)a1 = &off_24C9AB7C0;
    sub_20E86177C(&v40);
    v19 = (char *)__p[0];
    if (__p[0])
    {
      v20 = (char *)__p[1];
      v21 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((_QWORD *)v20 - 13))
          {
            v22 = (char *)*((_QWORD *)v20 - 15);
            if (v20 - 96 != v22)
              operator delete(v22);
          }
          v20 -= 120;
        }
        while (v20 != v19);
        v21 = __p[0];
      }
      __p[1] = v19;
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 504) = 1;
    *(_QWORD *)a1 = &off_24C9AB7C0;
  }

  return a1;
}

void sub_20E8616FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  sub_20E861714(&a72);
  sub_20E860DA4(a1);
}

_QWORD *sub_20E861714(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    return sub_20E86177C(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return sub_20E86177C(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return sub_20E86177C(a1);
}

_QWORD *sub_20E86177C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[25];
  if (v4)
  {
    a1[26] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[22];
  if (v5)
  {
    a1[23] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[19];
  if (v6)
  {
    a1[20] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[16];
  if (v7)
  {
    a1[17] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[10];
  if (v9)
  {
    a1[11] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[4];
  if (v11)
  {
    a1[5] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

void sub_20E86184C(_QWORD *a1@<X8>)
{
  const char *v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  NSTemporaryDirectory();
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = (const char *)objc_msgSend(v8, "UTF8String");
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    a1[1] = v4;
    a1[2] = v6 | 0x8000000000000000;
    *a1 = v7;
    a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v3;
    if (!v3)
      goto LABEL_9;
  }
  memmove(a1, v2, v4);
LABEL_9:
  *((_BYTE *)a1 + v4) = 0;

}

void sub_20E86190C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20E861920()
{
  uint64_t v0;
  uint64_t (***v1)();
  int v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  NSObject *v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  char *__s;
  _QWORD v88[3];
  int v89;
  const char *v90;
  int v91;
  const char *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *__dst[2];
  int64_t v96;
  void *__p[2];
  _QWORD v98[3];
  const void *v99;
  uint64_t v100;
  const void *v101;
  unint64_t v102;
  void *v103;
  char v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  void *v109[2];
  uint64_t v110;
  uint64_t (**v111)();
  char *v112[3];
  char *v113[3];
  uint64_t v114[3];
  void *__src[2];
  uint64_t v116;
  char v117;
  _QWORD v118[4];
  __int128 v119;
  std::__shared_weak_count *v120;
  char *v121;
  std::__shared_weak_count *v122;
  _QWORD *v123;
  __int128 v124;
  _QWORD v125[1428];
  _BYTE v126[104];
  _BYTE v127[24];
  __int128 v128;
  void *v129[2];
  unint64_t v130;
  char v131;
  uint64_t v132;

  v0 = MEMORY[0x24BDAC7A8]();
  v132 = *MEMORY[0x24BDAC8D0];
  sub_20E875F04("com.apple.applecv3d.slam.config_override", 0x28uLL, (uint64_t)__src);
  if (!v117)
    return;
  sub_20E862AA8();
  if (!v117)
    sub_20E866B34();
  if (SHIBYTE(v116) < 0)
  {
    sub_20E860C04(v109, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v109 = *(_OWORD *)__src;
    v110 = v116;
  }
  sub_210104B5C((const void **)v109, v127);
  v1 = sub_21022700C();
  HIBYTE(v98[0]) = 3;
  LODWORD(__p[0]) = 604960;
  sub_2100F6084((uint64_t **)v127, (uint64_t)v126, (uint64_t)v1, (uint64_t)__p, &v111);
  if (SHIBYTE(v98[0]) < 0)
    operator delete(__p[0]);
  v111 = off_24C9AE360;
  sub_20E866B68((uint64_t)v114, v114[1]);
  sub_20E866BE0((uint64_t)v113, v113[1]);
  sub_20E866C40((uint64_t)v112, v112[1]);
  if ((v127[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v127);
    if ((SHIBYTE(v110) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_17:
    operator delete(v109[0]);
    goto LABEL_10;
  }
  if (SHIBYTE(v110) < 0)
    goto LABEL_17;
LABEL_10:
  sub_20E862C24(v0 + 8, v125);
  sub_20E863344(&v108);
  if (**(int **)(v108 + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(v108 + 72);
    v3 = sub_21021D818(&v108);
    v4 = v3;
    if (v2 || v3)
    {
      sub_20E863438((uint64_t)__p);
      if ((v106 & 0x10) != 0)
      {
        v7 = v105;
        if (v105 < v102)
        {
          v105 = v102;
          v7 = v102;
        }
        v8 = v101;
        v5 = v7 - (_QWORD)v101;
        if (v7 - (unint64_t)v101 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_72;
      }
      else
      {
        if ((v106 & 8) == 0)
        {
          v5 = 0;
          HIBYTE(v96) = 0;
          v6 = __dst;
          goto LABEL_28;
        }
        v8 = v99;
        v5 = v100 - (_QWORD)v99;
        if ((unint64_t)(v100 - (_QWORD)v99) > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
          sub_20E860B7C();
      }
      if (v5 >= 0x17)
      {
        v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v9 = v5 | 7;
        v10 = v9 + 1;
        v6 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v5;
        v96 = v10 | 0x8000000000000000;
        __dst[0] = v6;
      }
      else
      {
        HIBYTE(v96) = v5;
        v6 = __dst;
        if (!v5)
        {
LABEL_28:
          *((_BYTE *)v6 + v5) = 0;
          v88[0] = &v108;
          v88[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v88[2] = std::chrono::system_clock::now().__d_.__rep_;
          v89 = 3;
          v90 = "unknown file";
          v91 = 122;
          v93 = 0;
          v94 = 0;
          v92 = "unknown function";
          if (v96 >= 0)
            v11 = __dst;
          else
            v11 = (void **)__dst[0];
          v12 = *(_QWORD *)v88[0];
          v13 = (const char *)(*(_QWORD *)v88[0] + 16);
          v86 = v13;
          __s = (char *)v11;
          if (*(char *)(*(_QWORD *)v88[0] + 39) < 0)
          {
            v13 = *(const char **)(v12 + 16);
            v14 = *(_QWORD *)(v12 + 24);
            v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v16 & 1) != 0)
              goto LABEL_35;
          }
          else
          {
            v14 = *(unsigned __int8 *)(*(_QWORD *)v88[0] + 39);
            v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v15 & 1) != 0)
              goto LABEL_35;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v127);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v127);
            if ((_BYTE)v128 && (v127[23] & 0x80000000) != 0)
              operator delete(*(void **)v127);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_35:
          if (byte_254A4A4F8[23] >= 0)
            v17 = byte_254A4A4F8;
          else
            v17 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v18 = byte_254A4A4F8[23];
          else
            v18 = *(_QWORD *)&byte_254A4A4F8[8];
          v19 = os_log_create(v17, v13);
          *(_QWORD *)v127 = v19;

          v20 = &v127[8];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v18 >= 0x17)
          {
            v21 = v2;
            v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v22 = v18 | 7;
            v23 = v22 + 1;
            v20 = operator new(v22 + 1);
            *(_QWORD *)&v127[16] = v18;
            *(_QWORD *)&v128 = v23 | 0x8000000000000000;
            *(_QWORD *)&v127[8] = v20;
            v2 = v21;
          }
          else
          {
            BYTE7(v128) = v18;
            if (!v18)
            {
LABEL_49:
              v20[v18] = 0;
              BYTE8(v128) = 1;
              v24 = v129;
              if (v14 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v14 >= 0x17)
              {
                v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v14 | 7) != 0x17)
                  v25 = v14 | 7;
                v26 = v25 + 1;
                v24 = (void **)operator new(v25 + 1);
                v129[1] = (void *)v14;
                v130 = v26 | 0x8000000000000000;
                v129[0] = v24;
              }
              else
              {
                HIBYTE(v130) = v14;
                if (!v14)
                  goto LABEL_57;
              }
              memmove(v24, v13, v14);
LABEL_57:
              *((_BYTE *)v24 + v14) = 0;
              v131 = 1;
              v27 = objc_retainAutorelease(*(id *)v127);
              if (v131 && SHIBYTE(v130) < 0)
                operator delete(v129[0]);
              if (BYTE8(v128) && SBYTE7(v128) < 0)
                operator delete(*(void **)&v127[8]);

              v28 = sub_21021D650(3u);
              v29 = v27;
              v30 = v29;
              if (!v4 || !*(_QWORD *)(v4 + 8))
              {
                os_log_type_enabled(v29, v28);
                *(_DWORD *)v127 = 136315138;
                *(_QWORD *)&v127[4] = __s;
                v37 = (void *)_os_log_send_and_compose_impl();
                if (v37)
                  free(v37);
                goto LABEL_138;
              }
              v31 = _os_log_pack_size();
              v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
              v33 = (std::__shared_weak_count *)operator new();
              v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v33->__shared_owners_ = 0;
              v33->__shared_weak_owners_ = 0;
              v33[1].__vftable = v32;
              *(_QWORD *)&v119 = v32;
              *((_QWORD *)&v119 + 1) = v32;
              v122 = 0;
              v120 = v33;
              v121 = 0;
              v34 = strlen(__s);
              if (v34 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v35 = v34;
              if (v34 >= 0x17)
              {
                v38 = v2;
                v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v34 | 7) != 0x17)
                  v39 = v34 | 7;
                v40 = v39 + 1;
                v36 = operator new(v39 + 1);
                *((_QWORD *)&v124 + 1) = v40 | 0x8000000000000000;
                v123 = v36;
                *(_QWORD *)&v124 = v35;
                v2 = v38;
              }
              else
              {
                HIBYTE(v124) = v34;
                v36 = &v123;
                if (!v34)
                {
LABEL_77:
                  *((_BYTE *)v36 + v35) = 0;
                  v118[2] = v124;
                  *(_QWORD *)((char *)&v118[2] + 7) = *(_QWORD *)((char *)&v124 + 7);
                  v118[0] = off_24C9ABC20;
                  v118[1] = v123;
                  HIBYTE(v118[3]) = HIBYTE(v124);
                  v41 = operator new(0x38uLL);
                  v41[1] = 0;
                  v41[2] = 0;
                  *v41 = &off_24C9ABBD0;
                  v41[3] = off_24C9ABC20;
                  *((_OWORD *)v41 + 2) = *(_OWORD *)&v118[1];
                  v41[6] = v118[3];
                  memset(&v118[1], 0, 24);
                  v42 = v122;
                  v121 = (char *)(v41 + 3);
                  v122 = (std::__shared_weak_count *)v41;
                  if (v42)
                  {
                    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(p_shared_owners);
                    while (__stlxr(v44 - 1, p_shared_owners));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  if (SHIBYTE(v118[3]) < 0)
                    operator delete((void *)v118[1]);
                  nullsub_1(v118);
                  *(_OWORD *)v127 = v119;
                  v45 = v121;
                  *(_QWORD *)&v127[16] = v120;
                  if (v120)
                  {
                    v46 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v47 = __ldxr(v46);
                    while (__stxr(v47 + 1, v46));
                  }
                  v48 = v122;
                  *(_QWORD *)&v128 = v45;
                  *((_QWORD *)&v128 + 1) = v122;
                  if (v122)
                  {
                    v49 = (unint64_t *)&v122->__shared_owners_;
                    do
                      v50 = __ldxr(v49);
                    while (__stxr(v50 + 1, v49));
                    v129[0] = v45;
                    do
                      v51 = __ldaxr(v49);
                    while (__stlxr(v51 - 1, v49));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                      std::__shared_weak_count::__release_weak(v48);
                    }
                  }
                  else
                  {
                    v129[0] = v45;
                  }
                  v52 = v120;
                  if (v120)
                  {
                    v53 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  v55 = *(_QWORD *)v127;
                  if (*((char *)v129[0] + 31) >= 0)
                    v56 = (char *)v129[0] + 8;
                  else
                    v56 = (char *)*((_QWORD *)v129[0] + 1);
                  v57 = _os_log_pack_fill();
                  *(_DWORD *)v57 = 136315138;
                  *(_QWORD *)(v57 + 4) = v56;
                  v58 = operator new();
                  v59 = *(unsigned __int8 *)(v12 + 39);
                  v60 = v86;
                  if ((v59 & 0x80u) != 0)
                  {
                    v60 = *(const char **)(v12 + 16);
                    v59 = *(_QWORD *)(v12 + 24);
                  }
                  *(_QWORD *)v58 = v55;
                  *(_OWORD *)(v58 + 8) = *(_OWORD *)&v127[8];
                  *(_QWORD *)&v127[8] = 0;
                  *(_QWORD *)&v127[16] = 0;
                  *(_OWORD *)(v58 + 24) = v128;
                  v128 = 0uLL;
                  *(_QWORD *)(v58 + 40) = v60;
                  *(_QWORD *)(v58 + 48) = v59;
                  *(_BYTE *)(v58 + 56) = v28;
                  v123 = 0;
                  *(_QWORD *)&v119 = v58;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v4 + 8) + 40))(*(_QWORD *)(v4 + 8), &v119);
                  v61 = v119;
                  *(_QWORD *)&v119 = 0;
                  if (v61)
                  {
                    v62 = *(std::__shared_weak_count **)(v61 + 32);
                    if (v62)
                    {
                      v63 = (unint64_t *)&v62->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    v65 = *(std::__shared_weak_count **)(v61 + 16);
                    if (v65)
                    {
                      v66 = (unint64_t *)&v65->__shared_owners_;
                      do
                        v67 = __ldaxr(v66);
                      while (__stlxr(v67 - 1, v66));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                      }
                    }
                    MEMORY[0x212BC6398](v61, 0x10F0C40B62ED6C6);
                    v68 = v123;
                    v123 = 0;
                    if (v68)
                    {
                      v69 = (std::__shared_weak_count *)v68[4];
                      if (v69)
                      {
                        v70 = (unint64_t *)&v69->__shared_owners_;
                        do
                          v71 = __ldaxr(v70);
                        while (__stlxr(v71 - 1, v70));
                        if (!v71)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      v72 = (std::__shared_weak_count *)v68[2];
                      if (v72)
                      {
                        v73 = (unint64_t *)&v72->__shared_owners_;
                        do
                          v74 = __ldaxr(v73);
                        while (__stlxr(v74 - 1, v73));
                        if (!v74)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                      }
                      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
                    }
                  }
                  v75 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
                  if (*((_QWORD *)&v128 + 1))
                  {
                    v76 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
                    do
                      v77 = __ldaxr(v76);
                    while (__stlxr(v77 - 1, v76));
                    if (!v77)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  v78 = *(std::__shared_weak_count **)&v127[16];
                  if (*(_QWORD *)&v127[16])
                  {
                    v79 = (unint64_t *)(*(_QWORD *)&v127[16] + 8);
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
LABEL_138:

                  if (v2)
                  {
                    v81 = (const char *)__dst;
                    if (v96 < 0)
                      v81 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v88, "%s", v81);
                    sub_20E863570((uint64_t)v88);
                  }
                  sub_20E863570((uint64_t)v88);
                  v82 = v94;
                  if (v94)
                  {
                    v83 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  if (SHIBYTE(v96) < 0)
                    operator delete(__dst[0]);
                  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v85 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v98[0] = v85;
                  v98[1] = MEMORY[0x24BEDB848] + 16;
                  if (v104 < 0)
                    operator delete(v103);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v107);
                  goto LABEL_152;
                }
              }
              memcpy(v36, __s, v35);
              goto LABEL_77;
            }
          }
          memmove(v20, v17, v18);
          goto LABEL_49;
        }
      }
      memmove(v6, v8, v5);
      goto LABEL_28;
    }
  }
LABEL_152:
  sub_20E869298((uint64_t)v126);
  sub_20E869418((uint64_t)v125);
  if (v117)
  {
    if (SHIBYTE(v116) < 0)
      operator delete(__src[0]);
  }
}

#error "20E862944: call analysis failed (funcsize=180)"

void sub_20E8629D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  if (LOBYTE(STACK[0x2B0]) && SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20E862A6CLL);
}

uint64_t sub_20E862AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[11424];
  uint64_t v16;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v16 = *MEMORY[0x24BDAC8D0];
  sub_20E86AC88((uint64_t)v15, v4);
  v12 = 0;
  if (v2)
  {
    v11[0] = &off_24C9AB830;
    v11[1] = v2;
    v12 = v11;
    v13[0] = &off_24C9AB830;
    v13[1] = v2;
    v5 = v13;
  }
  else
  {
    v5 = 0;
  }
  v14 = v5;
  sub_20E86D09C(v3, (uint64_t)v15, (uint64_t)v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_9;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_13;
  }
  if (v12)
  {
    v9 = 5;
LABEL_13:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  sub_20E869418((uint64_t)v15);
  return v3;
}

void sub_20E862BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v2;
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list v16;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, va_list);
  v4 = v16;
  if (v16 == v2)
  {
    v5 = 4;
    va_copy(v4, va2);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  sub_21023E024((uint64_t *)va1, (uint64_t *)va);
  sub_20E869418((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_20E862C24(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  uint64_t v33;
  void **v34;
  char v35;
  __int128 v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v49;
  signed __int8 v50;
  __int128 v51;
  void *v52;
  size_t v53;
  void **v54;
  char v55;
  __int128 v56;
  void *v57;
  size_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void **v86;
  char v87;
  __int128 v88;
  void *v89;
  size_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  v4 = (char *)a2 + 9127;
  v5 = (char *)(a1 + 9127);
  memcpy((void *)a1, a2, 0x10AuLL);
  v6 = *((_OWORD *)a2 + 20);
  v8 = *((_OWORD *)a2 + 17);
  v7 = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 320) = v6;
  *(_OWORD *)(a1 + 272) = v8;
  *(_OWORD *)(a1 + 288) = v7;
  v9 = *((_OWORD *)a2 + 24);
  v11 = *((_OWORD *)a2 + 21);
  v10 = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 384) = v9;
  *(_OWORD *)(a1 + 336) = v11;
  *(_OWORD *)(a1 + 352) = v10;
  v12 = *((_OWORD *)a2 + 28);
  v14 = *((_OWORD *)a2 + 25);
  v13 = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 448) = v12;
  *(_OWORD *)(a1 + 400) = v14;
  *(_OWORD *)(a1 + 416) = v13;
  v16 = *((_OWORD *)a2 + 30);
  v15 = *((_OWORD *)a2 + 31);
  v17 = *((_OWORD *)a2 + 29);
  *(_OWORD *)(a1 + 509) = *(_OWORD *)((char *)a2 + 509);
  *(_OWORD *)(a1 + 480) = v16;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 464) = v17;
  sub_20E8676A4(a1 + 528, (uint64_t)(a2 + 66));
  v19 = *(_OWORD *)(a2 + 537);
  v18 = *(_OWORD *)(a2 + 539);
  *(_OWORD *)(a1 + 4280) = *(_OWORD *)(a2 + 535);
  *(_OWORD *)(a1 + 4296) = v19;
  *(_OWORD *)(a1 + 4312) = v18;
  if ((_QWORD *)a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 4328), (char *)a2[541], (char *)a2[542], (uint64_t)(a2[542] - a2[541]) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 4352), (char *)a2[544], (char *)a2[545], (uint64_t)(a2[545] - a2[544]) >> 3);
    v20 = *(_OWORD *)(a2 + 549);
    *(_OWORD *)(a1 + 4376) = *(_OWORD *)(a2 + 547);
    *(_OWORD *)(a1 + 4392) = v20;
    v21 = *(_OWORD *)(a2 + 551);
    v22 = *(_OWORD *)(a2 + 553);
    v23 = *(_OWORD *)(a2 + 555);
    *(_WORD *)(a1 + 4456) = *((_WORD *)a2 + 2228);
    *(_OWORD *)(a1 + 4424) = v22;
    *(_OWORD *)(a1 + 4440) = v23;
    *(_OWORD *)(a1 + 4408) = v21;
    memcpy((void *)(a1 + 4464), a2 + 558, 0x1B0uLL);
    v24 = *((_DWORD *)a2 + 1224);
    *(_DWORD *)(a1 + 4899) = *(_DWORD *)((char *)a2 + 4899);
    *(_DWORD *)(a1 + 4896) = v24;
    sub_20E868260((uint64_t **)(a1 + 4904), (_QWORD *)a2[613], a2 + 614);
  }
  *(_OWORD *)(a1 + 4928) = *((_OWORD *)a2 + 308);
  v25 = *((_OWORD *)a2 + 309);
  v26 = *((_OWORD *)a2 + 310);
  v27 = *((_OWORD *)a2 + 311);
  *(_OWORD *)(a1 + 4992) = *((_OWORD *)a2 + 312);
  *(_OWORD *)(a1 + 4976) = v27;
  *(_OWORD *)(a1 + 4960) = v26;
  *(_OWORD *)(a1 + 4944) = v25;
  v28 = *((_DWORD *)a2 + 1252);
  *(_BYTE *)(a1 + 5012) = *((_BYTE *)a2 + 5012);
  *(_DWORD *)(a1 + 5008) = v28;
  sub_20E866D18(a1 + 5016, (__int128 *)(a2 + 627));
  v29 = *((_OWORD *)a2 + 374);
  *(_OWORD *)(a1 + 5968) = *((_OWORD *)a2 + 373);
  *(_OWORD *)(a1 + 5984) = v29;
  v30 = *((_OWORD *)a2 + 376);
  v31 = *((_OWORD *)a2 + 377);
  v32 = *((_WORD *)a2 + 3024);
  *(_OWORD *)(a1 + 6000) = *((_OWORD *)a2 + 375);
  *(_WORD *)(a1 + 6048) = v32;
  *(_OWORD *)(a1 + 6032) = v31;
  *(_OWORD *)(a1 + 6016) = v30;
  sub_20E866FB4(a1 + 6056, (uint64_t)(a2 + 757));
  sub_20E86751C((size_t *)(a1 + 8864), a2 + 1108);
  v33 = a2[1137];
  *(_OWORD *)(a1 + 9080) = *(_OWORD *)(a2 + 1135);
  *(_QWORD *)(a1 + 9096) = v33;
  if ((_QWORD *)a1 != a2)
  {
    v34 = (void **)(a1 + 9104);
    v35 = *v4;
    if (*v5 < 0)
    {
      if (v35 >= 0)
        v37 = a2 + 1138;
      else
        v37 = (void *)a2[1138];
      if (v35 >= 0)
        v38 = *v4;
      else
        v38 = a2[1139];
      sub_20E867CBC(v34, v37, v38);
    }
    else if (*v4 < 0)
    {
      sub_20E867BF8(v34, (void *)a2[1138], a2[1139]);
    }
    else
    {
      v36 = *((_OWORD *)a2 + 569);
      *(_QWORD *)(a1 + 9120) = a2[1140];
      *(_OWORD *)v34 = v36;
    }
    v5[1] = v4[1];
    v39 = a2[1142];
    *(_DWORD *)(a1 + 9144) = *((_DWORD *)a2 + 2286);
    *(_QWORD *)(a1 + 9136) = v39;
    sub_20E86811C((_QWORD *)(a1 + 9152), (char *)a2[1144], (char *)a2[1145], (uint64_t)(a2[1145] - a2[1144]) >> 3);
  }
  *(_QWORD *)(a1 + 9176) = a2[1147];
  v40 = *((_OWORD *)a2 + 574);
  *(_BYTE *)(a1 + 9200) = *((_BYTE *)a2 + 9200);
  *(_OWORD *)(a1 + 9184) = v40;
  v41 = *(_OWORD *)(a2 + 1163);
  v43 = *(_OWORD *)(a2 + 1157);
  v42 = *(_OWORD *)(a2 + 1159);
  *(_OWORD *)(a1 + 9288) = *(_OWORD *)(a2 + 1161);
  *(_OWORD *)(a1 + 9304) = v41;
  *(_OWORD *)(a1 + 9256) = v43;
  *(_OWORD *)(a1 + 9272) = v42;
  v45 = *(_OWORD *)(a2 + 1167);
  v44 = *(_OWORD *)(a2 + 1169);
  v46 = *(_OWORD *)(a2 + 1165);
  *(_OWORD *)(a1 + 9361) = *(_OWORD *)((char *)a2 + 9361);
  *(_OWORD *)(a1 + 9336) = v45;
  *(_OWORD *)(a1 + 9352) = v44;
  *(_OWORD *)(a1 + 9320) = v46;
  v47 = *(_OWORD *)(a2 + 1151);
  v48 = *(_OWORD *)(a2 + 1155);
  *(_OWORD *)(a1 + 9224) = *(_OWORD *)(a2 + 1153);
  *(_OWORD *)(a1 + 9240) = v48;
  *(_OWORD *)(a1 + 9208) = v47;
  if ((_QWORD *)a1 != a2)
  {
    v49 = (void **)(a1 + 9384);
    v50 = v4[280];
    if (v5[280] < 0)
    {
      if (v50 >= 0)
        v52 = a2 + 1173;
      else
        v52 = (void *)a2[1173];
      if (v50 >= 0)
        v53 = v4[280];
      else
        v53 = a2[1174];
      sub_20E867CBC(v49, v52, v53);
    }
    else if (v4[280] < 0)
    {
      sub_20E867BF8(v49, (void *)a2[1173], a2[1174]);
    }
    else
    {
      v51 = *(_OWORD *)(a2 + 1173);
      *(_QWORD *)(a1 + 9400) = a2[1175];
      *(_OWORD *)v49 = v51;
    }
  }
  *(_QWORD *)(a1 + 9408) = a2[1176];
  *(_WORD *)(a1 + 9416) = *((_WORD *)a2 + 4708);
  if ((_QWORD *)a1 != a2)
  {
    v54 = (void **)(a1 + 9424);
    v55 = *((_BYTE *)a2 + 9447);
    if (*(char *)(a1 + 9447) < 0)
    {
      if (v55 >= 0)
        v57 = a2 + 1178;
      else
        v57 = (void *)a2[1178];
      if (v55 >= 0)
        v58 = *((unsigned __int8 *)a2 + 9447);
      else
        v58 = a2[1179];
      sub_20E867CBC(v54, v57, v58);
    }
    else if ((*((_BYTE *)a2 + 9447) & 0x80) != 0)
    {
      sub_20E867BF8(v54, (void *)a2[1178], a2[1179]);
    }
    else
    {
      v56 = *((_OWORD *)a2 + 589);
      *(_QWORD *)(a1 + 9440) = a2[1180];
      *(_OWORD *)v54 = v56;
    }
  }
  v59 = a2[1183];
  *(_OWORD *)(a1 + 9448) = *(_OWORD *)(a2 + 1181);
  *(_QWORD *)(a1 + 9464) = v59;
  v60 = *((_OWORD *)a2 + 592);
  *(_BYTE *)(a1 + 9488) = *((_BYTE *)a2 + 9488);
  *(_OWORD *)(a1 + 9472) = v60;
  sub_20E866D18(a1 + 9496, (__int128 *)(a2 + 1187));
  v61 = *((_OWORD *)a2 + 654);
  *(_OWORD *)(a1 + 10448) = *((_OWORD *)a2 + 653);
  *(_OWORD *)(a1 + 10464) = v61;
  v62 = *((_OWORD *)a2 + 656);
  v63 = *((_OWORD *)a2 + 657);
  v64 = *((_OWORD *)a2 + 658);
  *(_OWORD *)(a1 + 10480) = *((_OWORD *)a2 + 655);
  *(_OWORD *)(a1 + 10528) = v64;
  *(_OWORD *)(a1 + 10512) = v63;
  *(_OWORD *)(a1 + 10496) = v62;
  v65 = *(_OWORD *)((char *)a2 + 10588);
  v66 = *((_OWORD *)a2 + 660);
  v67 = *((_OWORD *)a2 + 661);
  *(_OWORD *)(a1 + 10544) = *((_OWORD *)a2 + 659);
  *(_OWORD *)(a1 + 10588) = v65;
  *(_OWORD *)(a1 + 10576) = v67;
  *(_OWORD *)(a1 + 10560) = v66;
  v68 = *(_DWORD *)((char *)a2 + 10615);
  *(_QWORD *)(a1 + 10608) = a2[1326];
  *(_DWORD *)(a1 + 10615) = v68;
  v69 = *((_OWORD *)a2 + 665);
  *(_OWORD *)(a1 + 10624) = *((_OWORD *)a2 + 664);
  *(_OWORD *)(a1 + 10640) = v69;
  sub_20E869118(a1 + 10656, a2 + 1332);
  *(_WORD *)(a1 + 10688) = *((_WORD *)a2 + 5344);
  if ((_QWORD *)a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 10696), (char *)a2[1337], (char *)a2[1338], (uint64_t)(a2[1338] - a2[1337]) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 10720), (char *)a2[1340], (char *)a2[1341], (uint64_t)(a2[1341] - a2[1340]) >> 3);
  }
  v70 = a2[1343];
  *(_QWORD *)(a1 + 10749) = *(_QWORD *)((char *)a2 + 10749);
  *(_QWORD *)(a1 + 10744) = v70;
  *(_QWORD *)(a1 + 10760) = a2[1345];
  v71 = *((_OWORD *)a2 + 673);
  v72 = *((_OWORD *)a2 + 674);
  v73 = *((_OWORD *)a2 + 675);
  *(_OWORD *)(a1 + 10816) = *((_OWORD *)a2 + 676);
  *(_OWORD *)(a1 + 10800) = v73;
  *(_OWORD *)(a1 + 10784) = v72;
  *(_OWORD *)(a1 + 10768) = v71;
  v74 = *((_OWORD *)a2 + 677);
  v75 = *((_OWORD *)a2 + 678);
  v76 = *((_OWORD *)a2 + 679);
  *(_OWORD *)(a1 + 10880) = *((_OWORD *)a2 + 680);
  *(_OWORD *)(a1 + 10864) = v76;
  *(_OWORD *)(a1 + 10848) = v75;
  *(_OWORD *)(a1 + 10832) = v74;
  v77 = *((_OWORD *)a2 + 681);
  v78 = *((_OWORD *)a2 + 682);
  v79 = *((_OWORD *)a2 + 683);
  *(_QWORD *)(a1 + 10944) = a2[1368];
  *(_OWORD *)(a1 + 10928) = v79;
  *(_OWORD *)(a1 + 10912) = v78;
  *(_OWORD *)(a1 + 10896) = v77;
  v80 = *(_OWORD *)(a2 + 1369);
  v81 = *(_OWORD *)(a2 + 1373);
  *(_OWORD *)(a1 + 10968) = *(_OWORD *)(a2 + 1371);
  *(_OWORD *)(a1 + 10984) = v81;
  *(_OWORD *)(a1 + 10952) = v80;
  v82 = *(_OWORD *)(a2 + 1375);
  *(_QWORD *)(a1 + 11016) = a2[1377];
  *(_OWORD *)(a1 + 11000) = v82;
  v83 = *((_OWORD *)a2 + 691);
  v84 = *((_OWORD *)a2 + 692);
  v85 = a2[1386];
  *(_OWORD *)(a1 + 11040) = *((_OWORD *)a2 + 690);
  *(_QWORD *)(a1 + 11088) = v85;
  *(_OWORD *)(a1 + 11072) = v84;
  *(_OWORD *)(a1 + 11056) = v83;
  *(_OWORD *)(a1 + 11024) = *((_OWORD *)a2 + 689);
  *(_BYTE *)(a1 + 11096) = *((_BYTE *)a2 + 11096);
  if ((_QWORD *)a1 != a2)
  {
    v86 = (void **)(a1 + 11104);
    v87 = *((_BYTE *)a2 + 11127);
    if (*(char *)(a1 + 11127) < 0)
    {
      if (v87 >= 0)
        v89 = a2 + 1388;
      else
        v89 = (void *)a2[1388];
      if (v87 >= 0)
        v90 = *((unsigned __int8 *)a2 + 11127);
      else
        v90 = a2[1389];
      sub_20E867CBC(v86, v89, v90);
    }
    else if ((*((_BYTE *)a2 + 11127) & 0x80) != 0)
    {
      sub_20E867BF8(v86, (void *)a2[1388], a2[1389]);
    }
    else
    {
      v88 = *((_OWORD *)a2 + 694);
      *(_QWORD *)(a1 + 11120) = a2[1390];
      *(_OWORD *)v86 = v88;
    }
  }
  v91 = *(_OWORD *)(a2 + 1391);
  v92 = *(_OWORD *)(a2 + 1395);
  *(_OWORD *)(a1 + 11144) = *(_OWORD *)(a2 + 1393);
  *(_OWORD *)(a1 + 11160) = v92;
  *(_OWORD *)(a1 + 11128) = v91;
  v94 = *(_OWORD *)(a2 + 1401);
  v93 = *(_OWORD *)(a2 + 1403);
  v95 = *(_OWORD *)(a2 + 1399);
  *(_QWORD *)(a1 + 11240) = a2[1405];
  *(_OWORD *)(a1 + 11208) = v94;
  *(_OWORD *)(a1 + 11224) = v93;
  *(_OWORD *)(a1 + 11192) = v95;
  *(_OWORD *)(a1 + 11176) = *(_OWORD *)(a2 + 1397);
  v96 = *((_OWORD *)a2 + 707);
  v97 = *((_OWORD *)a2 + 708);
  v98 = *((_OWORD *)a2 + 709);
  *(_OWORD *)(a1 + 11296) = *((_OWORD *)a2 + 706);
  *(_OWORD *)(a1 + 11344) = v98;
  *(_OWORD *)(a1 + 11328) = v97;
  *(_OWORD *)(a1 + 11312) = v96;
  v99 = *((_OWORD *)a2 + 711);
  v100 = *((_OWORD *)a2 + 712);
  v101 = *((_OWORD *)a2 + 713);
  *(_OWORD *)(a1 + 11360) = *((_OWORD *)a2 + 710);
  *(_OWORD *)(a1 + 11408) = v101;
  *(_OWORD *)(a1 + 11392) = v100;
  *(_OWORD *)(a1 + 11376) = v99;
  v102 = *((_OWORD *)a2 + 703);
  v103 = *((_OWORD *)a2 + 704);
  *(_OWORD *)(a1 + 11280) = *((_OWORD *)a2 + 705);
  *(_OWORD *)(a1 + 11264) = v103;
  *(_OWORD *)(a1 + 11248) = v102;
  return a1;
}

void sub_20E863344(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A660);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A660))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5A658);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5A660);
  }
  *a1 = qword_254A5A658;
}

void sub_20E8633E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5A660);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5A660);
  _Unwind_Resume(a1);
}

uint64_t sub_20E863438(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20E86353C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v1);
  _Unwind_Resume(a1);
}

void sub_20E863570(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v1 = *(uint64_t **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v4 = (_QWORD *)(*v1 + 16);
      if (*(char *)(*v1 + 39) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *(_OWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(std::__shared_weak_count **)(a1 + 64);
      v22 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v23 = v4;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v3;
      v30 = v10;
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      if (v6 >= **(_DWORD **)(*v1 + 56))
      {
        sub_20E8C3FC4(*v1, (uint64_t)&v23);
        v10 = v30;
      }
      if (v10)
      {
        v15 = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v19 = *(std::__shared_weak_count **)(a1 + 64);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_20E8636F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E869230((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E863714(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20E863570(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_20E863784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](a1 + 128);
  return a1;
}

void sub_20E86380C()
{
  uint64_t v0;
  uint64_t (***v1)();
  int v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  void **v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  NSObject *v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  NSObject *v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  const char *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  char *__s;
  _QWORD v88[3];
  int v89;
  const char *v90;
  int v91;
  const char *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *__dst[2];
  int64_t v96;
  void *__p[2];
  _QWORD v98[3];
  const void *v99;
  uint64_t v100;
  const void *v101;
  unint64_t v102;
  void *v103;
  char v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  void *v109[2];
  uint64_t v110;
  uint64_t (**v111)();
  char *v112[3];
  char *v113[3];
  uint64_t v114[3];
  void *__src[2];
  uint64_t v116;
  char v117;
  _QWORD v118[4];
  __int128 v119;
  std::__shared_weak_count *v120;
  char *v121;
  std::__shared_weak_count *v122;
  _QWORD *v123;
  __int128 v124;
  _QWORD v125[1428];
  _BYTE v126[104];
  _BYTE v127[24];
  __int128 v128;
  void *v129[2];
  unint64_t v130;
  char v131;
  uint64_t v132;

  v0 = MEMORY[0x24BDAC7A8]();
  v132 = *MEMORY[0x24BDAC8D0];
  sub_20E875F04("com.apple.applecv3d.slam.config_override_moving", 0x2FuLL, (uint64_t)__src);
  if (!v117)
    return;
  sub_20E862AA8();
  if (!v117)
    sub_20E866B34();
  if (SHIBYTE(v116) < 0)
  {
    sub_20E860C04(v109, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v109 = *(_OWORD *)__src;
    v110 = v116;
  }
  sub_210104B5C((const void **)v109, v127);
  v1 = sub_21022700C();
  HIBYTE(v98[0]) = 3;
  LODWORD(__p[0]) = 604960;
  sub_2100F6084((uint64_t **)v127, (uint64_t)v126, (uint64_t)v1, (uint64_t)__p, &v111);
  if (SHIBYTE(v98[0]) < 0)
    operator delete(__p[0]);
  v111 = off_24C9AE360;
  sub_20E866B68((uint64_t)v114, v114[1]);
  sub_20E866BE0((uint64_t)v113, v113[1]);
  sub_20E866C40((uint64_t)v112, v112[1]);
  if ((v127[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v127);
    if ((SHIBYTE(v110) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_17:
    operator delete(v109[0]);
    goto LABEL_10;
  }
  if (SHIBYTE(v110) < 0)
    goto LABEL_17;
LABEL_10:
  sub_20E862C24(v0 + 8, v125);
  sub_20E863344(&v108);
  if (**(int **)(v108 + 56) <= 3)
  {
    v2 = *(unsigned __int8 *)(v108 + 72);
    v3 = sub_21021D818(&v108);
    v4 = v3;
    if (v2 || v3)
    {
      sub_20E863438((uint64_t)__p);
      if ((v106 & 0x10) != 0)
      {
        v7 = v105;
        if (v105 < v102)
        {
          v105 = v102;
          v7 = v102;
        }
        v8 = v101;
        v5 = v7 - (_QWORD)v101;
        if (v7 - (unint64_t)v101 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_72;
      }
      else
      {
        if ((v106 & 8) == 0)
        {
          v5 = 0;
          HIBYTE(v96) = 0;
          v6 = __dst;
          goto LABEL_28;
        }
        v8 = v99;
        v5 = v100 - (_QWORD)v99;
        if ((unint64_t)(v100 - (_QWORD)v99) > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
          sub_20E860B7C();
      }
      if (v5 >= 0x17)
      {
        v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v9 = v5 | 7;
        v10 = v9 + 1;
        v6 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v5;
        v96 = v10 | 0x8000000000000000;
        __dst[0] = v6;
      }
      else
      {
        HIBYTE(v96) = v5;
        v6 = __dst;
        if (!v5)
        {
LABEL_28:
          *((_BYTE *)v6 + v5) = 0;
          v88[0] = &v108;
          v88[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v88[2] = std::chrono::system_clock::now().__d_.__rep_;
          v89 = 3;
          v90 = "unknown file";
          v91 = 140;
          v93 = 0;
          v94 = 0;
          v92 = "unknown function";
          if (v96 >= 0)
            v11 = __dst;
          else
            v11 = (void **)__dst[0];
          v12 = *(_QWORD *)v88[0];
          v13 = (const char *)(*(_QWORD *)v88[0] + 16);
          v86 = v13;
          __s = (char *)v11;
          if (*(char *)(*(_QWORD *)v88[0] + 39) < 0)
          {
            v13 = *(const char **)(v12 + 16);
            v14 = *(_QWORD *)(v12 + 24);
            v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v16 & 1) != 0)
              goto LABEL_35;
          }
          else
          {
            v14 = *(unsigned __int8 *)(*(_QWORD *)v88[0] + 39);
            v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v15 & 1) != 0)
              goto LABEL_35;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v127);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v127);
            if ((_BYTE)v128 && (v127[23] & 0x80000000) != 0)
              operator delete(*(void **)v127);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_35:
          if (byte_254A4A4F8[23] >= 0)
            v17 = byte_254A4A4F8;
          else
            v17 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v18 = byte_254A4A4F8[23];
          else
            v18 = *(_QWORD *)&byte_254A4A4F8[8];
          v19 = os_log_create(v17, v13);
          *(_QWORD *)v127 = v19;

          v20 = &v127[8];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v18 >= 0x17)
          {
            v21 = v2;
            v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v22 = v18 | 7;
            v23 = v22 + 1;
            v20 = operator new(v22 + 1);
            *(_QWORD *)&v127[16] = v18;
            *(_QWORD *)&v128 = v23 | 0x8000000000000000;
            *(_QWORD *)&v127[8] = v20;
            v2 = v21;
          }
          else
          {
            BYTE7(v128) = v18;
            if (!v18)
            {
LABEL_49:
              v20[v18] = 0;
              BYTE8(v128) = 1;
              v24 = v129;
              if (v14 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v14 >= 0x17)
              {
                v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v14 | 7) != 0x17)
                  v25 = v14 | 7;
                v26 = v25 + 1;
                v24 = (void **)operator new(v25 + 1);
                v129[1] = (void *)v14;
                v130 = v26 | 0x8000000000000000;
                v129[0] = v24;
              }
              else
              {
                HIBYTE(v130) = v14;
                if (!v14)
                  goto LABEL_57;
              }
              memmove(v24, v13, v14);
LABEL_57:
              *((_BYTE *)v24 + v14) = 0;
              v131 = 1;
              v27 = objc_retainAutorelease(*(id *)v127);
              if (v131 && SHIBYTE(v130) < 0)
                operator delete(v129[0]);
              if (BYTE8(v128) && SBYTE7(v128) < 0)
                operator delete(*(void **)&v127[8]);

              v28 = sub_21021D650(3u);
              v29 = v27;
              v30 = v29;
              if (!v4 || !*(_QWORD *)(v4 + 8))
              {
                os_log_type_enabled(v29, v28);
                *(_DWORD *)v127 = 136315138;
                *(_QWORD *)&v127[4] = __s;
                v37 = (void *)_os_log_send_and_compose_impl();
                if (v37)
                  free(v37);
                goto LABEL_138;
              }
              v31 = _os_log_pack_size();
              v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
              v33 = (std::__shared_weak_count *)operator new();
              v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v33->__shared_owners_ = 0;
              v33->__shared_weak_owners_ = 0;
              v33[1].__vftable = v32;
              *(_QWORD *)&v119 = v32;
              *((_QWORD *)&v119 + 1) = v32;
              v122 = 0;
              v120 = v33;
              v121 = 0;
              v34 = strlen(__s);
              if (v34 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v35 = v34;
              if (v34 >= 0x17)
              {
                v38 = v2;
                v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v34 | 7) != 0x17)
                  v39 = v34 | 7;
                v40 = v39 + 1;
                v36 = operator new(v39 + 1);
                *((_QWORD *)&v124 + 1) = v40 | 0x8000000000000000;
                v123 = v36;
                *(_QWORD *)&v124 = v35;
                v2 = v38;
              }
              else
              {
                HIBYTE(v124) = v34;
                v36 = &v123;
                if (!v34)
                {
LABEL_77:
                  *((_BYTE *)v36 + v35) = 0;
                  v118[2] = v124;
                  *(_QWORD *)((char *)&v118[2] + 7) = *(_QWORD *)((char *)&v124 + 7);
                  v118[0] = off_24C9ABC20;
                  v118[1] = v123;
                  HIBYTE(v118[3]) = HIBYTE(v124);
                  v41 = operator new(0x38uLL);
                  v41[1] = 0;
                  v41[2] = 0;
                  *v41 = &off_24C9ABBD0;
                  v41[3] = off_24C9ABC20;
                  *((_OWORD *)v41 + 2) = *(_OWORD *)&v118[1];
                  v41[6] = v118[3];
                  memset(&v118[1], 0, 24);
                  v42 = v122;
                  v121 = (char *)(v41 + 3);
                  v122 = (std::__shared_weak_count *)v41;
                  if (v42)
                  {
                    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(p_shared_owners);
                    while (__stlxr(v44 - 1, p_shared_owners));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  if (SHIBYTE(v118[3]) < 0)
                    operator delete((void *)v118[1]);
                  nullsub_1(v118);
                  *(_OWORD *)v127 = v119;
                  v45 = v121;
                  *(_QWORD *)&v127[16] = v120;
                  if (v120)
                  {
                    v46 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v47 = __ldxr(v46);
                    while (__stxr(v47 + 1, v46));
                  }
                  v48 = v122;
                  *(_QWORD *)&v128 = v45;
                  *((_QWORD *)&v128 + 1) = v122;
                  if (v122)
                  {
                    v49 = (unint64_t *)&v122->__shared_owners_;
                    do
                      v50 = __ldxr(v49);
                    while (__stxr(v50 + 1, v49));
                    v129[0] = v45;
                    do
                      v51 = __ldaxr(v49);
                    while (__stlxr(v51 - 1, v49));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                      std::__shared_weak_count::__release_weak(v48);
                    }
                  }
                  else
                  {
                    v129[0] = v45;
                  }
                  v52 = v120;
                  if (v120)
                  {
                    v53 = (unint64_t *)&v120->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  v55 = *(_QWORD *)v127;
                  if (*((char *)v129[0] + 31) >= 0)
                    v56 = (char *)v129[0] + 8;
                  else
                    v56 = (char *)*((_QWORD *)v129[0] + 1);
                  v57 = _os_log_pack_fill();
                  *(_DWORD *)v57 = 136315138;
                  *(_QWORD *)(v57 + 4) = v56;
                  v58 = operator new();
                  v59 = *(unsigned __int8 *)(v12 + 39);
                  v60 = v86;
                  if ((v59 & 0x80u) != 0)
                  {
                    v60 = *(const char **)(v12 + 16);
                    v59 = *(_QWORD *)(v12 + 24);
                  }
                  *(_QWORD *)v58 = v55;
                  *(_OWORD *)(v58 + 8) = *(_OWORD *)&v127[8];
                  *(_QWORD *)&v127[8] = 0;
                  *(_QWORD *)&v127[16] = 0;
                  *(_OWORD *)(v58 + 24) = v128;
                  v128 = 0uLL;
                  *(_QWORD *)(v58 + 40) = v60;
                  *(_QWORD *)(v58 + 48) = v59;
                  *(_BYTE *)(v58 + 56) = v28;
                  v123 = 0;
                  *(_QWORD *)&v119 = v58;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v4 + 8) + 40))(*(_QWORD *)(v4 + 8), &v119);
                  v61 = v119;
                  *(_QWORD *)&v119 = 0;
                  if (v61)
                  {
                    v62 = *(std::__shared_weak_count **)(v61 + 32);
                    if (v62)
                    {
                      v63 = (unint64_t *)&v62->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    v65 = *(std::__shared_weak_count **)(v61 + 16);
                    if (v65)
                    {
                      v66 = (unint64_t *)&v65->__shared_owners_;
                      do
                        v67 = __ldaxr(v66);
                      while (__stlxr(v67 - 1, v66));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                      }
                    }
                    MEMORY[0x212BC6398](v61, 0x10F0C40B62ED6C6);
                    v68 = v123;
                    v123 = 0;
                    if (v68)
                    {
                      v69 = (std::__shared_weak_count *)v68[4];
                      if (v69)
                      {
                        v70 = (unint64_t *)&v69->__shared_owners_;
                        do
                          v71 = __ldaxr(v70);
                        while (__stlxr(v71 - 1, v70));
                        if (!v71)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      v72 = (std::__shared_weak_count *)v68[2];
                      if (v72)
                      {
                        v73 = (unint64_t *)&v72->__shared_owners_;
                        do
                          v74 = __ldaxr(v73);
                        while (__stlxr(v74 - 1, v73));
                        if (!v74)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                      }
                      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
                    }
                  }
                  v75 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
                  if (*((_QWORD *)&v128 + 1))
                  {
                    v76 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
                    do
                      v77 = __ldaxr(v76);
                    while (__stlxr(v77 - 1, v76));
                    if (!v77)
                    {
                      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                      std::__shared_weak_count::__release_weak(v75);
                    }
                  }
                  v78 = *(std::__shared_weak_count **)&v127[16];
                  if (*(_QWORD *)&v127[16])
                  {
                    v79 = (unint64_t *)(*(_QWORD *)&v127[16] + 8);
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
LABEL_138:

                  if (v2)
                  {
                    v81 = (const char *)__dst;
                    if (v96 < 0)
                      v81 = (const char *)__dst[0];
                    sub_20E8C003C((uint64_t)v88, "%s", v81);
                    sub_20E863570((uint64_t)v88);
                  }
                  sub_20E863570((uint64_t)v88);
                  v82 = v94;
                  if (v94)
                  {
                    v83 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  if (SHIBYTE(v96) < 0)
                    operator delete(__dst[0]);
                  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
                  v85 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                  v98[0] = v85;
                  v98[1] = MEMORY[0x24BEDB848] + 16;
                  if (v104 < 0)
                    operator delete(v103);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&v107);
                  goto LABEL_152;
                }
              }
              memcpy(v36, __s, v35);
              goto LABEL_77;
            }
          }
          memmove(v20, v17, v18);
          goto LABEL_49;
        }
      }
      memmove(v6, v8, v5);
      goto LABEL_28;
    }
  }
LABEL_152:
  sub_20E869298((uint64_t)v126);
  sub_20E869418((uint64_t)v125);
  if (v117)
  {
    if (SHIBYTE(v116) < 0)
      operator delete(__src[0]);
  }
}

#error "20E864830: call analysis failed (funcsize=180)"

void sub_20E8648BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  if (LOBYTE(STACK[0x2B0]) && SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20E864958);
}

void sub_20E864994(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
    sub_20E86380C();
  else
    sub_20E861920();
}

void sub_20E8649A4(uint64_t a1)
{
  uint64_t (***v2)();
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  NSObject *v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  os_log_type_t v39;
  NSObject *v40;
  NSObject *v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  size_t v45;
  size_t v46;
  _QWORD *v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  const char *v97;
  char *__s;
  _QWORD v99[3];
  int v100;
  const char *v101;
  int v102;
  const char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void *__dst[2];
  int64_t v107;
  void *__p[2];
  _QWORD v109[3];
  const void *v110;
  uint64_t v111;
  const void *v112;
  unint64_t v113;
  void *v114;
  char v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void *v120[2];
  uint64_t v121;
  uint64_t (**v122)();
  char *v123[3];
  char *v124[3];
  uint64_t v125[3];
  _BYTE __src[856];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  void *v132;
  int v133[2];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  _BYTE v156[104];
  void *v157[2];
  uint64_t v158;
  char v159;
  _QWORD v160[4];
  __int128 v161;
  std::__shared_weak_count *v162;
  char *v163;
  std::__shared_weak_count *v164;
  _QWORD *v165;
  __int128 v166;
  _BYTE v167[24];
  __int128 v168;
  void *v169[2];
  unint64_t v170;
  char v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  sub_20E875F04("com.apple.applecv3d.slam.predictor_config_override", 0x32uLL, (uint64_t)v157);
  if (!v159)
    return;
  sub_20E865C18((uint64_t)__src, a1 + 8, (uint64_t)sub_20F1AE3B0);
  if (!v159)
    sub_20E866B34();
  if (SHIBYTE(v158) < 0)
  {
    sub_20E860C04(v120, v157[0], (unint64_t)v157[1]);
  }
  else
  {
    *(_OWORD *)v120 = *(_OWORD *)v157;
    v121 = v158;
  }
  sub_210104B5C((const void **)v120, v167);
  v2 = sub_21022700C();
  HIBYTE(v109[0]) = 3;
  LODWORD(__p[0]) = 604960;
  sub_2100F6084((uint64_t **)v167, (uint64_t)v156, (uint64_t)v2, (uint64_t)__p, &v122);
  if (SHIBYTE(v109[0]) < 0)
    operator delete(__p[0]);
  v122 = off_24C9AE360;
  sub_20E866B68((uint64_t)v125, v125[1]);
  sub_20E866BE0((uint64_t)v124, v124[1]);
  sub_20E866C40((uint64_t)v123, v123[1]);
  if ((v167[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v167);
    if ((SHIBYTE(v121) & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((SHIBYTE(v121) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(v120[0]);
LABEL_10:
  memcpy((void *)(a1 + 8), __src, 0x356uLL);
  v3 = v130;
  *(_OWORD *)(a1 + 896) = v129;
  *(_OWORD *)(a1 + 912) = v3;
  *(_QWORD *)(a1 + 928) = v131;
  v4 = v128;
  *(_OWORD *)(a1 + 864) = v127;
  *(_OWORD *)(a1 + 880) = v4;
  if ((_BYTE *)(a1 + 8) != __src)
    sub_20E86A1AC(a1 + 936, (char *)v132, *(char **)v133, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v133 - (_QWORD)v132) >> 3));
  v5 = v135;
  *(_OWORD *)(a1 + 960) = v134;
  *(_OWORD *)(a1 + 976) = v5;
  v6 = v137;
  *(_OWORD *)(a1 + 992) = v136;
  *(_OWORD *)(a1 + 1008) = v6;
  v7 = v147;
  *(_OWORD *)(a1 + 1152) = v146;
  *(_OWORD *)(a1 + 1168) = v7;
  v8 = v149;
  *(_OWORD *)(a1 + 1184) = v148;
  *(_OWORD *)(a1 + 1200) = v8;
  v9 = v143;
  *(_OWORD *)(a1 + 1088) = v142;
  *(_OWORD *)(a1 + 1104) = v9;
  v10 = v145;
  *(_OWORD *)(a1 + 1120) = v144;
  *(_OWORD *)(a1 + 1136) = v10;
  v11 = v139;
  *(_OWORD *)(a1 + 1024) = v138;
  *(_OWORD *)(a1 + 1040) = v11;
  v12 = v141;
  *(_OWORD *)(a1 + 1056) = v140;
  *(_OWORD *)(a1 + 1072) = v12;
  sub_20E869F44(a1 + 1216, (uint64_t)&v150);
  *(_BYTE *)(a1 + 1424) = v155;
  sub_20E863344(&v119);
  if (**(int **)(v119 + 56) > 3)
    goto LABEL_154;
  v13 = *(unsigned __int8 *)(v119 + 72);
  v14 = sub_21021D818(&v119);
  v15 = v14;
  if (!v13 && !v14)
    goto LABEL_154;
  sub_20E863438((uint64_t)__p);
  if ((v117 & 0x10) != 0)
  {
    v18 = v116;
    if (v116 < v113)
    {
      v116 = v113;
      v18 = v113;
    }
    v19 = v112;
    v16 = v18 - (_QWORD)v112;
    if (v18 - (unint64_t)v112 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_74;
  }
  else
  {
    if ((v117 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v107) = 0;
      v17 = __dst;
      goto LABEL_30;
    }
    v19 = v110;
    v16 = v111 - (_QWORD)v110;
    if ((unint64_t)(v111 - (_QWORD)v110) > 0x7FFFFFFFFFFFFFF7)
LABEL_74:
      sub_20E860B7C();
  }
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v17 = (void **)operator new(v20 + 1);
    __dst[1] = (void *)v16;
    v107 = v21 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_29;
  }
  HIBYTE(v107) = v16;
  v17 = __dst;
  if (v16)
LABEL_29:
    memmove(v17, v19, v16);
LABEL_30:
  *((_BYTE *)v17 + v16) = 0;
  v99[0] = &v119;
  v99[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v99[2] = std::chrono::system_clock::now().__d_.__rep_;
  v100 = 3;
  v101 = "unknown file";
  v102 = 169;
  v104 = 0;
  v105 = 0;
  v103 = "unknown function";
  if (v107 >= 0)
    v22 = __dst;
  else
    v22 = (void **)__dst[0];
  v23 = *(_QWORD *)v99[0];
  v24 = (const char *)(*(_QWORD *)v99[0] + 16);
  v97 = v24;
  __s = (char *)v22;
  if (*(char *)(*(_QWORD *)v99[0] + 39) < 0)
  {
    v24 = *(const char **)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v27 & 1) != 0)
      goto LABEL_37;
  }
  else
  {
    v25 = *(unsigned __int8 *)(*(_QWORD *)v99[0] + 39);
    v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v26 & 1) != 0)
      goto LABEL_37;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v167);
    sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v167);
    if ((_BYTE)v168 && (v167[23] & 0x80000000) != 0)
      operator delete(*(void **)v167);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_37:
  if (byte_254A4A50F >= 0)
    v28 = (const char *)&xmmword_254A4A4F8;
  else
    v28 = (const char *)xmmword_254A4A4F8;
  if (byte_254A4A50F >= 0)
    v29 = byte_254A4A50F;
  else
    v29 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
  v30 = os_log_create(v28, v24);
  *(_QWORD *)v167 = v30;

  v31 = &v167[8];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v32 = v13;
    v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v33 = v29 | 7;
    v34 = v33 + 1;
    v31 = operator new(v33 + 1);
    *(_QWORD *)&v167[16] = v29;
    *(_QWORD *)&v168 = v34 | 0x8000000000000000;
    *(_QWORD *)&v167[8] = v31;
    v13 = v32;
    goto LABEL_50;
  }
  BYTE7(v168) = v29;
  if (v29)
LABEL_50:
    memmove(v31, v28, v29);
  v31[v29] = 0;
  BYTE8(v168) = 1;
  v35 = v169;
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v25 >= 0x17)
  {
    v36 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v36 = v25 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    v169[1] = (void *)v25;
    v170 = v37 | 0x8000000000000000;
    v169[0] = v35;
  }
  else
  {
    HIBYTE(v170) = v25;
    if (!v25)
      goto LABEL_59;
  }
  memmove(v35, v24, v25);
LABEL_59:
  *((_BYTE *)v35 + v25) = 0;
  v171 = 1;
  v38 = objc_retainAutorelease(*(id *)v167);
  if (v171 && SHIBYTE(v170) < 0)
    operator delete(v169[0]);
  if (BYTE8(v168) && SBYTE7(v168) < 0)
    operator delete(*(void **)&v167[8]);

  v39 = sub_21021D650(3u);
  v40 = v38;
  v41 = v40;
  if (!v15 || !*(_QWORD *)(v15 + 8))
  {
    os_log_type_enabled(v40, v39);
    *(_DWORD *)v167 = 136315138;
    *(_QWORD *)&v167[4] = __s;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
    goto LABEL_140;
  }
  v42 = _os_log_pack_size();
  v43 = (std::__shared_weak_count_vtbl *)operator new(v42, (std::align_val_t)8uLL);
  v44 = (std::__shared_weak_count *)operator new();
  v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44[1].__vftable = v43;
  *(_QWORD *)&v161 = v43;
  *((_QWORD *)&v161 + 1) = v43;
  v163 = 0;
  v164 = 0;
  v162 = v44;
  v45 = strlen(__s);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v49 = v13;
    v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v50 = v45 | 7;
    v51 = v50 + 1;
    v47 = operator new(v50 + 1);
    *(_QWORD *)&v166 = v46;
    *((_QWORD *)&v166 + 1) = v51 | 0x8000000000000000;
    v165 = v47;
    v13 = v49;
    goto LABEL_78;
  }
  HIBYTE(v166) = v45;
  v47 = &v165;
  if (v45)
LABEL_78:
    memcpy(v47, __s, v46);
  *((_BYTE *)v47 + v46) = 0;
  v160[2] = v166;
  *(_QWORD *)((char *)&v160[2] + 7) = *(_QWORD *)((char *)&v166 + 7);
  v160[0] = off_24C9ABC20;
  v160[1] = v165;
  HIBYTE(v160[3]) = HIBYTE(v166);
  v52 = operator new(0x38uLL);
  v52[1] = 0;
  v52[2] = 0;
  *v52 = &off_24C9ABBD0;
  v52[3] = off_24C9ABC20;
  *((_OWORD *)v52 + 2) = *(_OWORD *)&v160[1];
  v52[6] = v160[3];
  memset(&v160[1], 0, 24);
  v53 = v164;
  v163 = (char *)(v52 + 3);
  v164 = (std::__shared_weak_count *)v52;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (SHIBYTE(v160[3]) < 0)
    operator delete((void *)v160[1]);
  nullsub_1(v160);
  *(_OWORD *)v167 = v161;
  v56 = v163;
  *(_QWORD *)&v167[16] = v162;
  if (v162)
  {
    v57 = (unint64_t *)&v162->__shared_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  v59 = v164;
  *(_QWORD *)&v168 = v56;
  *((_QWORD *)&v168 + 1) = v164;
  if (v164)
  {
    v60 = (unint64_t *)&v164->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    v169[0] = v56;
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    v169[0] = v56;
  }
  v63 = v162;
  if (v162)
  {
    v64 = (unint64_t *)&v162->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(_QWORD *)v167;
  if (*((char *)v169[0] + 31) >= 0)
    v67 = (char *)v169[0] + 8;
  else
    v67 = (char *)*((_QWORD *)v169[0] + 1);
  v68 = _os_log_pack_fill();
  *(_DWORD *)v68 = 136315138;
  *(_QWORD *)(v68 + 4) = v67;
  v69 = operator new();
  v70 = *(unsigned __int8 *)(v23 + 39);
  v71 = v97;
  if ((v70 & 0x80u) != 0)
  {
    v71 = *(const char **)(v23 + 16);
    v70 = *(_QWORD *)(v23 + 24);
  }
  *(_QWORD *)v69 = v66;
  *(_OWORD *)(v69 + 8) = *(_OWORD *)&v167[8];
  *(_QWORD *)&v167[8] = 0;
  *(_QWORD *)&v167[16] = 0;
  *(_OWORD *)(v69 + 24) = v168;
  v168 = 0uLL;
  *(_QWORD *)(v69 + 40) = v71;
  *(_QWORD *)(v69 + 48) = v70;
  *(_BYTE *)(v69 + 56) = v39;
  v165 = 0;
  *(_QWORD *)&v161 = v69;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v15 + 8) + 40))(*(_QWORD *)(v15 + 8), &v161);
  v72 = v161;
  *(_QWORD *)&v161 = 0;
  if (v72)
  {
    v73 = *(std::__shared_weak_count **)(v72 + 32);
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v76 = *(std::__shared_weak_count **)(v72 + 16);
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
    v79 = v165;
    v165 = 0;
    if (v79)
    {
      v80 = (std::__shared_weak_count *)v79[4];
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)v79[2];
      if (v83)
      {
        v84 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      MEMORY[0x212BC6398](v79, 0x10F0C40B62ED6C6);
    }
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = *(std::__shared_weak_count **)&v167[16];
  if (*(_QWORD *)&v167[16])
  {
    v90 = (unint64_t *)(*(_QWORD *)&v167[16] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
LABEL_140:

  if (v13)
  {
    v92 = (const char *)__dst;
    if (v107 < 0)
      v92 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v99, "%s", v92);
    sub_20E863570((uint64_t)v99);
  }
  sub_20E863570((uint64_t)v99);
  v93 = v105;
  if (v105)
  {
    v94 = (unint64_t *)&v105->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(__dst[0]);
  __p[0] = *(void **)MEMORY[0x24BEDB7F0];
  v96 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v109[0] = v96;
  v109[1] = MEMORY[0x24BEDB848] + 16;
  if (v115 < 0)
    operator delete(v114);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v118);
LABEL_154:
  sub_20E869298((uint64_t)v156);
  if (v154)
    MEMORY[0x212BC6368](v154, 0x1000C8000313F17);
  if (v153)
    MEMORY[0x212BC6368](v153, 0x1000C8000313F17);
  if (v152)
    MEMORY[0x212BC6368](v152, 0x1000C8000313F17);
  if (v151)
    MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
  if (v132)
  {
    *(_QWORD *)v133 = v132;
    operator delete(v132);
  }
  if (v159)
  {
    if (SHIBYTE(v158) < 0)
      operator delete(v157[0]);
  }
}

#error "20E865AB4: call analysis failed (funcsize=176)"

void sub_20E865B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  if (LOBYTE(STACK[0x230]) && SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20E865BDCLL);
}

uint64_t sub_20E865C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE v11[928];
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_20E86F5E0((uint64_t)v11, a2);
  v19 = 0;
  if (a3)
  {
    v18[0] = &off_24C9ABC58;
    v18[1] = a3;
    v19 = v18;
    v20[0] = &off_24C9ABC58;
    v20[1] = a3;
    v5 = v20;
  }
  else
  {
    v5 = 0;
  }
  v21 = v5;
  sub_20E86FAB8(a1, (uint64_t)v11, (uint64_t)v20);
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_9;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
  v8 = v19;
  if (v19 == v18)
  {
    v9 = 4;
    v8 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_14;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_14:
  if (v17)
    MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  if (v15)
    MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20E865DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 72);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_21023E024((_QWORD *)(v3 - 80), (_QWORD *)(v3 - 104));
  sub_20E86A618((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E865DF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  sub_20E869298((uint64_t)(a1 + 178));
  v2 = a1[173];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[170];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[166];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[163];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[116];
  if (v6)
  {
    a1[117] = v6;
    operator delete(v6);
  }
  return a1;
}

BOOL sub_20E865E9C(uint64_t a1)
{
  unsigned __int16 v2;

  if (*(_BYTE *)(a1 + 10754))
    return *(_BYTE *)(a1 + 10753) != 0;
  v2 = sub_20E8746F0("com.apple.arkit.worldTracking.disableSIandPPDandLuxDependencies", 0x3FuLL);
  return v2 < 0x100u || v2 == 0;
}

BOOL sub_20E865EF8(_BYTE *a1, void *a2, size_t a3)
{
  unsigned __int16 v4;

  if (a1[1])
    return *a1 != 0;
  v4 = sub_20E8746F0(a2, a3);
  return v4 >= 0x100u && v4 != 0;
}

uint64_t sub_20E865F44(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  void *v26[2];
  uint64_t v27;
  void *__p[2];
  uint64_t v29;

  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 144) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 168) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 184) = unk_2102D6D80;
  *(_OWORD *)(a1 + 200) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 216) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 256) = unk_2102D6D80;
  *(_OWORD *)(a1 + 272) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 288) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 376) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 312) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 328) = unk_2102D6D80;
  *(_OWORD *)(a1 + 344) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 360) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 400) = unk_2102D6D80;
  *(_OWORD *)(a1 + 416) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 432) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 520) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 504) = unk_2102D6DA0;
  *(_OWORD *)(a1 + 456) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 472) = unk_2102D6D80;
  *(_QWORD *)(a1 + 592) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 560) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 576) = unk_2102D6DA0;
  *(_OWORD *)(a1 + 528) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 544) = unk_2102D6D80;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 632) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 664) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 672) = _Q1;
  *(_OWORD *)(a1 + 688) = _Q1;
  *(_WORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = _Q1;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2288) = 0;
  *(_BYTE *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_BYTE *)(a1 + 2340) = 0;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_BYTE *)(a1 + 2472) = 0;
  v17 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 2480) = v17;
  *(_QWORD *)(a1 + 2496) = 0x8000000000000020;
  *(_QWORD *)(a1 + 2488) = 30;
  strcpy(v17, "[in SLAM session created at 0]");
  *(_BYTE *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_DWORD *)(a1 + 2520) = 1;
  *(_QWORD *)(a1 + 2528) = *a5;
  v18 = a5[1];
  *(_QWORD *)(a1 + 2536) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)(a1 + 2544) = *a6;
  v21 = a6[1];
  *(_QWORD *)(a1 + 2552) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_20E86184C(v26);
  *(_OWORD *)__p = *(_OWORD *)v26;
  v29 = v27;
  v26[1] = 0;
  v27 = 0;
  v26[0] = 0;
  sub_20EFF9868(a1 + 2560, a3 + 10632, a3 + 8872, __p, a3 + 9432);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    operator delete(v26[0]);
    goto LABEL_9;
  }
  if (SHIBYTE(v27) < 0)
    goto LABEL_11;
LABEL_9:
  *(_QWORD *)(a1 + 3584) = 0;
  *(_WORD *)(a1 + 3592) = 0;
  *(_BYTE *)(a1 + 3600) = 0;
  *(_BYTE *)(a1 + 3632) = 0;
  *(_QWORD *)(a1 + 3696) = 5;
  *(_QWORD *)(a1 + 3704) = 0x4069000000000000;
  *(_OWORD *)(a1 + 3712) = xmmword_2102D6D60;
  *(_QWORD *)(a1 + 3728) = 0;
  *(_QWORD *)(a1 + 3744) = 0;
  *(_QWORD *)(a1 + 3736) = 0;
  v24 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 3728) = v24;
  *(_QWORD *)(a1 + 3744) = v24 + 5;
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  v24[3] = 0u;
  v24[4] = 0u;
  *(_QWORD *)(a1 + 3736) = v24 + 5;
  *(_QWORD *)(a1 + 3752) = 0;
  *(_QWORD *)(a1 + 3768) = 0;
  *(_QWORD *)(a1 + 3760) = 0;
  *(_QWORD *)(a1 + 3776) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3784) = 0;
  *(_BYTE *)(a1 + 3792) = 0;
  *(_BYTE *)(a1 + 3816) = 0;
  *(_BYTE *)(a1 + 3824) = 0;
  sub_20EAAB828(a1 + 3832, 0x14uLL, 20);
  sub_20EAAC490(a1 + 4152, 20, 40);
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_QWORD *)(a1 + 4224) = 850045863;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_QWORD *)(a1 + 4312) = 850045863;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  sub_20E977544((uint64_t *)a1, a3, a4, a2);
  return a1;
}

uint64_t sub_20E86628C(uint64_t a1)
{
  char *v7;
  _OWORD *v8;

  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 144) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 232) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 168) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 184) = unk_2102D6D80;
  *(_OWORD *)(a1 + 200) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 216) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 256) = unk_2102D6D80;
  *(_OWORD *)(a1 + 272) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 288) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 376) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 312) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 328) = unk_2102D6D80;
  *(_OWORD *)(a1 + 344) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 360) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 448) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 384) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 400) = unk_2102D6D80;
  *(_OWORD *)(a1 + 416) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 432) = unk_2102D6DA0;
  *(_QWORD *)(a1 + 520) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 504) = unk_2102D6DA0;
  *(_OWORD *)(a1 + 456) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 472) = unk_2102D6D80;
  *(_QWORD *)(a1 + 592) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 560) = xmmword_2102D6D90;
  *(_OWORD *)(a1 + 576) = unk_2102D6DA0;
  *(_OWORD *)(a1 + 528) = xmmword_2102D6D70;
  *(_OWORD *)(a1 + 544) = unk_2102D6D80;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 632) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 664) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 672) = _Q0;
  *(_OWORD *)(a1 + 688) = _Q0;
  *(_WORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = _Q0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_BYTE *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2288) = 0;
  *(_BYTE *)(a1 + 2328) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_BYTE *)(a1 + 2340) = 0;
  *(_BYTE *)(a1 + 2344) = 0;
  *(_BYTE *)(a1 + 2472) = 0;
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 2480) = v7;
  *(_QWORD *)(a1 + 2496) = 0x8000000000000020;
  *(_QWORD *)(a1 + 2488) = 30;
  strcpy(v7, "[in SLAM session created at 0]");
  *(_BYTE *)(a1 + 2504) = 0;
  *(_QWORD *)(a1 + 2512) = 0;
  *(_DWORD *)(a1 + 2520) = 1;
  *(_OWORD *)(a1 + 2528) = 0u;
  *(_OWORD *)(a1 + 2544) = 0u;
  sub_20EFF986C(a1 + 2560);
  *(_QWORD *)(a1 + 3584) = 0;
  *(_WORD *)(a1 + 3592) = 0;
  *(_BYTE *)(a1 + 3600) = 0;
  *(_BYTE *)(a1 + 3632) = 0;
  *(_QWORD *)(a1 + 3696) = 5;
  *(_QWORD *)(a1 + 3704) = 0x4069000000000000;
  *(_OWORD *)(a1 + 3712) = xmmword_2102D6D60;
  *(_QWORD *)(a1 + 3728) = 0;
  *(_QWORD *)(a1 + 3744) = 0;
  *(_QWORD *)(a1 + 3736) = 0;
  v8 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 3728) = v8;
  *(_QWORD *)(a1 + 3744) = v8 + 5;
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  *(_QWORD *)(a1 + 3736) = v8 + 5;
  *(_QWORD *)(a1 + 3752) = 0;
  *(_QWORD *)(a1 + 3768) = 0;
  *(_QWORD *)(a1 + 3760) = 0;
  *(_QWORD *)(a1 + 3776) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3784) = 0;
  *(_BYTE *)(a1 + 3792) = 0;
  *(_BYTE *)(a1 + 3816) = 0;
  *(_BYTE *)(a1 + 3824) = 0;
  sub_20EAAB828(a1 + 3832, 0x14uLL, 20);
  sub_20EAAC490(a1 + 4152, 20, 40);
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_QWORD *)(a1 + 4224) = 850045863;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_QWORD *)(a1 + 4312) = 850045863;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  return a1;
}

void sub_20E8664F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v6;
  void *v7;

  v4 = v3;
  sub_20E8665B8(v4);
  v6 = (void **)(v1 + 3728);
  if (*(_BYTE *)(v1 + 3816) && *(char *)(v1 + 3815) < 0)
    operator delete(*(void **)(v1 + 3792));
  v7 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 3736) = v7;
    operator delete(v7);
  }
  if (*(_BYTE *)(v1 + 3632))
    sub_21023E058(v1, v1 + 3600);
  sub_20EFF9904(v2);
  sub_20E86665C(v1 + 2544);
  sub_20E86665C(v1 + 2528);
  if (*(char *)(v1 + 2503) < 0)
  {
    operator delete(*(void **)(v1 + 2480));
    sub_20E86A810(v1 + 48);
    sub_20E8666C4((uint64_t *)v1);
    _Unwind_Resume(a1);
  }
  sub_20E86A810(v1 + 48);
  sub_20E8666C4((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E8665B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (std::__shared_weak_count *)a1[37];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[24];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[24];
  if (v5)
  {
LABEL_6:
    a1[25] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[18];
  if (v6)
  {
    a1[19] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20E86665C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20E8666C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t *sub_20E866774(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = a1[547];
  if (v2)
  {
    v3 = a1[548];
    v4 = (void *)a1[547];
    if (v3 == v2)
    {
LABEL_11:
      a1[548] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = (void *)a1[547];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  std::mutex::~mutex((std::mutex *)(a1 + 539));
  v8 = a1[536];
  if (v8)
  {
    v9 = a1[537];
    v10 = (void *)a1[536];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[536];
    }
    a1[537] = v8;
    operator delete(v10);
  }
  std::mutex::~mutex((std::mutex *)a1 + 66);
  v14 = (std::__shared_weak_count *)a1[527];
  if (!v14)
    goto LABEL_27;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (_QWORD *)a1[521];
    if (!v17)
      goto LABEL_29;
  }
  else
  {
LABEL_27:
    v17 = (_QWORD *)a1[521];
    if (!v17)
      goto LABEL_29;
  }
  do
  {
    v18 = (_QWORD *)*v17;
    sub_20E86A8D8(v17 + 2);
    operator delete(v17);
    v17 = v18;
  }
  while (v18);
LABEL_29:
  v19 = (void *)a1[519];
  a1[519] = 0;
  if (v19)
    operator delete(v19);
  v20 = (std::__shared_weak_count *)a1[516];
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_35:
    v23 = (void *)a1[503];
    if (!v23)
      goto LABEL_37;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = (void *)a1[503];
  if (v23)
  {
LABEL_36:
    a1[504] = (uint64_t)v23;
    operator delete(v23);
  }
LABEL_37:
  v24 = (void *)a1[497];
  if (v24)
  {
    a1[498] = (uint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)a1[486];
  if (v25)
  {
    a1[487] = (uint64_t)v25;
    operator delete(v25);
  }
  v26 = (void *)a1[480];
  if (v26)
  {
    a1[481] = (uint64_t)v26;
    operator delete(v26);
  }
  if (!*((_BYTE *)a1 + 3816) || (*((char *)a1 + 3815) & 0x80000000) == 0)
  {
    v27 = (void *)a1[466];
    if (!v27)
      goto LABEL_47;
    goto LABEL_46;
  }
  operator delete((void *)a1[474]);
  v27 = (void *)a1[466];
  if (v27)
  {
LABEL_46:
    a1[467] = (uint64_t)v27;
    operator delete(v27);
  }
LABEL_47:
  if (*((_BYTE *)a1 + 3632))
  {
    v28 = (uint64_t *)a1[453];
    if (v28 == a1 + 450)
    {
      v29 = 4;
      v28 = a1 + 450;
      goto LABEL_58;
    }
    if (v28)
    {
      v29 = 5;
LABEL_58:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
  }
  sub_20EFF9904((uint64_t)(a1 + 320));
  v30 = (std::__shared_weak_count *)a1[319];
  if (!v30)
    goto LABEL_63;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = (std::__shared_weak_count *)a1[317];
    if (!v33)
      goto LABEL_69;
  }
  else
  {
LABEL_63:
    v33 = (std::__shared_weak_count *)a1[317];
    if (!v33)
      goto LABEL_69;
  }
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_69:
  if ((*((char *)a1 + 2503) & 0x80000000) == 0)
  {
    sub_20E86A810((uint64_t)(a1 + 6));
    v36 = a1[5];
    a1[5] = 0;
    if (!v36)
      goto LABEL_72;
    goto LABEL_71;
  }
  operator delete((void *)a1[310]);
  sub_20E86A810((uint64_t)(a1 + 6));
  v36 = a1[5];
  a1[5] = 0;
  if (v36)
LABEL_71:
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_72:
  v37 = a1[4];
  a1[4] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = a1[3];
  a1[3] = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = a1[2];
  a1[2] = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = a1[1];
  a1[1] = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *a1;
  *a1 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  return a1;
}

void sub_20E866B34()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

void sub_20E866B68(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_20E866B68(a1, *(_QWORD *)a2);
    sub_20E866B68(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void sub_20E866BE0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20E866BE0(a1, *(_QWORD *)a2);
    sub_20E866BE0(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_20E866C40(uint64_t a1, char *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (a2)
  {
    sub_20E866C40(a1, *(_QWORD *)a2);
    sub_20E866C40(a1, *((_QWORD *)a2 + 1));
    v4 = (unsigned int *)*((_QWORD *)a2 + 10);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
        v8 = v4 + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
      }
    }
    v11 = *((_QWORD *)a2 + 7);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20E866D18(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  size_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void **v40;
  char v41;
  __int128 v42;
  void *v43;
  size_t v44;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  if ((__int128 *)a1 == a2)
  {
    *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
    v15 = *(__int128 *)((char *)a2 + 264);
    v16 = *(__int128 *)((char *)a2 + 280);
    v17 = *(__int128 *)((char *)a2 + 312);
    *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
    *(_OWORD *)(a1 + 312) = v17;
    *(_OWORD *)(a1 + 264) = v15;
    *(_OWORD *)(a1 + 280) = v16;
    v18 = *(__int128 *)((char *)a2 + 328);
    v19 = *(__int128 *)((char *)a2 + 344);
    v20 = *(__int128 *)((char *)a2 + 360);
    *(_OWORD *)(a1 + 369) = *(__int128 *)((char *)a2 + 369);
    *(_OWORD *)(a1 + 344) = v19;
    *(_OWORD *)(a1 + 360) = v20;
    *(_OWORD *)(a1 + 328) = v18;
    *(_OWORD *)(a1 + 392) = *(__int128 *)((char *)a2 + 392);
    v21 = *(__int128 *)((char *)a2 + 408);
    v22 = *(__int128 *)((char *)a2 + 424);
    v23 = *(__int128 *)((char *)a2 + 456);
    *(_OWORD *)(a1 + 440) = *(__int128 *)((char *)a2 + 440);
    *(_OWORD *)(a1 + 456) = v23;
    *(_OWORD *)(a1 + 408) = v21;
    *(_OWORD *)(a1 + 424) = v22;
    memcpy((void *)(a1 + 496), a2 + 31, 0x139uLL);
    v24 = *(__int128 *)((char *)a2 + 844);
    v25 = a2[52];
    *(_OWORD *)(a1 + 816) = a2[51];
    *(_OWORD *)(a1 + 832) = v25;
    *(_OWORD *)(a1 + 844) = v24;
  }
  else
  {
    sub_20E86876C((_QWORD *)(a1 + 128), *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 1);
    *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
    sub_20E86811C((_QWORD *)(a1 + 160), *((char **)a2 + 20), *((char **)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3);
    v10 = *(__int128 *)((char *)a2 + 184);
    v11 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(a1 + 200) = v11;
    *(_OWORD *)(a1 + 184) = v10;
    v12 = (void **)(a1 + 224);
    v13 = *((_BYTE *)a2 + 247);
    if (*(char *)(a1 + 247) < 0)
    {
      if (v13 >= 0)
        v26 = a2 + 14;
      else
        v26 = (void *)*((_QWORD *)a2 + 28);
      if (v13 >= 0)
        v27 = *((unsigned __int8 *)a2 + 247);
      else
        v27 = *((_QWORD *)a2 + 29);
      sub_20E867CBC(v12, v26, v27);
    }
    else if ((*((_BYTE *)a2 + 247) & 0x80) != 0)
    {
      sub_20E867BF8(v12, *((void **)a2 + 28), *((_QWORD *)a2 + 29));
    }
    else
    {
      v14 = a2[14];
      *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
      *(_OWORD *)v12 = v14;
    }
    *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
    v28 = *(__int128 *)((char *)a2 + 264);
    v29 = *(__int128 *)((char *)a2 + 280);
    v30 = *(__int128 *)((char *)a2 + 312);
    *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
    *(_OWORD *)(a1 + 312) = v30;
    *(_OWORD *)(a1 + 264) = v28;
    *(_OWORD *)(a1 + 280) = v29;
    v31 = *(__int128 *)((char *)a2 + 328);
    v32 = *(__int128 *)((char *)a2 + 344);
    v33 = *(__int128 *)((char *)a2 + 360);
    *(_OWORD *)(a1 + 369) = *(__int128 *)((char *)a2 + 369);
    *(_OWORD *)(a1 + 344) = v32;
    *(_OWORD *)(a1 + 360) = v33;
    *(_OWORD *)(a1 + 328) = v31;
    *(_OWORD *)(a1 + 392) = *(__int128 *)((char *)a2 + 392);
    v34 = *(__int128 *)((char *)a2 + 408);
    v35 = *(__int128 *)((char *)a2 + 424);
    v36 = *(__int128 *)((char *)a2 + 456);
    *(_OWORD *)(a1 + 440) = *(__int128 *)((char *)a2 + 440);
    *(_OWORD *)(a1 + 456) = v36;
    *(_OWORD *)(a1 + 408) = v34;
    *(_OWORD *)(a1 + 424) = v35;
    sub_20E8688A4((_QWORD *)(a1 + 472), *((char **)a2 + 59), *((char **)a2 + 60), (uint64_t)(*((_QWORD *)a2 + 60) - *((_QWORD *)a2 + 59)) >> 4);
    memcpy((void *)(a1 + 496), a2 + 31, 0x139uLL);
    v37 = *(__int128 *)((char *)a2 + 844);
    v38 = a2[52];
    *(_OWORD *)(a1 + 816) = a2[51];
    *(_OWORD *)(a1 + 832) = v38;
    *(_OWORD *)(a1 + 844) = v37;
    sub_20E867E00((_QWORD *)(a1 + 864), *((char **)a2 + 108), *((char **)a2 + 109), (uint64_t)(*((_QWORD *)a2 + 109) - *((_QWORD *)a2 + 108)) >> 2);
    v39 = *(__int128 *)((char *)a2 + 888);
    *(_QWORD *)(a1 + 904) = *((_QWORD *)a2 + 113);
    *(_OWORD *)(a1 + 888) = v39;
    v40 = (void **)(a1 + 912);
    v41 = *((_BYTE *)a2 + 935);
    if (*(char *)(a1 + 935) < 0)
    {
      if (v41 >= 0)
        v43 = a2 + 57;
      else
        v43 = (void *)*((_QWORD *)a2 + 114);
      if (v41 >= 0)
        v44 = *((unsigned __int8 *)a2 + 935);
      else
        v44 = *((_QWORD *)a2 + 115);
      sub_20E867CBC(v40, v43, v44);
    }
    else if ((*((_BYTE *)a2 + 935) & 0x80) != 0)
    {
      sub_20E867BF8(v40, *((void **)a2 + 114), *((_QWORD *)a2 + 115));
    }
    else
    {
      v42 = a2[57];
      *(_QWORD *)(a1 + 928) = *((_QWORD *)a2 + 116);
      *(_OWORD *)v40 = v42;
    }
  }
  *(_BYTE *)(a1 + 936) = *((_BYTE *)a2 + 936);
  *(_DWORD *)(a1 + 944) = *((_DWORD *)a2 + 236);
  return a1;
}

uint64_t sub_20E866FB4(uint64_t a1, uint64_t a2)
{
  void **v4;
  char v5;
  __int128 v6;
  void **v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  size_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  size_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  void *v22;
  size_t v23;
  __int128 v24;
  int v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  void **v56;
  char v57;
  __int128 v58;
  void *v59;
  size_t v60;
  void **v61;
  char v62;
  __int128 v63;
  void *v64;
  size_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  memcpy((void *)a1, (const void *)a2, 0x3E9uLL);
  sub_20E8689E8(a1 + 1008, a2 + 1008);
  sub_20E868EF8(a1 + 1872, a2 + 1872);
  memcpy((void *)(a1 + 2064), (const void *)(a2 + 2064), 0x120uLL);
  if (a1 == a2)
    goto LABEL_46;
  v4 = (void **)(a1 + 2352);
  v5 = *(_BYTE *)(a2 + 2375);
  if ((*(char *)(a1 + 2375) & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a2 + 2375) & 0x80) != 0)
    {
      sub_20E867BF8(v4, *(void **)(a2 + 2352), *(_QWORD *)(a2 + 2360));
      v7 = (void **)(a1 + 2376);
      v8 = (_QWORD *)(a2 + 2376);
      v9 = *(unsigned __int8 *)(a2 + 2399);
      if (*(char *)(a1 + 2399) < 0)
        goto LABEL_17;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 2352);
      *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
      *(_OWORD *)v4 = v6;
      v7 = (void **)(a1 + 2376);
      v8 = (_QWORD *)(a2 + 2376);
      v9 = *(unsigned __int8 *)(a2 + 2399);
      if (*(char *)(a1 + 2399) < 0)
        goto LABEL_17;
    }
LABEL_13:
    if ((v9 & 0x80) != 0)
    {
      sub_20E867BF8(v7, *(void **)(a2 + 2376), *(_QWORD *)(a2 + 2384));
      v13 = a1 + 2400;
      v14 = (_QWORD *)(a2 + 2400);
      v15 = *(unsigned __int8 *)(a2 + 2423);
      if ((*(char *)(a1 + 2423) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else
    {
      v12 = *(_OWORD *)v8;
      v7[2] = (void *)v8[2];
      *(_OWORD *)v7 = v12;
      v13 = a1 + 2400;
      v14 = (_QWORD *)(a2 + 2400);
      v15 = *(unsigned __int8 *)(a2 + 2423);
      if ((*(char *)(a1 + 2423) & 0x80000000) == 0)
        goto LABEL_24;
    }
LABEL_28:
    if ((v15 & 0x80u) == 0)
      v22 = v14;
    else
      v22 = *(void **)(a2 + 2400);
    if ((v15 & 0x80u) == 0)
      v23 = v15;
    else
      v23 = *(_QWORD *)(a2 + 2408);
    sub_20E867CBC((void **)v13, v22, v23);
    v19 = a1 + 2424;
    v20 = (_QWORD *)(a2 + 2424);
    v21 = *(unsigned __int8 *)(a2 + 2447);
    if (*(char *)(a1 + 2447) < 0)
      goto LABEL_39;
    goto LABEL_35;
  }
  if (v5 >= 0)
    v10 = (void *)(a2 + 2352);
  else
    v10 = *(void **)(a2 + 2352);
  if (v5 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 2375);
  else
    v11 = *(_QWORD *)(a2 + 2360);
  sub_20E867CBC(v4, v10, v11);
  v7 = (void **)(a1 + 2376);
  v8 = (_QWORD *)(a2 + 2376);
  v9 = *(unsigned __int8 *)(a2 + 2399);
  if ((*(char *)(a1 + 2399) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_17:
  if ((v9 & 0x80u) == 0)
    v16 = v8;
  else
    v16 = *(void **)(a2 + 2376);
  if ((v9 & 0x80u) == 0)
    v17 = v9;
  else
    v17 = *(_QWORD *)(a2 + 2384);
  sub_20E867CBC(v7, v16, v17);
  v13 = a1 + 2400;
  v14 = (_QWORD *)(a2 + 2400);
  v15 = *(unsigned __int8 *)(a2 + 2423);
  if (*(char *)(a1 + 2423) < 0)
    goto LABEL_28;
LABEL_24:
  if ((v15 & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)v13, *(void **)(a2 + 2400), *(_QWORD *)(a2 + 2408));
    v19 = a1 + 2424;
    v20 = (_QWORD *)(a2 + 2424);
    v21 = *(unsigned __int8 *)(a2 + 2447);
    if (*(char *)(a1 + 2447) < 0)
    {
LABEL_39:
      if ((v21 & 0x80u) == 0)
        v26 = v20;
      else
        v26 = *(void **)(a2 + 2424);
      if ((v21 & 0x80u) == 0)
        v27 = v21;
      else
        v27 = *(_QWORD *)(a2 + 2432);
      sub_20E867CBC((void **)v19, v26, v27);
LABEL_46:
      v25 = *(unsigned __int8 *)(a1 + 2464);
      if (v25 == *(unsigned __int8 *)(a2 + 2464))
        goto LABEL_47;
LABEL_58:
      if (!v25)
      {
        *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a2 + 2448);
        v46 = *(_QWORD *)(a2 + 2456);
        *(_QWORD *)(a1 + 2456) = v46;
        if (v46)
        {
          v47 = (unint64_t *)(v46 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        *(_BYTE *)(a1 + 2464) = 1;
        v35 = *(unsigned __int8 *)(a1 + 2488);
        if (v35 != *(unsigned __int8 *)(a2 + 2488))
          goto LABEL_79;
        goto LABEL_66;
      }
      v36 = *(std::__shared_weak_count **)(a1 + 2456);
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldaxr(p_shared_owners);
        while (__stlxr(v38 - 1, p_shared_owners));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      *(_BYTE *)(a1 + 2464) = 0;
      goto LABEL_65;
    }
  }
  else
  {
    v18 = *(_OWORD *)v14;
    *(_QWORD *)(v13 + 16) = v14[2];
    *(_OWORD *)v13 = v18;
    v19 = a1 + 2424;
    v20 = (_QWORD *)(a2 + 2424);
    v21 = *(unsigned __int8 *)(a2 + 2447);
    if (*(char *)(a1 + 2447) < 0)
      goto LABEL_39;
  }
LABEL_35:
  if ((v21 & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)v19, *(void **)(a2 + 2424), *(_QWORD *)(a2 + 2432));
    v25 = *(unsigned __int8 *)(a1 + 2464);
    if (v25 == *(unsigned __int8 *)(a2 + 2464))
      goto LABEL_47;
    goto LABEL_58;
  }
  v24 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = v20[2];
  *(_OWORD *)v19 = v24;
  v25 = *(unsigned __int8 *)(a1 + 2464);
  if (v25 != *(unsigned __int8 *)(a2 + 2464))
    goto LABEL_58;
LABEL_47:
  if (!v25)
    goto LABEL_65;
  v28 = *(_QWORD *)(a2 + 2448);
  v29 = *(_QWORD *)(a2 + 2456);
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)(a1 + 2448) = v28;
  v32 = *(std::__shared_weak_count **)(a1 + 2456);
  *(_QWORD *)(a1 + 2456) = v29;
  if (!v32)
    goto LABEL_65;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_65:
    v35 = *(unsigned __int8 *)(a1 + 2488);
    if (v35 != *(unsigned __int8 *)(a2 + 2488))
      goto LABEL_79;
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = *(unsigned __int8 *)(a1 + 2488);
  if (v35 != *(unsigned __int8 *)(a2 + 2488))
  {
LABEL_79:
    if (v35)
    {
      v49 = *(std::__shared_weak_count **)(a1 + 2480);
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      *(_BYTE *)(a1 + 2488) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a2 + 2472);
      v52 = *(_QWORD *)(a2 + 2480);
      *(_QWORD *)(a1 + 2480) = v52;
      if (v52)
      {
        v53 = (unint64_t *)(v52 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      *(_BYTE *)(a1 + 2488) = 1;
    }
    goto LABEL_90;
  }
LABEL_66:
  if (v35)
  {
    v39 = *(_QWORD *)(a2 + 2472);
    v40 = *(_QWORD *)(a2 + 2480);
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    *(_QWORD *)(a1 + 2472) = v39;
    v43 = *(std::__shared_weak_count **)(a1 + 2480);
    *(_QWORD *)(a1 + 2480) = v40;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
LABEL_90:
  v55 = *(_QWORD *)(a2 + 2496);
  *(_DWORD *)(a1 + 2504) = *(_DWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2496) = v55;
  *(_WORD *)(a1 + 2512) = *(_WORD *)(a2 + 2512);
  if (a1 != a2)
  {
    v56 = (void **)(a1 + 2520);
    v57 = *(_BYTE *)(a2 + 2543);
    if (*(char *)(a1 + 2543) < 0)
    {
      if (v57 >= 0)
        v59 = (void *)(a2 + 2520);
      else
        v59 = *(void **)(a2 + 2520);
      if (v57 >= 0)
        v60 = *(unsigned __int8 *)(a2 + 2543);
      else
        v60 = *(_QWORD *)(a2 + 2528);
      sub_20E867CBC(v56, v59, v60);
    }
    else if ((*(_BYTE *)(a2 + 2543) & 0x80) != 0)
    {
      sub_20E867BF8(v56, *(void **)(a2 + 2520), *(_QWORD *)(a2 + 2528));
    }
    else
    {
      v58 = *(_OWORD *)(a2 + 2520);
      *(_QWORD *)(a1 + 2536) = *(_QWORD *)(a2 + 2536);
      *(_OWORD *)v56 = v58;
    }
    *(_BYTE *)(a1 + 2544) = *(_BYTE *)(a2 + 2544);
    v61 = (void **)(a1 + 2552);
    v62 = *(_BYTE *)(a2 + 2575);
    if (*(char *)(a1 + 2575) < 0)
    {
      if (v62 >= 0)
        v64 = (void *)(a2 + 2552);
      else
        v64 = *(void **)(a2 + 2552);
      if (v62 >= 0)
        v65 = *(unsigned __int8 *)(a2 + 2575);
      else
        v65 = *(_QWORD *)(a2 + 2560);
      sub_20E867CBC(v61, v64, v65);
    }
    else if ((*(_BYTE *)(a2 + 2575) & 0x80) != 0)
    {
      sub_20E867BF8(v61, *(void **)(a2 + 2552), *(_QWORD *)(a2 + 2560));
    }
    else
    {
      v63 = *(_OWORD *)(a2 + 2552);
      *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 2568);
      *(_OWORD *)v61 = v63;
    }
  }
  v66 = *(_OWORD *)(a2 + 2576);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a2 + 2592);
  *(_OWORD *)(a1 + 2576) = v66;
  v67 = *(_OWORD *)(a2 + 2664);
  v69 = *(_OWORD *)(a2 + 2616);
  v68 = *(_OWORD *)(a2 + 2632);
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a2 + 2648);
  *(_OWORD *)(a1 + 2664) = v67;
  *(_OWORD *)(a1 + 2616) = v69;
  *(_OWORD *)(a1 + 2632) = v68;
  v70 = *(_OWORD *)(a2 + 2728);
  v72 = *(_OWORD *)(a2 + 2680);
  v71 = *(_OWORD *)(a2 + 2696);
  *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a2 + 2712);
  *(_OWORD *)(a1 + 2728) = v70;
  *(_OWORD *)(a1 + 2680) = v72;
  *(_OWORD *)(a1 + 2696) = v71;
  v73 = *(_OWORD *)(a2 + 2792);
  v75 = *(_OWORD *)(a2 + 2744);
  v74 = *(_OWORD *)(a2 + 2760);
  *(_OWORD *)(a1 + 2776) = *(_OWORD *)(a2 + 2776);
  *(_OWORD *)(a1 + 2792) = v73;
  *(_OWORD *)(a1 + 2744) = v75;
  *(_OWORD *)(a1 + 2760) = v74;
  *(_OWORD *)(a1 + 2600) = *(_OWORD *)(a2 + 2600);
  return a1;
}

size_t *sub_20E86751C(size_t *a1, size_t *a2)
{
  size_t *v2;
  __int128 v4;
  void **v5;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  __int128 v9;
  void *v10;
  size_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  char v16;
  __int128 v17;
  void *v18;
  size_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = a2;
  if (a1 == a2)
    goto LABEL_32;
  if (*((char *)a1 + 23) < 0)
  {
    if (*((char *)a2 + 23) >= 0)
    {
      v8 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (size_t *)*a2;
      v8 = v2[1];
    }
    sub_20E867CBC((void **)a1, a2, v8);
    v5 = (void **)(a1 + 3);
    v6 = v2 + 3;
    v7 = *((unsigned __int8 *)v2 + 47);
    if (*((char *)a1 + 47) < 0)
      goto LABEL_13;
  }
  else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
  {
    sub_20E867BF8(a1, (void *)*a2, a2[1]);
    v5 = (void **)(a1 + 3);
    v6 = v2 + 3;
    v7 = *((unsigned __int8 *)v2 + 47);
    if (*((char *)a1 + 47) < 0)
    {
LABEL_13:
      if ((v7 & 0x80u) == 0)
        v10 = v6;
      else
        v10 = (void *)v2[3];
      if ((v7 & 0x80u) == 0)
        v11 = v7;
      else
        v11 = v2[4];
      sub_20E867CBC(v5, v10, v11);
      goto LABEL_21;
    }
  }
  else
  {
    v4 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v4;
    v5 = (void **)(a1 + 3);
    v6 = a2 + 3;
    v7 = *((unsigned __int8 *)a2 + 47);
    if (*((char *)a1 + 47) < 0)
      goto LABEL_13;
  }
  if ((v7 & 0x80) != 0)
  {
    sub_20E867BF8(v5, (void *)v2[3], v2[4]);
  }
  else
  {
    v9 = *(_OWORD *)v6;
    v5[2] = (void *)v6[2];
    *(_OWORD *)v5 = v9;
  }
LABEL_21:
  v12 = *((_OWORD *)v2 + 3);
  v13 = *((_OWORD *)v2 + 4);
  v14 = *((_OWORD *)v2 + 5);
  *(_OWORD *)((char *)a1 + 89) = *(_OWORD *)((char *)v2 + 89);
  *((_OWORD *)a1 + 4) = v13;
  *((_OWORD *)a1 + 5) = v14;
  *((_OWORD *)a1 + 3) = v12;
  v15 = (void **)(a1 + 14);
  v16 = *((_BYTE *)v2 + 135);
  if (*((char *)a1 + 135) < 0)
  {
    if (v16 >= 0)
      v18 = v2 + 14;
    else
      v18 = (void *)v2[14];
    if (v16 >= 0)
      v19 = *((unsigned __int8 *)v2 + 135);
    else
      v19 = v2[15];
    sub_20E867CBC(v15, v18, v19);
  }
  else if ((*((_BYTE *)v2 + 135) & 0x80) != 0)
  {
    sub_20E867BF8(v15, (void *)v2[14], v2[15]);
  }
  else
  {
    v17 = *((_OWORD *)v2 + 7);
    a1[16] = v2[16];
    *(_OWORD *)v15 = v17;
  }
LABEL_32:
  v20 = *(_OWORD *)(v2 + 17);
  v21 = *(_OWORD *)(v2 + 19);
  v22 = *(_OWORD *)(v2 + 21);
  a1[23] = v2[23];
  *(_OWORD *)(a1 + 21) = v22;
  *(_OWORD *)(a1 + 19) = v21;
  *(_OWORD *)(a1 + 17) = v20;
  v23 = *((_OWORD *)v2 + 12);
  a1[26] = v2[26];
  *((_OWORD *)a1 + 12) = v23;
  return a1;
}

uint64_t sub_20E8676A4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_WORD *)a1 = *(_WORD *)a2;
  sub_20E867A9C(a1 + 8, (__int128 *)(a2 + 8));
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v4 = *(_OWORD *)(a2 + 248);
  v5 = *(_OWORD *)(a2 + 264);
  v6 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v6;
  *(_OWORD *)(a1 + 264) = v5;
  *(_OWORD *)(a1 + 248) = v4;
  v7 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v7;
  if (a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 312), *(char **)(a2 + 312), *(char **)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 336), *(char **)(a2 + 336), *(char **)(a2 + 344), (uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 360), *(char **)(a2 + 360), *(char **)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3);
  }
  v8 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v8;
  v9 = *(_OWORD *)(a2 + 416);
  v10 = *(_OWORD *)(a2 + 432);
  v11 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v11;
  *(_OWORD *)(a1 + 416) = v9;
  *(_OWORD *)(a1 + 432) = v10;
  memcpy((void *)(a1 + 480), (const void *)(a2 + 480), 0x230uLL);
  if (a1 != a2)
  {
    v12 = (void **)(a1 + 1040);
    v13 = *(_BYTE *)(a2 + 1063);
    if (*(char *)(a1 + 1063) < 0)
    {
      if (v13 >= 0)
        v15 = (void *)(a2 + 1040);
      else
        v15 = *(void **)(a2 + 1040);
      if (v13 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 1063);
      else
        v16 = *(_QWORD *)(a2 + 1048);
      sub_20E867CBC(v12, v15, v16);
    }
    else if ((*(_BYTE *)(a2 + 1063) & 0x80) != 0)
    {
      sub_20E867BF8(v12, *(void **)(a2 + 1040), *(_QWORD *)(a2 + 1048));
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 1040);
      *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
      *(_OWORD *)v12 = v14;
    }
  }
  v17 = *(_OWORD *)(a2 + 1064);
  v18 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v18;
  *(_OWORD *)(a1 + 1064) = v17;
  v20 = *(_OWORD *)(a2 + 1176);
  v19 = *(_OWORD *)(a2 + 1192);
  v21 = *(_OWORD *)(a2 + 1160);
  *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 1208);
  *(_OWORD *)(a1 + 1176) = v20;
  *(_OWORD *)(a1 + 1192) = v19;
  *(_OWORD *)(a1 + 1160) = v21;
  v22 = *(_OWORD *)(a2 + 1112);
  v23 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v23;
  *(_OWORD *)(a1 + 1112) = v22;
  sub_20E86783C(a1 + 1216, a2 + 1216);
  memcpy((void *)(a1 + 2992), (const void *)(a2 + 2992), 0x2F8uLL);
  return a1;
}

uint64_t sub_20E86783C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void **v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  size_t v23;
  __int128 v24;
  void *v25;
  size_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  char v35;
  __int128 v36;
  void *v37;
  size_t v38;

  memcpy((void *)a1, (const void *)a2, 0x109uLL);
  sub_20E867F58(a1 + 272, a2 + 272);
  v5 = *(_OWORD *)(a2 + 1128);
  v4 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v5;
  *(_OWORD *)(a1 + 1144) = v4;
  v6 = *(_OWORD *)(a2 + 1208);
  v8 = *(_OWORD *)(a2 + 1160);
  v7 = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v6;
  *(_OWORD *)(a1 + 1160) = v8;
  *(_OWORD *)(a1 + 1176) = v7;
  if (a1 == a2)
  {
    v15 = *(_OWORD *)(a2 + 1272);
    v16 = *(_OWORD *)(a2 + 1304);
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
    *(_OWORD *)(a1 + 1304) = v16;
    *(_OWORD *)(a1 + 1272) = v15;
    v17 = *(_OWORD *)(a2 + 1408);
    v18 = *(_OWORD *)(a2 + 1424);
    v19 = *(_OWORD *)(a2 + 1440);
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
    *(_OWORD *)(a1 + 1440) = v19;
    *(_OWORD *)(a1 + 1424) = v18;
    *(_OWORD *)(a1 + 1408) = v17;
    v20 = *(_OWORD *)(a2 + 1344);
    v21 = *(_OWORD *)(a2 + 1360);
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
    *(_OWORD *)(a1 + 1360) = v21;
    *(_OWORD *)(a1 + 1344) = v20;
    goto LABEL_36;
  }
  v9 = (void **)(a1 + 1224);
  v10 = *(_BYTE *)(a2 + 1247);
  if (*(char *)(a1 + 1247) < 0)
  {
    if (v10 >= 0)
      v22 = (void *)(a2 + 1224);
    else
      v22 = *(void **)(a2 + 1224);
    if (v10 >= 0)
      v23 = *(unsigned __int8 *)(a2 + 1247);
    else
      v23 = *(_QWORD *)(a2 + 1232);
    sub_20E867CBC(v9, v22, v23);
    v12 = a1 + 1248;
    v13 = (_QWORD *)(a2 + 1248);
    v14 = *(unsigned __int8 *)(a2 + 1271);
    if (*(char *)(a1 + 1271) < 0)
      goto LABEL_17;
  }
  else if ((*(_BYTE *)(a2 + 1247) & 0x80) != 0)
  {
    sub_20E867BF8(v9, *(void **)(a2 + 1224), *(_QWORD *)(a2 + 1232));
    v12 = a1 + 1248;
    v13 = (_QWORD *)(a2 + 1248);
    v14 = *(unsigned __int8 *)(a2 + 1271);
    if (*(char *)(a1 + 1271) < 0)
    {
LABEL_17:
      if ((v14 & 0x80u) == 0)
        v25 = v13;
      else
        v25 = *(void **)(a2 + 1248);
      if ((v14 & 0x80u) == 0)
        v26 = v14;
      else
        v26 = *(_QWORD *)(a2 + 1256);
      sub_20E867CBC((void **)v12, v25, v26);
      goto LABEL_25;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 1224);
    *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
    *(_OWORD *)v9 = v11;
    v12 = a1 + 1248;
    v13 = (_QWORD *)(a2 + 1248);
    v14 = *(unsigned __int8 *)(a2 + 1271);
    if (*(char *)(a1 + 1271) < 0)
      goto LABEL_17;
  }
  if ((v14 & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)v12, *(void **)(a2 + 1248), *(_QWORD *)(a2 + 1256));
  }
  else
  {
    v24 = *(_OWORD *)v13;
    *(_QWORD *)(v12 + 16) = v13[2];
    *(_OWORD *)v12 = v24;
  }
LABEL_25:
  v27 = *(_OWORD *)(a2 + 1272);
  v28 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1304) = v28;
  *(_OWORD *)(a1 + 1272) = v27;
  sub_20E86811C((_QWORD *)(a1 + 1320), *(char **)(a2 + 1320), *(char **)(a2 + 1328), (uint64_t)(*(_QWORD *)(a2 + 1328) - *(_QWORD *)(a2 + 1320)) >> 3);
  v29 = *(_OWORD *)(a2 + 1344);
  v30 = *(_OWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = v30;
  *(_OWORD *)(a1 + 1344) = v29;
  v31 = *(_OWORD *)(a2 + 1392);
  v32 = *(_OWORD *)(a2 + 1408);
  v33 = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1424) = v33;
  *(_OWORD *)(a1 + 1408) = v32;
  *(_OWORD *)(a1 + 1392) = v31;
  v34 = (void **)(a1 + 1456);
  v35 = *(_BYTE *)(a2 + 1479);
  if (*(char *)(a1 + 1479) < 0)
  {
    if (v35 >= 0)
      v37 = (void *)(a2 + 1456);
    else
      v37 = *(void **)(a2 + 1456);
    if (v35 >= 0)
      v38 = *(unsigned __int8 *)(a2 + 1479);
    else
      v38 = *(_QWORD *)(a2 + 1464);
    sub_20E867CBC(v34, v37, v38);
  }
  else if ((*(_BYTE *)(a2 + 1479) & 0x80) != 0)
  {
    sub_20E867BF8(v34, *(void **)(a2 + 1456), *(_QWORD *)(a2 + 1464));
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 1456);
    *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
    *(_OWORD *)v34 = v36;
  }
LABEL_36:
  memcpy((void *)(a1 + 1480), (const void *)(a2 + 1480), 0x128uLL);
  return a1;
}

uint64_t sub_20E867A9C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  size_t v12;
  __int128 v13;
  void *v14;
  size_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if ((__int128 *)a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 24), *((char **)a2 + 3), *((char **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
    v5 = (void **)(a1 + 48);
    v6 = *((_BYTE *)a2 + 71);
    if (*(char *)(a1 + 71) < 0)
    {
      if (v6 >= 0)
        v11 = a2 + 3;
      else
        v11 = (void *)*((_QWORD *)a2 + 6);
      if (v6 >= 0)
        v12 = *((unsigned __int8 *)a2 + 71);
      else
        v12 = *((_QWORD *)a2 + 7);
      sub_20E867CBC(v5, v11, v12);
      v8 = a1 + 72;
      v9 = (_QWORD *)a2 + 9;
      v10 = *((unsigned __int8 *)a2 + 95);
      if (*(char *)(a1 + 95) < 0)
        goto LABEL_17;
    }
    else if ((*((_BYTE *)a2 + 71) & 0x80) != 0)
    {
      sub_20E867BF8(v5, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
      v8 = a1 + 72;
      v9 = (_QWORD *)a2 + 9;
      v10 = *((unsigned __int8 *)a2 + 95);
      if (*(char *)(a1 + 95) < 0)
      {
LABEL_17:
        if ((v10 & 0x80u) == 0)
          v14 = v9;
        else
          v14 = (void *)*((_QWORD *)a2 + 9);
        if ((v10 & 0x80u) == 0)
          v15 = v10;
        else
          v15 = *((_QWORD *)a2 + 10);
        sub_20E867CBC((void **)v8, v14, v15);
        goto LABEL_25;
      }
    }
    else
    {
      v7 = a2[3];
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_OWORD *)v5 = v7;
      v8 = a1 + 72;
      v9 = (_QWORD *)a2 + 9;
      v10 = *((unsigned __int8 *)a2 + 95);
      if (*(char *)(a1 + 95) < 0)
        goto LABEL_17;
    }
    if ((v10 & 0x80) != 0)
    {
      sub_20E867BF8((_QWORD *)v8, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
    }
    else
    {
      v13 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v9[2];
      *(_OWORD *)v8 = v13;
    }
LABEL_25:
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    sub_20E867E00((_QWORD *)(a1 + 104), *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    goto LABEL_26;
  }
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
LABEL_26:
  *(_OWORD *)(a1 + 128) = a2[8];
  v16 = a2[9];
  v17 = a2[10];
  v18 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 144) = v16;
  return a1;
}

_QWORD *sub_20E867BF8(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_20E860B7C();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_20E867CBC(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    sub_20E860B7C();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

_QWORD *sub_20E867E00(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_20E867F44();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E867F44()
{
  sub_20E860B90("vector");
}

uint64_t sub_20E867F58(uint64_t a1, uint64_t a2)
{
  void **v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  size_t v11;
  __int128 v12;
  void **v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  size_t v17;
  __int128 v18;
  void *v19;
  size_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  memcpy((void *)a1, (const void *)a2, 0x21DuLL);
  if (a1 == a2)
    goto LABEL_35;
  v4 = (void **)(a1 + 544);
  v5 = *(_BYTE *)(a2 + 567);
  if (*(char *)(a1 + 567) < 0)
  {
    if (v5 >= 0)
      v10 = (void *)(a2 + 544);
    else
      v10 = *(void **)(a2 + 544);
    if (v5 >= 0)
      v11 = *(unsigned __int8 *)(a2 + 567);
    else
      v11 = *(_QWORD *)(a2 + 552);
    sub_20E867CBC(v4, v10, v11);
    v7 = a1 + 568;
    v8 = (_QWORD *)(a2 + 568);
    v9 = *(unsigned __int8 *)(a2 + 591);
    if (*(char *)(a1 + 591) < 0)
    {
LABEL_17:
      if ((v9 & 0x80u) == 0)
        v16 = v8;
      else
        v16 = *(void **)(a2 + 568);
      if ((v9 & 0x80u) == 0)
        v17 = v9;
      else
        v17 = *(_QWORD *)(a2 + 576);
      sub_20E867CBC((void **)v7, v16, v17);
      v13 = (void **)(a1 + 592);
      v14 = (_QWORD *)(a2 + 592);
      v15 = *(unsigned __int8 *)(a2 + 615);
      if ((*(char *)(a1 + 615) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_27;
    }
  }
  else if ((*(_BYTE *)(a2 + 567) & 0x80) != 0)
  {
    sub_20E867BF8(v4, *(void **)(a2 + 544), *(_QWORD *)(a2 + 552));
    v7 = a1 + 568;
    v8 = (_QWORD *)(a2 + 568);
    v9 = *(unsigned __int8 *)(a2 + 591);
    if (*(char *)(a1 + 591) < 0)
      goto LABEL_17;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_OWORD *)v4 = v6;
    v7 = a1 + 568;
    v8 = (_QWORD *)(a2 + 568);
    v9 = *(unsigned __int8 *)(a2 + 591);
    if (*(char *)(a1 + 591) < 0)
      goto LABEL_17;
  }
  if ((v9 & 0x80) == 0)
  {
    v12 = *(_OWORD *)v8;
    *(_QWORD *)(v7 + 16) = v8[2];
    *(_OWORD *)v7 = v12;
    v13 = (void **)(a1 + 592);
    v14 = (_QWORD *)(a2 + 592);
    v15 = *(unsigned __int8 *)(a2 + 615);
    if (*(char *)(a1 + 615) < 0)
      goto LABEL_27;
LABEL_24:
    if ((v15 & 0x80) != 0)
    {
      sub_20E867BF8(v13, *(void **)(a2 + 592), *(_QWORD *)(a2 + 600));
    }
    else
    {
      v18 = *(_OWORD *)v14;
      v13[2] = (void *)v14[2];
      *(_OWORD *)v13 = v18;
    }
    goto LABEL_35;
  }
  sub_20E867BF8((_QWORD *)v7, *(void **)(a2 + 568), *(_QWORD *)(a2 + 576));
  v13 = (void **)(a1 + 592);
  v14 = (_QWORD *)(a2 + 592);
  v15 = *(unsigned __int8 *)(a2 + 615);
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_27:
  if ((v15 & 0x80u) == 0)
    v19 = v14;
  else
    v19 = *(void **)(a2 + 592);
  if ((v15 & 0x80u) == 0)
    v20 = v15;
  else
    v20 = *(_QWORD *)(a2 + 600);
  sub_20E867CBC(v13, v19, v20);
LABEL_35:
  v21 = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = v21;
  v22 = *(_OWORD *)(a2 + 648);
  v23 = *(_OWORD *)(a2 + 664);
  v24 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = v24;
  *(_OWORD *)(a1 + 648) = v22;
  *(_OWORD *)(a1 + 664) = v23;
  v25 = *(_OWORD *)(a2 + 712);
  v26 = *(_OWORD *)(a2 + 728);
  v27 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v27;
  *(_OWORD *)(a1 + 712) = v25;
  *(_OWORD *)(a1 + 728) = v26;
  v28 = *(_OWORD *)(a2 + 776);
  v29 = *(_OWORD *)(a2 + 792);
  v30 = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 824) = v30;
  *(_OWORD *)(a1 + 776) = v28;
  *(_OWORD *)(a1 + 792) = v29;
  return a1;
}

_QWORD *sub_20E86811C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_20E867F44();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20E868260(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v25 = 0;
LABEL_48:
      sub_20E86872C((uint64_t)a1, v25);
      goto LABEL_49;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v37 = (uint64_t *)v10[1];
          if (!v37)
            break;
          do
          {
            v10 = v37;
            v37 = (uint64_t *)*v37;
          }
          while (v37);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      do
      {
        v9 = v10;
        v14 = *(_QWORD *)((char *)v13 + 28);
        *(uint64_t *)((char *)v12 + 28) = v14;
        v15 = *v8;
        v16 = (uint64_t **)(v5 + 8);
        v17 = (uint64_t **)(v5 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              v16 = (uint64_t **)v15;
              v18 = *((_DWORD *)v15 + 7);
              if (v18 <= v14 && (v18 != (_DWORD)v14 || *((_DWORD *)v15 + 8) <= HIDWORD(v14)))
                break;
              v15 = (uint64_t *)*v15;
              v17 = v16;
              if (!*v16)
                goto LABEL_21;
            }
            v15 = (uint64_t *)v15[1];
          }
          while (v15);
          v17 = v16 + 1;
        }
LABEL_21:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        *v17 = v12;
        v19 = **(_QWORD **)v5;
        if (v19)
        {
          *(_QWORD *)v5 = v19;
          v12 = *v17;
        }
        sub_20E868578(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (uint64_t *)v10[2];
          if (v10)
          {
            v22 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v23 = (uint64_t *)v10[1];
                if (!v23)
                  break;
                do
                {
                  v10 = v23;
                  v23 = (uint64_t *)*v23;
                }
                while (v23);
              }
            }
            else
            {
              for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
              {
                do
                {
                  v10 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v20 = (_QWORD *)v13[1];
        if (v20)
        {
          do
          {
            v4 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v21 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v21);
        }
        if (!v9)
          break;
        v12 = v9;
        v13 = v4;
      }
      while (v4 != a3);
    }
    sub_20E86872C(v5, v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = (uint64_t **)v5;
      v25 = v10;
      goto LABEL_48;
    }
  }
LABEL_49:
  if (v4 != a3)
  {
    v26 = (uint64_t **)(v5 + 8);
    do
    {
      v27 = (uint64_t *)operator new(0x28uLL);
      v28 = v27;
      v29 = *(_QWORD *)((char *)v4 + 28);
      *(uint64_t *)((char *)v27 + 28) = v29;
      v30 = *v26;
      v31 = (uint64_t **)(v5 + 8);
      v32 = (uint64_t **)(v5 + 8);
      if (*v26)
      {
        do
        {
          while (1)
          {
            v31 = (uint64_t **)v30;
            v33 = *((_DWORD *)v30 + 7);
            if (v33 <= v29 && (v33 != (_DWORD)v29 || *((_DWORD *)v30 + 8) <= HIDWORD(v29)))
              break;
            v30 = (uint64_t *)*v30;
            v32 = v31;
            if (!*v31)
              goto LABEL_60;
          }
          v30 = (uint64_t *)v30[1];
        }
        while (v30);
        v32 = v31 + 1;
      }
LABEL_60:
      *v27 = 0;
      v27[1] = 0;
      v27[2] = (uint64_t)v31;
      *v32 = v27;
      v34 = **(_QWORD **)v5;
      if (v34)
      {
        *(_QWORD *)v5 = v34;
        v28 = *v32;
      }
      sub_20E868578(*(uint64_t **)(v5 + 8), v28);
      ++*(_QWORD *)(v5 + 16);
      v35 = (_QWORD *)v4[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v4[2];
          v21 = *v36 == (_QWORD)v4;
          v4 = v36;
        }
        while (!v21);
      }
      v4 = v36;
    }
    while (v36 != a3);
  }
}

uint64_t *sub_20E868578(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void sub_20E86872C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E86872C(a1, *a2);
    sub_20E86872C(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_20E86876C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (uint64_t)(v8 - *result) >> 1)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_23;
    if (v8 <= __sz)
      v10 = __sz;
    else
      v10 = v8;
    v11 = v8 >= 0x7FFFFFFFFFFFFFFELL;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 < 0)
LABEL_23:
      sub_20E867F44();
    v13 = 2 * v12;
    result = operator new(2 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 1;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v14);
    goto LABEL_22;
  }
  v18 = &__src[2 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_20E8688A4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E867F44();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_20E8689E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  char v9;
  __int128 v10;
  void **v11;
  _QWORD *v12;
  size_t v13;
  __int16 v14;
  void *v15;
  size_t v16;
  __int128 v17;
  void **v18;
  _QWORD *v19;
  size_t v20;
  void *v21;
  size_t v22;
  __int128 v23;
  void **v24;
  _QWORD *v25;
  size_t v26;
  void *v27;
  size_t v28;
  __int128 v29;
  void **v30;
  _QWORD *v31;
  size_t v32;
  void *v33;
  size_t v34;
  __int128 v35;
  void *v36;
  size_t v37;
  __int16 v38;
  void **v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  void *v45;
  size_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  size_t v50;
  void *v51;
  size_t v52;
  __int128 v53;
  void *v54;
  size_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 == a2)
  {
    v14 = *(_WORD *)(a2 + 216);
    *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
    *(_WORD *)(a1 + 216) = v14;
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    goto LABEL_92;
  }
  v8 = (void **)(a1 + 96);
  v9 = *(_BYTE *)(a2 + 119);
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    if ((*(_BYTE *)(a2 + 119) & 0x80) != 0)
    {
      sub_20E867BF8(v8, *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
      v11 = (void **)(a1 + 120);
      v12 = (_QWORD *)(a2 + 120);
      v13 = *(unsigned __int8 *)(a2 + 143);
      if (*(char *)(a1 + 143) < 0)
        goto LABEL_18;
    }
    else
    {
      v10 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_OWORD *)v8 = v10;
      v11 = (void **)(a1 + 120);
      v12 = (_QWORD *)(a2 + 120);
      v13 = *(unsigned __int8 *)(a2 + 143);
      if (*(char *)(a1 + 143) < 0)
        goto LABEL_18;
    }
LABEL_14:
    if ((v13 & 0x80) != 0)
    {
      sub_20E867BF8(v11, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
      v18 = (void **)(a1 + 144);
      v19 = (_QWORD *)(a2 + 144);
      v20 = *(unsigned __int8 *)(a2 + 167);
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_25;
    }
    else
    {
      v17 = *(_OWORD *)v12;
      v11[2] = (void *)v12[2];
      *(_OWORD *)v11 = v17;
      v18 = (void **)(a1 + 144);
      v19 = (_QWORD *)(a2 + 144);
      v20 = *(unsigned __int8 *)(a2 + 167);
      if ((*(char *)(a1 + 167) & 0x80000000) == 0)
        goto LABEL_25;
    }
    goto LABEL_29;
  }
  if (v9 >= 0)
    v15 = (void *)(a2 + 96);
  else
    v15 = *(void **)(a2 + 96);
  if (v9 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 119);
  else
    v16 = *(_QWORD *)(a2 + 104);
  sub_20E867CBC(v8, v15, v16);
  v11 = (void **)(a1 + 120);
  v12 = (_QWORD *)(a2 + 120);
  v13 = *(unsigned __int8 *)(a2 + 143);
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    goto LABEL_14;
LABEL_18:
  if ((v13 & 0x80u) == 0)
    v21 = v12;
  else
    v21 = *(void **)(a2 + 120);
  if ((v13 & 0x80u) == 0)
    v22 = v13;
  else
    v22 = *(_QWORD *)(a2 + 128);
  sub_20E867CBC(v11, v21, v22);
  v18 = (void **)(a1 + 144);
  v19 = (_QWORD *)(a2 + 144);
  v20 = *(unsigned __int8 *)(a2 + 167);
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_25:
    if ((v20 & 0x80) != 0)
    {
      sub_20E867BF8(v18, *(void **)(a2 + 144), *(_QWORD *)(a2 + 152));
      v24 = (void **)(a1 + 168);
      v25 = (_QWORD *)(a2 + 168);
      v26 = *(unsigned __int8 *)(a2 + 191);
      if (*(char *)(a1 + 191) < 0)
        goto LABEL_40;
    }
    else
    {
      v23 = *(_OWORD *)v19;
      v18[2] = (void *)v19[2];
      *(_OWORD *)v18 = v23;
      v24 = (void **)(a1 + 168);
      v25 = (_QWORD *)(a2 + 168);
      v26 = *(unsigned __int8 *)(a2 + 191);
      if (*(char *)(a1 + 191) < 0)
        goto LABEL_40;
    }
LABEL_36:
    if ((v26 & 0x80) != 0)
    {
      sub_20E867BF8(v24, *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
      v30 = (void **)(a1 + 192);
      v31 = (_QWORD *)(a2 + 192);
      v32 = *(unsigned __int8 *)(a2 + 215);
      if (*(char *)(a1 + 215) < 0)
        goto LABEL_50;
    }
    else
    {
      v29 = *(_OWORD *)v25;
      v24[2] = (void *)v25[2];
      *(_OWORD *)v24 = v29;
      v30 = (void **)(a1 + 192);
      v31 = (_QWORD *)(a2 + 192);
      v32 = *(unsigned __int8 *)(a2 + 215);
      if (*(char *)(a1 + 215) < 0)
        goto LABEL_50;
    }
LABEL_47:
    if ((v32 & 0x80) != 0)
    {
      sub_20E867BF8(v30, *(void **)(a2 + 192), *(_QWORD *)(a2 + 200));
    }
    else
    {
      v35 = *(_OWORD *)v31;
      v30[2] = (void *)v31[2];
      *(_OWORD *)v30 = v35;
    }
    goto LABEL_58;
  }
LABEL_29:
  if ((v20 & 0x80u) == 0)
    v27 = v19;
  else
    v27 = *(void **)(a2 + 144);
  if ((v20 & 0x80u) == 0)
    v28 = v20;
  else
    v28 = *(_QWORD *)(a2 + 152);
  sub_20E867CBC(v18, v27, v28);
  v24 = (void **)(a1 + 168);
  v25 = (_QWORD *)(a2 + 168);
  v26 = *(unsigned __int8 *)(a2 + 191);
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  if ((v26 & 0x80u) == 0)
    v33 = v25;
  else
    v33 = *(void **)(a2 + 168);
  if ((v26 & 0x80u) == 0)
    v34 = v26;
  else
    v34 = *(_QWORD *)(a2 + 176);
  sub_20E867CBC(v24, v33, v34);
  v30 = (void **)(a1 + 192);
  v31 = (_QWORD *)(a2 + 192);
  v32 = *(unsigned __int8 *)(a2 + 215);
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_50:
  if ((v32 & 0x80u) == 0)
    v36 = v31;
  else
    v36 = *(void **)(a2 + 192);
  if ((v32 & 0x80u) == 0)
    v37 = v32;
  else
    v37 = *(_QWORD *)(a2 + 200);
  sub_20E867CBC(v30, v36, v37);
LABEL_58:
  v38 = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_WORD *)(a1 + 216) = v38;
  v39 = (void **)(a1 + 224);
  v40 = *(_BYTE *)(a2 + 247);
  if (*(char *)(a1 + 247) < 0)
  {
    if (v40 >= 0)
      v45 = (void *)(a2 + 224);
    else
      v45 = *(void **)(a2 + 224);
    if (v40 >= 0)
      v46 = *(unsigned __int8 *)(a2 + 247);
    else
      v46 = *(_QWORD *)(a2 + 232);
    sub_20E867CBC(v39, v45, v46);
    v42 = a1 + 248;
    v43 = (_QWORD *)(a2 + 248);
    v44 = *(unsigned __int8 *)(a2 + 271);
    if (*(char *)(a1 + 271) < 0)
    {
LABEL_73:
      if ((v44 & 0x80u) == 0)
        v51 = v43;
      else
        v51 = *(void **)(a2 + 248);
      if ((v44 & 0x80u) == 0)
        v52 = v44;
      else
        v52 = *(_QWORD *)(a2 + 256);
      sub_20E867CBC((void **)v42, v51, v52);
      v48 = a1 + 272;
      v49 = (_QWORD *)(a2 + 272);
      v50 = *(unsigned __int8 *)(a2 + 295);
      if ((*(char *)(a1 + 295) & 0x80000000) == 0)
        goto LABEL_80;
LABEL_83:
      if ((v50 & 0x80u) == 0)
        v54 = v49;
      else
        v54 = *(void **)(a2 + 272);
      if ((v50 & 0x80u) == 0)
        v55 = v50;
      else
        v55 = *(_QWORD *)(a2 + 280);
      sub_20E867CBC((void **)v48, v54, v55);
      goto LABEL_91;
    }
  }
  else if ((*(_BYTE *)(a2 + 247) & 0x80) != 0)
  {
    sub_20E867BF8(v39, *(void **)(a2 + 224), *(_QWORD *)(a2 + 232));
    v42 = a1 + 248;
    v43 = (_QWORD *)(a2 + 248);
    v44 = *(unsigned __int8 *)(a2 + 271);
    if (*(char *)(a1 + 271) < 0)
      goto LABEL_73;
  }
  else
  {
    v41 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)v39 = v41;
    v42 = a1 + 248;
    v43 = (_QWORD *)(a2 + 248);
    v44 = *(unsigned __int8 *)(a2 + 271);
    if (*(char *)(a1 + 271) < 0)
      goto LABEL_73;
  }
  if ((v44 & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)v42, *(void **)(a2 + 248), *(_QWORD *)(a2 + 256));
    v48 = a1 + 272;
    v49 = (_QWORD *)(a2 + 272);
    v50 = *(unsigned __int8 *)(a2 + 295);
    if (*(char *)(a1 + 295) < 0)
      goto LABEL_83;
  }
  else
  {
    v47 = *(_OWORD *)v43;
    *(_QWORD *)(v42 + 16) = v43[2];
    *(_OWORD *)v42 = v47;
    v48 = a1 + 272;
    v49 = (_QWORD *)(a2 + 272);
    v50 = *(unsigned __int8 *)(a2 + 295);
    if (*(char *)(a1 + 295) < 0)
      goto LABEL_83;
  }
LABEL_80:
  if ((v50 & 0x80) != 0)
  {
    sub_20E867BF8((_QWORD *)v48, *(void **)(a2 + 272), *(_QWORD *)(a2 + 280));
  }
  else
  {
    v53 = *(_OWORD *)v49;
    *(_QWORD *)(v48 + 16) = v49[2];
    *(_OWORD *)v48 = v53;
  }
LABEL_91:
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  sub_20E86811C((_QWORD *)(a1 + 304), *(char **)(a2 + 304), *(char **)(a2 + 312), (uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3);
  sub_20E867E00((_QWORD *)(a1 + 328), *(char **)(a2 + 328), *(char **)(a2 + 336), (uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 2);
  v56 = *(_OWORD *)(a2 + 352);
  v57 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v57;
  *(_OWORD *)(a1 + 352) = v56;
  v58 = *(_OWORD *)(a2 + 400);
  v59 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v59;
  *(_OWORD *)(a1 + 400) = v58;
  sub_20E86811C((_QWORD *)(a1 + 448), *(char **)(a2 + 448), *(char **)(a2 + 456), (uint64_t)(*(_QWORD *)(a2 + 456) - *(_QWORD *)(a2 + 448)) >> 3);
  sub_20E86811C((_QWORD *)(a1 + 472), *(char **)(a2 + 472), *(char **)(a2 + 480), (uint64_t)(*(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472)) >> 3);
LABEL_92:
  v60 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v60;
  v61 = *(_OWORD *)(a2 + 528);
  v62 = *(_OWORD *)(a2 + 544);
  v63 = *(_OWORD *)(a2 + 560);
  *(_WORD *)(a1 + 576) = *(_WORD *)(a2 + 576);
  *(_OWORD *)(a1 + 544) = v62;
  *(_OWORD *)(a1 + 560) = v63;
  *(_OWORD *)(a1 + 528) = v61;
  v64 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v64;
  v65 = *(_OWORD *)(a2 + 616);
  v66 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v66;
  *(_OWORD *)(a1 + 616) = v65;
  if (a1 != a2)
  {
    sub_20E86811C((_QWORD *)(a1 + 664), *(char **)(a2 + 664), *(char **)(a2 + 672), (uint64_t)(*(_QWORD *)(a2 + 672) - *(_QWORD *)(a2 + 664)) >> 3);
    sub_20E86811C((_QWORD *)(a1 + 688), *(char **)(a2 + 688), *(char **)(a2 + 696), (uint64_t)(*(_QWORD *)(a2 + 696) - *(_QWORD *)(a2 + 688)) >> 3);
  }
  v67 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v67;
  v68 = *(_OWORD *)(a2 + 744);
  v69 = *(_OWORD *)(a2 + 760);
  v70 = *(_OWORD *)(a2 + 776);
  *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
  *(_OWORD *)(a1 + 760) = v69;
  *(_OWORD *)(a1 + 776) = v70;
  *(_OWORD *)(a1 + 744) = v68;
  v71 = *(_OWORD *)(a2 + 800);
  v72 = *(_OWORD *)(a2 + 816);
  v73 = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 844) = *(_OWORD *)(a2 + 844);
  *(_OWORD *)(a1 + 816) = v72;
  *(_OWORD *)(a1 + 832) = v73;
  *(_OWORD *)(a1 + 800) = v71;
  return a1;
}

void sub_20E868EF8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  void *v11;

  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(_BYTE *)(a1 + 184))
    {
      v4 = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      if (a1 != a2)
      {
        sub_20E86811C((_QWORD *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
        sub_20E86811C((_QWORD *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
      }
      v6 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v6;
      v7 = *(_OWORD *)(a2 + 128);
      v8 = *(_OWORD *)(a2 + 144);
      v9 = *(_OWORD *)(a2 + 160);
      *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
      *(_OWORD *)(a1 + 144) = v8;
      *(_OWORD *)(a1 + 160) = v9;
      *(_OWORD *)(a1 + 128) = v7;
    }
  }
  else if (*(_BYTE *)(a1 + 184))
  {
    v10 = *(void **)(a1 + 72);
    if (v10)
    {
      *(_QWORD *)(a1 + 80) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(a1 + 48);
    if (v11)
    {
      *(_QWORD *)(a1 + 56) = v11;
      operator delete(v11);
    }
    *(_BYTE *)(a1 + 184) = 0;
  }
  else
  {
    sub_20E868FE0(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 184) = 1;
  }
}

uint64_t sub_20E868FE0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 6);
  v6 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 64) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 9);
  v11 = (_BYTE *)*((_QWORD *)a2 + 10);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 80) = v15;
  }
  v16 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v16;
  v17 = a2[8];
  v18 = a2[9];
  v19 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v18;
  *(_OWORD *)(a1 + 160) = v19;
  *(_OWORD *)(a1 + 128) = v17;
  return a1;
}

void sub_20E8690E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E869118(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  size_t v5;
  size_t v6;

  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if ((_QWORD *)a1 != a2 && *(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        v5 = a2[1];
        if (*((char *)a2 + 23) >= 0)
        {
          v6 = *((unsigned __int8 *)a2 + 23);
        }
        else
        {
          a2 = (_QWORD *)*a2;
          v6 = v5;
        }
        sub_20E867CBC((void **)a1, a2, v6);
      }
      else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        sub_20E867BF8((_QWORD *)a1, (void *)*a2, a2[1]);
      }
      else
      {
        v3 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)*a2, a2[1]);
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t sub_20E869230(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E869298(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        v5 = *(unsigned int **)(v3 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v4);
  }
  v12 = *(void **)(a1 + 56);
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 40);
    v15 = *(void **)(a1 + 32);
    if (v14 != v13)
    {
      do
      {
        v16 = *(unsigned int **)(v14 - 8);
        if (v16)
        {
          v17 = v16 + 2;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
            v20 = v16 + 3;
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
              (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v13;
    operator delete(v15);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E869418(uint64_t a1)
{
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v2 = (char *)(a1 + 9407);
  if ((*(char *)(a1 + 11127) & 0x80000000) == 0)
  {
    v3 = *(void **)(a1 + 10720);
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 11104));
  v3 = *(void **)(a1 + 10720);
  if (v3)
  {
LABEL_3:
    *(_QWORD *)(a1 + 10728) = v3;
    operator delete(v3);
  }
LABEL_4:
  v4 = *(void **)(a1 + 10696);
  if (v4)
  {
    *(_QWORD *)(a1 + 10704) = v4;
    operator delete(v4);
  }
  if (v2[1273] && v2[1272] < 0)
  {
    operator delete(*(void **)(a1 + 10656));
    if ((v2[1024] & 0x80000000) == 0)
    {
LABEL_9:
      v5 = *(void **)(a1 + 10360);
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v2[1024] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 10408));
  v5 = *(void **)(a1 + 10360);
  if (v5)
  {
LABEL_10:
    *(_QWORD *)(a1 + 10368) = v5;
    operator delete(v5);
  }
LABEL_11:
  v6 = *(void **)(a1 + 9968);
  if (v6)
  {
    *(_QWORD *)(a1 + 9976) = v6;
    operator delete(v6);
  }
  if ((v2[336] & 0x80000000) == 0)
  {
    v7 = *(void **)(a1 + 9656);
    if (!v7)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 9720));
  v7 = *(void **)(a1 + 9656);
  if (v7)
  {
LABEL_15:
    *(_QWORD *)(a1 + 9664) = v7;
    operator delete(v7);
  }
LABEL_16:
  v8 = *(void **)(a1 + 9624);
  if (v8)
  {
    *(_QWORD *)(a1 + 9632) = v8;
    operator delete(v8);
  }
  if (v2[40] < 0)
  {
    operator delete(*(void **)(a1 + 9424));
    v9 = (char *)(a1 + 5263);
    if ((*v2 & 0x80000000) == 0)
    {
LABEL_20:
      v10 = *(void **)(a1 + 9152);
      if (!v10)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else
  {
    v9 = (char *)(a1 + 5263);
    if ((*v2 & 0x80000000) == 0)
      goto LABEL_20;
  }
  operator delete(*(void **)(a1 + 9384));
  v10 = *(void **)(a1 + 9152);
  if (v10)
  {
LABEL_21:
    *(_QWORD *)(a1 + 9160) = v10;
    operator delete(v10);
  }
LABEL_22:
  if (v9[3864] < 0)
  {
    operator delete(*(void **)(a1 + 9104));
    if ((v9[3736] & 0x80000000) == 0)
    {
LABEL_24:
      if ((v9[3648] & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_52;
    }
  }
  else if ((v9[3736] & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(*(void **)(a1 + 8976));
  if ((v9[3648] & 0x80000000) == 0)
  {
LABEL_25:
    if ((v9[3624] & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(*(void **)(a1 + 8888));
  if ((v9[3624] & 0x80000000) == 0)
  {
LABEL_26:
    sub_20E869924(a1 + 6056);
    if ((v9[688] & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(*(void **)(a1 + 8864));
  sub_20E869924(a1 + 6056);
  if ((v9[688] & 0x80000000) == 0)
  {
LABEL_27:
    v11 = *(void **)(a1 + 5880);
    if (!v11)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_54:
  operator delete(*(void **)(a1 + 5928));
  v11 = *(void **)(a1 + 5880);
  if (v11)
  {
LABEL_28:
    *(_QWORD *)(a1 + 5888) = v11;
    operator delete(v11);
  }
LABEL_29:
  v12 = *(void **)(a1 + 5488);
  if (v12)
  {
    *(_QWORD *)(a1 + 5496) = v12;
    operator delete(v12);
  }
  if ((*v9 & 0x80000000) == 0)
  {
    v13 = *(void **)(a1 + 5176);
    if (!v13)
      goto LABEL_34;
    goto LABEL_33;
  }
  operator delete(*(void **)(a1 + 5240));
  v13 = *(void **)(a1 + 5176);
  if (v13)
  {
LABEL_33:
    *(_QWORD *)(a1 + 5184) = v13;
    operator delete(v13);
  }
LABEL_34:
  v14 = *(void **)(a1 + 5144);
  if (v14)
  {
    *(_QWORD *)(a1 + 5152) = v14;
    operator delete(v14);
  }
  sub_20E86872C(a1 + 4904, *(_QWORD **)(a1 + 4912));
  v15 = *(void **)(a1 + 4352);
  if (v15)
  {
    *(_QWORD *)(a1 + 4360) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 4328);
  if (v16)
  {
    *(_QWORD *)(a1 + 4336) = v16;
    operator delete(v16);
  }
  sub_20E869D64(a1 + 1744);
  if (*(char *)(a1 + 1591) < 0)
    operator delete(*(void **)(a1 + 1568));
  sub_20E869EA0(a1 + 528);
  return a1;
}

uint64_t sub_20E8696AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((*(char *)(a1 + 959) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 888);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 936));
  v2 = *(void **)(a1 + 888);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 896) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 496);
  if (v3)
  {
    *(_QWORD *)(a1 + 504) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
    v4 = *(void **)(a1 + 184);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 248));
  v4 = *(void **)(a1 + 184);
  if (v4)
  {
LABEL_8:
    *(_QWORD *)(a1 + 192) = v4;
    operator delete(v4);
  }
LABEL_9:
  v5 = *(void **)(a1 + 152);
  if (v5)
  {
    *(_QWORD *)(a1 + 160) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20E869744(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20E869794(uint64_t a1)
{
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20E869804(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if ((*(char *)(a1 + 935) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 864);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 912));
  v2 = *(void **)(a1 + 864);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 872) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 472);
  if (v3)
  {
    *(_QWORD *)(a1 + 480) = v3;
    operator delete(v3);
  }
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    v4 = *(void **)(a1 + 160);
    if (!v4)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 224));
  v4 = *(void **)(a1 + 160);
  if (v4)
  {
LABEL_8:
    *(_QWORD *)(a1 + 168) = v4;
    operator delete(v4);
  }
LABEL_9:
  v5 = *(void **)(a1 + 128);
  if (v5)
  {
    *(_QWORD *)(a1 + 136) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20E86989C(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_20E86872C(a1 + 4632, *(_QWORD **)(a1 + 4640));
  v2 = *(void **)(a1 + 4080);
  if (v2)
  {
    *(_QWORD *)(a1 + 4088) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 4056);
  if (v3)
  {
    *(_QWORD *)(a1 + 4064) = v3;
    operator delete(v3);
  }
  sub_20E869D64(a1 + 1472);
  if (*(char *)(a1 + 1319) < 0)
    operator delete(*(void **)(a1 + 1296));
  sub_20E869EA0(a1 + 256);
  return a1;
}

uint64_t sub_20E869924(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v9;
  void *v10;

  if ((*(char *)(a1 + 2575) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 2543) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 2520));
    if (!*(_BYTE *)(a1 + 2488))
      goto LABEL_12;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 2552));
  if (*(char *)(a1 + 2543) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 2488))
    goto LABEL_12;
LABEL_7:
  v2 = *(std::__shared_weak_count **)(a1 + 2480);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (!*(_BYTE *)(a1 + 2464))
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 2456);
  if (!v5)
    goto LABEL_17;
LABEL_12:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((*(char *)(a1 + 2447) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 2423) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_17:
    if ((*(char *)(a1 + 2447) & 0x80000000) == 0)
      goto LABEL_18;
  }
  operator delete(*(void **)(a1 + 2424));
  if ((*(char *)(a1 + 2423) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(a1 + 2399) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 2400));
  if ((*(char *)(a1 + 2399) & 0x80000000) == 0)
  {
LABEL_20:
    if ((*(char *)(a1 + 2375) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_27:
    operator delete(*(void **)(a1 + 2352));
    if (!*(_BYTE *)(a1 + 2056))
      goto LABEL_22;
    goto LABEL_28;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 2376));
  if (*(char *)(a1 + 2375) < 0)
    goto LABEL_27;
LABEL_21:
  if (!*(_BYTE *)(a1 + 2056))
  {
LABEL_22:
    sub_20E869B60(a1 + 1008);
    return a1;
  }
LABEL_28:
  v9 = *(void **)(a1 + 1944);
  if (v9)
  {
    *(_QWORD *)(a1 + 1952) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 1920);
  if (!v10)
    goto LABEL_22;
  *(_QWORD *)(a1 + 1928) = v10;
  operator delete(v10);
  sub_20E869B60(a1 + 1008);
  return a1;
}

uint64_t sub_20E869AA8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_20E869B18(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(_QWORD *)(a1 + 80) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 48);
    if (v3)
    {
      *(_QWORD *)(a1 + 56) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_20E869B60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 688);
  if (v2)
  {
    *(_QWORD *)(a1 + 696) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 664);
  if (v3)
  {
    *(_QWORD *)(a1 + 672) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 472);
  if (v4)
  {
    *(_QWORD *)(a1 + 480) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 448);
  if (v5)
  {
    *(_QWORD *)(a1 + 456) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 328);
  if (v6)
  {
    *(_QWORD *)(a1 + 336) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 304);
  if (v7)
  {
    *(_QWORD *)(a1 + 312) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 295) < 0)
  {
    operator delete(*(void **)(a1 + 272));
    if ((*(char *)(a1 + 271) & 0x80000000) == 0)
    {
LABEL_15:
      if ((*(char *)(a1 + 247) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_24;
    }
  }
  else if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(*(void **)(a1 + 224));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
LABEL_18:
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 168));
  if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_28:
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      return a1;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    goto LABEL_28;
LABEL_20:
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    return a1;
LABEL_29:
  operator delete(*(void **)(a1 + 96));
  return a1;
}

uint64_t sub_20E869CA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20E869D08(uint64_t a1)
{
  void *v2;
  void *v3;

  if ((*(char *)(a1 + 247) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 160);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 224));
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20E869D64(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 1479) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 1320);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 1456));
  v2 = *(void **)(a1 + 1320);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 1328) = v2;
    operator delete(v2);
  }
LABEL_4:
  if (*(char *)(a1 + 1271) < 0)
  {
    operator delete(*(void **)(a1 + 1248));
    if ((*(char *)(a1 + 1247) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 887) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 1247) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 1224));
  if ((*(char *)(a1 + 887) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 863) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_15:
    operator delete(*(void **)(a1 + 840));
    if ((*(char *)(a1 + 839) & 0x80000000) == 0)
      return a1;
    goto LABEL_16;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 864));
  if (*(char *)(a1 + 863) < 0)
    goto LABEL_15;
LABEL_8:
  if ((*(char *)(a1 + 839) & 0x80000000) == 0)
    return a1;
LABEL_16:
  operator delete(*(void **)(a1 + 816));
  return a1;
}

uint64_t sub_20E869E30(uint64_t a1)
{
  if ((*(char *)(a1 + 615) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 591) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 568));
    if ((*(char *)(a1 + 567) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 592));
  if (*(char *)(a1 + 591) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 567) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 544));
  return a1;
}

uint64_t sub_20E869EA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(_QWORD *)(a1 + 368) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(_QWORD *)(a1 + 344) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 312);
  if (v4)
  {
    *(_QWORD *)(a1 + 320) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(*(void **)(a1 + 56));
    v6 = *(void **)(a1 + 32);
    if (!v6)
      return a1;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_15;
LABEL_11:
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
LABEL_12:
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20E869F44(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  void *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  void *v28;
  int v29;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  if (a1 != a2)
  {
    v8 = *(unsigned int *)(a2 + 112);
    if (*(_QWORD *)(a1 + 104) >= v8)
    {
      if (!(_DWORD)v8)
      {
        *(_DWORD *)(a1 + 112) = 0;
        v13 = *(unsigned int *)(a2 + 136);
        if (*(_QWORD *)(a1 + 128) < v13)
          goto LABEL_10;
        goto LABEL_14;
      }
      v12 = *(void **)(a1 + 96);
      v10 = 8 * v8;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 96);
      if (v9)
        MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
      v10 = 8 * v8;
      v11 = (v10 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = v11 >> 3;
      v12 = operator new(v11, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 96) = v12;
    }
    memcpy(v12, *(const void **)(a2 + 96), v10);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v13 = *(unsigned int *)(a2 + 136);
    if (*(_QWORD *)(a1 + 128) < v13)
    {
LABEL_10:
      v14 = *(_QWORD *)(a1 + 120);
      if (v14)
        MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
      v15 = 8 * v13;
      v16 = (v15 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = v16 >> 3;
      v17 = operator new(v16, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 120) = v17;
      goto LABEL_16;
    }
LABEL_14:
    if (!(_DWORD)v13)
    {
      v18 = 0;
LABEL_18:
      *(_DWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v19 = *(unsigned int *)(a2 + 168);
      if (*(_QWORD *)(a1 + 160) >= v19)
      {
        if (!(_DWORD)v19)
        {
          *(_DWORD *)(a1 + 168) = 0;
          v24 = *(unsigned int *)(a2 + 192);
          if (*(_QWORD *)(a1 + 184) < v24)
            goto LABEL_25;
          goto LABEL_29;
        }
        v23 = *(void **)(a1 + 152);
        v21 = 8 * v19;
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 152);
        if (v20)
          MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
        v21 = 8 * v19;
        v22 = (v21 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 160) = v22 >> 3;
        v23 = operator new(v22, (std::align_val_t)0x20uLL);
        *(_QWORD *)(a1 + 152) = v23;
      }
      memcpy(v23, *(const void **)(a2 + 152), v21);
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      v24 = *(unsigned int *)(a2 + 192);
      if (*(_QWORD *)(a1 + 184) < v24)
      {
LABEL_25:
        v25 = *(_QWORD *)(a1 + 176);
        if (v25)
          MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
        v26 = 8 * v24;
        v27 = (v26 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 184) = v27 >> 3;
        v28 = operator new(v27, (std::align_val_t)0x20uLL);
        *(_QWORD *)(a1 + 176) = v28;
        goto LABEL_31;
      }
LABEL_29:
      if (!(_DWORD)v24)
      {
        v29 = 0;
        goto LABEL_33;
      }
      v28 = *(void **)(a1 + 176);
      v26 = 8 * v24;
LABEL_31:
      memcpy(v28, *(const void **)(a2 + 176), v26);
      v29 = *(_DWORD *)(a2 + 192);
LABEL_33:
      *(_DWORD *)(a1 + 192) = v29;
      goto LABEL_34;
    }
    v17 = *(void **)(a1 + 120);
    v15 = 8 * v13;
LABEL_16:
    memcpy(v17, *(const void **)(a2 + 120), v15);
    v18 = *(_DWORD *)(a2 + 136);
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
LABEL_34:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

char *sub_20E86A1AC(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *result;
  char **v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    result = *(char **)(a1 + 8);
    v15 = (char **)(a1 + 8);
    v31 = result - v9;
    if (0xAAAAAAAAAAAAAAABLL * ((result - v9) >> 3) < __sz)
    {
      v32 = &a2[8 * ((result - v9) >> 3)];
      if (result == v9)
        goto LABEL_47;
      if ((unint64_t)(v31 - 24) < 0x108
        || ((v33 = (v31 - 24) / 0x18uLL, v34 = 24 * v33 + 24, v9 < &a2[v34]) ? (v35 = &v9[v34] > a2) : (v35 = 0), v35))
      {
        v38 = v9;
        v39 = a2;
      }
      else
      {
        v36 = v33 + 1;
        v37 = (v33 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v38 = &v9[24 * v37];
        v39 = &a2[24 * v37];
        v40 = v37;
        v41 = a2;
        do
        {
          v42 = *((_OWORD *)v41 + 1);
          v44 = *((_OWORD *)v41 + 4);
          v43 = *((_OWORD *)v41 + 5);
          v45 = *((_OWORD *)v41 + 2);
          v46 = *((_OWORD *)v41 + 3);
          *(_OWORD *)v9 = *(_OWORD *)v41;
          *((_OWORD *)v9 + 1) = v42;
          *((_OWORD *)v9 + 2) = v45;
          *((_OWORD *)v9 + 3) = v46;
          v41 += 96;
          *((_OWORD *)v9 + 4) = v44;
          *((_OWORD *)v9 + 5) = v43;
          v9 += 96;
          v40 -= 4;
        }
        while (v40);
        if (v36 == v37)
        {
LABEL_47:
          if (v32 == a3)
          {
            v16 = result;
          }
          else
          {
            v62 = &a2[v31];
            v63 = a3 - &a2[v31] - 24;
            if (v63 >= 0x138
              && ((v64 = v63 / 0x18, result < &v62[24 * v64 + 24]) ? (v65 = v32 >= &result[24 * v64 + 24]) : (v65 = 1),
                  v65))
            {
              v66 = v64 + 1;
              v67 = (v64 + 1) & 0x1FFFFFFFFFFFFFFCLL;
              v68 = &v32[24 * v67];
              v16 = &result[24 * v67];
              v69 = v67;
              v70 = result;
              do
              {
                v71 = *((_OWORD *)v32 + 1);
                v73 = *((_OWORD *)v32 + 4);
                v72 = *((_OWORD *)v32 + 5);
                v74 = *((_OWORD *)v32 + 2);
                v75 = *((_OWORD *)v32 + 3);
                *(_OWORD *)v70 = *(_OWORD *)v32;
                *((_OWORD *)v70 + 1) = v71;
                *((_OWORD *)v70 + 2) = v74;
                *((_OWORD *)v70 + 3) = v75;
                *((_OWORD *)v70 + 4) = v73;
                *((_OWORD *)v70 + 5) = v72;
                v70 += 96;
                v32 += 96;
                v69 -= 4;
              }
              while (v69);
              if (v66 == v67)
                goto LABEL_67;
            }
            else
            {
              v68 = v32;
              v16 = result;
            }
            do
            {
              *(_QWORD *)v16 = *(_QWORD *)v68;
              *((_QWORD *)v16 + 1) = *((_QWORD *)v68 + 1);
              *((_QWORD *)v16 + 2) = *((_QWORD *)v68 + 2);
              v16 += 24;
              v68 += 24;
            }
            while (v68 != a3);
          }
          goto LABEL_67;
        }
      }
      do
      {
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
        *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
        v39 += 24;
        v38 += 24;
      }
      while (v39 != v32);
      goto LABEL_47;
    }
    if (a2 == a3)
    {
      v53 = v9;
    }
    else
    {
      v47 = a3 - a2 - 24;
      if (v47 < 0x108
        || ((v48 = v47 / 0x18, v49 = 24 * v48 + 24, v9 < &a2[v49]) ? (v50 = &v9[v49] > a2) : (v50 = 0), v50))
      {
        v53 = v9;
        v54 = a2;
      }
      else
      {
        v51 = v48 + 1;
        v52 = (v48 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v53 = &v9[24 * v52];
        v54 = &a2[24 * v52];
        v55 = v52;
        v56 = v9;
        do
        {
          v57 = *((_OWORD *)v6 + 1);
          v59 = *((_OWORD *)v6 + 4);
          v58 = *((_OWORD *)v6 + 5);
          v60 = *((_OWORD *)v6 + 2);
          v61 = *((_OWORD *)v6 + 3);
          *(_OWORD *)v56 = *(_OWORD *)v6;
          *((_OWORD *)v56 + 1) = v57;
          *((_OWORD *)v56 + 2) = v60;
          *((_OWORD *)v56 + 3) = v61;
          v6 += 96;
          *((_OWORD *)v56 + 4) = v59;
          *((_OWORD *)v56 + 5) = v58;
          v56 += 96;
          v55 -= 4;
        }
        while (v55);
        if (v51 == v52)
          goto LABEL_65;
      }
      do
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
        *((_QWORD *)v53 + 2) = *((_QWORD *)v54 + 2);
        v53 += 24;
        v54 += 24;
      }
      while (v54 != a3);
    }
LABEL_65:
    *v15 = v53;
    return result;
  }
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_68;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= __sz)
    v11 = __sz;
  v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
  if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_68:
    sub_20E867F44();
  v13 = 24 * v12;
  result = (char *)operator new(24 * v12);
  *(_QWORD *)a1 = result;
  v15 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = &result[v13];
  v16 = result;
  if (v6 == a3)
    goto LABEL_67;
  v17 = a3 - v6 - 24;
  if (v17 < 0x108
    || ((v18 = v17 / 0x18, v19 = 24 * v18 + 24, result < &v6[v19]) ? (v20 = &result[v19] > v6) : (v20 = 0), v20))
  {
    v23 = v6;
    v16 = result;
  }
  else
  {
    v21 = v18 + 1;
    v22 = (v18 + 1) & 0x1FFFFFFFFFFFFFFCLL;
    v23 = &v6[24 * v22];
    v16 = &result[24 * v22];
    v24 = v22;
    v25 = result;
    do
    {
      v26 = *((_OWORD *)v6 + 1);
      v27 = *((_OWORD *)v6 + 2);
      v28 = *((_OWORD *)v6 + 3);
      v29 = *((_OWORD *)v6 + 4);
      v30 = *((_OWORD *)v6 + 5);
      *(_OWORD *)v25 = *(_OWORD *)v6;
      *((_OWORD *)v25 + 1) = v26;
      *((_OWORD *)v25 + 4) = v29;
      *((_OWORD *)v25 + 5) = v30;
      *((_OWORD *)v25 + 2) = v27;
      *((_OWORD *)v25 + 3) = v28;
      v25 += 96;
      v6 += 96;
      v24 -= 4;
    }
    while (v24);
    if (v21 == v22)
      goto LABEL_67;
  }
  do
  {
    *(_OWORD *)v16 = *(_OWORD *)v23;
    *((_QWORD *)v16 + 2) = *((_QWORD *)v23 + 2);
    v16 += 24;
    v23 += 24;
  }
  while (v23 != a3);
LABEL_67:
  *v15 = v16;
  return result;
}

_QWORD *sub_20E86A618(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[173];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[170];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[166];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[163];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[116];
  if (v6)
  {
    a1[117] = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_20E86A6B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;

  v2 = (std::__shared_weak_count *)a1[131];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[91];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[91];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (void *)a1[72];
  if (v8)
  {
    a1[73] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[69];
  if (v9)
  {
    a1[70] = v9;
    operator delete(v9);
  }
  v10 = (std::__shared_weak_count *)a1[65];
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)a1[25];
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)a1[25];
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  v16 = (void *)a1[6];
  if (v16)
  {
    a1[7] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[3];
  if (v17)
  {
    a1[4] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_20E86A810(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (*(_BYTE *)(a1 + 2232))
    sub_20E86A6B8((_QWORD *)(a1 + 1144));
  if (*(_BYTE *)(a1 + 1136))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 920);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(void **)(a1 + 768);
    if (v5)
    {
      *(_QWORD *)(a1 + 776) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 744);
    if (v6)
    {
      *(_QWORD *)(a1 + 752) = v6;
      operator delete(v6);
    }
  }
  v7 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v8 = *(_QWORD **)(a1 + 8);
    v9 = *(_QWORD **)a1;
    if (v8 != v7)
    {
      do
        v8 = sub_20E86A6B8(v8 - 136);
      while (v8 != v7);
      v9 = *(_QWORD **)a1;
    }
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v9);
  }
  return a1;
}

void sub_20E86A8D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[31];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[31];
  if (v5)
  {
LABEL_6:
    a1[32] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[8];
  if (v8)
  {
    a1[9] = v8;
    operator delete(v8);
  }
}

_QWORD *sub_20E86A980(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x212BC5C6C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_20E86AAE4(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BC5C78](v13);
  return a1;
}

void sub_20E86AA88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x212BC5C78](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20E86AA68);
}

void sub_20E86AAD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E86AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_20E860B7C();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_20E86AC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86AC88(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  memcpy((void *)a1, (const void *)a2, 0x10AuLL);
  sub_20E86B320(a1 + 272, (__int128 *)(a2 + 272));
  sub_20E86C0E4(a1 + 5016, a2 + 5016);
  v4 = *(_OWORD *)(a2 + 5968);
  *(_OWORD *)(a1 + 5984) = *(_OWORD *)(a2 + 5984);
  *(_OWORD *)(a1 + 5968) = v4;
  v5 = *(_OWORD *)(a2 + 6000);
  v6 = *(_OWORD *)(a2 + 6016);
  v7 = *(_OWORD *)(a2 + 6032);
  *(_QWORD *)(a1 + 6048) = *(_QWORD *)(a2 + 6048);
  *(_OWORD *)(a1 + 6032) = v7;
  *(_OWORD *)(a1 + 6016) = v6;
  *(_OWORD *)(a1 + 6000) = v5;
  sub_20E86C490(a1 + 6056, a2 + 6056);
  sub_20E86CD34((char *)(a1 + 8864), (__int128 *)(a2 + 8864));
  sub_20E86CE80(a1 + 9080, (__int128 *)(a2 + 9080));
  v8 = *(_OWORD *)(a2 + 9208);
  v9 = *(_OWORD *)(a2 + 9240);
  *(_OWORD *)(a1 + 9224) = *(_OWORD *)(a2 + 9224);
  *(_OWORD *)(a1 + 9240) = v9;
  *(_OWORD *)(a1 + 9208) = v8;
  v10 = *(_OWORD *)(a2 + 9256);
  v11 = *(_OWORD *)(a2 + 9272);
  v12 = *(_OWORD *)(a2 + 9304);
  *(_OWORD *)(a1 + 9288) = *(_OWORD *)(a2 + 9288);
  *(_OWORD *)(a1 + 9304) = v12;
  *(_OWORD *)(a1 + 9256) = v10;
  *(_OWORD *)(a1 + 9272) = v11;
  v13 = *(_OWORD *)(a2 + 9320);
  v14 = *(_OWORD *)(a2 + 9336);
  v15 = *(_OWORD *)(a2 + 9368);
  *(_OWORD *)(a1 + 9352) = *(_OWORD *)(a2 + 9352);
  *(_OWORD *)(a1 + 9368) = v15;
  *(_OWORD *)(a1 + 9320) = v13;
  *(_OWORD *)(a1 + 9336) = v14;
  if (*(char *)(a2 + 9407) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 9384), *(void **)(a2 + 9384), *(_QWORD *)(a2 + 9392));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 9384);
    *(_QWORD *)(a1 + 9400) = *(_QWORD *)(a2 + 9400);
    *(_OWORD *)(a1 + 9384) = v16;
  }
  *(_QWORD *)(a1 + 9408) = *(_QWORD *)(a2 + 9408);
  *(_WORD *)(a1 + 9416) = *(_WORD *)(a2 + 9416);
  if (*(char *)(a2 + 9447) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 9424), *(void **)(a2 + 9424), *(_QWORD *)(a2 + 9432));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 9424);
    *(_QWORD *)(a1 + 9440) = *(_QWORD *)(a2 + 9440);
    *(_OWORD *)(a1 + 9424) = v17;
  }
  v18 = *(_QWORD *)(a2 + 9464);
  *(_OWORD *)(a1 + 9448) = *(_OWORD *)(a2 + 9448);
  *(_QWORD *)(a1 + 9464) = v18;
  v19 = *(_OWORD *)(a2 + 9472);
  *(_BYTE *)(a1 + 9488) = *(_BYTE *)(a2 + 9488);
  *(_OWORD *)(a1 + 9472) = v19;
  sub_20E86C0E4(a1 + 9496, a2 + 9496);
  v20 = *(_OWORD *)(a2 + 10448);
  *(_OWORD *)(a1 + 10464) = *(_OWORD *)(a2 + 10464);
  *(_OWORD *)(a1 + 10448) = v20;
  v21 = *(_OWORD *)(a2 + 10480);
  v22 = *(_OWORD *)(a2 + 10496);
  v23 = *(_OWORD *)(a2 + 10512);
  *(_OWORD *)(a1 + 10528) = *(_OWORD *)(a2 + 10528);
  *(_OWORD *)(a1 + 10512) = v23;
  *(_OWORD *)(a1 + 10496) = v22;
  *(_OWORD *)(a1 + 10480) = v21;
  v24 = *(_OWORD *)(a2 + 10544);
  v25 = *(_OWORD *)(a2 + 10560);
  v26 = *(_OWORD *)(a2 + 10576);
  *(_OWORD *)(a1 + 10592) = *(_OWORD *)(a2 + 10592);
  *(_OWORD *)(a1 + 10576) = v26;
  *(_OWORD *)(a1 + 10560) = v25;
  *(_OWORD *)(a1 + 10544) = v24;
  v27 = *(_QWORD *)(a2 + 10608);
  *(_DWORD *)(a1 + 10615) = *(_DWORD *)(a2 + 10615);
  *(_QWORD *)(a1 + 10608) = v27;
  v28 = *(_OWORD *)(a2 + 10624);
  *(_OWORD *)(a1 + 10640) = *(_OWORD *)(a2 + 10640);
  *(_OWORD *)(a1 + 10624) = v28;
  *(_BYTE *)(a1 + 10656) = 0;
  *(_BYTE *)(a1 + 10680) = 0;
  if (*(_BYTE *)(a2 + 10680))
  {
    if (*(char *)(a2 + 10679) < 0)
    {
      sub_20E860C04((_BYTE *)(a1 + 10656), *(void **)(a2 + 10656), *(_QWORD *)(a2 + 10664));
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 10656);
      *(_QWORD *)(a1 + 10672) = *(_QWORD *)(a2 + 10672);
      *(_OWORD *)(a1 + 10656) = v29;
    }
    *(_BYTE *)(a1 + 10680) = 1;
  }
  *(_WORD *)(a1 + 10688) = *(_WORD *)(a2 + 10688);
  *(_QWORD *)(a1 + 10696) = 0;
  *(_QWORD *)(a1 + 10712) = 0;
  *(_QWORD *)(a1 + 10704) = 0;
  v30 = *(_BYTE **)(a2 + 10696);
  v31 = *(_BYTE **)(a2 + 10704);
  v32 = v31 - v30;
  if (v31 != v30)
  {
    if (v32 < 0)
      sub_20E867F44();
    v33 = (char *)operator new(v31 - v30);
    *(_QWORD *)(a1 + 10696) = v33;
    *(_QWORD *)(a1 + 10704) = v33;
    v34 = &v33[8 * (v32 >> 3)];
    *(_QWORD *)(a1 + 10712) = v34;
    memcpy(v33, v30, v32);
    *(_QWORD *)(a1 + 10704) = v34;
  }
  *(_QWORD *)(a1 + 10736) = 0;
  *(_OWORD *)(a1 + 10720) = 0u;
  v35 = *(_BYTE **)(a2 + 10720);
  v36 = *(_BYTE **)(a2 + 10728);
  v37 = v36 - v35;
  if (v36 != v35)
  {
    if (v37 < 0)
      sub_20E867F44();
    v38 = (char *)operator new(v36 - v35);
    *(_QWORD *)(a1 + 10720) = v38;
    *(_QWORD *)(a1 + 10728) = v38;
    v39 = &v38[8 * (v37 >> 3)];
    *(_QWORD *)(a1 + 10736) = v39;
    memcpy(v38, v35, v37);
    *(_QWORD *)(a1 + 10728) = v39;
  }
  v40 = *(_QWORD *)(a2 + 10744);
  *(_QWORD *)(a1 + 10749) = *(_QWORD *)(a2 + 10749);
  *(_QWORD *)(a1 + 10744) = v40;
  *(_QWORD *)(a1 + 10760) = *(_QWORD *)(a2 + 10760);
  v41 = *(_OWORD *)(a2 + 10768);
  v42 = *(_OWORD *)(a2 + 10784);
  v43 = *(_OWORD *)(a2 + 10800);
  *(_OWORD *)(a1 + 10816) = *(_OWORD *)(a2 + 10816);
  *(_OWORD *)(a1 + 10800) = v43;
  *(_OWORD *)(a1 + 10784) = v42;
  *(_OWORD *)(a1 + 10768) = v41;
  v44 = *(_OWORD *)(a2 + 10832);
  v45 = *(_OWORD *)(a2 + 10848);
  v46 = *(_OWORD *)(a2 + 10864);
  *(_OWORD *)(a1 + 10880) = *(_OWORD *)(a2 + 10880);
  *(_OWORD *)(a1 + 10864) = v46;
  *(_OWORD *)(a1 + 10848) = v45;
  *(_OWORD *)(a1 + 10832) = v44;
  v47 = *(_OWORD *)(a2 + 10896);
  v48 = *(_OWORD *)(a2 + 10912);
  v49 = *(_OWORD *)(a2 + 10928);
  *(_QWORD *)(a1 + 10944) = *(_QWORD *)(a2 + 10944);
  *(_OWORD *)(a1 + 10928) = v49;
  *(_OWORD *)(a1 + 10912) = v48;
  *(_OWORD *)(a1 + 10896) = v47;
  v50 = *(_OWORD *)(a2 + 10952);
  v51 = *(_OWORD *)(a2 + 10984);
  *(_OWORD *)(a1 + 10968) = *(_OWORD *)(a2 + 10968);
  *(_OWORD *)(a1 + 10984) = v51;
  *(_OWORD *)(a1 + 10952) = v50;
  v52 = *(_OWORD *)(a2 + 11000);
  *(_QWORD *)(a1 + 11016) = *(_QWORD *)(a2 + 11016);
  *(_OWORD *)(a1 + 11000) = v52;
  v53 = *(_OWORD *)(a2 + 11056);
  v54 = *(_OWORD *)(a2 + 11072);
  v55 = *(_QWORD *)(a2 + 11088);
  *(_OWORD *)(a1 + 11040) = *(_OWORD *)(a2 + 11040);
  *(_QWORD *)(a1 + 11088) = v55;
  *(_OWORD *)(a1 + 11072) = v54;
  *(_OWORD *)(a1 + 11056) = v53;
  *(_OWORD *)(a1 + 11024) = *(_OWORD *)(a2 + 11024);
  *(_BYTE *)(a1 + 11096) = *(_BYTE *)(a2 + 11096);
  v56 = (_BYTE *)(a1 + 11104);
  if (*(char *)(a2 + 11127) < 0)
  {
    sub_20E860C04(v56, *(void **)(a2 + 11104), *(_QWORD *)(a2 + 11112));
  }
  else
  {
    v57 = *(_OWORD *)(a2 + 11104);
    *(_QWORD *)(a1 + 11120) = *(_QWORD *)(a2 + 11120);
    *(_OWORD *)v56 = v57;
  }
  v58 = *(_OWORD *)(a2 + 11128);
  v59 = *(_OWORD *)(a2 + 11160);
  *(_OWORD *)(a1 + 11144) = *(_OWORD *)(a2 + 11144);
  *(_OWORD *)(a1 + 11160) = v59;
  *(_OWORD *)(a1 + 11128) = v58;
  v61 = *(_OWORD *)(a2 + 11208);
  v60 = *(_OWORD *)(a2 + 11224);
  v62 = *(_OWORD *)(a2 + 11192);
  *(_QWORD *)(a1 + 11240) = *(_QWORD *)(a2 + 11240);
  *(_OWORD *)(a1 + 11208) = v61;
  *(_OWORD *)(a1 + 11224) = v60;
  *(_OWORD *)(a1 + 11192) = v62;
  *(_OWORD *)(a1 + 11176) = *(_OWORD *)(a2 + 11176);
  v63 = *(_OWORD *)(a2 + 11312);
  v64 = *(_OWORD *)(a2 + 11328);
  v65 = *(_OWORD *)(a2 + 11344);
  *(_OWORD *)(a1 + 11296) = *(_OWORD *)(a2 + 11296);
  *(_OWORD *)(a1 + 11344) = v65;
  *(_OWORD *)(a1 + 11328) = v64;
  *(_OWORD *)(a1 + 11312) = v63;
  v66 = *(_OWORD *)(a2 + 11376);
  v67 = *(_OWORD *)(a2 + 11392);
  v68 = *(_OWORD *)(a2 + 11408);
  *(_OWORD *)(a1 + 11360) = *(_OWORD *)(a2 + 11360);
  *(_OWORD *)(a1 + 11408) = v68;
  *(_OWORD *)(a1 + 11392) = v67;
  *(_OWORD *)(a1 + 11376) = v66;
  v69 = *(_OWORD *)(a2 + 11248);
  v70 = *(_OWORD *)(a2 + 11264);
  *(_OWORD *)(a1 + 11280) = *(_OWORD *)(a2 + 11280);
  *(_OWORD *)(a1 + 11264) = v70;
  *(_OWORD *)(a1 + 11248) = v69;
  return a1;
}

void sub_20E86B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;

  if (*(_BYTE *)(v16 + 24) && *(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  sub_20E8696AC(v19);
  if (a13[40] < 0)
    operator delete(*v18);
  if (*a13 < 0)
    operator delete(*v17);
  sub_20E869744(a11);
  sub_20E869794(a12);
  sub_20E869924(a14);
  sub_20E869804(a15);
  sub_20E86989C(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86B320(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  v13 = a2[12];
  v14 = a2[13];
  v15 = a2[14];
  *(_OWORD *)(a1 + 237) = *(__int128 *)((char *)a2 + 237);
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 192) = v13;
  sub_20E86B4E8(a1 + 256, (uint64_t)(a2 + 16));
  sub_20E868FE0(a1 + 4008, (__int128 *)((char *)a2 + 4008));
  memcpy((void *)(a1 + 4192), a2 + 262, 0x1B0uLL);
  v16 = *(_DWORD *)((char *)a2 + 4627);
  *(_DWORD *)(a1 + 4624) = *((_DWORD *)a2 + 1156);
  *(_DWORD *)(a1 + 4627) = v16;
  *(_QWORD *)(a1 + 4648) = 0;
  *(_QWORD *)(a1 + 4640) = 0;
  *(_QWORD *)(a1 + 4632) = a1 + 4640;
  sub_20E86BDB0((uint64_t *)(a1 + 4632), *((unsigned int **)a2 + 579), (unsigned int *)a2 + 1160);
  *(_OWORD *)(a1 + 4656) = a2[291];
  v17 = a2[292];
  v18 = a2[293];
  v19 = a2[294];
  *(_OWORD *)(a1 + 4720) = a2[295];
  *(_OWORD *)(a1 + 4704) = v19;
  *(_OWORD *)(a1 + 4688) = v18;
  *(_OWORD *)(a1 + 4672) = v17;
  v20 = *((_DWORD *)a2 + 1184);
  *(_BYTE *)(a1 + 4740) = *((_BYTE *)a2 + 4740);
  *(_DWORD *)(a1 + 4736) = v20;
  return a1;
}

void sub_20E86B450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;

  sub_20E86872C(v3, *(_QWORD **)(v1 + 4640));
  v5 = *(void **)(v1 + 4080);
  if (v5)
  {
    *(_QWORD *)(v1 + 4088) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 4056);
    if (!v6)
    {
LABEL_3:
      sub_20E869D64(v1 + 1472);
      if ((*(char *)(v1 + 1319) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *(void **)(v1 + 4056);
    if (!v6)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 4064) = v6;
  operator delete(v6);
  sub_20E869D64(v1 + 1472);
  if ((*(char *)(v1 + 1319) & 0x80000000) == 0)
  {
LABEL_4:
    sub_20E869EA0(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)(v1 + 1296));
  sub_20E869EA0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86B4E8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  sub_20E86B668(a1 + 8, (__int128 *)(a2 + 8));
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  sub_20E86B868(a1 + 216, a2 + 216);
  v4 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v4;
  v5 = *(_OWORD *)(a2 + 416);
  v6 = *(_OWORD *)(a2 + 432);
  v7 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v7;
  *(_OWORD *)(a1 + 416) = v5;
  *(_OWORD *)(a1 + 432) = v6;
  memcpy((void *)(a1 + 480), (const void *)(a2 + 480), 0x230uLL);
  if (*(char *)(a2 + 1063) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 1040), *(void **)(a2 + 1040), *(_QWORD *)(a2 + 1048));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 1040);
    *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = v8;
  }
  v9 = *(_OWORD *)(a2 + 1064);
  v10 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v10;
  *(_OWORD *)(a1 + 1064) = v9;
  v12 = *(_OWORD *)(a2 + 1176);
  v11 = *(_OWORD *)(a2 + 1192);
  v13 = *(_OWORD *)(a2 + 1160);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1176) = v12;
  *(_OWORD *)(a1 + 1192) = v11;
  *(_OWORD *)(a1 + 1160) = v13;
  v14 = *(_OWORD *)(a2 + 1112);
  v15 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v15;
  *(_OWORD *)(a1 + 1112) = v14;
  sub_20E86BA1C(a1 + 1216, a2 + 1216);
  memcpy((void *)(a1 + 2992), (const void *)(a2 + 2992), 0x2F8uLL);
  return a1;
}

void sub_20E86B5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869EA0(v1);
  _Unwind_Resume(a1);
}

void sub_20E86B610(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 1063) < 0)
    operator delete(*v2);
  sub_20E869EA0(v1);
  _Unwind_Resume(a1);
}

void sub_20E86B634(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  uint64_t v9;
  void *v10;

  v10 = *(void **)(v9 + 112);
  if (v10)
  {
    *(_QWORD *)(v9 + 120) = v10;
    operator delete(v10);
  }
  sub_21023E08C();
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86B668(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 3);
  v5 = (_BYTE *)*((_QWORD *)a2 + 4);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 32) = v9;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 48), *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v10 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v10;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 72), *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v11 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v11;
  }
  v12 = *((_DWORD *)a2 + 24);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v14 = (_BYTE *)*((_QWORD *)a2 + 13);
  v13 = (_BYTE *)*((_QWORD *)a2 + 14);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = v16;
    v17 = &v16[4 * (v15 >> 2)];
    *(_QWORD *)(a1 + 120) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 112) = v17;
  }
  *(_OWORD *)(a1 + 128) = a2[8];
  v18 = a2[9];
  v19 = a2[10];
  v20 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 160) = v19;
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 144) = v18;
  return a1;
}

void sub_20E86B7DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    v5 = *v2;
    if (!*v2)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_4;
  }
  *(_QWORD *)(v1 + 32) = v5;
  operator delete(v5);
  goto LABEL_4;
}

uint64_t sub_20E86B868(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v9 = *(_BYTE **)(a2 + 96);
  v8 = *(_BYTE **)(a2 + 104);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 112) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 104) = v12;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = *(_BYTE **)(a2 + 120);
  v13 = *(_BYTE **)(a2 + 128);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_20E867F44();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 120) = v16;
    *(_QWORD *)(a1 + 128) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 136) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 128) = v17;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v19 = *(_BYTE **)(a2 + 144);
  v18 = *(_BYTE **)(a2 + 152);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      sub_20E867F44();
    v21 = (char *)operator new(v18 - v19);
    *(_QWORD *)(a1 + 144) = v21;
    *(_QWORD *)(a1 + 152) = v21;
    v22 = &v21[8 * (v20 >> 3)];
    *(_QWORD *)(a1 + 160) = v22;
    memcpy(v21, v19, v20);
    *(_QWORD *)(a1 + 152) = v22;
  }
  return a1;
}

void sub_20E86B9AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[19] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[16] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[13] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_20E86BA0C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20E86B9D0);
  JUMPOUT(0x20E86B9C8);
}

uint64_t sub_20E86BA1C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE *v38;
  __int128 v39;

  memcpy((void *)a1, (const void *)a2, 0x109uLL);
  memcpy((void *)(a1 + 272), (const void *)(a2 + 272), 0x21DuLL);
  if (*(char *)(a2 + 839) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 816), *(void **)(a2 + 816), *(_QWORD *)(a2 + 824));
    v5 = a1 + 840;
    if ((*(char *)(a2 + 863) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 816);
    *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
    *(_OWORD *)(a1 + 816) = v4;
    v5 = a1 + 840;
    if ((*(char *)(a2 + 863) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 840);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 856);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v5, *(void **)(a2 + 840), *(_QWORD *)(a2 + 848));
LABEL_6:
  v7 = (_BYTE *)(a1 + 864);
  if (*(char *)(a2 + 887) < 0)
  {
    sub_20E860C04(v7, *(void **)(a2 + 864), *(_QWORD *)(a2 + 872));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 864);
    *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
    *(_OWORD *)v7 = v8;
  }
  v9 = *(_OWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 888);
  *(_OWORD *)(a1 + 904) = v9;
  v10 = *(_OWORD *)(a2 + 920);
  v11 = *(_OWORD *)(a2 + 936);
  v12 = *(_OWORD *)(a2 + 968);
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 968) = v12;
  *(_OWORD *)(a1 + 920) = v10;
  *(_OWORD *)(a1 + 936) = v11;
  v13 = *(_OWORD *)(a2 + 984);
  v14 = *(_OWORD *)(a2 + 1000);
  v15 = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 1032) = v15;
  *(_OWORD *)(a1 + 984) = v13;
  *(_OWORD *)(a1 + 1000) = v14;
  v16 = *(_OWORD *)(a2 + 1048);
  v17 = *(_OWORD *)(a2 + 1064);
  v18 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v18;
  *(_OWORD *)(a1 + 1048) = v16;
  *(_OWORD *)(a1 + 1064) = v17;
  v19 = *(_OWORD *)(a2 + 1112);
  v20 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v20;
  *(_OWORD *)(a1 + 1112) = v19;
  v21 = *(_OWORD *)(a2 + 1160);
  v22 = *(_OWORD *)(a2 + 1176);
  v23 = *(_OWORD *)(a2 + 1208);
  *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
  *(_OWORD *)(a1 + 1208) = v23;
  *(_OWORD *)(a1 + 1160) = v21;
  *(_OWORD *)(a1 + 1176) = v22;
  if (*(char *)(a2 + 1247) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 1224), *(void **)(a2 + 1224), *(_QWORD *)(a2 + 1232));
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 1224);
    *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 1240);
    *(_OWORD *)(a1 + 1224) = v24;
  }
  if (*(char *)(a2 + 1271) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 1248), *(void **)(a2 + 1248), *(_QWORD *)(a2 + 1256));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 1248);
    *(_QWORD *)(a1 + 1264) = *(_QWORD *)(a2 + 1264);
    *(_OWORD *)(a1 + 1248) = v25;
  }
  v26 = *(_OWORD *)(a2 + 1272);
  v27 = *(_OWORD *)(a2 + 1304);
  *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
  *(_OWORD *)(a1 + 1304) = v27;
  *(_OWORD *)(a1 + 1272) = v26;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  v28 = *(_BYTE **)(a2 + 1320);
  v29 = *(_BYTE **)(a2 + 1328);
  v30 = v29 - v28;
  if (v29 != v28)
  {
    if (v30 < 0)
      sub_20E867F44();
    v31 = (char *)operator new(v29 - v28);
    *(_QWORD *)(a1 + 1320) = v31;
    *(_QWORD *)(a1 + 1328) = v31;
    v32 = &v31[8 * (v30 >> 3)];
    *(_QWORD *)(a1 + 1336) = v32;
    memcpy(v31, v28, v30);
    *(_QWORD *)(a1 + 1328) = v32;
  }
  v33 = *(_OWORD *)(a2 + 1344);
  v34 = *(_OWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a2 + 1376);
  *(_OWORD *)(a1 + 1360) = v34;
  *(_OWORD *)(a1 + 1344) = v33;
  v35 = *(_OWORD *)(a2 + 1392);
  v36 = *(_OWORD *)(a2 + 1408);
  v37 = *(_OWORD *)(a2 + 1424);
  *(_OWORD *)(a1 + 1440) = *(_OWORD *)(a2 + 1440);
  *(_OWORD *)(a1 + 1424) = v37;
  *(_OWORD *)(a1 + 1408) = v36;
  *(_OWORD *)(a1 + 1392) = v35;
  v38 = (_BYTE *)(a1 + 1456);
  if (*(char *)(a2 + 1479) < 0)
  {
    sub_20E860C04(v38, *(void **)(a2 + 1456), *(_QWORD *)(a2 + 1464));
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 1456);
    *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a2 + 1472);
    *(_OWORD *)v38 = v39;
  }
  memcpy((void *)(a1 + 1480), (const void *)(a2 + 1480), 0x128uLL);
  return a1;
}

void sub_20E86BCD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;

  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 1328) = v7;
    operator delete(v7);
    if ((*(char *)(v1 + 1271) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 1247) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 1271) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 1247) & 0x80000000) == 0)
  {
LABEL_4:
    sub_20E869E30(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*v3);
  sub_20E869E30(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E86BDB0(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_20E86BEBC((uint64_t **)v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v11 + 28) = *(_QWORD *)(v6 + 7);
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_20E868578((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_20E86BEBC(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t **v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v5 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 7);
  if (*a5 < v7)
    goto LABEL_3;
  if (v6 != v7)
  {
    if (v7 >= v6)
      goto LABEL_11;
LABEL_33:
    v23 = a2[1];
    if (v23)
    {
      v24 = (uint64_t *)a2[1];
      do
      {
        v25 = (uint64_t **)v24;
        v24 = (uint64_t *)*v24;
      }
      while (v24);
    }
    else
    {
      v26 = a2;
      do
      {
        v25 = (uint64_t **)v26[2];
        v15 = *v25 == v26;
        v26 = (uint64_t *)v25;
      }
      while (!v15);
    }
    if (v25 == v5 || (v27 = *((_DWORD *)v25 + 7), v6 < v27) || v6 == v27 && a5[1] < *((_DWORD *)v25 + 8))
    {
      if (v23)
      {
        *a3 = (uint64_t *)v25;
        return (uint64_t *)v25;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    v28 = *v5;
    if (!*v5)
    {
LABEL_58:
      *a3 = (uint64_t *)v5;
      return (uint64_t *)(a1 + 1);
    }
    v29 = a5[1];
    while (1)
    {
      v20 = v28;
      v30 = *((_DWORD *)v28 + 7);
      if (v6 < v30)
        goto LABEL_49;
      if (v6 != v30)
      {
        if (v30 >= v6)
          goto LABEL_30;
        goto LABEL_56;
      }
      v31 = *((_DWORD *)v20 + 8);
      if (v29 < v31)
      {
LABEL_49:
        v28 = (uint64_t *)*v20;
        v5 = (uint64_t **)v20;
        if (!*v20)
          goto LABEL_30;
      }
      else
      {
        if (v31 >= v29)
          goto LABEL_30;
LABEL_56:
        v5 = (uint64_t **)(v20 + 1);
        v28 = (uint64_t *)v20[1];
        if (!v28)
        {
LABEL_30:
          *a3 = v20;
          return (uint64_t *)v5;
        }
      }
    }
  }
  v11 = a5[1];
  v12 = *((_DWORD *)a2 + 8);
  if (v11 >= v12)
  {
    if (v12 >= v11)
    {
LABEL_11:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_33;
  }
LABEL_3:
  v8 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v10 = a2;
  }
  else
  {
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *((_DWORD *)v10 + 7);
    v17 = *a5;
    if (v16 >= *a5 && (v16 != v17 || *((_DWORD *)v10 + 8) >= a5[1]))
    {
      v18 = *v5;
      if (*v5)
      {
        v19 = a5[1];
        while (1)
        {
          v20 = v18;
          v21 = *((_DWORD *)v18 + 7);
          if (v17 < v21)
            goto LABEL_22;
          if (v17 != v21)
          {
            if (v21 >= v17)
              goto LABEL_30;
            goto LABEL_29;
          }
          v22 = *((_DWORD *)v20 + 8);
          if (v19 < v22)
          {
LABEL_22:
            v18 = (uint64_t *)*v20;
            v5 = (uint64_t **)v20;
            if (!*v20)
              goto LABEL_30;
          }
          else
          {
            if (v22 >= v19)
              goto LABEL_30;
LABEL_29:
            v5 = (uint64_t **)(v20 + 1);
            v18 = (uint64_t *)v20[1];
            if (!v18)
              goto LABEL_30;
          }
        }
      }
      goto LABEL_58;
    }
  }
  if (v8)
  {
    *a3 = v10;
    return v10 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t sub_20E86C0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;

  v4 = sub_20E86C2D0(a1, (__int128 *)a2);
  *(_OWORD *)(v4 + 392) = *(_OWORD *)(a2 + 392);
  v5 = *(_OWORD *)(a2 + 408);
  v6 = *(_OWORD *)(a2 + 424);
  v7 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(v4 + 456) = v7;
  *(_OWORD *)(v4 + 408) = v5;
  *(_OWORD *)(v4 + 424) = v6;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  v9 = *(_BYTE **)(a2 + 472);
  v8 = *(_BYTE **)(a2 + 480);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 472) = v11;
    *(_QWORD *)(a1 + 480) = v11;
    v12 = &v11[16 * (v10 >> 4)];
    *(_QWORD *)(a1 + 488) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 480) = v12;
  }
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x139uLL);
  v13 = *(_OWORD *)(a2 + 844);
  v14 = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 832) = v14;
  *(_OWORD *)(a1 + 844) = v13;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 864) = 0;
  v15 = *(_BYTE **)(a2 + 864);
  v16 = *(_BYTE **)(a2 + 872);
  v17 = v16 - v15;
  if (v16 != v15)
  {
    if (v17 < 0)
      sub_20E867F44();
    v18 = (char *)operator new(v16 - v15);
    *(_QWORD *)(a1 + 864) = v18;
    *(_QWORD *)(a1 + 872) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 880) = v19;
    memcpy(v18, v15, v17);
    *(_QWORD *)(a1 + 872) = v19;
  }
  v20 = *(_OWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 888) = v20;
  v21 = (_BYTE *)(a1 + 912);
  if (*(char *)(a2 + 935) < 0)
  {
    sub_20E860C04(v21, *(void **)(a2 + 912), *(_QWORD *)(a2 + 920));
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 912);
    *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
    *(_OWORD *)v21 = v22;
  }
  *(_BYTE *)(a1 + 936) = *(_BYTE *)(a2 + 936);
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 944);
  return a1;
}

void sub_20E86C270(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 872) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_20E869D08(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 480) = v6;
  operator delete(v6);
  sub_20E869D08(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86C2D0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 16);
  v10 = (_BYTE *)*((_QWORD *)a2 + 17);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_20E867F44();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = v13;
    v14 = &v13[2 * (v12 >> 1)];
    *(_QWORD *)(a1 + 144) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 136) = v14;
  }
  v15 = *((_DWORD *)a2 + 38);
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v17 = (_BYTE *)*((_QWORD *)a2 + 20);
  v16 = (_BYTE *)*((_QWORD *)a2 + 21);
  v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_20E867F44();
    v19 = (char *)operator new(v16 - v17);
    *(_QWORD *)(a1 + 160) = v19;
    *(_QWORD *)(a1 + 168) = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *(_QWORD *)(a1 + 176) = v20;
    memcpy(v19, v17, v18);
    *(_QWORD *)(a1 + 168) = v20;
  }
  v21 = *(__int128 *)((char *)a2 + 184);
  v22 = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v22;
  *(_OWORD *)(a1 + 184) = v21;
  v23 = (_BYTE *)(a1 + 224);
  if (*((char *)a2 + 247) < 0)
  {
    sub_20E860C04(v23, *((void **)a2 + 28), *((_QWORD *)a2 + 29));
  }
  else
  {
    v24 = a2[14];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(_OWORD *)v23 = v24;
  }
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  v25 = *(__int128 *)((char *)a2 + 264);
  v26 = *(__int128 *)((char *)a2 + 280);
  v27 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 312) = v27;
  *(_OWORD *)(a1 + 264) = v25;
  *(_OWORD *)(a1 + 280) = v26;
  v28 = *(__int128 *)((char *)a2 + 328);
  v29 = *(__int128 *)((char *)a2 + 344);
  v30 = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 369) = *(__int128 *)((char *)a2 + 369);
  *(_OWORD *)(a1 + 344) = v29;
  *(_OWORD *)(a1 + 360) = v30;
  *(_OWORD *)(a1 + 328) = v28;
  return a1;
}

void sub_20E86C458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 168) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86C490(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  memcpy((void *)a1, (const void *)a2, 0x3E9uLL);
  sub_20E86C860(a1 + 1008, a2 + 1008);
  *(_BYTE *)(a1 + 1872) = 0;
  *(_BYTE *)(a1 + 2056) = 0;
  if (*(_BYTE *)(a2 + 2056))
  {
    sub_20E868FE0(a1 + 1872, (__int128 *)(a2 + 1872));
    *(_BYTE *)(a1 + 2056) = 1;
  }
  memcpy((void *)(a1 + 2064), (const void *)(a2 + 2064), 0x120uLL);
  if (*(char *)(a2 + 2375) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 2352), *(void **)(a2 + 2352), *(_QWORD *)(a2 + 2360));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 2352);
    *(_QWORD *)(a1 + 2368) = *(_QWORD *)(a2 + 2368);
    *(_OWORD *)(a1 + 2352) = v4;
  }
  if (*(char *)(a2 + 2399) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 2376), *(void **)(a2 + 2376), *(_QWORD *)(a2 + 2384));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 2376);
    *(_QWORD *)(a1 + 2392) = *(_QWORD *)(a2 + 2392);
    *(_OWORD *)(a1 + 2376) = v5;
  }
  if (*(char *)(a2 + 2423) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 2400), *(void **)(a2 + 2400), *(_QWORD *)(a2 + 2408));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 2400);
    *(_QWORD *)(a1 + 2416) = *(_QWORD *)(a2 + 2416);
    *(_OWORD *)(a1 + 2400) = v6;
  }
  if (*(char *)(a2 + 2447) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 2424), *(void **)(a2 + 2424), *(_QWORD *)(a2 + 2432));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 2424);
    *(_QWORD *)(a1 + 2440) = *(_QWORD *)(a2 + 2440);
    *(_OWORD *)(a1 + 2424) = v7;
  }
  *(_BYTE *)(a1 + 2448) = 0;
  *(_BYTE *)(a1 + 2464) = 0;
  if (*(_BYTE *)(a2 + 2464))
  {
    *(_QWORD *)(a1 + 2448) = *(_QWORD *)(a2 + 2448);
    v8 = *(_QWORD *)(a2 + 2456);
    *(_QWORD *)(a1 + 2456) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *(_BYTE *)(a1 + 2464) = 1;
  }
  *(_BYTE *)(a1 + 2472) = 0;
  *(_BYTE *)(a1 + 2488) = 0;
  if (*(_BYTE *)(a2 + 2488))
  {
    *(_QWORD *)(a1 + 2472) = *(_QWORD *)(a2 + 2472);
    v11 = *(_QWORD *)(a2 + 2480);
    *(_QWORD *)(a1 + 2480) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    *(_BYTE *)(a1 + 2488) = 1;
  }
  v14 = *(_QWORD *)(a2 + 2496);
  *(_DWORD *)(a1 + 2504) = *(_DWORD *)(a2 + 2504);
  *(_QWORD *)(a1 + 2496) = v14;
  *(_WORD *)(a1 + 2512) = *(_WORD *)(a2 + 2512);
  if (*(char *)(a2 + 2543) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 2520), *(void **)(a2 + 2520), *(_QWORD *)(a2 + 2528));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 2520);
    *(_QWORD *)(a1 + 2536) = *(_QWORD *)(a2 + 2536);
    *(_OWORD *)(a1 + 2520) = v15;
  }
  *(_BYTE *)(a1 + 2544) = *(_BYTE *)(a2 + 2544);
  v16 = (_BYTE *)(a1 + 2552);
  if (*(char *)(a2 + 2575) < 0)
  {
    sub_20E860C04(v16, *(void **)(a2 + 2552), *(_QWORD *)(a2 + 2560));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 2552);
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 2568);
    *(_OWORD *)v16 = v17;
  }
  v18 = *(_OWORD *)(a2 + 2576);
  *(_QWORD *)(a1 + 2592) = *(_QWORD *)(a2 + 2592);
  *(_OWORD *)(a1 + 2576) = v18;
  v19 = *(_OWORD *)(a2 + 2664);
  v21 = *(_OWORD *)(a2 + 2616);
  v20 = *(_OWORD *)(a2 + 2632);
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a2 + 2648);
  *(_OWORD *)(a1 + 2664) = v19;
  *(_OWORD *)(a1 + 2616) = v21;
  *(_OWORD *)(a1 + 2632) = v20;
  v22 = *(_OWORD *)(a2 + 2728);
  v24 = *(_OWORD *)(a2 + 2680);
  v23 = *(_OWORD *)(a2 + 2696);
  *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a2 + 2712);
  *(_OWORD *)(a1 + 2728) = v22;
  *(_OWORD *)(a1 + 2680) = v24;
  *(_OWORD *)(a1 + 2696) = v23;
  v25 = *(_OWORD *)(a2 + 2792);
  v27 = *(_OWORD *)(a2 + 2744);
  v26 = *(_OWORD *)(a2 + 2760);
  *(_OWORD *)(a1 + 2776) = *(_OWORD *)(a2 + 2776);
  *(_OWORD *)(a1 + 2792) = v25;
  *(_OWORD *)(a1 + 2744) = v27;
  *(_OWORD *)(a1 + 2760) = v26;
  *(_OWORD *)(a1 + 2600) = *(_OWORD *)(a2 + 2600);
  return a1;
}

void sub_20E86C750(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (v1[2543] < 0)
    operator delete(*v8);
  sub_20E869AA8((uint64_t)(v1 + 2472));
  sub_20E869AA8((uint64_t)(v1 + 2448));
  if (v1[2447] < 0)
  {
    operator delete(*v7);
    if ((v1[2423] & 0x80000000) == 0)
    {
LABEL_5:
      if ((v1[2399] & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((v1[2423] & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v6);
  if ((v1[2399] & 0x80000000) == 0)
  {
LABEL_6:
    if ((v1[2375] & 0x80000000) == 0)
    {
LABEL_12:
      sub_20E869B18(v3);
      sub_20E869B60(v2);
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(*v4);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(*v5);
  if ((v1[2375] & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_20E86C82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(v9 + 2056))
  {
    sub_21023E0E0();
    a1 = a9;
  }
  sub_20E869B60(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86C860(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  if (*(char *)(a2 + 119) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 96), *(void **)(a2 + 96), *(_QWORD *)(a2 + 104));
    v9 = a1 + 120;
    if ((*(char *)(a2 + 143) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v8;
    v9 = a1 + 120;
    if ((*(char *)(a2 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      v10 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)v9 = v10;
      goto LABEL_6;
    }
  }
  sub_20E860C04((_BYTE *)v9, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
LABEL_6:
  if (*(char *)(a2 + 167) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 144), *(void **)(a2 + 144), *(_QWORD *)(a2 + 152));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v11;
  }
  if (*(char *)(a2 + 191) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 168), *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v12;
  }
  if (*(char *)(a2 + 215) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 192), *(void **)(a2 + 192), *(_QWORD *)(a2 + 200));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = v13;
  }
  v14 = *(_WORD *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_WORD *)(a1 + 216) = v14;
  if (*(char *)(a2 + 247) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 224), *(void **)(a2 + 224), *(_QWORD *)(a2 + 232));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = v15;
  }
  if (*(char *)(a2 + 271) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 248), *(void **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = v16;
  }
  if (*(char *)(a2 + 295) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 272), *(void **)(a2 + 272), *(_QWORD *)(a2 + 280));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v17;
  }
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  sub_20E86CC10(a1 + 304, a2 + 304);
  v18 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v18;
  sub_20E868FE0(a1 + 616, (__int128 *)(a2 + 616));
  v19 = *(_OWORD *)(a2 + 800);
  v20 = *(_OWORD *)(a2 + 816);
  v21 = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 844) = *(_OWORD *)(a2 + 844);
  *(_OWORD *)(a1 + 816) = v20;
  *(_OWORD *)(a1 + 832) = v21;
  *(_OWORD *)(a1 + 800) = v19;
  return a1;
}

void sub_20E86CAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;

  if (v10[271] < 0)
  {
    operator delete(*v16);
    if ((v10[247] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v10[215] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v10[247] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v15);
  if ((v10[215] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v10[191] & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v14);
  if ((v10[191] & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10[167] & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v13);
  if ((v10[167] & 0x80000000) == 0)
  {
LABEL_6:
    if ((v10[143] & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*v12);
  if ((v10[143] & 0x80000000) == 0)
  {
LABEL_7:
    if ((v10[119] & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*v11);
  if ((v10[119] & 0x80000000) == 0)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  operator delete(*a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86CC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_20E867F44();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_20E867F44();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 48) = v14;
  sub_20E868FE0(a1 + 96, (__int128 *)(a2 + 96));
  return a1;
}

void sub_20E86CCFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E86CD34(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_20E860C04(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  *(_OWORD *)(__dst + 89) = *(__int128 *)((char *)a2 + 89);
  *((_OWORD *)__dst + 4) = v8;
  *((_OWORD *)__dst + 5) = v9;
  *((_OWORD *)__dst + 3) = v7;
  v10 = __dst + 112;
  if (*((char *)a2 + 135) < 0)
  {
    sub_20E860C04(v10, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v11 = a2[7];
    *((_QWORD *)__dst + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)v10 = v11;
  }
  v12 = *(__int128 *)((char *)a2 + 136);
  v13 = *(__int128 *)((char *)a2 + 152);
  v14 = *(__int128 *)((char *)a2 + 168);
  *((_QWORD *)__dst + 23) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(__dst + 168) = v14;
  *(_OWORD *)(__dst + 152) = v13;
  *(_OWORD *)(__dst + 136) = v12;
  v15 = a2[12];
  *((_QWORD *)__dst + 26) = *((_QWORD *)a2 + 26);
  *((_OWORD *)__dst + 12) = v15;
  return __dst;
}

void sub_20E86CE34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86CE80(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v6 = *((_QWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 16);
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 9);
  v8 = (_BYTE *)*((_QWORD *)a2 + 10);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_20E867F44();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 88) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 80) = v12;
  }
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v13 = *(__int128 *)((char *)a2 + 104);
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v13;
  return a1;
}

void sub_20E86CF74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_20E86CFB4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E86CFC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9AB830;
  result[1] = v3;
  return result;
}

uint64_t sub_20E86CFFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9AB830;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E86D018(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20E86D024(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5boost15program_options19options_descriptionERN4cv3d3vio11slam_engine15MapEngineConfigEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFN5boost15program_options19options_descriptionERN4cv3d3vio11slam_engine15MapEngineConfigEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFN5boost15program_options19options_descriptionERN4cv3d3vio11slam_engine15MapEngineConfigEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5boost15program_options19options_descriptionERN4cv3d3vio11slam_engine15MapEngineConfigEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E86D090()
{
  return &unk_24C9AB8B0;
}

uint64_t sub_20E86D09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  _QWORD __dst[13];

  v5 = (_QWORD *)(sub_20E86AC88(a1, a2) + 11424);
  v6 = sub_20E8B3094((uint64_t)v5, 80, 40);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    sub_20E86D37C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 48))(__dst, v7, a1, v6);
  sub_20E8B32F0(v5, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  v14 = 13;
  strcpy((char *)__p, "Other options");
  sub_20E8B30B4(__dst, (__int128 *)__p, 80, 40);
  if (v14 < 0)
    operator delete(__p[0]);
  v14 = 4;
  strcpy((char *)__p, "help");
  v8 = sub_20E8B35E8((uint64_t)v5, (uint64_t)__p, 0, 0, 0);
  v9 = v8;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (!v9)
    {
LABEL_8:
      __p[0] = (void *)nullsub_1(__dst);
      sub_20E8B2E84((uint64_t *)__p, "help", "Print this help message");
    }
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  __p[0] = (void *)nullsub_1(__dst);
  v10 = operator new();
  *(_QWORD *)v10 = &off_24C9AB920;
  *(_QWORD *)(v10 + 8) = &unk_24C9AB990;
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  sub_20E8B2F9C((uint64_t *)__p, "config_file", v10, "Path to a configuration file.");
  __p[0] = (void *)nullsub_1(__dst);
  v11 = operator new();
  *(_QWORD *)v11 = &off_24C9AB920;
  *(_QWORD *)(v11 + 8) = &unk_24C9AB990;
  *(_QWORD *)(v11 + 120) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_QWORD *)(v11 + 109) = 0;
  sub_20E8B2F9C((uint64_t *)__p, "config_str", v11, "A JSON string containing configuration data, which is useful for passing in JSON configs directly into the command line (without needing an auxiliary config.json file). E.g. --config_str='{ \"arg\": 1 }'");
  sub_20E8B32F0(v5, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  return a1;
}

void sub_20E86D2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  sub_20E869298((uint64_t)&a15);
  sub_20E869298(v16);
  sub_20E869418(v15);
  _Unwind_Resume(a1);
}

void sub_20E86D37C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C9AB8F8;
  __cxa_throw(exception, (struct type_info *)&unk_24C9AB8D0, (void (*)(void *))std::exception::~exception);
}

void sub_20E86D3B4(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E86D3D8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20E86D8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20E86D9EC(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20E86DA0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20E86DA2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20E86DA34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20E86DA3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

void **sub_20E86DA94(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void **result;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t (*v11)();
  void *v12;
  size_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  std::runtime_error v16;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x80000002102D7028 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x80000002102D7028 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = *a2 + 8;
    result = *(void ***)(a1 + 16);
    if (!result)
      goto LABEL_23;
  }
  else
  {
    v6 = 0;
    result = *(void ***)(a1 + 16);
    if (!result)
      goto LABEL_23;
  }
  if (result != (void **)v6)
  {
    v8 = *(_BYTE *)(v6 + 23);
    if ((*((char *)result + 23) & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(v6 + 23) & 0x80) != 0)
      {
        result = (void **)sub_20E867BF8(result, *(void **)v6, *(_QWORD *)(v6 + 8));
        v10 = *(_QWORD *)(a1 + 120);
        v15 = nullsub_4;
        if (!v10)
          v15 = 0;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v9 = *(_OWORD *)v6;
        result[2] = *(void **)(v6 + 16);
        *(_OWORD *)result = v9;
        v10 = *(_QWORD *)(a1 + 120);
        v11 = nullsub_4;
        if (!v10)
          v11 = 0;
        if (v11)
          goto LABEL_26;
      }
      return result;
    }
    if (v8 >= 0)
      v12 = (void *)v6;
    else
      v12 = *(void **)v6;
    if (v8 >= 0)
      v13 = *(unsigned __int8 *)(v6 + 23);
    else
      v13 = *(_QWORD *)(v6 + 8);
    result = sub_20E867CBC(result, v12, v13);
  }
LABEL_23:
  v10 = *(_QWORD *)(a1 + 120);
  v14 = nullsub_4;
  if (!v10)
    v14 = 0;
  if (v14)
  {
LABEL_26:
    if (!v10)
    {
      std::runtime_error::runtime_error(&v16, "call to empty boost::function");
      v16.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v16);
    }
    return (void **)(*(uint64_t (**)(uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20E86DC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void sub_20E86DC24(uint64_t a1)
{
  sub_20E86E384(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E86DC48(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (*a3 != a3[1])
    return sub_20E8B86F8(a2, a3);
  v5 = *(_QWORD *)(a1 + 80);
  if (!v5)
    return sub_20E8B86F8(a2, a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *sub_20E86DCC4()
{
  return &unk_24C9AB9F0;
}

void *sub_20E86DCD0()
{
  return &unk_24C9AB9F0;
}

uint64_t sub_20E86DCDC(uint64_t a1)
{
  return sub_20E86E384(a1 - 8);
}

void sub_20E86DCE4(uint64_t a1)
{
  sub_20E86E384(a1 - 8);
  JUMPOUT(0x212BC6398);
}

void sub_20E86DD10(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E86DD64((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ABA38, (void (*)(void *))sub_20E86DDC0);
}

void sub_20E86DD4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86DD64(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_24C9ABA90;
  *(_QWORD *)(a1 + 8) = &unk_24C9ABAC0;
  *(_QWORD *)(a1 + 24) = &unk_24C9ABAE8;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_20E86DDC0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t sub_20E86DE18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &unk_24C9ABB38;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABB60;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_24C9ABA90;
  *(_QWORD *)(v2 + 8) = &unk_24C9ABAC0;
  *(_QWORD *)(v2 + 24) = &unk_24C9ABAE8;
  sub_20E86E24C(v2 + 24, a1 + 24);
  return v2;
}

void sub_20E86DEF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC6398](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_20E86DF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_20E86DF38(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_20E86E18C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_24C9ABA38, (void (*)(void *))sub_20E86DDC0);
}

void sub_20E86DF74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E86DF88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20E86DFF0(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_20E86E040(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC6398);
}

void sub_20E86E0AC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_20E86E0FC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB60;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC6398);
}

void sub_20E86E168(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E86E18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24C9ABB08;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_24C9ABB38;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24C9ABB60;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24C9ABA90;
  *(_QWORD *)(a1 + 8) = &unk_24C9ABAC0;
  *(_QWORD *)(a1 + 24) = &unk_24C9ABAE8;
  return a1;
}

void sub_20E86E238(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86E24C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_20E86E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86E384(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9AB920;
  *(_QWORD *)(a1 + 8) = &unk_24C9AB990;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20E86E44C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_5;
  }
  else if (!*(_BYTE *)(a1 + 32))
  {
LABEL_5:

    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    goto LABEL_5;
  operator delete(*(void **)(a1 + 8));

  return a1;
}

unint64_t sub_20E86E4C8@<X0>(uint64_t *__return_ptr a1@<X8>, char *__s@<X1>, unint64_t result@<X0>)
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;

  v3 = a1;
  if (*(_BYTE *)(result + 24))
  {
    *(_OWORD *)a1 = *(_OWORD *)result;
    a1[2] = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    return result;
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (uint64_t *)result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = (uint64_t *)operator new(v6 + 1);
    v3[1] = (uint64_t)v5;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = (uint64_t)v8;
    v3 = v8;
  }
  else
  {
    *((_BYTE *)v3 + 23) = result;
    if (!result)
    {
      *(_BYTE *)v3 = 0;
      return result;
    }
  }
  result = (unint64_t)memcpy(v3, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v3) = 0;
  return result;
}

_QWORD *sub_20E86E5A8(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  *((_BYTE *)__dst + 24) = 1;
  return __dst;
}

uint64_t sub_20E86E658(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_20E86E704(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    a1 = v1;
  }
  return nullsub_1(a1);
}

void sub_20E86E748(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E86E76C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212BC6398);
  return result;
}

uint64_t sub_20E86E78C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIvE27__shared_ptr_default_deleteIv13os_log_pack_sEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20E86E7FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20E86E80C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E86E83C(uint64_t a1)
{
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return nullsub_1(a1 + 24);
  operator delete(*(void **)(a1 + 32));
  return nullsub_1(a1 + 24);
}

void sub_20E86E880(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  nullsub_1(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20E86E8C4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(std::__shared_weak_count **)(v2 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    MEMORY[0x212BC6398](v2, 0x10F0C40B62ED6C6);
  }
  return a1;
}

void sub_20E86E980(uint64_t a1, uint64_t *a2, void *a3, os_log_type_t a4, const char **a5)
{
  NSObject *v9;
  NSObject *v10;
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[4];
  __int128 v63;
  std::__shared_weak_count *v64;
  char *v65;
  std::__shared_weak_count *v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = v9;
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v63 = v12;
    *((_QWORD *)&v63 + 1) = v12;
    v65 = 0;
    v66 = 0;
    v64 = v13;
    v14 = *a5;
    v15 = strlen(*a5);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
        goto LABEL_13;
    }
    memcpy(p_dst, v14, v16);
LABEL_13:
    *((_BYTE *)p_dst + v16) = 0;
    v62[1] = __dst;
    v62[2] = v68;
    *(_QWORD *)((char *)&v62[2] + 7) = *(_QWORD *)((char *)&v68 + 7);
    v62[0] = off_24C9ABC20;
    HIBYTE(v62[3]) = HIBYTE(v68);
    v22 = operator new(0x38uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C9ABBD0;
    v22[3] = off_24C9ABC20;
    *((_OWORD *)v22 + 2) = *(_OWORD *)&v62[1];
    v22[6] = v62[3];
    memset(&v62[1], 0, 24);
    v23 = v66;
    v65 = (char *)(v22 + 3);
    v66 = (std::__shared_weak_count *)v22;
    if (!v23)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
      {
LABEL_19:
        nullsub_1(v62);
        *(_OWORD *)v69 = v63;
        v26 = v65;
        *(_QWORD *)&v69[16] = v64;
        if (v64)
        {
          v27 = (unint64_t *)&v64->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v66;
        *(_QWORD *)&v70 = v26;
        *((_QWORD *)&v70 + 1) = v66;
        if (v66)
        {
          v30 = (unint64_t *)&v66->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v71 = v26;
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        else
        {
          v71 = v26;
        }
        v33 = v64;
        if (v64)
        {
          v34 = (unint64_t *)&v64->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = *(_QWORD *)v69;
        if (v71[31] >= 0)
          v37 = v71 + 8;
        else
          v37 = (char *)*((_QWORD *)v71 + 1);
        v38 = _os_log_pack_fill();
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v38 + 4) = v37;
        v39 = operator new();
        v40 = *((unsigned __int8 *)a2 + 23);
        if ((v40 & 0x80u) == 0)
          v41 = a2;
        else
          v41 = (uint64_t *)*a2;
        if ((v40 & 0x80u) != 0)
          v40 = a2[1];
        *(_QWORD *)v39 = v36;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v39 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v39 + 40) = v41;
        *(_QWORD *)(v39 + 48) = v40;
        *(_BYTE *)(v39 + 56) = a4;
        v62[0] = 0;
        *(_QWORD *)&v63 = v39;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v63);
        v42 = v63;
        *(_QWORD *)&v63 = 0;
        if (v42)
        {
          v43 = *(std::__shared_weak_count **)(v42 + 32);
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = *(std::__shared_weak_count **)(v42 + 16);
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
          v49 = v62[0];
          v62[0] = 0;
          if (v49)
          {
            v50 = *(std::__shared_weak_count **)(v49 + 32);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = *(std::__shared_weak_count **)(v49 + 16);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        goto LABEL_76;
      }
    }
    operator delete((void *)v62[1]);
    goto LABEL_19;
  }
  os_log_type_enabled(v9, a4);
  v18 = *a5;
  *(_DWORD *)v69 = 136315138;
  *(_QWORD *)&v69[4] = v18;
  v19 = (void *)_os_log_send_and_compose_impl();
  if (v19)
    free(v19);
LABEL_76:

}

void sub_20E86EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_20E86EFB0(uint64_t a1, uint64_t *a2, void *a3, os_log_type_t a4, const char **a5)
{
  NSObject *v9;
  NSObject *v10;
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[4];
  __int128 v63;
  std::__shared_weak_count *v64;
  char *v65;
  std::__shared_weak_count *v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = v9;
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v63 = v12;
    *((_QWORD *)&v63 + 1) = v12;
    v65 = 0;
    v66 = 0;
    v64 = v13;
    v14 = *a5;
    v15 = strlen(*a5);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
        goto LABEL_13;
    }
    memcpy(p_dst, v14, v16);
LABEL_13:
    *((_BYTE *)p_dst + v16) = 0;
    v62[1] = __dst;
    v62[2] = v68;
    *(_QWORD *)((char *)&v62[2] + 7) = *(_QWORD *)((char *)&v68 + 7);
    v62[0] = off_24C9ABC20;
    HIBYTE(v62[3]) = HIBYTE(v68);
    v22 = operator new(0x38uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C9ABBD0;
    v22[3] = off_24C9ABC20;
    *((_OWORD *)v22 + 2) = *(_OWORD *)&v62[1];
    v22[6] = v62[3];
    memset(&v62[1], 0, 24);
    v23 = v66;
    v65 = (char *)(v22 + 3);
    v66 = (std::__shared_weak_count *)v22;
    if (!v23)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
      {
LABEL_19:
        nullsub_1(v62);
        *(_OWORD *)v69 = v63;
        v26 = v65;
        *(_QWORD *)&v69[16] = v64;
        if (v64)
        {
          v27 = (unint64_t *)&v64->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v66;
        *(_QWORD *)&v70 = v26;
        *((_QWORD *)&v70 + 1) = v66;
        if (v66)
        {
          v30 = (unint64_t *)&v66->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v71 = v26;
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        else
        {
          v71 = v26;
        }
        v33 = v64;
        if (v64)
        {
          v34 = (unint64_t *)&v64->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = *(_QWORD *)v69;
        if (v71[31] >= 0)
          v37 = v71 + 8;
        else
          v37 = (char *)*((_QWORD *)v71 + 1);
        v38 = _os_log_pack_fill();
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v38 + 4) = v37;
        v39 = operator new();
        v40 = *((unsigned __int8 *)a2 + 23);
        if ((v40 & 0x80u) == 0)
          v41 = a2;
        else
          v41 = (uint64_t *)*a2;
        if ((v40 & 0x80u) != 0)
          v40 = a2[1];
        *(_QWORD *)v39 = v36;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v39 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v39 + 40) = v41;
        *(_QWORD *)(v39 + 48) = v40;
        *(_BYTE *)(v39 + 56) = a4;
        v62[0] = 0;
        *(_QWORD *)&v63 = v39;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v63);
        v42 = v63;
        *(_QWORD *)&v63 = 0;
        if (v42)
        {
          v43 = *(std::__shared_weak_count **)(v42 + 32);
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = *(std::__shared_weak_count **)(v42 + 16);
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
          v49 = v62[0];
          v62[0] = 0;
          if (v49)
          {
            v50 = *(std::__shared_weak_count **)(v49 + 32);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = *(std::__shared_weak_count **)(v49 + 16);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        goto LABEL_76;
      }
    }
    operator delete((void *)v62[1]);
    goto LABEL_19;
  }
  os_log_type_enabled(v9, a4);
  v18 = *a5;
  *(_DWORD *)v69 = 136315138;
  *(_QWORD *)&v69[4] = v18;
  v19 = (void *)_os_log_send_and_compose_impl();
  if (v19)
    free(v19);
LABEL_76:

}

void sub_20E86F560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_20E86F5E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  memcpy((void *)a1, (const void *)a2, 0x356uLL);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  v4 = *(_OWORD *)(a2 + 872);
  v5 = *(_OWORD *)(a2 + 888);
  v6 = *(_OWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 888) = v5;
  *(_OWORD *)(a1 + 904) = v6;
  *(_OWORD *)(a1 + 872) = v4;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  v7 = *(char **)(a2 + 928);
  v8 = *(char **)(a2 + 936);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v10 = (char *)operator new(v8 - v7);
    *(_QWORD *)(a1 + 928) = v10;
    *(_QWORD *)(a1 + 936) = v10;
    *(_QWORD *)(a1 + 944) = &v10[8 * (v9 >> 3)];
    if ((unint64_t)(v9 - 24) >= 0x108
      && ((v11 = (v9 - 24) / 0x18uLL, v12 = 24 * v11 + 24, v10 < &v7[v12]) ? (v13 = v7 >= &v10[v12]) : (v13 = 1), v13))
    {
      v14 = v11 + 1;
      v15 = (v11 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v16 = &v7[24 * v15];
      v17 = &v10[24 * v15];
      v18 = v15;
      do
      {
        v19 = *((_OWORD *)v7 + 1);
        v21 = *((_OWORD *)v7 + 4);
        v20 = *((_OWORD *)v7 + 5);
        v22 = *((_OWORD *)v7 + 2);
        v23 = *((_OWORD *)v7 + 3);
        *(_OWORD *)v10 = *(_OWORD *)v7;
        *((_OWORD *)v10 + 1) = v19;
        *((_OWORD *)v10 + 2) = v22;
        *((_OWORD *)v10 + 3) = v23;
        *((_OWORD *)v10 + 4) = v21;
        *((_OWORD *)v10 + 5) = v20;
        v10 += 96;
        v7 += 96;
        v18 -= 4;
      }
      while (v18);
      if (v14 == v15)
        goto LABEL_15;
    }
    else
    {
      v16 = v7;
      v17 = v10;
    }
    do
    {
      *(_QWORD *)v17 = *(_QWORD *)v16;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v16 + 1);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v16 + 2);
      v17 += 24;
      v16 += 24;
    }
    while (v16 != v8);
LABEL_15:
    *(_QWORD *)(a1 + 936) = v17;
  }
  v24 = *(_OWORD *)(a2 + 952);
  v25 = *(_OWORD *)(a2 + 968);
  v26 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 1000) = v26;
  *(_OWORD *)(a1 + 952) = v24;
  *(_OWORD *)(a1 + 968) = v25;
  v27 = *(_OWORD *)(a2 + 1128);
  v29 = *(_OWORD *)(a2 + 1080);
  v28 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v27;
  *(_OWORD *)(a1 + 1080) = v29;
  *(_OWORD *)(a1 + 1096) = v28;
  v30 = *(_OWORD *)(a2 + 1192);
  v32 = *(_OWORD *)(a2 + 1144);
  v31 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v30;
  *(_OWORD *)(a1 + 1144) = v32;
  *(_OWORD *)(a1 + 1160) = v31;
  v33 = *(_OWORD *)(a2 + 1016);
  v34 = *(_OWORD *)(a2 + 1032);
  v35 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1064) = v35;
  *(_OWORD *)(a1 + 1016) = v33;
  *(_OWORD *)(a1 + 1032) = v34;
  sub_20E86F7FC(a1 + 1208, a2 + 1208);
  *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
  return a1;
}

void sub_20E86F7DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 936) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E86F7FC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  size_t v18;
  void *v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(unsigned int *)(a2 + 112);
  v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = v9 >> 3;
  v10 = operator new(v9, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 96) = v10;
  if ((_DWORD)v8)
    memcpy(v10, *(const void **)(a2 + 96), 8 * v8);
  *(_DWORD *)(a1 + 112) = v8;
  v11 = *(unsigned int *)(a2 + 136);
  v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v12 >> 3;
  v13 = operator new(v12, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 120) = v13;
  if ((_DWORD)v11)
    memcpy(v13, *(const void **)(a2 + 120), 8 * v11);
  *(_DWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v14 = *(unsigned int *)(a2 + 168);
  v15 = (8 * v14 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = v15 >> 3;
  v16 = operator new(v15, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 152) = v16;
  if ((_DWORD)v14)
    memcpy(v16, *(const void **)(a2 + 152), 8 * v14);
  *(_DWORD *)(a1 + 168) = v14;
  v17 = *(unsigned int *)(a2 + 192);
  v18 = (8 * v17 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = v18 >> 3;
  v19 = operator new(v18, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 176) = v19;
  if ((_DWORD)v17)
    memcpy(v19, *(const void **)(a2 + 176), 8 * v17);
  *(_DWORD *)(a1 + 192) = v17;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  return a1;
}

void sub_20E86F948(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  if (*(_QWORD *)(v1 + 120))
  {
    MEMORY[0x212BC6368](*(_QWORD *)(v1 + 120), 0x1000C8000313F17);
    if (!*(_QWORD *)(v1 + 96))
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!*(_QWORD *)(v1 + 96))
  {
    goto LABEL_3;
  }
  MEMORY[0x212BC6368]();
  _Unwind_Resume(a1);
}

void sub_20E86F9D0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E86F9E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9ABC58;
  result[1] = v3;
  return result;
}

uint64_t sub_20E86FA18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9ABC58;
  a2[1] = v2;
  return result;
}

uint64_t sub_20E86FA34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_20E86FA40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5boost15program_options19options_descriptionERN4cv3d3vio14pose_predictor20PosePredictionConfigEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"PFN5boost15program_options19options_descriptionERN4cv3d3vio14pose_predictor20PosePredictionConfigEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFN5boost15program_options19options_descriptionERN4cv3d3vio14pose_predictor20PosePredictionConfigEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5boost15program_options19options_descriptionERN4cv3d3vio14pose_predictor20PosePredictionConfigEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20E86FAAC()
{
  return &unk_24C9ABCD8;
}

uint64_t sub_20E86FAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  _QWORD __dst[13];

  v5 = (_QWORD *)(sub_20E86FD94(a1, a2) + 1424);
  v6 = sub_20E8B3094((uint64_t)v5, 80, 40);
  v7 = *(_QWORD *)(a3 + 24);
  if (!v7)
    sub_20E86D37C();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 48))(__dst, v7, a1, v6);
  sub_20E8B32F0(v5, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  v14 = 13;
  strcpy((char *)__p, "Other options");
  sub_20E8B30B4(__dst, (__int128 *)__p, 80, 40);
  if (v14 < 0)
    operator delete(__p[0]);
  v14 = 4;
  strcpy((char *)__p, "help");
  v8 = sub_20E8B35E8((uint64_t)v5, (uint64_t)__p, 0, 0, 0);
  v9 = v8;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (!v9)
    {
LABEL_8:
      __p[0] = (void *)nullsub_1(__dst);
      sub_20E8B2E84((uint64_t *)__p, "help", "Print this help message");
    }
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  __p[0] = (void *)nullsub_1(__dst);
  v10 = operator new();
  *(_QWORD *)v10 = &off_24C9AB920;
  *(_QWORD *)(v10 + 8) = &unk_24C9AB990;
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  sub_20E8B2F9C((uint64_t *)__p, "config_file", v10, "Path to a configuration file.");
  __p[0] = (void *)nullsub_1(__dst);
  v11 = operator new();
  *(_QWORD *)v11 = &off_24C9AB920;
  *(_QWORD *)(v11 + 8) = &unk_24C9AB990;
  *(_QWORD *)(v11 + 120) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_QWORD *)(v11 + 109) = 0;
  sub_20E8B2F9C((uint64_t *)__p, "config_str", v11, "A JSON string containing configuration data, which is useful for passing in JSON configs directly into the command line (without needing an auxiliary config.json file). E.g. --config_str='{ \"arg\": 1 }'");
  sub_20E8B32F0(v5, (uint64_t)__dst);
  sub_20E869298((uint64_t)__dst);
  return a1;
}

void sub_20E86FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  sub_20E869298((uint64_t)&a15);
  sub_20E869298(v16);
  sub_20E86A618(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E86FD94(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  memcpy((void *)a1, (const void *)a2, 0x356uLL);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  v4 = *(_OWORD *)(a2 + 872);
  v5 = *(_OWORD *)(a2 + 888);
  v6 = *(_OWORD *)(a2 + 904);
  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
  *(_OWORD *)(a1 + 888) = v5;
  *(_OWORD *)(a1 + 904) = v6;
  *(_OWORD *)(a1 + 872) = v4;
  *(_QWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = 0;
  v7 = *(char **)(a2 + 928);
  v8 = *(char **)(a2 + 936);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v10 = (char *)operator new(v8 - v7);
    *(_QWORD *)(a1 + 928) = v10;
    *(_QWORD *)(a1 + 936) = v10;
    *(_QWORD *)(a1 + 944) = &v10[8 * (v9 >> 3)];
    if ((unint64_t)(v9 - 24) >= 0x108
      && ((v11 = (v9 - 24) / 0x18uLL, v12 = 24 * v11 + 24, v10 < &v7[v12]) ? (v13 = v7 >= &v10[v12]) : (v13 = 1), v13))
    {
      v14 = v11 + 1;
      v15 = (v11 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v16 = &v7[24 * v15];
      v17 = &v10[24 * v15];
      v18 = v15;
      do
      {
        v19 = *((_OWORD *)v7 + 1);
        v21 = *((_OWORD *)v7 + 4);
        v20 = *((_OWORD *)v7 + 5);
        v22 = *((_OWORD *)v7 + 2);
        v23 = *((_OWORD *)v7 + 3);
        *(_OWORD *)v10 = *(_OWORD *)v7;
        *((_OWORD *)v10 + 1) = v19;
        *((_OWORD *)v10 + 2) = v22;
        *((_OWORD *)v10 + 3) = v23;
        *((_OWORD *)v10 + 4) = v21;
        *((_OWORD *)v10 + 5) = v20;
        v10 += 96;
        v7 += 96;
        v18 -= 4;
      }
      while (v18);
      if (v14 == v15)
        goto LABEL_15;
    }
    else
    {
      v16 = v7;
      v17 = v10;
    }
    do
    {
      *(_QWORD *)v17 = *(_QWORD *)v16;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v16 + 1);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v16 + 2);
      v17 += 24;
      v16 += 24;
    }
    while (v16 != v8);
LABEL_15:
    *(_QWORD *)(a1 + 936) = v17;
  }
  v24 = *(_OWORD *)(a2 + 952);
  v25 = *(_OWORD *)(a2 + 968);
  v26 = *(_OWORD *)(a2 + 1000);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  *(_OWORD *)(a1 + 1000) = v26;
  *(_OWORD *)(a1 + 952) = v24;
  *(_OWORD *)(a1 + 968) = v25;
  v27 = *(_OWORD *)(a2 + 1128);
  v29 = *(_OWORD *)(a2 + 1080);
  v28 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1128) = v27;
  *(_OWORD *)(a1 + 1080) = v29;
  *(_OWORD *)(a1 + 1096) = v28;
  v30 = *(_OWORD *)(a2 + 1192);
  v32 = *(_OWORD *)(a2 + 1144);
  v31 = *(_OWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1192) = v30;
  *(_OWORD *)(a1 + 1144) = v32;
  *(_OWORD *)(a1 + 1160) = v31;
  v33 = *(_OWORD *)(a2 + 1016);
  v34 = *(_OWORD *)(a2 + 1032);
  v35 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1064) = v35;
  *(_OWORD *)(a1 + 1016) = v33;
  *(_OWORD *)(a1 + 1032) = v34;
  sub_20E86F7FC(a1 + 1208, a2 + 1208);
  *(_BYTE *)(a1 + 1416) = *(_BYTE *)(a2 + 1416);
  return a1;
}

void sub_20E86FF90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 936) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E86FFB0(uint64_t a1, uint64_t *a2, void *a3, os_log_type_t a4, const char **a5)
{
  NSObject *v9;
  NSObject *v10;
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  const char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[4];
  __int128 v63;
  std::__shared_weak_count *v64;
  char *v65;
  std::__shared_weak_count *v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = v9;
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v63 = v12;
    *((_QWORD *)&v63 + 1) = v12;
    v65 = 0;
    v66 = 0;
    v64 = v13;
    v14 = *a5;
    v15 = strlen(*a5);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
        goto LABEL_13;
    }
    memcpy(p_dst, v14, v16);
LABEL_13:
    *((_BYTE *)p_dst + v16) = 0;
    v62[1] = __dst;
    v62[2] = v68;
    *(_QWORD *)((char *)&v62[2] + 7) = *(_QWORD *)((char *)&v68 + 7);
    v62[0] = off_24C9ABC20;
    HIBYTE(v62[3]) = HIBYTE(v68);
    v22 = operator new(0x38uLL);
    v22[1] = 0;
    v22[2] = 0;
    *v22 = &off_24C9ABBD0;
    v22[3] = off_24C9ABC20;
    *((_OWORD *)v22 + 2) = *(_OWORD *)&v62[1];
    v22[6] = v62[3];
    memset(&v62[1], 0, 24);
    v23 = v66;
    v65 = (char *)(v22 + 3);
    v66 = (std::__shared_weak_count *)v22;
    if (!v23)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      if ((SHIBYTE(v62[3]) & 0x80000000) == 0)
      {
LABEL_19:
        nullsub_1(v62);
        *(_OWORD *)v69 = v63;
        v26 = v65;
        *(_QWORD *)&v69[16] = v64;
        if (v64)
        {
          v27 = (unint64_t *)&v64->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = v66;
        *(_QWORD *)&v70 = v26;
        *((_QWORD *)&v70 + 1) = v66;
        if (v66)
        {
          v30 = (unint64_t *)&v66->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v71 = v26;
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        else
        {
          v71 = v26;
        }
        v33 = v64;
        if (v64)
        {
          v34 = (unint64_t *)&v64->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = *(_QWORD *)v69;
        if (v71[31] >= 0)
          v37 = v71 + 8;
        else
          v37 = (char *)*((_QWORD *)v71 + 1);
        v38 = _os_log_pack_fill();
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v38 + 4) = v37;
        v39 = operator new();
        v40 = *((unsigned __int8 *)a2 + 23);
        if ((v40 & 0x80u) == 0)
          v41 = a2;
        else
          v41 = (uint64_t *)*a2;
        if ((v40 & 0x80u) != 0)
          v40 = a2[1];
        *(_QWORD *)v39 = v36;
        *(_OWORD *)(v39 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v39 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v39 + 40) = v41;
        *(_QWORD *)(v39 + 48) = v40;
        *(_BYTE *)(v39 + 56) = a4;
        v62[0] = 0;
        *(_QWORD *)&v63 = v39;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v63);
        v42 = v63;
        *(_QWORD *)&v63 = 0;
        if (v42)
        {
          v43 = *(std::__shared_weak_count **)(v42 + 32);
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = *(std::__shared_weak_count **)(v42 + 16);
          if (v46)
          {
            v47 = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
          v49 = v62[0];
          v62[0] = 0;
          if (v49)
          {
            v50 = *(std::__shared_weak_count **)(v49 + 32);
            if (v50)
            {
              v51 = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v53 = *(std::__shared_weak_count **)(v49 + 16);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
          }
        }
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        goto LABEL_76;
      }
    }
    operator delete((void *)v62[1]);
    goto LABEL_19;
  }
  os_log_type_enabled(v9, a4);
  v18 = *a5;
  *(_DWORD *)v69 = 136315138;
  *(_QWORD *)&v69[4] = v18;
  v19 = (void *)_os_log_send_and_compose_impl();
  if (v19)
    free(v19);
LABEL_76:

}

void sub_20E870560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);

  _Unwind_Resume(a1);
}

uint64_t sub_20E8705E0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

void sub_20E870610()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x212BC6CE0]());
}

void sub_20E870624(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void **v19;
  std::string *p_p;
  std::string::size_type size;
  char v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  os_log_type_t v45;
  NSObject *v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  size_t v51;
  size_t v52;
  _QWORD *v53;
  void *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  id v103;
  const char *v104;
  uint64_t v105;
  int v106;
  char *__s;
  unint64_t v108;
  std::string __p;
  int v110;
  const char *v111;
  int v112;
  const char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  int64_t v117;
  _QWORD v118[2];
  _QWORD v119[3];
  const void *v120;
  uint64_t v121;
  const void *v122;
  unint64_t v123;
  void *v124;
  char v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  void **__dst;
  size_t v131;
  int64_t v132;
  _QWORD v133[4];
  __int128 v134;
  std::__shared_weak_count *v135;
  char *v136;
  std::__shared_weak_count *v137;
  _QWORD *v138;
  __int128 v139;
  _BYTE v140[24];
  __int128 v141;
  uint64_t v142;
  size_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;

  v146 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v5, "dictionaryRepresentation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
    goto LABEL_161;
  v9 = (const char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
  v10 = strlen(v9);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v131 = v11;
    v132 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v132) = v10;
    p_dst = (void **)&__dst;
    if (!v10)
      goto LABEL_10;
  }
  memmove(p_dst, v9, v11);
LABEL_10:
  *((_BYTE *)p_dst + v11) = 0;
  sub_20E872DD8(&v129);
  if (**(int **)(v129 + 56) <= 3)
  {
    v15 = *(unsigned __int8 *)(v129 + 72);
    v16 = sub_21021D818(&v129);
    v17 = v16;
    if (v15 || v16)
    {
      sub_20E863438((uint64_t)v118);
      *(_QWORD *)v140 = "Trying to read ";
      *(_QWORD *)&v140[8] = 15;
      v18 = HIBYTE(v132);
      v19 = (void **)&__dst;
      if (v132 < 0)
      {
        v19 = __dst;
        v18 = v131;
      }
      *(_QWORD *)&v140[16] = v19;
      *(_QWORD *)&v141 = v18;
      *((_QWORD *)&v141 + 1) = " from the user defaults but it is absent";
      v142 = 40;
      sub_20E8778D4((uint64_t)v140, (uint64_t)&v143, 0, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_20E86A980(v119, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v22 = v127;
        v106 = v15;
        v108 = v17;
        if ((v127 & 0x10) == 0)
        {
LABEL_23:
          if ((v22 & 8) == 0)
          {
            v23 = 0;
            HIBYTE(v117) = 0;
            v24 = v116;
            goto LABEL_36;
          }
          v26 = v120;
          v23 = v121 - (_QWORD)v120;
          if ((unint64_t)(v121 - (_QWORD)v120) > 0x7FFFFFFFFFFFFFF7)
LABEL_79:
            sub_20E860B7C();
LABEL_29:
          if (v23 >= 0x17)
          {
            v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v27 = v23 | 7;
            v28 = v27 + 1;
            v24 = operator new(v27 + 1);
            v116[1] = (void *)v23;
            v117 = v28 | 0x8000000000000000;
            v116[0] = v24;
          }
          else
          {
            HIBYTE(v117) = v23;
            v24 = v116;
            if (!v23)
            {
LABEL_36:
              *((_BYTE *)v24 + v23) = 0;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
              __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
              __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
              v110 = 3;
              v111 = "unknown file";
              v112 = 48;
              v114 = 0;
              v115 = 0;
              v113 = "unknown function";
              v29 = v116;
              if (v117 < 0)
                v29 = (void **)v116[0];
              __s = (char *)v29;
              v30 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
              v31 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
              v104 = v31;
              v105 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
              if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
              {
                v31 = *(const char **)(v30 + 16);
                v32 = *(_QWORD *)(v30 + 24);
                v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v34 & 1) != 0)
                  goto LABEL_42;
              }
              else
              {
                v32 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
                v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v33 & 1) != 0)
                  goto LABEL_42;
              }
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v140);
                sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v140);
                if ((_BYTE)v141 && (v140[23] & 0x80000000) != 0)
                  operator delete(*(void **)v140);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
LABEL_42:
              if (byte_254A4A50F >= 0)
                v35 = (const char *)&xmmword_254A4A4F8;
              else
                v35 = (const char *)xmmword_254A4A4F8;
              if (byte_254A4A50F >= 0)
                v36 = byte_254A4A50F;
              else
                v36 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
              v37 = os_log_create(v35, v31);
              *(_QWORD *)v140 = v37;

              v38 = &v140[8];
              if (v36 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v36 >= 0x17)
              {
                v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v39 = v36 | 7;
                v40 = v39 + 1;
                v38 = operator new(v39 + 1);
                *(_QWORD *)&v140[16] = v36;
                *(_QWORD *)&v141 = v40 | 0x8000000000000000;
                *(_QWORD *)&v140[8] = v38;
              }
              else
              {
                BYTE7(v141) = v36;
                if (!v36)
                {
LABEL_56:
                  v38[v36] = 0;
                  BYTE8(v141) = 1;
                  v41 = &v142;
                  if (v32 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v32 >= 0x17)
                  {
                    v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v32 | 7) != 0x17)
                      v42 = v32 | 7;
                    v43 = v42 + 1;
                    v41 = (uint64_t *)operator new(v42 + 1);
                    v143 = v32;
                    v144 = v43 | 0x8000000000000000;
                    v142 = (uint64_t)v41;
                  }
                  else
                  {
                    HIBYTE(v144) = v32;
                    if (!v32)
                      goto LABEL_64;
                  }
                  memmove(v41, v31, v32);
LABEL_64:
                  *((_BYTE *)v41 + v32) = 0;
                  v145 = 1;
                  v44 = objc_retainAutorelease(*(id *)v140);
                  if (v145 && SHIBYTE(v144) < 0)
                    operator delete((void *)v142);
                  if (BYTE8(v141) && SBYTE7(v141) < 0)
                    operator delete(*(void **)&v140[8]);

                  v45 = sub_21021D650(3u);
                  v46 = v44;
                  v47 = v46;
                  if (!v108 || !*(_QWORD *)(v108 + 8))
                  {
                    os_log_type_enabled(v46, v45);
                    *(_DWORD *)v140 = 136315138;
                    *(_QWORD *)&v140[4] = __s;
                    v54 = (void *)_os_log_send_and_compose_impl();
                    v55 = v106;
                    if (v54)
                      free(v54);
                    goto LABEL_145;
                  }
                  v48 = _os_log_pack_size();
                  v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
                  v50 = (std::__shared_weak_count *)operator new();
                  v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v50->__shared_owners_ = 0;
                  v50->__shared_weak_owners_ = 0;
                  v50[1].__vftable = v49;
                  *(_QWORD *)&v134 = v49;
                  *((_QWORD *)&v134 + 1) = v49;
                  v136 = 0;
                  v137 = 0;
                  v135 = v50;
                  v51 = strlen(__s);
                  if (v51 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v52 = v51;
                  if (v51 >= 0x17)
                  {
                    v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v51 | 7) != 0x17)
                      v56 = v51 | 7;
                    v57 = v56 + 1;
                    v53 = operator new(v56 + 1);
                    *(_QWORD *)&v139 = v52;
                    *((_QWORD *)&v139 + 1) = v57 | 0x8000000000000000;
                    v138 = v53;
                  }
                  else
                  {
                    HIBYTE(v139) = v51;
                    v53 = &v138;
                    if (!v51)
                    {
LABEL_84:
                      *((_BYTE *)v53 + v52) = 0;
                      v133[1] = v138;
                      v133[2] = v139;
                      *(_QWORD *)((char *)&v133[2] + 7) = *(_QWORD *)((char *)&v139 + 7);
                      v133[0] = off_24C9ABC20;
                      HIBYTE(v133[3]) = HIBYTE(v139);
                      v58 = operator new(0x38uLL);
                      v58[1] = 0;
                      v58[2] = 0;
                      *v58 = &off_24C9ABBD0;
                      v58[3] = off_24C9ABC20;
                      *((_OWORD *)v58 + 2) = *(_OWORD *)&v133[1];
                      v58[6] = v133[3];
                      memset(&v133[1], 0, 24);
                      v59 = v137;
                      v136 = (char *)(v58 + 3);
                      v137 = (std::__shared_weak_count *)v58;
                      if (v59)
                      {
                        p_shared_owners = (unint64_t *)&v59->__shared_owners_;
                        do
                          v61 = __ldaxr(p_shared_owners);
                        while (__stlxr(v61 - 1, p_shared_owners));
                        if (!v61)
                        {
                          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                          std::__shared_weak_count::__release_weak(v59);
                        }
                      }
                      if (SHIBYTE(v133[3]) < 0)
                        operator delete((void *)v133[1]);
                      nullsub_1(v133);
                      *(_OWORD *)v140 = v134;
                      v62 = (uint64_t)v136;
                      *(_QWORD *)&v140[16] = v135;
                      if (v135)
                      {
                        v63 = (unint64_t *)&v135->__shared_owners_;
                        do
                          v64 = __ldxr(v63);
                        while (__stxr(v64 + 1, v63));
                      }
                      v65 = v137;
                      *(_QWORD *)&v141 = v62;
                      *((_QWORD *)&v141 + 1) = v137;
                      if (v137)
                      {
                        v66 = (unint64_t *)&v137->__shared_owners_;
                        do
                          v67 = __ldxr(v66);
                        while (__stxr(v67 + 1, v66));
                        v142 = v62;
                        do
                          v68 = __ldaxr(v66);
                        while (__stlxr(v68 - 1, v66));
                        if (!v68)
                        {
                          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                          std::__shared_weak_count::__release_weak(v65);
                        }
                      }
                      else
                      {
                        v142 = v62;
                      }
                      v69 = v135;
                      if (v135)
                      {
                        v70 = (unint64_t *)&v135->__shared_owners_;
                        do
                          v71 = __ldaxr(v70);
                        while (__stlxr(v71 - 1, v70));
                        if (!v71)
                        {
                          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                          std::__shared_weak_count::__release_weak(v69);
                        }
                      }
                      v72 = *(_QWORD *)v140;
                      if (*(char *)(v142 + 31) >= 0)
                        v73 = (char *)(v142 + 8);
                      else
                        v73 = *(char **)(v142 + 8);
                      v74 = _os_log_pack_fill();
                      *(_DWORD *)v74 = 136315138;
                      *(_QWORD *)(v74 + 4) = v73;
                      v75 = operator new();
                      v76 = *(unsigned __int8 *)(v105 + 39);
                      v77 = v104;
                      if ((v76 & 0x80u) != 0)
                      {
                        v77 = *(const char **)(v105 + 16);
                        v76 = *(_QWORD *)(v105 + 24);
                      }
                      *(_QWORD *)v75 = v72;
                      *(_OWORD *)(v75 + 8) = *(_OWORD *)&v140[8];
                      *(_QWORD *)&v140[8] = 0;
                      *(_QWORD *)&v140[16] = 0;
                      *(_OWORD *)(v75 + 24) = v141;
                      v141 = 0uLL;
                      *(_QWORD *)(v75 + 40) = v77;
                      *(_QWORD *)(v75 + 48) = v76;
                      *(_BYTE *)(v75 + 56) = v45;
                      v133[0] = 0;
                      *(_QWORD *)&v134 = v75;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v108 + 8) + 40))(*(_QWORD *)(v108 + 8), &v134);
                      v78 = v134;
                      *(_QWORD *)&v134 = 0;
                      v55 = v106;
                      if (v78)
                      {
                        v79 = *(std::__shared_weak_count **)(v78 + 32);
                        if (v79)
                        {
                          v80 = (unint64_t *)&v79->__shared_owners_;
                          do
                            v81 = __ldaxr(v80);
                          while (__stlxr(v81 - 1, v80));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        v82 = *(std::__shared_weak_count **)(v78 + 16);
                        if (v82)
                        {
                          v83 = (unint64_t *)&v82->__shared_owners_;
                          do
                            v84 = __ldaxr(v83);
                          while (__stlxr(v84 - 1, v83));
                          if (!v84)
                          {
                            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                            std::__shared_weak_count::__release_weak(v82);
                          }
                        }
                        MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
                        v85 = v133[0];
                        v133[0] = 0;
                        if (v85)
                        {
                          v86 = *(std::__shared_weak_count **)(v85 + 32);
                          if (v86)
                          {
                            v87 = (unint64_t *)&v86->__shared_owners_;
                            do
                              v88 = __ldaxr(v87);
                            while (__stlxr(v88 - 1, v87));
                            if (!v88)
                            {
                              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                              std::__shared_weak_count::__release_weak(v86);
                            }
                          }
                          v89 = *(std::__shared_weak_count **)(v85 + 16);
                          if (v89)
                          {
                            v90 = (unint64_t *)&v89->__shared_owners_;
                            do
                              v91 = __ldaxr(v90);
                            while (__stlxr(v91 - 1, v90));
                            if (!v91)
                            {
                              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                              std::__shared_weak_count::__release_weak(v89);
                            }
                          }
                          MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
                        }
                      }
                      v92 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                      if (*((_QWORD *)&v141 + 1))
                      {
                        v93 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      v95 = *(std::__shared_weak_count **)&v140[16];
                      if (*(_QWORD *)&v140[16])
                      {
                        v96 = (unint64_t *)(*(_QWORD *)&v140[16] + 8);
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
LABEL_145:

                      if (v55)
                      {
                        v98 = v116;
                        if (v117 < 0)
                          v98 = (void **)v116[0];
                        sub_20E8C003C((uint64_t)&__p, "%s", (const char *)v98);
                        sub_20E863570((uint64_t)&__p);
                      }
                      sub_20E863570((uint64_t)&__p);
                      v99 = v115;
                      if (v115)
                      {
                        v100 = (unint64_t *)&v115->__shared_owners_;
                        do
                          v101 = __ldaxr(v100);
                        while (__stlxr(v101 - 1, v100));
                        if (!v101)
                        {
                          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                          std::__shared_weak_count::__release_weak(v99);
                        }
                      }
                      if (SHIBYTE(v117) < 0)
                        operator delete(v116[0]);
                      v118[0] = *MEMORY[0x24BEDB7F0];
                      v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)((char *)v118 + *(_QWORD *)(v118[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      v119[0] = v102;
                      v119[1] = MEMORY[0x24BEDB848] + 16;
                      if (v125 < 0)
                        operator delete(v124);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v128);
                      goto LABEL_159;
                    }
                  }
                  memcpy(v53, __s, v52);
                  goto LABEL_84;
                }
              }
              memmove(v38, v35, v36);
              goto LABEL_56;
            }
          }
          memmove(v24, v26, v23);
          goto LABEL_36;
        }
      }
      else
      {
        v22 = v127;
        v106 = v15;
        v108 = v17;
        if ((v127 & 0x10) == 0)
          goto LABEL_23;
      }
      v25 = v126;
      if (v126 < v123)
      {
        v126 = v123;
        v25 = v123;
      }
      v26 = v122;
      v23 = v25 - (_QWORD)v122;
      if (v25 - (unint64_t)v122 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_79;
      goto LABEL_29;
    }
  }
LABEL_159:
  if (SHIBYTE(v132) < 0)
    operator delete(__dst);
LABEL_161:
  v103 = v8;
  *(_QWORD *)a1 = v103;
  *(_BYTE *)(a1 + 8) = v8 != 0;

}

void sub_20E871270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  char a72;
  void *v72;
  void *v73;
  uint64_t v74;

  if (*(_BYTE *)(v74 - 152) && *(char *)(v74 - 153) < 0)
    operator delete(*(void **)(v74 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  if (a32 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a33);
  if (a72 < 0)
    operator delete(a69);

  _Unwind_Resume(a1);
}

id sub_20E8713F4()
{
  id v0;
  void *v1;
  void *v2;
  char __p[17];
  char v5;

  v0 = objc_alloc(MEMORY[0x24BDBCF50]);
  v5 = 16;
  strcpy(__p, "AppleCV3D Domain");
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", __p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v5 < 0)
    operator delete(*(void **)__p);
  return v2;
}

void sub_20E871494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8714BC(void *a1, size_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  size_t v13;
  void **p_dst;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *p_p;
  std::string::size_type size;
  size_t v20;
  void **v21;
  unint64_t v22;
  const void **v23;
  unint64_t v24;
  const void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  os_log_type_t v44;
  NSObject *v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  void **v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  unsigned __int8 v61;
  const char *v62;
  size_t v63;
  NSObject *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  os_log_type_t v72;
  NSObject *v73;
  NSObject *v74;
  size_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  size_t v78;
  size_t v79;
  void **v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t (**v124)();
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t (**v159)();
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  const char *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  const char *v178;
  const char *v179;
  id v180;
  char v181;
  std::string __p;
  int v183;
  const char *v184;
  int v185;
  const char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  void **__dst;
  size_t v190;
  int64_t v191;
  _QWORD v192[2];
  uint64_t v193;
  uint64_t v194;
  _BYTE v195[16];
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  char v200;
  unint64_t v201;
  int v202;
  _BYTE v203[152];
  uint64_t v204;
  uint64_t v205;
  uint64_t v206[2];
  uint64_t (**v207)();
  void *v208[3];
  __int128 v209;
  std::__shared_weak_count *v210;
  char *v211;
  std::__shared_weak_count *v212;
  void **v213;
  __int128 v214;
  _BYTE v215[24];
  __int128 v216;
  uint64_t v217;
  size_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  sub_20E8713F4();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E872CD4(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E870624((uint64_t)&v180, v4, v5);

  if (v181)
  {
    v6 = v180;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "doubleValue");
      v206[0] = (uint64_t)a1;
      v206[1] = a2;
      v205 = v7;
      sub_20E872DD8(&v204);
      if (**(int **)(v204 + 56) > 3
        || (v8 = *(unsigned __int8 *)(v204 + 72), v9 = sub_21021D818(&v204), v10 = v9, !v8) && !v9)
      {
LABEL_300:
        v142 = v205;
        goto LABEL_301;
      }
      sub_20E863438((uint64_t)v192);
      sub_20E8784C0("Reading ", (uint64_t)v206, (uint64_t)" from the user defaults with value ", (double *)&v205);
      if (v215[23] >= 0)
        v11 = v215;
      else
        v11 = *(_BYTE **)v215;
      if (v215[23] >= 0)
        v12 = v215[23];
      else
        v12 = *(_QWORD *)&v215[8];
      sub_20E86A980(&v193, (uint64_t)v11, v12);
      if ((v215[23] & 0x80000000) != 0)
        operator delete(*(void **)v215);
      if ((v202 & 0x10) != 0)
      {
        v24 = v201;
        if (v201 < v198)
        {
          v201 = v198;
          v24 = v198;
        }
        v25 = (const void **)&v197;
      }
      else
      {
        if ((v202 & 8) == 0)
        {
          v13 = 0;
          HIBYTE(v191) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_98;
        }
        v25 = (const void **)v195;
        v24 = v196;
      }
      v54 = *v25;
      v13 = v24 - (_QWORD)*v25;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13 >= 0x17)
      {
        v55 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v55 = v13 | 7;
        v56 = v55 + 1;
        p_dst = (void **)operator new(v55 + 1);
        v190 = v13;
        v191 = v56 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v191) = v24 - *(_BYTE *)v25;
        p_dst = (void **)&__dst;
        if (!v13)
        {
LABEL_98:
          *((_BYTE *)p_dst + v13) = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v183 = 3;
          v184 = "unknown file";
          v185 = 60;
          v187 = 0;
          v188 = 0;
          v186 = "unknown function";
          if (v191 >= 0)
            v57 = (const char *)&__dst;
          else
            v57 = (const char *)__dst;
          v58 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v59 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v179 = v59;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v59 = *(const char **)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 24);
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          }
          v61 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v215);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v215);
            if ((_BYTE)v216 && (v215[23] & 0x80000000) != 0)
              operator delete(*(void **)v215);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v62 = byte_254A4A4F8;
          else
            v62 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v63 = byte_254A4A4F8[23];
          else
            v63 = *(_QWORD *)&byte_254A4A4F8[8];
          v64 = os_log_create(v62, v59);
          *(_QWORD *)v215 = v64;

          v65 = &v215[8];
          if (v63 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v63 >= 0x17)
          {
            v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v63 | 7) != 0x17)
              v66 = v63 | 7;
            v67 = v66 + 1;
            v65 = operator new(v66 + 1);
            *(_QWORD *)&v215[16] = v63;
            *(_QWORD *)&v216 = v67 | 0x8000000000000000;
            *(_QWORD *)&v215[8] = v65;
          }
          else
          {
            BYTE7(v216) = v63;
            if (!v63)
            {
LABEL_119:
              v65[v63] = 0;
              BYTE8(v216) = 1;
              v68 = &v217;
              if (v60 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v60 >= 0x17)
              {
                v69 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v69 = v60 | 7;
                v70 = v69 + 1;
                v68 = (uint64_t *)operator new(v69 + 1);
                v218 = v60;
                v219 = v70 | 0x8000000000000000;
                v217 = (uint64_t)v68;
              }
              else
              {
                HIBYTE(v219) = v60;
                if (!v60)
                  goto LABEL_127;
              }
              memmove(v68, v59, v60);
LABEL_127:
              *((_BYTE *)v68 + v60) = 0;
              v220 = 1;
              v71 = objc_retainAutorelease(*(id *)v215);
              if (v220 && SHIBYTE(v219) < 0)
                operator delete((void *)v217);
              if (BYTE8(v216) && SBYTE7(v216) < 0)
                operator delete(*(void **)&v215[8]);

              v72 = sub_21021D650(3u);
              v73 = v71;
              v74 = v73;
              if (!v10 || !*(_QWORD *)(v10 + 8))
              {
                os_log_type_enabled(v73, v72);
                *(_DWORD *)v215 = 136315138;
                *(_QWORD *)&v215[4] = v57;
                v81 = (void *)_os_log_send_and_compose_impl();
                if (v81)
                  free(v81);
                goto LABEL_286;
              }
              v75 = _os_log_pack_size();
              v76 = (std::__shared_weak_count_vtbl *)operator new(v75, (std::align_val_t)8uLL);
              v77 = (std::__shared_weak_count *)operator new();
              v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v77->__shared_owners_ = 0;
              v77->__shared_weak_owners_ = 0;
              v77[1].__vftable = v76;
              *(_QWORD *)&v209 = v76;
              *((_QWORD *)&v209 + 1) = v76;
              v211 = 0;
              v212 = 0;
              v210 = v77;
              v78 = strlen(v57);
              if (v78 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v79 = v78;
              if (v78 >= 0x17)
              {
                v95 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v78 | 7) != 0x17)
                  v95 = v78 | 7;
                v96 = v95 + 1;
                v80 = (void **)operator new(v95 + 1);
                *(_QWORD *)&v214 = v79;
                *((_QWORD *)&v214 + 1) = v96 | 0x8000000000000000;
                v213 = v80;
              }
              else
              {
                HIBYTE(v214) = v78;
                v80 = (void **)&v213;
                if (!v78)
                {
LABEL_166:
                  *((_BYTE *)v80 + v79) = 0;
                  v208[0] = v213;
                  v208[1] = (void *)v214;
                  *(void **)((char *)&v208[1] + 7) = *(void **)((char *)&v214 + 7);
                  v207 = off_24C9ABC20;
                  HIBYTE(v208[2]) = HIBYTE(v214);
                  v97 = operator new(0x38uLL);
                  v97[1] = 0;
                  v97[2] = 0;
                  *v97 = &off_24C9ABBD0;
                  v97[3] = off_24C9ABC20;
                  *((_OWORD *)v97 + 2) = *(_OWORD *)v208;
                  v97[6] = v208[2];
                  memset(v208, 0, sizeof(v208));
                  v98 = v212;
                  v211 = (char *)(v97 + 3);
                  v212 = (std::__shared_weak_count *)v97;
                  if (v98)
                  {
                    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(p_shared_owners);
                    while (__stlxr(v100 - 1, p_shared_owners));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  if (SHIBYTE(v208[2]) < 0)
                    operator delete(v208[0]);
                  nullsub_1(&v207);
                  *(_OWORD *)v215 = v209;
                  v101 = (uint64_t)v211;
                  *(_QWORD *)&v215[16] = v210;
                  if (v210)
                  {
                    v102 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                  }
                  v104 = v212;
                  *(_QWORD *)&v216 = v101;
                  *((_QWORD *)&v216 + 1) = v212;
                  if (v212)
                  {
                    v105 = (unint64_t *)&v212->__shared_owners_;
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                    v217 = v101;
                    do
                      v107 = __ldaxr(v105);
                    while (__stlxr(v107 - 1, v105));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  else
                  {
                    v217 = v101;
                  }
                  v143 = v210;
                  if (v210)
                  {
                    v144 = (unint64_t *)&v210->__shared_owners_;
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 - 1, v144));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                  }
                  v146 = *(_QWORD *)v215;
                  if (*(char *)(v217 + 31) >= 0)
                    v147 = (char *)(v217 + 8);
                  else
                    v147 = *(char **)(v217 + 8);
                  v148 = _os_log_pack_fill();
                  *(_DWORD *)v148 = 136315138;
                  *(_QWORD *)(v148 + 4) = v147;
                  v149 = operator new();
                  v150 = *(unsigned __int8 *)(v58 + 39);
                  v151 = v179;
                  if ((v150 & 0x80u) != 0)
                  {
                    v151 = *(const char **)(v58 + 16);
                    v150 = *(_QWORD *)(v58 + 24);
                  }
                  *(_QWORD *)v149 = v146;
                  *(_OWORD *)(v149 + 8) = *(_OWORD *)&v215[8];
                  *(_QWORD *)&v215[8] = 0;
                  *(_QWORD *)&v215[16] = 0;
                  *(_OWORD *)(v149 + 24) = v216;
                  v216 = 0uLL;
                  *(_QWORD *)(v149 + 40) = v151;
                  *(_QWORD *)(v149 + 48) = v150;
                  *(_BYTE *)(v149 + 56) = v72;
                  v207 = 0;
                  *(_QWORD *)&v209 = v149;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v10 + 8) + 40))(*(_QWORD *)(v10 + 8), &v209);
                  v152 = v209;
                  *(_QWORD *)&v209 = 0;
                  if (v152)
                  {
                    v153 = *(std::__shared_weak_count **)(v152 + 32);
                    if (v153)
                    {
                      v154 = (unint64_t *)&v153->__shared_owners_;
                      do
                        v155 = __ldaxr(v154);
                      while (__stlxr(v155 - 1, v154));
                      if (!v155)
                      {
                        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                        std::__shared_weak_count::__release_weak(v153);
                      }
                    }
                    v156 = *(std::__shared_weak_count **)(v152 + 16);
                    if (v156)
                    {
                      v157 = (unint64_t *)&v156->__shared_owners_;
                      do
                        v158 = __ldaxr(v157);
                      while (__stlxr(v158 - 1, v157));
                      if (!v158)
                      {
                        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                        std::__shared_weak_count::__release_weak(v156);
                      }
                    }
                    MEMORY[0x212BC6398](v152, 0x10F0C40B62ED6C6);
                    v159 = v207;
                    v207 = 0;
                    if (v159)
                    {
                      v160 = (std::__shared_weak_count *)v159[4];
                      if (v160)
                      {
                        v161 = (unint64_t *)&v160->__shared_owners_;
                        do
                          v162 = __ldaxr(v161);
                        while (__stlxr(v162 - 1, v161));
                        if (!v162)
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                      }
                      v163 = (std::__shared_weak_count *)v159[2];
                      if (v163)
                      {
                        v164 = (unint64_t *)&v163->__shared_owners_;
                        do
                          v165 = __ldaxr(v164);
                        while (__stlxr(v165 - 1, v164));
                        if (!v165)
                        {
                          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                          std::__shared_weak_count::__release_weak(v163);
                        }
                      }
                      MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                    }
                  }
                  v166 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
                  if (*((_QWORD *)&v216 + 1))
                  {
                    v167 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
                    do
                      v168 = __ldaxr(v167);
                    while (__stlxr(v168 - 1, v167));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                      std::__shared_weak_count::__release_weak(v166);
                    }
                  }
                  v169 = *(std::__shared_weak_count **)&v215[16];
                  if (*(_QWORD *)&v215[16])
                  {
                    v170 = (unint64_t *)(*(_QWORD *)&v215[16] + 8);
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (!v171)
                    {
                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                      std::__shared_weak_count::__release_weak(v169);
                    }
                  }
LABEL_286:

                  if (v8)
                  {
                    v172 = (const char *)&__dst;
                    if (v191 < 0)
                      v172 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&__p, "%s", v172);
                    sub_20E863570((uint64_t)&__p);
                  }
                  sub_20E863570((uint64_t)&__p);
                  v173 = v188;
                  if (v188)
                  {
                    v174 = (unint64_t *)&v188->__shared_owners_;
                    do
                      v175 = __ldaxr(v174);
                    while (__stlxr(v175 - 1, v174));
                    if (!v175)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                  if (SHIBYTE(v191) < 0)
                    operator delete(__dst);
                  v192[0] = *MEMORY[0x24BEDB7F0];
                  v176 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v192 + *(_QWORD *)(v192[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v193 = v176;
                  v194 = MEMORY[0x24BEDB848] + 16;
                  if (v200 < 0)
                    operator delete(v199);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v203);
                  goto LABEL_300;
                }
              }
              memcpy(v80, v57, v79);
              goto LABEL_166;
            }
          }
          memmove(v65, v62, v63);
          goto LABEL_119;
        }
      }
      memmove(p_dst, v54, v13);
      goto LABEL_98;
    }
    sub_20E872DD8(v206);
    if (**(int **)(v206[0] + 56) <= 3)
    {
      v15 = *(unsigned __int8 *)(v206[0] + 72);
      v16 = sub_21021D818(v206);
      v17 = v16;
      if (v15 || v16)
      {
        sub_20E863438((uint64_t)v192);
        *(_QWORD *)v215 = "Try to read ";
        *(_QWORD *)&v215[8] = 12;
        *(_QWORD *)&v215[16] = a1;
        *(_QWORD *)&v216 = a2;
        *((_QWORD *)&v216 + 1) = " from the user defaults but it is not convertable to a double";
        v217 = 61;
        sub_20E8778D4((uint64_t)v215, (uint64_t)&v218, 0, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_20E86A980(&v193, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v202 & 0x10) != 0)
        {
          v22 = v201;
          if (v201 < v198)
          {
            v201 = v198;
            v22 = v198;
          }
          v23 = (const void **)&v197;
        }
        else
        {
          if ((v202 & 8) == 0)
          {
            v20 = 0;
            HIBYTE(v191) = 0;
            v21 = (void **)&__dst;
            goto LABEL_46;
          }
          v23 = (const void **)v195;
          v22 = v196;
        }
        v26 = *v23;
        v20 = v22 - (_QWORD)*v23;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v20 >= 0x17)
        {
          v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v27 = v20 | 7;
          v28 = v27 + 1;
          v21 = (void **)operator new(v27 + 1);
          v190 = v20;
          v191 = v28 | 0x8000000000000000;
          __dst = v21;
        }
        else
        {
          HIBYTE(v191) = v22 - *(_BYTE *)v23;
          v21 = (void **)&__dst;
          if (!v20)
          {
LABEL_46:
            *((_BYTE *)v21 + v20) = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v206;
            __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v183 = 3;
            v184 = "unknown file";
            v185 = 100;
            v187 = 0;
            v188 = 0;
            v186 = "unknown function";
            if (v191 >= 0)
              v29 = (const char *)&__dst;
            else
              v29 = (const char *)__dst;
            v30 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v31 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
            v178 = v31;
            if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v31 = *(const char **)(v30 + 16);
              v32 = *(_QWORD *)(v30 + 24);
            }
            else
            {
              v32 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            }
            v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v215);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v215);
              if ((_BYTE)v216 && (v215[23] & 0x80000000) != 0)
                operator delete(*(void **)v215);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v34 = byte_254A4A4F8;
            else
              v34 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v35 = byte_254A4A4F8[23];
            else
              v35 = *(_QWORD *)&byte_254A4A4F8[8];
            v36 = os_log_create(v34, v31);
            *(_QWORD *)v215 = v36;

            v37 = &v215[8];
            if (v35 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v35 >= 0x17)
            {
              v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v35 | 7) != 0x17)
                v38 = v35 | 7;
              v39 = v38 + 1;
              v37 = operator new(v38 + 1);
              *(_QWORD *)&v215[16] = v35;
              *(_QWORD *)&v216 = v39 | 0x8000000000000000;
              *(_QWORD *)&v215[8] = v37;
            }
            else
            {
              BYTE7(v216) = v35;
              if (!v35)
              {
LABEL_67:
                v37[v35] = 0;
                BYTE8(v216) = 1;
                v40 = &v217;
                if (v32 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v32 >= 0x17)
                {
                  v41 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v32 | 7) != 0x17)
                    v41 = v32 | 7;
                  v42 = v41 + 1;
                  v40 = (uint64_t *)operator new(v41 + 1);
                  v218 = v32;
                  v219 = v42 | 0x8000000000000000;
                  v217 = (uint64_t)v40;
                }
                else
                {
                  HIBYTE(v219) = v32;
                  if (!v32)
                    goto LABEL_75;
                }
                memmove(v40, v31, v32);
LABEL_75:
                *((_BYTE *)v40 + v32) = 0;
                v220 = 1;
                v43 = objc_retainAutorelease(*(id *)v215);
                if (v220 && SHIBYTE(v219) < 0)
                  operator delete((void *)v217);
                if (BYTE8(v216) && SBYTE7(v216) < 0)
                  operator delete(*(void **)&v215[8]);

                v44 = sub_21021D650(3u);
                v45 = v43;
                v46 = v45;
                if (!v17 || !*(_QWORD *)(v17 + 8))
                {
                  os_log_type_enabled(v45, v44);
                  *(_DWORD *)v215 = 136315138;
                  *(_QWORD *)&v215[4] = v29;
                  v53 = (void *)_os_log_send_and_compose_impl();
                  if (v53)
                    free(v53);
                  goto LABEL_227;
                }
                v47 = _os_log_pack_size();
                v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
                v49 = (std::__shared_weak_count *)operator new();
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v49->__shared_owners_ = 0;
                v49->__shared_weak_owners_ = 0;
                v49[1].__vftable = v48;
                *(_QWORD *)&v209 = v48;
                *((_QWORD *)&v209 + 1) = v48;
                v211 = 0;
                v212 = 0;
                v210 = v49;
                v50 = strlen(v29);
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v51 = v50;
                if (v50 >= 0x17)
                {
                  v82 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v82 = v50 | 7;
                  v83 = v82 + 1;
                  v52 = (void **)operator new(v82 + 1);
                  *(_QWORD *)&v214 = v51;
                  *((_QWORD *)&v214 + 1) = v83 | 0x8000000000000000;
                  v213 = v52;
                }
                else
                {
                  HIBYTE(v214) = v50;
                  v52 = (void **)&v213;
                  if (!v50)
                  {
LABEL_145:
                    *((_BYTE *)v52 + v51) = 0;
                    v208[0] = v213;
                    v208[1] = (void *)v214;
                    *(void **)((char *)&v208[1] + 7) = *(void **)((char *)&v214 + 7);
                    v207 = off_24C9ABC20;
                    HIBYTE(v208[2]) = HIBYTE(v214);
                    v84 = operator new(0x38uLL);
                    v84[1] = 0;
                    v84[2] = 0;
                    *v84 = &off_24C9ABBD0;
                    v84[3] = off_24C9ABC20;
                    *((_OWORD *)v84 + 2) = *(_OWORD *)v208;
                    v84[6] = v208[2];
                    memset(v208, 0, sizeof(v208));
                    v85 = v212;
                    v211 = (char *)(v84 + 3);
                    v212 = (std::__shared_weak_count *)v84;
                    if (v85)
                    {
                      v86 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    if (SHIBYTE(v208[2]) < 0)
                      operator delete(v208[0]);
                    nullsub_1(&v207);
                    *(_OWORD *)v215 = v209;
                    v88 = (uint64_t)v211;
                    *(_QWORD *)&v215[16] = v210;
                    if (v210)
                    {
                      v89 = (unint64_t *)&v210->__shared_owners_;
                      do
                        v90 = __ldxr(v89);
                      while (__stxr(v90 + 1, v89));
                    }
                    v91 = v212;
                    *(_QWORD *)&v216 = v88;
                    *((_QWORD *)&v216 + 1) = v212;
                    if (v212)
                    {
                      v92 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v93 = __ldxr(v92);
                      while (__stxr(v93 + 1, v92));
                      v217 = v88;
                      do
                        v94 = __ldaxr(v92);
                      while (__stlxr(v94 - 1, v92));
                      if (!v94)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    else
                    {
                      v217 = v88;
                    }
                    v108 = v210;
                    if (v210)
                    {
                      v109 = (unint64_t *)&v210->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = *(_QWORD *)v215;
                    if (*(char *)(v217 + 31) >= 0)
                      v112 = (char *)(v217 + 8);
                    else
                      v112 = *(char **)(v217 + 8);
                    v113 = _os_log_pack_fill();
                    *(_DWORD *)v113 = 136315138;
                    *(_QWORD *)(v113 + 4) = v112;
                    v114 = operator new();
                    v115 = *(unsigned __int8 *)(v30 + 39);
                    v116 = v178;
                    if ((v115 & 0x80u) != 0)
                    {
                      v116 = *(const char **)(v30 + 16);
                      v115 = *(_QWORD *)(v30 + 24);
                    }
                    *(_QWORD *)v114 = v111;
                    *(_OWORD *)(v114 + 8) = *(_OWORD *)&v215[8];
                    *(_QWORD *)&v215[8] = 0;
                    *(_QWORD *)&v215[16] = 0;
                    *(_OWORD *)(v114 + 24) = v216;
                    v216 = 0uLL;
                    *(_QWORD *)(v114 + 40) = v116;
                    *(_QWORD *)(v114 + 48) = v115;
                    *(_BYTE *)(v114 + 56) = v44;
                    v207 = 0;
                    *(_QWORD *)&v209 = v114;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 8) + 40))(*(_QWORD *)(v17 + 8), &v209);
                    v117 = v209;
                    *(_QWORD *)&v209 = 0;
                    if (v117)
                    {
                      v118 = *(std::__shared_weak_count **)(v117 + 32);
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v121 = *(std::__shared_weak_count **)(v117 + 16);
                      if (v121)
                      {
                        v122 = (unint64_t *)&v121->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      MEMORY[0x212BC6398](v117, 0x10F0C40B62ED6C6);
                      v124 = v207;
                      v207 = 0;
                      if (v124)
                      {
                        v125 = (std::__shared_weak_count *)v124[4];
                        if (v125)
                        {
                          v126 = (unint64_t *)&v125->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        v128 = (std::__shared_weak_count *)v124[2];
                        if (v128)
                        {
                          v129 = (unint64_t *)&v128->__shared_owners_;
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        MEMORY[0x212BC6398](v124, 0x10F0C40B62ED6C6);
                      }
                    }
                    v131 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
                    if (*((_QWORD *)&v216 + 1))
                    {
                      v132 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
                      do
                        v133 = __ldaxr(v132);
                      while (__stlxr(v133 - 1, v132));
                      if (!v133)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    v134 = *(std::__shared_weak_count **)&v215[16];
                    if (*(_QWORD *)&v215[16])
                    {
                      v135 = (unint64_t *)(*(_QWORD *)&v215[16] + 8);
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
LABEL_227:

                    if (v15)
                    {
                      v137 = (const char *)&__dst;
                      if (v191 < 0)
                        v137 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&__p, "%s", v137);
                      sub_20E863570((uint64_t)&__p);
                    }
                    sub_20E863570((uint64_t)&__p);
                    v138 = v188;
                    if (v188)
                    {
                      v139 = (unint64_t *)&v188->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    if (SHIBYTE(v191) < 0)
                      operator delete(__dst);
                    v192[0] = *MEMORY[0x24BEDB7F0];
                    v141 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v192 + *(_QWORD *)(v192[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v193 = v141;
                    v194 = MEMORY[0x24BEDB848] + 16;
                    if (v200 < 0)
                      operator delete(v199);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v203);
                    goto LABEL_241;
                  }
                }
                memcpy(v52, v29, v51);
                goto LABEL_145;
              }
            }
            memmove(v37, v34, v35);
            goto LABEL_67;
          }
        }
        memmove(v21, v26, v20);
        goto LABEL_46;
      }
    }
  }
LABEL_241:
  v142 = 0;
LABEL_301:

  return v142;
}

void sub_20E872A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152) && *(char *)(v29 - 153) < 0)
    operator delete(*(void **)(v29 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);

  _Unwind_Resume(a1);
}

id sub_20E872CD4(void *__src, size_t __len)
{
  void *v4;
  void **v5;
  size_t v6;
  size_t v7;
  void **v8;
  void *v9;
  void *__dst[2];
  int64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v4 = (void *)MEMORY[0x24BDD17C8];
  if (__len >= 0x17)
  {
    v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v6 = __len | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v5 = __dst;
  if (__len)
LABEL_8:
    memmove(v5, __src, __len);
  *((_BYTE *)v5 + __len) = 0;
  if (v12 >= 0)
    v8 = __dst;
  else
    v8 = (void **)__dst[0];
  objc_msgSend(v4, "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

void sub_20E872DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E872DD8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5A670);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5A670))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d.slam");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5A668);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5A670);
  }
  *a1 = qword_254A5A668;
}

void sub_20E872E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5A670);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5A670);
  _Unwind_Resume(a1);
}

uint64_t sub_20E872ECC(void *a1, size_t a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  size_t v13;
  void **p_dst;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *p_p;
  std::string::size_type size;
  size_t v20;
  void **v21;
  unint64_t v22;
  const void **v23;
  unint64_t v24;
  const void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  os_log_type_t v44;
  NSObject *v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  void **v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  unsigned __int8 v61;
  const char *v62;
  size_t v63;
  NSObject *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  os_log_type_t v72;
  NSObject *v73;
  NSObject *v74;
  size_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  size_t v78;
  size_t v79;
  void **v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t (**v124)();
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t (**v161)();
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  const char *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  const char *v180;
  const char *v181;
  id v182;
  char v183;
  std::string __p;
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void **__dst;
  size_t v192;
  int64_t v193;
  _QWORD v194[2];
  uint64_t v195;
  uint64_t v196;
  _BYTE v197[16];
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  char v202;
  unint64_t v203;
  int v204;
  _BYTE v205[152];
  uint64_t v206;
  int v207;
  uint64_t v208[2];
  uint64_t (**v209)();
  void *v210[3];
  __int128 v211;
  std::__shared_weak_count *v212;
  char *v213;
  std::__shared_weak_count *v214;
  void **v215;
  __int128 v216;
  _BYTE v217[24];
  __int128 v218;
  uint64_t v219;
  size_t v220;
  unint64_t v221;
  char v222;
  uint64_t v223;

  v223 = *MEMORY[0x24BDAC8D0];
  sub_20E8713F4();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E872CD4(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E870624((uint64_t)&v182, v4, v5);

  if (v183)
  {
    v6 = v182;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v7 = objc_msgSend(v6, "intValue");
      v208[0] = (uint64_t)a1;
      v208[1] = a2;
      v207 = v7;
      sub_20E872DD8(&v206);
      if (**(int **)(v206 + 56) > 3
        || (v8 = *(unsigned __int8 *)(v206 + 72), v9 = sub_21021D818(&v206), v10 = v9, !v8) && !v9)
      {
LABEL_300:
        v144 = v207 & 0xFFFFFF00;
        v143 = v207;
        v142 = 0x100000000;
        goto LABEL_301;
      }
      sub_20E863438((uint64_t)v194);
      sub_20E879604("Reading ", (uint64_t)v208, (std::string *)" from the user defaults with value ", &v207);
      if (v217[23] >= 0)
        v11 = v217;
      else
        v11 = *(_BYTE **)v217;
      if (v217[23] >= 0)
        v12 = v217[23];
      else
        v12 = *(_QWORD *)&v217[8];
      sub_20E86A980(&v195, (uint64_t)v11, v12);
      if ((v217[23] & 0x80000000) != 0)
        operator delete(*(void **)v217);
      if ((v204 & 0x10) != 0)
      {
        v24 = v203;
        if (v203 < v200)
        {
          v203 = v200;
          v24 = v200;
        }
        v25 = (const void **)&v199;
      }
      else
      {
        if ((v204 & 8) == 0)
        {
          v13 = 0;
          HIBYTE(v193) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_98;
        }
        v25 = (const void **)v197;
        v24 = v198;
      }
      v54 = *v25;
      v13 = v24 - (_QWORD)*v25;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13 >= 0x17)
      {
        v55 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v55 = v13 | 7;
        v56 = v55 + 1;
        p_dst = (void **)operator new(v55 + 1);
        v192 = v13;
        v193 = v56 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v193) = v24 - *(_BYTE *)v25;
        p_dst = (void **)&__dst;
        if (!v13)
        {
LABEL_98:
          *((_BYTE *)p_dst + v13) = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v185 = 3;
          v186 = "unknown file";
          v187 = 60;
          v189 = 0;
          v190 = 0;
          v188 = "unknown function";
          if (v193 >= 0)
            v57 = (const char *)&__dst;
          else
            v57 = (const char *)__dst;
          v58 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v59 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v181 = v59;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v59 = *(const char **)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 24);
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          }
          v61 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v217);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v217);
            if ((_BYTE)v218 && (v217[23] & 0x80000000) != 0)
              operator delete(*(void **)v217);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v62 = byte_254A4A4F8;
          else
            v62 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v63 = byte_254A4A4F8[23];
          else
            v63 = *(_QWORD *)&byte_254A4A4F8[8];
          v64 = os_log_create(v62, v59);
          *(_QWORD *)v217 = v64;

          v65 = &v217[8];
          if (v63 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v63 >= 0x17)
          {
            v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v63 | 7) != 0x17)
              v66 = v63 | 7;
            v67 = v66 + 1;
            v65 = operator new(v66 + 1);
            *(_QWORD *)&v217[16] = v63;
            *(_QWORD *)&v218 = v67 | 0x8000000000000000;
            *(_QWORD *)&v217[8] = v65;
          }
          else
          {
            BYTE7(v218) = v63;
            if (!v63)
            {
LABEL_119:
              v65[v63] = 0;
              BYTE8(v218) = 1;
              v68 = &v219;
              if (v60 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v60 >= 0x17)
              {
                v69 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v69 = v60 | 7;
                v70 = v69 + 1;
                v68 = (uint64_t *)operator new(v69 + 1);
                v220 = v60;
                v221 = v70 | 0x8000000000000000;
                v219 = (uint64_t)v68;
              }
              else
              {
                HIBYTE(v221) = v60;
                if (!v60)
                  goto LABEL_127;
              }
              memmove(v68, v59, v60);
LABEL_127:
              *((_BYTE *)v68 + v60) = 0;
              v222 = 1;
              v71 = objc_retainAutorelease(*(id *)v217);
              if (v222 && SHIBYTE(v221) < 0)
                operator delete((void *)v219);
              if (BYTE8(v218) && SBYTE7(v218) < 0)
                operator delete(*(void **)&v217[8]);

              v72 = sub_21021D650(3u);
              v73 = v71;
              v74 = v73;
              if (!v10 || !*(_QWORD *)(v10 + 8))
              {
                os_log_type_enabled(v73, v72);
                *(_DWORD *)v217 = 136315138;
                *(_QWORD *)&v217[4] = v57;
                v81 = (void *)_os_log_send_and_compose_impl();
                if (v81)
                  free(v81);
                goto LABEL_286;
              }
              v75 = _os_log_pack_size();
              v76 = (std::__shared_weak_count_vtbl *)operator new(v75, (std::align_val_t)8uLL);
              v77 = (std::__shared_weak_count *)operator new();
              v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v77->__shared_owners_ = 0;
              v77->__shared_weak_owners_ = 0;
              v77[1].__vftable = v76;
              *(_QWORD *)&v211 = v76;
              *((_QWORD *)&v211 + 1) = v76;
              v213 = 0;
              v214 = 0;
              v212 = v77;
              v78 = strlen(v57);
              if (v78 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v79 = v78;
              if (v78 >= 0x17)
              {
                v95 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v78 | 7) != 0x17)
                  v95 = v78 | 7;
                v96 = v95 + 1;
                v80 = (void **)operator new(v95 + 1);
                *(_QWORD *)&v216 = v79;
                *((_QWORD *)&v216 + 1) = v96 | 0x8000000000000000;
                v215 = v80;
              }
              else
              {
                HIBYTE(v216) = v78;
                v80 = (void **)&v215;
                if (!v78)
                {
LABEL_166:
                  *((_BYTE *)v80 + v79) = 0;
                  v210[0] = v215;
                  v210[1] = (void *)v216;
                  *(void **)((char *)&v210[1] + 7) = *(void **)((char *)&v216 + 7);
                  v209 = off_24C9ABC20;
                  HIBYTE(v210[2]) = HIBYTE(v216);
                  v97 = operator new(0x38uLL);
                  v97[1] = 0;
                  v97[2] = 0;
                  *v97 = &off_24C9ABBD0;
                  v97[3] = off_24C9ABC20;
                  *((_OWORD *)v97 + 2) = *(_OWORD *)v210;
                  v97[6] = v210[2];
                  memset(v210, 0, sizeof(v210));
                  v98 = v214;
                  v213 = (char *)(v97 + 3);
                  v214 = (std::__shared_weak_count *)v97;
                  if (v98)
                  {
                    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(p_shared_owners);
                    while (__stlxr(v100 - 1, p_shared_owners));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  if (SHIBYTE(v210[2]) < 0)
                    operator delete(v210[0]);
                  nullsub_1(&v209);
                  *(_OWORD *)v217 = v211;
                  v101 = (uint64_t)v213;
                  *(_QWORD *)&v217[16] = v212;
                  if (v212)
                  {
                    v102 = (unint64_t *)&v212->__shared_owners_;
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                  }
                  v104 = v214;
                  *(_QWORD *)&v218 = v101;
                  *((_QWORD *)&v218 + 1) = v214;
                  if (v214)
                  {
                    v105 = (unint64_t *)&v214->__shared_owners_;
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                    v219 = v101;
                    do
                      v107 = __ldaxr(v105);
                    while (__stlxr(v107 - 1, v105));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  else
                  {
                    v219 = v101;
                  }
                  v145 = v212;
                  if (v212)
                  {
                    v146 = (unint64_t *)&v212->__shared_owners_;
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  v148 = *(_QWORD *)v217;
                  if (*(char *)(v219 + 31) >= 0)
                    v149 = (char *)(v219 + 8);
                  else
                    v149 = *(char **)(v219 + 8);
                  v150 = _os_log_pack_fill();
                  *(_DWORD *)v150 = 136315138;
                  *(_QWORD *)(v150 + 4) = v149;
                  v151 = operator new();
                  v152 = *(unsigned __int8 *)(v58 + 39);
                  v153 = v181;
                  if ((v152 & 0x80u) != 0)
                  {
                    v153 = *(const char **)(v58 + 16);
                    v152 = *(_QWORD *)(v58 + 24);
                  }
                  *(_QWORD *)v151 = v148;
                  *(_OWORD *)(v151 + 8) = *(_OWORD *)&v217[8];
                  *(_QWORD *)&v217[8] = 0;
                  *(_QWORD *)&v217[16] = 0;
                  *(_OWORD *)(v151 + 24) = v218;
                  v218 = 0uLL;
                  *(_QWORD *)(v151 + 40) = v153;
                  *(_QWORD *)(v151 + 48) = v152;
                  *(_BYTE *)(v151 + 56) = v72;
                  v209 = 0;
                  *(_QWORD *)&v211 = v151;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v10 + 8) + 40))(*(_QWORD *)(v10 + 8), &v211);
                  v154 = v211;
                  *(_QWORD *)&v211 = 0;
                  if (v154)
                  {
                    v155 = *(std::__shared_weak_count **)(v154 + 32);
                    if (v155)
                    {
                      v156 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v157 = __ldaxr(v156);
                      while (__stlxr(v157 - 1, v156));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
                    }
                    v158 = *(std::__shared_weak_count **)(v154 + 16);
                    if (v158)
                    {
                      v159 = (unint64_t *)&v158->__shared_owners_;
                      do
                        v160 = __ldaxr(v159);
                      while (__stlxr(v160 - 1, v159));
                      if (!v160)
                      {
                        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                        std::__shared_weak_count::__release_weak(v158);
                      }
                    }
                    MEMORY[0x212BC6398](v154, 0x10F0C40B62ED6C6);
                    v161 = v209;
                    v209 = 0;
                    if (v161)
                    {
                      v162 = (std::__shared_weak_count *)v161[4];
                      if (v162)
                      {
                        v163 = (unint64_t *)&v162->__shared_owners_;
                        do
                          v164 = __ldaxr(v163);
                        while (__stlxr(v164 - 1, v163));
                        if (!v164)
                        {
                          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                          std::__shared_weak_count::__release_weak(v162);
                        }
                      }
                      v165 = (std::__shared_weak_count *)v161[2];
                      if (v165)
                      {
                        v166 = (unint64_t *)&v165->__shared_owners_;
                        do
                          v167 = __ldaxr(v166);
                        while (__stlxr(v167 - 1, v166));
                        if (!v167)
                        {
                          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                          std::__shared_weak_count::__release_weak(v165);
                        }
                      }
                      MEMORY[0x212BC6398](v161, 0x10F0C40B62ED6C6);
                    }
                  }
                  v168 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
                  if (*((_QWORD *)&v218 + 1))
                  {
                    v169 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                    do
                      v170 = __ldaxr(v169);
                    while (__stlxr(v170 - 1, v169));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                      std::__shared_weak_count::__release_weak(v168);
                    }
                  }
                  v171 = *(std::__shared_weak_count **)&v217[16];
                  if (*(_QWORD *)&v217[16])
                  {
                    v172 = (unint64_t *)(*(_QWORD *)&v217[16] + 8);
                    do
                      v173 = __ldaxr(v172);
                    while (__stlxr(v173 - 1, v172));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
LABEL_286:

                  if (v8)
                  {
                    v174 = (const char *)&__dst;
                    if (v193 < 0)
                      v174 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&__p, "%s", v174);
                    sub_20E863570((uint64_t)&__p);
                  }
                  sub_20E863570((uint64_t)&__p);
                  v175 = v190;
                  if (v190)
                  {
                    v176 = (unint64_t *)&v190->__shared_owners_;
                    do
                      v177 = __ldaxr(v176);
                    while (__stlxr(v177 - 1, v176));
                    if (!v177)
                    {
                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                      std::__shared_weak_count::__release_weak(v175);
                    }
                  }
                  if (SHIBYTE(v193) < 0)
                    operator delete(__dst);
                  v194[0] = *MEMORY[0x24BEDB7F0];
                  v178 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v194 + *(_QWORD *)(v194[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v195 = v178;
                  v196 = MEMORY[0x24BEDB848] + 16;
                  if (v202 < 0)
                    operator delete(v201);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v205);
                  goto LABEL_300;
                }
              }
              memcpy(v80, v57, v79);
              goto LABEL_166;
            }
          }
          memmove(v65, v62, v63);
          goto LABEL_119;
        }
      }
      memmove(p_dst, v54, v13);
      goto LABEL_98;
    }
    sub_20E872DD8(v208);
    if (**(int **)(v208[0] + 56) <= 3)
    {
      v15 = *(unsigned __int8 *)(v208[0] + 72);
      v16 = sub_21021D818(v208);
      v17 = v16;
      if (v15 || v16)
      {
        sub_20E863438((uint64_t)v194);
        *(_QWORD *)v217 = "Try to read ";
        *(_QWORD *)&v217[8] = 12;
        *(_QWORD *)&v217[16] = a1;
        *(_QWORD *)&v218 = a2;
        *((_QWORD *)&v218 + 1) = " from the user defaults but it is not convertable to an integer";
        v219 = 63;
        sub_20E8778D4((uint64_t)v217, (uint64_t)&v220, 0, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_20E86A980(&v195, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v204 & 0x10) != 0)
        {
          v22 = v203;
          if (v203 < v200)
          {
            v203 = v200;
            v22 = v200;
          }
          v23 = (const void **)&v199;
        }
        else
        {
          if ((v204 & 8) == 0)
          {
            v20 = 0;
            HIBYTE(v193) = 0;
            v21 = (void **)&__dst;
            goto LABEL_46;
          }
          v23 = (const void **)v197;
          v22 = v198;
        }
        v26 = *v23;
        v20 = v22 - (_QWORD)*v23;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v20 >= 0x17)
        {
          v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v27 = v20 | 7;
          v28 = v27 + 1;
          v21 = (void **)operator new(v27 + 1);
          v192 = v20;
          v193 = v28 | 0x8000000000000000;
          __dst = v21;
        }
        else
        {
          HIBYTE(v193) = v22 - *(_BYTE *)v23;
          v21 = (void **)&__dst;
          if (!v20)
          {
LABEL_46:
            *((_BYTE *)v21 + v20) = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
            __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v185 = 3;
            v186 = "unknown file";
            v187 = 116;
            v189 = 0;
            v190 = 0;
            v188 = "unknown function";
            if (v193 >= 0)
              v29 = (const char *)&__dst;
            else
              v29 = (const char *)__dst;
            v30 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v31 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
            v180 = v31;
            if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v31 = *(const char **)(v30 + 16);
              v32 = *(_QWORD *)(v30 + 24);
            }
            else
            {
              v32 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            }
            v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v217);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v217);
              if ((_BYTE)v218 && (v217[23] & 0x80000000) != 0)
                operator delete(*(void **)v217);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v34 = byte_254A4A4F8;
            else
              v34 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v35 = byte_254A4A4F8[23];
            else
              v35 = *(_QWORD *)&byte_254A4A4F8[8];
            v36 = os_log_create(v34, v31);
            *(_QWORD *)v217 = v36;

            v37 = &v217[8];
            if (v35 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v35 >= 0x17)
            {
              v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v35 | 7) != 0x17)
                v38 = v35 | 7;
              v39 = v38 + 1;
              v37 = operator new(v38 + 1);
              *(_QWORD *)&v217[16] = v35;
              *(_QWORD *)&v218 = v39 | 0x8000000000000000;
              *(_QWORD *)&v217[8] = v37;
            }
            else
            {
              BYTE7(v218) = v35;
              if (!v35)
              {
LABEL_67:
                v37[v35] = 0;
                BYTE8(v218) = 1;
                v40 = &v219;
                if (v32 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v32 >= 0x17)
                {
                  v41 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v32 | 7) != 0x17)
                    v41 = v32 | 7;
                  v42 = v41 + 1;
                  v40 = (uint64_t *)operator new(v41 + 1);
                  v220 = v32;
                  v221 = v42 | 0x8000000000000000;
                  v219 = (uint64_t)v40;
                }
                else
                {
                  HIBYTE(v221) = v32;
                  if (!v32)
                    goto LABEL_75;
                }
                memmove(v40, v31, v32);
LABEL_75:
                *((_BYTE *)v40 + v32) = 0;
                v222 = 1;
                v43 = objc_retainAutorelease(*(id *)v217);
                if (v222 && SHIBYTE(v221) < 0)
                  operator delete((void *)v219);
                if (BYTE8(v218) && SBYTE7(v218) < 0)
                  operator delete(*(void **)&v217[8]);

                v44 = sub_21021D650(3u);
                v45 = v43;
                v46 = v45;
                if (!v17 || !*(_QWORD *)(v17 + 8))
                {
                  os_log_type_enabled(v45, v44);
                  *(_DWORD *)v217 = 136315138;
                  *(_QWORD *)&v217[4] = v29;
                  v53 = (void *)_os_log_send_and_compose_impl();
                  if (v53)
                    free(v53);
                  goto LABEL_227;
                }
                v47 = _os_log_pack_size();
                v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
                v49 = (std::__shared_weak_count *)operator new();
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v49->__shared_owners_ = 0;
                v49->__shared_weak_owners_ = 0;
                v49[1].__vftable = v48;
                *(_QWORD *)&v211 = v48;
                *((_QWORD *)&v211 + 1) = v48;
                v213 = 0;
                v214 = 0;
                v212 = v49;
                v50 = strlen(v29);
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v51 = v50;
                if (v50 >= 0x17)
                {
                  v82 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v82 = v50 | 7;
                  v83 = v82 + 1;
                  v52 = (void **)operator new(v82 + 1);
                  *(_QWORD *)&v216 = v51;
                  *((_QWORD *)&v216 + 1) = v83 | 0x8000000000000000;
                  v215 = v52;
                }
                else
                {
                  HIBYTE(v216) = v50;
                  v52 = (void **)&v215;
                  if (!v50)
                  {
LABEL_145:
                    *((_BYTE *)v52 + v51) = 0;
                    v210[0] = v215;
                    v210[1] = (void *)v216;
                    *(void **)((char *)&v210[1] + 7) = *(void **)((char *)&v216 + 7);
                    v209 = off_24C9ABC20;
                    HIBYTE(v210[2]) = HIBYTE(v216);
                    v84 = operator new(0x38uLL);
                    v84[1] = 0;
                    v84[2] = 0;
                    *v84 = &off_24C9ABBD0;
                    v84[3] = off_24C9ABC20;
                    *((_OWORD *)v84 + 2) = *(_OWORD *)v210;
                    v84[6] = v210[2];
                    memset(v210, 0, sizeof(v210));
                    v85 = v214;
                    v213 = (char *)(v84 + 3);
                    v214 = (std::__shared_weak_count *)v84;
                    if (v85)
                    {
                      v86 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    if (SHIBYTE(v210[2]) < 0)
                      operator delete(v210[0]);
                    nullsub_1(&v209);
                    *(_OWORD *)v217 = v211;
                    v88 = (uint64_t)v213;
                    *(_QWORD *)&v217[16] = v212;
                    if (v212)
                    {
                      v89 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v90 = __ldxr(v89);
                      while (__stxr(v90 + 1, v89));
                    }
                    v91 = v214;
                    *(_QWORD *)&v218 = v88;
                    *((_QWORD *)&v218 + 1) = v214;
                    if (v214)
                    {
                      v92 = (unint64_t *)&v214->__shared_owners_;
                      do
                        v93 = __ldxr(v92);
                      while (__stxr(v93 + 1, v92));
                      v219 = v88;
                      do
                        v94 = __ldaxr(v92);
                      while (__stlxr(v94 - 1, v92));
                      if (!v94)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    else
                    {
                      v219 = v88;
                    }
                    v108 = v212;
                    if (v212)
                    {
                      v109 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = *(_QWORD *)v217;
                    if (*(char *)(v219 + 31) >= 0)
                      v112 = (char *)(v219 + 8);
                    else
                      v112 = *(char **)(v219 + 8);
                    v113 = _os_log_pack_fill();
                    *(_DWORD *)v113 = 136315138;
                    *(_QWORD *)(v113 + 4) = v112;
                    v114 = operator new();
                    v115 = *(unsigned __int8 *)(v30 + 39);
                    v116 = v180;
                    if ((v115 & 0x80u) != 0)
                    {
                      v116 = *(const char **)(v30 + 16);
                      v115 = *(_QWORD *)(v30 + 24);
                    }
                    *(_QWORD *)v114 = v111;
                    *(_OWORD *)(v114 + 8) = *(_OWORD *)&v217[8];
                    *(_QWORD *)&v217[8] = 0;
                    *(_QWORD *)&v217[16] = 0;
                    *(_OWORD *)(v114 + 24) = v218;
                    v218 = 0uLL;
                    *(_QWORD *)(v114 + 40) = v116;
                    *(_QWORD *)(v114 + 48) = v115;
                    *(_BYTE *)(v114 + 56) = v44;
                    v209 = 0;
                    *(_QWORD *)&v211 = v114;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 8) + 40))(*(_QWORD *)(v17 + 8), &v211);
                    v117 = v211;
                    *(_QWORD *)&v211 = 0;
                    if (v117)
                    {
                      v118 = *(std::__shared_weak_count **)(v117 + 32);
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v121 = *(std::__shared_weak_count **)(v117 + 16);
                      if (v121)
                      {
                        v122 = (unint64_t *)&v121->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      MEMORY[0x212BC6398](v117, 0x10F0C40B62ED6C6);
                      v124 = v209;
                      v209 = 0;
                      if (v124)
                      {
                        v125 = (std::__shared_weak_count *)v124[4];
                        if (v125)
                        {
                          v126 = (unint64_t *)&v125->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        v128 = (std::__shared_weak_count *)v124[2];
                        if (v128)
                        {
                          v129 = (unint64_t *)&v128->__shared_owners_;
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        MEMORY[0x212BC6398](v124, 0x10F0C40B62ED6C6);
                      }
                    }
                    v131 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
                    if (*((_QWORD *)&v218 + 1))
                    {
                      v132 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                      do
                        v133 = __ldaxr(v132);
                      while (__stlxr(v133 - 1, v132));
                      if (!v133)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    v134 = *(std::__shared_weak_count **)&v217[16];
                    if (*(_QWORD *)&v217[16])
                    {
                      v135 = (unint64_t *)(*(_QWORD *)&v217[16] + 8);
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
LABEL_227:

                    if (v15)
                    {
                      v137 = (const char *)&__dst;
                      if (v193 < 0)
                        v137 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&__p, "%s", v137);
                      sub_20E863570((uint64_t)&__p);
                    }
                    sub_20E863570((uint64_t)&__p);
                    v138 = v190;
                    if (v190)
                    {
                      v139 = (unint64_t *)&v190->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    if (SHIBYTE(v193) < 0)
                      operator delete(__dst);
                    v194[0] = *MEMORY[0x24BEDB7F0];
                    v141 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v194 + *(_QWORD *)(v194[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v195 = v141;
                    v196 = MEMORY[0x24BEDB848] + 16;
                    if (v202 < 0)
                      operator delete(v201);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v205);
                    goto LABEL_241;
                  }
                }
                memcpy(v52, v29, v51);
                goto LABEL_145;
              }
            }
            memmove(v37, v34, v35);
            goto LABEL_67;
          }
        }
        memmove(v21, v26, v20);
        goto LABEL_46;
      }
    }
  }
LABEL_241:
  v142 = 0;
  v143 = 0;
  v144 = 0;
LABEL_301:

  return v142 | v144 | v143;
}

void sub_20E87448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152) && *(char *)(v29 - 153) < 0)
    operator delete(*(void **)(v29 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_20E8746F0(void *a1, size_t a2)
{
  void *v4;
  void *v5;
  id v6;
  unsigned __int8 v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  size_t v13;
  void **p_dst;
  int v15;
  unint64_t v16;
  unint64_t v17;
  std::string *p_p;
  std::string::size_type size;
  size_t v20;
  void **v21;
  unint64_t v22;
  const void **v23;
  unint64_t v24;
  const void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  os_log_type_t v44;
  NSObject *v45;
  NSObject *v46;
  size_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count *v49;
  size_t v50;
  size_t v51;
  void **v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  unsigned __int8 v61;
  const char *v62;
  size_t v63;
  NSObject *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  os_log_type_t v72;
  NSObject *v73;
  NSObject *v74;
  size_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  size_t v78;
  size_t v79;
  void **v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t (**v124)();
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  const char *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t (**v160)();
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  const char *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  const char *v179;
  const char *v180;
  id v181;
  char v182;
  std::string __p;
  int v184;
  const char *v185;
  int v186;
  const char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  void **__dst;
  size_t v191;
  int64_t v192;
  _QWORD v193[2];
  uint64_t v194;
  uint64_t v195;
  _BYTE v196[16];
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  char v201;
  unint64_t v202;
  int v203;
  _BYTE v204[152];
  uint64_t v205;
  unsigned __int8 v206;
  uint64_t v207[2];
  uint64_t (**v208)();
  void *v209[3];
  __int128 v210;
  std::__shared_weak_count *v211;
  char *v212;
  std::__shared_weak_count *v213;
  void **v214;
  __int128 v215;
  _BYTE v216[24];
  __int128 v217;
  uint64_t v218;
  size_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;

  v222 = *MEMORY[0x24BDAC8D0];
  sub_20E8713F4();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E872CD4(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E870624((uint64_t)&v181, v4, v5);

  if (v182)
  {
    v6 = v181;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v7 = objc_msgSend(v6, "BOOLValue");
      v207[0] = (uint64_t)a1;
      v207[1] = a2;
      v206 = v7;
      sub_20E872DD8(&v205);
      if (**(int **)(v205 + 56) > 3
        || (v8 = *(unsigned __int8 *)(v205 + 72), v9 = sub_21021D818(&v205), v10 = v9, !v8) && !v9)
      {
LABEL_300:
        v142 = v206;
        v143 = 1;
        goto LABEL_301;
      }
      sub_20E863438((uint64_t)v193);
      sub_20E8797B4("Reading ", (uint64_t)v207, (const char **)" from the user defaults with value ", &v206);
      if (v216[23] >= 0)
        v11 = v216;
      else
        v11 = *(_BYTE **)v216;
      if (v216[23] >= 0)
        v12 = v216[23];
      else
        v12 = *(_QWORD *)&v216[8];
      sub_20E86A980(&v194, (uint64_t)v11, v12);
      if ((v216[23] & 0x80000000) != 0)
        operator delete(*(void **)v216);
      if ((v203 & 0x10) != 0)
      {
        v24 = v202;
        if (v202 < v199)
        {
          v202 = v199;
          v24 = v199;
        }
        v25 = (const void **)&v198;
      }
      else
      {
        if ((v203 & 8) == 0)
        {
          v13 = 0;
          HIBYTE(v192) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_98;
        }
        v25 = (const void **)v196;
        v24 = v197;
      }
      v54 = *v25;
      v13 = v24 - (_QWORD)*v25;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13 >= 0x17)
      {
        v55 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v55 = v13 | 7;
        v56 = v55 + 1;
        p_dst = (void **)operator new(v55 + 1);
        v191 = v13;
        v192 = v56 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v192) = v24 - *(_BYTE *)v25;
        p_dst = (void **)&__dst;
        if (!v13)
        {
LABEL_98:
          *((_BYTE *)p_dst + v13) = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v184 = 3;
          v185 = "unknown file";
          v186 = 60;
          v188 = 0;
          v189 = 0;
          v187 = "unknown function";
          if (v192 >= 0)
            v57 = (const char *)&__dst;
          else
            v57 = (const char *)__dst;
          v58 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v59 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v180 = v59;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v59 = *(const char **)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 24);
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          }
          v61 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v216);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v216);
            if ((_BYTE)v217 && (v216[23] & 0x80000000) != 0)
              operator delete(*(void **)v216);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v62 = byte_254A4A4F8;
          else
            v62 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v63 = byte_254A4A4F8[23];
          else
            v63 = *(_QWORD *)&byte_254A4A4F8[8];
          v64 = os_log_create(v62, v59);
          *(_QWORD *)v216 = v64;

          v65 = &v216[8];
          if (v63 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v63 >= 0x17)
          {
            v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v63 | 7) != 0x17)
              v66 = v63 | 7;
            v67 = v66 + 1;
            v65 = operator new(v66 + 1);
            *(_QWORD *)&v216[16] = v63;
            *(_QWORD *)&v217 = v67 | 0x8000000000000000;
            *(_QWORD *)&v216[8] = v65;
          }
          else
          {
            BYTE7(v217) = v63;
            if (!v63)
            {
LABEL_119:
              v65[v63] = 0;
              BYTE8(v217) = 1;
              v68 = &v218;
              if (v60 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v60 >= 0x17)
              {
                v69 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v69 = v60 | 7;
                v70 = v69 + 1;
                v68 = (uint64_t *)operator new(v69 + 1);
                v219 = v60;
                v220 = v70 | 0x8000000000000000;
                v218 = (uint64_t)v68;
              }
              else
              {
                HIBYTE(v220) = v60;
                if (!v60)
                  goto LABEL_127;
              }
              memmove(v68, v59, v60);
LABEL_127:
              *((_BYTE *)v68 + v60) = 0;
              v221 = 1;
              v71 = objc_retainAutorelease(*(id *)v216);
              if (v221 && SHIBYTE(v220) < 0)
                operator delete((void *)v218);
              if (BYTE8(v217) && SBYTE7(v217) < 0)
                operator delete(*(void **)&v216[8]);

              v72 = sub_21021D650(3u);
              v73 = v71;
              v74 = v73;
              if (!v10 || !*(_QWORD *)(v10 + 8))
              {
                os_log_type_enabled(v73, v72);
                *(_DWORD *)v216 = 136315138;
                *(_QWORD *)&v216[4] = v57;
                v81 = (void *)_os_log_send_and_compose_impl();
                if (v81)
                  free(v81);
                goto LABEL_286;
              }
              v75 = _os_log_pack_size();
              v76 = (std::__shared_weak_count_vtbl *)operator new(v75, (std::align_val_t)8uLL);
              v77 = (std::__shared_weak_count *)operator new();
              v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v77->__shared_owners_ = 0;
              v77->__shared_weak_owners_ = 0;
              v77[1].__vftable = v76;
              *(_QWORD *)&v210 = v76;
              *((_QWORD *)&v210 + 1) = v76;
              v212 = 0;
              v213 = 0;
              v211 = v77;
              v78 = strlen(v57);
              if (v78 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v79 = v78;
              if (v78 >= 0x17)
              {
                v95 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v78 | 7) != 0x17)
                  v95 = v78 | 7;
                v96 = v95 + 1;
                v80 = (void **)operator new(v95 + 1);
                *(_QWORD *)&v215 = v79;
                *((_QWORD *)&v215 + 1) = v96 | 0x8000000000000000;
                v214 = v80;
              }
              else
              {
                HIBYTE(v215) = v78;
                v80 = (void **)&v214;
                if (!v78)
                {
LABEL_166:
                  *((_BYTE *)v80 + v79) = 0;
                  v209[0] = v214;
                  v209[1] = (void *)v215;
                  *(void **)((char *)&v209[1] + 7) = *(void **)((char *)&v215 + 7);
                  v208 = off_24C9ABC20;
                  HIBYTE(v209[2]) = HIBYTE(v215);
                  v97 = operator new(0x38uLL);
                  v97[1] = 0;
                  v97[2] = 0;
                  *v97 = &off_24C9ABBD0;
                  v97[3] = off_24C9ABC20;
                  *((_OWORD *)v97 + 2) = *(_OWORD *)v209;
                  v97[6] = v209[2];
                  memset(v209, 0, sizeof(v209));
                  v98 = v213;
                  v212 = (char *)(v97 + 3);
                  v213 = (std::__shared_weak_count *)v97;
                  if (v98)
                  {
                    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
                    do
                      v100 = __ldaxr(p_shared_owners);
                    while (__stlxr(v100 - 1, p_shared_owners));
                    if (!v100)
                    {
                      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                      std::__shared_weak_count::__release_weak(v98);
                    }
                  }
                  if (SHIBYTE(v209[2]) < 0)
                    operator delete(v209[0]);
                  nullsub_1(&v208);
                  *(_OWORD *)v216 = v210;
                  v101 = (uint64_t)v212;
                  *(_QWORD *)&v216[16] = v211;
                  if (v211)
                  {
                    v102 = (unint64_t *)&v211->__shared_owners_;
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                  }
                  v104 = v213;
                  *(_QWORD *)&v217 = v101;
                  *((_QWORD *)&v217 + 1) = v213;
                  if (v213)
                  {
                    v105 = (unint64_t *)&v213->__shared_owners_;
                    do
                      v106 = __ldxr(v105);
                    while (__stxr(v106 + 1, v105));
                    v218 = v101;
                    do
                      v107 = __ldaxr(v105);
                    while (__stlxr(v107 - 1, v105));
                    if (!v107)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                  else
                  {
                    v218 = v101;
                  }
                  v144 = v211;
                  if (v211)
                  {
                    v145 = (unint64_t *)&v211->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  v147 = *(_QWORD *)v216;
                  if (*(char *)(v218 + 31) >= 0)
                    v148 = (char *)(v218 + 8);
                  else
                    v148 = *(char **)(v218 + 8);
                  v149 = _os_log_pack_fill();
                  *(_DWORD *)v149 = 136315138;
                  *(_QWORD *)(v149 + 4) = v148;
                  v150 = operator new();
                  v151 = *(unsigned __int8 *)(v58 + 39);
                  v152 = v180;
                  if ((v151 & 0x80u) != 0)
                  {
                    v152 = *(const char **)(v58 + 16);
                    v151 = *(_QWORD *)(v58 + 24);
                  }
                  *(_QWORD *)v150 = v147;
                  *(_OWORD *)(v150 + 8) = *(_OWORD *)&v216[8];
                  *(_QWORD *)&v216[8] = 0;
                  *(_QWORD *)&v216[16] = 0;
                  *(_OWORD *)(v150 + 24) = v217;
                  v217 = 0uLL;
                  *(_QWORD *)(v150 + 40) = v152;
                  *(_QWORD *)(v150 + 48) = v151;
                  *(_BYTE *)(v150 + 56) = v72;
                  v208 = 0;
                  *(_QWORD *)&v210 = v150;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v10 + 8) + 40))(*(_QWORD *)(v10 + 8), &v210);
                  v153 = v210;
                  *(_QWORD *)&v210 = 0;
                  if (v153)
                  {
                    v154 = *(std::__shared_weak_count **)(v153 + 32);
                    if (v154)
                    {
                      v155 = (unint64_t *)&v154->__shared_owners_;
                      do
                        v156 = __ldaxr(v155);
                      while (__stlxr(v156 - 1, v155));
                      if (!v156)
                      {
                        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                        std::__shared_weak_count::__release_weak(v154);
                      }
                    }
                    v157 = *(std::__shared_weak_count **)(v153 + 16);
                    if (v157)
                    {
                      v158 = (unint64_t *)&v157->__shared_owners_;
                      do
                        v159 = __ldaxr(v158);
                      while (__stlxr(v159 - 1, v158));
                      if (!v159)
                      {
                        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                        std::__shared_weak_count::__release_weak(v157);
                      }
                    }
                    MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
                    v160 = v208;
                    v208 = 0;
                    if (v160)
                    {
                      v161 = (std::__shared_weak_count *)v160[4];
                      if (v161)
                      {
                        v162 = (unint64_t *)&v161->__shared_owners_;
                        do
                          v163 = __ldaxr(v162);
                        while (__stlxr(v163 - 1, v162));
                        if (!v163)
                        {
                          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                          std::__shared_weak_count::__release_weak(v161);
                        }
                      }
                      v164 = (std::__shared_weak_count *)v160[2];
                      if (v164)
                      {
                        v165 = (unint64_t *)&v164->__shared_owners_;
                        do
                          v166 = __ldaxr(v165);
                        while (__stlxr(v166 - 1, v165));
                        if (!v166)
                        {
                          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                          std::__shared_weak_count::__release_weak(v164);
                        }
                      }
                      MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
                    }
                  }
                  v167 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
                  if (*((_QWORD *)&v217 + 1))
                  {
                    v168 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)&v216[16];
                  if (*(_QWORD *)&v216[16])
                  {
                    v171 = (unint64_t *)(*(_QWORD *)&v216[16] + 8);
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
LABEL_286:

                  if (v8)
                  {
                    v173 = (const char *)&__dst;
                    if (v192 < 0)
                      v173 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&__p, "%s", v173);
                    sub_20E863570((uint64_t)&__p);
                  }
                  sub_20E863570((uint64_t)&__p);
                  v174 = v189;
                  if (v189)
                  {
                    v175 = (unint64_t *)&v189->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  if (SHIBYTE(v192) < 0)
                    operator delete(__dst);
                  v193[0] = *MEMORY[0x24BEDB7F0];
                  v177 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v193 + *(_QWORD *)(v193[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v194 = v177;
                  v195 = MEMORY[0x24BEDB848] + 16;
                  if (v201 < 0)
                    operator delete(v200);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v204);
                  goto LABEL_300;
                }
              }
              memcpy(v80, v57, v79);
              goto LABEL_166;
            }
          }
          memmove(v65, v62, v63);
          goto LABEL_119;
        }
      }
      memmove(p_dst, v54, v13);
      goto LABEL_98;
    }
    sub_20E872DD8(v207);
    if (**(int **)(v207[0] + 56) <= 3)
    {
      v15 = *(unsigned __int8 *)(v207[0] + 72);
      v16 = sub_21021D818(v207);
      v17 = v16;
      if (v15 || v16)
      {
        sub_20E863438((uint64_t)v193);
        *(_QWORD *)v216 = "Try to read ";
        *(_QWORD *)&v216[8] = 12;
        *(_QWORD *)&v216[16] = a1;
        *(_QWORD *)&v217 = a2;
        *((_QWORD *)&v217 + 1) = " from the user defaults but it is not convertable to a BOOL";
        v218 = 59;
        sub_20E8778D4((uint64_t)v216, (uint64_t)&v219, 0, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        sub_20E86A980(&v194, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v203 & 0x10) != 0)
        {
          v22 = v202;
          if (v202 < v199)
          {
            v202 = v199;
            v22 = v199;
          }
          v23 = (const void **)&v198;
        }
        else
        {
          if ((v203 & 8) == 0)
          {
            v20 = 0;
            HIBYTE(v192) = 0;
            v21 = (void **)&__dst;
            goto LABEL_46;
          }
          v23 = (const void **)v196;
          v22 = v197;
        }
        v26 = *v23;
        v20 = v22 - (_QWORD)*v23;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v20 >= 0x17)
        {
          v27 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v27 = v20 | 7;
          v28 = v27 + 1;
          v21 = (void **)operator new(v27 + 1);
          v191 = v20;
          v192 = v28 | 0x8000000000000000;
          __dst = v21;
        }
        else
        {
          HIBYTE(v192) = v22 - *(_BYTE *)v23;
          v21 = (void **)&__dst;
          if (!v20)
          {
LABEL_46:
            *((_BYTE *)v21 + v20) = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
            __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v184 = 3;
            v185 = "unknown file";
            v186 = 132;
            v188 = 0;
            v189 = 0;
            v187 = "unknown function";
            if (v192 >= 0)
              v29 = (const char *)&__dst;
            else
              v29 = (const char *)__dst;
            v30 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v31 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
            v179 = v31;
            if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v31 = *(const char **)(v30 + 16);
              v32 = *(_QWORD *)(v30 + 24);
            }
            else
            {
              v32 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            }
            v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v216);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v216);
              if ((_BYTE)v217 && (v216[23] & 0x80000000) != 0)
                operator delete(*(void **)v216);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v34 = byte_254A4A4F8;
            else
              v34 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v35 = byte_254A4A4F8[23];
            else
              v35 = *(_QWORD *)&byte_254A4A4F8[8];
            v36 = os_log_create(v34, v31);
            *(_QWORD *)v216 = v36;

            v37 = &v216[8];
            if (v35 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v35 >= 0x17)
            {
              v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v35 | 7) != 0x17)
                v38 = v35 | 7;
              v39 = v38 + 1;
              v37 = operator new(v38 + 1);
              *(_QWORD *)&v216[16] = v35;
              *(_QWORD *)&v217 = v39 | 0x8000000000000000;
              *(_QWORD *)&v216[8] = v37;
            }
            else
            {
              BYTE7(v217) = v35;
              if (!v35)
              {
LABEL_67:
                v37[v35] = 0;
                BYTE8(v217) = 1;
                v40 = &v218;
                if (v32 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v32 >= 0x17)
                {
                  v41 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v32 | 7) != 0x17)
                    v41 = v32 | 7;
                  v42 = v41 + 1;
                  v40 = (uint64_t *)operator new(v41 + 1);
                  v219 = v32;
                  v220 = v42 | 0x8000000000000000;
                  v218 = (uint64_t)v40;
                }
                else
                {
                  HIBYTE(v220) = v32;
                  if (!v32)
                    goto LABEL_75;
                }
                memmove(v40, v31, v32);
LABEL_75:
                *((_BYTE *)v40 + v32) = 0;
                v221 = 1;
                v43 = objc_retainAutorelease(*(id *)v216);
                if (v221 && SHIBYTE(v220) < 0)
                  operator delete((void *)v218);
                if (BYTE8(v217) && SBYTE7(v217) < 0)
                  operator delete(*(void **)&v216[8]);

                v44 = sub_21021D650(3u);
                v45 = v43;
                v46 = v45;
                if (!v17 || !*(_QWORD *)(v17 + 8))
                {
                  os_log_type_enabled(v45, v44);
                  *(_DWORD *)v216 = 136315138;
                  *(_QWORD *)&v216[4] = v29;
                  v53 = (void *)_os_log_send_and_compose_impl();
                  if (v53)
                    free(v53);
                  goto LABEL_227;
                }
                v47 = _os_log_pack_size();
                v48 = (std::__shared_weak_count_vtbl *)operator new(v47, (std::align_val_t)8uLL);
                v49 = (std::__shared_weak_count *)operator new();
                v49->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v49->__shared_owners_ = 0;
                v49->__shared_weak_owners_ = 0;
                v49[1].__vftable = v48;
                *(_QWORD *)&v210 = v48;
                *((_QWORD *)&v210 + 1) = v48;
                v212 = 0;
                v213 = 0;
                v211 = v49;
                v50 = strlen(v29);
                if (v50 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v51 = v50;
                if (v50 >= 0x17)
                {
                  v82 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v50 | 7) != 0x17)
                    v82 = v50 | 7;
                  v83 = v82 + 1;
                  v52 = (void **)operator new(v82 + 1);
                  *(_QWORD *)&v215 = v51;
                  *((_QWORD *)&v215 + 1) = v83 | 0x8000000000000000;
                  v214 = v52;
                }
                else
                {
                  HIBYTE(v215) = v50;
                  v52 = (void **)&v214;
                  if (!v50)
                  {
LABEL_145:
                    *((_BYTE *)v52 + v51) = 0;
                    v209[0] = v214;
                    v209[1] = (void *)v215;
                    *(void **)((char *)&v209[1] + 7) = *(void **)((char *)&v215 + 7);
                    v208 = off_24C9ABC20;
                    HIBYTE(v209[2]) = HIBYTE(v215);
                    v84 = operator new(0x38uLL);
                    v84[1] = 0;
                    v84[2] = 0;
                    *v84 = &off_24C9ABBD0;
                    v84[3] = off_24C9ABC20;
                    *((_OWORD *)v84 + 2) = *(_OWORD *)v209;
                    v84[6] = v209[2];
                    memset(v209, 0, sizeof(v209));
                    v85 = v213;
                    v212 = (char *)(v84 + 3);
                    v213 = (std::__shared_weak_count *)v84;
                    if (v85)
                    {
                      v86 = (unint64_t *)&v85->__shared_owners_;
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    if (SHIBYTE(v209[2]) < 0)
                      operator delete(v209[0]);
                    nullsub_1(&v208);
                    *(_OWORD *)v216 = v210;
                    v88 = (uint64_t)v212;
                    *(_QWORD *)&v216[16] = v211;
                    if (v211)
                    {
                      v89 = (unint64_t *)&v211->__shared_owners_;
                      do
                        v90 = __ldxr(v89);
                      while (__stxr(v90 + 1, v89));
                    }
                    v91 = v213;
                    *(_QWORD *)&v217 = v88;
                    *((_QWORD *)&v217 + 1) = v213;
                    if (v213)
                    {
                      v92 = (unint64_t *)&v213->__shared_owners_;
                      do
                        v93 = __ldxr(v92);
                      while (__stxr(v93 + 1, v92));
                      v218 = v88;
                      do
                        v94 = __ldaxr(v92);
                      while (__stlxr(v94 - 1, v92));
                      if (!v94)
                      {
                        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                        std::__shared_weak_count::__release_weak(v91);
                      }
                    }
                    else
                    {
                      v218 = v88;
                    }
                    v108 = v211;
                    if (v211)
                    {
                      v109 = (unint64_t *)&v211->__shared_owners_;
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                    v111 = *(_QWORD *)v216;
                    if (*(char *)(v218 + 31) >= 0)
                      v112 = (char *)(v218 + 8);
                    else
                      v112 = *(char **)(v218 + 8);
                    v113 = _os_log_pack_fill();
                    *(_DWORD *)v113 = 136315138;
                    *(_QWORD *)(v113 + 4) = v112;
                    v114 = operator new();
                    v115 = *(unsigned __int8 *)(v30 + 39);
                    v116 = v179;
                    if ((v115 & 0x80u) != 0)
                    {
                      v116 = *(const char **)(v30 + 16);
                      v115 = *(_QWORD *)(v30 + 24);
                    }
                    *(_QWORD *)v114 = v111;
                    *(_OWORD *)(v114 + 8) = *(_OWORD *)&v216[8];
                    *(_QWORD *)&v216[8] = 0;
                    *(_QWORD *)&v216[16] = 0;
                    *(_OWORD *)(v114 + 24) = v217;
                    v217 = 0uLL;
                    *(_QWORD *)(v114 + 40) = v116;
                    *(_QWORD *)(v114 + 48) = v115;
                    *(_BYTE *)(v114 + 56) = v44;
                    v208 = 0;
                    *(_QWORD *)&v210 = v114;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v17 + 8) + 40))(*(_QWORD *)(v17 + 8), &v210);
                    v117 = v210;
                    *(_QWORD *)&v210 = 0;
                    if (v117)
                    {
                      v118 = *(std::__shared_weak_count **)(v117 + 32);
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldaxr(v119);
                        while (__stlxr(v120 - 1, v119));
                        if (!v120)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v121 = *(std::__shared_weak_count **)(v117 + 16);
                      if (v121)
                      {
                        v122 = (unint64_t *)&v121->__shared_owners_;
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                        if (!v123)
                        {
                          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                          std::__shared_weak_count::__release_weak(v121);
                        }
                      }
                      MEMORY[0x212BC6398](v117, 0x10F0C40B62ED6C6);
                      v124 = v208;
                      v208 = 0;
                      if (v124)
                      {
                        v125 = (std::__shared_weak_count *)v124[4];
                        if (v125)
                        {
                          v126 = (unint64_t *)&v125->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
                        v128 = (std::__shared_weak_count *)v124[2];
                        if (v128)
                        {
                          v129 = (unint64_t *)&v128->__shared_owners_;
                          do
                            v130 = __ldaxr(v129);
                          while (__stlxr(v130 - 1, v129));
                          if (!v130)
                          {
                            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                            std::__shared_weak_count::__release_weak(v128);
                          }
                        }
                        MEMORY[0x212BC6398](v124, 0x10F0C40B62ED6C6);
                      }
                    }
                    v131 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
                    if (*((_QWORD *)&v217 + 1))
                    {
                      v132 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
                      do
                        v133 = __ldaxr(v132);
                      while (__stlxr(v133 - 1, v132));
                      if (!v133)
                      {
                        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                        std::__shared_weak_count::__release_weak(v131);
                      }
                    }
                    v134 = *(std::__shared_weak_count **)&v216[16];
                    if (*(_QWORD *)&v216[16])
                    {
                      v135 = (unint64_t *)(*(_QWORD *)&v216[16] + 8);
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
LABEL_227:

                    if (v15)
                    {
                      v137 = (const char *)&__dst;
                      if (v192 < 0)
                        v137 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&__p, "%s", v137);
                      sub_20E863570((uint64_t)&__p);
                    }
                    sub_20E863570((uint64_t)&__p);
                    v138 = v189;
                    if (v189)
                    {
                      v139 = (unint64_t *)&v189->__shared_owners_;
                      do
                        v140 = __ldaxr(v139);
                      while (__stlxr(v140 - 1, v139));
                      if (!v140)
                      {
                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                        std::__shared_weak_count::__release_weak(v138);
                      }
                    }
                    if (SHIBYTE(v192) < 0)
                      operator delete(__dst);
                    v193[0] = *MEMORY[0x24BEDB7F0];
                    v141 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v193 + *(_QWORD *)(v193[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v194 = v141;
                    v195 = MEMORY[0x24BEDB848] + 16;
                    if (v201 < 0)
                      operator delete(v200);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v204);
                    goto LABEL_241;
                  }
                }
                memcpy(v52, v29, v51);
                goto LABEL_145;
              }
            }
            memmove(v37, v34, v35);
            goto LABEL_67;
          }
        }
        memmove(v21, v26, v20);
        goto LABEL_46;
      }
    }
  }
LABEL_241:
  v142 = 0;
  v143 = 0;
LABEL_301:

  return v142 | (v143 << 8);
}

void sub_20E875CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152) && *(char *)(v29 - 153) < 0)
    operator delete(*(void **)(v29 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_20E875F04(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  const char *v10;
  size_t v11;
  size_t v12;
  _QWORD *p_dst;
  int v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  std::string *p_p;
  std::string::size_type size;
  size_t v30;
  void *v31;
  unint64_t v32;
  const void **v33;
  unint64_t v34;
  const void **v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  NSObject *v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  os_log_type_t v55;
  NSObject *v56;
  NSObject *v57;
  size_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  size_t v61;
  size_t v62;
  void **v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  size_t v71;
  unsigned __int8 v72;
  const char *v73;
  size_t v74;
  NSObject *v75;
  _BYTE *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  os_log_type_t v84;
  NSObject *v85;
  NSObject *v86;
  size_t v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  size_t v90;
  size_t v91;
  void **v92;
  void *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t (**v138)();
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  const char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t (**v172)();
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  const char *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  char v191;
  uint64_t v192;
  id v193;
  const char *v194;
  int v195;
  const char *v196;
  char *__s;
  char *__sa;
  _QWORD *__dst;
  __int128 v200;
  id v201;
  char v202;
  std::string __p;
  int v204;
  const char *v205;
  int v206;
  const char *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210;
  size_t v211;
  int64_t v212;
  _QWORD v213[2];
  uint64_t v214;
  uint64_t v215;
  _BYTE v216[16];
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  char v221;
  unint64_t v222;
  int v223;
  _BYTE v224[152];
  uint64_t v225;
  uint64_t (**v226)();
  void *v227[3];
  __int128 v228;
  std::__shared_weak_count *v229;
  char *v230;
  std::__shared_weak_count *v231;
  void **v232;
  __int128 v233;
  _BYTE v234[15];
  _BYTE v235[24];
  __int128 v236;
  uint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  char v240[8];
  uint64_t v241;

  v241 = *MEMORY[0x24BDAC8D0];
  sub_20E8713F4();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E872CD4(a1, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_20E870624((uint64_t)&v201, v6, v7);

  if (v202)
  {
    v8 = v201;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v9 = objc_retainAutorelease(v8);
      v10 = (const char *)objc_msgSend(v9, "UTF8String");
      v11 = strlen(v10);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v21 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v21 = v11 | 7;
        v22 = v21 + 1;
        p_dst = operator new(v21 + 1);
        *(_QWORD *)&v200 = v12;
        *((_QWORD *)&v200 + 1) = v22 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v200) = v11;
        p_dst = &__dst;
        if (!v11)
          goto LABEL_25;
      }
      memmove(p_dst, v10, v12);
LABEL_25:
      *((_BYTE *)p_dst + v12) = 0;
      sub_20E872DD8(&v225);
      if (**(int **)(v225 + 56) > 3
        || (v23 = *(unsigned __int8 *)(v225 + 72), v24 = sub_21021D818(&v225), v25 = (char *)v24, !v23) && !v24)
      {
LABEL_310:
        v190 = __dst;
        *(_QWORD *)v234 = v200;
        *(_QWORD *)&v234[7] = *(_QWORD *)((char *)&v200 + 7);
        v191 = HIBYTE(v200);
        v200 = 0uLL;
        __dst = 0;
        v192 = *(_QWORD *)v234;
        *(_QWORD *)a3 = v190;
        *(_QWORD *)(a3 + 8) = v192;
        *(_QWORD *)(a3 + 15) = *(_QWORD *)&v234[7];
        *(_BYTE *)(a3 + 23) = v191;
        *(_BYTE *)(a3 + 24) = 1;

        goto LABEL_311;
      }
      sub_20E863438((uint64_t)v213);
      __s = v25;
      *(_QWORD *)v235 = "Reading ";
      *(_QWORD *)&v235[8] = 8;
      *(_QWORD *)&v235[16] = a1;
      *(_QWORD *)&v236 = a2;
      *((_QWORD *)&v236 + 1) = " from the user defaults with value ";
      v237 = 35;
      v26 = HIBYTE(v200);
      v27 = &__dst;
      if (v200 < 0)
      {
        v27 = __dst;
        v26 = v200;
      }
      v238 = v27;
      v239 = v26;
      sub_20E8778D4((uint64_t)v235, (uint64_t)v240, 0, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_20E86A980(&v214, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v195 = v23;
      if ((v223 & 0x10) != 0)
      {
        v34 = v222;
        if (v222 < v219)
        {
          v222 = v219;
          v34 = v219;
        }
        v35 = (const void **)&v218;
      }
      else
      {
        if ((v223 & 8) == 0)
        {
          v30 = 0;
          HIBYTE(v212) = 0;
          v31 = &v210;
          goto LABEL_108;
        }
        v35 = (const void **)v216;
        v34 = v217;
      }
      v65 = *v35;
      v30 = v34 - (_QWORD)*v35;
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v30 >= 0x17)
      {
        v66 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v66 = v30 | 7;
        v67 = v66 + 1;
        v31 = operator new(v66 + 1);
        v211 = v30;
        v212 = v67 | 0x8000000000000000;
        v210 = v31;
      }
      else
      {
        HIBYTE(v212) = v34 - *(_BYTE *)v35;
        v31 = &v210;
        if (!v30)
        {
LABEL_108:
          *((_BYTE *)v31 + v30) = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v225;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          v204 = 3;
          v205 = "unknown file";
          v206 = 60;
          v208 = 0;
          v209 = 0;
          v207 = "unknown function";
          if (v212 >= 0)
            v68 = (const char *)&v210;
          else
            v68 = (const char *)v210;
          v69 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v70 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v194 = v70;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v70 = *(const char **)(v69 + 16);
            v71 = *(_QWORD *)(v69 + 24);
          }
          else
          {
            v71 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          }
          v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v235);
            sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v235);
            if ((_BYTE)v236 && (v235[23] & 0x80000000) != 0)
              operator delete(*(void **)v235);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A50F >= 0)
            v73 = (const char *)&xmmword_254A4A4F8;
          else
            v73 = (const char *)xmmword_254A4A4F8;
          if (byte_254A4A50F >= 0)
            v74 = byte_254A4A50F;
          else
            v74 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          v75 = os_log_create(v73, v70);
          *(_QWORD *)v235 = v75;

          v76 = &v235[8];
          if (v74 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v74 >= 0x17)
          {
            v77 = v9;
            v78 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v74 | 7) != 0x17)
              v78 = v74 | 7;
            v79 = v78 + 1;
            v76 = operator new(v78 + 1);
            *(_QWORD *)&v235[16] = v74;
            *(_QWORD *)&v236 = v79 | 0x8000000000000000;
            *(_QWORD *)&v235[8] = v76;
            v9 = v77;
          }
          else
          {
            BYTE7(v236) = v74;
            if (!v74)
            {
LABEL_129:
              v76[v74] = 0;
              BYTE8(v236) = 1;
              v80 = &v237;
              if (v71 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v71 >= 0x17)
              {
                v81 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v71 | 7) != 0x17)
                  v81 = v71 | 7;
                v82 = v81 + 1;
                v80 = (uint64_t *)operator new(v81 + 1);
                v238 = (_QWORD *)v71;
                v239 = v82 | 0x8000000000000000;
                v237 = (uint64_t)v80;
              }
              else
              {
                HIBYTE(v239) = v71;
                if (!v71)
                  goto LABEL_137;
              }
              memmove(v80, v70, v71);
LABEL_137:
              *((_BYTE *)v80 + v71) = 0;
              v240[0] = 1;
              v83 = objc_retainAutorelease(*(id *)v235);
              if (v240[0] && SHIBYTE(v239) < 0)
                operator delete((void *)v237);
              if (BYTE8(v236) && SBYTE7(v236) < 0)
                operator delete(*(void **)&v235[8]);

              v84 = sub_21021D650(3u);
              v85 = v83;
              v86 = v85;
              if (!__s || !*((_QWORD *)__s + 1))
              {
                os_log_type_enabled(v85, v84);
                *(_DWORD *)v235 = 136315138;
                *(_QWORD *)&v235[4] = v68;
                v93 = (void *)_os_log_send_and_compose_impl();
                v94 = v195;
                if (v93)
                  free(v93);
                goto LABEL_296;
              }
              v87 = _os_log_pack_size();
              v193 = v9;
              v88 = (std::__shared_weak_count_vtbl *)operator new(v87, (std::align_val_t)8uLL);
              v89 = (std::__shared_weak_count *)operator new();
              v89->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v89->__shared_owners_ = 0;
              v89->__shared_weak_owners_ = 0;
              v89[1].__vftable = v88;
              *(_QWORD *)&v228 = v88;
              *((_QWORD *)&v228 + 1) = v88;
              v230 = 0;
              v231 = 0;
              v229 = v89;
              v90 = strlen(v68);
              if (v90 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v91 = v90;
              if (v90 >= 0x17)
              {
                v109 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v90 | 7) != 0x17)
                  v109 = v90 | 7;
                v110 = v109 + 1;
                v92 = (void **)operator new(v109 + 1);
                *(_QWORD *)&v233 = v91;
                *((_QWORD *)&v233 + 1) = v110 | 0x8000000000000000;
                v232 = v92;
              }
              else
              {
                HIBYTE(v233) = v90;
                v92 = (void **)&v232;
                if (!v90)
                {
LABEL_176:
                  *((_BYTE *)v92 + v91) = 0;
                  v227[0] = v232;
                  v227[1] = (void *)v233;
                  *(void **)((char *)&v227[1] + 7) = *(void **)((char *)&v233 + 7);
                  v226 = off_24C9ABC20;
                  HIBYTE(v227[2]) = HIBYTE(v233);
                  v111 = operator new(0x38uLL);
                  v111[1] = 0;
                  v111[2] = 0;
                  *v111 = &off_24C9ABBD0;
                  v111[3] = off_24C9ABC20;
                  *((_OWORD *)v111 + 2) = *(_OWORD *)v227;
                  v111[6] = v227[2];
                  memset(v227, 0, sizeof(v227));
                  v112 = v231;
                  v230 = (char *)(v111 + 3);
                  v231 = (std::__shared_weak_count *)v111;
                  if (v112)
                  {
                    p_shared_owners = (unint64_t *)&v112->__shared_owners_;
                    do
                      v114 = __ldaxr(p_shared_owners);
                    while (__stlxr(v114 - 1, p_shared_owners));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
                  if (SHIBYTE(v227[2]) < 0)
                    operator delete(v227[0]);
                  nullsub_1(&v226);
                  *(_OWORD *)v235 = v228;
                  v115 = (uint64_t)v230;
                  *(_QWORD *)&v235[16] = v229;
                  if (v229)
                  {
                    v116 = (unint64_t *)&v229->__shared_owners_;
                    do
                      v117 = __ldxr(v116);
                    while (__stxr(v117 + 1, v116));
                  }
                  v118 = v231;
                  *(_QWORD *)&v236 = v115;
                  *((_QWORD *)&v236 + 1) = v231;
                  if (v231)
                  {
                    v119 = (unint64_t *)&v231->__shared_owners_;
                    do
                      v120 = __ldxr(v119);
                    while (__stxr(v120 + 1, v119));
                    v237 = v115;
                    do
                      v121 = __ldaxr(v119);
                    while (__stlxr(v121 - 1, v119));
                    if (!v121)
                    {
                      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                      std::__shared_weak_count::__release_weak(v118);
                    }
                  }
                  else
                  {
                    v237 = v115;
                  }
                  v156 = v229;
                  if (v229)
                  {
                    v157 = (unint64_t *)&v229->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  v159 = *(_QWORD *)v235;
                  if (*(char *)(v237 + 31) >= 0)
                    v160 = (char *)(v237 + 8);
                  else
                    v160 = *(char **)(v237 + 8);
                  v161 = _os_log_pack_fill();
                  *(_DWORD *)v161 = 136315138;
                  *(_QWORD *)(v161 + 4) = v160;
                  v162 = operator new();
                  v163 = *(unsigned __int8 *)(v69 + 39);
                  v164 = v194;
                  if ((v163 & 0x80u) != 0)
                  {
                    v164 = *(const char **)(v69 + 16);
                    v163 = *(_QWORD *)(v69 + 24);
                  }
                  *(_QWORD *)v162 = v159;
                  *(_OWORD *)(v162 + 8) = *(_OWORD *)&v235[8];
                  *(_QWORD *)&v235[8] = 0;
                  *(_QWORD *)&v235[16] = 0;
                  *(_OWORD *)(v162 + 24) = v236;
                  v236 = 0uLL;
                  *(_QWORD *)(v162 + 40) = v164;
                  *(_QWORD *)(v162 + 48) = v163;
                  *(_BYTE *)(v162 + 56) = v84;
                  v226 = 0;
                  *(_QWORD *)&v228 = v162;
                  (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)__s + 1) + 40))(*((_QWORD *)__s + 1), &v228);
                  v165 = v228;
                  *(_QWORD *)&v228 = 0;
                  v9 = v193;
                  v94 = v195;
                  if (v165)
                  {
                    v166 = *(std::__shared_weak_count **)(v165 + 32);
                    if (v166)
                    {
                      v167 = (unint64_t *)&v166->__shared_owners_;
                      do
                        v168 = __ldaxr(v167);
                      while (__stlxr(v168 - 1, v167));
                      if (!v168)
                      {
                        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                        std::__shared_weak_count::__release_weak(v166);
                      }
                    }
                    v169 = *(std::__shared_weak_count **)(v165 + 16);
                    if (v169)
                    {
                      v170 = (unint64_t *)&v169->__shared_owners_;
                      do
                        v171 = __ldaxr(v170);
                      while (__stlxr(v171 - 1, v170));
                      if (!v171)
                      {
                        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                        std::__shared_weak_count::__release_weak(v169);
                      }
                    }
                    MEMORY[0x212BC6398](v165, 0x10F0C40B62ED6C6);
                    v172 = v226;
                    v226 = 0;
                    if (v172)
                    {
                      v173 = (std::__shared_weak_count *)v172[4];
                      if (v173)
                      {
                        v174 = (unint64_t *)&v173->__shared_owners_;
                        do
                          v175 = __ldaxr(v174);
                        while (__stlxr(v175 - 1, v174));
                        if (!v175)
                        {
                          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                          std::__shared_weak_count::__release_weak(v173);
                        }
                      }
                      v176 = (std::__shared_weak_count *)v172[2];
                      if (v176)
                      {
                        v177 = (unint64_t *)&v176->__shared_owners_;
                        do
                          v178 = __ldaxr(v177);
                        while (__stlxr(v178 - 1, v177));
                        if (!v178)
                        {
                          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                          std::__shared_weak_count::__release_weak(v176);
                        }
                      }
                      MEMORY[0x212BC6398](v172, 0x10F0C40B62ED6C6);
                    }
                  }
                  v179 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
                  if (*((_QWORD *)&v236 + 1))
                  {
                    v180 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                      std::__shared_weak_count::__release_weak(v179);
                    }
                  }
                  v182 = *(std::__shared_weak_count **)&v235[16];
                  if (*(_QWORD *)&v235[16])
                  {
                    v183 = (unint64_t *)(*(_QWORD *)&v235[16] + 8);
                    do
                      v184 = __ldaxr(v183);
                    while (__stlxr(v184 - 1, v183));
                    if (!v184)
                    {
                      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                      std::__shared_weak_count::__release_weak(v182);
                    }
                  }
LABEL_296:

                  if (v94)
                  {
                    v185 = (const char *)&v210;
                    if (v212 < 0)
                      v185 = (const char *)v210;
                    sub_20E8C003C((uint64_t)&__p, "%s", v185);
                    sub_20E863570((uint64_t)&__p);
                  }
                  sub_20E863570((uint64_t)&__p);
                  v186 = v209;
                  if (v209)
                  {
                    v187 = (unint64_t *)&v209->__shared_owners_;
                    do
                      v188 = __ldaxr(v187);
                    while (__stlxr(v188 - 1, v187));
                    if (!v188)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                  if (SHIBYTE(v212) < 0)
                    operator delete(v210);
                  v213[0] = *MEMORY[0x24BEDB7F0];
                  v189 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v213 + *(_QWORD *)(v213[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v214 = v189;
                  v215 = MEMORY[0x24BEDB848] + 16;
                  if (v221 < 0)
                    operator delete(v220);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v224);
                  goto LABEL_310;
                }
              }
              memcpy(v92, v68, v91);
              goto LABEL_176;
            }
          }
          memmove(v76, v73, v74);
          goto LABEL_129;
        }
      }
      memmove(v31, v65, v30);
      goto LABEL_108;
    }
    sub_20E872DD8(v234);
    if (**(int **)(*(_QWORD *)v234 + 56) <= 3)
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)v234 + 72);
      v15 = sub_21021D818((uint64_t *)v234);
      v16 = v15;
      if (v14 || v15)
      {
        sub_20E863438((uint64_t)v213);
        *(_QWORD *)v235 = "Try to read ";
        *(_QWORD *)&v235[8] = 12;
        *(_QWORD *)&v235[16] = a1;
        *(_QWORD *)&v236 = a2;
        *((_QWORD *)&v236 + 1) = " from the user defaults but it is not a string type.";
        v237 = 52;
        sub_20E8778D4((uint64_t)v235, (uint64_t)&v238, 0, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &__p;
        else
          v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v18 = __p.__r_.__value_.__l.__size_;
        sub_20E86A980(&v214, (uint64_t)v17, v18);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((v223 & 0x10) != 0)
        {
          v32 = v222;
          if (v222 < v219)
          {
            v222 = v219;
            v32 = v219;
          }
          v33 = (const void **)&v218;
        }
        else
        {
          if ((v223 & 8) == 0)
          {
            v19 = 0;
            HIBYTE(v212) = 0;
            v20 = &v210;
            goto LABEL_56;
          }
          v33 = (const void **)v216;
          v32 = v217;
        }
        v36 = *v33;
        v19 = v32 - (_QWORD)*v33;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v37 = v19 | 7;
          v38 = v37 + 1;
          v20 = operator new(v37 + 1);
          v211 = v19;
          v212 = v38 | 0x8000000000000000;
          v210 = v20;
        }
        else
        {
          HIBYTE(v212) = v32 - *(_BYTE *)v33;
          v20 = &v210;
          if (!v19)
          {
LABEL_56:
            *((_BYTE *)v20 + v19) = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v234;
            __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v204 = 3;
            v205 = "unknown file";
            v206 = 148;
            v208 = 0;
            v209 = 0;
            v207 = "unknown function";
            if (v212 >= 0)
              v39 = (char *)&v210;
            else
              v39 = (char *)v210;
            v40 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
            v41 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
            v196 = v41;
            __sa = v39;
            if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
            {
              v41 = *(const char **)(v40 + 16);
              v42 = *(_QWORD *)(v40 + 24);
            }
            else
            {
              v42 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            }
            v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v235);
              sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)v235);
              if ((_BYTE)v236 && (v235[23] & 0x80000000) != 0)
                operator delete(*(void **)v235);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A50F >= 0)
              v44 = (const char *)&xmmword_254A4A4F8;
            else
              v44 = (const char *)xmmword_254A4A4F8;
            if (byte_254A4A50F >= 0)
              v45 = byte_254A4A50F;
            else
              v45 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
            v46 = os_log_create(v44, v41);
            *(_QWORD *)v235 = v46;

            v47 = &v235[8];
            if (v45 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v45 >= 0x17)
            {
              v48 = v14;
              v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v45 | 7) != 0x17)
                v49 = v45 | 7;
              v50 = v49 + 1;
              v47 = operator new(v49 + 1);
              *(_QWORD *)&v235[16] = v45;
              *(_QWORD *)&v236 = v50 | 0x8000000000000000;
              *(_QWORD *)&v235[8] = v47;
              v14 = v48;
            }
            else
            {
              BYTE7(v236) = v45;
              if (!v45)
              {
LABEL_77:
                v47[v45] = 0;
                BYTE8(v236) = 1;
                v51 = &v237;
                if (v42 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v42 >= 0x17)
                {
                  v52 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v42 | 7) != 0x17)
                    v52 = v42 | 7;
                  v53 = v52 + 1;
                  v51 = (uint64_t *)operator new(v52 + 1);
                  v238 = (_QWORD *)v42;
                  v239 = v53 | 0x8000000000000000;
                  v237 = (uint64_t)v51;
                }
                else
                {
                  HIBYTE(v239) = v42;
                  if (!v42)
                    goto LABEL_85;
                }
                memmove(v51, v41, v42);
LABEL_85:
                *((_BYTE *)v51 + v42) = 0;
                v240[0] = 1;
                v54 = objc_retainAutorelease(*(id *)v235);
                if (v240[0] && SHIBYTE(v239) < 0)
                  operator delete((void *)v237);
                if (BYTE8(v236) && SBYTE7(v236) < 0)
                  operator delete(*(void **)&v235[8]);

                v55 = sub_21021D650(3u);
                v56 = v54;
                v57 = v56;
                if (!v16 || !*(_QWORD *)(v16 + 8))
                {
                  os_log_type_enabled(v56, v55);
                  *(_DWORD *)v235 = 136315138;
                  *(_QWORD *)&v235[4] = __sa;
                  v64 = (void *)_os_log_send_and_compose_impl();
                  if (v64)
                    free(v64);
                  goto LABEL_237;
                }
                v58 = _os_log_pack_size();
                v59 = (std::__shared_weak_count_vtbl *)operator new(v58, (std::align_val_t)8uLL);
                v60 = (std::__shared_weak_count *)operator new();
                v60->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v60->__shared_owners_ = 0;
                v60->__shared_weak_owners_ = 0;
                v60[1].__vftable = v59;
                *(_QWORD *)&v228 = v59;
                *((_QWORD *)&v228 + 1) = v59;
                v230 = 0;
                v231 = 0;
                v229 = v60;
                v61 = strlen(__sa);
                if (v61 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v62 = v61;
                if (v61 >= 0x17)
                {
                  v95 = v14;
                  v96 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v61 | 7) != 0x17)
                    v96 = v61 | 7;
                  v97 = v96 + 1;
                  v63 = (void **)operator new(v96 + 1);
                  *(_QWORD *)&v233 = v62;
                  *((_QWORD *)&v233 + 1) = v97 | 0x8000000000000000;
                  v232 = v63;
                  v14 = v95;
                }
                else
                {
                  HIBYTE(v233) = v61;
                  v63 = (void **)&v232;
                  if (!v61)
                  {
LABEL_155:
                    *((_BYTE *)v63 + v62) = 0;
                    v227[0] = v232;
                    v227[1] = (void *)v233;
                    *(void **)((char *)&v227[1] + 7) = *(void **)((char *)&v233 + 7);
                    v226 = off_24C9ABC20;
                    HIBYTE(v227[2]) = HIBYTE(v233);
                    v98 = operator new(0x38uLL);
                    v98[1] = 0;
                    v98[2] = 0;
                    *v98 = &off_24C9ABBD0;
                    v98[3] = off_24C9ABC20;
                    *((_OWORD *)v98 + 2) = *(_OWORD *)v227;
                    v98[6] = v227[2];
                    memset(v227, 0, sizeof(v227));
                    v99 = v231;
                    v230 = (char *)(v98 + 3);
                    v231 = (std::__shared_weak_count *)v98;
                    if (v99)
                    {
                      v100 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v101 = __ldaxr(v100);
                      while (__stlxr(v101 - 1, v100));
                      if (!v101)
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                    if (SHIBYTE(v227[2]) < 0)
                      operator delete(v227[0]);
                    nullsub_1(&v226);
                    *(_OWORD *)v235 = v228;
                    v102 = (uint64_t)v230;
                    *(_QWORD *)&v235[16] = v229;
                    if (v229)
                    {
                      v103 = (unint64_t *)&v229->__shared_owners_;
                      do
                        v104 = __ldxr(v103);
                      while (__stxr(v104 + 1, v103));
                    }
                    v105 = v231;
                    *(_QWORD *)&v236 = v102;
                    *((_QWORD *)&v236 + 1) = v231;
                    if (v231)
                    {
                      v106 = (unint64_t *)&v231->__shared_owners_;
                      do
                        v107 = __ldxr(v106);
                      while (__stxr(v107 + 1, v106));
                      v237 = v102;
                      do
                        v108 = __ldaxr(v106);
                      while (__stlxr(v108 - 1, v106));
                      if (!v108)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    else
                    {
                      v237 = v102;
                    }
                    v122 = v229;
                    if (v229)
                    {
                      v123 = (unint64_t *)&v229->__shared_owners_;
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
                    v125 = *(_QWORD *)v235;
                    if (*(char *)(v237 + 31) >= 0)
                      v126 = (char *)(v237 + 8);
                    else
                      v126 = *(char **)(v237 + 8);
                    v127 = _os_log_pack_fill();
                    *(_DWORD *)v127 = 136315138;
                    *(_QWORD *)(v127 + 4) = v126;
                    v128 = operator new();
                    v129 = *(unsigned __int8 *)(v40 + 39);
                    v130 = v196;
                    if ((v129 & 0x80u) != 0)
                    {
                      v130 = *(const char **)(v40 + 16);
                      v129 = *(_QWORD *)(v40 + 24);
                    }
                    *(_QWORD *)v128 = v125;
                    *(_OWORD *)(v128 + 8) = *(_OWORD *)&v235[8];
                    *(_QWORD *)&v235[8] = 0;
                    *(_QWORD *)&v235[16] = 0;
                    *(_OWORD *)(v128 + 24) = v236;
                    v236 = 0uLL;
                    *(_QWORD *)(v128 + 40) = v130;
                    *(_QWORD *)(v128 + 48) = v129;
                    *(_BYTE *)(v128 + 56) = v55;
                    v226 = 0;
                    *(_QWORD *)&v228 = v128;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v16 + 8) + 40))(*(_QWORD *)(v16 + 8), &v228);
                    v131 = v228;
                    *(_QWORD *)&v228 = 0;
                    if (v131)
                    {
                      v132 = *(std::__shared_weak_count **)(v131 + 32);
                      if (v132)
                      {
                        v133 = (unint64_t *)&v132->__shared_owners_;
                        do
                          v134 = __ldaxr(v133);
                        while (__stlxr(v134 - 1, v133));
                        if (!v134)
                        {
                          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                          std::__shared_weak_count::__release_weak(v132);
                        }
                      }
                      v135 = *(std::__shared_weak_count **)(v131 + 16);
                      if (v135)
                      {
                        v136 = (unint64_t *)&v135->__shared_owners_;
                        do
                          v137 = __ldaxr(v136);
                        while (__stlxr(v137 - 1, v136));
                        if (!v137)
                        {
                          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                          std::__shared_weak_count::__release_weak(v135);
                        }
                      }
                      MEMORY[0x212BC6398](v131, 0x10F0C40B62ED6C6);
                      v138 = v226;
                      v226 = 0;
                      if (v138)
                      {
                        v139 = (std::__shared_weak_count *)v138[4];
                        if (v139)
                        {
                          v140 = (unint64_t *)&v139->__shared_owners_;
                          do
                            v141 = __ldaxr(v140);
                          while (__stlxr(v141 - 1, v140));
                          if (!v141)
                          {
                            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                            std::__shared_weak_count::__release_weak(v139);
                          }
                        }
                        v142 = (std::__shared_weak_count *)v138[2];
                        if (v142)
                        {
                          v143 = (unint64_t *)&v142->__shared_owners_;
                          do
                            v144 = __ldaxr(v143);
                          while (__stlxr(v144 - 1, v143));
                          if (!v144)
                          {
                            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                            std::__shared_weak_count::__release_weak(v142);
                          }
                        }
                        MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
                      }
                    }
                    v145 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
                    if (*((_QWORD *)&v236 + 1))
                    {
                      v146 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                        std::__shared_weak_count::__release_weak(v145);
                      }
                    }
                    v148 = *(std::__shared_weak_count **)&v235[16];
                    if (*(_QWORD *)&v235[16])
                    {
                      v149 = (unint64_t *)(*(_QWORD *)&v235[16] + 8);
                      do
                        v150 = __ldaxr(v149);
                      while (__stlxr(v150 - 1, v149));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
LABEL_237:

                    if (v14)
                    {
                      v151 = (const char *)&v210;
                      if (v212 < 0)
                        v151 = (const char *)v210;
                      sub_20E8C003C((uint64_t)&__p, "%s", v151);
                      sub_20E863570((uint64_t)&__p);
                    }
                    sub_20E863570((uint64_t)&__p);
                    v152 = v209;
                    if (v209)
                    {
                      v153 = (unint64_t *)&v209->__shared_owners_;
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                      }
                    }
                    if (SHIBYTE(v212) < 0)
                      operator delete(v210);
                    v213[0] = *MEMORY[0x24BEDB7F0];
                    v155 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v213 + *(_QWORD *)(v213[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v214 = v155;
                    v215 = MEMORY[0x24BEDB848] + 16;
                    if (v221 < 0)
                      operator delete(v220);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v224);
                    goto LABEL_251;
                  }
                }
                memcpy(v63, __sa, v62);
                goto LABEL_155;
              }
            }
            memmove(v47, v44, v45);
            goto LABEL_77;
          }
        }
        memmove(v20, v36, v19);
        goto LABEL_56;
      }
    }
  }
LABEL_251:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
LABEL_311:

}

void sub_20E8775F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v39;
  uint64_t v40;

  if (*(_BYTE *)(v40 - 152) && *(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a24);
  if (a38 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a39);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_20E8778D4(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const double *v18;
  int64x2_t v19;
  int64x2_t v20;
  const double *v21;
  unsigned __int128 v22;
  unsigned __int128 v23;
  uint64_t i;
  const std::string::value_type *v25;
  std::string::size_type v26;

  v10 = (a2 - a1) >> 4;
  if (v10 <= 1)
    v10 = 1;
  v11 = (v10 - 1) * a4;
  v12 = a2 - a1;
  if (a2 == a1)
  {
    v13 = 0;
  }
  else
  {
    if ((unint64_t)(v12 - 16) >= 0x40)
    {
      v15 = ((unint64_t)(v12 - 16) >> 4) + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v17 = v15 - v16;
      v14 = a1 + 16 * v17;
      v18 = (const double *)(a1 + 40);
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = v18 - 4;
        v22 = (unsigned __int128)vld2q_f64(v21);
        v23 = (unsigned __int128)vld2q_f64(v18);
        v19 = vaddq_s64((int64x2_t)v22, v19);
        v20 = vaddq_s64((int64x2_t)v23, v20);
        v18 += 8;
        v17 -= 4;
      }
      while (v17);
      v13 = vaddvq_s64(vaddq_s64(v20, v19));
    }
    else
    {
      v13 = 0;
      v14 = a1;
    }
    do
    {
      v13 += *(_QWORD *)(v14 + 8);
      v14 += 16;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v13 + v11);
  if (v12 >= 1)
  {
    std::string::append(a5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((unint64_t)v12 >= 0x20)
    {
      for (i = a1 + 16; i != a2; i += 16)
      {
        std::string::append(a5, a3, a4);
        v25 = *(const std::string::value_type **)i;
        v26 = *(_QWORD *)(i + 8);
        std::string::append(a5, v25, v26);
      }
    }
  }
}

void sub_20E877A14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20E877A38()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t sub_20E877A60(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C9ABCF8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_20E877AB8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

_DWORD *sub_20E877AF0(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9ABCF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E877BE4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_20E877BF8(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;
  void *v6;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 == v2)
    {
      a2[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v6 = *a2;
      a2[1] = v2;
      operator delete(v6);
    }
  }
}

_QWORD *sub_20E877C80(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_20E860C04(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20E877D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_20E877D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20E877DA8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20E877DA8(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20E877E3C(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20E877EA0(__n128 ***a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v3;
  __n128 result;
  char v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = v1[1].n128_u32[2];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, __n128 *))off_24C9ABCF8[v3])(&v5, v1);
  v1[1].n128_u32[2] = -1;
  result = *v2;
  v1[1].n128_u64[0] = v2[1].n128_u64[0];
  *v1 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v1[1].n128_u32[2] = 1;
  return result;
}

void sub_20E877F18(uint64_t a1, uint64_t a2)
{
  sub_20E877F8C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20E877F24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E8780F0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_20E877F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v13 = v6;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C9ABCF8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(v9);
    return;
  }
  operator delete(__p[0]);
  if (v11 < 0)
    goto LABEL_7;
}

void sub_20E8780B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E8780F0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_20E878258(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

__n128 sub_20E878264@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void sub_20E878280(uint64_t *a1@<X1>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  sub_20E878290(*a1, a1[1], 0, 0, a2, a3, a4);
}

void sub_20E878290(uint64_t a1@<X0>, uint64_t a2@<X1>, const std::string::value_type *a3@<X2>, std::string::size_type a4@<X3>, std::string *a5@<X8>, int64x2_t a6@<Q3>, int8x16_t a7@<Q5>)
{
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v14 = (v13 - 1) * a4;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a6.i8[0] = *(v21 - 24);
        a6.i8[4] = *v21;
        a7.i8[0] = v21[24];
        a7.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a7.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a7.u32[0];
        v30.i64[1] = a7.u32[1];
        a6 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a7 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a6, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a7, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a5, v37, v38);
    if ((unint64_t)v12 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        std::string::append(a5, a3, a4);
        v40 = *(char *)(i + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)i;
        else
          v41 = *(const std::string::value_type **)i;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(i + 23);
        else
          v42 = *(_QWORD *)(i + 8);
        std::string::append(a5, v41, v42);
      }
    }
  }
}

void sub_20E87849C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E8784C0(char *__s, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v10 = 0;
  sub_20E878A50(v9, __s);
  sub_20E878638((uint64_t)&v8, (uint64_t)v9, a2);
  v11[0] = v9;
  v11[1] = a3;
  v11[2] = v9;
  v11[3] = a3;
  v11[4] = a3;
  if (v10 == -1)
    sub_20E877AB8();
  v12 = v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C9ABD40[v10])(&v12, v9);
  sub_20E87876C((uint64_t)v11, (uint64_t)v9, a4);
  if (v10 == -1)
    sub_20E877AB8();
  v11[0] = &v12;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9ABD28[v10])(v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C9ABCF8[v10])(v11, v9);
  return result;
}

void sub_20E8785D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8785E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E8785FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E878610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E878624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E878638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  const void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;
  _QWORD v12[5];
  _QWORD *v13;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = *(const void **)a3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)v3;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v11) = *(_QWORD *)(a3 + 8);
  v6 = __dst;
  if (v3)
LABEL_8:
    memmove(v6, v5, v3);
  *((_BYTE *)v6 + v3) = 0;
  v12[0] = a2;
  v12[1] = __dst;
  v12[2] = a2;
  v12[3] = __dst;
  v12[4] = __dst;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_20E877AB8();
  v13 = v12;
  ((void (*)(_QWORD **, uint64_t))off_24C9ABD10[v9])(&v13, a2);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
}

void sub_20E878750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E87876C(uint64_t a1, uint64_t a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_20E877AB8();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtod((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))off_24C9ABD58[v10])(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_20E877AB8();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24C9ABD10[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_20E8789E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20E878A50(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9ABCF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E878B40(_DWORD ***a1)
{
  return sub_20E878B5C(**a1, (char *)(*a1)[1]);
}

void sub_20E878B4C(uint64_t a1, uint64_t a2)
{
  sub_20E878C4C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E878B5C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9ABCF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E878C4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9ABCF8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E878E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E878E44(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E878F3C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E878F34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E878F3C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E879154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20E879168(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24C9ABCF8[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_20E860C04((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_20E879204(uint64_t a1, uint64_t a2)
{
  sub_20E8792AC((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20E879210(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E879430((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_20E860C04(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_20E8792A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20E8792AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_20E860C04(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C9ABCF8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_20E8793EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20E879430(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_20E8795F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E879604(char *__s, uint64_t a2, std::string *a3, int *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  std::string v11;
  std::string *v12;
  std::string *v13;
  _DWORD *v14;
  std::string *v15;
  std::string *v16;
  std::string **v17;

  v10 = 0;
  sub_20E878A50(v9, __s);
  sub_20E878638((uint64_t)&v8, (uint64_t)v9, a2);
  v12 = (std::string *)v9;
  v13 = a3;
  v14 = v9;
  v15 = a3;
  v16 = a3;
  if (v10 == -1)
    sub_20E877AB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, _DWORD *))off_24C9ABD40[v10])(&v11, v9);
  std::to_string(&v11, *a4);
  v12 = (std::string *)v9;
  v13 = &v11;
  v14 = v9;
  v15 = &v11;
  v16 = &v11;
  if (v10 == -1)
    sub_20E877AB8();
  v17 = &v12;
  ((void (*)(std::string ***, _DWORD *))off_24C9ABD10[v10])(&v17, v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v10 == -1)
    sub_20E877AB8();
  v12 = &v11;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9ABD28[v10])(&v12, v9);
  if (v10 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9ABCF8[v10])(&v12, v9);
  return result;
}

void sub_20E87976C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E8797B4(char *__s, uint64_t a2, const char **a3, _BYTE *a4)
{
  const char *v7;
  uint64_t result;
  char v9;
  _DWORD v10[6];
  int v11;
  const char *v12;
  _QWORD **v13;
  const char **v14;
  _DWORD *v15;
  const char **v16;
  const char **v17;
  _QWORD *v18;

  v11 = 0;
  sub_20E878A50(v10, __s);
  sub_20E878638((uint64_t)&v9, (uint64_t)v10, a2);
  v13 = (_QWORD **)v10;
  v14 = a3;
  v15 = v10;
  v16 = a3;
  v17 = a3;
  if (v11 == -1)
    sub_20E877AB8();
  v18 = &v13;
  ((void (*)(_QWORD **, _DWORD *))off_24C9ABD40[v11])(&v18, v10);
  v7 = "true";
  if (!*a4)
    v7 = "false";
  v12 = v7;
  v13 = (_QWORD **)v10;
  v14 = &v12;
  v15 = v10;
  v16 = &v12;
  v17 = &v12;
  if (v11 == -1)
    sub_20E877AB8();
  v18 = &v13;
  ((void (*)(_QWORD **, _DWORD *))off_24C9ABD70[v11])(&v18, v10);
  if (v11 == -1)
    sub_20E877AB8();
  v13 = &v18;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9ABD28[v11])(&v13, v10);
  if (v11 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9ABCF8[v11])(&v13, v10);
  return result;
}

void sub_20E87991C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E879930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E879944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E879958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E87996C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E879980(_DWORD ***a1)
{
  return sub_20E87999C(**a1, (const char **)(*a1)[1]);
}

void sub_20E87998C(uint64_t a1, uint64_t a2)
{
  sub_20E879A90((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E87999C(_DWORD *a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9ABCF8[v4])(&v12, a1);
  a1[6] = -1;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E879A90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = *(const char **)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9ABCF8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E879C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E879C8C(uint64_t a1, uint64_t a2)
{
  const char **v3;
  char *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  char *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(const char ***)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E879D84((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = *v3;
  v6 = strlen(*v3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = operator new(v10 + 1);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v4 = v8;
  }
  else
  {
    v4[23] = v6;
    v8 = v4;
    if (!v6)
      goto LABEL_11;
  }
  memmove(v8, v5, v7);
LABEL_11:
  *((_BYTE *)v8 + v7) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E879D7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E879D84(void **a1, const char **a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v22 = v8;
  v23 = v8;
  v24 = &v7[24 * v6];
  v9 = *a2;
  v10 = strlen(*a2);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v16 = v10 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    *((_QWORD *)v8 + 1) = v11;
    *((_QWORD *)v8 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)v8 = v18;
    v8 = v18;
  }
  else
  {
    v8[23] = v10;
    if (!v10)
    {
      *v8 = 0;
      v12 = v8;
      v13 = v8 + 24;
      v14 = (char *)*a1;
      v15 = (char *)a1[1];
      if (v15 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, v9, v11);
  v8[v11] = 0;
  v12 = v22;
  v13 = v23 + 24;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
LABEL_23:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v24;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v19 = *(_OWORD *)(v15 - 24);
    *((_QWORD *)v12 - 1) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(v12 - 24) = v19;
    v12 -= 24;
    *((_QWORD *)v15 - 2) = 0;
    *((_QWORD *)v15 - 1) = 0;
    *((_QWORD *)v15 - 3) = 0;
    v15 -= 24;
  }
  while (v15 != v14);
  v20 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v24;
  if (v15 != v20)
  {
    do
    {
      if (*(v15 - 1) < 0)
        operator delete(*((void **)v15 - 3));
      v15 -= 24;
    }
    while (v15 != v20);
    v15 = v20;
  }
LABEL_28:
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20E879FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E879FB4(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A168(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A31C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A4D0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A684(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A838(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87A990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87A9EC(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87AB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87ABA0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87AD54(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87AF08(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B0BC(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B270(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B424(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B5D8(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B78C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87B8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87B940(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87BAF4(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87BCA8(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87BE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87BE5C(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87BFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87C010(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87C1C4(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *__p;
  void *v9;
  __int128 v10;
  const void *v11;
  std::__shared_weak_count *v12;
  std::error_condition v13;

  v9 = operator new(0x40uLL);
  v10 = xmmword_2102D7440;
  strcpy((char *)v9, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a3)
  {
    *(_QWORD *)&v13.__val_ = 102;
    v13.__cat_ = std::generic_category();
    sub_20EA67538(&v13, (uint64_t)&v9, (CFErrorRef *)&v11);
    sub_20EA66CF0(&v11, a3);
    v4 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
  return 0;
}

void sub_20E87C31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20E87C378(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *__p;
  void *v10;
  __int128 v11;
  const void *v12;
  std::__shared_weak_count *v13;
  std::error_condition v14;

  v10 = operator new(0x40uLL);
  v11 = xmmword_2102D7440;
  strcpy((char *)v10, "Source task does not exist as it is disabled in the build");
  __p = (char *)operator new(0x70uLL);
  strcpy(__p, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/Writers.mm");
  if (a4)
  {
    *(_QWORD *)&v14.__val_ = 102;
    v14.__cat_ = std::generic_category();
    sub_20EA67538(&v14, (uint64_t)&v10, (CFErrorRef *)&v12);
    sub_20EA66CF0(&v12, a4);
    v5 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  operator delete(__p);
  if (SHIBYTE(v11) < 0)
    operator delete(v10);
  return 0;
}

void sub_20E87C4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20E86665C((uint64_t)&a21);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_20E87C52C()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x212BC6CE0]());
}

uint64_t sub_20E87C540(uint64_t a1, uint64_t a2)
{
  const void **v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = (const void **)(a1 + 8);
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v3 = *(_BYTE *)(a2 + 32) == 0;
  else
    v3 = 1;
  if (v3)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 31);
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a2 + 31);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v5 & 0x80) != 0)
    return memcmp(*v2, v9, *(_QWORD *)(a1 + 16)) == 0;
  if (!*(_BYTE *)(a1 + 31))
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

int *sub_20E87C634()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254A5A678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A5A678))
    return &dword_254A5A680;
  sub_20E87C6C8();
  __cxa_atexit((void (*)(void *))sub_20E87C8B8, &dword_254A5A680, &dword_20E81F000);
  __cxa_guard_release(&qword_254A5A678);
  return &dword_254A5A680;
}

void sub_20E87C6B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A5A678);
  _Unwind_Resume(a1);
}

double sub_20E87C6C8()
{
  void *v0;
  id v1;
  const char *v2;
  size_t v3;
  void *v4;
  void *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  unint64_t v10;

  LOBYTE(xmmword_254A5A688) = 0;
  byte_254A5A6A0 = 0;
  dword_254A5A680 = getpid();
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "processName");
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = (const char *)objc_msgSend(v1, "UTF8String");
  v3 = strlen(v2);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v5 = operator new(v7 + 1);
    __p[1] = v4;
    v10 = v8 | 0x8000000000000000;
    __p[0] = v5;
LABEL_12:
    memmove(v5, v2, (size_t)v4);
    *((_BYTE *)v4 + (_QWORD)v5) = 0;

    if (byte_254A5A6A0)
      goto LABEL_5;
LABEL_13:
    result = *(double *)__p;
    xmmword_254A5A688 = *(_OWORD *)__p;
    unk_254A5A698 = v10;
    __p[1] = 0;
    v10 = 0;
    __p[0] = 0;
    byte_254A5A6A0 = 1;
    return result;
  }
  HIBYTE(v10) = v3;
  v5 = __p;
  if (v3)
    goto LABEL_12;
  LOBYTE(__p[0]) = 0;

  if (!byte_254A5A6A0)
    goto LABEL_13;
LABEL_5:
  if (byte_254A5A69F < 0)
    operator delete((void *)xmmword_254A5A688);
  result = *(double *)__p;
  xmmword_254A5A688 = *(_OWORD *)__p;
  unk_254A5A698 = v10;
  HIBYTE(v10) = 0;
  LOBYTE(__p[0]) = 0;
  return result;
}

void sub_20E87C86C(_Unwind_Exception *a1)
{
  void *v1;

  if (byte_254A5A6A0)
  {
    if (byte_254A5A69F < 0)
      operator delete((void *)xmmword_254A5A688);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E87C8B8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    if (*(char *)(result + 31) < 0)
    {
      operator delete(*(void **)(result + 8));
      return v1;
    }
  }
  return result;
}

void sub_20E87C900(_BYTE *a1@<X8>)
{
  BOOL v2;
  id v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();

  v10 = &off_24C9B6C08;
  v2 = sub_20E9E6268((uint64_t)&v10);
  nullsub_163(&v10);
  if (!v2)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  objc_msgSend(MEMORY[0x24BE086D0], "aneSubType");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    a1[23] = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v4, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[24] = 1;

}

void sub_20E87CA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_163(va);
  _Unwind_Resume(a1);
}

void sub_20E87CA38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCommonSchemaDeviceWorn *sub_20E87CA48(_BYTE *a1)
{
  AppleCommonSchemaDeviceWorn *v2;
  AppleCommonSchemaDeviceWorn *v3;
  uint64_t v4;

  v2 = objc_alloc_init(AppleCommonSchemaDeviceWorn);
  v3 = v2;
  if (*a1)
    v4 = 1;
  else
    v4 = 2;
  -[AppleCommonSchemaDeviceWorn setSignal:](v2, "setSignal:", v4);
  return v3;
}

void sub_20E87CA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaContextSnapshot *sub_20E87CA9C(unsigned __int8 *a1)
{
  AppleCV3DSchemaContextSnapshot *v2;
  double v3;
  AppleCV3DSchemaContextSnapshot *v4;

  v2 = objc_alloc_init(AppleCV3DSchemaContextSnapshot);
  v4 = v2;
  if (a1[1])
    -[AppleCV3DSchemaContextSnapshot setEnvironmentType:](v2, "setEnvironmentType:", *a1);
  if (a1[8])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 1);
    -[AppleCV3DSchemaContextSnapshot setLuxLevel:](v4, "setLuxLevel:", v3);
  }
  if (a1[16])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 3);
    -[AppleCV3DSchemaContextSnapshot setSmudgeLevel:](v4, "setSmudgeLevel:", v3);
  }
  if (a1[24])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 5);
    -[AppleCV3DSchemaContextSnapshot setPrewittLevel:](v4, "setPrewittLevel:", v3);
  }
  if (a1[32])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 7);
    -[AppleCV3DSchemaContextSnapshot setImuAcceleration:](v4, "setImuAcceleration:", v3);
  }
  if (a1[40])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 9);
    -[AppleCV3DSchemaContextSnapshot setImuAngularVelocityX:](v4, "setImuAngularVelocityX:", v3);
  }
  if (a1[48])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 11);
    -[AppleCV3DSchemaContextSnapshot setImuAngularVelocityY:](v4, "setImuAngularVelocityY:", v3);
  }
  if (a1[56])
  {
    LODWORD(v3) = *((_DWORD *)a1 + 13);
    -[AppleCV3DSchemaContextSnapshot setImuAngularVelocityZ:](v4, "setImuAngularVelocityZ:", v3);
  }
  return v4;
}

void sub_20E87CB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaSubmapLoaded *sub_20E87CB7C(uint64_t a1)
{
  AppleCV3DSchemaSubmapLoaded *v2;
  double v3;
  double v4;

  v2 = objc_alloc_init(AppleCV3DSchemaSubmapLoaded);
  -[AppleCV3DSchemaSubmapLoaded setSubmapId:](v2, "setSubmapId:", *(_QWORD *)a1);
  -[AppleCV3DSchemaSubmapLoaded setBytesReadFromDisk:](v2, "setBytesReadFromDisk:", *(_QWORD *)(a1 + 8));
  LODWORD(v3) = *(_DWORD *)(a1 + 16);
  -[AppleCV3DSchemaSubmapLoaded setTimeToLoadSubmapInSecond:](v2, "setTimeToLoadSubmapInSecond:", v3);
  if (*(_BYTE *)(a1 + 21))
    -[AppleCV3DSchemaSubmapLoaded setIsLocationAttached:](v2, "setIsLocationAttached:", *(unsigned __int8 *)(a1 + 20));
  if (*(_BYTE *)(a1 + 28))
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    -[AppleCV3DSchemaSubmapLoaded setSecondsElapsedSinceLastActive:](v2, "setSecondsElapsedSinceLastActive:", v4);
  }
  return v2;
}

void sub_20E87CBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaSubmapCreated *sub_20E87CC04(uint64_t a1)
{
  AppleCV3DSchemaSubmapCreated *v2;

  v2 = objc_alloc_init(AppleCV3DSchemaSubmapCreated);
  -[AppleCV3DSchemaSubmapCreated setSubmapId:](v2, "setSubmapId:", *(_QWORD *)a1);
  -[AppleCV3DSchemaSubmapCreated setIsLocationAttached:](v2, "setIsLocationAttached:", *(unsigned __int8 *)(a1 + 8));
  -[AppleCV3DSchemaSubmapCreated setBytesWrittenToDisk:](v2, "setBytesWrittenToDisk:", *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_20E87CC54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaSubmapUpdated *sub_20E87CC64(uint64_t a1)
{
  AppleCV3DSchemaSubmapUpdated *v2;

  v2 = objc_alloc_init(AppleCV3DSchemaSubmapUpdated);
  -[AppleCV3DSchemaSubmapUpdated setSubmapId:](v2, "setSubmapId:", *(_QWORD *)a1);
  -[AppleCV3DSchemaSubmapUpdated setIsLocationAttached:](v2, "setIsLocationAttached:", *(unsigned __int8 *)(a1 + 8));
  -[AppleCV3DSchemaSubmapUpdated setBytesWrittenToDisk:](v2, "setBytesWrittenToDisk:", *(_QWORD *)(a1 + 16));
  return v2;
}

void sub_20E87CCB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaTrackingLost *sub_20E87CCC4(uint64_t *a1)
{
  AppleCV3DSchemaTrackingLost *v2;
  void *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;

  v2 = objc_alloc_init(AppleCV3DSchemaTrackingLost);
  v3 = (void *)MEMORY[0x24BDD17C8];
  v4 = *((char *)a1 + 23);
  v5 = (uint64_t *)*a1;
  v6 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
  if (v4 >= 0)
    v7 = a1;
  else
    v7 = v5;
  objc_msgSend(v3, "stringWithCString:encoding:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[AppleCV3DSchemaTrackingLost setReasonToLoseTracking:](v2, "setReasonToLoseTracking:", v8);

  return v2;
}

void sub_20E87CD48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20E87CD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaTrackingState *sub_20E87CD6C(const void **a1)
{
  AppleCV3DSchemaTrackingState *v2;
  int v3;
  unint64_t v4;
  const void *v5;
  size_t v6;
  size_t v9;
  int v10;
  uint64_t v12;
  double v13;

  v2 = objc_alloc_init(AppleCV3DSchemaTrackingState);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (unint64_t)a1[1];
  if (v3 >= 0)
    v5 = a1;
  else
    v5 = *a1;
  if (v4 >= 2)
    v6 = 2;
  else
    v6 = v4;
  if (!memcmp(v5, "NS", v6) && v4 == 2)
  {
    v12 = 1;
  }
  else if (!memcmp(v5, "VS", v6) && v4 == 2)
  {
    v12 = 2;
  }
  else
  {
    if (v4 >= 4)
      v9 = 4;
    else
      v9 = v4;
    v10 = memcmp(v5, "3DoF", v9);
    if (v4 == 4 && v10 == 0)
      v12 = 3;
    else
      v12 = 0;
  }
  -[AppleCV3DSchemaTrackingState setMode:](v2, "setMode:", v12);
  LODWORD(v13) = *((_DWORD *)a1 + 6);
  -[AppleCV3DSchemaTrackingState setHealth:](v2, "setHealth:", v13);
  -[AppleCV3DSchemaTrackingState setNumberInlierPoints:](v2, "setNumberInlierPoints:", *((unsigned int *)a1 + 7));
  -[AppleCV3DSchemaTrackingState setNumberOfRegularKeyframes:](v2, "setNumberOfRegularKeyframes:", *((unsigned int *)a1 + 8));
  if (*((_BYTE *)a1 + 37))
    -[AppleCV3DSchemaTrackingState setThreeDoFStateCode:](v2, "setThreeDoFStateCode:", *((unsigned __int8 *)a1 + 36));
  return v2;
}

void sub_20E87CE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaTrackingRecovered *sub_20E87CE9C(_DWORD *a1)
{
  AppleCV3DSchemaTrackingRecovered *v2;
  double v3;

  v2 = objc_alloc_init(AppleCV3DSchemaTrackingRecovered);
  LODWORD(v3) = *a1;
  -[AppleCV3DSchemaTrackingRecovered setSecondsToRecoverTracking:](v2, "setSecondsToRecoverTracking:", v3);
  return v2;
}

void sub_20E87CED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaTrackingInitialized *sub_20E87CEE4(_DWORD *a1)
{
  AppleCV3DSchemaTrackingInitialized *v2;
  double v3;

  v2 = objc_alloc_init(AppleCV3DSchemaTrackingInitialized);
  LODWORD(v3) = *a1;
  -[AppleCV3DSchemaTrackingInitialized setSecondsToInitializeTracking:](v2, "setSecondsToInitializeTracking:", v3);
  return v2;
}

void sub_20E87CF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

AppleCV3DSchemaRelocalizationSucceeded *sub_20E87CF2C(const void **a1)
{
  AppleCV3DSchemaRelocalizationSucceeded *v2;
  int v3;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v8;
  size_t v9;
  size_t v11;
  int v12;
  double v14;

  v2 = objc_alloc_init(AppleCV3DSchemaRelocalizationSucceeded);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (unint64_t)a1[1];
  if (v3 >= 0)
    v5 = a1;
  else
    v5 = *a1;
  if (v4 >= 5)
    v6 = 5;
  else
    v6 = v4;
  if (!memcmp(v5, "FREAK", v6) && v4 == 5)
  {
    v8 = 1;
  }
  else
  {
    v8 = 2;
    if (v4 >= 2)
      v9 = 2;
    else
      v9 = v4;
    if (memcmp(v5, "ML", v9) || v4 != 2)
    {
      if (v4 >= 4)
        v11 = 4;
      else
        v11 = v4;
      v12 = memcmp(v5, "Both", v11);
      if (v4 == 4 && v12 == 0)
        v8 = 3;
      else
        v8 = 0;
    }
  }
  -[AppleCV3DSchemaRelocalizationSucceeded setDescriptorType:](v2, "setDescriptorType:", v8);
  -[AppleCV3DSchemaRelocalizationSucceeded setLocalizedSubmapId:](v2, "setLocalizedSubmapId:", a1[3]);
  LODWORD(v14) = *((_DWORD *)a1 + 8);
  -[AppleCV3DSchemaRelocalizationSucceeded setTimeToLocalizationInSecond:](v2, "setTimeToLocalizationInSecond:", v14);
  return v2;
}

void sub_20E87D02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_20E87D0C4(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        goto LABEL_13;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v41 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v41 & 0x7F) << 7;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_13;
      v42 = *v4;
      v43 = *(_QWORD *)(a2 + v42);
      v44 = v43 + 1;
      if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v45 = *(char *)(*(_QWORD *)(a2 + *v11) + v43);
      *(_QWORD *)(a2 + v42) = v44;
      v15 |= (unint64_t)(v45 & 0x7F) << 14;
      if ((v45 & 0x80000000) == 0)
        goto LABEL_13;
      v46 = *v4;
      v47 = *(_QWORD *)(a2 + v46);
      v48 = v47 + 1;
      if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v49 = *(char *)(*(_QWORD *)(a2 + *v11) + v47);
      *(_QWORD *)(a2 + v46) = v48;
      v15 |= (unint64_t)(v49 & 0x7F) << 21;
      if ((v49 & 0x80000000) == 0)
        goto LABEL_13;
      v50 = *v4;
      v51 = *(_QWORD *)(a2 + v50);
      v52 = v51 + 1;
      if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v53 = *(char *)(*(_QWORD *)(a2 + *v11) + v51);
      *(_QWORD *)(a2 + v50) = v52;
      v15 |= (unint64_t)(v53 & 0x7F) << 28;
      if ((v53 & 0x80000000) == 0)
        goto LABEL_13;
      v54 = *v4;
      v55 = *(_QWORD *)(a2 + v54);
      v56 = v55 + 1;
      if (v55 == -1 || v56 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v57 = *(char *)(*(_QWORD *)(a2 + *v11) + v55);
      *(_QWORD *)(a2 + v54) = v56;
      if ((v57 & 0x80000000) == 0)
        goto LABEL_13;
      v58 = *v4;
      v59 = *(_QWORD *)(a2 + v58);
      v60 = v59 + 1;
      if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v61 = *(char *)(*(_QWORD *)(a2 + *v11) + v59);
      *(_QWORD *)(a2 + v58) = v60;
      if ((v61 & 0x80000000) == 0)
        goto LABEL_13;
      v62 = *v4;
      v63 = *(_QWORD *)(a2 + v62);
      v64 = v63 + 1;
      if (v63 == -1 || v64 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v65 = *(char *)(*(_QWORD *)(a2 + *v11) + v63);
      *(_QWORD *)(a2 + v62) = v64;
      if ((v65 & 0x80000000) == 0)
        goto LABEL_13;
      v66 = *v4;
      v67 = *(_QWORD *)(a2 + v66);
      v68 = v67 + 1;
      if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v69 = *(char *)(*(_QWORD *)(a2 + *v11) + v67);
      *(_QWORD *)(a2 + v66) = v68;
      if ((v69 & 0x80000000) == 0)
        goto LABEL_13;
      v70 = *v4;
      v71 = *(_QWORD *)(a2 + v70);
      v72 = v71 + 1;
      if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
LABEL_13:
        v19 = *v9;
        if (*(_BYTE *)(a2 + v19))
        {
          v15 = 0;
          v20 = 1;
        }
        else
        {
          v20 = (v15 & 7) == 4;
        }
        if (v20)
          return *(_BYTE *)(a2 + *v9) == 0;
        goto LABEL_17;
      }
      v73 = *(char *)(*(_QWORD *)(a2 + *v11) + v71);
      *(_QWORD *)(a2 + v70) = v72;
      if ((v73 & 0x80000000) == 0)
        goto LABEL_13;
      v15 = 0;
      v19 = *v9;
      if (*(_BYTE *)(a2 + v19))
        return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
      v21 = (_BYTE *)(a2 + v19);
      switch((v15 >> 3))
      {
        case 1u:
          v22 = *v4;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setLuxLevel:", a3);
          goto LABEL_4;
        case 2u:
          v35 = *v4;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setSmudgeLevel:", a3);
          goto LABEL_4;
        case 3u:
          v26 = *v4;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setPrewittLevel:", a3);
          goto LABEL_4;
        case 4u:
          v28 = *v4;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setImuAcceleration:", a3);
          goto LABEL_4;
        case 5u:
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setImuAngularVelocityX:", a3);
          goto LABEL_4;
        case 6u:
          v37 = *v4;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setImuAngularVelocityY:", a3);
          goto LABEL_4;
        case 7u:
          v39 = *v4;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + *v7))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 4;
          }
          else
          {
            *v21 = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setImuAngularVelocityZ:", a3);
          goto LABEL_4;
        case 8u:
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v7))
          {
            v33 = 0;
LABEL_33:
            *v21 = 1;
            goto LABEL_34;
          }
          v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v31);
          v33 = v74 & 0x7F;
          *(_QWORD *)(a2 + v30) = v32;
          if (v74 < 0)
          {
            v75 = *v4;
            v76 = *(_QWORD *)(a2 + v75);
            v77 = v76 + 1;
            if (v76 == -1 || v77 > *(_QWORD *)(a2 + *v7))
            {
LABEL_83:
              v21 = (_BYTE *)(a2 + *v9);
              goto LABEL_33;
            }
            v78 = *(char *)(*(_QWORD *)(a2 + *v11) + v76);
            *(_QWORD *)(a2 + v75) = v77;
            v33 |= (unint64_t)(v78 & 0x7F) << 7;
            if (v78 < 0)
            {
              v79 = *v4;
              v80 = *(_QWORD *)(a2 + v79);
              v81 = v80 + 1;
              if (v80 == -1 || v81 > *(_QWORD *)(a2 + *v7))
                goto LABEL_83;
              v82 = *(char *)(*(_QWORD *)(a2 + *v11) + v80);
              *(_QWORD *)(a2 + v79) = v81;
              v33 |= (unint64_t)(v82 & 0x7F) << 14;
              if (v82 < 0)
              {
                v83 = *v4;
                v84 = *(_QWORD *)(a2 + v83);
                v85 = v84 + 1;
                if (v84 == -1 || v85 > *(_QWORD *)(a2 + *v7))
                  goto LABEL_83;
                v86 = *(char *)(*(_QWORD *)(a2 + *v11) + v84);
                *(_QWORD *)(a2 + v83) = v85;
                v33 |= (unint64_t)(v86 & 0x7F) << 21;
                if (v86 < 0)
                {
                  v87 = *v4;
                  v88 = *(_QWORD *)(a2 + v87);
                  v89 = v88 + 1;
                  if (v88 == -1 || v89 > *(_QWORD *)(a2 + *v7))
                    goto LABEL_83;
                  v90 = *(char *)(*(_QWORD *)(a2 + *v11) + v88);
                  *(_QWORD *)(a2 + v87) = v89;
                  v33 |= (unint64_t)(v90 & 0x7F) << 28;
                  if (v90 < 0)
                  {
                    v91 = *v4;
                    v92 = *(_QWORD *)(a2 + v91);
                    v93 = v92 + 1;
                    if (v92 == -1 || v93 > *(_QWORD *)(a2 + *v7))
                      goto LABEL_83;
                    v94 = *(char *)(*(_QWORD *)(a2 + *v11) + v92);
                    *(_QWORD *)(a2 + v91) = v93;
                    if (v94 < 0)
                    {
                      v95 = *v4;
                      v96 = *(_QWORD *)(a2 + v95);
                      v97 = v96 + 1;
                      if (v96 == -1 || v97 > *(_QWORD *)(a2 + *v7))
                        goto LABEL_83;
                      v98 = *(char *)(*(_QWORD *)(a2 + *v11) + v96);
                      *(_QWORD *)(a2 + v95) = v97;
                      if (v98 < 0)
                      {
                        v99 = *v4;
                        v100 = *(_QWORD *)(a2 + v99);
                        v101 = v100 + 1;
                        if (v100 == -1 || v101 > *(_QWORD *)(a2 + *v7))
                          goto LABEL_83;
                        v102 = *(char *)(*(_QWORD *)(a2 + *v11) + v100);
                        *(_QWORD *)(a2 + v99) = v101;
                        if (v102 < 0)
                        {
                          v103 = *v4;
                          v104 = *(_QWORD *)(a2 + v103);
                          v105 = v104 + 1;
                          if (v104 == -1 || v105 > *(_QWORD *)(a2 + *v7))
                            goto LABEL_83;
                          v106 = *(char *)(*(_QWORD *)(a2 + *v11) + v104);
                          *(_QWORD *)(a2 + v103) = v105;
                          if (v106 < 0)
                          {
                            v107 = *v4;
                            v108 = *(_QWORD *)(a2 + v107);
                            v109 = v108 + 1;
                            if (v108 == -1 || v109 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_83;
                            v110 = *(char *)(*(_QWORD *)(a2 + *v11) + v108);
                            *(_QWORD *)(a2 + v107) = v109;
                            if (v110 < 0)
                            {
                              v34 = 0;
                              goto LABEL_37;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_34:
          if (*(_BYTE *)(a2 + *v9))
            v34 = 0;
          else
            v34 = v33;
LABEL_37:
          objc_msgSend(a1, "setEnvironmentType:", v34);
LABEL_4:
          v5 = *v4;
          v6 = *(_QWORD *)(a2 + v5);
          v8 = *(_QWORD *)(a2 + *v7);
          if (v6 >= v8)
            return *(_BYTE *)(a2 + *v9) == 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if ((_DWORD)result)
            goto LABEL_4;
          return result;
      }
    }
    v15 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

BOOL sub_20E87E598(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaContextSnapshot *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaContextSnapshot);
        if (!PBReaderPlaceMark() || (sub_20E87D0C4(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E87EFF0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  v6 = (int *)MEMORY[0x24BE7AF30];
  while (1)
  {
    v7 = *v3;
    v8 = *(_QWORD *)(a2 + v7);
    v9 = *(unsigned __int8 *)(a2 + *v5);
    if (v8 >= *(_QWORD *)(a2 + *v4))
      return v9 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v9 = 1;
      return v9 == 0;
    }
    v10 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v8);
    *(_QWORD *)(a2 + v7) = v8 + 1;
    v11 = v10 & 0x7F;
    if ((v10 & 0x80) == 0)
      goto LABEL_8;
    v12 = *v3;
    v13 = *(_QWORD *)(a2 + v12);
    v14 = v13 + 1;
    if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v4))
    {
LABEL_7:
      *(_BYTE *)(a2 + *v5) = 1;
      goto LABEL_8;
    }
    v16 = *(char *)(*(_QWORD *)(a2 + *v6) + v13);
    *(_QWORD *)(a2 + v12) = v14;
    v11 |= (v16 & 0x7F) << 7;
    if (v16 < 0)
    {
      v17 = *v3;
      v18 = *(_QWORD *)(a2 + v17);
      v19 = v18 + 1;
      if (v18 == -1 || v19 > *(_QWORD *)(a2 + *v4))
        goto LABEL_7;
      v20 = *(char *)(*(_QWORD *)(a2 + *v6) + v18);
      *(_QWORD *)(a2 + v17) = v19;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
          goto LABEL_7;
        v24 = *(char *)(*(_QWORD *)(a2 + *v6) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            goto LABEL_7;
          v28 = *(char *)(*(_QWORD *)(a2 + *v6) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
              goto LABEL_7;
            v32 = *(char *)(*(_QWORD *)(a2 + *v6) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
                goto LABEL_7;
              v36 = *(char *)(*(_QWORD *)(a2 + *v6) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
                  goto LABEL_7;
                v40 = *(char *)(*(_QWORD *)(a2 + *v6) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_7;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v6) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
                      goto LABEL_7;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v6) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v9 = *(unsigned __int8 *)(a2 + *v5);
                      if (*(_BYTE *)(a2 + *v5))
                        return v9 == 0;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_8:
    v9 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v15 = 1;
    else
      v15 = (v11 & 7) == 4;
    if (v15)
      return v9 == 0;
LABEL_12:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

BOOL sub_20E87F4E0(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaDoff *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaDoff);
        v19 = PBReaderPlaceMark();
        if (!(_DWORD)v19 || !sub_20E87EFF0(v19, a2))
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E880120(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaDon *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaDon);
        v19 = PBReaderPlaceMark();
        if (!(_DWORD)v19 || !sub_20E87EFF0(v19, a2))
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E880BA4(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        goto LABEL_13;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
        goto LABEL_13;
      }
      v43 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v43 & 0x7F) << 7;
      if (v43 < 0)
      {
        v44 = *v4;
        v45 = *(_QWORD *)(a2 + v44);
        v46 = v45 + 1;
        if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v7))
          goto LABEL_10;
        v47 = *(char *)(*(_QWORD *)(a2 + *v11) + v45);
        *(_QWORD *)(a2 + v44) = v46;
        v15 |= (unint64_t)(v47 & 0x7F) << 14;
        if (v47 < 0)
        {
          v48 = *v4;
          v49 = *(_QWORD *)(a2 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v7))
            goto LABEL_10;
          v51 = *(char *)(*(_QWORD *)(a2 + *v11) + v49);
          *(_QWORD *)(a2 + v48) = v50;
          v15 |= (unint64_t)(v51 & 0x7F) << 21;
          if (v51 < 0)
          {
            v52 = *v4;
            v53 = *(_QWORD *)(a2 + v52);
            v54 = v53 + 1;
            if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v7))
              goto LABEL_10;
            v55 = *(char *)(*(_QWORD *)(a2 + *v11) + v53);
            *(_QWORD *)(a2 + v52) = v54;
            v15 |= (unint64_t)(v55 & 0x7F) << 28;
            if (v55 < 0)
            {
              v56 = *v4;
              v57 = *(_QWORD *)(a2 + v56);
              v58 = v57 + 1;
              if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v7))
                goto LABEL_10;
              v59 = *(char *)(*(_QWORD *)(a2 + *v11) + v57);
              *(_QWORD *)(a2 + v56) = v58;
              if (v59 < 0)
              {
                v60 = *v4;
                v61 = *(_QWORD *)(a2 + v60);
                v62 = v61 + 1;
                if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v7))
                  goto LABEL_10;
                v63 = *(char *)(*(_QWORD *)(a2 + *v11) + v61);
                *(_QWORD *)(a2 + v60) = v62;
                if (v63 < 0)
                {
                  v64 = *v4;
                  v65 = *(_QWORD *)(a2 + v64);
                  v66 = v65 + 1;
                  if (v65 == -1 || v66 > *(_QWORD *)(a2 + *v7))
                    goto LABEL_10;
                  v67 = *(char *)(*(_QWORD *)(a2 + *v11) + v65);
                  *(_QWORD *)(a2 + v64) = v66;
                  if (v67 < 0)
                  {
                    v68 = *v4;
                    v69 = *(_QWORD *)(a2 + v68);
                    v70 = v69 + 1;
                    if (v69 == -1 || v70 > *(_QWORD *)(a2 + *v7))
                      goto LABEL_10;
                    v71 = *(char *)(*(_QWORD *)(a2 + *v11) + v69);
                    *(_QWORD *)(a2 + v68) = v70;
                    if (v71 < 0)
                    {
                      v72 = *v4;
                      v73 = *(_QWORD *)(a2 + v72);
                      v74 = v73 + 1;
                      if (v73 == -1 || v74 > *(_QWORD *)(a2 + *v7))
                        goto LABEL_10;
                      v75 = *(char *)(*(_QWORD *)(a2 + *v11) + v73);
                      *(_QWORD *)(a2 + v72) = v74;
                      if (v75 < 0)
                      {
                        v15 = 0;
                        v19 = *v9;
                        if (*(_BYTE *)(a2 + v19))
                          return *(_BYTE *)(a2 + *v9) == 0;
                        goto LABEL_17;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_13:
      v19 = *v9;
      if (*(_BYTE *)(a2 + v19))
      {
        v15 = 0;
        v20 = 1;
      }
      else
      {
        v20 = (v15 & 7) == 4;
      }
      if (v20)
        return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
      v21 = v15 >> 3;
      v22 = (_BYTE *)(a2 + v19);
      if ((v15 >> 3) == 1)
      {
        v30 = *v4;
        v31 = *(_QWORD *)(a2 + v30);
        v32 = v31 + 1;
        if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v7))
        {
          v33 = 0;
          goto LABEL_34;
        }
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v31);
        v33 = v35 & 0x7F;
        *(_QWORD *)(a2 + v30) = v32;
        if ((v35 & 0x80) == 0)
          goto LABEL_35;
        v36 = *v4;
        v37 = *(_QWORD *)(a2 + v36);
        v38 = v37 + 1;
        if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v7))
          goto LABEL_44;
        v76 = *(char *)(*(_QWORD *)(a2 + *v11) + v37);
        *(_QWORD *)(a2 + v36) = v38;
        v33 |= (unint64_t)(v76 & 0x7F) << 7;
        if ((v76 & 0x80000000) == 0)
          goto LABEL_35;
        v77 = *v4;
        v78 = *(_QWORD *)(a2 + v77);
        v79 = v78 + 1;
        if (v78 != -1 && v79 <= *(_QWORD *)(a2 + *v7))
        {
          v80 = *(char *)(*(_QWORD *)(a2 + *v11) + v78);
          *(_QWORD *)(a2 + v77) = v79;
          v33 |= (unint64_t)(v80 & 0x7F) << 14;
          if ((v80 & 0x80000000) == 0)
            goto LABEL_35;
          v81 = *v4;
          v82 = *(_QWORD *)(a2 + v81);
          v83 = v82 + 1;
          if (v82 != -1 && v83 <= *(_QWORD *)(a2 + *v7))
          {
            v84 = *(char *)(*(_QWORD *)(a2 + *v11) + v82);
            *(_QWORD *)(a2 + v81) = v83;
            v33 |= (unint64_t)(v84 & 0x7F) << 21;
            if ((v84 & 0x80000000) == 0)
              goto LABEL_35;
            v85 = *v4;
            v86 = *(_QWORD *)(a2 + v85);
            v87 = v86 + 1;
            if (v86 != -1 && v87 <= *(_QWORD *)(a2 + *v7))
            {
              v88 = *(char *)(*(_QWORD *)(a2 + *v11) + v86);
              *(_QWORD *)(a2 + v85) = v87;
              v33 |= (unint64_t)(v88 & 0x7F) << 28;
              if ((v88 & 0x80000000) == 0)
                goto LABEL_35;
              v89 = *v4;
              v90 = *(_QWORD *)(a2 + v89);
              v91 = v90 + 1;
              if (v90 != -1 && v91 <= *(_QWORD *)(a2 + *v7))
              {
                v92 = *(char *)(*(_QWORD *)(a2 + *v11) + v90);
                *(_QWORD *)(a2 + v89) = v91;
                if ((v92 & 0x80000000) == 0)
                  goto LABEL_35;
                v93 = *v4;
                v94 = *(_QWORD *)(a2 + v93);
                v95 = v94 + 1;
                if (v94 != -1 && v95 <= *(_QWORD *)(a2 + *v7))
                {
                  v96 = *(char *)(*(_QWORD *)(a2 + *v11) + v94);
                  *(_QWORD *)(a2 + v93) = v95;
                  if ((v96 & 0x80000000) == 0)
                    goto LABEL_35;
                  v97 = *v4;
                  v98 = *(_QWORD *)(a2 + v97);
                  v99 = v98 + 1;
                  if (v98 != -1 && v99 <= *(_QWORD *)(a2 + *v7))
                  {
                    v100 = *(char *)(*(_QWORD *)(a2 + *v11) + v98);
                    *(_QWORD *)(a2 + v97) = v99;
                    if ((v100 & 0x80000000) == 0)
                      goto LABEL_35;
                    v101 = *v4;
                    v102 = *(_QWORD *)(a2 + v101);
                    v103 = v102 + 1;
                    if (v102 != -1 && v103 <= *(_QWORD *)(a2 + *v7))
                    {
                      v104 = *(char *)(*(_QWORD *)(a2 + *v11) + v102);
                      *(_QWORD *)(a2 + v101) = v103;
                      if ((v104 & 0x80000000) == 0)
                        goto LABEL_35;
                      v105 = *v4;
                      v106 = *(_QWORD *)(a2 + v105);
                      v107 = v106 + 1;
                      if (v106 != -1 && v107 <= *(_QWORD *)(a2 + *v7))
                      {
                        v108 = *(char *)(*(_QWORD *)(a2 + *v11) + v106);
                        *(_QWORD *)(a2 + v105) = v107;
                        if (v108 < 0)
                        {
                          v34 = 0;
LABEL_38:
                          objc_msgSend(a1, "setDescriptorType:", v34);
                          goto LABEL_4;
                        }
LABEL_35:
                        if (*(_BYTE *)(a2 + *v9))
                          v34 = 0;
                        else
                          v34 = v33;
                        goto LABEL_38;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_44:
        v22 = (_BYTE *)(a2 + *v9);
LABEL_34:
        *v22 = 1;
        goto LABEL_35;
      }
      if ((_DWORD)v21 == 3)
      {
        v28 = *v4;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v7))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 4;
        }
        else
        {
          *v22 = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTimeToLocalizationInSecond:", a3);
        goto LABEL_4;
      }
      if ((_DWORD)v21 != 2)
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_4;
      }
      v23 = *v4;
      v24 = *(_QWORD *)(a2 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v7))
      {
        v26 = 0;
        goto LABEL_23;
      }
      v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v24);
      v26 = v39 & 0x7F;
      *(_QWORD *)(a2 + v23) = v25;
      if ((v39 & 0x80) == 0)
        goto LABEL_24;
      v40 = *v4;
      v41 = *(_QWORD *)(a2 + v40);
      v42 = v41 + 1;
      if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v109 = *(char *)(*(_QWORD *)(a2 + *v11) + v41);
      *(_QWORD *)(a2 + v40) = v42;
      v26 |= (unint64_t)(v109 & 0x7F) << 7;
      if ((v109 & 0x80000000) == 0)
        goto LABEL_24;
      v110 = *v4;
      v111 = *(_QWORD *)(a2 + v110);
      v112 = v111 + 1;
      if (v111 == -1 || v112 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v113 = *(char *)(*(_QWORD *)(a2 + *v11) + v111);
      *(_QWORD *)(a2 + v110) = v112;
      v26 |= (unint64_t)(v113 & 0x7F) << 14;
      if ((v113 & 0x80000000) == 0)
        goto LABEL_24;
      v114 = *v4;
      v115 = *(_QWORD *)(a2 + v114);
      v116 = v115 + 1;
      if (v115 == -1 || v116 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v117 = *(char *)(*(_QWORD *)(a2 + *v11) + v115);
      *(_QWORD *)(a2 + v114) = v116;
      v26 |= (unint64_t)(v117 & 0x7F) << 21;
      if ((v117 & 0x80000000) == 0)
        goto LABEL_24;
      v118 = *v4;
      v119 = *(_QWORD *)(a2 + v118);
      v120 = v119 + 1;
      if (v119 == -1 || v120 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v121 = *(char *)(*(_QWORD *)(a2 + *v11) + v119);
      *(_QWORD *)(a2 + v118) = v120;
      v26 |= (unint64_t)(v121 & 0x7F) << 28;
      if ((v121 & 0x80000000) == 0)
        goto LABEL_24;
      v122 = *v4;
      v123 = *(_QWORD *)(a2 + v122);
      v124 = v123 + 1;
      if (v123 == -1 || v124 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v125 = *(char *)(*(_QWORD *)(a2 + *v11) + v123);
      *(_QWORD *)(a2 + v122) = v124;
      v26 |= (unint64_t)(v125 & 0x7F) << 35;
      if ((v125 & 0x80000000) == 0)
        goto LABEL_24;
      v126 = *v4;
      v127 = *(_QWORD *)(a2 + v126);
      v128 = v127 + 1;
      if (v127 == -1 || v128 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v129 = *(char *)(*(_QWORD *)(a2 + *v11) + v127);
      *(_QWORD *)(a2 + v126) = v128;
      v26 |= (unint64_t)(v129 & 0x7F) << 42;
      if ((v129 & 0x80000000) == 0)
        goto LABEL_24;
      v130 = *v4;
      v131 = *(_QWORD *)(a2 + v130);
      v132 = v131 + 1;
      if (v131 == -1 || v132 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v133 = *(char *)(*(_QWORD *)(a2 + *v11) + v131);
      *(_QWORD *)(a2 + v130) = v132;
      v26 |= (unint64_t)(v133 & 0x7F) << 49;
      if ((v133 & 0x80000000) == 0)
        goto LABEL_24;
      v134 = *v4;
      v135 = *(_QWORD *)(a2 + v134);
      v136 = v135 + 1;
      if (v135 == -1 || v136 > *(_QWORD *)(a2 + *v7))
        goto LABEL_48;
      v137 = *(char *)(*(_QWORD *)(a2 + *v11) + v135);
      *(_QWORD *)(a2 + v134) = v136;
      v26 |= (unint64_t)(v137 & 0x7F) << 56;
      if ((v137 & 0x80000000) == 0)
        goto LABEL_24;
      v138 = *v4;
      v139 = *(_QWORD *)(a2 + v138);
      v140 = v139 + 1;
      if (v139 == -1 || v140 > *(_QWORD *)(a2 + *v7))
      {
LABEL_48:
        v22 = (_BYTE *)(a2 + *v9);
LABEL_23:
        *v22 = 1;
LABEL_24:
        if (*(_BYTE *)(a2 + *v9))
          v27 = 0;
        else
          v27 = v26;
        goto LABEL_27;
      }
      v141 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v11) + v139);
      *(_QWORD *)(a2 + v138) = v140;
      if ((v141 & 0x80) == 0)
      {
        v26 |= v141 << 63;
        goto LABEL_24;
      }
      v27 = 0;
LABEL_27:
      objc_msgSend(a1, "setLocalizedSubmapId:", v27);
LABEL_4:
      v5 = *v4;
      v6 = *(_QWORD *)(a2 + v5);
      v8 = *(_QWORD *)(a2 + *v7);
      if (v6 >= v8)
        return *(_BYTE *)(a2 + *v9) == 0;
    }
    v15 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

BOOL sub_20E881A30(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaRelocalizationSucceeded *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaRelocalizationSucceeded);
        if (!PBReaderPlaceMark() || (sub_20E880BA4(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E8824B8(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t result;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_13;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      v17 = v16 + 1;
      if (v16 == -1 || v17 > *(_QWORD *)(a2 + *v6))
      {
LABEL_10:
        v12 = (_BYTE *)(a2 + *v8);
LABEL_12:
        *v12 = 1;
        goto LABEL_13;
      }
      v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v48 & 0x7F) << 7;
      if (v48 < 0)
      {
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        v51 = v50 + 1;
        if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
          goto LABEL_10;
        v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
        *(_QWORD *)(a2 + v49) = v51;
        v14 |= (unint64_t)(v52 & 0x7F) << 14;
        if (v52 < 0)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v6))
            goto LABEL_10;
          v56 = *(char *)(*(_QWORD *)(a2 + *v10) + v54);
          *(_QWORD *)(a2 + v53) = v55;
          v14 |= (unint64_t)(v56 & 0x7F) << 21;
          if (v56 < 0)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v6))
              goto LABEL_10;
            v60 = *(char *)(*(_QWORD *)(a2 + *v10) + v58);
            *(_QWORD *)(a2 + v57) = v59;
            v14 |= (unint64_t)(v60 & 0x7F) << 28;
            if (v60 < 0)
            {
              v61 = *v3;
              v62 = *(_QWORD *)(a2 + v61);
              v63 = v62 + 1;
              if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v6))
                goto LABEL_10;
              v64 = *(char *)(*(_QWORD *)(a2 + *v10) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              if (v64 < 0)
              {
                v65 = *v3;
                v66 = *(_QWORD *)(a2 + v65);
                v67 = v66 + 1;
                if (v66 == -1 || v67 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_10;
                v68 = *(char *)(*(_QWORD *)(a2 + *v10) + v66);
                *(_QWORD *)(a2 + v65) = v67;
                if (v68 < 0)
                {
                  v69 = *v3;
                  v70 = *(_QWORD *)(a2 + v69);
                  v71 = v70 + 1;
                  if (v70 == -1 || v71 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_10;
                  v72 = *(char *)(*(_QWORD *)(a2 + *v10) + v70);
                  *(_QWORD *)(a2 + v69) = v71;
                  if (v72 < 0)
                  {
                    v73 = *v3;
                    v74 = *(_QWORD *)(a2 + v73);
                    v75 = v74 + 1;
                    if (v74 == -1 || v75 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_10;
                    v76 = *(char *)(*(_QWORD *)(a2 + *v10) + v74);
                    *(_QWORD *)(a2 + v73) = v75;
                    if (v76 < 0)
                    {
                      v77 = *v3;
                      v78 = *(_QWORD *)(a2 + v77);
                      v79 = v78 + 1;
                      if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_10;
                      v80 = *(char *)(*(_QWORD *)(a2 + *v10) + v78);
                      *(_QWORD *)(a2 + v77) = v79;
                      if (v80 < 0)
                      {
                        v14 = 0;
                        v18 = *v8;
                        if (*(_BYTE *)(a2 + v18))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_17;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_13:
      v18 = *v8;
      if (*(_BYTE *)(a2 + v18))
      {
        v14 = 0;
        v19 = 1;
      }
      else
      {
        v19 = (v14 & 7) == 4;
      }
      if (v19)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_17:
      v20 = v14 >> 3;
      v21 = (_BYTE *)(a2 + v18);
      if ((v14 >> 3) == 1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        v33 = v32 + 1;
        if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v6))
        {
          v34 = 0;
          goto LABEL_38;
        }
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v32);
        v34 = v40 & 0x7F;
        *(_QWORD *)(a2 + v31) = v33;
        if (v40 < 0)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
            goto LABEL_50;
          v114 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
          *(_QWORD *)(a2 + v41) = v43;
          v34 |= (unint64_t)(v114 & 0x7F) << 7;
          if (v114 < 0)
          {
            v115 = *v3;
            v116 = *(_QWORD *)(a2 + v115);
            v117 = v116 + 1;
            if (v116 == -1 || v117 > *(_QWORD *)(a2 + *v6))
              goto LABEL_50;
            v118 = *(char *)(*(_QWORD *)(a2 + *v10) + v116);
            *(_QWORD *)(a2 + v115) = v117;
            v34 |= (unint64_t)(v118 & 0x7F) << 14;
            if (v118 < 0)
            {
              v119 = *v3;
              v120 = *(_QWORD *)(a2 + v119);
              v121 = v120 + 1;
              if (v120 == -1 || v121 > *(_QWORD *)(a2 + *v6))
                goto LABEL_50;
              v122 = *(char *)(*(_QWORD *)(a2 + *v10) + v120);
              *(_QWORD *)(a2 + v119) = v121;
              v34 |= (unint64_t)(v122 & 0x7F) << 21;
              if (v122 < 0)
              {
                v123 = *v3;
                v124 = *(_QWORD *)(a2 + v123);
                v125 = v124 + 1;
                if (v124 == -1 || v125 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_50;
                v126 = *(char *)(*(_QWORD *)(a2 + *v10) + v124);
                *(_QWORD *)(a2 + v123) = v125;
                v34 |= (unint64_t)(v126 & 0x7F) << 28;
                if (v126 < 0)
                {
                  v127 = *v3;
                  v128 = *(_QWORD *)(a2 + v127);
                  v129 = v128 + 1;
                  if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_50;
                  v130 = *(char *)(*(_QWORD *)(a2 + *v10) + v128);
                  *(_QWORD *)(a2 + v127) = v129;
                  v34 |= (unint64_t)(v130 & 0x7F) << 35;
                  if (v130 < 0)
                  {
                    v131 = *v3;
                    v132 = *(_QWORD *)(a2 + v131);
                    v133 = v132 + 1;
                    if (v132 == -1 || v133 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_50;
                    v134 = *(char *)(*(_QWORD *)(a2 + *v10) + v132);
                    *(_QWORD *)(a2 + v131) = v133;
                    v34 |= (unint64_t)(v134 & 0x7F) << 42;
                    if (v134 < 0)
                    {
                      v135 = *v3;
                      v136 = *(_QWORD *)(a2 + v135);
                      v137 = v136 + 1;
                      if (v136 == -1 || v137 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_50;
                      v138 = *(char *)(*(_QWORD *)(a2 + *v10) + v136);
                      *(_QWORD *)(a2 + v135) = v137;
                      v34 |= (unint64_t)(v138 & 0x7F) << 49;
                      if (v138 < 0)
                      {
                        v139 = *v3;
                        v140 = *(_QWORD *)(a2 + v139);
                        v141 = v140 + 1;
                        if (v140 == -1 || v141 > *(_QWORD *)(a2 + *v6))
                          goto LABEL_50;
                        v142 = *(char *)(*(_QWORD *)(a2 + *v10) + v140);
                        *(_QWORD *)(a2 + v139) = v141;
                        v34 |= (unint64_t)(v142 & 0x7F) << 56;
                        if (v142 < 0)
                        {
                          v143 = *v3;
                          v144 = *(_QWORD *)(a2 + v143);
                          v145 = v144 + 1;
                          if (v144 != -1 && v145 <= *(_QWORD *)(a2 + *v6))
                          {
                            v146 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v144);
                            *(_QWORD *)(a2 + v143) = v145;
                            if ((v146 & 0x80) == 0)
                            {
                              v34 |= v146 << 63;
                              goto LABEL_39;
                            }
                            v35 = 0;
LABEL_42:
                            objc_msgSend(a1, "setSubmapId:", v35);
                            goto LABEL_4;
                          }
LABEL_50:
                          v21 = (_BYTE *)(a2 + *v8);
LABEL_38:
                          *v21 = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_39:
        if (*(_BYTE *)(a2 + *v8))
          v35 = 0;
        else
          v35 = v34;
        goto LABEL_42;
      }
      if ((_DWORD)v20 == 2)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        v29 = v28 + 1;
        if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v6))
        {
          v30 = 0;
          goto LABEL_31;
        }
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v28);
        v30 = v36 & 0x7F;
        *(_QWORD *)(a2 + v27) = v29;
        if (v36 < 0)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
            goto LABEL_46;
          v81 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
          *(_QWORD *)(a2 + v37) = v39;
          v30 |= (unint64_t)(v81 & 0x7F) << 7;
          if (v81 < 0)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v6))
              goto LABEL_46;
            v85 = *(char *)(*(_QWORD *)(a2 + *v10) + v83);
            *(_QWORD *)(a2 + v82) = v84;
            v30 |= (unint64_t)(v85 & 0x7F) << 14;
            if (v85 < 0)
            {
              v86 = *v3;
              v87 = *(_QWORD *)(a2 + v86);
              v88 = v87 + 1;
              if (v87 == -1 || v88 > *(_QWORD *)(a2 + *v6))
                goto LABEL_46;
              v89 = *(char *)(*(_QWORD *)(a2 + *v10) + v87);
              *(_QWORD *)(a2 + v86) = v88;
              v30 |= (unint64_t)(v89 & 0x7F) << 21;
              if (v89 < 0)
              {
                v90 = *v3;
                v91 = *(_QWORD *)(a2 + v90);
                v92 = v91 + 1;
                if (v91 == -1 || v92 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_46;
                v93 = *(char *)(*(_QWORD *)(a2 + *v10) + v91);
                *(_QWORD *)(a2 + v90) = v92;
                v30 |= (unint64_t)(v93 & 0x7F) << 28;
                if (v93 < 0)
                {
                  v94 = *v3;
                  v95 = *(_QWORD *)(a2 + v94);
                  v96 = v95 + 1;
                  if (v95 == -1 || v96 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_46;
                  v97 = *(char *)(*(_QWORD *)(a2 + *v10) + v95);
                  *(_QWORD *)(a2 + v94) = v96;
                  v30 |= (unint64_t)(v97 & 0x7F) << 35;
                  if (v97 < 0)
                  {
                    v98 = *v3;
                    v99 = *(_QWORD *)(a2 + v98);
                    v100 = v99 + 1;
                    if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_46;
                    v101 = *(char *)(*(_QWORD *)(a2 + *v10) + v99);
                    *(_QWORD *)(a2 + v98) = v100;
                    v30 |= (unint64_t)(v101 & 0x7F) << 42;
                    if (v101 < 0)
                    {
                      v102 = *v3;
                      v103 = *(_QWORD *)(a2 + v102);
                      v104 = v103 + 1;
                      if (v103 == -1 || v104 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_46;
                      v105 = *(char *)(*(_QWORD *)(a2 + *v10) + v103);
                      *(_QWORD *)(a2 + v102) = v104;
                      v30 |= (unint64_t)(v105 & 0x7F) << 49;
                      if (v105 < 0)
                      {
                        v106 = *v3;
                        v107 = *(_QWORD *)(a2 + v106);
                        v108 = v107 + 1;
                        if (v107 == -1 || v108 > *(_QWORD *)(a2 + *v6))
                          goto LABEL_46;
                        v109 = *(char *)(*(_QWORD *)(a2 + *v10) + v107);
                        *(_QWORD *)(a2 + v106) = v108;
                        v30 |= (unint64_t)(v109 & 0x7F) << 56;
                        if (v109 < 0)
                        {
                          v110 = *v3;
                          v111 = *(_QWORD *)(a2 + v110);
                          v112 = v111 + 1;
                          if (v111 != -1 && v112 <= *(_QWORD *)(a2 + *v6))
                          {
                            v113 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v111);
                            *(_QWORD *)(a2 + v110) = v112;
                            if ((v113 & 0x80) == 0)
                            {
                              v30 |= v113 << 63;
                              goto LABEL_32;
                            }
                            v30 = 0;
LABEL_34:
                            objc_msgSend(a1, "setIsLocationAttached:", v30 != 0);
                            goto LABEL_4;
                          }
LABEL_46:
                          v21 = (_BYTE *)(a2 + *v8);
LABEL_31:
                          *v21 = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_32:
        if (*(_BYTE *)(a2 + *v8))
          v30 = 0;
        goto LABEL_34;
      }
      if ((_DWORD)v20 != 3)
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_4;
      }
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v6))
      {
        v25 = 0;
        goto LABEL_23;
      }
      v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v23);
      v25 = v44 & 0x7F;
      *(_QWORD *)(a2 + v22) = v24;
      if ((v44 & 0x80) == 0)
        goto LABEL_24;
      v45 = *v3;
      v46 = *(_QWORD *)(a2 + v45);
      v47 = v46 + 1;
      if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v147 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
      *(_QWORD *)(a2 + v45) = v47;
      v25 |= (unint64_t)(v147 & 0x7F) << 7;
      if ((v147 & 0x80000000) == 0)
        goto LABEL_24;
      v148 = *v3;
      v149 = *(_QWORD *)(a2 + v148);
      v150 = v149 + 1;
      if (v149 == -1 || v150 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v151 = *(char *)(*(_QWORD *)(a2 + *v10) + v149);
      *(_QWORD *)(a2 + v148) = v150;
      v25 |= (unint64_t)(v151 & 0x7F) << 14;
      if ((v151 & 0x80000000) == 0)
        goto LABEL_24;
      v152 = *v3;
      v153 = *(_QWORD *)(a2 + v152);
      v154 = v153 + 1;
      if (v153 == -1 || v154 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v155 = *(char *)(*(_QWORD *)(a2 + *v10) + v153);
      *(_QWORD *)(a2 + v152) = v154;
      v25 |= (unint64_t)(v155 & 0x7F) << 21;
      if ((v155 & 0x80000000) == 0)
        goto LABEL_24;
      v156 = *v3;
      v157 = *(_QWORD *)(a2 + v156);
      v158 = v157 + 1;
      if (v157 == -1 || v158 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v159 = *(char *)(*(_QWORD *)(a2 + *v10) + v157);
      *(_QWORD *)(a2 + v156) = v158;
      v25 |= (unint64_t)(v159 & 0x7F) << 28;
      if ((v159 & 0x80000000) == 0)
        goto LABEL_24;
      v160 = *v3;
      v161 = *(_QWORD *)(a2 + v160);
      v162 = v161 + 1;
      if (v161 == -1 || v162 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v163 = *(char *)(*(_QWORD *)(a2 + *v10) + v161);
      *(_QWORD *)(a2 + v160) = v162;
      v25 |= (unint64_t)(v163 & 0x7F) << 35;
      if ((v163 & 0x80000000) == 0)
        goto LABEL_24;
      v164 = *v3;
      v165 = *(_QWORD *)(a2 + v164);
      v166 = v165 + 1;
      if (v165 == -1 || v166 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v167 = *(char *)(*(_QWORD *)(a2 + *v10) + v165);
      *(_QWORD *)(a2 + v164) = v166;
      v25 |= (unint64_t)(v167 & 0x7F) << 42;
      if ((v167 & 0x80000000) == 0)
        goto LABEL_24;
      v168 = *v3;
      v169 = *(_QWORD *)(a2 + v168);
      v170 = v169 + 1;
      if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v171 = *(char *)(*(_QWORD *)(a2 + *v10) + v169);
      *(_QWORD *)(a2 + v168) = v170;
      v25 |= (unint64_t)(v171 & 0x7F) << 49;
      if ((v171 & 0x80000000) == 0)
        goto LABEL_24;
      v172 = *v3;
      v173 = *(_QWORD *)(a2 + v172);
      v174 = v173 + 1;
      if (v173 == -1 || v174 > *(_QWORD *)(a2 + *v6))
        goto LABEL_54;
      v175 = *(char *)(*(_QWORD *)(a2 + *v10) + v173);
      *(_QWORD *)(a2 + v172) = v174;
      v25 |= (unint64_t)(v175 & 0x7F) << 56;
      if ((v175 & 0x80000000) == 0)
        goto LABEL_24;
      v176 = *v3;
      v177 = *(_QWORD *)(a2 + v176);
      v178 = v177 + 1;
      if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v6))
      {
LABEL_54:
        v21 = (_BYTE *)(a2 + *v8);
LABEL_23:
        *v21 = 1;
LABEL_24:
        if (*(_BYTE *)(a2 + *v8))
          v26 = 0;
        else
          v26 = v25;
        goto LABEL_27;
      }
      v179 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v177);
      *(_QWORD *)(a2 + v176) = v178;
      if ((v179 & 0x80) == 0)
      {
        v25 |= v179 << 63;
        goto LABEL_24;
      }
      v26 = 0;
LABEL_27:
      objc_msgSend(a1, "setBytesWrittenToDisk:", v26);
LABEL_4:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E883500(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaSubmapCreated *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v19 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v19 & 0x7F) << 7;
      if (v19 < 0)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        v22 = v21 + 1;
        if (v21 == -1 || v22 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
        *(_QWORD *)(a2 + v20) = v22;
        v13 |= (unint64_t)(v23 & 0x7F) << 14;
        if (v23 < 0)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v13 |= (unint64_t)(v27 & 0x7F) << 21;
          if (v27 < 0)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v13 |= (unint64_t)(v31 & 0x7F) << 28;
            if (v31 < 0)
            {
              v32 = *v3;
              v33 = *(_QWORD *)(a2 + v32);
              v34 = v33 + 1;
              if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              if (v35 < 0)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                v38 = v37 + 1;
                if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
                *(_QWORD *)(a2 + v36) = v38;
                if (v39 < 0)
                {
                  v40 = *v3;
                  v41 = *(_QWORD *)(a2 + v40);
                  v42 = v41 + 1;
                  if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
                  *(_QWORD *)(a2 + v40) = v42;
                  if (v43 < 0)
                  {
                    v44 = *v3;
                    v45 = *(_QWORD *)(a2 + v44);
                    v46 = v45 + 1;
                    if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
                    *(_QWORD *)(a2 + v44) = v46;
                    if (v47 < 0)
                    {
                      v48 = *v3;
                      v49 = *(_QWORD *)(a2 + v48);
                      v50 = v49 + 1;
                      if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
                      *(_QWORD *)(a2 + v48) = v50;
                      if (v51 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaSubmapCreated);
        if (!PBReaderPlaceMark() || (sub_20E8824B8(v18, a2) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E883FA8(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (2)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
      {
        v15 = 0;
        goto LABEL_12;
      }
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        break;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
        break;
      }
      v40 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v40 & 0x7F) << 7;
      if (v40 < 0)
      {
        v41 = *v4;
        v42 = *(_QWORD *)(a2 + v41);
        v43 = v42 + 1;
        if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v7))
          goto LABEL_10;
        v44 = *(char *)(*(_QWORD *)(a2 + *v11) + v42);
        *(_QWORD *)(a2 + v41) = v43;
        v15 |= (unint64_t)(v44 & 0x7F) << 14;
        if (v44 < 0)
        {
          v45 = *v4;
          v46 = *(_QWORD *)(a2 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v7))
            goto LABEL_10;
          v48 = *(char *)(*(_QWORD *)(a2 + *v11) + v46);
          *(_QWORD *)(a2 + v45) = v47;
          v15 |= (unint64_t)(v48 & 0x7F) << 21;
          if (v48 < 0)
          {
            v49 = *v4;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v7))
              goto LABEL_10;
            v52 = *(char *)(*(_QWORD *)(a2 + *v11) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v15 |= (unint64_t)(v52 & 0x7F) << 28;
            if (v52 < 0)
            {
              v53 = *v4;
              v54 = *(_QWORD *)(a2 + v53);
              v55 = v54 + 1;
              if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v7))
                goto LABEL_10;
              v56 = *(char *)(*(_QWORD *)(a2 + *v11) + v54);
              *(_QWORD *)(a2 + v53) = v55;
              if (v56 < 0)
              {
                v57 = *v4;
                v58 = *(_QWORD *)(a2 + v57);
                v59 = v58 + 1;
                if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v7))
                  goto LABEL_10;
                v60 = *(char *)(*(_QWORD *)(a2 + *v11) + v58);
                *(_QWORD *)(a2 + v57) = v59;
                if (v60 < 0)
                {
                  v61 = *v4;
                  v62 = *(_QWORD *)(a2 + v61);
                  v63 = v62 + 1;
                  if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v7))
                    goto LABEL_10;
                  v64 = *(char *)(*(_QWORD *)(a2 + *v11) + v62);
                  *(_QWORD *)(a2 + v61) = v63;
                  if (v64 < 0)
                  {
                    v65 = *v4;
                    v66 = *(_QWORD *)(a2 + v65);
                    v67 = v66 + 1;
                    if (v66 == -1 || v67 > *(_QWORD *)(a2 + *v7))
                      goto LABEL_10;
                    v68 = *(char *)(*(_QWORD *)(a2 + *v11) + v66);
                    *(_QWORD *)(a2 + v65) = v67;
                    if (v68 < 0)
                    {
                      v69 = *v4;
                      v70 = *(_QWORD *)(a2 + v69);
                      v71 = v70 + 1;
                      if (v70 == -1 || v71 > *(_QWORD *)(a2 + *v7))
                        goto LABEL_10;
                      v72 = *(char *)(*(_QWORD *)(a2 + *v11) + v70);
                      *(_QWORD *)(a2 + v69) = v71;
                      if (v72 < 0)
                      {
                        v15 = 0;
                        v19 = *v9;
                        if (*(_BYTE *)(a2 + v19))
                          return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
                        v21 = (_BYTE *)(a2 + v19);
                        switch((v15 >> 3))
                        {
                          case 1u:
                            v22 = *v4;
                            v23 = *(_QWORD *)(a2 + v22);
                            v24 = v23 + 1;
                            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v7))
                            {
                              v25 = 0;
LABEL_21:
                              *v21 = 1;
                              goto LABEL_22;
                            }
                            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v23);
                            v25 = v77 & 0x7F;
                            *(_QWORD *)(a2 + v22) = v24;
                            if ((v77 & 0x80) == 0)
                              goto LABEL_22;
                            v78 = *v4;
                            v79 = *(_QWORD *)(a2 + v78);
                            v80 = v79 + 1;
                            if (v79 == -1 || v80 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v118 = *(char *)(*(_QWORD *)(a2 + *v11) + v79);
                            *(_QWORD *)(a2 + v78) = v80;
                            v25 |= (unint64_t)(v118 & 0x7F) << 7;
                            if ((v118 & 0x80000000) == 0)
                              goto LABEL_22;
                            v119 = *v4;
                            v120 = *(_QWORD *)(a2 + v119);
                            v121 = v120 + 1;
                            if (v120 == -1 || v121 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v122 = *(char *)(*(_QWORD *)(a2 + *v11) + v120);
                            *(_QWORD *)(a2 + v119) = v121;
                            v25 |= (unint64_t)(v122 & 0x7F) << 14;
                            if ((v122 & 0x80000000) == 0)
                              goto LABEL_22;
                            v123 = *v4;
                            v124 = *(_QWORD *)(a2 + v123);
                            v125 = v124 + 1;
                            if (v124 == -1 || v125 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v126 = *(char *)(*(_QWORD *)(a2 + *v11) + v124);
                            *(_QWORD *)(a2 + v123) = v125;
                            v25 |= (unint64_t)(v126 & 0x7F) << 21;
                            if ((v126 & 0x80000000) == 0)
                              goto LABEL_22;
                            v127 = *v4;
                            v128 = *(_QWORD *)(a2 + v127);
                            v129 = v128 + 1;
                            if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v130 = *(char *)(*(_QWORD *)(a2 + *v11) + v128);
                            *(_QWORD *)(a2 + v127) = v129;
                            v25 |= (unint64_t)(v130 & 0x7F) << 28;
                            if ((v130 & 0x80000000) == 0)
                              goto LABEL_22;
                            v131 = *v4;
                            v132 = *(_QWORD *)(a2 + v131);
                            v133 = v132 + 1;
                            if (v132 == -1 || v133 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v134 = *(char *)(*(_QWORD *)(a2 + *v11) + v132);
                            *(_QWORD *)(a2 + v131) = v133;
                            v25 |= (unint64_t)(v134 & 0x7F) << 35;
                            if ((v134 & 0x80000000) == 0)
                              goto LABEL_22;
                            v135 = *v4;
                            v136 = *(_QWORD *)(a2 + v135);
                            v137 = v136 + 1;
                            if (v136 == -1 || v137 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v138 = *(char *)(*(_QWORD *)(a2 + *v11) + v136);
                            *(_QWORD *)(a2 + v135) = v137;
                            v25 |= (unint64_t)(v138 & 0x7F) << 42;
                            if ((v138 & 0x80000000) == 0)
                              goto LABEL_22;
                            v139 = *v4;
                            v140 = *(_QWORD *)(a2 + v139);
                            v141 = v140 + 1;
                            if (v140 == -1 || v141 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v142 = *(char *)(*(_QWORD *)(a2 + *v11) + v140);
                            *(_QWORD *)(a2 + v139) = v141;
                            v25 |= (unint64_t)(v142 & 0x7F) << 49;
                            if ((v142 & 0x80000000) == 0)
                              goto LABEL_22;
                            v143 = *v4;
                            v144 = *(_QWORD *)(a2 + v143);
                            v145 = v144 + 1;
                            if (v144 == -1 || v145 > *(_QWORD *)(a2 + *v7))
                              goto LABEL_85;
                            v146 = *(char *)(*(_QWORD *)(a2 + *v11) + v144);
                            *(_QWORD *)(a2 + v143) = v145;
                            v25 |= (unint64_t)(v146 & 0x7F) << 56;
                            if (v146 < 0)
                            {
                              v147 = *v4;
                              v148 = *(_QWORD *)(a2 + v147);
                              v149 = v148 + 1;
                              if (v148 == -1 || v149 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_85:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_21;
                              }
                              v150 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v11) + v148);
                              *(_QWORD *)(a2 + v147) = v149;
                              if ((v150 & 0x80) != 0)
                              {
                                v26 = 0;
LABEL_25:
                                objc_msgSend(a1, "setSubmapId:", v26);
                                goto LABEL_4;
                              }
                              v25 |= v150 << 63;
                            }
LABEL_22:
                            if (*(_BYTE *)(a2 + *v9))
                              v26 = 0;
                            else
                              v26 = v25;
                            goto LABEL_25;
                          case 2u:
                            v36 = *v4;
                            v37 = *(_QWORD *)(a2 + v36);
                            v38 = v37 + 1;
                            if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v7))
                            {
                              v39 = 0;
LABEL_43:
                              *v21 = 1;
                              goto LABEL_44;
                            }
                            v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v37);
                            v39 = v81 & 0x7F;
                            *(_QWORD *)(a2 + v36) = v38;
                            if (v81 < 0)
                            {
                              v82 = *v4;
                              v83 = *(_QWORD *)(a2 + v82);
                              v84 = v83 + 1;
                              if (v83 == -1 || v84 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_89:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_43;
                              }
                              v151 = *(char *)(*(_QWORD *)(a2 + *v11) + v83);
                              *(_QWORD *)(a2 + v82) = v84;
                              v39 |= (unint64_t)(v151 & 0x7F) << 7;
                              if (v151 < 0)
                              {
                                v152 = *v4;
                                v153 = *(_QWORD *)(a2 + v152);
                                v154 = v153 + 1;
                                if (v153 == -1 || v154 > *(_QWORD *)(a2 + *v7))
                                  goto LABEL_89;
                                v155 = *(char *)(*(_QWORD *)(a2 + *v11) + v153);
                                *(_QWORD *)(a2 + v152) = v154;
                                v39 |= (unint64_t)(v155 & 0x7F) << 14;
                                if (v155 < 0)
                                {
                                  v156 = *v4;
                                  v157 = *(_QWORD *)(a2 + v156);
                                  v158 = v157 + 1;
                                  if (v157 == -1 || v158 > *(_QWORD *)(a2 + *v7))
                                    goto LABEL_89;
                                  v159 = *(char *)(*(_QWORD *)(a2 + *v11) + v157);
                                  *(_QWORD *)(a2 + v156) = v158;
                                  v39 |= (unint64_t)(v159 & 0x7F) << 21;
                                  if (v159 < 0)
                                  {
                                    v160 = *v4;
                                    v161 = *(_QWORD *)(a2 + v160);
                                    v162 = v161 + 1;
                                    if (v161 == -1 || v162 > *(_QWORD *)(a2 + *v7))
                                      goto LABEL_89;
                                    v163 = *(char *)(*(_QWORD *)(a2 + *v11) + v161);
                                    *(_QWORD *)(a2 + v160) = v162;
                                    v39 |= (unint64_t)(v163 & 0x7F) << 28;
                                    if (v163 < 0)
                                    {
                                      v164 = *v4;
                                      v165 = *(_QWORD *)(a2 + v164);
                                      v166 = v165 + 1;
                                      if (v165 == -1 || v166 > *(_QWORD *)(a2 + *v7))
                                        goto LABEL_89;
                                      v167 = *(char *)(*(_QWORD *)(a2 + *v11) + v165);
                                      *(_QWORD *)(a2 + v164) = v166;
                                      v39 |= (unint64_t)(v167 & 0x7F) << 35;
                                      if (v167 < 0)
                                      {
                                        v168 = *v4;
                                        v169 = *(_QWORD *)(a2 + v168);
                                        v170 = v169 + 1;
                                        if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v7))
                                          goto LABEL_89;
                                        v171 = *(char *)(*(_QWORD *)(a2 + *v11) + v169);
                                        *(_QWORD *)(a2 + v168) = v170;
                                        v39 |= (unint64_t)(v171 & 0x7F) << 42;
                                        if (v171 < 0)
                                        {
                                          v172 = *v4;
                                          v173 = *(_QWORD *)(a2 + v172);
                                          v174 = v173 + 1;
                                          if (v173 == -1 || v174 > *(_QWORD *)(a2 + *v7))
                                            goto LABEL_89;
                                          v175 = *(char *)(*(_QWORD *)(a2 + *v11) + v173);
                                          *(_QWORD *)(a2 + v172) = v174;
                                          v39 |= (unint64_t)(v175 & 0x7F) << 49;
                                          if (v175 < 0)
                                          {
                                            v176 = *v4;
                                            v177 = *(_QWORD *)(a2 + v176);
                                            v178 = v177 + 1;
                                            if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v7))
                                              goto LABEL_89;
                                            v179 = *(char *)(*(_QWORD *)(a2 + *v11) + v177);
                                            *(_QWORD *)(a2 + v176) = v178;
                                            v39 |= (unint64_t)(v179 & 0x7F) << 56;
                                            if (v179 < 0)
                                            {
                                              v180 = *v4;
                                              v181 = *(_QWORD *)(a2 + v180);
                                              v182 = v181 + 1;
                                              if (v181 == -1 || v182 > *(_QWORD *)(a2 + *v7))
                                                goto LABEL_89;
                                              v183 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v11) + v181);
                                              *(_QWORD *)(a2 + v180) = v182;
                                              if ((v183 & 0x80) != 0)
                                              {
                                                v39 = 0;
                                                goto LABEL_46;
                                              }
                                              v39 |= v183 << 63;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_44:
                            if (*(_BYTE *)(a2 + *v9))
                              v39 = 0;
LABEL_46:
                            objc_msgSend(a1, "setIsLocationAttached:", v39 != 0);
LABEL_4:
                            v5 = *v4;
                            v6 = *(_QWORD *)(a2 + v5);
                            v8 = *(_QWORD *)(a2 + *v7);
                            if (v6 >= v8)
                              return *(_BYTE *)(a2 + *v9) == 0;
                            continue;
                          case 3u:
                            v29 = *v4;
                            v30 = *(_QWORD *)(a2 + v29);
                            v31 = v30 + 1;
                            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v7))
                            {
                              v32 = 0;
LABEL_32:
                              *v21 = 1;
                              goto LABEL_33;
                            }
                            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v30);
                            v32 = v73 & 0x7F;
                            *(_QWORD *)(a2 + v29) = v31;
                            if (v73 < 0)
                            {
                              v74 = *v4;
                              v75 = *(_QWORD *)(a2 + v74);
                              v76 = v75 + 1;
                              if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v7))
                              {
LABEL_79:
                                v21 = (_BYTE *)(a2 + *v9);
                                goto LABEL_32;
                              }
                              v85 = *(char *)(*(_QWORD *)(a2 + *v11) + v75);
                              *(_QWORD *)(a2 + v74) = v76;
                              v32 |= (unint64_t)(v85 & 0x7F) << 7;
                              if (v85 < 0)
                              {
                                v86 = *v4;
                                v87 = *(_QWORD *)(a2 + v86);
                                v88 = v87 + 1;
                                if (v87 == -1 || v88 > *(_QWORD *)(a2 + *v7))
                                  goto LABEL_79;
                                v89 = *(char *)(*(_QWORD *)(a2 + *v11) + v87);
                                *(_QWORD *)(a2 + v86) = v88;
                                v32 |= (unint64_t)(v89 & 0x7F) << 14;
                                if (v89 < 0)
                                {
                                  v90 = *v4;
                                  v91 = *(_QWORD *)(a2 + v90);
                                  v92 = v91 + 1;
                                  if (v91 == -1 || v92 > *(_QWORD *)(a2 + *v7))
                                    goto LABEL_79;
                                  v93 = *(char *)(*(_QWORD *)(a2 + *v11) + v91);
                                  *(_QWORD *)(a2 + v90) = v92;
                                  v32 |= (unint64_t)(v93 & 0x7F) << 21;
                                  if (v93 < 0)
                                  {
                                    v94 = *v4;
                                    v95 = *(_QWORD *)(a2 + v94);
                                    v96 = v95 + 1;
                                    if (v95 == -1 || v96 > *(_QWORD *)(a2 + *v7))
                                      goto LABEL_79;
                                    v97 = *(char *)(*(_QWORD *)(a2 + *v11) + v95);
                                    *(_QWORD *)(a2 + v94) = v96;
                                    v32 |= (unint64_t)(v97 & 0x7F) << 28;
                                    if (v97 < 0)
                                    {
                                      v98 = *v4;
                                      v99 = *(_QWORD *)(a2 + v98);
                                      v100 = v99 + 1;
                                      if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v7))
                                        goto LABEL_79;
                                      v101 = *(char *)(*(_QWORD *)(a2 + *v11) + v99);
                                      *(_QWORD *)(a2 + v98) = v100;
                                      v32 |= (unint64_t)(v101 & 0x7F) << 35;
                                      if (v101 < 0)
                                      {
                                        v102 = *v4;
                                        v103 = *(_QWORD *)(a2 + v102);
                                        v104 = v103 + 1;
                                        if (v103 == -1 || v104 > *(_QWORD *)(a2 + *v7))
                                          goto LABEL_79;
                                        v105 = *(char *)(*(_QWORD *)(a2 + *v11) + v103);
                                        *(_QWORD *)(a2 + v102) = v104;
                                        v32 |= (unint64_t)(v105 & 0x7F) << 42;
                                        if (v105 < 0)
                                        {
                                          v106 = *v4;
                                          v107 = *(_QWORD *)(a2 + v106);
                                          v108 = v107 + 1;
                                          if (v107 == -1 || v108 > *(_QWORD *)(a2 + *v7))
                                            goto LABEL_79;
                                          v109 = *(char *)(*(_QWORD *)(a2 + *v11) + v107);
                                          *(_QWORD *)(a2 + v106) = v108;
                                          v32 |= (unint64_t)(v109 & 0x7F) << 49;
                                          if (v109 < 0)
                                          {
                                            v110 = *v4;
                                            v111 = *(_QWORD *)(a2 + v110);
                                            v112 = v111 + 1;
                                            if (v111 == -1 || v112 > *(_QWORD *)(a2 + *v7))
                                              goto LABEL_79;
                                            v113 = *(char *)(*(_QWORD *)(a2 + *v11) + v111);
                                            *(_QWORD *)(a2 + v110) = v112;
                                            v32 |= (unint64_t)(v113 & 0x7F) << 56;
                                            if (v113 < 0)
                                            {
                                              v114 = *v4;
                                              v115 = *(_QWORD *)(a2 + v114);
                                              v116 = v115 + 1;
                                              if (v115 == -1 || v116 > *(_QWORD *)(a2 + *v7))
                                                goto LABEL_79;
                                              v117 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v11) + v115);
                                              *(_QWORD *)(a2 + v114) = v116;
                                              if ((v117 & 0x80) != 0)
                                              {
                                                v33 = 0;
                                                goto LABEL_36;
                                              }
                                              v32 |= v117 << 63;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
LABEL_33:
                            if (*(_BYTE *)(a2 + *v9))
                              v33 = 0;
                            else
                              v33 = v32;
LABEL_36:
                            objc_msgSend(a1, "setBytesReadFromDisk:", v33);
                            goto LABEL_4;
                          case 4u:
                            v34 = *v4;
                            v35 = *(_QWORD *)(a2 + v34);
                            if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v7))
                            {
                              LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v35);
                              *(_QWORD *)(a2 + v34) = v35 + 4;
                            }
                            else
                            {
                              *v21 = 1;
                              LODWORD(a3) = 0;
                            }
                            objc_msgSend(a1, "setTimeToLoadSubmapInSecond:", a3);
                            goto LABEL_4;
                          case 5u:
                            v27 = *v4;
                            v28 = *(_QWORD *)(a2 + v27);
                            if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v7))
                            {
                              LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v28);
                              *(_QWORD *)(a2 + v27) = v28 + 4;
                            }
                            else
                            {
                              *v21 = 1;
                              LODWORD(a3) = 0;
                            }
                            objc_msgSend(a1, "setSecondsElapsedSinceLastActive:", a3);
                            goto LABEL_4;
                          default:
                            result = PBReaderSkipValueWithTag();
                            if ((_DWORD)result)
                              goto LABEL_4;
                            return result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    }
    v19 = *v9;
    if (*(_BYTE *)(a2 + v19))
    {
      v15 = 0;
      v20 = 1;
    }
    else
    {
      v20 = (v15 & 7) == 4;
    }
    if (v20)
      return *(_BYTE *)(a2 + *v9) == 0;
    goto LABEL_17;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

BOOL sub_20E88536C(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaSubmapLoaded *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaSubmapLoaded);
        if (!PBReaderPlaceMark() || (sub_20E883FA8(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E886348(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaSubmapUpdated *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v19 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v19 & 0x7F) << 7;
      if (v19 < 0)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        v22 = v21 + 1;
        if (v21 == -1 || v22 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
        *(_QWORD *)(a2 + v20) = v22;
        v13 |= (unint64_t)(v23 & 0x7F) << 14;
        if (v23 < 0)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v13 |= (unint64_t)(v27 & 0x7F) << 21;
          if (v27 < 0)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v13 |= (unint64_t)(v31 & 0x7F) << 28;
            if (v31 < 0)
            {
              v32 = *v3;
              v33 = *(_QWORD *)(a2 + v32);
              v34 = v33 + 1;
              if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              if (v35 < 0)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                v38 = v37 + 1;
                if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
                *(_QWORD *)(a2 + v36) = v38;
                if (v39 < 0)
                {
                  v40 = *v3;
                  v41 = *(_QWORD *)(a2 + v40);
                  v42 = v41 + 1;
                  if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
                  *(_QWORD *)(a2 + v40) = v42;
                  if (v43 < 0)
                  {
                    v44 = *v3;
                    v45 = *(_QWORD *)(a2 + v44);
                    v46 = v45 + 1;
                    if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
                    *(_QWORD *)(a2 + v44) = v46;
                    if (v47 < 0)
                    {
                      v48 = *v3;
                      v49 = *(_QWORD *)(a2 + v48);
                      v50 = v49 + 1;
                      if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
                      *(_QWORD *)(a2 + v48) = v50;
                      if (v51 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaSubmapUpdated);
        if (!PBReaderPlaceMark() || (sub_20E8824B8(v18, a2) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E886DB0(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        goto LABEL_13;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v23 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v23 & 0x7F) << 7;
      if ((v23 & 0x80000000) == 0)
        goto LABEL_13;
      v24 = *v4;
      v25 = *(_QWORD *)(a2 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v27 = *(char *)(*(_QWORD *)(a2 + *v11) + v25);
      *(_QWORD *)(a2 + v24) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << 14;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_13;
      v28 = *v4;
      v29 = *(_QWORD *)(a2 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v31 = *(char *)(*(_QWORD *)(a2 + *v11) + v29);
      *(_QWORD *)(a2 + v28) = v30;
      v15 |= (unint64_t)(v31 & 0x7F) << 21;
      if ((v31 & 0x80000000) == 0)
        goto LABEL_13;
      v32 = *v4;
      v33 = *(_QWORD *)(a2 + v32);
      v34 = v33 + 1;
      if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v35 = *(char *)(*(_QWORD *)(a2 + *v11) + v33);
      *(_QWORD *)(a2 + v32) = v34;
      v15 |= (unint64_t)(v35 & 0x7F) << 28;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_13;
      v36 = *v4;
      v37 = *(_QWORD *)(a2 + v36);
      v38 = v37 + 1;
      if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v39 = *(char *)(*(_QWORD *)(a2 + *v11) + v37);
      *(_QWORD *)(a2 + v36) = v38;
      if ((v39 & 0x80000000) == 0)
        goto LABEL_13;
      v40 = *v4;
      v41 = *(_QWORD *)(a2 + v40);
      v42 = v41 + 1;
      if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v43 = *(char *)(*(_QWORD *)(a2 + *v11) + v41);
      *(_QWORD *)(a2 + v40) = v42;
      if ((v43 & 0x80000000) == 0)
        goto LABEL_13;
      v44 = *v4;
      v45 = *(_QWORD *)(a2 + v44);
      v46 = v45 + 1;
      if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v47 = *(char *)(*(_QWORD *)(a2 + *v11) + v45);
      *(_QWORD *)(a2 + v44) = v46;
      if ((v47 & 0x80000000) == 0)
        goto LABEL_13;
      v48 = *v4;
      v49 = *(_QWORD *)(a2 + v48);
      v50 = v49 + 1;
      if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v51 = *(char *)(*(_QWORD *)(a2 + *v11) + v49);
      *(_QWORD *)(a2 + v48) = v50;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_13;
      v52 = *v4;
      v53 = *(_QWORD *)(a2 + v52);
      v54 = v53 + 1;
      if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
LABEL_13:
        v19 = *v9;
        if (*(_BYTE *)(a2 + v19))
        {
          v15 = 0;
          v20 = 1;
        }
        else
        {
          v20 = (v15 & 7) == 4;
        }
        if (v20)
          return *(_BYTE *)(a2 + *v9) == 0;
        goto LABEL_17;
      }
      v55 = *(char *)(*(_QWORD *)(a2 + *v11) + v53);
      *(_QWORD *)(a2 + v52) = v54;
      if ((v55 & 0x80000000) == 0)
        goto LABEL_13;
      v15 = 0;
      v19 = *v9;
      if (*(_BYTE *)(a2 + v19))
        return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
      if ((v15 >> 3) == 1)
      {
        v21 = *v4;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v7))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v19) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSecondsToInitializeTracking:", a3);
        v5 = *v4;
        v6 = *(_QWORD *)(a2 + v5);
        v8 = *(_QWORD *)(a2 + *v7);
        if (v6 >= v8)
          return *(_BYTE *)(a2 + *v9) == 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        v5 = *v4;
        v6 = *(_QWORD *)(a2 + v5);
        v8 = *(_QWORD *)(a2 + *v7);
        if (v6 >= v8)
          return *(_BYTE *)(a2 + *v9) == 0;
      }
    }
    v15 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

BOOL sub_20E887540(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaTrackingInitialized *v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v13 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v13 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v13 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaTrackingInitialized);
        if (!PBReaderPlaceMark() || (sub_20E886DB0(v18, a2, v19) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E887FCC(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  void *v11;
  _BYTE *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v12 = (_BYTE *)(a2 + *v8);
      if (*v12)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v14 = v13 & 0x7F;
      if ((v13 & 0x80) == 0)
        goto LABEL_13;
      v15 = *v3;
      v16 = *(_QWORD *)(a2 + v15);
      v17 = v16 + 1;
      if (v16 == -1 || v17 > *(_QWORD *)(a2 + *v6))
      {
LABEL_10:
        v12 = (_BYTE *)(a2 + *v8);
LABEL_12:
        *v12 = 1;
        goto LABEL_13;
      }
      v20 = *(char *)(*(_QWORD *)(a2 + *v10) + v16);
      *(_QWORD *)(a2 + v15) = v17;
      v14 |= (unint64_t)(v20 & 0x7F) << 7;
      if (v20 < 0)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        v23 = v22 + 1;
        if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v6))
          goto LABEL_10;
        v24 = *(char *)(*(_QWORD *)(a2 + *v10) + v22);
        *(_QWORD *)(a2 + v21) = v23;
        v14 |= (unint64_t)(v24 & 0x7F) << 14;
        if (v24 < 0)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v6))
            goto LABEL_10;
          v28 = *(char *)(*(_QWORD *)(a2 + *v10) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v14 |= (unint64_t)(v28 & 0x7F) << 21;
          if (v28 < 0)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v6))
              goto LABEL_10;
            v32 = *(char *)(*(_QWORD *)(a2 + *v10) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v14 |= (unint64_t)(v32 & 0x7F) << 28;
            if (v32 < 0)
            {
              v33 = *v3;
              v34 = *(_QWORD *)(a2 + v33);
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v6))
                goto LABEL_10;
              v36 = *(char *)(*(_QWORD *)(a2 + *v10) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              if (v36 < 0)
              {
                v37 = *v3;
                v38 = *(_QWORD *)(a2 + v37);
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_10;
                v40 = *(char *)(*(_QWORD *)(a2 + *v10) + v38);
                *(_QWORD *)(a2 + v37) = v39;
                if (v40 < 0)
                {
                  v41 = *v3;
                  v42 = *(_QWORD *)(a2 + v41);
                  v43 = v42 + 1;
                  if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_10;
                  v44 = *(char *)(*(_QWORD *)(a2 + *v10) + v42);
                  *(_QWORD *)(a2 + v41) = v43;
                  if (v44 < 0)
                  {
                    v45 = *v3;
                    v46 = *(_QWORD *)(a2 + v45);
                    v47 = v46 + 1;
                    if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_10;
                    v48 = *(char *)(*(_QWORD *)(a2 + *v10) + v46);
                    *(_QWORD *)(a2 + v45) = v47;
                    if (v48 < 0)
                    {
                      v49 = *v3;
                      v50 = *(_QWORD *)(a2 + v49);
                      v51 = v50 + 1;
                      if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_10;
                      v52 = *(char *)(*(_QWORD *)(a2 + *v10) + v50);
                      *(_QWORD *)(a2 + v49) = v51;
                      if (v52 < 0)
                      {
                        v14 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_17;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_13:
      if (*(_BYTE *)(a2 + *v8))
      {
        v14 = 0;
        v18 = 1;
      }
      else
      {
        v18 = (v14 & 7) == 4;
      }
      if (v18)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_17:
      if ((v14 >> 3) == 1)
      {
        PBReaderReadString();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setReasonToLoseTracking:", v11);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v14 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

BOOL sub_20E88873C(void *a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  AppleCV3DSchemaTrackingLost *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int)*MEMORY[0x24BE7AF60];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x24BE7AF50];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v8 = (int *)MEMORY[0x24BE7AF48];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_14;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v6))
      {
LABEL_11:
        v11 = (_BYTE *)(a2 + *v8);
LABEL_13:
        *v11 = 1;
        goto LABEL_14;
      }
      v19 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v19 & 0x7F) << 7;
      if (v19 < 0)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        v22 = v21 + 1;
        if (v21 == -1 || v22 > *(_QWORD *)(a2 + *v6))
          goto LABEL_11;
        v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
        *(_QWORD *)(a2 + v20) = v22;
        v13 |= (unint64_t)(v23 & 0x7F) << 14;
        if (v23 < 0)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v6))
            goto LABEL_11;
          v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v13 |= (unint64_t)(v27 & 0x7F) << 21;
          if (v27 < 0)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v6))
              goto LABEL_11;
            v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v13 |= (unint64_t)(v31 & 0x7F) << 28;
            if (v31 < 0)
            {
              v32 = *v3;
              v33 = *(_QWORD *)(a2 + v32);
              v34 = v33 + 1;
              if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v6))
                goto LABEL_11;
              v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              if (v35 < 0)
              {
                v36 = *v3;
                v37 = *(_QWORD *)(a2 + v36);
                v38 = v37 + 1;
                if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v6))
                  goto LABEL_11;
                v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
                *(_QWORD *)(a2 + v36) = v38;
                if (v39 < 0)
                {
                  v40 = *v3;
                  v41 = *(_QWORD *)(a2 + v40);
                  v42 = v41 + 1;
                  if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v6))
                    goto LABEL_11;
                  v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
                  *(_QWORD *)(a2 + v40) = v42;
                  if (v43 < 0)
                  {
                    v44 = *v3;
                    v45 = *(_QWORD *)(a2 + v44);
                    v46 = v45 + 1;
                    if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v6))
                      goto LABEL_11;
                    v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
                    *(_QWORD *)(a2 + v44) = v46;
                    if (v47 < 0)
                    {
                      v48 = *v3;
                      v49 = *(_QWORD *)(a2 + v48);
                      v50 = v49 + 1;
                      if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v6))
                        goto LABEL_11;
                      v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
                      *(_QWORD *)(a2 + v48) = v50;
                      if (v51 < 0)
                      {
                        v13 = 0;
                        if (*(_BYTE *)(a2 + *v8))
                          return *(_BYTE *)(a2 + *v8) == 0;
                        goto LABEL_18;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_14:
      if (*(_BYTE *)(a2 + *v8))
      {
        v13 = 0;
        v17 = 1;
      }
      else
      {
        v17 = (v13 & 7) == 4;
      }
      if (v17)
        return *(_BYTE *)(a2 + *v8) == 0;
LABEL_18:
      if ((v13 >> 3) == 2)
      {
        v18 = objc_alloc_init(AppleCV3DSchemaTrackingLost);
        if (!PBReaderPlaceMark() || (sub_20E887FCC(v18, a2) & 1) == 0)
        {
LABEL_55:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPayload:", v18, 0, 0);
        goto LABEL_4;
      }
      if ((v13 >> 3) == 1)
      {
        v18 = objc_alloc_init(AppleCommonSchemaMetadata);
        if (!PBReaderPlaceMark() || (sub_20E88E0B4(v18, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMetadata:", v18, 0, 0);
LABEL_4:

        goto LABEL_5;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_5:
      v4 = *v3;
      v5 = *(_QWORD *)(a2 + v4);
      v7 = *(_QWORD *)(a2 + *v6);
      if (v5 >= v7)
        return *(_BYTE *)(a2 + *v8) == 0;
    }
    v13 = 0;
    goto LABEL_13;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t sub_20E8891A4(void *a1, uint64_t a2, double a3)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  uint64_t result;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;

  v4 = (int *)MEMORY[0x24BE7AF60];
  v5 = (int)*MEMORY[0x24BE7AF60];
  v6 = *(_QWORD *)(a2 + v5);
  v7 = (int *)MEMORY[0x24BE7AF50];
  v8 = *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]);
  v9 = (int *)MEMORY[0x24BE7AF48];
  if (v6 < v8)
  {
    v11 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      v13 = (_BYTE *)(a2 + *v9);
      if (*v13)
        return *(_BYTE *)(a2 + *v9) == 0;
      if (v6 >= v8)
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v11) + v6);
      *(_QWORD *)(a2 + (int)v5) = v6 + 1;
      v15 = v14 & 0x7F;
      if ((v14 & 0x80) == 0)
        goto LABEL_13;
      v16 = *v4;
      v17 = *(_QWORD *)(a2 + v16);
      v18 = v17 + 1;
      if (v17 == -1 || v18 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v23 = *(char *)(*(_QWORD *)(a2 + *v11) + v17);
      *(_QWORD *)(a2 + v16) = v18;
      v15 |= (unint64_t)(v23 & 0x7F) << 7;
      if ((v23 & 0x80000000) == 0)
        goto LABEL_13;
      v24 = *v4;
      v25 = *(_QWORD *)(a2 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v27 = *(char *)(*(_QWORD *)(a2 + *v11) + v25);
      *(_QWORD *)(a2 + v24) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << 14;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_13;
      v28 = *v4;
      v29 = *(_QWORD *)(a2 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v31 = *(char *)(*(_QWORD *)(a2 + *v11) + v29);
      *(_QWORD *)(a2 + v28) = v30;
      v15 |= (unint64_t)(v31 & 0x7F) << 21;
      if ((v31 & 0x80000000) == 0)
        goto LABEL_13;
      v32 = *v4;
      v33 = *(_QWORD *)(a2 + v32);
      v34 = v33 + 1;
      if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v35 = *(char *)(*(_QWORD *)(a2 + *v11) + v33);
      *(_QWORD *)(a2 + v32) = v34;
      v15 |= (unint64_t)(v35 & 0x7F) << 28;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_13;
      v36 = *v4;
      v37 = *(_QWORD *)(a2 + v36);
      v38 = v37 + 1;
      if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v39 = *(char *)(*(_QWORD *)(a2 + *v11) + v37);
      *(_QWORD *)(a2 + v36) = v38;
      if ((v39 & 0x80000000) == 0)
        goto LABEL_13;
      v40 = *v4;
      v41 = *(_QWORD *)(a2 + v40);
      v42 = v41 + 1;
      if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v43 = *(char *)(*(_QWORD *)(a2 + *v11) + v41);
      *(_QWORD *)(a2 + v40) = v42;
      if ((v43 & 0x80000000) == 0)
        goto LABEL_13;
      v44 = *v4;
      v45 = *(_QWORD *)(a2 + v44);
      v46 = v45 + 1;
      if (v45 == -1 || v46 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v47 = *(char *)(*(_QWORD *)(a2 + *v11) + v45);
      *(_QWORD *)(a2 + v44) = v46;
      if ((v47 & 0x80000000) == 0)
        goto LABEL_13;
      v48 = *v4;
      v49 = *(_QWORD *)(a2 + v48);
      v50 = v49 + 1;
      if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v7))
        goto LABEL_10;
      v51 = *(char *)(*(_QWORD *)(a2 + *v11) + v49);
      *(_QWORD *)(a2 + v48) = v50;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_13;
      v52 = *v4;
      v53 = *(_QWORD *)(a2 + v52);
      v54 = v53 + 1;
      if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v7))
      {
LABEL_10:
        v13 = (_BYTE *)(a2 + *v9);
LABEL_12:
        *v13 = 1;
LABEL_13:
        v19 = *v9;
        if (*(_BYTE *)(a2 + v19))
        {
          v15 = 0;
          v20 = 1;
        }
        else
        {
          v20 = (v15 & 7) == 4;
        }
        if (v20)
          return *(_BYTE *)(a2 + *v9) == 0;
        goto LABEL_17;
      }
      v55 = *(char *)(*(_QWORD *)(a2 + *v11) + v53);
      *(_QWORD *)(a2 + v52) = v54;
      if ((v55 & 0x80000000) == 0)
        goto LABEL_13;
      v15 = 0;
      v19 = *v9;
      if (*(_BYTE *)(a2 + v19))
        return *(_BYTE *)(a2 + *v9) == 0;
LABEL_17:
      if ((v15 >> 3) == 1)
      {
        v21 = *v4;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v7))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v11) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v19) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSecondsToRecoverTracking:", a3);
        v5 = *v4;
        v6 = *(_QWORD *)(a2 + v5);
        v8 = *(_QWORD *)(a2 + *v7);
        if (v6 >= v8)
          return *(_BYTE *)(a2 + *v9) == 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        v5 = *v4;
        v6 = *(_QWORD *)(a2 + v5);
        v8 = *(_QWORD *)(a2 + *v7);
        if (v6 >= v8)
          return *(_BYTE *)(a2 + *v9) == 0;
      }
    }
    v15 = 0;
    goto LABEL_12;
  }
  return *(_BYTE *)(a2 + *v9) == 0;
}

