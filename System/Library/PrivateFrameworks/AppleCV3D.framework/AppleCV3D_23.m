void sub_20F13B818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B82C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B840(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0xCA7]) < 0)
    operator delete((void *)STACK[0xC90]);
  sub_20E866BE0((uint64_t)&STACK[0xC78], (char *)STACK[0xC80]);
  sub_20F028268(STACK[0xC38]);
  _Unwind_Resume(a1);
}

void sub_20F13B894(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B8A8(_Unwind_Exception *a1)
{
  sub_20EB8188C((uint64_t)&STACK[0xC90]);
  sub_20F028268(STACK[0xC38]);
  _Unwind_Resume(a1);
}

void sub_20F13B8C8(_Unwind_Exception *a1)
{
  sub_20F028268(STACK[0xC38]);
  _Unwind_Resume(a1);
}

void sub_20F13B8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B8F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B91C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B930(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

void sub_20F13B944(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028268(v1);
  _Unwind_Resume(a1);
}

double sub_20F13B958@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  double v8;
  double *v9;
  double v10;
  unsigned __int8 v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  unsigned __int8 v18;
  const char *v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  double result;
  double v36;
  int v37;
  const char *__src;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41[3];
  int v42;
  const char *v43;
  int v44;
  const char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  void *object;
  void *v50;
  size_t v51;
  unint64_t v52;
  char v53;
  void *__p[2];
  unint64_t v55;
  char v56;

  v6 = *((_OWORD *)a2 + 1);
  v7 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a3 + 48) = v7;
  *(double *)(a3 + 64) = a2[8];
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v6;
  v8 = *a2;
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_55;
  v9 = (double *)(a1 + 32);
  v10 = *(double *)(a1 + 32);
  if (vabdd_f64(v8 / a2[4], v10) > 0.01)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_254A62248);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A62248))
    {
      sub_21021D3D8(v41);
      sub_20E8610C0(&object, "cv3d.vio.cv_types");
      sub_20E8C4068(v41, (uint64_t)&object, &qword_254A62240);
      if (SHIBYTE(v51) < 0)
        operator delete(object);
      __cxa_guard_release(&qword_254A62248);
    }
    v48 = qword_254A62240;
    if (**(int **)(qword_254A62240 + 56) > 4
      || ((v12 = *(unsigned __int8 *)(qword_254A62240 + 72),
           (v13 = sub_20E8C31DC(qword_254A62240, "OSLogSurrogateAppender", 1, 0)) == 0)
        ? (v14 = 0)
        : (v14 = v13 + 16),
          !v12 && !v13))
    {
LABEL_52:
      v8 = *a2;
      if (*(_BYTE *)(a1 + 40))
      {
        v10 = *v9;
        goto LABEL_54;
      }
LABEL_55:
      v33 = *(double *)a1;
      v32 = *(double *)(a1 + 8);
      goto LABEL_56;
    }
    v41[0] = &v48;
    v41[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v41[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    v42 = 4;
    v43 = "unknown file";
    v44 = 61;
    v46 = 0;
    v47 = 0;
    v45 = "unknown function";
    if (!*(_BYTE *)(a1 + 40))
      sub_20E866B34();
    v39 = v14;
    v15 = *v41[0];
    if (*(char *)(*v41[0] + 39) < 0)
    {
      v17 = *(const char **)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
    }
    else
    {
      v16 = *(unsigned __int8 *)(*v41[0] + 39);
      v17 = (const char *)(*v41[0] + 16);
    }
    v40 = (uint64_t *)(*v41[0] + 16);
    v18 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v52 && SHIBYTE(v51) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v19 = byte_254A4A4F8;
    else
      v19 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v20 = byte_254A4A4F8[23];
    else
      v20 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v17;
    object = os_log_create(v19, v17);
    v21 = &v50;
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v20 >= 0x17)
    {
      v37 = v12;
      v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v22 = v20 | 7;
      v23 = v22 + 1;
      v21 = operator new(v22 + 1);
      v51 = v20;
      v52 = v23 | 0x8000000000000000;
      v50 = v21;
      v12 = v37;
    }
    else
    {
      HIBYTE(v52) = v20;
      if (!v20)
      {
LABEL_29:
        *((_BYTE *)v21 + v20) = 0;
        v53 = 1;
        v24 = __p;
        if (v16 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v16 >= 0x17)
        {
          v25 = v12;
          v26 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v26 = v16 | 7;
          v27 = v26 + 1;
          v24 = operator new(v26 + 1);
          __p[1] = (void *)v16;
          v55 = v27 | 0x8000000000000000;
          __p[0] = v24;
          v12 = v25;
        }
        else
        {
          HIBYTE(v55) = v16;
          if (!v16)
            goto LABEL_37;
        }
        memmove(v24, __src, v16);
LABEL_37:
        *((_BYTE *)v24 + v16) = 0;
        v56 = 1;
        v28 = object;
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if (v53 && SHIBYTE(v52) < 0)
          operator delete(v50);
        if (object)
          os_release(object);
        sub_20F13F8A8((int)&object, v39, v40, v28, OS_LOG_TYPE_ERROR, v12 != 0, (uint64_t *)a2, (uint64_t *)a2 + 4, (uint64_t *)(a1 + 32));
        if (v12)
        {
          if (!*(_BYTE *)(a1 + 40))
            sub_20E866B34();
          sub_20E8C003C((uint64_t)v41, "Large aspect ratio change detected: %f / %f != %f", *a2, a2[4], *v9);
          sub_20E863570((uint64_t)v41);
        }
        sub_20E863570((uint64_t)v41);
        v29 = v47;
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        goto LABEL_52;
      }
    }
    memmove(v21, v19, v20);
    goto LABEL_29;
  }
LABEL_54:
  v32 = *(double *)(a1 + 8);
  v33 = v10 * v32;
LABEL_56:
  *(double *)a3 = v8 + v33;
  v34 = a2[5];
  result = v32 + a2[4];
  v36 = *(double *)(a1 + 24);
  *(double *)(a3 + 16) = a2[2] + *(double *)(a1 + 16);
  *(double *)(a3 + 32) = result;
  *(double *)(a3 + 40) = v34 + v36;
  return result;
}

void sub_20F13BE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F13BE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62248);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62248);
  _Unwind_Resume(a1);
}

void sub_20F13BEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a34 && a33 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F13BF08(uint64_t *result, _DWORD *a2, char *a3)
{
  uint64_t v3;
  uint64_t *v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  char v12;
  unsigned int v13;
  int *v14;

  v3 = result[608];
  if ((*(_DWORD *)(v3 + 2276) & 0xFFFFFFFE) == 2)
  {
    v6 = result;
    if (*((_BYTE *)result + 1924))
    {
      if (*a2 >= 0x10000u
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_18;
      }
      v7 = a2[1];
      if (v7 >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_18;
        }
        LOWORD(v7) = *((_WORD *)a2 + 2);
      }
      v8 = *a3;
      v13 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
      v14 = (int *)&v13;
      result = sub_20FB76E58(v3 + 7696, &v13, (uint64_t)&unk_2102DB95C, &v14);
      *((_BYTE *)result + 20) = v8;
    }
    if (!*((_BYTE *)v6 + 1925))
    {
LABEL_16:
      *((_BYTE *)v6 + 4920) = a3[2];
      return result;
    }
    v9 = v6[608];
    if (*a2 < 0x10000u
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v10 = a2[1];
      if (v10 < 0x10000)
      {
LABEL_15:
        v11 = *a2;
        v12 = a3[1];
        v13 = (unsigned __int16)v10 | ((unsigned __int16)v11 << 16);
        v14 = (int *)&v13;
        result = sub_20FB76E58(v9 + 7736, &v13, (uint64_t)&unk_2102DB95C, &v14);
        *((_BYTE *)result + 20) = v12;
        goto LABEL_16;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        LOWORD(v10) = *((_WORD *)a2 + 2);
        goto LABEL_15;
      }
    }
LABEL_18:
    abort();
  }
  return result;
}

void *sub_20F13C0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[28];

  *a4 = 0;
  a4[3176] = 0;
  if (!*(_BYTE *)(a1 + 10288) || !*(_QWORD *)(a1 + 10208))
  {
    result = (void *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1960, (uint64_t)"opt_rel_pose_info", 17, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(a1 + 4864);
  if (*(_BYTE *)(v8 + 11664)
    || *(_DWORD *)(v8 + 1936) != (uint64_t)(*(_QWORD *)(v8 + 2864) - *(_QWORD *)(v8 + 2856)) >> 2)
  {
    v11 = *(_QWORD *)(a1 + 10200);
    v12 = *(_QWORD *)(a1 + 10168);
    if (!v11)
      v11 = 0xEBE8AB1946A49E23 * ((*(_QWORD *)(a1 + 10176) - v12) >> 3);
    v9 = v12 + 3160 * v11 - 3160;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 10168) + 3160 * *(_QWORD *)(a1 + 10192);
  }
  bzero(a4, 0xC68uLL);
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 6) = xmmword_21039C6C0;
  *((_OWORD *)a4 + 7) = unk_21039C6D0;
  *((_OWORD *)a4 + 8) = xmmword_21039C6E0;
  *((_OWORD *)a4 + 9) = unk_21039C6F0;
  *((_OWORD *)a4 + 2) = xmmword_21039C680;
  *((_OWORD *)a4 + 3) = *(_OWORD *)algn_21039C690;
  *((_OWORD *)a4 + 4) = xmmword_21039C6A0;
  *((_OWORD *)a4 + 5) = unk_21039C6B0;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 13) = 0u;
  *((_OWORD *)a4 + 14) = 0u;
  *((_OWORD *)a4 + 15) = 0u;
  *((_OWORD *)a4 + 16) = 0u;
  *((_OWORD *)a4 + 17) = 0u;
  *((_OWORD *)a4 + 18) = 0u;
  *((_OWORD *)a4 + 19) = 0u;
  *((_OWORD *)a4 + 20) = 0u;
  *((_OWORD *)a4 + 21) = 0u;
  *((_OWORD *)a4 + 22) = 0u;
  *((_OWORD *)a4 + 23) = 0u;
  *((_OWORD *)a4 + 24) = 0u;
  *((_OWORD *)a4 + 25) = 0u;
  *((_OWORD *)a4 + 26) = 0u;
  *((_OWORD *)a4 + 27) = 0u;
  a4[448] = 0;
  a4[3176] = 1;
  v13 = *(_DWORD *)v9;
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_QWORD *)a4 = -1;
    *((_DWORD *)a4 + 2) = v13;
    if (*(_DWORD *)(v9 + 4) == *(_DWORD *)(a3 + 8))
      goto LABEL_19;
LABEL_18:
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1943, (uint64_t)"oldest_state_rel_pose_and_cov.state_id1 == oldest_state_id.key()", 64, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))goto LABEL_19;
LABEL_22:
    abort();
  }
  if (v13 != *(_DWORD *)(a2 + 8))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1936, (uint64_t)"oldest_state_rel_pose_and_cov.state_id0 == opt_last_create_map_keyframe_state_id->key()", 87, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_22;
    }
    if (!*(_BYTE *)(a2 + 16))
      sub_20E866B34();
  }
  *(_QWORD *)a4 = *(_QWORD *)a2;
  *((_DWORD *)a4 + 2) = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(v9 + 4) != *(_DWORD *)(a3 + 8))
    goto LABEL_18;
LABEL_19:
  *((_QWORD *)a4 + 2) = *(_QWORD *)a3;
  *((_DWORD *)a4 + 6) = *(_DWORD *)(a3 + 8);
  v14 = *(_OWORD *)(v9 + 56);
  v15 = *(_OWORD *)(v9 + 40);
  v16 = *(_OWORD *)(v9 + 24);
  *((_OWORD *)a4 + 2) = *(_OWORD *)(v9 + 8);
  *((_OWORD *)a4 + 3) = v16;
  *((_OWORD *)a4 + 4) = v15;
  *((_OWORD *)a4 + 5) = v14;
  v17 = *(_OWORD *)(v9 + 88);
  v18 = *(_OWORD *)(v9 + 120);
  v19 = *(_OWORD *)(v9 + 72);
  *((_OWORD *)a4 + 8) = *(_OWORD *)(v9 + 104);
  *((_OWORD *)a4 + 9) = v18;
  *((_OWORD *)a4 + 6) = v19;
  *((_OWORD *)a4 + 7) = v17;
  result = memcpy(a4 + 160, (const void *)(v9 + 136), 0x120uLL);
  if (*(_BYTE *)(v9 + 3152))
  {
    *(_QWORD *)v52 = *(_QWORD *)a4;
    *(_DWORD *)&v52[8] = *((_DWORD *)a4 + 2);
    *(_QWORD *)&v52[16] = *(_QWORD *)a3;
    *(_DWORD *)&v52[24] = *(_DWORD *)(a3 + 8);
    v20 = *(_QWORD *)(a1 + 4864);
    v21 = *(_QWORD *)(v20 + 4776);
    v22 = *(_QWORD *)(v20 + 4760);
    *((_OWORD *)a4 + 28) = *(_OWORD *)v52;
    *(_OWORD *)(a4 + 460) = *(_OWORD *)&v52[12];
    v23 = *(_QWORD *)(v9 + 520);
    *((_OWORD *)a4 + 30) = *(_OWORD *)(v9 + 504);
    *((_QWORD *)a4 + 62) = v23;
    v24 = *(_QWORD *)(v9 + 544);
    *(_OWORD *)(a4 + 504) = *(_OWORD *)(v9 + 528);
    *((_QWORD *)a4 + 65) = v24;
    v25 = *(_OWORD *)(v9 + 568);
    *((_OWORD *)a4 + 33) = *(_OWORD *)(v9 + 552);
    *((_OWORD *)a4 + 34) = v25;
    *((_OWORD *)a4 + 35) = *(_OWORD *)(v9 + 584);
    v26 = *(_OWORD *)(v9 + 600);
    v27 = *(_OWORD *)(v9 + 616);
    v28 = *(_OWORD *)(v9 + 632);
    *((_QWORD *)a4 + 78) = *(_QWORD *)(v9 + 648);
    *((_OWORD *)a4 + 37) = v27;
    *((_OWORD *)a4 + 38) = v28;
    *((_OWORD *)a4 + 36) = v26;
    *(_OWORD *)(a4 + 632) = *(_OWORD *)(v9 + 656);
    v29 = *(_OWORD *)(v9 + 672);
    v30 = *(_OWORD *)(v9 + 688);
    v31 = *(_OWORD *)(v9 + 704);
    *((_QWORD *)a4 + 87) = *(_QWORD *)(v9 + 720);
    *(_OWORD *)(a4 + 680) = v31;
    *(_OWORD *)(a4 + 664) = v30;
    *(_OWORD *)(a4 + 648) = v29;
    *((_OWORD *)a4 + 44) = *(_OWORD *)(v9 + 728);
    v32 = *(_OWORD *)(v9 + 744);
    v33 = *(_OWORD *)(v9 + 760);
    v34 = *(_OWORD *)(v9 + 776);
    *((_QWORD *)a4 + 96) = *(_QWORD *)(v9 + 792);
    *((_OWORD *)a4 + 46) = v33;
    *((_OWORD *)a4 + 47) = v34;
    *((_OWORD *)a4 + 45) = v32;
    *(_OWORD *)(a4 + 776) = *(_OWORD *)(v9 + 800);
    v35 = *(_OWORD *)(v9 + 816);
    v36 = *(_OWORD *)(v9 + 832);
    v37 = *(_OWORD *)(v9 + 848);
    *((_QWORD *)a4 + 105) = *(_QWORD *)(v9 + 864);
    *(_OWORD *)(a4 + 808) = v36;
    *(_OWORD *)(a4 + 824) = v37;
    *(_OWORD *)(a4 + 792) = v35;
    *((_OWORD *)a4 + 53) = *(_OWORD *)(v9 + 872);
    v38 = *(_OWORD *)(v9 + 888);
    v39 = *(_OWORD *)(v9 + 904);
    v40 = *(_OWORD *)(v9 + 920);
    *((_QWORD *)a4 + 114) = *(_QWORD *)(v9 + 936);
    *((_OWORD *)a4 + 55) = v39;
    *((_OWORD *)a4 + 56) = v40;
    *((_OWORD *)a4 + 54) = v38;
    *(_OWORD *)(a4 + 920) = *(_OWORD *)(v9 + 944);
    v41 = *(_OWORD *)(v9 + 960);
    v42 = *(_OWORD *)(v9 + 976);
    v43 = *(_OWORD *)(v9 + 992);
    *((_QWORD *)a4 + 123) = *(_QWORD *)(v9 + 1008);
    *(_OWORD *)(a4 + 952) = v42;
    *(_OWORD *)(a4 + 968) = v43;
    *(_OWORD *)(a4 + 936) = v41;
    *((_OWORD *)a4 + 62) = *(_OWORD *)(v9 + 1016);
    v44 = *(_OWORD *)(v9 + 1032);
    v45 = *(_OWORD *)(v9 + 1048);
    v46 = *(_OWORD *)(v9 + 1064);
    *((_QWORD *)a4 + 132) = *(_QWORD *)(v9 + 1080);
    *((_OWORD *)a4 + 65) = v46;
    *((_OWORD *)a4 + 63) = v44;
    *((_OWORD *)a4 + 64) = v45;
    *(_OWORD *)(a4 + 1064) = *(_OWORD *)(v9 + 1088);
    v47 = *(_OWORD *)(v9 + 1104);
    v48 = *(_OWORD *)(v9 + 1120);
    v49 = *(_OWORD *)(v9 + 1136);
    *((_QWORD *)a4 + 141) = *(_QWORD *)(v9 + 1152);
    *(_OWORD *)(a4 + 1096) = v48;
    *(_OWORD *)(a4 + 1112) = v49;
    *(_OWORD *)(a4 + 1080) = v47;
    memcpy(a4 + 1136, (const void *)(v9 + 1160), 0x288uLL);
    v50 = *(_OWORD *)(v9 + 1808);
    *((_QWORD *)a4 + 225) = *(_QWORD *)(v9 + 1824);
    *(_OWORD *)(a4 + 1784) = v50;
    v51 = *(_QWORD *)(v9 + 1848);
    *((_OWORD *)a4 + 113) = *(_OWORD *)(v9 + 1832);
    *((_QWORD *)a4 + 228) = v51;
    memcpy(a4 + 1832, (const void *)(v9 + 1856), 0x288uLL);
    result = memcpy(a4 + 2480, (const void *)(v9 + 2504), 0x288uLL);
    *(_OWORD *)(a4 + 3128) = *(_OWORD *)(v20 + 4784);
    *((_QWORD *)a4 + 393) = *(_QWORD *)(v20 + 4800);
    *((_QWORD *)a4 + 394) = v22;
    *((_QWORD *)a4 + 395) = v21;
    a4[3168] = 1;
  }
  return result;
}

void sub_20F13C5B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int32x4_t *a7)
{
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  void *v46;
  _QWORD *v47;
  void *__p;
  void *v49;
  char v50;
  _OWORD v51[10];
  uint64_t v52;
  char v53;

  v14 = (_BYTE *)(a1 + 10488);
  LOBYTE(v51[0]) = 0;
  v53 = 0;
  if (*(int *)(a1 + 4904) >= 1)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2280)
        + 168
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2504)) >> 3);
    v16 = *(_OWORD *)(v15 - 168);
    v17 = *(_OWORD *)(v15 - 136);
    v51[1] = *(_OWORD *)(v15 - 152);
    v51[2] = v17;
    v51[0] = v16;
    v18 = *(_OWORD *)(v15 - 120);
    v19 = *(_OWORD *)(v15 - 104);
    v20 = *(_OWORD *)(v15 - 72);
    v51[5] = *(_OWORD *)(v15 - 88);
    v51[6] = v20;
    v51[3] = v18;
    v51[4] = v19;
    v21 = *(_OWORD *)(v15 - 56);
    v22 = *(_OWORD *)(v15 - 40);
    v23 = *(_OWORD *)(v15 - 24);
    v52 = *(_QWORD *)(v15 - 8);
    v51[8] = v22;
    v51[9] = v23;
    v51[7] = v21;
    v53 = 1;
  }
  LOBYTE(v46) = 0;
  v50 = 0;
  if (*v14)
  {
    sub_20F0AF078(&v46, (uint64_t *)(a1 + 10440));
    v50 = 1;
    LOBYTE(v40) = 0;
    v45 = 0;
    if (__p != v49)
    {
      v24 = *(_QWORD **)(a1 + 4864);
      v25 = v24[985];
      if (v25)
      {
        if (v24[977] == v25 && v24[983] == v24[984])
        {
          v26 = v24[976];
          if (v26)
          {
            v27 = v24[972];
          }
          else
          {
            v34 = v24[973];
            v27 = v24[972];
            v26 = 0x6DB6DB6DB6DB6DB7 * ((v34 - v27) >> 3);
          }
          v35 = v27 + 56 * v26;
          v38 = *(_OWORD *)(v35 - 48);
          v39 = *(_QWORD *)(v35 - 32);
          v36 = *(_OWORD *)(v35 - 24);
          v37 = *(_QWORD *)(v35 - 8);
          v40 = *(_QWORD *)(v35 - 56);
          v41 = v38;
          v42 = v39;
          v43 = v36;
          v44 = v37;
          v45 = 1;
        }
      }
    }
  }
  else
  {
    LOBYTE(v40) = 0;
    v45 = 0;
  }
  sub_20F1169B8(a1 + 3768, a2, a3, a4, a5, (uint64_t)v51, (uint64_t)&v40, *(_QWORD *)(a1 + 4864) + 4784, a6, a7, v14[248]);
  v28 = *(_QWORD *)(a1 + 4952);
  if (v28)
  {
    sub_20F7FD684(*(unsigned __int8 *)(a1 + 3776), *(unsigned __int8 *)(a1 + 3777), v28);
    v30 = *(_BYTE *)(a1 + 3768) == 10 && *(_BYTE *)(a1 + 3781) == 0;
    sub_20F7FDCEC(v30, *(_QWORD *)(a1 + 4952));
    sub_20F7FE770(*(unsigned __int8 *)(a1 + 3779), *(unsigned __int8 *)(a1 + 3780), *(_QWORD *)(a1 + 4952));
    sub_20F7FD18C(*(unsigned __int8 *)(a1 + 3782), *(_QWORD *)(a1 + 4952));
  }
  if (v50)
  {
    if (__p)
    {
      v49 = __p;
      operator delete(__p);
    }
    v31 = v46;
    if (v46)
    {
      v32 = v47;
      v33 = v46;
      if (v47 != v46)
      {
        do
        {
          v32 -= 13;
          sub_20E9905B4(v32);
        }
        while (v32 != v31);
        v33 = v46;
      }
      v47 = v31;
      operator delete(v33);
    }
  }
}

void sub_20F13C860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,_QWORD *a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,char a34)
{
  _QWORD *v35;
  void *v36;

  if (a34)
  {
    if (__p)
      operator delete(__p);
    if (a28)
    {
      v35 = a29;
      v36 = a28;
      if (a29 != a28)
      {
        do
        {
          v35 -= 13;
          sub_20E9905B4(v35);
        }
        while (v35 != a28);
        v36 = a28;
      }
      operator delete(v36);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F13C8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20F12BF38((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F13C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20F12BF38((uint64_t)&a28);
  _Unwind_Resume(a1);
}

BOOL sub_20F13C8E4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  void *v33[2];
  void *__p;
  unsigned __int8 v35;
  _BYTE v36[7];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _DWORD v43[2];

  if (!*(_BYTE *)(a1 + 1043)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 2093, (uint64_t)"IsUsingIMU()", 12, (uint64_t)"We must be using IMU", 20, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(a1 + 1084)&& !*(_BYTE *)(a1 + 624)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 2098, (uint64_t)"(config_.navigation_config.pose_tracker_config .run_pnp_after_epipolar_outlier_rejection_in_visual_slam || config_.navigation_config.pose_tracker_config.outlier_rejection_config .use_p3p_estimator_for_primary_stream_in_stereo)", 226, (uint64_t)"P3P must be enabled to compute the vision-propagted pose", 56, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_41;
  }
  v2 = *(_QWORD *)(a1 + 4864);
  if ((*(_DWORD *)(v2 + 2276) & 0xFFFFFFFE) != 2)
    return 1;
  if (*(int *)(a1 + 4904) >= 1)
  {
    v3 = *(_QWORD **)(a1 + 4848);
    v4 = v3[106];
    if (v4)
    {
      v5 = v3[102];
      v6 = v5 + 328 * v4 - 328;
      if (v4 != 1)
      {
LABEL_16:
        v18 = v5 + 328 * (v4 - 2);
        v19 = *(_DWORD **)(v2 + 2480);
        v20 = *(_DWORD **)(v2 + 2488);
        if (v19 == v20)
        {
          v23 = 0;
        }
        else
        {
          v21 = *(_DWORD **)(v2 + 2480);
          while (*v21 != *(_DWORD *)v18)
          {
            if (++v21 == v20)
            {
              v21 = *(_DWORD **)(v2 + 2488);
              break;
            }
          }
          v22 = v21 - v19;
          if (v21 == v20)
            v23 = 0;
          else
            v23 = v22;
          if (v21 != v20)
          {
LABEL_29:
            v24 = *(_QWORD *)(v2 + 2280);
            v40 = 0;
            v41 = 0;
            v42 = 0;
            sub_20FD33470((_QWORD *)(v2 + 8056), (uint64_t)&v40, *(double *)(v18 + 8), *(double *)(v6 + 8));
            v25 = *(_QWORD *)(a1 + 4792);
            v26 = *(_DWORD *)v6;
            sub_20F102700((_QWORD *)(*(_QWORD *)(a1 + 4848) + 760), (uint64_t)v33);
            v27 = *(_QWORD *)(a1 + 4864);
            if (*(_BYTE *)(v25 + 64)
              && !*(_BYTE *)(v25 + 65)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/IMUMeasurementsValidator.cpp", 37, (uint64_t)"!config_.enable_accel_usage_in_ba || config_.enable_gyro_usage_in_ba", 68, (uint64_t)&unk_21027FE1E, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            sub_20F09B63C(v25, v26, v24 + 168 * v23, (uint64_t *)&v40, v33, (unsigned int **)(a1 + 4824), v27 + 4752, (uint64_t)&v35);
            v11 = v35;
            v43[0] = *(_DWORD *)v36;
            *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)&v36[3];
            v9 = v37;
            v32 = v38;
            v12 = v39;
            v28 = __p;
            if (__p)
            {
              do
              {
                v29 = (_QWORD *)*v28;
                operator delete(v28);
                v28 = v29;
              }
              while (v29);
            }
            v30 = v33[0];
            v33[0] = 0;
            if (v30)
              operator delete(v30);
            if (v40)
            {
              v41 = v40;
              operator delete(v40);
            }
            v10 = v32;
            v13 = *(_QWORD **)(a1 + 4848);
            v14 = v13[106];
            if (v14)
              goto LABEL_39;
            goto LABEL_13;
          }
        }
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 2122, (uint64_t)"opt_ref_state_index", 19, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
        {
          v2 = *(_QWORD *)(a1 + 4864);
          goto LABEL_29;
        }
LABEL_41:
        abort();
      }
      v7 = 0x8F9C18F9C18F9C19 * ((v3[103] - v5) >> 3);
    }
    else
    {
      v17 = v3[103];
      v5 = v3[102];
      v7 = 0x8F9C18F9C18F9C19 * ((v17 - v5) >> 3);
      v6 = v17 - 328;
    }
    v4 += v7;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(a1 + 3680);
  v10 = *(_OWORD *)(a1 + 3696);
  v11 = 1;
  v12 = *(_QWORD *)(a1 + 3688);
  v13 = *(_QWORD **)(a1 + 4848);
  v14 = v13[106];
  if (v14)
  {
LABEL_39:
    v16 = v13[102];
    goto LABEL_40;
  }
LABEL_13:
  v15 = v13[103];
  v16 = v13[102];
  v14 = 0x8F9C18F9C18F9C19 * ((v15 - v16) >> 3);
LABEL_40:
  v31 = v16 + 328 * v14;
  *(_BYTE *)(v31 - 40) = v11;
  *(_DWORD *)(v31 - 39) = v43[0];
  *(_DWORD *)(v31 - 36) = *(_DWORD *)((char *)v43 + 3);
  *(_QWORD *)(v31 - 32) = v9;
  *(_OWORD *)(v31 - 24) = v10;
  *(_QWORD *)(v31 - 8) = v12;
  return v11 == 0;
}

void sub_20F13CC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)(v11 - 112);
  if (v13)
  {
    *(_QWORD *)(v11 - 104) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F13CCC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[209];

  v12[208] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 4832) - *(_QWORD *)(result + 4824);
  if (v2)
  {
    v4 = result;
    v5 = 0;
    v6 = v2 >> 5;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 4824) + 32 * v5 + 16) - *(_QWORD *)(*(_QWORD *)(v4 + 4824) + 32 * v5 + 8);
      if (v7)
      {
        v8 = 0;
        v9 = v7 / 1664;
        do
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v4 + 4824) + 32 * v5 + 8);
          sub_20EB81E74((uint64_t)v12, *(_QWORD *)(*a2 + 32 * v5 + 8) + v8);
          v11 = (_QWORD *)(v10 + v8);
          *v11 = v12[0];
          v11[1] = v12[1];
          v11[2] = v12[2];
          v11[3] = v12[3];
          v11[4] = v12[4];
          v11[5] = v12[5];
          v11[6] = v12[6];
          v11[7] = v12[7];
          v11[8] = v12[8];
          v11[9] = v12[9];
          v11[10] = v12[10];
          v11[11] = v12[11];
          v11[195] = v12[195];
          result = sub_20EB8188C((uint64_t)v12);
          v8 += 1664;
          --v9;
        }
        while (v9);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

_QWORD *sub_20F13CE48(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[109];
  if (v2)
  {
    a1[110] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[102];
  if (v3)
  {
    a1[103] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[95];
  if (v4)
  {
    a1[96] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[88];
  if (v5)
  {
    a1[89] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[81];
  if (v6)
  {
    a1[82] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[67];
  if (v7)
  {
    a1[68] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[61];
  if (v8)
  {
    a1[62] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F13CED8(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  if (*(unsigned __int8 *)(a1 + 3160) == *(unsigned __int8 *)(a2 + 3160))
  {
    if (*(_BYTE *)(a1 + 3160))
      sub_20F13D1BC(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 3160))
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v4 = *(void **)(a1 + 424);
      if (v4)
      {
        *(_QWORD *)(a1 + 432) = v4;
        operator delete(v4);
      }
    }
    *(_BYTE *)(a1 + 3160) = 0;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = *(_OWORD *)(a2 + 72);
    v9 = *(_OWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 88) = v9;
    *(_OWORD *)(a1 + 72) = v8;
    memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0x120uLL);
    *(_BYTE *)(a1 + 424) = 0;
    *(_BYTE *)(a1 + 496) = 0;
    if (*(_BYTE *)(a2 + 496))
    {
      *(_QWORD *)(a1 + 424) = 0;
      *(_QWORD *)(a1 + 432) = 0;
      *(_QWORD *)(a1 + 440) = 0;
      v11 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = v11;
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a2 + 424) = 0;
      *(_QWORD *)(a2 + 432) = 0;
      *(_QWORD *)(a2 + 440) = 0;
      v12 = *(_OWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 448) = v12;
      v13 = *(_OWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_OWORD *)(a1 + 472) = v13;
      *(_BYTE *)(a1 + 496) = 1;
    }
    *(_BYTE *)(a1 + 504) = 0;
    *(_BYTE *)(a1 + 3152) = 0;
    if (*(_BYTE *)(a2 + 3152))
    {
      v14 = *(_OWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      *(_OWORD *)(a1 + 504) = v14;
      v15 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v15;
      v16 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v16;
      v18 = *(_OWORD *)(a2 + 616);
      v17 = *(_OWORD *)(a2 + 632);
      v19 = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
      *(_OWORD *)(a1 + 616) = v18;
      *(_OWORD *)(a1 + 632) = v17;
      *(_OWORD *)(a1 + 600) = v19;
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      v21 = *(_OWORD *)(a2 + 688);
      v20 = *(_OWORD *)(a2 + 704);
      v22 = *(_OWORD *)(a2 + 672);
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v21;
      *(_OWORD *)(a1 + 704) = v20;
      *(_OWORD *)(a1 + 672) = v22;
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
      v23 = *(_OWORD *)(a2 + 744);
      v24 = *(_OWORD *)(a2 + 760);
      v25 = *(_OWORD *)(a2 + 776);
      *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v24;
      *(_OWORD *)(a1 + 776) = v25;
      *(_OWORD *)(a1 + 744) = v23;
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
      v26 = *(_OWORD *)(a2 + 816);
      v27 = *(_OWORD *)(a2 + 832);
      v28 = *(_OWORD *)(a2 + 848);
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 832) = v27;
      *(_OWORD *)(a1 + 848) = v28;
      *(_OWORD *)(a1 + 816) = v26;
      *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
      v29 = *(_OWORD *)(a2 + 888);
      v30 = *(_OWORD *)(a2 + 904);
      v31 = *(_OWORD *)(a2 + 920);
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 904) = v30;
      *(_OWORD *)(a1 + 920) = v31;
      *(_OWORD *)(a1 + 888) = v29;
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      v32 = *(_OWORD *)(a2 + 960);
      v33 = *(_OWORD *)(a2 + 976);
      v34 = *(_OWORD *)(a2 + 992);
      *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 976) = v33;
      *(_OWORD *)(a1 + 992) = v34;
      *(_OWORD *)(a1 + 960) = v32;
      *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
      v35 = *(_OWORD *)(a2 + 1032);
      v36 = *(_OWORD *)(a2 + 1048);
      v37 = *(_OWORD *)(a2 + 1064);
      *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 1048) = v36;
      *(_OWORD *)(a1 + 1064) = v37;
      *(_OWORD *)(a1 + 1032) = v35;
      *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
      v38 = *(_OWORD *)(a2 + 1104);
      v39 = *(_OWORD *)(a2 + 1120);
      v40 = *(_OWORD *)(a2 + 1136);
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 1136) = v40;
      *(_OWORD *)(a1 + 1120) = v39;
      *(_OWORD *)(a1 + 1104) = v38;
      memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
      v41 = *(_OWORD *)(a2 + 1808);
      *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
      *(_OWORD *)(a1 + 1808) = v41;
      v42 = *(_QWORD *)(a2 + 1848);
      *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
      *(_QWORD *)(a1 + 1848) = v42;
      memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
      memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
      *(_BYTE *)(a1 + 3152) = 1;
    }
    *(_BYTE *)(a1 + 3160) = 1;
  }
}

uint64_t sub_20F13D1BC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  int v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  v7 = *(_OWORD *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  memcpy((void *)(a1 + 136), (const void *)(a2 + 136), 0x120uLL);
  v10 = (void **)(a1 + 424);
  v11 = (_QWORD *)(a2 + 424);
  if (*(unsigned __int8 *)(a1 + 496) != *(unsigned __int8 *)(a2 + 496))
  {
    if (!*(_BYTE *)(a1 + 496))
    {
      *v10 = 0;
      *(_QWORD *)(a1 + 432) = 0;
      *(_QWORD *)(a1 + 440) = 0;
      v50 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = v50;
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *v11 = 0;
      *(_QWORD *)(a2 + 432) = 0;
      *(_QWORD *)(a2 + 440) = 0;
      v51 = *(_OWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_OWORD *)(a1 + 448) = v51;
      v52 = *(_OWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_OWORD *)(a1 + 472) = v52;
      *(_BYTE *)(a1 + 496) = 1;
      v16 = a1 + 504;
      v17 = (__int128 *)(a2 + 504);
      v18 = *(unsigned __int8 *)(a1 + 3152);
      if (v18 == *(unsigned __int8 *)(a2 + 3152))
        goto LABEL_12;
      goto LABEL_16;
    }
    v19 = *v10;
    if (*v10)
    {
      *(_QWORD *)(a1 + 432) = v19;
      operator delete(v19);
    }
    *(_BYTE *)(a1 + 496) = 0;
LABEL_11:
    v16 = a1 + 504;
    v17 = (__int128 *)(a2 + 504);
    v18 = *(unsigned __int8 *)(a1 + 3152);
    if (v18 == *(unsigned __int8 *)(a2 + 3152))
      goto LABEL_12;
LABEL_16:
    if (v18)
    {
      *(_BYTE *)(a1 + 3152) = 0;
    }
    else
    {
      v53 = *v17;
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v16 = v53;
      v54 = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v54;
      v55 = *(_OWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_OWORD *)(a1 + 568) = v55;
      v57 = *(_OWORD *)(a2 + 616);
      v56 = *(_OWORD *)(a2 + 632);
      v58 = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
      *(_OWORD *)(a1 + 616) = v57;
      *(_OWORD *)(a1 + 632) = v56;
      *(_OWORD *)(a1 + 600) = v58;
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      v60 = *(_OWORD *)(a2 + 688);
      v59 = *(_OWORD *)(a2 + 704);
      v61 = *(_OWORD *)(a2 + 672);
      *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 688) = v60;
      *(_OWORD *)(a1 + 704) = v59;
      *(_OWORD *)(a1 + 672) = v61;
      *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
      *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
      v62 = *(_OWORD *)(a2 + 744);
      v63 = *(_OWORD *)(a2 + 760);
      v64 = *(_OWORD *)(a2 + 776);
      *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v63;
      *(_OWORD *)(a1 + 776) = v64;
      *(_OWORD *)(a1 + 744) = v62;
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
      v65 = *(_OWORD *)(a2 + 816);
      v66 = *(_OWORD *)(a2 + 832);
      v67 = *(_OWORD *)(a2 + 848);
      *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 832) = v66;
      *(_OWORD *)(a1 + 848) = v67;
      *(_OWORD *)(a1 + 816) = v65;
      *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
      v68 = *(_OWORD *)(a2 + 888);
      v69 = *(_OWORD *)(a2 + 904);
      v70 = *(_OWORD *)(a2 + 920);
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      *(_OWORD *)(a1 + 904) = v69;
      *(_OWORD *)(a1 + 920) = v70;
      *(_OWORD *)(a1 + 888) = v68;
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      v71 = *(_OWORD *)(a2 + 960);
      v72 = *(_OWORD *)(a2 + 976);
      v73 = *(_OWORD *)(a2 + 992);
      *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 976) = v72;
      *(_OWORD *)(a1 + 992) = v73;
      *(_OWORD *)(a1 + 960) = v71;
      *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
      v74 = *(_OWORD *)(a2 + 1032);
      v75 = *(_OWORD *)(a2 + 1048);
      v76 = *(_OWORD *)(a2 + 1064);
      *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
      *(_OWORD *)(a1 + 1048) = v75;
      *(_OWORD *)(a1 + 1064) = v76;
      *(_OWORD *)(a1 + 1032) = v74;
      *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
      v77 = *(_OWORD *)(a2 + 1104);
      v78 = *(_OWORD *)(a2 + 1120);
      v79 = *(_OWORD *)(a2 + 1136);
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 1136) = v79;
      *(_OWORD *)(a1 + 1120) = v78;
      *(_OWORD *)(a1 + 1104) = v77;
      memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
      v80 = *(_OWORD *)(a2 + 1808);
      *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
      *(_OWORD *)(a1 + 1808) = v80;
      v81 = *(_QWORD *)(a2 + 1848);
      *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
      *(_QWORD *)(a1 + 1848) = v81;
      memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
      memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
      *(_BYTE *)(a1 + 3152) = 1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 496))
    goto LABEL_11;
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(a1 + 432) = v12;
    operator delete(v12);
    *v10 = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
  }
  v13 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v13;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *v11 = 0;
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  v14 = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = v14;
  v15 = *(_OWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = v15;
  v16 = a1 + 504;
  v17 = (__int128 *)(a2 + 504);
  v18 = *(unsigned __int8 *)(a1 + 3152);
  if (v18 != *(unsigned __int8 *)(a2 + 3152))
    goto LABEL_16;
LABEL_12:
  if (v18)
  {
    v20 = *v17;
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
    *(_OWORD *)v16 = v20;
    v21 = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = v21;
    v22 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v22;
    v24 = *(_OWORD *)(a2 + 616);
    v23 = *(_OWORD *)(a2 + 632);
    v25 = *(_OWORD *)(a2 + 600);
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
    *(_OWORD *)(a1 + 616) = v24;
    *(_OWORD *)(a1 + 632) = v23;
    *(_OWORD *)(a1 + 600) = v25;
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    v27 = *(_OWORD *)(a2 + 688);
    v26 = *(_OWORD *)(a2 + 704);
    v28 = *(_OWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 688) = v27;
    *(_OWORD *)(a1 + 704) = v26;
    *(_OWORD *)(a1 + 672) = v28;
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
    v29 = *(_OWORD *)(a2 + 744);
    v30 = *(_OWORD *)(a2 + 760);
    v31 = *(_OWORD *)(a2 + 776);
    *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
    *(_OWORD *)(a1 + 760) = v30;
    *(_OWORD *)(a1 + 776) = v31;
    *(_OWORD *)(a1 + 744) = v29;
    *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
    v32 = *(_OWORD *)(a2 + 816);
    v33 = *(_OWORD *)(a2 + 832);
    v34 = *(_OWORD *)(a2 + 848);
    *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
    *(_OWORD *)(a1 + 832) = v33;
    *(_OWORD *)(a1 + 848) = v34;
    *(_OWORD *)(a1 + 816) = v32;
    *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
    v35 = *(_OWORD *)(a2 + 888);
    v36 = *(_OWORD *)(a2 + 904);
    v37 = *(_OWORD *)(a2 + 920);
    *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
    *(_OWORD *)(a1 + 904) = v36;
    *(_OWORD *)(a1 + 920) = v37;
    *(_OWORD *)(a1 + 888) = v35;
    *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
    v38 = *(_OWORD *)(a2 + 960);
    v39 = *(_OWORD *)(a2 + 976);
    v40 = *(_OWORD *)(a2 + 992);
    *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
    *(_OWORD *)(a1 + 976) = v39;
    *(_OWORD *)(a1 + 992) = v40;
    *(_OWORD *)(a1 + 960) = v38;
    *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
    v41 = *(_OWORD *)(a2 + 1032);
    v42 = *(_OWORD *)(a2 + 1048);
    v43 = *(_OWORD *)(a2 + 1064);
    *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
    *(_OWORD *)(a1 + 1048) = v42;
    *(_OWORD *)(a1 + 1064) = v43;
    *(_OWORD *)(a1 + 1032) = v41;
    *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
    v44 = *(_OWORD *)(a2 + 1104);
    v45 = *(_OWORD *)(a2 + 1120);
    v46 = *(_OWORD *)(a2 + 1136);
    *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
    *(_OWORD *)(a1 + 1136) = v46;
    *(_OWORD *)(a1 + 1120) = v45;
    *(_OWORD *)(a1 + 1104) = v44;
    memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x288uLL);
    v47 = *(_OWORD *)(a2 + 1808);
    *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
    *(_OWORD *)(a1 + 1808) = v47;
    v48 = *(_QWORD *)(a2 + 1848);
    *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
    *(_QWORD *)(a1 + 1848) = v48;
    memcpy((void *)(a1 + 1856), (const void *)(a2 + 1856), 0x288uLL);
    memcpy((void *)(a1 + 2504), (const void *)(a2 + 2504), 0x288uLL);
  }
  return a1;
}

uint64_t sub_20F13D6B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v2 = *(_QWORD *)(a1 + 3264);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 3272);
    v4 = *(void **)(a1 + 3264);
    if (v3 != v2)
    {
      v5 = v3 - 2736;
      do
      {
        if (*(_BYTE *)(v5 + 72))
        {
          v7 = *(void **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)(v5 + 8) = v7;
            operator delete(v7);
          }
        }
        v6 = v5 - 424;
        v5 -= 3160;
      }
      while (v6 != v2);
      v4 = *(void **)(a1 + 3264);
    }
    *(_QWORD *)(a1 + 3272) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 3216);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 3224);
    v10 = *(void **)(a1 + 3216);
    if (v9 != v8)
    {
      v11 = v9 - 2736;
      do
      {
        if (*(_BYTE *)(v11 + 72))
        {
          v13 = *(void **)v11;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)(v11 + 8) = v13;
            operator delete(v13);
          }
        }
        v12 = v11 - 424;
        v11 -= 3160;
      }
      while (v12 != v8);
      v10 = *(void **)(a1 + 3216);
    }
    *(_QWORD *)(a1 + 3224) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)(a1 + 3168);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 3176);
    v16 = *(void **)(a1 + 3168);
    if (v15 != v14)
    {
      v17 = v15 - 2736;
      do
      {
        if (*(_BYTE *)(v17 + 72))
        {
          v19 = *(void **)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)(v17 + 8) = v19;
            operator delete(v19);
          }
        }
        v18 = v17 - 424;
        v17 -= 3160;
      }
      while (v18 != v14);
      v16 = *(void **)(a1 + 3168);
    }
    *(_QWORD *)(a1 + 3176) = v14;
    operator delete(v16);
  }
  if (*(_BYTE *)(a1 + 3160))
  {
    if (*(_BYTE *)(a1 + 496))
    {
      v20 = *(void **)(a1 + 424);
      if (v20)
      {
        *(_QWORD *)(a1 + 432) = v20;
        operator delete(v20);
      }
    }
  }
  return a1;
}

_OWORD *sub_20F13D804(_OWORD *result, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;

  v2 = result;
  v3 = *(_OWORD *)(a2 + 16);
  *result = *(_OWORD *)a2;
  result[1] = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)result + 6) = *(_QWORD *)(a2 + 48);
  result[2] = v4;
  *((_QWORD *)result + 7) = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)result + 10) = *(_QWORD *)(a2 + 80);
  result[4] = v5;
  v6 = *(_OWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 100);
  *((_QWORD *)result + 15) = 0;
  *(_OWORD *)((char *)result + 100) = v7;
  *(_OWORD *)((char *)result + 88) = v6;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = 0;
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 128);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      sub_20E867F44();
    result = operator new(v9 - v8);
    v11 = 0;
    *((_QWORD *)v2 + 15) = result;
    *((_QWORD *)v2 + 16) = result;
    *((_QWORD *)v2 + 17) = &result[2 * (v10 >> 5)];
    do
    {
      v12 = v8 + v11;
      v13 = (char *)&result[v11 / 0x10];
      *(_DWORD *)v13 = *(_DWORD *)(v8 + v11);
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v8 + v11 + 8);
      *((_QWORD *)v13 + 3) = *(_QWORD *)(v8 + v11 + 24);
      v11 += 32;
    }
    while (v12 + 32 != v9);
    *((_QWORD *)v2 + 16) = &result[v11 / 0x10];
  }
  *((_BYTE *)v2 + 144) = 1;
  return result;
}

void sub_20F13D8F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 128) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F13D910(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  char v25;

  v8 = a1[2];
  v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v9) >> 3) >= a4)
    {
      sub_20F13DB94((uint64_t)&v25, a2, a3, v9);
      v22 = v21;
      v23 = (_QWORD *)a1[1];
      if (v23 != v21)
      {
        do
        {
          v23 -= 13;
          sub_20E9905B4(v23);
        }
        while (v23 != v22);
      }
      a1[1] = (uint64_t)v22;
    }
    else
    {
      v18 = a2 + 8 * ((a1[1] - v9) >> 3);
      sub_20F13DB94((uint64_t)&v24, a2, v18, v9);
      v19 = a1[1];
      if (v18 != a3)
      {
        v20 = 0;
        do
        {
          sub_20EE65FB0(v19 + v20, v18 + v20);
          v20 += 104;
        }
        while (v18 + v20 != a3);
        v19 += v20;
      }
      a1[1] = v19;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (_QWORD *)a1[1];
      v11 = (void *)*a1;
      if (v10 != (_QWORD *)v9)
      {
        do
        {
          v10 -= 13;
          sub_20E9905B4(v10);
        }
        while (v10 != (_QWORD *)v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x276276276276276)
      goto LABEL_28;
    v12 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v13;
    if (v14 > 0x276276276276276)
LABEL_28:
      sub_20E867F44();
    v15 = 104 * v14;
    v16 = (char *)operator new(104 * v14);
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)&v16[v15];
    if (a2 != a3)
    {
      v17 = 0;
      do
      {
        sub_20EE65FB0((uint64_t)&v16[v17], a2 + v17);
        v17 += 104;
      }
      while (a2 + v17 != a3);
      v16 += v17;
    }
    a1[1] = (uint64_t)v16;
  }
}

void sub_20F13DB6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 104)
    sub_20E9905B4((_QWORD *)(v2 - 104 + v3));
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F13DB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
    if (a2 != a4)
    {
      v8 = (char **)(a2 + v7);
      sub_20F13DCA0((void **)(a4 + v7 + 8), *(__int128 **)(a2 + v7 + 8), *(__int128 **)(a2 + v7 + 16), 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(a2 + v7 + 16) - *(_QWORD *)(a2 + v7 + 8)) >> 3));
      sub_20EDB66F4((_QWORD *)(a4 + v7 + 32), v8[4], v8[5], 0x8E38E38E38E38E39 * ((v8[5] - v8[4]) >> 3));
      sub_20EDB66F4((_QWORD *)(a4 + v7 + 56), v8[7], v8[8], 0x8E38E38E38E38E39 * ((v8[8] - v8[7]) >> 3));
      sub_20EDB66F4((_QWORD *)(a4 + v7 + 80), v8[10], v8[11], 0x8E38E38E38E38E39 * ((v8[11] - v8[10]) >> 3));
    }
    v7 += 104;
  }
  while (a2 + v7 != v6);
  return v6;
}

void **sub_20F13DCA0(void **result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  void **v7;
  uint64_t v8;
  char **v9;
  char **v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  void **v18;
  _BYTE *v19;
  __int128 *v20;
  __int128 v21;
  char **v22;
  uint64_t v23;
  char **v24;
  __int128 v25;
  __int128 v26;

  v6 = a2;
  v7 = result;
  v8 = (uint64_t)result[2];
  v9 = (char **)*result;
  if (0x6FB586FB586FB587 * ((v8 - (uint64_t)*result) >> 3) < a4)
  {
    if (v9)
    {
      v10 = (char **)result[1];
      v11 = *result;
      if (v10 != v9)
      {
        do
        {
          sub_20E990658((uint64_t)(v10 - 26));
          sub_20E990658((uint64_t)(v10 - 52));
          v10 -= 55;
        }
        while (v10 != v9);
        v11 = *v7;
      }
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x94F2094F2094F2)
      goto LABEL_35;
    v12 = 0x6FB586FB586FB587 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x4A7904A7904A79 ? 0x94F2094F2094F2 : v13;
    if (v14 > 0x94F2094F2094F2)
LABEL_35:
      sub_20E867F44();
    v15 = 55 * v14;
    result = (void **)operator new(440 * v14);
    v16 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v15];
    if (v6 != a3)
    {
      v17 = 0;
      do
      {
        v18 = &v16[v17 / 8];
        *(_OWORD *)v18 = *(__int128 *)((char *)v6 + v17);
        v18[2] = *(void **)((char *)v6 + v17 + 16);
        sub_20EE66450(&v16[v17 / 8 + 3], (uint64_t)v6 + v17 + 24);
        result = (void **)sub_20EE66944(&v16[v17 / 8 + 29], (uint64_t *)((char *)v6 + v17 + 232));
        v17 += 440;
      }
      while ((__int128 *)((char *)v6 + v17) != a3);
      v16 = (void **)((char *)v16 + v17);
    }
    goto LABEL_32;
  }
  v19 = result[1];
  if (0x6FB586FB586FB587 * ((v19 - (_BYTE *)v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      v16 = (void **)*result;
      if (v19 == (_BYTE *)v9)
      {
LABEL_32:
        v7[1] = v16;
        return result;
      }
    }
    else
    {
      v16 = (void **)*result;
      do
      {
        v26 = *v6;
        v9[2] = (char *)*((_QWORD *)v6 + 2);
        *(_OWORD *)v9 = v26;
        sub_20F13E01C(v9 + 3, (char **)v6 + 3);
        result = (void **)sub_20F13E104(v9 + 29, (_QWORD *)v6 + 29);
        v16 += 55;
        v6 = (__int128 *)((char *)v6 + 440);
        v9 += 55;
      }
      while (v6 != a3);
      v19 = v7[1];
      if (v19 == (_BYTE *)v16)
        goto LABEL_32;
    }
    do
    {
      sub_20E990658((uint64_t)(v19 - 208));
      result = (void **)sub_20E990658((uint64_t)(v19 - 416));
      v19 -= 440;
    }
    while (v19 != (_BYTE *)v16);
    goto LABEL_32;
  }
  v20 = (__int128 *)((char *)a2 + 8 * ((v19 - (_BYTE *)v9) >> 3));
  if (v19 != (_BYTE *)v9)
  {
    do
    {
      v21 = *v6;
      v9[2] = (char *)*((_QWORD *)v6 + 2);
      *(_OWORD *)v9 = v21;
      sub_20F13E01C(v9 + 3, (char **)v6 + 3);
      result = (void **)sub_20F13E104(v9 + 29, (_QWORD *)v6 + 29);
      v6 = (__int128 *)((char *)v6 + 440);
      v9 += 55;
    }
    while (v6 != v20);
    v9 = (char **)v7[1];
  }
  v22 = v9;
  if (v20 != a3)
  {
    v23 = 0;
    do
    {
      v24 = &v9[v23];
      v25 = *(__int128 *)((char *)v20 + v23 * 8);
      v24[2] = *(char **)((char *)v20 + v23 * 8 + 16);
      *(_OWORD *)v24 = v25;
      sub_20EE66450(&v9[v23 + 3], (uint64_t)v20 + v23 * 8 + 24);
      result = (void **)sub_20EE66944(&v9[v23 + 29], (uint64_t *)((char *)v20 + v23 * 8 + 232));
      v23 += 55;
    }
    while ((__int128 *)((char *)v20 + v23 * 8) != a3);
    v22 = &v9[v23];
  }
  v7[1] = v22;
  return result;
}

void sub_20F13DFD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_20E990658(v2 + v3 + 24);
  for (; v3; v3 -= 440)
  {
    sub_20E990658(v2 + v3 - 208);
    sub_20E990658(v2 + v3 - 416);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char **sub_20F13E01C(char **a1, char **a2)
{
  if (a1 == a2)
  {
    sub_20F13E1EC((uint64_t)(a1 + 9), (uint64_t)(a1 + 9));
    sub_20F13E2E8((uint64_t)(a1 + 16), (uint64_t)(a1 + 16));
  }
  else
  {
    sub_20E9BF954(a1, *a2, a2[1], (a2[1] - *a2) >> 4);
    sub_20E9BF954(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 4);
    sub_20E86811C(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 3);
    sub_20F13E1EC((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
    sub_20F0E80A4(a1 + 13, a2[13], a2[14], (a2[14] - a2[13]) >> 2);
    sub_20F13E2E8((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
    sub_20E86811C(a1 + 20, a2[20], a2[21], (a2[21] - a2[20]) >> 3);
    sub_20E86811C(a1 + 23, a2[23], a2[24], (a2[24] - a2[23]) >> 3);
  }
  return a1;
}

_QWORD *sub_20F13E104(_QWORD *a1, _QWORD *a2)
{
  if (a1 == a2)
  {
    sub_20F13E1EC((uint64_t)(a1 + 9), (uint64_t)(a1 + 9));
    sub_20F13E2E8((uint64_t)(a1 + 16), (uint64_t)(a1 + 16));
  }
  else
  {
    sub_20F13E3E4((uint64_t)a1, (_OWORD *)*a2, (_OWORD *)a2[1], (uint64_t)(a2[1] - *a2) >> 5);
    sub_20F13E3E4((uint64_t)(a1 + 3), (_OWORD *)a2[3], (_OWORD *)a2[4], (uint64_t)(a2[4] - a2[3]) >> 5);
    sub_20E86811C(a1 + 6, (char *)a2[6], (char *)a2[7], (uint64_t)(a2[7] - a2[6]) >> 3);
    sub_20F13E1EC((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
    sub_20F0E80A4(a1 + 13, (char *)a2[13], (char *)a2[14], (uint64_t)(a2[14] - a2[13]) >> 2);
    sub_20F13E2E8((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
    sub_20E86811C(a1 + 20, (char *)a2[20], (char *)a2[21], (uint64_t)(a2[21] - a2[20]) >> 3);
    sub_20E86811C(a1 + 23, (char *)a2[23], (char *)a2[24], (uint64_t)(a2[24] - a2[23]) >> 3);
  }
  return a1;
}

void sub_20F13E1EC(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_20E86811C((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_20E867F44();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[8 * (v6 >> 3)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20F13E2CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F13E2E8(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_20F0E80A4((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_20EABADD4();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[4 * (v6 >> 2)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20F13E3C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20F13E3E4(uint64_t a1, _OWORD *a2, _OWORD *a3, size_t __sz)
{
  _OWORD *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char **v18;
  char *v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v19 = *(char **)(a1 + 8);
    v18 = (char **)(a1 + 8);
    v17 = v19;
    v20 = (v19 - result) >> 5;
    if (v20 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *v6;
          *((_OWORD *)v25 + 1) = v6[1];
          v24 += 32;
          v6 += 2;
          v25 += 32;
        }
        while (v6 != a3);
      }
      *v18 = v24;
    }
    else
    {
      v21 = &a2[2 * v20];
      if (v17 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          *((_OWORD *)result + 1) = v6[1];
          v6 += 2;
          result += 32;
        }
        while (v6 != v21);
        result = *v18;
      }
      v22 = result;
      if (v21 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          *(_OWORD *)v23 = *v21;
          *((_OWORD *)v23 + 1) = v21[1];
          v22 += 32;
          v21 += 2;
          v23 += 32;
        }
        while (v21 != a3);
      }
      *v18 = v22;
    }
  }
  else
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 59)
      goto LABEL_26;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_26:
      sub_20E867F44();
    v13 = 32 * v12;
    result = (char *)operator new(32 * v12);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        v15 = *v6;
        v16 = v6[1];
        v6 += 2;
        *(_OWORD *)v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        v14 += 32;
      }
      while (v6 != a3);
    }
    *(_QWORD *)(a1 + 8) = v14;
  }
  return result;
}

uint64_t sub_20F13E5AC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[87];
  if (v2)
  {
    a1[88] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[84];
  if (v3)
  {
    a1[85] = v3;
    operator delete(v3);
  }
  sub_20F04F084(a1 + 31);
  v4 = (void *)a1[28];
  if (v4)
  {
    a1[29] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[25];
  if (v5)
  {
    a1[26] = v5;
    operator delete(v5);
  }
  return sub_20F028B60((uint64_t)a1);
}

uint64_t sub_20F13E614(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F13E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t result;

  v11 = qword_254A62250;
  if (*(_BYTE *)(qword_254A62250 + 2)
    && a9 == *(unsigned __int8 *)qword_254A62250
    && a11 == *(unsigned __int8 *)(qword_254A62250 + 1))
  {
    return 0;
  }
  *(_BYTE *)qword_254A62250 = a9 != 0;
  *(_BYTE *)(v11 + 1) = a11 != 0;
  result = 1;
  *(_BYTE *)(v11 + 2) = 1;
  return result;
}

void sub_20F13E6F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F13E700(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void **sub_20F13E738(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20EB8188C(v3 - 1664);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F13E790(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (0x8E38E38E38E38E39 * (v10 >> 4) >= 0x1C71C71C71C71C8)
          sub_20E867F44();
        v11 = (char *)operator new(v10);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F13E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F13E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F13E8CC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (void **)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(a1 + 24);
    if (v7 != v6)
    {
      do
        v7 = sub_20EB8188C(v7 - 1664);
      while (v7 != v6);
      v8 = *v5;
    }
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v8);
    *v5 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v10 = *(void **)(a1 + 72);
  if (v10)
  {
    *(_QWORD *)(a1 + 80) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v11 = *(void **)(a1 + 96);
  if (v11)
  {
    *(_QWORD *)(a1 + 104) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v12 = *(void **)(a1 + 120);
  if (v12)
  {
    *(_QWORD *)(a1 + 128) = v12;
    operator delete(v12);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v13 = *(void **)(a1 + 144);
  if (v13)
  {
    *(_QWORD *)(a1 + 152) = v13;
    operator delete(v13);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v14 = (void **)(a1 + 168);
  v15 = *(_QWORD *)(a1 + 168);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 176);
    v17 = *(void **)(a1 + 168);
    if (v16 != v15)
    {
      v18 = *(_QWORD *)(a1 + 176);
      do
      {
        v20 = *(void **)(v18 - 24);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *(_QWORD *)(v16 - 16) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *v14;
    }
    *(_QWORD *)(a1 + 176) = v15;
    operator delete(v17);
    *v14 = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  return a1;
}

char *sub_20F13EB20(char *result, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  void **v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v6 = a2;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(_OWORD **)result;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *(_QWORD *)result) >> 3) >= a4)
  {
    v16 = (void **)(result + 8);
    v17 = (_BYTE *)*((_QWORD *)result + 1);
    if (0xCF3CF3CF3CF3CF3DLL * ((v17 - (_BYTE *)v9) >> 3) >= a4)
    {
      v38 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v39 = *(_QWORD *)result;
        do
        {
          v40 = *(_OWORD *)v6;
          v41 = *((_OWORD *)v6 + 2);
          *(_OWORD *)(v39 + 16) = *((_OWORD *)v6 + 1);
          *(_OWORD *)(v39 + 32) = v41;
          *(_OWORD *)v39 = v40;
          v42 = *((_OWORD *)v6 + 3);
          v43 = *((_OWORD *)v6 + 4);
          v44 = *((_OWORD *)v6 + 6);
          *(_OWORD *)(v39 + 80) = *((_OWORD *)v6 + 5);
          *(_OWORD *)(v39 + 96) = v44;
          *(_OWORD *)(v39 + 48) = v42;
          *(_OWORD *)(v39 + 64) = v43;
          v45 = *((_OWORD *)v6 + 7);
          v46 = *((_OWORD *)v6 + 8);
          v47 = *((_OWORD *)v6 + 9);
          *(_QWORD *)(v39 + 160) = *((_QWORD *)v6 + 20);
          *(_OWORD *)(v39 + 128) = v46;
          *(_OWORD *)(v39 + 144) = v47;
          *(_OWORD *)(v39 + 112) = v45;
          v6 += 168;
          v39 += 168;
          v38 += 168;
        }
        while (v6 != a3);
      }
      v15 = v38 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[8 * ((v17 - (_BYTE *)v9) >> 3)];
      if (v17 != (_BYTE *)v9)
      {
        v19 = 8 * ((v17 - (_BYTE *)v9) >> 3);
        do
        {
          v20 = *(_OWORD *)v6;
          v21 = *((_OWORD *)v6 + 2);
          v9[1] = *((_OWORD *)v6 + 1);
          v9[2] = v21;
          *v9 = v20;
          v22 = *((_OWORD *)v6 + 3);
          v23 = *((_OWORD *)v6 + 4);
          v24 = *((_OWORD *)v6 + 6);
          v9[5] = *((_OWORD *)v6 + 5);
          v9[6] = v24;
          v9[3] = v22;
          v9[4] = v23;
          v25 = *((_OWORD *)v6 + 7);
          v26 = *((_OWORD *)v6 + 8);
          v27 = *((_OWORD *)v6 + 9);
          *((_QWORD *)v9 + 20) = *((_QWORD *)v6 + 20);
          v9[8] = v26;
          v9[9] = v27;
          v9[7] = v25;
          v6 += 168;
          v9 = (_OWORD *)((char *)v9 + 168);
          v19 -= 168;
        }
        while (v19);
        v9 = *v16;
      }
      v28 = v9;
      if (v18 != a3)
      {
        v28 = v9;
        v29 = v9;
        do
        {
          v30 = *(_OWORD *)v18;
          v31 = *((_OWORD *)v18 + 2);
          v29[1] = *((_OWORD *)v18 + 1);
          v29[2] = v31;
          *v29 = v30;
          v32 = *((_OWORD *)v18 + 3);
          v33 = *((_OWORD *)v18 + 4);
          v34 = *((_OWORD *)v18 + 6);
          v29[5] = *((_OWORD *)v18 + 5);
          v29[6] = v34;
          v29[3] = v32;
          v29[4] = v33;
          v35 = *((_OWORD *)v18 + 7);
          v36 = *((_OWORD *)v18 + 8);
          v37 = *((_OWORD *)v18 + 9);
          *((_QWORD *)v29 + 20) = *((_QWORD *)v18 + 20);
          v29[8] = v36;
          v29[9] = v37;
          v29[7] = v35;
          v18 += 168;
          v29 = (_OWORD *)((char *)v29 + 168);
          v28 = (_OWORD *)((char *)v28 + 168);
        }
        while (v18 != a3);
      }
      v15 = (char *)v28 - (char *)v9;
    }
  }
  else
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x186186186186186)
      goto LABEL_28;
    v10 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0xC30C30C30C30C3 ? 0x186186186186186 : v11;
    if (v12 > 0x186186186186186)
LABEL_28:
      sub_20E867F44();
    v13 = 168 * v12;
    result = (char *)operator new(168 * v12);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 168 * ((a3 - v6 - 168) / 0xA8uLL) + 168);
      v14 = (char *)v9 + 168 * ((a3 - v6 - 168) / 0xA8uLL) + 168;
    }
    v15 = v14 - (char *)v9;
    v16 = (void **)(v7 + 1);
  }
  *v16 = (char *)v9 + v15;
  return result;
}

char *sub_20F13EDD0(char **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  __int128 v23;
  char *v24;
  _QWORD *v25;
  __int128 v26;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = (v17 - result) >> 5;
    if (v18 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          v26 = *v6;
          v25[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)v25 = v26;
          v25[3] = *((_QWORD *)v6 + 3);
          v24 += 32;
          v6 += 2;
          v25 += 4;
        }
        while (v6 != a3);
      }
      *v16 = v24;
    }
    else
    {
      v19 = &a2[2 * v18];
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_QWORD *)result + 2) = *((_QWORD *)v6 + 2);
          *(_OWORD *)result = v20;
          *((_QWORD *)result + 3) = *((_QWORD *)v6 + 3);
          v6 += 2;
          result += 32;
        }
        while (v6 != v19);
        result = *v16;
      }
      v21 = result;
      if (v19 != a3)
      {
        v21 = result;
        v22 = result;
        do
        {
          v23 = *v19;
          v22[2] = *((_QWORD *)v19 + 2);
          *(_OWORD *)v22 = v23;
          v22[3] = *((_QWORD *)v19 + 3);
          v21 += 32;
          v19 += 2;
          v22 += 4;
        }
        while (v19 != a3);
      }
      *v16 = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_26;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_26:
      sub_20E867F44();
    v13 = 32 * v12;
    result = (char *)operator new(32 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_OWORD *)v14 = *v6;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v6 + 2);
        *((_QWORD *)v14 + 3) = *((_QWORD *)v6 + 3);
        v14 += 32;
        v6 += 2;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_20F13EFC8(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_20E867F44();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_20F13E790(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_20F103878(v10, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 4));
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_20F13E790(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_20F103878(v10, *v6, v6[1], 0x8E38E38E38E38E39 * ((v6[1] - *v6) >> 4));
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_20F13F254(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F13F25C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20F13F264(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  __int128 v24;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_20E867F44();
  v6 = a1[2] - *a1;
  if (v6 >> 4 > v3)
    v3 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 59)
      sub_20E877A38();
    v8 = (char *)operator new(32 * v7);
    v9 = (uint64_t)&v8[32 * v2];
    v23 = v9;
    *(_QWORD *)&v24 = v9;
    *((_QWORD *)&v24 + 1) = &v8[32 * v7];
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_10;
LABEL_13:
    *(_QWORD *)(v9 + 24) = 0;
    goto LABEL_14;
  }
  v9 = 32 * v2;
  v23 = 32 * v2;
  v24 = (unint64_t)(32 * v2);
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_13;
LABEL_10:
  if (v10 == a2)
  {
    *(_QWORD *)(v9 + 24) = v9;
    (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v9);
    v9 = v23;
    v11 = v24 + 32;
    *(_QWORD *)&v24 = v24 + 32;
    v13 = (char *)*a1;
    v12 = (char *)a1[1];
    if (v12 != (char *)*a1)
      goto LABEL_15;
LABEL_31:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = *((_QWORD *)&v24 + 1);
    goto LABEL_32;
  }
  *(_QWORD *)(v9 + 24) = (*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
LABEL_14:
  v11 = v9 + 32;
  *(_QWORD *)&v24 = v9 + 32;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
    goto LABEL_31;
LABEL_15:
  v14 = (char *)(v9 - 8);
  do
  {
    v16 = (char *)*((_QWORD *)v12 - 1);
    v17 = v12 - 32;
    v15 = v14;
    if (!v16)
      goto LABEL_17;
    if (v17 != v16)
    {
      *(_QWORD *)v14 = v16;
      v15 = v12 - 8;
LABEL_17:
      *(_QWORD *)v15 = 0;
      goto LABEL_18;
    }
    *(_QWORD *)v14 = v14 - 24;
    (*(void (**)(_QWORD))(**((_QWORD **)v12 - 1) + 24))(*((_QWORD *)v12 - 1));
LABEL_18:
    v14 -= 32;
    v12 -= 32;
  }
  while (v17 != v13);
  v12 = (char *)*a1;
  v18 = (char *)a1[1];
  *a1 = (uint64_t)(v14 + 8);
  *(_OWORD *)(a1 + 1) = v24;
  v11 = v24;
  if (v18 != v12)
  {
    do
    {
      v21 = v18 - 32;
      v19 = (char *)*((_QWORD *)v18 - 1);
      if (v18 - 32 == v19)
      {
        v19 = v18 - 32;
        v20 = 4;
      }
      else
      {
        if (!v19)
          goto LABEL_26;
        v20 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_26:
      v18 = v21;
    }
    while (v21 != v12);
  }
LABEL_32:
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_20F13F470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F13F488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F13F488(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v6 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v7 = (_QWORD *)*(v2 - 1);
      if (v7 == v6)
      {
        v5 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_7;
        v6 = v7;
        v5 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v5))();
      v6 = *(_QWORD **)(a1 + 16);
LABEL_7:
      v2 = v6;
    }
    while (v6 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F13F504(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v8 = (void **)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (void **)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            v10 = (void **)*(v3 - 2);
            do
            {
              v13 = (char *)*(v10 - 3);
              v10 -= 3;
              v12 = v13;
              if (v13)
              {
                v14 = (char *)*(v9 - 2);
                v11 = v12;
                if (v14 != v12)
                {
                  v15 = (char *)*(v9 - 2);
                  do
                  {
                    v17 = (void *)*((_QWORD *)v15 - 3);
                    v15 -= 24;
                    v16 = v17;
                    if (v17)
                    {
                      *((_QWORD *)v14 - 2) = v16;
                      operator delete(v16);
                    }
                    v14 = v15;
                  }
                  while (v15 != v12);
                  v11 = *v10;
                }
                *(v9 - 2) = v12;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20F13F604(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *a2;
    v5 = a2[1];
    v6 = v5 - *a2;
    if (v5 != *a2)
    {
      v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
      if (v7 >= 0x492492492492493)
        sub_20EABADD4();
      v8 = (char *)operator new(v6);
      v9 = 0;
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v8[56 * v7];
      do
      {
        v10 = v4 + v9;
        v11 = &v8[v9];
        *(_QWORD *)v11 = *(_QWORD *)(v4 + v9);
        v12 = *(_OWORD *)(v4 + v9 + 8);
        *((_QWORD *)v11 + 3) = *(_QWORD *)(v4 + v9 + 24);
        *(_OWORD *)(v11 + 8) = v12;
        v13 = *(_OWORD *)(v4 + v9 + 32);
        *((_QWORD *)v11 + 6) = *(_QWORD *)(v4 + v9 + 48);
        *((_OWORD *)v11 + 2) = v13;
        v9 += 56;
      }
      while (v10 + 56 != v5);
      *(_QWORD *)(a1 + 8) = &v8[v9];
    }
    v14 = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_OWORD *)(a1 + 24) = v14;
    v15 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_OWORD *)(a1 + 48) = v15;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_20F13F720(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 72))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20F13F754(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v21 = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v10[6] = v21;
  v10[7] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v20;
  *v6 = (uint64_t *)v10;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v10;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_20E868578(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t sub_20F13F8A8(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, int a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  size_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v47;
  _BYTE v48[24];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v14 = _os_log_pack_size();
    v15 = (std::__shared_weak_count_vtbl *)operator new(v14, (std::align_val_t)8uLL);
    v16 = (std::__shared_weak_count *)operator new();
    v17 = v16;
    v16->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = v15;
    *(_QWORD *)v48 = v15;
    *(_QWORD *)&v48[8] = v15;
    *(_QWORD *)&v48[16] = v16;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v49 = 0uLL;
    v50 = 0;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
    }
    v21 = *(_QWORD *)v48;
    v22 = _os_log_pack_fill();
    v23 = *a7;
    v24 = *a8;
    v25 = *a9;
    *(_DWORD *)v22 = 134218496;
    *(_QWORD *)(v22 + 4) = v23;
    *(_WORD *)(v22 + 12) = 2048;
    *(_QWORD *)(v22 + 14) = v24;
    *(_WORD *)(v22 + 22) = 2048;
    *(_QWORD *)(v22 + 24) = v25;
    v26 = operator new();
    v27 = *((unsigned __int8 *)a3 + 23);
    if ((v27 & 0x80u) == 0)
      v28 = a3;
    else
      v28 = (uint64_t *)*a3;
    if ((v27 & 0x80u) != 0)
      v27 = a3[1];
    *(_QWORD *)v26 = v21;
    *(_OWORD *)(v26 + 8) = *(_OWORD *)&v48[8];
    *(_OWORD *)&v48[8] = 0uLL;
    *(_OWORD *)(v26 + 24) = v49;
    v49 = 0uLL;
    *(_QWORD *)(v26 + 40) = v28;
    *(_QWORD *)(v26 + 48) = v27;
    *(_BYTE *)(v26 + 56) = type;
    v47 = v26;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v47);
    v29 = v47;
    v47 = 0;
    if (v29)
    {
      v30 = *(std::__shared_weak_count **)(v29 + 32);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = *(std::__shared_weak_count **)(v29 + 16);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      MEMORY[0x212BC6398](v29, 0x10F0C40B62ED6C6);
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
    if (*((_QWORD *)&v49 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(std::__shared_weak_count **)&v48[16];
    if (*(_QWORD *)&v48[16])
    {
      v40 = (unint64_t *)(*(_QWORD *)&v48[16] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v42 = *a7;
    v43 = *a8;
    v44 = *a9;
    *(_DWORD *)v48 = 134218496;
    *(_QWORD *)&v48[4] = v42;
    *(_WORD *)&v48[12] = 2048;
    *(_QWORD *)&v48[14] = v43;
    *(_WORD *)&v48[22] = 2048;
    *(_QWORD *)&v49 = v44;
    v45 = (void *)_os_log_send_and_compose_impl();
    if (v45)
      free(v45);
  }
  return 0;
}

void sub_20F13FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F13FCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F13FD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F13FD34(int *a1, int **a2, uint64_t *a3, int **a4, int a5, uint64_t a6)
{
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  void **v36;
  const char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int *v66;
  int *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  void *object[2];
  size_t v81;
  unint64_t v82;
  char v83;
  void *__p[2];
  unint64_t v85;
  char v86;

  LODWORD(object[0]) = -1;
  v12 = a2[1] - *a2;
  if (a5 <= v12)
  {
    if (a5 < v12)
      a2[1] = &(*a2)[a5];
  }
  else
  {
    sub_20EDDCBD0((uint64_t)a2, a5 - v12, (const float *)object);
  }
  v13 = *a4;
  v14 = a4[1];
  if (*a4 == v14)
  {
    v17 = 0;
  }
  else
  {
    v15 = *a3;
    v16 = *a2;
    v17 = *(unsigned __int8 *)(a6 + 8);
    if (*(_BYTE *)(a6 + 8))
    {
      v17 = 0;
      v18 = *(_QWORD **)a6;
      v19 = *a4;
      do
      {
        while (1)
        {
          v20 = v19[1];
          v21 = *(_DWORD *)(v15 + 4 * v20);
          if (v21 != -1)
            break;
          v16[*v19] = *(_DWORD *)(*v18 + 4 * v20);
          ++v17;
          v19 += 2;
          if (v19 == v14)
            goto LABEL_17;
        }
        v16[*v19] = v21;
        v19 += 2;
      }
      while (v19 != v14);
    }
    else
    {
      v22 = *a4;
      do
      {
        while (1)
        {
          v23 = *(_DWORD *)(v15 + 4 * v22[1]);
          if (v23 != -1)
            break;
          ++v17;
          v22 += 2;
          if (v22 == v14)
            goto LABEL_17;
        }
        v16[*v22] = v23;
        v22 += 2;
      }
      while (v22 != v14);
    }
  }
LABEL_17:
  v24 = 3 * (a5 - ((unint64_t)((char *)v14 - (char *)v13) >> 3) + v17);
  v25 = *a1;
  if (*a1 > (v24 ^ 0x7FFFFFFF))
  {
    sub_20F14B7FC(&v79);
    if (**(int **)(v79 + 56) > 4
      || ((v26 = *(unsigned __int8 *)(v79 + 72), v27 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0), !v26)
        ? (v28 = v27 == 0)
        : (v28 = 0),
          v28))
    {
LABEL_86:
      v25 = 1;
      *a1 = 1;
      goto LABEL_87;
    }
    v29 = v27;
    v72[0] = &v79;
    v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v72[2] = std::chrono::system_clock::now().__d_.__rep_;
    v73 = 4;
    v74 = "unknown file";
    v75 = 63;
    v77 = 0;
    v78 = 0;
    v76 = "unknown function";
    v30 = (const char *)(v79 + 16);
    v70 = v79 + 16;
    v71 = v79;
    if (*(char *)(v79 + 39) < 0)
    {
      v30 = *(const char **)(v79 + 16);
      v31 = *(_QWORD *)(v79 + 24);
      v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v33 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v31 = *(unsigned __int8 *)(v79 + 39);
      v32 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v32 & 1) != 0)
        goto LABEL_27;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if ((_BYTE)v82)
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = v81;
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_27:
    if (byte_254A4A4F8[23] >= 0)
      v34 = byte_254A4A4F8;
    else
      v34 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v35 = byte_254A4A4F8[23];
    else
      v35 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v34, v30);
    v36 = &object[1];
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 >= 0x17)
    {
      v69 = v29;
      v37 = v30;
      v38 = v26;
      v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v39 = v35 | 7;
      v40 = v39 + 1;
      v36 = (void **)operator new(v39 + 1);
      v81 = v35;
      v82 = v40 | 0x8000000000000000;
      object[1] = v36;
      v26 = v38;
      v30 = v37;
      v29 = v69;
    }
    else
    {
      HIBYTE(v82) = v35;
      if (!v35)
      {
LABEL_41:
        *((_BYTE *)v36 + v35) = 0;
        v83 = 1;
        v41 = __p;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v31 >= 0x17)
        {
          v42 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v42 = v31 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          __p[1] = (void *)v31;
          v85 = v43 | 0x8000000000000000;
          __p[0] = v41;
        }
        else
        {
          HIBYTE(v85) = v31;
          if (!v31)
            goto LABEL_49;
        }
        memmove(v41, v30, v31);
LABEL_49:
        *((_BYTE *)v41 + v31) = 0;
        v86 = 1;
        v44 = object[0];
        if (SHIBYTE(v85) < 0)
          operator delete(__p[0]);
        if (v83 && SHIBYTE(v82) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v29 && *(_QWORD *)(v29 + 24))
        {
          v45 = _os_log_pack_size();
          v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
          v47 = (std::__shared_weak_count *)operator new();
          v48 = v47;
          v47->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v47->__shared_weak_owners_ = 0;
          v47[1].__vftable = v46;
          do
            v50 = __ldxr(p_shared_owners);
          while (__stxr(v50 + 1, p_shared_owners));
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v48);
          }
          *(_WORD *)_os_log_pack_fill() = 0;
          v52 = (_QWORD *)operator new();
          v53 = *(unsigned __int8 *)(v71 + 39);
          v54 = v70;
          if ((v53 & 0x80u) != 0)
          {
            v54 = *(_QWORD *)(v71 + 16);
            v53 = *(_QWORD *)(v71 + 24);
          }
          *v52 = v46;
          v52[1] = v46;
          v52[2] = v48;
          v52[3] = 0;
          v52[4] = 0;
          v52[5] = v54;
          v52[6] = v53;
          *((_BYTE *)v52 + 56) = 16;
          object[0] = v52;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), object);
          v55 = object[0];
          object[0] = 0;
          if (v55)
          {
            v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 4);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v59 = (std::__shared_weak_count *)*((_QWORD *)v55 + 2);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
        }
        if (v26)
        {
          sub_20E8C003C((uint64_t)v72, "VFusionTrackIDAllocator Point track ID overflow");
          sub_20E863570((uint64_t)v72);
        }
        sub_20E863570((uint64_t)v72);
        v63 = v78;
        if (v78)
        {
          v64 = (unint64_t *)&v78->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        goto LABEL_86;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_41;
  }
LABEL_87:
  a1[2] = v25;
  *a1 = v25 + v24;
  v66 = *a2;
  v67 = a2[1];
  while (v66 != v67)
  {
    if (*v66 < 0)
    {
      v68 = a1[2];
      a1[2] = v68 + 3;
      *v66 = v68;
    }
    ++v66;
  }
}

void sub_20F140440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a15);
  v33 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F1405DC(uint64_t a1, _QWORD *a2, uint64_t *a3, int **a4, int a5, uint64_t a6)
{
  unint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  void **v36;
  const char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  void *object[2];
  size_t v81;
  unint64_t v82;
  char v83;
  void *__p[2];
  unint64_t v85;
  char v86;

  LODWORD(object[0]) = -1;
  v12 = (uint64_t)(a2[1] - *a2) >> 2;
  if (a5 <= v12)
  {
    if (a5 < v12)
      a2[1] = *a2 + 4 * a5;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)a2, a5 - v12, (const float *)object);
  }
  v13 = *a4;
  v14 = a4[1];
  if (*a4 == v14)
  {
    v17 = 0;
  }
  else
  {
    v15 = *a3;
    v16 = (_DWORD *)*a2;
    v17 = *(unsigned __int8 *)(a6 + 8);
    if (*(_BYTE *)(a6 + 8))
    {
      v17 = 0;
      v18 = *(_QWORD **)a6;
      v19 = *a4;
      do
      {
        while (1)
        {
          v20 = v19[1];
          v21 = *(_DWORD *)(v15 + 4 * v20);
          if (v21 != -1)
            break;
          v16[*v19] = *(_DWORD *)(*v18 + 4 * v20);
          ++v17;
          v19 += 2;
          if (v19 == v14)
            goto LABEL_17;
        }
        v16[*v19] = v21;
        v19 += 2;
      }
      while (v19 != v14);
    }
    else
    {
      v22 = *a4;
      do
      {
        while (1)
        {
          v23 = *(_DWORD *)(v15 + 4 * v22[1]);
          if (v23 != -1)
            break;
          ++v17;
          v22 += 2;
          if (v22 == v14)
            goto LABEL_17;
        }
        v16[*v22] = v23;
        v22 += 2;
      }
      while (v22 != v14);
    }
  }
LABEL_17:
  v24 = 3 * (a5 - ((unint64_t)((char *)v14 - (char *)v13) >> 3) + v17);
  v25 = *(_DWORD *)(a1 + 4);
  if (v25 > (v24 ^ 0x7FFFFFFF))
  {
    sub_20F14B7FC(&v79);
    if (**(int **)(v79 + 56) > 4
      || ((v26 = *(unsigned __int8 *)(v79 + 72), v27 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0), !v26)
        ? (v28 = v27 == 0)
        : (v28 = 0),
          v28))
    {
LABEL_86:
      v25 = 2;
      *(_DWORD *)(a1 + 4) = 2;
      goto LABEL_87;
    }
    v29 = v27;
    v72[0] = &v79;
    v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v72[2] = std::chrono::system_clock::now().__d_.__rep_;
    v73 = 4;
    v74 = "unknown file";
    v75 = 88;
    v77 = 0;
    v78 = 0;
    v76 = "unknown function";
    v30 = (const char *)(v79 + 16);
    v70 = v79 + 16;
    v71 = v79;
    if (*(char *)(v79 + 39) < 0)
    {
      v30 = *(const char **)(v79 + 16);
      v31 = *(_QWORD *)(v79 + 24);
      v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v33 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v31 = *(unsigned __int8 *)(v79 + 39);
      v32 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v32 & 1) != 0)
        goto LABEL_27;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if ((_BYTE)v82)
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = v81;
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_27:
    if (byte_254A4A4F8[23] >= 0)
      v34 = byte_254A4A4F8;
    else
      v34 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v35 = byte_254A4A4F8[23];
    else
      v35 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v34, v30);
    v36 = &object[1];
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 >= 0x17)
    {
      v69 = v29;
      v37 = v30;
      v38 = v26;
      v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v39 = v35 | 7;
      v40 = v39 + 1;
      v36 = (void **)operator new(v39 + 1);
      v81 = v35;
      v82 = v40 | 0x8000000000000000;
      object[1] = v36;
      v26 = v38;
      v30 = v37;
      v29 = v69;
    }
    else
    {
      HIBYTE(v82) = v35;
      if (!v35)
      {
LABEL_41:
        *((_BYTE *)v36 + v35) = 0;
        v83 = 1;
        v41 = __p;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v31 >= 0x17)
        {
          v42 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v42 = v31 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          __p[1] = (void *)v31;
          v85 = v43 | 0x8000000000000000;
          __p[0] = v41;
        }
        else
        {
          HIBYTE(v85) = v31;
          if (!v31)
            goto LABEL_49;
        }
        memmove(v41, v30, v31);
LABEL_49:
        *((_BYTE *)v41 + v31) = 0;
        v86 = 1;
        v44 = object[0];
        if (SHIBYTE(v85) < 0)
          operator delete(__p[0]);
        if (v83 && SHIBYTE(v82) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v29 && *(_QWORD *)(v29 + 24))
        {
          v45 = _os_log_pack_size();
          v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
          v47 = (std::__shared_weak_count *)operator new();
          v48 = v47;
          v47->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v47->__shared_weak_owners_ = 0;
          v47[1].__vftable = v46;
          do
            v50 = __ldxr(p_shared_owners);
          while (__stxr(v50 + 1, p_shared_owners));
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v48);
          }
          *(_WORD *)_os_log_pack_fill() = 0;
          v52 = (_QWORD *)operator new();
          v53 = *(unsigned __int8 *)(v71 + 39);
          v54 = v70;
          if ((v53 & 0x80u) != 0)
          {
            v54 = *(_QWORD *)(v71 + 16);
            v53 = *(_QWORD *)(v71 + 24);
          }
          *v52 = v46;
          v52[1] = v46;
          v52[2] = v48;
          v52[3] = 0;
          v52[4] = 0;
          v52[5] = v54;
          v52[6] = v53;
          *((_BYTE *)v52 + 56) = 16;
          object[0] = v52;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), object);
          v55 = object[0];
          object[0] = 0;
          if (v55)
          {
            v56 = (std::__shared_weak_count *)*((_QWORD *)v55 + 4);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v59 = (std::__shared_weak_count *)*((_QWORD *)v55 + 2);
            if (v59)
            {
              v60 = (unint64_t *)&v59->__shared_owners_;
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              if (!v61)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            MEMORY[0x212BC6398](v55, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
          LOWORD(object[0]) = 0;
          v62 = (void *)_os_log_send_and_compose_impl();
          if (v62)
            free(v62);
        }
        if (v26)
        {
          sub_20E8C003C((uint64_t)v72, "VFusionTrackIDAllocator Line track ID overflow");
          sub_20E863570((uint64_t)v72);
        }
        sub_20E863570((uint64_t)v72);
        v63 = v78;
        if (v78)
        {
          v64 = (unint64_t *)&v78->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        goto LABEL_86;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_41;
  }
LABEL_87:
  *(_DWORD *)(a1 + 12) = v25;
  *(_DWORD *)(a1 + 4) = v25 + v24;
  v66 = (_DWORD *)*a2;
  v67 = (_DWORD *)a2[1];
  while (v66 != v67)
  {
    if ((*v66 & 0x80000000) != 0)
    {
      v68 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 12) = v68 + 3;
      *v66 = v68;
    }
    ++v66;
  }
}

void sub_20F140CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a15);
  v33 = a23;
  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F140E84(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void (**v20)(char *);
  BOOL v21;
  unint64_t v22;
  uint64_t v23;

  v10 = operator new();
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *a1 = v10;
  *(_BYTE *)v10 = a5;
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  v11 = a4;
  if (a4)
  {
    v12 = (char *)operator new(144 * a4);
    v13 = 0;
    v14 = &v12[144 * a4];
    do
    {
      v15 = &v12[v13];
      *(_OWORD *)(v15 + 24) = 0uLL;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_OWORD *)(v15 + 40) = 0uLL;
      *(_OWORD *)(v15 + 56) = 0uLL;
      *(_OWORD *)(v15 + 72) = 0uLL;
      *(_QWORD *)v15 = &off_24C9AFD78;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *(_OWORD *)(v15 + 57) = 0uLL;
      *(_OWORD *)(v15 + 88) = 0uLL;
      *(_OWORD *)(v15 + 104) = 0uLL;
      *(_OWORD *)(v15 + 120) = 0uLL;
      v13 += 144;
      *((_QWORD *)v15 + 17) = 0;
    }
    while (144 * a4 != v13);
    v17 = *(char **)(v10 + 16);
    v16 = *(char **)(v10 + 24);
    *(_QWORD *)(v10 + 16) = v12;
    *(_QWORD *)(v10 + 24) = v14;
    *(_QWORD *)(v10 + 32) = v14;
    if (v16 != v17)
    {
      v18 = v16 - 144;
      v19 = v16 - 144;
      do
      {
        v20 = *(void (***)(char *))v19;
        v19 -= 144;
        (*v20)(v18);
        v21 = v18 == v17;
        v18 = v19;
      }
      while (!v21);
    }
    if (v17)
      operator delete(v17);
  }
  v22 = a5 ^ 1u;
  if (v11 > v22)
  {
    v23 = (16 * v22) | (v22 << 7);
    do
    {
      sub_20EDA8E0C((_QWORD *)(*(_QWORD *)(v10 + 16) + v23), a2 >> v22, a2 >> v22, a3 >> v22, 1, 0, 0);
      ++v22;
      v23 += 144;
    }
    while (v11 != v22);
  }
}

void sub_20F141008(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F141030(v1);
  _Unwind_Resume(a1);
}

void sub_20F14101C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20F141030(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F141030(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[5];
    if (v3)
    {
      v2[6] = v3;
      operator delete(v3);
    }
    v4 = (void (***)(_QWORD))v2[2];
    if (v4)
    {
      v5 = (void (***)(_QWORD))v2[3];
      v6 = (void *)v2[2];
      if (v5 != v4)
      {
        v7 = v5 - 18;
        v8 = v5 - 18;
        do
        {
          v9 = *v8;
          v8 -= 18;
          (*v9)(v7);
          v10 = v7 == v4;
          v7 = v8;
        }
        while (!v10);
        v6 = (void *)v2[2];
      }
      v2[3] = v4;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1030C40380150A2);
  }
  return a1;
}

unint64_t sub_20F1410DC(uint64_t *a1, unsigned __int8 a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, double a10, float a11, float a12, float a13, void *a14, int a15, int a16, int a17, size_t a18, int a19, __int16 a20,char a21,unsigned __int8 a22,unsigned __int8 a23,char a24,int a25,int a26,__int128 *a27,char a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  void **p_dst;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  size_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  const char *v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  std::__shared_weak_count_vtbl *v63;
  std::__shared_weak_count *v64;
  size_t v65;
  size_t v66;
  uint64_t *v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  char *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  const char *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  const char *v124;
  size_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  const char *v129;
  size_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  size_t v181;
  void **v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  size_t v189;
  const char *v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  const char *v193;
  size_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  NSObject *v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  size_t v205;
  size_t v206;
  uint64_t *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  _QWORD *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  const char *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t result;
  int v260;
  unint64_t v261;
  size_t v262;
  void **v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  void **v268;
  uint64_t v269;
  uint64_t v270;
  size_t v271;
  const char *v272;
  unsigned __int8 v273;
  unsigned __int8 v274;
  const char *v275;
  size_t v276;
  _BYTE *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  const char *v283;
  unint64_t v284;
  NSObject *v285;
  uint64_t v286;
  uint64_t v287;
  size_t v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  size_t v291;
  size_t v292;
  uint64_t *v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  _QWORD *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  char *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  const char *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  const char *v348;
  uint64_t v349;
  void **v350;
  int v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t *v354;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v356;
  int v357;
  const char *v358;
  int v359;
  const char *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  void **__dst;
  size_t v364;
  int64_t v365;
  unint64_t v366;
  __int128 v367;
  std::__shared_weak_count *v368;
  char *v369;
  std::__shared_weak_count *v370;
  uint64_t *v371;
  __int128 v372;
  _BYTE object[24];
  __int128 v374;
  void *v375;
  size_t v376;
  unint64_t v377;
  void *v378;
  unint64_t v379;
  uint64_t v380;
  void *v381;
  int v382;
  char v383;
  float v384;
  float v385;
  unint64_t v386;
  int v387;
  int v388;
  __int128 __p;
  uint64_t v390;
  __int16 v391;
  _BYTE v392[56];
  __int128 v393;
  int64x2_t v394;
  _QWORD v395[5];

  v30 = a5;
  v31 = a4;
  v395[2] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  if (a6)
  {
    *(_DWORD *)&object[16] = 1;
    v383 = 0;
    v390 = 0;
    __p = 0uLL;
    v391 = 0;
    *(_DWORD *)object = a3;
    *((_QWORD *)&v374 + 1) = __PAIR64__(a5, a4);
    *(_QWORD *)&object[8] = a7;
    *(double *)&v374 = a9;
    v375 = *(void **)&a10;
    *(_DWORD *)((char *)&v377 + 2) = a19;
    HIWORD(v377) = a20;
    LOBYTE(v378) = a21;
    v384 = a11;
    v385 = a12;
    *(float *)&v386 = a13;
    v379 = a16;
    v380 = a17;
    v381 = a14;
    v382 = a15;
    LOWORD(v377) = __PAIR16__(a23, a22);
    v376 = a18;
    BYTE4(v386) = a24;
    *(_WORD *)((char *)&v386 + 5) = a2;
    v387 = a25;
    v388 = a26;
    if (&__p != a27)
    {
      if (*((char *)a27 + 23) < 0)
      {
        sub_20E867BF8(&__p, *(void **)a27, *((_QWORD *)a27 + 1));
      }
      else
      {
        __p = *a27;
        v390 = *((_QWORD *)a27 + 2);
      }
    }
    BYTE6(v386) = a28;
    HIBYTE(v391) = a29;
    LOBYTE(v391) = a30;
    v34 = (_QWORD *)operator new();
    bzero(v34, 0x310uLL);
    v34[13] = 0x3FF0000000000000;
    if (a29)
    {
      *v34 = &off_24C9F9078;
      v34[16] = 500;
      *((_DWORD *)v34 + 34) = 1;
      v34[18] = 0x3FD3333333333333;
      v34[20] = 0x3FC3333333333333;
      v34[21] = 6;
      *((_BYTE *)v34 + 178) = 1;
      *(_DWORD *)((char *)v34 + 179) = 0;
      *(_WORD *)((char *)v34 + 183) = 256;
      *((int64x2_t *)v34 + 12) = vdupq_n_s64(0xAuLL);
      v34[26] = 0x100000001;
      *((_DWORD *)v34 + 54) = 5;
      v34[28] = 0x3F96E9DD3F5425F2;
      *((_WORD *)v34 + 118) = 257;
      v34[30] = 0xDC00000200;
      v34[32] = 0;
      v34[33] = 0;
      v34[31] = 0;
      *((_WORD *)v34 + 136) = 0;
      *((_BYTE *)v34 + 776) = 0;
      *((_OWORD *)v34 + 49) = 0u;
      *((_OWORD *)v34 + 50) = 0u;
      *((_OWORD *)v34 + 51) = 0u;
      *((_OWORD *)v34 + 52) = 0u;
      *((_OWORD *)v34 + 53) = 0u;
      *((_OWORD *)v34 + 54) = 0u;
      *a1 = (uint64_t)v34;
      *(_DWORD *)v392 = 0;
      v392[4] = 1;
      *(_QWORD *)&v392[8] = 0x4120000041A00000;
      *(_QWORD *)&v392[20] = 0x3F96E9DD3F5425F2;
      *(_DWORD *)&v392[16] = 5;
      *(_DWORD *)&v392[28] = 0;
      *(_WORD *)&v392[32] = 1;
      *(_OWORD *)&v392[36] = xmmword_210378520;
      *(_DWORD *)&v392[52] = 100;
      v393 = xmmword_210378530;
      v394 = vdupq_n_s64(1uLL);
      sub_20F40E1BC((uint64_t)v34, (__int128 *)object, (uint64_t)v392);
    }
    else
    {
      *v34 = &off_24C9AFC90;
      v34[16] = 500;
      *((_DWORD *)v34 + 34) = 1;
      v34[18] = 0x3FD3333333333333;
      v34[20] = 0x3FC3333333333333;
      v34[21] = 6;
      *((_BYTE *)v34 + 178) = 1;
      *(_DWORD *)((char *)v34 + 179) = 0;
      *(_WORD *)((char *)v34 + 183) = 256;
      *((int64x2_t *)v34 + 12) = vdupq_n_s64(0xAuLL);
      v34[26] = 0x100000001;
      *((_DWORD *)v34 + 54) = 5;
      v34[28] = 0x3F96E9DD3F5425F2;
      *((_WORD *)v34 + 118) = 257;
      v34[30] = 0xDC00000200;
      v34[32] = 0;
      v34[33] = 0;
      v34[31] = 0;
      *((_WORD *)v34 + 136) = 0;
      *((_BYTE *)v34 + 776) = 0;
      *((_OWORD *)v34 + 49) = 0u;
      *((_OWORD *)v34 + 50) = 0u;
      *((_OWORD *)v34 + 51) = 0u;
      *((_OWORD *)v34 + 52) = 0u;
      *((_OWORD *)v34 + 53) = 0u;
      *((_OWORD *)v34 + 54) = 0u;
      *a1 = (uint64_t)v34;
      *(_DWORD *)v392 = 0;
      v392[4] = 1;
      *(_QWORD *)&v392[8] = 0x4120000041A00000;
      *(_QWORD *)&v392[20] = 0x3F96E9DD3F5425F2;
      *(_DWORD *)&v392[16] = 5;
      *(_DWORD *)&v392[28] = 0;
      *(_WORD *)&v392[32] = 1;
      *(_OWORD *)&v392[36] = xmmword_210378520;
      *(_DWORD *)&v392[52] = 100;
      v393 = xmmword_210378530;
      v394 = vdupq_n_s64(1uLL);
      sub_20F40B114((uint64_t)v34, (__int128 *)object, (uint64_t)v392);
    }
    if (SHIBYTE(v390) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_QWORD *)&object[16] = 0x41086A0000000000;
    *((_QWORD *)&v374 + 1) = __PAIR64__(a5, a4);
    *(_DWORD *)object = a3;
    *(_DWORD *)&object[4] = a7;
    *(double *)&v374 = a9;
    *(_DWORD *)&object[8] = a8;
    v375 = *(void **)&a10;
    v33 = operator new();
    sub_20F412374(v33);
    *a1 = v33;
    sub_20F4125BC(v33, (__int128 *)object);
  }
  kdebug_trace();
  sub_20F143DC4(&v366);
  if (**(int **)(v366 + 56) <= 2)
  {
    v35 = *(unsigned __int8 *)(v366 + 72);
    v36 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
    v37 = v36;
    if (v35 || v36)
    {
      sub_20E863438((uint64_t)object);
      sub_20E86A980(&object[16], (uint64_t)"DOG features ", 13);
      std::ostream::operator<<();
      v347 = v35;
      if ((v387 & 0x10) != 0)
      {
        v40 = v386;
        if (v386 < v379)
        {
          v386 = v379;
          v40 = v379;
        }
        v41 = v378;
        v38 = v40 - (_QWORD)v378;
        if (v40 - (unint64_t)v378 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_72;
      }
      else
      {
        if ((v387 & 8) == 0)
        {
          v38 = 0;
          HIBYTE(v365) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_28;
        }
        v41 = v375;
        v38 = v377 - (_QWORD)v375;
        if (v377 - (unint64_t)v375 > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
          sub_20E860B7C();
      }
      if (v38 >= 0x17)
      {
        v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17)
          v42 = v38 | 7;
        v43 = v42 + 1;
        p_dst = (void **)operator new(v42 + 1);
        v364 = v38;
        v365 = v43 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v365) = v38;
        p_dst = (void **)&__dst;
        if (!v38)
        {
LABEL_28:
          *((_BYTE *)p_dst + v38) = 0;
          v354 = (uint64_t *)&v366;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v356 = std::chrono::system_clock::now().__d_.__rep_;
          v357 = 2;
          v358 = "unknown file";
          v359 = 135;
          v361 = 0;
          v362 = 0;
          v360 = "unknown function";
          v44 = (void **)&__dst;
          if (v365 < 0)
            v44 = __dst;
          v350 = v44;
          v45 = *v354;
          if (*(char *)(*v354 + 39) < 0)
          {
            v47 = *(const char **)(v45 + 16);
            v46 = *(_QWORD *)(v45 + 24);
          }
          else
          {
            v46 = *(unsigned __int8 *)(*v354 + 39);
            v47 = (const char *)(*v354 + 16);
          }
          v345 = *v354 + 16;
          v346 = *v354;
          v48 = v30;
          v49 = v31;
          v50 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v392);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v392);
            if (v392[24] && (v392[23] & 0x80000000) != 0)
              operator delete(*(void **)v392);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v51 = byte_254A4A4F8;
          else
            v51 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v52 = byte_254A4A4F8[23];
          else
            v52 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v392 = os_log_create(v51, v47);
          v53 = &v392[8];
          if (v52 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v52 >= 0x17)
          {
            v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v52 | 7) != 0x17)
              v54 = v52 | 7;
            v55 = v54 + 1;
            v53 = operator new(v54 + 1);
            *(_QWORD *)&v392[16] = v52;
            *(_QWORD *)&v392[24] = v55 | 0x8000000000000000;
            *(_QWORD *)&v392[8] = v53;
          }
          else
          {
            v392[31] = v52;
            if (!v52)
            {
LABEL_48:
              v53[v52] = 0;
              v392[32] = 1;
              v56 = &v392[40];
              if (v46 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v31 = v49;
              v30 = v48;
              if (v46 >= 0x17)
              {
                v60 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v46 | 7) != 0x17)
                  v60 = v46 | 7;
                v61 = v60 + 1;
                v56 = operator new(v60 + 1);
                v57 = v37;
                *(_QWORD *)&v392[48] = v46;
                *(_QWORD *)&v393 = v61 | 0x8000000000000000;
                *(_QWORD *)&v392[40] = v56;
                v58 = (const char *)v350;
              }
              else
              {
                BYTE7(v393) = v46;
                v57 = v37;
                v58 = (const char *)v350;
                if (!v46)
                {
                  v392[40] = 0;
                  BYTE8(v393) = 1;
                  v59 = *(NSObject **)v392;
                  if ((SBYTE7(v393) & 0x80000000) == 0)
                    goto LABEL_52;
                  goto LABEL_58;
                }
              }
              memmove(v56, v47, v46);
              v56[v46] = 0;
              BYTE8(v393) = 1;
              v59 = *(NSObject **)v392;
              if ((SBYTE7(v393) & 0x80000000) == 0)
              {
LABEL_52:
                if (!v392[32])
                  goto LABEL_61;
                goto LABEL_59;
              }
LABEL_58:
              operator delete(*(void **)&v392[40]);
              if (!v392[32])
                goto LABEL_61;
LABEL_59:
              if ((v392[31] & 0x80000000) != 0)
                operator delete(*(void **)&v392[8]);
LABEL_61:
              if (*(_QWORD *)v392)
                os_release(*(void **)v392);
              if (!v57 || !*(_QWORD *)(v57 + 24))
              {
                os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v392 = 136315138;
                *(_QWORD *)&v392[4] = v58;
                v68 = (void *)_os_log_send_and_compose_impl();
                v69 = v347;
                if (v68)
                  free(v68);
                goto LABEL_136;
              }
              v62 = _os_log_pack_size();
              v63 = (std::__shared_weak_count_vtbl *)operator new(v62, (std::align_val_t)8uLL);
              v64 = (std::__shared_weak_count *)operator new();
              v64->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v64->__shared_owners_ = 0;
              v64->__shared_weak_owners_ = 0;
              v64[1].__vftable = v63;
              *(_QWORD *)&v367 = v63;
              *((_QWORD *)&v367 + 1) = v63;
              v369 = 0;
              v370 = 0;
              v368 = v64;
              v65 = strlen(v58);
              if (v65 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v66 = v65;
              if (v65 >= 0x17)
              {
                v70 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v65 | 7) != 0x17)
                  v70 = v65 | 7;
                v71 = v70 + 1;
                v67 = (uint64_t *)operator new(v70 + 1);
                *(_QWORD *)&v372 = v66;
                *((_QWORD *)&v372 + 1) = v71 | 0x8000000000000000;
                v371 = v67;
              }
              else
              {
                HIBYTE(v372) = v65;
                v67 = (uint64_t *)&v371;
                if (!v65)
                {
LABEL_77:
                  *((_BYTE *)v67 + v66) = 0;
                  v72 = (uint64_t)v371;
                  v395[0] = v372;
                  *(_QWORD *)((char *)v395 + 7) = *(_QWORD *)((char *)&v372 + 7);
                  v73 = HIBYTE(v372);
                  v74 = operator new(0x38uLL);
                  v74[1] = 0;
                  v74[2] = 0;
                  v74[3] = off_24C9ABC20;
                  *v74 = &off_24C9ABBD0;
                  v75 = v395[0];
                  v74[4] = v72;
                  v74[5] = v75;
                  *(_QWORD *)((char *)v74 + 47) = *(_QWORD *)((char *)v395 + 7);
                  *((_BYTE *)v74 + 55) = v73;
                  v395[0] = 0;
                  *(_QWORD *)((char *)v395 + 7) = 0;
                  v76 = v370;
                  v369 = (char *)(v74 + 3);
                  v370 = (std::__shared_weak_count *)v74;
                  if (v76)
                  {
                    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(p_shared_owners);
                    while (__stlxr(v78 - 1, p_shared_owners));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  *(_OWORD *)v392 = v367;
                  v79 = v369;
                  *(_QWORD *)&v392[16] = v368;
                  if (v368)
                  {
                    v80 = (unint64_t *)&v368->__shared_owners_;
                    do
                      v81 = __ldxr(v80);
                    while (__stxr(v81 + 1, v80));
                  }
                  v82 = v370;
                  *(_QWORD *)&v392[24] = v79;
                  *(_QWORD *)&v392[32] = v370;
                  if (v370)
                  {
                    v83 = (unint64_t *)&v370->__shared_owners_;
                    do
                      v84 = __ldxr(v83);
                    while (__stxr(v84 + 1, v83));
                    *(_QWORD *)&v392[40] = v79;
                    do
                      v85 = __ldaxr(v83);
                    while (__stlxr(v85 - 1, v83));
                    if (!v85)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&v392[40] = v79;
                  }
                  v86 = v368;
                  if (v368)
                  {
                    v87 = (unint64_t *)&v368->__shared_owners_;
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                  v89 = *(_QWORD *)v392;
                  if (*(char *)(*(_QWORD *)&v392[40] + 31) >= 0)
                    v90 = *(_QWORD *)&v392[40] + 8;
                  else
                    v90 = *(_QWORD *)(*(_QWORD *)&v392[40] + 8);
                  v91 = _os_log_pack_fill();
                  *(_DWORD *)v91 = 136315138;
                  *(_QWORD *)(v91 + 4) = v90;
                  v92 = operator new();
                  v93 = *(unsigned __int8 *)(v346 + 39);
                  v94 = v345;
                  if ((v93 & 0x80u) != 0)
                  {
                    v94 = *(_QWORD *)(v346 + 16);
                    v93 = *(_QWORD *)(v346 + 24);
                  }
                  *(_QWORD *)v92 = v89;
                  *(_OWORD *)(v92 + 8) = *(_OWORD *)&v392[8];
                  *(_QWORD *)&v392[8] = 0;
                  *(_QWORD *)&v392[16] = 0;
                  *(_OWORD *)(v92 + 24) = *(_OWORD *)&v392[24];
                  *(_QWORD *)&v392[24] = 0;
                  *(_QWORD *)&v392[32] = 0;
                  *(_QWORD *)(v92 + 40) = v94;
                  *(_QWORD *)(v92 + 48) = v93;
                  *(_BYTE *)(v92 + 56) = 2;
                  v371 = 0;
                  *(_QWORD *)&v367 = v92;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v57 + 24) + 40))(*(_QWORD *)(v57 + 24), &v367);
                  v95 = v367;
                  *(_QWORD *)&v367 = 0;
                  v69 = v347;
                  if (v95)
                  {
                    v96 = *(std::__shared_weak_count **)(v95 + 32);
                    if (v96)
                    {
                      v97 = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(v97);
                      while (__stlxr(v98 - 1, v97));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    v99 = *(std::__shared_weak_count **)(v95 + 16);
                    if (v99)
                    {
                      v100 = (unint64_t *)&v99->__shared_owners_;
                      do
                        v101 = __ldaxr(v100);
                      while (__stlxr(v101 - 1, v100));
                      if (!v101)
                      {
                        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                        std::__shared_weak_count::__release_weak(v99);
                      }
                    }
                    MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
                    v102 = (uint64_t)v371;
                    v371 = 0;
                    if (v102)
                    {
                      v103 = *(std::__shared_weak_count **)(v102 + 32);
                      if (v103)
                      {
                        v104 = (unint64_t *)&v103->__shared_owners_;
                        do
                          v105 = __ldaxr(v104);
                        while (__stlxr(v105 - 1, v104));
                        if (!v105)
                        {
                          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                          std::__shared_weak_count::__release_weak(v103);
                        }
                      }
                      v106 = *(std::__shared_weak_count **)(v102 + 16);
                      if (v106)
                      {
                        v107 = (unint64_t *)&v106->__shared_owners_;
                        do
                          v108 = __ldaxr(v107);
                        while (__stlxr(v108 - 1, v107));
                        if (!v108)
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                      }
                      MEMORY[0x212BC6398](v102, 0x10F0C40B62ED6C6);
                    }
                  }
                  v109 = *(std::__shared_weak_count **)&v392[32];
                  if (*(_QWORD *)&v392[32])
                  {
                    v110 = (unint64_t *)(*(_QWORD *)&v392[32] + 8);
                    do
                      v111 = __ldaxr(v110);
                    while (__stlxr(v111 - 1, v110));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                      std::__shared_weak_count::__release_weak(v109);
                    }
                  }
                  v112 = *(std::__shared_weak_count **)&v392[16];
                  if (*(_QWORD *)&v392[16])
                  {
                    v113 = (unint64_t *)(*(_QWORD *)&v392[16] + 8);
                    do
                      v114 = __ldaxr(v113);
                    while (__stlxr(v114 - 1, v113));
                    if (!v114)
                    {
                      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                      std::__shared_weak_count::__release_weak(v112);
                    }
                  }
LABEL_136:
                  if (v69)
                  {
                    v115 = (const char *)&__dst;
                    if (v365 < 0)
                      v115 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v354, "%s", v115);
                    sub_20E863570((uint64_t)&v354);
                  }
                  sub_20E863570((uint64_t)&v354);
                  v116 = v362;
                  if (v362)
                  {
                    v117 = (unint64_t *)&v362->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  if (SHIBYTE(v365) < 0)
                    operator delete(__dst);
                  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                  v119 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  *(_QWORD *)&object[16] = v119;
                  *(_QWORD *)&v374 = MEMORY[0x24BEDB848] + 16;
                  if (SHIBYTE(v385) < 0)
                    operator delete(v381);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](&__p);
                  goto LABEL_150;
                }
              }
              memcpy(v67, v58, v66);
              goto LABEL_77;
            }
          }
          memmove(v53, v51, v52);
          goto LABEL_48;
        }
      }
      memmove(p_dst, v41, v38);
      goto LABEL_28;
    }
  }
LABEL_150:
  sub_20F143DC4(&v371);
  if (*(int *)v371[7] > 2)
    goto LABEL_239;
  v120 = *((unsigned __int8 *)v371 + 72);
  v121 = sub_20E8C31DC((uint64_t)v371, "OSLogSurrogateAppender", 1, 0);
  v122 = v121;
  if (!v120 && !v121)
    goto LABEL_239;
  *(_QWORD *)v392 = &v371;
  *(std::chrono::steady_clock::time_point *)&v392[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v392[16] = std::chrono::system_clock::now();
  *(_DWORD *)&v392[24] = 2;
  *(_QWORD *)&v392[32] = "unknown file";
  *(_DWORD *)&v392[40] = 136;
  v393 = 0uLL;
  *(_QWORD *)&v392[48] = "unknown function";
  v123 = **(_QWORD **)v392;
  v124 = (const char *)(**(_QWORD **)v392 + 16);
  v348 = v124;
  v349 = v30;
  if (*(char *)(**(_QWORD **)v392 + 39) < 0)
  {
    v124 = *(const char **)(v123 + 16);
    v125 = *(_QWORD *)(v123 + 24);
    v351 = v120;
    v126 = v31;
    v128 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v128 & 1) != 0)
      goto LABEL_157;
  }
  else
  {
    v125 = *(unsigned __int8 *)(**(_QWORD **)v392 + 39);
    v351 = v120;
    v126 = v31;
    v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v127 & 1) != 0)
      goto LABEL_157;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v374 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_157:
  if (byte_254A4A4F8[23] >= 0)
    v129 = byte_254A4A4F8;
  else
    v129 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v130 = byte_254A4A4F8[23];
  else
    v130 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v129, v124);
  v131 = &object[8];
  if (v130 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v130 >= 0x17)
  {
    v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v130 | 7) != 0x17)
      v132 = v130 | 7;
    v133 = v132 + 1;
    v131 = operator new(v132 + 1);
    *(_QWORD *)&object[16] = v130;
    *(_QWORD *)&v374 = v133 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v131;
    goto LABEL_170;
  }
  BYTE7(v374) = v130;
  if (v130)
LABEL_170:
    memmove(v131, v129, v130);
  v131[v130] = 0;
  BYTE8(v374) = 1;
  v134 = &v375;
  if (v125 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v125 >= 0x17)
  {
    v137 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v125 | 7) != 0x17)
      v137 = v125 | 7;
    v138 = v137 + 1;
    v135 = v349;
    v134 = operator new(v137 + 1);
    v376 = v125;
    v377 = v138 | 0x8000000000000000;
    v375 = v134;
  }
  else
  {
    HIBYTE(v377) = v125;
    v135 = v349;
    if (!v125)
    {
      LOBYTE(v375) = 0;
      LOBYTE(v378) = 1;
      v136 = *(NSObject **)object;
      if ((SHIBYTE(v377) & 0x80000000) == 0)
        goto LABEL_175;
      goto LABEL_181;
    }
  }
  memmove(v134, v124, v125);
  *((_BYTE *)v134 + v125) = 0;
  LOBYTE(v378) = 1;
  v136 = *(NSObject **)object;
  if ((SHIBYTE(v377) & 0x80000000) == 0)
  {
LABEL_175:
    if (!BYTE8(v374))
      goto LABEL_184;
LABEL_182:
    if (SBYTE7(v374) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_184;
  }
LABEL_181:
  operator delete(v375);
  if (BYTE8(v374))
    goto LABEL_182;
LABEL_184:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v122 && *(_QWORD *)(v122 + 24))
  {
    v139 = _os_log_pack_size();
    v140 = (std::__shared_weak_count_vtbl *)operator new(v139, (std::align_val_t)8uLL);
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v141;
    v141->__shared_owners_ = 0;
    v143 = (unint64_t *)&v141->__shared_owners_;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v140;
    *(_QWORD *)object = v140;
    *(_QWORD *)&object[8] = v140;
    *(_QWORD *)&object[16] = v141;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    v374 = 0uLL;
    v375 = 0;
    do
      v145 = __ldaxr(v143);
    while (__stlxr(v145 - 1, v143));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v142);
    }
    v146 = *(_QWORD *)object;
    v147 = _os_log_pack_fill();
    *(_DWORD *)v147 = 134218240;
    *(_QWORD *)(v147 + 4) = v126;
    *(_WORD *)(v147 + 12) = 2048;
    *(_QWORD *)(v147 + 14) = v135;
    v148 = operator new();
    v149 = *(unsigned __int8 *)(v123 + 39);
    v150 = *(const char **)(v123 + 16);
    v151 = *(_QWORD *)(v123 + 24);
    v152 = v374;
    *(_OWORD *)(v148 + 8) = *(_OWORD *)&object[8];
    if ((v149 & 0x80u) != 0)
      v149 = v151;
    else
      v150 = v348;
    *(_QWORD *)v148 = v146;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v148 + 24) = v152;
    v374 = 0uLL;
    *(_QWORD *)(v148 + 40) = v150;
    *(_QWORD *)(v148 + 48) = v149;
    *(_BYTE *)(v148 + 56) = 2;
    *(_QWORD *)&v367 = 0;
    v354 = (uint64_t *)v148;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v122 + 24) + 40))(*(_QWORD *)(v122 + 24), &v354);
    v153 = v354;
    v354 = 0;
    if (v153)
    {
      v154 = (std::__shared_weak_count *)v153[4];
      if (v154)
      {
        v155 = (unint64_t *)&v154->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = (std::__shared_weak_count *)v153[2];
      if (v157)
      {
        v158 = (unint64_t *)&v157->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
      v160 = v367;
      *(_QWORD *)&v367 = 0;
      if (v160)
      {
        v161 = *(std::__shared_weak_count **)(v160 + 32);
        if (v161)
        {
          v162 = (unint64_t *)&v161->__shared_owners_;
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        v164 = *(std::__shared_weak_count **)(v160 + 16);
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        MEMORY[0x212BC6398](v160, 0x10F0C40B62ED6C6);
      }
    }
    v167 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
    if (*((_QWORD *)&v374 + 1))
    {
      v168 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    v170 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v171 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
  }
  else
  {
    os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = v126;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v135;
    v173 = (void *)_os_log_send_and_compose_impl();
    if (v173)
      free(v173);
  }
  if (v351)
  {
    sub_20E8C003C((uint64_t)v392, "tracking resolution %zu x %zu", v126, v135);
    sub_20E863570((uint64_t)v392);
  }
  sub_20E863570((uint64_t)v392);
  v174 = (std::__shared_weak_count *)*((_QWORD *)&v393 + 1);
  if (*((_QWORD *)&v393 + 1))
  {
    v175 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
LABEL_239:
  sub_20F143DC4(&v366);
  if (**(int **)(v366 + 56) > 2)
    goto LABEL_380;
  v177 = *(unsigned __int8 *)(v366 + 72);
  v178 = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
  v179 = v178;
  if (!v177 && v178 == 0)
    goto LABEL_380;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"disparity_fraction ", 19);
  std::ostream::operator<<();
  if ((v387 & 0x10) != 0)
  {
    v183 = v386;
    if (v386 < v379)
    {
      v386 = v379;
      v183 = v379;
    }
    v184 = v378;
    v181 = v183 - (_QWORD)v378;
    if (v183 - (unint64_t)v378 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_302;
  }
  else
  {
    if ((v387 & 8) == 0)
    {
      v181 = 0;
      HIBYTE(v365) = 0;
      v182 = (void **)&__dst;
      goto LABEL_257;
    }
    v184 = v375;
    v181 = v377 - (_QWORD)v375;
    if (v377 - (unint64_t)v375 > 0x7FFFFFFFFFFFFFF7)
LABEL_302:
      sub_20E860B7C();
  }
  if (v181 >= 0x17)
  {
    v185 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17)
      v185 = v181 | 7;
    v186 = v185 + 1;
    v182 = (void **)operator new(v185 + 1);
    v364 = v181;
    v365 = v186 | 0x8000000000000000;
    __dst = v182;
    goto LABEL_256;
  }
  HIBYTE(v365) = v181;
  v182 = (void **)&__dst;
  if (v181)
LABEL_256:
    memmove(v182, v184, v181);
LABEL_257:
  *((_BYTE *)v182 + v181) = 0;
  v354 = (uint64_t *)&v366;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v356 = std::chrono::system_clock::now().__d_.__rep_;
  v357 = 2;
  v358 = "unknown file";
  v359 = 137;
  v361 = 0;
  v362 = 0;
  v360 = "unknown function";
  if (v365 >= 0)
    v187 = (const char *)&__dst;
  else
    v187 = (const char *)__dst;
  v188 = *v354;
  if (*(char *)(*v354 + 39) < 0)
  {
    v190 = *(const char **)(v188 + 16);
    v189 = *(_QWORD *)(v188 + 24);
    v352 = *v354 + 16;
    v192 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v192 & 1) != 0)
      goto LABEL_264;
  }
  else
  {
    v189 = *(unsigned __int8 *)(*v354 + 39);
    v190 = (const char *)(*v354 + 16);
    v352 = (uint64_t)v190;
    v191 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v191 & 1) != 0)
      goto LABEL_264;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v392);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v392);
    if (v392[24] && (v392[23] & 0x80000000) != 0)
      operator delete(*(void **)v392);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_264:
  if (byte_254A4A4F8[23] >= 0)
    v193 = byte_254A4A4F8;
  else
    v193 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v194 = byte_254A4A4F8[23];
  else
    v194 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v392 = os_log_create(v193, v190);
  v195 = &v392[8];
  if (v194 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v194 >= 0x17)
  {
    v196 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v194 | 7) != 0x17)
      v196 = v194 | 7;
    v197 = v196 + 1;
    v195 = operator new(v196 + 1);
    *(_QWORD *)&v392[16] = v194;
    *(_QWORD *)&v392[24] = v197 | 0x8000000000000000;
    *(_QWORD *)&v392[8] = v195;
    goto LABEL_277;
  }
  v392[31] = v194;
  if (v194)
LABEL_277:
    memmove(v195, v193, v194);
  v195[v194] = 0;
  v392[32] = 1;
  v198 = &v392[40];
  if (v189 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v189 >= 0x17)
  {
    v200 = (v189 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v189 | 7) != 0x17)
      v200 = v189 | 7;
    v201 = v200 + 1;
    v198 = operator new(v200 + 1);
    *(_QWORD *)&v392[48] = v189;
    *(_QWORD *)&v393 = v201 | 0x8000000000000000;
    *(_QWORD *)&v392[40] = v198;
  }
  else
  {
    BYTE7(v393) = v189;
    if (!v189)
    {
      v392[40] = 0;
      BYTE8(v393) = 1;
      v199 = *(NSObject **)v392;
      if ((SBYTE7(v393) & 0x80000000) == 0)
        goto LABEL_282;
      goto LABEL_288;
    }
  }
  memmove(v198, v190, v189);
  v198[v189] = 0;
  BYTE8(v393) = 1;
  v199 = *(NSObject **)v392;
  if ((SBYTE7(v393) & 0x80000000) == 0)
  {
LABEL_282:
    if (!v392[32])
      goto LABEL_291;
    goto LABEL_289;
  }
LABEL_288:
  operator delete(*(void **)&v392[40]);
  if (!v392[32])
    goto LABEL_291;
LABEL_289:
  if ((v392[31] & 0x80000000) != 0)
    operator delete(*(void **)&v392[8]);
LABEL_291:
  if (*(_QWORD *)v392)
    os_release(*(void **)v392);
  if (!v179 || !*(_QWORD *)(v179 + 24))
  {
    os_log_type_enabled(v199, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v392 = 136315138;
    *(_QWORD *)&v392[4] = v187;
    v208 = (void *)_os_log_send_and_compose_impl();
    if (v208)
      free(v208);
    goto LABEL_366;
  }
  v202 = _os_log_pack_size();
  v203 = (std::__shared_weak_count_vtbl *)operator new(v202, (std::align_val_t)8uLL);
  v204 = (std::__shared_weak_count *)operator new();
  v204->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v204->__shared_owners_ = 0;
  v204->__shared_weak_owners_ = 0;
  v204[1].__vftable = v203;
  *(_QWORD *)&v367 = v203;
  *((_QWORD *)&v367 + 1) = v203;
  v369 = 0;
  v370 = 0;
  v368 = v204;
  v205 = strlen(v187);
  if (v205 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v206 = v205;
  if (v205 >= 0x17)
  {
    v209 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v205 | 7) != 0x17)
      v209 = v205 | 7;
    v210 = v209 + 1;
    v207 = (uint64_t *)operator new(v209 + 1);
    *(_QWORD *)&v372 = v206;
    *((_QWORD *)&v372 + 1) = v210 | 0x8000000000000000;
    v371 = v207;
    goto LABEL_306;
  }
  HIBYTE(v372) = v205;
  v207 = (uint64_t *)&v371;
  if (v205)
LABEL_306:
    memcpy(v207, v187, v206);
  *((_BYTE *)v207 + v206) = 0;
  v211 = (uint64_t)v371;
  v395[0] = v372;
  *(_QWORD *)((char *)v395 + 7) = *(_QWORD *)((char *)&v372 + 7);
  v212 = HIBYTE(v372);
  v213 = operator new(0x38uLL);
  v213[1] = 0;
  v213[2] = 0;
  v213[3] = off_24C9ABC20;
  *v213 = &off_24C9ABBD0;
  v214 = v395[0];
  v213[4] = v211;
  v213[5] = v214;
  *(_QWORD *)((char *)v213 + 47) = *(_QWORD *)((char *)v395 + 7);
  *((_BYTE *)v213 + 55) = v212;
  v395[0] = 0;
  *(_QWORD *)((char *)v395 + 7) = 0;
  v215 = v370;
  v369 = (char *)(v213 + 3);
  v370 = (std::__shared_weak_count *)v213;
  if (v215)
  {
    v216 = (unint64_t *)&v215->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  *(_OWORD *)v392 = v367;
  v218 = v369;
  *(_QWORD *)&v392[16] = v368;
  if (v368)
  {
    v219 = (unint64_t *)&v368->__shared_owners_;
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  v221 = v370;
  *(_QWORD *)&v392[24] = v218;
  *(_QWORD *)&v392[32] = v370;
  if (v370)
  {
    v222 = (unint64_t *)&v370->__shared_owners_;
    do
      v223 = __ldxr(v222);
    while (__stxr(v223 + 1, v222));
    *(_QWORD *)&v392[40] = v218;
    do
      v224 = __ldaxr(v222);
    while (__stlxr(v224 - 1, v222));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
      std::__shared_weak_count::__release_weak(v221);
    }
  }
  else
  {
    *(_QWORD *)&v392[40] = v218;
  }
  v225 = v368;
  if (v368)
  {
    v226 = (unint64_t *)&v368->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = *(_QWORD *)v392;
  if (*(char *)(*(_QWORD *)&v392[40] + 31) >= 0)
    v229 = *(_QWORD *)&v392[40] + 8;
  else
    v229 = *(_QWORD *)(*(_QWORD *)&v392[40] + 8);
  v230 = _os_log_pack_fill();
  *(_DWORD *)v230 = 136315138;
  *(_QWORD *)(v230 + 4) = v229;
  v231 = operator new();
  v232 = *(unsigned __int8 *)(v188 + 39);
  v233 = v352;
  if ((v232 & 0x80u) != 0)
  {
    v233 = *(_QWORD *)(v188 + 16);
    v232 = *(_QWORD *)(v188 + 24);
  }
  *(_QWORD *)v231 = v228;
  *(_OWORD *)(v231 + 8) = *(_OWORD *)&v392[8];
  *(_QWORD *)&v392[8] = 0;
  *(_QWORD *)&v392[16] = 0;
  *(_OWORD *)(v231 + 24) = *(_OWORD *)&v392[24];
  *(_QWORD *)&v392[24] = 0;
  *(_QWORD *)&v392[32] = 0;
  *(_QWORD *)(v231 + 40) = v233;
  *(_QWORD *)(v231 + 48) = v232;
  *(_BYTE *)(v231 + 56) = 2;
  v371 = 0;
  *(_QWORD *)&v367 = v231;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v179 + 24) + 40))(*(_QWORD *)(v179 + 24), &v367);
  v234 = v367;
  *(_QWORD *)&v367 = 0;
  if (v234)
  {
    v235 = *(std::__shared_weak_count **)(v234 + 32);
    if (v235)
    {
      v236 = (unint64_t *)&v235->__shared_owners_;
      do
        v237 = __ldaxr(v236);
      while (__stlxr(v237 - 1, v236));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    v238 = *(std::__shared_weak_count **)(v234 + 16);
    if (v238)
    {
      v239 = (unint64_t *)&v238->__shared_owners_;
      do
        v240 = __ldaxr(v239);
      while (__stlxr(v240 - 1, v239));
      if (!v240)
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
      }
    }
    MEMORY[0x212BC6398](v234, 0x10F0C40B62ED6C6);
    v241 = (uint64_t)v371;
    v371 = 0;
    if (v241)
    {
      v242 = *(std::__shared_weak_count **)(v241 + 32);
      if (v242)
      {
        v243 = (unint64_t *)&v242->__shared_owners_;
        do
          v244 = __ldaxr(v243);
        while (__stlxr(v244 - 1, v243));
        if (!v244)
        {
          ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
          std::__shared_weak_count::__release_weak(v242);
        }
      }
      v245 = *(std::__shared_weak_count **)(v241 + 16);
      if (v245)
      {
        v246 = (unint64_t *)&v245->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      MEMORY[0x212BC6398](v241, 0x10F0C40B62ED6C6);
    }
  }
  v248 = *(std::__shared_weak_count **)&v392[32];
  if (*(_QWORD *)&v392[32])
  {
    v249 = (unint64_t *)(*(_QWORD *)&v392[32] + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = *(std::__shared_weak_count **)&v392[16];
  if (*(_QWORD *)&v392[16])
  {
    v252 = (unint64_t *)(*(_QWORD *)&v392[16] + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
LABEL_366:
  if (v177)
  {
    v254 = (const char *)&__dst;
    if (v365 < 0)
      v254 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v354, "%s", v254);
    sub_20E863570((uint64_t)&v354);
  }
  sub_20E863570((uint64_t)&v354);
  v255 = v362;
  if (v362)
  {
    v256 = (unint64_t *)&v362->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  if (SHIBYTE(v365) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v258 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v258;
  *(_QWORD *)&v374 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v385) < 0)
    operator delete(v381);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&__p);
LABEL_380:
  sub_20F143DC4(&v366);
  result = v366;
  if (**(int **)(v366 + 56) > 2)
    return result;
  v260 = *(unsigned __int8 *)(v366 + 72);
  result = sub_20E8C31DC(v366, "OSLogSurrogateAppender", 1, 0);
  v261 = result;
  if (!v260 && !result)
    return result;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"max features ", 13);
  std::ostream::operator<<();
  v353 = v261;
  if ((v387 & 0x10) != 0)
  {
    v264 = v386;
    if (v386 < v379)
    {
      v386 = v379;
      v264 = v379;
    }
    v265 = v378;
    v262 = v264 - (_QWORD)v378;
    if (v264 - (unint64_t)v378 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_441;
  }
  else
  {
    if ((v387 & 8) == 0)
    {
      v262 = 0;
      HIBYTE(v365) = 0;
      v263 = (void **)&__dst;
      goto LABEL_396;
    }
    v265 = v375;
    v262 = v377 - (_QWORD)v375;
    if (v377 - (unint64_t)v375 > 0x7FFFFFFFFFFFFFF7)
LABEL_441:
      sub_20E860B7C();
  }
  if (v262 >= 0x17)
  {
    v266 = (v262 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v262 | 7) != 0x17)
      v266 = v262 | 7;
    v267 = v266 + 1;
    v263 = (void **)operator new(v266 + 1);
    v364 = v262;
    v365 = v267 | 0x8000000000000000;
    __dst = v263;
    goto LABEL_395;
  }
  HIBYTE(v365) = v262;
  v263 = (void **)&__dst;
  if (v262)
LABEL_395:
    memmove(v263, v265, v262);
LABEL_396:
  *((_BYTE *)v263 + v262) = 0;
  v354 = (uint64_t *)&v366;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v356 = std::chrono::system_clock::now().__d_.__rep_;
  v357 = 2;
  v358 = "unknown file";
  v359 = 138;
  v361 = 0;
  v362 = 0;
  v360 = "unknown function";
  if (v365 >= 0)
    v268 = (void **)&__dst;
  else
    v268 = __dst;
  v269 = *v354;
  v270 = *v354 + 16;
  if (*(char *)(*v354 + 39) < 0)
  {
    v272 = *(const char **)(v269 + 16);
    v271 = *(_QWORD *)(v269 + 24);
    v274 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v274 & 1) != 0)
      goto LABEL_403;
  }
  else
  {
    v271 = *(unsigned __int8 *)(*v354 + 39);
    v272 = (const char *)(*v354 + 16);
    v273 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v273 & 1) != 0)
      goto LABEL_403;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v392);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v392);
    if (v392[24] && (v392[23] & 0x80000000) != 0)
      operator delete(*(void **)v392);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_403:
  if (byte_254A4A4F8[23] >= 0)
    v275 = byte_254A4A4F8;
  else
    v275 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v276 = byte_254A4A4F8[23];
  else
    v276 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v392 = os_log_create(v275, v272);
  v277 = &v392[8];
  if (v276 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v276 >= 0x17)
  {
    v278 = v260;
    v279 = v270;
    v280 = (v276 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v276 | 7) != 0x17)
      v280 = v276 | 7;
    v281 = v280 + 1;
    v277 = operator new(v280 + 1);
    *(_QWORD *)&v392[16] = v276;
    *(_QWORD *)&v392[24] = v281 | 0x8000000000000000;
    *(_QWORD *)&v392[8] = v277;
    v270 = v279;
    v260 = v278;
    goto LABEL_416;
  }
  v392[31] = v276;
  if (v276)
LABEL_416:
    memmove(v277, v275, v276);
  v277[v276] = 0;
  v392[32] = 1;
  v282 = &v392[40];
  if (v271 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v283 = (const char *)v268;
  if (v271 >= 0x17)
  {
    v286 = (v271 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v271 | 7) != 0x17)
      v286 = v271 | 7;
    v287 = v286 + 1;
    v284 = v353;
    v282 = operator new(v286 + 1);
    *(_QWORD *)&v392[48] = v271;
    *(_QWORD *)&v393 = v287 | 0x8000000000000000;
    *(_QWORD *)&v392[40] = v282;
  }
  else
  {
    BYTE7(v393) = v271;
    v284 = v353;
    if (!v271)
    {
      v392[40] = 0;
      BYTE8(v393) = 1;
      v285 = *(NSObject **)v392;
      if ((SBYTE7(v393) & 0x80000000) == 0)
        goto LABEL_421;
      goto LABEL_427;
    }
  }
  memmove(v282, v272, v271);
  v282[v271] = 0;
  BYTE8(v393) = 1;
  v285 = *(NSObject **)v392;
  if ((SBYTE7(v393) & 0x80000000) == 0)
  {
LABEL_421:
    if (!v392[32])
      goto LABEL_430;
    goto LABEL_428;
  }
LABEL_427:
  operator delete(*(void **)&v392[40]);
  if (!v392[32])
    goto LABEL_430;
LABEL_428:
  if ((v392[31] & 0x80000000) != 0)
    operator delete(*(void **)&v392[8]);
LABEL_430:
  if (*(_QWORD *)v392)
    os_release(*(void **)v392);
  if (!v284 || !*(_QWORD *)(v284 + 24))
  {
    os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v392 = 136315138;
    *(_QWORD *)&v392[4] = v283;
    v294 = (void *)_os_log_send_and_compose_impl();
    if (v294)
      free(v294);
    goto LABEL_508;
  }
  v288 = _os_log_pack_size();
  v289 = (std::__shared_weak_count_vtbl *)operator new(v288, (std::align_val_t)8uLL);
  v290 = (std::__shared_weak_count *)operator new();
  v290->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v290->__shared_owners_ = 0;
  v290->__shared_weak_owners_ = 0;
  v290[1].__vftable = v289;
  *(_QWORD *)&v367 = v289;
  *((_QWORD *)&v367 + 1) = v289;
  v369 = 0;
  v370 = 0;
  v368 = v290;
  v291 = strlen(v283);
  if (v291 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v292 = v291;
  if (v291 >= 0x17)
  {
    v295 = (v291 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v291 | 7) != 0x17)
      v295 = v291 | 7;
    v296 = v295 + 1;
    v293 = (uint64_t *)operator new(v295 + 1);
    *(_QWORD *)&v372 = v292;
    *((_QWORD *)&v372 + 1) = v296 | 0x8000000000000000;
    v371 = v293;
    goto LABEL_445;
  }
  HIBYTE(v372) = v291;
  v293 = (uint64_t *)&v371;
  if (v291)
LABEL_445:
    memcpy(v293, v283, v292);
  *((_BYTE *)v293 + v292) = 0;
  v297 = (uint64_t)v371;
  v395[0] = v372;
  *(_QWORD *)((char *)v395 + 7) = *(_QWORD *)((char *)&v372 + 7);
  v298 = HIBYTE(v372);
  v299 = operator new(0x38uLL);
  v299[1] = 0;
  v299[2] = 0;
  v299[3] = off_24C9ABC20;
  *v299 = &off_24C9ABBD0;
  v300 = v395[0];
  v299[4] = v297;
  v299[5] = v300;
  *(_QWORD *)((char *)v299 + 47) = *(_QWORD *)((char *)v395 + 7);
  *((_BYTE *)v299 + 55) = v298;
  v395[0] = 0;
  *(_QWORD *)((char *)v395 + 7) = 0;
  v301 = v370;
  v369 = (char *)(v299 + 3);
  v370 = (std::__shared_weak_count *)v299;
  if (v301)
  {
    v302 = (unint64_t *)&v301->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  *(_OWORD *)v392 = v367;
  v304 = v369;
  *(_QWORD *)&v392[16] = v368;
  if (v368)
  {
    v305 = (unint64_t *)&v368->__shared_owners_;
    do
      v306 = __ldxr(v305);
    while (__stxr(v306 + 1, v305));
  }
  v307 = v370;
  *(_QWORD *)&v392[24] = v304;
  *(_QWORD *)&v392[32] = v370;
  if (v370)
  {
    v308 = (unint64_t *)&v370->__shared_owners_;
    do
      v309 = __ldxr(v308);
    while (__stxr(v309 + 1, v308));
    *(_QWORD *)&v392[40] = v304;
    do
      v310 = __ldaxr(v308);
    while (__stlxr(v310 - 1, v308));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
    }
  }
  else
  {
    *(_QWORD *)&v392[40] = v304;
  }
  v311 = v368;
  if (v368)
  {
    v312 = (unint64_t *)&v368->__shared_owners_;
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  v314 = *(_QWORD *)v392;
  if (*(char *)(*(_QWORD *)&v392[40] + 31) >= 0)
    v315 = *(_QWORD *)&v392[40] + 8;
  else
    v315 = *(_QWORD *)(*(_QWORD *)&v392[40] + 8);
  v316 = _os_log_pack_fill();
  *(_DWORD *)v316 = 136315138;
  *(_QWORD *)(v316 + 4) = v315;
  v317 = operator new();
  v318 = *(unsigned __int8 *)(v269 + 39);
  if ((v318 & 0x80u) == 0)
    v319 = v270;
  else
    v319 = *(_QWORD *)(v269 + 16);
  if ((v318 & 0x80u) != 0)
    v318 = *(_QWORD *)(v269 + 24);
  *(_QWORD *)v317 = v314;
  *(_OWORD *)(v317 + 8) = *(_OWORD *)&v392[8];
  *(_QWORD *)&v392[8] = 0;
  *(_QWORD *)&v392[16] = 0;
  *(_OWORD *)(v317 + 24) = *(_OWORD *)&v392[24];
  *(_QWORD *)&v392[24] = 0;
  *(_QWORD *)&v392[32] = 0;
  *(_QWORD *)(v317 + 40) = v319;
  *(_QWORD *)(v317 + 48) = v318;
  *(_BYTE *)(v317 + 56) = 2;
  v371 = 0;
  *(_QWORD *)&v367 = v317;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v284 + 24) + 40))(*(_QWORD *)(v284 + 24), &v367);
  v320 = v367;
  *(_QWORD *)&v367 = 0;
  if (v320)
  {
    v321 = *(std::__shared_weak_count **)(v320 + 32);
    if (v321)
    {
      v322 = (unint64_t *)&v321->__shared_owners_;
      do
        v323 = __ldaxr(v322);
      while (__stlxr(v323 - 1, v322));
      if (!v323)
      {
        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
        std::__shared_weak_count::__release_weak(v321);
      }
    }
    v324 = *(std::__shared_weak_count **)(v320 + 16);
    if (v324)
    {
      v325 = (unint64_t *)&v324->__shared_owners_;
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (!v326)
      {
        ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
        std::__shared_weak_count::__release_weak(v324);
      }
    }
    MEMORY[0x212BC6398](v320, 0x10F0C40B62ED6C6);
    v327 = (uint64_t)v371;
    v371 = 0;
    if (v327)
    {
      v328 = *(std::__shared_weak_count **)(v327 + 32);
      if (v328)
      {
        v329 = (unint64_t *)&v328->__shared_owners_;
        do
          v330 = __ldaxr(v329);
        while (__stlxr(v330 - 1, v329));
        if (!v330)
        {
          ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
          std::__shared_weak_count::__release_weak(v328);
        }
      }
      v331 = *(std::__shared_weak_count **)(v327 + 16);
      if (v331)
      {
        v332 = (unint64_t *)&v331->__shared_owners_;
        do
          v333 = __ldaxr(v332);
        while (__stlxr(v333 - 1, v332));
        if (!v333)
        {
          ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
          std::__shared_weak_count::__release_weak(v331);
        }
      }
      MEMORY[0x212BC6398](v327, 0x10F0C40B62ED6C6);
    }
  }
  v334 = *(std::__shared_weak_count **)&v392[32];
  if (*(_QWORD *)&v392[32])
  {
    v335 = (unint64_t *)(*(_QWORD *)&v392[32] + 8);
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = *(std::__shared_weak_count **)&v392[16];
  if (*(_QWORD *)&v392[16])
  {
    v338 = (unint64_t *)(*(_QWORD *)&v392[16] + 8);
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
LABEL_508:
  if (v260)
  {
    v340 = (const char *)&__dst;
    if (v365 < 0)
      v340 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v354, "%s", v340);
    sub_20E863570((uint64_t)&v354);
  }
  sub_20E863570((uint64_t)&v354);
  v341 = v362;
  if (v362)
  {
    v342 = (unint64_t *)&v362->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  if (SHIBYTE(v365) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v344 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v344;
  *(_QWORD *)&v374 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v385) < 0)
    operator delete(v381);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&__p);
}

void sub_20F143A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *object)
{
  uint64_t v42;
  uint64_t v44;

  if (*(_BYTE *)(v42 - 200) && *(char *)(v42 - 201) < 0)
    operator delete(*(void **)(v42 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  if (a32 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  v44 = *a16;
  *a16 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  _Unwind_Resume(a1);
}

void sub_20F143DC4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62278);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62278))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62270);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62278);
  }
  *a1 = qword_254A62270;
}

void sub_20F143E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62278);
  _Unwind_Resume(a1);
}

uint64_t sub_20F143EB8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int64x2_t v57;
  _QWORD *v58;
  void *v59;
  void (***v60)(_QWORD);
  void (***v61)(_QWORD);
  void *v62;
  void (***v63)(_QWORD);
  void (***v64)(_QWORD);
  void (**v65)(_QWORD);
  BOOL v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  int64x2_t v91;
  _QWORD *v92;
  void *v93;
  void (***v94)(_QWORD);
  void (***v95)(_QWORD);
  void *v96;
  void (***v97)(_QWORD);
  void (***v98)(_QWORD);
  void (**v99)(_QWORD);
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  double v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  float v120;
  float v121;
  float v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  char v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  void *v149;
  int v150;
  unint64_t v151;
  _BYTE *v152;
  unint64_t v153;
  size_t v154;
  _BYTE *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  int v168;
  _BYTE *v169;
  _BYTE *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 *v180;
  uint64_t v181;
  __int128 v182;
  int v183;
  _BYTE *v184;
  _BYTE *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  __int128 *v195;
  uint64_t v196;
  __int128 v197;
  int v198;
  int v200;
  __int16 v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t **v215;
  int v216;
  int v217;
  size_t v218;
  _BOOL4 v219;
  uint64_t v220;
  void *__p[2];
  uint64_t v222;
  uint64_t v223;
  int64x2_t v224;
  _BYTE v225[20];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  char v233;
  uint64_t v234[3];

  v8 = sub_20E86C2D0(a1, (__int128 *)(a2 + 8));
  *(_BYTE *)(v8 + 392) = 0;
  *(_BYTE *)(v8 + 396) = 0;
  *(_BYTE *)(v8 + 400) = 0;
  *(_BYTE *)(v8 + 404) = 0;
  *(_BYTE *)(v8 + 408) = 0;
  *(_BYTE *)(v8 + 416) = 0;
  v214 = v8 + 424;
  v215 = (uint64_t **)(v8 + 456);
  *(_QWORD *)(v8 + 464) = 0;
  *(_QWORD *)(v8 + 472) = 0;
  *(_QWORD *)(v8 + 456) = 0;
  *(_QWORD *)(v8 + 432) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 424) = 0;
  *(_BYTE *)(v8 + 448) = 0;
  v220 = a2;
  if (*(_DWORD *)(a2 + 4) == 1)
    v9 = 1;
  else
    v9 = 2;
  v10 = a3[1];
  *(_QWORD *)(v8 + 480) = *a3;
  *(_QWORD *)(v8 + 488) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  sub_20F14B4A4(a1 + 496, v9);
  v13 = *(_QWORD *)(a1 + 528);
  v14 = *(_QWORD *)(a1 + 520);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
  if (v9 <= v15)
  {
    if (v9 < v15)
    {
      v16 = v14 + 24 * v9;
      if (v13 != v16)
      {
        v17 = *(_QWORD *)(a1 + 528);
        do
        {
          v19 = *(void **)(v17 - 24);
          v17 -= 24;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v13 - 16) = v18;
            operator delete(v18);
          }
          v13 = v17;
        }
        while (v17 != v16);
      }
      *(_QWORD *)(a1 + 528) = v16;
    }
  }
  else
  {
    sub_20F14B4A4(a1 + 520, v9 - v15);
  }
  if (*(_DWORD *)(v220 + 4) == 1)
    v20 = 1;
  else
    v20 = 2;
  v21 = a4[1];
  *(_QWORD *)(a1 + 552) = *a4;
  *(_QWORD *)(a1 + 560) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  sub_20F14B4A4(a1 + 568, v20);
  v24 = *(_QWORD *)(a1 + 600);
  v25 = *(_QWORD *)(a1 + 592);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 3);
  if (v20 <= v26)
  {
    if (v20 < v26)
    {
      v27 = v25 + 24 * v20;
      if (v24 != v27)
      {
        v28 = *(_QWORD *)(a1 + 600);
        do
        {
          v30 = *(void **)(v28 - 24);
          v28 -= 24;
          v29 = v30;
          if (v30)
          {
            *(_QWORD *)(v24 - 16) = v29;
            operator delete(v29);
          }
          v24 = v28;
        }
        while (v28 != v27);
      }
      *(_QWORD *)(a1 + 600) = v27;
    }
  }
  else
  {
    sub_20F14B4A4(a1 + 592, v20 - v26);
  }
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  if ((*(double *)(a1 + 72) <= 0.0 || *(double *)(a1 + 80) <= 0.0 || *(double *)(a1 + 88) <= 0.0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 180, (uint64_t)"std::all_of(this->config_.conservative_feature_standard_deviation_scale.begin(), this->config_.conservative_feature_standard_deviation_scale.end(), [](const double d) { return d > 0.0; }) && \"conservativ"
                  "e_feature_standard_deviation_scale must be greater than 0.\"",
         262,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_168;
  }
  v31 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 < 4uLL)
    goto LABEL_38;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 183, (uint64_t)"config_.feature_detection_pyramid_level < 4", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_168:
    abort();
  }
  v31 = *(_QWORD *)a1;
LABEL_38:
  if (!*(_BYTE *)(a1 + 17))
    goto LABEL_108;
  sub_20F140E84(v234, *(_QWORD *)(v220 + 400), *(_QWORD *)(v220 + 408), v31 + 1, v31 == 0);
  v32 = (unint64_t *)(a1 + 472);
  v34 = *(uint64_t **)(a1 + 464);
  v33 = *(_QWORD *)(a1 + 472);
  if ((unint64_t)v34 < v33)
  {
    v35 = v234[0];
    v234[0] = 0;
    *v34 = v35;
    *(_QWORD *)(a1 + 464) = v34 + 1;
    v36 = (_QWORD *)v234[0];
    v234[0] = 0;
    if (!v36)
      goto LABEL_41;
LABEL_64:
    v59 = (void *)v36[5];
    if (v59)
    {
      v36[6] = v59;
      operator delete(v59);
    }
    v60 = (void (***)(_QWORD))v36[2];
    if (v60)
    {
      v61 = (void (***)(_QWORD))v36[3];
      v62 = (void *)v36[2];
      if (v61 != v60)
      {
        v63 = v61 - 18;
        v64 = v61 - 18;
        do
        {
          v65 = *v64;
          v64 -= 18;
          (*v65)(v63);
          v66 = v63 == v60;
          v63 = v64;
        }
        while (!v66);
        v62 = (void *)v36[2];
      }
      v36[3] = v60;
      operator delete(v62);
    }
    MEMORY[0x212BC6398](v36, 0x1030C40380150A2);
    if (*(_DWORD *)(v220 + 4) != 2)
      goto LABEL_108;
    goto LABEL_74;
  }
  v37 = *v215;
  v38 = (char *)v34 - (char *)*v215;
  v39 = v38 >> 3;
  v40 = (v38 >> 3) + 1;
  if (v40 >> 61)
    sub_20E867F44();
  if ((uint64_t)(v33 - (_QWORD)v37) >> 2 > v40)
    v40 = (uint64_t)(v33 - (_QWORD)v37) >> 2;
  if (v33 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
    v41 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v41 = v40;
  *(_QWORD *)&v225[8] = a1 + 472;
  if (v41)
  {
    if (v41 >> 61)
      sub_20E877A38();
    v42 = (char *)operator new(8 * v41);
  }
  else
  {
    v42 = 0;
  }
  v43 = (uint64_t *)&v42[8 * v39];
  v44 = v234[0];
  v234[0] = 0;
  *v43 = v44;
  v45 = &v42[8 * v41];
  v224.i64[1] = (uint64_t)(v43 + 1);
  *(_QWORD *)v225 = v45;
  v46 = (char *)((char *)v34 - (char *)v37);
  if (v34 == v37)
  {
    v57 = vdupq_n_s64((unint64_t)v34);
    v58 = v43 + 1;
  }
  else
  {
    v47 = v46 - 8;
    if ((unint64_t)(v46 - 8) < 0x78
      || (uint64_t *)((char *)v34 - ((unint64_t)v47 & 0xFFFFFFFFFFFFFFF8) - 8) < v43
      && &v42[v38 - ((unint64_t)v47 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v34)
    {
      goto LABEL_176;
    }
    v48 = ((unint64_t)v47 >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v43 = (uint64_t *)((char *)v43 - v49);
    v50 = &v34[v49 / 0xFFFFFFFFFFFFFFF8];
    v51 = v34 - 2;
    v52 = &v42[8 * v39 - 16];
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *((_OWORD *)v51 - 1);
      v54 = *(_OWORD *)v51;
      *((_OWORD *)v51 - 1) = 0uLL;
      *(_OWORD *)v51 = 0uLL;
      *((_OWORD *)v52 - 1) = v55;
      *(_OWORD *)v52 = v54;
      v51 -= 4;
      v52 -= 32;
      v53 -= 4;
    }
    while (v53);
    v34 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_176:
      do
      {
        v56 = *--v34;
        *v34 = 0;
        *--v43 = v56;
      }
      while (v34 != v37);
    }
    v57 = *(int64x2_t *)v215;
    v58 = (_QWORD *)v224.i64[1];
    v45 = *(char **)v225;
    v33 = *v32;
  }
  *(_QWORD *)(a1 + 456) = v43;
  *(_QWORD *)(a1 + 464) = v58;
  v224 = v57;
  *(_QWORD *)(a1 + 472) = v45;
  *(_QWORD *)v225 = v33;
  v223 = v57.i64[0];
  sub_20F14B3CC((uint64_t)&v223);
  *(_QWORD *)(a1 + 464) = v58;
  v36 = (_QWORD *)v234[0];
  v234[0] = 0;
  if (v36)
    goto LABEL_64;
LABEL_41:
  if (*(_DWORD *)(v220 + 4) != 2)
    goto LABEL_108;
LABEL_74:
  sub_20F140E84(v234, *(_QWORD *)(v220 + 400), *(_QWORD *)(v220 + 408), v31 + 1, v31 == 0);
  v68 = *(uint64_t **)(a1 + 464);
  v67 = *(_QWORD *)(a1 + 472);
  if ((unint64_t)v68 < v67)
  {
    v69 = v234[0];
    v234[0] = 0;
    *v68 = v69;
    *(_QWORD *)(a1 + 464) = v68 + 1;
    v70 = (_QWORD *)v234[0];
    v234[0] = 0;
    if (!v70)
      goto LABEL_108;
    goto LABEL_98;
  }
  v71 = *v215;
  v72 = (char *)v68 - (char *)*v215;
  v73 = v72 >> 3;
  v74 = (v72 >> 3) + 1;
  if (v74 >> 61)
    sub_20E867F44();
  if ((uint64_t)(v67 - (_QWORD)v71) >> 2 > v74)
    v74 = (uint64_t)(v67 - (_QWORD)v71) >> 2;
  if (v67 - (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
    v75 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v75 = v74;
  *(_QWORD *)&v225[8] = a1 + 472;
  if (v75)
  {
    if (v75 >> 61)
      sub_20E877A38();
    v76 = (char *)operator new(8 * v75);
  }
  else
  {
    v76 = 0;
  }
  v77 = (uint64_t *)&v76[8 * v73];
  v78 = v234[0];
  v234[0] = 0;
  *v77 = v78;
  v79 = &v76[8 * v75];
  v224.i64[1] = (uint64_t)(v77 + 1);
  *(_QWORD *)v225 = v79;
  v80 = (char *)((char *)v68 - (char *)v71);
  if (v68 == v71)
  {
    v91 = vdupq_n_s64((unint64_t)v68);
    v92 = v77 + 1;
  }
  else
  {
    v81 = v80 - 8;
    if ((unint64_t)(v80 - 8) < 0x78
      || (uint64_t *)((char *)v68 - ((unint64_t)v81 & 0xFFFFFFFFFFFFFFF8) - 8) < v77
      && &v76[v72 - ((unint64_t)v81 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v68)
    {
      goto LABEL_177;
    }
    v82 = ((unint64_t)v81 >> 3) + 1;
    v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
    v77 = (uint64_t *)((char *)v77 - v83);
    v84 = &v68[v83 / 0xFFFFFFFFFFFFFFF8];
    v85 = v68 - 2;
    v86 = &v76[8 * v73 - 16];
    v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v89 = *((_OWORD *)v85 - 1);
      v88 = *(_OWORD *)v85;
      *((_OWORD *)v85 - 1) = 0uLL;
      *(_OWORD *)v85 = 0uLL;
      *((_OWORD *)v86 - 1) = v89;
      *(_OWORD *)v86 = v88;
      v85 -= 4;
      v86 -= 32;
      v87 -= 4;
    }
    while (v87);
    v68 = v84;
    if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_177:
      do
      {
        v90 = *--v68;
        *v68 = 0;
        *--v77 = v90;
      }
      while (v68 != v71);
    }
    v91 = *(int64x2_t *)v215;
    v92 = (_QWORD *)v224.i64[1];
    v79 = *(char **)v225;
    v67 = *v32;
  }
  *(_QWORD *)(a1 + 456) = v77;
  *(_QWORD *)(a1 + 464) = v92;
  v224 = v91;
  *(_QWORD *)(a1 + 472) = v79;
  *(_QWORD *)v225 = v67;
  v223 = v91.i64[0];
  sub_20F14B3CC((uint64_t)&v223);
  *(_QWORD *)(a1 + 464) = v92;
  v70 = (_QWORD *)v234[0];
  v234[0] = 0;
  if (v70)
  {
LABEL_98:
    v93 = (void *)v70[5];
    if (v93)
    {
      v70[6] = v93;
      operator delete(v93);
    }
    v94 = (void (***)(_QWORD))v70[2];
    if (v94)
    {
      v95 = (void (***)(_QWORD))v70[3];
      v96 = (void *)v70[2];
      if (v95 != v94)
      {
        v97 = v95 - 18;
        v98 = v95 - 18;
        do
        {
          v99 = *v98;
          v98 -= 18;
          (*v99)(v97);
          v66 = v97 == v94;
          v97 = v98;
        }
        while (!v66);
        v96 = (void *)v70[2];
      }
      v70[3] = v94;
      operator delete(v96);
    }
    MEMORY[0x212BC6398](v70, 0x1030C40380150A2);
  }
LABEL_108:
  v100 = *(_QWORD *)(v220 + 400) >> v31;
  *(_QWORD *)(a1 + 624) = v100;
  v101 = *(_QWORD *)(v220 + 408) >> v31;
  *(_QWORD *)(a1 + 632) = v101;
  v219 = *(_DWORD *)(v220 + 4) != 1;
  v102 = *(unsigned __int8 *)(a1 + 17);
  v103 = *(unsigned __int8 *)(a1 + 16);
  v104 = *(double *)(a1 + 32);
  v105 = *(_DWORD *)(a1 + 20);
  v106 = *(_DWORD *)(a1 + 24);
  v107 = *(_DWORD *)(a1 + 200);
  v108 = *(_DWORD *)(a1 + 204);
  v109 = *(_DWORD *)(a1 + 208);
  v110 = *(_QWORD *)(a1 + 184);
  v111 = *(_QWORD *)(a1 + 192);
  v112 = *(double *)(a1 + 56);
  v218 = *(_QWORD *)(a1 + 8);
  v113 = *(unsigned __int8 *)(a1 + 100);
  v114 = *(unsigned __int8 *)(a1 + 101);
  v115 = *(unsigned __int8 *)(a1 + 102);
  v116 = *(unsigned __int8 *)(a1 + 103);
  v117 = *(unsigned __int8 *)(a1 + 104);
  v118 = *(unsigned __int8 *)(a1 + 105);
  v119 = *(unsigned __int8 *)(a1 + 106);
  v120 = *(float *)(a1 + 108);
  v121 = *(float *)(a1 + 112);
  v122 = *(float *)(a1 + 116);
  v123 = *(unsigned __int8 *)(a1 + 213);
  v124 = *(unsigned __int8 *)(a1 + 214);
  v125 = *(unsigned __int8 *)(a1 + 215);
  v216 = *(_DWORD *)(a1 + 220);
  v217 = *(_DWORD *)(a1 + 216);
  if (*(char *)(a1 + 247) < 0)
  {
    v208 = *(unsigned __int8 *)(a1 + 16);
    v209 = *(unsigned __int8 *)(a1 + 17);
    v212 = *(_DWORD *)(a1 + 24);
    v213 = *(_DWORD *)(a1 + 200);
    v203 = v100;
    v210 = *(_DWORD *)(a1 + 204);
    v126 = v101;
    v211 = *(_QWORD *)(a1 + 184);
    v206 = *(unsigned __int8 *)(a1 + 102);
    v207 = *(_DWORD *)(a1 + 208);
    v127 = *(_DWORD *)(a1 + 20);
    v204 = *(unsigned __int8 *)(a1 + 104);
    v205 = *(unsigned __int8 *)(a1 + 100);
    v128 = *(unsigned __int8 *)(a1 + 101);
    v129 = *(unsigned __int8 *)(a1 + 105);
    v202 = *(unsigned __int8 *)(a1 + 106);
    sub_20E860C04(__p, *(void **)(a1 + 224), *(_QWORD *)(a1 + 232));
    v119 = v202;
    v118 = v129;
    v117 = v204;
    v113 = v205;
    v114 = v128;
    v103 = v208;
    v102 = v209;
    v105 = v127;
    v115 = v206;
    v109 = v207;
    LODWORD(v110) = v211;
    v101 = v126;
    v108 = v210;
    v100 = v203;
    v106 = v212;
    v107 = v213;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 224);
    v222 = *(_QWORD *)(a1 + 240);
  }
  HIBYTE(v201) = v118 != 0;
  LOBYTE(v201) = v117 != 0;
  HIBYTE(v200) = v116 != 0;
  BYTE2(v200) = v115 != 0;
  BYTE1(v200) = v114 != 0;
  LOBYTE(v200) = v113 != 0;
  sub_20F1410DC(&v223, v102 != 0, v219, v100, v101, v103 != 0, v105, v106, v104, v112, v120, v121, v122, (void *)__PAIR64__(v108, v107), v109, v110, v111, v218, v200,
    v201,
    v119 != 0,
    v123 != 0,
    v124 != 0,
    v125 != 0,
    v217,
    v216,
    (__int128 *)__p,
    *(_BYTE *)(a1 + 107),
    *(_BYTE *)(a1 + 248),
    *(_BYTE *)(a1 + 40));
  v130 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v223;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (SHIBYTE(v222) < 0)
    operator delete(__p[0]);
  v131 = *(_DWORD *)(a1 + 252);
  v132 = *(_BYTE *)(a1 + 17);
  v133 = *(_QWORD *)(a1 + 64);
  v135 = *(_DWORD *)(a1 + 256);
  v134 = *(_DWORD *)(a1 + 260);
  v232 = 0;
  LODWORD(v223) = v219;
  v224.i64[0] = v133;
  v224.i64[1] = __PAIR64__(v135, v131);
  *(_DWORD *)v225 = v134;
  *(_OWORD *)&v225[4] = *(_OWORD *)(a1 + 264);
  v136 = *(_OWORD *)(a1 + 328);
  v137 = *(_OWORD *)(a1 + 360);
  v230 = *(_OWORD *)(a1 + 344);
  v231 = v137;
  LODWORD(v232) = *(_DWORD *)(a1 + 376);
  v138 = *(_OWORD *)(a1 + 296);
  v226 = *(_OWORD *)(a1 + 280);
  v227 = v138;
  v139 = *(_OWORD *)(a1 + 312);
  v229 = v136;
  v228 = v139;
  v233 = v132;
  v140 = operator new();
  sub_20F413AA8(v140, (int *)&v223);
  kdebug_trace();
  v141 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 616) = v140;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  if (*(_DWORD *)(v220 + 4) == 1)
    v142 = 1;
  else
    v142 = 2;
  v144 = *(_QWORD *)(a1 + 424);
  v143 = *(_QWORD *)(a1 + 432);
  v145 = 0xAAAAAAAAAAAAAAABLL * ((v143 - v144) >> 3);
  if (v142 <= v145)
  {
    if (v142 < v145)
    {
      v146 = v144 + 24 * v142;
      if (v143 != v146)
      {
        v147 = *(_QWORD *)(a1 + 432);
        do
        {
          v149 = *(void **)(v147 - 24);
          v147 -= 24;
          v148 = v149;
          if (v149)
          {
            *(_QWORD *)(v143 - 16) = v148;
            operator delete(v148);
          }
          v143 = v147;
        }
        while (v147 != v146);
      }
      *(_QWORD *)(a1 + 432) = v146;
    }
  }
  else
  {
    sub_20F14B4A4(v214, v142 - v145);
  }
  v150 = *(_DWORD *)(a1 + 20);
  v151 = v150;
  v152 = *(_BYTE **)(a1 + 648);
  v153 = (uint64_t)(*(_QWORD *)(a1 + 664) - (_QWORD)v152) >> 2;
  if ((v150 & 0x80000000) == 0)
  {
    v154 = 4 * v150;
    if (v153 >= v150)
      goto LABEL_145;
    v155 = *(_BYTE **)(a1 + 656);
    v156 = (char *)operator new(4 * v150);
    v157 = v155 - v152;
    v158 = &v156[(v155 - v152) & 0xFFFFFFFFFFFFFFFCLL];
    v159 = v158;
    if (v155 != v152)
    {
      if ((unint64_t)(v157 - 4) < 0x2C)
      {
        v159 = &v156[(v155 - v152) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_142:
          v168 = *((_DWORD *)v155 - 1);
          v155 -= 4;
          *((_DWORD *)v159 - 1) = v168;
          v159 -= 4;
        }
        while (v155 != v152);
        goto LABEL_143;
      }
      v159 = &v156[(v155 - v152) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v155 - &v156[v157 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_142;
      v160 = v157 >> 2;
      v161 = ((unint64_t)(v157 - 4) >> 2) + 1;
      v162 = 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
      v163 = &v155[-v162];
      v159 = &v158[-v162];
      v164 = &v156[4 * v160 - 16];
      v165 = (__int128 *)(v155 - 16);
      v166 = v161 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v167 = *v165;
        *((_OWORD *)v164 - 1) = *(v165 - 1);
        *(_OWORD *)v164 = v167;
        v164 -= 32;
        v165 -= 2;
        v166 -= 8;
      }
      while (v166);
      v155 = v163;
      if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_142;
    }
LABEL_143:
    *(_QWORD *)(a1 + 648) = v159;
    *(_QWORD *)(a1 + 656) = v158;
    *(_QWORD *)(a1 + 664) = &v156[4 * v151];
    if (v152)
      operator delete(v152);
LABEL_145:
    v169 = *(_BYTE **)(a1 + 672);
    if (v151 <= (uint64_t)(*(_QWORD *)(a1 + 688) - (_QWORD)v169) >> 2)
      goto LABEL_156;
    v170 = *(_BYTE **)(a1 + 680);
    v171 = (char *)operator new(v154);
    v172 = v170 - v169;
    v173 = &v171[(v170 - v169) & 0xFFFFFFFFFFFFFFFCLL];
    v174 = v173;
    if (v170 != v169)
    {
      if ((unint64_t)(v172 - 4) < 0x2C)
      {
        v174 = &v171[(v170 - v169) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_153:
          v183 = *((_DWORD *)v170 - 1);
          v170 -= 4;
          *((_DWORD *)v174 - 1) = v183;
          v174 -= 4;
        }
        while (v170 != v169);
        goto LABEL_154;
      }
      v174 = &v171[(v170 - v169) & 0xFFFFFFFFFFFFFFFCLL];
      if (v170 - v171 - (v172 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
        goto LABEL_153;
      v175 = v172 >> 2;
      v176 = ((unint64_t)(v172 - 4) >> 2) + 1;
      v177 = 4 * (v176 & 0x7FFFFFFFFFFFFFF8);
      v178 = &v170[-v177];
      v174 = &v173[-v177];
      v179 = &v171[4 * v175 - 16];
      v180 = (__int128 *)(v170 - 16);
      v181 = v176 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v182 = *v180;
        *((_OWORD *)v179 - 1) = *(v180 - 1);
        *(_OWORD *)v179 = v182;
        v179 -= 32;
        v180 -= 2;
        v181 -= 8;
      }
      while (v181);
      v170 = v178;
      if (v176 != (v176 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_153;
    }
LABEL_154:
    *(_QWORD *)(a1 + 672) = v174;
    *(_QWORD *)(a1 + 680) = v173;
    *(_QWORD *)(a1 + 688) = &v171[4 * v151];
    if (v169)
      operator delete(v169);
LABEL_156:
    v184 = *(_BYTE **)(a1 + 696);
    if (v151 <= (uint64_t)(*(_QWORD *)(a1 + 712) - (_QWORD)v184) >> 2)
      return a1;
    v185 = *(_BYTE **)(a1 + 704);
    v186 = (char *)operator new(v154);
    v187 = v185 - v184;
    v188 = &v186[(v185 - v184) & 0xFFFFFFFFFFFFFFFCLL];
    v189 = v188;
    if (v185 == v184)
      goto LABEL_165;
    if ((unint64_t)(v187 - 4) >= 0x2C)
    {
      v189 = &v186[(v185 - v184) & 0xFFFFFFFFFFFFFFFCLL];
      if (v185 - v186 - (v187 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v190 = v187 >> 2;
        v191 = ((unint64_t)(v187 - 4) >> 2) + 1;
        v192 = 4 * (v191 & 0x7FFFFFFFFFFFFFF8);
        v193 = &v185[-v192];
        v189 = &v188[-v192];
        v194 = &v186[4 * v190 - 16];
        v195 = (__int128 *)(v185 - 16);
        v196 = v191 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v197 = *v195;
          *((_OWORD *)v194 - 1) = *(v195 - 1);
          *(_OWORD *)v194 = v197;
          v194 -= 32;
          v195 -= 2;
          v196 -= 8;
        }
        while (v196);
        v185 = v193;
        if (v191 == (v191 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_165:
          *(_QWORD *)(a1 + 696) = v189;
          *(_QWORD *)(a1 + 704) = v188;
          *(_QWORD *)(a1 + 712) = &v186[4 * v151];
          if (v184)
            operator delete(v184);
          return a1;
        }
      }
    }
    else
    {
      v189 = &v186[(v185 - v184) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v198 = *((_DWORD *)v185 - 1);
      v185 -= 4;
      *((_DWORD *)v189 - 1) = v198;
      v189 -= 4;
    }
    while (v185 != v184);
    goto LABEL_165;
  }
  if (v153 < v150 || v150 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 672)) >> 2))
    sub_20EABADD4();
  if (v150 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 712) - *(_QWORD *)(a1 + 696)) >> 2))
    sub_20EABADD4();
  return a1;
}

void sub_20F144CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,void **a26,_QWORD *a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;
  void *v43;

  v43 = *a26;
  if (*a26)
  {
    *(_QWORD *)(v40 + 704) = v43;
    operator delete(v43);
  }
  sub_20E9AA8C8(a28);
  sub_20ED294B4(a25);
  sub_20ED294B4(a27);
  *(_QWORD *)(v41 - 152) = a30;
  sub_20ED295D8((void ***)(v41 - 152));
  sub_20E9DD680(a29);
  sub_20E869D08(v40);
  _Unwind_Resume(a1);
}

void sub_20F144E28(uint64_t a1, void ***a2, _OWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t *a14)
{
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  void *v33;
  float32x2_t *v34;
  uint64_t v35;
  float64x2_t **v36;
  double **v37;
  _QWORD *v38;
  uint64_t v39;
  float64x2_t v40;
  unint64_t v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  float64x2_t *v50;
  float64x2_t *v51;
  double v52;
  double *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  double *v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  _OWORD *v68;
  double *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  void **v73;
  unint64_t v74;
  char ***v75;
  char **v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  char **v87;
  _BYTE *v88;
  uint64_t v89;
  char **v90;
  _BYTE *v91;
  _BYTE *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char **v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t **v112;
  uint64_t **v113;
  uint64_t *v114;
  int v115;
  _DWORD *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  _BYTE *v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t **v137;
  uint64_t v138;
  int v139;
  _OWORD *v140;
  uint64_t *v141;
  _OWORD *v142;
  _OWORD *v143;
  int v144;
  _OWORD *v145;
  _OWORD *v146;
  unsigned int v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t **v150;
  char ***v151;
  unint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  _BYTE *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  _OWORD *v165;
  unint64_t *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  char **v170;
  char **v171;
  void **v172;
  void **v173;
  uint64_t v174;
  __int128 v175;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  size_t v190;
  const char *v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  const char *v194;
  size_t v195;
  _BYTE *v196;
  unint64_t v197;
  uint64_t v198;
  const char *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  size_t v211;
  size_t v212;
  _OWORD *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  _QWORD *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *p_shared_owners;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  const char *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  int **v273;
  uint64_t v274;
  int v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  const char *v281;
  size_t v282;
  uint64_t v283;
  unsigned __int8 v284;
  const char *v285;
  size_t v286;
  _BYTE *v287;
  const char *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  _BYTE *v295;
  NSObject *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  size_t v300;
  std::__shared_weak_count_vtbl *v301;
  int v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  std::__shared_weak_count *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  void *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  int v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  size_t v353;
  uint64_t v354;
  unsigned __int8 v355;
  const char *v356;
  size_t v357;
  _BYTE *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _BYTE *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  NSObject *v366;
  size_t v367;
  std::__shared_weak_count_vtbl *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  std::__shared_weak_count *v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  const char *v385;
  uint64_t v386;
  int v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  void *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  BOOL v412;
  _QWORD *v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  unint64_t v418;
  int *v419;
  int *v420;
  uint64_t v421;
  char *v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  int **v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  char *v436;
  unint64_t v437;
  unint64_t v438;
  int v439;
  unsigned int v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  BOOL v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  int32x2_t *v448;
  _DWORD *v449;
  unint64_t v450;
  int32x2_t v451;
  int32x2_t v452;
  __int128 v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  _OWORD **v459;
  char **v460;
  char **v461;
  _QWORD *v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  _OWORD **v471;
  char *v472;
  uint64_t v473;
  char **v474;
  char *v475;
  uint64_t v476;
  char **v477;
  uint64_t v478;
  char **v479;
  char *v480;
  char **v481;
  char **v482;
  int v483;
  const char *v486;
  int v488;
  uint64_t v489;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  const char *v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  float64x2_t v503;
  unint64_t **v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t i;
  void **v508;
  unint64_t **v509;
  _QWORD *v510;
  float32x2_t *v511;
  _QWORD *v512;
  uint64_t v513;
  char **v514;
  const char *__src;
  int __srca;
  void *v517;
  char v518;
  char v519;
  _QWORD v520[2];
  _OWORD __dst[2];
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v524;
  const char *v525;
  int v526;
  const char *v527;
  uint64_t v528;
  std::__shared_weak_count *v529;
  uint64_t v530;
  __int128 v531;
  std::__shared_weak_count *v532;
  std::__shared_weak_count *v533;
  std::__shared_weak_count *v534;
  _QWORD v535[2];
  _BYTE v536[48];
  size_t v537;
  unint64_t v538;
  char v539;
  uint64_t v540;

  v540 = *MEMORY[0x24BDAC8D0];
  v17 = ((char *)a2[1] - (char *)*a2) >> 4;
  if (v17 != 0x6FB586FB586FB587 * ((uint64_t)(a12[1] - *a12) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 492, (uint64_t)"features.point_stores.size() == feature_samples.size()", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_637;
    }
    v17 = 0x6FB586FB586FB587 * ((uint64_t)(a12[1] - *a12) >> 3);
  }
  if (v17 != ((char *)a2[4] - (char *)a2[3]) >> 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 493, (uint64_t)"features.line_stores.size() == feature_samples.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_637:
    abort();
  }
  v493 = a1 + 424;
  if (*(_BYTE *)(a8 + 4) && *(_BYTE *)(a1 + 396) && *(_DWORD *)(a1 + 392) != *(_DWORD *)a8)
  {
    *(_BYTE *)(a1 + 396) = *(_BYTE *)(a1 + 404);
    *(_DWORD *)(a1 + 392) = *(_DWORD *)(a1 + 400);
    v18 = *(_OWORD *)(a1 + 496);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 520) = v18;
    v19 = *(_QWORD *)(a1 + 512);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 536);
    *(_QWORD *)(a1 + 536) = v19;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 544) + 40))(*(_QWORD *)(a1 + 544));
    v20 = *(_OWORD *)(a1 + 568);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(a1 + 592) = v20;
    v21 = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 608) = v21;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 616) + 40))(*(_QWORD *)(a1 + 616));
  }
  v22 = a12;
  v23 = *a12;
  if (a12[1] != *a12)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = v23 + v24;
      *(_DWORD *)v26 = a4;
      *(_OWORD *)(v26 + 8) = *a3;
      ++v25;
      v23 = *a12;
      v24 += 440;
    }
    while (v25 < 0x6FB586FB586FB587 * ((uint64_t)(a12[1] - *a12) >> 3));
  }
  v27 = a2[9];
  v28 = a2[10];
  for (i = a1; v27 != v28; v27 += 3)
  {
    if (!*((_BYTE *)v27 + 16))
    {
      LOBYTE(v531) = 0;
      BYTE8(v531) = 0;
      if (*((_BYTE *)a14 + 8))
      {
        *(_QWORD *)&v531 = *a14 + 24;
        BYTE8(v531) = 1;
      }
      v172 = *a2;
      v173 = a2[1];
      memset(v536, 0, 24);
      v174 = (char *)v173 - (char *)v172;
      if (v173 == v172)
      {
        v176 = 0;
        v175 = 0uLL;
      }
      else
      {
        if (v174 < 0)
          sub_20E867F44();
        *(_QWORD *)v536 = operator new((unint64_t)v174 >> 1);
        *(_QWORD *)&v536[8] = *(_QWORD *)v536;
        *(_QWORD *)&v536[16] = *(_QWORD *)v536 + 8 * (v174 >> 4);
        *(_QWORD *)&__dst[0] = v536;
        do
        {
          v517 = *v172;
          sub_20EA61104((void ***)__dst, &v517);
          v172 += 2;
        }
        while (v172 != v173);
        v175 = *(_OWORD *)v536;
        v176 = *(_QWORD *)&v536[16];
        v22 = a12;
      }
      *(_OWORD *)__p = v175;
      rep = v176;
      sub_20F14835C(a1, (uint64_t **)__p, a5, a6, a7, a9, a10, a11, v22, a13, (char *)&v531);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v183 = a12;
      goto LABEL_201;
    }
  }
  memset(v536, 0, 32);
  *(_DWORD *)&v536[32] = 733226668;
  kdebug_trace();
  __p[0] = 0;
  __p[1] = 0;
  rep = 0;
  v29 = a12[1] - *a12;
  if (!v29)
    goto LABEL_185;
  sub_20F14B4A4((uint64_t)__p, 0x6FB586FB586FB587 * (v29 >> 3));
  v30 = *a12;
  if (a12[1] == *a12)
  {
    *(_QWORD *)(a1 + 408) = 0;
    *(_BYTE *)(a1 + 416) = 1;
    v177 = *(char **)(a1 + 424);
    if (v177)
      goto LABEL_186;
    goto LABEL_193;
  }
  v31 = 0;
  v32 = *(double *)(a1 + 56) * *(double *)(a1 + 640);
  do
  {
    v500 = v30;
    if (v31 >= ((char *)a2[1] - (char *)*a2) >> 4)
      sub_20EDB40C4();
    v497 = v31;
    v33 = (*a2)[2 * v31];
    v34 = (float32x2_t *)*((_QWORD *)v33 + 7);
    v511 = (float32x2_t *)*((_QWORD *)v33 + 8);
    if (v34 != v511)
    {
      v35 = v30 + 440 * v497;
      v36 = (float64x2_t **)(v35 + 24);
      v508 = (void **)(v35 + 184);
      v37 = (double **)(v35 + 192);
      v38 = (_QWORD *)(v35 + 200);
      do
      {
        v40 = vcvtq_f64_f32(*v34);
        v42 = v36[1];
        v41 = (unint64_t)v36[2];
        if ((unint64_t)v42 < v41)
        {
          *v42 = v40;
          v43 = v42 + 1;
          goto LABEL_42;
        }
        v44 = *v36;
        v45 = v42 - *v36;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          sub_20E867F44();
        v47 = v41 - (_QWORD)v44;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v503 = v40;
          if (v48 >> 60)
            sub_20E877A38();
          v49 = (char *)operator new(16 * v48);
          v50 = (float64x2_t *)&v49[16 * v45];
          *v50 = v503;
          v43 = v50 + 1;
          if (v42 == v44)
            goto LABEL_40;
        }
        else
        {
          v49 = 0;
          v50 = (float64x2_t *)(16 * v45);
          v51 = (float64x2_t *)(16 * v45);
          *v51 = v40;
          v43 = v51 + 1;
          if (v42 == v44)
            goto LABEL_40;
        }
        do
        {
          v50[-1] = v42[-1];
          --v50;
          --v42;
        }
        while (v42 != v44);
        v42 = *v36;
LABEL_40:
        *v36 = v50;
        v36[1] = v43;
        v36[2] = (float64x2_t *)&v49[16 * v48];
        if (v42)
          operator delete(v42);
LABEL_42:
        v36[1] = v43;
        v52 = v32 * v34[2].f32[1];
        v53 = *v37;
        if ((unint64_t)*v37 >= *v38)
        {
          v54 = (double *)*v508;
          v55 = (char *)v53 - (_BYTE *)*v508;
          v56 = v55 >> 3;
          v57 = (v55 >> 3) + 1;
          if (v57 >> 61)
            sub_20E867F44();
          v58 = *v38 - (_QWORD)v54;
          if (v58 >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            if (v59 >> 61)
              sub_20E877A38();
            v60 = operator new(8 * v59);
            v61 = (double *)&v60[8 * v56];
            *v61 = v52;
            v39 = (uint64_t)(v61 + 1);
            v62 = (char *)v53 - (char *)v54;
            if (v53 != v54)
            {
LABEL_52:
              v63 = v62 - 8;
              if (v63 < 0x58)
              {
                a1 = i;
                goto LABEL_60;
              }
              v64 = (char *)v53 - v60 - v55;
              a1 = i;
              if (v64 < 0x20)
                goto LABEL_664;
              v65 = (v63 >> 3) + 1;
              v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
              v67 = &v53[v66 / 0xFFFFFFFFFFFFFFF8];
              v61 = (double *)((char *)v61 - v66);
              v68 = &v60[8 * v56 - 16];
              v69 = v53 - 2;
              v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *(_OWORD *)v69;
                *(v68 - 1) = *((_OWORD *)v69 - 1);
                *v68 = v71;
                v68 -= 2;
                v69 -= 4;
                v70 -= 4;
              }
              while (v70);
              v53 = v67;
              if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_664:
                do
                {
LABEL_60:
                  v72 = *((_QWORD *)v53-- - 1);
                  *((_QWORD *)v61-- - 1) = v72;
                }
                while (v53 != v54);
              }
LABEL_61:
              *v508 = v61;
              *v37 = (double *)v39;
              *v38 = &v60[8 * v59];
              if (v54)
                operator delete(v54);
              goto LABEL_24;
            }
          }
          else
          {
            v60 = 0;
            v61 = (double *)(8 * v56);
            *(double *)(8 * v56) = v52;
            v39 = 8 * v56 + 8;
            v62 = (char *)v53 - (char *)v54;
            if (v53 != v54)
              goto LABEL_52;
          }
          a1 = i;
          goto LABEL_61;
        }
        *v53 = v52;
        v39 = (uint64_t)(v53 + 1);
LABEL_24:
        *v37 = (double *)v39;
        v34 += 4;
      }
      while (v34 != v511);
    }
    v73 = a2[9];
    v74 = v497;
    if (0xAAAAAAAAAAAAAAABLL * (a2[10] - v73) <= v497)
      sub_20EDB40C4();
    v75 = (char ***)&v73[3 * v497];
    v76 = *v75;
    v77 = (*v75)[6];
    v78 = v500;
    v491 = (uint64_t)v77;
    if (*(_BYTE *)(a1 + 416))
    {
      v79 = *(_QWORD *)(a1 + 408);
      v81 = (unint64_t)v77 >= v79;
      v80 = (unint64_t)&v77[-v79];
      v81 = !v81 || v80 >= 2;
      if (!v81)
      {
        v97 = (char **)(v500 + 440 * v497 + 72);
        if (v97 != v76)
          sub_20E86811C(v97, *v76, v76[1], (v76[1] - *v76) >> 3);
        goto LABEL_173;
      }
    }
    v82 = v76[1] - *v76;
    v83 = v500 + 440 * v497;
    v84 = *(_QWORD *)(v83 + 88);
    v85 = v82 >> 3;
    v512 = (_QWORD *)(v83 + 88);
    v88 = *(_BYTE **)(v83 + 72);
    v87 = (char **)(v83 + 72);
    v86 = v88;
    if (v82 >> 3 > (unint64_t)((v84 - (uint64_t)v88) >> 3))
    {
      if (v82 < 0)
        sub_20E867F44();
      v89 = v500 + 440 * v497;
      v92 = *(_BYTE **)(v89 + 80);
      v90 = (char **)(v89 + 80);
      v91 = v92;
      v93 = (char *)operator new(v82);
      v94 = v92 - v86;
      v95 = &v93[(v92 - v86) & 0xFFFFFFFFFFFFFFF8];
      v96 = v95;
      if (v92 == v86)
        goto LABEL_82;
      if ((unint64_t)(v94 - 8) >= 0x58)
      {
        v96 = &v93[(v91 - v86) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v91[-(v94 & 0xFFFFFFFFFFFFFFF8)] - v93) >= 0x20)
        {
          v98 = v94 >> 3;
          v99 = ((unint64_t)(v94 - 8) >> 3) + 1;
          v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
          v101 = &v91[-v100];
          v96 = &v95[-v100];
          v102 = &v93[8 * v98 - 16];
          v103 = (__int128 *)(v91 - 16);
          v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v105 = *v103;
            *((_OWORD *)v102 - 1) = *(v103 - 1);
            *(_OWORD *)v102 = v105;
            v102 -= 32;
            v103 -= 2;
            v104 -= 4;
          }
          while (v104);
          v91 = v101;
          if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_82:
            *v87 = v96;
            *v90 = v95;
            *v512 = &v93[8 * v85];
            if (v86)
              operator delete(v86);
            goto LABEL_84;
          }
        }
      }
      else
      {
        v96 = &v93[(v91 - v86) & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v106 = *((_QWORD *)v91 - 1);
        v91 -= 8;
        *((_QWORD *)v96 - 1) = v106;
        v96 -= 8;
      }
      while (v91 != v86);
      goto LABEL_82;
    }
LABEL_84:
    v509 = (unint64_t **)v87;
    *((_QWORD *)&v531 + 1) = 0;
    v532 = 0;
    *(_QWORD *)&v531 = (char *)&v531 + 8;
    v107 = *(_QWORD *)(a1 + 424);
    v108 = *(_QWORD *)(v107 + 24 * v497);
    if (*(_QWORD *)(v107 + 24 * v497 + 8) != v108)
    {
      v109 = 0;
      v110 = 0;
      do
      {
        v111 = *(_DWORD *)(v108 + 4 * v110);
        v112 = (uint64_t **)&v531 + 1;
        v113 = (uint64_t **)&v531 + 1;
        if (*((_QWORD *)&v531 + 1))
        {
          v114 = (uint64_t *)*((_QWORD *)&v531 + 1);
          while (1)
          {
            while (1)
            {
              v112 = (uint64_t **)v114;
              v115 = *((_DWORD *)v114 + 7);
              if (v111 >= v115)
                break;
              v114 = *v112;
              v113 = v112;
              if (!*v112)
                goto LABEL_98;
            }
            if (v115 >= v111)
              break;
            v114 = v112[1];
            if (!v114)
            {
              v113 = v112 + 1;
              goto LABEL_98;
            }
          }
          v116 = v112;
        }
        else
        {
LABEL_98:
          v116 = operator new(0x28uLL);
          v116[7] = v111;
          v116[8] = 0;
          *(_QWORD *)v116 = 0;
          *((_QWORD *)v116 + 1) = 0;
          *((_QWORD *)v116 + 2) = v112;
          *v113 = (uint64_t *)v116;
          v117 = (uint64_t *)v116;
          if (*(_QWORD *)v531)
          {
            *(_QWORD *)&v531 = *(_QWORD *)v531;
            v117 = *v113;
          }
          v118 = (uint64_t *)*((_QWORD *)&v531 + 1);
          *((_BYTE *)v117 + 24) = v117 == *((uint64_t **)&v531 + 1);
          if (v117 != v118)
          {
            do
            {
              v119 = v117[2];
              if (*(_BYTE *)(v119 + 24))
                break;
              v120 = *(uint64_t **)(v119 + 16);
              v121 = *v120;
              if (*v120 == v119)
              {
                v124 = v120[1];
                if (!v124 || (v125 = *(unsigned __int8 *)(v124 + 24), v122 = (_BYTE *)(v124 + 24), v125))
                {
                  if (*(uint64_t **)v119 == v117)
                  {
                    *(_BYTE *)(v119 + 24) = 1;
                    *((_BYTE *)v120 + 24) = 0;
                    v128 = *(_QWORD *)(v119 + 8);
                    *v120 = v128;
                    if (v128)
                      goto LABEL_114;
                  }
                  else
                  {
                    v126 = *(uint64_t **)(v119 + 8);
                    v127 = *v126;
                    *(_QWORD *)(v119 + 8) = *v126;
                    if (v127)
                    {
                      *(_QWORD *)(v127 + 16) = v119;
                      v120 = *(uint64_t **)(v119 + 16);
                    }
                    v126[2] = (uint64_t)v120;
                    *(_QWORD *)(*(_QWORD *)(v119 + 16) + 8 * (**(_QWORD **)(v119 + 16) != v119)) = v126;
                    *v126 = v119;
                    *(_QWORD *)(v119 + 16) = v126;
                    v120 = (uint64_t *)v126[2];
                    v119 = *v120;
                    *((_BYTE *)v126 + 24) = 1;
                    *((_BYTE *)v120 + 24) = 0;
                    v128 = *(_QWORD *)(v119 + 8);
                    *v120 = v128;
                    if (v128)
LABEL_114:
                      *(_QWORD *)(v128 + 16) = v120;
                  }
                  *(_QWORD *)(v119 + 16) = v120[2];
                  *(_QWORD *)(v120[2] + 8 * (*(_QWORD *)v120[2] != (_QWORD)v120)) = v119;
                  *(_QWORD *)(v119 + 8) = v120;
LABEL_88:
                  v120[2] = v119;
                  break;
                }
              }
              else if (!v121 || (v123 = *(unsigned __int8 *)(v121 + 24), v122 = (_BYTE *)(v121 + 24), v123))
              {
                if (*(uint64_t **)v119 == v117)
                {
                  v130 = v117[1];
                  *(_QWORD *)v119 = v130;
                  if (v130)
                  {
                    *(_QWORD *)(v130 + 16) = v119;
                    v120 = *(uint64_t **)(v119 + 16);
                  }
                  v117[2] = (uint64_t)v120;
                  *(_QWORD *)(*(_QWORD *)(v119 + 16) + 8 * (**(_QWORD **)(v119 + 16) != v119)) = v117;
                  v117[1] = v119;
                  *(_QWORD *)(v119 + 16) = v117;
                  v120 = (uint64_t *)v117[2];
                  *((_BYTE *)v117 + 24) = 1;
                  *((_BYTE *)v120 + 24) = 0;
                  v119 = v120[1];
                  v129 = *(uint64_t **)v119;
                  v120[1] = *(_QWORD *)v119;
                  if (!v129)
                    goto LABEL_87;
                }
                else
                {
                  *(_BYTE *)(v119 + 24) = 1;
                  *((_BYTE *)v120 + 24) = 0;
                  v119 = v120[1];
                  v129 = *(uint64_t **)v119;
                  v120[1] = *(_QWORD *)v119;
                  if (!v129)
                    goto LABEL_87;
                }
                v129[2] = (uint64_t)v120;
LABEL_87:
                *(_QWORD *)(v119 + 16) = v120[2];
                *(_QWORD *)(v120[2] + 8 * (*(_QWORD *)v120[2] != (_QWORD)v120)) = v119;
                *(_QWORD *)v119 = v120;
                goto LABEL_88;
              }
              *(_BYTE *)(v119 + 24) = 1;
              v117 = v120;
              *((_BYTE *)v120 + 24) = v120 == v118;
              *v122 = 1;
            }
            while (v120 != v118);
          }
          v532 = (std::__shared_weak_count *)++v109;
          v107 = *(_QWORD *)(a1 + 424);
        }
        v116[8] = v110++;
        v108 = *(_QWORD *)(v107 + 24 * v497);
      }
      while (v110 < (*(_QWORD *)(v107 + 24 * v497 + 8) - v108) >> 2);
    }
    v131 = (*v75)[4] - (*v75)[3];
    v132 = v509;
    if (v131)
    {
      v133 = (uint64_t *)*((_QWORD *)&v531 + 1);
      if (*((_QWORD *)&v531 + 1))
      {
        v134 = 0;
        v135 = v131 >> 2;
        v136 = v500 + 440 * v497;
        v137 = (unint64_t **)(v136 + 80);
        if (v135 <= 1)
          v138 = 1;
        else
          v138 = v135;
        v504 = (unint64_t **)(v136 + 80);
LABEL_133:
        v139 = *(_DWORD *)&(*v75)[3][4 * v134];
        v140 = (__int128 *)((char *)&v531 + 8);
        v141 = v133;
        do
        {
          v142 = v141;
          v143 = v140;
          v144 = *((_DWORD *)v141 + 7);
          if (v144 >= v139)
            v140 = v141;
          else
            ++v141;
          v141 = (uint64_t *)*v141;
        }
        while (v141);
        if (v140 != (__int128 *)((char *)&v531 + 8))
        {
          v145 = v144 >= v139 ? v142 : v143;
          if (v139 >= *((_DWORD *)v145 + 7))
          {
            if (v144 >= v139)
              v146 = v142;
            else
              v146 = v143;
            v147 = *((_DWORD *)v146 + 8);
            v148 = *v137;
            if ((unint64_t)*v137 < *v512)
            {
              *v148 = v134 | ((unint64_t)v147 << 32);
              v149 = v148 + 1;
LABEL_170:
              *v137 = v149;
              goto LABEL_171;
            }
            v150 = v132;
            v151 = v75;
            v152 = *v150;
            v153 = (char *)v148 - (char *)*v150;
            v154 = v153 >> 3;
            v155 = (v153 >> 3) + 1;
            if (v155 >> 61)
              sub_20E867F44();
            v156 = *v512 - (_QWORD)v152;
            if (v156 >> 2 > v155)
              v155 = v156 >> 2;
            if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
              v157 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v157 = v155;
            if (v157)
            {
              if (v157 >> 61)
                sub_20E877A38();
              v158 = operator new(8 * v157);
            }
            else
            {
              v158 = 0;
            }
            v159 = (unint64_t *)&v158[8 * v154];
            *v159 = v134 | ((unint64_t)v147 << 32);
            v149 = v159 + 1;
            if (v148 == v152)
            {
              v75 = v151;
              v132 = v509;
            }
            else
            {
              v160 = (char *)v148 - (char *)v152 - 8;
              if (v160 < 0x58)
              {
                v75 = v151;
                v132 = v509;
                goto LABEL_166;
              }
              v161 = (char *)v148 - v158 - v153;
              v75 = v151;
              v132 = v509;
              if (v161 < 0x20)
                goto LABEL_665;
              v162 = (v160 >> 3) + 1;
              v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
              v164 = &v148[v163 / 0xFFFFFFFFFFFFFFF8];
              v159 = (unint64_t *)((char *)v159 - v163);
              v165 = &v158[8 * v154 - 16];
              v166 = v148 - 2;
              v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v168 = *(_OWORD *)v166;
                *(v165 - 1) = *((_OWORD *)v166 - 1);
                *v165 = v168;
                v165 -= 2;
                v166 -= 4;
                v167 -= 4;
              }
              while (v167);
              v148 = v164;
              if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_665:
                do
                {
LABEL_166:
                  v169 = *--v148;
                  *--v159 = v169;
                }
                while (v148 != v152);
              }
              v148 = *v132;
            }
            *v132 = v159;
            v137 = v504;
            *v504 = v149;
            *v512 = &v158[8 * v157];
            v74 = v497;
            if (v148)
              operator delete(v148);
            goto LABEL_170;
          }
        }
LABEL_171:
        while (++v134 != v138)
        {
          v133 = (uint64_t *)*((_QWORD *)&v531 + 1);
          if (*((_QWORD *)&v531 + 1))
            goto LABEL_133;
        }
      }
    }
    v78 = v500;
    kdebug_trace();
    sub_20E9BCAA8(*((_QWORD **)&v531 + 1));
    a1 = i;
LABEL_173:
    v170 = (char **)(v78 + 440 * v74 + 128);
    if (v170 != *v75 + 3)
      sub_20F0E80A4((_QWORD *)(v78 + 440 * v74 + 128), (*v75)[3], (*v75)[4], ((*v75)[4] - (*v75)[3]) >> 2);
    v171 = (char **)((char *)__p[0] + 24 * v74);
    if (v171 != v170)
      sub_20F0E80A4(v171, *v170, *(char **)(v78 + 440 * v74 + 136), (uint64_t)(*(_QWORD *)(v78 + 440 * v74 + 136) - (_QWORD)*v170) >> 2);
    v31 = v74 + 1;
    v30 = *a12;
  }
  while (v31 < 0x6FB586FB586FB587 * ((uint64_t)(a12[1] - *a12) >> 3));
  v29 = v491;
LABEL_185:
  *(_QWORD *)(a1 + 408) = v29;
  *(_BYTE *)(a1 + 416) = 1;
  v177 = *(char **)(a1 + 424);
  if (v177)
  {
LABEL_186:
    v178 = *(char **)(a1 + 432);
    v179 = v177;
    if (v178 != v177)
    {
      v180 = *(char **)(a1 + 432);
      do
      {
        v182 = (void *)*((_QWORD *)v180 - 3);
        v180 -= 24;
        v181 = v182;
        if (v182)
        {
          *((_QWORD *)v178 - 2) = v181;
          operator delete(v181);
        }
        v178 = v180;
      }
      while (v180 != v177);
      v179 = *(char **)v493;
    }
    *(_QWORD *)(a1 + 432) = v177;
    operator delete(v179);
    *(_QWORD *)v493 = 0;
    *(_QWORD *)(v493 + 8) = 0;
    *(_QWORD *)(v493 + 16) = 0;
  }
LABEL_193:
  *(_OWORD *)v493 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 440) = rep;
  kdebug_trace();
  v183 = a12;
  if (*((_BYTE *)a14 + 8))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 519, (uint64_t)"", 0, (uint64_t)"HW feature matching for duplicated streams is not supported.", 60, (void (*)(void **))sub_21023DDB0);
    abort();
  }
LABEL_201:
  v520[0] = a2;
  v520[1] = v183;
  sub_20F143DC4(&v530);
  if (**(int **)(v530 + 56) > 3)
    goto LABEL_329;
  v184 = *(unsigned __int8 *)(v530 + 72);
  v185 = sub_20E8C31DC(v530, "OSLogSurrogateAppender", 1, 0);
  v186 = v185;
  if (!v184 && !v185)
    goto LABEL_329;
  __p[0] = &v530;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v524 = 3;
  v525 = "unknown file";
  v526 = 559;
  v528 = 0;
  v529 = 0;
  v527 = "unknown function";
  sub_20F14AF60(&v517, v520);
  if (v519 >= 0)
    v187 = (const char *)&v517;
  else
    v187 = (const char *)v517;
  v188 = *(_QWORD *)__p[0];
  v189 = *(_QWORD *)__p[0] + 16;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v191 = *(const char **)(v188 + 16);
    v190 = *(_QWORD *)(v188 + 24);
    v193 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v193 & 1) == 0)
    {
LABEL_639:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v536);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v536);
        if (v536[24] && (v536[23] & 0x80000000) != 0)
          operator delete(*(void **)v536);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v190 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
    v191 = (const char *)(*(_QWORD *)__p[0] + 16);
    v192 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v192 & 1) == 0)
      goto LABEL_639;
  }
  if (byte_254A4A4F8[23] >= 0)
    v194 = byte_254A4A4F8;
  else
    v194 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v195 = byte_254A4A4F8[23];
  else
    v195 = *(_QWORD *)&byte_254A4A4F8[8];
  __src = v191;
  *(_QWORD *)v536 = os_log_create(v194, v191);
  v196 = &v536[8];
  if (v195 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v195 >= 0x17)
  {
    v197 = v186;
    v198 = v188;
    v199 = v187;
    v200 = v184;
    v201 = v189;
    v202 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17)
      v202 = v195 | 7;
    v203 = v202 + 1;
    v196 = operator new(v202 + 1);
    *(_QWORD *)&v536[16] = v195;
    *(_QWORD *)&v536[24] = v203 | 0x8000000000000000;
    *(_QWORD *)&v536[8] = v196;
    v189 = v201;
    v184 = v200;
    v187 = v199;
    v188 = v198;
    v186 = v197;
    goto LABEL_224;
  }
  v536[31] = v195;
  if (v195)
LABEL_224:
    memmove(v196, v194, v195);
  v196[v195] = 0;
  v536[32] = 1;
  v204 = &v536[40];
  if (v190 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a1 = i;
  if (v190 >= 0x17)
  {
    v206 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17)
      v206 = v190 | 7;
    v207 = v206 + 1;
    v204 = operator new(v206 + 1);
    v537 = v190;
    v538 = v207 | 0x8000000000000000;
    *(_QWORD *)&v536[40] = v204;
  }
  else
  {
    HIBYTE(v538) = v190;
    if (!v190)
    {
      v536[40] = 0;
      v539 = 1;
      v205 = *(NSObject **)v536;
      if ((SHIBYTE(v538) & 0x80000000) == 0)
        goto LABEL_229;
LABEL_235:
      operator delete(*(void **)&v536[40]);
      if (v536[32])
        goto LABEL_236;
      goto LABEL_238;
    }
  }
  memmove(v204, __src, v190);
  v204[v190] = 0;
  v539 = 1;
  v205 = *(NSObject **)v536;
  if (SHIBYTE(v538) < 0)
    goto LABEL_235;
LABEL_229:
  if (v536[32])
  {
LABEL_236:
    if ((v536[31] & 0x80000000) != 0)
      operator delete(*(void **)&v536[8]);
  }
LABEL_238:
  if (*(_QWORD *)v536)
    os_release(*(void **)v536);
  if (v186 && *(_QWORD *)(v186 + 24))
  {
    v208 = _os_log_pack_size();
    v209 = (std::__shared_weak_count_vtbl *)operator new(v208, (std::align_val_t)8uLL);
    v210 = (std::__shared_weak_count *)operator new();
    v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v209;
    *(_QWORD *)&v531 = v209;
    *((_QWORD *)&v531 + 1) = v209;
    v533 = 0;
    v534 = 0;
    v532 = v210;
    v211 = strlen(v187);
    if (v211 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v212 = v211;
    if (v211 >= 0x17)
    {
      v215 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v211 | 7) != 0x17)
        v215 = v211 | 7;
      v216 = v215 + 1;
      v213 = operator new(v215 + 1);
      *((_QWORD *)&__dst[0] + 1) = v212;
      *(_QWORD *)&__dst[1] = v216 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v213;
    }
    else
    {
      BYTE7(__dst[1]) = v211;
      v213 = __dst;
      if (!v211)
        goto LABEL_252;
    }
    memcpy(v213, v187, v212);
LABEL_252:
    *((_BYTE *)v213 + v212) = 0;
    v535[0] = *((_QWORD *)&__dst[0] + 1);
    v217 = *(_QWORD *)&__dst[0];
    *(_QWORD *)((char *)v535 + 7) = *(_QWORD *)((char *)__dst + 15);
    v218 = BYTE7(__dst[1]);
    v219 = operator new(0x38uLL);
    v219[1] = 0;
    v219[2] = 0;
    v219[3] = off_24C9ABC20;
    *v219 = &off_24C9ABBD0;
    v220 = v535[0];
    v219[4] = v217;
    v219[5] = v220;
    *(_QWORD *)((char *)v219 + 47) = *(_QWORD *)((char *)v535 + 7);
    *((_BYTE *)v219 + 55) = v218;
    v535[0] = 0;
    *(_QWORD *)((char *)v535 + 7) = 0;
    v221 = v534;
    v533 = (std::__shared_weak_count *)(v219 + 3);
    v534 = (std::__shared_weak_count *)v219;
    if (v221)
    {
      p_shared_owners = (unint64_t *)&v221->__shared_owners_;
      do
        v223 = __ldaxr(p_shared_owners);
      while (__stlxr(v223 - 1, p_shared_owners));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    *(_OWORD *)v536 = v531;
    v224 = v533;
    *(_QWORD *)&v536[16] = v532;
    if (v532)
    {
      v225 = (unint64_t *)&v532->__shared_owners_;
      do
        v226 = __ldxr(v225);
      while (__stxr(v226 + 1, v225));
    }
    v227 = v534;
    *(_QWORD *)&v536[24] = v224;
    *(_QWORD *)&v536[32] = v534;
    if (v534)
    {
      v228 = (unint64_t *)&v534->__shared_owners_;
      do
        v229 = __ldxr(v228);
      while (__stxr(v229 + 1, v228));
      *(_QWORD *)&v536[40] = v224;
      do
        v230 = __ldaxr(v228);
      while (__stlxr(v230 - 1, v228));
      if (!v230)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    else
    {
      *(_QWORD *)&v536[40] = v224;
    }
    v231 = v532;
    if (v532)
    {
      v232 = (unint64_t *)&v532->__shared_owners_;
      do
        v233 = __ldaxr(v232);
      while (__stlxr(v233 - 1, v232));
      if (!v233)
      {
        ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
        std::__shared_weak_count::__release_weak(v231);
      }
    }
    v234 = *(_QWORD *)v536;
    if (*(char *)(*(_QWORD *)&v536[40] + 31) >= 0)
      v235 = *(_QWORD *)&v536[40] + 8;
    else
      v235 = *(_QWORD *)(*(_QWORD *)&v536[40] + 8);
    v236 = _os_log_pack_fill();
    *(_DWORD *)v236 = 136315138;
    *(_QWORD *)(v236 + 4) = v235;
    v237 = operator new();
    v238 = *(unsigned __int8 *)(v188 + 39);
    if ((v238 & 0x80u) == 0)
      v239 = v189;
    else
      v239 = *(_QWORD *)(v188 + 16);
    if ((v238 & 0x80u) != 0)
      v238 = *(_QWORD *)(v188 + 24);
    *(_QWORD *)v237 = v234;
    *(_OWORD *)(v237 + 8) = *(_OWORD *)&v536[8];
    *(_QWORD *)&v536[8] = 0;
    *(_QWORD *)&v536[16] = 0;
    *(_OWORD *)(v237 + 24) = *(_OWORD *)&v536[24];
    *(_QWORD *)&v536[24] = 0;
    *(_QWORD *)&v536[32] = 0;
    *(_QWORD *)(v237 + 40) = v239;
    *(_QWORD *)(v237 + 48) = v238;
    *(_BYTE *)(v237 + 56) = 1;
    *(_QWORD *)&__dst[0] = 0;
    *(_QWORD *)&v531 = v237;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v186 + 24) + 40))(*(_QWORD *)(v186 + 24), &v531);
    v240 = v531;
    *(_QWORD *)&v531 = 0;
    if (v240)
    {
      v241 = *(std::__shared_weak_count **)(v240 + 32);
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v244 = *(std::__shared_weak_count **)(v240 + 16);
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      MEMORY[0x212BC6398](v240, 0x10F0C40B62ED6C6);
      v247 = *(_QWORD *)&__dst[0];
      *(_QWORD *)&__dst[0] = 0;
      if (v247)
      {
        v248 = *(std::__shared_weak_count **)(v247 + 32);
        if (v248)
        {
          v249 = (unint64_t *)&v248->__shared_owners_;
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        v251 = *(std::__shared_weak_count **)(v247 + 16);
        if (v251)
        {
          v252 = (unint64_t *)&v251->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
      }
    }
    v254 = *(std::__shared_weak_count **)&v536[32];
    if (*(_QWORD *)&v536[32])
    {
      v255 = (unint64_t *)(*(_QWORD *)&v536[32] + 8);
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 - 1, v255));
      if (!v256)
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        std::__shared_weak_count::__release_weak(v254);
      }
    }
    v257 = *(std::__shared_weak_count **)&v536[16];
    if (*(_QWORD *)&v536[16])
    {
      v258 = (unint64_t *)(*(_QWORD *)&v536[16] + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
  }
  else
  {
    os_log_type_enabled(v205, OS_LOG_TYPE_INFO);
    *(_DWORD *)v536 = 136315138;
    *(_QWORD *)&v536[4] = v187;
    v483 = 12;
    v214 = (void *)_os_log_send_and_compose_impl();
    if (v214)
      free(v214);
  }
  if (v519 < 0)
  {
    operator delete(v517);
    if (!v184)
      goto LABEL_324;
  }
  else if (!v184)
  {
    goto LABEL_324;
  }
  sub_20F14AF60(v536, v520);
  if (v536[23] >= 0)
    v260 = v536;
  else
    v260 = *(const char **)v536;
  sub_20E8C003C((uint64_t)__p, "[VFusionTracker] Point %s", v260);
  if ((v536[23] & 0x80000000) != 0)
    operator delete(*(void **)v536);
  sub_20E863570((uint64_t)__p);
LABEL_324:
  sub_20E863570((uint64_t)__p);
  v261 = v529;
  if (v529)
  {
    v262 = (unint64_t *)&v529->__shared_owners_;
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }
LABEL_329:
  __srca = *((unsigned __int8 *)a14 + 8);
  v264 = *a14;
  v265 = (uint64_t *)a2[3];
  v266 = (uint64_t *)a2[4];
  memset(v536, 0, 24);
  v267 = (char *)v266 - (char *)v265;
  if (v266 == v265)
  {
    memset(__dst, 0, 24);
    LOBYTE(v517) = 0;
    v518 = 0;
    if (__srca)
      goto LABEL_334;
  }
  else
  {
    if (v267 < 0)
      sub_20E867F44();
    *(_QWORD *)v536 = operator new((unint64_t)v267 >> 1);
    *(_QWORD *)&v536[8] = *(_QWORD *)v536;
    *(_QWORD *)&v536[16] = *(_QWORD *)v536 + 8 * (v267 >> 4);
    __p[0] = v536;
    do
    {
      sub_20F14B67C((char ***)__p, *v265);
      v265 += 2;
    }
    while (v265 != v266);
    __dst[0] = *(_OWORD *)v536;
    *(_QWORD *)&__dst[1] = *(_QWORD *)&v536[16];
    LOBYTE(v517) = 0;
    v518 = 0;
    if (__srca)
    {
LABEL_334:
      v517 = (void *)(v264 + 280);
      v518 = 1;
    }
  }
  (*(void (**)(_QWORD, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, int))(**(_QWORD **)(a1 + 616) + 32))(*(_QWORD *)(a1 + 616), __dst, a5, a6, a7, a9, a10, a11, &v517, v483);
  if ((*(_BYTE *)(a13 + 32) != 0) == *((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0] < 0x10uLL
  {
    goto LABEL_624;
  }
  v268 = i;
  v269 = (_QWORD *)(i + 648);
  *(_QWORD *)(i + 656) = *(_QWORD *)(i + 648);
  *(_QWORD *)(i + 680) = *(_QWORD *)(i + 672);
  *(_QWORD *)(i + 704) = *(_QWORD *)(i + 696);
  if (__srca)
  {
    if (v269 != (_QWORD *)(v264 + 336))
      sub_20F0E80A4(v269, *(char **)(v264 + 336), *(char **)(v264 + 344), (uint64_t)(*(_QWORD *)(v264 + 344) - *(_QWORD *)(v264 + 336)) >> 2);
  }
  else
  {
    v270 = *(_QWORD *)(i + 552);
    v271 = *(uint64_t **)(i + 568);
    v272 = *(_QWORD *)(i + 616);
    v273 = *(int ***)(v272 + 32);
    v274 = (*(_QWORD *)(*(_QWORD *)(v272 + 8) + 8) - **(_QWORD **)(v272 + 8)) >> 5;
    v536[0] = 0;
    v536[8] = 0;
    sub_20F1405DC(v270, v269, v271, v273, v274, (uint64_t)v536);
  }
  sub_20F143DC4(&v530);
  if (**(int **)(v530 + 56) > 3)
    goto LABEL_440;
  v275 = *(unsigned __int8 *)(v530 + 72);
  v276 = sub_20E8C31DC(v530, "OSLogSurrogateAppender", 1, 0);
  v277 = v276;
  if (!v275 && !v276)
    goto LABEL_440;
  v505 = v264;
  __p[0] = &v530;
  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v524 = 3;
  v525 = "unknown file";
  v526 = 714;
  v528 = 0;
  v529 = 0;
  v527 = "unknown function";
  v278 = **(uint64_t ***)&__dst[0];
  v279 = *(uint64_t **)(*(_QWORD *)(i + 616) + 32);
  v280 = *(_QWORD *)__p[0];
  v281 = (const char *)(*(_QWORD *)__p[0] + 16);
  v495 = v281;
  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
  {
    v281 = *(const char **)(v280 + 16);
    v282 = *(_QWORD *)(v280 + 24);
  }
  else
  {
    v282 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
  }
  v513 = *v278;
  v283 = v279[1];
  v498 = v278[1];
  v501 = *v279;
  v284 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v284 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v536);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v536);
    if (v536[24] && (v536[23] & 0x80000000) != 0)
      operator delete(*(void **)v536);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v285 = byte_254A4A4F8;
  else
    v285 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v286 = byte_254A4A4F8[23];
  else
    v286 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v536 = os_log_create(v285, v281);
  v287 = &v536[8];
  if (v286 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v286 >= 0x17)
  {
    v288 = v281;
    v289 = v277;
    v290 = v280;
    v291 = v283;
    v292 = v275;
    v293 = (v286 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v286 | 7) != 0x17)
      v293 = v286 | 7;
    v294 = v293 + 1;
    v287 = operator new(v293 + 1);
    *(_QWORD *)&v536[16] = v286;
    *(_QWORD *)&v536[24] = v294 | 0x8000000000000000;
    *(_QWORD *)&v536[8] = v287;
    v275 = v292;
    v283 = v291;
    v280 = v290;
    v277 = v289;
    v281 = v288;
    goto LABEL_363;
  }
  v536[31] = v286;
  if (v286)
LABEL_363:
    memmove(v287, v285, v286);
  v287[v286] = 0;
  v536[32] = 1;
  v295 = &v536[40];
  if (v282 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v268 = i;
  if (v282 >= 0x17)
  {
    v297 = (v282 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v282 | 7) != 0x17)
      v297 = v282 | 7;
    v298 = v297 + 1;
    v295 = operator new(v297 + 1);
    v537 = v282;
    v538 = v298 | 0x8000000000000000;
    *(_QWORD *)&v536[40] = v295;
  }
  else
  {
    HIBYTE(v538) = v282;
    if (!v282)
    {
      v536[40] = 0;
      v539 = 1;
      v296 = *(NSObject **)v536;
      if ((SHIBYTE(v538) & 0x80000000) == 0)
        goto LABEL_368;
LABEL_374:
      operator delete(*(void **)&v536[40]);
      v269 = (_QWORD *)(i + 648);
      v264 = v505;
      if (v536[32])
        goto LABEL_375;
      goto LABEL_377;
    }
  }
  memmove(v295, v281, v282);
  v295[v282] = 0;
  v539 = 1;
  v296 = *(NSObject **)v536;
  if (SHIBYTE(v538) < 0)
    goto LABEL_374;
LABEL_368:
  v269 = (_QWORD *)(i + 648);
  v264 = v505;
  if (v536[32])
  {
LABEL_375:
    if ((v536[31] & 0x80000000) != 0)
      operator delete(*(void **)&v536[8]);
  }
LABEL_377:
  if (*(_QWORD *)v536)
    os_release(*(void **)v536);
  v299 = (v283 - v501) >> 3;
  if (v277 && *(_QWORD *)(v277 + 24))
  {
    v300 = _os_log_pack_size();
    v301 = (std::__shared_weak_count_vtbl *)operator new(v300, (std::align_val_t)8uLL);
    v302 = v275;
    v303 = (std::__shared_weak_count *)operator new();
    v303->__shared_owners_ = 0;
    v304 = (unint64_t *)&v303->__shared_owners_;
    v303->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v303->__shared_weak_owners_ = 0;
    v303[1].__vftable = v301;
    *(_QWORD *)&v531 = v301;
    *((_QWORD *)&v531 + 1) = v301;
    v533 = 0;
    v534 = 0;
    v532 = v303;
    v305 = (std::__shared_weak_count *)operator new(0x40uLL);
    v306 = v305;
    v305->__shared_owners_ = 0;
    v307 = (unint64_t *)&v305->__shared_owners_;
    v305->__shared_weak_owners_ = 0;
    v305[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9F9148;
    v305->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F90F8;
    v305[1].__shared_owners_ = 1701734764;
    HIBYTE(v305[2].__vftable) = 4;
    v533 = v305 + 1;
    v534 = v305;
    *(_QWORD *)v536 = v301;
    *(_QWORD *)&v536[8] = v301;
    *(_QWORD *)&v536[16] = v303;
    do
      v308 = __ldxr(v304);
    while (__stxr(v308 + 1, v304));
    *(_QWORD *)&v536[24] = v305 + 1;
    *(_QWORD *)&v536[32] = v305;
    do
      v309 = __ldxr(v307);
    while (__stxr(v309 + 1, v307));
    *(_QWORD *)&v536[40] = v305 + 1;
    v275 = v302;
    do
      v310 = __ldaxr(v307);
    while (__stlxr(v310 - 1, v307));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v306);
    }
    v311 = v532;
    if (v532)
    {
      v312 = (unint64_t *)&v532->__shared_owners_;
      do
        v313 = __ldaxr(v312);
      while (__stlxr(v313 - 1, v312));
      if (!v313)
      {
        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
        std::__shared_weak_count::__release_weak(v311);
      }
    }
    v314 = *(_QWORD *)v536;
    if (*(char *)(*(_QWORD *)&v536[40] + 31) >= 0)
      v315 = *(_QWORD *)&v536[40] + 8;
    else
      v315 = *(_QWORD *)(*(_QWORD *)&v536[40] + 8);
    v316 = _os_log_pack_fill();
    *(_DWORD *)v316 = 136315650;
    *(_QWORD *)(v316 + 4) = v315;
    *(_WORD *)(v316 + 12) = 2048;
    *(_QWORD *)(v316 + 14) = 0xAAAAAAAAAAAAAAABLL * ((v498 - v513) >> 3);
    *(_WORD *)(v316 + 22) = 2048;
    *(_QWORD *)(v316 + 24) = v299;
    v317 = operator new();
    v318 = *(unsigned __int8 *)(v280 + 39);
    v319 = v495;
    if ((v318 & 0x80u) != 0)
    {
      v319 = *(const char **)(v280 + 16);
      v318 = *(_QWORD *)(v280 + 24);
    }
    *(_QWORD *)v317 = v314;
    *(_OWORD *)(v317 + 8) = *(_OWORD *)&v536[8];
    *(_QWORD *)&v536[8] = 0;
    *(_QWORD *)&v536[16] = 0;
    *(_OWORD *)(v317 + 24) = *(_OWORD *)&v536[24];
    *(_QWORD *)&v536[24] = 0;
    *(_QWORD *)&v536[32] = 0;
    *(_QWORD *)(v317 + 40) = v319;
    *(_QWORD *)(v317 + 48) = v318;
    *(_BYTE *)(v317 + 56) = 1;
    v535[0] = 0;
    *(_QWORD *)&v531 = v317;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v277 + 24) + 40))(*(_QWORD *)(v277 + 24), &v531);
    v269 = (_QWORD *)(i + 648);
    v320 = v531;
    *(_QWORD *)&v531 = 0;
    v268 = i;
    v264 = v505;
    if (v320)
    {
      v321 = *(std::__shared_weak_count **)(v320 + 32);
      if (v321)
      {
        v322 = (unint64_t *)&v321->__shared_owners_;
        do
          v323 = __ldaxr(v322);
        while (__stlxr(v323 - 1, v322));
        if (!v323)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
        }
      }
      v324 = *(std::__shared_weak_count **)(v320 + 16);
      if (v324)
      {
        v325 = (unint64_t *)&v324->__shared_owners_;
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 - 1, v325));
        if (!v326)
        {
          ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
          std::__shared_weak_count::__release_weak(v324);
        }
      }
      MEMORY[0x212BC6398](v320, 0x10F0C40B62ED6C6);
      v327 = v535[0];
      v535[0] = 0;
      if (v327)
      {
        v328 = *(std::__shared_weak_count **)(v327 + 32);
        if (v328)
        {
          v329 = (unint64_t *)&v328->__shared_owners_;
          do
            v330 = __ldaxr(v329);
          while (__stlxr(v330 - 1, v329));
          if (!v330)
          {
            ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
            std::__shared_weak_count::__release_weak(v328);
          }
        }
        v331 = *(std::__shared_weak_count **)(v327 + 16);
        if (v331)
        {
          v332 = (unint64_t *)&v331->__shared_owners_;
          do
            v333 = __ldaxr(v332);
          while (__stlxr(v333 - 1, v332));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
            std::__shared_weak_count::__release_weak(v331);
          }
        }
        MEMORY[0x212BC6398](v327, 0x10F0C40B62ED6C6);
      }
    }
    v334 = *(std::__shared_weak_count **)&v536[32];
    if (*(_QWORD *)&v536[32])
    {
      v335 = (unint64_t *)(*(_QWORD *)&v536[32] + 8);
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 - 1, v335));
      if (!v336)
      {
        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
        std::__shared_weak_count::__release_weak(v334);
      }
    }
    v337 = *(std::__shared_weak_count **)&v536[16];
    if (*(_QWORD *)&v536[16])
    {
      v338 = (unint64_t *)(*(_QWORD *)&v536[16] + 8);
      do
        v339 = __ldaxr(v338);
      while (__stlxr(v339 - 1, v338));
      if (!v339)
      {
        ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
        std::__shared_weak_count::__release_weak(v337);
      }
    }
  }
  else
  {
    os_log_type_enabled(v296, OS_LOG_TYPE_INFO);
    *(_DWORD *)v536 = 136315650;
    *(_QWORD *)&v536[4] = "line";
    *(_WORD *)&v536[12] = 2048;
    *(_QWORD *)&v536[14] = 0xAAAAAAAAAAAAAAABLL * ((v498 - v513) >> 3);
    *(_WORD *)&v536[22] = 2048;
    *(_QWORD *)&v536[24] = v299;
    v340 = (void *)_os_log_send_and_compose_impl();
    if (v340)
      free(v340);
  }
  if (v275)
  {
    sub_20E8C003C((uint64_t)__p, "[VFusionTracker] Primary: %s: %zu features, %zu matches", "line", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(**(_QWORD **)&__dst[0] + 8) - ***(_QWORD ***)&__dst[0]) >> 3), (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v268 + 616) + 32) + 8)- **(_QWORD **)(*(_QWORD *)(v268 + 616) + 32)) >> 3);
    sub_20E863570((uint64_t)__p);
  }
  sub_20E863570((uint64_t)__p);
  v341 = v529;
  if (!v529)
    goto LABEL_440;
  v342 = (unint64_t *)&v529->__shared_owners_;
  do
    v343 = __ldaxr(v342);
  while (__stlxr(v343 - 1, v342));
  if (!v343)
  {
    ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
    std::__shared_weak_count::__release_weak(v341);
    v514 = (char **)(v268 + 696);
    if (*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0] < 9uLL)
      goto LABEL_596;
  }
  else
  {
LABEL_440:
    v514 = (char **)(v268 + 696);
    if (*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0] < 9uLL)
      goto LABEL_596;
  }
  sub_20F143DC4(&v530);
  if (**(int **)(v530 + 56) <= 3)
  {
    v344 = *(unsigned __int8 *)(v530 + 72);
    v345 = sub_20E8C31DC(v530, "OSLogSurrogateAppender", 1, 0);
    v346 = v345;
    if (v344 || v345)
    {
      v488 = v344;
      v506 = v264;
      v510 = v269;
      __p[0] = &v530;
      __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v524 = 3;
      v525 = "unknown file";
      v526 = 725;
      v528 = 0;
      v529 = 0;
      v527 = "unknown function";
      v347 = *(uint64_t **)(*(_QWORD *)&__dst[0] + 8);
      v348 = *(_QWORD *)(v268 + 616);
      v349 = *(_QWORD *)(v348 + 56);
      v350 = *(_QWORD *)(v348 + 32);
      v351 = *(_QWORD *)__p[0];
      v352 = (const char *)(*(_QWORD *)__p[0] + 16);
      v486 = v352;
      if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
      {
        v352 = *(const char **)(v351 + 16);
        v353 = *(_QWORD *)(v351 + 24);
      }
      else
      {
        v353 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      }
      v489 = v347[1];
      v499 = *v347;
      v502 = *(_QWORD *)(v349 + 40);
      v496 = *(_QWORD *)(v349 + 32);
      v354 = *(_QWORD *)(v350 + 24);
      v492 = *(_QWORD *)(v350 + 32);
      v355 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v355 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v536);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v536);
        if (v536[24] && (v536[23] & 0x80000000) != 0)
          operator delete(*(void **)v536);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v356 = byte_254A4A4F8;
      else
        v356 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v357 = byte_254A4A4F8[23];
      else
        v357 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v536 = os_log_create(v356, v352);
      v358 = &v536[8];
      if (v357 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v357 >= 0x17)
      {
        v359 = v346;
        v360 = (v357 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v357 | 7) != 0x17)
          v360 = v357 | 7;
        v361 = v360 + 1;
        v358 = operator new(v360 + 1);
        *(_QWORD *)&v536[16] = v357;
        *(_QWORD *)&v536[24] = v361 | 0x8000000000000000;
        *(_QWORD *)&v536[8] = v358;
        v346 = v359;
      }
      else
      {
        v536[31] = v357;
        if (!v357)
        {
LABEL_464:
          v358[v357] = 0;
          v536[32] = 1;
          v362 = &v536[40];
          if (v353 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v268 = i;
          if (v353 >= 0x17)
          {
            v363 = v346;
            v364 = (v353 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v353 | 7) != 0x17)
              v364 = v353 | 7;
            v365 = v364 + 1;
            v362 = operator new(v364 + 1);
            v537 = v353;
            v538 = v365 | 0x8000000000000000;
            *(_QWORD *)&v536[40] = v362;
            v346 = v363;
          }
          else
          {
            HIBYTE(v538) = v353;
            if (!v353)
            {
LABEL_472:
              v362[v353] = 0;
              v539 = 1;
              v366 = *(NSObject **)v536;
              if (SHIBYTE(v538) < 0)
                operator delete(*(void **)&v536[40]);
              v269 = v510;
              if (v536[32] && (v536[31] & 0x80000000) != 0)
                operator delete(*(void **)&v536[8]);
              if (*(_QWORD *)v536)
                os_release(*(void **)v536);
              if (v346 && *(_QWORD *)(v346 + 24))
              {
                v367 = _os_log_pack_size();
                v368 = (std::__shared_weak_count_vtbl *)operator new(v367, (std::align_val_t)8uLL);
                v369 = (std::__shared_weak_count *)operator new();
                v369->__shared_owners_ = 0;
                v370 = (unint64_t *)&v369->__shared_owners_;
                v369->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v369->__shared_weak_owners_ = 0;
                v369[1].__vftable = v368;
                *(_QWORD *)&v531 = v368;
                *((_QWORD *)&v531 + 1) = v368;
                v533 = 0;
                v534 = 0;
                v532 = v369;
                v371 = (std::__shared_weak_count *)operator new(0x40uLL);
                v372 = v371;
                v371->__shared_owners_ = 0;
                v373 = (unint64_t *)&v371->__shared_owners_;
                v371->__shared_weak_owners_ = 0;
                v371[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9F91D0;
                v371->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9180;
                v371[1].__shared_owners_ = 1701734764;
                HIBYTE(v371[2].__vftable) = 4;
                v533 = v371 + 1;
                v534 = v371;
                *(_QWORD *)v536 = v368;
                *(_QWORD *)&v536[8] = v368;
                *(_QWORD *)&v536[16] = v369;
                do
                  v374 = __ldxr(v370);
                while (__stxr(v374 + 1, v370));
                *(_QWORD *)&v536[24] = v371 + 1;
                *(_QWORD *)&v536[32] = v371;
                do
                  v375 = __ldxr(v373);
                while (__stxr(v375 + 1, v373));
                *(_QWORD *)&v536[40] = v371 + 1;
                do
                  v376 = __ldaxr(v373);
                while (__stlxr(v376 - 1, v373));
                if (!v376)
                {
                  ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                  std::__shared_weak_count::__release_weak(v372);
                }
                v377 = v532;
                if (v532)
                {
                  v378 = (unint64_t *)&v532->__shared_owners_;
                  do
                    v379 = __ldaxr(v378);
                  while (__stlxr(v379 - 1, v378));
                  if (!v379)
                  {
                    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                    std::__shared_weak_count::__release_weak(v377);
                  }
                }
                v380 = *(_QWORD *)v536;
                if (*(char *)(*(_QWORD *)&v536[40] + 31) >= 0)
                  v381 = *(_QWORD *)&v536[40] + 8;
                else
                  v381 = *(_QWORD *)(*(_QWORD *)&v536[40] + 8);
                v382 = _os_log_pack_fill();
                *(_DWORD *)v382 = 136315906;
                *(_QWORD *)(v382 + 4) = v381;
                *(_WORD *)(v382 + 12) = 2048;
                *(_QWORD *)(v382 + 14) = 0xAAAAAAAAAAAAAAABLL * ((v489 - v499) >> 3);
                *(_WORD *)(v382 + 22) = 2048;
                *(_QWORD *)(v382 + 24) = (v502 - v496) >> 3;
                *(_WORD *)(v382 + 32) = 2048;
                *(_QWORD *)(v382 + 34) = (v492 - v354) >> 3;
                v383 = operator new();
                v384 = *(unsigned __int8 *)(v351 + 39);
                v385 = v486;
                if ((v384 & 0x80u) != 0)
                {
                  v385 = *(const char **)(v351 + 16);
                  v384 = *(_QWORD *)(v351 + 24);
                }
                *(_QWORD *)v383 = v380;
                *(_OWORD *)(v383 + 8) = *(_OWORD *)&v536[8];
                *(_QWORD *)&v536[8] = 0;
                *(_QWORD *)&v536[16] = 0;
                *(_OWORD *)(v383 + 24) = *(_OWORD *)&v536[24];
                *(_QWORD *)&v536[24] = 0;
                *(_QWORD *)&v536[32] = 0;
                *(_QWORD *)(v383 + 40) = v385;
                *(_QWORD *)(v383 + 48) = v384;
                *(_BYTE *)(v383 + 56) = 1;
                v535[0] = 0;
                *(_QWORD *)&v531 = v383;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v346 + 24) + 40))(*(_QWORD *)(v346 + 24), &v531);
                v386 = v531;
                *(_QWORD *)&v531 = 0;
                v268 = i;
                v269 = v510;
                v387 = v488;
                if (v386)
                {
                  v388 = *(std::__shared_weak_count **)(v386 + 32);
                  if (v388)
                  {
                    v389 = (unint64_t *)&v388->__shared_owners_;
                    do
                      v390 = __ldaxr(v389);
                    while (__stlxr(v390 - 1, v389));
                    if (!v390)
                    {
                      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
                      std::__shared_weak_count::__release_weak(v388);
                    }
                  }
                  v391 = *(std::__shared_weak_count **)(v386 + 16);
                  if (v391)
                  {
                    v392 = (unint64_t *)&v391->__shared_owners_;
                    do
                      v393 = __ldaxr(v392);
                    while (__stlxr(v393 - 1, v392));
                    if (!v393)
                    {
                      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                      std::__shared_weak_count::__release_weak(v391);
                    }
                  }
                  MEMORY[0x212BC6398](v386, 0x10F0C40B62ED6C6);
                  v394 = v535[0];
                  v535[0] = 0;
                  if (v394)
                  {
                    v395 = *(std::__shared_weak_count **)(v394 + 32);
                    if (v395)
                    {
                      v396 = (unint64_t *)&v395->__shared_owners_;
                      do
                        v397 = __ldaxr(v396);
                      while (__stlxr(v397 - 1, v396));
                      if (!v397)
                      {
                        ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
                        std::__shared_weak_count::__release_weak(v395);
                      }
                    }
                    v398 = *(std::__shared_weak_count **)(v394 + 16);
                    if (v398)
                    {
                      v399 = (unint64_t *)&v398->__shared_owners_;
                      do
                        v400 = __ldaxr(v399);
                      while (__stlxr(v400 - 1, v399));
                      if (!v400)
                      {
                        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
                        std::__shared_weak_count::__release_weak(v398);
                      }
                    }
                    MEMORY[0x212BC6398](v394, 0x10F0C40B62ED6C6);
                  }
                }
                v401 = *(std::__shared_weak_count **)&v536[32];
                v264 = v506;
                if (*(_QWORD *)&v536[32])
                {
                  v402 = (unint64_t *)(*(_QWORD *)&v536[32] + 8);
                  do
                    v403 = __ldaxr(v402);
                  while (__stlxr(v403 - 1, v402));
                  if (!v403)
                  {
                    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
                    std::__shared_weak_count::__release_weak(v401);
                  }
                }
                v404 = *(std::__shared_weak_count **)&v536[16];
                if (*(_QWORD *)&v536[16])
                {
                  v405 = (unint64_t *)(*(_QWORD *)&v536[16] + 8);
                  do
                    v406 = __ldaxr(v405);
                  while (__stlxr(v406 - 1, v405));
                  if (!v406)
                  {
                    ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
                    std::__shared_weak_count::__release_weak(v404);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v366, OS_LOG_TYPE_INFO);
                *(_DWORD *)v536 = 136315906;
                *(_QWORD *)&v536[4] = "line";
                *(_WORD *)&v536[12] = 2048;
                *(_QWORD *)&v536[14] = 0xAAAAAAAAAAAAAAABLL * ((v489 - v499) >> 3);
                *(_WORD *)&v536[22] = 2048;
                *(_QWORD *)&v536[24] = (v502 - v496) >> 3;
                *(_WORD *)&v536[32] = 2048;
                *(_QWORD *)&v536[34] = (v492 - v354) >> 3;
                v407 = (void *)_os_log_send_and_compose_impl();
                v264 = v506;
                v387 = v488;
                if (v407)
                  free(v407);
              }
              if (v387)
              {
                v408 = *(_QWORD *)(v268 + 616);
                sub_20E8C003C((uint64_t)__p, "Secondary: %s: %zu features, %zu stereo matches and %zu across-time matches", "line", 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__dst[0] + 8) + 8)- **(_QWORD **)(*(_QWORD *)&__dst[0] + 8)) >> 3), (uint64_t)(*(_QWORD *)(*(_QWORD *)(v408 + 56) + 40) - *(_QWORD *)(*(_QWORD *)(v408 + 56) + 32)) >> 3, (uint64_t)(*(_QWORD *)(*(_QWORD *)(v408 + 32) + 32) - *(_QWORD *)(*(_QWORD *)(v408 + 32) + 24)) >> 3);
                sub_20E863570((uint64_t)__p);
              }
              sub_20E863570((uint64_t)__p);
              v409 = v529;
              if (v529)
              {
                v410 = (unint64_t *)&v529->__shared_owners_;
                do
                  v411 = __ldaxr(v410);
                while (__stlxr(v411 - 1, v410));
                if (!v411)
                {
                  ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                  std::__shared_weak_count::__release_weak(v409);
                }
              }
              goto LABEL_541;
            }
          }
          memmove(v362, v352, v353);
          goto LABEL_472;
        }
      }
      memmove(v358, v356, v357);
      goto LABEL_464;
    }
  }
LABEL_541:
  if (__srca)
  {
    v412 = *(_BYTE *)(v264 + 384) == 0;
    if (*(_BYTE *)(v264 + 384))
      v413 = (_QWORD *)(v264 + 360);
    else
      v413 = 0;
  }
  else
  {
    v413 = 0;
    v412 = 1;
  }
  v414 = *(_QWORD *)(v268 + 616);
  v415 = *(_QWORD *)(v414 + 56);
  v416 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v414 + 8) + 32) - *(_QWORD *)(*(_QWORD *)(v414 + 8) + 24)) >> 5);
  *(_DWORD *)v536 = -1;
  v417 = *(_QWORD *)(v268 + 696);
  v418 = (*(_QWORD *)(v268 + 704) - v417) >> 2;
  if (v416 <= v418)
  {
    if (v416 < v418)
      *(_QWORD *)(v268 + 704) = v417 + 4 * v416;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)v514, v416 - v418, (const float *)v536);
  }
  v419 = *(int **)(v415 + 32);
  v420 = *(int **)(v415 + 40);
  if (v419 != v420)
  {
    v421 = *v269;
    v422 = *v514;
    if (v412)
    {
      do
      {
        v423 = *(_DWORD *)(v421 + 4 * v419[1]);
        if (v423 != -1)
          *(_DWORD *)&v422[4 * *v419] = v423;
        v419 += 2;
      }
      while (v419 != v420);
    }
    else
    {
      do
      {
        v425 = v419[1];
        v426 = *(_DWORD *)(v421 + 4 * v425);
        if (v426 == -1)
          v426 = *(_DWORD *)(*v413 + 4 * v425);
        v424 = *v419;
        v419 += 2;
        *(_DWORD *)&v422[4 * v424] = v426;
      }
      while (v419 != v420);
    }
  }
  if (!*(_BYTE *)(v268 + 107))
  {
    v441 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v268 + 616) + 8) + 32)
                   - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v268 + 616) + 8) + 24)) >> 5;
    *(_DWORD *)v536 = -1;
    v442 = *(_QWORD *)(v268 + 672);
    v443 = (*(_QWORD *)(v268 + 680) - v442) >> 2;
    v444 = v441 >= v443;
    v445 = v441 - v443;
    if (v445 != 0 && v444)
    {
      sub_20EDDCBD0(v268 + 672, v445, (const float *)v536);
    }
    else if (!v444)
    {
      *(_QWORD *)(v268 + 680) = v442 + 4 * v441;
    }
    goto LABEL_596;
  }
  v427 = *(_QWORD *)(v268 + 552);
  v428 = (uint64_t *)(*(_QWORD *)(v268 + 568) + 24);
  v429 = *(_QWORD *)(v268 + 616);
  v430 = (int **)(*(_QWORD *)(v429 + 32) + 24);
  v431 = (*(_QWORD *)(*(_QWORD *)(v429 + 8) + 32) - *(_QWORD *)(*(_QWORD *)(v429 + 8) + 24)) >> 5;
  v536[0] = 0;
  v536[8] = 0;
  sub_20F1405DC(v427, (_QWORD *)(v268 + 672), v428, v430, v431, (uint64_t)v536);
  v432 = *(_QWORD *)(v268 + 680);
  v433 = *(_QWORD *)(v268 + 672);
  v434 = v432 - v433;
  if (v432 - v433 != *(_QWORD *)(v268 + 704) - *(_QWORD *)(v268 + 696))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 747, (uint64_t)"curr_to_prev_track_ids_[1].size() == sec_to_pri_track_ids_.size()", 65, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_624;
    }
    v268 = i;
    v432 = *(_QWORD *)(i + 680);
    v433 = *(_QWORD *)(i + 672);
    v434 = v432 - v433;
  }
  if (v432 == v433)
    goto LABEL_596;
  v435 = v434 >> 2;
  v436 = *v514;
  if (v435 <= 1)
    v437 = 1;
  else
    v437 = v435;
  if (v437 < 0x10)
  {
    v438 = 0;
    v439 = 0;
    goto LABEL_569;
  }
  v439 = 0;
  v438 = 0;
  if (v435 <= 1)
    v446 = 1;
  else
    v446 = v435;
  v447 = v446 - 1;
  if ((_DWORD)v447 == -1 || HIDWORD(v447) || (unint64_t)(v433 - (_QWORD)v436) < 0x10)
    goto LABEL_569;
  v438 = v437 & 0xFFFFFFFFFFFFFFFCLL;
  v439 = v437 & 0xFFFFFFFC;
  v448 = (int32x2_t *)(v436 + 8);
  v449 = (_DWORD *)(v433 + 8);
  v450 = v437 & 0xFFFFFFFFFFFFFFFCLL;
  while (2)
  {
    v452 = v448[-1];
    v451 = *v448;
    if ((vmvn_s8((int8x8_t)vceq_s32(v452, (int32x2_t)-1)).u8[0] & 1) != 0)
    {
      *(v449 - 2) = -1;
      if ((vmvn_s8((int8x8_t)vceq_s32(v452, (int32x2_t)-1)).i32[1] & 1) == 0)
        goto LABEL_586;
LABEL_590:
      *(v449 - 1) = -1;
      if ((vmvn_s8((int8x8_t)vceq_s32(v451, (int32x2_t)-1)).u8[0] & 1) == 0)
        goto LABEL_591;
LABEL_587:
      *v449 = -1;
      if ((vmvn_s8((int8x8_t)vceq_s32(v451, (int32x2_t)-1)).i32[1] & 1) != 0)
        goto LABEL_592;
    }
    else
    {
      if ((vmvn_s8((int8x8_t)vceq_s32(v452, (int32x2_t)-1)).i32[1] & 1) != 0)
        goto LABEL_590;
LABEL_586:
      if ((vmvn_s8((int8x8_t)vceq_s32(v451, (int32x2_t)-1)).u8[0] & 1) != 0)
        goto LABEL_587;
LABEL_591:
      if ((vmvn_s8((int8x8_t)vceq_s32(v451, (int32x2_t)-1)).i32[1] & 1) != 0)
LABEL_592:
        v449[1] = -1;
    }
    v448 += 2;
    v449 += 4;
    v450 -= 4;
    if (v450)
      continue;
    break;
  }
  if (v437 == v438)
    goto LABEL_596;
LABEL_569:
  v440 = v439 + 1;
  do
  {
    if (*(_DWORD *)&v436[4 * v438] != -1)
      *(_DWORD *)(v433 + 4 * v438) = -1;
    v438 = v440++;
  }
  while (v435 > v438);
LABEL_596:
  v453 = *(_OWORD *)(v268 + 592);
  *(_OWORD *)(v268 + 592) = *(_OWORD *)(v493 + 144);
  *(_OWORD *)(v493 + 144) = v453;
  v454 = *(_QWORD *)(v268 + 608);
  *(_QWORD *)(v268 + 608) = *(_QWORD *)(v268 + 584);
  *(_QWORD *)(v268 + 584) = v454;
  v455 = (void *)*((_QWORD *)&__dst[0] + 1);
  if (*((_QWORD *)&__dst[0] + 1) != *(_QWORD *)&__dst[0])
  {
    v456 = *a12;
    v457 = *a12 + 232;
    v458 = *(_QWORD **)(v268 + 616);
    v459 = (_OWORD **)v458[1];
    if ((_OWORD **)v457 != v459)
    {
      sub_20F13E3E4(*a12 + 232, *v459, v459[1], ((char *)v459[1] - (char *)*v459) >> 5);
      v458 = *(_QWORD **)(v268 + 616);
    }
    v460 = (char **)v458[4];
    if ((char **)(v456 + 280) != v460)
    {
      sub_20E86811C((_QWORD *)(v456 + 280), *v460, v460[1], (v460[1] - *v460) >> 3);
      v458 = *(_QWORD **)(v268 + 616);
    }
    v461 = (char **)v458[10];
    if ((char **)(v456 + 392) != v461)
      sub_20E86811C((_QWORD *)(v456 + 392), *v461, v461[1], (v461[1] - *v461) >> 3);
    if ((_QWORD *)(v456 + 336) != v269)
      sub_20F0E80A4((_QWORD *)(v456 + 336), *(char **)(v268 + 648), *(char **)(v268 + 656), (uint64_t)(*(_QWORD *)(v268 + 656) - *(_QWORD *)(v268 + 648)) >> 2);
    v462 = *(_QWORD **)(v493 + 144);
    if (v462 != (_QWORD *)(v456 + 336))
      sub_20F0E80A4(v462, *(char **)(v456 + 336), *(char **)(v456 + 344), (uint64_t)(*(_QWORD *)(v456 + 344) - *(_QWORD *)(v456 + 336)) >> 2);
    if ((sub_20F14D7B0(v457, *(unsigned __int8 *)(v268 + 107), __srca != 0) & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 788, (uint64_t)"observation_sample.IsValid(config_.enable_secondary_camera_feature_tracking, precomputed_pri_feature_samples.has_value())", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_624;
    }
    v455 = *(void **)&__dst[0];
    v268 = i;
    if (*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0] >= 9uLL)
    {
      v463 = 0;
      v464 = 1;
      v465 = 672;
      while (1)
      {
        v466 = *a12;
        v467 = *a12 + v463;
        v468 = v467 + 672;
        v469 = *(_QWORD **)(v268 + 616);
        v470 = v469[1];
        v471 = (_OWORD **)(v470 + 24 * v464);
        if ((_OWORD **)(v467 + 672) != v471)
        {
          v472 = *(char **)(v470 + 24 * v464 + 8);
          sub_20F13E3E4(v467 + 672, *v471, v472, (v472 - (char *)*v471) >> 5);
          v469 = *(_QWORD **)(i + 616);
        }
        v473 = v469[4];
        v474 = (char **)(v473 + 24 * v464);
        if ((char **)(v467 + 720) != v474)
        {
          v475 = *(char **)(v473 + 24 * v464 + 8);
          sub_20E86811C((_QWORD *)(v467 + 720), *v474, v475, (v475 - *v474) >> 3);
          v469 = *(_QWORD **)(i + 616);
        }
        sub_20F14B8F0(v466 + v463 + 744, (char **)(v469[7] + 32));
        sub_20F14B9C4(v466 + v463 + 800, v514);
        v476 = *(_QWORD *)(*(_QWORD *)(i + 616) + 80);
        v477 = (char **)(v476 + 24 * v464);
        v478 = v466 + v463;
        v479 = (char **)(v466 + v463 + 832);
        if (v479 != v477)
        {
          v480 = *(char **)(v476 + 24 * v464 + 8);
          sub_20E86811C(v479, *v477, v480, (v480 - *v477) >> 3);
        }
        v481 = (char **)(v478 + 776);
        if (i + v465 != v478 + 776)
          sub_20F0E80A4((_QWORD *)(v478 + 776), *(char **)(i + v465), *(char **)(i + v465 + 8), (uint64_t)(*(_QWORD *)(i + v465 + 8) - *(_QWORD *)(i + v465)) >> 2);
        v482 = (char **)(*(_QWORD *)(v493 + 144) + v465 - 648);
        if (v481 != v482)
          sub_20F0E80A4(v482, *v481, *(char **)(v466 + v463 + 784), (uint64_t)(*(_QWORD *)(v466 + v463 + 784) - (_QWORD)*v481) >> 2);
        if ((sub_20F14D7B0(v468, *(unsigned __int8 *)(i + 107), __srca != 0) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 788, (uint64_t)"observation_sample.IsValid(config_.enable_secondary_camera_feature_tracking, precomputed_pri_feature_samples.has_value())", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        ++v464;
        v455 = *(void **)&__dst[0];
        v463 += 440;
        v465 += 24;
        v268 = i;
        if (v464 >= (uint64_t)(*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0]) >> 3)
          goto LABEL_625;
      }
LABEL_624:
      abort();
    }
  }
LABEL_625:
  *(_DWORD *)(v268 + 400) = *(_DWORD *)(v268 + 392);
  *(_BYTE *)(v268 + 404) = *(_BYTE *)(v268 + 396);
  *(_DWORD *)(v268 + 392) = a4;
  *(_BYTE *)(v268 + 396) = 1;
  if (v455)
  {
    *((_QWORD *)&__dst[0] + 1) = v455;
    operator delete(v455);
  }
}

void sub_20F147F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;

  if (*(_BYTE *)(v49 - 168) && *(char *)(v49 - 169) < 0)
    operator delete(*(void **)(v49 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a48);
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F14835C(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, char *a11)
{
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  double v29;
  uint64_t v30;
  float64x2_t v34;
  double v36;
  float64x2_t v42;
  float64x2_t v46;
  float64x2_t v49;
  int8x16_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float64x2_t v64;
  int8x16_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  const char *v79;
  size_t v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  const char *v83;
  size_t v84;
  _BYTE *v85;
  unint64_t v86;
  const char *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  const char *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v138;
  unint64_t v139;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  int **v144;
  int *v145;
  uint64_t *v146;
  uint64_t v147;
  int **v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  const char *v159;
  size_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  const char *v165;
  size_t v166;
  _BYTE *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  size_t v177;
  std::__shared_weak_count_vtbl *v178;
  int v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  const char *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v223;
  unint64_t v224;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  BOOL v235;
  unint64_t v236;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  size_t v243;
  unsigned __int8 v244;
  const char *v245;
  size_t v246;
  _BYTE *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _BYTE *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  size_t v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  std::__shared_weak_count *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  const char *v274;
  std::__shared_weak_count_vtbl *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  int v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v302;
  unint64_t v303;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  BOOL v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  int **v316;
  int *v317;
  int *v318;
  int *v319;
  char *v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int *v325;
  uint64_t *v326;
  uint64_t v327;
  int **v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  unsigned int v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  int32x2_t *v346;
  _DWORD *v347;
  unint64_t v348;
  int32x2_t v349;
  int32x2_t v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  char **v356;
  char **v357;
  char **v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t i;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  char **v368;
  char *v369;
  uint64_t v370;
  char **v371;
  char *v372;
  uint64_t v373;
  char **v374;
  uint64_t v375;
  char **v376;
  char *v377;
  char **v378;
  char **v379;
  uint64_t v380;
  const char *v381;
  const char *v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  unint64_t v387;
  const char *v388;
  uint64_t v389;
  char *__src;
  const char *__srca;
  void *__srcb;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  int **v396;
  int **v397;
  uint64_t v399;
  unint64_t v400;
  char **v401;
  void *__p;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v405;
  int v406;
  const char *v407;
  int v408;
  const char *v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  uint64_t v412;
  uint64_t v413;
  char v414;
  uint64_t v415;
  std::__shared_weak_count_vtbl *v416;
  std::__shared_weak_count_vtbl *v417;
  std::__shared_weak_count *v418;
  std::__shared_weak_count *v419;
  std::__shared_weak_count *v420;
  _BYTE v421[48];
  float64x2_t v422;
  uint64_t v423;
  uint64_t v424;

  v424 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v413) = 0;
  v414 = 0;
  if (a11[8])
  {
    v413 = *(_QWORD *)a11 + 48;
    v414 = 1;
  }
  (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(a1 + 544) + 32))(*(_QWORD *)(a1 + 544), a2);
  v17 = *(unsigned __int8 *)(a10 + 32);
  if ((*(_BYTE *)(a10 + 32) != 0) == (unint64_t)((char *)a2[1] - (char *)*a2) < 0x10)
  {
    {
      abort();
    }
    v17 = *(unsigned __int8 *)(a10 + 32);
  }
  if ((v17 != 0) == (unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(a9[1] - *a9) >> 3)) < 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 675, (uint64_t)"opt_camera_set_model.has_value() == (feature_samples.size() > 1)", 64, (uint64_t)"The optional camera set model should be available for stereo pair.", 66, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v17 = *(unsigned __int8 *)(a10 + 32);
  }
  if (v17)
  {
    v18 = *(_QWORD *)(a10 + 8);
    v19 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a10 + 16) - v18) >> 7);
    if (v19 != 0x6FB586FB586FB587 * ((uint64_t)(a9[1] - *a9) >> 3))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 678, (uint64_t)"opt_camera_set_model->NumStreams() == feature_samples.size()", 60, (uint64_t)"The number of features does not match number of cameras", 55, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v18 = *(_QWORD *)(a10 + 8);
      v19 = 0x6FB586FB586FB587 * ((uint64_t)(a9[1] - *a9) >> 3);
    }
    if (v19 >= 2)
    {
      v399 = v18 + 96;
      v20 = 1;
      v21 = 1;
      v380 = v18;
      do
      {
        v22 = *(_QWORD *)(a1 + 544);
        v23 = *(_QWORD *)(v22 + 56) + 32 * v20;
        if (!*(_BYTE *)(v23 + 24))
          sub_20E866B34();
        v24 = *(uint64_t **)(v22 + 8);
        v25 = *(_QWORD *)(a10 + 8);
        v26 = *(double *)(v18 + 1552);
        if (*(_BYTE *)(v18 + 1536))
          v27 = v399;
        else
          v27 = 0;
        v28 = *(_DWORD *)(v27 + 992);
        if (v28 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v28 = *(_DWORD *)(v27 + 992);
        }
        if (!v28)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v29 = v26 / *(double *)v27 * (v26 / *(double *)v27);
        v30 = v25 + 1664 * v20;
        _Q7.f64[0] = *(float64_t *)(v18 + 16);
        _Q4 = *(int64x2_t *)(v18 + 24);
        _Q2.f64[0] = *(float64_t *)(v18 + 64);
        _Q5 = *(_OWORD *)(v18 + 48);
        v14.i64[0] = *(_QWORD *)(v30 + 16);
        v13.i64[0] = *(_QWORD *)(v30 + 40);
        v12.i64[0] = *(_QWORD *)(v30 + 64);
        v34 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v18, _Q4);
        _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v18, _Q4);
        v15.f64[0] = *(float64_t *)(v30 + 88);
        v16.f64[0] = *(float64_t *)(v18 + 88);
        *(_QWORD *)&v36 = *(_OWORD *)&vsubq_f64(v15, v16);
        _Q24 = vsubq_f64(*(float64x2_t *)(v30 + 72), *(float64x2_t *)(v18 + 72));
        _D22 = *(_QWORD *)(v18 + 8);
        __asm { FMLA            D26, D22, V24.D[1] }
        _Q7.f64[1] = *(float64_t *)(v18 + 40);
        v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)v30), _Q19, *(float64x2_t *)v30, 1), _Q7, *(double *)v14.i64);
        _D23 = *(_QWORD *)(v30 + 8);
        __asm { FMLA            D22, D23, V5.D[1] }
        _D23 = *(_QWORD *)(v18 + 56);
        *(double *)v14.i64 = _D22 + _Q2.f64[0] * *(double *)v14.i64;
        v46 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)(v30 + 24)), _Q19, *(float64x2_t *)(v30 + 24), 1), _Q7, *(double *)v13.i64);
        _D21 = *(_QWORD *)(v30 + 32);
        __asm { FMLA            D27, D21, V5.D[1] }
        *(double *)v13.i64 = _D27 + _Q2.f64[0] * *(double *)v13.i64;
        v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)(v30 + 48)), _Q19, *(float64x2_t *)(v30 + 48), 1), _Q7, *(double *)v12.i64);
        _D18 = *(_QWORD *)(v30 + 56);
        __asm { FMLA            D27, D18, V5.D[1] }
        *(double *)v12.i64 = _D27 + _Q2.f64[0] * *(double *)v12.i64;
        _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, _Q24.f64[0]), _Q19, _Q24, 1), _Q7, v36);
        _D18 = _Q24.f64[1];
        __asm { FMLA            D19, D18, V5.D[1] }
        _Q19.f64[0] = vmlad_n_f64(_Q19.f64[0], _Q2.f64[0], v36);
        _Q4.i64[0] = *(_QWORD *)(v18 + 32);
        __asm { FMLA            D5, D4, V24.D[1] }
        *(double *)&_Q5 = vmlad_n_f64(*(double *)&_Q5, _Q7.f64[1], v36);
        __asm { FMLA            D7, D23, V24.D[1] }
        _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], _Q2.f64[0], v36);
        __asm { FMLA            D2, D5, V16.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + _Q7.f64[0] * _Q19.f64[0]);
        v54 = (int8x16_t)vmulq_f64(_Q19, _Q2);
        v55 = vmulq_n_f64(_Q16, _Q2.f64[0]);
        v56 = (float64x2_t)vextq_s8((int8x16_t)v55, v54, 8uLL);
        v57 = (float64x2_t)vzip1q_s64((int64x2_t)v54, (int64x2_t)v55);
        v58 = (float64x2_t)vextq_s8((int8x16_t)v42, v13, 8uLL);
        v59 = (float64x2_t)vzip1q_s64((int64x2_t)v14, (int64x2_t)v42);
        v60 = (float64x2_t)vextq_s8((int8x16_t)v42, v14, 8uLL);
        v42.f64[1] = v46.f64[1];
        v61 = vmlsq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v12, (int64x2_t)v49), v56), (float64x2_t)vextq_s8((int8x16_t)v49, v12, 8uLL), v57);
        v62 = (int8x16_t)vmlsq_f64(vmulq_f64(v59, v56), v60, v57);
        v63 = (int8x16_t)vmlsq_f64(vmulq_f64(v46, v57), (float64x2_t)vzip1q_s64((int64x2_t)v13, (int64x2_t)v46), v55);
        v64 = vmlsq_f64(vmulq_f64(v58, v55), v42, v56);
        v65 = vextq_s8(v62, v63, 8uLL);
        v62.i64[1] = *(_QWORD *)&v64.f64[1];
        *(_QWORD *)&v64.f64[1] = v63.i64[1];
        *(float64_t *)&v421[16] = v61.f64[0];
        *(int8x16_t *)v421 = v62;
        *(float64_t *)&v421[40] = v61.f64[1];
        *(int8x16_t *)&v421[24] = v65;
        v423 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v55, v49, 1), v49, v55, 1);
        v422 = v64;
        if (*(_BYTE *)(v18 + 1536))
          v66 = v399;
        else
          v66 = 0;
        if (*(_BYTE *)(v30 + 1536))
          v67 = v30 + 96;
        else
          v67 = 0;
        sub_20EA8BDA0(v24, &v24[3 * v20], v66, v67, (uint64_t)v421, (int **)v23, (double **)&__p, v29);
        if (__p)
        {
          rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)__p;
          operator delete(__p);
        }
        sub_20F143DC4(&v412);
        if (**(int **)(v412 + 56) > 3)
          goto LABEL_15;
        v68 = *(unsigned __int8 *)(v412 + 72);
        v69 = sub_20E8C31DC(v412, "OSLogSurrogateAppender", 1, 0);
        v70 = v69;
        if (!v68 && !v69)
          goto LABEL_15;
        v385 = v68;
        __p = &v412;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v405 = std::chrono::system_clock::now().__d_.__rep_;
        v406 = 3;
        v407 = "unknown file";
        v408 = 690;
        v409 = "unknown function";
        v410 = 0;
        v411 = 0;
        v71 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 56) + 32 * v20);
        v72 = *v71;
        v73 = v71[1];
        v74 = (*a2)[v20];
        if (*(_BYTE *)(v74 + 184))
        {
          v75 = *(_QWORD *)(v74 + 88) - *(_QWORD *)(v74 + 80);
          if (v75)
          {
            if (v75 == *(_QWORD *)(v74 + 168) - *(_QWORD *)(v74 + 160))
            {
              v76 = (uint64_t)(*(_QWORD *)(v74 + 64) - *(_QWORD *)(v74 + 56)) >> 5;
              if (v76 == v75 >> 6)
                goto LABEL_42;
            }
          }
        }
        else if (*(_QWORD *)(v74 + 160) == *(_QWORD *)(v74 + 168))
        {
          v76 = (uint64_t)(*(_QWORD *)(v74 + 64) - *(_QWORD *)(v74 + 56)) >> 5;
          if (v76 == (uint64_t)(*(_QWORD *)(v74 + 88) - *(_QWORD *)(v74 + 80)) >> 6)
          {
LABEL_42:
            v77 = *(_QWORD *)(v74 + 16);
            if (v77 <= v76)
              goto LABEL_45;
          }
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v76 = (uint64_t)(*(_QWORD *)(v74 + 64) - *(_QWORD *)(v74 + 56)) >> 5;
        v77 = *(_QWORD *)(v74 + 16);
LABEL_45:
        v387 = v77;
        v393 = v72;
        v78 = *(_QWORD *)__p;
        v79 = (const char *)(*(_QWORD *)__p + 16);
        v382 = v79;
        v383 = *(_QWORD *)__p;
        if (*(char *)(*(_QWORD *)__p + 39) < 0)
        {
          v79 = *(const char **)(v78 + 16);
          v80 = *(_QWORD *)(v78 + 24);
          __src = (char *)v76;
          v82 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v82 & 1) != 0)
            goto LABEL_49;
        }
        else
        {
          v80 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
          __src = (char *)v76;
          v81 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v81 & 1) != 0)
            goto LABEL_49;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v416);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v416);
          if ((_BYTE)v419 && SHIBYTE(v418) < 0)
            operator delete(v416);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v18 = v380;
        }
LABEL_49:
        if (byte_254A4A4F8[23] >= 0)
          v83 = byte_254A4A4F8;
        else
          v83 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v84 = byte_254A4A4F8[23];
        else
          v84 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v421 = os_log_create(v83, v79);
        if (v84 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v84 >= 0x17)
        {
          v86 = v70;
          v87 = v79;
          v88 = v21;
          v89 = v73;
          v90 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17)
            v90 = v84 | 7;
          v91 = v90 + 1;
          v85 = operator new(v90 + 1);
          *(_QWORD *)&v421[16] = v84;
          *(_QWORD *)&v421[24] = v91 | 0x8000000000000000;
          *(_QWORD *)&v421[8] = v85;
          v73 = v89;
          v21 = v88;
          v79 = v87;
          v70 = v86;
          v18 = v380;
LABEL_62:
          memmove(v85, v83, v84);
          goto LABEL_63;
        }
        v421[31] = v84;
        v85 = &v421[8];
        if (v84)
          goto LABEL_62;
LABEL_63:
        v85[v84] = 0;
        v421[32] = 1;
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v80 >= 0x17)
        {
          v94 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v94 = v80 | 7;
          v95 = v94 + 1;
          v92 = operator new(v94 + 1);
          *(_QWORD *)&v422.f64[0] = v80;
          *(_QWORD *)&v422.f64[1] = v95 | 0x8000000000000000;
          *(_QWORD *)&v421[40] = v92;
        }
        else
        {
          HIBYTE(v422.f64[1]) = v80;
          v92 = &v421[40];
          if (!v80)
          {
            v421[40] = 0;
            LOBYTE(v423) = 1;
            v93 = *(NSObject **)v421;
            if ((SHIBYTE(v422.f64[1]) & 0x80000000) == 0)
              goto LABEL_67;
            goto LABEL_73;
          }
        }
        memmove(v92, v79, v80);
        v92[v80] = 0;
        LOBYTE(v423) = 1;
        v93 = *(NSObject **)v421;
        if ((SHIBYTE(v422.f64[1]) & 0x80000000) == 0)
        {
LABEL_67:
          if (!v421[32])
            goto LABEL_76;
          goto LABEL_74;
        }
LABEL_73:
        operator delete(*(void **)&v421[40]);
        if (!v421[32])
          goto LABEL_76;
LABEL_74:
        if ((v421[31] & 0x80000000) != 0)
          operator delete(*(void **)&v421[8]);
LABEL_76:
        if (*(_QWORD *)v421)
          os_release(*(void **)v421);
        v96 = (v73 - v393) >> 3;
        if (v70 && *(_QWORD *)(v70 + 24))
        {
          v97 = _os_log_pack_size();
          v98 = (std::__shared_weak_count_vtbl *)operator new(v97, (std::align_val_t)8uLL);
          v99 = (std::__shared_weak_count *)operator new();
          v100 = v99;
          v99->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v99->__shared_owners_;
          v99->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v99->__shared_weak_owners_ = 0;
          v99[1].__vftable = v98;
          *(_QWORD *)v421 = v98;
          *(_QWORD *)&v421[8] = v98;
          *(_QWORD *)&v421[16] = v99;
          do
            v102 = __ldxr(p_shared_owners);
          while (__stxr(v102 + 1, p_shared_owners));
          memset(&v421[24], 0, 24);
          do
            v103 = __ldaxr(p_shared_owners);
          while (__stlxr(v103 - 1, p_shared_owners));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v100);
          }
          v104 = *(_QWORD *)v421;
          v105 = _os_log_pack_fill();
          *(_DWORD *)v105 = 134218240;
          *(_QWORD *)(v105 + 4) = v96;
          *(_WORD *)(v105 + 12) = 2048;
          *(_QWORD *)(v105 + 14) = &__src[-v387];
          v106 = (char *)operator new();
          v107 = *(unsigned __int8 *)(v383 + 39);
          v108 = v382;
          if ((v107 & 0x80u) != 0)
          {
            v108 = *(const char **)(v383 + 16);
            v107 = *(_QWORD *)(v383 + 24);
          }
          *(_QWORD *)v106 = v104;
          *(_OWORD *)(v106 + 8) = *(_OWORD *)&v421[8];
          *(_QWORD *)&v421[8] = 0;
          *(_QWORD *)&v421[16] = 0;
          *(_OWORD *)(v106 + 24) = *(_OWORD *)&v421[24];
          *(_QWORD *)&v421[24] = 0;
          *(_QWORD *)&v421[32] = 0;
          *((_QWORD *)v106 + 5) = v108;
          *((_QWORD *)v106 + 6) = v107;
          v106[56] = 1;
          v415 = 0;
          v416 = (std::__shared_weak_count_vtbl *)v106;
          (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v70 + 24) + 40))(*(_QWORD *)(v70 + 24), &v416);
          v109 = v416;
          v416 = 0;
          if (v109)
          {
            on_zero_shared_weak = (std::__shared_weak_count *)v109->__on_zero_shared_weak;
            if (on_zero_shared_weak)
            {
              v111 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
                std::__shared_weak_count::__release_weak(on_zero_shared_weak);
              }
            }
            on_zero_shared = (std::__shared_weak_count *)v109->__on_zero_shared;
            if (on_zero_shared)
            {
              v114 = (unint64_t *)&on_zero_shared->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
                std::__shared_weak_count::__release_weak(on_zero_shared);
              }
            }
            MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
            v116 = v415;
            v415 = 0;
            if (v116)
            {
              v117 = *(std::__shared_weak_count **)(v116 + 32);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              v120 = *(std::__shared_weak_count **)(v116 + 16);
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
            }
          }
          v123 = *(std::__shared_weak_count **)&v421[32];
          if (*(_QWORD *)&v421[32])
          {
            v124 = (unint64_t *)(*(_QWORD *)&v421[32] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v126 = *(std::__shared_weak_count **)&v421[16];
          if (*(_QWORD *)&v421[16])
          {
            v127 = (unint64_t *)(*(_QWORD *)&v421[16] + 8);
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
        }
        else
        {
          os_log_type_enabled(v93, OS_LOG_TYPE_INFO);
          *(_DWORD *)v421 = 134218240;
          *(_QWORD *)&v421[4] = v96;
          *(_WORD *)&v421[12] = 2048;
          *(_QWORD *)&v421[14] = &__src[-v387];
          v129 = (void *)_os_log_send_and_compose_impl();
          if (v129)
            free(v129);
        }
        if (!v385)
          goto LABEL_140;
        v130 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 56) + 32 * v20);
        v132 = *v130;
        v131 = v130[1];
        v133 = (*a2)[v20];
        if (*(_BYTE *)(v133 + 184))
        {
          v135 = *(_QWORD *)(v133 + 80);
          v134 = *(_QWORD *)(v133 + 88);
          v136 = v134 - v135;
          _ZF = v134 != v135 && v136 == *(_QWORD *)(v133 + 168) - *(_QWORD *)(v133 + 160);
          if (!_ZF)
          {
LABEL_137:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v138 = (uint64_t)(*(_QWORD *)(v133 + 64) - *(_QWORD *)(v133 + 56)) >> 5;
            v139 = *(_QWORD *)(v133 + 16);
            goto LABEL_139;
          }
        }
        else
        {
          if (*(_QWORD *)(v133 + 160) != *(_QWORD *)(v133 + 168))
            goto LABEL_137;
          v136 = *(_QWORD *)(v133 + 88) - *(_QWORD *)(v133 + 80);
        }
        v138 = (uint64_t)(*(_QWORD *)(v133 + 64) - *(_QWORD *)(v133 + 56)) >> 5;
        v139 = *(_QWORD *)(v133 + 16);
        if (v138 != v136 >> 6 || v139 > v138)
          goto LABEL_137;
LABEL_139:
        sub_20E8C003C((uint64_t)&__p, "[Features Tracking] Found %zu/%zu stereo-matches after refinement", (v131 - v132) >> 3, v138 - v139);
        sub_20E863570((uint64_t)&__p);
LABEL_140:
        sub_20E863570((uint64_t)&__p);
        v141 = v411;
        if (v411)
        {
          v142 = (unint64_t *)&v411->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
LABEL_15:
        v20 = ++v21;
      }
      while (0x6FB586FB586FB587 * ((uint64_t)(a9[1] - *a9) >> 3) > (unint64_t)v21);
    }
  }
  v144 = (int **)(a1 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a1 + 696);
  if (a11[8])
  {
    if (v144 != (int **)(*(_QWORD *)a11 + 104))
      sub_20F0E80A4(v144, *(char **)(*(_QWORD *)a11 + 104), *(char **)(*(_QWORD *)a11 + 112), (uint64_t)(*(_QWORD *)(*(_QWORD *)a11 + 112) - *(_QWORD *)(*(_QWORD *)a11 + 104)) >> 2);
  }
  else
  {
    v145 = *(int **)(a1 + 480);
    v146 = *(uint64_t **)(a1 + 496);
    v147 = *(_QWORD *)(a1 + 544);
    v148 = *(int ***)(v147 + 32);
    v149 = (*(_QWORD *)(*(_QWORD *)(v147 + 8) + 8) - **(_QWORD **)(v147 + 8)) >> 4;
    v421[0] = 0;
    v421[8] = 0;
    sub_20F13FD34(v145, v144, v146, v148, v149, (uint64_t)v421);
  }
  sub_20F143DC4(&v412);
  if (**(int **)(v412 + 56) <= 3)
  {
    v150 = *(unsigned __int8 *)(v412 + 72);
    v151 = sub_20E8C31DC(v412, "OSLogSurrogateAppender", 1, 0);
    v152 = v151;
    if (v150 || v151)
    {
      __p = &v412;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v405 = std::chrono::system_clock::now().__d_.__rep_;
      v406 = 3;
      v407 = "unknown file";
      v408 = 714;
      v410 = 0;
      v411 = 0;
      v409 = "unknown function";
      v153 = **a2;
      if (*(_BYTE *)(v153 + 184))
      {
        v154 = *(_QWORD *)(v153 + 88) - *(_QWORD *)(v153 + 80);
        if (!v154
          || v154 != *(_QWORD *)(v153 + 168) - *(_QWORD *)(v153 + 160)
          || (v155 = (uint64_t)(*(_QWORD *)(v153 + 64) - *(_QWORD *)(v153 + 56)) >> 5, v155 != v154 >> 6))
        {
LABEL_165:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v155 = (uint64_t)(*(_QWORD *)(v153 + 64) - *(_QWORD *)(v153 + 56)) >> 5;
          v156 = *(_QWORD *)(v153 + 16);
LABEL_167:
          v400 = v156;
          v157 = *(uint64_t **)(*(_QWORD *)(a1 + 544) + 32);
          v158 = *(_QWORD *)__p;
          v159 = (const char *)(*(_QWORD *)__p + 16);
          v388 = v159;
          v394 = v152;
          if (*(char *)(*(_QWORD *)__p + 39) < 0)
          {
            v159 = *(const char **)(v158 + 16);
            v160 = *(_QWORD *)(v158 + 24);
            v396 = (int **)(a1 + 648);
            v161 = *v157;
            v162 = v157[1];
            v164 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v164 & 1) != 0)
              goto LABEL_171;
          }
          else
          {
            v160 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
            v396 = (int **)(a1 + 648);
            v161 = *v157;
            v162 = v157[1];
            v163 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v163 & 1) != 0)
              goto LABEL_171;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v421);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v421);
            if (v421[24] && (v421[23] & 0x80000000) != 0)
              operator delete(*(void **)v421);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_171:
          if (byte_254A4A4F8[23] >= 0)
            v165 = byte_254A4A4F8;
          else
            v165 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v166 = byte_254A4A4F8[23];
          else
            v166 = *(_QWORD *)&byte_254A4A4F8[8];
          __srca = v159;
          *(_QWORD *)v421 = os_log_create(v165, v159);
          v167 = &v421[8];
          if (v166 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v168 = v150;
          if (v166 >= 0x17)
          {
            v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v166 | 7) != 0x17)
              v169 = v166 | 7;
            v170 = v169 + 1;
            v167 = operator new(v169 + 1);
            *(_QWORD *)&v421[16] = v166;
            *(_QWORD *)&v421[24] = v170 | 0x8000000000000000;
            *(_QWORD *)&v421[8] = v167;
            v168 = v150;
          }
          else
          {
            v421[31] = v166;
            if (!v166)
            {
LABEL_185:
              v167[v166] = 0;
              v421[32] = 1;
              v171 = &v421[40];
              if (v160 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v160 >= 0x17)
              {
                v173 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v160 | 7) != 0x17)
                  v173 = v160 | 7;
                v174 = v173 + 1;
                v171 = operator new(v173 + 1);
                *(_QWORD *)&v422.f64[0] = v160;
                *(_QWORD *)&v422.f64[1] = v174 | 0x8000000000000000;
                *(_QWORD *)&v421[40] = v171;
              }
              else
              {
                HIBYTE(v422.f64[1]) = v160;
                if (!v160)
                {
                  v421[40] = 0;
                  LOBYTE(v423) = 1;
                  v172 = *(NSObject **)v421;
                  if ((SHIBYTE(v422.f64[1]) & 0x80000000) == 0)
                    goto LABEL_189;
                  goto LABEL_195;
                }
              }
              memmove(v171, __srca, v160);
              v171[v160] = 0;
              LOBYTE(v423) = 1;
              v172 = *(NSObject **)v421;
              if ((SHIBYTE(v422.f64[1]) & 0x80000000) == 0)
              {
LABEL_189:
                if (!v421[32])
                  goto LABEL_198;
                goto LABEL_196;
              }
LABEL_195:
              operator delete(*(void **)&v421[40]);
              if (!v421[32])
                goto LABEL_198;
LABEL_196:
              if ((v421[31] & 0x80000000) != 0)
                operator delete(*(void **)&v421[8]);
LABEL_198:
              if (*(_QWORD *)v421)
                os_release(*(void **)v421);
              v175 = v155 - v400;
              v176 = (v162 - v161) >> 3;
              if (v394 && *(_QWORD *)(v394 + 24))
              {
                v177 = _os_log_pack_size();
                v178 = (std::__shared_weak_count_vtbl *)operator new(v177, (std::align_val_t)8uLL);
                v179 = v168;
                v180 = (std::__shared_weak_count *)operator new();
                v180->__shared_owners_ = 0;
                v181 = (unint64_t *)&v180->__shared_owners_;
                v180->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v180->__shared_weak_owners_ = 0;
                v180[1].__vftable = v178;
                v416 = v178;
                v417 = v178;
                v419 = 0;
                v420 = 0;
                v418 = v180;
                v182 = (std::__shared_weak_count *)operator new(0x40uLL);
                v183 = v182;
                v182->__shared_owners_ = 0;
                v184 = (unint64_t *)&v182->__shared_owners_;
                v182->__shared_weak_owners_ = 0;
                v182[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9F9148;
                v182->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F90F8;
                v182[1].__shared_owners_ = 0x746E696F70;
                HIBYTE(v182[2].__vftable) = 5;
                v419 = v182 + 1;
                v420 = v182;
                *(_QWORD *)v421 = v178;
                *(_QWORD *)&v421[8] = v178;
                *(_QWORD *)&v421[16] = v180;
                do
                  v185 = __ldxr(v181);
                while (__stxr(v185 + 1, v181));
                *(_QWORD *)&v421[24] = v182 + 1;
                *(_QWORD *)&v421[32] = v182;
                do
                  v186 = __ldxr(v184);
                while (__stxr(v186 + 1, v184));
                *(_QWORD *)&v421[40] = v182 + 1;
                v168 = v179;
                do
                  v187 = __ldaxr(v184);
                while (__stlxr(v187 - 1, v184));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v183);
                }
                v188 = v418;
                if (v418)
                {
                  v189 = (unint64_t *)&v418->__shared_owners_;
                  do
                    v190 = __ldaxr(v189);
                  while (__stlxr(v190 - 1, v189));
                  if (!v190)
                  {
                    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                    std::__shared_weak_count::__release_weak(v188);
                  }
                }
                v191 = *(_QWORD *)v421;
                if (*(char *)(*(_QWORD *)&v421[40] + 31) >= 0)
                  v192 = *(_QWORD *)&v421[40] + 8;
                else
                  v192 = *(_QWORD *)(*(_QWORD *)&v421[40] + 8);
                v193 = _os_log_pack_fill();
                *(_DWORD *)v193 = 136315650;
                *(_QWORD *)(v193 + 4) = v192;
                *(_WORD *)(v193 + 12) = 2048;
                *(_QWORD *)(v193 + 14) = v175;
                *(_WORD *)(v193 + 22) = 2048;
                *(_QWORD *)(v193 + 24) = v176;
                v194 = (char *)operator new();
                v195 = *(unsigned __int8 *)(v158 + 39);
                v196 = v388;
                if ((v195 & 0x80u) != 0)
                {
                  v196 = *(const char **)(v158 + 16);
                  v195 = *(_QWORD *)(v158 + 24);
                }
                *(_QWORD *)v194 = v191;
                *(_OWORD *)(v194 + 8) = *(_OWORD *)&v421[8];
                *(_QWORD *)&v421[8] = 0;
                *(_QWORD *)&v421[16] = 0;
                *(_OWORD *)(v194 + 24) = *(_OWORD *)&v421[24];
                *(_QWORD *)&v421[24] = 0;
                *(_QWORD *)&v421[32] = 0;
                *((_QWORD *)v194 + 5) = v196;
                *((_QWORD *)v194 + 6) = v195;
                v194[56] = 1;
                v415 = 0;
                v416 = (std::__shared_weak_count_vtbl *)v194;
                (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v394 + 24) + 40))(*(_QWORD *)(v394 + 24), &v416);
                v197 = v416;
                v416 = 0;
                v144 = v396;
                if (v197)
                {
                  v198 = (std::__shared_weak_count *)v197->__on_zero_shared_weak;
                  if (v198)
                  {
                    v199 = (unint64_t *)&v198->__shared_owners_;
                    do
                      v200 = __ldaxr(v199);
                    while (__stlxr(v200 - 1, v199));
                    if (!v200)
                    {
                      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                      std::__shared_weak_count::__release_weak(v198);
                    }
                  }
                  v201 = (std::__shared_weak_count *)v197->__on_zero_shared;
                  if (v201)
                  {
                    v202 = (unint64_t *)&v201->__shared_owners_;
                    do
                      v203 = __ldaxr(v202);
                    while (__stlxr(v203 - 1, v202));
                    if (!v203)
                    {
                      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                      std::__shared_weak_count::__release_weak(v201);
                    }
                  }
                  MEMORY[0x212BC6398](v197, 0x10F0C40B62ED6C6);
                  v204 = v415;
                  v415 = 0;
                  if (v204)
                  {
                    v205 = *(std::__shared_weak_count **)(v204 + 32);
                    if (v205)
                    {
                      v206 = (unint64_t *)&v205->__shared_owners_;
                      do
                        v207 = __ldaxr(v206);
                      while (__stlxr(v207 - 1, v206));
                      if (!v207)
                      {
                        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                        std::__shared_weak_count::__release_weak(v205);
                      }
                    }
                    v208 = *(std::__shared_weak_count **)(v204 + 16);
                    if (v208)
                    {
                      v209 = (unint64_t *)&v208->__shared_owners_;
                      do
                        v210 = __ldaxr(v209);
                      while (__stlxr(v210 - 1, v209));
                      if (!v210)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                    MEMORY[0x212BC6398](v204, 0x10F0C40B62ED6C6);
                  }
                }
                v211 = *(std::__shared_weak_count **)&v421[32];
                if (*(_QWORD *)&v421[32])
                {
                  v212 = (unint64_t *)(*(_QWORD *)&v421[32] + 8);
                  do
                    v213 = __ldaxr(v212);
                  while (__stlxr(v213 - 1, v212));
                  if (!v213)
                  {
                    ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                    std::__shared_weak_count::__release_weak(v211);
                  }
                }
                v214 = *(std::__shared_weak_count **)&v421[16];
                if (*(_QWORD *)&v421[16])
                {
                  v215 = (unint64_t *)(*(_QWORD *)&v421[16] + 8);
                  do
                    v216 = __ldaxr(v215);
                  while (__stlxr(v216 - 1, v215));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v172, OS_LOG_TYPE_INFO);
                *(_DWORD *)v421 = 136315650;
                *(_QWORD *)&v421[4] = "point";
                *(_WORD *)&v421[12] = 2048;
                *(_QWORD *)&v421[14] = v175;
                *(_WORD *)&v421[22] = 2048;
                *(_QWORD *)&v421[24] = (v162 - v161) >> 3;
                v217 = (void *)_os_log_send_and_compose_impl();
                v144 = v396;
                if (v217)
                  free(v217);
              }
              if (!v168)
                goto LABEL_272;
              v218 = **a2;
              if (*(_BYTE *)(v218 + 184))
              {
                v220 = *(_QWORD *)(v218 + 80);
                v219 = *(_QWORD *)(v218 + 88);
                v221 = v219 - v220;
                if (v219 == v220 || v221 != *(_QWORD *)(v218 + 168) - *(_QWORD *)(v218 + 160))
                  goto LABEL_269;
              }
              else
              {
                if (*(_QWORD *)(v218 + 160) != *(_QWORD *)(v218 + 168))
                  goto LABEL_269;
                v221 = *(_QWORD *)(v218 + 88) - *(_QWORD *)(v218 + 80);
              }
              v223 = (uint64_t)(*(_QWORD *)(v218 + 64) - *(_QWORD *)(v218 + 56)) >> 5;
              v224 = *(_QWORD *)(v218 + 16);
              if (v223 == v221 >> 6 && v224 <= v223)
              {
LABEL_271:
                sub_20E8C003C((uint64_t)&__p, "[VFusionTracker] Primary: %s: %zu features, %zu matches", "point", v223 - v224, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 32) + 8)- **(_QWORD **)(*(_QWORD *)(a1 + 544) + 32)) >> 3);
                sub_20E863570((uint64_t)&__p);
LABEL_272:
                sub_20E863570((uint64_t)&__p);
                v226 = v411;
                if (v411)
                {
                  v227 = (unint64_t *)&v411->__shared_owners_;
                  do
                    v228 = __ldaxr(v227);
                  while (__stlxr(v228 - 1, v227));
                  if (!v228)
                  {
                    ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                    std::__shared_weak_count::__release_weak(v226);
                  }
                }
                goto LABEL_277;
              }
LABEL_269:
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v223 = (uint64_t)(*(_QWORD *)(v218 + 64) - *(_QWORD *)(v218 + 56)) >> 5;
              v224 = *(_QWORD *)(v218 + 16);
              goto LABEL_271;
            }
          }
          memmove(v167, v165, v166);
          goto LABEL_185;
        }
      }
      else
      {
        if (*(_QWORD *)(v153 + 160) != *(_QWORD *)(v153 + 168))
          goto LABEL_165;
        v155 = (uint64_t)(*(_QWORD *)(v153 + 64) - *(_QWORD *)(v153 + 56)) >> 5;
        if (v155 != (uint64_t)(*(_QWORD *)(v153 + 88) - *(_QWORD *)(v153 + 80)) >> 6)
          goto LABEL_165;
      }
      v156 = *(_QWORD *)(v153 + 16);
      if (v156 <= v155)
        goto LABEL_167;
      goto LABEL_165;
    }
  }
LABEL_277:
  v401 = (char **)(a1 + 696);
  if ((unint64_t)((char *)a2[1] - (char *)*a2) < 9)
    goto LABEL_461;
  sub_20F143DC4(&v412);
  v229 = a11;
  if (**(int **)(v412 + 56) > 3)
    goto LABEL_406;
  v230 = *(unsigned __int8 *)(v412 + 72);
  v231 = sub_20E8C31DC(v412, "OSLogSurrogateAppender", 1, 0);
  v232 = v231;
  if (!v230 && !v231)
    goto LABEL_406;
  __p = &v412;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v405 = std::chrono::system_clock::now().__d_.__rep_;
  v406 = 3;
  v407 = "unknown file";
  v408 = 725;
  v410 = 0;
  v411 = 0;
  v409 = "unknown function";
  v233 = (*a2)[1];
  if (*(_BYTE *)(v233 + 184))
  {
    v234 = *(_QWORD *)(v233 + 88) - *(_QWORD *)(v233 + 80);
    if (v234)
      v235 = v234 == *(_QWORD *)(v233 + 168) - *(_QWORD *)(v233 + 160);
    else
      v235 = 0;
    if (!v235)
      goto LABEL_294;
  }
  else
  {
    if (*(_QWORD *)(v233 + 160) != *(_QWORD *)(v233 + 168))
      goto LABEL_294;
    v234 = *(_QWORD *)(v233 + 88) - *(_QWORD *)(v233 + 80);
  }
  v236 = (uint64_t)(*(_QWORD *)(v233 + 64) - *(_QWORD *)(v233 + 56)) >> 5;
  if (v236 == v234 >> 6 && *(_QWORD *)(v233 + 16) <= v236)
  {
    v395 = *(_QWORD *)(v233 + 16);
    goto LABEL_296;
  }
LABEL_294:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v236 = (uint64_t)(*(_QWORD *)(v233 + 64) - *(_QWORD *)(v233 + 56)) >> 5;
  v395 = *(_QWORD *)(v233 + 16);
LABEL_296:
  v238 = *(_QWORD *)(a1 + 544);
  v239 = *(_QWORD *)(v238 + 56);
  v240 = *(_QWORD *)(v238 + 32);
  v241 = *(_QWORD *)__p;
  v242 = (const char *)(*(_QWORD *)__p + 16);
  v381 = v242;
  if (*(char *)(*(_QWORD *)__p + 39) < 0)
  {
    v242 = *(const char **)(v241 + 16);
    v243 = *(_QWORD *)(v241 + 24);
  }
  else
  {
    v243 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
  }
  v397 = v144;
  v389 = *(_QWORD *)(v239 + 32);
  __srcb = *(void **)(v239 + 40);
  v384 = *(_QWORD *)(v240 + 24);
  v386 = *(_QWORD *)(v240 + 32);
  v244 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v244 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v421);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v421);
    if (v421[24] && (v421[23] & 0x80000000) != 0)
      operator delete(*(void **)v421);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v245 = byte_254A4A4F8;
  else
    v245 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v246 = byte_254A4A4F8[23];
  else
    v246 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v421 = os_log_create(v245, v242);
  v247 = &v421[8];
  if (v246 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v246 >= 0x17)
  {
    v248 = v232;
    v249 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v246 | 7) != 0x17)
      v249 = v246 | 7;
    v250 = v249 + 1;
    v247 = operator new(v249 + 1);
    *(_QWORD *)&v421[16] = v246;
    *(_QWORD *)&v421[24] = v250 | 0x8000000000000000;
    *(_QWORD *)&v421[8] = v247;
    v232 = v248;
    goto LABEL_313;
  }
  v421[31] = v246;
  if (v246)
LABEL_313:
    memmove(v247, v245, v246);
  v247[v246] = 0;
  v421[32] = 1;
  v251 = &v421[40];
  if (v243 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v243 >= 0x17)
  {
    v252 = v232;
    v253 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v243 | 7) != 0x17)
      v253 = v243 | 7;
    v254 = v253 + 1;
    v251 = operator new(v253 + 1);
    *(_QWORD *)&v422.f64[0] = v243;
    *(_QWORD *)&v422.f64[1] = v254 | 0x8000000000000000;
    *(_QWORD *)&v421[40] = v251;
    v232 = v252;
    goto LABEL_321;
  }
  HIBYTE(v422.f64[1]) = v243;
  if (v243)
LABEL_321:
    memmove(v251, v242, v243);
  v251[v243] = 0;
  LOBYTE(v423) = 1;
  v255 = *(NSObject **)v421;
  if (SHIBYTE(v422.f64[1]) < 0)
    operator delete(*(void **)&v421[40]);
  if (v421[32] && (v421[31] & 0x80000000) != 0)
    operator delete(*(void **)&v421[8]);
  if (*(_QWORD *)v421)
    os_release(*(void **)v421);
  if (v232 && *(_QWORD *)(v232 + 24))
  {
    v256 = _os_log_pack_size();
    v257 = (std::__shared_weak_count_vtbl *)operator new(v256, (std::align_val_t)8uLL);
    v258 = (std::__shared_weak_count *)operator new();
    v258->__shared_owners_ = 0;
    v259 = (unint64_t *)&v258->__shared_owners_;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v257;
    v416 = v257;
    v417 = v257;
    v419 = 0;
    v420 = 0;
    v418 = v258;
    v260 = (std::__shared_weak_count *)operator new(0x40uLL);
    v261 = v260;
    v260->__shared_owners_ = 0;
    v262 = (unint64_t *)&v260->__shared_owners_;
    v260->__shared_weak_owners_ = 0;
    v260[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C9F91D0;
    v260->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9180;
    v260[1].__shared_owners_ = 0x746E696F70;
    HIBYTE(v260[2].__vftable) = 5;
    v419 = v260 + 1;
    v420 = v260;
    *(_QWORD *)v421 = v257;
    *(_QWORD *)&v421[8] = v257;
    *(_QWORD *)&v421[16] = v258;
    do
      v263 = __ldxr(v259);
    while (__stxr(v263 + 1, v259));
    *(_QWORD *)&v421[24] = v260 + 1;
    *(_QWORD *)&v421[32] = v260;
    do
      v264 = __ldxr(v262);
    while (__stxr(v264 + 1, v262));
    *(_QWORD *)&v421[40] = v260 + 1;
    do
      v265 = __ldaxr(v262);
    while (__stlxr(v265 - 1, v262));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v261);
    }
    v266 = v418;
    if (v418)
    {
      v267 = (unint64_t *)&v418->__shared_owners_;
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
    v269 = *(_QWORD *)v421;
    if (*(char *)(*(_QWORD *)&v421[40] + 31) >= 0)
      v270 = *(_QWORD *)&v421[40] + 8;
    else
      v270 = *(_QWORD *)(*(_QWORD *)&v421[40] + 8);
    v271 = _os_log_pack_fill();
    *(_DWORD *)v271 = 136315906;
    *(_QWORD *)(v271 + 4) = v270;
    *(_WORD *)(v271 + 12) = 2048;
    *(_QWORD *)(v271 + 14) = v236 - v395;
    *(_WORD *)(v271 + 22) = 2048;
    *(_QWORD *)(v271 + 24) = ((uint64_t)__srcb - v389) >> 3;
    *(_WORD *)(v271 + 32) = 2048;
    *(_QWORD *)(v271 + 34) = (v386 - v384) >> 3;
    v272 = (char *)operator new();
    v273 = *(unsigned __int8 *)(v241 + 39);
    v274 = v381;
    if ((v273 & 0x80u) != 0)
    {
      v274 = *(const char **)(v241 + 16);
      v273 = *(_QWORD *)(v241 + 24);
    }
    *(_QWORD *)v272 = v269;
    *(_OWORD *)(v272 + 8) = *(_OWORD *)&v421[8];
    *(_QWORD *)&v421[8] = 0;
    *(_QWORD *)&v421[16] = 0;
    *(_OWORD *)(v272 + 24) = *(_OWORD *)&v421[24];
    *(_QWORD *)&v421[24] = 0;
    *(_QWORD *)&v421[32] = 0;
    *((_QWORD *)v272 + 5) = v274;
    *((_QWORD *)v272 + 6) = v273;
    v272[56] = 1;
    v415 = 0;
    v416 = (std::__shared_weak_count_vtbl *)v272;
    (*(void (**)(_QWORD, std::__shared_weak_count_vtbl **))(**(_QWORD **)(v232 + 24) + 40))(*(_QWORD *)(v232 + 24), &v416);
    v275 = v416;
    v416 = 0;
    v144 = v397;
    v229 = a11;
    if (v275)
    {
      v276 = (std::__shared_weak_count *)v275->__on_zero_shared_weak;
      if (v276)
      {
        v277 = (unint64_t *)&v276->__shared_owners_;
        do
          v278 = __ldaxr(v277);
        while (__stlxr(v278 - 1, v277));
        if (!v278)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
      v279 = (std::__shared_weak_count *)v275->__on_zero_shared;
      if (v279)
      {
        v280 = (unint64_t *)&v279->__shared_owners_;
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
        }
      }
      MEMORY[0x212BC6398](v275, 0x10F0C40B62ED6C6);
      v282 = v415;
      v415 = 0;
      if (v282)
      {
        v283 = *(std::__shared_weak_count **)(v282 + 32);
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v286 = *(std::__shared_weak_count **)(v282 + 16);
        if (v286)
        {
          v287 = (unint64_t *)&v286->__shared_owners_;
          do
            v288 = __ldaxr(v287);
          while (__stlxr(v288 - 1, v287));
          if (!v288)
          {
            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
            std::__shared_weak_count::__release_weak(v286);
          }
        }
        MEMORY[0x212BC6398](v282, 0x10F0C40B62ED6C6);
      }
    }
    v289 = *(std::__shared_weak_count **)&v421[32];
    v290 = v230;
    if (*(_QWORD *)&v421[32])
    {
      v291 = (unint64_t *)(*(_QWORD *)&v421[32] + 8);
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 - 1, v291));
      if (!v292)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    v293 = *(std::__shared_weak_count **)&v421[16];
    if (*(_QWORD *)&v421[16])
    {
      v294 = (unint64_t *)(*(_QWORD *)&v421[16] + 8);
      do
        v295 = __ldaxr(v294);
      while (__stlxr(v295 - 1, v294));
      if (!v295)
      {
        ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
        std::__shared_weak_count::__release_weak(v293);
      }
    }
  }
  else
  {
    os_log_type_enabled(v255, OS_LOG_TYPE_INFO);
    *(_DWORD *)v421 = 136315906;
    *(_QWORD *)&v421[4] = "point";
    *(_WORD *)&v421[12] = 2048;
    *(_QWORD *)&v421[14] = v236 - v395;
    *(_WORD *)&v421[22] = 2048;
    *(_QWORD *)&v421[24] = ((uint64_t)__srcb - v389) >> 3;
    *(_WORD *)&v421[32] = 2048;
    *(_QWORD *)&v421[34] = (v386 - v384) >> 3;
    v296 = (void *)_os_log_send_and_compose_impl();
    v144 = v397;
    v229 = a11;
    v290 = v230;
    if (v296)
      free(v296);
  }
  if (!v290)
    goto LABEL_401;
  v297 = (*a2)[1];
  if (*(_BYTE *)(v297 + 184))
  {
    v299 = *(_QWORD *)(v297 + 80);
    v298 = *(_QWORD *)(v297 + 88);
    v300 = v298 - v299;
    if (v298 == v299 || v300 != *(_QWORD *)(v297 + 168) - *(_QWORD *)(v297 + 160))
      goto LABEL_398;
  }
  else
  {
    if (*(_QWORD *)(v297 + 160) != *(_QWORD *)(v297 + 168))
    {
LABEL_398:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v302 = (uint64_t)(*(_QWORD *)(v297 + 64) - *(_QWORD *)(v297 + 56)) >> 5;
      v303 = *(_QWORD *)(v297 + 16);
      goto LABEL_400;
    }
    v300 = *(_QWORD *)(v297 + 88) - *(_QWORD *)(v297 + 80);
  }
  v302 = (uint64_t)(*(_QWORD *)(v297 + 64) - *(_QWORD *)(v297 + 56)) >> 5;
  v303 = *(_QWORD *)(v297 + 16);
  if (v302 != v300 >> 6 || v303 > v302)
    goto LABEL_398;
LABEL_400:
  sub_20E8C003C((uint64_t)&__p, "Secondary: %s: %zu features, %zu stereo matches and %zu across-time matches", "point", v302 - v303, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 56) + 40)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 56) + 32)) >> 3, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 32) + 32)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 32) + 24)) >> 3);
  sub_20E863570((uint64_t)&__p);
LABEL_401:
  sub_20E863570((uint64_t)&__p);
  v305 = v411;
  if (v411)
  {
    v306 = (unint64_t *)&v411->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
LABEL_406:
  if (v229[8])
  {
    v308 = *(_QWORD *)v229 + 128;
    _ZF = *(_BYTE *)(*(_QWORD *)v229 + 152) == 0;
    v309 = *(_BYTE *)(*(_QWORD *)v229 + 152) == 0;
    if (_ZF)
      v310 = 0;
    else
      v310 = (_QWORD *)v308;
  }
  else
  {
    v310 = 0;
    v309 = 1;
  }
  v311 = *(_QWORD *)(a1 + 544);
  v312 = *(_QWORD *)(v311 + 56);
  v313 = (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v311 + 8) + 32) - *(_QWORD *)(*(_QWORD *)(v311 + 8) + 24)) >> 4);
  *(_DWORD *)v421 = -1;
  v314 = *(_QWORD *)(a1 + 696);
  v315 = (*(_QWORD *)(a1 + 704) - v314) >> 2;
  if (v313 <= v315)
  {
    if (v313 < v315)
      *(_QWORD *)(a1 + 704) = v314 + 4 * v313;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)v401, v313 - v315, (const float *)v421);
  }
  v316 = (int **)(a1 + 672);
  v317 = *(int **)(v312 + 32);
  v318 = *(int **)(v312 + 40);
  if (v317 != v318)
  {
    v319 = *v144;
    v320 = *v401;
    if (v309)
    {
      do
      {
        v321 = v319[v317[1]];
        if (v321 != -1)
          *(_DWORD *)&v320[4 * *v317] = v321;
        v317 += 2;
      }
      while (v317 != v318);
    }
    else
    {
      do
      {
        v323 = v317[1];
        v324 = v319[v323];
        if (v324 == -1)
          v324 = *(_DWORD *)(*v310 + 4 * v323);
        v322 = *v317;
        v317 += 2;
        *(_DWORD *)&v320[4 * v322] = v324;
      }
      while (v317 != v318);
    }
  }
  if (!*(_BYTE *)(a1 + 107))
  {
    v339 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 8) + 32)
                   - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 544) + 8) + 24)) >> 4;
    *(_DWORD *)v421 = -1;
    v340 = *(_QWORD *)(a1 + 672);
    v341 = (*(_QWORD *)(a1 + 680) - v340) >> 2;
    _CF = v339 >= v341;
    v343 = v339 - v341;
    if (v343 != 0 && _CF)
    {
      sub_20EDDCBD0((uint64_t)v316, v343, (const float *)v421);
    }
    else if (!_CF)
    {
      *(_QWORD *)(a1 + 680) = v340 + 4 * v339;
    }
    goto LABEL_461;
  }
  v325 = *(int **)(a1 + 480);
  v326 = (uint64_t *)(*(_QWORD *)(a1 + 496) + 24);
  v327 = *(_QWORD *)(a1 + 544);
  v328 = (int **)(*(_QWORD *)(v327 + 32) + 24);
  v329 = (*(_QWORD *)(*(_QWORD *)(v327 + 8) + 32) - *(_QWORD *)(*(_QWORD *)(v327 + 8) + 24)) >> 4;
  v421[0] = 0;
  v421[8] = 0;
  sub_20F13FD34(v325, v316, v326, v328, v329, (uint64_t)v421);
  v330 = *(_QWORD *)(a1 + 680);
  v331 = *(_QWORD *)(a1 + 672);
  v332 = v330 - v331;
  if (v330 - v331 != *(_QWORD *)(a1 + 704) - *(_QWORD *)(a1 + 696))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 747, (uint64_t)"curr_to_prev_track_ids_[1].size() == sec_to_pri_track_ids_.size()", 65, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v330 = *(_QWORD *)(a1 + 680);
    v331 = *(_QWORD *)(a1 + 672);
    v332 = v330 - v331;
  }
  if (v330 == v331)
    goto LABEL_461;
  v333 = v332 >> 2;
  v334 = *v401;
  if (v333 <= 1)
    v335 = 1;
  else
    v335 = v333;
  if (v335 < 0x10)
  {
    v336 = 0;
    v337 = 0;
    goto LABEL_434;
  }
  v337 = 0;
  v336 = 0;
  if (v333 <= 1)
    v344 = 1;
  else
    v344 = v333;
  v345 = v344 - 1;
  if ((_DWORD)v345 == -1 || HIDWORD(v345) || (unint64_t)(v331 - (_QWORD)v334) < 0x10)
    goto LABEL_434;
  v336 = v335 & 0xFFFFFFFFFFFFFFFCLL;
  v337 = v335 & 0xFFFFFFFC;
  v346 = (int32x2_t *)(v334 + 8);
  v347 = (_DWORD *)(v331 + 8);
  v348 = v335 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v350 = v346[-1];
    v349 = *v346;
    if ((vmvn_s8((int8x8_t)vceq_s32(v350, (int32x2_t)-1)).u8[0] & 1) != 0)
    {
      *(v347 - 2) = -1;
      if ((vmvn_s8((int8x8_t)vceq_s32(v350, (int32x2_t)-1)).i32[1] & 1) == 0)
        goto LABEL_451;
    }
    else if ((vmvn_s8((int8x8_t)vceq_s32(v350, (int32x2_t)-1)).i32[1] & 1) == 0)
    {
LABEL_451:
      if ((vmvn_s8((int8x8_t)vceq_s32(v349, (int32x2_t)-1)).u8[0] & 1) == 0)
        goto LABEL_456;
      goto LABEL_452;
    }
    *(v347 - 1) = -1;
    if ((vmvn_s8((int8x8_t)vceq_s32(v349, (int32x2_t)-1)).u8[0] & 1) == 0)
    {
LABEL_456:
      if ((vmvn_s8((int8x8_t)vceq_s32(v349, (int32x2_t)-1)).i32[1] & 1) == 0)
        goto LABEL_448;
      goto LABEL_457;
    }
LABEL_452:
    *v347 = -1;
    if ((vmvn_s8((int8x8_t)vceq_s32(v349, (int32x2_t)-1)).i32[1] & 1) == 0)
      goto LABEL_448;
LABEL_457:
    v347[1] = -1;
LABEL_448:
    v346 += 2;
    v347 += 4;
    v348 -= 4;
  }
  while (v348);
  if (v335 == v336)
    goto LABEL_461;
LABEL_434:
  v338 = v337 + 1;
  do
  {
    if (*(_DWORD *)&v334[4 * v336] != -1)
      *(_DWORD *)(v331 + 4 * v336) = -1;
    v336 = v338++;
  }
  while (v333 > v336);
LABEL_461:
  v351 = *(_OWORD *)(a1 + 520);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 496) = v351;
  v352 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v352;
  if (a2[1] != *a2)
  {
    v353 = *a9;
    v354 = *a9 + 24;
    v355 = *(_QWORD **)(a1 + 544);
    v356 = (char **)v355[1];
    if ((char **)v354 != v356)
    {
      sub_20E9BF954((_QWORD *)(*a9 + 24), *v356, v356[1], (v356[1] - *v356) >> 4);
      v355 = *(_QWORD **)(a1 + 544);
    }
    v357 = (char **)v355[4];
    if ((char **)(v353 + 72) != v357)
    {
      sub_20E86811C((_QWORD *)(v353 + 72), *v357, v357[1], (v357[1] - *v357) >> 3);
      v355 = *(_QWORD **)(a1 + 544);
    }
    v358 = (char **)v355[10];
    if ((char **)(v353 + 184) != v358)
      sub_20E86811C((_QWORD *)(v353 + 184), *v358, v358[1], (v358[1] - *v358) >> 3);
    if ((int **)(v353 + 128) != v144)
      sub_20F0E80A4((_QWORD *)(v353 + 128), *(char **)(a1 + 648), *(char **)(a1 + 656), (uint64_t)(*(_QWORD *)(a1 + 656) - *(_QWORD *)(a1 + 648)) >> 2);
    v359 = *(_QWORD **)(a1 + 496);
    if (v359 != (_QWORD *)(v353 + 128))
      sub_20F0E80A4(v359, *(char **)(v353 + 128), *(char **)(v353 + 136), (uint64_t)(*(_QWORD *)(v353 + 136) - *(_QWORD *)(v353 + 128)) >> 2);
    if ((sub_20F14BA98(v354, *(unsigned __int8 *)(a1 + 107), a11[8]) & 1) == 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 788, (uint64_t)"observation_sample.IsValid(config_.enable_secondary_camera_feature_tracking, precomputed_pri_feature_samples.has_value())", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_489;
    }
    if ((unint64_t)((char *)a2[1] - (char *)*a2) >= 9)
    {
      v360 = 0;
      v361 = 1;
      for (i = 672; ; i += 24)
      {
        v363 = *a9;
        v364 = *a9 + v360;
        v365 = v364 + 464;
        v366 = *(_QWORD **)(a1 + 544);
        v367 = v366[1];
        v368 = (char **)(v367 + 24 * v361);
        if ((char **)(v364 + 464) != v368)
        {
          v369 = *(char **)(v367 + 24 * v361 + 8);
          sub_20E9BF954((_QWORD *)(v364 + 464), *v368, v369, (v369 - *v368) >> 4);
          v366 = *(_QWORD **)(a1 + 544);
        }
        v370 = v366[4];
        v371 = (char **)(v370 + 24 * v361);
        if ((char **)(v364 + 512) != v371)
        {
          v372 = *(char **)(v370 + 24 * v361 + 8);
          sub_20E86811C((_QWORD *)(v364 + 512), *v371, v372, (v372 - *v371) >> 3);
          v366 = *(_QWORD **)(a1 + 544);
        }
        sub_20F14B8F0(v363 + v360 + 536, (char **)(v366[7] + 32));
        sub_20F14B9C4(v363 + v360 + 592, v401);
        v373 = *(_QWORD *)(*(_QWORD *)(a1 + 544) + 80);
        v374 = (char **)(v373 + 24 * v361);
        v375 = v363 + v360;
        v376 = (char **)(v363 + v360 + 624);
        if (v376 != v374)
        {
          v377 = *(char **)(v373 + 24 * v361 + 8);
          sub_20E86811C(v376, *v374, v377, (v377 - *v374) >> 3);
        }
        v378 = (char **)(v375 + 568);
        if (a1 + i != v375 + 568)
          sub_20F0E80A4((_QWORD *)(v375 + 568), *(char **)(a1 + i), *(char **)(a1 + i + 8), (uint64_t)(*(_QWORD *)(a1 + i + 8) - *(_QWORD *)(a1 + i)) >> 2);
        v379 = (char **)(*(_QWORD *)(a1 + 496) + i - 648);
        if (v379 != v378)
          sub_20F0E80A4(v379, *v378, *(char **)(v363 + v360 + 576), (uint64_t)(*(_QWORD *)(v363 + v360 + 576) - (_QWORD)*v378) >> 2);
        if ((sub_20F14BA98(v365, *(unsigned __int8 *)(a1 + 107), a11[8]) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTracker.cpp", 788, (uint64_t)"observation_sample.IsValid(config_.enable_secondary_camera_feature_tracking, precomputed_pri_feature_samples.has_value())", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          break;
        }
        ++v361;
        v360 += 440;
        if (v361 >= a2[1] - *a2)
          return;
      }
LABEL_489:
      abort();
    }
  }
}

void sub_20F14AC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (*(_BYTE *)(v31 - 168))
  {
    if (*(char *)(v31 - 169) < 0)
      operator delete(*(void **)(v31 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20E86E8C4((uint64_t *)(v31 - 232));
  sub_20E86E8C4((uint64_t *)(v31 - 240));
  sub_20E86E658(v31 - 192);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20E86E658(v31 - 192);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14ACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20E86E658(v31 - 232);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AD34()
{
  JUMPOUT(0x20F14AE78);
}

void sub_20F14AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  if (*(_BYTE *)(v31 - 160) && *(char *)(v31 - 161) < 0)
    operator delete(*(void **)(v31 - 184));
  v33 = *(void **)(v31 - 192);
  if (v33)
    os_release(v33);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14ADC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  if (*(_BYTE *)(v31 - 160) && *(char *)(v31 - 161) < 0)
    operator delete(*(void **)(v31 - 184));
  v33 = *(void **)(v31 - 192);
  if (v33)
    os_release(v33);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14ADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20E86E8C4((uint64_t *)(v31 - 232));
  sub_20E86E8C4((uint64_t *)(v31 - 240));
  sub_20E86E658(v31 - 192);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_20E86E658(v31 - 192);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  if (*(char *)(v31 - 161) < 0)
    operator delete(*(void **)(v31 - 184));
  v33 = *(void **)(v31 - 192);
  if (v33)
    os_release(v33);
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20F14AF18(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F14AF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E863714((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20F14AF60(_BYTE *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  _QWORD v25[3];
  const void *v26;
  uint64_t v27;
  const void *v28;
  unint64_t v29;
  void *v30;
  char v31;
  unint64_t v32;
  int v33;
  uint64_t v34;

  sub_20E863438((uint64_t)v24);
  v4 = *(_QWORD *)(*a2 + 48);
  if (v4 == *(_QWORD *)(*a2 + 56) || !*(_BYTE *)(v4 + 400))
  {
    v23 = 5;
    strcpy((char *)__p, "EMPTY");
  }
  else
  {
    sub_20E9F6A6C((unsigned int *)(v4 + 392));
  }
  v5 = sub_20E86A980(v25, (uint64_t)"@Camera ", 8);
  if (v23 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v23 >= 0)
    v7 = v23;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_20E86A980(v5, (uint64_t)v6, v7);
  sub_20E86A980(v8, (uint64_t)": ", 2);
  v9 = (uint64_t *)a2[1];
  v10 = *v9;
  v11 = v9[1];
  if (*v9 != v11)
  {
    do
    {
      v12 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v12, (uint64_t)" features, ", 11);
      v13 = (_QWORD *)std::ostream::operator<<();
      sub_20E86A980(v13, (uint64_t)" matches. ", 10);
      v10 += 440;
    }
    while (v10 != v11);
  }
  if ((v33 & 0x10) != 0)
  {
    v15 = v32;
    if (v32 < v29)
    {
      v32 = v29;
      v15 = v29;
    }
    v16 = v28;
    v14 = v15 - (_QWORD)v28;
    if (v15 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_32;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v14 = 0;
      a1[23] = 0;
      goto LABEL_26;
    }
    v16 = v26;
    v14 = v27 - (_QWORD)v26;
    if ((unint64_t)(v27 - (_QWORD)v26) >= 0x7FFFFFFFFFFFFFF8)
LABEL_32:
      sub_20E860B7C();
  }
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a1 + 1) = v14;
    *((_QWORD *)a1 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a1 = v19;
    a1 = v19;
    goto LABEL_25;
  }
  a1[23] = v14;
  if (v14)
LABEL_25:
    memmove(a1, v16, v14);
LABEL_26:
  a1[v14] = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  v24[0] = *MEMORY[0x24BEDB7F0];
  v20 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v25[0] = v20;
  v25[1] = MEMORY[0x24BEDB848] + 16;
  if (v31 < 0)
    operator delete(v30);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v34);
}

void sub_20F14B1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F14B21C(uint64_t a1)
{
  sub_20F14B268(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F14B240(uint64_t a1)
{
  __n128 result;
  uint64_t v2;

  result = *(__n128 *)(a1 + 832);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a1 + 808);
  *(__n128 *)(a1 + 808) = result;
  v2 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = v2;
  return result;
}

_QWORD *sub_20F14B268(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;

  *(_QWORD *)a1 = &off_24C9F9078;
  v2 = *(void **)(a1 + 856);
  if (v2)
  {
    *(_QWORD *)(a1 + 864) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 832);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 840);
    v5 = *(void **)(a1 + 832);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 840);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 832);
    }
    *(_QWORD *)(a1 + 840) = v3;
    operator delete(v5);
  }
  v9 = *(_QWORD *)(a1 + 808);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 816);
    v11 = *(void **)(a1 + 808);
    if (v10 != v9)
    {
      v12 = *(_QWORD *)(a1 + 816);
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 808);
    }
    *(_QWORD *)(a1 + 816) = v9;
    operator delete(v11);
  }
  v15 = *(_QWORD *)(a1 + 784);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 792);
    v17 = *(void **)(a1 + 784);
    if (v16 != v15)
    {
      v18 = *(_QWORD *)(a1 + 792);
      do
      {
        v20 = *(void **)(v18 - 24);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *(_QWORD *)(v16 - 16) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *(void **)(a1 + 784);
    }
    *(_QWORD *)(a1 + 792) = v15;
    operator delete(v17);
  }
  sub_20E8E7EB0(a1 + 616);
  if (*(_BYTE *)(a1 + 608))
    sub_20FD40A18((_QWORD *)(a1 + 280));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  return sub_20E8E7CFC((_QWORD *)a1);
}

uint64_t sub_20F14B3CC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
    {
      v5 = (void *)v4[5];
      if (v5)
      {
        v4[6] = v5;
        operator delete(v5);
      }
      v6 = (void (***)(_QWORD))v4[2];
      if (v6)
      {
        v7 = (void (***)(_QWORD))v4[3];
        v8 = (void *)v4[2];
        if (v7 != v6)
        {
          v9 = v7 - 18;
          v10 = v7 - 18;
          do
          {
            v11 = *v10;
            v10 -= 18;
            (*v11)(v9);
            v12 = v9 == v6;
            v9 = v10;
          }
          while (!v12);
          v8 = (void *)v4[2];
        }
        v4[3] = v6;
        operator delete(v8);
      }
      MEMORY[0x212BC6398](v4, 0x1030C40380150A2);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F14B4A4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20EF47464();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

char ***sub_20F14B67C(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = *v4;
  v10 = v6 - *v4;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    sub_20E867F44();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_20E877A38();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = (uint64_t)(v16 + 8);
    v18 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (char *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v8 = 8 * v11 + 8;
  v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v21];
    v16 -= v21;
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v26 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v16 - 1) = v26;
        v16 -= 8;
      }
      while (v7 != v9);
    }
    v7 = *v4;
  }
LABEL_21:
  *v4 = v16;
  v4[1] = (char *)v8;
  v4[2] = v17;
  if (v7)
    operator delete(v7);
LABEL_23:
  v4[1] = (char *)v8;
  return a1;
}

void sub_20F14B7FC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62288);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62288))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3dapi.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62280);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62288);
  }
  *a1 = qword_254A62280;
}

void sub_20F14B898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62288);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62288);
  _Unwind_Resume(a1);
}

uint64_t sub_20F14B8F0(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((char **)a1 != a2)
      sub_20E86811C((_QWORD *)a1, *a2, a2[1], (a2[1] - *a2) >> 3);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    if (v4 != *a2)
    {
      if (v6 < 0)
        sub_20E867F44();
      v7 = (char *)operator new(v4 - *a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[8 * (v6 >> 3)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
}

void sub_20F14B9A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F14B9C4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  char *v7;
  char *v8;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((char **)a1 != a2)
      sub_20F0E80A4((_QWORD *)a1, *a2, a2[1], (a2[1] - *a2) >> 2);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    if (v4 != *a2)
    {
      if (v6 < 0)
        sub_20EABADD4();
      v7 = (char *)operator new(v4 - *a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = &v7[4 * (v6 >> 2)];
      *(_QWORD *)(a1 + 16) = v8;
      memcpy(v7, v5, v6);
      *(_QWORD *)(a1 + 8) = v8;
    }
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
}

void sub_20F14BA7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F14BA98(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int32x4_t *v29;
  int32x4_t *v30;
  unint64_t v31;
  uint64_t v32;
  int32x4_t *v33;
  uint64_t v34;
  int32x4_t *v35;
  int64x2_t v36;
  int32x4_t v37;
  int8x16_t v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int64x2_t v48;
  __int32 v49;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 v65;
  uint64_t v66;
  const char *v67;
  NSObject *v68;
  unsigned __int8 v69;
  uint64_t v70;
  const char *v71;
  NSObject *v72;
  unsigned __int8 v73;
  uint64_t v74;
  const char *v75;
  NSObject *v76;
  unsigned __int8 v77;
  uint64_t v78;
  const char *v79;
  NSObject *v80;
  uint64_t *v81;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v83;
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *category;
  uint64_t v92;
  void *__p;
  uint64_t v94;
  char v95;
  char v96;
  _QWORD v97[4];
  const char *v98;
  uint64_t v99;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (v3 != (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3)
    return 0;
  v4 = *(int **)(a1 + 104);
  v5 = *(_DWORD **)(a1 + 112);
  if (v3 != v5 - v4
    || (*(_BYTE *)(a1 + 152) != 0) != (*(_BYTE *)(a1 + 96) != 0)
    || *(_BYTE *)(a1 + 152) && v3 != (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v3 < (v6 - v7) >> 3 || *(_BYTE *)(a1 + 96) && v3 < (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3)
    return 0;
  if (v5 == v4)
  {
LABEL_44:
    if (!*(_BYTE *)(a1 + 152))
      return 1;
    v30 = *(int32x4_t **)(a1 + 128);
    v29 = *(int32x4_t **)(a1 + 136);
    if (v30 == v29)
    {
      v32 = 0;
      return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
    }
    v31 = (char *)v29 - (char *)v30 - 4;
    if (v31 >= 0x1C)
    {
      v34 = (v31 >> 2) + 1;
      v33 = (int32x4_t *)((char *)v30 + 4 * (v34 & 0x7FFFFFFFFFFFFFF8));
      v35 = v30 + 1;
      v36 = 0uLL;
      v37.i64[0] = -1;
      v37.i64[1] = -1;
      v38 = (int8x16_t)vdupq_n_s64(1uLL);
      v39 = v34 & 0x7FFFFFFFFFFFFFF8;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = vmvnq_s8((int8x16_t)vceqq_s32(v35[-1], v37));
        v44.i64[0] = v43.u32[0];
        v44.i64[1] = v43.u32[1];
        v45 = (int64x2_t)vandq_s8(v44, v38);
        v44.i64[0] = v43.u32[2];
        v44.i64[1] = v43.u32[3];
        v46 = (int64x2_t)vandq_s8(v44, v38);
        v47 = vmvnq_s8((int8x16_t)vceqq_s32(*v35, v37));
        v44.i64[0] = v47.u32[0];
        v44.i64[1] = v47.u32[1];
        v48 = (int64x2_t)vandq_s8(v44, v38);
        v44.i64[0] = v47.u32[2];
        v44.i64[1] = v47.u32[3];
        v40 = vaddq_s64(v40, v46);
        v36 = vaddq_s64(v36, v45);
        v42 = vaddq_s64(v42, (int64x2_t)vandq_s8(v44, v38));
        v41 = vaddq_s64(v41, v48);
        v35 += 2;
        v39 -= 8;
      }
      while (v39);
      v32 = vaddvq_s64(vaddq_s64(vaddq_s64(v41, v36), vaddq_s64(v42, v40)));
      if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
        return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
    }
    else
    {
      v32 = 0;
      v33 = *(int32x4_t **)(a1 + 128);
    }
    do
    {
      v49 = v33->i32[0];
      v33 = (int32x4_t *)((char *)v33 + 4);
      if (v49 != -1)
        ++v32;
    }
    while (v33 != v29);
    return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    if (a2)
    {
      v8 = *(int **)(a1 + 128);
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        v12 = *v4++;
        v11 = v12;
        if (v9 == -1)
        {
          if (v11 == -1)
          {
            sub_20F14C70C(&v90);
            if (**(int **)(v90 + 56) > 3)
              return 0;
            v58 = *(unsigned __int8 *)(v90 + 72);
            v59 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
            v60 = v59 ? v59 + 16 : 0;
            if (!v58 && v59 == 0)
              return 0;
            v81 = &v90;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v83 = std::chrono::system_clock::now().__d_.__rep_;
            v84 = 3;
            v85 = "unknown file";
            v86 = 73;
            v88 = 0;
            v89 = 0;
            v87 = "unknown function";
            v62 = (uint64_t *)(v90 + 16);
            if (*(char *)(v90 + 39) < 0)
            {
              v64 = *(char **)(v90 + 16);
              v63 = *(_QWORD *)(v90 + 24);
            }
            else
            {
              v63 = *(unsigned __int8 *)(v90 + 39);
              v64 = (char *)(v90 + 16);
            }
            category = v64;
            v92 = v63;
            v77 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&__p);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
              if (v96 && v95 < 0)
                operator delete(__p);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v78 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v79 = byte_254A4A4F8;
            }
            else
            {
              v78 = *(_QWORD *)&byte_254A4A4F8[8];
              v79 = *(const char **)byte_254A4A4F8;
            }
            v98 = v79;
            v99 = v78;
            __p = os_log_create(v79, category);
            sub_20E86E5A8(&v94, (uint64_t)&v98);
            sub_20E86E5A8(v97, (uint64_t)&category);
            v80 = __p;
            sub_20E86E44C((uint64_t)&__p);
            sub_20F14C800(v60, v62, v80, OS_LOG_TYPE_INFO);
            if (v58)
            {
              sub_20E8C003C((uint64_t)&v81, "A secondary feature must be assigned to a track either temporal or spatial");
              sub_20E863570((uint64_t)&v81);
            }
LABEL_105:
            sub_20E863714((uint64_t)&v81);
            return 0;
          }
        }
        else if (v11 != -1)
        {
          sub_20F14C70C(&v90);
          if (**(int **)(v90 + 56) > 3)
            return 0;
          v13 = *(unsigned __int8 *)(v90 + 72);
          v14 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
          v15 = v14 ? v14 + 16 : 0;
          if (!v13 && v14 == 0)
            return 0;
          v81 = &v90;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v83 = std::chrono::system_clock::now().__d_.__rep_;
          v84 = 3;
          v85 = "unknown file";
          v86 = 88;
          v88 = 0;
          v89 = 0;
          v87 = "unknown function";
          v17 = (uint64_t *)(v90 + 16);
          if (*(char *)(v90 + 39) < 0)
          {
            v19 = *(char **)(v90 + 16);
            v18 = *(_QWORD *)(v90 + 24);
          }
          else
          {
            v18 = *(unsigned __int8 *)(v90 + 39);
            v19 = (char *)(v90 + 16);
          }
          category = v19;
          v92 = v18;
          v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
            if (v96 && v95 < 0)
              operator delete(__p);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v70 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v71 = byte_254A4A4F8;
          }
          else
          {
            v70 = *(_QWORD *)&byte_254A4A4F8[8];
            v71 = *(const char **)byte_254A4A4F8;
          }
          v98 = v71;
          v99 = v70;
          __p = os_log_create(v71, category);
          sub_20E86E5A8(&v94, (uint64_t)&v98);
          sub_20E86E5A8(v97, (uint64_t)&category);
          v72 = __p;
          sub_20E86E44C((uint64_t)&__p);
          sub_20F14CFD8(v15, v17, v72, OS_LOG_TYPE_INFO);
          if (v13)
          {
            sub_20E8C003C((uint64_t)&v81, "Feature should not be tracked temporaly and spatialy on the secondary stream");
            sub_20E863570((uint64_t)&v81);
          }
          goto LABEL_105;
        }
        if (!--v3)
          goto LABEL_44;
      }
    }
    if (v7 == v6)
    {
      while (1)
      {
        v28 = *v4++;
        if (v28 != -1)
          break;
        if (!--v3)
          goto LABEL_44;
      }
    }
    sub_20F14C70C(&v90);
    if (**(int **)(v90 + 56) <= 3)
    {
      v21 = *(unsigned __int8 *)(v90 + 72);
      v22 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
      v23 = v22 ? v22 + 16 : 0;
      if (v21 || v22 != 0)
      {
        v81 = &v90;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v83 = std::chrono::system_clock::now().__d_.__rep_;
        v84 = 3;
        v85 = "unknown file";
        v86 = 78;
        v88 = 0;
        v89 = 0;
        v87 = "unknown function";
        v25 = (uint64_t *)(v90 + 16);
        if (*(char *)(v90 + 39) < 0)
        {
          v27 = *(char **)(v90 + 16);
          v26 = *(_QWORD *)(v90 + 24);
        }
        else
        {
          v26 = *(unsigned __int8 *)(v90 + 39);
          v27 = (char *)(v90 + 16);
        }
        category = v27;
        v92 = v26;
        v65 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (v96 && v95 < 0)
            operator delete(__p);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v66 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v67 = byte_254A4A4F8;
        }
        else
        {
          v66 = *(_QWORD *)&byte_254A4A4F8[8];
          v67 = *(const char **)byte_254A4A4F8;
        }
        v98 = v67;
        v99 = v66;
        __p = os_log_create(v67, category);
        sub_20E86E5A8(&v94, (uint64_t)&v98);
        sub_20E86E5A8(v97, (uint64_t)&category);
        v68 = __p;
        sub_20E86E44C((uint64_t)&__p);
        sub_20F14CBEC(v23, v25, v68, OS_LOG_TYPE_INFO);
        if (v21)
        {
          sub_20E8C003C((uint64_t)&v81, "Secondary stream mon-tracks are not allowed in this mode");
          sub_20E863570((uint64_t)&v81);
        }
        goto LABEL_105;
      }
    }
    return 0;
  }
  if ((a3 & 1) != 0)
    return 1;
  while (1)
  {
    v20 = *v4++;
    if (v20 == -1)
      break;
    if (!--v3)
      goto LABEL_44;
  }
  sub_20F14C70C(&v90);
  if (**(int **)(v90 + 56) <= 3)
  {
    v51 = *(unsigned __int8 *)(v90 + 72);
    v52 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
    v53 = v52 ? v52 + 16 : 0;
    if (v51 || v52 != 0)
    {
      v81 = &v90;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v83 = std::chrono::system_clock::now().__d_.__rep_;
      v84 = 3;
      v85 = "unknown file";
      v86 = 94;
      v88 = 0;
      v89 = 0;
      v87 = "unknown function";
      v55 = (uint64_t *)(v90 + 16);
      if (*(char *)(v90 + 39) < 0)
      {
        v57 = *(char **)(v90 + 16);
        v56 = *(_QWORD *)(v90 + 24);
      }
      else
      {
        v56 = *(unsigned __int8 *)(v90 + 39);
        v57 = (char *)(v90 + 16);
      }
      category = v57;
      v92 = v56;
      v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
        if (v96 && v95 < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v74 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v75 = byte_254A4A4F8;
      }
      else
      {
        v74 = *(_QWORD *)&byte_254A4A4F8[8];
        v75 = *(const char **)byte_254A4A4F8;
      }
      v98 = v75;
      v99 = v74;
      __p = os_log_create(v75, category);
      sub_20E86E5A8(&v94, (uint64_t)&v98);
      sub_20E86E5A8(v97, (uint64_t)&category);
      v76 = __p;
      sub_20E86E44C((uint64_t)&__p);
      sub_20F14D3C4(v53, v55, v76, OS_LOG_TYPE_INFO);
      if (v51)
      {
        sub_20E8C003C((uint64_t)&v81, "For primary stream, a feature must be assigned to a track");
        sub_20E863570((uint64_t)&v81);
      }
      goto LABEL_105;
    }
  }
  return 0;
}

void sub_20F14C3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28)
  {
    if (a27 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F14C43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F14C55C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F14C59C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F90F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F14C5AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F90F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F14C5DC(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F14C5F4(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F14C634(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F14C674(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F14C684(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F14C6B4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F14C6CC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void sub_20F14C70C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62298);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62298))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.cv_types");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62290);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62298);
  }
  *a1 = qword_254A62290;
}

void sub_20F14C7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62298);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62298);
  _Unwind_Resume(a1);
}

void sub_20F14C800(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14CB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14CBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14CBEC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14CF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14CFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14CFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14CFD8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14D368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14D3A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14D3C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14D778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14D78C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F14D7B0(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int32x4_t *v29;
  int32x4_t *v30;
  unint64_t v31;
  uint64_t v32;
  int32x4_t *v33;
  uint64_t v34;
  int32x4_t *v35;
  int64x2_t v36;
  int32x4_t v37;
  int8x16_t v38;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int64x2_t v48;
  __int32 v49;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 v65;
  uint64_t v66;
  const char *v67;
  NSObject *v68;
  unsigned __int8 v69;
  uint64_t v70;
  const char *v71;
  NSObject *v72;
  unsigned __int8 v73;
  uint64_t v74;
  const char *v75;
  NSObject *v76;
  unsigned __int8 v77;
  uint64_t v78;
  const char *v79;
  NSObject *v80;
  uint64_t *v81;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v83;
  int v84;
  const char *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *category;
  uint64_t v92;
  void *__p;
  uint64_t v94;
  char v95;
  char v96;
  _QWORD v97[4];
  const char *v98;
  uint64_t v99;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (v3 != (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3)
    return 0;
  v4 = *(int **)(a1 + 104);
  v5 = *(_DWORD **)(a1 + 112);
  if (v3 != v5 - v4
    || (*(_BYTE *)(a1 + 152) != 0) != (*(_BYTE *)(a1 + 96) != 0)
    || *(_BYTE *)(a1 + 152) && v3 != (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v3 < (v6 - v7) >> 3 || *(_BYTE *)(a1 + 96) && v3 < (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3)
    return 0;
  if (v5 == v4)
  {
LABEL_44:
    if (!*(_BYTE *)(a1 + 152))
      return 1;
    v30 = *(int32x4_t **)(a1 + 128);
    v29 = *(int32x4_t **)(a1 + 136);
    if (v30 == v29)
    {
      v32 = 0;
      return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
    }
    v31 = (char *)v29 - (char *)v30 - 4;
    if (v31 >= 0x1C)
    {
      v34 = (v31 >> 2) + 1;
      v33 = (int32x4_t *)((char *)v30 + 4 * (v34 & 0x7FFFFFFFFFFFFFF8));
      v35 = v30 + 1;
      v36 = 0uLL;
      v37.i64[0] = -1;
      v37.i64[1] = -1;
      v38 = (int8x16_t)vdupq_n_s64(1uLL);
      v39 = v34 & 0x7FFFFFFFFFFFFFF8;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      do
      {
        v43 = vmvnq_s8((int8x16_t)vceqq_s32(v35[-1], v37));
        v44.i64[0] = v43.u32[0];
        v44.i64[1] = v43.u32[1];
        v45 = (int64x2_t)vandq_s8(v44, v38);
        v44.i64[0] = v43.u32[2];
        v44.i64[1] = v43.u32[3];
        v46 = (int64x2_t)vandq_s8(v44, v38);
        v47 = vmvnq_s8((int8x16_t)vceqq_s32(*v35, v37));
        v44.i64[0] = v47.u32[0];
        v44.i64[1] = v47.u32[1];
        v48 = (int64x2_t)vandq_s8(v44, v38);
        v44.i64[0] = v47.u32[2];
        v44.i64[1] = v47.u32[3];
        v40 = vaddq_s64(v40, v46);
        v36 = vaddq_s64(v36, v45);
        v42 = vaddq_s64(v42, (int64x2_t)vandq_s8(v44, v38));
        v41 = vaddq_s64(v41, v48);
        v35 += 2;
        v39 -= 8;
      }
      while (v39);
      v32 = vaddvq_s64(vaddq_s64(vaddq_s64(v41, v36), vaddq_s64(v42, v40)));
      if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
        return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
    }
    else
    {
      v32 = 0;
      v33 = *(int32x4_t **)(a1 + 128);
    }
    do
    {
      v49 = v33->i32[0];
      v33 = (int32x4_t *)((char *)v33 + 4);
      if (v49 != -1)
        ++v32;
    }
    while (v33 != v29);
    return v32 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    if (a2)
    {
      v8 = *(int **)(a1 + 128);
      while (1)
      {
        v10 = *v8++;
        v9 = v10;
        v12 = *v4++;
        v11 = v12;
        if (v9 == -1)
        {
          if (v11 == -1)
          {
            sub_20F14C70C(&v90);
            if (**(int **)(v90 + 56) > 3)
              return 0;
            v58 = *(unsigned __int8 *)(v90 + 72);
            v59 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
            v60 = v59 ? v59 + 16 : 0;
            if (!v58 && v59 == 0)
              return 0;
            v81 = &v90;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v83 = std::chrono::system_clock::now().__d_.__rep_;
            v84 = 3;
            v85 = "unknown file";
            v86 = 73;
            v88 = 0;
            v89 = 0;
            v87 = "unknown function";
            v62 = (uint64_t *)(v90 + 16);
            if (*(char *)(v90 + 39) < 0)
            {
              v64 = *(char **)(v90 + 16);
              v63 = *(_QWORD *)(v90 + 24);
            }
            else
            {
              v63 = *(unsigned __int8 *)(v90 + 39);
              v64 = (char *)(v90 + 16);
            }
            category = v64;
            v92 = v63;
            v77 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&__p);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
              if (v96 && v95 < 0)
                operator delete(__p);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v78 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v79 = byte_254A4A4F8;
            }
            else
            {
              v78 = *(_QWORD *)&byte_254A4A4F8[8];
              v79 = *(const char **)byte_254A4A4F8;
            }
            v98 = v79;
            v99 = v78;
            __p = os_log_create(v79, category);
            sub_20E86E5A8(&v94, (uint64_t)&v98);
            sub_20E86E5A8(v97, (uint64_t)&category);
            v80 = __p;
            sub_20E86E44C((uint64_t)&__p);
            sub_20F14E274(v60, v62, v80, OS_LOG_TYPE_INFO);
            if (v58)
            {
              sub_20E8C003C((uint64_t)&v81, "A secondary feature must be assigned to a track either temporal or spatial");
              sub_20E863570((uint64_t)&v81);
            }
LABEL_105:
            sub_20E863714((uint64_t)&v81);
            return 0;
          }
        }
        else if (v11 != -1)
        {
          sub_20F14C70C(&v90);
          if (**(int **)(v90 + 56) > 3)
            return 0;
          v13 = *(unsigned __int8 *)(v90 + 72);
          v14 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
          v15 = v14 ? v14 + 16 : 0;
          if (!v13 && v14 == 0)
            return 0;
          v81 = &v90;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v83 = std::chrono::system_clock::now().__d_.__rep_;
          v84 = 3;
          v85 = "unknown file";
          v86 = 88;
          v88 = 0;
          v89 = 0;
          v87 = "unknown function";
          v17 = (uint64_t *)(v90 + 16);
          if (*(char *)(v90 + 39) < 0)
          {
            v19 = *(char **)(v90 + 16);
            v18 = *(_QWORD *)(v90 + 24);
          }
          else
          {
            v18 = *(unsigned __int8 *)(v90 + 39);
            v19 = (char *)(v90 + 16);
          }
          category = v19;
          v92 = v18;
          v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
            if (v96 && v95 < 0)
              operator delete(__p);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v70 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v71 = byte_254A4A4F8;
          }
          else
          {
            v70 = *(_QWORD *)&byte_254A4A4F8[8];
            v71 = *(const char **)byte_254A4A4F8;
          }
          v98 = v71;
          v99 = v70;
          __p = os_log_create(v71, category);
          sub_20E86E5A8(&v94, (uint64_t)&v98);
          sub_20E86E5A8(v97, (uint64_t)&category);
          v72 = __p;
          sub_20E86E44C((uint64_t)&__p);
          sub_20F14EA4C(v15, v17, v72, OS_LOG_TYPE_INFO);
          if (v13)
          {
            sub_20E8C003C((uint64_t)&v81, "Feature should not be tracked temporaly and spatialy on the secondary stream");
            sub_20E863570((uint64_t)&v81);
          }
          goto LABEL_105;
        }
        if (!--v3)
          goto LABEL_44;
      }
    }
    if (v7 == v6)
    {
      while (1)
      {
        v28 = *v4++;
        if (v28 != -1)
          break;
        if (!--v3)
          goto LABEL_44;
      }
    }
    sub_20F14C70C(&v90);
    if (**(int **)(v90 + 56) <= 3)
    {
      v21 = *(unsigned __int8 *)(v90 + 72);
      v22 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
      v23 = v22 ? v22 + 16 : 0;
      if (v21 || v22 != 0)
      {
        v81 = &v90;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v83 = std::chrono::system_clock::now().__d_.__rep_;
        v84 = 3;
        v85 = "unknown file";
        v86 = 78;
        v88 = 0;
        v89 = 0;
        v87 = "unknown function";
        v25 = (uint64_t *)(v90 + 16);
        if (*(char *)(v90 + 39) < 0)
        {
          v27 = *(char **)(v90 + 16);
          v26 = *(_QWORD *)(v90 + 24);
        }
        else
        {
          v26 = *(unsigned __int8 *)(v90 + 39);
          v27 = (char *)(v90 + 16);
        }
        category = v27;
        v92 = v26;
        v65 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (v96 && v95 < 0)
            operator delete(__p);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v66 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v67 = byte_254A4A4F8;
        }
        else
        {
          v66 = *(_QWORD *)&byte_254A4A4F8[8];
          v67 = *(const char **)byte_254A4A4F8;
        }
        v98 = v67;
        v99 = v66;
        __p = os_log_create(v67, category);
        sub_20E86E5A8(&v94, (uint64_t)&v98);
        sub_20E86E5A8(v97, (uint64_t)&category);
        v68 = __p;
        sub_20E86E44C((uint64_t)&__p);
        sub_20F14E660(v23, v25, v68, OS_LOG_TYPE_INFO);
        if (v21)
        {
          sub_20E8C003C((uint64_t)&v81, "Secondary stream mon-tracks are not allowed in this mode");
          sub_20E863570((uint64_t)&v81);
        }
        goto LABEL_105;
      }
    }
    return 0;
  }
  if ((a3 & 1) != 0)
    return 1;
  while (1)
  {
    v20 = *v4++;
    if (v20 == -1)
      break;
    if (!--v3)
      goto LABEL_44;
  }
  sub_20F14C70C(&v90);
  if (**(int **)(v90 + 56) <= 3)
  {
    v51 = *(unsigned __int8 *)(v90 + 72);
    v52 = sub_20E8C31DC(v90, "OSLogSurrogateAppender", 1, 0);
    v53 = v52 ? v52 + 16 : 0;
    if (v51 || v52 != 0)
    {
      v81 = &v90;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v83 = std::chrono::system_clock::now().__d_.__rep_;
      v84 = 3;
      v85 = "unknown file";
      v86 = 94;
      v88 = 0;
      v89 = 0;
      v87 = "unknown function";
      v55 = (uint64_t *)(v90 + 16);
      if (*(char *)(v90 + 39) < 0)
      {
        v57 = *(char **)(v90 + 16);
        v56 = *(_QWORD *)(v90 + 24);
      }
      else
      {
        v56 = *(unsigned __int8 *)(v90 + 39);
        v57 = (char *)(v90 + 16);
      }
      category = v57;
      v92 = v56;
      v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
        if (v96 && v95 < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v74 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v75 = byte_254A4A4F8;
      }
      else
      {
        v74 = *(_QWORD *)&byte_254A4A4F8[8];
        v75 = *(const char **)byte_254A4A4F8;
      }
      v98 = v75;
      v99 = v74;
      __p = os_log_create(v75, category);
      sub_20E86E5A8(&v94, (uint64_t)&v98);
      sub_20E86E5A8(v97, (uint64_t)&category);
      v76 = __p;
      sub_20E86E44C((uint64_t)&__p);
      sub_20F14EE38(v53, v55, v76, OS_LOG_TYPE_INFO);
      if (v51)
      {
        sub_20E8C003C((uint64_t)&v81, "For primary stream, a feature must be assigned to a track");
        sub_20E863570((uint64_t)&v81);
      }
      goto LABEL_105;
    }
  }
  return 0;
}

void sub_20F14E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28)
  {
    if (a27 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F14E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_20E863714((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F14E274(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14E604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14E628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14E63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14E660(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14E9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14EA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14EA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14EA4C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14EDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14EE14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F14EE38(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F14F1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F14F200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F14F224@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  std::string *v40;
  __int128 v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE __p[96];
  uint64_t v57;
  std::string v58;
  std::string v59;

  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBFE0;
  strcpy(*(char **)__p, "VFusionTracker parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA1CB0((unint64_t *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.feature_detection_pyramid_level", v4, "Pyramid level of the dataset image at which to detech features. 0 means full resolution image, 1 means half-sized image, etc.");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.disable_stereo_matching", v5, "Whether to disable stereo matching in feature tracking.");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_octaves", v6, "Number of octaves in the scale space pyramid.");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.use_dog_features", v7, "Whether to use DoG features (if false then use harris).");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA71FC((int *)(a1 + 20));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.max_features", v8, "Maximum number of detected features per frame.");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EA9DCF0((unsigned int *)(a1 + 200));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_buckets_x", v9, "Number of buckets for along x axis.");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EA9DCF0((unsigned int *)(a1 + 204));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_buckets_y", v10, "Number of buckets for along y axis.");
  *(_QWORD *)__p = nullsub_1(a2);
  v11 = sub_20EA9DCF0((unsigned int *)(a1 + 208));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_buckets_scale", v11, "Number of buckets along the pyramid scales.");
  *(_QWORD *)__p = nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 212));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.visual_slam_enabled", v12, "A flag indicating whether the trcker is for Visual-SLAM.");
  *(_QWORD *)__p = nullsub_1(a2);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 184));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_buckets_swproxy_x", v13, "Number of buckets along X coordinate for KEY Engine SW proxy.");
  *(_QWORD *)__p = nullsub_1(a2);
  v14 = sub_20EAA1CB0((unint64_t *)(a1 + 192));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_buckets_swproxy_y", v14, "Number of buckets along Y coordinate for KEY Engine SW proxy.");
  *(_QWORD *)__p = nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.disparity_fraction", v15, "Disparity fraction for feature matching.");
  *(_QWORD *)__p = nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.feature_standard_deviation", v16, "Standard deviation of the point feature detector (in pixels at detection scale).");
  *(_QWORD *)__p = nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.line_feature_standard_deviation", v17, "Standard deviation of the line feature detector (in pixels at detection scale).");
  *(_QWORD *)__p = nullsub_1(a2);
  v18 = sub_20EAA1770(a1 + 72);
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.conservative_feature_standard_deviation_scale", v18, "The scale factors of feature standard deviation corresponding to each conservative mode.");
  *(_QWORD *)__p = nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 100));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.fixed_point_precision_dog_freak", v19, "Whether to use fixed point precision for DoG and Freak generators.");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 101));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_swproxy", v20, "Enable the Key software proxy detection that is equivalent to key detection for test or FOMs purposes.");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)(a1 + 102));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_swproxy_power_optimization", v21, "Enable KEY engine software proxy power optimization mode.");
  *(_QWORD *)__p = nullsub_1(a2);
  v22 = sub_20EAA14D8((_BYTE *)(a1 + 103));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_swproxy_binning", v22, "Enable KEY engine software proxy binning.");
  *(_QWORD *)__p = nullsub_1(a2);
  v23 = sub_20EAA14D8((_BYTE *)(a1 + 213));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_feature_orientation_assignment", v23, "Enable feature orientation assignment.");
  *(_QWORD *)__p = nullsub_1(a2);
  v24 = sub_20EAA14D8((_BYTE *)(a1 + 214));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.use_freak_orientation", v24, "If true, compute feature orientaton based on freak descriptor tests, otherwise use local gradient orientation histograms.");
  *(_QWORD *)__p = nullsub_1(a2);
  v25 = sub_20EA9DCF0((unsigned int *)(a1 + 216));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.num_matching_bits", v25, "Set the most significant 128/256/512 bits for feature matching.");
  *(_QWORD *)__p = nullsub_1(a2);
  v26 = sub_20EB8894C(a1 + 224);
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.permutation_string", v26, "Set descriptor permutation matrix.");
  *(_QWORD *)__p = nullsub_1(a2);
  v27 = sub_20EAA14D8((_BYTE *)(a1 + 248));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_matching_with_reordered_descriptors", v27, "Enable feature matching with reordered descriptors.");
  *(_QWORD *)__p = nullsub_1(a2);
  v28 = sub_20EA9DCF0((unsigned int *)(a1 + 220));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.max_hamming_distance", v28, "Set max matching hamming distance.");
  *(_QWORD *)__p = nullsub_1(a2);
  v29 = sub_20EAA14D8((_BYTE *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_software_mspyr_downscaling", v29, "Enable sofware down-scaling.");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DCF0((unsigned int *)(a1 + 152));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.mspyr_filter_index", v30, "MSPyramid filter tabs index.");
  v57 = nullsub_1(a2);
  v31 = operator new();
  *(_QWORD *)(v31 + 109) = 0;
  *(_OWORD *)(v31 + 80) = 0u;
  *(_OWORD *)(v31 + 96) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_QWORD *)v31 = &off_24C9F9208;
  *(_QWORD *)(v31 + 8) = &unk_24C9F9280;
  *(_QWORD *)(v31 + 152) = &unk_24C9F92A8;
  *(_OWORD *)(v31 + 160) = 0u;
  v32 = (_QWORD *)(v31 + 160);
  *(_OWORD *)(v31 + 176) = 0u;
  *(_QWORD *)(v31 + 120) = (char *)off_24C9F93E8 + 1;
  *(_QWORD *)(v31 + 128) = a1 + 128;
  v33 = (_QWORD *)operator new();
  v34 = v33;
  v33[1] = 0;
  *v33 = &off_24C9F9368;
  v33[2] = 0;
  v33[3] = 0;
  v35 = *(char **)(a1 + 128);
  v36 = *(char **)(a1 + 136);
  v37 = v36 - v35;
  if (v36 != v35)
  {
    if (v37 < 0)
      sub_20E867F44();
    v38 = (char *)operator new(v36 - v35);
    v34[1] = v38;
    v39 = &v38[2 * (v37 >> 1)];
    v34[3] = v39;
    memcpy(v38, v35, v36 - v35);
    v34[2] = v39;
    *v32 = v34;
    *((_BYTE *)&v58.__r_.__value_.__s + 23) = 1;
    LOWORD(v58.__r_.__value_.__l.__data_) = 123;
    while (1)
    {
      sub_20E9F6944((unsigned __int16 *)v35);
      v40 = std::string::append(&v59, ", ", 2uLL);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v40->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v42 = __p;
      else
        v42 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v43 = __p[23];
      else
        v43 = *(_QWORD *)&__p[8];
      std::string::append(&v58, v42, v43);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
          operator delete(v59.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_17;
      }
      v35 += 2;
      if (v35 == v36)
        goto LABEL_19;
    }
  }
  *v32 = v33;
  *((_BYTE *)&v58.__r_.__value_.__s + 23) = 1;
  LOWORD(v58.__r_.__value_.__l.__data_) = 123;
LABEL_19:
  std::string::append(&v58, "}", 1uLL);
  *(std::string *)(v31 + 168) = v58;
  *(_BYTE *)(v31 + 114) = 1;
  sub_20E8B2F9C(&v57, "VFusionTrackerConfig.mspyr_filter_tabs", v31, "MSPyramid filter tabs parameters.");
  *(_QWORD *)__p = nullsub_1(a2);
  v44 = sub_20EE859FC(a1 + 160);
  *(_BYTE *)(v44 + 114) = 1;
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.stereo_matches_crop_bounding_box", v44, "Stereo matches bounding box crop.");
  *(_QWORD *)__p = nullsub_1(a2);
  v45 = sub_20EAA14D8((_BYTE *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_swproxy_top_level_pruning", v45, "Enable software proxy top level keypoints pruning for 1080p and 1440p.");
  *(_QWORD *)__p = nullsub_1(a2);
  v46 = sub_20EAA14D8((_BYTE *)(a1 + 105));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_swproxy_hw_desgen", v46, "Enable software proxy hw descriptor generation functionality.");
  *(_QWORD *)__p = nullsub_1(a2);
  v47 = sub_20EAA14D8((_BYTE *)(a1 + 106));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_asb_thresholding", v47, "Enable histogram based thresholding.");
  *(_QWORD *)__p = nullsub_1(a2);
  v48 = sub_20EF4E784((float *)(a1 + 108));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.sw_binning_alloc_factor", v48, "SW binning key point allocation factor (0.75 by default).");
  *(_QWORD *)__p = nullsub_1(a2);
  v49 = sub_20EF4E784((float *)(a1 + 112));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.sw_binning_overalloc_factor", v49, "SW binning key point over-allocation factor (1.1 by default).");
  *(_QWORD *)__p = nullsub_1(a2);
  v50 = sub_20EF4E784((float *)(a1 + 116));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.sw_binning_allocation_adaptation_rate", v50, "Mixing between using constant allocation (0) and using previous frame stats (1; 0 by default).");
  *(_QWORD *)__p = nullsub_1(a2);
  v51 = sub_20EAA14D8((_BYTE *)(a1 + 215));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enforce_scan_order_laplacian_readout", v51, "Enforce scan-order readout from the Laplacian (off by default)");
  *(_QWORD *)__p = nullsub_1(a2);
  v52 = sub_20EAA14D8((_BYTE *)(a1 + 107));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.enable_secondary_camera_feature_tracking", v52, "Enable mono-tracks from the secondary camera");
  *(_QWORD *)__p = nullsub_1(a2);
  v53 = sub_20EAA14D8((_BYTE *)(a1 + 384));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.use_hw_feature_matching", v53, "Indicates whether hardware accelerated feature matching results should be used.");
  *(_QWORD *)__p = nullsub_1(a2);
  v54 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "VFusionTrackerConfig.disparity_fraction_for_superwide_in_deg", v54, "Disparity fraction for superwide lens in degree.");
  sub_20FD86A58(a1 + 252, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F41C400(a1 + 280, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20F14FC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  sub_20E869298((uint64_t)&a9);
  sub_20E869298(v31);
  _Unwind_Resume(a1);
}

void sub_20F14FF84(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F150494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F150598(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F1505B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F1505D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F1505E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F1505E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

char **sub_20F150640(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  char **v6;
  char **result;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (char **)(*a2 + 8);
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  if (result != v6)
    result = (char **)sub_20E86876C(result, *v6, v6[1], (v6[1] - *v6) >> 1);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_660;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (char **)(*(uint64_t (**)(uint64_t, char **))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F150754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F150768(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9208;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9280;
  *(_QWORD *)(a1 + 152) = &unk_24C9F92A8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F151530(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F151530(a1);
}

void sub_20F1507D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9208;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9280;
  *(_QWORD *)(a1 + 152) = &unk_24C9F92A8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F151530(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20F15084C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  __int128 v12;
  unsigned __int8 *p_dst;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  __int128 *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  char v21;
  const std::locale *v22;
  unsigned __int8 *v23;
  const std::locale::facet *v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  unsigned __int16 v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned __int8 v38;
  char **v39;
  char v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  unsigned __int16 v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  uint64_t v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  __int16 v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _WORD *v70;
  int64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  unint64_t v78;
  __int128 v79;
  __int16 v80;
  void **v81;
  void **v82;
  void *v83;
  char v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  void *__p;
  void **v93;
  uint64_t v94;
  _WORD *v95;
  std::locale v96;
  void *v97;
  uint64_t v98;
  __int128 __dst;
  uint64_t v100;
  char **v101;
  uint64_t v102;
  unsigned __int8 v103;

  if (*a3 != a3[1] || (v88 = *(_QWORD *)(a1 + 80)) == 0)
  {
    v4 = (_QWORD *)*a2;
    if (*a2)
      goto LABEL_3;
    v4 = (_QWORD *)operator new();
    *v4 = &off_24C9F9368;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    v90 = (_QWORD *)*a2;
    *a2 = (uint64_t)v4;
    if (!v90 || ((*(void (**)(_QWORD *))(*v90 + 8))(v90), (v4 = (_QWORD *)*a2) != 0))
LABEL_3:
      v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    else
      v5 = MEMORY[0x24BEDB7C8];
    result = *(_QWORD *)(v5 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)(0x8000000210314148 & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      v7 = *a2 + 8;
      v8 = *a3;
      if (a3[1] == *a3)
        return result;
    }
    else
    {
      v7 = 0;
      v8 = *a3;
      if (a3[1] == *a3)
        return result;
    }
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v94 = 0;
      v95 = 0;
      __p = 0;
      v93 = 0;
      v93 = (void **)sub_20E8ADE68((uint64_t *)&__p, (__int128 *)(v8 + 24 * v9));
      sub_20E8B84BC(&v95);
      v11 = (char *)sub_20E8B850C(&__p, 0);
      if (v11[23] < 0)
      {
        sub_20E860C04(&__dst, *(void **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        v100 = *((_QWORD *)v11 + 2);
        __dst = v12;
      }
      if (v100 >= 0)
        p_dst = (unsigned __int8 *)&__dst;
      else
        p_dst = (unsigned __int8 *)__dst;
      if (v100 >= 0)
        v14 = HIBYTE(v100);
      else
        v14 = *((_QWORD *)&__dst + 1);
      if (!v14)
      {
LABEL_148:
        std::bad_cast::bad_cast((std::bad_cast *)&v96);
        v96.__locale_ = (std::locale::__imp *)&unk_24C9C28C0;
        v97 = &unk_24C9AB9F0;
        v98 = MEMORY[0x24BEDB7C0];
        sub_20EA9F254((uint64_t)&v96);
      }
      v15 = *p_dst;
      if (v15 == 45 || (v16 = p_dst, v15 == 43))
      {
        v17 = &__dst;
        if (v100 < 0)
          v17 = (__int128 *)__dst;
        v16 = (unsigned __int8 *)v17 + 1;
      }
      v18 = &p_dst[v14 - 1];
      if (v16 > v18 || (v19 = *v18, (v19 - 58) < 0xFFFFFFF6))
      {
        v20 = 0;
        v21 = 0;
        if (v15 == 45)
          goto LABEL_29;
        goto LABEL_88;
      }
      MEMORY[0x212BC61AC](&v96);
      v22 = std::locale::classic();
      v20 = v19 - 48;
      v23 = &p_dst[v14 - 2];
      if (std::locale::operator==(&v96, v22))
      {
        if (v23 >= v16)
        {
          v27 = *v23;
          if ((v27 - 58) >= 0xFFFFFFF6)
          {
            v28 = 0;
            v29 = v27 - 48;
            v30 = 10 * (v27 - 48);
            v31 = &p_dst[v14 - 3];
            v32 = 10;
            do
            {
              if (v29
                && ((v28 & 1) != 0
                 || ((v29 * (unsigned __int16)v32) & 0xFFFF0000) != 0
                 || (((unsigned __int16)v30 + (unsigned __int16)v20) & 0x10000) != 0))
              {
                break;
              }
              v20 += v30;
              if (v31 < v16)
                goto LABEL_33;
              v28 |= (unsigned __int16)((unsigned __int16)v32 >> 1) > 0xCCCu;
              v33 = (char)*v31--;
              v32 *= 10;
              v29 = v33 - 48;
              v30 = (v33 - 48) * v32;
            }
            while ((v33 - 58) >= 0xF6u);
          }
          v21 = 0;
          std::locale::~locale(&v96);
          if (v15 == 45)
          {
LABEL_29:
            if ((v21 & 1) == 0)
              goto LABEL_148;
            v20 = -v20;
            goto LABEL_89;
          }
        }
        else
        {
LABEL_33:
          v21 = 1;
          std::locale::~locale(&v96);
          if (v15 == 45)
            goto LABEL_29;
        }
        goto LABEL_88;
      }
      v24 = std::locale::use_facet(&v96, MEMORY[0x24BEDB588]);
      ((void (*)(char ***__return_ptr))v24->__vftable[1].__on_zero_shared)(&v101);
      v25 = (char)v103;
      if ((char)v103 < 0)
      {
        v26 = v102;
        if (!v102 || *(char *)v101 <= 0)
        {
LABEL_75:
          if (v23 < v16)
            goto LABEL_76;
          v46 = *v23;
          if ((v46 - 58) >= 0xFFFFFFF6)
          {
            v47 = 0;
            v48 = v46 - 48;
            v49 = 10 * (v46 - 48);
            v50 = &p_dst[v14 - 3];
            v51 = 10;
            do
            {
              if (v48
                && ((v47 & 1) != 0
                 || ((v48 * (unsigned __int16)v51) & 0xFFFF0000) != 0
                 || (((unsigned __int16)v49 + (unsigned __int16)v20) & 0x10000) != 0))
              {
                break;
              }
              v20 += v49;
              if (v50 < v16)
                goto LABEL_76;
              v47 |= (unsigned __int16)((unsigned __int16)v51 >> 1) > 0xCCCu;
              v52 = (char)*v50--;
              v51 *= 10;
              v48 = v52 - 48;
              v49 = (v52 - 48) * v51;
            }
            while ((v52 - 58) >= 0xF6u);
          }
          goto LABEL_85;
        }
      }
      else
      {
        if (!v103)
          goto LABEL_75;
        v26 = v103;
        if ((char)v101 <= 0)
          goto LABEL_75;
      }
      v34 = v26;
      v35 = ((uint64_t (*)(const std::locale::facet *))v24->__vftable[1].~facet_0)(v24);
      v25 = (char)v103;
      if (v23 < v16)
        goto LABEL_76;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v39 = (char **)&v101;
      if ((v103 & 0x80u) != 0)
        v39 = v101;
      v40 = *(_BYTE *)v39 - 1;
      v41 = 1;
      while (1)
      {
        while (v40)
        {
          if (v37)
            v42 = 1;
          else
            v42 = (unsigned __int16)((unsigned __int16)v41 >> 1) > 0xCCCu;
          v36 = v42;
          v43 = (char)*v23;
          if ((*v23 - 58) < 0xF6u)
            goto LABEL_85;
          v41 *= 10;
          v44 = v43 - 48;
          v45 = (v43 - 48) * v41;
          if (v44)
          {
            if ((v36 & 1) != 0
              || (((unsigned __int16)v44 * (unsigned __int16)v41) & 0xFFFF0000) != 0
              || (((unsigned __int16)v45 + (unsigned __int16)v20) & 0x10000) != 0)
            {
              goto LABEL_85;
            }
          }
          v20 += v45;
          --v40;
          v37 = v36;
          if (--v23 < v16)
            goto LABEL_76;
        }
        if (*v23 != v35)
          break;
        if (v23 == v16)
          goto LABEL_85;
        if (v34 - 1 > (unint64_t)v38)
          ++v38;
        v40 = *((_BYTE *)v39 + v38);
        if (--v23 < v16)
          goto LABEL_76;
      }
      if (v23 < v16)
      {
LABEL_76:
        v21 = 1;
        goto LABEL_86;
      }
      v84 = v36 != 0;
      while (1)
      {
        v85 = (char)*v23;
        if ((*v23 - 58) < 0xF6u)
          break;
        v84 |= (unsigned __int16)((unsigned __int16)v41 >> 1) > 0xCCCu;
        v41 *= 10;
        v86 = v85 - 48;
        v87 = (v85 - 48) * v41;
        if (v86)
        {
          if ((v84 & 1) != 0
            || (((unsigned __int16)v86 * (unsigned __int16)v41) & 0xFFFF0000) != 0
            || (((unsigned __int16)v87 + (unsigned __int16)v20) & 0x10000) != 0)
          {
            break;
          }
        }
        v20 += v87;
        --v23;
        v21 = 1;
        if (v23 < v16)
          goto LABEL_86;
      }
LABEL_85:
      v21 = 0;
LABEL_86:
      if (v25 < 0)
      {
        operator delete(v101);
        std::locale::~locale(&v96);
        if (v15 == 45)
          goto LABEL_29;
      }
      else
      {
        std::locale::~locale(&v96);
        if (v15 == 45)
          goto LABEL_29;
      }
LABEL_88:
      if ((v21 & 1) == 0)
        goto LABEL_148;
LABEL_89:
      v53 = operator new();
      *(_QWORD *)v53 = &off_24C9F93B0;
      *(_WORD *)(v53 + 8) = v20;
      v54 = v95;
      v95 = (_WORD *)v53;
      if (v54)
        (*(void (**)(_WORD *))(*(_QWORD *)v54 + 8))(v54);
      if (SHIBYTE(v100) < 0)
      {
        operator delete((void *)__dst);
        v55 = v95;
        if (!v95)
        {
LABEL_95:
          v56 = MEMORY[0x24BEDB7C8];
          goto LABEL_96;
        }
      }
      else
      {
        v55 = v95;
        if (!v95)
          goto LABEL_95;
      }
      v56 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v55 + 16))(v55);
LABEL_96:
      v57 = (const char *)(*(_QWORD *)(v56 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      v58 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C0] + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v57 != v58 && strcmp(v57, v58))
      {
        v96.__locale_ = 0;
        std::bad_cast::bad_cast((std::bad_cast *)&v96);
        v96.__locale_ = (std::locale::__imp *)&unk_24C9C3120;
        sub_20EAA40CC();
      }
      v59 = v95[4];
      v61 = *(char **)(v7 + 8);
      v60 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v61 >= v60)
      {
        v63 = *(char **)v7;
        v64 = (uint64_t)&v61[-*(_QWORD *)v7];
        if (v64 <= -3)
          sub_20E867F44();
        v65 = v64 >> 1;
        v66 = v60 - (_QWORD)v63;
        if (v66 <= (v64 >> 1) + 1)
          v67 = v65 + 1;
        else
          v67 = v66;
        if (v66 >= 0x7FFFFFFFFFFFFFFELL)
          v68 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 < 0)
            sub_20E877A38();
          v69 = operator new(2 * v68);
          v70 = &v69[2 * v65];
          *v70 = v59;
          v62 = (uint64_t)(v70 + 1);
          v71 = v61 - v63;
          if (v61 == v63)
            goto LABEL_118;
LABEL_112:
          v72 = v71 - 2;
          if (v72 < 0x1E)
            goto LABEL_154;
          if (v61 - v69 - (v64 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_154;
          v73 = (v72 >> 1) + 1;
          v74 = 2 * (v73 & 0xFFFFFFFFFFFFFFF0);
          v75 = &v61[-v74];
          v70 = (_WORD *)((char *)v70 - v74);
          v76 = &v69[2 * v65 - 16];
          v77 = v61 - 16;
          v78 = v73 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 16;
          }
          while (v78);
          v61 = v75;
          if (v73 != (v73 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_154:
            do
            {
              v80 = *((_WORD *)v61 - 1);
              v61 -= 2;
              *--v70 = v80;
            }
            while (v61 != v63);
          }
        }
        else
        {
          v69 = 0;
          v70 = (_WORD *)(2 * v65);
          *(_WORD *)(2 * v65) = v59;
          v62 = 2 * v65 + 2;
          v71 = v61 - v63;
          if (v61 != v63)
            goto LABEL_112;
        }
LABEL_118:
        *(_QWORD *)v7 = v70;
        *(_QWORD *)(v7 + 8) = v62;
        *(_QWORD *)(v7 + 16) = &v69[2 * v68];
        if (v63)
          operator delete(v63);
        goto LABEL_120;
      }
      *(_WORD *)v61 = v59;
      v62 = (uint64_t)(v61 + 2);
LABEL_120:
      *(_QWORD *)(v7 + 8) = v62;
      v81 = (void **)__p;
      if (__p)
      {
        v82 = v93;
        v83 = __p;
        if (v93 != __p)
        {
          do
          {
            if (*((char *)v82 - 1) < 0)
              operator delete(*(v82 - 3));
            v82 -= 3;
          }
          while (v82 != v81);
          v83 = __p;
        }
        v93 = v81;
        operator delete(v83);
      }
      result = (uint64_t)v95;
      if (v95)
        result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v95 + 8))(v95);
      v8 = *a3;
      v9 = ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v10)
        return result;
    }
  }
  v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88);
  result = *a2;
  *a2 = v89;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20F151140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  uint64_t v15;
  uint64_t v18;

  if (*(char *)(v15 - 89) < 0)
    operator delete(*(void **)(v15 - 112));
  std::locale::~locale(&a15);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a15, v15 - 144);
    sub_20EA9ED20((uint64_t)&a15);
  }
  if (*(char *)(v15 - 121) < 0)
  {
    operator delete(*(void **)(v15 - 144));
    sub_20E89FB98(&a11);
    v18 = a14;
    if (a14)
      goto LABEL_10;
  }
  else
  {
    sub_20E89FB98(&a11);
    v18 = a14;
    if (a14)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_20F1512A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1512BCLL);
}

void *sub_20F1512C8()
{
  return &unk_24C9C3C38;
}

uint64_t sub_20F1512D4(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1512DC()
{
  return &unk_24C9C3C38;
}

uint64_t sub_20F1512E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9208;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9280;
  *(_QWORD *)(a1 + 144) = &unk_24C9F92A8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F151530(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F151530(v2);
}

void sub_20F151358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9208;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9280;
  *(_QWORD *)(a1 + 144) = &unk_24C9F92A8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F151530(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1513DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9208;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9280;
  *(_QWORD *)a1 = &unk_24C9F92A8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F151530(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F151530(v2);
}

void sub_20F15144C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9208;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9280;
  *(_QWORD *)a1 = &unk_24C9F92A8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F151530(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1514D0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1514DC(uint64_t a1)
{
  sub_20F151530(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F151500(uint64_t a1)
{
  return sub_20F151530(a1 - 8);
}

void sub_20F151508(uint64_t a1)
{
  sub_20F151530(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F151530(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F92D0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9340;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20F1515FC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F15162C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20F15166C()
{
  return &unk_24C9C3C38;
}

_QWORD *sub_20F151678(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  *v2 = &off_24C9F9368;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[2 * (v5 >> 1)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_20F151718(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x91C4089455612);
  _Unwind_Resume(a1);
}

void sub_20F151750()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F151764()
{
  return MEMORY[0x24BEDB7C0];
}

uint64_t sub_20F151770(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F93B0;
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F1517B8(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F93F8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorItNS0_9allocatorItEEEEEP"
                                      "N5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorItNS0_9allocatorItEEEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20F151864(char ***a1, char **a2)
{
  char **result;

  result = *a1;
  if (result != a2)
    return (char **)sub_20E86876C(result, *a2, a2[1], (a2[1] - *a2) >> 1);
  return result;
}

void sub_20F151888(double *a1, _DWORD *a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  int *v22;
  _QWORD *v23;
  int *v24;
  uint64_t v25;
  double *v26;
  double v28;
  uint64_t v30;
  char **v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;

  v4 = *a3;
  if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(a3[1] - *a3) >> 3)) >= 2)
  {
    v5 = a3;
    LODWORD(a4) = *a2;
    v6 = (double)*(unint64_t *)&a4;
    v7 = a1[1];
    v8 = *a1 * v6;
    v9 = a1[2];
    v10 = v9 * v6;
    LODWORD(v9) = a2[2];
    v11 = (double)*(unint64_t *)&v9;
    v12 = v7 * v11;
    v13 = v8 + v10;
    v14 = 1;
    v15 = v7 * v11 + a1[3] * v11;
    while (1)
    {
      v16 = v4 + 440 * v14;
      if (!*(_BYTE *)(v16 + 120))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTrackerUtils.cpp", 47, (uint64_t)"feature_samples[stream_id].point_sample.sec_to_pri_matches", 58, (uint64_t)"Stream must have valid secondary to primary matches", 51, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v4 = *v5;
      }
      v17 = v4 + 440 * v14;
      if (!*(_BYTE *)(v17 + 120))
        sub_20E866B34();
      v18 = (_QWORD *)(v17 + 96);
      v20 = *(_BYTE **)(v17 + 96);
      v19 = *(_BYTE **)(v17 + 104);
      v21 = v19 - v20;
      if (v19 == v20)
      {
        v22 = 0;
        v18[1] = v20;
        goto LABEL_49;
      }
      if (v21 < 0)
        sub_20E867F44();
      v22 = (int *)operator new(v19 - v20);
      v56 = v22;
      memcpy(v22, v20, v21);
      v23 = (_QWORD *)(v16 + 24);
      v18[1] = *v18;
      v24 = &v22[2 * (v21 >> 3)];
      v55 = v14;
      if (v22 != v24)
        break;
LABEL_49:
      if (v22)
        operator delete(v22);
      v14 = (v14 + 1);
      v4 = *v5;
      if (0x6FB586FB586FB587 * ((uint64_t)(v5[1] - *v5) >> 3) <= v14)
        return;
    }
    while (1)
    {
      v26 = (double *)(*v23 + 16 * *v22);
      if (*v26 < v8 || *v26 >= v13)
        goto LABEL_15;
      v28 = v26[1];
      if (v28 < v12 || v28 >= v15)
        goto LABEL_15;
      v30 = *v5 + 440 * v14;
      v31 = (char **)(v30 + 96);
      v33 = *(char **)(v30 + 104);
      v32 = *(_QWORD *)(v30 + 112);
      if ((unint64_t)v33 < v32)
      {
        *(_QWORD *)v33 = *(_QWORD *)v22;
        v25 = (uint64_t)(v33 + 8);
        goto LABEL_14;
      }
      v34 = v5;
      v35 = *v31;
      v36 = v33 - *v31;
      v37 = v36 >> 3;
      v38 = (v36 >> 3) + 1;
      if (v38 >> 61)
        sub_20E867F44();
      v39 = v32 - (_QWORD)v35;
      if (v39 >> 2 > v38)
        v38 = v39 >> 2;
      v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v38;
      if (v40)
      {
        if (v40 >> 61)
          sub_20E877A38();
        v41 = v40;
        v42 = operator new(8 * v40);
        v40 = v41;
        v43 = &v42[8 * v37];
        *(_QWORD *)v43 = *(_QWORD *)v22;
        v25 = (uint64_t)(v43 + 8);
        v44 = (char *)(v33 - v35);
        if (v33 == v35)
        {
LABEL_39:
          v5 = v34;
          *v31 = v43;
          v31[1] = (char *)v25;
          v31[2] = &v42[8 * v40];
          v14 = v55;
          if (!v33)
            goto LABEL_14;
LABEL_47:
          operator delete(v33);
          goto LABEL_14;
        }
      }
      else
      {
        v42 = 0;
        v43 = (char *)(8 * v37);
        *(_QWORD *)(8 * v37) = *(_QWORD *)v22;
        v25 = 8 * v37 + 8;
        v44 = (char *)(v33 - v35);
        if (v33 == v35)
          goto LABEL_39;
      }
      v45 = (unint64_t)(v44 - 8);
      if (v45 < 0x58)
        break;
      v46 = v33 - v42 - v36;
      v5 = v34;
      if (v46 < 0x20)
        goto LABEL_45;
      v47 = (v45 >> 3) + 1;
      v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
      v49 = &v33[-v48];
      v43 -= v48;
      v50 = &v42[8 * v37 - 16];
      v51 = v33 - 16;
      v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        *v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 4;
      }
      while (v52);
      v33 = v49;
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_45;
LABEL_46:
      v33 = *v31;
      *v31 = v43;
      v31[1] = (char *)v25;
      v31[2] = &v42[8 * v40];
      v14 = v55;
      if (v33)
        goto LABEL_47;
LABEL_14:
      v31[1] = (char *)v25;
LABEL_15:
      v22 += 2;
      if (v22 == v24)
      {
        v22 = v56;
        goto LABEL_49;
      }
    }
    v5 = v34;
    do
    {
LABEL_45:
      v54 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      *((_QWORD *)v43 - 1) = v54;
      v43 -= 8;
    }
    while (v33 != v35);
    goto LABEL_46;
  }
}

void sub_20F151C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F151C70(uint64_t a1@<X0>, __int128 *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  int64_t v52;
  char *v53;
  _BYTE *v54;
  _BYTE *v55;
  int64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE *v89;
  _BYTE *v90;
  int64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  int64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  Class isa;
  int v103;
  double v104;
  os_log_t v105;
  _QWORD *v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int8 v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  const char *v124;
  size_t v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  const char *v128;
  size_t v129;
  __int128 *v130;
  uint64_t v131;
  uint64_t v132;
  void **v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  NSObject *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  os_log_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  const char *v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  void *v172;
  uint64_t *v173;
  unint64_t v174;
  NSObject *v175;
  __int128 v176;
  int v177;
  const char *v178;
  int v179;
  const char *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  NSObject *v196;
  __int128 v197;
  int v198;
  const char *v199;
  int v200;
  const char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  void *v220;
  unint64_t v221;
  char *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  int v238;
  void *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  char *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  char *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  char *v283;
  void **v284;
  void **v285;
  void *v286;
  void *v287;
  int v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::logic_error *exception;
  char **v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  _DWORD *v306;
  __int128 v307;
  int v308;
  unsigned int v309;
  _DWORD *v310;
  uint64_t *v311;
  __int128 v312;
  int v313;
  const char *v314;
  int v315;
  const char *v316;
  void *v317;
  std::__shared_weak_count *v318;
  uint64_t v319;
  char v320[8];
  void *__p;
  void *v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  _OWORD v330[2];
  __int128 v331;
  uint64_t v332;
  int v333;
  __int128 v334;
  uint64_t v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  _OWORD v348[2];
  __int128 v349;
  uint64_t v350[2];
  int v351;
  void *v352;
  void *v353;
  char *v354;
  void *v355;
  void *v356;
  char *v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  uint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  int v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  void *v393;
  void *v394;
  char *v395;
  void *v396;
  void *v397;
  char *v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  uint64_t v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  int v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  _BYTE v431[25];
  _DWORD *v432;
  _DWORD *v433;
  uint64_t v434;
  void *v435;
  std::__shared_weak_count *v436;
  char v437;
  char v438;
  uint64_t v439;
  os_log_t v440;
  __int128 v441;
  __int128 v442;
  void **v443;
  size_t v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  uint64_t v447;

  v4 = a1;
  v447 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD **)a1;
  v7 = *(_DWORD **)(a1 + 8);
  if (v7 == *(_DWORD **)a1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionTrackerUtils.cpp", 68, (uint64_t)"parameters.num_cameras()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_DWORD **)v4;
    v7 = *(_DWORD **)(v4 + 8);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v432 = 0;
  v433 = 0;
  v434 = 0;
  v350[0] = (uint64_t)&v432;
  if (v6 != v7)
  {
    v302 = a3;
    do
    {
      LODWORD(v323) = *v6;
      sub_20EA9AB98(v350, &v323);
      v6 += 272;
    }
    while (v6 != v7);
    v8 = v433;
    v310 = v432;
    if (v432 == v433)
      goto LABEL_328;
    v309 = 0;
    v303 = v4;
    v306 = v433;
    while (1)
    {
      v10 = *(_DWORD **)v4;
      v9 = *(_DWORD **)(v4 + 8);
      if (*(_DWORD **)v4 != v9)
      {
        while (*v10 != *v310)
        {
          v10 += 272;
          if (v10 == v9)
            goto LABEL_331;
        }
      }
      if (v10 == v9)
      {
LABEL_331:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Requested camera id not found.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      v12 = *(_QWORD *)v10;
      v11 = *((_QWORD *)v10 + 1);
      v350[0] = *(_QWORD *)v10;
      v13 = v10[4];
      v350[1] = v11;
      v351 = v13;
      v353 = 0;
      v354 = 0;
      v352 = 0;
      v15 = (_BYTE *)*((_QWORD *)v10 + 3);
      v14 = (_BYTE *)*((_QWORD *)v10 + 4);
      v16 = v14 - v15;
      if (v14 != v15)
      {
        if (v16 < 0)
          sub_20E867F44();
        v352 = operator new(v14 - v15);
        v353 = v352;
        v17 = (char *)v352 + 8 * (v16 >> 3);
        v354 = v17;
        memcpy(v352, v15, v16);
        v353 = v17;
      }
      v355 = 0;
      v356 = 0;
      v357 = 0;
      v19 = (_BYTE *)*((_QWORD *)v10 + 6);
      v18 = (_BYTE *)*((_QWORD *)v10 + 7);
      v20 = v18 - v19;
      if (v18 != v19)
      {
        if (v20 < 0)
          sub_20E867F44();
        v355 = operator new(v18 - v19);
        v356 = v355;
        v21 = (char *)v355 + 8 * (v20 >> 3);
        v357 = v21;
        memcpy(v355, v19, v20);
        v356 = v21;
      }
      v22 = *(_OWORD *)(v10 + 18);
      v23 = *(_OWORD *)(v10 + 22);
      v24 = *(_OWORD *)(v10 + 30);
      v360 = *(_OWORD *)(v10 + 26);
      v361 = v24;
      v358 = v22;
      v359 = v23;
      v25 = *(_OWORD *)(v10 + 34);
      v26 = *(_OWORD *)(v10 + 38);
      v27 = *(_OWORD *)(v10 + 42);
      v28 = *((_QWORD *)v10 + 24);
      v365 = *((_QWORD *)v10 + 23);
      v363 = v26;
      v364 = v27;
      v362 = v25;
      v29 = (std::__shared_weak_count *)*((_QWORD *)v10 + 25);
      v366 = v28;
      v367 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
      }
      v32 = *((_OWORD *)v10 + 14);
      v368 = *((_OWORD *)v10 + 13);
      v369 = v32;
      v33 = *((_OWORD *)v10 + 15);
      v34 = *((_OWORD *)v10 + 16);
      v35 = *((_OWORD *)v10 + 17);
      v373 = *((_QWORD *)v10 + 36);
      v371 = v34;
      v372 = v35;
      v370 = v33;
      v36 = *(_OWORD *)(v10 + 78);
      v374 = *(_OWORD *)(v10 + 74);
      v375 = v36;
      v37 = *(_OWORD *)(v10 + 94);
      v39 = *(_OWORD *)(v10 + 82);
      v38 = *(_OWORD *)(v10 + 86);
      v378 = *(_OWORD *)(v10 + 90);
      v379 = v37;
      v376 = v39;
      v377 = v38;
      v40 = *(_OWORD *)(v10 + 110);
      v42 = *(_OWORD *)(v10 + 98);
      v41 = *(_OWORD *)(v10 + 102);
      v382 = *(_OWORD *)(v10 + 106);
      v383 = v40;
      v380 = v42;
      v381 = v41;
      v44 = *(_OWORD *)(v10 + 118);
      v43 = *(_OWORD *)(v10 + 122);
      v45 = *(_OWORD *)(v10 + 114);
      v387 = v10[126];
      v385 = v44;
      v386 = v43;
      v384 = v45;
      v388 = *((_QWORD *)v10 + 64);
      v46 = (std::__shared_weak_count *)*((_QWORD *)v10 + 65);
      v389 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v390 = *((_QWORD *)v10 + 66);
      v49 = v10[136];
      v391 = *((_QWORD *)v10 + 67);
      v392 = v49;
      v394 = 0;
      v395 = 0;
      v393 = 0;
      v50 = (_BYTE *)*((_QWORD *)v10 + 69);
      v51 = (_BYTE *)*((_QWORD *)v10 + 70);
      v52 = v51 - v50;
      if (v51 != v50)
      {
        if (v52 < 0)
          sub_20E867F44();
        v393 = operator new(v51 - v50);
        v394 = v393;
        v53 = (char *)v393 + 8 * (v52 >> 3);
        v395 = v53;
        memcpy(v393, v50, v52);
        v394 = v53;
      }
      v396 = 0;
      v397 = 0;
      v398 = 0;
      v54 = (_BYTE *)*((_QWORD *)v10 + 72);
      v55 = (_BYTE *)*((_QWORD *)v10 + 73);
      v56 = v55 - v54;
      if (v55 != v54)
      {
        if (v56 < 0)
          sub_20E867F44();
        v396 = operator new(v55 - v54);
        v397 = v396;
        v57 = (char *)v396 + 8 * (v56 >> 3);
        v398 = v57;
        memcpy(v396, v54, v56);
        v397 = v57;
      }
      v58 = *(_OWORD *)(v10 + 150);
      v59 = *(_OWORD *)(v10 + 154);
      v60 = *(_OWORD *)(v10 + 162);
      v401 = *(_OWORD *)(v10 + 158);
      v402 = v60;
      v399 = v58;
      v400 = v59;
      v61 = *(_OWORD *)(v10 + 166);
      v62 = *(_OWORD *)(v10 + 170);
      v63 = *(_OWORD *)(v10 + 174);
      v406 = *((_QWORD *)v10 + 89);
      v404 = v62;
      v405 = v63;
      v403 = v61;
      v407 = *((_QWORD *)v10 + 90);
      v64 = (std::__shared_weak_count *)*((_QWORD *)v10 + 91);
      v408 = v64;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v67 = *((_OWORD *)v10 + 47);
      v409 = *((_OWORD *)v10 + 46);
      v410 = v67;
      v68 = *((_OWORD *)v10 + 48);
      v69 = *((_OWORD *)v10 + 49);
      v70 = *((_OWORD *)v10 + 50);
      v414 = *((_QWORD *)v10 + 102);
      v412 = v69;
      v413 = v70;
      v411 = v68;
      v71 = *(_OWORD *)(v10 + 210);
      v415 = *(_OWORD *)(v10 + 206);
      v416 = v71;
      v72 = *(_OWORD *)(v10 + 226);
      v74 = *(_OWORD *)(v10 + 214);
      v73 = *(_OWORD *)(v10 + 218);
      v419 = *(_OWORD *)(v10 + 222);
      v420 = v72;
      v417 = v74;
      v418 = v73;
      v75 = *(_OWORD *)(v10 + 242);
      v77 = *(_OWORD *)(v10 + 230);
      v76 = *(_OWORD *)(v10 + 234);
      v423 = *(_OWORD *)(v10 + 238);
      v424 = v75;
      v421 = v77;
      v422 = v76;
      v79 = *(_OWORD *)(v10 + 250);
      v78 = *(_OWORD *)(v10 + 254);
      v80 = *(_OWORD *)(v10 + 246);
      v428 = v10[258];
      v426 = v79;
      v427 = v78;
      v425 = v80;
      v429 = *((_QWORD *)v10 + 130);
      v81 = (std::__shared_weak_count *)*((_QWORD *)v10 + 131);
      v430 = v81;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = *((_OWORD *)v10 + 66);
      v85 = HIDWORD(v12);
      *(_OWORD *)&v431[9] = *(_OWORD *)((char *)v10 + 1065);
      *(_OWORD *)v431 = v84;
      if (v431[24])
        LODWORD(v85) = 2;
      v307 = *(_OWORD *)(*((_QWORD *)a2 + 59) + 16 * v309);
      LODWORD(v323) = *v310;
      HIDWORD(v323) = v85;
      v86 = a2[5];
      v328 = a2[4];
      v329 = v86;
      v330[0] = a2[6];
      *(_OWORD *)((char *)v330 + 9) = *(__int128 *)((char *)a2 + 105);
      v87 = a2[1];
      v324 = *a2;
      v325 = v87;
      v88 = a2[3];
      v326 = a2[2];
      v327 = v88;
      v332 = 0;
      v331 = 0uLL;
      v90 = (_BYTE *)*((_QWORD *)a2 + 16);
      v89 = (_BYTE *)*((_QWORD *)a2 + 17);
      v91 = v89 - v90;
      if (v89 != v90)
      {
        if (v91 < 0)
          sub_20E867F44();
        *(_QWORD *)&v331 = operator new(v89 - v90);
        *((_QWORD *)&v331 + 1) = v331;
        v92 = v331 + 2 * (v91 >> 1);
        v332 = v92;
        memcpy((void *)v331, v90, v91);
        *((_QWORD *)&v331 + 1) = v92;
      }
      v333 = *((_DWORD *)a2 + 38);
      v335 = 0;
      v334 = 0uLL;
      v94 = (_BYTE *)*((_QWORD *)a2 + 20);
      v93 = (_BYTE *)*((_QWORD *)a2 + 21);
      v95 = v93 - v94;
      if (v93 != v94)
      {
        if (v95 < 0)
          sub_20E867F44();
        *(_QWORD *)&v334 = operator new(v93 - v94);
        *((_QWORD *)&v334 + 1) = v334;
        v96 = v334 + 8 * (v95 >> 3);
        v335 = v96;
        memcpy((void *)v334, v94, v95);
        *((_QWORD *)&v334 + 1) = v96;
      }
      v97 = *(__int128 *)((char *)a2 + 200);
      v336 = *(__int128 *)((char *)a2 + 184);
      v337 = v97;
      v338 = *((_QWORD *)a2 + 27);
      if (*((char *)a2 + 247) < 0)
      {
        sub_20E860C04(&v339, *((void **)a2 + 28), *((_QWORD *)a2 + 29));
      }
      else
      {
        v339 = a2[14];
        v340 = *((_QWORD *)a2 + 30);
      }
      v98 = *(__int128 *)((char *)a2 + 360);
      v347 = *(__int128 *)((char *)a2 + 344);
      v348[0] = v98;
      *(_OWORD *)((char *)v348 + 9) = *(__int128 *)((char *)a2 + 369);
      v99 = *(__int128 *)((char *)a2 + 296);
      v343 = *(__int128 *)((char *)a2 + 280);
      v344 = v99;
      v100 = *(__int128 *)((char *)a2 + 328);
      v345 = *(__int128 *)((char *)a2 + 312);
      v346 = v100;
      v101 = *(__int128 *)((char *)a2 + 264);
      v341 = *(__int128 *)((char *)a2 + 248);
      v342 = v101;
      v349 = v307;
      BYTE1(v325) = *((_BYTE *)a2 + 496);
      if ((_BYTE)v381)
        break;
LABEL_244:
      v222 = a3[1];
      v221 = (unint64_t)a3[2];
      if ((unint64_t)v222 >= v221)
      {
        v240 = *a3;
        v241 = 0x4EC4EC4EC4EC4EC5 * ((v222 - *a3) >> 5);
        v242 = v241 + 1;
        if ((unint64_t)(v241 + 1) > 0x9D89D89D89D89DLL)
          sub_20E867F44();
        v243 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v221 - (_QWORD)v240) >> 5);
        if (2 * v243 > v242)
          v242 = 2 * v243;
        if (v243 >= 0x4EC4EC4EC4EC4ELL)
          v244 = 0x9D89D89D89D89DLL;
        else
          v244 = v242;
        if (v244)
        {
          if (v244 > 0x9D89D89D89D89DLL)
            sub_20E877A38();
          v245 = (char *)operator new(416 * v244);
        }
        else
        {
          v245 = 0;
        }
        v246 = v332;
        v247 = &v245[416 * v241];
        *(_QWORD *)v247 = v323;
        v248 = &v245[416 * v244];
        v249 = v329;
        *(_OWORD *)(v247 + 72) = v328;
        *(_OWORD *)(v247 + 88) = v249;
        *(_OWORD *)(v247 + 104) = v330[0];
        *(_OWORD *)(v247 + 113) = *(_OWORD *)((char *)v330 + 9);
        v250 = v325;
        *(_OWORD *)(v247 + 8) = v324;
        *(_OWORD *)(v247 + 24) = v250;
        v251 = v327;
        *(_OWORD *)(v247 + 40) = v326;
        *(_OWORD *)(v247 + 56) = v251;
        *(_OWORD *)(v247 + 136) = v331;
        *((_QWORD *)v247 + 19) = v246;
        v332 = 0;
        v331 = 0uLL;
        *((_DWORD *)v247 + 40) = v333;
        *(_OWORD *)(v247 + 168) = v334;
        *((_QWORD *)v247 + 23) = v335;
        v335 = 0;
        v334 = 0uLL;
        v252 = v336;
        v253 = v337;
        *((_QWORD *)v247 + 28) = v338;
        *((_OWORD *)v247 + 12) = v252;
        *((_OWORD *)v247 + 13) = v253;
        v254 = v339;
        *((_QWORD *)v247 + 31) = v340;
        *(_OWORD *)(v247 + 232) = v254;
        v339 = 0uLL;
        v340 = 0;
        v255 = v341;
        v256 = v342;
        v257 = v344;
        *((_OWORD *)v247 + 18) = v343;
        *((_OWORD *)v247 + 19) = v257;
        *((_OWORD *)v247 + 16) = v255;
        *((_OWORD *)v247 + 17) = v256;
        v258 = v345;
        v259 = v346;
        *(_OWORD *)(v247 + 377) = *(_OWORD *)((char *)v348 + 9);
        v260 = v348[0];
        *((_OWORD *)v247 + 22) = v347;
        *((_OWORD *)v247 + 23) = v260;
        *((_OWORD *)v247 + 20) = v258;
        *((_OWORD *)v247 + 21) = v259;
        v261 = v247 + 416;
        *((_OWORD *)v247 + 25) = v349;
        if (v222 == v240)
        {
          *a3 = v247;
          a3[1] = v261;
          a3[2] = v248;
        }
        else
        {
          v262 = 0;
          do
          {
            v263 = &v247[v262];
            v264 = &v222[v262];
            *(_QWORD *)&v247[v262 - 416] = *(_QWORD *)&v222[v262 - 416];
            v265 = &v247[v262 - 408];
            v266 = *(_OWORD *)&v222[v262 - 408];
            v267 = *(_OWORD *)&v222[v262 - 392];
            v268 = *(_OWORD *)&v222[v262 - 360];
            *((_OWORD *)v265 + 2) = *(_OWORD *)&v222[v262 - 376];
            *((_OWORD *)v265 + 3) = v268;
            *(_OWORD *)v265 = v266;
            *((_OWORD *)v265 + 1) = v267;
            v269 = *(_OWORD *)&v222[v262 - 344];
            v270 = *(_OWORD *)&v222[v262 - 328];
            v271 = *(_OWORD *)&v222[v262 - 312];
            *(_OWORD *)(v265 + 105) = *(_OWORD *)&v222[v262 - 303];
            *((_OWORD *)v265 + 5) = v270;
            *((_OWORD *)v265 + 6) = v271;
            v272 = (uint64_t)&v222[v262 - 280];
            *((_OWORD *)v265 + 4) = v269;
            v273 = &v247[v262 - 264];
            *(_QWORD *)v273 = 0;
            *(_QWORD *)&v247[v262 - 272] = 0;
            *(_OWORD *)&v247[v262 - 280] = *(_OWORD *)v272;
            *(_QWORD *)v273 = *(_QWORD *)&v222[v262 - 264];
            *(_QWORD *)(v272 + 16) = 0;
            *(_QWORD *)&v222[v262 - 272] = 0;
            *(_QWORD *)v272 = 0;
            *((_DWORD *)v263 - 64) = *(_DWORD *)&v222[v262 - 256];
            *((_QWORD *)v263 - 30) = 0;
            *((_QWORD *)v263 - 29) = 0;
            *(_OWORD *)(v263 - 248) = *(_OWORD *)&v222[v262 - 248];
            *((_QWORD *)v263 - 29) = *(_QWORD *)&v222[v262 - 232];
            *((_QWORD *)v264 - 31) = 0;
            *((_QWORD *)v264 - 30) = 0;
            *((_QWORD *)v264 - 29) = 0;
            v274 = *(_OWORD *)&v222[v262 - 224];
            v275 = *(_OWORD *)&v222[v262 - 208];
            *((_QWORD *)v263 - 24) = *(_QWORD *)&v222[v262 - 192];
            *((_OWORD *)v263 - 14) = v274;
            *((_OWORD *)v263 - 13) = v275;
            v276 = *(_OWORD *)&v222[v262 - 184];
            *((_QWORD *)v263 - 21) = *(_QWORD *)&v222[v262 - 168];
            *(_OWORD *)(v263 - 184) = v276;
            *((_QWORD *)v264 - 22) = 0;
            *((_QWORD *)v264 - 21) = 0;
            *((_QWORD *)v264 - 23) = 0;
            v277 = *(_OWORD *)&v222[v262 - 96];
            v279 = *(_OWORD *)&v222[v262 - 144];
            v278 = *(_OWORD *)&v222[v262 - 128];
            *((_OWORD *)v263 - 7) = *(_OWORD *)&v222[v262 - 112];
            *((_OWORD *)v263 - 6) = v277;
            *((_OWORD *)v263 - 9) = v279;
            *((_OWORD *)v263 - 8) = v278;
            *((_OWORD *)v263 - 10) = *(_OWORD *)&v222[v262 - 160];
            v281 = *(_OWORD *)&v222[v262 - 64];
            v280 = *(_OWORD *)&v222[v262 - 48];
            v282 = *(_OWORD *)&v222[v262 - 80];
            *(_OWORD *)(v263 - 39) = *(_OWORD *)&v222[v262 - 39];
            *((_OWORD *)v263 - 4) = v281;
            *((_OWORD *)v263 - 3) = v280;
            *((_OWORD *)v263 - 5) = v282;
            *((_OWORD *)v263 - 1) = *(_OWORD *)&v222[v262 - 16];
            v262 -= 416;
          }
          while (&v222[v262] != v240);
          v222 = *a3;
          v283 = a3[1];
          *a3 = &v247[v262];
          a3[1] = v261;
          a3[2] = v248;
          if (v283 != v222)
          {
            v284 = (void **)(v283 - 280);
            while ((*((char *)v284 + 119) & 0x80000000) == 0)
            {
              v286 = v284[4];
              if (v286)
                goto LABEL_268;
LABEL_269:
              v287 = *v284;
              if (*v284)
              {
                v284[1] = v287;
                operator delete(v287);
              }
              v285 = v284 - 17;
              v284 -= 52;
              if (v285 == (void **)v222)
                goto LABEL_274;
            }
            operator delete(v284[12]);
            v286 = v284[4];
            if (!v286)
              goto LABEL_269;
LABEL_268:
            v284[5] = v286;
            operator delete(v286);
            goto LABEL_269;
          }
        }
LABEL_274:
        if (v222)
          operator delete(v222);
        v288 = SHIBYTE(v340);
        a3[1] = v261;
        if (HIDWORD(v350[0]) == 2)
          v238 = 2;
        else
          v238 = 1;
        if (v288 < 0)
        {
          operator delete((void *)v339);
          v239 = (void *)v334;
          if (!(_QWORD)v334)
            goto LABEL_282;
        }
        else
        {
          v239 = (void *)v334;
          if (!(_QWORD)v334)
            goto LABEL_282;
        }
LABEL_281:
        *((_QWORD *)&v334 + 1) = v239;
        operator delete(v239);
        goto LABEL_282;
      }
      *(_QWORD *)v222 = v323;
      v223 = v324;
      v224 = v325;
      v225 = v326;
      *(_OWORD *)(v222 + 56) = v327;
      *(_OWORD *)(v222 + 40) = v225;
      *(_OWORD *)(v222 + 24) = v224;
      *(_OWORD *)(v222 + 8) = v223;
      v226 = v328;
      v227 = v329;
      v228 = v330[0];
      *(_OWORD *)(v222 + 113) = *(_OWORD *)((char *)v330 + 9);
      *(_OWORD *)(v222 + 104) = v228;
      *(_OWORD *)(v222 + 88) = v227;
      *(_OWORD *)(v222 + 72) = v226;
      *((_QWORD *)v222 + 17) = 0;
      *((_QWORD *)v222 + 18) = 0;
      *((_QWORD *)v222 + 19) = 0;
      *(_OWORD *)(v222 + 136) = v331;
      *((_QWORD *)v222 + 19) = v332;
      v331 = 0uLL;
      v332 = 0;
      *((_DWORD *)v222 + 40) = v333;
      *((_QWORD *)v222 + 21) = 0;
      *((_QWORD *)v222 + 22) = 0;
      *((_QWORD *)v222 + 23) = 0;
      *(_OWORD *)(v222 + 168) = v334;
      *((_QWORD *)v222 + 23) = v335;
      v334 = 0uLL;
      v335 = 0;
      v229 = v336;
      v230 = v337;
      *((_QWORD *)v222 + 28) = v338;
      *((_OWORD *)v222 + 12) = v229;
      *((_OWORD *)v222 + 13) = v230;
      v231 = v339;
      *((_QWORD *)v222 + 31) = v340;
      *(_OWORD *)(v222 + 232) = v231;
      v340 = 0;
      v339 = 0uLL;
      *((_OWORD *)v222 + 16) = v341;
      v232 = v342;
      v233 = v343;
      v234 = v345;
      *((_OWORD *)v222 + 19) = v344;
      *((_OWORD *)v222 + 20) = v234;
      *((_OWORD *)v222 + 17) = v232;
      *((_OWORD *)v222 + 18) = v233;
      v235 = v346;
      v236 = v347;
      v237 = v348[0];
      *(_OWORD *)(v222 + 377) = *(_OWORD *)((char *)v348 + 9);
      *((_OWORD *)v222 + 22) = v236;
      *((_OWORD *)v222 + 23) = v237;
      *((_OWORD *)v222 + 21) = v235;
      *((_OWORD *)v222 + 25) = v349;
      a3[1] = v222 + 416;
      if (HIDWORD(v350[0]) == 2)
        v238 = 2;
      else
        v238 = 1;
      v239 = (void *)v334;
      if ((_QWORD)v334)
        goto LABEL_281;
LABEL_282:
      if ((_QWORD)v331)
      {
        *((_QWORD *)&v331 + 1) = v331;
        operator delete((void *)v331);
      }
      v289 = v430;
      if (!v430)
        goto LABEL_288;
      v290 = (unint64_t *)&v430->__shared_owners_;
      do
        v291 = __ldaxr(v290);
      while (__stlxr(v291 - 1, v290));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
        v292 = v408;
        if (!v408)
          goto LABEL_294;
      }
      else
      {
LABEL_288:
        v292 = v408;
        if (!v408)
          goto LABEL_294;
      }
      v293 = (unint64_t *)&v292->__shared_owners_;
      do
        v294 = __ldaxr(v293);
      while (__stlxr(v294 - 1, v293));
      if (!v294)
      {
        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
        std::__shared_weak_count::__release_weak(v292);
      }
LABEL_294:
      if (v396)
      {
        v397 = v396;
        operator delete(v396);
      }
      if (v393)
      {
        v394 = v393;
        operator delete(v393);
      }
      v295 = v389;
      if (!v389)
        goto LABEL_302;
      v296 = (unint64_t *)&v389->__shared_owners_;
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
        v298 = v367;
        if (v367)
          goto LABEL_303;
      }
      else
      {
LABEL_302:
        v298 = v367;
        if (v367)
        {
LABEL_303:
          v299 = (unint64_t *)&v298->__shared_owners_;
          do
            v300 = __ldaxr(v299);
          while (__stlxr(v300 - 1, v299));
          if (!v300)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
      }
      if (v355)
      {
        v356 = v355;
        operator delete(v355);
      }
      if (v352)
      {
        v353 = v352;
        operator delete(v352);
      }
      v309 += v238;
      if (++v310 == v306)
      {
        v8 = v432;
LABEL_328:
        if (v8)
        {
          v433 = v8;
          operator delete(v8);
        }
        return;
      }
    }
    sub_20EA82680((uint64_t)v350, (uint64_t)v320, NAN);
    sub_20EB830D4((uint64_t)v320, (uint64_t)&v440);
    isa = v440->isa;
    v103 = *((_DWORD *)v440->isa + 248);
    if (v103 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_333;
      }
      v103 = *((_DWORD *)isa + 248);
    }
    if (!v103)
      goto LABEL_332;
    if (v103 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_333;
      }
      v103 = *((_DWORD *)isa + 248);
    }
    if (!v103)
    {
LABEL_332:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_333:
      abort();
    }
    v104 = *((double *)isa + 18);
    v105 = v440;
    if (!v440)
    {
LABEL_92:
      v117 = v349;
      if ((unint64_t)v349 <= *((_QWORD *)&v349 + 1))
        v118 = *((_QWORD *)&v349 + 1);
      else
        v118 = v349;
      if (*((_QWORD *)&v349 + 1) < (unint64_t)v349)
        v117 = *((_QWORD *)&v349 + 1);
      *(double *)&v326 = *((double *)a2 + 6) / ((v104 + v104) * ((double)v118 / (double)v117));
      v119 = atomic_load((unsigned __int8 *)&qword_254A622A8);
      if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_254A622A8))
      {
        sub_21021D3D8(&v311);
        sub_20E8610C0(&v440, "cv3d.vio.odometry");
        sub_20E8C4068(&v311, (uint64_t)&v440, &qword_254A622A0);
        if (SHIBYTE(v441) < 0)
          operator delete(v440);
        __cxa_guard_release(&qword_254A622A8);
        a3 = v302;
        v4 = v303;
      }
      v319 = qword_254A622A0;
      if (**(int **)(qword_254A622A0 + 56) > 3)
        goto LABEL_239;
      v120 = *(unsigned __int8 *)(qword_254A622A0 + 72);
      v121 = sub_20E8C31DC(qword_254A622A0, "OSLogSurrogateAppender", 1, 0);
      v122 = v121;
      if (!v120 && !v121)
        goto LABEL_239;
      v311 = &v319;
      *(std::chrono::steady_clock::time_point *)&v312 = std::chrono::steady_clock::now();
      *((std::chrono::system_clock::time_point *)&v312 + 1) = std::chrono::system_clock::now();
      v313 = 3;
      v314 = "unknown file";
      v315 = 113;
      v316 = "unknown function";
      v317 = 0;
      v318 = 0;
      v123 = *v311;
      v124 = (const char *)(*v311 + 16);
      v304 = v124;
      v305 = *v311;
      if (*(char *)(*v311 + 39) < 0)
      {
        v124 = *(const char **)(v123 + 16);
        v125 = *(_QWORD *)(v123 + 24);
        v127 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v127 & 1) != 0)
          goto LABEL_105;
      }
      else
      {
        v125 = *(unsigned __int8 *)(*v311 + 39);
        v126 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v126 & 1) != 0)
          goto LABEL_105;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v435);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v435);
        if (v438 && v437 < 0)
          operator delete(v435);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        a3 = v302;
      }
LABEL_105:
      if (byte_254A4A4F8[23] >= 0)
        v128 = byte_254A4A4F8;
      else
        v128 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v129 = byte_254A4A4F8[23];
      else
        v129 = *(_QWORD *)&byte_254A4A4F8[8];
      v440 = os_log_create(v128, v124);
      if (v129 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v308 = v120;
      if (v129 >= 0x17)
      {
        v131 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v129 | 7) != 0x17)
          v131 = v129 | 7;
        v132 = v131 + 1;
        v130 = (__int128 *)operator new(v131 + 1);
        *((_QWORD *)&v441 + 1) = v129;
        *(_QWORD *)&v442 = v132 | 0x8000000000000000;
        *(_QWORD *)&v441 = v130;
        a3 = v302;
      }
      else
      {
        BYTE7(v442) = v129;
        v130 = &v441;
        if (!v129)
        {
LABEL_119:
          *((_BYTE *)v130 + v129) = 0;
          BYTE8(v442) = 1;
          if (v125 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v4 = v303;
          if (v125 >= 0x17)
          {
            v135 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v125 | 7) != 0x17)
              v135 = v125 | 7;
            v136 = v135 + 1;
            v133 = (void **)operator new(v135 + 1);
            v444 = v125;
            v445 = v136 | 0x8000000000000000;
            v443 = v133;
          }
          else
          {
            HIBYTE(v445) = v125;
            v133 = (void **)&v443;
            if (!v125)
            {
              LOBYTE(v443) = 0;
              LOBYTE(v446) = 1;
              v134 = v440;
              if ((SHIBYTE(v445) & 0x80000000) == 0)
                goto LABEL_123;
              goto LABEL_129;
            }
          }
          memmove(v133, v124, v125);
          *((_BYTE *)v133 + v125) = 0;
          LOBYTE(v446) = 1;
          v134 = v440;
          if ((SHIBYTE(v445) & 0x80000000) == 0)
          {
LABEL_123:
            if (!BYTE8(v442))
              goto LABEL_132;
            goto LABEL_130;
          }
LABEL_129:
          operator delete(v443);
          if (!BYTE8(v442))
            goto LABEL_132;
LABEL_130:
          if (SBYTE7(v442) < 0)
            operator delete((void *)v441);
LABEL_132:
          if (v440)
            os_release(v440);
          if (v122 && *(_QWORD *)(v122 + 24))
          {
            v137 = _os_log_pack_size();
            v138 = operator new(v137, (std::align_val_t)8uLL);
            v139 = (std::__shared_weak_count *)operator new();
            v140 = v139;
            v139->__shared_owners_ = 0;
            v141 = (unint64_t *)&v139->__shared_owners_;
            v139->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v139->__shared_weak_owners_ = 0;
            v139[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
            v440 = v138;
            *(_QWORD *)&v441 = v138;
            *((_QWORD *)&v441 + 1) = v139;
            do
              v142 = __ldxr(v141);
            while (__stxr(v142 + 1, v141));
            v442 = 0uLL;
            v443 = 0;
            do
              v143 = __ldaxr(v141);
            while (__stlxr(v143 - 1, v141));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v140);
            }
            v144 = v440;
            v145 = _os_log_pack_fill();
            v146 = *v310;
            v147 = v326;
            *(_DWORD *)v145 = 67109376;
            *(_DWORD *)(v145 + 4) = v146;
            *(_WORD *)(v145 + 8) = 2048;
            *(_QWORD *)(v145 + 10) = v147;
            v148 = (char *)operator new();
            v149 = *(unsigned __int8 *)(v305 + 39);
            v150 = v304;
            if ((v149 & 0x80u) != 0)
            {
              v150 = *(const char **)(v305 + 16);
              v149 = *(_QWORD *)(v305 + 24);
            }
            *(_QWORD *)v148 = v144;
            *(_OWORD *)(v148 + 8) = v441;
            v441 = 0uLL;
            *(_OWORD *)(v148 + 24) = v442;
            v442 = 0uLL;
            *((_QWORD *)v148 + 5) = v150;
            *((_QWORD *)v148 + 6) = v149;
            v148[56] = 1;
            v439 = 0;
            v435 = v148;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v122 + 24) + 40))(*(_QWORD *)(v122 + 24), &v435);
            v151 = v435;
            v435 = 0;
            if (v151)
            {
              v152 = (std::__shared_weak_count *)*((_QWORD *)v151 + 4);
              if (v152)
              {
                v153 = (unint64_t *)&v152->__shared_owners_;
                do
                  v154 = __ldaxr(v153);
                while (__stlxr(v154 - 1, v153));
                if (!v154)
                {
                  ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                  std::__shared_weak_count::__release_weak(v152);
                }
              }
              v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
              if (v155)
              {
                v156 = (unint64_t *)&v155->__shared_owners_;
                do
                  v157 = __ldaxr(v156);
                while (__stlxr(v157 - 1, v156));
                if (!v157)
                {
                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                  std::__shared_weak_count::__release_weak(v155);
                }
              }
              MEMORY[0x212BC6398](v151, 0x10F0C40B62ED6C6);
              v158 = v439;
              v439 = 0;
              if (v158)
              {
                v159 = *(std::__shared_weak_count **)(v158 + 32);
                if (v159)
                {
                  v160 = (unint64_t *)&v159->__shared_owners_;
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                    std::__shared_weak_count::__release_weak(v159);
                  }
                }
                v162 = *(std::__shared_weak_count **)(v158 + 16);
                if (v162)
                {
                  v163 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                MEMORY[0x212BC6398](v158, 0x10F0C40B62ED6C6);
              }
            }
            v165 = (std::__shared_weak_count *)*((_QWORD *)&v442 + 1);
            if (*((_QWORD *)&v442 + 1))
            {
              v166 = (unint64_t *)(*((_QWORD *)&v442 + 1) + 8);
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            v168 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
            if (*((_QWORD *)&v441 + 1))
            {
              v169 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
          }
          else
          {
            os_log_type_enabled(v134, OS_LOG_TYPE_INFO);
            v171 = *v310;
            LODWORD(v440) = 67109376;
            HIDWORD(v440) = v171;
            LOWORD(v441) = 2048;
            *(_QWORD *)((char *)&v441 + 2) = v326;
            v172 = (void *)_os_log_send_and_compose_impl();
            if (v172)
              free(v172);
          }
          if (!v308)
            goto LABEL_206;
          sub_20E8C003C((uint64_t)&v311, "Camera ID: %u adjusted disparity fraction to: %f.", *v310, *(double *)&v326);
          v173 = v311;
          if (!v311)
            goto LABEL_206;
          v174 = (unint64_t)v317;
          if (!v317)
            goto LABEL_206;
          v175 = (*v311 + 16);
          if (*(char *)(*v311 + 39) < 0)
            v175 = v175->isa;
          v176 = v312;
          v177 = v313;
          v178 = v314;
          v179 = v315;
          v180 = v316;
          v181 = v318;
          v435 = v317;
          v436 = v318;
          if (v318)
          {
            v182 = (unint64_t *)&v318->__shared_owners_;
            do
              v183 = __ldxr(v182);
            while (__stxr(v183 + 1, v182));
            v441 = v176;
            LODWORD(v442) = v177;
            *((_QWORD *)&v442 + 1) = v178;
            LODWORD(v443) = v179;
            v444 = (size_t)v180;
            v445 = v174;
            v446 = v181;
            do
              v184 = __ldxr(v182);
            while (__stxr(v184 + 1, v182));
            v440 = v175;
            v185 = *v173;
            if (v177 < **(_DWORD **)(*v173 + 56))
            {
LABEL_190:
              if (!v181)
              {
LABEL_198:
                v188 = v436;
                if (!v436)
                  goto LABEL_202;
                v189 = (unint64_t *)&v436->__shared_owners_;
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                  v191 = v318;
                  v317 = 0;
                  v318 = 0;
                  if (!v191)
                    goto LABEL_206;
                }
                else
                {
LABEL_202:
                  v191 = v318;
                  v317 = 0;
                  v318 = 0;
                  if (!v191)
                    goto LABEL_206;
                }
                v192 = (unint64_t *)&v191->__shared_owners_;
                do
                  v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                  std::__shared_weak_count::__release_weak(v191);
                  v194 = v311;
                  if (!v311)
                    goto LABEL_234;
                  goto LABEL_207;
                }
LABEL_206:
                v194 = v311;
                if (!v311)
                  goto LABEL_234;
LABEL_207:
                v195 = (unint64_t)v317;
                if (!v317)
                  goto LABEL_234;
                v196 = (*v194 + 16);
                if (*(char *)(*v194 + 39) < 0)
                  v196 = v196->isa;
                v197 = v312;
                v198 = v313;
                v199 = v314;
                v200 = v315;
                v201 = v316;
                v202 = v318;
                v435 = v317;
                v436 = v318;
                if (v318)
                {
                  v203 = (unint64_t *)&v318->__shared_owners_;
                  do
                    v204 = __ldxr(v203);
                  while (__stxr(v204 + 1, v203));
                  v441 = v197;
                  LODWORD(v442) = v198;
                  *((_QWORD *)&v442 + 1) = v199;
                  LODWORD(v443) = v200;
                  v444 = (size_t)v201;
                  v445 = v195;
                  v446 = v202;
                  do
                    v205 = __ldxr(v203);
                  while (__stxr(v205 + 1, v203));
                  v440 = v196;
                  v206 = *v194;
                  if (v198 < **(_DWORD **)(*v194 + 56))
                  {
LABEL_216:
                    if (!v202)
                    {
LABEL_224:
                      v209 = v436;
                      if (v436)
                      {
                        v210 = (unint64_t *)&v436->__shared_owners_;
                        do
                          v211 = __ldaxr(v210);
                        while (__stlxr(v211 - 1, v210));
                        if (!v211)
                        {
                          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                          std::__shared_weak_count::__release_weak(v209);
                        }
                      }
                      v212 = v318;
                      v317 = 0;
                      v318 = 0;
                      if (!v212)
                        goto LABEL_239;
                      v213 = (unint64_t *)&v212->__shared_owners_;
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
LABEL_234:
                      v215 = v318;
                      if (v318)
                      {
                        v216 = (unint64_t *)&v318->__shared_owners_;
                        do
                          v217 = __ldaxr(v216);
                        while (__stlxr(v217 - 1, v216));
                        if (!v217)
                        {
                          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                          std::__shared_weak_count::__release_weak(v215);
                        }
                      }
LABEL_239:
                      v218 = __p;
                      if (__p)
                      {
                        v219 = (uint64_t)v322;
                        v220 = __p;
                        if (v322 != __p)
                        {
                          do
                            v219 = sub_20EB8188C(v219 - 1664);
                          while ((void *)v219 != v218);
                          v220 = __p;
                        }
                        v322 = v218;
                        operator delete(v220);
                      }
                      goto LABEL_244;
                    }
LABEL_220:
                    v207 = (unint64_t *)&v202->__shared_owners_;
                    do
                      v208 = __ldaxr(v207);
                    while (__stlxr(v208 - 1, v207));
                    if (!v208)
                    {
                      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                      std::__shared_weak_count::__release_weak(v202);
                    }
                    goto LABEL_224;
                  }
                }
                else
                {
                  v441 = v312;
                  LODWORD(v442) = v313;
                  *((_QWORD *)&v442 + 1) = v314;
                  LODWORD(v443) = v315;
                  v444 = (size_t)v316;
                  v445 = (unint64_t)v317;
                  v446 = 0;
                  v440 = v196;
                  v206 = *v194;
                  if (v313 < **(_DWORD **)(*v194 + 56))
                    goto LABEL_216;
                }
                sub_20E8C3FC4(v206, (uint64_t)&v440);
                v202 = v446;
                if (!v446)
                  goto LABEL_224;
                goto LABEL_220;
              }
LABEL_194:
              v186 = (unint64_t *)&v181->__shared_owners_;
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 - 1, v186));
              if (!v187)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
              goto LABEL_198;
            }
          }
          else
          {
            v441 = v312;
            LODWORD(v442) = v313;
            *((_QWORD *)&v442 + 1) = v314;
            LODWORD(v443) = v315;
            v444 = (size_t)v316;
            v445 = (unint64_t)v317;
            v446 = 0;
            v440 = v175;
            v185 = *v311;
            if (v313 < **(_DWORD **)(*v311 + 56))
              goto LABEL_190;
          }
          sub_20E8C3FC4(v185, (uint64_t)&v440);
          v181 = v446;
          if (!v446)
            goto LABEL_198;
          goto LABEL_194;
        }
      }
      memmove(v130, v128, v129);
      goto LABEL_119;
    }
    v106 = (_QWORD *)v441;
    v107 = v440;
    if ((os_log_t)v441 == v440)
    {
LABEL_91:
      *(_QWORD *)&v441 = v105;
      operator delete(v107);
      goto LABEL_92;
    }
    while (1)
    {
      v109 = *--v106;
      v108 = v109;
      *v106 = 0;
      if (!v109)
        goto LABEL_63;
      v110 = *(_DWORD *)(v108 + 992);
      if (v110 != -1)
      {
        if (v110 > 7)
        {
          if (v110 > 0xB)
          {
            if (v110 >= 0xF)
            {
              v111 = *(std::__shared_weak_count **)(v108 + 896);
              if (v111)
              {
                v115 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldaxr(v115);
                while (__stlxr(v113 - 1, v115));
LABEL_88:
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
            }
          }
          else if (v110 > 9)
          {
            if (v110 != 10)
            {
              v111 = *(std::__shared_weak_count **)(v108 + 672);
              if (v111)
              {
                v116 = (unint64_t *)&v111->__shared_owners_;
                do
                  v113 = __ldaxr(v116);
                while (__stlxr(v113 - 1, v116));
                goto LABEL_88;
              }
            }
          }
          else if (v110 == 9)
          {
            v111 = *(std::__shared_weak_count **)(v108 + 504);
            if (v111)
            {
              v114 = (unint64_t *)&v111->__shared_owners_;
              do
                v113 = __ldaxr(v114);
              while (__stlxr(v113 - 1, v114));
              goto LABEL_88;
            }
          }
        }
        else if (v110 == 7)
        {
          v111 = *(std::__shared_weak_count **)(v108 + 480);
          if (v111)
          {
            v112 = (unint64_t *)&v111->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            goto LABEL_88;
          }
        }
      }
      MEMORY[0x212BC6398](v108, 0x1000C408CB30F5BLL);
LABEL_63:
      if (v106 == (_QWORD *)v105)
      {
        v107 = v440;
        goto LABEL_91;
      }
    }
  }
}

void sub_20F15386C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  void *v63;

  if (*(_BYTE *)(v61 - 208) && *(char *)(v61 - 209) < 0)
    operator delete(*(void **)(v61 - 232));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  sub_20EA841C0((uint64_t)&a57);
  sub_20F153BBC((uint64_t)&a61);
  sub_20E86A6B8(&STACK[0x340]);
  v63 = *(void **)(v61 - 256);
  if (v63)
  {
    *(_QWORD *)(v61 - 248) = v63;
    operator delete(v63);
  }
  sub_20F006D78(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20F153BBC(uint64_t a1)
{
  void *v2;
  void *v3;

  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 168);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 232));
  v2 = *(void **)(a1 + 168);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20F153C18(uint64_t a1)
{
  double v1;
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  double v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t j;
  void *v51;
  void *v52;
  unint64_t v53;
  _QWORD *v54;
  void *v55;
  unint64_t v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _BYTE *v111;
  char *v112;
  char v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  char **v121;
  uint64_t v122;
  const void *v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  int v134;
  char v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD v139[52];
  void *v140;
  void *v141;
  char v142;
  _OWORD __dst[113];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _OWORD v153[2];
  void *__src[226];
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[119];
  uint64_t v159;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v135 = v6;
  v136 = v7;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v14 = v13;
  v16 = v15;
  v159 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v15 + 208) = 0;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 169) = 0u;
  *(_QWORD *)(v15 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(v15 + 264) = unk_21039CAC8;
  *(_OWORD *)(v15 + 248) = xmmword_21039CAB8;
  *(_OWORD *)(v15 + 232) = unk_21039CAA8;
  *(_OWORD *)(v15 + 216) = xmmword_21039CA98;
  *(_BYTE *)(v15 + 320) = 0;
  *(_WORD *)(v15 + 328) = 0;
  *(_BYTE *)(v15 + 330) = 0;
  *(_QWORD *)(v15 + 304) = 0;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_BYTE *)(v15 + 312) = 0;
  *(_BYTE *)(v15 + 336) = 2;
  v17 = v15 + 344;
  *(_QWORD *)(v15 + 360) = 0;
  *(_OWORD *)(v15 + 344) = 0u;
  *(_WORD *)(v15 + 368) = 0;
  *(_OWORD *)(v15 + 376) = 0u;
  *(_OWORD *)(v15 + 392) = 0u;
  *(_QWORD *)(v15 + 408) = 0;
  *(_DWORD *)(v15 + 416) = 1065353216;
  *(_BYTE *)(v15 + 424) = 0;
  *(_OWORD *)(v15 + 432) = 0u;
  *(_OWORD *)(v15 + 448) = 0u;
  *(_DWORD *)(v15 + 464) = 1065353216;
  *(_OWORD *)(v15 + 472) = 0u;
  v18 = (void **)(v15 + 472);
  *(_OWORD *)(v15 + 488) = 0u;
  *(_DWORD *)(v15 + 504) = 1065353216;
  *(_BYTE *)(v15 + 512) = 0;
  *(_BYTE *)(v15 + 520) = 0;
  *(_BYTE *)(v15 + 592) = 0;
  *(_BYTE *)(v15 + 600) = 0;
  *(_BYTE *)(v15 + 672) = 0;
  *(_BYTE *)(v15 + 680) = 0;
  *(_BYTE *)(v15 + 728) = 0;
  *(_DWORD *)(v15 + 736) = 0;
  *(_WORD *)(v15 + 740) = 0;
  *(_BYTE *)(v15 + 2744) = 0;
  *(_BYTE *)(v15 + 2752) = 0;
  *(_BYTE *)(v15 + 3648) = 0;
  *(_BYTE *)(v15 + 3656) = 0;
  *(_BYTE *)(v15 + 3672) = 0;
  *(_WORD *)(v15 + 3680) = 0;
  *(_BYTE *)(v15 + 768) = 0;
  *(_QWORD *)(v15 + 760) = 0;
  v138 = (_QWORD *)(v15 + 744);
  *(_OWORD *)(v15 + 744) = 0u;
  *(_QWORD *)(v15 + 3696) = -1;
  *(_QWORD *)(v15 + 3688) = -1;
  *(_OWORD *)(v15 + 3704) = 0u;
  *(_OWORD *)(v15 + 3720) = 0u;
  *(_DWORD *)(v15 + 3736) = 1065353216;
  *(_DWORD *)(v15 + 3744) = 0;
  *(_BYTE *)(v15 + 3748) = 1;
  *(_QWORD *)(v15 + 3752) = 0xBFF0000000000000;
  *(_BYTE *)(v15 + 3760) = 0;
  *(_BYTE *)(v15 + 3764) = 0;
  *(_BYTE *)(v15 + 3768) = 0;
  *(_BYTE *)(v15 + 3772) = 0;
  v19 = *(_QWORD *)(*(_QWORD *)(v13 + 4864) + 5264);
  v20 = *(double *)v19;
  LOBYTE(v139[0]) = 0;
  v142 = 0;
  v137 = v16;
  if (*(_BYTE *)(v19 + 872))
  {
    sub_20F04F154((uint64_t)v139, v19 + 416);
    v142 = 1;
  }
  else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 77, (uint64_t)"op_health_metadata", 18, (uint64_t)"Health metric is not valid. It should never happen", 50, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_188;
  }
  if (*(int *)(v14 + 4904) > 0)
  {
LABEL_7:
    v21 = *(_QWORD **)(v14 + 4864);
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v21[317] - 8);
LABEL_8:
    v22 = v21[314];
    *(_QWORD *)v16 = *(_QWORD *)(v22 - 8);
    goto LABEL_9;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 78, (uint64_t)"vfusion.HasProcessedFirstWindow()", 33, (uint64_t)"VFusion has not processed the window", 36, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_188;
  }
  if (*(int *)(v14 + 4904) > 0)
    goto LABEL_7;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1511, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_188;
  }
  v133 = *(_DWORD *)(v14 + 4904);
  v21 = *(_QWORD **)(v14 + 4864);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v21[317] - 8);
  if (v133 >= 1)
    goto LABEL_8;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1506, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_188;
  }
  v134 = *(_DWORD *)(v14 + 4904);
  v21 = *(_QWORD **)(v14 + 4864);
  v22 = v21[314];
  *(_QWORD *)v16 = *(_QWORD *)(v22 - 8);
  if (v134 > 0)
    goto LABEL_9;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
LABEL_188:
    abort();
  }
  v21 = *(_QWORD **)(v14 + 4864);
  v22 = v21[314];
LABEL_9:
  v23 = v21[285] + 168 * ((v22 - v21[313]) >> 3);
  v24 = *(_OWORD *)(v23 - 104);
  v25 = *(_OWORD *)(v23 - 72);
  v26 = *(_OWORD *)(v23 - 120);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(v23 - 88);
  *(_OWORD *)(v16 + 112) = v25;
  *(_OWORD *)(v16 + 64) = v26;
  *(_OWORD *)(v16 + 80) = v24;
  v27 = *(_OWORD *)(v23 - 40);
  v28 = *(_OWORD *)(v23 - 24);
  v29 = *(_OWORD *)(v23 - 56);
  *(_QWORD *)(v16 + 176) = *(_QWORD *)(v23 - 8);
  *(_OWORD *)(v16 + 144) = v27;
  *(_OWORD *)(v16 + 160) = v28;
  *(_OWORD *)(v16 + 128) = v29;
  v30 = *(_OWORD *)(v23 - 168);
  v31 = *(_OWORD *)(v23 - 136);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(v23 - 152);
  *(_OWORD *)(v16 + 48) = v31;
  *(_OWORD *)(v16 + 16) = v30;
  *(_BYTE *)(v16 + 336) = *sub_20F136914(v14);
  sub_20F3E7CE4((uint64_t)v139, *(_DWORD *)(v14 + 3608), v5, (uint64_t)__src, v20);
  v32 = v16;
  v33 = (void **)(v16 + 432);
  v34 = *(_OWORD *)&__src[2];
  *(_OWORD *)v17 = *(_OWORD *)__src;
  *(_OWORD *)(v17 + 16) = v34;
  *(void **)(v17 + 32) = __src[4];
  sub_20EB0F138(v32 + 384, (uint64_t *)&__src[5]);
  *(_BYTE *)(v32 + 424) = __src[10];
  if (*(_QWORD *)(v32 + 456))
  {
    v35 = *(_QWORD **)(v32 + 448);
    if (v35)
    {
      do
      {
        v36 = (_QWORD *)*v35;
        operator delete(v35);
        v35 = v36;
      }
      while (v36);
    }
    *(_QWORD *)(v137 + 448) = 0;
    v37 = *(_QWORD *)(v137 + 440);
    if (v37)
    {
      for (i = 0; i != v37; ++i)
        *((_QWORD *)*v33 + i) = 0;
    }
    *(_QWORD *)(v137 + 456) = 0;
  }
  v39 = __src[11];
  __src[11] = 0;
  v40 = *v33;
  *v33 = v39;
  if (v40)
    operator delete(v40);
  v41 = (unint64_t)__src[12];
  v42 = __src[13];
  __src[12] = 0;
  v43 = __src[14];
  v44 = v137;
  *(void **)(v137 + 448) = __src[13];
  *(_QWORD *)(v137 + 456) = v43;
  *(_DWORD *)(v137 + 464) = __src[15];
  *(_QWORD *)(v137 + 440) = v41;
  if (v43)
  {
    v45 = v42[1];
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v45 >= v41)
        v45 %= v41;
    }
    else
    {
      v45 &= v41 - 1;
    }
    *((_QWORD *)*v33 + v45) = v137 + 448;
    __src[13] = 0;
    __src[14] = 0;
    v44 = v137;
  }
  v46 = v44;
  if (*(_QWORD *)(v44 + 496))
  {
    v47 = *(_QWORD **)(v44 + 488);
    if (v47)
    {
      do
      {
        v48 = (_QWORD *)*v47;
        operator delete(v47);
        v47 = v48;
      }
      while (v48);
    }
    *(_QWORD *)(v46 + 488) = 0;
    v49 = *(_QWORD *)(v46 + 480);
    if (v49)
    {
      for (j = 0; j != v49; ++j)
        *((_QWORD *)*v18 + j) = 0;
    }
    *(_QWORD *)(v46 + 496) = 0;
  }
  v51 = __src[16];
  __src[16] = 0;
  v52 = *v18;
  *v18 = v51;
  if (v52)
    operator delete(v52);
  v53 = (unint64_t)__src[17];
  v54 = __src[18];
  __src[17] = 0;
  v55 = __src[19];
  *(void **)(v46 + 488) = __src[18];
  *(_QWORD *)(v46 + 496) = v55;
  *(_DWORD *)(v46 + 504) = __src[20];
  *(_QWORD *)(v46 + 480) = v53;
  if (v55)
  {
    v56 = v54[1];
    if ((v53 & (v53 - 1)) != 0)
    {
      if (v56 >= v53)
        v56 %= v53;
    }
    else
    {
      v56 &= v53 - 1;
    }
    *((_QWORD *)*v18 + v56) = v46 + 488;
    __src[18] = 0;
    __src[19] = 0;
  }
  *(_BYTE *)(v46 + 512) = __src[21];
  sub_20E91E748(__src);
  if (*(_BYTE *)(v14 + 1))
    v57 = 1;
  else
    v57 = *(_BYTE *)(v14 + 10664) == 0;
  v58 = !v57;
  *(_BYTE *)(v46 + 3680) = v58;
  if (*(int *)(v14 + 4904) <= 0)
  {
    LOBYTE(__src[0]) = 0;
    LOBYTE(__src[9]) = 0;
  }
  else
  {
    memset(__dst, 0, 72);
    v59 = *(_QWORD *)(v14 + 4864);
    sub_20F154F8C((uint64_t)(*(_QWORD *)(v59 + 2336) - *(_QWORD *)(v59 + 2328)) >> 5, *(__int128 **)(v59 + 2328), (_QWORD *)(v59 + 2576), (uint64_t)(*(_QWORD *)(v59 + 8264) - *(_QWORD *)(v59 + 8256)) >> 4, *(uint64_t **)(v59 + 8256), 1u, (uint64_t)&__dst[1] + 8, __dst, (uint64_t *)&__dst[3]);
    v60 = *(_QWORD *)(v14 + 4864);
    sub_20F154F8C((uint64_t)(*(_QWORD *)(v60 + 8288) - *(_QWORD *)(v60 + 8280)) >> 5, *(__int128 **)(v60 + 8280), (_QWORD *)(v60 + 8328), (uint64_t)(*(_QWORD *)(v60 + 8312) - *(_QWORD *)(v60 + 8304)) >> 4, *(uint64_t **)(v60 + 8304), 1u, (uint64_t)&__dst[1] + 8, __dst, (uint64_t *)&__dst[3]);
    *(_OWORD *)__src = __dst[0];
    *(_OWORD *)&__src[2] = __dst[1];
    *(_OWORD *)&__src[4] = __dst[2];
    *(_OWORD *)&__src[6] = __dst[3];
    __src[8] = *(void **)&__dst[4];
    LOBYTE(__src[9]) = 1;
  }
  sub_20EB0EACC(v46 + 520, (uint64_t)__src);
  if (LOBYTE(__src[9]))
  {
    if (__src[6])
    {
      __src[7] = __src[6];
      operator delete(__src[6]);
    }
    if (__src[3])
    {
      __src[4] = __src[3];
      operator delete(__src[3]);
    }
    if (__src[0])
    {
      __src[1] = __src[0];
      operator delete(__src[0]);
    }
  }
  if (*(int *)(v14 + 4904) <= 0)
  {
    LOBYTE(__src[0]) = 0;
    LOBYTE(__src[9]) = 0;
  }
  else
  {
    memset(__dst, 0, 72);
    v61 = *(_QWORD **)(v14 + 4864);
    v62 = v61[294];
    v63 = v61[295];
    v64 = v61[1044];
    v65 = v61[1045];
    v66 = v63 - v62;
    if (v66)
    {
      if (v64 == v65)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 364, (uint64_t)"vfusion.line_structure().empty()", 32, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_181;
        }
      }
      else if (v66 >> 5 != (v65 - v64) >> 4
             && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 367, (uint64_t)"vfusion.line_track_properties().size() == vfusion.line_structure().size()", 73, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_181;
      }
    }
    else if (v64 != v65
           && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 361, (uint64_t)"vfusion.line_track_properties().empty()", 39, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_181:
      abort();
    }
    v67 = *(_QWORD **)(v14 + 4864);
    v68 = (__int128 *)v67[294];
    v69 = (uint64_t)(v67[295] - (_QWORD)v68) >> 5;
    v70 = (uint64_t *)v67[1044];
    v71 = (uint64_t)(v67[1045] - (_QWORD)v70) >> 4;
    *(_QWORD *)&__dst[2] = *((_QWORD *)&__dst[1] + 1);
    *((_QWORD *)&__dst[0] + 1) = *(_QWORD *)&__dst[0];
    *((_QWORD *)&__dst[3] + 1) = *(_QWORD *)&__dst[3];
    sub_20F154F8C(v69, v68, v67 + 325, v71, v70, 2u, (uint64_t)&__dst[1] + 8, __dst, (uint64_t *)&__dst[3]);
    *(_OWORD *)__src = __dst[0];
    *(_OWORD *)&__src[2] = __dst[1];
    *(_OWORD *)&__src[4] = __dst[2];
    *(_OWORD *)&__src[6] = __dst[3];
    __src[8] = *(void **)&__dst[4];
    LOBYTE(__src[9]) = 1;
  }
  sub_20EB0EACC(v46 + 600, (uint64_t)__src);
  if (LOBYTE(__src[9]))
  {
    if (__src[6])
    {
      __src[7] = __src[6];
      operator delete(__src[6]);
    }
    if (__src[3])
    {
      __src[4] = __src[3];
      operator delete(__src[3]);
    }
    if (__src[0])
    {
      __src[1] = __src[0];
      operator delete(__src[0]);
    }
  }
  v72 = *(_QWORD *)(v14 + 4864);
  if (*(_BYTE *)(v72 + 11664))
    v73 = 0;
  else
    v73 = *(unsigned int *)(v72 + 1936) == (uint64_t)(*(_QWORD *)(v72 + 2864) - *(_QWORD *)(v72 + 2856)) >> 2;
  *(_BYTE *)(v46 + 740) = v73;
  v74 = *(_QWORD *)(v72 + 8240);
  v75 = *(_QWORD *)(v72 + 8232);
  v76 = (v74 - v75) >> 4;
  if (v76 < v11)
  {
    *(_DWORD *)(v46 + 736) = 0;
    *(_BYTE *)(v46 + 741) = *(_BYTE *)(v72 + 11680);
    if (!v9)
      goto LABEL_100;
    goto LABEL_89;
  }
  if (v74 == v75)
  {
    v77 = 0;
  }
  else
  {
    v77 = 0;
    if (v76 <= 1)
      v76 = 1;
    do
    {
      if (*(_BYTE *)(v75 + 12) && *(double *)v75 > v12)
        ++v77;
      v75 += 16;
      --v76;
    }
    while (v76);
  }
  *(_DWORD *)(v46 + 736) = v77 > v11;
  *(_BYTE *)(v46 + 741) = *(_BYTE *)(v72 + 11680);
  if (v9)
  {
LABEL_89:
    if (*(_BYTE *)(v46 + 368) && *(unsigned __int8 *)(v46 + 336) <= 2u)
    {
      if (*(int *)(v14 + 4904) <= 0)
      {
        LOBYTE(__src[0]) = 0;
        LOBYTE(__src[6]) = 0;
      }
      else
      {
        memset(__dst, 0, 48);
        v155 = 0uLL;
        DWORD2(v155) = *(_DWORD *)(*(_QWORD *)(v72 + 2488) - 4);
        LODWORD(v156) = 0;
        sub_20F135294(v14, &v155, (char **)__dst, (_QWORD *)&__dst[1] + 1);
        *(_OWORD *)__src = __dst[0];
        *(_OWORD *)&__src[2] = __dst[1];
        *(_OWORD *)&__src[4] = __dst[2];
        LOBYTE(__src[6]) = 1;
      }
      sub_20EB0EC64(v46 + 680, (uint64_t)__src);
      if (LOBYTE(__src[6]))
      {
        if (__src[3])
        {
          __src[4] = __src[3];
          operator delete(__src[3]);
        }
        if (__src[0])
        {
          __src[1] = __src[0];
          operator delete(__src[0]);
        }
      }
      v72 = *(_QWORD *)(v14 + 4864);
    }
  }
LABEL_100:
  v78 = *(_DWORD *)(*(_QWORD *)(v72 + 2488) - 4);
  *(_QWORD *)(v46 + 3688) = *v3;
  *(_DWORD *)(v46 + 3696) = v78;
  v79 = ((*(_QWORD *)(v14 + 5288) - *(_QWORD *)(v14 + 5280)) >> 5);
  v80 = *(_QWORD *)(v46 + 752);
  v81 = *(_QWORD *)(v46 + 744);
  v82 = 0xAAAAAAAAAAAAAAABLL * ((v80 - v81) >> 3);
  if (v79 <= v82)
  {
    if (v79 < v82)
    {
      v83 = v81 + 24 * v79;
      if (v80 != v83)
      {
        v84 = *(_QWORD *)(v46 + 752);
        do
        {
          v86 = *(void **)(v84 - 24);
          v84 -= 24;
          v85 = v86;
          if (v86)
          {
            *(_QWORD *)(v80 - 16) = v85;
            operator delete(v85);
          }
          v80 = v84;
        }
        while (v84 != v83);
      }
      *(_QWORD *)(v46 + 752) = v83;
    }
  }
  else
  {
    sub_20E91ED28((uint64_t)v138, v79 - v82);
  }
  v87 = *(_QWORD *)(v14 + 5280);
  if (((*(_QWORD *)(v14 + 5288) - v87) & 0x1FFFFFFFE0) != 0)
  {
    v88 = 0;
    do
    {
      v89 = *v138 + 24 * v88;
      v90 = -991146299 * ((*(_QWORD *)(v87 + 32 * v88 + 16) - *(_QWORD *)(v87 + 32 * v88 + 8)) >> 7);
      v91 = 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v89 + 8) - *(_QWORD *)v89) >> 3);
      if (v90 <= v91)
      {
        if (v90 < v91)
          *(_QWORD *)(v89 + 8) = *(_QWORD *)v89 + 216 * v90;
      }
      else
      {
        sub_20E91EF14((void **)v89, v90 - v91);
        v87 = *(_QWORD *)(v14 + 5280);
        v90 = -991146299 * ((*(_QWORD *)(v87 + 32 * v88 + 16) - *(_QWORD *)(v87 + 32 * v88 + 8)) >> 7);
      }
      if (v90)
      {
        v92 = 0;
        v93 = 72;
        v94 = 104;
        do
        {
          v100 = *(_QWORD *)(*(_QWORD *)(v14 + 4824) + 32 * v88 + 8) + v93;
          v101 = *(_QWORD *)(*v138 + 24 * v88);
          v102 = v101 + v94;
          memmove((void *)(v101 + v94 - 104), (const void *)(v100 - 72), 0x48uLL);
          v103 = *(_QWORD *)(v101 + v94 - 88);
          v104 = *(_QWORD *)(v101 + v94 - 96);
          v106 = *(_QWORD *)(v101 + v94 - 64);
          v105 = *(_QWORD *)(v101 + v94 - 56);
          *(_QWORD *)(v102 - 96) = *(_QWORD *)(v102 - 80);
          *(_QWORD *)(v102 - 88) = v105;
          *(_QWORD *)(v102 - 80) = v104;
          *(_QWORD *)(v102 - 64) = *(_QWORD *)(v102 - 48);
          *(_QWORD *)(v102 - 56) = v103;
          *(_QWORD *)(v102 - 48) = v106;
          v107 = *(_OWORD *)v100;
          *(_QWORD *)(v102 - 16) = *(_QWORD *)(v100 + 16);
          *(_OWORD *)(v102 - 32) = v107;
          v108 = *(_QWORD **)(v14 + 4864);
          v109 = (_QWORD *)v108[994];
          if (v109)
          {
            v95 = *v109;
            v96 = (uint64_t *)(*v109 + 72);
            v97 = (_QWORD *)(v95 + 80);
          }
          else
          {
            v96 = v108 + 1016;
            v97 = v108 + 1017;
          }
          v98 = *v96;
          v99 = (_QWORD *)(v101 + v94);
          *(v99 - 1) = v98;
          *v99 = *v97;
          ++v92;
          v87 = *(_QWORD *)(v14 + 5280);
          v94 += 216;
          v93 += 1664;
        }
        while (v92 < -991146299
                    * ((*(_QWORD *)(v87 + 32 * v88 + 16) - *(_QWORD *)(v87 + 32 * v88 + 8)) >> 7));
        v46 = v137;
      }
      ++v88;
    }
    while (v88 < ((unint64_t)(*(_QWORD *)(v14 + 5288) - v87) >> 5));
  }
  if ((v135 & 1) != 0)
  {
    if (*(int *)(v14 + 4904) >= 1
      && (v110 = *(_QWORD *)(v14 + 4864),
          v111 = *(_BYTE **)(v110 + 5176),
          *(_QWORD *)(v110 + 5184) - (_QWORD)v111 >= 0xFuLL)
      && *v111
      && v111[1]
      && v111[2]
      && v111[3]
      && v111[4]
      && v111[5]
      && v111[6]
      && v111[7]
      && v111[8]
      && v111[9]
      && v111[10]
      && v111[11]
      && v111[12]
      && v111[13]
      && v111[14])
    {
      v12 = **(double **)(v110 + 2504);
      v112 = *(char **)(v110 + 2280);
      v113 = *v112;
      v156 = *(_OWORD *)(v112 + 17);
      v157 = *(_OWORD *)(v112 + 33);
      *(_OWORD *)v158 = *(_OWORD *)(v112 + 49);
      *(_QWORD *)&v158[15] = *((_QWORD *)v112 + 8);
      v155 = *(_OWORD *)(v112 + 1);
      *(_OWORD *)&v158[23] = *(_OWORD *)(v112 + 72);
      *(_QWORD *)&v158[39] = *((_QWORD *)v112 + 11);
      *(_OWORD *)&v158[47] = *((_OWORD *)v112 + 6);
      *(_QWORD *)&v158[63] = *((_QWORD *)v112 + 14);
      *(_OWORD *)&v158[71] = *(_OWORD *)(v112 + 120);
      *(_QWORD *)&v158[87] = *((_QWORD *)v112 + 17);
      *(_OWORD *)&v158[95] = *((_OWORD *)v112 + 9);
      *(_QWORD *)&v158[111] = *((_QWORD *)v112 + 20);
      bzero(__src, 0x708uLL);
      if (*(_BYTE *)(*(_QWORD *)(v14 + 4848) + 2616))
        sub_20F88729C(v110);
      v152 = *(_OWORD *)&v158[80];
      v153[0] = *(_OWORD *)&v158[96];
      *(_QWORD *)((char *)v153 + 15) = *(_QWORD *)&v158[111];
      v148 = *(_OWORD *)&v158[16];
      v149 = *(_OWORD *)&v158[32];
      v151 = *(_OWORD *)&v158[64];
      v150 = *(_OWORD *)&v158[48];
      v144 = v155;
      v145 = v156;
      v147 = *(_OWORD *)v158;
      v146 = v157;
      memcpy(__dst, __src, 0x708uLL);
      v114 = 1;
    }
    else
    {
      v113 = 0;
      v114 = 0;
    }
    *(_BYTE *)(v137 + 768) = v113;
    *(_QWORD *)(v137 + 928) = *(_QWORD *)((char *)v153 + 15);
    v115 = v153[0];
    *(_OWORD *)(v137 + 897) = v152;
    *(_OWORD *)(v137 + 913) = v115;
    v116 = v149;
    *(_OWORD *)(v137 + 833) = v148;
    *(_OWORD *)(v137 + 849) = v116;
    v117 = v151;
    *(_OWORD *)(v137 + 865) = v150;
    *(_OWORD *)(v137 + 881) = v117;
    v118 = v145;
    *(_OWORD *)(v137 + 769) = v144;
    *(_OWORD *)(v137 + 785) = v118;
    v119 = v147;
    *(_OWORD *)(v137 + 801) = v146;
    *(_OWORD *)(v137 + 817) = v119;
    *(double *)(v137 + 936) = v12;
    memcpy((void *)(v137 + 944), __dst, 0x708uLL);
    *(_BYTE *)(v137 + 2744) = v114;
    v46 = v137;
  }
  if (v136)
  {
    v120 = (char *)operator new(0x218uLL);
    *((_QWORD *)v120 + 1) = 0;
    *((_QWORD *)v120 + 2) = 0;
    *(_QWORD *)v120 = &off_24C9F9418;
    *(_OWORD *)(v120 + 24) = 0u;
    v121 = (char **)(v120 + 24);
    *(_OWORD *)(v120 + 40) = 0u;
    *(_OWORD *)(v120 + 56) = 0u;
    *(_OWORD *)(v120 + 72) = 0u;
    *(_OWORD *)(v120 + 88) = 0u;
    *(_OWORD *)(v120 + 104) = 0u;
    *(_OWORD *)(v120 + 120) = 0u;
    *(_OWORD *)(v120 + 136) = 0u;
    *(_OWORD *)(v120 + 152) = 0u;
    *(_OWORD *)(v120 + 168) = 0u;
    *(_OWORD *)(v120 + 184) = 0u;
    *(_OWORD *)(v120 + 200) = 0u;
    *(_OWORD *)(v120 + 216) = 0u;
    *(_OWORD *)(v120 + 232) = 0u;
    *(_OWORD *)(v120 + 248) = 0u;
    *(_OWORD *)(v120 + 264) = 0u;
    *(_OWORD *)(v120 + 280) = 0u;
    *(_OWORD *)(v120 + 296) = 0u;
    *(_OWORD *)(v120 + 312) = 0u;
    *(_OWORD *)(v120 + 328) = 0u;
    *(_OWORD *)(v120 + 344) = 0u;
    *(_OWORD *)(v120 + 360) = 0u;
    *(_OWORD *)(v120 + 376) = 0u;
    *(_OWORD *)(v120 + 392) = 0u;
    *(_OWORD *)(v120 + 408) = 0u;
    *(_OWORD *)(v120 + 424) = 0u;
    *(_OWORD *)(v120 + 440) = 0u;
    *(_OWORD *)(v120 + 456) = 0u;
    *(_OWORD *)(v120 + 472) = 0u;
    *(_OWORD *)(v120 + 488) = 0u;
    *(_OWORD *)(v120 + 504) = 0u;
    *(_OWORD *)(v120 + 520) = 0u;
    *(_QWORD *)&v155 = v120 + 24;
    *((_QWORD *)&v155 + 1) = v120;
    LOBYTE(__dst[0]) = 0;
    LOBYTE(__dst[3]) = 0;
    if (*(_BYTE *)(v14 + 10488))
    {
      sub_20F0AF078(__dst, (uint64_t *)(v14 + 10440));
      LOBYTE(__dst[3]) = 1;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 173, (uint64_t)"imu_frame_bundle_opt", 20, (uint64_t)"imu_frame_bundle_ in VFusion is not saved.", 42, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!LOBYTE(__dst[3]))
        goto LABEL_189;
    }
    sub_20EE62A1C(v121, *((uint64_t *)&__dst[1] + 1), *(uint64_t *)&__dst[2], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&__dst[2] - *((_QWORD *)&__dst[1] + 1)) >> 3));
    if (LOBYTE(__dst[3]))
    {
      sub_20F13D910((uint64_t *)v120 + 6, *(uint64_t *)&__dst[0], *((uint64_t *)&__dst[0] + 1), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&__dst[0] + 1) - *(_QWORD *)&__dst[0]) >> 3));
      v122 = *(_QWORD *)(v14 + 4864);
      *((_DWORD *)v120 + 18) = **(_DWORD **)(v122 + 2480);
      v120[76] = 1;
      v123 = *(const void **)(v122 + 5056);
      if (*(const void **)(v122 + 5064) == v123)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1374, (uint64_t)"filter_->last_prior().num_states() > 0", 38, (uint64_t)&unk_21028E871, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v123 = *(const void **)(*(_QWORD *)(v14 + 4864) + 5056);
      }
      memmove(v120 + 80, v123, 0xA8uLL);
      sub_20F13579C(v14, (uint64_t)__src);
      memcpy(v120 + 248, __src, 0x120uLL);
      if (*(_BYTE *)(v137 + 3672))
      {
        v155 = 0uLL;
        *(_QWORD *)(v137 + 3656) = v121;
        v124 = *(std::__shared_weak_count **)(v137 + 3664);
        *(_QWORD *)(v137 + 3664) = v120;
        if (v124)
        {
          p_shared_owners = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(p_shared_owners);
          while (__stlxr(v126 - 1, p_shared_owners));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
      }
      else
      {
        *(_QWORD *)(v137 + 3656) = v121;
        *(_QWORD *)(v137 + 3664) = v120;
        v155 = 0uLL;
        *(_BYTE *)(v137 + 3672) = 1;
      }
      v46 = v137;
      if (LOBYTE(__dst[3]))
      {
        if (*((_QWORD *)&__dst[1] + 1))
        {
          *(_QWORD *)&__dst[2] = *((_QWORD *)&__dst[1] + 1);
          operator delete(*((void **)&__dst[1] + 1));
        }
        v127 = *(_QWORD **)&__dst[0];
        if (*(_QWORD *)&__dst[0])
        {
          v128 = (_QWORD *)*((_QWORD *)&__dst[0] + 1);
          v129 = *(void **)&__dst[0];
          if (*((_QWORD *)&__dst[0] + 1) != *(_QWORD *)&__dst[0])
          {
            do
            {
              v128 -= 13;
              sub_20E9905B4(v128);
            }
            while (v128 != v127);
            v129 = *(void **)&__dst[0];
          }
          *((_QWORD *)&__dst[0] + 1) = v127;
          operator delete(v129);
        }
      }
      v130 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      goto LABEL_175;
    }
LABEL_189:
    sub_20E866B34();
  }
LABEL_175:
  *(_BYTE *)(v46 + 512) = *(_BYTE *)(v14 + 3776);
  *(_BYTE *)(v46 + 3681) = *(_BYTE *)(*(_QWORD *)(v14 + 4856) + 489);
  if (v142)
  {
    if (v140)
    {
      v141 = v140;
      operator delete(v140);
    }
    sub_20F04F084(v139);
  }
}

void sub_20F154E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20F03A628((uint64_t)va);
  sub_20E91EA40(a6);
  _Unwind_Resume(a1);
}

void sub_20F154F8C(unint64_t a1, __int128 *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, _QWORD *a8, uint64_t *a9)
{
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v16 = a6;
  if (((uint64_t)(a3[1] - *a3) >> 2) * a6 != a1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 259, (uint64_t)"non_filtered_track_ids.size() * static_cast<size_t>(num_structure_per_element) == non_filtered_structure.size()", 111, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| a4 != a1&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 260, (uint64_t)"track_properties.size() == non_filtered_structure.size()", 56, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_39;
  }
  v17 = *(char **)a7;
  v18 = (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 5;
  if (v18 != ((uint64_t)(a8[1] - *a8) >> 3) * v16 || v18 != (a9[1] - *a9) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 263, (uint64_t)"cloud.size() == ids.size() * num_structure_per_element && cloud.size() == vergence_angle_cosines.size()", 103, (uint64_t)"The number of elements in the output arrays must be the same on input.", 70, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_39;
    }
    v17 = *(char **)a7;
    v18 = (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 5;
  }
  if (__CFADD__(a1, v18))
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 266, (uint64_t)"cloud.size() <= std::numeric_limits<size_t>::max() - non_filtered_structure.size()", 82, (uint64_t)"Overflow in appending point clouds.", 35, (void (*)(void **))sub_21023DDB0))
    {
      v17 = *(char **)a7;
      v18 = (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 5;
      goto LABEL_13;
    }
LABEL_39:
    abort();
  }
LABEL_13:
  v19 = v18 + a1;
  if (v18 >= v18 + a1)
  {
    if (v18 > v18 + a1)
      *(_QWORD *)(a7 + 8) = &v17[32 * v19];
  }
  else
  {
    sub_20F156988((char **)a7, a1);
  }
  v20 = (uint64_t)(a8[1] - *a8) >> 3;
  if (v19 / v16 <= v20)
  {
    if (v19 / v16 < v20)
      a8[1] = *a8 + 8 * (v19 / v16);
  }
  else
  {
    sub_20E93DAE8((uint64_t)a8, v19 / v16 - v20);
  }
  v21 = *a9;
  v22 = (a9[1] - *a9) >> 3;
  if (v19 <= v22)
  {
    if (v19 < v22)
      a9[1] = v21 + 8 * v19;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a9, v19 - v22);
    v21 = *a9;
  }
  v23 = (_OWORD *)(*(_QWORD *)a7 + 32 * v18);
  v24 = (_QWORD *)(*a8 + 8 * (v18 / v16));
  v25 = (_QWORD *)(v21 + 8 * v18);
  if (a1)
  {
    v26 = 0;
    v27 = a5;
    do
    {
      if (BYTE4(a5[2 * v26 + 1]))
      {
        *v24 = *(int *)(*a3 + 4 * (v26 / v16));
        v28 = a2;
        v29 = v27;
        v30 = v16;
        do
        {
          v31 = *v28;
          v32 = v28[1];
          v28 += 2;
          *v23 = v31;
          v23[1] = v32;
          v23 += 2;
          v33 = *v29;
          v29 += 2;
          *v25++ = v33;
          --v30;
        }
        while (v30);
        ++v24;
      }
      v26 += v16;
      v27 += 2 * v16;
      a2 += 2 * v16;
    }
    while (v26 < a1);
  }
  if (v23 != *(_OWORD **)(a7 + 8))
    *(_QWORD *)(a7 + 8) = v23;
  if (v24 != (_QWORD *)a8[1])
    a8[1] = v24;
  if (v25 != (_QWORD *)a9[1])
    a9[1] = (uint64_t)v25;
}

void sub_20F1552E4(uint64_t a1, unint64_t a2, unsigned int a3, double *a4, double *a5, double *a6, double *a7)
{
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int8x16_t v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  float64x2_t v21;
  int8x16_t v23;
  float64x2_t v24;
  float64_t v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v53;
  double v56;
  double v57;
  double v58;
  __double2 v59;
  uint64_t v60;
  double *v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64_t v76;
  float64x2_t v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[6];
  float64x2_t v81;
  float64x2_t v82;
  _BYTE v83[24];
  double v84;
  char v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  char v99;
  double *v100[2];
  float64x2_t *v101[2];

  v10 = a2;
  v12 = *(_QWORD *)(a1 + 4848);
  if (*(_BYTE *)(a1 + 1043))
  {
    v13 = *(_QWORD *)(v12 + 848);
    if (v13)
    {
      if (*(_BYTE *)(*(_QWORD *)(v12 + 816) + 328 * v13 - 40))
        goto LABEL_4;
    }
    else if (*(_BYTE *)(*(_QWORD *)(v12 + 816)
                       + 8 * ((uint64_t)(*(_QWORD *)(v12 + 824) - *(_QWORD *)(v12 + 816)) >> 3)
                       - 40))
    {
      goto LABEL_4;
    }
    v60 = *(_QWORD *)(a1 + 4864);
    v61 = (double *)(**(_QWORD **)(*(_QWORD *)(v60 + 7952) + 72)
                   + 56 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 7952) + 72) + 24));
    *a5 = sqrt(v61[1] * v61[1] + v61[2] * v61[2] + v61[3] * v61[3]);
    *a7 = vabdd_f64(sqrt(v61[4] * v61[4] + v61[5] * v61[5] + v61[6] * v61[6]), sqrt(*a4 * *a4 + a4[1] * a4[1] + a4[2] * a4[2]));
    v62 = *(_QWORD *)(v60 + 2280) + 168 * a3;
    v63 = vmulq_f64(*(float64x2_t *)(v62 + 104), *(float64x2_t *)(v62 + 104));
    *a6 = sqrt(*(double *)(v62 + 96) * *(double *)(v62 + 96) + v63.f64[0] + v63.f64[1]);
    return;
  }
LABEL_4:
  v14 = HIDWORD(a2);
  sub_20F0F91AC((_BYTE *)(v12 + 760), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2480) + 4 * a3), a2, HIDWORD(a2), (uint64_t)v83);
  if (!v99
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 427, (uint64_t)"opt_incremental_pose", 20, (uint64_t)"Incremental pose must exist", 27, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!v85)
  {
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0.0;
    return;
  }
  v16 = v86;
  v17 = v84;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 7952))
    v18 = (_QWORD *)(a1 + 4824);
  else
    v18 = (_QWORD *)(a1 + 5280);
  v19 = *(_QWORD *)(*v18 + 32 * v10 + 8) + 1664 * v14;
  _Q27.f64[0] = *(float64_t *)(v19 + 16);
  v15.i64[0] = *(_QWORD *)(v19 + 40);
  v21 = *(float64x2_t *)(v19 + 24);
  _Q22 = *(float64x2_t *)(v19 + 48);
  v23 = vextq_s8((int8x16_t)v21, v15, 8uLL);
  v24 = *(float64x2_t *)(v19 + 72);
  v25 = _Q27.f64[0];
  v26 = v23.i64[1];
  v27.f64[0] = *(float64_t *)(v19 + 24);
  *(_QWORD *)&v27.f64[1] = v23.i64[0];
  v28 = *(double *)(v19 + 64);
  __asm { FMOV            V30.2D, #1.0 }
  _Q30.f64[0] = *(float64_t *)(v19 + 88);
  v34 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v19, v87), v27, v91), _Q22, v95), (float64x2_t)0, v24);
  v35 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q27.f64[0], v87), (float64x2_t)v23.u64[1], v91), (float64x2_t)*(unint64_t *)&v28, v95), (float64x2_t)0, _Q30);
  v36 = vmulq_n_f64(v34, _Q27.f64[0]);
  v37 = vmulq_n_f64(v35, _Q27.f64[0]);
  *(_QWORD *)&_Q27.f64[1] = v15.i64[0];
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v19, (int64x2_t)v21), v24.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v19, (int64x2_t)v21), v24, 1), _Q27, _Q30.f64[0]);
  _D12 = *(_QWORD *)(v19 + 80);
  __asm { FMLA            D27, D12, V22.D[1] }
  _Q27.f64[0] = _Q27.f64[0] + v28 * _Q30.f64[0];
  *(_QWORD *)&v40 = *(_OWORD *)&vnegq_f64(v38);
  v41 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v19, v88), v27, v92), _Q22, v96), (float64x2_t)0, v24);
  v42 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v25, v88), (float64x2_t)(unint64_t)v26, v92), (float64x2_t)*(unint64_t *)&v28, v96), (float64x2_t)0, _Q30);
  v43 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v19, v89), v27, v93), _Q22, v97), (float64x2_t)0, v24);
  v44 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v25, v89), (float64x2_t)(unint64_t)v26, v93), (float64x2_t)*(unint64_t *)&v28, v97), (float64x2_t)0, _Q30);
  v45 = vaddq_f64(v24, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v19, v90), v27, v94), _Q22, v98));
  v46 = vaddq_f64(_Q30, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v25, v90), (float64x2_t)(unint64_t)v26, v94), (float64x2_t)*(unint64_t *)&v28, v98));
  v47 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, *(double *)v19), v42, v21.f64[0]), v44, _Q22.f64[0]), (float64x2_t)0, v46);
  v48 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v34, *(float64x2_t *)v19, 1), v41, v21, 1), v43, _Q22, 1), (float64x2_t)0, v45);
  v49 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v35, *(float64x2_t *)v19, 1), v42, v21, 1), v44, _Q22, 1), (float64x2_t)0, v46);
  v80[0] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v34, *(double *)v19), v41, v21.f64[0]), v43, _Q22.f64[0]), (float64x2_t)0, v45);
  v80[1] = v47;
  v80[2] = v48;
  v80[3] = v49;
  v80[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v36, v41, *(double *)v15.i64), v43, v28), (float64x2_t)0, v45);
  v80[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v37, v42, *(double *)v15.i64), v44, v28), (float64x2_t)0, v46);
  v81 = vaddq_f64(v45, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v34, v40), v41, v38, 1), v43, _Q27.f64[0], 0));
  v82 = vaddq_f64(v46, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v35, v40), v42, v38, 1), v44, _Q27.f64[0], 0));
  v78 = 0u;
  v79 = 0u;
  v77 = 0u;
  v101[0] = (float64x2_t *)v80;
  v101[1] = 0;
  v100[0] = (double *)&v77;
  v100[1] = 0;
  sub_20E95B988(v101, v100);
  *(_QWORD *)&v51.f64[0] = v78;
  _Q19 = v77;
  v53 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
  _Q0 = vmulq_f64(_Q19, _Q19);
  _Q1.f64[0] = v77.f64[1];
  __asm { FMLA            D0, D1, V19.D[1] }
  v56 = _Q0.f64[0] + v51.f64[0] * v51.f64[0];
  if (v56 >= 0.0000002635)
  {
    v58 = sqrt(v56);
    v75 = v53;
    v76 = *(double *)&v78;
    v74 = v77;
    v59 = __sincos_stret(v58);
    _Q19 = v74;
    v53 = v75;
    v51.f64[0] = v76;
    v50.f64[0] = v59.__sinval / v58;
    _Q1.f64[0] = 1.0 / v56 * (1.0 - v59.__cosval);
    v57 = 1.0 / v56 * (1.0 - v59.__sinval / v58);
    _Q0.f64[0] = v16 - v17;
    if (v56 >= 2.775e-15)
    {
LABEL_12:
      if (v56 <= 9.0)
        _Q1.f64[0] = (_Q1.f64[0] * 0.5 - v57) / v50.f64[0];
      else
        _Q1.f64[0] = (_Q1.f64[0] + v50.f64[0] * -0.5) / (v56 * _Q1.f64[0]);
      goto LABEL_20;
    }
  }
  else
  {
    _Q1.f64[0] = 0.5 - v56 * (v56 / -720.0 + 0.0416666667);
    v57 = 0.166666667 - v56 * (v56 / -5040.0 + 0.00833333333);
    v50.f64[0] = 1.0 - v56 * v57;
    _Q0.f64[0] = v16 - v17;
    if (v56 >= 2.775e-15)
      goto LABEL_12;
  }
  _Q1.f64[0] = v56 * 0.0000330687831 + v56 * 0.00138888889 + 0.0833333333;
LABEL_20:
  v50.f64[0] = v82.f64[0];
  _Q4.f64[0] = v53.f64[0];
  _Q4.f64[1] = v51.f64[0];
  _Q5 = vsubq_f64(vmulq_laneq_f64(_Q19, v81, 1), vmulq_f64(v53, v81));
  __asm { FMOV            V6.2D, #-0.5 }
  v67 = vaddq_f64(v50, vmulq_f64(_Q5, _Q6));
  v68.f64[0] = v82.f64[0];
  v68.f64[1] = v81.f64[0];
  v51.f64[1] = _Q19.f64[0];
  v69 = vsubq_f64(vmulq_f64(_Q4, v68), vmulq_f64(v51, (float64x2_t)vextq_s8((int8x16_t)v81, (int8x16_t)v50, 8uLL)));
  _Q3 = vaddq_f64(v81, vmulq_f64(v69, _Q6));
  _Q6 = (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)_Q5, 8uLL);
  _Q5.f64[1] = v69.f64[0];
  v72 = vmulq_f64(_Q1, vsubq_f64(vmulq_laneq_f64(_Q19, v69, 1), vmulq_f64(v53, v69)));
  v73 = vaddq_f64(_Q3, vmulq_n_f64(vsubq_f64(vmulq_f64(_Q4, _Q5), vmulq_f64(v51, _Q6)), _Q1.f64[0]));
  _Q4.f64[1] = v77.f64[1];
  _Q6.f64[0] = v77.f64[1];
  __asm { FMLA            D5, D6, V4.D[1] }
  *a5 = sqrt(_Q5.f64[0] + *(double *)&v78 * *(double *)&v78) / _Q0.f64[0];
  *(_QWORD *)&v72.f64[0] = *(_OWORD *)&vdivq_f64(vaddq_f64(v67, v72), _Q0);
  _Q4.f64[0] = vdivq_f64(v73, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q0, 0)).f64[1];
  __asm { FMLA            D3, D4, V1.D[1] }
  v73.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], v72.f64[0], v72.f64[0]));
  *a6 = v73.f64[0];
  *a7 = v73.f64[0] / _Q0.f64[0];
}

float64x2_t sub_20F155934@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  unint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t result;

  if (*(int *)(a2 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 468, (uint64_t)"vfusion_new.HasProcessedFirstWindow()", 37, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| *(int *)(a1 + 4904) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 469, (uint64_t)"vfusion_curr.HasProcessedFirstWindow()", 38, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| *(int *)(a2 + 4904) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp",
         1501,
         (uint64_t)"HasProcessedFirstWindow() > 0",
         29,
         (uint64_t)"VFusion Has not initialized yet",
         31,
         (void (*)(void **))sub_21023DDB0)
    || (v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 4864) + 2488) - 4), *(int *)(a1 + 4904) <= 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1501, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0)|| v6 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2488) - 4)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 471, (uint64_t)"vfusion_new.LatestStateID() == vfusion_curr.LatestStateID()", 59, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| *(int *)(a2 + 4904) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp",
         1495,
         (uint64_t)"HasProcessedFirstWindow() > 0",
         29,
         (uint64_t)"VFusion Has not initialized yet",
         31,
         (void (*)(void **))sub_21023DDB0)
    || (v7 = *(_QWORD **)(a2 + 4864), v8 = v7[314], v9 = v7[313], v10 = v7[285], *(int *)(a1 + 4904) <= 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = v10 + 168 * ((v8 - v9) >> 3);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2280)
      + 168
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2504)) >> 3);
  v13 = *(float64x2_t *)(v11 - 120);
  v14 = *(float64x2_t *)(v11 - 168);
  v15 = *(float64x2_t *)(v11 - 24);
  v16 = *(_QWORD *)(v11 - 152);
  v17 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)(v11 - 152), 1);
  v18 = *(_QWORD *)(v11 - 128);
  v19 = (float64x2_t)vzip1q_s64((int64x2_t)v17, *(int64x2_t *)(v11 - 136));
  v17.f64[0] = *(float64_t *)(v11 - 104);
  __asm { FMOV            V4.2D, #1.0 }
  _Q4.f64[0] = *(float64_t *)(v11 - 8);
  _Q23.f64[0] = *(float64_t *)(v12 - 152);
  v26 = *(float64x2_t *)(v12 - 168);
  v27 = *(double *)(v12 - 128);
  v28 = *(float64x2_t *)(v12 - 144);
  v29 = *(double *)(v12 - 104);
  _Q20 = *(float64x2_t *)(v12 - 120);
  v31 = *(double *)(v12 - 8);
  v32 = vmulq_n_f64(v14, _Q23.f64[0]);
  v33 = vmulq_n_f64((float64x2_t)v16, _Q23.f64[0]);
  _Q23.f64[1] = v27;
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v26, (int64x2_t)v28), *(double *)(v12 - 24)), (float64x2_t)vzip2q_s64((int64x2_t)v26, (int64x2_t)v28), *(float64x2_t *)(v12 - 24), 1), _Q23, v31);
  _D25 = *(_QWORD *)(v12 - 16);
  __asm { FMLA            D23, D25, V20.D[1] }
  _Q23.f64[0] = _Q23.f64[0] + v29 * v31;
  v36 = vmlaq_n_f64(vmulq_n_f64(v14, v26.f64[0]), v19, v28.f64[0]);
  v37 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v16, v26.f64[0]), (float64x2_t)v18, v28.f64[0]);
  v38 = vmlaq_laneq_f64(vmulq_laneq_f64(v14, v26, 1), v19, v28, 1);
  v39 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v16, v26, 1), (float64x2_t)v18, v28, 1);
  *(_QWORD *)&v28.f64[0] = *(_OWORD *)&vnegq_f64(v34);
  v40 = vmlaq_f64(vmlaq_n_f64(v36, v13, _Q20.f64[0]), (float64x2_t)0, v15);
  v41 = vmlaq_f64(vmlaq_laneq_f64(v38, v13, _Q20, 1), (float64x2_t)0, v15);
  v42 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v32, v19, v27), v13, v29), (float64x2_t)0, v15);
  result = vaddq_f64(v15, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v14, v28.f64[0]), v19, v34, 1), v13, _Q23.f64[0], 0));
  *a3 = v40;
  a3[1] = vmlaq_f64(vmlaq_n_f64(v37, v17, _Q20.f64[0]), (float64x2_t)0, _Q4);
  a3[2] = v41;
  a3[3] = vmlaq_f64(vmlaq_laneq_f64(v39, v17, _Q20, 1), (float64x2_t)0, _Q4);
  a3[4] = v42;
  a3[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v33, (float64x2_t)v18, v27), v17, v29), (float64x2_t)0, _Q4);
  a3[6] = result;
  a3[7] = vaddq_f64(_Q4, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v16, v28.f64[0]), (float64x2_t)v18, v34, 1), v17, _Q23.f64[0], 0));
  return result;
}

float64x2_t sub_20F155C98(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  double v17;
  float64x2_t v18;
  double v24;
  float64x2_t v25;
  int8x16_t v26;
  double v27;
  float64x2_t v28;
  float64x2_t v30;
  double v32;
  double v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v43;
  float64x2_t result;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  double v68;
  double v69;
  int8x16_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  int64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;

  if (*(int *)(a2 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 488, (uint64_t)"vfusion_new.HasProcessedFirstWindow()", 37, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  if (*(int *)(a1 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 489, (uint64_t)"vfusion_curr.HasProcessedFirstWindow()", 38, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  if (*(int *)(a2 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1501, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 4864) + 2488) - 4);
  if (*(int *)(a1 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1501, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  if (v5 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2488) - 4)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 491, (uint64_t)"vfusion_new.LatestStateID() == vfusion_curr.LatestStateID()", 59, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| *(int *)(a2 + 4904) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_25;
  }
  v6 = *(_QWORD *)(a2 + 4864);
  v7 = *(_QWORD *)(v6 + 2512);
  v8 = *(_QWORD *)(v6 + 2504);
  v9 = *(_QWORD *)(v6 + 2280);
  if (*(int *)(a1 + 4904) <= 0)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_25;
    }
    v6 = *(_QWORD *)(a2 + 4864);
    v11 = *(_QWORD *)(v6 + 2504);
    v10 = *(_QWORD *)(v6 + 2512);
  }
  else
  {
    v10 = *(_QWORD *)(v6 + 2512);
    v11 = *(_QWORD *)(v6 + 2504);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2280)
      + 168
      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2504)) >> 3);
  v13 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 152);
  v14 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 168);
  v2.i64[0] = *(_QWORD *)(v9 + 168 * ((v7 - v8) >> 3) - 128);
  v15 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 144);
  _Q23 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 120);
  v17 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 104);
  v18 = *(float64x2_t *)(v12 - 24);
  __asm { FMOV            V22.2D, #1.0 }
  _Q22.f64[0] = *(float64_t *)(v12 - 8);
  v24 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 8);
  v25 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 24);
  if (v11 != v10 && (*(_DWORD *)(v6 + 2276) & 0xFFFFFFFE) == 2 && *(int *)(a2 + 4904) > 0)
    goto LABEL_22;
  v65 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 24);
  v66 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 8);
  v67 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 144);
  v68 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 104);
  v69 = *(double *)(v9 + 168 * ((v7 - v8) >> 3) - 152);
  v70 = v2;
  v71 = *(float64x2_t *)(v12 - 24);
  v72 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 168);
  v73 = *(float64x2_t *)(v9 + 168 * ((v7 - v8) >> 3) - 120);
  v74 = _Q22;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 506, (uint64_t)"vfusion_new.ReadyForRelocalization(true)", 41, (uint64_t)"Failed to correct VIO-position", 30, (void (*)(void **))sub_21023DDB0))
  {
LABEL_25:
    abort();
  }
  v6 = *(_QWORD *)(a2 + 4864);
  _Q23 = v73;
  _Q22 = v74;
  v18 = v71;
  v14 = v72;
  v13 = v69;
  v2 = v70;
  v15 = v67;
  v17 = v68;
  v25 = v65;
  v24 = v66;
LABEL_22:
  v26 = vextq_s8((int8x16_t)v15, v2, 8uLL);
  v27 = v13;
  v28.f64[0] = v15.f64[0];
  *(_QWORD *)&v28.f64[1] = v26.i64[0];
  _Q5.f64[0] = v13;
  *(_QWORD *)&_Q5.f64[1] = v2.i64[0];
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v14, (int64x2_t)v15), v25.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v15), v25, 1), _Q5, v24);
  _D7 = v25.f64[1];
  __asm { FMLA            D5, D7, V23.D[1] }
  v32 = _Q5.f64[0] + v17 * v24;
  *(_QWORD *)&v33 = *(_OWORD *)&vnegq_f64(v30);
  v34 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v14.f64[0]), v28, v15.f64[0]), _Q23, _Q23.f64[0]), (float64x2_t)0, v18);
  v35 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v13, v14.f64[0]), (float64x2_t)v26.u64[1], v15.f64[0]), (float64x2_t)*(unint64_t *)&v17, _Q23.f64[0]), (float64x2_t)0, _Q22);
  v36 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v14, v14, 1), v28, v15, 1), _Q23, _Q23, 1), (float64x2_t)0, v18);
  v37 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v13, v14, 1), (float64x2_t)v26.u64[1], v15, 1), (float64x2_t)*(unint64_t *)&v17, _Q23, 1), (float64x2_t)0, _Q22);
  v38 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v13), v28, *(double *)v2.i64), _Q23, v17), (float64x2_t)0, v18);
  v39 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v13, v13), (float64x2_t)v26.u64[1], *(double *)v2.i64), (float64x2_t)*(unint64_t *)&v17, v17), (float64x2_t)0, _Q22);
  v40 = (int64x2_t)vaddq_f64(v18, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v14, v33), v28, v30, 1), _Q23, v32, 0));
  v41 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v27, v33), (float64x2_t)v26.u64[1], v30, 1), (float64x2_t)*(unint64_t *)&v17, v32, 0);
  v42 = vzip2q_s64(v38, v40);
  v38.i64[1] = v40.i64[0];
  v75 = (float64x2_t)vzip1q_s64(v34, v36);
  v76 = v38;
  v77 = (float64x2_t)vzip2q_s64(v34, v36);
  v78 = v42;
  v43 = (float64x2_t)vzip1q_s64(v39, (int64x2_t)vaddq_f64(_Q22, v41));
  v79 = (float64x2_t)vzip1q_s64(v35, v37);
  v80 = v43;
  *(_QWORD *)(a2 + 4664) = 0;
  *(_QWORD *)(a2 + 4680) = 0;
  *(_QWORD *)(a2 + 4672) = 0;
  sub_20F86A7D0(v6, (uint64_t)&v75, v43);
  if (*(_BYTE *)(a2 + 10432))
  {
    _D6 = v80.f64[1];
    _D0 = v80.f64[0];
    *(_QWORD *)&_Q5.f64[0] = v76.i64[1];
    *(_QWORD *)&_Q22.f64[0] = v76.i64[0];
    *(_QWORD *)&_Q5.f64[1] = v78.i64[1];
    v49 = *(float64x2_t *)(a2 + 10320);
    v50 = *(float64x2_t *)(a2 + 10304);
    v51 = *(float64x2_t *)(a2 + 10352);
    v52 = *(float64x2_t *)(a2 + 10336);
    v53 = *(float64x2_t *)(a2 + 10384);
    v54 = *(float64x2_t *)(a2 + 10368);
    *(_QWORD *)&_Q22.f64[1] = v78.i64[0];
    v55 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v75, vnegq_f64(_Q5).f64[0]), v77, _Q5, 1), v79, v80.f64[1], 0);
    __asm
    {
      FMLS            D7, D4, V5.D[1]
      FMLS            D7, D0, V6.D[0]
    }
    v58 = *(float64x2_t *)(a2 + 10416);
    v59 = *(float64x2_t *)(a2 + 10400);
    v60 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v75.f64[0]), v51, v75.f64[1]), v53, *(double *)v76.i64), (float64x2_t)0, v58);
    v61 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v50, v77.f64[0]), v52, v77.f64[1]), v54, _Q22, 1), (float64x2_t)0, v59);
    v62 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v49, v77.f64[0]), v51, v77.f64[1]), v53, _Q22, 1), (float64x2_t)0, v58);
    v63 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v50, v79.f64[0]), v52, v79.f64[1]), v54, v80.f64[0]), (float64x2_t)0, v59);
    v64 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v79.f64[0]), v51, v79.f64[1]), v53, v80.f64[0]), (float64x2_t)0, v58);
    result = vaddq_f64(v59, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, v55.f64[0]), v52, v55, 1), v54, _D7));
    *(float64x2_t *)(a2 + 10304) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v50, v75.f64[0]), v52, v75.f64[1]), v54, *(double *)v76.i64), (float64x2_t)0, v59);
    *(float64x2_t *)(a2 + 10320) = v60;
    *(float64x2_t *)(a2 + 10336) = v61;
    *(float64x2_t *)(a2 + 10352) = v62;
    *(float64x2_t *)(a2 + 10368) = v63;
    *(float64x2_t *)(a2 + 10384) = v64;
    *(float64x2_t *)(a2 + 10400) = result;
    *(float64x2_t *)(a2 + 10416) = vaddq_f64(v58, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v49, v55.f64[0]), v51, v55, 1), v53, _D7));
  }
  return result;
}

BOOL sub_20F1561E8(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  int64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v47;
  unint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  int64x2_t v60;
  int64x2_t v62;
  double v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float64x2_t *v70;
  int64x2_t v71;
  float64x2_t v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  unint64_t v78;
  int8x16_t v79;
  unint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  unint64_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  int8x16_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v108;
  double v109;
  double v110;
  __double2 v111;
  float64x2_t v112;
  float64_t v113;
  float64_t v114;
  float64x2_t v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[6];
  float64x2_t v119;
  float64x2_t v120;
  double *v121[2];
  float64x2_t *v122[3];

  if (*(int *)(a2 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 511, (uint64_t)"vo_vfusion.HasProcessedFirstWindow()", 36, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| *(int *)(a1 + 4904) <= 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 512, (uint64_t)"vio_vfusion.HasProcessedFirstWindow()", 37, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0)|| (v5 = *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2488) - *(_QWORD *)(*(_QWORD *)(a1 + 4864) + 2480), v6 = *(_QWORD *)(*(_QWORD *)(a2 + 4864) + 2488) - *(_QWORD *)(*(_QWORD *)(a2 + 4864) + 2480), v5 >> 2 > (unint64_t)(v6 >> 2))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 531, (uint64_t)"num_vo_states >= num_vio_states", 31, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_29:
    abort();
  }
  if ((unint64_t)v5 >= 8)
  {
    v8 = ((unint64_t)v5 >> 2) - 2;
    v9 = ((unint64_t)v6 >> 2) - 2;
    v10 = 2;
    __asm { FMOV            V0.2D, #1.0 }
    v114 = *((double *)&_Q0 + 1);
    while (1)
    {
      v34 = *(_QWORD *)(a2 + 4864);
      v35 = *(_QWORD *)(v34 + 2480);
      v36 = *(_QWORD *)(a1 + 4864);
      v37 = *(_QWORD *)(v36 + 2480);
      if (*(_DWORD *)(v35 + 4 * (v9 + 1)) != *(_DWORD *)(v37 + 4 * (v8 + 1)))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 536, (uint64_t)"vo_vfusion.get_current_state_ids()[vo_index] == vio_vfusion.get_current_state_ids()[vio_index]", 94, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_29;
        }
        v34 = *(_QWORD *)(a2 + 4864);
        v35 = *(_QWORD *)(v34 + 2480);
        v36 = *(_QWORD *)(a1 + 4864);
        v37 = *(_QWORD *)(v36 + 2480);
      }
      if (*(_DWORD *)(v35 + 4 * v9) != *(_DWORD *)(v37 + 4 * v8))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionUtil.cpp", 538, (uint64_t)"vo_vfusion.get_current_state_ids()[vo_index - 1] == vio_vfusion.get_current_state_ids()[vio_index - 1]", 102, (uint64_t)&unk_210290EDA, 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_29;
        }
        v36 = *(_QWORD *)(a1 + 4864);
        v34 = *(_QWORD *)(a2 + 4864);
      }
      v38 = *(_QWORD *)(v36 + 2280);
      v39 = v38 + 168 * (v8 + 1);
      v40 = (float64x2_t *)(v38 + 168 * v8);
      v41.f64[0] = *(float64_t *)(v39 + 16);
      v42 = *(int64x2_t *)(v39 + 24);
      _Q16 = *(int64x2_t *)(v39 + 48);
      v44 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v39, v42);
      v41.f64[1] = *(float64_t *)(v39 + 40);
      v45 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v39, v42);
      v42.i64[0] = *(_QWORD *)(v39 + 160);
      _Q7 = *(float64x2_t *)(v39 + 144);
      v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, _Q7.f64[0]), v45, _Q7, 1), v41, *(double *)v42.i64);
      _Q7.f64[0] = *(float64_t *)(v39 + 152);
      __asm { FMLA            D17, D7, V16.D[1] }
      _Q7.f64[0] = _D17 + *(double *)(v39 + 64) * *(double *)v42.i64;
      v49 = *(_QWORD *)(v39 + 48);
      v50 = vextq_s8((int8x16_t)v45, (int8x16_t)vdupq_laneq_s64(_Q16, 1), 8uLL);
      *(_QWORD *)&v45.f64[1] = v50.i64[0];
      v51 = *(_QWORD *)(v39 + 64);
      v52.f64[1] = v114;
      v53.f64[1] = v114;
      *(_QWORD *)&v53.f64[0] = *(_OWORD *)&vnegq_f64(_Q7);
      v54 = v40[4].f64[0];
      v55 = v40[2];
      _Q24 = v40[3];
      v57 = v40[1];
      v58 = v40[10].f64[0];
      v59 = v40[9];
      v60 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v40->f64[0]), v45, *v40, 1), v41, v57.f64[0]), (float64x2_t)0, v47);
      _Q2 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v49, v40->f64[0]), (float64x2_t)v50.u64[1], *v40, 1), (float64x2_t)v51, v57.f64[0]), (float64x2_t)0, v53);
      v62 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v44, v57, 1), v45, v55.f64[0]), v41, v55, 1), (float64x2_t)0, v47);
      _Q16 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v49, v57, 1), (float64x2_t)v50.u64[1], v55.f64[0]), (float64x2_t)v51, v55, 1), (float64x2_t)0, v53);
      _Q17 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, _Q24.f64[0]), v45, _Q24, 1), v41, v54), (float64x2_t)0, v47);
      *(_QWORD *)&v65 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v49, _Q24.f64[0]), (float64x2_t)v50.u64[1], _Q24, 1), (float64x2_t)v51, v54), (float64x2_t)0, v53);
      v66 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v44, v59.f64[0]), v45, v59, 1), v41, v58), v47);
      v67 = *(_OWORD *)&vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v49, v59.f64[0]), (float64x2_t)v50.u64[1], v59, 1), (float64x2_t)v51, v58), _Q7);
      v68 = *(_QWORD *)(v34 + 2280);
      v69 = v68 + 168 * (v9 + 1);
      v70 = (float64x2_t *)(v68 + 168 * v9);
      v44.f64[0] = *(float64_t *)(v69 + 16);
      v71 = *(int64x2_t *)(v69 + 24);
      _Q21 = *(int64x2_t *)(v69 + 48);
      v73 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v69, v71);
      v74 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v69, v71);
      v44.f64[1] = *(float64_t *)(v69 + 40);
      v75 = *(double *)(v69 + 160);
      v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, *(double *)(v69 + 144)), v74, *(float64x2_t *)(v69 + 144), 1), v44, v75);
      _D22 = *(_QWORD *)(v69 + 152);
      __asm { FMLA            D24, D22, V21.D[1] }
      v2.f64[0] = _Q24.f64[0] + *(double *)(v69 + 64) * v75;
      v78 = *(_QWORD *)(v69 + 48);
      v79 = vextq_s8((int8x16_t)v74, (int8x16_t)vdupq_laneq_s64(_Q21, 1), 8uLL);
      *(_QWORD *)&v74.f64[1] = v79.i64[0];
      v80 = *(_QWORD *)(v69 + 64);
      v59.f64[0] = v70[4].f64[0];
      v82 = v70[2];
      v81 = v70[3];
      v83 = *v70;
      v84 = v70[1];
      _Q24.f64[0] = v70[10].f64[0];
      v85 = v70[9];
      v86 = (float64x2_t)vzip1q_s64(v60, v62);
      v87 = (float64x2_t)vzip2q_s64(v60, v62);
      v88 = (float64x2_t)vzip1q_s64((int64x2_t)_Q2, _Q16);
      v89 = *(_QWORD *)&v66.f64[1] ^ 0x8000000000000000;
      v90 = vmlaq_f64(vmulq_f64(v86, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v66.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v66.f64[1] ^ 0x8000000000000000), v87);
      v91 = (float64x2_t)vdupq_n_s64(v67 ^ 0x8000000000000000);
      _Q16.i64[0] = v89;
      __asm { FMLA            D2, D16, V17.D[1] }
      *(_QWORD *)&v92 = v67 ^ 0x8000000000000000;
      *(_QWORD *)&v93.f64[0] = vdupq_lane_s64(*(uint64_t *)&v87.f64[0], 0).u64[0];
      v94 = vextq_s8((int8x16_t)v87, (int8x16_t)vdupq_laneq_s64(_Q17, 1), 8uLL);
      *(_QWORD *)&v93.f64[1] = v94.i64[0];
      *(_QWORD *)&v87.f64[0] = _Q17.i64[0];
      _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v92, v65);
      *(double *)_Q17.i64 = v65;
      _Q2.f64[1] = 1.0;
      v95 = vmlaq_f64(v90, v91, v88);
      *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vnegq_f64(v2);
      v96 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v83.f64[0]), v74, v83, 1), v44, v84.f64[0]), (float64x2_t)0, v76);
      v97 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78, v83.f64[0]), (float64x2_t)v79.u64[1], v83, 1), (float64x2_t)v80, v84.f64[0]), (float64x2_t)0, v52);
      v98 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v73, v84, 1), v74, v82.f64[0]), v44, v82, 1), (float64x2_t)0, v76);
      v99 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v78, v84, 1), (float64x2_t)v79.u64[1], v82.f64[0]), (float64x2_t)v80, v82, 1), (float64x2_t)0, v52);
      v100 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v81.f64[0]), v74, v81, 1), v44, v59.f64[0]), (float64x2_t)0, v76);
      v101 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78, v81.f64[0]), (float64x2_t)v79.u64[1], v81, 1), (float64x2_t)v80, v59.f64[0]), (float64x2_t)0, v52);
      v102 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v73, v85.f64[0]), v74, v85, 1), v44, _Q24.f64[0]), v76);
      v103 = vaddq_f64(v52, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v78, v85.f64[0]), (float64x2_t)v79.u64[1], v85, 1), (float64x2_t)v80, _Q24.f64[0]));
      v118[0] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v96.f64[0]), v93, v96, 1), v88, v97.f64[0]), v95, v97, 1);
      v118[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v87.f64[0], v96.f64[0]), (float64x2_t)v94.u64[1], v96, 1), (float64x2_t)_Q17.u64[0], v97.f64[0]), _Q2, v97, 1);
      v118[2] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v98.f64[0]), v93, v98, 1), v88, v99.f64[0]), v95, v99, 1);
      v118[3] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v87.f64[0], v98.f64[0]), (float64x2_t)v94.u64[1], v98, 1), (float64x2_t)_Q17.u64[0], v99.f64[0]), _Q2, v99, 1);
      v118[4] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v100.f64[0]), v93, v100, 1), v88, v101.f64[0]), v95, v101, 1);
      v118[5] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v87.f64[0], v100.f64[0]), (float64x2_t)v94.u64[1], v100, 1), (float64x2_t)_Q17.u64[0], v101.f64[0]), _Q2, v101, 1);
      v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v102.f64[0]), v93, v102, 1), v88, v103.f64[0]), v95, v103, 1);
      v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v87.f64[0], v102.f64[0]), (float64x2_t)v94.u64[1], v102, 1), (float64x2_t)_Q17.u64[0], v103.f64[0]), _Q2, v103, 1);
      v116 = 0u;
      v117 = 0u;
      v115 = 0u;
      v122[0] = (float64x2_t *)v118;
      v122[1] = 0;
      v121[0] = (double *)&v115;
      v121[1] = 0;
      sub_20E95B988(v122, v121);
      *(_QWORD *)&v105.f64[0] = v116;
      _Q17 = v115;
      _Q0 = vmulq_f64(_Q17, _Q17);
      _D1 = v115.f64[1];
      __asm { FMLA            D0, D1, V17.D[1] }
      v108 = _Q0.f64[0] + v105.f64[0] * v105.f64[0];
      if (v108 >= 0.0000002635)
      {
        v110 = sqrt(v108);
        v112 = v115;
        v113 = *(double *)&v116;
        v111 = __sincos_stret(v110);
        _Q17 = v112;
        v105.f64[0] = v113;
        v104.f64[0] = v111.__sinval / v110;
        _Q0.f64[0] = 1.0 / v108 * (1.0 - v111.__cosval);
        v109 = 1.0 / v108 * (1.0 - v111.__sinval / v110);
        if (v108 < 2.775e-15)
        {
LABEL_10:
          _Q0.f64[0] = v108 * 0.0000330687831 + v108 * 0.00138888889 + 0.0833333333;
          goto LABEL_11;
        }
      }
      else
      {
        _Q0.f64[0] = 0.5 - v108 * (v108 / -720.0 + 0.0416666667);
        v109 = 0.166666667 - v108 * (v108 / -5040.0 + 0.00833333333);
        v104.f64[0] = 1.0 - v108 * v109;
        if (v108 < 2.775e-15)
          goto LABEL_10;
      }
      if (v108 <= 9.0)
        _Q0.f64[0] = (_Q0.f64[0] * 0.5 - v109) / v104.f64[0];
      else
        _Q0.f64[0] = (_Q0.f64[0] + v104.f64[0] * -0.5) / (v108 * _Q0.f64[0]);
LABEL_11:
      v17 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
      v104.f64[0] = v120.f64[0];
      v18.f64[0] = v17.f64[0];
      v18.f64[1] = v105.f64[0];
      v19.f64[0] = v120.f64[0];
      v19.f64[1] = v119.f64[0];
      v105.f64[1] = _Q17.f64[0];
      _Q5 = vmlsq_f64(vmulq_f64(v18, v19), v105, (float64x2_t)vextq_s8((int8x16_t)v119, (int8x16_t)v104, 8uLL));
      v21 = vmlsq_f64(vmulq_laneq_f64(_Q17, v119, 1), v17, v119);
      __asm { FMOV            V6.2D, #-0.5 }
      v23 = vmlaq_f64(v119, _Q5, _Q6);
      v24 = vmlaq_f64(v104, v21, _Q6);
      v25 = (float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)v21, 8uLL);
      v21.f64[1] = _Q5.f64[0];
      v26 = vmulq_f64(v18, v21);
      v27 = vmlsq_f64(vmulq_laneq_f64(_Q17, _Q5, 1), v17, _Q5);
      _Q4 = vmlsq_f64(v26, v105, v25);
      v17.f64[0] = v24.f64[0] + _Q0.f64[0] * v27.f64[0];
      *(_QWORD *)&v24.f64[0] = *(_OWORD *)&vmlaq_f64(v24, _Q0, v27);
      _Q3 = vmlaq_n_f64(v23, _Q4, _Q0.f64[0]);
      __asm
      {
        FMLA            D5, D0, V4.D[1]
        FMLA            D0, D5, V3.D[1]
      }
      v31 = sqrt(vmlad_n_f64(_D0, v17.f64[0], v24.f64[0]));
      v17.f64[0] = *(float64_t *)(a1 + 3656);
      --v8;
      --v9;
      result = v31 < v17.f64[0];
      v32 = v10++;
      if (v31 >= v17.f64[0] || v5 >> 2 <= v32)
        return result;
    }
  }
  return 1;
}

void sub_20F156988(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v12 = 32 * a2;
      bzero(a1[1], 32 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 5;
    v8 = v7 + a2;
    if ((v7 + a2) >> 59)
      sub_20E95E0B0();
    v9 = v4 - v6;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 59)
        sub_20E877A38();
      v11 = (char *)operator new(32 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[32 * v7];
    v14 = 32 * a2;
    v15 = &v11[32 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_20F156AAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F156ABC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F156AEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v3 -= 13;
        sub_20E9905B4(v3);
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
}

uint64_t sub_20F156B68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE __p[24];
  void **v50;
  void **v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  void *v55;
  __int128 v56;
  int v57;
  void *__dst[2];
  unint64_t v59;
  _BYTE *v60;

  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DC900;
  strcpy(*(char **)__p, "VanishingDirOrientationEstimation parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.enable_vdir_orientation_correction_for_visual_slam", v4, "Enable Vanishing direction based orientation Correction for Visual SLAM.");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.enable_vdir_based_yaw_correction", v5, "Enable Vanishing direction based yaw correction to be aligned with Manhattan world.");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.use_current_pose_as_prior", v6, "Use current pose as prior to find the nearest Vanishing Dir based orientation Estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 3));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.vdir_orientation_debug", v7, "Save Vanishing Dir based orientation debug information.");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.use_multiple_cameras", v8, "Use multiple cameras for orientation estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EAA14D8((_BYTE *)(a1 + 5));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.use_multiple_camera_refinement", v9, "Use multiple cameras for orientation estimation refinement.");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 6));
  v54 = nullsub_1(a2);
  v11 = operator new();
  *(_QWORD *)(v11 + 109) = 0;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_QWORD *)v11 = &off_24C9F94B0;
  *(_QWORD *)(v11 + 8) = &unk_24C9F9528;
  *(_QWORD *)(v11 + 152) = &unk_24C9F9550;
  *(_QWORD *)(v11 + 168) = 0;
  v12 = (void **)(v11 + 168);
  *(_QWORD *)(v11 + 176) = 0;
  *(_QWORD *)(v11 + 184) = 0;
  *(_QWORD *)(v11 + 120) = (char *)off_24C9F96C8 + 1;
  *(_QWORD *)(v11 + 128) = a1 + 32;
  v13 = (_QWORD *)operator new();
  v14 = *(_QWORD *)(a1 + 32);
  *v13 = &off_24C9F9690;
  v13[1] = v14;
  *(_QWORD *)(v11 + 160) = v13;
  v57 = 0;
  v15 = operator new();
  *(_QWORD *)(v15 + 272) = 0;
  *(_OWORD *)(v15 + 240) = 0u;
  *(_OWORD *)(v15 + 256) = 0u;
  *(_OWORD *)(v15 + 208) = 0u;
  *(_OWORD *)(v15 + 224) = 0u;
  *(_OWORD *)(v15 + 176) = 0u;
  *(_OWORD *)(v15 + 192) = 0u;
  *(_OWORD *)(v15 + 144) = 0u;
  *(_OWORD *)(v15 + 160) = 0u;
  *(_OWORD *)(v15 + 112) = 0u;
  *(_OWORD *)(v15 + 128) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 96) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)v15 = 0u;
  sub_20E863438(v15);
  *(_QWORD *)__p = v15;
  sub_20E86A980((_QWORD *)(v15 + 16), (uint64_t)"{", 1);
  if (*(_BYTE *)(a1 + 36))
    std::ostream::operator<<();
  sub_20E86A980((_QWORD *)(v15 + 16), (uint64_t)"}", 1);
  v16 = *(_DWORD *)(v15 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v15 + 112);
    v20 = *(_QWORD *)(v15 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v15 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v15 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v59) = 0;
      v18 = __dst;
      goto LABEL_18;
    }
    v21 = *(const void **)(v15 + 40);
    v17 = *(_QWORD *)(v15 + 56) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_20E860B7C();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v59 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_17;
  }
  HIBYTE(v59) = v17;
  v18 = __dst;
  if (v17)
LABEL_17:
    memmove(v18, v21, v17);
LABEL_18:
  *((_BYTE *)v18 + v17) = 0;
  v24 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    **(_QWORD **)__p = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v24 + 128);
    MEMORY[0x212BC6398](v24, 0x10B2C40EED050F3);
  }
  *(_QWORD *)__p = &v55;
  *(_QWORD *)&__p[8] = __dst;
  *(_QWORD *)&__p[16] = &v55;
  v50 = __dst;
  v51 = __dst;
  if (v57 == -1)
    sub_20E877AB8();
  v60 = __p;
  ((void (*)(_BYTE **, void **))off_24C9F9458[v57])(&v60, &v55);
  if (SHIBYTE(v59) < 0)
    operator delete(__dst[0]);
  if (v57 == -1)
    sub_20E877AB8();
  __dst[0] = &v60;
  ((void (*)(_BYTE *__return_ptr, void **, void **))off_24C9F9488[v57])(__p, __dst, &v55);
  if (v57 != -1)
    ((void (*)(void **, void **))off_24C9F9470[v57])(__dst, &v55);
  if (*(char *)(v11 + 191) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = *(_OWORD *)__p;
  *(_QWORD *)(v11 + 184) = *(_QWORD *)&__p[16];
  sub_20E8B2F9C(&v54, "VanishingDirOrientationConfig.image_width_for_line_detection", v11, "Image width for downscaling image and running line detector.");
  *(_QWORD *)__p = nullsub_1(a2);
  v28 = sub_20EA9DCF0((unsigned int *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.vdir_orientation_max_retries", v28, "Maximum number of retries for Vanishing Dir based orientation estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v29 = sub_20EA9DCF0((unsigned int *)(a1 + 44));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.stationary_initializer_max_retries", v29, "Maximum number of retries for stationary initializer before trying vanishing direction orienation estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DCF0((unsigned int *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.line_detector_min_length", v30, "Minimum length for Edge Drawing Line detector.");
  *(_QWORD *)__p = nullsub_1(a2);
  v31 = sub_20EA9DCF0((unsigned int *)(a1 + 52));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.min_sec_to_pri_matches_thresh", v31, "Minimum number of secondary to primary camera matches count in visual SLAM.");
  *(_QWORD *)__p = nullsub_1(a2);
  v32 = sub_20EF4E784((float *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.vdir_imu_z_thresh", v32, "Threshold between IMU Z-direction and Estimated Z-direction for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v33 = sub_20EF4E784((float *)(a1 + 60));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.multiple_camera_estimations_angle_thresh", v33, "Threshold for left and right camera estimation for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v34 = sub_20EF4E784((float *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.min_xy_inlier_ratio_thresh", v34, "Minimum ratio of lines in x-direction or y-direction to total for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v35 = sub_20EF4E784((float *)(a1 + 68));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.min_total_inlier_ratio_thresh", v35, "Ratio of inliers in any vanishing direction to total number of detected  lines for outlier rejection.");
  *(_QWORD *)__p = nullsub_1(a2);
  v36 = sub_20EF4E784((float *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.min_angle_diff_to_consider_rentering_in_deg", v36, "Minimum angle difference to be considered in degrees for recentering. Corrections less than threshold is ignored.");
  *(_QWORD *)__p = nullsub_1(a2);
  v37 = operator new();
  *(_QWORD *)v37 = &off_24C9C34F8;
  *(_QWORD *)(v37 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v37 + 120) = 0;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  *(_OWORD *)(v37 + 48) = 0u;
  *(_OWORD *)(v37 + 64) = 0u;
  *(_OWORD *)(v37 + 80) = 0u;
  *(_OWORD *)(v37 + 96) = 0u;
  *(_QWORD *)(v37 + 109) = 0;
  v52 = (uint64_t)off_24C9F96E8 + 1;
  v53[0] = a1;
  sub_20EAA8294((uint64_t *)(v37 + 120), &v52);
  sub_20E8B2F9C((uint64_t *)__p, "VanishingDirOrientationConfig.recentering_mode", v37, "Force recentering mode. 0 - None; 1 - StationaryAndVanishingDir");
  if (v52)
  {
    if ((v52 & 1) == 0)
    {
      v38 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v52 & 0xFFFFFFFFFFFFFFFELL);
      if (v38)
        v38(v53, v53, 2);
    }
    v52 = 0;
  }
  v55 = operator new(0x30uLL);
  v56 = xmmword_2102DC8D0;
  strcpy((char *)v55, "VanishingDirOrientationRansac parameters");
  sub_20E8B30B4(__p, (__int128 *)&v55, 180, 160);
  if (SHIBYTE(v56) < 0)
    operator delete(v55);
  v55 = (void *)nullsub_1(__p);
  v39 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.num_of_ransac_iterations", v39, "Number of RANSAC iterations for 3-Line RANSAC for Orientation Estimation.");
  v55 = (void *)nullsub_1(__p);
  v40 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.num_of_ransac_iterations", v40, "Total number RANSAC iterations for 3-line RANSAC algorithm.");
  v55 = (void *)nullsub_1(__p);
  v41 = sub_20EA9DCF0((unsigned int *)(a1 + 84));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.min_num_of_lines", v41, "Minimum number of lines required before running RANSAC iterations.");
  v55 = (void *)nullsub_1(__p);
  v42 = sub_20EF4E784((float *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.line_point_cosine_dist_thresh", v42, "Cosine distance threshold between Vanishing direction and a line to be an inlier.");
  v55 = (void *)nullsub_1(__p);
  v43 = sub_20EF4E784((float *)(a1 + 92));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.parallel_vector_cross_product_thresh", v43, "Threshold to ignore the vanishing direction if sampled lines are parallel.");
  v55 = (void *)nullsub_1(__p);
  v44 = sub_20EF4E784((float *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.lines_inlier_ratio_thresh", v44, "Threshold for outlier rejection. This is the ratio of number of inlier lines to total number of lines. Default value 0.5 i.e. atleast 50% of lines should be inlier.");
  v55 = (void *)nullsub_1(__p);
  v45 = sub_20EAA14D8((_BYTE *)(a1 + 100));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRansacConfig.use_refinement", v45, "Use orientation refinement using lines after RANSAC.");
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  v55 = operator new(0x30uLL);
  v56 = xmmword_2102DCA00;
  strcpy((char *)v55, "VanishingDirOrientationRefiner parameters");
  sub_20E8B30B4(__p, (__int128 *)&v55, 180, 160);
  if (SHIBYTE(v56) < 0)
    operator delete(v55);
  v55 = (void *)nullsub_1(__p);
  v46 = sub_20EAA71FC((int *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRefinerConfig.verbose", v46, "Whether trace information should be printed out.");
  v55 = (void *)nullsub_1(__p);
  v47 = sub_20EF4E784((float *)(a1 + 108));
  sub_20E8B2F9C((uint64_t *)&v55, "VanishingDirOrientationRefinerConfig.outlier_thresh", v47, "Outlier threshold for the Orientation Refinement.");
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20F1575CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  sub_20E869298((uint64_t)&a9);
  sub_20E869298(v35);
  _Unwind_Resume(a1);
}

void sub_20F157808(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F157D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F157E1C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F157E3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F157E5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F157E64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F157E6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F157EC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3kit2po8OptionalIjEE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3kit2po8OptionalIjEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_QWORD *)(*a2 + 8);
    v7 = *(_QWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_662;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F157FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F157FD0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F94B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9528;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9550;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F158750(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F158750(a1);
}

void sub_20F158038(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F94B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9528;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9550;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F158750(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F1580B4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v25;
  std::bad_cast v26;
  void *v27;
  std::ios_base v28;
  uint64_t v29;
  int v30;
  _QWORD __sb[8];
  std::string v32;
  unsigned int v33;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v25 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v25);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v27 = 0;
  v28.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v26.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v28, __sb);
  v29 = 0;
  v30 = -1;
  v15 = (std::ios_base *)((char *)&v26 + (unint64_t)v26.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v26.__vftable;
  *(_DWORD *)((char *)&v26 + (unint64_t)v26.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v28.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v33 = 0;
  MEMORY[0x212BC5C00](&v26, &v33);
  v17 = (char *)&v26 + (unint64_t)v26.__vftable[-1].~bad_cast;
  if ((v17[32] & 5) != 0)
    goto LABEL_26;
  sub_20EA9DA18(&v32, *((_QWORD **)v17 + 5), 0);
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&v32.__r_.__value_.__s + 23))
    {
      v18 = v33;
      goto LABEL_17;
    }
LABEL_26:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not parse into an Optional value.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v32.__r_.__value_.__l.__size_)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  v18 = v33;
  operator delete(v32.__r_.__value_.__l.__data_);
LABEL_17:
  v19 = v18 | 0x100000000;
  if ((*((_BYTE *)&v28.__precision_ + (unint64_t)v26.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_27;
  }
  v20 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v20)
  {
LABEL_27:
    std::bad_cast::bad_cast(&v26);
    v26.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v27 = &unk_24C9AB9F0;
    v28.__vftable = (std::ios_base_vtbl *)&unk_24C9F9670;
    sub_20EA9F254((uint64_t)&v26);
  }
  v21 = (_QWORD *)operator new();
  *v21 = &off_24C9F9690;
  v21[1] = v19;
  v22 = *a2;
  *a2 = (uint64_t)v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
}

void sub_20F15847C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  JUMPOUT(0x20F15848CLL);
}

void sub_20F1584B4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1584CCLL);
}

void *sub_20F1584E8()
{
  return &unk_24C9F9670;
}

uint64_t sub_20F1584F4(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1584FC()
{
  return &unk_24C9F9670;
}

uint64_t sub_20F158508(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F94B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9528;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9550;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F158750(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F158750(v2);
}

void sub_20F158578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F94B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9528;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9550;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F158750(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1585FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F94B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9528;
  *(_QWORD *)a1 = &unk_24C9F9550;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F158750(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F158750(v2);
}

void sub_20F15866C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F94B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9528;
  *(_QWORD *)a1 = &unk_24C9F9550;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F158750(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1586F0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1586FC(uint64_t a1)
{
  sub_20F158750(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F158720(uint64_t a1)
{
  return sub_20F158750(a1 - 8);
}

void sub_20F158728(uint64_t a1)
{
  sub_20F158750(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F158750(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F95E8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9658;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F158820()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F158834()
{
  return &unk_24C9F9670;
}

_QWORD *sub_20F158840(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F9690;
  result[1] = v3;
  return result;
}

uint64_t sub_20F158884(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F96D8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalIjEEEPN5boost15p"
                                      "rogram_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3kit2po8OptionalIjEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_QWORD **sub_20F158930(_QWORD **result, _QWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F158940(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F96F8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_29VanishingDirOrientationConfigEE4$_18" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio8odometry28GetProgramOptionsDescriptionERNS1_29VanishingDirOrientationConfigEE4$_18" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20F1589EC(uint64_t result, _DWORD *a2)
{
  *(_BYTE *)(*(_QWORD *)result + 76) = *a2;
  return result;
}

char **sub_20F1589FC(char **a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  __int128 v44;
  BOOL v45;
  char *v46;
  void *v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  void *__dst;
  char *v55;

  a1[2] = 0;
  v3 = a1 + 2;
  *((_OWORD *)a1 + 8) = 0u;
  v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  *((_BYTE *)a1 + 272) = 0;
  *((_BYTE *)a1 + 280) = 0;
  *((_BYTE *)a1 + 300) = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    __dst = v4;
    goto LABEL_42;
  }
  v7 = 0xF0F0F0F0F0F0F0F1 * (v6 >> 4);
  if (v7 > 0xF0F0F0F0F0F0F0)
    sub_20EABADD4();
  v8 = (char *)operator new(v6);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = &v8[272 * v7];
  v9 = *(char **)a2;
  v10 = *(char **)(a2 + 8);
  __dst = v4;
  if (*(char **)a2 != v10)
  {
    while ((unint64_t)v8 < *v3)
    {
      *((_QWORD *)v8 + 1) = 0;
      *(_OWORD *)(v8 + 120) = 0u;
      v8[264] = 0;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 56) = 0u;
      *(_OWORD *)(v8 + 72) = 0u;
      *(_OWORD *)(v8 + 88) = 0u;
      *(_OWORD *)(v8 + 104) = 0u;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 177) = 0u;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      memmove(v8 + 24, v9 + 24, 0x48uLL);
      if (v8 != v9)
        sub_20EF44994((_QWORD *)v8 + 12, *((char **)v9 + 12), *((char **)v9 + 13), *((_QWORD *)v9 + 13) - *((_QWORD *)v9 + 12));
      memmove(v8 + 120, v9 + 120, 0x48uLL);
      if (v9[264])
      {
        v11 = v8[264];
        memmove(v8 + 192, v9 + 192, 0x48uLL);
        if (!v11)
          v8[264] = 1;
      }
      v8 += 272;
      a1[1] = v8;
LABEL_8:
      a1[1] = v8;
      v9 += 272;
      if (v9 == v10)
        goto LABEL_42;
    }
    v12 = 0xF0F0F0F0F0F0F0F1 * ((v8 - *a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0xF0F0F0F0F0F0F0)
      sub_20EABADD4();
    if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4) > v13)
      v13 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4);
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*v3 - (_QWORD)*a1) >> 4) >= 0x78787878787878)
      v14 = 0xF0F0F0F0F0F0F0;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 > 0xF0F0F0F0F0F0F0)
        sub_20E877A38();
      v15 = (char *)operator new(272 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[272 * v12];
    v55 = &v15[272 * v14];
    v17 = *(_QWORD *)v9;
    v18 = *(_OWORD *)(v9 + 8);
    *((_OWORD *)v16 + 6) = 0u;
    v16[192] = 0;
    v16[264] = 0;
    *(_QWORD *)v16 = v17;
    *(_OWORD *)(v16 + 8) = v18;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_OWORD *)v16 + 10) = 0u;
    *((_OWORD *)v16 + 11) = 0u;
    *(_OWORD *)(v16 + 24) = *(_OWORD *)(v9 + 24);
    v19 = *(_OWORD *)(v9 + 56);
    v20 = *(_OWORD *)(v9 + 72);
    v21 = *((_QWORD *)v9 + 11);
    *(_OWORD *)(v16 + 40) = *(_OWORD *)(v9 + 40);
    *((_QWORD *)v16 + 11) = v21;
    *(_OWORD *)(v16 + 72) = v20;
    *(_OWORD *)(v16 + 56) = v19;
    if (v16 != v9)
      sub_20EF44994((_QWORD *)v16 + 12, *((char **)v9 + 12), *((char **)v9 + 13), *((_QWORD *)v9 + 13) - *((_QWORD *)v9 + 12));
    *(_OWORD *)(v16 + 120) = *(_OWORD *)(v9 + 120);
    v22 = *(_OWORD *)(v9 + 136);
    v23 = *(_OWORD *)(v9 + 152);
    v24 = *(_OWORD *)(v9 + 168);
    *((_QWORD *)v16 + 23) = *((_QWORD *)v9 + 23);
    *(_OWORD *)(v16 + 152) = v23;
    *(_OWORD *)(v16 + 168) = v24;
    *(_OWORD *)(v16 + 136) = v22;
    if (!v9[264])
      goto LABEL_29;
    v25 = v16[264];
    *((_OWORD *)v16 + 12) = *((_OWORD *)v9 + 12);
    v27 = *((_OWORD *)v9 + 14);
    v26 = *((_OWORD *)v9 + 15);
    v28 = *((_OWORD *)v9 + 13);
    *((_QWORD *)v16 + 32) = *((_QWORD *)v9 + 32);
    *((_OWORD *)v16 + 14) = v27;
    *((_OWORD *)v16 + 15) = v26;
    *((_OWORD *)v16 + 13) = v28;
    if (!v25)
    {
      v16[264] = 1;
      v29 = &v15[272 * v12];
      v8 = v16 + 272;
      v30 = *a1;
      v31 = a1[1];
      if (v31 != *a1)
        goto LABEL_30;
    }
    else
    {
LABEL_29:
      v29 = &v15[272 * v12];
      v8 = v16 + 272;
      v30 = *a1;
      v31 = a1[1];
      if (v31 != *a1)
      {
LABEL_30:
        v32 = v31 - 272;
        v33 = v29 - 272;
        do
        {
          v34 = *((_OWORD *)v32 + 1);
          *(_OWORD *)v33 = *(_OWORD *)v32;
          *((_OWORD *)v33 + 1) = v34;
          v35 = *((_OWORD *)v32 + 2);
          v36 = *((_OWORD *)v32 + 3);
          v37 = *((_OWORD *)v32 + 5);
          *((_OWORD *)v33 + 4) = *((_OWORD *)v32 + 4);
          *((_OWORD *)v33 + 5) = v37;
          *((_OWORD *)v33 + 2) = v35;
          *((_OWORD *)v33 + 3) = v36;
          *((_QWORD *)v33 + 13) = 0;
          *((_QWORD *)v33 + 14) = 0;
          *((_QWORD *)v33 + 12) = 0;
          *((_OWORD *)v33 + 6) = *((_OWORD *)v32 + 6);
          *((_QWORD *)v33 + 14) = *((_QWORD *)v32 + 14);
          *((_QWORD *)v32 + 13) = 0;
          *((_QWORD *)v32 + 14) = 0;
          *((_QWORD *)v32 + 12) = 0;
          v38 = *(_OWORD *)(v32 + 168);
          v39 = *(_OWORD *)(v32 + 184);
          v40 = *(_OWORD *)(v32 + 200);
          *(_OWORD *)(v33 + 152) = *(_OWORD *)(v32 + 152);
          *(_OWORD *)(v33 + 200) = v40;
          *(_OWORD *)(v33 + 184) = v39;
          *(_OWORD *)(v33 + 168) = v38;
          v41 = *(_OWORD *)(v32 + 232);
          v42 = *(_OWORD *)(v32 + 248);
          v43 = v32[264];
          *(_OWORD *)(v33 + 216) = *(_OWORD *)(v32 + 216);
          v33[264] = v43;
          *(_OWORD *)(v33 + 248) = v42;
          *(_OWORD *)(v33 + 232) = v41;
          v44 = *(_OWORD *)(v32 + 120);
          *(_OWORD *)(v33 + 136) = *(_OWORD *)(v32 + 136);
          *(_OWORD *)(v33 + 120) = v44;
          v33 -= 272;
          v45 = v32 == v30;
          v32 -= 272;
        }
        while (!v45);
        v31 = *a1;
        v46 = a1[1];
        *a1 = v33 + 272;
        a1[1] = v8;
        a1[2] = v55;
        while (v46 != v31)
        {
          v47 = (void *)*((_QWORD *)v46 - 22);
          if (v47)
          {
            *((_QWORD *)v46 - 21) = v47;
            operator delete(v47);
          }
          v46 -= 272;
        }
LABEL_40:
        if (v31)
          operator delete(v31);
        goto LABEL_8;
      }
    }
    *a1 = v29;
    a1[1] = v8;
    a1[2] = v55;
    goto LABEL_40;
  }
LABEL_42:
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 24);
  v48 = *(char **)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v48;
  memmove(a1 + 7, (const void *)(a2 + 56), 0x48uLL);
  memmove(__dst, (const void *)(a2 + 128), 0x48uLL);
  if (*(_BYTE *)(a2 + 272))
  {
    v49 = *((unsigned __int8 *)a1 + 272);
    memmove(a1 + 25, (const void *)(a2 + 200), 0x48uLL);
    if (!v49)
      *((_BYTE *)a1 + 272) = 1;
  }
  if (*(_BYTE *)(a2 + 300))
  {
    v50 = *((unsigned __int8 *)a1 + 300);
    v51 = *(_DWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 280);
    *((_DWORD *)a1 + 74) = v51;
    if (!v50)
      *((_BYTE *)a1 + 300) = 1;
  }
  *((_BYTE *)a1 + 304) = *(_BYTE *)(a2 + 304);
  return a1;
}

void sub_20F158F18(_Unwind_Exception *a1)
{
  void **v1;

  sub_20F0281F8(v1);
  _Unwind_Resume(a1);
}

void sub_20F158F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a4);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v6 + 272 * v7 + 104) = v9;
    operator delete(v9);
  }
  sub_20F1596FC((uint64_t)va);
  sub_20F0281F8(v4);
  _Unwind_Resume(a1);
}

void sub_20F158F60(_Unwind_Exception *a1)
{
  void **v1;

  sub_20F0281F8(v1);
  _Unwind_Resume(a1);
}

void sub_20F158F74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 104) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(v1 + 8) = v2;
  sub_20F0281F8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20F158F9C(_Unwind_Exception *a1)
{
  void **v1;

  sub_20F0281F8(v1);
  _Unwind_Resume(a1);
}

void sub_20F158FB0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  void *v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  void *__p[2];
  uint64_t v83;
  _OWORD v84[2];
  _OWORD v85[2];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  char v92;

  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 88) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a2 + 120) = _Q0;
  *(_QWORD *)(a2 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0x3FF0000000000000;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 300) = 0;
  *(_BYTE *)(a2 + 304) = -1;
  v8 = *a1;
  v74 = a1[1];
  v9 = v74 - *a1;
  if (v74 != v8)
  {
    v10 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 4);
    if (v10 > 0xF0F0F0F0F0F0F0)
      sub_20E867F44();
    v11 = (char *)operator new(v9);
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v11;
    for (*(_QWORD *)(a2 + 16) = &v11[272 * v10]; v8 != v74; v8 += 272)
    {
      __p[1] = 0;
      v83 = 0;
      __p[0] = 0;
      *((_QWORD *)&v85[1] + 1) = 0;
      *((_QWORD *)&v84[1] + 1) = 0;
      *(_OWORD *)((char *)v85 + 8) = 0u;
      *(_OWORD *)((char *)v84 + 8) = 0u;
      *(_QWORD *)&v84[0] = 0x3FF0000000000000;
      *(_QWORD *)&v85[0] = 0x3FF0000000000000;
      v86 = 0x3FF0000000000000;
      LOBYTE(v87) = 0;
      v92 = 0;
      *(_QWORD *)&v75 = *(_QWORD *)v8;
      v12 = *(unsigned int *)(v8 + 8);
      v13 = *(unsigned int *)(v8 + 12);
      if (v12 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v13 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      *((_QWORD *)&v75 + 1) = v12 | (v13 << 32);
      v76 = *(_QWORD *)(v8 + 16);
      v81 = *(_QWORD *)(v8 + 88);
      v79 = *(_OWORD *)(v8 + 56);
      v80 = *(_OWORD *)(v8 + 72);
      v77 = *(_OWORD *)(v8 + 24);
      v78 = *(_OWORD *)(v8 + 40);
      if (__p != (void **)(v8 + 96))
        sub_20EF44994(__p, *(char **)(v8 + 96), *(char **)(v8 + 104), *(_QWORD *)(v8 + 104) - *(_QWORD *)(v8 + 96));
      v14 = *(_OWORD *)(v8 + 120);
      v15 = *(_OWORD *)(v8 + 136);
      v16 = *(_OWORD *)(v8 + 152);
      v17 = *(_OWORD *)(v8 + 168);
      v86 = *(_QWORD *)(v8 + 184);
      v85[1] = v17;
      v85[0] = v16;
      v84[1] = v15;
      v84[0] = v14;
      if (!*(_BYTE *)(v8 + 264))
        goto LABEL_15;
      v18 = *(_OWORD *)(v8 + 192);
      v19 = *(_OWORD *)(v8 + 208);
      v20 = *(_OWORD *)(v8 + 224);
      v21 = *(_OWORD *)(v8 + 240);
      v91 = *(_QWORD *)(v8 + 256);
      v90 = v21;
      v89 = v20;
      v88 = v19;
      v87 = v18;
      if (!v92)
      {
        v92 = 1;
        v23 = *(_OWORD **)(a2 + 8);
        v22 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v23 >= v22)
        {
LABEL_19:
          v30 = *(_OWORD **)a2;
          v31 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v23 - *(_QWORD *)a2) >> 4);
          v32 = v31 + 1;
          if (v31 + 1 > 0xF0F0F0F0F0F0F0)
            sub_20E867F44();
          v33 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v22 - (_QWORD)v30) >> 4);
          if (2 * v33 > v32)
            v32 = 2 * v33;
          if (v33 >= 0x78787878787878)
            v34 = 0xF0F0F0F0F0F0F0;
          else
            v34 = v32;
          if (v34)
          {
            if (v34 > 0xF0F0F0F0F0F0F0)
              sub_20E877A38();
            v35 = (char *)operator new(272 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[272 * v31];
          *(_OWORD *)v36 = v75;
          *(_OWORD *)(v36 + 40) = v78;
          *(_OWORD *)(v36 + 56) = v79;
          *(_OWORD *)(v36 + 72) = v80;
          *(_OWORD *)(v36 + 24) = v77;
          *((_OWORD *)v36 + 6) = *(_OWORD *)__p;
          v37 = v84[0];
          *(_OWORD *)(v36 + 136) = v84[1];
          v38 = v85[1];
          *(_OWORD *)(v36 + 152) = v85[0];
          *(_OWORD *)(v36 + 168) = v38;
          *((_QWORD *)v36 + 2) = v76;
          *((_QWORD *)v36 + 11) = v81;
          *((_QWORD *)v36 + 14) = 0;
          *((_QWORD *)v36 + 14) = v83;
          __p[0] = 0;
          __p[1] = 0;
          v83 = 0;
          *((_QWORD *)v36 + 23) = v86;
          *(_OWORD *)(v36 + 120) = v37;
          v36[192] = 0;
          v36[264] = 0;
          if (v92)
          {
            v39 = v90;
            *((_OWORD *)v36 + 14) = v89;
            *((_OWORD *)v36 + 15) = v39;
            *((_QWORD *)v36 + 32) = v91;
            v40 = v88;
            *((_OWORD *)v36 + 12) = v87;
            *((_OWORD *)v36 + 13) = v40;
            v36[264] = 1;
          }
          v41 = &v35[272 * v34];
          v42 = v36 + 272;
          if (v23 == v30)
          {
            *(_QWORD *)a2 = v36;
            *(_QWORD *)(a2 + 8) = v42;
            *(_QWORD *)(a2 + 16) = v41;
            if (v23)
              goto LABEL_42;
          }
          else
          {
            v43 = 0;
            do
            {
              v44 = &v36[v43 * 16];
              v45 = &v23[v43];
              v46 = v23[v43 - 17];
              *((_QWORD *)v44 - 32) = *(_QWORD *)&v23[v43 - 16];
              *(_OWORD *)&v36[v43 * 16 - 272] = v46;
              v47 = *(_OWORD *)((char *)&v23[v43 - 14] - 8);
              v48 = *(_OWORD *)((char *)&v23[v43 - 13] - 8);
              v49 = *(_OWORD *)((char *)&v23[v43 - 12] - 8);
              *((_QWORD *)v44 - 23) = *((_QWORD *)&v23[v43 - 11] - 1);
              *(_OWORD *)(v44 - 200) = v49;
              *(_OWORD *)(v44 - 216) = v48;
              *(_OWORD *)(v44 - 232) = v47;
              *(_OWORD *)(v44 - 248) = *(_OWORD *)((char *)&v23[v43 - 15] - 8);
              *((_QWORD *)v44 - 21) = 0;
              *((_QWORD *)v44 - 20) = 0;
              *((_OWORD *)v44 - 11) = v23[v43 - 11];
              *((_QWORD *)v44 - 20) = *(_QWORD *)&v23[v43 - 10];
              *((_QWORD *)v45 - 21) = 0;
              *((_QWORD *)v45 - 20) = 0;
              *((_QWORD *)v45 - 22) = 0;
              v50 = *(_OWORD *)((char *)&v23[v43 - 8] - 8);
              v51 = *(_OWORD *)((char *)&v23[v43 - 7] - 8);
              v52 = *(_OWORD *)((char *)&v23[v43 - 6] - 8);
              *((_QWORD *)v44 - 11) = *((_QWORD *)&v23[v43 - 5] - 1);
              *(_OWORD *)(v44 - 104) = v52;
              *(_OWORD *)(v44 - 120) = v51;
              *(_OWORD *)(v44 - 136) = v50;
              *(_OWORD *)(v44 - 152) = *(_OWORD *)((char *)&v23[v43 - 9] - 8);
              v36[v43 * 16 - 80] = 0;
              *(v44 - 8) = 0;
              if (BYTE8(v23[v43 - 1]))
              {
                *(_OWORD *)&v36[v43 * 16 - 80] = *(v45 - 5);
                v53 = *(v45 - 4);
                v54 = *(v45 - 3);
                v55 = *(v45 - 2);
                *(_QWORD *)&v36[v43 * 16 - 16] = *((_QWORD *)v45 - 2);
                *(_OWORD *)&v36[v43 * 16 - 48] = v54;
                *(_OWORD *)&v36[v43 * 16 - 32] = v55;
                *(_OWORD *)&v36[v43 * 16 - 64] = v53;
                *(v44 - 8) = 1;
              }
              v43 -= 17;
            }
            while (&v23[v43] != v30);
            v23 = *(_OWORD **)a2;
            v56 = *(_OWORD **)(a2 + 8);
            *(_QWORD *)a2 = &v36[v43 * 16];
            *(_QWORD *)(a2 + 8) = v42;
            *(_QWORD *)(a2 + 16) = v41;
            while (v56 != v23)
            {
              v57 = (void *)*((_QWORD *)v56 - 22);
              if (v57)
              {
                *((_QWORD *)v56 - 21) = v57;
                operator delete(v57);
              }
              v56 -= 17;
            }
            if (v23)
LABEL_42:
              operator delete(v23);
          }
          v58 = __p[0];
          *(_QWORD *)(a2 + 8) = v42;
          if (v58)
          {
            __p[1] = v58;
            operator delete(v58);
          }
          continue;
        }
      }
      else
      {
LABEL_15:
        v23 = *(_OWORD **)(a2 + 8);
        v22 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v23 >= v22)
          goto LABEL_19;
      }
      *((_QWORD *)v23 + 2) = v76;
      *v23 = v75;
      *(_OWORD *)((char *)v23 + 40) = v78;
      *(_OWORD *)((char *)v23 + 72) = v80;
      *(_OWORD *)((char *)v23 + 56) = v79;
      *((_QWORD *)v23 + 11) = v81;
      *((_QWORD *)v23 + 12) = 0;
      *(_OWORD *)((char *)v23 + 24) = v77;
      *((_QWORD *)v23 + 13) = 0;
      *((_QWORD *)v23 + 14) = 0;
      v23[6] = *(_OWORD *)__p;
      *((_QWORD *)v23 + 14) = v83;
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      *(_OWORD *)((char *)v23 + 120) = v84[0];
      v24 = v84[1];
      v25 = v85[0];
      v26 = v85[1];
      *((_QWORD *)v23 + 23) = v86;
      *(_OWORD *)((char *)v23 + 168) = v26;
      *(_OWORD *)((char *)v23 + 152) = v25;
      *(_OWORD *)((char *)v23 + 136) = v24;
      *((_BYTE *)v23 + 192) = 0;
      *((_BYTE *)v23 + 264) = 0;
      if (v92)
      {
        v23[12] = v87;
        v27 = v88;
        v28 = v89;
        v29 = v90;
        *((_QWORD *)v23 + 32) = v91;
        v23[14] = v28;
        v23[15] = v29;
        v23[13] = v27;
        *((_BYTE *)v23 + 264) = 1;
      }
      *(_QWORD *)(a2 + 8) = v23 + 17;
    }
  }
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a1 + 6);
  v59 = *((_OWORD *)a1 + 2);
  *(_QWORD *)(a2 + 48) = a1[6];
  *(_OWORD *)(a2 + 32) = v59;
  v60 = *(_OWORD *)(a1 + 7);
  v61 = *(_OWORD *)(a1 + 9);
  v62 = *(_OWORD *)(a1 + 11);
  v63 = *(_OWORD *)(a1 + 13);
  *(_QWORD *)(a2 + 120) = a1[15];
  *(_OWORD *)(a2 + 104) = v63;
  *(_OWORD *)(a2 + 88) = v62;
  *(_OWORD *)(a2 + 72) = v61;
  *(_OWORD *)(a2 + 56) = v60;
  v64 = *((_OWORD *)a1 + 8);
  v65 = *((_OWORD *)a1 + 9);
  v66 = *((_OWORD *)a1 + 10);
  v67 = *((_OWORD *)a1 + 11);
  *(_QWORD *)(a2 + 192) = a1[24];
  *(_OWORD *)(a2 + 160) = v66;
  *(_OWORD *)(a2 + 176) = v67;
  *(_OWORD *)(a2 + 128) = v64;
  *(_OWORD *)(a2 + 144) = v65;
  if (*((_BYTE *)a1 + 272))
  {
    v68 = *(_OWORD *)(a1 + 25);
    v69 = *(_OWORD *)(a1 + 27);
    v70 = *(_OWORD *)(a1 + 29);
    v71 = *(_OWORD *)(a1 + 31);
    v72 = *(unsigned __int8 *)(a2 + 272);
    *(_QWORD *)(a2 + 264) = a1[33];
    *(_OWORD *)(a2 + 248) = v71;
    *(_OWORD *)(a2 + 232) = v70;
    *(_OWORD *)(a2 + 216) = v69;
    *(_OWORD *)(a2 + 200) = v68;
    if (!v72)
      *(_BYTE *)(a2 + 272) = 1;
  }
  if (*((_BYTE *)a1 + 300))
  {
    *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 35);
    *(_QWORD *)(a2 + 293) = *(uint64_t *)((char *)a1 + 293);
  }
  *(_BYTE *)(a2 + 304) = *((_BYTE *)a1 + 304);
}

void sub_20F1596B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void **v27;

  sub_20F0281F8(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1596FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 272;
        *(_QWORD *)(a1 + 16) = v2 - 272;
        v5 = *(void **)(v2 - 176);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 168) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 272;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20F159768(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F9790;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20F1597DC(_QWORD *a1)
{
  *a1 = &off_24C9F9718;
  sub_20F162344(a1 + 1);
  return a1;
}

void sub_20F15980C(_QWORD *a1)
{
  *a1 = &off_24C9F9718;
  sub_20F162344(a1 + 1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F15984C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float64x2_t **v8;
  float64x2_t *v9;
  float64x2_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  float64x2_t *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[12];
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  void *__p;
  void *v27;

  kdebug_trace();
  sub_20EDB9988((uint64_t)v23, a2);
  v8 = sub_20F16277C(a1 + 8, v23, a3, 0);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v9 = *v8;
  v10 = v8[1];
  v11 = (char *)v10 - (char *)*v8;
  if (v10 != *v8)
  {
    if (v11 < 0)
      sub_20E867F44();
    v12 = (char *)operator new((char *)v10 - (char *)*v8);
    v13 = 0;
    *a4 = v12;
    a4[1] = v12;
    a4[2] = &v12[32 * (v11 >> 5)];
    do
    {
      v14 = &v9[v13];
      v15 = &v12[v13 * 16];
      *(float64x2_t *)v15 = v9[v13];
      *((float64x2_t *)v15 + 1) = v9[v13 + 1];
      v13 += 2;
    }
    while (&v14[2] != v10);
    a4[1] = &v12[v13 * 16];
  }
  v23[0] = &off_24C9AFD78;
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  v16 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return kdebug_trace();
}

void sub_20F1599E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E481C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F159A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E8E481C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F159A24(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t (***a4)()@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  float64x2_t **v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  unint64_t v29;
  float64x2_t *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  OpaqueVTPixelTransferSession **v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  float v90;
  uint64_t v91;
  float64x2_t v92;
  unsigned int v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float64x2_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  int8x16_t v113;
  float64x2_t v114;
  float64x2_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  double v119;
  float64x2_t **v120;
  float64x2_t *v121;
  float64x2_t *v122;
  uint64_t v123;
  uint64_t (**v124)();
  unint64_t v125;
  float64x2_t *v126;
  uint64_t (**v127)();
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  double *v134;
  double *v135;
  uint64_t v136;
  uint64_t v137;
  double *v138;
  double v139;
  double *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  double *v151;
  double *v152;
  uint64_t (**v153)();
  uint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  _QWORD v166[3];
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  uint64_t (**v169)();
  __int128 v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  void *__p;
  void *v174;
  uint64_t (**v175)();
  unint64_t v176;
  std::__shared_weak_count *v177;
  _QWORD v178[2];
  std::__shared_weak_count *v179;
  uint64_t v180[2];
  std::__shared_weak_count *v181;
  uint64_t (**v182)();
  uint64_t v183;
  std::__shared_weak_count *v184;

  if (!*(_BYTE *)(a1 + 228) || (v8 = *(unsigned int *)(a1 + 224), v9 = a2[3], v9 == v8))
  {
    kdebug_trace();
    sub_20EDB9988((uint64_t)&v169, a2);
    v24 = sub_20F16277C(a1 + 8, &v169, a3, 0);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v25 = *v24;
    v26 = v24[1];
    v27 = (char *)v26 - (char *)*v24;
    if (v26 != *v24)
    {
      if (v27 < 0)
        sub_20E867F44();
      v28 = (uint64_t (**)())operator new((char *)v26 - (char *)*v24);
      v29 = 0;
      *a4 = v28;
      a4[1] = v28;
      a4[2] = &v28[4 * (v27 >> 5)];
      do
      {
        v30 = &v25[v29 / 0x10];
        v31 = (char *)&v28[v29 / 8];
        *(float64x2_t *)v31 = v25[v29 / 0x10];
        *((float64x2_t *)v31 + 1) = v25[v29 / 0x10 + 1];
        v29 += 32;
      }
      while (&v30[2] != v26);
      a4[1] = &v28[v29 / 8];
    }
    v169 = &off_24C9AFD78;
    if (__p)
    {
      v174 = __p;
      operator delete(__p);
    }
    v32 = v172;
    if (v172)
    {
      p_shared_owners = (unint64_t *)&v172->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v171;
    if (v171)
    {
      v36 = (unint64_t *)&v171->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    kdebug_trace();
    return;
  }
  v10 = (float)v8 / (float)v9;
  *(float *)(a1 + 232) = v10;
  *(_BYTE *)(a1 + 236) = 1;
  v11 = a2[5];
  v12 = (std::__shared_weak_count *)a2[11];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a2[12];
  v16 = (std::__shared_weak_count *)a2[13];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
  }
  v182 = &off_24CA1A9A0;
  if (!v15)
  {
    v183 = 0;
    v184 = 0;
    if (!v16)
      goto LABEL_43;
    goto LABEL_36;
  }
  v21 = *(_QWORD *)(v15 + 8);
  v20 = *(std::__shared_weak_count **)(v15 + 16);
  v183 = v21;
  v184 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  if (v16)
  {
LABEL_36:
    v38 = (unint64_t *)&v16->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_43:
  if (v12)
  {
    v41 = (unint64_t *)&v12->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v43 = *(_QWORD *)(a1 + 208);
      if (v43)
        goto LABEL_48;
LABEL_64:
      LODWORD(v178[0]) = v8;
      HIDWORD(v178[0]) = (float)(v10 * (float)v11);
      v54 = sub_21015BE44((uint64_t)&v182);
      HIBYTE(v181) = 12;
      strcpy((char *)v180, "scaled_image");
      sub_21015D490((uint64_t)&v169, (unsigned int *)v178, v54, v180, 1u);
      v55 = v170;
      v170 = 0uLL;
      v56 = *(std::__shared_weak_count **)(a1 + 216);
      *(_OWORD *)(a1 + 208) = v55;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v169 = &off_24CA1A9A0;
      v59 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (SHIBYTE(v181) < 0)
        operator delete((void *)v180[0]);
      goto LABEL_76;
    }
  }
  v43 = *(_QWORD *)(a1 + 208);
  if (!v43)
    goto LABEL_64;
LABEL_48:
  v44 = *(std::__shared_weak_count **)(v43 + 8);
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v48 = *(uint64_t **)(a1 + 208);
  if (!v48)
    goto LABEL_64;
  v50 = *v48;
  v49 = (std::__shared_weak_count *)v48[1];
  if (v49)
  {
    v51 = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (!v50)
    goto LABEL_64;
LABEL_76:
  if ((sub_21015D950(a1 + 200) != (float)(v10 * (float)(unint64_t)a2[3])
     || sub_21015DBD0(a1 + 200) != (float)(v10 * (float)(unint64_t)a2[5]))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 365, (uint64_t)"downscaled_image_.Width() == static_cast<uint32_t>(scale_factor * image.width) && downscaled_image_.Height() == static_cast<uint32_t>(scale_factor * image.height)", 162, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  kdebug_trace();
  v62 = *(OpaqueVTPixelTransferSession ***)(a1 + 192);
  v180[0] = (uint64_t)&off_24CA1A9A0;
  v180[1] = v183;
  v181 = v184;
  if (v184)
  {
    v63 = (unint64_t *)&v184->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
  }
  v66 = *(_QWORD *)(a1 + 208);
  v65 = *(std::__shared_weak_count **)(a1 + 216);
  v178[0] = &off_24CA1A9A0;
  v178[1] = v66;
  v179 = v65;
  if (v65)
  {
    v67 = (unint64_t *)&v65->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = sub_210106494(v62, (uint64_t)v180, (uint64_t)v178);
  v178[0] = &off_24CA1A9A0;
  v70 = v179;
  if (v179)
  {
    v71 = (unint64_t *)&v179->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v180[0] = (uint64_t)&off_24CA1A9A0;
  v73 = v181;
  if (v181)
  {
    v74 = (unint64_t *)&v181->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  sub_21015D950(a1 + 200);
  sub_21015DBD0(a1 + 200);
  kdebug_trace();
  if (!v69
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 370, (uint64_t)"transfer_succeeded", 18, (uint64_t)"PixelTransferSession failed", 27, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v76 = *(_QWORD *)(a1 + 208);
  v77 = *(std::__shared_weak_count **)(a1 + 216);
  v175 = &off_24CA1A9A0;
  v176 = v76;
  v177 = v77;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    *(_QWORD *)&v170 = v76;
    *((_QWORD *)&v170 + 1) = v77;
    do
      v80 = __ldxr(v78);
    while (__stxr(v80 + 1, v78));
  }
  else
  {
    v170 = v76;
  }
  v169 = &off_24CA1A9A0;
  sub_210107128((uint64_t)&v169, 1, (uint64_t)v166);
  v169 = &off_24CA1A9A0;
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v175 = &off_24CA1A9A0;
  v84 = v177;
  if (v177)
  {
    v85 = (unint64_t *)&v177->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v182 = &off_24CA1A9A0;
  v87 = v184;
  if (!v184)
    goto LABEL_203;
  v88 = (unint64_t *)&v184->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    if (*(_BYTE *)(a1 + 236))
      goto LABEL_123;
  }
  else
  {
LABEL_203:
    if (*(_BYTE *)(a1 + 236))
      goto LABEL_123;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 330, (uint64_t)"op_scale_factor_.has_value()", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (!*(_BYTE *)(a1 + 236))
    sub_20E866B34();
LABEL_123:
  v90 = *(float *)(a1 + 232);
  v91 = operator new();
  sub_20E972DB4(v91, a3);
  memcpy((void *)(v91 + 1000), (const void *)(a3 + 1000), 0x1B8uLL);
  v180[0] = v91;
  v93 = *(_DWORD *)(v91 + 992);
  if (v93 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_193;
    }
    v93 = *(_DWORD *)(v91 + 992);
  }
  if (!v93)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_193:
    abort();
  }
  v95 = *(float64x2_t *)v91;
  v94 = *(float64x2_t *)(v91 + 16);
  v96 = *(float64x2_t *)(v91 + 32);
  v97 = *(float64x2_t *)(v91 + 48);
  v92.f64[0] = *(float64_t *)(v91 + 64);
  v165 = v92;
  if (v93 == -1)
  {
    v161 = *(float64x2_t *)v91;
    v162 = *(float64x2_t *)(v91 + 32);
    v163 = *(float64x2_t *)(v91 + 16);
    v164 = *(float64x2_t *)(v91 + 48);
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_200;
    }
    v93 = *(_DWORD *)(v91 + 992);
    v94 = v163;
    v97 = v164;
    v95 = v161;
    v96 = v162;
  }
  v98 = (int8x16_t)vmulq_n_f64(v95, v90);
  v99 = (int8x16_t)vmulq_n_f64(v94, v90);
  v100 = vmulq_n_f64(v96, v90);
  v101 = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
  v102 = vextq_s8(v99, v99, 8uLL).u64[0];
  v103 = vextq_s8(v98, v98, 8uLL).u64[0];
  v104 = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
  if (v93 <= 7)
  {
    *(float64_t *)&v105 = v97.f64[0];
    if (v93)
    {
      v107 = *(float64x2_t *)(v91 + 32);
      v106 = *(float64x2_t *)(v91 + 48);
      v108 = *(float64x2_t *)v91;
      v109 = *(float64x2_t *)(v91 + 16);
      *(_QWORD *)&v110.f64[0] = v98.i64[0];
      *(_QWORD *)&v110.f64[1] = v103;
      goto LABEL_134;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_200:
    abort();
  }
  v107 = *(float64x2_t *)(v91 + 32);
  v106 = *(float64x2_t *)(v91 + 48);
  v108 = *(float64x2_t *)v91;
  v109 = *(float64x2_t *)(v91 + 16);
  *(_QWORD *)&v110.f64[0] = v98.i64[0];
  *(_QWORD *)&v110.f64[1] = v103;
  *(float64_t *)&v105 = v97.f64[0];
LABEL_134:
  *(_QWORD *)&v97.f64[1] = v104;
  v111.f64[0] = v100.f64[0];
  *(_QWORD *)&v111.f64[1] = v101;
  *(_QWORD *)&v112.f64[0] = v99.i64[0];
  *(_QWORD *)&v112.f64[1] = v102;
  v113 = (int8x16_t)vabdq_f64(v110, v108);
  v114 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v115 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v114, (float64x2_t)vextq_s8(v113, v113, 8uLL)), (int32x4_t)vcgeq_f64(v114, vabdq_f64(v112, v109))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v114, vabdq_f64(v111, v107)), (int32x4_t)vcgeq_f64(v114, vabdq_f64(v97, v106)))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v115)) & 1) != 0
    || (v115.f64[0] = *(float64_t *)(v91 + 64), vabdq_f64(v165, v115).f64[0] > 1.0e-10))
  {
    *(_QWORD *)&v116 = v98.i64[0];
    *((_QWORD *)&v116 + 1) = v103;
    *(_QWORD *)&v117 = v99.i64[0];
    *((_QWORD *)&v117 + 1) = v102;
    *(_OWORD *)v91 = v116;
    *(_OWORD *)(v91 + 16) = v117;
    *(float64_t *)&v118 = v100.f64[0];
    *((_QWORD *)&v118 + 1) = v101;
    *((_QWORD *)&v105 + 1) = v104;
    *(_OWORD *)(v91 + 32) = v118;
    *(_OWORD *)(v91 + 48) = v105;
    v119 = vmuld_n_f64(*(double *)v98.i64, v100.f64[0]);
    *(float64_t *)(v91 + 64) = v165.f64[0];
    *(double *)(v91 + 72) = 1.0 / *(double *)v98.i64;
    *(double *)(v91 + 80) = -*(double *)&v98.i64[1] / v119;
    *(double *)(v91 + 88) = -(vmuld_n_f64(*(double *)v99.i64, v100.f64[0])
                            - vmuld_lane_f64(*(double *)&v98.i64[1], v100, 1))
                          / v119;
    *(_QWORD *)(v91 + 96) = 0;
    *(double *)(v91 + 104) = 1.0 / v100.f64[0];
    *(double *)(v91 + 112) = -v100.f64[1] / v100.f64[0];
    *(_QWORD *)(v91 + 120) = 0;
    *(_QWORD *)(v91 + 128) = 0;
    *(_OWORD *)(v91 + 136) = xmmword_2102E3C70;
    *(_QWORD *)(v91 + 152) = 0x7FF8000000000000;
    *(_BYTE *)(v91 + 160) = 0;
  }
  kdebug_trace();
  sub_20EDB9988((uint64_t)&v169, v166);
  v120 = sub_20F16277C(a1 + 8, &v169, v180[0], 0);
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v121 = *v120;
  v122 = v120[1];
  v123 = (char *)v122 - (char *)*v120;
  if (v122 != *v120)
  {
    if (v123 < 0)
      sub_20E867F44();
    v124 = (uint64_t (**)())operator new((char *)v122 - (char *)*v120);
    v125 = 0;
    v182 = v124;
    v184 = (std::__shared_weak_count *)&v124[4 * (v123 >> 5)];
    do
    {
      v126 = &v121[v125 / 0x10];
      v127 = &v124[v125 / 8];
      *(float64x2_t *)v127 = v121[v125 / 0x10];
      *((float64x2_t *)v127 + 1) = v121[v125 / 0x10 + 1];
      v125 += 32;
    }
    while (&v126[2] != v122);
    v183 = (uint64_t)&v124[v125 / 8];
  }
  v169 = &off_24C9AFD78;
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  v128 = v172;
  if (v172)
  {
    v129 = (unint64_t *)&v172->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v171;
  if (v171)
  {
    v132 = (unint64_t *)&v171->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (double *)v182;
  v135 = (double *)v183;
  v136 = v183 - (_QWORD)v182;
  v137 = (v183 - (uint64_t)v182) >> 5;
  kdebug_trace();
  v169 = 0;
  v170 = 0uLL;
  if (v135 != v134)
  {
    if (v136 < 0)
      sub_20E867F44();
    v138 = (double *)operator new((char *)v135 - (char *)v134);
    v169 = (uint64_t (**)())v138;
    *(_QWORD *)&v170 = v138;
    *((_QWORD *)&v170 + 1) = &v138[4 * v137];
    v139 = (float)(1.0 / v90);
    v140 = v134;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v141 = *v140 * v139;
          v142 = v140[1] * v139;
          v143 = v140[2] * v139;
          v144 = v140[3] * v139;
          if ((unint64_t)v138 >= *((_QWORD *)&v170 + 1))
            break;
          *v138 = v141;
          v138[1] = v142;
          v138[2] = v143;
          v138[3] = v144;
          v138 += 4;
          *(_QWORD *)&v170 = v138;
          v140 += 4;
          if (v140 == v135)
            goto LABEL_173;
        }
        v145 = (double *)v169;
        v146 = ((char *)v138 - (char *)v169) >> 5;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 59)
          sub_20E867F44();
        v148 = *((_QWORD *)&v170 + 1) - (_QWORD)v169;
        if ((uint64_t)(*((_QWORD *)&v170 + 1) - (_QWORD)v169) >> 4 > v147)
          v147 = v148 >> 4;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFE0)
          v149 = 0x7FFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        if (v149 >> 59)
          sub_20E877A38();
        v150 = (char *)operator new(32 * v149);
        v151 = (double *)&v150[32 * v146];
        *v151 = v141;
        v151[1] = v142;
        v151[2] = v143;
        v151[3] = v144;
        v152 = v151 + 4;
        if (v138 != v145)
          break;
        v169 = (uint64_t (**)())v151;
        *((_QWORD *)&v170 + 1) = &v150[32 * v149];
        v145 = v138;
LABEL_172:
        operator delete(v145);
        v138 = v152;
        *(_QWORD *)&v170 = v152;
        v140 += 4;
        if (v140 == v135)
        {
LABEL_173:
          v153 = (uint64_t (**)())*((_QWORD *)&v170 + 1);
          *a4 = v169;
          a4[1] = (uint64_t (**)())v138;
          a4[2] = v153;
          if (v134)
            goto LABEL_174;
          goto LABEL_175;
        }
      }
      do
      {
        *((_OWORD *)v151 - 2) = *((_OWORD *)v138 - 2);
        *((_OWORD *)v151 - 1) = *((_OWORD *)v138 - 1);
        v151 -= 4;
        v138 -= 4;
      }
      while (v138 != v145);
      v169 = (uint64_t (**)())v151;
      *((_QWORD *)&v170 + 1) = &v150[32 * v149];
      if (v145)
        goto LABEL_172;
      v138 = v152;
      *(_QWORD *)&v170 = v152;
      v140 += 4;
      if (v140 == v135)
        goto LABEL_173;
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v134)
LABEL_174:
    operator delete(v134);
LABEL_175:
  v154 = v180[0];
  v180[0] = 0;
  if (v154)
    sub_20E8E931C((uint64_t)v180, v154);
  v155 = v168;
  if (v168)
  {
    v156 = (unint64_t *)&v168->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v167;
  if (v167)
  {
    v159 = (unint64_t *)&v167->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_20F15A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E8E5AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F15A89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20E8E5AE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F15A8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 161) < 0)
  {
    operator delete(*(void **)(v35 - 184));
    sub_21015D41C((_QWORD *)(v35 - 160));
    _Unwind_Resume(a1);
  }
  sub_21015D41C((_QWORD *)(v35 - 160));
  _Unwind_Resume(a1);
}

void sub_20F15AA54()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20F15AA70);
  JUMPOUT(0x20F15AA74);
}

uint64_t sub_20F15AAC0(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  VTPixelTransferSessionRef *v11;
  int8x16_t *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  char *v18;
  int8x16_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int8x16_t *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t result;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 312) = 0;
  v4 = *a2;
  *(_DWORD *)(a1 + 323) = *(int *)((char *)a2 + 3);
  *(_DWORD *)(a1 + 320) = v4;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  sub_20E86BDB0((uint64_t *)(a1 + 328), *((unsigned int **)a2 + 1), (unsigned int *)a2 + 4);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 2);
  v5 = *((_OWORD *)a2 + 3);
  v6 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 400) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 416) = v7;
  *(_OWORD *)(a1 + 368) = v5;
  *(_OWORD *)(a1 + 384) = v6;
  v8 = a2[12];
  v9 = *((_QWORD *)a2 + 4);
  v10 = operator new();
  *(_QWORD *)(v10 + 8) = &off_24CA06F30;
  *(_DWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 20) = 0x3E99999AC7C35000;
  *(_DWORD *)(v10 + 28) = 1050253722;
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 36) = 2139095040;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_QWORD *)v10 = &off_24C9F9740;
  v11 = (VTPixelTransferSessionRef *)operator new();
  sub_210106388(v11);
  *(_QWORD *)(v10 + 192) = v11;
  *(_QWORD *)(v10 + 200) = &off_24CA1A9A0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_QWORD *)(v10 + 224) = v9;
  *(_BYTE *)(v10 + 232) = 0;
  *(_BYTE *)(v10 + 236) = 0;
  *(_QWORD *)(a1 + 432) = v10;
  v12 = (int8x16_t *)operator new(0x6C0uLL);
  v15 = 0;
  v16 = v12 + 108;
  v17 = v12;
  do
  {
    while (1)
    {
      while (1)
      {
        v18 = (char *)&unk_21039CCE8 + 72 * v15;
        v19.i64[0] = *((_QWORD *)v18 + 2);
        *(_QWORD *)&v13 = *((_QWORD *)v18 + 5);
        v20 = *(int64x2_t *)(v18 + 24);
        *(_QWORD *)&v14 = *((_QWORD *)v18 + 8);
        v21 = *((int8x16_t *)v18 + 3);
        v22 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v18, v20);
        v23 = vextq_s8(v22, v22, 8uLL).u64[0];
        v24 = (int8x16_t)vzip2q_s64(*(int64x2_t *)v18, v20);
        v25 = vextq_s8(v24, v24, 8uLL).u64[0];
        v26 = vextq_s8(v21, v21, 8uLL).u64[0];
        if (v12 >= v16)
          break;
        v12[1].i64[0] = v21.i64[0];
        v22.i64[1] = v23;
        *v12 = v22;
        v12[2].i64[1] = v26;
        v24.i64[1] = v25;
        *(int8x16_t *)((char *)v12 + 24) = v24;
        v12[4].i64[0] = v14;
        v19.i64[1] = v13;
        v12[3] = v19;
        v12 = (int8x16_t *)((char *)v12 + 72);
        if (++v15 == 24)
          goto LABEL_21;
      }
      v27 = 0x8E38E38E38E38E39 * (((char *)v12 - (char *)v17) >> 3) + 1;
      if (v27 > 0x38E38E38E38E38ELL)
        sub_20E867F44();
      if (0x1C71C71C71C71C72 * (((char *)v16 - (char *)v17) >> 3) > v27)
        v27 = 0x1C71C71C71C71C72 * (((char *)v16 - (char *)v17) >> 3);
      if (0x8E38E38E38E38E39 * (((char *)v16 - (char *)v17) >> 3) >= 0x1C71C71C71C71C7)
        v28 = 0x38E38E38E38E38ELL;
      else
        v28 = v27;
      if (v28)
      {
        v37 = v26;
        v38 = v21.i64[0];
        v39 = v23;
        v40 = v22.i64[0];
        v41 = v25;
        v42 = v24.i64[0];
        v43 = v14;
        v44 = v13;
        v45 = v19.i64[0];
        if (v28 > 0x38E38E38E38E38ELL)
          sub_20E877A38();
        v29 = (char *)operator new(72 * v28);
        v19.i64[0] = v45;
        v14 = v43;
        v13 = v44;
        v25 = v41;
        v24.i64[0] = v42;
        v23 = v39;
        v22.i64[0] = v40;
        v26 = v37;
        v21.i64[0] = v38;
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[8 * (((char *)v12 - (char *)v17) >> 3)];
      v16 = (int8x16_t *)&v29[72 * v28];
      v22.i64[1] = v23;
      *((_QWORD *)v30 + 2) = v21.i64[0];
      *(int8x16_t *)v30 = v22;
      *((_QWORD *)v30 + 5) = v26;
      v24.i64[1] = v25;
      *(int8x16_t *)(v30 + 24) = v24;
      *((_QWORD *)v30 + 8) = v14;
      v19.i64[1] = v13;
      *((int8x16_t *)v30 + 3) = v19;
      v31 = (int8x16_t *)(v30 + 72);
      if (v12 == v17)
      {
        v17 = v12;
        break;
      }
      do
      {
        *(int8x16_t *)(v30 - 72) = *(int8x16_t *)((char *)v12 - 72);
        v32 = *(__int128 *)((char *)&v12[-4] + 8);
        v33 = *(__int128 *)((char *)&v12[-3] + 8);
        v34 = *(__int128 *)((char *)&v12[-2] + 8);
        *((_QWORD *)v30 - 1) = v12[-1].i64[1];
        *(_OWORD *)(v30 - 24) = v34;
        *(_OWORD *)(v30 - 40) = v33;
        *(_OWORD *)(v30 - 56) = v32;
        v30 -= 72;
        v12 = (int8x16_t *)((char *)v12 - 72);
      }
      while (v12 != v17);
      if (v17)
        break;
      v17 = (int8x16_t *)v30;
      v12 = v31;
      if (++v15 == 24)
        goto LABEL_21;
    }
    operator delete(v17);
    v17 = (int8x16_t *)v30;
    v12 = v31;
    ++v15;
  }
  while (v15 != 24);
LABEL_21:
  result = a1;
  *(_QWORD *)(a1 + 440) = v17;
  *(_QWORD *)(a1 + 448) = v12;
  *(_QWORD *)(a1 + 456) = v16;
  return result;
}

void sub_20F15AE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  *(_QWORD *)(a10 + 432) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_20E86872C(a9, *(_QWORD **)(a10 + 336));
  sub_20F15AEFC((char **)a10);
  _Unwind_Resume(a1);
}

char **sub_20F15AEFC(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  if (*((_BYTE *)a1 + 312))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (void *)*((_QWORD *)v3 - 22);
          if (v5)
          {
            *((_QWORD *)v3 - 21) = v5;
            operator delete(v5);
          }
          v3 -= 272;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_20F15AF74(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F9790;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F15AFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *p_p;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  _BYTE v19[24];
  int v20;
  void *__dst[2];
  unint64_t v22;
  void *__p;
  void **v24;
  _BYTE *v25;
  void **v26;
  void **v27;
  void **v28;

  v20 = 0;
  v3 = operator new();
  *(_QWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_20E863438(v3);
  v28 = (void **)v3;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
  if (SHIBYTE(v25) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v25) >= 0)
    v5 = HIBYTE(v25);
  else
    v5 = (uint64_t)v24;
  sub_20E86A980((_QWORD *)(v3 + 16), (uint64_t)p_p, v5);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    v6 = *(_DWORD *)(v3 + 120);
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v9 = *(_QWORD *)(v3 + 112);
    v10 = *(_QWORD *)(v3 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v3 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v3 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_34;
    goto LABEL_15;
  }
  operator delete(__p);
  v6 = *(_DWORD *)(v3 + 120);
  if ((v6 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v6 & 8) == 0)
  {
    v7 = 0;
    HIBYTE(v22) = 0;
    v8 = __dst;
    goto LABEL_22;
  }
  v11 = *(const void **)(v3 + 40);
  v7 = *(_QWORD *)(v3 + 56) - (_QWORD)v11;
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_34:
    sub_20E860B7C();
LABEL_15:
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v22 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_21;
  }
  HIBYTE(v22) = v7;
  v8 = __dst;
  if (v7)
LABEL_21:
    memmove(v8, v11, v7);
LABEL_22:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v28;
  if (v28)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v28 = (void *)*MEMORY[0x24BEDB7F0];
    v17 = *(void **)(v15 + 72);
    *(void **)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(void **)(v15 + 64);
    v14[3] = (void *)(MEMORY[0x24BEDB848] + 16);
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete(v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 16);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  __p = v19;
  v24 = __dst;
  v25 = v19;
  v26 = __dst;
  v27 = __dst;
  if (v20 == -1)
    sub_20E877AB8();
  v28 = &__p;
  ((void (*)(void ***, _BYTE *))off_24C9F97C0[v20])(&v28, v19);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v20 == -1)
    sub_20E877AB8();
  __p = __dst;
  result = ((uint64_t (*)(void **, _BYTE *))off_24C9F97F0[v20])(&__p, v19);
  if (v20 != -1)
    return ((uint64_t (*)(void **, _BYTE *))off_24C9F97D8[v20])(&__p, v19);
  return result;
}

void sub_20F15B2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  sub_20FD0DE48((uint64_t *)(v25 - 56));
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F15B368(uint64_t a1)
{
  int64x2_t v1;
  int64x2_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char **v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  void *v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BYTE *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  std::string::size_type v101;
  float v102;
  std::string::size_type v103;
  unint64_t v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  double v109;
  uint64_t v113;
  std::string::size_type size;
  double *v115;
  std::string::size_type v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char **v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  float64x2_t v133;
  float64x2_t v134;
  char *v135;
  int8x16_t v136;
  double v137;
  int8x16_t v138;
  int8x16_t v139;
  int64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  int32x4_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  std::string::size_type v158;
  char *v159;
  char *v160;
  std::string *v161;
  float64x2_t v162;
  std::string *v163;
  __int128 v164;
  std::string *v165;
  std::string::size_type v166;
  std::string *v167;
  void *v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int8x16_t v174;
  float64x2_t v176;
  int8x16_t v178;
  unsigned int v179;
  uint64_t j;
  std::__shared_weak_count *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  float32x2_t **v185;
  unint64_t v186;
  float *v187;
  unint64_t v188;
  unint64_t v189;
  float v190;
  int k;
  float32x2_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int8x16_t v199;
  float v200;
  float v201;
  float32x2_t v202;
  float v203;
  unsigned int v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unsigned int v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unint64_t v223;
  unsigned int v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int v240;
  unsigned int v241;
  unint64_t v242;
  unsigned int v243;
  std::__shared_weak_count *v244;
  int32x4_t v245;
  int32x4_t v246;
  float32x2_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unint64_t v264;
  unsigned int v265;
  int32x4_t v266;
  int32x4_t v267;
  int8x16_t v268;
  float32x2_t v269;
  float32x2_t v270;
  float32x2_t v271;
  float32x2_t v272;
  float32x2_t v273;
  float32x2_t v274;
  int v275;
  float v276;
  int8x16_t v277;
  __int128 *v279;
  __int128 *v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x8_t v288;
  int64x2_t v289;
  int8x16_t v290;
  int8x16_t v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v297;
  double v299;
  float64x2_t v301;
  double v303;
  float64x2_t v304;
  double v306;
  float64x2_t v307;
  double v309;
  double v312;
  double v313;
  double v315;
  double v317;
  int8x16_t v319;
  int8x16_t v321;
  _QWORD *v323;
  float64x2_t v324;
  float64x2_t v325;
  void *v326;
  std::string *v327;
  void *v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  size_t v333;
  uint64_t v334;
  _DWORD *v335;
  int8x16_t *v336;
  int8x16_t *v337;
  _QWORD *v338;
  void *v339;
  float32x2_t *v340;
  float32x2_t *v341;
  float32x2_t v342;
  double v343;
  double v344;
  double v345;
  std::string::size_type v346;
  std::string::size_type v347;
  uint64_t v348;
  unint64_t v349;
  int64_t v350;
  unint64_t v351;
  char *v352;
  double *v353;
  std::string::size_type v354;
  int v355;
  __int128 v356;
  double v357;
  double v358;
  double v359;
  std::string::size_type v360;
  std::string::size_type v361;
  uint64_t v362;
  unint64_t v363;
  int64_t v364;
  unint64_t v365;
  char *v366;
  double *v367;
  std::string::size_type v368;
  int v369;
  __int128 v370;
  double v371;
  double v372;
  double v373;
  std::string::size_type v374;
  std::string::size_type v375;
  uint64_t v376;
  unint64_t v377;
  int64_t v378;
  unint64_t v379;
  char *v380;
  double *v381;
  std::string::size_type v382;
  int v383;
  __int128 v384;
  int8x16_t *v385;
  unint64_t v386;
  char **v387;
  double v388;
  uint64_t v389;
  unsigned __int8 *v390;
  unint64_t v391;
  int64x2_t v392;
  int64x2_t v393;
  int8x16_t *v394;
  int64x2_t v395;
  unint64_t v396;
  int64x2_t v397;
  int64x2_t v398;
  int64x2_t v399;
  int64x2_t v400;
  int64x2_t v401;
  int64x2_t v402;
  int64x2_t v403;
  int64x2_t v404;
  int64x2_t v405;
  int64x2_t v406;
  int64x2_t v407;
  int64x2_t v408;
  int64x2_t v409;
  uint8x16_t v410;
  uint16x8_t v411;
  uint32x4_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int64x2_t v415;
  uint32x4_t v416;
  int64x2_t v417;
  uint16x8_t v418;
  uint32x4_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t v422;
  uint32x4_t v423;
  int64x2_t v424;
  int64x2_t v425;
  uint8x16_t v426;
  uint16x8_t v427;
  uint32x4_t v428;
  uint32x4_t v429;
  int64x2_t v430;
  uint16x8_t v431;
  uint32x4_t v432;
  int64x2_t v433;
  int64x2_t v434;
  int64x2_t v435;
  uint32x4_t v436;
  int64x2_t v437;
  int64x2_t v438;
  int64x2_t v439;
  int8x8_t *v440;
  unint64_t v441;
  int64x2_t v442;
  int64x2_t v443;
  int8x8_t v444;
  int8x16_t v445;
  uint16x8_t v446;
  uint32x4_t v447;
  int8x16_t v448;
  int64x2_t v449;
  int64x2_t v450;
  uint32x4_t v451;
  int64x2_t v452;
  float64x2_t v454;
  float64x2_t v455;
  int v456;
  void *v457;
  __int128 v458;
  __int128 v459;
  float64x2_t v460;
  __int128 v461;
  std::string *v462;
  __int128 v463;
  std::string *v464;
  __int128 v465;
  int8x16_t *v466;
  std::string *v467;
  std::string::size_type v468;
  std::string *v469;
  void *v470;
  unint64_t v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  char *v477;
  _BYTE *v478;
  _QWORD *v479;
  _QWORD *v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  int v484;
  std::string *v485;
  float64x2_t v486;
  std::string *v487;
  __int128 v488;
  std::string *v489;
  std::string::size_type v490;
  std::string *v491;
  unint64_t v492;
  unint64_t v493;
  int v494;
  char v495;
  uint64_t v496;
  uint64_t v497;
  std::string::size_type v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t *v502;
  unint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t v507;
  double *v508;
  int v509;
  int v510;
  double *v511;
  __int128 v512;
  float64x2_t v513;
  std::__shared_weak_count *v514;
  _QWORD *v515;
  unint64_t *v516;
  unint64_t v517;
  __int128 v518;
  float64x2_t v519;
  char *v520;
  char *v521;
  char *v522;
  uint64_t v523;
  _BYTE *v524;
  _QWORD *v525;
  uint64_t v526;
  char *v527;
  void *v528;
  char v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  __int128 v533;
  __int128 v534;
  float64x2_t v535;
  float64x2_t *v536;
  float64x2_t *v537;
  uint64_t v538;
  float64x2_t v539;
  double v541;
  double v545;
  double v546;
  double v547;
  double cosval;
  float *v549;
  const double *v550;
  double v551;
  double v553;
  double v554;
  double v555;
  float64x2_t v556;
  double v559;
  float64x2_t v560;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  unint64_t v567;
  unint64_t v568;
  char *v569;
  char *v570;
  float64x2_t v571;
  __int128 v572;
  char *v573;
  float64x2_t *v574;
  char *v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  int v579;
  float64x2_t *v580;
  float64x2_t v581;
  float64x2_t v583;
  float64x2_t v585;
  float64x2_t v588;
  float64x2_t v591;
  char *i;
  __int128 v596;
  float64x2_t v597;
  __int128 v598;
  float64_t v599;
  float64_t v600;
  unint64_t *v601;
  unint64_t v602;
  std::__shared_weak_count *v603;
  double v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  __int128 v609;
  __int128 v610;
  int v611;
  _OWORD *v612;
  _OWORD *v613;
  char *v614;
  __int128 v615;
  __int128 v616;
  unint64_t *v617;
  unint64_t v618;
  unint64_t *v619;
  unint64_t v620;
  __int128 v621;
  __int128 v622;
  unint64_t v623;
  double v624;
  __double2 v625;
  double v626;
  double v627;
  double v628;
  double v629;
  double v630;
  double v631;
  double v632;
  float64_t v633;
  double v634;
  double v635;
  double v636;
  double v637;
  double v638;
  __int128 v639;
  double v640;
  float64x2_t v641;
  float64x2_t v642;
  __int128 v643;
  float v644;
  std::__shared_weak_count *v645;
  char *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  uint64_t v649;
  std::__shared_weak_count *v650;
  int v651;
  int v652;
  unsigned int v653;
  uint64_t v654;
  _QWORD *v655;
  char v656;
  int v657;
  std::string *v658;
  void *v659;
  unint64_t v660;
  char v661;
  std::string::size_type v662;
  std::string *v663;
  __int128 v664;
  std::string *v665;
  __int128 v666;
  std::string *v667;
  std::string::size_type v668;
  std::string *v669;
  int64_t v670;
  float64x2_t v671;
  std::string::size_type v672;
  char *m;
  __int128 v674;
  __int128 v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  int32x4_t v682;
  int32x4_t v683;
  const double *v684;
  const double *v685;
  const double *v686;
  std::__shared_weak_count_vtbl *v687;
  uint64_t shared_owners;
  int v689;
  double v690;
  std::string::size_type v691;
  char *v692;
  std::__shared_weak_count *v693;
  std::__shared_weak_count_vtbl *v694;
  void *v695;
  double v697;
  float64x2_t v698;
  double v701;
  double v704;
  double v706;
  double v708;
  int8x16_t v709;
  double v710;
  unint64_t v711;
  double v712;
  __int128 v713;
  uint64_t v714;
  unint64_t v715;
  unint64_t v716;
  char *v717;
  char *v718;
  __int128 v719;
  int v720;
  __int128 v721;
  unsigned int v722;
  double v723;
  double v724;
  __int128 v725;
  uint64_t v726;
  unint64_t v727;
  unint64_t v728;
  char *v729;
  char *v730;
  __int128 v731;
  int v732;
  __int128 v733;
  uint64_t v734;
  unint64_t v735;
  unint64_t v736;
  char *v737;
  char *v738;
  __int128 v739;
  int v740;
  __int128 v741;
  float v742;
  BOOL v743;
  std::string *v744;
  __int128 v745;
  std::string *v746;
  __int128 v747;
  void **v748;
  std::string::size_type v749;
  std::string *v750;
  __int128 v751;
  std::string *v752;
  __int128 v753;
  void **v754;
  std::string::size_type v755;
  std::string *v756;
  __int128 v757;
  std::string *v758;
  __int128 v759;
  void **v760;
  std::string::size_type v761;
  std::string *v762;
  __int128 v763;
  std::string *v764;
  __int128 v765;
  int v766;
  void **v767;
  std::string::size_type v768;
  std::string *v769;
  void *v770;
  unint64_t v771;
  int v772;
  int v773;
  int v774;
  int v775;
  uint64_t v776;
  uint64_t v777;
  _QWORD *v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  float64x2_t v782;
  __int128 v783;
  float64x2_t *v784;
  char v785;
  char *v786;
  char *v787;
  void *v788;
  void *v789;
  float v790;
  unsigned __int8 v794;
  int v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  const char *v799;
  size_t v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  char *v807;
  _BYTE *v808;
  _QWORD *v809;
  uint64_t v810;
  unint64_t *v811;
  unint64_t v812;
  float64x2_t v813;
  __int128 v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count **v818;
  std::__shared_weak_count **v819;
  void *v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  std::__shared_weak_count *v825;
  void *v826;
  std::__shared_weak_count *v827;
  std::__shared_weak_count_vtbl *v828;
  std::__shared_weak_count_vtbl *v829;
  char *v830;
  char *v831;
  void *v832;
  void *v833;
  char *v834;
  char *v835;
  char *v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  std::__shared_weak_count *v840;
  unint64_t *v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD *v845;
  char *v846;
  _BYTE *v847;
  _QWORD *v848;
  unsigned __int8 v849;
  const char *v850;
  size_t v851;
  _BYTE *v852;
  uint64_t v853;
  uint64_t v854;
  _BYTE *v855;
  uint64_t v856;
  uint64_t v857;
  NSObject *v858;
  size_t v859;
  std::__shared_weak_count_vtbl *v860;
  std::__shared_weak_count *v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  unint64_t v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  const char *v869;
  std::string::size_type v870;
  std::__shared_weak_count *v871;
  unint64_t *v872;
  unint64_t v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  std::string::size_type v877;
  std::__shared_weak_count *v878;
  unint64_t *v879;
  unint64_t v880;
  std::__shared_weak_count *v881;
  unint64_t *v882;
  unint64_t v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  void *v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  char *v894;
  std::__shared_weak_count_vtbl *v895;
  std::__shared_weak_count *v896;
  std::__shared_weak_count *v897;
  unint64_t *v898;
  unint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  unint64_t v903;
  uint64_t v904;
  float *v905;
  void **p_p;
  char *v907;
  _QWORD *v908;
  uint64_t v909;
  unsigned int *v910;
  std::string::size_type v911;
  unint64_t v912;
  int v913;
  double v914;
  double v915;
  double v916;
  double v917;
  int8x16_t v918;
  double v919;
  double v920;
  double v921;
  int8x16_t v922;
  double v923;
  std::string::size_type v924;
  float32x2_t **v925;
  char *v926;
  double v927;
  double v928;
  _QWORD *v929;
  float64x2_t v930;
  float64x2_t *v931;
  float64x2_t *v932;
  float64x2_t v933;
  char *v934;
  uint64_t v935;
  double v936;
  int v937;
  float64x2_t v938;
  double v939;
  _QWORD *v940;
  double v941;
  uint64_t v942;
  float64x2_t v943;
  int v944;
  float64x2_t v945;
  uint64_t v946;
  float64x2_t v947;
  int v948;
  int v949;
  double v950;
  double v951;
  float64x2_t v952;
  double v953;
  float64x2_t v954;
  uint64_t v955;
  float64x2_t v956;
  double v957;
  float64x2_t v958;
  uint64_t v959;
  float64x2_t v960;
  double v961;
  float64x2_t v962;
  uint64_t v963;
  double v964;
  int8x16_t *v965;
  double v966;
  double v967;
  uint64_t v968;
  double v969;
  int8x16_t *v970;
  double v971;
  float64x2_t v972;
  double v973;
  float32x2_t v974;
  double v975;
  float64x2_t v976;
  float32x2_t v977;
  double v978;
  char *v979;
  unsigned int v980;
  float64x2_t v981;
  float32x2_t v982;
  double v983;
  double v984;
  float64x2_t v985;
  float *v986;
  std::string::size_type v987;
  int8x16_t v988;
  int v989;
  float64x2_t v990;
  float32x2_t v991;
  float64_t v992;
  int8x16_t v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t v996;
  char *v997;
  float32x2_t v998;
  int64x2_t v999;
  double v1000;
  float64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unsigned int v1005;
  const char *v1006;
  _BYTE __dst[48];
  float64x2_t v1008;
  __int128 v1009;
  float64x2_t v1010;
  double v1011;
  unsigned __int8 v1012;
  void *v1013;
  std::__shared_weak_count **v1014;
  _QWORD *v1015;
  void *v1016;
  std::__shared_weak_count *v1017;
  char *v1018;
  void *__p;
  char *v1020;
  char *v1021;
  int v1022;
  __int128 v1023;
  uint64_t v1024;
  _BYTE v1025[32];
  _BYTE v1026[32];
  __int128 v1027;
  __int128 v1028;
  uint64_t v1029;
  uint64_t v1030;
  __int128 v1031;
  uint64_t v1032;
  uint64_t v1033;
  char v1034;
  char v1035;
  char v1036;
  char v1037;
  char v1038;
  void *v1039;
  char *v1040;
  char *v1041;
  std::string v1042;
  float64x2_t v1043;
  double v1044;
  float64x2_t v1045;
  double v1046;
  float64x2_t v1047;
  _BYTE v1048[32];
  float64x2_t v1049;
  double v1050;
  _DWORD v1051[2];
  std::string v1052;
  int v1053;
  void *v1054[2];
  unsigned __int8 v1055;
  void *v1056[2];
  unsigned __int8 v1057;
  void *v1058[2];
  unsigned __int8 v1059;
  void *v1060[2];
  unsigned __int8 v1061;
  std::string v1062;
  std::string v1063;
  std::string v1064;
  std::string v1065;
  std::string v1066;
  std::string v1067;
  std::string v1068;
  std::string v1069;
  _DWORD v1070[2];
  float v1071;
  float v1072;
  float v1073;
  char v1074;
  char *v1075;
  _BYTE v1076[32];
  float64x2_t v1077;
  _BYTE v1078[32];
  float64x2_t v1079;
  double v1080;
  std::__shared_weak_count *v1081;
  _BYTE v1082[288];
  uint64_t v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  uint64_t v1088;
  int v1089;
  unint64_t v1090;
  uint64_t (**v1091)();
  std::__shared_weak_count *v1092;
  std::__shared_weak_count *v1093;
  uint64_t v1094;
  float64x2x3_t v1095;
  float64x2x3_t v1096;
  float64x2x3_t v1097;
  float64x2x3_t v1098;
  float64x2x3_t v1099;

  MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v1094 = *MEMORY[0x24BDAC8D0];
  v1020 = 0;
  __p = 0;
  v1021 = 0;
  sub_20F04D12C((uint64_t)&__p, 0x4FBCDA3AC10C9715 * ((uint64_t)(v3[1] - *v3) >> 3));
  v9 = *v4;
  v10 = v4[1];
  v908 = v4;
  v909 = v8;
  v986 = (float *)v6;
  if (*v4 != v10)
  {
    v11 = v6[42];
    if (v11)
    {
      v12 = (char *)(v6 + 42);
LABEL_5:
      v13 = *(_DWORD *)(v9 + 392);
      v14 = *(_DWORD *)(v9 + 396);
      v15 = v12;
      do
      {
        while (1)
        {
          v16 = *((_DWORD *)v11 + 7);
          if (v16 >= v13 && (v16 != v13 || *((_DWORD *)v11 + 8) >= v14))
            break;
          v11 = (char *)*((_QWORD *)v11 + 1);
          if (!v11)
            goto LABEL_11;
        }
        v15 = v11;
        v11 = *(char **)v11;
      }
      while (v11);
LABEL_11:
      if (v15 != v12)
      {
        v17 = *((_DWORD *)v15 + 7);
        if (v17 <= v13 && (v17 != v13 || *((_DWORD *)v15 + 8) <= v14))
        {
          v18 = v1020;
          if (v1020 < v1021)
          {
            *(_OWORD *)v1020 = *(_OWORD *)v9;
            v19 = *(_OWORD *)(v9 + 16);
            v20 = *(_OWORD *)(v9 + 32);
            v21 = *(_OWORD *)(v9 + 48);
            *(_OWORD *)(v18 + 57) = *(_OWORD *)(v9 + 57);
            *((_OWORD *)v18 + 2) = v20;
            *((_OWORD *)v18 + 3) = v21;
            *((_OWORD *)v18 + 1) = v19;
            *((_QWORD *)v18 + 10) = *(_QWORD *)(v9 + 80);
            v22 = *(_QWORD *)(v9 + 88);
            *((_QWORD *)v18 + 11) = v22;
            if (v22)
            {
              v23 = (unint64_t *)(v22 + 8);
              do
                v24 = __ldxr(v23);
              while (__stxr(v24 + 1, v23));
            }
            *((_QWORD *)v18 + 12) = *(_QWORD *)(v9 + 96);
            v25 = *(_QWORD *)(v9 + 104);
            *((_QWORD *)v18 + 13) = v25;
            if (v25)
            {
              v26 = (unint64_t *)(v25 + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            memcpy(v18 + 112, (const void *)(v9 + 112), 0x128uLL);
            v28 = *(_OWORD *)(v9 + 424);
            v29 = *(_OWORD *)(v9 + 440);
            v30 = *(_OWORD *)(v9 + 456);
            *((_QWORD *)v18 + 59) = *(_QWORD *)(v9 + 472);
            *(_OWORD *)(v18 + 440) = v29;
            *(_OWORD *)(v18 + 456) = v30;
            *(_OWORD *)(v18 + 424) = v28;
            *(_OWORD *)(v18 + 408) = *(_OWORD *)(v9 + 408);
            *((_DWORD *)v18 + 120) = *(_DWORD *)(v9 + 480);
            v31 = v18 + 488;
            goto LABEL_58;
          }
          v32 = (char *)__p;
          v33 = 0x4FBCDA3AC10C9715 * ((v1020 - (_BYTE *)__p) >> 3);
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) > 0x864B8A7DE6D1D6)
            sub_20E867F44();
          if (0x9F79B47582192E2ALL * ((v1021 - (_BYTE *)__p) >> 3) > v34)
            v34 = 0x9F79B47582192E2ALL * ((v1021 - (_BYTE *)__p) >> 3);
          if ((unint64_t)(0x4FBCDA3AC10C9715 * ((v1021 - (_BYTE *)__p) >> 3)) >= 0x4325C53EF368EBLL)
            v35 = 0x864B8A7DE6D1D6;
          else
            v35 = v34;
          if (v35)
          {
            if (v35 > 0x864B8A7DE6D1D6)
              sub_20E877A38();
            v36 = (char *)operator new(488 * v35);
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[488 * v33];
          *(_OWORD *)v37 = *(_OWORD *)v9;
          v38 = *(_OWORD *)(v9 + 16);
          v39 = *(_OWORD *)(v9 + 32);
          v40 = *(_OWORD *)(v9 + 48);
          *(_OWORD *)(v37 + 57) = *(_OWORD *)(v9 + 57);
          *((_OWORD *)v37 + 2) = v39;
          *((_OWORD *)v37 + 3) = v40;
          *((_OWORD *)v37 + 1) = v38;
          *((_QWORD *)v37 + 10) = *(_QWORD *)(v9 + 80);
          v41 = *(_QWORD *)(v9 + 88);
          *((_QWORD *)v37 + 11) = v41;
          if (v41)
          {
            v42 = (unint64_t *)(v41 + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          *((_QWORD *)v37 + 12) = *(_QWORD *)(v9 + 96);
          v44 = *(_QWORD *)(v9 + 104);
          *((_QWORD *)v37 + 13) = v44;
          if (v44)
          {
            v45 = (unint64_t *)(v44 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = &v36[488 * v35];
          memcpy(v37 + 112, (const void *)(v9 + 112), 0x120uLL);
          v48 = &v36[488 * v33];
          *((_QWORD *)v48 + 50) = *(_QWORD *)(v9 + 400);
          v49 = *(_OWORD *)(v9 + 424);
          v50 = *(_OWORD *)(v9 + 440);
          v51 = *(_OWORD *)(v9 + 456);
          *((_QWORD *)v48 + 59) = *(_QWORD *)(v9 + 472);
          *(_OWORD *)(v48 + 440) = v50;
          *(_OWORD *)(v48 + 456) = v51;
          *(_OWORD *)(v48 + 424) = v49;
          *(_OWORD *)(v48 + 408) = *(_OWORD *)(v9 + 408);
          *((_DWORD *)v48 + 120) = *(_DWORD *)(v9 + 480);
          v31 = v37 + 488;
          v52 = v1020;
          if (v1020 == v32)
          {
            __p = v37;
            v1020 = v37 + 488;
            v1021 = v47;
            if (!v32)
              goto LABEL_58;
          }
          else
          {
            v53 = 0;
            do
            {
              v54 = &v37[v53];
              v55 = &v37[v53 - 488];
              *(_OWORD *)v55 = *(_OWORD *)&v52[v53 - 488];
              v56 = *(_OWORD *)&v52[v53 - 472];
              v57 = *(_OWORD *)&v52[v53 - 456];
              v58 = *(_OWORD *)&v52[v53 - 440];
              *(_OWORD *)(v55 + 57) = *(_OWORD *)&v52[v53 - 431];
              *((_OWORD *)v55 + 2) = v57;
              *((_OWORD *)v55 + 3) = v58;
              *((_OWORD *)v55 + 1) = v56;
              v59 = &v52[v53 - 408];
              *(_OWORD *)&v37[v53 - 408] = *(_OWORD *)v59;
              *(_QWORD *)&v52[v53 - 400] = 0;
              *(_QWORD *)v59 = 0;
              v60 = &v52[v53 - 392];
              *(_OWORD *)&v37[v53 - 392] = *(_OWORD *)v60;
              *(_QWORD *)&v52[v53 - 384] = 0;
              *(_QWORD *)v60 = 0;
              memcpy(&v37[v53 - 376], &v52[v53 - 376], 0x120uLL);
              *((_QWORD *)v54 - 11) = *(_QWORD *)&v52[v53 - 88];
              v61 = *(_OWORD *)&v52[v53 - 64];
              v62 = *(_OWORD *)&v52[v53 - 48];
              v63 = *(_OWORD *)&v52[v53 - 32];
              *((_QWORD *)v54 - 2) = *(_QWORD *)&v52[v53 - 16];
              *((_OWORD *)v54 - 3) = v62;
              *((_OWORD *)v54 - 2) = v63;
              *((_OWORD *)v54 - 4) = v61;
              *((_OWORD *)v54 - 5) = *(_OWORD *)&v52[v53 - 80];
              *((_DWORD *)v54 - 2) = *(_DWORD *)&v52[v53 - 8];
              v53 -= 488;
            }
            while (&v52[v53] != v32);
            v32 = (char *)__p;
            v64 = v1020;
            __p = &v37[v53];
            v1020 = v37 + 488;
            v1021 = v47;
            if (v64 != v32)
            {
              while (1)
              {
                v65 = v64 - 488;
                v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 48);
                if (!v66)
                  goto LABEL_49;
                p_shared_owners = (unint64_t *)&v66->__shared_owners_;
                do
                  v68 = __ldaxr(p_shared_owners);
                while (__stlxr(v68 - 1, p_shared_owners));
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                  v69 = (std::__shared_weak_count *)*((_QWORD *)v64 - 50);
                  if (v69)
                  {
LABEL_50:
                    v70 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                }
                else
                {
LABEL_49:
                  v69 = (std::__shared_weak_count *)*((_QWORD *)v64 - 50);
                  if (v69)
                    goto LABEL_50;
                }
                v64 -= 488;
                if (v65 == v32)
                {
                  v4 = v908;
                  if (v32)
                    goto LABEL_57;
LABEL_58:
                  v1020 = v31;
                  v6 = (char **)v986;
                  goto LABEL_63;
                }
              }
            }
            v4 = v908;
            if (!v32)
              goto LABEL_58;
          }
LABEL_57:
          operator delete(v32);
          goto LABEL_58;
        }
      }
LABEL_63:
      while (1)
      {
        v9 += 488;
        if (v9 == v10)
          break;
        v11 = *(char **)v12;
        if (*(_QWORD *)v12)
          goto LABEL_5;
      }
    }
  }
  if (*((_DWORD *)v4 + 32) < *((_DWORD *)v6 + 93) || (v72 = (char *)__p, __p == v1020))
  {
    v1040 = 0;
    v1039 = 0;
    v1041 = 0;
  }
  else
  {
    if (*((_BYTE *)v6 + 324))
    {
      v1039 = __p;
      v1040 = v1020;
      v1041 = v1021;
      goto LABEL_86;
    }
    for (i = (char *)__p + 488; i != v1020; i += 488)
    {
      if (*((_DWORD *)v72 + 120) < *((_DWORD *)i + 120))
        v72 = i;
    }
    if (v72 == v1020
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 466, (uint64_t)"itr != filtered_streams.end()", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *(_OWORD *)v1076 = *(_OWORD *)v72;
    v596 = *((_OWORD *)v72 + 1);
    v597 = *((float64x2_t *)v72 + 2);
    v598 = *((_OWORD *)v72 + 3);
    *(_OWORD *)&v1078[9] = *(_OWORD *)(v72 + 57);
    *(_OWORD *)v1078 = v598;
    v1077 = v597;
    *(_OWORD *)&v1076[16] = v596;
    v599 = *((double *)v72 + 10);
    v600 = *((double *)v72 + 11);
    v1079.f64[0] = v599;
    v1079.f64[1] = v600;
    if (v600 != 0.0)
    {
      v601 = (unint64_t *)(*(_QWORD *)&v600 + 8);
      do
        v602 = __ldxr(v601);
      while (__stxr(v602 + 1, v601));
    }
    v604 = *((double *)v72 + 12);
    v603 = (std::__shared_weak_count *)*((_QWORD *)v72 + 13);
    v1080 = v604;
    v1081 = v603;
    if (v603)
    {
      v605 = (unint64_t *)&v603->__shared_owners_;
      do
        v606 = __ldxr(v605);
      while (__stxr(v606 + 1, v605));
    }
    memcpy(v1082, v72 + 112, sizeof(v1082));
    v607 = *((_QWORD *)v72 + 50);
    v1084 = *(_OWORD *)(v72 + 408);
    v608 = *((_QWORD *)v72 + 59);
    v609 = *(_OWORD *)(v72 + 424);
    v610 = *(_OWORD *)(v72 + 456);
    v1086 = *(_OWORD *)(v72 + 440);
    v1087 = v610;
    v1085 = v609;
    v1083 = v607;
    v1088 = v608;
    v611 = *((_DWORD *)v72 + 120);
    v1089 = v611;
    v1040 = 0;
    v612 = operator new(0x1E8uLL);
    v613 = v612;
    v614 = (char *)v612 + 488;
    v1039 = v612;
    v1041 = (char *)v612 + 488;
    v615 = *(_OWORD *)v1078;
    v612[2] = v1077;
    v612[3] = v615;
    *(_OWORD *)((char *)v612 + 57) = *(_OWORD *)&v1078[9];
    v616 = *(_OWORD *)&v1076[16];
    *v612 = *(_OWORD *)v1076;
    v612[1] = v616;
    *((float64_t *)v612 + 10) = v599;
    *((float64_t *)v612 + 11) = v600;
    if (v600 != 0.0)
    {
      v617 = (unint64_t *)(*(_QWORD *)&v600 + 8);
      do
        v618 = __ldxr(v617);
      while (__stxr(v618 + 1, v617));
    }
    *((double *)v612 + 12) = v604;
    *((_QWORD *)v612 + 13) = v603;
    if (v603)
    {
      v619 = (unint64_t *)&v603->__shared_owners_;
      v6 = (char **)v986;
      do
        v620 = __ldxr(v619);
      while (__stxr(v620 + 1, v619));
      memcpy(v612 + 7, v1082, 0x120uLL);
      *((_QWORD *)v613 + 50) = v607;
      v621 = v1087;
      *(_OWORD *)((char *)v613 + 440) = v1086;
      *(_OWORD *)((char *)v613 + 456) = v621;
      *((_QWORD *)v613 + 59) = v1088;
      v622 = v1085;
      *(_OWORD *)((char *)v613 + 408) = v1084;
      *(_OWORD *)((char *)v613 + 424) = v622;
      *((_DWORD *)v613 + 120) = v611;
      v1040 = v614;
      do
        v623 = __ldaxr(v619);
      while (__stlxr(v623 - 1, v619));
      v4 = v908;
      if (!v623)
      {
        ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
        std::__shared_weak_count::__release_weak(v603);
      }
    }
    else
    {
      memcpy(v612 + 7, v1082, 0x120uLL);
      *((_QWORD *)v613 + 50) = v607;
      v674 = v1087;
      *(_OWORD *)((char *)v613 + 440) = v1086;
      *(_OWORD *)((char *)v613 + 456) = v674;
      *((_QWORD *)v613 + 59) = v1088;
      v675 = v1085;
      *(_OWORD *)((char *)v613 + 408) = v1084;
      *(_OWORD *)((char *)v613 + 424) = v675;
      *((_DWORD *)v613 + 120) = v611;
      v1040 = v614;
      v6 = (char **)v986;
      v4 = v908;
    }
    v676 = *(std::__shared_weak_count **)&v1079.f64[1];
    if (*(_QWORD *)&v1079.f64[1])
    {
      v677 = (unint64_t *)(*(_QWORD *)&v1079.f64[1] + 8);
      do
        v678 = __ldaxr(v677);
      while (__stlxr(v678 - 1, v677));
      if (!v678)
      {
        ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
        std::__shared_weak_count::__release_weak(v676);
      }
    }
  }
  v73 = (char *)__p;
  if (__p)
  {
    v74 = v1020;
    v75 = __p;
    if (v1020 == __p)
    {
LABEL_85:
      v1020 = v73;
      operator delete(v75);
      goto LABEL_86;
    }
    while (1)
    {
      v76 = v74 - 488;
      v77 = (std::__shared_weak_count *)*((_QWORD *)v74 - 48);
      if (!v77)
        goto LABEL_77;
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        v80 = (std::__shared_weak_count *)*((_QWORD *)v74 - 50);
        if (v80)
        {
LABEL_78:
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      else
      {
LABEL_77:
        v80 = (std::__shared_weak_count *)*((_QWORD *)v74 - 50);
        if (v80)
          goto LABEL_78;
      }
      v74 -= 488;
      if (v76 == v73)
      {
        v75 = __p;
        goto LABEL_85;
      }
    }
  }
LABEL_86:
  memset(&v1026[8], 0, 24);
  memset(&v1025[8], 0, 24);
  v1021 = 0;
  __p = 0;
  v1020 = 0;
  v1022 = 0;
  *(_QWORD *)v1025 = 0x3FF0000000000000;
  *(_QWORD *)v1026 = 0x3FF0000000000000;
  v1029 = 0;
  v1028 = 0u;
  v1031 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  v1027 = _Q0;
  v1030 = 0x3FF0000000000000;
  v1032 = 0;
  v1033 = 0x3FF0000000000000;
  v1034 = 0;
  v1035 = 0;
  v1036 = 0;
  v1037 = 0;
  v1038 = -1;
  v87 = v1039;
  v88 = v1040;
  v913 = *((unsigned __int8 *)v6 + 323);
  if (*((_BYTE *)v6 + 323))
  {
    if (v1040 != v1039)
    {
      if ((unint64_t)(0x4FBCDA3AC10C9715 * ((v1040 - (_BYTE *)v1039) >> 3)) >= 0xF0F0F0F0F0F0F1)
        sub_20E867F44();
      v89 = (char *)operator new(0xB8A7DE6D1D608650 * ((v1040 - (_BYTE *)v1039) >> 3));
      v90 = v89;
      do
      {
        *((_OWORD *)v90 + 15) = 0uLL;
        *((_OWORD *)v90 + 16) = 0uLL;
        *((_OWORD *)v90 + 13) = 0uLL;
        *((_OWORD *)v90 + 14) = 0uLL;
        *((_OWORD *)v90 + 11) = 0uLL;
        *((_OWORD *)v90 + 12) = 0uLL;
        *((_OWORD *)v90 + 9) = 0uLL;
        *((_OWORD *)v90 + 10) = 0uLL;
        *((_OWORD *)v90 + 7) = 0uLL;
        *((_OWORD *)v90 + 8) = 0uLL;
        *((_OWORD *)v90 + 5) = 0uLL;
        *((_OWORD *)v90 + 6) = 0uLL;
        *((_OWORD *)v90 + 3) = 0uLL;
        *((_OWORD *)v90 + 4) = 0uLL;
        *((_OWORD *)v90 + 1) = 0uLL;
        *((_OWORD *)v90 + 2) = 0uLL;
        *(_OWORD *)v90 = 0uLL;
        *((_QWORD *)v90 + 3) = 0x3FF0000000000000;
        *((_QWORD *)v90 + 7) = 0x3FF0000000000000;
        *((_QWORD *)v90 + 11) = 0x3FF0000000000000;
        *((_QWORD *)v90 + 12) = 0;
        *((_QWORD *)v90 + 13) = 0;
        *((_QWORD *)v90 + 14) = 0;
        *((_OWORD *)v90 + 8) = 0uLL;
        *((_OWORD *)v90 + 9) = 0uLL;
        *((_OWORD *)v90 + 10) = 0uLL;
        *((_QWORD *)v90 + 15) = 0x3FF0000000000000;
        *((_QWORD *)v90 + 19) = 0x3FF0000000000000;
        *((_QWORD *)v90 + 22) = 0;
        *((_QWORD *)v90 + 23) = 0x3FF0000000000000;
        v90 += 272;
      }
      while (v90 != &v89[0xB8A7DE6D1D608650 * ((v88 - v87) >> 3)]);
      __p = v89;
      v1020 = &v89[0xB8A7DE6D1D608650 * ((v88 - v87) >> 3)];
      v1021 = v1020;
    }
    v1022 = *((_DWORD *)v4 + 32);
    if (*((_BYTE *)v4 + 120))
    {
      v1023 = *((_OWORD *)v4 + 6);
      v1024 = v4[14];
    }
    v91 = *(_OWORD *)(v4 + 5);
    v92 = *(_OWORD *)(v4 + 9);
    *(_OWORD *)v1026 = *(_OWORD *)(v4 + 7);
    *(_OWORD *)&v1026[16] = v92;
    *(_QWORD *)&v1027 = v4[11];
    *(_OWORD *)v1025 = *(_OWORD *)(v4 + 3);
    *(_OWORD *)&v1025[16] = v91;
    v1017 = 0;
    v1016 = 0;
    v1018 = 0;
    v93 = v88 - v87;
    p_p = &__p;
    if (v88 != v87)
      goto LABEL_95;
LABEL_437:
    v1014 = 0;
    v1013 = 0;
    v1015 = 0;
LABEL_434:
    v522 = (char *)operator new(0x19uLL);
    strcpy(v522, "Stream inputs is empty.");
    *(_QWORD *)v1076 = &off_24C9F9790;
    v1076[8] = 1;
    v523 = v909;
    v524 = (_BYTE *)operator new();
    sub_20E860C04(v524, v522, 0x17uLL);
    *(_QWORD *)&v1076[16] = v524;
    v525 = (_QWORD *)operator new();
    *v525 = &unk_24C9C1198;
    v525[1] = 0;
    v525[2] = 0;
    v525[3] = v524;
    *(_QWORD *)&v1076[24] = v525;
    LOBYTE(v1077.f64[0]) = 0;
    LOBYTE(v1081) = 0;
    operator delete(v522);
    if (v1076[8])
      goto LABEL_714;
    goto LABEL_723;
  }
  v1017 = 0;
  v1016 = 0;
  v1018 = 0;
  v93 = v1040 - (_BYTE *)v1039;
  p_p = 0;
  if (v1040 == v1039)
    goto LABEL_437;
LABEL_95:
  v94 = v93 / 488;
  if ((unint64_t)(v93 / 488) > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v907 = v88;
  v1016 = operator new(24 * v94);
  v1018 = (char *)v1016 + 24 * v94;
  bzero(v1016, 24 * ((24 * v94 - 24) / 0x18uLL) + 24);
  v1017 = (std::__shared_weak_count *)((char *)v1016 + 24 * ((24 * v94 - 24) / 0x18uLL) + 24);
  v1014 = 0;
  v1013 = 0;
  v1015 = 0;
  *(_QWORD *)v1076 = &v1013;
  v95 = 112 * v94;
  v1076[8] = 0;
  v96 = operator new(112 * v94);
  v1013 = v96;
  v1014 = (std::__shared_weak_count **)v96;
  v97 = &v96[14 * v94];
  v1015 = v97;
  v98 = (unint64_t)&unk_24C9C1198;
  do
  {
    *(_OWORD *)(v96 + 1) = 0u;
    v96[13] = 0;
    *(_OWORD *)(v96 + 11) = 0u;
    *(_OWORD *)(v96 + 9) = 0u;
    *(_OWORD *)(v96 + 7) = 0u;
    *(_OWORD *)(v96 + 5) = 0u;
    *(_OWORD *)(v96 + 3) = 0u;
    *v96 = &off_24C9F9790;
    *((_BYTE *)v96 + 8) = 9;
    v99 = operator new();
    *(_QWORD *)v99 = 0;
    *(_BYTE *)(v99 + 23) = 0;
    v96[2] = v99;
    v100 = (_QWORD *)operator new();
    *v100 = &unk_24C9C1198;
    v100[1] = 0;
    v96[3] = v100;
    *((_BYTE *)v96 + 32) = 0;
    *((_BYTE *)v96 + 104) = 0;
    v96 += 14;
    v100[2] = 0;
    v100[3] = v99;
    v95 -= 112;
  }
  while (v95);
  v101 = 0;
  v1014 = (std::__shared_weak_count **)v97;
  v910 = (unsigned int *)v6 + 101;
  v904 = (uint64_t)(v6 + 53);
  v905 = (float *)(v6 + 52);
  v102 = 1.0;
  v103 = (std::string::size_type)v87;
  do
  {
    v1064.__r_.__value_.__r.__words[0] = v101;
    v1064.__r_.__value_.__l.__size_ = v103;
    v924 = v101;
    if (v913)
      v104 = (unint64_t)*p_p + 272 * v101;
    else
      v104 = v98 & 0xFFFFFFFFFFFFFF00;
    v105 = (char *)v1016;
    (*(void (**)(std::string *__return_ptr, char *, std::string::size_type, _QWORD))(*(_QWORD *)v6[54] + 16))(&v1065, v6[54], v103, *(_QWORD *)(v103 + 400));
    if (v913)
    {
      *(double *)v104 = *(double *)(v103 + 112) + *(double *)(v103 + 120);
      *(_QWORD *)(v104 + 8) = *(_QWORD *)(v103 + 392);
      *(_DWORD *)(v104 + 16) = (v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0]) >> 5;
      *(_DWORD *)(v104 + 20) = *(_DWORD *)(v103 + 480);
      *(_OWORD *)(v104 + 24) = *(_OWORD *)(v103 + 408);
      v107 = *(_OWORD *)(v103 + 440);
      v106 = *(_OWORD *)(v103 + 456);
      v108 = *(_QWORD *)(v103 + 472);
      *(_OWORD *)(v104 + 40) = *(_OWORD *)(v103 + 424);
      *(_QWORD *)(v104 + 88) = v108;
      *(_OWORD *)(v104 + 72) = v106;
      *(_OWORD *)(v104 + 56) = v107;
    }
    v912 = v104;
    v109 = *(double *)(v103 + 424);
    _D9 = *(_QWORD *)(v103 + 448);
    v958 = *(float64x2_t *)(v103 + 432);
    v962 = *(float64x2_t *)(v103 + 408);
    _D10 = *(double *)(v103 + 472);
    v941 = *((double *)v908 + 5);
    v938 = *(float64x2_t *)(v908 + 3);
    v950 = *((double *)v908 + 8);
    v945 = *((float64x2_t *)v908 + 3);
    v967 = *((double *)v908 + 11);
    v972 = *(float64x2_t *)(v103 + 456);
    _Q0 = *(int8x16_t *)(v908 + 9);
    v954 = (float64x2_t)_Q0;
    v911 = v103;
    v113 = *(_QWORD *)(v103 + 400);
    v979 = v105;
    if (!v113
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 214, (uint64_t)"lens_model != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v997 = &v105[24 * v924];
    size = v1065.__r_.__value_.__l.__size_;
    v115 = (double *)v1065.__r_.__value_.__r.__words[0];
    v116 = v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0];
    v117 = (uint64_t)(v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0]) >> 5;
    v118 = *(char **)v997;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v997 + 2) - *(_QWORD *)v997) >> 2) < v117)
    {
      v987 = v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0];
      if ((v116 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v119 = &v105[24 * v924];
      v122 = (char *)*((_QWORD *)v119 + 1);
      v120 = (char **)(v119 + 8);
      v121 = v122;
      v935 = (uint64_t)(v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0]) >> 5;
      v123 = (char *)operator new(12 * v117);
      v124 = &v123[12 * ((v122 - v118) / 12)];
      v125 = v124;
      if (v122 != v118)
      {
        v125 = &v123[12 * ((v121 - v118) / 12)];
        do
        {
          v126 = *(_QWORD *)(v121 - 12);
          v121 -= 12;
          v127 = *((_DWORD *)v121 + 2);
          *(_QWORD *)(v125 - 12) = v126;
          v125 -= 12;
          *((_DWORD *)v125 + 2) = v127;
        }
        while (v121 != v118);
      }
      *(_QWORD *)v997 = v125;
      v117 = v935;
      *v120 = v124;
      *((_QWORD *)v997 + 2) = &v123[12 * v935];
      v116 = v987;
      if (v118)
      {
        operator delete(v118);
        size = v1065.__r_.__value_.__l.__size_;
        v115 = (double *)v1065.__r_.__value_.__r.__words[0];
        v116 = v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0];
        v117 = (uint64_t)(v1065.__r_.__value_.__l.__size_ - v1065.__r_.__value_.__r.__words[0]) >> 5;
      }
    }
    memset(v1076, 0, 24);
    *(_QWORD *)&v976.f64[0] = v997 + 16;
    if ((double *)size == v115)
    {
      v155 = 0;
      v135 = 0;
      v154 = 0;
      v156 = v997;
      v157 = *(char **)v997;
      v158 = v924;
      v159 = v979;
      if (*(_QWORD *)v997)
        goto LABEL_135;
    }
    else
    {
      if ((v116 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v128 = v117;
      *(_QWORD *)v1076 = operator new(12 * v117);
      *(_QWORD *)&v1076[8] = *(_QWORD *)v1076;
      *(_QWORD *)&v1076[16] = *(_QWORD *)v1076 + 12 * v128;
      do
      {
        *(float32x2_t *)v136.i8 = sub_20F161E5C((float32x2_t *)&v1047, v113, v115, _Q0, *(double *)v129.i64, v130, v131, (int64x2_t)v132, v133, v134);
        sub_20F161E5C((float32x2_t *)&v1042, v113, v115 + 2, v136, v137, v138, v139, v140, v141, v142);
        v143 = *(int32x4_t *)&v1042.__r_.__value_.__l.__data_;
        v131 = vextq_s8((int8x16_t)vuzp1q_s32(v143, v143), *(int8x16_t *)&v1042.__r_.__value_.__l.__data_, 0xCuLL);
        v132 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 0xCuLL);
        v129 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v1047, (int8x16_t)v1047, 0xCuLL), (int8x16_t)v1047, 8uLL), (float32x4_t)v131), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v1047, (int32x4_t)v1047), (int8x16_t)v1047, 0xCuLL), (float32x4_t)vextq_s8(v132, *(int8x16_t *)&v1042.__r_.__value_.__l.__data_, 8uLL));
        v130 = vextq_s8(v129, v129, 8uLL);
        *(float32x2_t *)v131.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v129.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v129.i8, 1), *(float32x2_t *)v129.i8, 1), *(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8);
        _Q0 = (int8x16_t)vmulq_n_f32((float32x4_t)v129, v102 / sqrtf(*(float *)v131.i32));
        v144 = *(char **)&v1076[8];
        if (*(_QWORD *)&v1076[8] < *(_QWORD *)&v1076[16])
        {
          *(_DWORD *)(*(_QWORD *)&v1076[8] + 8) = _Q0.i32[2];
          *(_QWORD *)v144 = _Q0.i64[0];
          v135 = v144 + 12;
        }
        else
        {
          v145 = *(char **)v1076;
          v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1076[8] - *(_QWORD *)v1076) >> 2);
          v147 = v146 + 1;
          if (v146 + 1 > 0x1555555555555555)
            sub_20E867F44();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1076[16] - *(_QWORD *)v1076) >> 2) > v147)
            v147 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1076[16] - *(_QWORD *)v1076) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1076[16] - *(_QWORD *)v1076) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v148 = 0x1555555555555555;
          else
            v148 = v147;
          if (v148)
          {
            v988 = _Q0;
            if (v148 > 0x1555555555555555)
              sub_20E877A38();
            v149 = (char *)operator new(12 * v148);
            _Q0 = v988;
          }
          else
          {
            v149 = 0;
          }
          v150 = &v149[12 * v146];
          *(_QWORD *)v150 = _Q0.i64[0];
          *((_DWORD *)v150 + 2) = _Q0.i32[2];
          v151 = v150;
          if (v144 != v145)
          {
            do
            {
              v152 = *(_QWORD *)(v144 - 12);
              v144 -= 12;
              v153 = *((_DWORD *)v144 + 2);
              *(_QWORD *)(v151 - 12) = v152;
              v151 -= 12;
              *((_DWORD *)v151 + 2) = v153;
            }
            while (v144 != v145);
            v144 = *(char **)v1076;
          }
          v135 = v150 + 12;
          *(_QWORD *)v1076 = v151;
          *(_QWORD *)&v1076[8] = v150 + 12;
          *(_QWORD *)&v1076[16] = &v149[12 * v148];
          if (v144)
            operator delete(v144);
        }
        *(_QWORD *)&v1076[8] = v135;
        v115 += 4;
      }
      while (v115 != (double *)size);
      v154 = *(_QWORD *)v1076;
      v155 = *(_QWORD *)&v1076[16];
      v156 = v997;
      v157 = *(char **)v997;
      v158 = v924;
      v159 = v979;
      if (*(_QWORD *)v997)
      {
LABEL_135:
        *(_QWORD *)&v159[24 * v158 + 8] = v157;
        operator delete(v157);
        *(_QWORD *)v156 = 0;
        *((_QWORD *)v156 + 1) = 0;
        *((_QWORD *)v156 + 2) = 0;
      }
    }
    *(_QWORD *)v156 = v154;
    v160 = &v159[24 * v158];
    *((_QWORD *)v160 + 1) = v135;
    v925 = (float32x2_t **)(v160 + 8);
    **(_QWORD **)&v976.f64[0] = v155;
    LODWORD(v1060[0]) = -1431655765 * ((unint64_t)&v135[-v154] >> 2);
    if (*v910 <= LODWORD(v1060[0]))
    {
      _V6.D[1] = v938.f64[1];
      v174 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v962, v938.f64[0]), v958, v938, 1), v972, v941);
      __asm { FMLA            D0, D9, V6.D[1] }
      v927 = *(double *)_Q0.i64 + _D10 * v941;
      _V7.D[1] = v945.f64[1];
      v176 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v962, v945.f64[0]), v958, v945, 1), v972, v950);
      __asm { FMLA            D0, D9, V7.D[1] }
      v951 = *(double *)_Q0.i64 + _D10 * v950;
      _V6.D[1] = v954.f64[1];
      v178 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v962, v954.f64[0]), v958, v954, 1), v972, v967);
      __asm { FMLA            D0, D9, V6.D[1] }
      *(double *)_Q0.i64 = *(double *)_Q0.i64 + _D10 * v967;
      v922 = _Q0;
      v959 = *(_QWORD *)&v176.f64[0];
      v963 = v178.i64[0];
      v946 = *(_QWORD *)&v176.f64[1];
      v942 = vextq_s8(v178, v178, 8uLL).u64[0];
      v968 = v174.i64[0];
      v955 = vextq_s8(v174, v174, 8uLL).u64[0];
      v179 = 5489;
      *(_DWORD *)v1076 = 5489;
      for (j = 1; j != 624; ++j)
      {
        v179 = j + 1812433253 * (v179 ^ (v179 >> 30));
        *(_DWORD *)&v1076[4 * j] = v179;
      }
      v1090 = 0;
      v181 = (std::__shared_weak_count *)operator new(0x28uLL);
      v182 = v181;
      v181->__shared_owners_ = 0;
      v183 = (unint64_t *)&v181->__shared_owners_;
      v181->__shared_weak_owners_ = 0;
      v181->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
      v181[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
      LODWORD(v181[1].__shared_owners_) = 5489;
      do
        v184 = __ldxr(v183);
      while (__stxr(v184 + 1, v183));
      v1091 = &off_24CA1F4F8;
      v1092 = v181 + 1;
      v1093 = v181;
      v185 = (float32x2_t **)v997;
      do
        v186 = __ldxr(v183);
      while (__stxr(v186 + 1, v183));
      v187 = v986;
      do
        v188 = __ldaxr(v183);
      while (__stlxr(v188 - 1, v183));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v182);
      }
      do
        v189 = __ldaxr(v183);
      while (__stlxr(v189 - 1, v183));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
      v190 = v986[102];
      LODWORD(v1058[0]) = 0;
      kdebug_trace();
      v989 = *((_DWORD *)v986 + 100);
      if (v989)
      {
        v980 = 0;
        for (k = 0; k != v989; ++k)
        {
          v205 = v1060[0];
          v206 = (std::__shared_weak_count *)operator new();
          v207 = v206;
          v206->__shared_owners_ = 0;
          v208 = (unint64_t *)&v206->__shared_owners_;
          v206->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1128;
          v206->__shared_weak_owners_ = 0;
          v206[1].__vftable = (std::__shared_weak_count_vtbl *)v1076;
          if (v205 == 1)
          {
            v212 = 0;
          }
          else if (v205)
          {
            v213 = __clz(v205);
            v214 = 31;
            if (((v205 << v213) & 0x7FFFFFFF) != 0)
              v214 = 32;
            v215 = v214 - v213;
            v216 = v215 >> 5;
            if ((v215 & 0x1F) != 0)
              ++v216;
            if (v216 <= v215)
              v217 = 0xFFFFFFFF >> -(v215 / v216);
            else
              v217 = 0;
            v218 = v1090;
            do
            {
              v219 = 4 * v218;
              v220 = v218 + 397;
              v218 = (v218 + 1) % 0x270;
              v221 = *(_DWORD *)&v1076[4 * (v220 % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v218] & 0x7FFFFFFE | *(_DWORD *)&v1076[v219] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v218] << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)&v1076[v219] = v221;
              v222 = ((v221 ^ (v221 >> 11)) << 7) & 0x9D2C5680 ^ v221 ^ (v221 >> 11);
              v212 = ((v222 << 15) & 0xEFC60000 ^ v222 ^ (((v222 << 15) & 0xEFC60000 ^ v222) >> 18)) & v217;
            }
            while (v212 >= v205);
            v1090 = v218;
          }
          else
          {
            v209 = (v1090 + 1) % 0x270;
            v210 = *(_DWORD *)&v1076[4 * ((v1090 + 397) % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v209] & 0x7FFFFFFE | *(_DWORD *)&v1076[4 * v1090] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v209] << 31) >> 31) & 0x9908B0DF;
            *(_DWORD *)&v1076[4 * v1090] = v210;
            v1090 = v209;
            v211 = ((v210 ^ (v210 >> 11)) << 7) & 0x9D2C5680 ^ v210 ^ (v210 >> 11);
            v212 = (v211 << 15) & 0xEFC60000 ^ v211 ^ (((v211 << 15) & 0xEFC60000 ^ v211) >> 18);
          }
          do
            v223 = __ldaxr(v208);
          while (__stlxr(v223 - 1, v208));
          if (!v223)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v207);
          }
          v224 = v1060[0];
          v225 = (std::__shared_weak_count *)operator new();
          v226 = v225;
          v225->__shared_owners_ = 0;
          v227 = (unint64_t *)&v225->__shared_owners_;
          v225->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1128;
          v225->__shared_weak_owners_ = 0;
          v225[1].__vftable = (std::__shared_weak_count_vtbl *)v1076;
          if (v224 == 1)
          {
            v231 = 0;
          }
          else if (v224)
          {
            v232 = __clz(v224);
            v233 = 31;
            if (((v224 << v232) & 0x7FFFFFFF) != 0)
              v233 = 32;
            v234 = v233 - v232;
            v235 = v234 >> 5;
            if ((v234 & 0x1F) != 0)
              ++v235;
            if (v235 <= v234)
              v236 = 0xFFFFFFFF >> -(v234 / v235);
            else
              v236 = 0;
            v237 = v1090;
            do
            {
              v238 = 4 * v237;
              v239 = v237 + 397;
              v237 = (v237 + 1) % 0x270;
              v240 = *(_DWORD *)&v1076[4 * (v239 % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v237] & 0x7FFFFFFE | *(_DWORD *)&v1076[v238] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v237] << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)&v1076[v238] = v240;
              v241 = ((v240 ^ (v240 >> 11)) << 7) & 0x9D2C5680 ^ v240 ^ (v240 >> 11);
              v231 = ((v241 << 15) & 0xEFC60000 ^ v241 ^ (((v241 << 15) & 0xEFC60000 ^ v241) >> 18)) & v236;
            }
            while (v231 >= v224);
            v1090 = v237;
          }
          else
          {
            v228 = (v1090 + 1) % 0x270;
            v229 = *(_DWORD *)&v1076[4 * ((v1090 + 397) % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v228] & 0x7FFFFFFE | *(_DWORD *)&v1076[4 * v1090] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v228] << 31) >> 31) & 0x9908B0DF;
            *(_DWORD *)&v1076[4 * v1090] = v229;
            v1090 = v228;
            v230 = ((v229 ^ (v229 >> 11)) << 7) & 0x9D2C5680 ^ v229 ^ (v229 >> 11);
            v231 = (v230 << 15) & 0xEFC60000 ^ v230 ^ (((v230 << 15) & 0xEFC60000 ^ v230) >> 18);
          }
          do
            v242 = __ldaxr(v227);
          while (__stlxr(v242 - 1, v227));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v226);
          }
          v243 = v1060[0];
          v244 = (std::__shared_weak_count *)operator new();
          v248 = v244;
          v244->__shared_owners_ = 0;
          v249 = (unint64_t *)&v244->__shared_owners_;
          v244->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1128;
          v244->__shared_weak_owners_ = 0;
          v244[1].__vftable = (std::__shared_weak_count_vtbl *)v1076;
          if (v243 == 1)
          {
            v253 = 0;
          }
          else if (v243)
          {
            v254 = __clz(v243);
            v255 = 31;
            if (((v243 << v254) & 0x7FFFFFFF) != 0)
              v255 = 32;
            v256 = v255 - v254;
            v257 = v256 >> 5;
            if ((v256 & 0x1F) != 0)
              ++v257;
            if (v257 <= v256)
              v258 = 0xFFFFFFFF >> -(v256 / v257);
            else
              v258 = 0;
            v259 = v1090;
            do
            {
              v260 = 4 * v259;
              v261 = v259 + 397;
              v259 = (v259 + 1) % 0x270;
              v262 = *(_DWORD *)&v1076[4 * (v261 % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v259] & 0x7FFFFFFE | *(_DWORD *)&v1076[v260] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v259] << 31) >> 31) & 0x9908B0DF;
              *(_DWORD *)&v1076[v260] = v262;
              v263 = ((v262 ^ (v262 >> 11)) << 7) & 0x9D2C5680 ^ v262 ^ (v262 >> 11);
              v253 = ((v263 << 15) & 0xEFC60000 ^ v263 ^ (((v263 << 15) & 0xEFC60000 ^ v263) >> 18)) & v258;
            }
            while (v253 >= v243);
            v1090 = v259;
          }
          else
          {
            v250 = (v1090 + 1) % 0x270;
            v251 = *(_DWORD *)&v1076[4 * ((v1090 + 397) % 0x270)] ^ ((*(_DWORD *)&v1076[4 * v250] & 0x7FFFFFFE | *(_DWORD *)&v1076[4 * v1090] & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)&v1076[4 * v250] << 31) >> 31) & 0x9908B0DF;
            *(_DWORD *)&v1076[4 * v1090] = v251;
            v1090 = v250;
            v252 = ((v251 ^ (v251 >> 11)) << 7) & 0x9D2C5680 ^ v251 ^ (v251 >> 11);
            v253 = (v252 << 15) & 0xEFC60000 ^ v252 ^ (((v252 << 15) & 0xEFC60000 ^ v252) >> 18);
          }
          v185 = (float32x2_t **)v997;
          do
            v264 = __ldaxr(v249);
          while (__stlxr(v264 - 1, v249));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v248);
          }
          v192 = *(float32x2_t **)v997;
          v193 = *(_QWORD *)v997 + 12 * v212;
          v194 = *(_QWORD *)v997 + 12 * v231;
          v195 = *(_QWORD *)v997 + 12 * v253;
          v245.i64[0] = *(_QWORD *)v193;
          v245.i32[2] = *(_DWORD *)(v193 + 8);
          v246.i64[0] = *(_QWORD *)v194;
          v246.i32[2] = *(_DWORD *)(v194 + 8);
          v196 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v246, v246), (int8x16_t)v246, 0xCuLL);
          v197 = (int32x4_t)vextq_s8(vextq_s8((int8x16_t)v246, (int8x16_t)v246, 0xCuLL), (int8x16_t)v246, 8uLL);
          v198 = (int32x4_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v245, (int8x16_t)v245, 0xCuLL), (int8x16_t)v245, 8uLL), v196), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v245, v245), (int8x16_t)v245, 0xCuLL), (float32x4_t)v197);
          v197.i64[0] = *(_QWORD *)v195;
          v197.i32[2] = *(_DWORD *)(v195 + 8);
          v199 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v197, v197), (int8x16_t)v197, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v198, (int8x16_t)v198, 0xCuLL), (int8x16_t)v198, 8uLL)), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v197, (int8x16_t)v197, 0xCuLL), (int8x16_t)v197, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v198, v198), (int8x16_t)v198, 0xCuLL));
          v196.i64[0] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u64[0];
          v200 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v198.i8, *(float32x2_t *)v198.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v198.i8, 1), *(float32x2_t *)v198.i8, 1), *(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32).f32[0]);
          v187 = v986;
          v201 = v986[103];
          v202 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
          v203 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v199.i8, *(float32x2_t *)v199.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v199.i8, 1), *(float32x2_t *)v199.i8, 1), v202, v202).f32[0]);
          _NF = v200 < v201 || v203 < v201;
          if (!_NF && v192 != *v925)
          {
            v265 = 0;
            v266 = (int32x4_t)vmulq_n_f32((float32x4_t)v198, v102 / v200);
            v267 = (int32x4_t)vmulq_n_f32((float32x4_t)v199, v102 / v203);
            v268 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v266, (int8x16_t)v266, 0xCuLL), (int8x16_t)v266, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v267, v267), (int8x16_t)v267, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v266, v266), (int8x16_t)v266, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v267, (int8x16_t)v267, 0xCuLL), (int8x16_t)v267, 8uLL));
            v269 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v266.i8, 1);
            v270 = (float32x2_t)vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL).u64[0];
            v271 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v267.i8, 1);
            v272 = (float32x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL).u64[0];
            v273 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v268.i8, 1);
            v274 = (float32x2_t)vextq_s8(v268, v268, 8uLL).u64[0];
            do
            {
              v247.i32[0] = v192[1].i32[0];
              v275 = fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v192, *(float32x2_t *)v266.i8), v269, *v192, 1), v270, v247).f32[0]) < v190;
              v276 = fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v192, *(float32x2_t *)v268.i8), v273, *v192, 1), v274, v247).f32[0]);
              if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v192, *(float32x2_t *)v267.i8), v271, *v192, 1), v272, v247).f32[0]) < v190)
                v275 = 1;
              if (v276 < v190)
                v275 = 1;
              v265 += v275;
              v192 = (float32x2_t *)((char *)v192 + 12);
            }
            while (v192 != *v925);
            if (v265 > v980)
            {
              LODWORD(v1058[0]) = v265;
              v980 = v265;
              v972 = (float64x2_t)v267;
              v976 = (float64x2_t)v266;
            }
          }
        }
      }
      else
      {
        v980 = 0;
      }
      kdebug_trace();
      if (!v980)
      {
        sub_20E9F6A6C((unsigned int *)v1058);
        v327 = std::string::insert((std::string *)&v1047, 0, "Not enough inliers in RANSAC: ", 0x1EuLL);
        v328 = (void *)v327->__r_.__value_.__r.__words[0];
        v329 = v327->__r_.__value_.__l.__size_;
        LODWORD(v1042.__r_.__value_.__l.__data_) = v327->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v1042.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v327->__r_.__value_.__r.__words[2]
                                                                             + 3);
        v330 = SHIBYTE(v327->__r_.__value_.__r.__words[2]);
        v327->__r_.__value_.__l.__size_ = 0;
        v327->__r_.__value_.__r.__words[2] = 0;
        v327->__r_.__value_.__r.__words[0] = 0;
        if ((v1048[7] & 0x80000000) != 0)
          operator delete(*(void **)&v1047.f64[0]);
        *(_QWORD *)__dst = &off_24C9F9790;
        __dst[8] = 3;
        v331 = operator new();
        v332 = v331;
        if (v330 < 0)
        {
          sub_20E860C04((_BYTE *)v331, v328, v329);
        }
        else
        {
          *(_QWORD *)v331 = v328;
          *(_QWORD *)(v331 + 8) = v329;
          *(_DWORD *)(v331 + 16) = v1042.__r_.__value_.__l.__data_;
          *(_DWORD *)(v331 + 19) = *(_DWORD *)((char *)v1042.__r_.__value_.__r.__words + 3);
          *(_BYTE *)(v331 + 23) = v330;
        }
        *(_QWORD *)&__dst[16] = v332;
        v338 = (_QWORD *)operator new();
        *v338 = &unk_24C9C1198;
        v338[1] = 0;
        v338[2] = 0;
        v338[3] = v332;
        *(_QWORD *)&__dst[24] = v338;
        __dst[32] = 0;
        v1012 = 0;
        if ((v330 & 0x80000000) == 0)
          goto LABEL_381;
        v339 = v328;
        goto LABEL_380;
      }
      v279 = (__int128 *)*((_QWORD *)v187 + 55);
      v280 = (__int128 *)*((_QWORD *)v187 + 56);
      if (v279 != v280)
      {
        v277.i32[0] = 0;
        v990 = vcvtq_f64_f32(*(float32x2_t *)&v976.f64[0]);
        v109 = *(float *)&v976.f64[1];
        _D10 = *(float *)&v972.f64[1];
        v281 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v976, (int8x16_t)v976, 0xCuLL), (int8x16_t)v976, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v972, (int32x4_t)v972), (int8x16_t)v972, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v976, (int32x4_t)v976), (int8x16_t)v976, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v972, (int8x16_t)v972, 0xCuLL), (int8x16_t)v972, 8uLL)));
        v976 = vcvtq_f64_f32(*(float32x2_t *)v281.i8);
        v981 = vcvtq_f64_f32(*(float32x2_t *)&v972.f64[0]);
        v281.i32[0] = v281.i32[2];
        *(double *)v1.i64 = *(float *)&v281.i32[2];
        v281.i8[0] = *((_BYTE *)v187 + 322);
        v282 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v281, v277), 0);
        v281.i64[0] = vbicq_s8(v922, v282).u64[0];
        v283.i64[0] = v946;
        *(double *)&v283.i64[1] = v951;
        v284.i64[0] = v963;
        v284.i64[1] = v942;
        v285 = vbslq_s8(v282, (int8x16_t)xmmword_2102DD520, v283);
        v286 = vbslq_s8(v282, (int8x16_t)xmmword_21030D330, v284);
        *(double *)v287.i64 = v927;
        v288 = (int8x8_t)v959;
        v287.i64[1] = v959;
        v289 = (int64x2_t)vbicq_s8(v287, v282);
        v283.i64[0] = v968;
        v283.i64[1] = v955;
        v290 = vbslq_s8(v282, (int8x16_t)xmmword_21030D320, v283);
        v291 = vmvnq_s8(v282);
        v960 = (float64x2_t)v290;
        v964 = *(double *)v289.i64;
        v956 = (float64x2_t)vdupq_laneq_s64(v289, 1);
        v952 = (float64x2_t)vdupq_lane_s64(v286.i64[0], 0);
        *(int8x8_t *)v2.i8 = vand_s8(v288, (int8x8_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL));
        v947 = (float64x2_t)vdupq_lane_s64(v285.i64[0], 0);
        v943 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v286, 1);
        *(_QWORD *)&v939 = vextq_s8(v290, v290, 8uLL).u64[0];
        v969 = *(double *)v286.i64;
        v973 = *(double *)v285.i64;
        *(_QWORD *)&v936 = vextq_s8(v286, v286, 8uLL).u64[0];
        v930 = (float64x2_t)vdupq_lane_s64(v281.i64[0], 0);
        v933 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v285, 1);
        v292 = COERCE_DOUBLE(vand_s8(*(int8x8_t *)&v927, *(int8x8_t *)v291.i8));
        *(_QWORD *)&v928 = vextq_s8(v285, v285, 8uLL).u64[0];
        v293 = COERCE_DOUBLE(vand_s8(*(int8x8_t *)v922.i8, *(int8x8_t *)v291.i8));
        v921 = 1.0;
        v920 = 0.0;
        v294 = INFINITY;
        v919 = 0.0;
        v923 = 0.0;
        v914 = 1.0;
        v917 = 0.0;
        v918.i64[0] = 0;
        v916 = 0.0;
        v915 = 1.0;
        while (1)
        {
          v295 = *((double *)v279 + 2);
          _Q1 = *v279;
          v297 = *((double *)v279 + 5);
          _Q3 = *(float64x2_t *)((char *)v279 + 24);
          v299 = *((double *)v279 + 8);
          _Q5 = (float64x2_t)v279[3];
          v301 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, *(double *)v279), v981, *(float64x2_t *)v279, 1), v976, v295);
          __asm { FMLA            D7, D10, V1.D[1] }
          v303 = _D7 + *(double *)v1.i64 * v295;
          v304 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, _Q3.f64[0]), v981, _Q3, 1), v976, v297);
          __asm { FMLA            D7, D10, V3.D[1] }
          v306 = _D7 + *(double *)v1.i64 * v297;
          v307 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, _Q5.f64[0]), v981, _Q5, 1), v976, v299);
          __asm { FMLA            D7, D10, V5.D[1] }
          v309 = _D7 + *(double *)v1.i64 * v299;
          v1047 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v301, v960.f64[0]), v956, v304), v952, v307);
          *(float64x2_t *)&v1048[8] = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v301, v960, 1), v947, v304), v943, v307);
          *(double *)v1048 = v303 * v960.f64[0] + v306 * *(double *)v2.i64 + v309 * v969;
          *(double *)&v1048[24] = v303 * v939 + v306 * v973 + v309 * v936;
          v1049 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v301, v964), v933, v304), v930, v307);
          v1050 = v303 * v292 + v306 * v928 + v309 * v293;
          memset(&v1042, 0, sizeof(v1042));
          sub_20E9733B8(&v1047, (double *)&v1042);
          _Q1 = *(_OWORD *)&v1042.__r_.__value_.__l.__data_;
          _D3 = v1042.__r_.__value_.__l.__size_;
          __asm { FMLA            D2, D3, V1.D[1] }
          v312 = sqrt(_D2 + *(double *)&v1042.__r_.__value_.__r.__words[2]
                          * *(double *)&v1042.__r_.__value_.__r.__words[2]);
          if (v312 < v294)
          {
            v313 = *((double *)v279 + 2);
            _Q2 = (float64x2_t)*v279;
            v315 = *((double *)v279 + 5);
            _Q4 = *(float64x2_t *)((char *)v279 + 24);
            v317 = *((double *)v279 + 8);
            _Q6 = (float64x2_t)v279[3];
            v319 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, *(double *)v279), v981, *(float64x2_t *)v279, 1), v976, v313);
            __asm { FMLA            D7, D10, V2.D[1] }
            v919 = _D7 + *(double *)v1.i64 * v313;
            *(_QWORD *)&v920 = vextq_s8(v319, v319, 8uLL).u64[0];
            v921 = *(double *)v319.i64;
            v321 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, _Q4.f64[0]), v981, _Q4, 1), v976, v315);
            __asm { FMLA            D1, D10, V4.D[1] }
            v917 = _D1 + *(double *)v1.i64 * v315;
            __asm { FMLA            D1, D10, V6.D[1] }
            v915 = *(double *)&_Q1 + *(double *)v1.i64 * v317;
            v918 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v990, _Q6.f64[0]), v981, _Q6, 1), v976, v317);
            *(_QWORD *)&v916 = vextq_s8(v918, v918, 8uLL).u64[0];
            DWORD1(_Q1) = 1072243195;
            v923 = *(double *)v321.i64;
            if (v312 < 0.785398163)
            {
              *(_QWORD *)&v914 = vextq_s8(v321, v321, 8uLL).u64[0];
              memset(&v1052, 0, sizeof(v1052));
              v333 = LODWORD(v1060[0]);
              v334 = (2 * LODWORD(v1060[0]));
              if (!(_DWORD)v334)
                goto LABEL_261;
LABEL_255:
              v335 = operator new(32 * v334);
              v1052.__r_.__value_.__r.__words[0] = (std::string::size_type)v335;
              v1052.__r_.__value_.__l.__size_ = (std::string::size_type)v335;
              v1052.__r_.__value_.__r.__words[2] = (std::string::size_type)&v335[8 * v334];
              if ((_DWORD)v333)
                goto LABEL_256;
LABEL_262:
              v337 = 0;
              v336 = 0;
              goto LABEL_263;
            }
            DWORD1(_Q1) = v321.i32[3];
            v914 = *(double *)&v321.i64[1];
            v294 = v312;
          }
          v279 = (__int128 *)((char *)v279 + 72);
          if (v279 == v280)
            goto LABEL_254;
        }
      }
      v921 = 1.0;
      v920 = 0.0;
      v919 = 0.0;
      v923 = 0.0;
      v914 = 1.0;
      v917 = 0.0;
      v918.i64[0] = 0;
      v916 = 0.0;
      v915 = 1.0;
LABEL_254:
      memset(&v1052, 0, sizeof(v1052));
      v333 = LODWORD(v1060[0]);
      v334 = (2 * LODWORD(v1060[0]));
      if ((_DWORD)v334)
        goto LABEL_255;
LABEL_261:
      v335 = 0;
      if (!(_DWORD)v333)
        goto LABEL_262;
LABEL_256:
      v336 = (int8x16_t *)operator new(v333);
      v337 = (int8x16_t *)((char *)v336 + v333);
      bzero(v336, v333);
LABEL_263:
      v340 = *v185;
      v341 = *v925;
      v965 = v336;
      v970 = v337;
      if (*v185 != *v925 || v336 != v337)
      {
        v342.i32[1] = HIDWORD(v921);
        v342.f32[0] = v921;
        v998 = v342;
        v342.i32[1] = HIDWORD(v920);
        v342.f32[0] = v920;
        v991 = v342;
        v342.i32[1] = HIDWORD(v919);
        v342.f32[0] = v919;
        v982 = v342;
        v342.i32[1] = HIDWORD(v923);
        v342.f32[0] = v923;
        v977 = v342;
        v342.i32[1] = HIDWORD(v914);
        v342.f32[0] = v914;
        v974 = v342;
        do
        {
          LODWORD(_Q1) = v340[1].i32[0];
          if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v340, v998), v991, *v340, 1), v982, *(float32x2_t *)&_Q1).f32[0]) < v190)
          {
            v336->i8[0] |= 1u;
            v343 = v340->f32[0];
            v344 = v340->f32[1];
            v345 = v340[1].f32[0];
            if ((unint64_t)v335 >= v1052.__r_.__value_.__r.__words[2])
            {
              v347 = v1052.__r_.__value_.__r.__words[0];
              v348 = (uint64_t)((uint64_t)v335 - v1052.__r_.__value_.__r.__words[0]) >> 5;
              v349 = v348 + 1;
              if ((unint64_t)(v348 + 1) >> 59)
                goto LABEL_908;
              v350 = v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0]) >> 4 > v349)
                v349 = v350 >> 4;
              if ((unint64_t)v350 >= 0x7FFFFFFFFFFFFFE0)
                v351 = 0x7FFFFFFFFFFFFFFLL;
              else
                v351 = v349;
              if (v351 >> 59)
                goto LABEL_907;
              v352 = (char *)operator new(32 * v351);
              v353 = (double *)&v352[32 * v348];
              *(_DWORD *)v353 = 0;
              v353[1] = v343;
              v353[2] = v344;
              v353[3] = v345;
              v354 = (std::string::size_type)v353;
              if (v335 != (_DWORD *)v347)
              {
                do
                {
                  v355 = *(v335 - 8);
                  v335 -= 8;
                  *(_DWORD *)(v354 - 32) = v355;
                  v354 -= 32;
                  v356 = *(_OWORD *)(v335 + 2);
                  *(_QWORD *)(v354 + 24) = *((_QWORD *)v335 + 3);
                  *(_OWORD *)(v354 + 8) = v356;
                }
                while (v335 != (_DWORD *)v347);
                v335 = (_DWORD *)v347;
              }
              v346 = (std::string::size_type)(v353 + 4);
              v1052.__r_.__value_.__r.__words[0] = v354;
              v1052.__r_.__value_.__l.__size_ = (std::string::size_type)(v353 + 4);
              v1052.__r_.__value_.__r.__words[2] = (std::string::size_type)&v352[32 * v351];
              if (v335)
                operator delete(v335);
            }
            else
            {
              *v335 = 0;
              *((double *)v335 + 1) = v343;
              *((double *)v335 + 2) = v344;
              v346 = (std::string::size_type)(v335 + 8);
              *((double *)v335 + 3) = v345;
            }
            v1052.__r_.__value_.__l.__size_ = v346;
            v335 = (_DWORD *)v346;
          }
          LODWORD(_Q1) = v340[1].i32[0];
          *(float *)&v109 = v917;
          if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v340, v977), v974, *v340, 1), *(float32x2_t *)&v109, *(float32x2_t *)&_Q1).f32[0]) < v190)
          {
            v336->i8[0] |= 2u;
            v357 = v340->f32[0];
            v358 = v340->f32[1];
            v359 = v340[1].f32[0];
            if ((unint64_t)v335 >= v1052.__r_.__value_.__r.__words[2])
            {
              v361 = v1052.__r_.__value_.__r.__words[0];
              v362 = (uint64_t)((uint64_t)v335 - v1052.__r_.__value_.__r.__words[0]) >> 5;
              v363 = v362 + 1;
              if ((unint64_t)(v362 + 1) >> 59)
                goto LABEL_908;
              v364 = v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0]) >> 4 > v363)
                v363 = v364 >> 4;
              if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFE0)
                v365 = 0x7FFFFFFFFFFFFFFLL;
              else
                v365 = v363;
              if (v365 >> 59)
                goto LABEL_907;
              v366 = (char *)operator new(32 * v365);
              v367 = (double *)&v366[32 * v362];
              *(_DWORD *)v367 = 1;
              v367[1] = v357;
              v367[2] = v358;
              v367[3] = v359;
              v368 = (std::string::size_type)v367;
              if (v335 != (_DWORD *)v361)
              {
                do
                {
                  v369 = *(v335 - 8);
                  v335 -= 8;
                  *(_DWORD *)(v368 - 32) = v369;
                  v368 -= 32;
                  v370 = *(_OWORD *)(v335 + 2);
                  *(_QWORD *)(v368 + 24) = *((_QWORD *)v335 + 3);
                  *(_OWORD *)(v368 + 8) = v370;
                }
                while (v335 != (_DWORD *)v361);
                v335 = (_DWORD *)v361;
              }
              v360 = (std::string::size_type)(v367 + 4);
              v1052.__r_.__value_.__r.__words[0] = v368;
              v1052.__r_.__value_.__l.__size_ = (std::string::size_type)(v367 + 4);
              v1052.__r_.__value_.__r.__words[2] = (std::string::size_type)&v366[32 * v365];
              if (v335)
                operator delete(v335);
            }
            else
            {
              *v335 = 1;
              *((double *)v335 + 1) = v357;
              *((double *)v335 + 2) = v358;
              v360 = (std::string::size_type)(v335 + 8);
              *((double *)v335 + 3) = v359;
            }
            v1052.__r_.__value_.__l.__size_ = v360;
            v335 = (_DWORD *)v360;
          }
          LODWORD(_Q1) = v340[1].i32[0];
          *(float *)&_D10 = *(double *)v918.i64;
          *(float *)v1.i32 = v916;
          *(float *)v2.i32 = v915;
          if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*v340, *(float32x2_t *)&_D10), *(float32x2_t *)v1.i8, *v340, 1), *(float32x2_t *)v2.i8, *(float32x2_t *)&_Q1).f32[0]) < v190)
          {
            v336->i8[0] |= 4u;
            v371 = v340->f32[0];
            v372 = v340->f32[1];
            v373 = v340[1].f32[0];
            if ((unint64_t)v335 >= v1052.__r_.__value_.__r.__words[2])
            {
              v375 = v1052.__r_.__value_.__r.__words[0];
              v376 = (uint64_t)((uint64_t)v335 - v1052.__r_.__value_.__r.__words[0]) >> 5;
              v377 = v376 + 1;
              if ((unint64_t)(v376 + 1) >> 59)
LABEL_908:
                sub_20E867F44();
              v378 = v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v1052.__r_.__value_.__r.__words[2] - v1052.__r_.__value_.__r.__words[0]) >> 4 > v377)
                v377 = v378 >> 4;
              if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFE0)
                v379 = 0x7FFFFFFFFFFFFFFLL;
              else
                v379 = v377;
              if (v379 >> 59)
LABEL_907:
                sub_20E877A38();
              v380 = (char *)operator new(32 * v379);
              v381 = (double *)&v380[32 * v376];
              *(_DWORD *)v381 = 2;
              v381[1] = v371;
              v381[2] = v372;
              v381[3] = v373;
              v382 = (std::string::size_type)v381;
              if (v335 != (_DWORD *)v375)
              {
                do
                {
                  v383 = *(v335 - 8);
                  v335 -= 8;
                  *(_DWORD *)(v382 - 32) = v383;
                  v382 -= 32;
                  v384 = *(_OWORD *)(v335 + 2);
                  *(_QWORD *)(v382 + 24) = *((_QWORD *)v335 + 3);
                  *(_OWORD *)(v382 + 8) = v384;
                }
                while (v335 != (_DWORD *)v375);
                v335 = (_DWORD *)v375;
              }
              v374 = (std::string::size_type)(v381 + 4);
              v1052.__r_.__value_.__r.__words[0] = v382;
              v1052.__r_.__value_.__l.__size_ = (std::string::size_type)(v381 + 4);
              v1052.__r_.__value_.__r.__words[2] = (std::string::size_type)&v380[32 * v379];
              if (v335)
                operator delete(v335);
            }
            else
            {
              *v335 = 2;
              *((double *)v335 + 1) = v371;
              *((double *)v335 + 2) = v372;
              v374 = (std::string::size_type)(v335 + 8);
              *((double *)v335 + 3) = v373;
            }
            v1052.__r_.__value_.__l.__size_ = v374;
            v335 = (_DWORD *)v374;
          }
          v340 = (float32x2_t *)((char *)v340 + 12);
          v336 = (int8x16_t *)((char *)v336 + 1);
        }
        while (v340 != v341 || v336 != v970);
      }
      v385 = v965;
      if (v965 == v970)
      {
        v389 = 0;
        v387 = (char **)v986;
      }
      else
      {
        v386 = (char *)v970 - (char *)v965;
        v387 = (char **)v986;
        v102 = 1.0;
        v388 = v923;
        if ((unint64_t)((char *)v970 - (char *)v965) < 8)
        {
          v389 = 0;
          v390 = (unsigned __int8 *)v965;
          goto LABEL_332;
        }
        if (v386 < 0x20)
        {
          v389 = 0;
          v391 = 0;
          goto LABEL_327;
        }
        v392 = 0uLL;
        v391 = v386 & 0xFFFFFFFFFFFFFFE0;
        v393 = 0uLL;
        v394 = v965 + 1;
        v395 = 0uLL;
        v396 = v386 & 0xFFFFFFFFFFFFFFE0;
        v397 = 0uLL;
        v398 = 0uLL;
        v399 = 0uLL;
        v400 = 0uLL;
        v401 = 0uLL;
        v402 = 0uLL;
        v403 = 0uLL;
        v404 = 0uLL;
        v405 = 0uLL;
        v406 = 0uLL;
        v407 = 0uLL;
        v408 = 0uLL;
        v409 = 0uLL;
        do
        {
          v410 = (uint8x16_t)vtstq_s8(v394[-1], v394[-1]);
          v411 = vmovl_u8(*(uint8x8_t *)v410.i8);
          v412 = vmovl_u16(*(uint16x4_t *)v411.i8);
          v413.i64[0] = v412.u32[0];
          v413.i64[1] = v412.u32[1];
          v414 = (int8x16_t)vdupq_n_s64(1uLL);
          v999 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v412.u32[2];
          v413.i64[1] = v412.u32[3];
          v415 = (int64x2_t)vandq_s8(v413, v414);
          v416 = vmovl_high_u16(v411);
          v413.i64[0] = v416.u32[0];
          v413.i64[1] = v416.u32[1];
          v417 = (int64x2_t)vandq_s8(v413, v414);
          v418 = vmovl_high_u8(v410);
          v419 = vmovl_u16(*(uint16x4_t *)v418.i8);
          v413.i64[0] = v419.u32[0];
          v413.i64[1] = v419.u32[1];
          v420 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v416.u32[2];
          v413.i64[1] = v416.u32[3];
          v421 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v419.u32[2];
          v413.i64[1] = v419.u32[3];
          v422 = (int64x2_t)vandq_s8(v413, v414);
          v423 = vmovl_high_u16(v418);
          v413.i64[0] = v423.u32[0];
          v413.i64[1] = v423.u32[1];
          v424 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v423.u32[2];
          v413.i64[1] = v423.u32[3];
          v425 = (int64x2_t)vandq_s8(v413, v414);
          v426 = (uint8x16_t)vtstq_s8(*v394, *v394);
          v427 = vmovl_u8(*(uint8x8_t *)v426.i8);
          v428 = vmovl_u16(*(uint16x4_t *)v427.i8);
          v413.i64[0] = v428.u32[0];
          v413.i64[1] = v428.u32[1];
          v2 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v428.u32[2];
          v413.i64[1] = v428.u32[3];
          v1 = (int64x2_t)vandq_s8(v413, v414);
          v429 = vmovl_high_u16(v427);
          v413.i64[0] = v429.u32[0];
          v413.i64[1] = v429.u32[1];
          v430 = (int64x2_t)vandq_s8(v413, v414);
          v431 = vmovl_high_u8(v426);
          v432 = vmovl_u16(*(uint16x4_t *)v431.i8);
          v413.i64[0] = v432.u32[0];
          v413.i64[1] = v432.u32[1];
          v433 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v429.u32[2];
          v413.i64[1] = v429.u32[3];
          v434 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v432.u32[2];
          v413.i64[1] = v432.u32[3];
          v435 = (int64x2_t)vandq_s8(v413, v414);
          v436 = vmovl_high_u16(v431);
          v413.i64[0] = v436.u32[0];
          v413.i64[1] = v436.u32[1];
          v437 = (int64x2_t)vandq_s8(v413, v414);
          v413.i64[0] = v436.u32[2];
          v413.i64[1] = v436.u32[3];
          v401 = vaddq_s64(v401, v425);
          v400 = vaddq_s64(v400, v424);
          v399 = vaddq_s64(v399, v422);
          v397 = vaddq_s64(v397, v421);
          v398 = vaddq_s64(v398, v420);
          v395 = vaddq_s64(v395, v417);
          v393 = vaddq_s64(v393, v415);
          v392 = vaddq_s64(v392, v999);
          v409 = vaddq_s64(v409, (int64x2_t)vandq_s8(v413, v414));
          v408 = vaddq_s64(v408, v437);
          v407 = vaddq_s64(v407, v435);
          v405 = vaddq_s64(v405, v434);
          v406 = vaddq_s64(v406, v433);
          v404 = vaddq_s64(v404, v430);
          v403 = vaddq_s64(v403, v1);
          v402 = vaddq_s64(v402, v2);
          v394 += 2;
          v396 -= 32;
        }
        while (v396);
        v389 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v402, v392), vaddq_s64(v406, v398)), vaddq_s64(vaddq_s64(v404, v395), vaddq_s64(v408, v400))), vaddq_s64(vaddq_s64(vaddq_s64(v403, v393), vaddq_s64(v407, v399)), vaddq_s64(vaddq_s64(v405, v397), vaddq_s64(v409, v401)))));
        if (v386 != v391)
        {
          v102 = 1.0;
          v388 = v923;
          if ((v386 & 0x18) == 0)
          {
            v390 = &v965->u8[v391];
            do
            {
LABEL_332:
              if (*v390++)
                ++v389;
            }
            while (v390 != (unsigned __int8 *)v970);
LABEL_335:
            v454.f64[0] = v921;
            v454.f64[1] = v920;
            v455.f64[0] = v919;
            v455.f64[1] = v388;
            v1047 = v454;
            *(float64x2_t *)v1048 = v455;
            v454.f64[0] = v914;
            v454.f64[1] = v917;
            v1050 = v915;
            *(_QWORD *)&v455.f64[0] = v918.i64[0];
            v455.f64[1] = v916;
            *(float64x2_t *)&v1048[16] = v454;
            v1049 = v455;
            if (*((_BYTE *)v387 + 420))
            {
              kdebug_trace();
              v456 = sub_20F165708((unsigned int **)&v1052, v904, &v1047);
              kdebug_trace();
              v388 = v923;
              if (!v913)
                goto LABEL_346;
            }
            else
            {
              v456 = 0;
              if (!v913)
                goto LABEL_346;
            }
            v457 = *(void **)(v912 + 96);
            if (v457)
            {
              *(_QWORD *)(v912 + 104) = v457;
              operator delete(v457);
              v388 = v923;
              *(_QWORD *)(v912 + 96) = 0;
              *(_QWORD *)(v912 + 104) = 0;
              *(_QWORD *)(v912 + 112) = 0;
            }
            *(_QWORD *)(v912 + 96) = v965;
            *(_QWORD *)(v912 + 104) = v970;
            *(double *)&v458 = v921;
            *((double *)&v458 + 1) = v920;
            *(_QWORD *)(v912 + 112) = v970;
            *(_OWORD *)(v912 + 120) = v458;
            *(double *)&v458 = v919;
            *((double *)&v458 + 1) = v388;
            *(double *)&v459 = v914;
            *((double *)&v459 + 1) = v917;
            *(_OWORD *)(v912 + 136) = v458;
            *(_OWORD *)(v912 + 152) = v459;
            *(double *)(v912 + 184) = v915;
            *(_QWORD *)&v458 = v918.i64[0];
            *((double *)&v458 + 1) = v916;
            *(_OWORD *)(v912 + 168) = v458;
            if (v456)
            {
              if (*(_BYTE *)(v912 + 264))
                *(_BYTE *)(v912 + 264) = 0;
              v385 = 0;
              v460 = v1049;
              *(_OWORD *)(v912 + 224) = *(_OWORD *)&v1048[16];
              *(float64x2_t *)(v912 + 240) = v460;
              *(double *)(v912 + 256) = v1050;
              v461 = *(_OWORD *)v1048;
              *(float64x2_t *)(v912 + 192) = v1047;
              *(_OWORD *)(v912 + 208) = v461;
              *(_BYTE *)(v912 + 264) = 1;
            }
            else
            {
              v385 = 0;
            }
LABEL_346:
            *(float *)v1056 = (float)v389 / (float)LODWORD(v1060[0]);
            if (*(float *)v1056 >= *v905)
            {
              if (v456)
              {
                *(_QWORD *)__dst = &off_24C9F9790;
                __dst[8] = 0;
                v475 = operator new();
                *(_QWORD *)v475 = 0;
                *(_BYTE *)(v475 + 23) = 0;
                *(_QWORD *)&__dst[16] = v475;
                v476 = (_QWORD *)operator new();
                *v476 = &unk_24C9C1198;
                v476[1] = 0;
                v476[2] = 0;
                v476[3] = v475;
                *(_QWORD *)&__dst[24] = v476;
                v1009 = *(_OWORD *)&v1048[16];
                v1010 = v1049;
                v1011 = v1050;
                v324.f64[1] = *(float64_t *)&v1048[8];
                *(float64x2_t *)&__dst[32] = v1047;
                v1008 = *(float64x2_t *)v1048;
                v1012 = 1;
              }
              else
              {
                v477 = (char *)operator new(0x30uLL);
                strcpy(v477, "Orientation Refinement failed for stream");
                *(_QWORD *)__dst = &off_24C9F9790;
                __dst[8] = 5;
                v478 = (_BYTE *)operator new();
                sub_20E860C04(v478, v477, 0x28uLL);
                *(_QWORD *)&__dst[16] = v478;
                v479 = (_QWORD *)operator new();
                *v479 = &unk_24C9C1198;
                v479[1] = 0;
                v479[2] = 0;
                v479[3] = v478;
                *(_QWORD *)&__dst[24] = v479;
                __dst[32] = 0;
                v1012 = 0;
                operator delete(v477);
              }
LABEL_376:
              if (v385)
                operator delete(v385);
              v339 = (void *)v1052.__r_.__value_.__r.__words[0];
              if (!v1052.__r_.__value_.__r.__words[0])
                goto LABEL_381;
              v1052.__r_.__value_.__l.__size_ = v1052.__r_.__value_.__r.__words[0];
LABEL_380:
              operator delete(v339);
LABEL_381:
              v481 = v1093;
              if (!v1093)
                goto LABEL_385;
              v482 = (unint64_t *)&v1093->__shared_owners_;
              do
                v483 = __ldaxr(v482);
              while (__stlxr(v483 - 1, v482));
              if (v483)
                goto LABEL_385;
              ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
              std::__shared_weak_count::__release_weak(v481);
              v326 = (void *)v1065.__r_.__value_.__r.__words[0];
              if (v1065.__r_.__value_.__r.__words[0])
                goto LABEL_386;
              goto LABEL_387;
            }
            LODWORD(v1043.f64[0]) = 0;
            sub_20E89F7C4((uint64_t)&v1066, (uint64_t)&v1042, (float *)v1056);
            if (LODWORD(v1043.f64[0]) == -1)
              sub_20E877AB8();
            v1066.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063;
            ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(&v1067, &v1066, &v1042);
            if (LODWORD(v1043.f64[0]) != -1)
              ((void (*)(std::string *, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(&v1066, &v1042);
            v462 = std::string::insert(&v1067, 0, "Does not meet inliers ratio criteria: ", 0x26uLL);
            v463 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
            v1068.__r_.__value_.__r.__words[2] = v462->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1068.__r_.__value_.__l.__data_ = v463;
            v462->__r_.__value_.__l.__size_ = 0;
            v462->__r_.__value_.__r.__words[2] = 0;
            v462->__r_.__value_.__r.__words[0] = 0;
            v464 = std::string::append(&v1068, " < ", 3uLL);
            v465 = *(_OWORD *)&v464->__r_.__value_.__l.__data_;
            v1069.__r_.__value_.__r.__words[2] = v464->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v1069.__r_.__value_.__l.__data_ = v465;
            v464->__r_.__value_.__l.__size_ = 0;
            v464->__r_.__value_.__r.__words[2] = 0;
            v464->__r_.__value_.__r.__words[0] = 0;
            LODWORD(v1043.f64[0]) = 0;
            sub_20E89F7C4((uint64_t)&v1063, (uint64_t)&v1042, v905);
            if (LODWORD(v1043.f64[0]) == -1)
              sub_20E877AB8();
            v1063.__r_.__value_.__r.__words[0] = (std::string::size_type)v1054;
            ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(&v1066, &v1063, &v1042);
            if (LODWORD(v1043.f64[0]) != -1)
              ((void (*)(std::string *, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(&v1063, &v1042);
            v466 = v385;
            if ((v1066.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v467 = &v1066;
            else
              v467 = (std::string *)v1066.__r_.__value_.__r.__words[0];
            if ((v1066.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v468 = HIBYTE(v1066.__r_.__value_.__r.__words[2]);
            else
              v468 = v1066.__r_.__value_.__l.__size_;
            v469 = std::string::append(&v1069, (const std::string::value_type *)v467, v468);
            v470 = (void *)v469->__r_.__value_.__r.__words[0];
            v471 = v469->__r_.__value_.__l.__size_;
            LODWORD(v1062.__r_.__value_.__l.__data_) = v469->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v1062.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v469->__r_.__value_.__r.__words[2]
                                                                                 + 3);
            v472 = SHIBYTE(v469->__r_.__value_.__r.__words[2]);
            v469->__r_.__value_.__l.__size_ = 0;
            v469->__r_.__value_.__r.__words[2] = 0;
            v469->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v1066.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v1066.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v1069.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_361:
                if ((SHIBYTE(v1068.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_362;
                goto LABEL_370;
              }
            }
            else if ((SHIBYTE(v1069.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_361;
            }
            operator delete(v1069.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1068.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_362:
              if ((SHIBYTE(v1067.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_363:
                *(_QWORD *)__dst = &off_24C9F9790;
                __dst[8] = 4;
                v473 = operator new();
                v474 = v473;
                if (v472 < 0)
                {
                  sub_20E860C04((_BYTE *)v473, v470, v471);
                }
                else
                {
                  *(_QWORD *)v473 = v470;
                  *(_QWORD *)(v473 + 8) = v471;
                  *(_DWORD *)(v473 + 16) = v1062.__r_.__value_.__l.__data_;
                  *(_DWORD *)(v473 + 19) = *(_DWORD *)((char *)v1062.__r_.__value_.__r.__words + 3);
                  *(_BYTE *)(v473 + 23) = v472;
                }
                *(_QWORD *)&__dst[16] = v474;
                v480 = (_QWORD *)operator new();
                *v480 = &unk_24C9C1198;
                v480[1] = 0;
                v480[2] = 0;
                v480[3] = v474;
                *(_QWORD *)&__dst[24] = v480;
                __dst[32] = 0;
                v1012 = 0;
                if (v472 < 0)
                  operator delete(v470);
                v385 = v466;
                goto LABEL_376;
              }
LABEL_371:
              operator delete(v1067.__r_.__value_.__l.__data_);
              goto LABEL_363;
            }
LABEL_370:
            operator delete(v1068.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v1067.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_363;
            goto LABEL_371;
          }
LABEL_327:
          v390 = &v965->u8[v386 & 0xFFFFFFFFFFFFFFF8];
          v438 = 0uLL;
          v439 = (int64x2_t)(unint64_t)v389;
          v440 = (int8x8_t *)&v965->i8[v391];
          v441 = v391 - (v386 & 0xFFFFFFFFFFFFFFF8);
          v442 = 0uLL;
          v443 = 0uLL;
          do
          {
            v444 = *v440++;
            v445 = (int8x16_t)vdupq_n_s64(1uLL);
            v446 = vmovl_u8((uint8x8_t)vtst_s8(v444, v444));
            v447 = vmovl_u16(*(uint16x4_t *)v446.i8);
            v448.i64[0] = v447.u32[0];
            v448.i64[1] = v447.u32[1];
            v449 = (int64x2_t)vandq_s8(v448, v445);
            v448.i64[0] = v447.u32[2];
            v448.i64[1] = v447.u32[3];
            v450 = (int64x2_t)vandq_s8(v448, v445);
            v451 = vmovl_high_u16(v446);
            v448.i64[0] = v451.u32[0];
            v448.i64[1] = v451.u32[1];
            v452 = (int64x2_t)vandq_s8(v448, v445);
            v448.i64[0] = v451.u32[2];
            v448.i64[1] = v451.u32[3];
            v443 = vaddq_s64(v443, (int64x2_t)vandq_s8(v448, v445));
            v442 = vaddq_s64(v442, v452);
            v438 = vaddq_s64(v438, v450);
            v439 = vaddq_s64(v439, v449);
            v441 += 8;
          }
          while (v441);
          v389 = vaddvq_s64(vaddq_s64(vaddq_s64(v439, v442), vaddq_s64(v438, v443)));
          if (v386 == (v386 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_335;
          goto LABEL_332;
        }
      }
      v102 = 1.0;
      v388 = v923;
      goto LABEL_335;
    }
    sub_20E9F6A6C((unsigned int *)v1060);
    v161 = std::string::insert(&v1042, 0, "Not enough lines detected: ", 0x1BuLL);
    v162 = *(float64x2_t *)&v161->__r_.__value_.__l.__data_;
    *(_QWORD *)v1048 = *((_QWORD *)&v161->__r_.__value_.__l + 2);
    v1047 = v162;
    v161->__r_.__value_.__l.__size_ = 0;
    v161->__r_.__value_.__r.__words[2] = 0;
    v161->__r_.__value_.__r.__words[0] = 0;
    v163 = std::string::append((std::string *)&v1047, " < ", 3uLL);
    v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
    *(_QWORD *)&v1076[16] = *((_QWORD *)&v163->__r_.__value_.__l + 2);
    *(_OWORD *)v1076 = v164;
    v163->__r_.__value_.__l.__size_ = 0;
    v163->__r_.__value_.__r.__words[2] = 0;
    v163->__r_.__value_.__r.__words[0] = 0;
    sub_20E9F6A6C(v910);
    if ((v1052.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v165 = &v1052;
    else
      v165 = (std::string *)v1052.__r_.__value_.__r.__words[0];
    if ((v1052.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v166 = HIBYTE(v1052.__r_.__value_.__r.__words[2]);
    else
      v166 = v1052.__r_.__value_.__l.__size_;
    v167 = std::string::append((std::string *)v1076, (const std::string::value_type *)v165, v166);
    v168 = (void *)v167->__r_.__value_.__r.__words[0];
    v169 = v167->__r_.__value_.__l.__size_;
    LODWORD(v1069.__r_.__value_.__l.__data_) = v167->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v1069.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v167->__r_.__value_.__r.__words[2]
                                                                         + 3);
    v170 = SHIBYTE(v167->__r_.__value_.__r.__words[2]);
    v167->__r_.__value_.__l.__size_ = 0;
    v167->__r_.__value_.__r.__words[2] = 0;
    v167->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v1052.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v1052.__r_.__value_.__l.__data_);
      if ((v1076[23] & 0x80000000) == 0)
      {
LABEL_145:
        if ((v1048[7] & 0x80000000) == 0)
          goto LABEL_146;
        goto LABEL_243;
      }
    }
    else if ((v1076[23] & 0x80000000) == 0)
    {
      goto LABEL_145;
    }
    operator delete(*(void **)v1076);
    if ((v1048[7] & 0x80000000) == 0)
    {
LABEL_146:
      if (SHIBYTE(v1042.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_244;
      goto LABEL_147;
    }
LABEL_243:
    operator delete(*(void **)&v1047.f64[0]);
    if (SHIBYTE(v1042.__r_.__value_.__r.__words[2]) < 0)
LABEL_244:
      operator delete(v1042.__r_.__value_.__l.__data_);
LABEL_147:
    *(_QWORD *)__dst = &off_24C9F9790;
    __dst[8] = 2;
    v171 = operator new();
    v172 = v171;
    if (v170 < 0)
    {
      sub_20E860C04((_BYTE *)v171, v168, v169);
    }
    else
    {
      *(_QWORD *)v171 = v168;
      *(_QWORD *)(v171 + 8) = v169;
      *(_DWORD *)(v171 + 16) = v1069.__r_.__value_.__l.__data_;
      *(_DWORD *)(v171 + 19) = *(_DWORD *)((char *)v1069.__r_.__value_.__r.__words + 3);
      *(_BYTE *)(v171 + 23) = v170;
    }
    *(_QWORD *)&__dst[16] = v172;
    v323 = (_QWORD *)operator new();
    *v323 = &unk_24C9C1198;
    v323[1] = 0;
    v323[2] = 0;
    v323[3] = v172;
    *(_QWORD *)&__dst[24] = v323;
    __dst[32] = 0;
    v1012 = 0;
    if ((v170 & 0x80000000) == 0)
    {
LABEL_385:
      v326 = (void *)v1065.__r_.__value_.__r.__words[0];
      if (!v1065.__r_.__value_.__r.__words[0])
        goto LABEL_387;
LABEL_386:
      v1065.__r_.__value_.__l.__size_ = (std::string::size_type)v326;
      operator delete(v326);
      goto LABEL_387;
    }
    operator delete(v168);
    v326 = (void *)v1065.__r_.__value_.__r.__words[0];
    if (v1065.__r_.__value_.__r.__words[0])
      goto LABEL_386;
LABEL_387:
    v484 = __dst[8];
    if (__dst[8])
    {
      sub_20E9F6B94((unint64_t *)&v1064);
      v485 = std::string::insert(&v1042, 0, "Stream ", 7uLL);
      v486 = *(float64x2_t *)&v485->__r_.__value_.__l.__data_;
      *(_QWORD *)v1048 = *((_QWORD *)&v485->__r_.__value_.__l + 2);
      v1047 = v486;
      v485->__r_.__value_.__l.__size_ = 0;
      v485->__r_.__value_.__r.__words[2] = 0;
      v485->__r_.__value_.__r.__words[0] = 0;
      v487 = std::string::append((std::string *)&v1047, " has error: ", 0xCuLL);
      v488 = *(_OWORD *)&v487->__r_.__value_.__l.__data_;
      *(_QWORD *)&v1076[16] = *((_QWORD *)&v487->__r_.__value_.__l + 2);
      *(_OWORD *)v1076 = v488;
      v487->__r_.__value_.__l.__size_ = 0;
      v487->__r_.__value_.__r.__words[2] = 0;
      v487->__r_.__value_.__r.__words[0] = 0;
      sub_20F15AFE8((uint64_t)&v1052, (uint64_t)__dst);
      if ((v1052.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v489 = &v1052;
      else
        v489 = (std::string *)v1052.__r_.__value_.__r.__words[0];
      if ((v1052.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v490 = HIBYTE(v1052.__r_.__value_.__r.__words[2]);
      else
        v490 = v1052.__r_.__value_.__l.__size_;
      v491 = std::string::append((std::string *)v1076, (const std::string::value_type *)v489, v490);
      v492 = v491->__r_.__value_.__r.__words[0];
      v493 = v491->__r_.__value_.__l.__size_;
      LODWORD(v1069.__r_.__value_.__l.__data_) = v491->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v1069.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v491->__r_.__value_.__r.__words[2]
                                                                           + 3);
      v494 = SHIBYTE(v491->__r_.__value_.__r.__words[2]);
      v491->__r_.__value_.__l.__size_ = 0;
      v491->__r_.__value_.__r.__words[2] = 0;
      v491->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v1052.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v1052.__r_.__value_.__l.__data_);
        if ((v1076[23] & 0x80000000) == 0)
        {
LABEL_396:
          if ((v1048[7] & 0x80000000) == 0)
            goto LABEL_397;
          goto LABEL_414;
        }
      }
      else if ((v1076[23] & 0x80000000) == 0)
      {
        goto LABEL_396;
      }
      operator delete(*(void **)v1076);
      if ((v1048[7] & 0x80000000) == 0)
      {
LABEL_397:
        if ((SHIBYTE(v1042.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_398;
LABEL_415:
        operator delete(v1042.__r_.__value_.__l.__data_);
LABEL_398:
        v495 = __dst[8];
        *(_QWORD *)v909 = &off_24C9F9790;
        *(_BYTE *)(v909 + 8) = v495;
        v496 = operator new();
        v497 = v496;
        if (v494 < 0)
        {
          sub_20E860C04((_BYTE *)v496, (void *)v492, v493);
        }
        else
        {
          *(_QWORD *)v496 = v492;
          *(_QWORD *)(v496 + 8) = v493;
          *(_DWORD *)(v496 + 16) = v1069.__r_.__value_.__l.__data_;
          *(_DWORD *)(v496 + 19) = *(_DWORD *)((char *)v1069.__r_.__value_.__r.__words + 3);
          *(_BYTE *)(v496 + 23) = v494;
        }
        *(_QWORD *)(v909 + 16) = v497;
        v515 = (_QWORD *)operator new();
        *v515 = &unk_24C9C1198;
        v515[1] = 0;
        v515[2] = 0;
        v515[3] = v497;
        *(_QWORD *)(v909 + 24) = v515;
        *(_BYTE *)(v909 + 32) = 0;
        *(_BYTE *)(v909 + 104) = 0;
        if (v494 < 0)
        {
          operator delete((void *)v492);
          *(_QWORD *)__dst = &off_24C9F9790;
          v514 = *(std::__shared_weak_count **)&__dst[24];
          if (!*(_QWORD *)&__dst[24])
            goto LABEL_431;
          goto LABEL_419;
        }
LABEL_418:
        *(_QWORD *)__dst = &off_24C9F9790;
        v514 = *(std::__shared_weak_count **)&__dst[24];
        if (!*(_QWORD *)&__dst[24])
          goto LABEL_431;
        goto LABEL_419;
      }
LABEL_414:
      operator delete(*(void **)&v1047.f64[0]);
      if ((SHIBYTE(v1042.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_398;
      goto LABEL_415;
    }
    v498 = v1064.__r_.__value_.__r.__words[0];
    v492 = (unint64_t)v1013;
    v499 = (char *)v1013 + 112 * v1064.__r_.__value_.__r.__words[0];
    v499[8] = 0;
    v500 = *(_QWORD *)&__dst[16];
    v501 = *(_QWORD *)&__dst[24];
    if (*(_QWORD *)&__dst[24])
    {
      v502 = (unint64_t *)(*(_QWORD *)&__dst[24] + 8);
      do
        v503 = __ldxr(v502);
      while (__stxr(v503 + 1, v502));
    }
    v504 = (std::__shared_weak_count *)*((_QWORD *)v499 + 3);
    *((_QWORD *)v499 + 2) = v500;
    *((_QWORD *)v499 + 3) = v501;
    if (v504)
    {
      v505 = (unint64_t *)&v504->__shared_owners_;
      do
        v506 = __ldaxr(v505);
      while (__stlxr(v506 - 1, v505));
      if (!v506)
      {
        ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
        std::__shared_weak_count::__release_weak(v504);
      }
    }
    v507 = v492 + 112 * v498;
    v510 = *(unsigned __int8 *)(v507 + 104);
    v508 = (double *)(v507 + 104);
    v509 = v510;
    v511 = v508 - 9;
    if (v510 == v1012)
    {
      if (v509)
      {
        *(_OWORD *)v511 = *(_OWORD *)&__dst[32];
        v324 = v1008;
        v512 = v1009;
        v513 = v1010;
        *(v508 - 1) = v1011;
        *(_OWORD *)(v508 - 5) = v512;
        *(float64x2_t *)(v508 - 3) = v513;
        *(float64x2_t *)(v508 - 7) = v324;
        *(_QWORD *)__dst = &off_24C9F9790;
        v514 = *(std::__shared_weak_count **)&__dst[24];
        if (!*(_QWORD *)&__dst[24])
          goto LABEL_431;
        goto LABEL_419;
      }
      goto LABEL_418;
    }
    if (v509)
    {
      *(_BYTE *)v508 = 0;
      *(_QWORD *)__dst = &off_24C9F9790;
      v514 = *(std::__shared_weak_count **)&__dst[24];
      if (!*(_QWORD *)&__dst[24])
        goto LABEL_431;
    }
    else
    {
      *(_OWORD *)v511 = *(_OWORD *)&__dst[32];
      v324 = v1008;
      v518 = v1009;
      v519 = v1010;
      *(v508 - 1) = v1011;
      *(_OWORD *)(v508 - 5) = v518;
      *(float64x2_t *)(v508 - 3) = v519;
      *(float64x2_t *)(v508 - 7) = v324;
      *(_BYTE *)v508 = 1;
      *(_QWORD *)__dst = &off_24C9F9790;
      v514 = *(std::__shared_weak_count **)&__dst[24];
      if (!*(_QWORD *)&__dst[24])
        goto LABEL_431;
    }
LABEL_419:
    v516 = (unint64_t *)&v514->__shared_owners_;
    do
      v517 = __ldaxr(v516);
    while (__stlxr(v517 - 1, v516));
    if (!v517)
    {
      ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
      std::__shared_weak_count::__release_weak(v514);
    }
LABEL_431:
    if (v484)
      goto LABEL_750;
    v98 = v912;
    v103 = v911 + 488;
    v101 = v924 + 1;
    v6 = (char **)v986;
  }
  while ((char *)(v911 + 488) != v907);
  v520 = (char *)v1014;
  v521 = (char *)v1013;
  if (v1013 == v1014)
    goto LABEL_434;
  v526 = 0x6DB6DB6DB6DB6DB7 * (((char *)v1014 - (_BYTE *)v1013) >> 4);
  v527 = v1040;
  v528 = v1039;
  if (v526 != 0x4FBCDA3AC10C9715 * ((v1040 - (_BYTE *)v1039) >> 3)
    || v526 != 0xAAAAAAAAAAAAAAABLL * (((char *)v1017 - (_BYTE *)v1016) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 501, (uint64_t)"stream_returns.size() == stream_inputs.size() && stream_returns.size() == stream_normals.size()", 95, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v520 = (char *)v1014;
    v521 = (char *)v1013;
  }
  if (v520 - v521 == 112)
  {
    v529 = v521[8];
    if (v529)
    {
      *(_QWORD *)v1076 = &off_24C9F9790;
      v1076[8] = v529;
      v530 = *((_QWORD *)v521 + 3);
      *(_QWORD *)&v1076[16] = *((_QWORD *)v521 + 2);
      *(_QWORD *)&v1076[24] = v530;
      if (v530)
      {
        v531 = (unint64_t *)(v530 + 8);
        do
          v532 = __ldxr(v531);
        while (__stxr(v532 + 1, v531));
      }
      LOBYTE(v1077.f64[0]) = 0;
      LOBYTE(v1081) = 0;
      v523 = v909;
      if (!v521[104])
        goto LABEL_713;
      v1077 = *((float64x2_t *)v521 + 2);
      v533 = *((_OWORD *)v521 + 3);
      v534 = *((_OWORD *)v521 + 4);
      v535 = *((float64x2_t *)v521 + 5);
      v1080 = *((double *)v521 + 12);
      *(_OWORD *)&v1078[16] = v534;
      v1079 = v535;
      *(_OWORD *)v1078 = v533;
      LOBYTE(v1081) = 1;
      if (!v1076[8])
        goto LABEL_723;
      goto LABEL_714;
    }
  }
  __dst[0] = 0;
  BYTE8(v1009) = 0;
  if (v520 == v521)
  {
    v536 = 0;
    v537 = 0;
LABEL_454:
    if (v528 == v527)
    {
      v538 = 0;
      goto LABEL_456;
    }
  }
  else
  {
    v492 = 0x6DB6DB6DB6DB6DB7 * ((v520 - v521) >> 4);
    if (v492 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    v536 = (float64x2_t *)operator new(0xDB6DB6DB6DB6DB78 * ((v520 - v521) >> 4));
    v537 = (float64x2_t *)((char *)v536 - 0x2492492492492488 * ((v520 - v521) >> 4));
    if (v521 == v520)
      goto LABEL_454;
  }
  LODWORD(v492) = -1908874354;
  v549 = v986 + 95;
  v514 = (std::__shared_weak_count *)__dst;
  v931 = v536;
  while (2)
  {
    if (v521[8])
    {
      sub_20F15AFE8((uint64_t)&v1047, (uint64_t)v521);
      v658 = std::string::insert((std::string *)&v1047, 0, "Stream return has error: ", 0x19uLL);
      v523 = v909;
      v659 = (void *)v658->__r_.__value_.__r.__words[0];
      v660 = v658->__r_.__value_.__l.__size_;
      v1051[0] = v658->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v1051 + 3) = *(_DWORD *)((char *)&v658->__r_.__value_.__r.__words[2] + 3);
      v661 = HIBYTE(v658->__r_.__value_.__r.__words[2]);
      v658->__r_.__value_.__l.__size_ = 0;
      v658->__r_.__value_.__r.__words[2] = 0;
      v658->__r_.__value_.__r.__words[0] = 0;
      if ((v1048[7] & 0x80000000) == 0)
        goto LABEL_802;
      v662 = *(_QWORD *)&v1047.f64[0];
      goto LABEL_801;
    }
    if (!v521[104])
      sub_20E866B34();
    v550 = (const double *)((char *)v528 + 408);
    v1095 = vld3q_f64(v550);
    v550 += 6;
    v551 = *((double *)v528 + 59);
    _Q4 = *(_OWORD *)v550;
    v553 = *((double *)v521 + 6);
    v554 = *((double *)v521 + 9);
    v555 = *((double *)v521 + 12);
    v556 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1095.val[0], *((double *)v521 + 4)), v1095.val[1], *((float64x2_t *)v521 + 2), 1), v1095.val[2], v553);
    _D6 = *((_QWORD *)v521 + 5);
    __asm { FMLA            D20, D6, V4.D[1] }
    v559 = _D20 + v551 * v553;
    v560 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1095.val[0], *((double *)v521 + 7)), v1095.val[1], *(float64x2_t *)(v521 + 56), 1), v1095.val[2], v554);
    _D16 = *((_QWORD *)v521 + 8);
    __asm { FMLA            D20, D16, V4.D[1] }
    v563 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1095.val[0], *((double *)v521 + 10)), v1095.val[1], *((float64x2_t *)v521 + 5), 1), v1095.val[2], v555);
    v1095.val[1].f64[0] = *((float64_t *)v521 + 11);
    __asm { FMLA            D0, D1, V4.D[1] }
    v1047 = v556;
    *(float64x2_t *)&v1048[8] = v560;
    *(double *)v1048 = v559;
    *(double *)&v1048[24] = _D20 + v551 * v554;
    v1049 = v563;
    v1050 = v1095.val[0].f64[0] + v551 * v555;
    if (v536 < v537)
    {
      *v536 = v1047;
      v564 = *(float64x2_t *)v1048;
      v565 = *(float64x2_t *)&v1048[16];
      v566 = v1049;
      v536[4].f64[0] = v1050;
      v536[2] = v565;
      v536[3] = v566;
      v536[1] = v564;
      v536 = (float64x2_t *)((char *)v536 + 72);
      goto LABEL_480;
    }
    v567 = 0x8E38E38E38E38E39 * (((char *)v536 - (char *)v931) >> 3) + 1;
    if (v567 > 0x38E38E38E38E38ELL)
      sub_20E867F44();
    if (0x1C71C71C71C71C72 * (((char *)v537 - (char *)v931) >> 3) > v567)
      v567 = 0x1C71C71C71C71C72 * (((char *)v537 - (char *)v931) >> 3);
    if (0x8E38E38E38E38E39 * (((char *)v537 - (char *)v931) >> 3) >= 0x1C71C71C71C71C7)
      v568 = 0x38E38E38E38E38ELL;
    else
      v568 = v567;
    if (v568)
    {
      if (v568 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v569 = (char *)operator new(72 * v568);
    }
    else
    {
      v569 = 0;
    }
    v570 = &v569[8 * (((char *)v536 - (char *)v931) >> 3)];
    v571 = v1049;
    *((_OWORD *)v570 + 2) = *(_OWORD *)&v1048[16];
    *((float64x2_t *)v570 + 3) = v571;
    *((double *)v570 + 8) = v1050;
    v572 = *(_OWORD *)v1048;
    *(float64x2_t *)v570 = v1047;
    *((_OWORD *)v570 + 1) = v572;
    if (v536 == v931)
    {
      v575 = &v569[8 * (((char *)v536 - (char *)v931) >> 3)];
      v574 = v931;
      v537 = (float64x2_t *)&v569[72 * v568];
      v536 = (float64x2_t *)(v570 + 72);
      if (v931)
        goto LABEL_478;
    }
    else
    {
      v573 = &v569[8 * (((char *)v536 - (char *)v931) >> 3)];
      v574 = v931;
      do
      {
        v575 = v573 - 72;
        *(float64x2_t *)(v573 - 72) = *(float64x2_t *)((char *)v536 - 72);
        v576 = *(__int128 *)((char *)&v536[-4] + 8);
        v577 = *(__int128 *)((char *)&v536[-3] + 8);
        v578 = *(__int128 *)((char *)&v536[-2] + 8);
        *((_QWORD *)v573 - 1) = *(_QWORD *)&v536[-1].f64[1];
        *(_OWORD *)(v573 - 24) = v578;
        *(_OWORD *)(v573 - 40) = v577;
        *(_OWORD *)(v573 - 56) = v576;
        v536 = (float64x2_t *)((char *)v536 - 72);
        v573 -= 72;
      }
      while (v536 != v931);
      v537 = (float64x2_t *)&v569[72 * v568];
      v536 = (float64x2_t *)(v570 + 72);
      if (v931)
LABEL_478:
        operator delete(v574);
    }
    v931 = (float64x2_t *)v575;
LABEL_480:
    v579 = BYTE8(v1009);
    if (BYTE8(v1009))
      v580 = (float64x2_t *)__dst;
    else
      v580 = &v1047;
    memmove(__dst, v580, 0x48uLL);
    if (!v579)
      BYTE8(v1009) = 1;
    v581.f64[0] = *(float64_t *)&__dst[16];
    _V4.D[1] = v1008.f64[1];
    v583 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__dst, *(int64x2_t *)&__dst[24]);
    _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__dst, *(int64x2_t *)&__dst[24]);
    v581.f64[1] = *(float64_t *)&__dst[40];
    v585 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v583, v1047.f64[0]), _Q1, v1047, 1), v581, *(double *)v1048);
    _D5 = v1047.f64[1];
    __asm { FMLA            D2, D5, V4.D[1] }
    v588 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v583, *(double *)&v1048[8]), _Q1, *(float64x2_t *)&v1048[8], 1), v581, *(double *)&v1048[24]);
    _D16 = *(_QWORD *)&v1048[16];
    __asm { FMLA            D6, D16, V4.D[1] }
    v591 = vmlaq_laneq_f64(vmulq_n_f64(v583, v1049.f64[0]), _Q1, v1049, 1);
    _D16 = v1049.f64[1];
    __asm { FMLA            D1, D16, V4.D[1] }
    *(float64x2_t *)&v1042.__r_.__value_.__l.__data_ = v585;
    *(double *)&v1042.__r_.__value_.__r.__words[2] = _D2 + *(double *)&v1009 * *(double *)v1048;
    v1044 = _D6 + *(double *)&v1009 * *(double *)&v1048[24];
    v1043 = v588;
    v1046 = _Q1.f64[0] + *(double *)&v1009 * v1050;
    v1045 = vmlaq_n_f64(v591, v581, v1050);
    LODWORD(v1064.__r_.__value_.__l.__data_) = 0;
    memset(&v1052, 0, sizeof(v1052));
    sub_20E9733B8((float64x2_t *)&v1042, (double *)&v1052);
    _V1.D[1] = v1052.__r_.__value_.__l.__size_;
    _Q3.i64[0] = v1052.__r_.__value_.__l.__size_;
    __asm { FMLA            D2, D3, V1.D[1] }
    *(float *)v324.f64 = sqrt(_D2+ *(double *)&v1052.__r_.__value_.__r.__words[2]* *(double *)&v1052.__r_.__value_.__r.__words[2]);
    LODWORD(v1064.__r_.__value_.__l.__data_) = LODWORD(v324.f64[0]);
    v6 = (char **)v986;
    if (*v549 < *(float *)v324.f64)
    {
      v1053 = 0;
      sub_20E89F7C4((uint64_t)&v1066, (uint64_t)&v1052, (float *)&v1064);
      v523 = v909;
      if (v1053 == -1)
        sub_20E877AB8();
      v1066.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1065;
      ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9F97F0[v1053])(&v1067, &v1066, &v1052);
      if (v1053 != -1)
        ((void (*)(std::string *, std::string *))off_24C9F97D8[v1053])(&v1066, &v1052);
      v663 = std::string::insert(&v1067, 0, "Multiple camera orientation difference ", 0x27uLL);
      v664 = *(_OWORD *)&v663->__r_.__value_.__l.__data_;
      v1068.__r_.__value_.__r.__words[2] = v663->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1068.__r_.__value_.__l.__data_ = v664;
      v663->__r_.__value_.__l.__size_ = 0;
      v663->__r_.__value_.__r.__words[2] = 0;
      v663->__r_.__value_.__r.__words[0] = 0;
      v665 = std::string::append(&v1068, " > ", 3uLL);
      v666 = *(_OWORD *)&v665->__r_.__value_.__l.__data_;
      v1069.__r_.__value_.__r.__words[2] = v665->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v1069.__r_.__value_.__l.__data_ = v666;
      v665->__r_.__value_.__l.__size_ = 0;
      v665->__r_.__value_.__r.__words[2] = 0;
      v665->__r_.__value_.__r.__words[0] = 0;
      v1053 = 0;
      sub_20E89F7C4((uint64_t)&v1065, (uint64_t)&v1052, v549);
      if (v1053 == -1)
        sub_20E877AB8();
      v1065.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1063;
      ((void (*)(std::string *__return_ptr, std::string *, std::string *))off_24C9F97F0[v1053])(&v1066, &v1065, &v1052);
      if (v1053 != -1)
        ((void (*)(std::string *, std::string *))off_24C9F97D8[v1053])(&v1065, &v1052);
      if ((v1066.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v667 = &v1066;
      else
        v667 = (std::string *)v1066.__r_.__value_.__r.__words[0];
      if ((v1066.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v668 = HIBYTE(v1066.__r_.__value_.__r.__words[2]);
      else
        v668 = v1066.__r_.__value_.__l.__size_;
      v669 = std::string::append(&v1069, (const std::string::value_type *)v667, v668);
      v659 = (void *)v669->__r_.__value_.__r.__words[0];
      v660 = v669->__r_.__value_.__l.__size_;
      v1051[0] = v669->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v1051 + 3) = *(_DWORD *)((char *)&v669->__r_.__value_.__r.__words[2] + 3);
      v661 = HIBYTE(v669->__r_.__value_.__r.__words[2]);
      v669->__r_.__value_.__l.__size_ = 0;
      v669->__r_.__value_.__r.__words[2] = 0;
      v669->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v1066.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v1069.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_540;
LABEL_798:
        operator delete(v1069.__r_.__value_.__l.__data_);
        if (SHIBYTE(v1068.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_799;
LABEL_541:
        if (SHIBYTE(v1067.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_800;
LABEL_802:
        *(_QWORD *)v1076 = &off_24C9F9790;
        v1076[8] = 6;
        v843 = operator new();
        v844 = v843;
        if (v661 < 0)
        {
          sub_20E860C04((_BYTE *)v843, v659, v660);
        }
        else
        {
          *(_QWORD *)v843 = v659;
          *(_QWORD *)(v843 + 8) = v660;
          *(_DWORD *)(v843 + 16) = v1051[0];
          *(_DWORD *)(v843 + 19) = *(_DWORD *)((char *)v1051 + 3);
          *(_BYTE *)(v843 + 23) = v661;
        }
        *(_QWORD *)&v1076[16] = v844;
        v845 = (_QWORD *)operator new();
        *v845 = &unk_24C9C1198;
        v845[1] = 0;
        v845[2] = 0;
        v845[3] = v844;
        *(_QWORD *)&v1076[24] = v845;
        LOBYTE(v1077.f64[0]) = 0;
        LOBYTE(v1081) = 0;
        v784 = v931;
        if (v931)
          goto LABEL_711;
        goto LABEL_712;
      }
      operator delete(v1066.__r_.__value_.__l.__data_);
      if (SHIBYTE(v1069.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_798;
LABEL_540:
      if ((SHIBYTE(v1068.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_541;
LABEL_799:
      operator delete(v1068.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v1067.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_802;
LABEL_800:
      v662 = v1067.__r_.__value_.__r.__words[0];
LABEL_801:
      operator delete((void *)v662);
      goto LABEL_802;
    }
    v521 += 112;
    v528 = (char *)v528 + 488;
    if (v521 != v520 || v528 != v527)
      continue;
    break;
  }
  v670 = (char *)v536 - (char *)v931;
  _ZF = v536 == v931;
  v536 = v931;
  v538 = v670 / 72;
  if (!_ZF)
  {
    v528 = 0;
    v539.f64[0] = 0.0;
    _Q3.i64[0] = 0;
    v325.f64[0] = 0.0;
    do
    {
      v985 = v325;
      v993 = _Q3;
      v1001 = v539.f64[0];
      v1047 = 0uLL;
      *(_QWORD *)v1048 = 0;
      sub_20E9733B8((float64x2_t *)((char *)v528 + (_QWORD)v931), v1047.f64);
      v324.f64[0] = *(float64_t *)v1048;
      v325 = vaddq_f64(v985, v324);
      *(_QWORD *)&v324.f64[1] = v993.i64[1];
      v671.f64[0] = v1001;
      *(_QWORD *)&v671.f64[1] = v993.i64[0];
      v539 = vaddq_f64(v671, v1047);
      _Q3 = vextq_s8((int8x16_t)v539, (int8x16_t)v539, 8uLL);
      v528 = (char *)v528 + 72;
    }
    while ((void *)(72 * v538) != v528);
    goto LABEL_457;
  }
LABEL_456:
  v539.f64[0] = 0.0;
  _Q3.i64[0] = 0;
  v325.f64[0] = 0.0;
LABEL_457:
  v324.f64[0] = (double)(unint64_t)v538;
  *(_QWORD *)&v541 = *(_OWORD *)&vdivq_f64(v325, v324);
  *(_QWORD *)&v539.f64[1] = _Q3.i64[0];
  _Q17 = vdivq_f64(v539, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)v538), 0));
  _D9 = _Q17.f64[1];
  __asm { FMLA            D3, D9, V17.D[1] }
  v545 = vmlad_n_f64(_D3, v541, v541);
  v523 = v909;
  if (v545 >= 0.0000002635)
  {
    v624 = sqrt(v545);
    v992 = _Q17.f64[0];
    v1000 = v541;
    v983 = v545;
    v625 = __sincos_stret(v624);
    cosval = v625.__cosval;
    _Q17.f64[0] = v992;
    v541 = v1000;
    v547 = v625.__sinval / v624;
    v546 = 1.0 / v983 * (1.0 - v625.__cosval);
  }
  else
  {
    v546 = 0.5 - v545 * (v545 / -720.0 + 0.0416666667);
    v547 = 1.0 - v545 * (0.166666667 - v545 * (v545 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v545 * v546;
  }
  v626 = _D9 * v546;
  v627 = cosval + _Q17.f64[0] * (_Q17.f64[0] * v546);
  v628 = cosval + _D9 * (_D9 * v546);
  v629 = cosval + v541 * (v541 * v546);
  v630 = _D9 * (_Q17.f64[0] * v546);
  v631 = v541 * (_Q17.f64[0] * v546);
  v632 = v541 * v626;
  v633 = _Q17.f64[0] * v547;
  v634 = _D9 * v547;
  v635 = v541 * v547;
  v636 = v630 - v635;
  v637 = v630 + v635;
  v638 = v632 - v633;
  *(double *)&v639 = v631 - v634;
  v640 = v633 + v632;
  v978 = v631 - v634;
  v984 = v627;
  v957 = v636;
  v961 = v638;
  *((double *)&v639 + 1) = v636;
  v966 = v634 + v631;
  v971 = v628;
  v641.f64[0] = v634 + v631;
  v641.f64[1] = v638;
  v642.f64[0] = v627;
  v975 = v637;
  v642.f64[1] = v637;
  *(double *)&v643 = v628;
  v953 = v640;
  *((double *)&v643 + 1) = v640;
  v1050 = v629;
  v1049 = v641;
  *(_OWORD *)&v1048[16] = v643;
  *(_OWORD *)v1048 = v639;
  v1047 = v642;
  v932 = v536;
  if (!*((_BYTE *)v6 + 325))
  {
    v651 = 0;
    v652 = 0;
    v653 = 0;
    goto LABEL_522;
  }
  v644 = *((float *)v6 + 102);
  v514 = v1017;
  v645 = (std::__shared_weak_count *)v1016;
  v646 = (char *)v1039;
  v926 = v1040;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v1017 - (_BYTE *)v1016) >> 3) != 0x4FBCDA3AC10C9715
                                                                       * ((v1040 - (_BYTE *)v1039) >> 3))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 395, (uint64_t)"stream_normals.size() == stream_inputs.size()", 45, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v645 = (std::__shared_weak_count *)v1016;
    v514 = v1017;
  }
  if (v645 == v514)
  {
    v672 = 0;
    m = 0;
    memset(&v1042, 0, sizeof(v1042));
  }
  else
  {
    v647 = (char *)v514 - (char *)v645 - 24;
    if (v647 >= 0xC0)
    {
      v679 = v647 / 0x18 + 1;
      v680 = v679 & 7;
      if ((v679 & 7) == 0)
        v680 = 8;
      v681 = v679 - v680;
      v648 = &v645[v681];
      v682 = 0uLL;
      v650 = v645;
      v683 = 0uLL;
      do
      {
        v684 = (const double *)v645;
        v1096 = vld3q_f64(v684);
        v684 += 6;
        v685 = (const double *)&v645[4];
        v686 = (const double *)&v645[6];
        v1097 = vld3q_f64(v685);
        v1098 = vld3q_f64(v686);
        v1099 = vld3q_f64(v684);
        v1096.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v1096.val[1], (int64x2_t)v1096.val[0]);
        v1096.val[1] = (float64x2_t)vsubq_s64((int64x2_t)v1097.val[1], (int64x2_t)v1097.val[0]);
        v1096.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v1096.val[0], 2uLL);
        *(_QWORD *)&v1096.val[0].f64[0] = (-1431655765 * LODWORD(v1096.val[0].f64[0]));
        v1096.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v1098.val[1], (int64x2_t)v1098.val[0]), 2uLL);
        *(_QWORD *)&v1096.val[0].f64[1] = (-1431655765 * LODWORD(v1096.val[0].f64[1]));
        v1097.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v1099.val[1], (int64x2_t)v1099.val[0]), 2uLL);
        *(_QWORD *)&v1096.val[2].f64[0] = (-1431655765 * LODWORD(v1096.val[2].f64[0]));
        v1096.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)v1096.val[1], 2uLL);
        *(_QWORD *)&v1096.val[2].f64[1] = (-1431655765 * LODWORD(v1096.val[2].f64[1]));
        *(_QWORD *)&v1096.val[1].f64[0] = (-1431655765 * LODWORD(v1096.val[1].f64[0]));
        *(_QWORD *)&v1097.val[0].f64[0] = (-1431655765 * LODWORD(v1097.val[0].f64[0]));
        *(_QWORD *)&v1096.val[1].f64[1] = (-1431655765 * LODWORD(v1096.val[1].f64[1]));
        *(_QWORD *)&v1097.val[0].f64[1] = (-1431655765 * LODWORD(v1097.val[0].f64[1]));
        v682 = vaddq_s32(v682, vuzp1q_s32((int32x4_t)v1096.val[0], (int32x4_t)v1097.val[0]));
        v683 = vaddq_s32(v683, vuzp1q_s32((int32x4_t)v1096.val[1], (int32x4_t)v1096.val[2]));
        v645 += 8;
        v681 -= 8;
      }
      while (v681);
      LODWORD(v649) = vaddvq_s32(vaddq_s32(v683, v682));
    }
    else
    {
      v648 = v645;
      LODWORD(v649) = 0;
      v650 = v645;
    }
    do
    {
      v687 = v648->__vftable;
      shared_owners = v648->__shared_owners_;
      ++v648;
      v649 = v649 - 1431655765 * ((unint64_t)(shared_owners - (_QWORD)v687) >> 2);
    }
    while (v648 != v514);
    memset(&v1042, 0, sizeof(v1042));
    if ((_DWORD)v649)
    {
      m = (char *)operator new(32 * v649);
      v672 = (std::string::size_type)&m[32 * v649];
      v1042.__r_.__value_.__r.__words[0] = (std::string::size_type)m;
      v1042.__r_.__value_.__l.__size_ = (std::string::size_type)m;
      v1042.__r_.__value_.__r.__words[2] = v672;
      v645 = v650;
      if (v650 != v514)
        goto LABEL_566;
    }
    else
    {
      v672 = 0;
      m = 0;
      v645 = v650;
      if (v650 != v514)
        goto LABEL_566;
    }
  }
  if (v646 == v926)
  {
    v653 = 0;
    LODWORD(v492) = 0;
    LODWORD(v538) = 0;
    LODWORD(v528) = 0;
    LODWORD(v514) = 0;
    v652 = 0;
    goto LABEL_625;
  }
LABEL_566:
  v929 = &v514->__vftable;
  v653 = 0;
  v944 = 0;
  v948 = 0;
  LODWORD(v528) = 0;
  LODWORD(v514) = 0;
  v689 = 0;
  v690 = v644;
  v691 = (std::string::size_type)m;
  while (2)
  {
    v937 = (int)v514;
    v934 = v646;
    v692 = v646 + 408;
    v514 = (std::__shared_weak_count *)v645->__vftable;
    v693 = (std::__shared_weak_count *)v645->__shared_owners_;
    v940 = &v645->__vftable;
    v694 = v645->__vftable;
    v695 = m;
    if ((std::__shared_weak_count *)v645->__vftable == v693)
      goto LABEL_622;
    while (2)
    {
      _D1 = *((float *)&v514->__vftable + 1);
      v697 = *(float *)&v514->__shared_owners_;
      v698.f64[0] = *((float64_t *)v692 + 2);
      _Q4 = *(int64x2_t *)v692;
      _Q6 = *(int64x2_t *)(v692 + 24);
      v701 = *((double *)v692 + 8);
      _Q16 = *((_OWORD *)v692 + 3);
      __asm { FMLA            D17, D1, V4.D[1] }
      v704 = _D17 + v697 * v698.f64[0];
      __asm { FMLA            D17, D1, V6.D[1] }
      v706 = _D17 + v697 * *((double *)v692 + 5);
      __asm { FMLA            D17, D1, V16.D[1] }
      v708 = _D17 + v697 * v701;
      v698.f64[1] = *((float64_t *)v692 + 5);
      v709 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v692, _Q6), *(float *)&v514->__vftable), (float64x2_t)vzip2q_s64(*(int64x2_t *)v692, _Q6), _D1), v698, v697);
      v710 = _D17 + v701 * v697;
      v711 = vextq_s8(v709, v709, 8uLL).u64[0];
      v712 = fabs(v704 * v984 + v706 * v975 + v708 * v978);
      if (v712 < v690)
      {
        if (v691 >= v672)
        {
          v714 = (uint64_t)(v691 - (_QWORD)v695) >> 5;
          v715 = v714 + 1;
          if ((unint64_t)(v714 + 1) >> 59)
            goto LABEL_910;
          v994 = v711;
          v1002 = v709.i64[0];
          if ((uint64_t)(v672 - (_QWORD)v695) >> 4 > v715)
            v715 = (uint64_t)(v672 - (_QWORD)v695) >> 4;
          if (v672 - (unint64_t)v695 >= 0x7FFFFFFFFFFFFFE0)
            v716 = 0x7FFFFFFFFFFFFFFLL;
          else
            v716 = v715;
          if (v716 >> 59)
            goto LABEL_909;
          v717 = (char *)operator new(32 * v716);
          v718 = &v717[32 * v714];
          *(_DWORD *)v718 = 0;
          *((double *)v718 + 3) = v710;
          v711 = v994;
          v709.i64[0] = v1002;
          *(_QWORD *)&v719 = v1002;
          *((_QWORD *)&v719 + 1) = v994;
          *(_OWORD *)(v718 + 8) = v719;
          for (m = v718; (void *)v691 != v695; *(_OWORD *)(m + 8) = v721)
          {
            v720 = *(_DWORD *)(v691 - 32);
            v691 -= 32;
            *((_DWORD *)m - 8) = v720;
            m -= 32;
            v721 = *(_OWORD *)(v691 + 8);
            *((_QWORD *)m + 3) = *(_QWORD *)(v691 + 24);
          }
          v672 = (std::string::size_type)&v717[32 * v716];
          v691 = (std::string::size_type)(v718 + 32);
          v1042.__r_.__value_.__r.__words[0] = (std::string::size_type)m;
          v1042.__r_.__value_.__r.__words[2] = v672;
          if (v695)
          {
            operator delete(v695);
            v711 = v994;
            v709.i64[0] = v1002;
          }
          v695 = m;
        }
        else
        {
          *(_DWORD *)v691 = 0;
          *(double *)(v691 + 24) = v710;
          *(_QWORD *)&v713 = v709.i64[0];
          *((_QWORD *)&v713 + 1) = v711;
          *(_OWORD *)(v691 + 8) = v713;
          v691 += 32;
        }
        v722 = v689 + (v653 << 8) + 1;
        v689 = (v689 + 1);
        v653 = v722 >> 8;
        v1042.__r_.__value_.__l.__size_ = v691;
      }
      v723 = v704 * v957 + v706 * v971 + v708 * v953;
      v724 = v704 * v966 + v706 * v961 + v708 * v629;
      if (fabs(v723) >= v690)
      {
        if (fabs(v724) < v690)
        {
LABEL_608:
          if (v691 < v672)
          {
            *(_DWORD *)v691 = 2;
            *(double *)(v691 + 24) = v710;
            v709.i64[1] = v711;
            *(int8x16_t *)(v691 + 8) = v709;
            v691 += 32;
          }
          else
          {
            v734 = (uint64_t)(v691 - (_QWORD)v695) >> 5;
            v735 = v734 + 1;
            if ((unint64_t)(v734 + 1) >> 59)
LABEL_910:
              sub_20E867F44();
            v996 = v711;
            v1004 = v709.i64[0];
            if ((uint64_t)(v672 - (_QWORD)v695) >> 4 > v735)
              v735 = (uint64_t)(v672 - (_QWORD)v695) >> 4;
            if (v672 - (unint64_t)v695 >= 0x7FFFFFFFFFFFFFE0)
              v736 = 0x7FFFFFFFFFFFFFFLL;
            else
              v736 = v735;
            if (v736 >> 59)
LABEL_909:
              sub_20E877A38();
            v737 = (char *)operator new(32 * v736);
            v738 = &v737[32 * v734];
            *(_DWORD *)v738 = 2;
            *((double *)v738 + 3) = v710;
            *(_QWORD *)&v739 = v1004;
            *((_QWORD *)&v739 + 1) = v996;
            *(_OWORD *)(v738 + 8) = v739;
            for (m = v738; (void *)v691 != v695; *(_OWORD *)(m + 8) = v741)
            {
              v740 = *(_DWORD *)(v691 - 32);
              v691 -= 32;
              *((_DWORD *)m - 8) = v740;
              m -= 32;
              v741 = *(_OWORD *)(v691 + 8);
              *((_QWORD *)m + 3) = *(_QWORD *)(v691 + 24);
            }
            v672 = (std::string::size_type)&v737[32 * v736];
            v691 = (std::string::size_type)(v738 + 32);
            v1042.__r_.__value_.__r.__words[0] = (std::string::size_type)m;
            v1042.__r_.__value_.__r.__words[2] = v672;
            if (v695)
              operator delete(v695);
            v695 = m;
          }
          ++v948;
          v1042.__r_.__value_.__l.__size_ = v691;
          goto LABEL_571;
        }
        if (v712 < v690)
          goto LABEL_571;
      }
      else
      {
        if (v691 >= v672)
        {
          v726 = (uint64_t)(v691 - (_QWORD)v695) >> 5;
          v727 = v726 + 1;
          if ((unint64_t)(v726 + 1) >> 59)
            goto LABEL_910;
          v995 = v711;
          v1003 = v709.i64[0];
          if ((uint64_t)(v672 - (_QWORD)v695) >> 4 > v727)
            v727 = (uint64_t)(v672 - (_QWORD)v695) >> 4;
          if (v672 - (unint64_t)v695 >= 0x7FFFFFFFFFFFFFE0)
            v728 = 0x7FFFFFFFFFFFFFFLL;
          else
            v728 = v727;
          if (v728 >> 59)
            goto LABEL_909;
          v729 = (char *)operator new(32 * v728);
          v730 = &v729[32 * v726];
          *(_DWORD *)v730 = 1;
          *((double *)v730 + 3) = v710;
          v711 = v995;
          v709.i64[0] = v1003;
          *(_QWORD *)&v731 = v1003;
          *((_QWORD *)&v731 + 1) = v995;
          *(_OWORD *)(v730 + 8) = v731;
          for (m = v730; (void *)v691 != v695; *(_OWORD *)(m + 8) = v733)
          {
            v732 = *(_DWORD *)(v691 - 32);
            v691 -= 32;
            *((_DWORD *)m - 8) = v732;
            m -= 32;
            v733 = *(_OWORD *)(v691 + 8);
            *((_QWORD *)m + 3) = *(_QWORD *)(v691 + 24);
          }
          v672 = (std::string::size_type)&v729[32 * v728];
          v691 = (std::string::size_type)(v730 + 32);
          v1042.__r_.__value_.__r.__words[0] = (std::string::size_type)m;
          v1042.__r_.__value_.__r.__words[2] = v672;
          if (v695)
          {
            operator delete(v695);
            v711 = v995;
            v709.i64[0] = v1003;
          }
          v695 = m;
        }
        else
        {
          *(_DWORD *)v691 = 1;
          *(double *)(v691 + 24) = v710;
          *(_QWORD *)&v725 = v709.i64[0];
          *((_QWORD *)&v725 + 1) = v711;
          *(_OWORD *)(v691 + 8) = v725;
          v691 += 32;
        }
        ++v944;
        v1042.__r_.__value_.__l.__size_ = v691;
        if (fabs(v724) < v690)
          goto LABEL_608;
LABEL_571:
        LODWORD(v528) = (_DWORD)v528 + 1;
      }
      v514 = (std::__shared_weak_count *)((char *)v514 + 12);
      if (v514 != v693)
        continue;
      break;
    }
    v514 = (std::__shared_weak_count *)*v940;
    v694 = (std::__shared_weak_count_vtbl *)v940[1];
LABEL_622:
    LODWORD(v514) = v937 - 1431655765 * ((unint64_t)((char *)v694 - (char *)v514) >> 2);
    v645 = (std::__shared_weak_count *)(v940 + 3);
    v646 = v934 + 488;
    if (v940 + 3 != v929 || v646 != v926)
      continue;
    break;
  }
  v523 = v909;
  LODWORD(v538) = v948;
  LODWORD(v492) = v944;
  v652 = v689;
LABEL_625:
  kdebug_trace();
  v651 = sub_20F165708((unsigned int **)&v1042, (uint64_t)(v986 + 106), &v1047);
  kdebug_trace();
  if (v1042.__r_.__value_.__r.__words[0])
  {
    v1042.__r_.__value_.__l.__size_ = v1042.__r_.__value_.__r.__words[0];
    operator delete(v1042.__r_.__value_.__l.__data_);
  }
  v1073 = (float)(v652 | (v653 << 8)) / (float)v514;
  v1072 = (float)v492 / (float)v514;
  v1071 = (float)v528 / (float)v514;
  v742 = v986[96];
  v743 = v1073 < v742 || (float)((float)v492 / (float)v514) < v742;
  if (!v743 && (float)((float)v528 / (float)v514) >= v986[97])
  {
    if ((v651 & 1) == 0)
    {
      v846 = (char *)operator new(0x38uLL);
      strcpy(v846, "Orientation refinement failed for multiple cameras.");
      *(_QWORD *)v1076 = &off_24C9F9790;
      v1076[8] = 5;
      v847 = (_BYTE *)operator new();
      sub_20E860C04(v847, v846, 0x33uLL);
      *(_QWORD *)&v1076[16] = v847;
      v848 = (_QWORD *)operator new();
      *v848 = &unk_24C9C1198;
      v848[1] = 0;
      v848[2] = 0;
      v848[3] = v847;
      *(_QWORD *)&v1076[24] = v848;
      LOBYTE(v1077.f64[0]) = 0;
      LOBYTE(v1081) = 0;
      operator delete(v846);
      v656 = 5;
      v657 = 1;
      if (v913)
        goto LABEL_703;
      goto LABEL_710;
    }
    v651 = 1;
LABEL_522:
    *(_QWORD *)v1076 = &off_24C9F9790;
    v1076[8] = 0;
    v654 = operator new();
    *(_QWORD *)v654 = 0;
    *(_BYTE *)(v654 + 23) = 0;
    *(_QWORD *)&v1076[16] = v654;
    v655 = (_QWORD *)operator new();
    v656 = 0;
    *v655 = &unk_24C9C1198;
    v655[1] = 0;
    v655[2] = 0;
    v655[3] = v654;
    *(_QWORD *)&v1076[24] = v655;
    *(_OWORD *)&v1078[16] = *(_OWORD *)&v1048[16];
    v1079 = v1049;
    v1080 = v1050;
    *(_OWORD *)v1078 = *(_OWORD *)v1048;
    v1077 = v1047;
    v657 = v651;
    LOBYTE(v1081) = 1;
    if (v913)
      goto LABEL_703;
    goto LABEL_710;
  }
  LODWORD(v1043.f64[0]) = 0;
  sub_20E89F7C4((uint64_t)v1060, (uint64_t)&v1042, &v1073);
  v949 = v538;
  if (LODWORD(v1043.f64[0]) == -1)
    sub_20E877AB8();
  v1060[0] = v1058;
  ((void (*)(std::string *__return_ptr, void **, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(&v1062, v1060, &v1042);
  if (LODWORD(v1043.f64[0]) != -1)
    ((void (*)(void **, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(v1060, &v1042);
  v744 = std::string::insert(&v1062, 0, "Ratio check failed: X (", 0x17uLL);
  v745 = *(_OWORD *)&v744->__r_.__value_.__l.__data_;
  v1063.__r_.__value_.__r.__words[2] = v744->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1063.__r_.__value_.__l.__data_ = v745;
  v744->__r_.__value_.__l.__size_ = 0;
  v744->__r_.__value_.__r.__words[2] = 0;
  v744->__r_.__value_.__r.__words[0] = 0;
  v746 = std::string::append(&v1063, ") or Y(", 7uLL);
  v747 = *(_OWORD *)&v746->__r_.__value_.__l.__data_;
  v1064.__r_.__value_.__r.__words[2] = v746->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1064.__r_.__value_.__l.__data_ = v747;
  v746->__r_.__value_.__l.__size_ = 0;
  v746->__r_.__value_.__r.__words[2] = 0;
  v746->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v1043.f64[0]) = 0;
  sub_20E89F7C4((uint64_t)v1058, (uint64_t)&v1042, &v1072);
  if (LODWORD(v1043.f64[0]) == -1)
    sub_20E877AB8();
  v1058[0] = v1056;
  ((void (*)(void **__return_ptr, void **, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(v1060, v1058, &v1042);
  if (LODWORD(v1043.f64[0]) != -1)
    ((void (*)(void **, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(v1058, &v1042);
  if ((v1061 & 0x80u) == 0)
    v748 = v1060;
  else
    v748 = (void **)v1060[0];
  if ((v1061 & 0x80u) == 0)
    v749 = v1061;
  else
    v749 = (std::string::size_type)v1060[1];
  v750 = std::string::append(&v1064, (const std::string::value_type *)v748, v749);
  v751 = *(_OWORD *)&v750->__r_.__value_.__l.__data_;
  v1065.__r_.__value_.__r.__words[2] = v750->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1065.__r_.__value_.__l.__data_ = v751;
  v750->__r_.__value_.__l.__size_ = 0;
  v750->__r_.__value_.__r.__words[2] = 0;
  v750->__r_.__value_.__r.__words[0] = 0;
  v752 = std::string::append(&v1065, ") < ", 4uLL);
  v753 = *(_OWORD *)&v752->__r_.__value_.__l.__data_;
  v1066.__r_.__value_.__r.__words[2] = v752->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1066.__r_.__value_.__l.__data_ = v753;
  v752->__r_.__value_.__l.__size_ = 0;
  v752->__r_.__value_.__r.__words[2] = 0;
  v752->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v1043.f64[0]) = 0;
  sub_20E89F7C4((uint64_t)v1056, (uint64_t)&v1042, v986 + 96);
  if (LODWORD(v1043.f64[0]) == -1)
    sub_20E877AB8();
  v1056[0] = v1054;
  ((void (*)(void **__return_ptr, void **, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(v1058, v1056, &v1042);
  if (LODWORD(v1043.f64[0]) != -1)
    ((void (*)(void **, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(v1056, &v1042);
  if ((v1059 & 0x80u) == 0)
    v754 = v1058;
  else
    v754 = (void **)v1058[0];
  if ((v1059 & 0x80u) == 0)
    v755 = v1059;
  else
    v755 = (std::string::size_type)v1058[1];
  v756 = std::string::append(&v1066, (const std::string::value_type *)v754, v755);
  v757 = *(_OWORD *)&v756->__r_.__value_.__l.__data_;
  v1067.__r_.__value_.__r.__words[2] = v756->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1067.__r_.__value_.__l.__data_ = v757;
  v756->__r_.__value_.__l.__size_ = 0;
  v756->__r_.__value_.__r.__words[2] = 0;
  v756->__r_.__value_.__r.__words[0] = 0;
  v758 = std::string::append(&v1067, ", Total (", 9uLL);
  v759 = *(_OWORD *)&v758->__r_.__value_.__l.__data_;
  v1068.__r_.__value_.__r.__words[2] = v758->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1068.__r_.__value_.__l.__data_ = v759;
  v758->__r_.__value_.__l.__size_ = 0;
  v758->__r_.__value_.__r.__words[2] = 0;
  v758->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v1043.f64[0]) = 0;
  sub_20E89F7C4((uint64_t)v1054, (uint64_t)&v1042, &v1071);
  if (LODWORD(v1043.f64[0]) == -1)
    sub_20E877AB8();
  v1054[0] = &v1075;
  ((void (*)(void **__return_ptr, void **, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(v1056, v1054, &v1042);
  if (LODWORD(v1043.f64[0]) != -1)
    ((void (*)(void **, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(v1054, &v1042);
  if ((v1057 & 0x80u) == 0)
    v760 = v1056;
  else
    v760 = (void **)v1056[0];
  if ((v1057 & 0x80u) == 0)
    v761 = v1057;
  else
    v761 = (std::string::size_type)v1056[1];
  v762 = std::string::append(&v1068, (const std::string::value_type *)v760, v761);
  v763 = *(_OWORD *)&v762->__r_.__value_.__l.__data_;
  v1069.__r_.__value_.__r.__words[2] = v762->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1069.__r_.__value_.__l.__data_ = v763;
  v762->__r_.__value_.__l.__size_ = 0;
  v762->__r_.__value_.__r.__words[2] = 0;
  v762->__r_.__value_.__r.__words[0] = 0;
  v764 = std::string::append(&v1069, ") < ", 4uLL);
  v765 = *(_OWORD *)&v764->__r_.__value_.__l.__data_;
  v1052.__r_.__value_.__r.__words[2] = v764->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v1052.__r_.__value_.__l.__data_ = v765;
  v764->__r_.__value_.__l.__size_ = 0;
  v764->__r_.__value_.__r.__words[2] = 0;
  v764->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v1043.f64[0]) = 0;
  sub_20E89F7C4((uint64_t)&v1075, (uint64_t)&v1042, v986 + 97);
  if (LODWORD(v1043.f64[0]) == -1)
    sub_20E877AB8();
  v1075 = &v1074;
  ((void (*)(void **__return_ptr, char **, std::string *))off_24C9F97F0[LODWORD(v1043.f64[0])])(v1054, &v1075, &v1042);
  if (LODWORD(v1043.f64[0]) != -1)
    ((void (*)(char **, std::string *))off_24C9F97D8[LODWORD(v1043.f64[0])])(&v1075, &v1042);
  v1005 = v653;
  v766 = (int)v528;
  if ((v1055 & 0x80u) == 0)
    v767 = v1054;
  else
    v767 = (void **)v1054[0];
  if ((v1055 & 0x80u) == 0)
    v768 = v1055;
  else
    v768 = (std::string::size_type)v1054[1];
  v769 = std::string::append(&v1052, (const std::string::value_type *)v767, v768);
  v770 = (void *)v769->__r_.__value_.__r.__words[0];
  v771 = v769->__r_.__value_.__l.__size_;
  v1070[0] = v769->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v1070 + 3) = *(_DWORD *)((char *)&v769->__r_.__value_.__r.__words[2] + 3);
  v772 = SHIBYTE(v769->__r_.__value_.__r.__words[2]);
  v769->__r_.__value_.__l.__size_ = 0;
  v769->__r_.__value_.__r.__words[2] = 0;
  v769->__r_.__value_.__r.__words[0] = 0;
  if ((char)v1055 < 0)
  {
    operator delete(v1054[0]);
    if (SHIBYTE(v1052.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_687;
LABEL_673:
    if ((SHIBYTE(v1069.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_674;
LABEL_688:
    operator delete(v1069.__r_.__value_.__l.__data_);
    if ((char)v1057 < 0)
      goto LABEL_689;
LABEL_675:
    if ((SHIBYTE(v1068.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_676;
LABEL_690:
    operator delete(v1068.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1067.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_691;
LABEL_677:
    if (((char)v1059 & 0x80000000) == 0)
      goto LABEL_678;
LABEL_692:
    operator delete(v1058[0]);
    if (SHIBYTE(v1066.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_693;
LABEL_679:
    if ((SHIBYTE(v1065.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_680;
LABEL_694:
    operator delete(v1065.__r_.__value_.__l.__data_);
    if ((char)v1061 < 0)
      goto LABEL_695;
LABEL_681:
    v773 = v492;
    if ((SHIBYTE(v1064.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_682;
LABEL_696:
    operator delete(v1064.__r_.__value_.__l.__data_);
    v774 = v651;
    if (SHIBYTE(v1063.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_697;
LABEL_683:
    v775 = v652;
    if (SHIBYTE(v1062.__r_.__value_.__r.__words[2]) < 0)
LABEL_698:
      operator delete(v1062.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(v1052.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_673;
LABEL_687:
    operator delete(v1052.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1069.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_688;
LABEL_674:
    if (((char)v1057 & 0x80000000) == 0)
      goto LABEL_675;
LABEL_689:
    operator delete(v1056[0]);
    if (SHIBYTE(v1068.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_690;
LABEL_676:
    if ((SHIBYTE(v1067.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_677;
LABEL_691:
    operator delete(v1067.__r_.__value_.__l.__data_);
    if ((char)v1059 < 0)
      goto LABEL_692;
LABEL_678:
    if ((SHIBYTE(v1066.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_679;
LABEL_693:
    operator delete(v1066.__r_.__value_.__l.__data_);
    if (SHIBYTE(v1065.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_694;
LABEL_680:
    if (((char)v1061 & 0x80000000) == 0)
      goto LABEL_681;
LABEL_695:
    operator delete(v1060[0]);
    v773 = v492;
    if (SHIBYTE(v1064.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_696;
LABEL_682:
    v774 = v651;
    if ((SHIBYTE(v1063.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_683;
LABEL_697:
    operator delete(v1063.__r_.__value_.__l.__data_);
    v775 = v652;
    if (SHIBYTE(v1062.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_698;
  }
  *(_QWORD *)v1076 = &off_24C9F9790;
  v1076[8] = 7;
  v776 = operator new();
  v777 = v776;
  if (v772 < 0)
  {
    sub_20E860C04((_BYTE *)v776, v770, v771);
  }
  else
  {
    *(_QWORD *)v776 = v770;
    *(_QWORD *)(v776 + 8) = v771;
    *(_DWORD *)(v776 + 16) = v1070[0];
    *(_DWORD *)(v776 + 19) = *(_DWORD *)((char *)v1070 + 3);
    *(_BYTE *)(v776 + 23) = v772;
  }
  *(_QWORD *)&v1076[16] = v777;
  v778 = (_QWORD *)operator new();
  *v778 = &unk_24C9C1198;
  v778[1] = 0;
  v778[2] = 0;
  v778[3] = v777;
  *(_QWORD *)&v1076[24] = v778;
  LOBYTE(v1077.f64[0]) = 0;
  LOBYTE(v1081) = 0;
  if (v772 < 0)
    operator delete(v770);
  v656 = 7;
  v652 = v775;
  LODWORD(v538) = v949;
  v651 = v774;
  LODWORD(v492) = v773;
  LODWORD(v528) = v766;
  v653 = v1005;
  v657 = 1;
  if (v913)
  {
LABEL_703:
    *(double *)&v780 = v978;
    *(double *)&v779 = v984;
    *((double *)&v779 + 1) = v975;
    *((double *)&v780 + 1) = v957;
    *(double *)&v781 = v971;
    *((double *)&v781 + 1) = v953;
    *((_OWORD *)p_p + 8) = v779;
    *((_OWORD *)p_p + 9) = v780;
    *((double *)p_p + 24) = v629;
    *(double *)&v779 = v966;
    *((double *)&v779 + 1) = v961;
    *((_OWORD *)p_p + 10) = v781;
    *((_OWORD *)p_p + 11) = v779;
    if (v651)
    {
      if (*((_BYTE *)p_p + 272))
        *((_BYTE *)p_p + 272) = 0;
      v782 = v1049;
      *(_OWORD *)(p_p + 29) = *(_OWORD *)&v1048[16];
      *(float64x2_t *)(p_p + 31) = v782;
      *((double *)p_p + 33) = v1050;
      v783 = *(_OWORD *)v1048;
      *(float64x2_t *)(p_p + 25) = v1047;
      *(_OWORD *)(p_p + 27) = v783;
      *((_BYTE *)p_p + 272) = 1;
    }
    if (v657)
    {
      *((_DWORD *)p_p + 70) = v652 | (v653 << 8);
      *((_DWORD *)p_p + 71) = v492;
      *((_DWORD *)p_p + 72) = v538;
      *((_DWORD *)p_p + 73) = (_DWORD)v528;
      *((_DWORD *)p_p + 74) = (_DWORD)v514;
      *((_BYTE *)p_p + 300) = 1;
    }
    *((_BYTE *)p_p + 304) = v656;
  }
LABEL_710:
  v659 = 0;
  v661 = 0;
  v6 = (char **)v986;
  v784 = v932;
  if (v932)
LABEL_711:
    operator delete(v784);
LABEL_712:
  if (v661 < 0)
  {
    operator delete(v659);
    if (!v1076[8])
      goto LABEL_723;
  }
  else
  {
LABEL_713:
    if (v1076[8])
      goto LABEL_714;
LABEL_723:
    if (!(_BYTE)v1081)
      sub_20E866B34();
    if (*((_BYTE *)v908 + 120))
    {
      v790 = *((float *)v6 + 94);
      _Q1 = *((_OWORD *)v908 + 6);
      _D3 = v1079.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      if (acos(_D2 + *((double *)v908 + 14) * v1080) >= v790)
      {
        v794 = atomic_load((unsigned __int8 *)&qword_254A622B8);
        if ((v794 & 1) == 0 && __cxa_guard_acquire(&qword_254A622B8))
        {
          sub_21021D3D8(&v1047);
          sub_20E8610C0(__dst, "cv3d.vio.odometry");
          sub_20E8C4068((uint64_t **)&v1047, (uint64_t)__dst, &qword_254A622B0);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          __cxa_guard_release(&qword_254A622B8);
          v523 = v909;
          v6 = (char **)v986;
        }
        v1069.__r_.__value_.__r.__words[0] = qword_254A622B0;
        if (**(int **)(qword_254A622B0 + 56) <= 3)
        {
          v795 = *(unsigned __int8 *)(qword_254A622B0 + 72);
          v796 = sub_20E8C31DC(qword_254A622B0, "OSLogSurrogateAppender", 1, 0);
          v797 = v796;
          if (v795 || v796)
          {
            *(_QWORD *)&v1047.f64[0] = &v1069;
            *(std::chrono::steady_clock::time_point *)&v1047.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)v1048 = std::chrono::system_clock::now();
            *(_DWORD *)&v1048[8] = 3;
            *(_QWORD *)&v1048[16] = "unknown file";
            *(_DWORD *)&v1048[24] = 640;
            v1050 = 0.0;
            *(_QWORD *)&v1049.f64[0] = "unknown function";
            v1049.f64[1] = 0.0;
            v798 = **(_QWORD **)&v1047.f64[0];
            v799 = (const char *)(**(_QWORD **)&v1047.f64[0] + 16);
            v1006 = v799;
            if (*(char *)(**(_QWORD **)&v1047.f64[0] + 39) < 0)
            {
              v799 = *(const char **)(v798 + 16);
              v800 = *(_QWORD *)(v798 + 24);
            }
            else
            {
              v800 = *(unsigned __int8 *)(**(_QWORD **)&v1047.f64[0] + 39);
            }
            v849 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v849 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)__dst);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
              if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
              v6 = (char **)v986;
            }
            if (byte_254A4A4F8[23] >= 0)
              v850 = byte_254A4A4F8;
            else
              v850 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v851 = byte_254A4A4F8[23];
            else
              v851 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)__dst = os_log_create(v850, v799);
            v852 = &__dst[8];
            if (v851 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v851 >= 0x17)
            {
              v853 = (v851 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v851 | 7) != 0x17)
                v853 = v851 | 7;
              v854 = v853 + 1;
              v852 = operator new(v853 + 1);
              *(_QWORD *)&__dst[24] = v854 | 0x8000000000000000;
              *(_QWORD *)&__dst[8] = v852;
              *(_QWORD *)&__dst[16] = v851;
              v6 = (char **)v986;
            }
            else
            {
              __dst[31] = v851;
              if (!v851)
              {
LABEL_825:
                v852[v851] = 0;
                __dst[32] = 1;
                v855 = &__dst[40];
                if (v800 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v523 = v909;
                if (v800 >= 0x17)
                {
                  v856 = (v800 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v800 | 7) != 0x17)
                    v856 = v800 | 7;
                  v857 = v856 + 1;
                  v855 = operator new(v856 + 1);
                  *(_QWORD *)&v1008.f64[1] = v857 | 0x8000000000000000;
                  *(_QWORD *)&__dst[40] = v855;
                  *(_QWORD *)&v1008.f64[0] = v800;
                }
                else
                {
                  HIBYTE(v1008.f64[1]) = v800;
                  if (!v800)
                  {
LABEL_833:
                    v855[v800] = 0;
                    LOBYTE(v1009) = 1;
                    v858 = *(NSObject **)__dst;
                    if (SHIBYTE(v1008.f64[1]) < 0)
                      operator delete(*(void **)&__dst[40]);
                    if (__dst[32] && (__dst[31] & 0x80000000) != 0)
                      operator delete(*(void **)&__dst[8]);
                    if (*(_QWORD *)__dst)
                      os_release(*(void **)__dst);
                    if (v797 && *(_QWORD *)(v797 + 24))
                    {
                      v859 = _os_log_pack_size();
                      v860 = (std::__shared_weak_count_vtbl *)operator new(v859, (std::align_val_t)8uLL);
                      v861 = (std::__shared_weak_count *)operator new();
                      v862 = v861;
                      v861->__shared_owners_ = 0;
                      v863 = (unint64_t *)&v861->__shared_owners_;
                      v861->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v861->__shared_weak_owners_ = 0;
                      v861[1].__vftable = v860;
                      *(_QWORD *)__dst = v860;
                      *(_QWORD *)&__dst[8] = v860;
                      *(_QWORD *)&__dst[16] = v861;
                      do
                        v864 = __ldxr(v863);
                      while (__stxr(v864 + 1, v863));
                      memset(&__dst[24], 0, 24);
                      do
                        v865 = __ldaxr(v863);
                      while (__stlxr(v865 - 1, v863));
                      if (!v865)
                      {
                        ((void (*)(std::__shared_weak_count *))v861->__on_zero_shared)(v861);
                        std::__shared_weak_count::__release_weak(v862);
                      }
                      v866 = *(_QWORD *)__dst;
                      *(_WORD *)_os_log_pack_fill() = 0;
                      v867 = operator new();
                      v868 = *(unsigned __int8 *)(v798 + 39);
                      v869 = v1006;
                      if ((v868 & 0x80u) != 0)
                      {
                        v869 = *(const char **)(v798 + 16);
                        v868 = *(_QWORD *)(v798 + 24);
                      }
                      *(_QWORD *)v867 = v866;
                      *(_OWORD *)(v867 + 8) = *(_OWORD *)&__dst[8];
                      *(_QWORD *)&__dst[8] = 0;
                      *(_QWORD *)&__dst[16] = 0;
                      *(_OWORD *)(v867 + 24) = *(_OWORD *)&__dst[24];
                      *(_QWORD *)&__dst[24] = 0;
                      *(_QWORD *)&__dst[32] = 0;
                      *(_QWORD *)(v867 + 40) = v869;
                      *(_QWORD *)(v867 + 48) = v868;
                      *(_BYTE *)(v867 + 56) = 1;
                      v1052.__r_.__value_.__r.__words[0] = 0;
                      v1042.__r_.__value_.__r.__words[0] = v867;
                      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v797 + 24) + 40))(*(_QWORD *)(v797 + 24), &v1042);
                      v870 = v1042.__r_.__value_.__r.__words[0];
                      v1042.__r_.__value_.__r.__words[0] = 0;
                      v523 = v909;
                      if (v870)
                      {
                        v871 = *(std::__shared_weak_count **)(v870 + 32);
                        if (v871)
                        {
                          v872 = (unint64_t *)&v871->__shared_owners_;
                          do
                            v873 = __ldaxr(v872);
                          while (__stlxr(v873 - 1, v872));
                          if (!v873)
                          {
                            ((void (*)(std::__shared_weak_count *))v871->__on_zero_shared)(v871);
                            std::__shared_weak_count::__release_weak(v871);
                          }
                        }
                        v874 = *(std::__shared_weak_count **)(v870 + 16);
                        if (v874)
                        {
                          v875 = (unint64_t *)&v874->__shared_owners_;
                          do
                            v876 = __ldaxr(v875);
                          while (__stlxr(v876 - 1, v875));
                          if (!v876)
                          {
                            ((void (*)(std::__shared_weak_count *))v874->__on_zero_shared)(v874);
                            std::__shared_weak_count::__release_weak(v874);
                          }
                        }
                        MEMORY[0x212BC6398](v870, 0x10F0C40B62ED6C6);
                        v877 = v1052.__r_.__value_.__r.__words[0];
                        v1052.__r_.__value_.__r.__words[0] = 0;
                        if (v877)
                        {
                          v878 = *(std::__shared_weak_count **)(v877 + 32);
                          if (v878)
                          {
                            v879 = (unint64_t *)&v878->__shared_owners_;
                            do
                              v880 = __ldaxr(v879);
                            while (__stlxr(v880 - 1, v879));
                            if (!v880)
                            {
                              ((void (*)(std::__shared_weak_count *))v878->__on_zero_shared)(v878);
                              std::__shared_weak_count::__release_weak(v878);
                            }
                          }
                          v881 = *(std::__shared_weak_count **)(v877 + 16);
                          if (v881)
                          {
                            v882 = (unint64_t *)&v881->__shared_owners_;
                            do
                              v883 = __ldaxr(v882);
                            while (__stlxr(v883 - 1, v882));
                            if (!v883)
                            {
                              ((void (*)(std::__shared_weak_count *))v881->__on_zero_shared)(v881);
                              std::__shared_weak_count::__release_weak(v881);
                            }
                          }
                          MEMORY[0x212BC6398](v877, 0x10F0C40B62ED6C6);
                        }
                      }
                      v884 = *(std::__shared_weak_count **)&__dst[32];
                      if (*(_QWORD *)&__dst[32])
                      {
                        v885 = (unint64_t *)(*(_QWORD *)&__dst[32] + 8);
                        do
                          v886 = __ldaxr(v885);
                        while (__stlxr(v886 - 1, v885));
                        if (!v886)
                        {
                          ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
                          std::__shared_weak_count::__release_weak(v884);
                        }
                      }
                      v887 = *(std::__shared_weak_count **)&__dst[16];
                      if (*(_QWORD *)&__dst[16])
                      {
                        v888 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                        do
                          v889 = __ldaxr(v888);
                        while (__stlxr(v889 - 1, v888));
                        if (!v889)
                        {
                          ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
                          std::__shared_weak_count::__release_weak(v887);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v858, OS_LOG_TYPE_INFO);
                      *(_WORD *)__dst = 0;
                      v890 = (void *)_os_log_send_and_compose_impl();
                      if (v890)
                        free(v890);
                    }
                    if (v795)
                    {
                      sub_20E8C003C((uint64_t)&v1047, "VDOrientationEstimation: IMU based rejection");
                      sub_20E863570((uint64_t)&v1047);
                    }
                    sub_20E863570((uint64_t)&v1047);
                    v891 = *(std::__shared_weak_count **)&v1050;
                    if (v1050 != 0.0)
                    {
                      v892 = (unint64_t *)(*(_QWORD *)&v1050 + 8);
                      do
                        v893 = __ldaxr(v892);
                      while (__stlxr(v893 - 1, v892));
                      if (!v893)
                      {
                        ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
                        std::__shared_weak_count::__release_weak(v891);
                      }
                    }
                    goto LABEL_892;
                  }
                }
                memmove(v855, v799, v800);
                goto LABEL_833;
              }
            }
            memmove(v852, v850, v851);
            goto LABEL_825;
          }
        }
LABEL_892:
        if ((_BYTE)v1081)
          LOBYTE(v1081) = 0;
        v894 = (char *)operator new(0x30uLL);
        strcpy(v894, "Orientation estimation is not close to accel");
        v895 = (std::__shared_weak_count_vtbl *)operator new();
        sub_20E860C04(v895, v894, 0x2CuLL);
        v896 = (std::__shared_weak_count *)operator new();
        v897 = v896;
        v896->__shared_owners_ = 0;
        v898 = (unint64_t *)&v896->__shared_owners_;
        v896->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9C1198;
        v896->__shared_weak_owners_ = 0;
        v896[1].__vftable = v895;
        v1076[8] = 8;
        do
          v899 = __ldxr(v898);
        while (__stxr(v899 + 1, v898));
        v900 = *(std::__shared_weak_count **)&v1076[24];
        *(_QWORD *)&v1076[16] = v895;
        *(_QWORD *)&v1076[24] = v896;
        if (v900)
        {
          v901 = (unint64_t *)&v900->__shared_owners_;
          do
            v902 = __ldaxr(v901);
          while (__stlxr(v902 - 1, v901));
          if (!v902)
          {
            ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
            std::__shared_weak_count::__release_weak(v900);
          }
        }
        do
          v903 = __ldaxr(v898);
        while (__stlxr(v903 - 1, v898));
        if (!v903)
        {
          ((void (*)(std::__shared_weak_count *))v897->__on_zero_shared)(v897);
          std::__shared_weak_count::__release_weak(v897);
        }
        operator delete(v894);
      }
    }
  }
LABEL_714:
  v785 = v1076[8];
  if (v913)
  {
    *((_BYTE *)p_p + 304) = v1076[8];
    if (*((_BYTE *)v6 + 312))
    {
      v786 = *v6;
      if (*v6)
      {
        v787 = v6[1];
        v788 = *v6;
        if (v787 != v786)
        {
          do
          {
            v789 = (void *)*((_QWORD *)v787 - 22);
            if (v789)
            {
              *((_QWORD *)v787 - 21) = v789;
              operator delete(v789);
            }
            v787 -= 272;
          }
          while (v787 != v786);
          v788 = *v6;
        }
        v6[1] = v786;
        operator delete(v788);
      }
      *((_BYTE *)v6 + 312) = 0;
    }
    sub_20F1624E4(v6, (__int128 **)p_p);
    *((_DWORD *)v6 + 6) = *((_DWORD *)p_p + 6);
    *((_OWORD *)v6 + 2) = *((_OWORD *)p_p + 2);
    v6[6] = (char *)p_p[6];
    *(_OWORD *)(v6 + 9) = *(_OWORD *)(p_p + 9);
    *(_OWORD *)(v6 + 11) = *(_OWORD *)(p_p + 11);
    *(_OWORD *)(v6 + 13) = *(_OWORD *)(p_p + 13);
    v6[15] = (char *)p_p[15];
    *(_OWORD *)(v6 + 7) = *(_OWORD *)(p_p + 7);
    v801 = *((_OWORD *)p_p + 8);
    v802 = *((_OWORD *)p_p + 9);
    v803 = *((_OWORD *)p_p + 10);
    v804 = *((_OWORD *)p_p + 11);
    v6[24] = (char *)p_p[24];
    *((_OWORD *)v6 + 10) = v803;
    *((_OWORD *)v6 + 11) = v804;
    *((_OWORD *)v6 + 8) = v801;
    *((_OWORD *)v6 + 9) = v802;
    *((_BYTE *)v6 + 200) = 0;
    *((_BYTE *)v6 + 272) = 0;
    if (*((_BYTE *)p_p + 272))
    {
      v805 = *(_OWORD *)(p_p + 27);
      v806 = *(_OWORD *)(p_p + 31);
      *(_OWORD *)(v6 + 29) = *(_OWORD *)(p_p + 29);
      *(_OWORD *)(v6 + 31) = v806;
      v6[33] = (char *)p_p[33];
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(p_p + 25);
      *(_OWORD *)(v6 + 27) = v805;
      *((_BYTE *)v6 + 272) = 1;
    }
    *(_OWORD *)(v6 + 35) = *(_OWORD *)(p_p + 35);
    *(_OWORD *)((char *)v6 + 289) = *(_OWORD *)((char *)p_p + 289);
    *((_BYTE *)v6 + 312) = 1;
    if (*((_BYTE *)v6 + 326))
    {
      v807 = (char *)operator new(0x38uLL);
      strcpy(v807, "Returning unknown error for parameter tuning mode.");
      *(_QWORD *)v523 = &off_24C9F9790;
      *(_BYTE *)(v523 + 8) = 9;
      v808 = (_BYTE *)operator new();
      sub_20E860C04(v808, v807, 0x32uLL);
      *(_QWORD *)(v909 + 16) = v808;
      v809 = (_QWORD *)operator new();
      *v809 = &unk_24C9C1198;
      v809[1] = 0;
      v809[2] = 0;
      v809[3] = v808;
      *(_QWORD *)(v909 + 24) = v809;
      *(_BYTE *)(v909 + 32) = 0;
      *(_BYTE *)(v909 + 104) = 0;
      operator delete(v807);
      goto LABEL_745;
    }
    v785 = v1076[8];
  }
  *(_QWORD *)v523 = &off_24C9F9790;
  *(_BYTE *)(v523 + 8) = v785;
  v810 = *(_QWORD *)&v1076[24];
  *(_QWORD *)(v523 + 16) = *(_QWORD *)&v1076[16];
  *(_QWORD *)(v523 + 24) = v810;
  if (v810)
  {
    v811 = (unint64_t *)(v810 + 8);
    do
      v812 = __ldxr(v811);
    while (__stxr(v812 + 1, v811));
  }
  *(_BYTE *)(v523 + 32) = 0;
  *(_BYTE *)(v523 + 104) = 0;
  if ((_BYTE)v1081)
  {
    v813 = v1079;
    *(_OWORD *)(v523 + 64) = *(_OWORD *)&v1078[16];
    *(float64x2_t *)(v523 + 80) = v813;
    *(double *)(v523 + 96) = v1080;
    v814 = *(_OWORD *)v1078;
    *(float64x2_t *)(v523 + 32) = v1077;
    *(_OWORD *)(v523 + 48) = v814;
    *(_BYTE *)(v523 + 104) = 1;
  }
LABEL_745:
  *(_QWORD *)v1076 = &off_24C9F9790;
  v815 = *(std::__shared_weak_count **)&v1076[24];
  if (*(_QWORD *)&v1076[24])
  {
    v816 = (unint64_t *)(*(_QWORD *)&v1076[24] + 8);
    do
      v817 = __ldaxr(v816);
    while (__stlxr(v817 - 1, v816));
    if (!v817)
    {
      ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
      std::__shared_weak_count::__release_weak(v815);
    }
  }
LABEL_750:
  v818 = (std::__shared_weak_count **)v1013;
  if (v1013)
  {
    v819 = v1014;
    v820 = v1013;
    if (v1014 != v1013)
    {
      do
      {
        *(v819 - 14) = (std::__shared_weak_count *)&off_24C9F9790;
        v819 -= 14;
        v821 = v819[3];
        if (v821)
        {
          v822 = (unint64_t *)&v821->__shared_owners_;
          do
            v823 = __ldaxr(v822);
          while (__stlxr(v823 - 1, v822));
          if (!v823)
          {
            ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
            std::__shared_weak_count::__release_weak(v821);
          }
        }
      }
      while (v819 != v818);
      v820 = v1013;
    }
    v1014 = v818;
    operator delete(v820);
  }
  v824 = (std::__shared_weak_count *)v1016;
  if (v1016)
  {
    v825 = v1017;
    v826 = v1016;
    if (v1017 != v1016)
    {
      v827 = v1017;
      do
      {
        v829 = v827[-1].__vftable;
        --v827;
        v828 = v829;
        if (v829)
        {
          v825[-1].__shared_owners_ = (uint64_t)v828;
          operator delete(v828);
        }
        v825 = v827;
      }
      while (v827 != v824);
      v826 = v1016;
    }
    v1017 = v824;
    operator delete(v826);
  }
  v830 = (char *)__p;
  if (__p)
  {
    v831 = v1020;
    v832 = __p;
    if (v1020 != __p)
    {
      do
      {
        v833 = (void *)*((_QWORD *)v831 - 22);
        if (v833)
        {
          *((_QWORD *)v831 - 21) = v833;
          operator delete(v833);
        }
        v831 -= 272;
      }
      while (v831 != v830);
      v832 = __p;
    }
    v1020 = v830;
    operator delete(v832);
  }
  v834 = (char *)v1039;
  if (v1039)
  {
    v835 = v1040;
    if (v1040 == v1039)
    {
LABEL_793:
      operator delete(v834);
      return;
    }
    while (2)
    {
      v836 = v835 - 488;
      v837 = (std::__shared_weak_count *)*((_QWORD *)v835 - 48);
      if (!v837)
        goto LABEL_785;
      v838 = (unint64_t *)&v837->__shared_owners_;
      do
        v839 = __ldaxr(v838);
      while (__stlxr(v839 - 1, v838));
      if (!v839)
      {
        ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
        std::__shared_weak_count::__release_weak(v837);
        v840 = (std::__shared_weak_count *)*((_QWORD *)v835 - 50);
        if (v840)
          goto LABEL_786;
      }
      else
      {
LABEL_785:
        v840 = (std::__shared_weak_count *)*((_QWORD *)v835 - 50);
        if (v840)
        {
LABEL_786:
          v841 = (unint64_t *)&v840->__shared_owners_;
          do
            v842 = __ldaxr(v841);
          while (__stlxr(v842 - 1, v841));
          if (!v842)
          {
            ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
            std::__shared_weak_count::__release_weak(v840);
          }
        }
      }
      v835 -= 488;
      if (v836 == v834)
      {
        v834 = (char *)v1039;
        goto LABEL_793;
      }
      continue;
    }
  }
}

void sub_20F160E40(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x258]))
  {
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x480]);
  sub_20F15AF74(&STACK[0x670]);
  sub_20F161B64((void **)&STACK[0x2B0]);
  sub_20E9DD680((void **)&STACK[0x2C8]);
  sub_20F0281F8((void **)&STACK[0x2E0]);
  sub_20F0302C0((void **)&STACK[0x418]);
  _Unwind_Resume(a1);
}

void sub_20F1614E8()
{
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F1614F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;

  MEMORY[0x212BC6398](v14, 0x1012C40EC159624);
  if (v15 < 0)
    operator delete(v13);
  if (v12)
    operator delete(v12);
  v16 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v16;
    operator delete(v16);
  }
  sub_210231620(a12);
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = STACK[0x5B0];
    JUMPOUT(0x20F161B38);
  }
  JUMPOUT(0x20F161B3CLL);
}

void sub_20F1614FC()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  JUMPOUT(0x20F161680);
}

void sub_20F16153C()
{
  JUMPOUT(0x20F161680);
}

void sub_20F16154C()
{
  sub_20F162414((void ***)&STACK[0x670]);
  JUMPOUT(0x20F161B44);
}

void sub_20F161554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;
  uint64_t v13;
  int v14;

  MEMORY[0x212BC6398](v13, 0x1012C40EC159624);
  if (v14 < 0)
    operator delete(v12);
  sub_210231620(a12);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F16155C()
{
  JUMPOUT(0x20F161B4CLL);
}

void sub_20F161568()
{
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F161570()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  JUMPOUT(0x20F161A6CLL);
}

void sub_20F1615A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F1615B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F1615BC()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;

  v0 = STACK[0x2C8];
  if (STACK[0x2C8])
  {
    v1 = STACK[0x2D0];
    v2 = (void *)STACK[0x2C8];
    if (STACK[0x2D0] != v0)
    {
      v3 = STACK[0x2D0];
      do
      {
        v5 = *(void **)(v3 - 24);
        v3 -= 24;
        v4 = v5;
        if (v5)
        {
          *(_QWORD *)(v1 - 16) = v4;
          operator delete(v4);
        }
        v1 = v3;
      }
      while (v3 != v0);
      v2 = (void *)STACK[0x2C8];
    }
    STACK[0x2D0] = v0;
    operator delete(v2);
  }
  JUMPOUT(0x20F161B4CLL);
}

void sub_20F16161C()
{
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F161624(_Unwind_Exception *a1)
{
  sub_20F0302C0((void **)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_20F161630()
{
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F161638()
{
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F161648()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  JUMPOUT(0x20F16167CLL);
}

void sub_20F16168C()
{
  if (SLOBYTE(STACK[0x5E7]) < 0)
  {
    operator delete((void *)STACK[0x5D0]);
    if (SLOBYTE(STACK[0x647]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x630]);
      if ((SLOBYTE(STACK[0x627]) & 0x80000000) == 0)
      {
        if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
          JUMPOUT(0x20F1617C8);
        JUMPOUT(0x20F16172CLL);
      }
      JUMPOUT(0x20F1616F4);
    }
  }
  else if (SLOBYTE(STACK[0x647]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x20F1616ECLL);
}

uint64_t sub_20F1616D0()
{
  return sub_20F1616D8();
}

void sub_20F1616D8()
{
  sub_20E877A60((uint64_t)&STACK[0x430]);
  if (SLOBYTE(STACK[0x647]) < 0)
  {
    operator delete((void *)STACK[0x630]);
    if (SLOBYTE(STACK[0x627]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x610]);
      if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_4;
    }
  }
  else if (SLOBYTE(STACK[0x627]) < 0)
  {
    goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
LABEL_7:
    JUMPOUT(0x20F161A6CLL);
LABEL_4:
  operator delete((void *)STACK[0x5F0]);
  goto LABEL_7;
}

uint64_t sub_20F161738()
{
  return sub_20F161740();
}

void sub_20F161740()
{
  sub_20E877A60((uint64_t)&STACK[0x430]);
  JUMPOUT(0x20F161A6CLL);
}

void sub_20F161750()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  JUMPOUT(0x20F161784);
}

void sub_20F161794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  sub_210231620(a12);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F1617B0()
{
  void *v0;
  uint64_t v1;
  int v2;

  MEMORY[0x212BC6398](v1, 0x1012C40EC159624);
  if (v2 < 0)
    operator delete(v0);
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = STACK[0x5B0];
    JUMPOUT(0x20F161B38);
  }
  JUMPOUT(0x20F161B3CLL);
}

void sub_20F1617B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F1617C0()
{
  JUMPOUT(0x20F1617C8);
}

void sub_20F1617D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F1617D8()
{
  JUMPOUT(0x20F161A74);
}

void sub_20F1617E4()
{
  void *v0;
  int v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x1012C40EC159624);
  if (v1 < 0)
    operator delete(v0);
  sub_20F15AF74(&STACK[0x240]);
  JUMPOUT(0x20F161B3CLL);
}

void sub_20F1617EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F1617F4()
{
  JUMPOUT(0x20F1618C0);
}

void sub_20F1617FC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F161804()
{
  if (SLOBYTE(STACK[0x4E7]) < 0)
  {
    operator delete((void *)STACK[0x4D0]);
    if (SLOBYTE(STACK[0x687]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x670]);
      if (SLOBYTE(STACK[0x497]) < 0)
      {
LABEL_8:
        operator delete((void *)STACK[0x480]);
        if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
        {
LABEL_12:
          if (STACK[0x5B0])
          {
            STACK[0x5B8] = STACK[0x5B0];
            JUMPOUT(0x20F161B38);
          }
          JUMPOUT(0x20F161B3CLL);
        }
LABEL_11:
        operator delete((void *)STACK[0x430]);
        goto LABEL_12;
      }
LABEL_10:
      if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (SLOBYTE(STACK[0x687]) < 0)
  {
    goto LABEL_5;
  }
  if (SLOBYTE(STACK[0x497]) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_20F161894()
{
  uint64_t v0;
  int v1;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  if (v1 < 0)
    JUMPOUT(0x20F161B28);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F1618CC()
{
  if (SLOBYTE(STACK[0x687]) < 0)
  {
    operator delete((void *)STACK[0x670]);
    if (SLOBYTE(STACK[0x497]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x480]);
      if (SLOBYTE(STACK[0x447]) < 0)
LABEL_7:
        JUMPOUT(0x20F1619A0);
LABEL_8:
      JUMPOUT(0x20F1619A4);
    }
  }
  else if (SLOBYTE(STACK[0x497]) < 0)
  {
    goto LABEL_3;
  }
  if (SLOBYTE(STACK[0x447]) < 0)
    goto LABEL_7;
  goto LABEL_8;
}

void sub_20F1618F4()
{
  if (SLOBYTE(STACK[0x497]) < 0)
    JUMPOUT(0x20F1618E0);
  JUMPOUT(0x20F161994);
}

void sub_20F161904()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  MEMORY[0x212BC6398](v0, 0x1012C40EC159624);
  JUMPOUT(0x20F161948);
}

void sub_20F161934()
{
  if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
    JUMPOUT(0x20F1619A4);
  JUMPOUT(0x20F16199CLL);
}

void sub_20F161954()
{
  JUMPOUT(0x20F1619A4);
}

void sub_20F16195C()
{
  if (SLOBYTE(STACK[0x4E7]) < 0)
  {
    operator delete((void *)STACK[0x4D0]);
    if (SLOBYTE(STACK[0x687]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x670]);
      if ((SLOBYTE(STACK[0x497]) & 0x80000000) == 0)
      {
        if (SLOBYTE(STACK[0x447]) < 0)
          JUMPOUT(0x20F1619A0);
        JUMPOUT(0x20F1619A4);
      }
      JUMPOUT(0x20F1618E0);
    }
  }
  else if (SLOBYTE(STACK[0x687]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x20F1618D8);
}

void sub_20F1619BC()
{
  JUMPOUT(0x20F161B3CLL);
}

void sub_20F1619C4()
{
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = STACK[0x5B0];
    JUMPOUT(0x20F161B38);
  }
  JUMPOUT(0x20F161B3CLL);
}

void sub_20F1619CC()
{
  unint64_t v0;

  STACK[0x2B8] = v0;
  JUMPOUT(0x20F161A04);
}

void sub_20F161A10()
{
  unint64_t v0;

  if (v0)
  {
    STACK[0x438] = v0;
    JUMPOUT(0x20F161A38);
  }
  JUMPOUT(0x20F161A3CLL);
}

void sub_20F161A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_210231620(a12);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F161A24()
{
  JUMPOUT(0x20F161A2CLL);
}

void sub_20F161A64()
{
  JUMPOUT(0x20F161A6CLL);
}

void sub_20F161A88(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F161B5CLL);
}

void sub_20F161AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_end_catch();
  sub_210231620(a12);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F161AAC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F161AB4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F161B5CLL);
}

void sub_20F161ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_end_catch();
  sub_210231620(a12);
  JUMPOUT(0x20F161B2CLL);
}

void sub_20F161AD8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20F161ADCLL);
  _Unwind_Resume(a1);
}

void sub_20F161AE0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20F161B5CLL);
}

void sub_20F161AF8()
{
  __cxa_end_catch();
  JUMPOUT(0x20F161B00);
}

void sub_20F161B0C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20F161B10);
  sub_20E860DA4(a1);
}

void sub_20F161B18()
{
  if (STACK[0x670])
  {
    STACK[0x678] = STACK[0x670];
    JUMPOUT(0x20F161B28);
  }
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = STACK[0x5B0];
    JUMPOUT(0x20F161B38);
  }
  JUMPOUT(0x20F161B3CLL);
}

void **sub_20F161B64(void **a1)
{
  std::__shared_weak_count **v2;
  std::__shared_weak_count **v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count **)*a1;
  if (*a1)
  {
    v3 = (std::__shared_weak_count **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        *(v3 - 14) = (std::__shared_weak_count *)&off_24C9F9790;
        v3 -= 14;
        v5 = v3[3];
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F161C0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  *a1 = &off_24C9F9740;
  a1[25] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[27];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (uint64_t *)a1[24];
    a1[24] = 0;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (uint64_t *)a1[24];
    a1[24] = 0;
    if (!v5)
      goto LABEL_9;
  }
  v6 = *v5;
  *v5 = 0;
  if (v6)
    ((void (*)(void))v5[1])();
  MEMORY[0x212BC6398](v5, 0xA0C40AFF93C70);
LABEL_9:
  *a1 = &off_24C9F9718;
  sub_20F162344(a1 + 1);
  return a1;
}

void sub_20F161CDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  *a1 = &off_24C9F9740;
  a1[25] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[27];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (uint64_t *)a1[24];
    a1[24] = 0;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (uint64_t *)a1[24];
    a1[24] = 0;
    if (!v5)
      goto LABEL_9;
  }
  v6 = *v5;
  *v5 = 0;
  if (v6)
    ((void (*)(void))v5[1])();
  MEMORY[0x212BC6398](v5, 0xA0C40AFF93C70);
LABEL_9:
  *a1 = &off_24C9F9718;
  sub_20F162344(a1 + 1);
  JUMPOUT(0x212BC6398);
}

void sub_20F161DBC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9F9790;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F161E30@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = (__int128 *)result[2];
  if (*((char *)v2 + 23) < 0)
    return sub_20E860C04((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return result;
}

float32x2_t sub_20F161E5C(float32x2_t *a1, uint64_t a2, double *a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7, int64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  unsigned int v13;
  double v14;
  double v15;
  char v16;
  double v17;
  double v18;
  float32x2_t result;
  float64x2_t v20;
  double v21;
  float64x2_t *v22;
  float64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a2 + 992);
  if (v13 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = *(_DWORD *)(a2 + 992);
    if (v13 <= 7)
      goto LABEL_3;
  }
  else if (v13 <= 7)
  {
LABEL_3:
    if (!v13)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_8;
  }
  if (v13 <= 0xD)
  {
LABEL_8:
    v14 = a3[1];
    *(double *)a7.i64 = *(double *)(a2 + 88) + *(double *)(a2 + 72) * *a3 + *(double *)(a2 + 80) * v14;
    v15 = *(double *)(a2 + 104);
    a6.i64[0] = *(_QWORD *)(a2 + 112);
    *(double *)a4.i64 = v14 * v15 + *(double *)a6.i64;
    *(_QWORD *)&v27.f64[0] = a7.i64[0];
    *(_QWORD *)&v27.f64[1] = a4.i64[0];
    goto LABEL_9;
  }
  a7.i64[0] = (uint64_t)a3[1];
  *(double *)a4.i64 = *(double *)(a2 + 88) + *(double *)(a2 + 72) * *a3 + *(double *)(a2 + 80) * *(double *)a7.i64;
  a6.i64[0] = *(_QWORD *)(a2 + 112);
  v15 = *(double *)a7.i64 * *(double *)(a2 + 104) + *(double *)a6.i64;
  v27.f64[0] = *(double *)a4.i64;
  v27.f64[1] = v15;
  if (v13 == 14)
  {
LABEL_9:
    v22 = &v20;
    v23 = &v27;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    if (v13 <= 7)
      goto LABEL_10;
    goto LABEL_21;
  }
  v22 = &v20;
  v23 = &v27;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (v13 != -1)
  {
LABEL_38:
    v16 = sub_20EB3CED8(a2, (uint64_t)&v20, &v27, 0, 0, 0);
    goto LABEL_45;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *(_DWORD *)(a2 + 992);
  if (v13 <= 7)
  {
LABEL_10:
    if (v13 > 3)
    {
      if (v13 > 5)
      {
        if (v13 == 6)
          v16 = sub_20EB41C58((double *)a2, (uint64_t)&v20, v27.f64, 0, 0, 0);
        else
          v16 = sub_20EB306CC(a2, (uint64_t)&v20, &v27, 0, 0, 0, *(double *)a4.i64, v15, a6, a7, *(double *)a8.i64, a9.f64[0], a10);
      }
      else if (v13 == 5)
      {
        v16 = sub_20EB2886C((uint64_t)&v20, v27.f64, a2 + 168, 5);
      }
      else
      {
        if (!*(_BYTE *)(a2 + 468))
        {
          a4.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a4, v15, a6, a7).u64[0];
          *(_BYTE *)(a2 + 468) = 1;
        }
        v16 = sub_20EA8D684((uint64_t)&v20, (uint64_t)&v27, (int64x2_t *)(a2 + 168), (float *)(a2 + 204), 0, 5, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
      }
    }
    else
    {
      if (v13 <= 1)
      {
        if (!v13)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v20 = v27;
        v21 = 1.0;
        goto LABEL_47;
      }
      if (v13 == 2)
        v16 = sub_20EA8D22C((uint64_t)&v22, a2);
      else
        v16 = sub_20EB23DF0((uint64_t)&v20, v27.f64, (int64x2_t *)(a2 + 168), 20, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, a8, a9);
    }
    goto LABEL_45;
  }
LABEL_21:
  if (v13 <= 0xB)
  {
    if (v13 > 9)
    {
      if (v13 == 10)
        v16 = sub_20EB24F38((uint64_t)&v20, (uint64_t)&v27, a2 + 168, (double *)(a2 + 280), 0x14u, (*(double *)a2 + *(double *)(a2 + 32)) * 0.5);
      else
        v16 = sub_20EB38E20(a2, (uint64_t)&v20, &v27, 0, 0, 0);
    }
    else if (v13 == 9)
    {
      v16 = sub_20EB35004(a2, (uint64_t)&v20, &v27, 0, 0, 0, *(double *)a4.i64, v15, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
    }
    else
    {
      v17 = sqrt(v27.f64[0] * v27.f64[0] + v27.f64[1] * v27.f64[1]);
      v16 = sub_20EB24018((uint64_t)&v20, v27.f64, (double *)(a2 + 168), 20, v17, v17, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
    }
LABEL_45:
    if ((v16 & 1) != 0)
      goto LABEL_47;
    goto LABEL_46;
  }
  if (v13 > 0xD)
  {
    if (v13 == 14)
    {
      v16 = sub_20EB253A0((uint64_t)&v20, (uint64_t)&v27, (double *)(a2 + 168), (double *)(a2 + 392), 0x14u, (*(double *)a2 + *(double *)(a2 + 32)) * 0.5);
      goto LABEL_45;
    }
    goto LABEL_38;
  }
  if (v13 == 13)
  {
    v16 = sub_20EB43734((double *)a2, (uint64_t)&v20, (uint64_t)&v27, 0, 0, 0);
    goto LABEL_45;
  }
  v20 = 0uLL;
  v21 = 0.0;
LABEL_46:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VanishingDirOrientationEstimation.cpp", 219, (uint64_t)"result", 6, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_47:
  if (v21 == 0.0)
    v18 = 1.0;
  else
    v18 = 1.0 / v21;
  result = vcvt_f32_f64(vmulq_n_f64(v20, v18));
  *a1 = result;
  a1[1].i32[0] = 1065353216;
  return result;
}

_QWORD *sub_20F162344(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *a1 = &off_24CA06F30;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = a1[17];
  if (v3)
  {
    v4 = a1[18];
    v5 = (void *)a1[17];
    if (v4 != v3)
    {
      v6 = a1[18];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[17];
    }
    a1[18] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[14];
  if (v9)
  {
    a1[15] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[11];
  if (v10)
  {
    a1[12] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[8];
  if (v11)
  {
    a1[9] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[5];
  if (v12)
  {
    a1[6] = v12;
    operator delete(v12);
  }
  return a1;
}

void ***sub_20F162414(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          *((_QWORD *)v4 - 14) = &off_24C9F9790;
          v4 -= 112;
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 + 3);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20F1624E4(_QWORD *a1, __int128 **a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * (v6 >> 4);
    if (v7 >= 0xF0F0F0F0F0F0F1)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[272 * v7];
    a1[1] = sub_20F1625EC(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_20F16258C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 22);
        if (v7)
        {
          *((_QWORD *)v5 - 21) = v7;
          operator delete(v7);
        }
        v5 -= 272;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1625EC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)a4 = v7;
      v8 = *(__int128 *)((char *)v6 + 40);
      v9 = *(__int128 *)((char *)v6 + 56);
      v10 = *(__int128 *)((char *)v6 + 72);
      *(_QWORD *)(a4 + 88) = *((_QWORD *)v6 + 11);
      *(_OWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 56) = v9;
      *(_OWORD *)(a4 + 40) = v8;
      *(_OWORD *)(a4 + 24) = *(__int128 *)((char *)v6 + 24);
      *(_QWORD *)(a4 + 104) = 0;
      *(_QWORD *)(a4 + 112) = 0;
      *(_QWORD *)(a4 + 96) = 0;
      v12 = (_BYTE *)*((_QWORD *)v6 + 12);
      v11 = (_BYTE *)*((_QWORD *)v6 + 13);
      v13 = v11 - v12;
      if (v11 != v12)
      {
        if ((v13 & 0x8000000000000000) != 0)
          sub_20E867F44();
        v14 = (char *)operator new(v11 - v12);
        *(_QWORD *)(a4 + 96) = v14;
        *(_QWORD *)(a4 + 104) = v14;
        v15 = &v14[v13];
        *(_QWORD *)(a4 + 112) = &v14[v13];
        memcpy(v14, v12, v13);
        *(_QWORD *)(a4 + 104) = v15;
      }
      v16 = *(__int128 *)((char *)v6 + 136);
      v17 = *(__int128 *)((char *)v6 + 152);
      v18 = *(__int128 *)((char *)v6 + 168);
      v19 = *((_QWORD *)v6 + 23);
      v20 = *(__int128 *)((char *)v6 + 120);
      *(_BYTE *)(a4 + 192) = 0;
      *(_OWORD *)(a4 + 120) = v20;
      *(_QWORD *)(a4 + 184) = v19;
      *(_OWORD *)(a4 + 168) = v18;
      *(_OWORD *)(a4 + 152) = v17;
      *(_OWORD *)(a4 + 136) = v16;
      *(_BYTE *)(a4 + 264) = 0;
      if (*((_BYTE *)v6 + 264))
      {
        *(_OWORD *)(a4 + 192) = v6[12];
        v21 = v6[13];
        v22 = v6[14];
        v23 = v6[15];
        *(_QWORD *)(a4 + 256) = *((_QWORD *)v6 + 32);
        *(_OWORD *)(a4 + 224) = v22;
        *(_OWORD *)(a4 + 240) = v23;
        *(_OWORD *)(a4 + 208) = v21;
        *(_BYTE *)(a4 + 264) = 1;
      }
      a4 += 272;
      v6 += 17;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F162754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)(v9 + 96);
  if (v11)
  {
    *(_QWORD *)(v9 + 104) = v11;
    operator delete(v11);
  }
  sub_20EACFA28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float64x2_t **sub_20F16277C(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  float64x2_t v13;
  int8x16_t v14;
  int32x4_t v16;
  void *v19;
  unint64_t v20;
  char *v21;
  double *v22;
  double *v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  double v30;
  double v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  uint64_t v40;
  char v41;
  float64x2_t *v42;
  float64x2_t *v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  double *v47;
  double *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  uint64_t v51;
  double *v52;
  float64x2_t *v53;
  uint64_t v54;
  double v55;
  int8x16_t v56;
  float64x2_t v57;
  double v62;
  int v63;
  float64x2_t v64;
  __int128 v65;
  int64x2_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  uint64_t v69;
  double v70;
  double v71;
  unsigned int v72;
  double v73;
  int v74;
  double v75;
  double v76;
  unint64_t v77;
  float64x2_t v78;
  unint64_t v79;
  char *v80;
  _OWORD *v81;
  float64x2_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  char *v89;
  char *v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  size_t v96;
  const char *v97;
  unsigned __int8 v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  size_t v104;
  const char *v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  const char *v108;
  size_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  void *p_p;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unsigned __int8 v120;
  const char *v121;
  size_t v122;
  void **v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unsigned int v133;
  float64x2_t **v135;
  int v136;
  float *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  double *v142;
  uint64_t v143;
  float64x2_t v144;
  double v145;
  float64x2_t *v146;
  float64x2_t *v147;
  float64x2_t *v148;
  float64x2_t *v149;
  uint64_t v150;
  float64x2_t v151;
  uint64_t v152;
  float64x2_t v153;
  void *object[2];
  _BYTE v155[24];
  void *__p;
  int8x16_t v157;
  float64_t v158;
  double v159;
  double v160;
  int64x2_t v161;
  float64_t v162;
  int64x2_t v163;
  float64_t v164;
  float64x2_t v165;
  int64x2_t v166;
  int32x4_t v167;
  float64x2_t v168;
  float64_t v169;
  uint64_t v170;

  v6 = a1;
  v170 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = (char **)(a1 + 136);
  if (v7 != v9)
  {
    v10 = *(_QWORD *)(a1 + 144);
    do
    {
      v12 = *(void **)(v10 - 24);
      v10 -= 24;
      v11 = v12;
      if (v12)
      {
        *(_QWORD *)(v7 - 16) = v11;
        operator delete(v11);
      }
      v7 = v10;
    }
    while (v10 != v9);
  }
  *(_QWORD *)(v6 + 144) = v9;
  sub_20FD3E57C(a2, *(_DWORD *)(v6 + 8), v8, a4, *(float *)(v6 + 16), *(float *)(v6 + 12));
  v19 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 48) = v19;
  v139 = *(uint64_t **)(v6 + 144);
  v141 = *(uint64_t **)(v6 + 136);
  v20 = 0xAAAAAAAAAAAAAAABLL * (v139 - v141);
  v135 = (float64x2_t **)(v6 + 40);
  if (v20 > (uint64_t)(*(_QWORD *)(v6 + 56) - (_QWORD)v19) >> 5)
  {
    if (v20 >> 59)
      sub_20E867F44();
    v21 = (char *)operator new(0x5555555555555560 * (v139 - v141));
    *(_QWORD *)(v6 + 40) = v21;
    *(_QWORD *)(v6 + 48) = v21;
    *(_QWORD *)(v6 + 56) = &v21[0x5555555555555560 * (v139 - v141)];
    if (v19)
    {
      operator delete(v19);
      v141 = *(uint64_t **)(v6 + 136);
      v139 = *(uint64_t **)(v6 + 144);
    }
  }
  v143 = 0;
  if (v141 != v139)
  {
    v140 = v6;
    v136 = 0;
    v142 = (double *)(a3 + 168);
    v138 = (float *)(a3 + 204);
    while (1)
    {
      if (!a3)
        goto LABEL_142;
      v23 = (double *)*v141;
      v22 = (double *)v141[1];
      if ((double *)*v141 == v22)
        goto LABEL_142;
      v24 = 1;
      do
      {
        while (1)
        {
          v25 = *(_DWORD *)(a3 + 992);
          if (v25 == -1)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v26 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v27 = qword_254A6DE40;
              v28 = qword_254A6DE48;
              while (v27 != v28)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v27)(*(_QWORD *)(v27 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
                v27 += 16;
              }
            }
            v29 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
            v25 = *(_DWORD *)(a3 + 992);
            if (v25 <= 7)
            {
LABEL_20:
              if (!v25)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
LABEL_32:
              v30 = v23[1];
              *(double *)_Q3.i64 = *(double *)(a3 + 88) + *(double *)(a3 + 72) * *v23 + *(double *)(a3 + 80) * v30;
              v31 = *(double *)(a3 + 104);
              v14.i64[0] = *(_QWORD *)(a3 + 112);
              v13.f64[0] = v30 * v31 + *(double *)v14.i64;
              v159 = *(double *)_Q3.i64;
              v160 = v13.f64[0];
              goto LABEL_33;
            }
          }
          else if (v25 <= 7)
          {
            goto LABEL_20;
          }
          if (v25 <= 0xD)
            goto LABEL_32;
          _Q3.i64[0] = (uint64_t)v23[1];
          v13.f64[0] = *(double *)(a3 + 88) + *(double *)(a3 + 72) * *v23 + *(double *)(a3 + 80) * *(double *)_Q3.i64;
          v14.i64[0] = *(_QWORD *)(a3 + 112);
          v31 = *(double *)_Q3.i64 * *(double *)(a3 + 104) + *(double *)v14.i64;
          v159 = v13.f64[0];
          v160 = v31;
          if (v25 != 14)
            break;
LABEL_33:
          v146 = &v144;
          v147 = (float64x2_t *)&v159;
          v149 = 0;
          v150 = 0;
          v148 = 0;
          if (v25 > 7)
            goto LABEL_75;
LABEL_34:
          if (v25 > 3)
          {
            v37 = (uint64_t)v146;
            v36 = (double *)v147;
            v38 = v148;
            v39 = v149;
            v40 = v150;
            if (v25 > 5)
            {
              if (v25 == 6)
                v41 = sub_20EB41C58((double *)a3, (uint64_t)v146, v147->f64, v148, (uint64_t)v149, v150);
              else
                v41 = sub_20EB306CC(a3, (uint64_t)v146, v147, v148, (unint64_t)v149, v150, v13.f64[0], v31, v14, (int8x16_t)_Q3, *(double *)v16.i64, _Q5.f64[0], _Q6);
            }
            else if (v25 == 5)
            {
              if (v148)
              {
                v148->f64[0] = 0.0;
                v38->f64[1] = 0.0;
                v38[1].f64[0] = 0.0;
              }
              if (v40)
              {
                *(_QWORD *)(v40 + 64) = 0;
                *(_OWORD *)(v40 + 32) = 0u;
                *(_OWORD *)(v40 + 48) = 0u;
                *(_OWORD *)v40 = 0u;
                *(_OWORD *)(v40 + 16) = 0u;
              }
              if (v39)
                v41 = sub_20EB28F10(v37, (uint64_t)v39, v36, (uint64_t)v142, 5);
              else
                v41 = sub_20EB2886C(v37, v36, (uint64_t)v142, 5);
            }
            else
            {
              if (v148)
              {
                v148->f64[0] = 0.0;
                v38->f64[1] = 0.0;
                v38[1].f64[0] = 0.0;
              }
              if (v40)
              {
                *(_QWORD *)(v40 + 64) = 0;
                v13 = 0uLL;
                *(_OWORD *)(v40 + 32) = 0u;
                *(_OWORD *)(v40 + 48) = 0u;
                *(_OWORD *)v40 = 0u;
                *(_OWORD *)(v40 + 16) = 0u;
              }
              if (v39)
              {
                if (!*(_BYTE *)(a3 + 468))
                {
                  *(_QWORD *)&v13.f64[0] = sub_20EB27C0C((uint64_t)v138, v142, 0x32uLL, (int8x16_t)v13, v31, v14, (int8x16_t)_Q3).u64[0];
                  *(_BYTE *)(a3 + 468) = 1;
                }
                v41 = sub_20EA8D684(v37, (uint64_t)v36, (int64x2_t *)v142, v138, v39, 5, v13.f64[0], v31, *(double *)v14.i64, *(double *)_Q3.i64, *(double *)v16.i64, _Q5.f64[0], _Q6);
              }
              else
              {
                if (!*(_BYTE *)(a3 + 468))
                {
                  *(_QWORD *)&v13.f64[0] = sub_20EB27C0C((uint64_t)v138, v142, 0x32uLL, (int8x16_t)v13, v31, v14, (int8x16_t)_Q3).u64[0];
                  *(_BYTE *)(a3 + 468) = 1;
                }
                v41 = sub_20EA8D684(v37, (uint64_t)v36, (int64x2_t *)v142, v138, 0, 5, v13.f64[0], v31, *(double *)v14.i64, *(double *)_Q3.i64, *(double *)v16.i64, _Q5.f64[0], _Q6);
              }
            }
          }
          else
          {
            if (v25 <= 1)
            {
              if (!v25)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v32 = (uint64_t)v146;
              v34 = v148;
              v33 = v149;
              v35 = v150;
              v13 = *v147;
              *v146 = *v147;
              *(_QWORD *)(v32 + 16) = 0x3FF0000000000000;
              if (v34)
              {
                v34->f64[0] = 0.0;
                v34->f64[1] = 0.0;
                v34[1].f64[0] = 0.0;
              }
              if (v33)
              {
                *v33 = (float64x2_t)xmmword_210312EC0;
                v33[1] = (float64x2_t)unk_210312ED0;
                v13.f64[1] = 0.0;
                v33[2] = (float64x2_t)xmmword_210312EE0;
              }
              if (v35)
              {
                *(_QWORD *)(v35 + 64) = 0;
                v13.f64[1] = 0.0;
                *(_OWORD *)(v35 + 32) = 0u;
                *(_OWORD *)(v35 + 48) = 0u;
                *(_OWORD *)v35 = 0u;
                *(_OWORD *)(v35 + 16) = 0u;
              }
              goto LABEL_123;
            }
            if (v25 == 2)
            {
              v41 = sub_20EA8D22C((uint64_t)&v146, a3);
            }
            else
            {
              v47 = (double *)v146;
              v48 = (double *)v147;
              v50 = v148;
              v49 = v149;
              v51 = v150;
              if (v148)
              {
                v148->f64[0] = 0.0;
                v50->f64[1] = 0.0;
                v50[1].f64[0] = 0.0;
              }
              if (v51)
              {
                *(_QWORD *)(v51 + 64) = 0;
                v13.f64[0] = 0.0;
                *(_OWORD *)(v51 + 32) = 0u;
                *(_OWORD *)(v51 + 48) = 0u;
                *(_OWORD *)v51 = 0u;
                *(_OWORD *)(v51 + 16) = 0u;
              }
              if (v49)
                v41 = sub_20EB27398(v47, (uint64_t)v49, v48, (int64x2_t *)v142, 20, v13.f64[0], v31, *(double *)v14.i64, *(double *)_Q3.i64, (int64x2_t)v16);
              else
                v41 = sub_20EB23DF0((uint64_t)v47, v48, (int64x2_t *)v142, 20, v13.f64[0], v31, *(double *)v14.i64, *(double *)_Q3.i64, (int64x2_t)v16, _Q5);
            }
          }
LABEL_122:
          if ((v41 & 1) != 0)
            goto LABEL_123;
LABEL_17:
          v24 = 0;
          v23 += 2;
          if (v23 == v22)
            goto LABEL_141;
        }
        v42 = &v144;
        v43 = (float64x2_t *)&v159;
        v146 = &v144;
        v147 = (float64x2_t *)&v159;
        v149 = 0;
        v150 = 0;
        v148 = 0;
        if (v25 != -1)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
LABEL_102:
          v41 = sub_20EB3CED8(a3, (uint64_t)v42, v43, v46, v45, v44);
          goto LABEL_122;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v25 = *(_DWORD *)(a3 + 992);
        if (v25 <= 7)
          goto LABEL_34;
LABEL_75:
        v42 = v146;
        if (v25 <= 0xB)
        {
          v52 = (double *)v147;
          v53 = v148;
          v45 = v149;
          v54 = v150;
          if (v25 > 9)
          {
            if (v25 == 10)
            {
              if (v148)
              {
                v148->f64[0] = 0.0;
                v53->f64[1] = 0.0;
                v53[1].f64[0] = 0.0;
              }
              if (v54)
              {
                *(_QWORD *)(v54 + 64) = 0;
                *(_OWORD *)(v54 + 32) = 0u;
                *(_OWORD *)(v54 + 48) = 0u;
                *(_OWORD *)v54 = 0u;
                *(_OWORD *)(v54 + 16) = 0u;
              }
              v55 = (*(double *)a3 + *(double *)(a3 + 32)) * 0.5;
              v41 = sub_20EB24F38((uint64_t)v42, (uint64_t)v52, (uint64_t)v142, (double *)(a3 + 280), 0x14u, v55);
              if (v45)
              {
                if ((v41 & 1) == 0)
                  goto LABEL_17;
                if (!sub_20EB2450C(&v153, (uint64_t)&v165, &v151, (uint64_t)v42, v142, v55))
                  goto LABEL_17;
                v13.f64[0] = v42[1].f64[0];
                v56 = (int8x16_t)v166;
                v16 = v167;
                _Q3 = (int32x4_t)v165;
                v168 = *v42;
                v14 = (int8x16_t)v168;
                v169 = v13.f64[0];
                v152 = 0;
                v57.f64[0] = v13.f64[0];
                v57.f64[1] = v168.f64[0];
                _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v167, v57), (float64x2_t)vzip2q_s64((int64x2_t)v167, v166), (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v13, 8uLL));
                _Q6 = vmulq_f64(v165, _Q5);
                _Q5.f64[0] = _Q5.f64[1];
                __asm { FMLA            D6, D5, V3.D[1] }
                _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v166, v168), 1), (float64x2_t)v167, v168).f64[0], *(double *)v166.i64);
                _Q5.f64[0] = fabs(_Q6.f64[0]);
                if (_Q5.f64[0] < 0.00000001)
                  goto LABEL_17;
                goto LABEL_101;
              }
            }
            else
            {
              v41 = sub_20EB38E20(a3, (uint64_t)v146, v147, v148, v149, v150);
            }
          }
          else if (v25 == 9)
          {
            v41 = sub_20EB35004(a3, (uint64_t)v146, v147, v148, (unint64_t)v149, v150, v13.f64[0], v31, *(double *)v14.i64, _Q3, v16);
          }
          else
          {
            if (v148)
            {
              v148->f64[0] = 0.0;
              v53->f64[1] = 0.0;
              v53[1].f64[0] = 0.0;
            }
            if (v54)
            {
              *(_QWORD *)(v54 + 64) = 0;
              v13.f64[0] = 0.0;
              *(_OWORD *)(v54 + 32) = 0u;
              *(_OWORD *)(v54 + 48) = 0u;
              *(_OWORD *)v54 = 0u;
              *(_OWORD *)(v54 + 16) = 0u;
            }
            if (v45)
            {
              v41 = sub_20EB277C4((uint64_t)v42, (uint64_t)v45, v52, (uint64_t)v142, 20, v13.f64[0], v31, *(double *)v14.i64, _Q3, v16);
            }
            else
            {
              v70 = sqrt(*v52 * *v52 + v52[1] * v52[1]);
              v41 = sub_20EB24018((uint64_t)v42, v52, v142, 20, v70, v70, *(double *)v14.i64, _Q3, v16);
            }
          }
          goto LABEL_122;
        }
        if (v25 <= 0xD)
        {
          if (v25 != 13)
          {
            v68 = v148;
            v67 = v149;
            v69 = v150;
            if (v148)
            {
              v148->f64[0] = 0.0;
              v68->f64[1] = 0.0;
              v68[1].f64[0] = 0.0;
            }
            if (v69)
            {
              *(_QWORD *)(v69 + 64) = 0;
              v13.f64[1] = 0.0;
              *(_OWORD *)(v69 + 32) = 0u;
              *(_OWORD *)(v69 + 48) = 0u;
              *(_OWORD *)v69 = 0u;
              *(_OWORD *)(v69 + 16) = 0u;
            }
            v42->f64[0] = 0.0;
            v42->f64[1] = 0.0;
            v42[1].f64[0] = 0.0;
            if (v67)
            {
              v13.f64[1] = 0.0;
              v67[1] = 0u;
              v67[2] = 0u;
              *v67 = 0u;
            }
            goto LABEL_17;
          }
          v41 = sub_20EB43734((double *)a3, (uint64_t)v146, (uint64_t)v147, v148, (uint64_t)v149, v150);
          goto LABEL_122;
        }
        v43 = v147;
        v46 = v148;
        v45 = v149;
        v44 = v150;
        if (v25 != 14)
          goto LABEL_102;
        if (v148)
        {
          v148->f64[0] = 0.0;
          v46->f64[1] = 0.0;
          v46[1].f64[0] = 0.0;
        }
        if (v44)
        {
          *(_QWORD *)(v44 + 64) = 0;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)v44 = 0u;
          *(_OWORD *)(v44 + 16) = 0u;
        }
        v62 = (*(double *)a3 + *(double *)(a3 + 32)) * 0.5;
        v63 = sub_20EB253A0((uint64_t)v42, (uint64_t)v43, v142, (double *)(a3 + 392), 0x14u, v62);
        if (v45)
        {
          if ((v63 & 1) == 0)
            goto LABEL_17;
          if (!sub_20EB2498C(&v153, (uint64_t)&v165, &v151, (uint64_t)v42, v142, v62))
            goto LABEL_17;
          v13.f64[0] = v42[1].f64[0];
          v56 = (int8x16_t)v166;
          v16 = v167;
          _Q3 = (int32x4_t)v165;
          v168 = *v42;
          v14 = (int8x16_t)v168;
          v169 = v13.f64[0];
          v152 = 0;
          v64.f64[0] = v13.f64[0];
          v64.f64[1] = v168.f64[0];
          _Q5 = vmlsq_f64(vmulq_f64((float64x2_t)v167, v64), (float64x2_t)vzip2q_s64((int64x2_t)v167, v166), (float64x2_t)vextq_s8((int8x16_t)v168, (int8x16_t)v13, 8uLL));
          _Q6 = vmulq_f64(v165, _Q5);
          _Q5.f64[0] = _Q5.f64[1];
          __asm { FMLA            D6, D5, V3.D[1] }
          _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], vmlsq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)vmulq_f64((float64x2_t)v166, v168), 1), (float64x2_t)v167, v168).f64[0], *(double *)v166.i64);
          _Q5.f64[0] = fabs(_Q6.f64[0]);
          if (_Q5.f64[0] < 0.00000001)
            goto LABEL_17;
LABEL_101:
          *(_QWORD *)&v65 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
          _Q3.i64[1] = vextq_s8(v56, v56, 8uLL).u64[0];
          *((_QWORD *)&v65 + 1) = v16.i64[0];
          v56.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
          *(int32x4_t *)object = _Q3;
          *(_QWORD *)v155 = v14.i64[0];
          __p = (void *)vextq_s8(v14, v14, 8uLL).u64[0];
          *(_OWORD *)&v155[8] = v65;
          v158 = v13.f64[0];
          v157 = v56;
          sub_20E8BE424((uint64_t)&v161);
          v13.f64[0] = v162;
          v14.i64[1] = v163.i64[1];
          _Q3 = (int32x4_t)vzip1q_s64(v161, v163);
          v66 = vzip2q_s64(v161, v163);
          v13.f64[1] = v164;
          *v45 = (float64x2_t)_Q3;
          v45[1] = (float64x2_t)v66;
          v45[2] = v13;
          goto LABEL_123;
        }
        if (!v63)
          goto LABEL_17;
LABEL_123:
        if (v145 < 0.00000001)
          goto LABEL_17;
        if (v145 == 0.0)
          v71 = 1.0;
        else
          v71 = 1.0 / v145;
        v13 = vmulq_n_f64(v144, v71);
        v144 = v13;
        v145 = 1.0;
        v72 = *(_DWORD *)(a3 + 992);
        if (v72 != -1)
        {
          if (v72 > 7)
            goto LABEL_133;
LABEL_132:
          if (!v72)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_133;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v72 = *(_DWORD *)(a3 + 992);
        if (v72 <= 7)
          goto LABEL_132;
LABEL_133:
        v73 = v144.f64[1];
        *v23 = *(double *)(a3 + 16) + *(double *)a3 * v144.f64[0] + *(double *)(a3 + 8) * v144.f64[1];
        v23[1] = v73 * *(double *)(a3 + 32) + *(double *)(a3 + 40);
        v24 &= 1u;
        v23 += 2;
      }
      while (v23 != v22);
LABEL_141:
      if ((v24 & 1) != 0)
      {
LABEL_142:
        if (sub_20FD3FBC4(v141, *(unsigned __int8 *)(v6 + 24), (float64x2_t *)object, *(float *)(v6 + 20), *(float *)(v6 + 28)))
        {
          if (a3
            && (v74 = sub_20F163D80(a3, (double *)object),
                (v74 & sub_20F163D80(a3, (double *)v155) & 1) == 0))
          {
            HIDWORD(v143) = ++v136;
          }
          else
          {
            v75 = (double)(unint64_t)a2[4];
            v76 = (double)(unint64_t)a2[6];
            v165 = 0uLL;
            *(double *)v161.i64 = v75 + -1.0;
            *(double *)&v161.i64[1] = v76 + -1.0;
            sub_20F164AA4((double *)object, (double *)v155, v165.f64, (double *)v161.i64);
            HIDWORD(v77) = *(_DWORD *)&v155[4];
            v78 = vsubq_f64(*(float64x2_t *)object, *(float64x2_t *)v155);
            v13 = vmulq_f64(v78, v78);
            LODWORD(v77) = *(_DWORD *)(v6 + 8);
            if (sqrt(vaddvq_f64(v13)) > (double)v77)
            {
              v80 = *(char **)(v6 + 48);
              v79 = *(_QWORD *)(v6 + 56);
              if ((unint64_t)v80 >= v79)
              {
                v82 = *v135;
                v83 = (v80 - (char *)*v135) >> 5;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 59)
                  sub_20E867F44();
                v85 = v79 - (_QWORD)v82;
                if (v85 >> 4 > v84)
                  v84 = v85 >> 4;
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0)
                  v86 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v86 = v84;
                if (v86)
                {
                  if (v86 >> 59)
                    sub_20E877A38();
                  v87 = (char *)operator new(32 * v86);
                }
                else
                {
                  v87 = 0;
                }
                *(void **)&v13.f64[1] = object[1];
                v88 = *(_OWORD *)v155;
                v89 = &v87[32 * v83];
                *(_OWORD *)v89 = *(_OWORD *)object;
                *((_OWORD *)v89 + 1) = v88;
                v90 = v89;
                if (v80 != (char *)v82)
                {
                  do
                  {
                    *((_OWORD *)v90 - 2) = *((_OWORD *)v80 - 2);
                    v13 = *((float64x2_t *)v80 - 1);
                    *((float64x2_t *)v90 - 1) = v13;
                    v90 -= 32;
                    v80 -= 32;
                  }
                  while (v80 != (char *)v82);
                  v80 = (char *)*v135;
                }
                v81 = v89 + 32;
                *(_QWORD *)(v6 + 40) = v90;
                *(_QWORD *)(v6 + 48) = v89 + 32;
                *(_QWORD *)(v6 + 56) = &v87[32 * v86];
                if (v80)
                  operator delete(v80);
              }
              else
              {
                *(_OWORD *)v80 = *(_OWORD *)object;
                v13.f64[1] = *(float64_t *)&v155[8];
                *((_OWORD *)v80 + 1) = *(_OWORD *)v155;
                v81 = v80 + 32;
              }
              *(_QWORD *)(v6 + 48) = v81;
            }
          }
        }
      }
      else
      {
        LODWORD(v143) = v143 + 1;
      }
      v141 += 3;
      if (v141 == v139)
      {
        if (!(_DWORD)v143
          || (sub_20F1649B0(&v161), **(int **)(v161.i64[0] + 56) > 4)
          || ((v91 = *(unsigned __int8 *)(v161.i64[0] + 72),
               (v92 = sub_20E8C31DC(v161.i64[0], "OSLogSurrogateAppender", 1, 0)) == 0)
            ? (v93 = 0)
            : (v93 = v92 + 16),
              !v91 && !v92))
        {
          if (!v136)
            break;
          goto LABEL_176;
        }
        *(_QWORD *)&v165.f64[0] = &v161;
        *(std::chrono::steady_clock::time_point *)&v165.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)v166.i8 = std::chrono::system_clock::now();
        v166.i32[2] = 4;
        v167.i64[0] = (uint64_t)"unknown file";
        v167.i32[2] = 149;
        v168.f64[1] = 0.0;
        v169 = 0.0;
        *(_QWORD *)&v168.f64[0] = "unknown function";
        v94 = **(_QWORD **)&v165.f64[0];
        v95 = (uint64_t *)(**(_QWORD **)&v165.f64[0] + 16);
        if (*(char *)(**(_QWORD **)&v165.f64[0] + 39) < 0)
        {
          v97 = *(const char **)(v94 + 16);
          v96 = *(_QWORD *)(v94 + 24);
          v107 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v107 & 1) == 0)
          {
LABEL_272:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if (v155[8] && (v155[7] & 0x80000000) != 0)
                operator delete(object[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v96 = *(unsigned __int8 *)(**(_QWORD **)&v165.f64[0] + 39);
          v97 = (const char *)(v94 + 16);
          v98 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v98 & 1) == 0)
            goto LABEL_272;
        }
        if (byte_254A4A4F8[23] >= 0)
          v108 = byte_254A4A4F8;
        else
          v108 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v109 = byte_254A4A4F8[23];
        else
          v109 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v108, v97);
        v110 = &object[1];
        if (v109 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v109 >= 0x17)
        {
          v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v109 | 7) != 0x17)
            v111 = v109 | 7;
          v112 = v111 + 1;
          v110 = (void **)operator new(v111 + 1);
          *(_QWORD *)v155 = v109;
          *(_QWORD *)&v155[8] = v112 | 0x8000000000000000;
          object[1] = v110;
        }
        else
        {
          v155[15] = v109;
          if (!v109)
          {
LABEL_200:
            *((_BYTE *)v110 + v109) = 0;
            v155[16] = 1;
            p_p = &__p;
            if (v96 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v6 = v140;
            if (v96 >= 0x17)
            {
              v114 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v96 | 7) != 0x17)
                v114 = v96 | 7;
              v115 = v114 + 1;
              p_p = operator new(v114 + 1);
              v157.i64[0] = v96;
              v157.i64[1] = v115 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              v157.i8[15] = v96;
              if (!v96)
              {
LABEL_208:
                *((_BYTE *)p_p + v96) = 0;
                LOBYTE(v158) = 1;
                v116 = object[0];
                if (v157.i8[15] < 0)
                  operator delete(__p);
                if (v155[16] && (v155[15] & 0x80000000) != 0)
                  operator delete(object[1]);
                if (object[0])
                  os_release(object[0]);
                sub_20F164CE0((int)object, v93, v95, v116, OS_LOG_TYPE_ERROR, v91 != 0, (int *)&v143);
                if (v91)
                {
                  sub_20E8C003C((uint64_t)&v165, "Failed to undistort chain points; %d segment candidates were discarded...",
                    v143);
                  sub_20E863570((uint64_t)&v165);
                }
                sub_20E863570((uint64_t)&v165);
                v117 = *(std::__shared_weak_count **)&v169;
                if (v169 != 0.0)
                {
                  v118 = (unint64_t *)(*(_QWORD *)&v169 + 8);
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
                if (!HIDWORD(v143))
                  break;
LABEL_176:
                sub_20F1649B0(&v161);
                v6 = v140;
                if (**(int **)(v161.i64[0] + 56) > 4)
                  break;
                v99 = *(unsigned __int8 *)(v161.i64[0] + 72);
                v100 = sub_20E8C31DC(v161.i64[0], "OSLogSurrogateAppender", 1, 0);
                v101 = v100 ? v100 + 16 : 0;
                if (!v99 && !v100)
                  break;
                *(_QWORD *)&v165.f64[0] = &v161;
                *(std::chrono::steady_clock::time_point *)&v165.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
                *(std::chrono::system_clock::time_point *)v166.i8 = std::chrono::system_clock::now();
                v166.i32[2] = 4;
                v167.i64[0] = (uint64_t)"unknown file";
                v167.i32[2] = 154;
                v168.f64[1] = 0.0;
                v169 = 0.0;
                *(_QWORD *)&v168.f64[0] = "unknown function";
                v102 = **(_QWORD **)&v165.f64[0];
                v103 = (uint64_t *)(**(_QWORD **)&v165.f64[0] + 16);
                if (*(char *)(**(_QWORD **)&v165.f64[0] + 39) < 0)
                {
                  v105 = *(const char **)(v102 + 16);
                  v104 = *(_QWORD *)(v102 + 24);
                  v120 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v120 & 1) == 0)
                  {
LABEL_279:
                    if (__cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)object);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                      if (v155[8] && (v155[7] & 0x80000000) != 0)
                        operator delete(object[0]);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                  }
                }
                else
                {
                  v104 = *(unsigned __int8 *)(**(_QWORD **)&v165.f64[0] + 39);
                  v105 = (const char *)(v102 + 16);
                  v106 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v106 & 1) == 0)
                    goto LABEL_279;
                }
                if (byte_254A4A4F8[23] >= 0)
                  v121 = byte_254A4A4F8;
                else
                  v121 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v122 = byte_254A4A4F8[23];
                else
                  v122 = *(_QWORD *)&byte_254A4A4F8[8];
                object[0] = os_log_create(v121, v105);
                v123 = &object[1];
                if (v122 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v122 >= 0x17)
                {
                  v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v122 | 7) != 0x17)
                    v124 = v122 | 7;
                  v125 = v124 + 1;
                  v123 = (void **)operator new(v124 + 1);
                  *(_QWORD *)v155 = v122;
                  *(_QWORD *)&v155[8] = v125 | 0x8000000000000000;
                  object[1] = v123;
                }
                else
                {
                  v155[15] = v122;
                  if (!v122)
                  {
LABEL_239:
                    *((_BYTE *)v123 + v122) = 0;
                    v155[16] = 1;
                    v126 = &__p;
                    if (v104 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v6 = v140;
                    if (v104 >= 0x17)
                    {
                      v127 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v104 | 7) != 0x17)
                        v127 = v104 | 7;
                      v128 = v127 + 1;
                      v126 = operator new(v127 + 1);
                      v157.i64[0] = v104;
                      v157.i64[1] = v128 | 0x8000000000000000;
                      __p = v126;
                    }
                    else
                    {
                      v157.i8[15] = v104;
                      if (!v104)
                        goto LABEL_247;
                    }
                    memmove(v126, v105, v104);
LABEL_247:
                    *((_BYTE *)v126 + v104) = 0;
                    LOBYTE(v158) = 1;
                    v129 = object[0];
                    if (v157.i8[15] < 0)
                      operator delete(__p);
                    if (v155[16] && (v155[15] & 0x80000000) != 0)
                      operator delete(object[1]);
                    if (object[0])
                      os_release(object[0]);
                    sub_20F165124((int)object, v101, v103, v129, OS_LOG_TYPE_ERROR, v99 != 0, (int *)&v143 + 1);
                    if (v99)
                    {
                      sub_20E8C003C((uint64_t)&v165, "Failed to distort segment endpoints; %d segment candidates were discarded...",
                        HIDWORD(v143));
                      sub_20E863570((uint64_t)&v165);
                    }
                    sub_20E863570((uint64_t)&v165);
                    v130 = *(std::__shared_weak_count **)&v169;
                    if (v169 != 0.0)
                    {
                      v131 = (unint64_t *)(*(_QWORD *)&v169 + 8);
                      do
                        v132 = __ldaxr(v131);
                      while (__stlxr(v132 - 1, v131));
                      if (!v132)
                      {
                        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                        std::__shared_weak_count::__release_weak(v130);
                      }
                    }
                    break;
                  }
                }
                memmove(v123, v121, v122);
                goto LABEL_239;
              }
            }
            memmove(p_p, v97, v96);
            goto LABEL_208;
          }
        }
        memmove(v110, v108, v109);
        goto LABEL_200;
      }
    }
  }
  v133 = *(_DWORD *)(v6 + 32);
  if (v133)
    return sub_20FD86334(v135, (char **)(v6 + 64), v133, (double **)(v6 + 88), (int32x4_t **)(v6 + 112));
  return v135;
}

void sub_20F163C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;

  if (a43)
  {
    if (a42 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v43 - 224);
  _Unwind_Resume(a1);
}

void sub_20F163C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *object,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F163D80(uint64_t a1, double *a2)
{
  unsigned int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  double v15;
  double v21;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  int v37;
  double v40;
  double v41;
  double v42;
  int v43;
  int v44;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  int v53;
  int v54;
  double v56;
  float64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  double v63;
  double v64;
  float64x2_t v65;
  double v66;
  double v67;
  float64x2_t v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v75;
  unsigned int v76;
  double v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  uint64_t v83;
  float64x2_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 992);
  if (v4 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_122;
    }
    v4 = *(_DWORD *)(a1 + 992);
    if (v4 <= 7)
    {
LABEL_3:
      if (!v4)
      {
LABEL_123:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      goto LABEL_8;
    }
  }
  else if (v4 <= 7)
  {
    goto LABEL_3;
  }
  if (v4 <= 0xD)
  {
LABEL_8:
    v5 = a2[1];
    v6 = v5 * *(double *)(a1 + 104) + *(double *)(a1 + 112);
    v82.f64[0] = *(double *)(a1 + 88) + *(double *)(a1 + 72) * *a2 + *(double *)(a1 + 80) * v5;
    v82.f64[1] = v6;
    goto LABEL_9;
  }
  v12 = a2[1];
  v6 = v12 * *(double *)(a1 + 104) + *(double *)(a1 + 112);
  v82.f64[0] = *(double *)(a1 + 88) + *(double *)(a1 + 72) * *a2 + *(double *)(a1 + 80) * v12;
  v82.f64[1] = v6;
  if (v4 == 14)
  {
LABEL_9:
    v83 = 0x3FF0000000000000;
    if (v4 <= 7)
      goto LABEL_10;
LABEL_23:
    if (v4 <= 0xB)
    {
      if (v4 > 9)
      {
        if (v4 == 10)
          v13 = sub_20EB24288(&v84, (uint64_t)&v82, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v13 = sub_20EB3A2E4(a1, &v84, &v82);
      }
      else
      {
        if (v4 != 9)
        {
          _Q0 = v82;
          _D1 = v82.f64[1];
          __asm { FMLA            D5, D1, V0.D[1] }
          v31 = sqrt(_D5);
          v40 = fabs(v31);
          v33 = 1.0;
          if (v40 <= 1.0)
            v41 = v40;
          else
            v41 = 1.0 / v40;
          if (v41 <= 0.414213562)
          {
            v43 = 1;
            v44 = 2;
            v42 = v41;
          }
          else
          {
            v42 = (v40 + -1.0) / (v40 + 1.0);
            if (v40 <= 1.0)
              v42 = -v42;
            v43 = -1;
            v44 = 1;
          }
          if (_D5 < 0.00000001)
            goto LABEL_86;
          v56 = 1.0;
          if (v40 > 1.0)
            v43 = -v43;
          else
            v44 = v41 > 0.414213562;
          if (v31 < 0.0)
            v44 = -v44;
          v62 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v42 * v42), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v42 * v42), (float64x2_t)xmmword_210315370), v42 * v42 * (v42 * v42))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v42 * v42), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v42 * v42), (float64x2_t)xmmword_210315380), v42 * v42 * (v42 * v42))), v42 * v42 * (v42 * v42) * (v42 * v42 * (v42 * v42))));
          v63 = v42 + v42 * vdivq_f64(v62, (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1)).f64[0];
          if (v31 < 0.0)
            v43 = -v43;
          v64 = (double)v44 * 3.061617e-17 + (double)v44 * 0.785398163 + v63 * (double)v43;
          v61 = v64
              * (v64
               * v64
               * (*(double *)(a1 + 168)
                + v64
                * v64
                * (*(double *)(a1 + 176)
                 + v64
                 * v64
                 * (*(double *)(a1 + 184)
                  + v64
                  * v64
                  * (*(double *)(a1 + 192)
                   + v64
                   * v64
                   * (*(double *)(a1 + 200) + v64 * v64 * (*(double *)(a1 + 208) + v64 * v64 * *(double *)(a1 + 216)))))))
               + 1.0);
          goto LABEL_85;
        }
        v13 = sub_20EB3641C(a1, &v84, &v82);
      }
      goto LABEL_63;
    }
    if (v4 <= 0xD)
    {
      if (v4 == 13)
      {
        _V0.D[1] = v82.f64[1];
        v15 = (*(double *)a1 + *(double *)(a1 + 32)) * 0.5;
        _D3 = v82.f64[1];
        __asm { FMLA            D2, D3, V0.D[1] }
        v21 = v15 * (_D2 * v15);
        v84 = vdivq_f64(v82, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v21* (*(double *)(a1 + 168)+ v15 * *(double *)(a1 + 224)+ v21* (*(double *)(a1 + 176)+ v15 * *(double *)(a1 + 232)+ v21* (*(double *)(a1 + 184)+ v15 * *(double *)(a1 + 240)+ v21* (*(double *)(a1 + 192)+ v15 * *(double *)(a1 + 248)+ v21* (*(double *)(a1 + 200)+ v15 * *(double *)(a1 + 256)+ v21
                                    * (*(double *)(a1 + 208)
                                     + v15 * *(double *)(a1 + 264)
                                     + v21 * (*(double *)(a1 + 216) + *(double *)(a1 + 272) * v15 + v21 * 0.0)))))))
                               / 100.0
                               + 1.0),
                               0));
        goto LABEL_102;
      }
      return 0;
    }
    if (v4 == 14)
    {
      v13 = sub_20EB247C0(&v84, (uint64_t)&v82, (double *)(a1 + 168), (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
      goto LABEL_63;
    }
LABEL_39:
    v13 = sub_20EB3E39C(a1, &v84, &v82);
LABEL_63:
    if ((v13 & 1) != 0)
      goto LABEL_102;
    return 0;
  }
  v83 = 0x3FF0000000000000;
  if (v4 != -1)
    goto LABEL_39;
  v81 = v6;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_122:
    abort();
  }
  v4 = *(_DWORD *)(a1 + 992);
  v6 = v81;
  if (v4 > 7)
    goto LABEL_23;
LABEL_10:
  if (v4 > 3)
  {
    if (v4 <= 5)
    {
      if (v4 == 5)
      {
        v7 = v82.f64[0] * v82.f64[0] + v6 * v6;
        v8 = 1.0;
        if (v7 >= 0.00000001)
        {
          v9 = sqrt(v7);
          if (v9 <= 1.0)
          {
            v11 = v9 * 0.785398163 - v9 * (v9 + -1.0) * (v9 * 0.0663008339 + 0.244711287);
          }
          else
          {
            v10 = fabs(1.0 / v9);
            v11 = 1.0 / v9 * (v10 + -1.0) * (v10 * 0.0663008339 + 0.244711287) + 1.0 / v9 * -0.785398163 + 1.57079633;
          }
          v75 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v11 * v11)), v11 * v11);
          v8 = (v11 + v11 * (v75.f64[0] + vmuld_lane_f64(v11 * v11 * (v11 * v11), v75, 1))) / v9;
        }
        v84.f64[0] = v82.f64[0] * v8;
        v84.f64[1] = v6 * v8;
        goto LABEL_102;
      }
      _Q0 = v82;
      _D1 = v82.f64[1];
      __asm { FMLA            D5, D1, V0.D[1] }
      v31 = sqrt(_D5);
      v32 = fabs(v31);
      v33 = 1.0;
      if (v32 <= 1.0)
        v34 = v32;
      else
        v34 = 1.0 / v32;
      if (v34 <= 0.414213562)
      {
        v36 = 1;
        v37 = 2;
        v35 = v34;
      }
      else
      {
        v35 = (v32 + -1.0) / (v32 + 1.0);
        if (v32 <= 1.0)
          v35 = -v35;
        v36 = -1;
        v37 = 1;
      }
      if (_D5 < 0.00000001)
      {
LABEL_86:
        v65 = vmulq_n_f64(_Q0, v33);
        v66 = *(double *)a1;
        v67 = v65.f64[1];
        goto LABEL_119;
      }
      v56 = 1.0;
      if (v32 > 1.0)
        v36 = -v36;
      else
        v37 = v34 > 0.414213562;
      if (v31 < 0.0)
        v37 = -v37;
      v57 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v35 * v35), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v35 * v35), (float64x2_t)xmmword_210315370), v35 * v35 * (v35 * v35))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v35 * v35), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v35 * v35), (float64x2_t)xmmword_210315380), v35 * v35 * (v35 * v35))), v35 * v35 * (v35 * v35) * (v35 * v35 * (v35 * v35))));
      v58 = v35 + v35 * vdivq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v57, 1)).f64[0];
      if (v31 < 0.0)
        v36 = -v36;
      v59 = (double)v37 * 3.061617e-17 + (double)v37 * 0.785398163 + v58 * (double)v36;
      v60 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v59 * v59)), v59 * v59);
      v61 = v59 + v59 * (v60.f64[0] + vmuld_lane_f64(v59 * v59 * (v59 * v59), v60, 1));
LABEL_85:
      v33 = v56 / v31 * v61;
      goto LABEL_86;
    }
    if (v4 == 6)
    {
      v25.f64[0] = v82.f64[0];
      v25.f64[1] = v6;
      v26 = vaddq_f64(v25, *(float64x2_t *)(a1 + 192));
      v27 = sqrt(vaddvq_f64(vmulq_f64(v26, v26)));
      v84 = vaddq_f64(*(float64x2_t *)(a1 + 208), vmulq_n_f64(v26, v27 * (v27 * (*(double *)(a1 + 168) + v27 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * v27)))+ 1.0));
      goto LABEL_102;
    }
    v13 = sub_20EB31FFC(a1, &v84, &v82);
    goto LABEL_63;
  }
  if (v4 > 1)
  {
    if (v4 == 2)
    {
      if (*(_DWORD *)(a1 + 212))
      {
        _D2 = v82.f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        v24 = vaddq_f64(vaddq_f64(vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(v82, vaddq_f64(v82, v82))), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL)), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 192), *(float64x2_t *)(a1 + 192)), v82.f64[0]), v82, 1)), vmulq_n_f64(v82, *(double *)(a1 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(a1 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(a1 + 184) * *(double *)&_D1))));
      }
      else
      {
        _V0.D[1] = v82.f64[1];
        _D2 = v82.f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        v24 = vmulq_n_f64(v82, *(double *)(a1 + 168) * _D1 + 1.0 + _D1 * _D1 * (*(double *)(a1 + 176) + *(double *)(a1 + 184) * _D1));
      }
    }
    else
    {
      _V0.D[1] = v82.f64[1];
      _D1 = v82.f64[1];
      __asm { FMLA            D5, D1, V0.D[1] }
      v48 = sqrt(_D5);
      v49 = fabs(v48);
      v50 = 1.0;
      if (v49 <= 1.0)
        v51 = v49;
      else
        v51 = 1.0 / v49;
      if (v51 <= 0.414213562)
      {
        v53 = 1;
        v54 = 2;
        v52 = v51;
      }
      else
      {
        v52 = (v49 + -1.0) / (v49 + 1.0);
        if (v49 <= 1.0)
          v52 = -v52;
        v53 = -1;
        v54 = 1;
      }
      if (_D5 >= 0.00000001)
      {
        if (v49 > 1.0)
          v53 = -v53;
        else
          v54 = v51 > 0.414213562;
        if (v48 < 0.0)
          v54 = -v54;
        v68 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v52 * v52), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v52 * v52), (float64x2_t)xmmword_210315370), v52 * v52 * (v52 * v52))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v52 * v52), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v52 * v52), (float64x2_t)xmmword_210315380), v52 * v52 * (v52 * v52))), v52 * v52 * (v52 * v52) * (v52 * v52 * (v52 * v52))));
        v69 = v52 + v52 * vdivq_f64(v68, (float64x2_t)vdupq_laneq_s64((int64x2_t)v68, 1)).f64[0];
        if (v48 < 0.0)
          v53 = -v53;
        v70 = (double)v54 * 3.061617e-17 + (double)v54 * 0.785398163 + v69 * (double)v53;
        v71 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 168), *(int64x2_t *)(a1 + 184)), v70 * v70)), v70 * v70);
        v50 = 1.0 / v48 * (v70 + v70 * (v71.f64[0] + vmuld_lane_f64(v70 * v70 * (v70 * v70), v71, 1)));
      }
      v24 = vmulq_n_f64(v82, v50);
    }
    goto LABEL_118;
  }
  if (!v4)
    goto LABEL_123;
  v84 = v82;
LABEL_102:
  v76 = *(_DWORD *)(a1 + 992);
  if (v76 != -1)
  {
    if (v76 <= 7)
      goto LABEL_104;
LABEL_110:
    if (v76 > 0xB)
      goto LABEL_112;
    _ZF = v76 == 9;
    if (v76 > 9)
      goto LABEL_112;
LABEL_114:
    v66 = *(double *)a1;
    v65.f64[0] = v84.f64[0];
    if (_ZF)
    {
      v79 = v66 * v84.f64[0];
      v78 = *(double *)(a1 + 8);
      v67 = v84.f64[1];
      goto LABEL_120;
    }
    v67 = v84.f64[1];
LABEL_119:
    v79 = v66 * v65.f64[0];
    v78 = *(double *)(a1 + 8);
    goto LABEL_120;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v76 = *(_DWORD *)(a1 + 992);
  if (v76 > 7)
    goto LABEL_110;
LABEL_104:
  if (v76 > 3)
  {
    _ZF = v76 == 5;
    if (v76 > 5)
    {
LABEL_112:
      v78 = *(double *)(a1 + 8);
      v67 = v84.f64[1];
      v79 = *(double *)a1 * v84.f64[0];
LABEL_120:
      v80 = v79 + v78 * v67;
      goto LABEL_121;
    }
    goto LABEL_114;
  }
  if (v76 <= 1)
  {
    if (!v76)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_112;
  }
  v24 = v84;
LABEL_118:
  v80 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v24));
  v67 = v24.f64[1];
LABEL_121:
  *a2 = v80 + *(double *)(a1 + 16);
  a2[1] = v67 * *(double *)(a1 + 32) + *(double *)(a1 + 40);
  return 1;
}

void sub_20F1649B0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A622C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A622C8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.feature_detection");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A622C0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A622C8);
  }
  *a1 = qword_254A622C0;
}

void sub_20F164A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A622C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A622C8);
  _Unwind_Resume(a1);
}

uint64_t sub_20F164AA4(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  double *v15;
  double v16;
  uint64_t v17;
  double *v18;
  double v19;

  v4 = *a4;
  v5 = a4[1];
  v7 = *a3;
  v6 = a3[1];
  v8 = (4 * (a1[1] < v6)) | (8 * (a1[1] > v5)) | (*a1 < *a3) | (2 * (*a1 > *a4));
  v9 = (4 * (a2[1] < v6)) | (8 * (a2[1] > v5));
  v10 = *a2 > *a4;
  v11 = *a2 < *a3;
LABEL_2:
  v12 = v11;
  v13 = v9 | v12 | (2 * v10);
  while (1)
  {
    if (!(v8 | v13))
      return 1;
    if ((v8 & v13) != 0)
      break;
    if (v8)
    {
      if ((v8 & 1) != 0)
      {
        v14 = 0;
        v15 = a3;
      }
      else
      {
        if ((v8 & 2) != 0)
        {
          v14 = 0;
        }
        else
        {
          if ((v8 & 4) != 0)
          {
            v14 = 1;
            v15 = a3 + 1;
            goto LABEL_20;
          }
          if ((v8 & 8) == 0)
            goto LABEL_21;
          v14 = 1;
        }
        v15 = &a4[v14];
      }
LABEL_20:
      v16 = (*v15 - a1[v14]) / (a2[v14] - a1[v14]);
      a1[v14] = *v15;
      a1[v14 == 0] = a1[v14 == 0] + v16 * (a2[v14 == 0] - a1[v14 == 0]);
      v7 = *a3;
      v6 = a3[1];
      v4 = *a4;
LABEL_21:
      v8 = (4 * (a1[1] < v6)) | (8 * (a1[1] > a4[1])) | (*a1 < v7) | (2 * (*a1 > v4));
    }
    else
    {
      if (v13)
      {
        if ((v13 & 1) != 0)
        {
          v17 = 0;
          v18 = a3;
        }
        else if ((v13 & 2) != 0)
        {
          v17 = 0;
LABEL_29:
          v18 = &a4[v17];
        }
        else
        {
          if ((v13 & 4) == 0)
          {
            if ((v13 & 8) != 0)
            {
              v17 = 1;
              goto LABEL_29;
            }
LABEL_32:
            v8 = 0;
            v9 = (4 * (a2[1] < v6)) | (8 * (a2[1] > a4[1]));
            v10 = *a2 > v4;
            v11 = *a2 < v7;
            goto LABEL_2;
          }
          v17 = 1;
          v18 = a3 + 1;
        }
        v19 = (*v18 - a2[v17]) / (a1[v17] - a2[v17]);
        a2[v17] = *v18;
        a2[v17 == 0] = a2[v17 == 0] + v19 * (a1[v17 == 0] - a2[v17 == 0]);
        v7 = *a3;
        v6 = a3[1];
        v4 = *a4;
        goto LABEL_32;
      }
      v8 = 0;
      v13 = 0;
    }
  }
  *a2 = *a1;
  a2[1] = a1[1];
  return 0;
}

uint64_t sub_20F164CE0(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, uint64_t a6, int *a7)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  void *v38;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    v41 = v12;
    *(_QWORD *)&v42 = v12;
    *((_QWORD *)&v42 + 1) = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = v41;
    v19 = (_DWORD *)_os_log_pack_fill();
    v20 = *a7;
    *v19 = 67109120;
    v19[1] = v20;
    v21 = operator new();
    v22 = *((unsigned __int8 *)a3 + 23);
    if ((v22 & 0x80u) == 0)
      v23 = a3;
    else
      v23 = (uint64_t *)*a3;
    if ((v22 & 0x80u) != 0)
      v22 = a3[1];
    *(_QWORD *)v21 = v18;
    *(_OWORD *)(v21 + 8) = v42;
    v42 = 0uLL;
    *(_OWORD *)(v21 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v21 + 40) = v23;
    *(_QWORD *)(v21 + 48) = v22;
    *(_BYTE *)(v21 + 56) = type;
    v40 = v21;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v40);
    v24 = v40;
    v40 = 0;
    if (v24)
    {
      v25 = *(std::__shared_weak_count **)(v24 + 32);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(std::__shared_weak_count **)(v24 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      MEMORY[0x212BC6398](v24, 0x10F0C40B62ED6C6);
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v37 = *a7;
    LODWORD(v41) = 67109120;
    HIDWORD(v41) = v37;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
  }
  return 0;
}

void sub_20F1650C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1650EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F165100(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F165124(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type, uint64_t a6, int *a7)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  void *v38;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    v41 = v12;
    *(_QWORD *)&v42 = v12;
    *((_QWORD *)&v42 + 1) = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = v41;
    v19 = (_DWORD *)_os_log_pack_fill();
    v20 = *a7;
    *v19 = 67109120;
    v19[1] = v20;
    v21 = operator new();
    v22 = *((unsigned __int8 *)a3 + 23);
    if ((v22 & 0x80u) == 0)
      v23 = a3;
    else
      v23 = (uint64_t *)*a3;
    if ((v22 & 0x80u) != 0)
      v22 = a3[1];
    *(_QWORD *)v21 = v18;
    *(_OWORD *)(v21 + 8) = v42;
    v42 = 0uLL;
    *(_OWORD *)(v21 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v21 + 40) = v23;
    *(_QWORD *)(v21 + 48) = v22;
    *(_BYTE *)(v21 + 56) = type;
    v40 = v21;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v40);
    v24 = v40;
    v40 = 0;
    if (v24)
    {
      v25 = *(std::__shared_weak_count **)(v24 + 32);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = *(std::__shared_weak_count **)(v24 + 16);
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      MEMORY[0x212BC6398](v24, 0x10F0C40B62ED6C6);
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v37 = *a7;
    LODWORD(v41) = 67109120;
    HIDWORD(v41) = v37;
    v38 = (void *)_os_log_send_and_compose_impl();
    if (v38)
      free(v38);
  }
  return 0;
}

void sub_20F16550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F165530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F165544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F165568(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;

  result = a3[1];
  if ((_DWORD)result != *a3)
  {
    v4 = result - *a3 + 1;
    if ((_DWORD)result - *a3 == -1)
    {
      v16 = *(_QWORD *)(a2 + 2496);
      v17 = (v16 + 1) % 0x270uLL;
      v18 = *(_DWORD *)(a2 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v16) = v18;
      *(_QWORD *)(a2 + 2496) = v17;
      v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
      return (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
    }
    else
    {
      v5 = __clz(v4);
      v6 = 31;
      if (((v4 << v5) & 0x7FFFFFFF) != 0)
        v6 = 32;
      v7 = v6 - v5;
      v8 = v7 >> 5;
      if ((v7 & 0x1F) != 0)
        ++v8;
      if (v8 <= v7)
        v9 = 0xFFFFFFFF >> -(v7 / v8);
      else
        v9 = 0;
      v10 = *(_QWORD *)(a2 + 2496);
      do
      {
        v11 = 4 * v10;
        v12 = v10 + 397;
        v10 = (v10 + 1) % 0x270;
        v13 = *(_DWORD *)(a2 + 4 * (v12 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v10) & 0x7FFFFFFE | *(_DWORD *)(a2 + v11) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v10) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a2 + v11) = v13;
        v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
        v15 = ((v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18)) & v9;
      }
      while (v15 >= v4);
      *(_QWORD *)(a2 + 2496) = v10;
      return *a3 + v15;
    }
  }
  return result;
}

uint64_t sub_20F165708(unsigned int **a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v6;
  double v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  float64x2_t v15;
  float64x2_t v18;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  double v24;
  double v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  double v35;
  double v36;
  float64_t v37;
  float64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  double v47;
  float v48;
  float v49;
  unint64_t v50;
  float64_t v51;
  double v52;
  unsigned int *v53;
  unsigned int *v54;
  double v55;
  float64x2_t v56;
  unint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64_t v60;
  float64x2_t v61;
  unint64_t v62;
  float64_t *v64;
  double v65;
  double v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  int8x16_t v72;
  void *v73;
  double v77;
  double v78;
  double v79;
  double cosval;
  double v81;
  __double2 v82;
  double v83;
  double v84;
  float64x2_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  double v95;
  double v99;
  float64x2_t v101;
  double v103;
  float64x2_t v104;
  double v110;
  double v111;
  double v112;
  double v113;
  __double2 v114;
  float64x2_t v115;
  double v116;
  float64x2_t v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  float64_t v126;
  float64_t v127;
  float64_t v128;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  unsigned int *v134;
  unsigned int *v135;
  double v136;
  _BYTE *v138;
  double v141;
  double v142;
  const char *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v151;
  _QWORD *v152;
  const std::locale::facet *v153;
  float64x2_t v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  __double2 v163;
  double v164;
  double v165;
  float64_t v166;
  float64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  unsigned __int8 v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v184;
  size_t v185;
  const char *v186;
  unsigned __int8 v187;
  double v188;
  __double2 v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  uint64_t v201;
  _QWORD *v202;
  unsigned __int8 v203;
  const char *v204;
  size_t v205;
  char *v206;
  unint64_t v207;
  const char *v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  NSObject *v214;
  uint64_t v215;
  uint64_t v216;
  size_t v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  std::__shared_weak_count *v220;
  unint64_t *p_shared_owners;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v254;
  double v255;
  double v256;
  double v257;
  float64_t v258;
  float64x2_t v259;
  float64_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64_t v263;
  float64x2_t v264;
  int8x16_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  uint64_t v269;
  std::locale v270[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v272;
  const char *v273;
  int v274;
  const char *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  uint64_t v278;
  _BYTE v279[24];
  float64x2_t v280;
  double v281[3];
  double v282;
  unsigned int **v283;
  uint64_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  double *v289;
  void *v290;
  char *v291;
  char *v292;
  float64x2_t v293;
  void *__p;
  _QWORD *v295;
  _QWORD *v296;
  float64x2_t v297;
  __int128 v298;
  _BYTE v299[32];
  uint64_t v300;
  float64x2_t v301;
  double v302;
  _OWORD v303[3];
  float64x2_t v304;
  double v305;
  uint64_t v306;

  v306 = *MEMORY[0x24BDAC8D0];
  memset(v279, 0, sizeof(v279));
  sub_20E9733B8(a3, (double *)v279);
  v6.f64[0] = *(float64_t *)&v279[16];
  v264 = v6;
  v265 = *(int8x16_t *)v279;
  v299[0] = *(_DWORD *)a2 != 0;
  *(_OWORD *)&v299[8] = xmmword_21039D460;
  v7 = *(float *)(a2 + 4);
  *(_QWORD *)&v298 = 0x3200000003;
  *((double *)&v298 + 1) = v7;
  v280.f64[0] = 0.0;
  memset(v281, 0, sizeof(v281));
  *(_OWORD *)&v279[8] = 0u;
  v285 = v298;
  *(_QWORD *)&v299[24] = 0x3F1A36E2EB1C432DLL;
  *(_QWORD *)v279 = 0x3FF0000000000000;
  v280.f64[1] = 1.0;
  v282 = 1.0;
  v9 = *a1;
  v8 = a1[1];
  v286 = *(_OWORD *)v299;
  v287 = *(_OWORD *)&v299[16];
  v290 = 0;
  v291 = 0;
  v292 = 0;
  v10 = (char *)v8 - (char *)v9;
  v11 = v10 >> 5;
  v283 = a1;
  v284 = v10 >> 5;
  v288 = v10 >> 5;
  v289 = (double *)&v298;
  if (v10)
  {
    if (v10 < 0)
      sub_20E867F44();
    v12 = (unint64_t)v10 >> 2;
    v13 = (char *)operator new((unint64_t)v10 >> 2);
    v290 = v13;
    v292 = &v13[8 * v11];
    bzero(v13, v12);
    v291 = &v13[v12];
  }
  __p = 0;
  v295 = 0;
  v296 = 0;
  v14 = operator new(0x18uLL);
  v24 = *(double *)vextq_s8(v265, v265, 8uLL).i64;
  v295 = v14 + 3;
  v296 = v14 + 3;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  __p = v14;
  __asm { FMOV            V0.2D, #1.0 }
  v297 = _Q0;
  *(_QWORD *)&_Q0.f64[0] = v265.i64[0];
  _Q0.f64[1] = v24;
  _Q1 = v264;
  v30 = vmulq_f64(_Q0, _Q0).f64[0] + v24 * v24 + _Q1.f64[0] * _Q1.f64[0];
  if (v30 >= 0.0000002635)
  {
    v257 = v24;
    v33 = sqrt(v30);
    v34 = __sincos_stret(v33);
    _Q1.f64[0] = v34.__cosval;
    v32 = v34.__sinval / v33;
    v24 = v257;
    v31 = 1.0 / v30 * (1.0 - v34.__cosval);
  }
  else
  {
    v31 = 0.5 - v30 * (v30 / -720.0 + 0.0416666667);
    v32 = 1.0 - v30 * (0.166666667 - v30 * (v30 / -5040.0 + 0.00833333333));
    _Q1.f64[0] = 1.0 - v30 * v31;
  }
  v35 = v31 * *(double *)v265.i64;
  v36 = v31 * v24;
  v37 = _Q1.f64[0] + *(double *)v265.i64 * (v31 * *(double *)v265.i64);
  v38 = _Q1.f64[0] + v24 * (v31 * v24);
  v39 = _Q1.f64[0] + v264.f64[0] * (v31 * v264.f64[0]);
  v40 = v31 * *(double *)v265.i64 * v24;
  v41 = v35 * v264.f64[0];
  v42 = v36 * v264.f64[0];
  v43 = v32 * *(double *)v265.i64;
  v44 = v32 * v24;
  v45 = v32 * v264.f64[0];
  *(float64_t *)v279 = v37;
  *(double *)&v279[8] = v40 + v45;
  *(double *)&v279[16] = v41 - v44;
  v280.f64[0] = v40 - v45;
  v280.f64[1] = v38;
  v281[0] = v43 + v42;
  v281[1] = v44 + v41;
  v281[2] = v42 - v43;
  v282 = v39;
  if (!DWORD1(v285))
  {
    v49 = -1.0;
    v48 = -1.0;
    goto LABEL_52;
  }
  v46 = 0;
  v47 = 0.0;
  v48 = -1.0;
  v49 = -1.0;
  do
  {
    v305 = 0.0;
    v304 = 0u;
    memset(v303, 0, sizeof(v303));
    v53 = *v283;
    v54 = v283[1];
    if (*v283 == v54)
    {
      v56.f64[0] = 0.0;
      v21.f64[0] = 0.0;
      v23.i64[0] = 0;
      v22.f64[0] = 0.0;
      _Q1.f64[0] = 0.0;
      v70 = 0.0;
      v55 = 0.0;
      v258 = v24;
      if (v46)
        goto LABEL_15;
    }
    else
    {
      v55 = 0.0;
      v56.f64[0] = 0.0;
      v57 = 0;
      v58.f64[0] = 0.0;
      v59.f64[0] = 0.0;
      v60 = 0.0;
      v15.f64[0] = 0.0;
      v61.f64[0] = 0.0;
      v62 = 0;
      _Q1.f64[0] = 0.0;
      v21.f64[0] = 0.0;
      v23.i64[0] = 0;
      v22.f64[0] = 0.0;
      do
      {
        _Q20.f64[0] = *((float64_t *)v53 + 3);
        _Q21 = *(float64x2_t *)(v53 + 2);
        v64 = (float64_t *)&v279[24 * *v53];
        _Q23.f64[0] = v64[1];
        v65 = v64[2];
        __asm { FMLA            D19, D23, V21.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + _Q20.f64[0] * v65;
        v66 = vnegq_f64(_Q20).f64[0];
        v67 = vnegq_f64(_Q21);
        v68 = vmuld_lane_f64(v65, v67, 1) - _Q23.f64[0] * v66;
        v69 = *v64 * v66 - v65 * v67.f64[0];
        v67.f64[0] = _Q23.f64[0] * v67.f64[0] - vmuld_lane_f64(*v64, v67, 1);
        v55 = v55 + v297.f64[1] * (_Q19.f64[0] * _Q19.f64[0]);
        _Q20.f64[0] = v68;
        _Q20.f64[1] = v69;
        v18.f64[0] = v67.f64[0] * v68;
        _Q23.f64[0] = v67.f64[0] * v69;
        v20.f64[0] = v67.f64[0] * v67.f64[0];
        *(_QWORD *)&v56.f64[1] = v57;
        v58.f64[1] = v59.f64[0];
        v59.f64[1] = v60;
        *(_QWORD *)&v61.f64[1] = v62;
        *(_QWORD *)&v58.f64[0] = *(_OWORD *)&vaddq_f64(v58, v18);
        v56 = vmlaq_n_f64(v56, _Q20, v68);
        v57 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
        v15 = vaddq_f64(v15, _Q23);
        v59 = vmlaq_n_f64(v59, _Q20, v69);
        v61 = vmlaq_n_f64(v61, _Q20, v67.f64[0]);
        v62 = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
        _Q1 = vaddq_f64(_Q1, v20);
        v60 = v59.f64[1];
        v303[0] = v56;
        *(float64x2_t *)((char *)&v303[1] + 8) = v59;
        *(float64_t *)&v303[1] = v58.f64[0];
        *((_QWORD *)&v303[2] + 1) = *(_QWORD *)&v15.f64[0];
        v304 = v61;
        v305 = _Q1.f64[0];
        v22 = vmlsq_f64(v22, _Q19, v67);
        *(_QWORD *)&v21.f64[1] = v23.i64[0];
        v21 = vmlsq_lane_f64(v21, _Q20, _Q19.f64[0], 0);
        v23 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
        v53 += 8;
      }
      while (v53 != v54);
      *(_QWORD *)&v70 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
      v258 = v24;
      if (v46)
      {
LABEL_15:
        v71 = v293.f64[0];
        goto LABEL_18;
      }
    }
    v293 = (float64x2_t)xmmword_210315720;
    v47 = v55 * 0.5;
    v48 = v55 * 0.5;
    v71 = 0.001;
    v49 = v48;
LABEL_18:
    *(double *)v303 = v56.f64[0] + v71;
    *(double *)&v303[2] = v70 + v71;
    v305 = _Q1.f64[0] + v71;
    v267 = v22;
    v268 = v21;
    v302 = v22.f64[0];
    v72.i64[0] = *(_QWORD *)&v21.f64[0];
    v266 = (float64x2_t)v23;
    v72.i64[1] = v23.i64[0];
    v301 = (float64x2_t)v72;
    v73 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
    LODWORD(v300) = 0;
    v270[0].__locale_ = 0;
    sub_20E8BEDE0();
    if (!(_DWORD)v300)
    {
      v254 = operator new((8 * (int)*(double *)&v270[0].__locale_ + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      sub_20E8BEDE0();
      MEMORY[0x212BC6368](v254, 0x1000C8000313F17);
    }
    MEMORY[0x212BC6368](v73, 0x1000C8052888210);
    _V1.D[1] = *(_QWORD *)&v301.f64[1];
    _D3 = *(_QWORD *)&v301.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    v77 = _D2 + v302 * v302;
    if (v77 >= 0.0000002635)
    {
      v81 = sqrt(v77);
      v82 = __sincos_stret(v81);
      cosval = v82.__cosval;
      v79 = v82.__sinval / v81;
      v78 = 1.0 / v77 * (1.0 - v82.__cosval);
    }
    else
    {
      v78 = 0.5 - v77 * (v77 / -720.0 + 0.0416666667);
      v79 = 1.0 - v77 * (0.166666667 - v77 * (v77 / -5040.0 + 0.00833333333));
      cosval = 1.0 - v77 * v78;
    }
    v83 = v78 * v301.f64[0];
    v84 = v78 * v301.f64[1];
    v85.f64[0] = cosval + v301.f64[0] * (v78 * v301.f64[0]);
    v86 = cosval + v301.f64[1] * (v78 * v301.f64[1]);
    v87 = cosval + v302 * (v78 * v302);
    v88 = v78 * v301.f64[0] * v301.f64[1];
    v89 = v84 * v302;
    v90 = v79 * v301.f64[0];
    v91 = v79 * v301.f64[1];
    v92 = v79 * v302;
    v93.f64[0] = v88 - v92;
    v94.f64[0] = v91 + v83 * v302;
    v85.f64[1] = v88 + v92;
    v95 = v89 - v90;
    v93.f64[1] = v86;
    _D3 = v90 + v89;
    v94.f64[1] = v95;
    _V4.D[1] = *(_QWORD *)&v279[8];
    _V6.D[1] = v280.f64[1];
    v99 = v282;
    _V19.D[1] = v281[2];
    v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, *(double *)v279), v93, *(float64x2_t *)v279, 1), v94, *(double *)&v279[16]);
    __asm { FMLA            D21, D3, V4.D[1] }
    v103 = _D21 + v87 * *(double *)&v279[16];
    v104 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, v280.f64[0]), v93, v280, 1), v94, v281[0]);
    __asm
    {
      FMLA            D21, D3, V6.D[1]
      FMLA            D2, D3, V19.D[1]
    }
    *(double *)&v279[16] = v103;
    *(float64x2_t *)v279 = v101;
    v281[0] = _D21 + v87 * v281[0];
    v280 = v104;
    v282 = _D2 + v87 * v282;
    *(float64x2_t *)&v281[1] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, v281[1]), v93, *(float64x2_t *)&v281[1], 1), v94, v99);
    v270[0].__locale_ = 0;
    v270[1].__locale_ = 0;
    rep = 0;
    sub_20E9733B8((float64x2_t *)v279, (double *)v270);
    *(_QWORD *)&_Q23.f64[0] = rep;
    _Q25 = *(float64x2_t *)&v270[0].__locale_;
    _Q0 = vmulq_f64(_Q25, _Q25);
    _D1 = v270[1].__locale_;
    __asm { FMLA            D0, D1, V25.D[1] }
    v110 = _Q0.f64[0] + _Q23.f64[0] * _Q23.f64[0];
    if (v110 >= 0.0000002635)
    {
      v113 = sqrt(v110);
      v259 = *(float64x2_t *)&v270[0].__locale_;
      v261 = _Q23;
      v114 = __sincos_stret(v113);
      v112 = v114.__cosval;
      _Q25 = v259;
      _Q23 = v261;
      _Q0.f64[0] = v114.__sinval / v113;
      v111 = 1.0 / v110 * (1.0 - v114.__cosval);
    }
    else
    {
      v111 = 0.5 - v110 * (v110 / -720.0 + 0.0416666667);
      _Q0.f64[0] = 1.0 - v110 * (0.166666667 - v110 * (v110 / -5040.0 + 0.00833333333));
      v112 = 1.0 - v110 * v111;
    }
    v115 = v267;
    _Q20 = v268;
    v18 = v266;
    v116 = *(double *)vextq_s8((int8x16_t)_Q25, (int8x16_t)_Q25, 8uLL).i64;
    v117.f64[0] = _Q25.f64[0];
    v117.f64[1] = v116;
    v118 = v111 * _Q25.f64[0];
    v119 = v111 * v116;
    v120 = v112 + _Q25.f64[0] * (v111 * _Q25.f64[0]);
    v121 = v112 + v116 * (v111 * v116);
    v122 = v112 + _Q23.f64[0] * (v111 * _Q23.f64[0]);
    v123 = v111 * _Q25.f64[0] * v116;
    v124 = v118 * _Q23.f64[0];
    v125 = v119 * _Q23.f64[0];
    v126 = _Q0.f64[0] * _Q25.f64[0];
    v127 = _Q0.f64[0] * v116;
    v128 = _Q0.f64[0] * _Q23.f64[0];
    *(double *)v279 = v120;
    *(double *)&v279[8] = v123 + v128;
    *(double *)&v279[16] = v124 - v127;
    v280.f64[0] = v123 - v128;
    v280.f64[1] = v121;
    v281[0] = v126 + v125;
    v281[1] = v127 + v124;
    v281[2] = v125 - v126;
    v282 = v122;
    _Q0.f64[0] = v302;
    _Q1 = v301;
    _D4 = *(_QWORD *)&v301.f64[1];
    __asm { FMLA            D2, D4, V1.D[1] }
    if (sqrt(_D2 + _Q0.f64[0] * _Q0.f64[0]) < v289[4]
                                             * (v289[4]
                                              + sqrt(vmulq_f64(v117, v117).f64[0] + v116 * v116 + _Q23.f64[0]
                                                                                                * _Q23.f64[0])))
    {
      v50 = 0x100000000;
      v51 = _Q25.f64[0];
      v52 = _Q25.f64[0];
      if (v46 >= v285)
        break;
      goto LABEL_10;
    }
    v131.f64[0] = v268.f64[0];
    v131.f64[1] = v266.f64[0];
    *(_QWORD *)&v132.f64[0] = *(_OWORD *)&vabsq_f64(v267);
    v132.f64[1] = NAN;
    v133 = vmaxnmq_f64(vabsq_f64(v131), v132);
    if (vmaxnmvq_f64(v133) >= v289[3])
    {
      v134 = *v283;
      v135 = v283[1];
      v136 = 0.0;
      if (*v283 != v135)
      {
        do
        {
          _Q5 = *(_OWORD *)(v134 + 2);
          v138 = &v279[24 * *v134];
          _D7 = *((_QWORD *)v138 + 1);
          __asm { FMLA            D6, D7, V5.D[1] }
          v136 = v136
               + v297.f64[1]
               * ((_D6 + *((double *)v134 + 3) * *((double *)v138 + 2))
                * (_D6 + *((double *)v134 + 3) * *((double *)v138 + 2)));
          v134 += 8;
        }
        while (v134 != v135);
      }
      v141 = v136 * 0.5;
      v142 = v47 - v136 * 0.5;
      if (fabs(v142 / v47) < *((double *)&v287 + 1))
      {
        v52 = _Q25.f64[0];
        goto LABEL_48;
      }
      if (*((_BYTE *)v289 + 16))
      {
        v260 = _Q25.f64[0];
        v262 = _Q23;
        v255 = v116;
        if (v47 <= v141)
          v143 = "I";
        else
          v143 = "D";
        v144 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)v143, 1);
        sub_20E86A980(v144, (uint64_t)"[last error]->[new error][lambda][delta]  : [", 45);
        v145 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v145, (uint64_t)" -> ", 4);
        v146 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v146, (uint64_t)"][", 2);
        v147 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v147, (uint64_t)"][", 2);
        _V1.D[1] = *(_QWORD *)&v301.f64[1];
        _D3 = *(_QWORD *)&v301.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v151 = (_QWORD *)std::ostream::operator<<();
        v152 = sub_20E86A980(v151, (uint64_t)"]", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v152 + *(_QWORD *)(*v152 - 24)));
        v153 = std::locale::use_facet(v270, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v153->__vftable[2].~facet_0)(v153, 10);
        std::locale::~locale(v270);
        std::ostream::put();
        std::ostream::flush();
        _Q0.f64[0] = v302;
        _Q1 = v301;
        _D3 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
        v115 = v267;
        _Q20.f64[0] = v268.f64[0];
        v18 = v266;
        _Q25.f64[0] = v260;
        _Q23 = v262;
        v116 = v255;
      }
      else
      {
        _D3 = vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u64[0];
      }
      v133.f64[0] = v293.f64[0];
      *(_QWORD *)&_Q1.f64[1] = _D3;
      _Q20.f64[1] = v18.f64[0];
      _Q20 = vmlaq_n_f64(_Q20, _Q1, v293.f64[0]);
      _Q1 = vmulq_f64(_Q1, _Q20);
      __asm { FMLA            D1, D3, V20.D[1] }
      _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], _Q0.f64[0], vmlaq_f64(v115, _Q0, v133).f64[0]);
      if (v142 / _Q1.f64[0] >= 0.0)
      {
        v50 = 0;
        v161 = 1.0
             - (v142 / _Q1.f64[0] + v142 / _Q1.f64[0] + -1.0)
             * ((v142 / _Q1.f64[0] + v142 / _Q1.f64[0] + -1.0)
              * (v142 / _Q1.f64[0] + v142 / _Q1.f64[0] + -1.0));
        if (v161 > 0.666666667)
          v161 = 0.666666667;
        v293.f64[0] = v293.f64[0] * fmax(v161, 0.333333333);
        v293.f64[1] = 2.0;
        v49 = v141;
        v51 = _Q25.f64[0];
        v47 = v141;
      }
      else
      {
        __asm { FMOV            V1.2D, #2.0 }
        _Q1.f64[0] = v293.f64[0];
        v293 = vmulq_n_f64(_Q1, v293.f64[1]);
        _Q1 = v264;
        *(_QWORD *)&v156.f64[0] = v265.i64[0];
        v157 = v258;
        v156.f64[1] = v258;
        v158 = vmulq_f64(v156, v156).f64[0] + v157 * v157 + _Q1.f64[0] * _Q1.f64[0];
        if (v158 >= 0.0000002635)
        {
          v162 = sqrt(v158);
          v163 = __sincos_stret(v162);
          _Q1.f64[0] = v163.__cosval;
          v160 = v163.__sinval / v162;
          v157 = v258;
          v159 = 1.0 / v158 * (1.0 - v163.__cosval);
        }
        else
        {
          v159 = 0.5 - v158 * (v158 / -720.0 + 0.0416666667);
          v160 = 1.0 - v158 * (0.166666667 - v158 * (v158 / -5040.0 + 0.00833333333));
          _Q1.f64[0] = 1.0 - v158 * v159;
        }
        v50 = 0;
        _Q20.f64[1] = v264.f64[1];
        *(_QWORD *)&_Q19.f64[1] = v265.i64[1];
        v164 = v159 * *(double *)v265.i64;
        v165 = v159 * v157;
        v166 = _Q1.f64[0] + *(double *)v265.i64 * (v159 * *(double *)v265.i64);
        v167 = _Q1.f64[0] + v157 * (v159 * v157);
        v168 = _Q1.f64[0] + v264.f64[0] * (v159 * v264.f64[0]);
        v169 = v159 * *(double *)v265.i64 * v157;
        v170 = v164 * v264.f64[0];
        v171 = v165 * v264.f64[0];
        v172 = v160 * *(double *)v265.i64;
        v173 = v160 * v157;
        v174 = v160 * v264.f64[0];
        *(float64_t *)v279 = v166;
        *(double *)&v279[8] = v169 + v174;
        *(double *)&v279[16] = v170 - v173;
        v280.f64[0] = v169 - v174;
        v280.f64[1] = v167;
        v281[0] = v172 + v171;
        v281[1] = v173 + v170;
        v281[2] = v171 - v172;
        v282 = v168;
        *(_QWORD *)&_Q25.f64[0] = v265.i64[0];
        v116 = v157;
        _Q23.f64[0] = v264.f64[0];
        v51 = *(double *)v265.i64;
      }
      goto LABEL_10;
    }
    v50 = 0x200000000;
    v51 = _Q25.f64[0];
    v52 = _Q25.f64[0];
    if (v46 >= v285)
      break;
LABEL_10:
    ++v46;
    _Q1.f64[0] = _Q25.f64[0];
    v265 = (int8x16_t)_Q1;
    v24 = v116;
    _Q1.f64[0] = _Q23.f64[0];
    v264 = _Q1;
    v52 = v51;
  }
  while (v46 < DWORD1(v285));
  if (!HIDWORD(v50))
    goto LABEL_52;
LABEL_48:
  if (v49 >= v48)
  {
LABEL_52:
    v179 = atomic_load((unsigned __int8 *)&qword_254A622D8);
    if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_254A622D8))
    {
      sub_21021D3D8(v270);
      sub_20E8610C0(v303, "cv3d.vio.odometry");
      sub_20E8C4068((uint64_t **)v270, (uint64_t)v303, &qword_254A622D0);
      if (SBYTE7(v303[1]) < 0)
        operator delete(*(void **)&v303[0]);
      __cxa_guard_release(&qword_254A622D8);
    }
    v278 = qword_254A622D0;
    if (**(int **)(qword_254A622D0 + 56) > 3
      || ((v180 = *(unsigned __int8 *)(qword_254A622D0 + 72),
           v181 = sub_20E8C31DC(qword_254A622D0, "OSLogSurrogateAppender", 1, 0),
           v182 = v181,
           !v180)
        ? (_ZF = v181 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_147:
      v201 = 0;
      v202 = __p;
      if (__p)
        goto LABEL_148;
      goto LABEL_149;
    }
    v270[0].__locale_ = (std::locale::__imp *)&v278;
    v270[1].__locale_ = (std::locale::__imp *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v272 = 3;
    v273 = "unknown file";
    v274 = 92;
    v276 = 0;
    v277 = 0;
    v275 = "unknown function";
    v184 = *(_QWORD *)v270[0].__locale_;
    if (*(char *)(*(_QWORD *)v270[0].__locale_ + 39) < 0)
    {
      v186 = *(const char **)(v184 + 16);
      v185 = *(_QWORD *)(v184 + 24);
      v269 = *(_QWORD *)v270[0].__locale_ + 16;
      v203 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v203 & 1) != 0)
        goto LABEL_66;
    }
    else
    {
      v185 = *(unsigned __int8 *)(*(_QWORD *)v270[0].__locale_ + 39);
      v186 = (const char *)(*(_QWORD *)v270[0].__locale_ + 16);
      v269 = (uint64_t)v186;
      v187 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v187 & 1) != 0)
        goto LABEL_66;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v303);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v303);
      if (BYTE8(v303[1]) && SBYTE7(v303[1]) < 0)
        operator delete(*(void **)&v303[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_66:
    if (byte_254A4A4F8[23] >= 0)
      v204 = byte_254A4A4F8;
    else
      v204 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v205 = byte_254A4A4F8[23];
    else
      v205 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)&v303[0] = os_log_create(v204, v186);
    v206 = (char *)v303 + 8;
    if (v205 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v205 >= 0x17)
    {
      v207 = v182;
      v208 = v186;
      v209 = v184;
      v210 = v180;
      v211 = (v205 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v205 | 7) != 0x17)
        v211 = v205 | 7;
      v212 = v211 + 1;
      v206 = (char *)operator new(v211 + 1);
      *(_QWORD *)&v303[1] = v205;
      *((_QWORD *)&v303[1] + 1) = v212 | 0x8000000000000000;
      *((_QWORD *)&v303[0] + 1) = v206;
      v180 = v210;
      v184 = v209;
      v186 = v208;
      v182 = v207;
    }
    else
    {
      HIBYTE(v303[1]) = v205;
      if (!v205)
      {
LABEL_80:
        v206[v205] = 0;
        LOBYTE(v303[2]) = 1;
        v213 = (char *)&v303[2] + 8;
        if (v185 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v185 >= 0x17)
        {
          v215 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v185 | 7) != 0x17)
            v215 = v185 | 7;
          v216 = v215 + 1;
          v213 = (char *)operator new(v215 + 1);
          *(_QWORD *)&v304.f64[0] = v185;
          *(_QWORD *)&v304.f64[1] = v216 | 0x8000000000000000;
          *((_QWORD *)&v303[2] + 1) = v213;
        }
        else
        {
          HIBYTE(v304.f64[1]) = v185;
          if (!v185)
          {
            BYTE8(v303[2]) = 0;
            LOBYTE(v305) = 1;
            v214 = *(NSObject **)&v303[0];
            if ((SHIBYTE(v304.f64[1]) & 0x80000000) == 0)
              goto LABEL_84;
            goto LABEL_90;
          }
        }
        memmove(v213, v186, v185);
        v213[v185] = 0;
        LOBYTE(v305) = 1;
        v214 = *(NSObject **)&v303[0];
        if ((SHIBYTE(v304.f64[1]) & 0x80000000) == 0)
        {
LABEL_84:
          if (!LOBYTE(v303[2]))
            goto LABEL_93;
          goto LABEL_91;
        }
LABEL_90:
        operator delete(*((void **)&v303[2] + 1));
        if (!LOBYTE(v303[2]))
        {
LABEL_93:
          if (*(_QWORD *)&v303[0])
            os_release(*(void **)&v303[0]);
          if (v182 && *(_QWORD *)(v182 + 24))
          {
            v217 = _os_log_pack_size();
            v218 = (std::__shared_weak_count_vtbl *)operator new(v217, (std::align_val_t)8uLL);
            v219 = (std::__shared_weak_count *)operator new();
            v220 = v219;
            v219->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v219->__shared_owners_;
            v219->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v219->__shared_weak_owners_ = 0;
            v219[1].__vftable = v218;
            *(_QWORD *)&v303[0] = v218;
            *((_QWORD *)&v303[0] + 1) = v218;
            *(_QWORD *)&v303[1] = v219;
            do
              v222 = __ldxr(p_shared_owners);
            while (__stxr(v222 + 1, p_shared_owners));
            memset((char *)&v303[1] + 8, 0, 24);
            do
              v223 = __ldaxr(p_shared_owners);
            while (__stlxr(v223 - 1, p_shared_owners));
            if (!v223)
            {
              ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
              std::__shared_weak_count::__release_weak(v220);
            }
            v224 = *(_QWORD *)&v303[0];
            v225 = _os_log_pack_fill();
            *(_DWORD *)v225 = 134218240;
            *(double *)(v225 + 4) = v48;
            *(_WORD *)(v225 + 12) = 2048;
            *(double *)(v225 + 14) = v49;
            v226 = operator new();
            v227 = *(unsigned __int8 *)(v184 + 39);
            v228 = v269;
            if ((v227 & 0x80u) != 0)
            {
              v228 = *(_QWORD *)(v184 + 16);
              v227 = *(_QWORD *)(v184 + 24);
            }
            *(_QWORD *)v226 = v224;
            *(_OWORD *)(v226 + 8) = *(_OWORD *)((char *)v303 + 8);
            *((_QWORD *)&v303[0] + 1) = 0;
            *(_QWORD *)&v303[1] = 0;
            *(_OWORD *)(v226 + 24) = *(_OWORD *)((char *)&v303[1] + 8);
            *((_QWORD *)&v303[1] + 1) = 0;
            *(_QWORD *)&v303[2] = 0;
            *(_QWORD *)(v226 + 40) = v228;
            *(_QWORD *)(v226 + 48) = v227;
            *(_BYTE *)(v226 + 56) = 1;
            v300 = 0;
            *(_QWORD *)&v301.f64[0] = v226;
            (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v182 + 24) + 40))(*(_QWORD *)(v182 + 24), &v301);
            v229 = *(_QWORD *)&v301.f64[0];
            v301.f64[0] = 0.0;
            if (v229)
            {
              v230 = *(std::__shared_weak_count **)(v229 + 32);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              v233 = *(std::__shared_weak_count **)(v229 + 16);
              if (v233)
              {
                v234 = (unint64_t *)&v233->__shared_owners_;
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }
              MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
              v236 = v300;
              v300 = 0;
              if (v236)
              {
                v237 = *(std::__shared_weak_count **)(v236 + 32);
                if (v237)
                {
                  v238 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
                v240 = *(std::__shared_weak_count **)(v236 + 16);
                if (v240)
                {
                  v241 = (unint64_t *)&v240->__shared_owners_;
                  do
                    v242 = __ldaxr(v241);
                  while (__stlxr(v242 - 1, v241));
                  if (!v242)
                  {
                    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                    std::__shared_weak_count::__release_weak(v240);
                  }
                }
                MEMORY[0x212BC6398](v236, 0x10F0C40B62ED6C6);
              }
            }
            v243 = *(std::__shared_weak_count **)&v303[2];
            if (*(_QWORD *)&v303[2])
            {
              v244 = (unint64_t *)(*(_QWORD *)&v303[2] + 8);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 - 1, v244));
              if (!v245)
              {
                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                std::__shared_weak_count::__release_weak(v243);
              }
            }
            v246 = *(std::__shared_weak_count **)&v303[1];
            if (*(_QWORD *)&v303[1])
            {
              v247 = (unint64_t *)(*(_QWORD *)&v303[1] + 8);
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                std::__shared_weak_count::__release_weak(v246);
              }
            }
          }
          else
          {
            os_log_type_enabled(v214, OS_LOG_TYPE_INFO);
            LODWORD(v303[0]) = 134218240;
            *(double *)((char *)v303 + 4) = v48;
            WORD6(v303[0]) = 2048;
            *(double *)((char *)v303 + 14) = v49;
            v249 = (void *)_os_log_send_and_compose_impl();
            if (v249)
              free(v249);
          }
          if (v180)
          {
            sub_20E8C003C((uint64_t)v270, "VDOrientationRefiner: RotationRefinement Non-Linear [%f -> %f]", v48, v49);
            sub_20E863570((uint64_t)v270);
          }
          sub_20E863570((uint64_t)v270);
          v250 = v277;
          if (v277)
          {
            v251 = (unint64_t *)&v277->__shared_owners_;
            do
              v252 = __ldaxr(v251);
            while (__stlxr(v252 - 1, v251));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
              std::__shared_weak_count::__release_weak(v250);
            }
          }
          goto LABEL_147;
        }
LABEL_91:
        if (SHIBYTE(v303[1]) < 0)
          operator delete(*((void **)&v303[0] + 1));
        goto LABEL_93;
      }
    }
    memmove(v206, v204, v205);
    goto LABEL_80;
  }
  _Q25.f64[1] = v116;
  v175 = vmulq_f64(_Q25, _Q25).f64[0] + v116 * v116 + _Q23.f64[0] * _Q23.f64[0];
  if (v175 >= 0.0000002635)
  {
    v188 = sqrt(v175);
    v263 = _Q23.f64[0];
    v256 = v116;
    v189 = __sincos_stret(v188);
    v178 = v189.__cosval;
    v116 = v256;
    _Q23.f64[0] = v263;
    v177 = v189.__sinval / v188;
    v176 = 1.0 / v175 * (1.0 - v189.__cosval);
  }
  else
  {
    v176 = 0.5 - v175 * (v175 / -720.0 + 0.0416666667);
    v177 = 1.0 - v175 * (0.166666667 - v175 * (v175 / -5040.0 + 0.00833333333));
    v178 = 1.0 - v175 * v176;
  }
  v190 = v176 * v52;
  v191 = v176 * v116;
  v192 = v178 + v52 * (v176 * v52);
  v193 = v178 + v116 * (v176 * v116);
  v194 = v178 + _Q23.f64[0] * (v176 * _Q23.f64[0]);
  v195 = v176 * v52 * v116;
  v196 = v190 * _Q23.f64[0];
  v197 = v191 * _Q23.f64[0];
  v198 = v177 * v52;
  v199 = v177 * v116;
  v200 = v177 * _Q23.f64[0];
  a3->f64[0] = v192;
  a3->f64[1] = v195 + v200;
  a3[1].f64[0] = v196 - v199;
  a3[1].f64[1] = v195 - v200;
  a3[2].f64[0] = v193;
  a3[2].f64[1] = v198 + v197;
  a3[3].f64[0] = v199 + v196;
  a3[3].f64[1] = v197 - v198;
  a3[4].f64[0] = v194;
  v201 = 1;
  v202 = __p;
  if (!__p)
    goto LABEL_149;
LABEL_148:
  v295 = v202;
  operator delete(v202);
LABEL_149:
  if (v290)
  {
    v291 = (char *)v290;
    operator delete(v290);
  }
  return v201;
}

void sub_20F166D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  if (*(_BYTE *)(v42 - 216))
  {
    if (*(char *)(v42 - 217) < 0)
      operator delete(*(void **)(v42 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a32);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 217) < 0)
    operator delete(*(void **)(v42 - 240));
  __cxa_guard_abort(&qword_254A622D8);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  sub_20E86E8C4((uint64_t *)&STACK[0x228]);
  sub_20E86E8C4((uint64_t *)&STACK[0x220]);
  sub_20E86E658(v42 - 240);
  sub_20E863714((uint64_t)&a32);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  MEMORY[0x212BC6398](v42, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a32);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  sub_20E863714((uint64_t)&a32);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F166F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::locale a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::locale::~locale(&a32);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;

  MEMORY[0x212BC6368](v43, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v42, 0x1000C8052888210);
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

void sub_20F166F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  sub_20F166F8C(&a42);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F166F8C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20F166FCC(uint64_t a1, __int128 *a2, unsigned int a3, double a4)
{
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;

  v7 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v8 = *a2;
  *(_OWORD *)(a1 + 72) = a2[1];
  *(_OWORD *)(a1 + 56) = v8;
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  *(_OWORD *)(a1 + 136) = a2[5];
  *(_OWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 104) = v10;
  *(_OWORD *)(a1 + 88) = v9;
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  *(_OWORD *)(a1 + 200) = a2[9];
  *(_OWORD *)(a1 + 184) = v14;
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  v15 = operator new();
  sub_20F0DA54C(v15, a1 + 56, a3, 0, a4);
  v16 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v15;
  if (v16)
  {
    v17 = sub_20ED291D8(v16);
    MEMORY[0x212BC6398](v17, 0x10F0C405208BBE6);
  }
  v18 = *(_DWORD *)(a1 + 208);
  if (v18)
  {
    v19 = (char *)operator new(408 * v18);
    v20 = &v19[408 * v18];
    v21 = v19;
    do
    {
      *((_QWORD *)v21 + 38) = 0;
      *((_OWORD *)v21 + 17) = 0uLL;
      *((_OWORD *)v21 + 18) = 0uLL;
      *((_OWORD *)v21 + 15) = 0uLL;
      *((_OWORD *)v21 + 16) = 0uLL;
      *((_OWORD *)v21 + 13) = 0uLL;
      *((_OWORD *)v21 + 14) = 0uLL;
      *((_OWORD *)v21 + 11) = 0uLL;
      *((_OWORD *)v21 + 12) = 0uLL;
      *((_OWORD *)v21 + 9) = 0uLL;
      *((_OWORD *)v21 + 10) = 0uLL;
      *((_OWORD *)v21 + 7) = 0uLL;
      *((_OWORD *)v21 + 8) = 0uLL;
      *((_OWORD *)v21 + 5) = 0uLL;
      *((_OWORD *)v21 + 6) = 0uLL;
      *((_OWORD *)v21 + 3) = 0uLL;
      *((_OWORD *)v21 + 4) = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      *((_OWORD *)v21 + 2) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_QWORD *)v21 + 1) = 0x7FF8000000000000;
      v22 = v21 + 312;
      *(_OWORD *)(v21 + 312) = 0uLL;
      *(_OWORD *)(v21 + 328) = 0uLL;
      *(_OWORD *)(v21 + 344) = 0uLL;
      *(_OWORD *)(v21 + 360) = 0uLL;
      v21 += 408;
      *((_OWORD *)v22 + 4) = 0uLL;
      *((_OWORD *)v22 + 5) = 0uLL;
    }
    while (v21 != v20);
    v23 = *v7;
    if (!*v7)
      goto LABEL_13;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v23 = *v7;
    if (!*v7)
      goto LABEL_13;
  }
  v24 = *(_QWORD **)(a1 + 16);
  v25 = v23;
  if (v24 != v23)
  {
    do
    {
      v24 -= 51;
      sub_20ED29134(v24);
    }
    while (v24 != v23);
    v25 = *v7;
  }
  *(_QWORD *)(a1 + 16) = v23;
  operator delete(v25);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
LABEL_13:
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_20F167188(_Unwind_Exception *a1)
{
  _QWORD **v1;
  _QWORD *v2;

  sub_20F1671DC(v2);
  sub_20F0D8DF8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F1671DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 51;
        sub_20ED29134(v3);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F16723C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, int *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _BYTE *v33;
  int v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int8x16_t v64;
  int8x16_t v65;
  int64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  char *v69;
  char *v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  char *v78;
  char *v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v104;
  int8x16_t v110;
  unint64_t v111;
  double v112;
  float64x2_t v114;
  float64x2_t v116;
  int8x16_t v118;
  int8x16_t v119;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v128;
  float64x2_t v129;
  uint64_t v130;
  int64x2_t v131;
  uint64_t v132;
  int8x16_t v133;
  int8x16_t v135;
  double v136;
  int8x16_t v138;
  double v139;
  float64x2_t v140;
  int8x16_t v142;
  int8x16_t v143;
  double v149;
  double v150;
  double v151;
  double v152;
  __int128 v153;
  double v154;
  double v155;
  __int128 v156;
  __int128 v157;
  int64x2_t v158;
  float64x2_t v159;
  unint64_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v164;
  int8x16_t v165;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  unint64_t v184;
  float64x2_t *v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  void *v194;
  uint64_t v195;
  double v196;
  _OWORD v197[8];
  _OWORD v198[4];
  uint64_t v199;
  _QWORD v200[4];
  __int128 v201;
  double v202;
  double v203;
  __int128 v204;
  __int128 v205;
  char v206;
  _BYTE v207[32];
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  char v214;
  char v215;
  char v216;
  uint64_t v217;
  void *v218;
  char *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  _BYTE v226[32];
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unsigned __int8 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  unsigned __int8 v244;
  void *v245[2];
  __int128 v246;
  void *v247[2];
  void *v248[2];
  __int128 v249;
  void *__p[2];
  uint64_t v251;

  v10 = *a2;
  v11 = a2[1];
  v12 = *a2;
  if (*a2 == v11)
  {
LABEL_6:
    v13 = v12;
    if (v12 != v11)
      goto LABEL_9;
  }
  else
  {
    v12 = *a2;
    do
    {
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 7)) > 1)
        goto LABEL_6;
      v12 += 32;
    }
    while (v12 != v11);
    v12 = a2[1];
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisionPoseTracker.cpp", 60, (uint64_t)"stereo_camera_iter != camera_sensor_models.end()", 48, (uint64_t)"There must be a stereo camera for Vision Pose Tracker", 53, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_118;
  }
  v10 = *a2;
  v13 = v11;
LABEL_9:
  v14 = *a3 + 104 * ((unint64_t)(v12 - v10) >> 5);
  v15 = *(_QWORD *)(v14 + 8);
  if (*(_QWORD *)(v14 + 16) - v15 != 880)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisionPoseTracker.cpp", 70, (uint64_t)"curr_features.NumStreams() == 2u", 32, (uint64_t)"Camera must have two streams", 28, (void (*)(void **))sub_21023DDB0))
    {
      v15 = *(_QWORD *)(v14 + 8);
      goto LABEL_12;
    }
LABEL_118:
    abort();
  }
LABEL_12:
  v16 = *(_QWORD *)(v15 + 8);
  if (*((_BYTE *)a4 + 4) && a1[6])
  {
    v17 = *a4;
    v18 = a1[5];
    if (v18)
    {
      v19 = a1[1];
      if (v17 == **(_DWORD **)(v19 + 408 * v18 - 96))
        goto LABEL_37;
    }
    else
    {
      v19 = a1[1];
      if (v17 == **(_DWORD **)(v19 + 8 * ((a1[2] - v19) >> 3) - 96))
        goto LABEL_37;
    }
    *(_DWORD *)v226 = 0;
    *(_QWORD *)&v226[8] = 0x7FF8000000000000;
    v226[16] = 0;
    v226[24] = 0;
    LOBYTE(v227) = 0;
    v235 = 0;
    LOBYTE(v236) = 0;
    v244 = 0;
    *(_OWORD *)v245 = 0u;
    v246 = 0u;
    *(_OWORD *)v247 = 0u;
    *(_OWORD *)v248 = 0u;
    v249 = 0u;
    *(_OWORD *)__p = 0u;
    v251 = 0;
    if (!v18)
      v18 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v19) >> 3);
    v20 = v18 - 1;
    v21 = v19 + 408 * v20;
    *(_OWORD *)v21 = *(_OWORD *)v226;
    *(_OWORD *)(v21 + 9) = *(_OWORD *)&v226[9];
    v23 = *(unsigned __int8 *)(v21 + 160);
    v22 = (_BYTE *)(v21 + 160);
    if (v23)
      *v22 = 0;
    v24 = v19 + 408 * v20;
    if (*(_BYTE *)(v24 + 296))
      *(_BYTE *)(v24 + 296) = 0;
    sub_20F168294(v19 + 408 * v20 + 304, (uint64_t)v245);
    if (__p[0])
      operator delete(__p[0]);
    if (v248[1])
      operator delete(v248[1]);
    if (v247[0])
      operator delete(v247[0]);
    v25 = (char *)v245[1];
    if (v245[1])
    {
      v26 = (char *)v246;
      if ((void *)v246 != v245[1])
      {
        do
        {
          sub_20E990658((uint64_t)(v26 - 208));
          sub_20E990658((uint64_t)(v26 - 416));
          v26 -= 440;
        }
        while (v26 != v25);
      }
      operator delete(v25);
    }
    v27 = a1[5];
    if (!v27)
      v27 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - a1[1]) >> 3);
    v28 = a1[6] - 1;
    a1[5] = v27 - 1;
    a1[6] = v28;
  }
LABEL_37:
  v195 = v13;
  *(_DWORD *)v207 = *(_DWORD *)v14;
  *(_QWORD *)&v207[8] = v16;
  v207[16] = 0;
  v207[24] = 0;
  LOBYTE(v208.f64[0]) = 0;
  v214 = 0;
  v215 = 0;
  v216 = 0;
  sub_20EE65FB0((uint64_t)&v217, v14);
  v29 = a1[5];
  v30 = a1[1];
  *(_OWORD *)v226 = *(_OWORD *)v207;
  *(_OWORD *)&v226[9] = *(_OWORD *)&v207[9];
  LOBYTE(v227) = 0;
  v235 = 0;
  LOBYTE(v236) = 0;
  v244 = 0;
  sub_20EE65FB0((uint64_t)v245, (uint64_t)&v217);
  v31 = v30 + 408 * v29;
  v32 = *(_OWORD *)v226;
  *(_OWORD *)(v31 + 9) = *(_OWORD *)&v226[9];
  *(_OWORD *)v31 = v32;
  v33 = (_BYTE *)(v31 + 160);
  v34 = *(unsigned __int8 *)(v31 + 160);
  v35 = (_OWORD *)(v31 + 32);
  if (v34 == v235)
  {
    if (v34)
    {
      v36 = v227;
      v37 = v228;
      v38 = v230;
      *((_OWORD *)v33 - 6) = v229;
      *((_OWORD *)v33 - 5) = v38;
      *v35 = v36;
      *((_OWORD *)v33 - 7) = v37;
      v39 = v231;
      v40 = v232;
      v41 = v234;
      *((_OWORD *)v33 - 2) = v233;
      *((_OWORD *)v33 - 1) = v41;
      *((_OWORD *)v33 - 4) = v39;
      *((_OWORD *)v33 - 3) = v40;
    }
  }
  else if (v34)
  {
    *v33 = 0;
  }
  else
  {
    v42 = v227;
    v43 = v228;
    v44 = v230;
    *((_OWORD *)v33 - 6) = v229;
    *((_OWORD *)v33 - 5) = v44;
    *v35 = v42;
    *((_OWORD *)v33 - 7) = v43;
    v45 = v231;
    v46 = v232;
    v47 = v234;
    *((_OWORD *)v33 - 2) = v233;
    *((_OWORD *)v33 - 1) = v47;
    *((_OWORD *)v33 - 4) = v45;
    *((_OWORD *)v33 - 3) = v46;
    *v33 = 1;
  }
  v48 = v30 + 408 * v29;
  v49 = (_OWORD *)(v48 + 168);
  v50 = *(unsigned __int8 *)(v48 + 296);
  if (v50 == v244)
  {
    if (*(_BYTE *)(v48 + 296))
    {
      v51 = v236;
      v52 = v237;
      v53 = v239;
      *(_OWORD *)(v48 + 200) = v238;
      *(_OWORD *)(v48 + 216) = v53;
      *v49 = v51;
      *(_OWORD *)(v48 + 184) = v52;
      v54 = v240;
      v55 = v241;
      v56 = v243;
      *(_OWORD *)(v48 + 264) = v242;
      *(_OWORD *)(v48 + 280) = v56;
      *(_OWORD *)(v48 + 232) = v54;
      *(_OWORD *)(v48 + 248) = v55;
    }
  }
  else
  {
    v57 = (_BYTE *)(v48 + 296);
    if (v50)
    {
      *v57 = 0;
    }
    else
    {
      v58 = v236;
      v59 = v237;
      v60 = v239;
      v49[2] = v238;
      v49[3] = v60;
      *v49 = v58;
      v49[1] = v59;
      v61 = v240;
      v62 = v241;
      v63 = v243;
      v49[6] = v242;
      v49[7] = v63;
      v49[4] = v61;
      v49[5] = v62;
      *v57 = 1;
    }
  }
  sub_20F168294(v30 + 408 * v29 + 304, (uint64_t)v245);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v248[1])
  {
    *(void **)&v249 = v248[1];
    operator delete(v248[1]);
  }
  if (v247[0])
  {
    v247[1] = v247[0];
    operator delete(v247[0]);
  }
  v69 = (char *)v245[1];
  if (v245[1])
  {
    v70 = (char *)v246;
    v71 = v245[1];
    if ((void *)v246 != v245[1])
    {
      do
      {
        sub_20E990658((uint64_t)(v70 - 208));
        sub_20E990658((uint64_t)(v70 - 416));
        v70 -= 440;
      }
      while (v70 != v69);
      v71 = v245[1];
    }
    *(_QWORD *)&v246 = v69;
    operator delete(v71);
  }
  v72 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - a1[1]) >> 3);
  v73 = a1[6];
  v74 = a1[5] + 1;
  if (v74 >= v72)
    v75 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - a1[1]) >> 3);
  else
    v75 = 0;
  a1[5] = v74 - v75;
  if (v73 != v72)
  {
    a1[6] = v73 + 1;
    v77 = v224;
    if (!v224)
      goto LABEL_70;
    goto LABEL_69;
  }
  v76 = a1[4] + 1;
  if (v76 < v72)
    v72 = 0;
  a1[4] = v76 - v72;
  v77 = v224;
  if (v224)
  {
LABEL_69:
    v225 = v77;
    operator delete(v77);
  }
LABEL_70:
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  v78 = (char *)v218;
  if (v218)
  {
    v79 = v219;
    v80 = v218;
    if (v219 != v218)
    {
      do
      {
        sub_20E990658((uint64_t)(v79 - 208));
        sub_20E990658((uint64_t)(v79 - 416));
        v79 -= 440;
      }
      while (v79 != v78);
      v80 = v218;
    }
    v219 = v78;
    operator delete(v80);
  }
  v81 = a1[5];
  if (v81)
  {
    v82 = a1[1];
    v83 = v82 + 408 * v81 - 408;
    if (a1[6] != 1)
    {
      if (v81 > 1)
      {
LABEL_89:
        v90 = v81 - 2;
        v91 = v82 + 408 * (v81 - 2);
        *(_QWORD *)(v83 + 16) = *(_QWORD *)(v91 + 8);
        *(_BYTE *)(v83 + 24) = 1;
        v92 = *(_QWORD *)(v195 + 8);
        v93 = *(_QWORD *)(v195 + 16);
        if (*(_BYTE *)(v92 + 1536))
          v94 = v92 + 96;
        else
          v94 = 0;
        if (*(_BYTE *)(v93 - 128))
          v95 = v93 - 1568;
        else
          v95 = 0;
        sub_20F1683E8(v91, v83, v94, v95, (uint64_t)v226, v64, v65, v66, v67, v68);
        v96 = *(_QWORD *)(v195 + 8);
        v97.f64[0] = *(float64_t *)(v96 + 1680);
        _Q1 = *(float64x2_t *)(v96 + 1664);
        _Q2 = *(int64x2_t *)(v96 + 1688);
        _D17 = *(_QWORD *)(v96 + 1728);
        v101 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, _Q2);
        v97.f64[1] = *(float64_t *)(v96 + 1704);
        v102 = (float64x2_t)vzip2q_s64((int64x2_t)_Q1, _Q2);
        _Q2.i64[0] = *(_QWORD *)(v96 + 1752);
        _Q7 = *(float64x2_t *)(v96 + 1736);
        v104 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v101, vnegq_f64(_Q7).f64[0]), v102, _Q7, 1), v97, *(double *)_Q2.i64, 0);
        _D16 = *(_QWORD *)(v96 + 1720);
        __asm
        {
          FMLS            D1, D16, V7.D[1]
          FMLS            D1, D17, V2.D[0]
        }
        _Q7.f64[0] = *(float64_t *)(v96 + 1712);
        v110 = vextq_s8((int8x16_t)v102, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v96 + 1712), 1), 8uLL);
        *(_QWORD *)&v102.f64[1] = v110.i64[0];
        v111 = _D17;
        _Q1.f64[1] = 1.0;
        v112 = *(double *)(v96 + 16);
        _D20 = *(double *)(v96 + 40);
        v114 = *(float64x2_t *)(v96 + 24);
        _D17 = *(double *)(v96 + 64);
        v116 = *(float64x2_t *)(v96 + 48);
        _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v96, (int64x2_t)v114);
        v118 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q19, 1);
        v119 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q19.f64[0], 0);
        _D26 = *(double *)(v96 + 88);
        _Q27 = *(float64x2_t *)(v96 + 72);
        v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v96, (int64x2_t)v114);
        v123 = vmlsq_laneq_f64(vmulq_n_f64(v122, vnegq_f64(_Q27).f64[0]), _Q19, _Q27, 1);
        _Q19.f64[0] = v112;
        _Q19.f64[1] = _D20;
        _Q30 = vmlsq_lane_f64(v123, _Q19, _D26, 0);
        _Q19.f64[0] = *(float64_t *)(v96 + 56);
        __asm
        {
          FMLS            D28, D19, V27.D[1]
          FMLS            D28, D17, V26.D[0]
        }
        _Q19 = (int64x2_t)vextq_s8(v119, v118, 8uLL);
        v128 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v122, _Q19), vnegq_f64(_Q30).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v122, _Q19), _Q30, 1), v116, _D28, 0);
        __asm
        {
          FMLS            D19, D20, V30.D[1]
          FMLS            D19, D17, V28.D[0]
        }
        v129 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], *(double *)v96), (float64x2_t)v110.u64[1], *(float64x2_t *)v96, 1), (float64x2_t)v111, v112), (float64x2_t)0, _Q1);
        *(float64x2_t *)v207 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v101, *(double *)v96), v102, *(float64x2_t *)v96, 1), v97, v112), (float64x2_t)0, v104);
        *(float64x2_t *)&v207[16] = v129;
        v208 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v101, v114.f64[0]), v102, v114, 1), v97, _D20), (float64x2_t)0, v104);
        v209 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v114.f64[0]), (float64x2_t)v110.u64[1], v114, 1), (float64x2_t)v111, _D20), (float64x2_t)0, _Q1);
        v210 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v101, v116.f64[0]), v102, v116, 1), v97, _D17), (float64x2_t)0, v104);
        v211 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v116.f64[0]), (float64x2_t)v110.u64[1], v116, 1), (float64x2_t)v111, _D17), (float64x2_t)0, _Q1);
        v212 = vaddq_f64(v104, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v101, v128.f64[0]), v102, v128, 1), v97, *(double *)_Q19.i64));
        v213 = vaddq_f64(_Q1, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v128.f64[0]), (float64x2_t)v110.u64[1], v128, 1), (float64x2_t)v111, *(double *)_Q19.i64));
        v130 = *a1;
        v199 = 0;
        memset(v198, 0, sizeof(v198));
        v197[5] = unk_21039D4C0;
        v197[6] = xmmword_21039D4D0;
        v197[7] = unk_21039D4E0;
        v197[0] = xmmword_21039D470;
        v197[1] = unk_21039D480;
        v197[2] = xmmword_21039D490;
        memset(&v197[3], 0, 32);
        sub_20F0DB478(v130, (uint64_t)v207, v94, v95, (uint64_t)v198, (uint64_t)v197, (uint64_t *)v226, (uint64_t)v200);
        if (!v206)
          goto LABEL_103;
        v132 = *(_QWORD *)(v195 + 8);
        v131.i64[0] = *(_QWORD *)(v132 + 16);
        v133 = *(int8x16_t *)v132;
        _Q1 = vextq_s8(v133, v133, 8uLL);
        v196 = *(double *)_Q1.i64;
        _Q1.i64[0] = *(_QWORD *)(v132 + 40);
        v135 = *(int8x16_t *)(v132 + 24);
        *(_QWORD *)&v136 = vextq_s8(v135, v135, 8uLL).u64[0];
        _D2 = *(double *)(v132 + 64);
        v138 = *(int8x16_t *)(v132 + 48);
        *(_QWORD *)&v139 = vextq_s8(v138, v138, 8uLL).u64[0];
        v140 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v132, (int64x2_t)v135);
        _Q4 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v132, (int64x2_t)v135);
        v142 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q4, 1);
        v143 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q4.f64[0], 0);
        _D19 = *(double *)(v132 + 88);
        _Q22 = *(float64x2_t *)(v132 + 72);
        _Q3 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v140, vnegq_f64(_Q22).f64[0]), _Q4, _Q22, 1), (float64x2_t)vzip1q_s64(v131, (int64x2_t)_Q1), _D19, 0);
        _D5 = *(_QWORD *)(v132 + 56);
        __asm
        {
          FMLS            D4, D5, V22.D[1]
          FMLS            D4, D2, V19.D[0]
        }
        v149 = *(double *)v200;
        v150 = *(double *)&v200[1];
        v151 = *(double *)&v200[3];
        v152 = *(double *)&v200[2];
        v153 = v201;
        v154 = v203;
        v155 = v202;
        v156 = v204;
        v157 = v205;
        v158 = (int64x2_t)vextq_s8(v143, v142, 8uLL);
        v159 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v132, v158);
        v160 = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
        v164 = (float64x2_t)vzip2q_s64((int64x2_t)v140, v158);
        v161.f64[0] = *(float64_t *)(v132 + 48);
        *(_QWORD *)&v161.f64[1] = vdupq_laneq_s64((int64x2_t)v138, 1).u64[0];
        v162 = vmlsq_laneq_f64(vmulq_n_f64(v159, vnegq_f64(_Q3).f64[0]), v164, _Q3, 1);
        __asm
        {
          FMLS            D10, D1, V3.D[1]
          FMLS            D10, D2, V4.D[0]
        }
        v165 = vextq_s8((int8x16_t)v164, _Q1, 8uLL);
        *(_QWORD *)&v164.f64[1] = v165.i64[0];
        _Q10.f64[1] = 1.0;
        v167 = vmlsq_lane_f64(v162, v161, _D4, 0);
        if (!*(_BYTE *)(v83 + 296))
          *(_BYTE *)(v83 + 296) = 1;
        *(_QWORD *)&v159.f64[1] = v160;
        v168 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v149), v164, *(double *)&v153), v161, *(double *)&v156), (float64x2_t)0, v167);
        v169 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v131.u64[0], v149), (float64x2_t)v165.u64[1], *(double *)&v153), (float64x2_t)*(unint64_t *)&_D2, *(double *)&v156), (float64x2_t)0, _Q10);
        v170 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v150), v164, *((double *)&v153 + 1)), v161, *((double *)&v156 + 1)), (float64x2_t)0, v167);
        v171 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v131.u64[0], v150), (float64x2_t)v165.u64[1], *((double *)&v153 + 1)), (float64x2_t)*(unint64_t *)&_D2, *((double *)&v156 + 1)), (float64x2_t)0, _Q10);
        v172 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v152), v164, v155), v161, *(double *)&v157), (float64x2_t)0, v167);
        v173 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v131.u64[0], v152), (float64x2_t)v165.u64[1], v155), (float64x2_t)*(unint64_t *)&_D2, *(double *)&v157), (float64x2_t)0, _Q10);
        v174 = vaddq_f64(v167, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v159, v151), v164, v154), v161, *((double *)&v157 + 1)));
        v175 = vaddq_f64(_Q10, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v131.u64[0], v151), (float64x2_t)v165.u64[1], v154), (float64x2_t)*(unint64_t *)&_D2, *((double *)&v157 + 1)));
        v176 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, *(double *)v133.i64), v170, *(double *)v135.i64), v172, *(double *)v138.i64), (float64x2_t)0, v174);
        v177 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, *(double *)v133.i64), v171, *(double *)v135.i64), v173, *(double *)v138.i64), (float64x2_t)0, v175);
        v178 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, v196), v170, v136), v172, v139), (float64x2_t)0, v174);
        v179 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, v196), v171, v136), v173, v139), (float64x2_t)0, v175);
        v180 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v168, *(double *)v131.i64), v170, *(double *)_Q1.i64), v172, _D2), (float64x2_t)0, v174);
        v181 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v169, *(double *)v131.i64), v171, *(double *)_Q1.i64), v173, _D2), (float64x2_t)0, v175);
        v182 = vaddq_f64(v174, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v168, _Q3.f64[0]), v170, _Q3, 1), v172, _D4));
        v183 = vaddq_f64(v175, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v169, _Q3.f64[0]), v171, _Q3, 1), v173, _D4));
        *(float64x2_t *)(v83 + 168) = v176;
        *(float64x2_t *)(v83 + 184) = v177;
        *(float64x2_t *)(v83 + 200) = v178;
        *(float64x2_t *)(v83 + 216) = v179;
        *(float64x2_t *)(v83 + 232) = v180;
        *(float64x2_t *)(v83 + 264) = v182;
        *(float64x2_t *)(v83 + 280) = v183;
        *(float64x2_t *)(v83 + 248) = v181;
        v184 = v82 + 408 * v90;
        if (*(_BYTE *)(v184 + 160))
        {
          v187 = *(float64x2_t *)(v184 + 32);
          v186 = *(float64x2_t *)(v184 + 48);
          v185 = (float64x2_t *)(v184 + 32);
          v189 = v185[2];
          v188 = v185[3];
          v191 = v185[4];
          v190 = v185[5];
          v193 = v185[6];
          v192 = v185[7];
          if (!*(_BYTE *)(v83 + 160))
            *(_BYTE *)(v83 + 160) = 1;
          *(float64x2_t *)(v83 + 32) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v187.f64[0]), v178, v187, 1), v180, v186.f64[0]), v182, v186, 1);
          *(float64x2_t *)(v83 + 48) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v187.f64[0]), v179, v187, 1), v181, v186.f64[0]), v183, v186, 1);
          *(float64x2_t *)(v83 + 64) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v189.f64[0]), v178, v189, 1), v180, v188.f64[0]), v182, v188, 1);
          *(float64x2_t *)(v83 + 80) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v189.f64[0]), v179, v189, 1), v181, v188.f64[0]), v183, v188, 1);
          *(float64x2_t *)(v83 + 96) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v191.f64[0]), v178, v191, 1), v180, v190.f64[0]), v182, v190, 1);
          *(float64x2_t *)(v83 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v191.f64[0]), v179, v191, 1), v181, v190.f64[0]), v183, v190, 1);
          *(float64x2_t *)(v83 + 128) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, v193.f64[0]), v178, v193, 1), v180, v192.f64[0]), v182, v192, 1);
          *(float64x2_t *)(v83 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v177, v193.f64[0]), v179, v193, 1), v181, v192.f64[0]), v183, v192, 1);
          memmove(a5, (const void *)(v83 + 32), 0x80uLL);
          *((_QWORD *)a5 + 16) = v16;
          *((_QWORD *)a5 + 17) = v16;
          a5[144] = 1;
          v194 = (void *)v234;
          if (!(_QWORD)v234)
            goto LABEL_105;
        }
        else
        {
LABEL_103:
          *a5 = 0;
          a5[144] = 0;
          v194 = (void *)v234;
          if (!(_QWORD)v234)
          {
LABEL_105:
            if (*((_QWORD *)&v232 + 1))
            {
              *(_QWORD *)&v233 = *((_QWORD *)&v232 + 1);
              operator delete(*((void **)&v232 + 1));
            }
            if ((_QWORD)v231)
            {
              *((_QWORD *)&v231 + 1) = v231;
              operator delete((void *)v231);
            }
            if (*((_QWORD *)&v229 + 1))
            {
              *(_QWORD *)&v230 = *((_QWORD *)&v229 + 1);
              operator delete(*((void **)&v229 + 1));
            }
            if ((_QWORD)v228)
            {
              *((_QWORD *)&v228 + 1) = v228;
              operator delete((void *)v228);
            }
            if (*(_QWORD *)&v226[24])
            {
              *(_QWORD *)&v227 = *(_QWORD *)&v226[24];
              operator delete(*(void **)&v226[24]);
            }
            if (*(_QWORD *)v226)
            {
              *(_QWORD *)&v226[8] = *(_QWORD *)v226;
              operator delete(*(void **)v226);
            }
            return;
          }
        }
        operator delete(v194);
        goto LABEL_105;
      }
      v84 = a1[2];
LABEL_88:
      v81 -= 0x505050505050505 * ((v84 - v82) >> 3);
      goto LABEL_89;
    }
  }
  else
  {
    v84 = a1[2];
    v83 = v84 - 408;
    if (a1[6] != 1)
    {
      v82 = a1[1];
      goto LABEL_88;
    }
  }
  v85 = *(unsigned __int8 *)(v83 + 160);
  *(_OWORD *)(v83 + 96) = xmmword_21039D4B0;
  *(_OWORD *)(v83 + 112) = unk_21039D4C0;
  *(_OWORD *)(v83 + 128) = xmmword_21039D4D0;
  *(_OWORD *)(v83 + 144) = unk_21039D4E0;
  *(_OWORD *)(v83 + 32) = xmmword_21039D470;
  *(_OWORD *)(v83 + 48) = unk_21039D480;
  *(_OWORD *)(v83 + 64) = xmmword_21039D490;
  *(_OWORD *)(v83 + 80) = unk_21039D4A0;
  if (!v85)
    *(_BYTE *)(v83 + 160) = 1;
  v86 = *(_OWORD *)(v83 + 112);
  *((_OWORD *)a5 + 4) = *(_OWORD *)(v83 + 96);
  *((_OWORD *)a5 + 5) = v86;
  v87 = *(_OWORD *)(v83 + 144);
  *((_OWORD *)a5 + 6) = *(_OWORD *)(v83 + 128);
  *((_OWORD *)a5 + 7) = v87;
  v88 = *(_OWORD *)(v83 + 48);
  *(_OWORD *)a5 = *(_OWORD *)(v83 + 32);
  *((_OWORD *)a5 + 1) = v88;
  v89 = *(_OWORD *)(v83 + 80);
  *((_OWORD *)a5 + 2) = *(_OWORD *)(v83 + 64);
  *((_OWORD *)a5 + 3) = v89;
  *((_QWORD *)a5 + 16) = v16;
  *((_QWORD *)a5 + 17) = v16;
  a5[144] = 1;
}

void sub_20F167FB8(_Unwind_Exception *a1)
{
  sub_20ED29320((uint64_t)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_20F167FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  sub_20F167FE0(&a52);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F167FE0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)a1[48];
  if (v2)
  {
    a1[49] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[45];
  if (v3)
  {
    a1[46] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[42];
  if (v4)
  {
    a1[43] = v4;
    operator delete(v4);
  }
  v5 = a1[39];
  if (v5)
  {
    v6 = a1[40];
    v7 = (void *)a1[39];
    if (v6 != v5)
    {
      do
      {
        sub_20E990658(v6 - 208);
        sub_20E990658(v6 - 416);
        v6 -= 440;
      }
      while (v6 != v5);
      v7 = (void *)a1[39];
    }
    a1[40] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F16807C(_QWORD *a1, __int128 *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = a1[6];
  if (!v3)
    return v3;
  v4 = 0;
  v5 = a1[1];
  while (1)
  {
    v6 = (a1[4] + v4) % (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v5) >> 3));
    if (*(double *)(v5 + 408 * v6 + 8) == a3)
      break;
    if (v3 == ++v4)
      return 0;
  }
  v8 = v5 + 408 * v6;
  v9 = *(unsigned __int8 *)(v8 + 160);
  v10 = a2[3];
  v12 = *a2;
  v11 = a2[1];
  *(_OWORD *)(v8 + 64) = a2[2];
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 32) = v12;
  *(_OWORD *)(v8 + 48) = v11;
  v13 = a2[7];
  v15 = a2[4];
  v14 = a2[5];
  *(_OWORD *)(v8 + 128) = a2[6];
  *(_OWORD *)(v8 + 144) = v13;
  *(_OWORD *)(v8 + 96) = v15;
  *(_OWORD *)(v8 + 112) = v14;
  if (!v9)
    *(_BYTE *)(v8 + 160) = 1;
  v3 = 1;
  if (a1[6] - 1 == v4)
    return v3;
  v16 = v4 + 1;
  do
  {
    v39 = v16 + a1[4];
    v40 = a1[1];
    v41 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v40) >> 3);
    v42 = v39 % v41;
    v43 = v40 + 408 * (v39 % v41);
    if (!*(_BYTE *)(v43 + 296))
      break;
    v44 = v40 + 408 * ((v39 - 1) % v41);
    if (!*(_BYTE *)(v44 + 160))
      sub_20E866B34();
    v45 = v40 + 408 * v42;
    if (!*(_BYTE *)(v45 + 160))
      *(_BYTE *)(v45 + 160) = 1;
    v17 = (float64x2_t *)(v43 + 168);
    v18 = v17[1];
    v20 = v17[2];
    v19 = v17[3];
    v22 = v17[4];
    v21 = v17[5];
    v24 = v17[6];
    v23 = v17[7];
    v26 = *(float64x2_t *)(v44 + 32);
    v25 = *(float64x2_t *)(v44 + 48);
    v28 = *(float64x2_t *)(v44 + 64);
    v27 = *(float64x2_t *)(v44 + 80);
    v30 = *(float64x2_t *)(v44 + 96);
    v29 = *(float64x2_t *)(v44 + 112);
    v32 = *(float64x2_t *)(v44 + 128);
    v31 = *(float64x2_t *)(v44 + 144);
    v33 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v26.f64[0]), v20, v26, 1), v22, v25.f64[0]), v24, v25, 1);
    v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v26.f64[0]), v19, v26, 1), v21, v25.f64[0]), v23, v25, 1);
    v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v28.f64[0]), v20, v28, 1), v22, v27.f64[0]), v24, v27, 1);
    v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v28.f64[0]), v19, v28, 1), v21, v27.f64[0]), v23, v27, 1);
    v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v30.f64[0]), v20, v30, 1), v22, v29.f64[0]), v24, v29, 1);
    v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, v32.f64[0]), v20, v32, 1), v22, v31.f64[0]), v24, v31, 1);
    *(float64x2_t *)(v45 + 32) = v33;
    *(float64x2_t *)(v45 + 48) = v34;
    *(float64x2_t *)(v45 + 64) = v35;
    *(float64x2_t *)(v45 + 80) = v36;
    *(float64x2_t *)(v45 + 96) = v37;
    *(float64x2_t *)(v45 + 112) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v30.f64[0]), v19, v30, 1), v21, v29.f64[0]), v23, v29, 1);
    *(float64x2_t *)(v45 + 128) = v38;
    *(float64x2_t *)(v45 + 144) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, v32.f64[0]), v19, v32, 1), v21, v31.f64[0]), v23, v31, 1);
    ++v16;
  }
  while (v16 != a1[6]);
  return 1;
}

uint64_t sub_20F168294(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = (_QWORD *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a1 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        sub_20E990658(v7 - 208);
        sub_20E990658(v7 - 416);
        v7 -= 440;
      }
      while (v7 != v6);
      v8 = *(void **)v5;
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    *(_QWORD *)(a1 + 40) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(void **)(a1 + 56);
  if (v10)
  {
    *(_QWORD *)(a1 + 64) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(void **)(a1 + 80);
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

void sub_20F1683E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, int8x16_t a6@<Q2>, int8x16_t a7@<Q3>, int64x2_t a8@<Q4>, float64x2_t a9@<Q5>, float64x2_t a10@<Q6>)
{
  double v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  unsigned int **v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  float64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v14 = *(double *)(a1 + 8);
  if (*(double *)(a2 + 8) <= v14
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisionPoseTrackerUtil.cpp", 35, (uint64_t)"cur_frame.timestamp > ref_frame.timestamp", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_QWORD *)(a5 + 160) = 0;
  v15 = 0uLL;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v16 = *(_QWORD *)(a2 + 312);
  v17 = *(_QWORD *)(a1 + 320);
  if (*(_BYTE *)(v17 - 320))
  {
    v18 = 0;
    v19 = 0;
    v46 = *(_QWORD *)(a2 + 312);
    v20 = *(_QWORD *)(a1 + 320);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisionPoseTrackerUtil.cpp", 45, (uint64_t)"ref_sec_to_ref_pri_matches", 26, (uint64_t)"Camera has no invalid stereo matches", 36, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v20 = *(_QWORD *)(a1 + 320);
    v46 = *(_QWORD *)(a2 + 312);
    v18 = *(_QWORD *)(a5 + 48);
    v19 = *(_QWORD *)(a5 + 56);
  }
  v21 = (unsigned int **)(v17 - 344);
  v22 = *(_QWORD *)(a1 + 312);
  v23 = (unsigned int **)(v17 - 336);
  v24 = (uint64_t)(*(_QWORD *)(v17 - 336) - *(_QWORD *)(v17 - 344)) >> 3;
  v25 = *(_QWORD *)(v16 + 72);
  if ((*(_QWORD *)(v16 + 80) - v25) >> 3 < v24)
    v24 = (*(_QWORD *)(v16 + 80) - v25) >> 3;
  v26 = (2 * v24);
  v27 = (v19 - v18) >> 3;
  if (v26 <= v27)
  {
    if (v26 < v27)
      *(_QWORD *)(a5 + 56) = v18 + 8 * v26;
  }
  else
  {
    sub_20E93D8FC(a5 + 48, v26 - v27);
  }
  v28 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  if (v26 <= v28)
  {
    if (v26 < v28)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 8 * v26;
  }
  else
  {
    sub_20E93D8FC(a5, v26 - v28);
  }
  v29 = *(_QWORD *)(a5 + 24);
  v30 = (*(_QWORD *)(a5 + 32) - v29) >> 3;
  if (v26 <= v30)
  {
    if (v26 < v30)
      *(_QWORD *)(a5 + 32) = v29 + 8 * v26;
  }
  else
  {
    sub_20E93D8FC(a5 + 24, v26 - v30);
  }
  v31 = *v21;
  v32 = *v23;
  if (v31 == v32)
  {
    v33 = 0;
  }
  else
  {
    v33 = 0;
    v34 = (_QWORD *)(v20 - 416);
    do
    {
      v35 = v31[1];
      v37 = *(unsigned int **)(v16 + 72);
      v36 = *(unsigned int **)(v16 + 80);
      if (v37 != v36)
      {
        while (v37[1] != (_DWORD)v35)
        {
          v37 += 2;
          if (v37 == v36)
            goto LABEL_23;
        }
      }
      if (v37 != v36
        && (sub_20F1687E0((double *)(*(_QWORD *)(v22 + 24) + 16 * v35), a3, &v50, v15, v14, a6, a7, a8, a9, a10) & 1) != 0
        && (sub_20F1687E0((double *)(*v34 + 16 * *v31), a4, &v49, v15, v14, a6, a7, a8, a9, a10) & 1) != 0
        && (sub_20F1687E0((double *)(*(_QWORD *)(v46 + 24) + 16 * *v37), a3, &v48, v15, v14, a6, a7, a8, a9, a10) & 1) != 0)
      {
        v38 = 8 * (2 * v33);
        *(float64x2_t *)(*(_QWORD *)(a5 + 48) + v38) = v48;
        *(float64x2_t *)(*(_QWORD *)a5 + v38) = v50;
        v39 = (float64_t *)(*(_QWORD *)(a5 + 24) + v38);
        *v39 = v49.f64[0];
        v15.i64[0] = *(_QWORD *)&v49.f64[1];
        v39[1] = v49.f64[1];
        ++v33;
      }
LABEL_23:
      v31 += 2;
    }
    while (v31 != v32);
  }
  v40 = (2 * v33);
  v41 = *(_QWORD *)(a5 + 48);
  v42 = (*(_QWORD *)(a5 + 56) - v41) >> 3;
  if (v40 <= v42)
  {
    if (v40 < v42)
      *(_QWORD *)(a5 + 56) = v41 + 8 * v40;
  }
  else
  {
    sub_20E93D8FC(a5 + 48, v40 - v42);
  }
  v43 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  if (v40 <= v43)
  {
    if (v40 < v43)
      *(_QWORD *)(a5 + 8) = *(_QWORD *)a5 + 8 * v40;
  }
  else
  {
    sub_20E93D8FC(a5, v40 - v43);
  }
  v44 = *(_QWORD *)(a5 + 24);
  v45 = (*(_QWORD *)(a5 + 32) - v44) >> 3;
  if (v40 <= v45)
  {
    if (v40 < v45)
      *(_QWORD *)(a5 + 32) = v44 + 8 * v40;
  }
  else
  {
    sub_20E93D8FC(a5 + 24, v40 - v45);
  }
}

void sub_20F168768(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

void sub_20F16877C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

void sub_20F168790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

void sub_20F1687A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

void sub_20F1687B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

void sub_20F1687CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED29320(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1687E0(double *a1, uint64_t a2, float64x2_t *a3, int8x16_t a4, double a5, int8x16_t a6, int8x16_t a7, int64x2_t a8, float64x2_t a9, float64x2_t a10)
{
  unsigned int v13;
  double v14;
  double v15;
  float64x2_t *v16;
  double *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t *v23;
  uint64_t result;
  char v25;
  double v26;
  unsigned int v27;
  double v28;
  double v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a2 + 992);
  if (v13 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = *(_DWORD *)(a2 + 992);
    if (v13 <= 7)
      goto LABEL_3;
  }
  else if (v13 <= 7)
  {
LABEL_3:
    if (!v13)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_8;
  }
  if (v13 <= 0xD)
  {
LABEL_8:
    v14 = a1[1];
    *(double *)a7.i64 = *(double *)(a2 + 88) + *(double *)(a2 + 72) * *a1 + *(double *)(a2 + 80) * v14;
    v15 = *(double *)(a2 + 104);
    a6.i64[0] = *(_QWORD *)(a2 + 112);
    *(double *)a4.i64 = v14 * v15 + *(double *)a6.i64;
    v35 = *(double *)a7.i64;
    v36 = a4.i64[0];
    goto LABEL_9;
  }
  a7.i64[0] = (uint64_t)a1[1];
  *(double *)a4.i64 = *(double *)(a2 + 88) + *(double *)(a2 + 72) * *a1 + *(double *)(a2 + 80) * *(double *)a7.i64;
  a6.i64[0] = *(_QWORD *)(a2 + 112);
  v15 = *(double *)a7.i64 * *(double *)(a2 + 104) + *(double *)a6.i64;
  v35 = *(double *)a4.i64;
  v36 = *(_QWORD *)&v15;
  if (v13 == 14)
  {
LABEL_9:
    v30 = a3;
    v31 = (float64x2_t *)&v35;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    if (v13 <= 7)
      goto LABEL_10;
    goto LABEL_29;
  }
  v19 = (float64x2_t *)&v35;
  v30 = a3;
  v31 = (float64x2_t *)&v35;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  if (v13 != -1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = a3;
    goto LABEL_40;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *(_DWORD *)(a2 + 992);
  if (v13 <= 7)
  {
LABEL_10:
    if (v13 > 3)
    {
      v18 = v30;
      v17 = (double *)v31;
      if (v13 > 5)
      {
        if (v13 == 6)
          v25 = sub_20EB41C58((double *)a2, (uint64_t)v30, v31->f64, v32, (uint64_t)v33, v34);
        else
          v25 = sub_20EB306CC(a2, (uint64_t)v30, v31, v32, (unint64_t)v33, v34, *(double *)a4.i64, v15, a6, a7, *(double *)a8.i64, a9.f64[0], a10);
      }
      else if (v13 == 5)
      {
        v25 = sub_20EB2886C((uint64_t)v30, v31->f64, a2 + 168, 5);
      }
      else
      {
        if (!*(_BYTE *)(a2 + 468))
        {
          a4.i64[0] = sub_20EB27C0C(a2 + 204, (double *)(a2 + 168), 0x32uLL, a4, v15, a6, a7).u64[0];
          *(_BYTE *)(a2 + 468) = 1;
        }
        v25 = sub_20EA8D684((uint64_t)v18, (uint64_t)v17, (int64x2_t *)(a2 + 168), (float *)(a2 + 204), 0, 5, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
      }
    }
    else
    {
      if (v13 <= 1)
      {
        if (!v13)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v16 = v30;
        *v30 = *v31;
        v16[1].f64[0] = 1.0;
LABEL_48:
        if (a3[1].f64[0] < 0.00000001)
          return 0;
        v27 = *(_DWORD *)(a2 + 992);
        if (v27 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v27 = *(_DWORD *)(a2 + 992);
          if (v27 <= 7)
          {
LABEL_52:
            if (v27 <= 3)
            {
              if (v27 <= 1)
              {
                if (!v27)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                return 1;
              }
              if (v27 != 2)
              {
LABEL_84:
                v28 = a3[1].f64[0];
                if (v28 == 0.0)
                  v29 = 1.0;
                else
                  v29 = 1.0 / v28;
                *a3 = vmulq_n_f64(*a3, v29);
                a3[1].f64[0] = 1.0;
              }
              return 1;
            }
            goto LABEL_79;
          }
        }
        else if (v27 <= 7)
        {
          goto LABEL_52;
        }
        if (v27 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v27 = *(_DWORD *)(a2 + 992);
          if (v27 <= 7)
          {
            if (v27 <= 3)
            {
              if (!v27)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              return 1;
            }
LABEL_79:
            if (v27 == 4)
              goto LABEL_84;
            goto LABEL_80;
          }
          if (v27 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v27 = *(_DWORD *)(a2 + 992);
            if (v27 <= 7)
            {
              if (v27 <= 3)
              {
                if (!v27)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                return 1;
              }
LABEL_80:
              if (v27 == 5)
                goto LABEL_84;
              goto LABEL_81;
            }
            if (v27 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v27 = *(_DWORD *)(a2 + 992);
              if (v27 <= 7)
              {
                if (v27 <= 3)
                {
                  if (!v27)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  return 1;
                }
LABEL_81:
                if (v27 >= 7)
                  goto LABEL_84;
                return 1;
              }
              if (v27 == -1)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v27 = *(_DWORD *)(a2 + 992);
                if (v27 <= 7)
                {
                  if (!v27)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  return 1;
                }
              }
            }
          }
        }
        if (v27 <= 0xB)
        {
          if (v27 <= 8)
            goto LABEL_84;
          goto LABEL_61;
        }
        if (v27 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v27 = *(_DWORD *)(a2 + 992);
          if (v27 <= 7)
          {
            if (!v27)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            return 1;
          }
          if (v27 <= 0xB)
          {
LABEL_61:
            if (v27 == 9)
              goto LABEL_84;
            goto LABEL_62;
          }
          if (v27 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v27 = *(_DWORD *)(a2 + 992);
            if (v27 <= 7)
            {
              if (!v27)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              return 1;
            }
            if (v27 <= 0xB)
            {
LABEL_62:
              if (v27 == 10)
                goto LABEL_84;
              goto LABEL_63;
            }
            if (v27 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v27 = *(_DWORD *)(a2 + 992);
              if (v27 <= 7)
              {
                if (!v27)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                  abort();
                }
                return 1;
              }
              if (v27 <= 0xB)
              {
LABEL_63:
                if (v27 == 11)
                  goto LABEL_84;
                return 1;
              }
              if (v27 == -1)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v27 = *(_DWORD *)(a2 + 992);
                if (v27 <= 7)
                {
                  if (!v27)
                  {
                    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                    abort();
                  }
                  return 1;
                }
                if (v27 < 0xC)
                  return 1;
              }
            }
          }
        }
        if (v27 < 0xE)
          goto LABEL_84;
        if (v27 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v27 = *(_DWORD *)(a2 + 992);
          if (v27 <= 7)
          {
            if (!v27)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            return 1;
          }
          if (v27 < 0xC)
            return 1;
          if (v27 <= 0xD)
          {
            if (v27 == 13)
              goto LABEL_84;
            return 1;
          }
          if (v27 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v27 = *(_DWORD *)(a2 + 992);
            if (v27 <= 7)
            {
              if (!v27)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              return 1;
            }
            if (v27 < 0xE)
              return 1;
          }
        }
        if (v27 == 14)
          goto LABEL_84;
        if (v27 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v27 = *(_DWORD *)(a2 + 992);
          if (v27 <= 7)
          {
            if (!v27)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            return 1;
          }
        }
        if (v27 >= 0xF)
          goto LABEL_84;
        return 1;
      }
      if (v13 == 2)
        v25 = sub_20EA8D22C((uint64_t)&v30, a2);
      else
        v25 = sub_20EB23DF0((uint64_t)v30, v31->f64, (int64x2_t *)(a2 + 168), 20, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, a8, a9);
    }
    goto LABEL_47;
  }
LABEL_29:
  v23 = v30;
  if (v13 <= 0xB)
  {
    if (v13 > 9)
    {
      if (v13 == 10)
        v25 = sub_20EB24F38((uint64_t)v30, (uint64_t)v31, a2 + 168, (double *)(a2 + 280), 0x14u, (*(double *)a2 + *(double *)(a2 + 32)) * 0.5);
      else
        v25 = sub_20EB38E20(a2, (uint64_t)v30, v31, v32, v33, v34);
    }
    else if (v13 == 9)
    {
      v25 = sub_20EB35004(a2, (uint64_t)v30, v31, v32, (unint64_t)v33, v34, *(double *)a4.i64, v15, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
    }
    else
    {
      v26 = sqrt(v31->f64[0] * v31->f64[0] + v31->f64[1] * v31->f64[1]);
      v25 = sub_20EB24018((uint64_t)v30, v31->f64, (double *)(a2 + 168), 20, v26, v26, *(double *)a6.i64, (int32x4_t)a7, (int32x4_t)a8);
    }
    goto LABEL_47;
  }
  if (v13 <= 0xD)
  {
    if (v13 != 13)
    {
      v30->f64[0] = 0.0;
      v23->f64[1] = 0.0;
      v23[1].f64[0] = 0.0;
      return 0;
    }
    v25 = sub_20EB43734((double *)a2, (uint64_t)v30, (uint64_t)v31, v32, (uint64_t)v33, v34);
LABEL_47:
    if ((v25 & 1) != 0)
      goto LABEL_48;
    return 0;
  }
  v19 = v31;
  v22 = v32;
  v21 = v33;
  v20 = v34;
  if (v13 != 14)
  {
LABEL_40:
    v25 = sub_20EB3CED8(a2, (uint64_t)v23, v19, v22, v21, v20);
    goto LABEL_47;
  }
  result = sub_20EB253A0((uint64_t)v30, (uint64_t)v31, (double *)(a2 + 168), (double *)(a2 + 392), 0x14u, (*(double *)a2 + *(double *)(a2 + 32)) * 0.5);
  if ((_DWORD)result)
    goto LABEL_48;
  return result;
}

uint64_t sub_20F1697F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *__p;
  __int128 v6;

  __p = operator new(0x28uLL);
  v6 = xmmword_2102DCA10;
  strcpy((char *)__p, "VisualInertialNavigation parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  sub_20F0ECB80(a1, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F115FCC(a1 + 632, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F1698BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20E869298((uint64_t)va);
  sub_20E869298(v2);
  _Unwind_Resume(a1);
}

void sub_20F1698E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F1698E0);
}

uint64_t sub_20F169904(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  char *v15;
  char *v16;
  void **v17;
  char v18;
  __int128 v19;
  void *v20;
  size_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char **v38;
  _BYTE *v39;
  unint64_t v40;
  char *v41;
  void *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void **v57;
  char *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  char *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void **v72;
  void **v73;
  uint64_t v74;
  void **v75;
  __int128 v76;
  unint64_t v77;

  sub_20EE81B20(a1);
  v7 = (_QWORD *)(v6 + 736);
  *(_QWORD *)(v6 + 832) = 0;
  *(_OWORD *)(v6 + 800) = 0u;
  *(_OWORD *)(v6 + 816) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_QWORD *)(v6 + 736) = 0;
  *(_QWORD *)(v6 + 752) = 0;
  *(_QWORD *)(v6 + 744) = 0;
  *(_BYTE *)(v6 + 760) = 0;
  v8 = operator new(0x148uLL);
  *(_QWORD *)(a1 + 816) = v8;
  *(_QWORD *)(a1 + 832) = (char *)v8 + 328;
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[16] = 0u;
  v8[17] = 0u;
  *(_DWORD *)v8 = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  v76 = _Q0;
  *(_OWORD *)((char *)v8 + 8) = _Q0;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  *((_QWORD *)v8 + 30) = 0;
  *((_WORD *)v8 + 124) = 514;
  v8[16] = 0u;
  v8[17] = 0u;
  *((_QWORD *)v8 + 36) = 0;
  *((_QWORD *)v8 + 37) = 0x3FF0000000000000;
  *((_BYTE *)v8 + 288) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v8[19] = _Q0;
  *((_QWORD *)v8 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 824) = (char *)v8 + 328;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  v15 = (char *)operator new(0xB40uLL);
  *(_QWORD *)(a1 + 1248) = v15;
  v16 = v15 + 2880;
  *(_QWORD *)(a1 + 1264) = v15 + 2880;
  bzero(v15, 0xB40uLL);
  *(_QWORD *)(a1 + 1256) = v16;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = xmmword_2103852B0;
  *(_OWORD *)(a1 + 1312) = xmmword_2103852C0;
  *(_OWORD *)(a1 + 1328) = xmmword_2103852D0;
  *(_DWORD *)(a1 + 1344) = 256;
  *(_QWORD *)(a1 + 1352) = 0x3FC999999999999ALL;
  *(_OWORD *)(a1 + 1360) = xmmword_21039D4F0;
  *(_QWORD *)(a1 + 1376) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1384) = xmmword_210385070;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1404) = 1;
  *(_OWORD *)(a1 + 1408) = xmmword_210385080;
  *(_QWORD *)(a1 + 1424) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 1432) = 0;
  *(_OWORD *)(a1 + 1440) = xmmword_210315730;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1464) = 0x3FB70A3D70A3D70ALL;
  *(_QWORD *)(a1 + 1472) = 0x4051800000000000;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_OWORD *)(a1 + 1488) = xmmword_210385090;
  *(_OWORD *)(a1 + 1504) = xmmword_2103850A0;
  *(_QWORD *)(a1 + 1520) = 0x3FF199999999999ALL;
  *(_OWORD *)(a1 + 1528) = xmmword_210384FF0;
  *(_OWORD *)(a1 + 1544) = xmmword_2102E3FA0;
  *(_OWORD *)(a1 + 1560) = xmmword_210385300;
  *(_QWORD *)(a1 + 1576) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1584) = xmmword_210385070;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_DWORD *)(a1 + 1604) = 1;
  *(_QWORD *)(a1 + 1608) = 0x4018000000000000;
  *(_OWORD *)(a1 + 1616) = xmmword_210384F70;
  *(_BYTE *)(a1 + 1632) = 0;
  *(_QWORD *)(a1 + 1640) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1648) = 0xFFEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1656) = 0;
  *(_OWORD *)(a1 + 1664) = xmmword_210384E70;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1688) = 0x3F80624DD2F1A9FCLL;
  *(int64x2_t *)(a1 + 1696) = vdupq_n_s64(0x3FE6666666666666uLL);
  *(_OWORD *)(a1 + 1712) = xmmword_210385310;
  *(_BYTE *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1732) = 0xF0000000ALL;
  *(_WORD *)(a1 + 1744) = 0;
  *(_QWORD *)(a1 + 1748) = 0x6400000001;
  *(_QWORD *)(a1 + 1760) = 0x3FB70A3D70A3D70ALL;
  *(_DWORD *)(a1 + 1768) = 11;
  *(_OWORD *)(a1 + 1776) = xmmword_210385320;
  *(_OWORD *)(a1 + 1792) = xmmword_210385330;
  *(_QWORD *)(a1 + 1808) = 0x4024000000000000;
  *(_BYTE *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1824) = xmmword_210385340;
  *(_DWORD *)(a1 + 1840) = 35;
  *(_DWORD *)(a1 + 1848) = 16843008;
  *(_DWORD *)(a1 + 1876) = 0;
  *(_QWORD *)(a1 + 1868) = 0;
  *(_OWORD *)(a1 + 1852) = 0u;
  *(_BYTE *)(a1 + 1880) = 1;
  *(_QWORD *)(a1 + 1884) = 0xF0000001ELL;
  *(_BYTE *)(a1 + 1892) = 0;
  *(_QWORD *)(a1 + 1896) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 1904) = 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1920) = 0;
  *(_BYTE *)(a1 + 1928) = 0;
  *(_WORD *)(a1 + 1936) = 1;
  *(_QWORD *)(a1 + 1944) = 30;
  *(_QWORD *)(a1 + 1952) = 2;
  *(_QWORD *)(a1 + 1960) = 0x3FC999999999999ALL;
  *(_OWORD *)(a1 + 1968) = xmmword_21039D500;
  *(_QWORD *)(a1 + 1984) = 0x3F6C60BF64B487DALL;
  *(_QWORD *)(a1 + 1992) = 0x400000003F4CCCCDLL;
  *(_QWORD *)(a1 + 2000) = 0x3FCAE147AE147AE1;
  *(_BYTE *)(a1 + 2008) = 0;
  *(_DWORD *)(a1 + 2012) = 200;
  *(_OWORD *)(a1 + 2016) = xmmword_21039D510;
  *(_BYTE *)(a1 + 2032) = 1;
  *(_DWORD *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2160) = v76;
  *(_QWORD *)(a1 + 2176) = -1;
  *(_QWORD *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_QWORD *)(a1 + 2214) = 0;
  *(_QWORD *)(a1 + 2240) = 0;
  *(_QWORD *)(a1 + 2245) = 0;
  *(_QWORD *)(a1 + 2224) = 0;
  *(_QWORD *)(a1 + 2232) = 0;
  *(_BYTE *)(a1 + 2264) = 1;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_DWORD *)(a1 + 2312) = 1065353216;
  *(_DWORD *)(a1 + 2320) = 0;
  *(_DWORD *)(a1 + 2344) = 0;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_QWORD *)(a1 + 2336) = 0;
  *(_DWORD *)(a1 + 2352) = 0;
  *(_DWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(_OWORD *)(a1 + 2384) = 0u;
  *(_DWORD *)(a1 + 2416) = 1065353216;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_DWORD *)(a1 + 2456) = 1065353216;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2480) = 0;
  *(_QWORD *)(a1 + 2472) = a1 + 2480;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(_OWORD *)(a1 + 2496) = 0u;
  *(_DWORD *)(a1 + 2528) = 1065353216;
  *(_BYTE *)(a1 + 2536) = 1;
  *(_DWORD *)(a1 + 2540) = 0;
  *(_WORD *)(a1 + 2544) = 0;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_BYTE *)(a1 + 2560) = 0;
  *(_BYTE *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  v75 = (void **)(a1 + 2568);
  *(_OWORD *)(a1 + 2568) = 0u;
  memcpy((void *)a1, (const void *)a2, 0x230uLL);
  if (a1 != a2)
  {
    v17 = (void **)(a1 + 560);
    v18 = *(_BYTE *)(a2 + 583);
    if (*(char *)(a1 + 583) < 0)
    {
      if (v18 >= 0)
        v20 = (void *)(a2 + 560);
      else
        v20 = *(void **)(a2 + 560);
      if (v18 >= 0)
        v21 = *(unsigned __int8 *)(a2 + 583);
      else
        v21 = *(_QWORD *)(a2 + 568);
      sub_20E867CBC(v17, v20, v21);
    }
    else if ((*(_BYTE *)(a2 + 583) & 0x80) != 0)
    {
      sub_20E867BF8(v17, *(void **)(a2 + 560), *(_QWORD *)(a2 + 568));
    }
    else
    {
      v19 = *(_OWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_OWORD *)v17 = v19;
    }
  }
  v22 = *(_OWORD *)(a2 + 584);
  v23 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v23;
  *(_OWORD *)(a1 + 584) = v22;
  v25 = *(_OWORD *)(a2 + 696);
  v24 = *(_OWORD *)(a2 + 712);
  v26 = *(_OWORD *)(a2 + 680);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_OWORD *)(a1 + 696) = v25;
  *(_OWORD *)(a1 + 712) = v24;
  *(_OWORD *)(a1 + 680) = v26;
  v27 = *(_OWORD *)(a2 + 632);
  v28 = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 664) = v28;
  *(_OWORD *)(a1 + 632) = v27;
  if (v7 != a3)
  {
    v29 = (char *)*a3;
    v30 = (char *)a3[1];
    v31 = (int64_t)&v30[-*a3];
    v32 = v31 >> 3;
    v33 = *(_QWORD *)(a1 + 752);
    v34 = *(char **)(a1 + 736);
    if (v31 >> 3 > (unint64_t)((v33 - (uint64_t)v34) >> 3))
    {
      if (v34)
      {
        *(_QWORD *)(a1 + 744) = v34;
        operator delete(v34);
        v33 = 0;
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      if (v31 < 0)
        goto LABEL_83;
      v35 = v33 >> 2;
      if (v33 >> 2 <= v32)
        v35 = v31 >> 3;
      v36 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v35;
      if (v36 >> 61)
LABEL_83:
        sub_20E867F44();
      v37 = (char *)operator new(8 * v36);
      v34 = v37;
      *(_QWORD *)(a1 + 736) = v37;
      v38 = (char **)(a1 + 744);
      *(_QWORD *)(a1 + 744) = v37;
      *(_QWORD *)(a1 + 752) = &v37[8 * v36];
      if (v30 != v29)
        memcpy(v37, v29, v31);
      goto LABEL_34;
    }
    v38 = (char **)(a1 + 744);
    v39 = *(_BYTE **)(a1 + 744);
    v40 = (v39 - v34) >> 3;
    if (v40 >= v32)
    {
      if (v30 == v29)
      {
LABEL_34:
        *v38 = &v34[v31];
        goto LABEL_35;
      }
      v42 = *(void **)(a1 + 736);
      v43 = v29;
    }
    else
    {
      v41 = &v29[8 * v40];
      if (v39 != v34)
      {
        memmove(*(void **)(a1 + 736), v29, v39 - v34);
        v34 = *v38;
      }
      v31 = v30 - v41;
      if (v30 == v41)
        goto LABEL_34;
      v42 = v34;
      v43 = v41;
    }
    memmove(v42, v43, v31);
    goto LABEL_34;
  }
LABEL_35:
  v44 = *(_QWORD *)(a1 + 32);
  v45 = *(_QWORD *)(a1 + 2576);
  v46 = *(_QWORD *)(a1 + 2568);
  if (v44 == (v45 - v46) >> 5)
    return a1;
  if (v44)
  {
    if (v44 >> 59)
      sub_20E867F44();
    v47 = (void **)operator new(32 * v44);
    bzero(v47, 32 * v44);
    v48 = 0;
    v73 = v47;
    v74 = 32 * v44;
    v72 = &v47[4 * v44];
    v49 = *(_QWORD *)(a1 + 2608);
    if (v49 >= v44)
      v50 = v44;
    else
      v50 = *(_QWORD *)(a1 + 2608);
    v77 = v50;
    v51 = v49 == 0;
    while (1)
    {
      if (v51)
      {
        if (v49 <= v44)
          goto LABEL_66;
      }
      else if (v49 > v44 && v48 == v77)
      {
LABEL_66:
        v64 = (char *)*v75;
        if (*v75)
        {
          v65 = *(char **)(a1 + 2576);
          v66 = *v75;
          if (v65 != v64)
          {
            do
            {
              v68 = *((_QWORD *)v65 - 3);
              if (v68)
              {
                v69 = *((_QWORD *)v65 - 2);
                v67 = (void *)*((_QWORD *)v65 - 3);
                if (v69 != v68)
                {
                  do
                  {
                    v70 = *(void **)(v69 - 24);
                    if (v70)
                    {
                      *(_QWORD *)(v69 - 16) = v70;
                      operator delete(v70);
                    }
                    v69 -= 32;
                  }
                  while (v69 != v68);
                  v67 = (void *)*((_QWORD *)v65 - 3);
                }
                *((_QWORD *)v65 - 2) = v68;
                operator delete(v67);
              }
              v65 -= 32;
            }
            while (v65 != v64);
            v66 = *v75;
          }
          *(_QWORD *)(a1 + 2576) = v64;
          operator delete(v66);
          *v75 = 0;
          *(_QWORD *)(a1 + 2576) = 0;
          *(_QWORD *)(a1 + 2584) = 0;
        }
        *(_QWORD *)(a1 + 2568) = v73;
        *(_QWORD *)(a1 + 2576) = v72;
        *(_QWORD *)(a1 + 2584) = v72;
        *(_QWORD *)(a1 + 2608) = v77;
        *(_QWORD *)(a1 + 2592) = 0;
        *(_QWORD *)(a1 + 2600) = v77 % (v74 >> 5);
        return a1;
      }
      v54 = *(_QWORD *)(a1 + 2568);
      v55 = (*(_QWORD *)(a1 + 2592) + v48) % (unint64_t)((*(_QWORD *)(a1 + 2576) - v54) >> 5);
      *(_DWORD *)v47 = *(_DWORD *)(v54 + 32 * v55);
      v57 = v47 + 1;
      v56 = (char *)v47[1];
      if (v56)
      {
        v58 = (char *)v47[2];
        v52 = v47[1];
        if (v58 != v56)
        {
          do
          {
            v59 = (void *)*((_QWORD *)v58 - 3);
            if (v59)
            {
              *((_QWORD *)v58 - 2) = v59;
              operator delete(v59);
            }
            v58 -= 32;
          }
          while (v58 != v56);
          v52 = *v57;
        }
        v47[2] = v56;
        operator delete(v52);
        *v57 = 0;
        v47[2] = 0;
        v47[3] = 0;
      }
      v53 = v54 + 32 * v55;
      *(_OWORD *)(v47 + 1) = *(_OWORD *)(v53 + 8);
      v47[3] = *(void **)(v53 + 24);
      *(_QWORD *)(v53 + 8) = 0;
      *(_QWORD *)(v53 + 16) = 0;
      *(_QWORD *)(v53 + 24) = 0;
      v51 = ++v48 == *(_QWORD *)(a1 + 2608);
      v47 += 4;
    }
  }
  while (v45 != v46)
  {
    v61 = *(_QWORD *)(v45 - 24);
    if (v61)
    {
      v62 = *(_QWORD *)(v45 - 16);
      v60 = *(void **)(v45 - 24);
      if (v62 != v61)
      {
        do
        {
          v63 = *(void **)(v62 - 24);
          if (v63)
          {
            *(_QWORD *)(v62 - 16) = v63;
            operator delete(v63);
          }
          v62 -= 32;
        }
        while (v62 != v61);
        v60 = *(void **)(v45 - 24);
      }
      *(_QWORD *)(v45 - 16) = v61;
      operator delete(v60);
    }
    v45 -= 32;
  }
  *(_QWORD *)(a1 + 2576) = v46;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  return a1;
}

void sub_20F16A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v14;
  va_list va;

  va_start(va, a10);
  sub_20F16A36C((void **)va);
  sub_20F16A36C(a7);
  sub_20F16C880(v12);
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 744) = v14;
    operator delete(v14);
    if ((*(char *)(v10 + 583) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v10 + 583) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v10 + 560));
  _Unwind_Resume(a1);
}

void **sub_20F16A36C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 3);
        if (v6)
        {
          v7 = *((_QWORD *)v3 - 2);
          v5 = (void *)*((_QWORD *)v3 - 3);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F16A418(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 2568);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 2576);
    v4 = *(void **)(a1 + 2568);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v3 - 16);
          v5 = *(void **)(v3 - 24);
          if (v7 != v6)
          {
            do
            {
              v8 = *(void **)(v7 - 24);
              if (v8)
              {
                *(_QWORD *)(v7 - 16) = v8;
                operator delete(v8);
              }
              v7 -= 32;
            }
            while (v7 != v6);
            v5 = *(void **)(v3 - 24);
          }
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 2568);
    }
    *(_QWORD *)(a1 + 2576) = v2;
    operator delete(v4);
  }
  sub_20F16C880(a1 + 760);
  v9 = *(void **)(a1 + 736);
  if (v9)
  {
    *(_QWORD *)(a1 + 744) = v9;
    operator delete(v9);
  }
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  return a1;
}

void sub_20F16A504(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A622E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A622E8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A622E0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A622E8);
  }
  *a1 = qword_254A622E0;
}

void sub_20F16A5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A622E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A622E8);
  _Unwind_Resume(a1);
}

void sub_20F16A5F8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  unint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *p_p;
  NSObject *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  char *v72;
  uint64_t v73;
  char **v74;
  char *v75;
  char *v76;
  void *v77;
  void *v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char **v88;
  char *v89;
  char *v90;
  char *v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  char **v109;
  char *v110;
  int v111;
  _BYTE *v112;
  _BYTE *v113;
  int64_t v114;
  char *v115;
  char *v116;
  char **v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  __int128 v134;
  void *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  size_t v141;
  const char *v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  const char *v145;
  size_t v146;
  _BYTE *v147;
  unint64_t v148;
  const char *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  int v160;
  size_t v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::chrono::steady_clock::time_point v197;
  std::chrono::steady_clock::time_point v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char **v205;
  uint64_t *__src;
  void *__srca;
  uint64_t *v208;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v210;
  int v211;
  const char *v212;
  int v213;
  const char *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE object[40];
  void *__p;
  size_t v222;
  unint64_t v223;
  char v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  v6 = a2[1];
  if (*a2 == v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualInertialNavigationFG.cpp", 139, (uint64_t)"!imu.empty()", 12, (uint64_t)"There were no IMU measurements. Data problem?", 45, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_258;
    }
    v6 = a2[1];
  }
  v201 = a1;
  if (*(double *)(*(_QWORD *)(*a3 + 8) + 8) + *(double *)(*(_QWORD *)(*a3 + 8) + 16) != *(double *)(v6 - 56)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualInertialNavigationFG.cpp", 142, (uint64_t)"ExactlyEqual( camera_feature_samples.front().feature_samples.front().timestamp_info.timestamp(), imu.back().timestamp)", 118, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_258:
    abort();
  }
  sub_20F16A504(&v217);
  v7 = a1;
  if (**(int **)(v217 + 56) > 3)
    goto LABEL_96;
  v8 = *(unsigned __int8 *)(v217 + 72);
  v9 = sub_20E8C31DC(v217, "OSLogSurrogateAppender", 1, 0);
  v10 = v9;
  if (!v8 && v9 == 0)
    goto LABEL_96;
  v208 = &v217;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v210 = std::chrono::system_clock::now().__d_.__rep_;
  v211 = 3;
  v212 = "unknown file";
  v213 = 144;
  v215 = 0;
  v216 = 0;
  v214 = "unknown function";
  v202 = v217;
  if (*(char *)(v217 + 39) < 0)
  {
    v13 = *(const char **)(v217 + 16);
    v12 = *(_QWORD *)(v217 + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v217 + 39);
    v13 = (const char *)(v217 + 16);
  }
  v200 = v217 + 16;
  v204 = a2[1];
  __src = (uint64_t *)*a2;
  v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8;
  else
    v15 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8[23];
  else
    v16 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v15, v13);
  v17 = &object[8];
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v18 = v10;
    v19 = v13;
    v20 = v8;
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    v17 = operator new(v21 + 1);
    *(_QWORD *)&object[16] = v16;
    *(_QWORD *)&object[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v17;
    v8 = v20;
    v13 = v19;
    v10 = v18;
    goto LABEL_28;
  }
  object[31] = v16;
  if (v16)
LABEL_28:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  object[32] = 1;
  p_p = &__p;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v7 = v201;
  if (v12 >= 0x17)
  {
    v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v26 = v12 | 7;
    v27 = v26 + 1;
    p_p = operator new(v26 + 1);
    v222 = v12;
    v223 = v27 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v223) = v12;
    if (!v12)
    {
      LOBYTE(__p) = 0;
      v224 = 1;
      v24 = *(NSObject **)object;
      if ((SHIBYTE(v223) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_39;
    }
  }
  memmove(p_p, v13, v12);
  *((_BYTE *)p_p + v12) = 0;
  v224 = 1;
  v24 = *(NSObject **)object;
  if ((SHIBYTE(v223) & 0x80000000) == 0)
  {
LABEL_33:
    v25 = __src;
    if (!object[32])
      goto LABEL_42;
LABEL_40:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_42;
  }
LABEL_39:
  operator delete(__p);
  v25 = __src;
  if (object[32])
    goto LABEL_40;
LABEL_42:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v28 = 0x6DB6DB6DB6DB6DB7 * ((v204 - (uint64_t)v25) >> 3);
  if (v10 && *(_QWORD *)(v10 + 24))
  {
    v29 = _os_log_pack_size();
    v30 = (std::__shared_weak_count_vtbl *)operator new(v29, (std::align_val_t)8uLL);
    v31 = (std::__shared_weak_count *)operator new();
    v32 = v31;
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = v30;
    *(_QWORD *)object = v30;
    *(_QWORD *)&object[8] = v30;
    *(_QWORD *)&object[16] = v31;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
    *(_OWORD *)&object[24] = 0uLL;
    __p = 0;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v32);
    }
    v36 = *(_QWORD *)object;
    v37 = _os_log_pack_fill();
    v38 = *__src;
    *(_DWORD *)v37 = 134218240;
    *(_QWORD *)(v37 + 4) = v28;
    *(_WORD *)(v37 + 12) = 2048;
    *(_QWORD *)(v37 + 14) = v38;
    v39 = operator new();
    v40 = *(unsigned __int8 *)(v202 + 39);
    v41 = v200;
    if ((v40 & 0x80u) != 0)
    {
      v41 = *(_QWORD *)(v202 + 16);
      v40 = *(_QWORD *)(v202 + 24);
    }
    *(_QWORD *)v39 = v36;
    *(_OWORD *)(v39 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v39 + 24) = *(_OWORD *)&object[24];
    *(_OWORD *)&object[24] = 0uLL;
    *(_QWORD *)(v39 + 40) = v41;
    *(_QWORD *)(v39 + 48) = v40;
    *(_BYTE *)(v39 + 56) = 1;
    v218 = 0;
    v219 = v39;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v219);
    v42 = v219;
    v219 = 0;
    if (v42)
    {
      v43 = *(std::__shared_weak_count **)(v42 + 32);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = *(std::__shared_weak_count **)(v42 + 16);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
      v49 = v218;
      v218 = 0;
      if (v49)
      {
        v50 = *(std::__shared_weak_count **)(v49 + 32);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(std::__shared_weak_count **)(v49 + 16);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
      }
    }
    v56 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v57 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v60 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    v62 = *v25;
    *(_DWORD *)object = 134218240;
    *(_QWORD *)&object[4] = 0x6DB6DB6DB6DB6DB7 * ((v204 - (uint64_t)v25) >> 3);
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v62;
    v63 = (void *)_os_log_send_and_compose_impl();
    if (v63)
      free(v63);
  }
  if (v8)
  {
    sub_20E8C003C((uint64_t)&v208, "Sending a frame to pose tracker with %zu IMU samples at %f", 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3), *(double *)*a2);
    sub_20E863570((uint64_t)&v208);
  }
  sub_20E863570((uint64_t)&v208);
  v64 = v216;
  if (v216)
  {
    v65 = (unint64_t *)&v216->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
LABEL_96:
  if (*((_BYTE *)v7 + 2536))
    goto LABEL_110;
  v67 = v7[325];
  if (v67)
  {
    v68 = v7[321];
    v69 = v67 - 1;
    v70 = 32 * (v67 - 1);
    *(_DWORD *)(v68 + v70) = 0;
    v71 = (void **)(v68 + v70 + 8);
    v72 = (char *)*v71;
    if (*v71)
      goto LABEL_99;
LABEL_108:
    *v71 = 0;
    v71[1] = 0;
    v71[2] = 0;
    if (v67)
      goto LABEL_109;
    goto LABEL_106;
  }
  v68 = v7[321];
  v69 = ((v7[322] - v68) >> 5) - 1;
  *(_DWORD *)(v68 + 32 * v69) = 0;
  v71 = (void **)(v68 + 32 * v69 + 8);
  v72 = (char *)*v71;
  if (!*v71)
    goto LABEL_108;
LABEL_99:
  v73 = v68 + 32 * v69;
  v76 = *(char **)(v73 + 16);
  v74 = (char **)(v73 + 16);
  v75 = v76;
  v77 = v72;
  if (v76 != v72)
  {
    do
    {
      v78 = (void *)*((_QWORD *)v75 - 3);
      if (v78)
      {
        *((_QWORD *)v75 - 2) = v78;
        operator delete(v78);
      }
      v75 -= 32;
    }
    while (v75 != v72);
    v77 = *v71;
  }
  *v74 = v72;
  operator delete(v77);
  *v71 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v67 = v7[325];
  *v71 = 0;
  v71[1] = 0;
  v71[2] = 0;
  if (v67)
    goto LABEL_109;
LABEL_106:
  v67 = (uint64_t)(v7[322] - v7[321]) >> 5;
LABEL_109:
  v7[325] = v67 - 1;
  --v7[326];
LABEL_110:
  v198.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20F0FC378((uint64_t)(v7 + 95), (unsigned int ***)v7 + 92, a3, a2);
  v197.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v79 = **(_DWORD **)(*a3 + 8);
  v80 = v201;
  v81 = v201[325];
  v82 = v201[321];
  v83 = v82 + 32 * v81;
  v86 = *(char **)(v83 + 8);
  v84 = v83 + 8;
  v85 = v86;
  *(_DWORD *)(v82 + 32 * v81) = 0;
  if (v86)
  {
    v87 = v82 + 32 * v81;
    v90 = *(char **)(v87 + 16);
    v88 = (char **)(v87 + 16);
    v89 = v90;
    v91 = v85;
    if (v90 != v85)
    {
      do
      {
        v92 = (void *)*((_QWORD *)v89 - 3);
        if (v92)
        {
          *((_QWORD *)v89 - 2) = v92;
          operator delete(v92);
        }
        v89 -= 32;
      }
      while (v89 != v85);
      v91 = *(char **)v84;
    }
    *v88 = v85;
    operator delete(v91);
    *(_QWORD *)(v84 + 8) = 0;
    *(_QWORD *)(v84 + 16) = 0;
    v81 = v201[325];
  }
  *(_QWORD *)v84 = 0;
  *(_QWORD *)(v84 + 8) = 0;
  *(_QWORD *)(v84 + 16) = 0;
  v93 = v201[321];
  v94 = (v201[322] - v93) >> 5;
  v95 = v81 + 1;
  if (v95 >= v94)
    v96 = (v201[322] - v93) >> 5;
  else
    v96 = 0;
  v97 = v95 - v96;
  v201[325] = v97;
  v98 = v201[326];
  if (v98 != v94)
  {
    v201[326] = v98 + 1;
    if (v97)
      goto LABEL_125;
LABEL_128:
    *(_DWORD *)(v201[321] + 32 * ((uint64_t)(v201[322] - v201[321]) >> 5) - 32) = v79;
    v101 = *a3;
    v100 = a3[1];
    if (*a3 == v100)
      goto LABEL_162;
    goto LABEL_129;
  }
  v99 = v201[324] + 1;
  if (v99 < v94)
    v94 = 0;
  v201[324] = v99 - v94;
  if (!v97)
    goto LABEL_128;
LABEL_125:
  *(_DWORD *)(v201[321] + 32 * v97 - 32) = v79;
  v101 = *a3;
  v100 = a3[1];
  if (*a3 == v100)
    goto LABEL_162;
LABEL_129:
  v199 = v100;
  do
  {
    v104 = v80[325];
    v105 = v80[321];
    if (!v104)
      v104 = (v80[322] - v105) >> 5;
    v106 = (_QWORD *)(v105 + 32 * (v104 - 1));
    v108 = v106 + 3;
    v107 = v106[3];
    v109 = (char **)(v106 + 2);
    v110 = (char *)v106[2];
    if ((unint64_t)v110 >= v107)
    {
      v118 = (char *)v106[1];
      v117 = (char **)(v106 + 1);
      v116 = v118;
      v119 = (v110 - v118) >> 5;
      v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 59)
        sub_20E867F44();
      v121 = *(_DWORD *)v101;
      v122 = *(_QWORD *)(v101 + 64);
      v205 = (char **)(v108 - 1);
      __srca = *(void **)(v101 + 56);
      v123 = v107 - (_QWORD)v116;
      if (v123 >> 4 > v120)
        v120 = v123 >> 4;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFE0)
        v124 = 0x7FFFFFFFFFFFFFFLL;
      else
        v124 = v120;
      *(_QWORD *)&object[32] = v108;
      if (v124)
      {
        if (v124 >> 59)
          sub_20E877A38();
        v125 = (char *)operator new(32 * v124);
      }
      else
      {
        v125 = 0;
      }
      v126 = &v125[32 * v119];
      *(_QWORD *)object = v125;
      *(_QWORD *)&object[8] = v126;
      *(_QWORD *)&object[16] = v126;
      *(_QWORD *)&object[24] = &v125[32 * v124];
      v203 = *(_QWORD *)&object[24];
      *(_DWORD *)v126 = v121;
      *((_QWORD *)v126 + 1) = 0;
      *((_QWORD *)v126 + 2) = 0;
      *((_QWORD *)v126 + 3) = 0;
      v127 = v122 - (_QWORD)__srca;
      if (v127)
      {
        if (0x8E38E38E38E38E39 * (v127 >> 3) > 0x38E38E38E38E38ELL)
          sub_20EB849AC();
        v128 = (char *)operator new(v127);
        *((_QWORD *)v126 + 1) = v128;
        v129 = &v128[8 * (v127 >> 3)];
        *((_QWORD *)v126 + 3) = v129;
        memcpy(v128, __srca, v127);
        *((_QWORD *)v126 + 2) = v129;
      }
      v103 = v126 + 32;
      *(_QWORD *)&object[16] = v126 + 32;
      if (v110 == v116)
      {
        *v117 = v126;
        v109 = (char **)(v108 - 1);
        *v205 = v103;
        *v108 = v203;
        v80 = v201;
      }
      else
      {
        v130 = 0;
        v80 = v201;
        v109 = (char **)(v108 - 1);
        do
        {
          v131 = &v126[v130];
          v132 = &v110[v130];
          *((_DWORD *)v131 - 8) = *(_DWORD *)&v110[v130 - 32];
          *((_QWORD *)v131 - 2) = 0;
          *((_QWORD *)v131 - 1) = 0;
          *(_OWORD *)(v131 - 24) = *(_OWORD *)&v110[v130 - 24];
          *((_QWORD *)v131 - 1) = *(_QWORD *)&v110[v130 - 8];
          *((_QWORD *)v132 - 3) = 0;
          *((_QWORD *)v132 - 2) = 0;
          *((_QWORD *)v132 - 1) = 0;
          v130 -= 32;
        }
        while (&v110[v130] != v116);
        v110 = *v117;
        v133 = *v205;
        v134 = *(_OWORD *)&object[16];
        *v117 = &v126[v130];
        *(_OWORD *)v205 = v134;
        v103 = (char *)v134;
        while (v133 != v110)
        {
          v135 = (void *)*((_QWORD *)v133 - 3);
          if (v135)
          {
            *((_QWORD *)v133 - 2) = v135;
            operator delete(v135);
          }
          v133 -= 32;
        }
      }
      v100 = v199;
      if (v110)
        operator delete(v110);
    }
    else
    {
      v111 = *(_DWORD *)v101;
      *((_QWORD *)v110 + 1) = 0;
      *(_DWORD *)v110 = v111;
      *((_QWORD *)v110 + 2) = 0;
      *((_QWORD *)v110 + 3) = 0;
      v113 = *(_BYTE **)(v101 + 56);
      v112 = *(_BYTE **)(v101 + 64);
      v114 = v112 - v113;
      if (v112 != v113)
      {
        if (0x8E38E38E38E38E39 * (v114 >> 3) > 0x38E38E38E38E38ELL)
          sub_20EB849AC();
        v115 = (char *)operator new(v114);
        *((_QWORD *)v110 + 1) = v115;
        *((_QWORD *)v110 + 2) = v115;
        v102 = &v115[8 * (v114 >> 3)];
        *((_QWORD *)v110 + 3) = v102;
        memcpy(v115, v113, v114);
        *((_QWORD *)v110 + 2) = v102;
        v109 = (char **)(v106 + 2);
      }
      v103 = v110 + 32;
      *v109 = v110 + 32;
    }
    *v109 = v103;
    v101 += 104;
  }
  while (v101 != v100);
LABEL_162:
  sub_20F16A504(&v217);
  if (**(int **)(v217 + 56) > 3)
    return;
  v136 = *(unsigned __int8 *)(v217 + 72);
  v137 = sub_20E8C31DC(v217, "OSLogSurrogateAppender", 1, 0);
  v138 = v137;
  if (!v136 && !v137)
    return;
  v208 = &v217;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v210 = std::chrono::system_clock::now().__d_.__rep_;
  v211 = 3;
  v212 = "unknown file";
  v213 = 170;
  v215 = 0;
  v216 = 0;
  v214 = "unknown function";
  v139 = *v208;
  v140 = *v208 + 16;
  if (*(char *)(*v208 + 39) < 0)
  {
    v142 = *(const char **)(v139 + 16);
    v141 = *(_QWORD *)(v139 + 24);
    v144 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v144 & 1) != 0)
      goto LABEL_169;
  }
  else
  {
    v141 = *(unsigned __int8 *)(*v208 + 39);
    v142 = (const char *)(*v208 + 16);
    v143 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v143 & 1) != 0)
      goto LABEL_169;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_169:
  if (byte_254A4A4F8[23] >= 0)
    v145 = byte_254A4A4F8;
  else
    v145 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v146 = byte_254A4A4F8[23];
  else
    v146 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v145, v142);
  v147 = &object[8];
  if (v146 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v146 >= 0x17)
  {
    v148 = v138;
    v149 = v142;
    v150 = v139;
    v151 = v136;
    v152 = v140;
    v153 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v146 | 7) != 0x17)
      v153 = v146 | 7;
    v154 = v153 + 1;
    v147 = operator new(v153 + 1);
    *(_QWORD *)&object[16] = v146;
    *(_QWORD *)&object[24] = v154 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v147;
    v140 = v152;
    v136 = v151;
    v139 = v150;
    v142 = v149;
    v138 = v148;
    goto LABEL_182;
  }
  object[31] = v146;
  if (v146)
LABEL_182:
    memmove(v147, v145, v146);
  v147[v146] = 0;
  object[32] = 1;
  v155 = &__p;
  if (v141 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v141 >= 0x17)
  {
    v157 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v141 | 7) != 0x17)
      v157 = v141 | 7;
    v158 = v157 + 1;
    v155 = operator new(v157 + 1);
    v222 = v141;
    v223 = v158 | 0x8000000000000000;
    __p = v155;
  }
  else
  {
    HIBYTE(v223) = v141;
    if (!v141)
    {
      LOBYTE(__p) = 0;
      v224 = 1;
      v156 = *(NSObject **)object;
      if ((SHIBYTE(v223) & 0x80000000) == 0)
        goto LABEL_187;
      goto LABEL_193;
    }
  }
  memmove(v155, v142, v141);
  *((_BYTE *)v155 + v141) = 0;
  v224 = 1;
  v156 = *(NSObject **)object;
  if ((SHIBYTE(v223) & 0x80000000) == 0)
  {
LABEL_187:
    if (!object[32])
      goto LABEL_196;
LABEL_194:
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_196;
  }
LABEL_193:
  operator delete(__p);
  if (object[32])
    goto LABEL_194;
LABEL_196:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v159 = (double)(v197.__d_.__rep_ - v198.__d_.__rep_) / 1000000000.0 * 1000.0;
  if (v138 && *(_QWORD *)(v138 + 24))
  {
    v160 = v136;
    v161 = _os_log_pack_size();
    v162 = (std::__shared_weak_count_vtbl *)operator new(v161, (std::align_val_t)8uLL);
    v163 = (std::__shared_weak_count *)operator new();
    v164 = v163;
    v163->__shared_owners_ = 0;
    v165 = (unint64_t *)&v163->__shared_owners_;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v162;
    *(_QWORD *)object = v162;
    *(_QWORD *)&object[8] = v162;
    *(_QWORD *)&object[16] = v163;
    do
      v166 = __ldxr(v165);
    while (__stxr(v166 + 1, v165));
    *(_OWORD *)&object[24] = 0uLL;
    __p = 0;
    do
      v167 = __ldaxr(v165);
    while (__stlxr(v167 - 1, v165));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v164);
    }
    v168 = *(_QWORD *)object;
    v169 = _os_log_pack_fill();
    *(_DWORD *)v169 = 134217984;
    *(double *)(v169 + 4) = v159;
    v170 = operator new();
    v171 = *(unsigned __int8 *)(v139 + 39);
    if ((v171 & 0x80u) == 0)
      v172 = v140;
    else
      v172 = *(_QWORD *)(v139 + 16);
    if ((v171 & 0x80u) != 0)
      v171 = *(_QWORD *)(v139 + 24);
    *(_QWORD *)v170 = v168;
    *(_OWORD *)(v170 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v170 + 24) = *(_OWORD *)&object[24];
    *(_OWORD *)&object[24] = 0uLL;
    *(_QWORD *)(v170 + 40) = v172;
    *(_QWORD *)(v170 + 48) = v171;
    *(_BYTE *)(v170 + 56) = 1;
    v218 = 0;
    v219 = v170;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v138 + 24) + 40))(*(_QWORD *)(v138 + 24), &v219);
    v173 = v219;
    v219 = 0;
    v136 = v160;
    if (v173)
    {
      v174 = *(std::__shared_weak_count **)(v173 + 32);
      if (v174)
      {
        v175 = (unint64_t *)&v174->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v177 = *(std::__shared_weak_count **)(v173 + 16);
      if (v177)
      {
        v178 = (unint64_t *)&v177->__shared_owners_;
        do
          v179 = __ldaxr(v178);
        while (__stlxr(v179 - 1, v178));
        if (!v179)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
      }
      MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
      v180 = v218;
      v218 = 0;
      if (v180)
      {
        v181 = *(std::__shared_weak_count **)(v180 + 32);
        if (v181)
        {
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        v184 = *(std::__shared_weak_count **)(v180 + 16);
        if (v184)
        {
          v185 = (unint64_t *)&v184->__shared_owners_;
          do
            v186 = __ldaxr(v185);
          while (__stlxr(v186 - 1, v185));
          if (!v186)
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
        }
        MEMORY[0x212BC6398](v180, 0x10F0C40B62ED6C6);
      }
    }
    v187 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v188 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    v190 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v191 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
  }
  else
  {
    os_log_type_enabled(v156, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(double *)&object[4] = (double)(v197.__d_.__rep_ - v198.__d_.__rep_) / 1000000000.0 * 1000.0;
    v193 = (void *)_os_log_send_and_compose_impl();
    if (v193)
      free(v193);
  }
  if (v136)
  {
    sub_20E8C003C((uint64_t)&v208, "PoseTracker::AddFrameMeasurements()          time elapsed %#7.3fms", v159);
    sub_20E863570((uint64_t)&v208);
  }
  sub_20E863570((uint64_t)&v208);
  v194 = v216;
  if (v216)
  {
    v195 = (unint64_t *)&v216->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
}

void sub_20F16BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F16BA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20E86E8C4(&a30);
  sub_20E86E8C4(&a29);
  sub_20E86E658((uint64_t)&a31);
  sub_20E863714((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20F16BAE4()
{
  JUMPOUT(0x20F16BAECLL);
}

void sub_20F16BB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F16BB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *object,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F16BC4C(uint64_t a1, int a2, _QWORD *a3)
{
  std::chrono::steady_clock::time_point v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::chrono::steady_clock::time_point v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  unint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  double v31;
  size_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE object[24];
  __int128 v83;
  void *__p[2];
  unint64_t v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2560))
    return 0;
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!*(_BYTE *)(a1 + 554) && !*(_BYTE *)(a1 + 2536) && *(_BYTE *)(a1 + 553))
    goto LABEL_11;
  v7 = (_QWORD *)(a1 + 760);
  v8 = (_QWORD *)(a1 + 736);
  if (a2)
  {
    if (!sub_20F0F38E8(v7, v8, a3))
      goto LABEL_11;
  }
  else if (!sub_20F0F11B8((uint64_t)v7, v8))
  {
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  sub_20F0F61C0(a1 + 760, (uint64_t *)(a1 + 736), (uint64_t *)(a1 + 2568));
  v9 = 1;
  *(_BYTE *)(a1 + 2616) = 1;
LABEL_12:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20F16A504(&v79);
  if (**(int **)(v79 + 56) > 3)
    return v9;
  v11 = *(unsigned __int8 *)(v79 + 72);
  v12 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  v13 = v12;
  if (!v11 && !v12)
    return v9;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 3;
  v74 = "unknown file";
  v75 = 213;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v70 = v79;
  if (*(char *)(v79 + 39) < 0)
  {
    v15 = *(const char **)(v79 + 16);
    v14 = *(_QWORD *)(v79 + 24);
    rep = v6.__d_.__rep_;
    v69 = v79 + 16;
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    v14 = *(unsigned __int8 *)(v79 + 39);
    v15 = (const char *)(v79 + 16);
    rep = v6.__d_.__rep_;
    v69 = v79 + 16;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_19;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v83 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_19:
  if (byte_254A4A4F8[23] >= 0)
    v18 = byte_254A4A4F8;
  else
    v18 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8[23];
  else
    v19 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v18, v15);
  v20 = &object[8];
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v21 = v13;
    v22 = v15;
    v23 = v11;
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v24 = v19 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v19;
    *(_QWORD *)&v83 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v20;
    v11 = v23;
    v15 = v22;
    v13 = v21;
    goto LABEL_32;
  }
  BYTE7(v83) = v19;
  if (v19)
LABEL_32:
    memmove(v20, v18, v19);
  v20[v19] = 0;
  BYTE8(v83) = 1;
  v26 = __p;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v14 >= 0x17)
  {
    v28 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v28 = v14 | 7;
    v29 = v28 + 1;
    v26 = operator new(v28 + 1);
    __p[1] = (void *)v14;
    v85 = v29 | 0x8000000000000000;
    __p[0] = v26;
    v27 = rep;
  }
  else
  {
    HIBYTE(v85) = v14;
    v27 = rep;
    if (!v14)
      goto LABEL_41;
  }
  memmove(v26, v15, v14);
LABEL_41:
  *((_BYTE *)v26 + v14) = 0;
  v86 = 1;
  v30 = *(NSObject **)object;
  if (SHIBYTE(v85) < 0)
    operator delete(__p[0]);
  if (BYTE8(v83) && SBYTE7(v83) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v31 = (double)(v10.__d_.__rep_ - v27) / 1000000000.0 * 1000.0;
  if (v13 && *(_QWORD *)(v13 + 24))
  {
    v32 = _os_log_pack_size();
    v33 = (std::__shared_weak_count_vtbl *)operator new(v32, (std::align_val_t)8uLL);
    v34 = (std::__shared_weak_count *)operator new();
    v35 = v34;
    v34->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v34->__shared_weak_owners_ = 0;
    v34[1].__vftable = v33;
    *(_QWORD *)object = v33;
    *(_QWORD *)&object[8] = v33;
    *(_QWORD *)&object[16] = v34;
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
    v83 = 0uLL;
    __p[0] = 0;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v35);
    }
    v39 = *(_QWORD *)object;
    v40 = _os_log_pack_fill();
    *(_DWORD *)v40 = 134217984;
    *(double *)(v40 + 4) = v31;
    v41 = operator new();
    v42 = *(unsigned __int8 *)(v70 + 39);
    v43 = v69;
    if ((v42 & 0x80u) != 0)
    {
      v43 = *(_QWORD *)(v70 + 16);
      v42 = *(_QWORD *)(v70 + 24);
    }
    *(_QWORD *)v41 = v39;
    *(_OWORD *)(v41 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v41 + 24) = v83;
    v83 = 0uLL;
    *(_QWORD *)(v41 + 40) = v43;
    *(_QWORD *)(v41 + 48) = v42;
    *(_BYTE *)(v41 + 56) = 1;
    v80 = 0;
    v81 = v41;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v13 + 24) + 40))(*(_QWORD *)(v13 + 24), &v81);
    v44 = v81;
    v81 = 0;
    if (v44)
    {
      v45 = *(std::__shared_weak_count **)(v44 + 32);
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = *(std::__shared_weak_count **)(v44 + 16);
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
      v51 = v80;
      v80 = 0;
      if (v51)
      {
        v52 = *(std::__shared_weak_count **)(v51 + 32);
        if (v52)
        {
          v53 = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        v55 = *(std::__shared_weak_count **)(v51 + 16);
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v61 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v62 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  else
  {
    os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134217984;
    *(double *)&object[4] = (double)(v10.__d_.__rep_ - v27) / 1000000000.0 * 1000.0;
    v64 = (void *)_os_log_send_and_compose_impl();
    if (v64)
      free(v64);
  }
  if (v11)
  {
    sub_20E8C003C((uint64_t)v72, "PoseTracker::PrepareBundle()       time elapsed %#7.3fms", v31);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v65 = v78;
  if (v78)
  {
    v66 = (unint64_t *)&v78->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  return v9;
}

void sub_20F16C42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F16C46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E8C4(&a26);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F16C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F16C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v7, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F16C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F16C4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20F16C56C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F103270(v2);
    MEMORY[0x212BC6398](v3, 0x10B0C40C824C1ACLL);
  }
  return a1;
}

_QWORD *sub_20F16C5B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 77;
        sub_20F104368(v3);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_20F16C610(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20F114444(v3 - 21);
      while (v3 != v2);
      v4 = a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v5 = a1[7];
  if (v5)
  {
    v6 = a1[8];
    v7 = a1[7];
    if (v6 != v5)
    {
      do
        v6 = sub_20F114208(v6 - 21);
      while (v6 != v5);
      v7 = a1[7];
    }
    a1[8] = v5;
    operator delete(v7);
  }
  v8 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      v11 = (uint64_t)v9 - 296;
      do
      {
        v13 = *(void **)(v11 + 192);
        if (v13)
        {
          *(_QWORD *)(v11 + 200) = v13;
          operator delete(v13);
        }
        v14 = *(void **)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)(v11 + 8) = v14;
          operator delete(v14);
        }
        v12 = (void *)(v11 - 32);
        v11 -= 328;
      }
      while (v12 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20F16C708(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 7];
    v6 = (uint64_t)*v5;
    v7 = (uint64_t)*v5 + 32 * (v4 & 0x7F);
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v4) & 0x7F);
    if (v7 != v8)
    {
      do
      {
        v9 = *(void **)(v7 + 8);
        if (v9)
        {
          *(_QWORD *)(v7 + 16) = v9;
          operator delete(v9);
          v6 = (uint64_t)*v5;
        }
        v7 += 32;
        if (v7 - v6 == 4096)
        {
          v10 = (uint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 128;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20F16C880(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  FILE *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v15;
  uint64_t v16;

  v2 = *(_QWORD **)(a1 + 1752);
  if (v2)
  {
    do
    {
      v15 = (_QWORD *)*v2;
      v16 = v2[3];
      v2[3] = 0;
      if (v16)
        MEMORY[0x212BC6398](v16, 0x1000C403B260825);
      operator delete(v2);
      v2 = v15;
    }
    while (v15);
  }
  v3 = *(void **)(a1 + 1736);
  *(_QWORD *)(a1 + 1736) = 0;
  if (v3)
    operator delete(v3);
  sub_20EDEE790(*(_QWORD **)(a1 + 1720));
  v4 = *(FILE **)(a1 + 1704);
  *(_QWORD *)(a1 + 1704) = 0;
  if (v4)
    fclose(v4);
  sub_20F04F084((_QWORD *)(a1 + 1288));
  if ((*(char *)(a1 + 1119) & 0x80000000) == 0)
  {
    v5 = *(void **)(a1 + 488);
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 1096));
  v5 = *(void **)(a1 + 488);
  if (v5)
  {
LABEL_8:
    *(_QWORD *)(a1 + 496) = v5;
    operator delete(v5);
  }
LABEL_9:
  v6 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v6)
  {
    v7 = sub_20F103270(v6);
    MEMORY[0x212BC6398](v7, 0x10B0C40C824C1ACLL);
  }
  v8 = *(void **)(a1 + 264);
  if (v8)
  {
    *(_QWORD *)(a1 + 272) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 216);
  if (v9)
  {
    *(_QWORD *)(a1 + 224) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v10)
    sub_20F1031CC(a1 + 208, v10);
  v11 = *(_QWORD **)(a1 + 184);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 192);
    v13 = *(void **)(a1 + 184);
    if (v12 != v11)
    {
      do
      {
        v12 -= 77;
        sub_20F104368(v12);
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v11;
    operator delete(v13);
  }
  sub_20F16C610((void **)(a1 + 56));
  sub_20F16C708(a1 + 8);
  return a1;
}

uint64_t sub_20F16C9E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 32;
        *(_QWORD *)(a1 + 16) = v2 - 32;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F16CA54()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F16CA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  uint64_t *v20;
  unsigned __int8 v21;
  unint64_t v22;
  __int128 *v23;
  int v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD *v32;
  int v33;
  double v34;
  double v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  double v40;
  double v41;
  uint64_t v43;
  double v44;
  unsigned int v45;
  __uint64_t v46[2];
  void *v47[3];
  char v48;
  void *v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  char v54;
  void *v55;
  char v56;
  void *__p;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a8 + 44))
    v11 = *(_DWORD *)(a8 + 40) < *(_DWORD *)(a1 + 112);
  else
    v11 = 0;
  sub_20EFF4344(a1, a7);
  sub_20EFF3AFC(a1, v11);
  v18 = *(_BYTE *)(a1 + 108);
  if (v18)
  {
    if (!*(_BYTE *)(a1 + 109))
    {
      *(_BYTE *)(a1 + 337) = 1;
      v31 = atomic_load((unsigned __int8 *)&qword_254A622F0);
      if ((v31 & 1) != 0)
        goto LABEL_8;
      goto LABEL_19;
    }
    v18 = *(_DWORD *)(a1 + 140) < *(_DWORD *)(a1 + 100);
  }
  *(_BYTE *)(a1 + 337) = v18;
  v19 = atomic_load((unsigned __int8 *)&qword_254A622F0);
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_19:
  if (__cxa_guard_acquire(&qword_254A622F0))
  {
    qword_254A622F8 = 0;
    qword_254A62300 = 0;
    v32 = operator new(0x20uLL);
    v32[1] = 0;
    v32[2] = 0;
    *v32 = &off_24C9F6898;
    *((_WORD *)v32 + 12) = 0;
    qword_254A622F8 = (uint64_t)(v32 + 3);
    qword_254A62300 = (uint64_t)v32;
    __cxa_atexit((void (*)(void *))sub_20EFF38D8, &qword_254A622F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A622F0);
  }
LABEL_8:
  if (sub_20EFF3940((BOOL **)&qword_254A622F8, 0, v12, v13, v14, v15, v16, v17, *(unsigned __int8 *)(a1 + 337)))
  {
    v20 = sub_210219C18();
    v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v22 = atomic_load(&qword_254A5A450);
    v23 = &xmmword_2102EF000;
    if (!v22)
      goto LABEL_32;
    v24 = *(unsigned __int8 *)(a1 + 337);
    LODWORD(v47[0]) = 67109120;
    HIDWORD(v47[0]) = v24;
    v25 = (char *)_os_log_send_and_compose_impl();
    v26 = strlen(v25);
    v46[0] = 0;
    pthread_threadid_np(0, v46);
    v27 = v46[0];
    timespec_get((timespec *)v46, 1);
    sub_210219E20(v47, 0xEEEEB0B5B2B2EEEELL, "CameraAllocation", 0x10uLL, (__int128 *)(v20 + 1), (__int128 *)(v20 + 5), "[CA] Low inlier mode: %{BOOL}d", 0x1EuLL, v25, v26, v27, v46);
    std::mutex::lock(&stru_254A5A410);
    v28 = qword_254A5A458;
    for (i = unk_254A5A460; v28 != i; v28 += 40)
    {
      v30 = *(_QWORD *)(v28 + 32);
      if (!v30)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v30 + 48))(v30, v47);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v58 < 0)
    {
      operator delete(__p);
      v23 = &xmmword_2102EF000;
      if ((v56 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v54)
        {
LABEL_25:
          if (v51 && v50 < 0)
            operator delete(v49);
          if (v48 < 0)
            operator delete(v47[1]);
          if (v25)
            free(v25);
LABEL_32:
          if (os_signpost_enabled((os_log_t)*v20))
          {
            v33 = *(unsigned __int8 *)(a1 + 337);
            LODWORD(v47[0]) = *((_QWORD *)v23 + 7);
            HIDWORD(v47[0]) = v33;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_34;
        }
LABEL_23:
        if (v53 < 0)
          operator delete(v52);
        goto LABEL_25;
      }
    }
    else
    {
      v23 = &xmmword_2102EF000;
      if ((v56 & 0x80000000) == 0)
        goto LABEL_16;
    }
    operator delete(v55);
    if (!v54)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_34:
  v34 = 1.0;
  if (!a6)
    goto LABEL_49;
  v35 = *(double *)(a1 + 8);
  v36 = *(unsigned __int8 *)(a1 + 336);
  if (v36 == 2)
  {
    v43 = 120;
    if (*(_DWORD *)(a1 + 140) < *(_DWORD *)(a1 + 100))
      v43 = 128;
    v44 = *(double *)(a1 + v43);
    if (*(_BYTE *)(a8 + 60))
      v45 = *(_DWORD *)(a8 + 56);
    else
      v45 = 0;
    if (*(_BYTE *)(a8 + 68) && *(_DWORD *)(a8 + 64) > v45)
    {
      v39 = 0x20000;
      v38 = 0x10000;
      v41 = 1.0;
      v40 = 1.0;
      v34 = v44;
      goto LABEL_51;
    }
    v39 = 0x20000;
    v38 = 0x10000;
    v41 = v44;
    v40 = *(double *)(a1 + 8);
    goto LABEL_50;
  }
  if (v36 == 1)
  {
LABEL_49:
    v39 = 0x20000;
    v38 = 0x10000;
    v41 = 1.0;
    v40 = 1.0;
LABEL_50:
    v35 = 1.0;
    goto LABEL_51;
  }
  v37 = v36 == 0;
  if (*(_BYTE *)(a1 + 336))
    v38 = -1;
  else
    v38 = 0x10000;
  if (*(_BYTE *)(a1 + 336))
    v39 = -1;
  else
    v39 = 0x20000;
  if (v37)
    v40 = *(double *)(a1 + 8);
  else
    v40 = 0.0;
  if (!v37)
    v35 = 0.0;
  v41 = 1.0;
LABEL_51:
  *(_DWORD *)(a1 + 144) = 0;
  *(double *)(a1 + 152) = v34;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1;
  *(double *)(a1 + 176) = v41;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = v38;
  *(double *)(a1 + 200) = v35;
  *(_BYTE *)(a1 + 208) = 1;
  *(_DWORD *)(a1 + 216) = v39;
  *(double *)(a1 + 224) = v40;
  *(_BYTE *)(a1 + 232) = 1;
  return v11;
}

void sub_20F16CF54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A622F0);
  _Unwind_Resume(a1);
}

void sub_20F16CF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20F16D020(uint64_t a1, __int16 *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  __int16 v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *__p;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)a1 = &off_24C9F9858;
  if (!*((_BYTE *)a2 + 472))
  {
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_26;
  }
  v20 = *a2;
  sub_20E86B668((uint64_t)&v21, (__int128 *)(a2 + 4));
  v30 = *((_BYTE *)a2 + 208);
  sub_20E86B868((uint64_t)&v31, (uint64_t)(a2 + 108));
  v6 = *((_OWORD *)a2 + 27);
  v40 = *((_OWORD *)a2 + 26);
  v41 = v6;
  v7 = *((_OWORD *)a2 + 28);
  v43 = *((_OWORD *)a2 + 29);
  v42 = v7;
  v8 = *((_OWORD *)a2 + 25);
  v38 = *((_OWORD *)a2 + 24);
  v39 = v8;
  v30 = 0;
  LOBYTE(v20) = 0;
  BYTE9(v43) = 1;
  v9 = operator new();
  v44 = 0;
  v45 = 0;
  v46 = 0;
  sub_20F09E8F8(v9, (uint64_t)&v20, 0, (uint64_t *)&v44);
  *(_QWORD *)(a1 + 8) = v9;
  v10 = (uint64_t)v44;
  if (v44)
  {
    v11 = v45;
    v12 = v44;
    if ((void *)v45 != v44)
    {
      do
      {
        v13 = *(_QWORD *)(v11 - 24);
        if (v13)
        {
          v14 = *(_QWORD *)(v11 - 16);
          v15 = *(void **)(v11 - 24);
          if (v14 != v13)
          {
            do
              v14 = sub_20EB8188C(v14 - 1664);
            while (v14 != v13);
            v15 = *(void **)(v11 - 24);
          }
          *(_QWORD *)(v11 - 16) = v13;
          operator delete(v15);
        }
        v11 -= 32;
      }
      while (v11 != v10);
      v12 = v44;
    }
    v45 = v10;
    operator delete(v12);
  }
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v27 < 0)
  {
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_24:
      v16 = v22;
      if (!v22)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v24);
  v16 = v22;
  if (v22)
  {
LABEL_25:
    v23 = v16;
    operator delete(v16);
  }
LABEL_26:
  if (*(_BYTE *)a3)
  {
    v17 = operator new();
    sub_20F15AAC0(v17, a3);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 16) = v17;
  v18 = a3[11];
  *(_DWORD *)(a1 + 24) = v18;
  *(_DWORD *)(a1 + 28) = a3[10] + v18;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_20F16D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  MEMORY[0x212BC6398](v32, 0x1022C409A1AB51BLL);
  v34 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v31 + 8) = 0;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F16D364(_QWORD *a1)
{
  _QWORD *v2;
  char **v3;
  char **v4;
  uint64_t v5;

  *a1 = &off_24C9F9858;
  v4 = (char **)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20F16E2F4((uint64_t)v2, v3);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_20F16D3B8(_QWORD *a1)
{
  _QWORD *v2;
  char **v3;
  char **v4;
  uint64_t v5;

  *a1 = &off_24C9F9858;
  v4 = (char **)a1[2];
  v2 = a1 + 2;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20F16E2F4((uint64_t)v2, v3);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x212BC6398);
}

void sub_20F16D41C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void **v17;
  const double *v18;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  double v29;
  float64x2_t v30;
  double v33;
  float64x2_t v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  const void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  unsigned __int8 v45;
  const char *v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  const char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  size_t v62;
  size_t v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  const char *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  _QWORD v120[3];
  int v121;
  const char *v122;
  int v123;
  const char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *__dst[2];
  int64_t v128;
  uint64_t v129;
  uint64_t (**v130)();
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  _QWORD v134[8];
  double v135;
  char v136;
  __int128 v137;
  std::__shared_weak_count *v138;
  char *v139;
  std::__shared_weak_count *v140;
  _QWORD *v141;
  __int128 v142;
  void *v143[2];
  __int128 v144;
  _QWORD v145[3];
  uint64_t v146;
  unint64_t v147;
  void *__p;
  char v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  _BYTE v153[24];
  __int128 v154;
  void *v155[2];
  unint64_t v156;
  char v157;
  _QWORD v158[5];
  float64x2x3_t v159;

  v158[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 32) || (v5 = *(_QWORD *)(a1 + 16)) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 128) = 0;
    return;
  }
  sub_20F15B368(v5);
  if (v131)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_254A62310);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A62310))
    {
      sub_21021D3D8(v153);
      sub_20E8610C0(v143, "cv3d.vio.odometry");
      sub_20E8C4068((uint64_t **)v153, (uint64_t)v143, &qword_254A62308);
      if (SBYTE7(v144) < 0)
        operator delete(v143[0]);
      __cxa_guard_release(&qword_254A62310);
    }
    v129 = qword_254A62308;
    if (**(int **)(qword_254A62308 + 56) > 3
      || ((v8 = *(unsigned __int8 *)(qword_254A62308 + 72),
           v9 = sub_20E8C31DC(qword_254A62308, "OSLogSurrogateAppender", 1, 0),
           v10 = v9,
           !v8)
        ? (_ZF = v9 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_157:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 128) = 0;
      v130 = &off_24C9F9790;
      v35 = v133;
      if (!v133)
        return;
      goto LABEL_158;
    }
    sub_20E863438((uint64_t)v143);
    v12 = sub_20E86A980(&v144, (uint64_t)"VDOrientationEstimation Error: ", 31);
    v13 = *(char *)(v132 + 23);
    if (v13 >= 0)
      v14 = v132;
    else
      v14 = *(_QWORD *)v132;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v132 + 23);
    else
      v15 = *(_QWORD *)(v132 + 8);
    sub_20E86A980(v12, v14, v15);
    if ((v151 & 0x10) != 0)
    {
      v36 = v150;
      if (v150 < v147)
      {
        v150 = v147;
        v36 = v147;
      }
      v37 = (const void **)&v146;
    }
    else
    {
      if ((v151 & 8) == 0)
      {
        v16 = 0;
        HIBYTE(v128) = 0;
        v17 = __dst;
        goto LABEL_36;
      }
      v37 = (const void **)v145;
      v36 = v145[2];
    }
    v38 = *v37;
    v16 = v36 - (_QWORD)*v37;
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v16 >= 0x17)
    {
      v39 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v39 = v16 | 7;
      v40 = v39 + 1;
      v17 = (void **)operator new(v39 + 1);
      __dst[1] = (void *)v16;
      v128 = v40 | 0x8000000000000000;
      __dst[0] = v17;
    }
    else
    {
      HIBYTE(v128) = v36 - *(_BYTE *)v37;
      v17 = __dst;
      if (!v16)
      {
LABEL_36:
        *((_BYTE *)v17 + v16) = 0;
        v120[0] = &v129;
        v120[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v120[2] = std::chrono::system_clock::now().__d_.__rep_;
        v121 = 3;
        v122 = "unknown file";
        v123 = 103;
        v125 = 0;
        v126 = 0;
        v124 = "unknown function";
        if (v128 >= 0)
          v41 = (const char *)__dst;
        else
          v41 = (const char *)__dst[0];
        v42 = *(_QWORD *)v120[0];
        v43 = (const char *)(*(_QWORD *)v120[0] + 16);
        v118 = v43;
        if (*(char *)(*(_QWORD *)v120[0] + 39) < 0)
        {
          v43 = *(const char **)(v42 + 16);
          v44 = *(_QWORD *)(v42 + 24);
        }
        else
        {
          v44 = *(unsigned __int8 *)(*(_QWORD *)v120[0] + 39);
        }
        v119 = v10;
        v45 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v153);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v153);
          if ((_BYTE)v154 && (v153[23] & 0x80000000) != 0)
            operator delete(*(void **)v153);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v46 = byte_254A4A4F8;
        else
          v46 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v47 = byte_254A4A4F8[23];
        else
          v47 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v153 = os_log_create(v46, v43);
        v48 = &v153[8];
        if (v47 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v47 >= 0x17)
        {
          v49 = v42;
          v50 = v41;
          v51 = v8;
          v52 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17)
            v52 = v47 | 7;
          v53 = v52 + 1;
          v48 = operator new(v52 + 1);
          *(_QWORD *)&v153[16] = v47;
          *(_QWORD *)&v154 = v53 | 0x8000000000000000;
          *(_QWORD *)&v153[8] = v48;
          v8 = v51;
          v41 = v50;
          v42 = v49;
        }
        else
        {
          BYTE7(v154) = v47;
          if (!v47)
          {
LABEL_57:
            v48[v47] = 0;
            BYTE8(v154) = 1;
            v54 = v155;
            if (v44 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v44 >= 0x17)
            {
              v56 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17)
                v56 = v44 | 7;
              v57 = v56 + 1;
              v54 = (void **)operator new(v56 + 1);
              v155[1] = (void *)v44;
              v156 = v57 | 0x8000000000000000;
              v155[0] = v54;
              v55 = v119;
            }
            else
            {
              HIBYTE(v156) = v44;
              v55 = v119;
              if (!v44)
              {
LABEL_65:
                *((_BYTE *)v54 + v44) = 0;
                v157 = 1;
                v58 = *(NSObject **)v153;
                if (SHIBYTE(v156) < 0)
                  operator delete(v155[0]);
                if (BYTE8(v154) && SBYTE7(v154) < 0)
                  operator delete(*(void **)&v153[8]);
                if (*(_QWORD *)v153)
                  os_release(*(void **)v153);
                if (!v55 || !*(_QWORD *)(v55 + 24))
                {
                  os_log_type_enabled(v58, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v153 = 136315138;
                  *(_QWORD *)&v153[4] = v41;
                  v65 = (void *)_os_log_send_and_compose_impl();
                  if (v65)
                    free(v65);
                  goto LABEL_143;
                }
                v59 = _os_log_pack_size();
                v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
                v61 = (std::__shared_weak_count *)operator new();
                v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v61->__shared_owners_ = 0;
                v61->__shared_weak_owners_ = 0;
                v61[1].__vftable = v60;
                *(_QWORD *)&v137 = v60;
                *((_QWORD *)&v137 + 1) = v60;
                v139 = 0;
                v140 = 0;
                v138 = v61;
                v62 = strlen(v41);
                if (v62 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v63 = v62;
                if (v62 >= 0x17)
                {
                  v66 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v62 | 7) != 0x17)
                    v66 = v62 | 7;
                  v67 = v66 + 1;
                  v64 = operator new(v66 + 1);
                  *(_QWORD *)&v142 = v63;
                  *((_QWORD *)&v142 + 1) = v67 | 0x8000000000000000;
                  v141 = v64;
                  v55 = v119;
                }
                else
                {
                  HIBYTE(v142) = v62;
                  v64 = &v141;
                  if (!v62)
                  {
LABEL_84:
                    *((_BYTE *)v64 + v63) = 0;
                    v68 = v141;
                    v158[0] = v142;
                    *(_QWORD *)((char *)v158 + 7) = *(_QWORD *)((char *)&v142 + 7);
                    v69 = HIBYTE(v142);
                    v70 = operator new(0x38uLL);
                    v70[1] = 0;
                    v70[2] = 0;
                    v70[3] = off_24C9ABC20;
                    *v70 = &off_24C9ABBD0;
                    v71 = v158[0];
                    v70[4] = v68;
                    v70[5] = v71;
                    *(_QWORD *)((char *)v70 + 47) = *(_QWORD *)((char *)v158 + 7);
                    *((_BYTE *)v70 + 55) = v69;
                    v158[0] = 0;
                    *(_QWORD *)((char *)v158 + 7) = 0;
                    v72 = v140;
                    v139 = (char *)(v70 + 3);
                    v140 = (std::__shared_weak_count *)v70;
                    if (v72)
                    {
                      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
                      do
                        v74 = __ldaxr(p_shared_owners);
                      while (__stlxr(v74 - 1, p_shared_owners));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                        std::__shared_weak_count::__release_weak(v72);
                      }
                    }
                    *(_OWORD *)v153 = v137;
                    v75 = v139;
                    *(_QWORD *)&v153[16] = v138;
                    if (v138)
                    {
                      v76 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v77 = __ldxr(v76);
                      while (__stxr(v77 + 1, v76));
                    }
                    v78 = v140;
                    *(_QWORD *)&v154 = v75;
                    *((_QWORD *)&v154 + 1) = v140;
                    if (v140)
                    {
                      v79 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v80 = __ldxr(v79);
                      while (__stxr(v80 + 1, v79));
                      v155[0] = v75;
                      do
                        v81 = __ldaxr(v79);
                      while (__stlxr(v81 - 1, v79));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                        std::__shared_weak_count::__release_weak(v78);
                      }
                    }
                    else
                    {
                      v155[0] = v75;
                    }
                    v82 = v138;
                    if (v138)
                    {
                      v83 = (unint64_t *)&v138->__shared_owners_;
                      do
                        v84 = __ldaxr(v83);
                      while (__stlxr(v84 - 1, v83));
                      if (!v84)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    v85 = *(_QWORD *)v153;
                    if (*((char *)v155[0] + 31) >= 0)
                      v86 = (char *)v155[0] + 8;
                    else
                      v86 = (char *)*((_QWORD *)v155[0] + 1);
                    v87 = _os_log_pack_fill();
                    *(_DWORD *)v87 = 136315138;
                    *(_QWORD *)(v87 + 4) = v86;
                    v88 = operator new();
                    v89 = *(unsigned __int8 *)(v42 + 39);
                    v90 = v118;
                    if ((v89 & 0x80u) != 0)
                    {
                      v90 = *(const char **)(v42 + 16);
                      v89 = *(_QWORD *)(v42 + 24);
                    }
                    *(_QWORD *)v88 = v85;
                    *(_OWORD *)(v88 + 8) = *(_OWORD *)&v153[8];
                    *(_QWORD *)&v153[8] = 0;
                    *(_QWORD *)&v153[16] = 0;
                    *(_OWORD *)(v88 + 24) = v154;
                    v154 = 0uLL;
                    *(_QWORD *)(v88 + 40) = v90;
                    *(_QWORD *)(v88 + 48) = v89;
                    *(_BYTE *)(v88 + 56) = 1;
                    v141 = 0;
                    *(_QWORD *)&v137 = v88;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v55 + 24) + 40))(*(_QWORD *)(v55 + 24), &v137);
                    v91 = v137;
                    *(_QWORD *)&v137 = 0;
                    if (v91)
                    {
                      v92 = *(std::__shared_weak_count **)(v91 + 32);
                      if (v92)
                      {
                        v93 = (unint64_t *)&v92->__shared_owners_;
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                        if (!v94)
                        {
                          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                          std::__shared_weak_count::__release_weak(v92);
                        }
                      }
                      v95 = *(std::__shared_weak_count **)(v91 + 16);
                      if (v95)
                      {
                        v96 = (unint64_t *)&v95->__shared_owners_;
                        do
                          v97 = __ldaxr(v96);
                        while (__stlxr(v97 - 1, v96));
                        if (!v97)
                        {
                          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                          std::__shared_weak_count::__release_weak(v95);
                        }
                      }
                      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
                      v98 = v141;
                      v141 = 0;
                      if (v98)
                      {
                        v99 = (std::__shared_weak_count *)v98[4];
                        if (v99)
                        {
                          v100 = (unint64_t *)&v99->__shared_owners_;
                          do
                            v101 = __ldaxr(v100);
                          while (__stlxr(v101 - 1, v100));
                          if (!v101)
                          {
                            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                            std::__shared_weak_count::__release_weak(v99);
                          }
                        }
                        v102 = (std::__shared_weak_count *)v98[2];
                        if (v102)
                        {
                          v103 = (unint64_t *)&v102->__shared_owners_;
                          do
                            v104 = __ldaxr(v103);
                          while (__stlxr(v104 - 1, v103));
                          if (!v104)
                          {
                            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                            std::__shared_weak_count::__release_weak(v102);
                          }
                        }
                        MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
                      }
                    }
                    v105 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
                    if (*((_QWORD *)&v154 + 1))
                    {
                      v106 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
                      do
                        v107 = __ldaxr(v106);
                      while (__stlxr(v107 - 1, v106));
                      if (!v107)
                      {
                        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                        std::__shared_weak_count::__release_weak(v105);
                      }
                    }
                    v108 = *(std::__shared_weak_count **)&v153[16];
                    if (*(_QWORD *)&v153[16])
                    {
                      v109 = (unint64_t *)(*(_QWORD *)&v153[16] + 8);
                      do
                        v110 = __ldaxr(v109);
                      while (__stlxr(v110 - 1, v109));
                      if (!v110)
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
LABEL_143:
                    if (v8)
                    {
                      v111 = (const char *)__dst;
                      if (v128 < 0)
                        v111 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v120, "%s", v111);
                      sub_20E863570((uint64_t)v120);
                    }
                    sub_20E863570((uint64_t)v120);
                    v112 = v126;
                    if (v126)
                    {
                      v113 = (unint64_t *)&v126->__shared_owners_;
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    if (SHIBYTE(v128) < 0)
                      operator delete(__dst[0]);
                    v143[0] = *(void **)MEMORY[0x24BEDB7F0];
                    v115 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)v143 + *((_QWORD *)v143[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v144 = v115;
                    *((_QWORD *)&v144 + 1) = MEMORY[0x24BEDB848] + 16;
                    if (v149 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v152);
                    goto LABEL_157;
                  }
                }
                memcpy(v64, v41, v63);
                goto LABEL_84;
              }
            }
            memmove(v54, v43, v44);
            goto LABEL_65;
          }
        }
        memmove(v48, v46, v47);
        goto LABEL_57;
      }
    }
    memmove(v17, v38, v16);
    goto LABEL_36;
  }
  if (!v136)
    sub_20E866B34();
  v18 = (const double *)v134;
  v159 = vld3q_f64(v18);
  *(_OWORD *)v143 = xmmword_21039D5E0;
  v144 = unk_21039D5F0;
  _V4.D[1] = v134[7];
  v20 = *(double *)(a2 + 40);
  v21 = *(double *)(a2 + 64);
  v22 = *(double *)(a2 + 88);
  v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159.val[0], *(double *)(a2 + 24)), v159.val[1], *(float64x2_t *)(a2 + 24), 1), v159.val[2], v20);
  _D6 = *(_QWORD *)(a2 + 32);
  __asm { FMLA            D20, D6, V4.D[1] }
  v29 = _D20 + v135 * v20;
  v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159.val[0], *(double *)(a2 + 48)), v159.val[1], *(float64x2_t *)(a2 + 48), 1), v159.val[2], v21);
  _D16 = *(_QWORD *)(a2 + 56);
  __asm { FMLA            D20, D16, V4.D[1] }
  v33 = _D20 + v135 * v21;
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v159.val[0], *(double *)(a2 + 72)), v159.val[1], *(float64x2_t *)(a2 + 72), 1), v159.val[2], v22);
  v159.val[1].f64[0] = *(float64_t *)(a2 + 80);
  __asm { FMLA            D0, D1, V4.D[1] }
  v144 = 0uLL;
  v159.val[0].f64[0] = v159.val[0].f64[0] + v135 * v22;
  v143[1] = 0;
  *(_DWORD *)(a1 + 32) = 2;
  *(double *)(a3 + 16) = v29;
  *(float64x2_t *)a3 = v23;
  *(_QWORD *)(a3 + 24) = 0;
  *(double *)(a3 + 48) = v33;
  *(float64x2_t *)(a3 + 32) = v30;
  *(_QWORD *)(a3 + 56) = 0;
  *(float64_t *)(a3 + 80) = v159.val[0].f64[0];
  *(float64x2_t *)(a3 + 64) = v34;
  v159.val[1] = *(float64x2_t *)v143;
  *(_OWORD *)(a3 + 104) = v144;
  *(float64x2_t *)(a3 + 88) = v159.val[1];
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_BYTE *)(a3 + 128) = 1;
  v130 = &off_24C9F9790;
  v35 = v133;
  if (v133)
  {
LABEL_158:
    v116 = (unint64_t *)&v35->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20F16E05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (*(_BYTE *)(v57 - 168) && *(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a52);
    sub_20F15AF74(&a30);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a52);
  sub_20F15AF74(&a30);
  _Unwind_Resume(a1);
}

void sub_20F16E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20F15AF74(&a27);
  _Unwind_Resume(a1);
}

void sub_20F16E208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_20F15AF74(&a27);
  _Unwind_Resume(a1);
}

void sub_20F16E228(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      *(_BYTE *)(v3 + 489) = 0;
      if (*(_BYTE *)(v3 + 2632))
        *(_BYTE *)(v3 + 2632) = 0;
      sub_20F0AE200(v3 + 2640);
      v4 = *(_QWORD *)(v3 + 3368);
      *(_QWORD *)(v4 + 2376) = 0;
      *(_QWORD *)(v4 + 2368) = 0;
      *(_QWORD *)(v4 + 2384) = 0;
      *(_QWORD *)(v4 + 80) = 0xBFF0000000000000;
      *(_BYTE *)(v4 + 92) = 0;
      *(_DWORD *)(v4 + 88) = 0;
    }
  }
  v5 = *(char ***)(a1 + 16);
  if (v5 && *((_BYTE *)v5 + 312))
  {
    v6 = *v5;
    if (*v5)
    {
      v7 = v5[1];
      v8 = *v5;
      if (v7 != v6)
      {
        do
        {
          v9 = (void *)*((_QWORD *)v7 - 22);
          if (v9)
          {
            *((_QWORD *)v7 - 21) = v9;
            operator delete(v9);
          }
          v7 -= 272;
        }
        while (v7 != v6);
        v8 = *v5;
      }
      v5[1] = v6;
      operator delete(v8);
    }
    *((_BYTE *)v5 + 312) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
}

void sub_20F16E2F4(uint64_t a1, char **a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;

  if (a2)
  {
    v3 = a2[55];
    if (v3)
    {
      a2[56] = v3;
      operator delete(v3);
    }
    v4 = a2[54];
    a2[54] = 0;
    if (v4)
      (*(void (**)(char *))(*(_QWORD *)v4 + 8))(v4);
    sub_20E86872C((uint64_t)(a2 + 41), a2[42]);
    if (*((_BYTE *)a2 + 312))
    {
      v5 = *a2;
      if (*a2)
      {
        v6 = a2[1];
        v7 = *a2;
        if (v6 != v5)
        {
          do
          {
            v8 = (void *)*((_QWORD *)v6 - 22);
            if (v8)
            {
              *((_QWORD *)v6 - 21) = v8;
              operator delete(v8);
            }
            v6 -= 272;
          }
          while (v6 != v5);
          v7 = *a2;
        }
        a2[1] = v5;
        operator delete(v7);
      }
    }
    JUMPOUT(0x212BC6398);
  }
}

uint64_t sub_20F16E3B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    sub_20F1624E4((_QWORD *)a1, (__int128 **)a2);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
    v5 = *(_OWORD *)(a2 + 88);
    v6 = *(_OWORD *)(a2 + 104);
    v7 = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 120) = v7;
    *(_OWORD *)(a1 + 104) = v6;
    *(_OWORD *)(a1 + 88) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 128);
    v9 = *(_OWORD *)(a2 + 144);
    v10 = *(_OWORD *)(a2 + 160);
    v11 = *(_OWORD *)(a2 + 176);
    v12 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 192) = v12;
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 160) = v10;
    *(_OWORD *)(a1 + 144) = v9;
    *(_OWORD *)(a1 + 128) = v8;
    *(_BYTE *)(a1 + 272) = 0;
    if (*(_BYTE *)(a2 + 272))
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      v13 = *(_OWORD *)(a2 + 216);
      v14 = *(_OWORD *)(a2 + 232);
      v15 = *(_OWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 232) = v14;
      *(_OWORD *)(a1 + 248) = v15;
      *(_OWORD *)(a1 + 216) = v13;
      *(_BYTE *)(a1 + 272) = 1;
    }
    v16 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 289) = *(_OWORD *)(a2 + 289);
    *(_OWORD *)(a1 + 280) = v16;
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

void sub_20F16E4BC(_Unwind_Exception *exception_object)
{
  char **v1;
  char *v3;
  char *v4;
  char *v5;
  void *v6;

  if (*((_BYTE *)v1 + 312))
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = v1[1];
      v5 = *v1;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 22);
          if (v6)
          {
            *((_QWORD *)v4 - 21) = v6;
            operator delete(v6);
          }
          v4 -= 272;
        }
        while (v4 != v3);
        v5 = *v1;
      }
      v1[1] = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F16E518(uint64_t a1, uint64_t **a2, int a3, unint64_t a4, char a5, char a6, int a7, double a8, double a9, double a10, double a11, int64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  uint64_t *v17;
  uint64_t *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  unint64_t v109;
  char *v110;
  _BYTE *v111;
  char *v112;
  unint64_t v113;
  _OWORD *v114;
  __int128 *v115;
  unint64_t v116;
  __int128 v117;
  _QWORD *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char v123;
  _BYTE *v124;
  _BYTE *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  int v138;
  char *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void *v161;
  void *v162;
  char *v163;
  void *v164;
  void *v165;
  char *v166;
  unint64_t v167;
  char *v168;
  int64x2_t v169;
  _BYTE *v170;
  char *v171;
  unint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  BOOL v180;
  _OWORD *v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  unint64_t v194;
  _BYTE *v195;
  void *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  int v225;
  uint64_t v227;
  int64x2_t v228;
  uint64_t *v229;
  uint64_t *v232;
  uint64_t __sz;
  _BYTE v235[32];
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  unsigned __int128 v250;
  int v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  void *__p[4];
  __int128 v256;
  __int128 v257;
  _OWORD v258[2];
  __int128 v259;
  _OWORD v260[2];
  __int128 v261;
  _OWORD v262[2];
  __int128 v263;
  __int128 v264;
  int v265;
  __int128 v266;
  uint64_t v267;

  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    while (!*v17)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1277, (uint64_t)"lens != nullptr", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_10;
      }
      if ((sub_20EA82D10(*v17, v19, v20, v21, v22, v23, v24, v25) & 1) == 0)
        goto LABEL_9;
LABEL_3:
      if (++v17 == v18)
        goto LABEL_11;
    }
    if ((sub_20EA82D10(*v17, a8, a9, a10, a11, a12, a13, a14) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1278, (uint64_t)"lens->validate()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_10:
      abort();
    }
    goto LABEL_3;
  }
LABEL_11:
  *(_QWORD *)a1 = a4;
  *(_BYTE *)(a1 + 8) = a5;
  v26 = a1;
  *(_BYTE *)(a1 + 9) = a6;
  *(_DWORD *)(a1 + 12) = a7;
  sub_20F16F924((void **)(a1 + 40), a4);
  v27 = (char *)a2[1] - (char *)*a2;
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 16);
  if (v27 >> 3 > (unint64_t)((*(_QWORD *)(a1 + 32) - v29) >> 8))
  {
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFF9)
      sub_20E867F44();
    v30 = *(_QWORD *)(a1 + 24);
    v31 = (char *)operator new(32 * v27);
    v32 = (uint64_t)&v31[v30 - v29];
    v33 = &v31[256 * v28];
    v34 = sub_20F18B088(v30, v30, v29, v29, v32, v32);
    v35 = *(uint64_t **)(a1 + 16);
    v36 = *(uint64_t **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v34;
    *(_QWORD *)(a1 + 24) = v32;
    v26 = a1;
    for (*(_QWORD *)(a1 + 32) = v33; v36 != v35; v36 = sub_20F1140F4(v36 - 32))
      ;
    if (v35)
      operator delete(v35);
  }
  v37 = *a2;
  v229 = a2[1];
  v38 = a3;
  if (*a2 != v229)
  {
    __sz = 8 * a3;
    v228 = vdupq_n_s64(0x7FF8000000000000uLL);
    v227 = (uint64_t)a3 << 7;
    while (1)
    {
      v232 = v37;
      v42 = *v37;
      v266 = 0uLL;
      v267 = 0;
      memset(__p, 0, sizeof(__p));
      v256 = 0u;
      v257 = 0u;
      memset(v258, 0, sizeof(v258));
      v259 = 0u;
      memset(v260, 0, sizeof(v260));
      v261 = 0u;
      memset(v262, 0, sizeof(v262));
      v263 = 0u;
      v264 = 0u;
      v265 = 0;
      v43 = operator new();
      sub_20E972DB4(v43, v42);
      memcpy((void *)(v43 + 1000), (const void *)(v42 + 1000), 0x1B8uLL);
      v254 = 0;
      v44 = __p[0];
      __p[0] = (void *)v43;
      if (v44)
      {
        sub_20E8E931C((uint64_t)__p, (uint64_t)v44);
        v45 = v254;
        v254 = 0;
        if (v45)
          sub_20E8E931C((uint64_t)&v254, v45);
      }
      v46 = (_BYTE *)v257;
      if (a3 > (unint64_t)((uint64_t)(*(_QWORD *)&v258[0] - v257) >> 3))
        break;
LABEL_36:
      v61 = (_BYTE *)*((_QWORD *)&v258[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v258[1] + 1) - *((_QWORD *)&v258[0] + 1)) >> 3))
        goto LABEL_48;
      if (v38 < 0)
        goto LABEL_205;
      v62 = *(_BYTE **)&v258[1];
      v63 = (char *)operator new(__sz);
      v64 = v62 - v61;
      v65 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
      v66 = v65;
      if (v62 != v61)
      {
        if ((unint64_t)(v64 - 8) < 0x58)
        {
          v66 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_45:
            v75 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)v66 - 1) = v75;
            v66 -= 8;
          }
          while (v62 != v61);
          goto LABEL_46;
        }
        v66 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v62 - &v63[v64 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_45;
        v67 = v64 >> 3;
        v68 = ((unint64_t)(v64 - 8) >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v62[-v69];
        v66 = &v65[-v69];
        v71 = &v63[8 * v67 - 16];
        v72 = (__int128 *)(v62 - 16);
        v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *v72;
          *((_OWORD *)v71 - 1) = *(v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 2;
          v73 -= 4;
        }
        while (v73);
        v62 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_45;
      }
LABEL_46:
      *((_QWORD *)&v258[0] + 1) = v66;
      *(_QWORD *)&v258[1] = v65;
      *((_QWORD *)&v258[1] + 1) = &v63[8 * a3];
      if (v61)
        operator delete(v61);
LABEL_48:
      v76 = (_BYTE *)v259;
      if (a3 <= (unint64_t)((uint64_t)(*(_QWORD *)&v260[0] - v259) >> 3))
        goto LABEL_60;
      if (v38 < 0)
        goto LABEL_205;
      v77 = (_BYTE *)*((_QWORD *)&v259 + 1);
      v78 = (char *)operator new(__sz);
      v79 = v77 - v76;
      v80 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
      v81 = v80;
      if (v77 != v76)
      {
        if ((unint64_t)(v79 - 8) < 0x58)
        {
          v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_57:
            v90 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v81 - 1) = v90;
            v81 -= 8;
          }
          while (v77 != v76);
          goto LABEL_58;
        }
        v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v77 - &v78[v79 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_57;
        v82 = v79 >> 3;
        v83 = ((unint64_t)(v79 - 8) >> 3) + 1;
        v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
        v85 = &v77[-v84];
        v81 = &v80[-v84];
        v86 = &v78[8 * v82 - 16];
        v87 = (__int128 *)(v77 - 16);
        v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v89 = *v87;
          *((_OWORD *)v86 - 1) = *(v87 - 1);
          *(_OWORD *)v86 = v89;
          v86 -= 32;
          v87 -= 2;
          v88 -= 4;
        }
        while (v88);
        v77 = v85;
        if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
      }
LABEL_58:
      *(_QWORD *)&v259 = v81;
      *((_QWORD *)&v259 + 1) = v80;
      *(_QWORD *)&v260[0] = &v78[8 * a3];
      if (v76)
        operator delete(v76);
LABEL_60:
      v91 = (_BYTE *)*((_QWORD *)&v260[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v260[1] + 1) - *((_QWORD *)&v260[0] + 1)) >> 3))
        goto LABEL_72;
      if (v38 < 0)
LABEL_205:
        sub_20E867F44();
      v92 = *(_BYTE **)&v260[1];
      v93 = (char *)operator new(__sz);
      v94 = v92 - v91;
      v95 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
      v96 = v95;
      if (v92 != v91)
      {
        if ((unint64_t)(v94 - 8) < 0x58)
        {
          v96 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_69:
            v105 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *((_QWORD *)v96 - 1) = v105;
            v96 -= 8;
          }
          while (v92 != v91);
          goto LABEL_70;
        }
        v96 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v92 - &v93[v94 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_69;
        v97 = v94 >> 3;
        v98 = ((unint64_t)(v94 - 8) >> 3) + 1;
        v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = &v92[-v99];
        v96 = &v95[-v99];
        v101 = &v93[8 * v97 - 16];
        v102 = (__int128 *)(v92 - 16);
        v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = *v102;
          *((_OWORD *)v101 - 1) = *(v102 - 1);
          *(_OWORD *)v101 = v104;
          v101 -= 32;
          v102 -= 2;
          v103 -= 4;
        }
        while (v103);
        v92 = v100;
        if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_69;
      }
LABEL_70:
      *((_QWORD *)&v260[0] + 1) = v96;
      *(_QWORD *)&v260[1] = v95;
      *((_QWORD *)&v260[1] + 1) = &v93[8 * a3];
      if (v91)
        operator delete(v91);
LABEL_72:
      v106 = (_BYTE *)v261;
      if (*(_QWORD *)&v262[0] - (_QWORD)v261 >= (unint64_t)a3)
        goto LABEL_93;
      if (v38 < 0)
        sub_20E867F44();
      v107 = (_BYTE *)*((_QWORD *)&v261 + 1);
      v108 = operator new(a3);
      v109 = v107 - v106;
      v110 = &v108[v107 - v106];
      v111 = v110;
      if (v107 != v106)
      {
        v111 = v108;
        if (v109 < 8)
        {
          v112 = &v108[v107 - v106];
          goto LABEL_89;
        }
        v112 = &v108[v107 - v106];
        if ((unint64_t)(v106 - v108) < 0x20)
          goto LABEL_89;
        if (v109 >= 0x20)
        {
          v113 = v109 & 0xFFFFFFFFFFFFFFE0;
          v114 = &v108[v109 - 16];
          v115 = (__int128 *)(v107 - 16);
          v116 = v109 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v117 = *v115;
            *(v114 - 1) = *(v115 - 1);
            *v114 = v117;
            v114 -= 2;
            v115 -= 2;
            v116 -= 32;
          }
          while (v116);
          if (v109 == v113)
            goto LABEL_91;
          if ((v109 & 0x18) == 0)
          {
            v112 = &v110[-v113];
            v107 -= v113;
LABEL_89:
            v122 = v112 - 1;
            do
            {
              v123 = *--v107;
              *v122-- = v123;
            }
            while (v107 != v106);
            goto LABEL_91;
          }
        }
        else
        {
          v113 = 0;
        }
        v112 = &v110[-(v109 & 0xFFFFFFFFFFFFFFF8)];
        v118 = &v108[&v107[-v113] - v106 - 8];
        v119 = (uint64_t *)&v107[-v113 - 8];
        v120 = v113 - (v109 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v121 = *v119--;
          *v118-- = v121;
          v120 += 8;
        }
        while (v120);
        v107 -= v109 & 0xFFFFFFFFFFFFFFF8;
        if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_89;
      }
LABEL_91:
      *(_QWORD *)&v261 = v111;
      *((_QWORD *)&v261 + 1) = v110;
      *(_QWORD *)&v262[0] = &v108[a3];
      if (v106)
        operator delete(v106);
LABEL_93:
      v124 = (_BYTE *)*((_QWORD *)&v262[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v262[1] + 1) - *((_QWORD *)&v262[0] + 1)) >> 2))
        goto LABEL_105;
      if (v38 < 0)
        sub_20EABADD4();
      v125 = *(_BYTE **)&v262[1];
      v126 = (char *)operator new(4 * a3);
      v127 = v125 - v124;
      v128 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
      v129 = v128;
      if (v125 != v124)
      {
        if ((unint64_t)(v127 - 4) < 0x2C)
        {
          v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_102:
            v138 = *((_DWORD *)v125 - 1);
            v125 -= 4;
            *((_DWORD *)v129 - 1) = v138;
            v129 -= 4;
          }
          while (v125 != v124);
          goto LABEL_103;
        }
        v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v125 - &v126[v127 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
          goto LABEL_102;
        v130 = v127 >> 2;
        v131 = ((unint64_t)(v127 - 4) >> 2) + 1;
        v132 = 4 * (v131 & 0x7FFFFFFFFFFFFFF8);
        v133 = &v125[-v132];
        v129 = &v128[-v132];
        v134 = &v126[4 * v130 - 16];
        v135 = (__int128 *)(v125 - 16);
        v136 = v131 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v137 = *v135;
          *((_OWORD *)v134 - 1) = *(v135 - 1);
          *(_OWORD *)v134 = v137;
          v134 -= 32;
          v135 -= 2;
          v136 -= 8;
        }
        while (v136);
        v125 = v133;
        if (v131 != (v131 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_102;
      }
LABEL_103:
      *((_QWORD *)&v262[0] + 1) = v129;
      *(_QWORD *)&v262[1] = v128;
      *((_QWORD *)&v262[1] + 1) = &v126[4 * a3];
      if (v124)
        operator delete(v124);
LABEL_105:
      v139 = (char *)__p[2];
      v140 = (char *)__p[1];
      v141 = ((char *)__p[2] - (char *)__p[1]) >> 7;
      v142 = a3 - v141;
      if (a3 > v141)
      {
        if (v142 <= ((char *)__p[3] - (char *)__p[2]) >> 7)
        {
          v166 = (char *)__p[2] + 128 * v142;
          v167 = v227 - (v141 << 7);
          do
          {
            *(int64x2_t *)(v139 + 8) = v228;
            *(_OWORD *)(v139 + 40) = 0uLL;
            *(_OWORD *)(v139 + 56) = 0uLL;
            *(_OWORD *)(v139 + 88) = 0uLL;
            *(_OWORD *)(v139 + 104) = 0uLL;
            *(_OWORD *)(v139 + 24) = 0uLL;
            *(_OWORD *)(v139 + 72) = 0uLL;
            v139[120] = 0;
            *(_QWORD *)v139 = -1;
            *((_QWORD *)v139 + 6) = 0;
            *((_QWORD *)v139 + 7) = 0;
            *((_QWORD *)v139 + 8) = 0;
            *((_QWORD *)v139 + 12) = 0;
            *((_QWORD *)v139 + 13) = 0;
            *((_QWORD *)v139 + 14) = 0;
            v139 += 128;
            v167 -= 128;
          }
          while (v167);
          __p[2] = v166;
          v139 = v166;
          v168 = (char *)__p[1];
          if (__p[1] != v166)
            goto LABEL_149;
        }
        else
        {
          if (v38 < 0)
            sub_20E867F44();
          v143 = ((char *)__p[3] - (char *)__p[1]) >> 6;
          if (v143 <= a3)
            v143 = a3;
          if ((void *)((char *)__p[3] - (char *)__p[1]) >= (void *)0x7FFFFFFFFFFFFF80)
            v144 = 0x1FFFFFFFFFFFFFFLL;
          else
            v144 = v143;
          if (v144 >> 57)
            sub_20E877A38();
          v145 = (char *)operator new(v144 << 7);
          v146 = &v145[128 * v141];
          v147 = v227 - (v141 << 7);
          v148 = v146;
          do
          {
            *(int64x2_t *)(v148 + 8) = v228;
            *(_OWORD *)(v148 + 40) = 0uLL;
            *(_OWORD *)(v148 + 56) = 0uLL;
            *(_OWORD *)(v148 + 88) = 0uLL;
            *(_OWORD *)(v148 + 104) = 0uLL;
            *(_OWORD *)(v148 + 24) = 0uLL;
            *(_OWORD *)(v148 + 72) = 0uLL;
            v148[120] = 0;
            *(_QWORD *)v148 = -1;
            *((_QWORD *)v148 + 6) = 0;
            *((_QWORD *)v148 + 7) = 0;
            *((_QWORD *)v148 + 8) = 0;
            *((_QWORD *)v148 + 12) = 0;
            *((_QWORD *)v148 + 13) = 0;
            *((_QWORD *)v148 + 14) = 0;
            v148 += 128;
            v147 -= 128;
          }
          while (v147);
          v149 = &v145[128 * v144];
          if (v139 == v140)
          {
            __p[1] = &v145[128 * v141];
            __p[2] = &v145[128 * (uint64_t)a3];
            __p[3] = &v145[128 * v144];
          }
          else
          {
            v150 = 0;
            do
            {
              v151 = &v146[v150];
              v152 = &v139[v150];
              *((_QWORD *)v151 - 16) = *(_QWORD *)&v139[v150 - 128];
              v153 = *(_OWORD *)&v139[v150 - 120];
              *((_QWORD *)v151 - 12) = 0;
              *((_QWORD *)v151 - 11) = 0;
              *(_OWORD *)(v151 - 120) = v153;
              *((_QWORD *)v151 - 13) = 0;
              *(_OWORD *)(v151 - 104) = *(_OWORD *)&v139[v150 - 104];
              *((_QWORD *)v151 - 11) = *(_QWORD *)&v139[v150 - 88];
              *((_QWORD *)v152 - 13) = 0;
              *((_QWORD *)v152 - 12) = 0;
              v154 = *(_QWORD *)&v139[v150 - 80];
              *((_QWORD *)v152 - 11) = 0;
              *((_QWORD *)v152 - 10) = 0;
              *((_QWORD *)v151 - 10) = v154;
              v155 = *(_QWORD *)&v139[v150 - 72];
              *((_QWORD *)v152 - 9) = 0;
              *((_QWORD *)v151 - 9) = v155;
              v156 = *(_QWORD *)&v139[v150 - 64];
              *((_QWORD *)v152 - 8) = 0;
              *((_QWORD *)v151 - 8) = v156;
              *((_QWORD *)v151 - 7) = 0;
              *((_QWORD *)v151 - 6) = 0;
              *((_QWORD *)v151 - 5) = 0;
              *(_OWORD *)(v151 - 56) = *(_OWORD *)&v139[v150 - 56];
              *((_QWORD *)v151 - 5) = *(_QWORD *)&v139[v150 - 40];
              *((_QWORD *)v152 - 7) = 0;
              *((_QWORD *)v152 - 6) = 0;
              v157 = *(_QWORD *)&v139[v150 - 32];
              *((_QWORD *)v152 - 5) = 0;
              *((_QWORD *)v152 - 4) = 0;
              *((_QWORD *)v151 - 4) = v157;
              v158 = *(_QWORD *)&v139[v150 - 24];
              *((_QWORD *)v152 - 3) = 0;
              *((_QWORD *)v151 - 3) = v158;
              v159 = *(_QWORD *)&v139[v150 - 16];
              *((_QWORD *)v152 - 2) = 0;
              *((_QWORD *)v151 - 2) = v159;
              *(v151 - 8) = v139[v150 - 8];
              v150 -= 128;
            }
            while (&v139[v150] != v140);
            v139 = (char *)__p[1];
            v160 = (char *)__p[2];
            __p[1] = &v146[v150];
            __p[2] = &v145[128 * (uint64_t)a3];
            __p[3] = v149;
            while (v160 != v139)
            {
              v161 = (void *)*((_QWORD *)v160 - 7);
              if (v161)
              {
                *((_QWORD *)v160 - 6) = v161;
                operator delete(v161);
              }
              v162 = (void *)*((_QWORD *)v160 - 13);
              if (v162)
              {
                *((_QWORD *)v160 - 12) = v162;
                operator delete(v162);
              }
              v160 -= 128;
            }
          }
          if (v139)
            operator delete(v139);
          v139 = (char *)__p[2];
          v168 = (char *)__p[1];
          if (__p[1] != __p[2])
            goto LABEL_149;
        }
LABEL_140:
        v169 = vdupq_n_s64((unint64_t)v139);
        goto LABEL_185;
      }
      if (a3 < v141)
      {
        v163 = (char *)__p[1] + 128 * (uint64_t)a3;
        while (v139 != v163)
        {
          v164 = (void *)*((_QWORD *)v139 - 7);
          if (v164)
          {
            *((_QWORD *)v139 - 6) = v164;
            operator delete(v164);
          }
          v165 = (void *)*((_QWORD *)v139 - 13);
          if (v165)
          {
            *((_QWORD *)v139 - 12) = v165;
            operator delete(v165);
          }
          v139 -= 128;
        }
        __p[2] = &v140[128 * (uint64_t)a3];
        v139 = (char *)__p[2];
      }
      v168 = (char *)__p[1];
      if (__p[1] == v139)
        goto LABEL_140;
LABEL_149:
      while (2)
      {
        v171 = (char *)*((_QWORD *)v168 + 3);
        v172 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v168 + 4) - (_QWORD)v171) >> 4);
        if (v172 == a4)
          goto LABEL_168;
        if (!(_DWORD)a4)
        {
          *((_QWORD *)v168 + 4) = v171;
          *((_QWORD *)v168 + 7) = 0;
          *((_QWORD *)v168 + 8) = 0;
          *((_QWORD *)v168 + 6) = 0;
          v170 = (_BYTE *)*((_QWORD *)v168 + 9);
          if (*((_BYTE **)v168 + 10) == v170)
            goto LABEL_148;
LABEL_147:
          *((_QWORD *)v168 + 10) = v170;
          *((_QWORD *)v168 + 13) = 0;
          *((_QWORD *)v168 + 14) = 0;
          *((_QWORD *)v168 + 12) = 0;
          goto LABEL_148;
        }
        v173 = operator new(208 * a4);
        v174 = v173;
        v175 = (char *)&v173[13 * a4];
        v176 = (char *)v173;
        do
        {
          *((_QWORD *)v176 + 24) = 0;
          *((_QWORD *)v176 + 25) = 0;
          *((_OWORD *)v176 + 10) = 0uLL;
          *((_OWORD *)v176 + 11) = 0uLL;
          *((_OWORD *)v176 + 8) = 0uLL;
          *((_OWORD *)v176 + 9) = 0uLL;
          *((_OWORD *)v176 + 6) = 0uLL;
          *((_OWORD *)v176 + 7) = 0uLL;
          *((_OWORD *)v176 + 4) = 0uLL;
          *((_OWORD *)v176 + 5) = 0uLL;
          *((_OWORD *)v176 + 2) = 0uLL;
          *((_OWORD *)v176 + 3) = 0uLL;
          *(_OWORD *)v176 = 0uLL;
          *((_OWORD *)v176 + 1) = 0uLL;
          *((_DWORD *)v176 + 48) = -1;
          v176 += 208;
        }
        while (v176 != v175);
        v177 = 0;
        v178 = *((_QWORD *)v168 + 8);
        if (v178 >= a4)
          v179 = a4;
        else
          v179 = *((_QWORD *)v168 + 8);
        v180 = v178 == 0;
        v181 = v173;
        while (v180)
        {
          if (v178 <= a4)
            goto LABEL_165;
LABEL_158:
          v182 = &v171[208 * ((v177 + *((_QWORD *)v168 + 6)) % v172)];
          *v181 = *(_OWORD *)v182;
          v181[1] = *((_OWORD *)v182 + 1);
          v181[2] = *((_OWORD *)v182 + 2);
          v181[3] = *((_OWORD *)v182 + 3);
          v181[4] = *((_OWORD *)v182 + 4);
          v181[5] = *((_OWORD *)v182 + 5);
          v181[6] = *((_OWORD *)v182 + 6);
          v181[7] = *((_OWORD *)v182 + 7);
          v183 = *((_OWORD *)v182 + 12);
          v185 = *((_OWORD *)v182 + 9);
          v184 = *((_OWORD *)v182 + 10);
          v181[11] = *((_OWORD *)v182 + 11);
          v181[12] = v183;
          v181[9] = v185;
          v181[10] = v184;
          v181[8] = *((_OWORD *)v182 + 8);
          v180 = v178 - 1 == v177++;
          v181 += 13;
        }
        if (v178 <= a4 || v179 != v177)
          goto LABEL_158;
LABEL_165:
        if (v171)
        {
          *((_QWORD *)v168 + 4) = v171;
          operator delete(v171);
        }
        *((_QWORD *)v168 + 3) = v174;
        *((_QWORD *)v168 + 4) = v175;
        *((_QWORD *)v168 + 5) = v175;
        *((_QWORD *)v168 + 6) = 0;
        *((_QWORD *)v168 + 7) = v179 % a4;
        *((_QWORD *)v168 + 8) = v179;
LABEL_168:
        v170 = (_BYTE *)*((_QWORD *)v168 + 9);
        v187 = *((_QWORD *)v168 + 10) - (_QWORD)v170;
        if (v187 == a4)
          goto LABEL_148;
        if (!(_DWORD)a4)
          goto LABEL_147;
        v188 = (char *)operator new(a4);
        bzero(v188, a4);
        v189 = *((_QWORD *)v168 + 14);
        if (v189 >= a4)
          v190 = a4;
        else
          v190 = *((_QWORD *)v168 + 14);
        if (v189 > a4)
        {
          v191 = *((_QWORD *)v168 + 12);
          v192 = v190;
          v193 = v188;
          do
          {
            *v193++ = v170[v191 % v187];
            ++v191;
            --v192;
          }
          while (v192);
          goto LABEL_182;
        }
        if (v189)
        {
          v194 = *((_QWORD *)v168 + 12);
          v195 = v188;
          do
          {
            *v195++ = v170[v194 % v187];
            ++v194;
            --v189;
          }
          while (v189);
LABEL_182:
          *((_QWORD *)v168 + 10) = v170;
          operator delete(v170);
        }
        else if (v170)
        {
          goto LABEL_182;
        }
        *((_QWORD *)v168 + 9) = v188;
        *((_QWORD *)v168 + 10) = &v188[a4];
        *((_QWORD *)v168 + 11) = &v188[a4];
        *((_QWORD *)v168 + 12) = 0;
        *((_QWORD *)v168 + 13) = v190 % a4;
        *((_QWORD *)v168 + 14) = v190;
LABEL_148:
        v168[120] = 1;
        v168 += 128;
        if (v168 != v139)
          continue;
        break;
      }
      v169 = *(int64x2_t *)&__p[1];
LABEL_185:
      v196 = __p[0];
      memset(__p, 0, sizeof(__p));
      *(_QWORD *)v235 = v196;
      *(int64x2_t *)&v235[8] = v169;
      *(void **)&v235[24] = __p[3];
      v236 = v256;
      v237 = v257;
      v238 = *(_QWORD *)&v258[0];
      memset(v258, 0, sizeof(v258));
      v257 = 0uLL;
      v239 = *(_OWORD *)((char *)v258 + 8);
      v240 = *((_QWORD *)&v258[1] + 1);
      v241 = v259;
      v242 = *(_QWORD *)&v260[0];
      v259 = 0uLL;
      memset(v260, 0, sizeof(v260));
      v243 = *(_OWORD *)((char *)v260 + 8);
      v244 = *((_QWORD *)&v260[1] + 1);
      v245 = v261;
      v261 = 0uLL;
      v197 = *(_QWORD *)&v262[0];
      memset(v262, 0, sizeof(v262));
      v247 = *(_OWORD *)((char *)v262 + 8);
      v246 = v197;
      v248 = *((_QWORD *)&v262[1] + 1);
      v249 = v263;
      v263 = 0uLL;
      v251 = v265;
      v198 = v264;
      *(_QWORD *)&v264 = 0;
      v252 = v266;
      v250 = __PAIR128__(*((unint64_t *)&v264 + 1), v198);
      v253 = v267;
      v266 = 0uLL;
      v267 = 0;
      sub_20F1140F4((uint64_t *)__p);
      v38 = a3;
      v26 = a1;
      v200 = *(_QWORD *)(a1 + 24);
      v199 = *(_QWORD *)(a1 + 32);
      if (v200 < v199)
      {
        *(_QWORD *)(v200 + 16) = 0;
        *(_QWORD *)(v200 + 24) = 0;
        *(_QWORD *)(v200 + 8) = 0;
        v39 = *(_OWORD *)v235;
        *(_QWORD *)v235 = 0;
        *(_OWORD *)v200 = v39;
        *(_OWORD *)(v200 + 16) = *(_OWORD *)&v235[16];
        memset(&v235[8], 0, 24);
        *(_OWORD *)(v200 + 32) = v236;
        *(_QWORD *)(v200 + 48) = 0;
        *(_QWORD *)(v200 + 56) = 0;
        *(_QWORD *)(v200 + 64) = 0;
        *(_QWORD *)(v200 + 72) = 0;
        *(_OWORD *)(v200 + 48) = v237;
        *(_QWORD *)(v200 + 64) = v238;
        v237 = 0uLL;
        v238 = 0;
        *(_QWORD *)(v200 + 80) = 0;
        *(_QWORD *)(v200 + 88) = 0;
        *(_OWORD *)(v200 + 72) = v239;
        v239 = 0uLL;
        *(_QWORD *)(v200 + 88) = v240;
        *(_QWORD *)(v200 + 96) = 0;
        v240 = 0;
        *(_QWORD *)(v200 + 104) = 0;
        *(_QWORD *)(v200 + 112) = 0;
        *(_OWORD *)(v200 + 96) = v241;
        v241 = 0uLL;
        *(_QWORD *)(v200 + 112) = v242;
        *(_QWORD *)(v200 + 120) = 0;
        v242 = 0;
        *(_QWORD *)(v200 + 128) = 0;
        *(_QWORD *)(v200 + 136) = 0;
        *(_OWORD *)(v200 + 120) = v243;
        v243 = 0uLL;
        *(_QWORD *)(v200 + 136) = v244;
        *(_QWORD *)(v200 + 144) = 0;
        v244 = 0;
        *(_QWORD *)(v200 + 152) = 0;
        *(_QWORD *)(v200 + 160) = 0;
        *(_OWORD *)(v200 + 144) = v245;
        v245 = 0uLL;
        *(_QWORD *)(v200 + 160) = v246;
        *(_QWORD *)(v200 + 168) = 0;
        v246 = 0;
        *(_QWORD *)(v200 + 176) = 0;
        *(_QWORD *)(v200 + 184) = 0;
        *(_OWORD *)(v200 + 168) = v247;
        v247 = 0uLL;
        *(_QWORD *)(v200 + 184) = v248;
        *(_QWORD *)(v200 + 192) = 0;
        v248 = 0;
        *(_QWORD *)(v200 + 200) = 0;
        *(_QWORD *)(v200 + 208) = 0;
        *(_OWORD *)(v200 + 192) = v249;
        *(_QWORD *)(v200 + 208) = v250;
        v249 = 0uLL;
        *(_QWORD *)&v250 = 0;
        v40 = *((_QWORD *)&v250 + 1);
        *(_DWORD *)(v200 + 224) = v251;
        *(_QWORD *)(v200 + 216) = v40;
        *(_QWORD *)(v200 + 232) = 0;
        *(_QWORD *)(v200 + 240) = 0;
        *(_QWORD *)(v200 + 248) = 0;
        *(_OWORD *)(v200 + 232) = v252;
        *(_QWORD *)(v200 + 248) = v253;
        v252 = 0uLL;
        v253 = 0;
        v41 = v200 + 256;
      }
      else
      {
        v201 = *(_QWORD *)(a1 + 16);
        v202 = (uint64_t)(v200 - v201) >> 8;
        v203 = v202 + 1;
        if ((unint64_t)(v202 + 1) >> 56)
          sub_20E867F44();
        v204 = v199 - v201;
        if (v204 >> 7 > v203)
          v203 = v204 >> 7;
        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFF00)
          v205 = 0xFFFFFFFFFFFFFFLL;
        else
          v205 = v203;
        if (HIBYTE(v205))
          sub_20E877A38();
        v206 = (char *)operator new(v205 << 8);
        v207 = (uint64_t)&v206[256 * v202];
        *(_QWORD *)(v207 + 16) = 0;
        *(_QWORD *)(v207 + 24) = 0;
        v208 = *(_OWORD *)v235;
        v209 = *(_OWORD *)&v235[16];
        v210 = &v206[256 * v205];
        *(_QWORD *)v235 = 0;
        *(_OWORD *)v207 = v208;
        *(_OWORD *)(v207 + 16) = v209;
        memset(&v235[8], 0, 24);
        v211 = v237;
        *(_OWORD *)(v207 + 32) = v236;
        *(_OWORD *)(v207 + 48) = v211;
        *(_QWORD *)(v207 + 64) = v238;
        v238 = 0;
        v237 = 0uLL;
        *(_QWORD *)(v207 + 80) = 0;
        *(_QWORD *)(v207 + 88) = 0;
        *(_OWORD *)(v207 + 72) = v239;
        *(_QWORD *)(v207 + 88) = v240;
        v239 = 0uLL;
        v240 = 0;
        *(_QWORD *)(v207 + 104) = 0;
        *(_QWORD *)(v207 + 112) = 0;
        *(_OWORD *)(v207 + 96) = v241;
        *(_QWORD *)(v207 + 112) = v242;
        v241 = 0uLL;
        v242 = 0;
        *(_QWORD *)(v207 + 128) = 0;
        *(_QWORD *)(v207 + 136) = 0;
        *(_OWORD *)(v207 + 120) = v243;
        *(_QWORD *)(v207 + 136) = v244;
        v243 = 0uLL;
        v244 = 0;
        *(_QWORD *)(v207 + 152) = 0;
        *(_QWORD *)(v207 + 160) = 0;
        *(_OWORD *)(v207 + 144) = v245;
        v212 = v248;
        *(_QWORD *)(v207 + 160) = v246;
        v245 = 0uLL;
        v246 = 0;
        *(_QWORD *)(v207 + 176) = 0;
        *(_QWORD *)(v207 + 184) = 0;
        *(_OWORD *)(v207 + 168) = v247;
        *(_QWORD *)(v207 + 184) = v212;
        v247 = 0uLL;
        v248 = 0;
        *(_QWORD *)(v207 + 200) = 0;
        *(_QWORD *)(v207 + 208) = 0;
        *(_OWORD *)(v207 + 192) = v249;
        v249 = 0uLL;
        v213 = v250;
        v214 = v253;
        *(_QWORD *)&v250 = 0;
        *(_DWORD *)(v207 + 224) = v251;
        v215 = *((_QWORD *)&v250 + 1);
        *(_QWORD *)(v207 + 208) = v213;
        *(_QWORD *)(v207 + 216) = v215;
        *(_QWORD *)(v207 + 240) = 0;
        *(_QWORD *)(v207 + 248) = 0;
        *(_OWORD *)(v207 + 232) = v252;
        *(_QWORD *)(v207 + 248) = v214;
        v252 = 0uLL;
        v41 = v207 + 256;
        v253 = 0;
        v216 = sub_20F18B088(v200, v200, v201, v201, v207, v207);
        v218 = *(uint64_t **)(a1 + 16);
        v217 = *(uint64_t **)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v216;
        *(_QWORD *)(a1 + 24) = v41;
        for (*(_QWORD *)(a1 + 32) = v210; v217 != v218; v217 = sub_20F1140F4(v217 - 32))
          ;
        if (v218)
          operator delete(v218);
      }
      *(_QWORD *)(a1 + 24) = v41;
      sub_20F1140F4((uint64_t *)v235);
      v37 = v232 + 1;
      if (v232 + 1 == v229)
        goto LABEL_197;
    }
    if (v38 < 0)
      goto LABEL_205;
    v47 = (_BYTE *)*((_QWORD *)&v257 + 1);
    v48 = (char *)operator new(__sz);
    v49 = v47 - v46;
    v50 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
    v51 = v50;
    if (v47 != v46)
    {
      if ((unint64_t)(v49 - 8) < 0x58)
      {
        v51 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_33:
          v60 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v51 - 1) = v60;
          v51 -= 8;
        }
        while (v47 != v46);
        goto LABEL_34;
      }
      v51 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
      if (v47 - v48 - (v49 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_33;
      v52 = v49 >> 3;
      v53 = ((unint64_t)(v49 - 8) >> 3) + 1;
      v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v47[-v54];
      v51 = &v50[-v54];
      v56 = &v48[8 * v52 - 16];
      v57 = (__int128 *)(v47 - 16);
      v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *v57;
        *((_OWORD *)v56 - 1) = *(v57 - 1);
        *(_OWORD *)v56 = v59;
        v56 -= 32;
        v57 -= 2;
        v58 -= 4;
      }
      while (v58);
      v47 = v55;
      if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
    }
LABEL_34:
    *(_QWORD *)&v257 = v51;
    *((_QWORD *)&v257 + 1) = v50;
    *(_QWORD *)&v258[0] = &v48[8 * a3];
    if (v46)
      operator delete(v46);
    goto LABEL_36;
  }
LABEL_197:
  v219 = *(char **)(v26 + 144);
  if (a4 > (uint64_t)(*(_QWORD *)(v26 + 160) - (_QWORD)v219) >> 4)
  {
    if (a4 >> 60)
      sub_20E867F44();
    v220 = *(char **)(v26 + 152);
    v221 = (char *)operator new(16 * a4);
    v222 = &v221[v220 - v219];
    v223 = v222;
    if (v220 != v219)
    {
      v223 = &v221[v220 - v219];
      do
      {
        v224 = *((_QWORD *)v220 - 2);
        v220 -= 16;
        v225 = *((_DWORD *)v220 + 2);
        *((_QWORD *)v223 - 2) = v224;
        v223 -= 16;
        *((_DWORD *)v223 + 2) = v225;
      }
      while (v220 != v219);
    }
    *(_QWORD *)(v26 + 144) = v223;
    *(_QWORD *)(v26 + 152) = v222;
    *(_QWORD *)(v26 + 160) = &v221[16 * a4];
    if (v219)
      operator delete(v219);
  }
  *(_BYTE *)(v26 + 112) = 1;
}

void sub_20F16F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_20F1140F4(&a43);
  _Unwind_Resume(a1);
}

void sub_20F16F8E8(_Unwind_Exception *a1)
{
  sub_20F1140F4((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F16F8FC(_Unwind_Exception *a1)
{
  sub_20F1140F4((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F16F910(_Unwind_Exception *a1)
{
  sub_20F1140F4((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F16F924(void **a1, unint64_t a2)
{
  char *v2;
  char *v3;
  char *v6;
  char *v7;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  _OWORD *v31;
  __int128 v32;
  void *v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  char *v38;

  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v3 - (_BYTE *)*a1) >> 3) != a2)
  {
    if (a2)
    {
      if (a2 >= 0x492492492492493)
        sub_20E867F44();
      v6 = (char *)operator new(56 * a2);
      v7 = &v6[56 * a2];
      __asm { FMOV            V1.2D, #-1.0 }
      v13 = v6;
      do
      {
        *(_OWORD *)v13 = 0uLL;
        *((_OWORD *)v13 + 1) = 0uLL;
        *(_DWORD *)v13 = -1;
        *(_OWORD *)(v13 + 8) = _Q1;
        *((_QWORD *)v13 + 5) = 0;
        *((_QWORD *)v13 + 6) = 0;
        *((_QWORD *)v13 + 4) = 0;
        v13 += 56;
      }
      while (v13 != v7);
      v14 = (unint64_t)a1[5];
      if (v14 >= a2)
        v15 = a2;
      else
        v15 = (unint64_t)a1[5];
      v38 = v6;
      if (v14 <= a2)
      {
        if (v14)
        {
          v26 = 0;
          v27 = v6 + 32;
          do
          {
            v29 = *a1;
            v30 = ((unint64_t)a1[3] + (unint64_t)v26)
                % (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3));
            v31 = (char *)*a1 + 56 * v30;
            v32 = *(_OWORD *)((char *)v31 + 9);
            *((_OWORD *)v27 - 2) = *v31;
            *(_OWORD *)(v27 - 23) = v32;
            v33 = *(void **)v27;
            if (*(_QWORD *)v27)
            {
              *((_QWORD *)v27 + 1) = v33;
              operator delete(v33);
              *(_QWORD *)v27 = 0;
              *((_QWORD *)v27 + 1) = 0;
              *((_QWORD *)v27 + 2) = 0;
            }
            v28 = (uint64_t)v29 + 56 * v30;
            *(_OWORD *)v27 = *(_OWORD *)(v28 + 32);
            *((_QWORD *)v27 + 2) = *(_QWORD *)(v28 + 48);
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 40) = 0;
            *(_QWORD *)(v28 + 48) = 0;
            ++v26;
            v27 += 56;
          }
          while (v26 != a1[5]);
        }
      }
      else
      {
        v16 = v6 + 32;
        v17 = 1;
        do
        {
          v18 = v17;
          v19 = *a1;
          v20 = ((unint64_t)a1[3] + v17 - 1) % (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3));
          v21 = (char *)*a1 + 56 * v20;
          v22 = *(_OWORD *)((char *)v21 + 9);
          *((_OWORD *)v16 - 2) = *v21;
          *(_OWORD *)(v16 - 23) = v22;
          v23 = *(void **)v16;
          if (*(_QWORD *)v16)
          {
            *((_QWORD *)v16 + 1) = v23;
            operator delete(v23);
            *(_QWORD *)v16 = 0;
            *((_QWORD *)v16 + 1) = 0;
            *((_QWORD *)v16 + 2) = 0;
          }
          v24 = (uint64_t)v19 + 56 * v20;
          *(_OWORD *)v16 = *(_OWORD *)(v24 + 32);
          *((_QWORD *)v16 + 2) = *(_QWORD *)(v24 + 48);
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = 0;
          *(_QWORD *)(v24 + 48) = 0;
          v16 += 56;
          v17 = v18 + 1;
        }
        while (v15 != v18 || (void *)v18 == a1[5]);
      }
      v34 = (char *)*a1;
      if (*a1)
      {
        v35 = (char *)a1[1];
        v36 = *a1;
        if (v35 != v34)
        {
          do
          {
            v37 = (void *)*((_QWORD *)v35 - 3);
            if (v37)
            {
              *((_QWORD *)v35 - 2) = v37;
              operator delete(v37);
            }
            v35 -= 56;
          }
          while (v35 != v34);
          v36 = *a1;
        }
        a1[1] = v34;
        operator delete(v36);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      *a1 = v38;
      a1[1] = v7;
      a1[2] = v7;
      a1[3] = 0;
      a1[4] = (void *)(v15 % a2);
      a1[5] = (void *)v15;
    }
    else
    {
      while (v3 != v2)
      {
        v25 = (void *)*((_QWORD *)v3 - 3);
        if (v25)
        {
          *((_QWORD *)v3 - 2) = v25;
          operator delete(v25);
        }
        v3 -= 56;
      }
      a1[1] = v2;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
}

void sub_20F16FC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB9E988((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F16FC18(_QWORD *a1, int a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  unsigned int v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  int8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  BOOL v43;
  BOOL v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  BOOL v49;
  float64x2_t v50;
  float64x2_t v51;
  int8x16_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  BOOL v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unsigned __int8 **v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x16_t *v87;
  unsigned __int8 *v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned __int8 *v93;
  unint64_t v94;
  int64x2_t v95;
  int8x16_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int8x16_t *v99;
  int64x2_t v100;
  unint64_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint32x4_t v117;
  int8x16_t v118;
  uint32x4_t v119;
  uint32x4_t v120;
  int8x16_t v121;
  uint32x4_t v122;
  int64x2_t v123;
  int64x2_t v124;
  uint8x16_t v125;
  uint16x8_t v126;
  uint16x8_t v127;
  uint32x4_t v128;
  uint32x4_t v129;
  uint32x4_t v130;
  uint32x4_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int8x8_t *v134;
  unint64_t v135;
  int8x16_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int8x8_t v139;
  uint16x8_t v140;
  uint32x4_t v141;
  int8x16_t v142;
  int64x2_t v143;
  int64x2_t v144;
  uint32x4_t v145;
  int64x2_t v146;
  void *v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  BOOL v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  _DWORD *v161;
  _QWORD *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  BOOL v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _BYTE *v183;
  unint64_t *v184;
  int64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  _OWORD *v190;
  unint64_t *v191;
  uint64_t v192;
  __int128 v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _DWORD *v222;
  double v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  unint64_t v286;
  _QWORD **v287;
  _QWORD **v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  unint64_t v306;
  unint64_t v307;
  const char *v309;
  uint64_t v310;
  size_t v311;
  const char *v312;
  unsigned __int8 v313;
  unsigned __int8 v314;
  const char *v315;
  size_t v316;
  _BYTE *v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE *v320;
  NSObject *v321;
  uint64_t v322;
  uint64_t v323;
  size_t v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  unint64_t *p_shared_owners;
  size_t v328;
  char *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count_vtbl *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  int v369;
  int v370;
  int v371;
  void *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  int *v378;
  int *v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  int v383;
  int v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  char *v414;
  unint64_t v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  _BYTE *v423;
  _QWORD *v424;
  int64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  _OWORD *v430;
  char *v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  _QWORD *v435;
  unsigned int v436;
  _DWORD *v437;
  _DWORD *v438;
  _DWORD *v439;
  uint64_t v440;
  _QWORD *v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  unsigned __int8 **v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v449;
  int v450;
  uint64_t v451;
  _QWORD *__src;
  void **__srca;
  const char *__srcb;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD v457[3];
  int v458;
  const char *v459;
  int v460;
  const char *v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  uint64_t v464;
  uint64_t v465;
  std::__shared_weak_count_vtbl *v466;
  __int128 v467;
  __int128 v468;
  char *v469;
  std::__shared_weak_count_vtbl *v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  char *v473;
  char *v474;
  uint64_t __dst;
  _BYTE v476[15];
  char v477;
  _BYTE v478[48];
  size_t v479;
  unint64_t v480;
  char v481;
  uint64_t v482;

  v482 = *MEMORY[0x24BDAC8D0];
  v9 = a1[9];
  if (a5)
  {
    if (v9)
    {
      if (*(_QWORD *)(a1[5] + 56 * v9 - 16) - *(_QWORD *)(a1[5] + 56 * v9 - 24) == 144)
        goto LABEL_12;
    }
    else if (*(_QWORD *)(a1[5] + 8 * ((uint64_t)(a1[6] - a1[5]) >> 3) - 16)
            - *(_QWORD *)(a1[5] + 8 * ((uint64_t)(a1[6] - a1[5]) >> 3) - 24) == 144)
    {
      goto LABEL_12;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 892, (uint64_t)"mFrames.back().intrinsic_matrices().size() == 2", 47, (uint64_t)"AddSecondaryMeasurements() must be called prior to AddSecondaryMonoMeasurements()", 81, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  else
  {
    v10 = a1[5];
    if (!v9)
      v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v10) >> 3);
    sub_20F1723F0((_QWORD *)(v10 + 56 * v9 - 56), a3);
  }
LABEL_12:
  v436 = a5;
  v455 = a1;
  v11 = a1[2];
  v451 = a5;
  v12 = v11 + ((unint64_t)a5 << 8);
  *(_DWORD *)(v12 + 216) = 0;
  v438 = (_DWORD *)(v12 + 216);
  *(_DWORD *)(v12 + 220) = 0;
  v439 = (_DWORD *)(v12 + 220);
  *(_DWORD *)(v12 + 224) = 0;
  v437 = (_DWORD *)(v12 + 224);
  v13 = *(_QWORD *)v12;
  v14 = operator new();
  sub_20E972DB4(v14, v13);
  memcpy((void *)(v14 + 1000), (const void *)(v13 + 1000), 0x1B8uLL);
  v465 = v14;
  v18 = *(_DWORD *)(v14 + 992);
  if (v18 != -1)
  {
    if (v18 <= 7)
      goto LABEL_14;
LABEL_22:
    v16.f64[0] = *(float64_t *)(a3 + 64);
    v19 = *(float64x2_t *)(a3 + 32);
    v33 = *(float64x2_t *)(a3 + 48);
    v35 = *(int8x16_t *)a3;
    v34 = *(float64x2_t *)(a3 + 16);
    v36 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
    v26 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    v37 = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    *(_QWORD *)&v38 = vextq_s8(v35, v35, 8uLL).u64[0];
    v17.f64[0] = *(float64_t *)(v14 + 64);
    *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vabdq_f64(v16, v17);
    v39 = vabdq_f64(v33, *(float64x2_t *)(v14 + 48));
    v40 = vabdq_f64(v19, *(float64x2_t *)(v14 + 32));
    v41 = vabdq_f64(v34, *(float64x2_t *)(v14 + 16));
    v42 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v14);
    v43 = v42.f64[0] > 1.0e-10;
    if (v42.f64[1] > 1.0e-10)
      v43 = 1;
    if (v41.f64[0] > 1.0e-10)
      v43 = 1;
    if (v41.f64[1] > 1.0e-10)
      v43 = 1;
    if (v40.f64[0] > 1.0e-10)
      v43 = 1;
    if (v40.f64[1] > 1.0e-10)
      v43 = 1;
    if (v39.f64[0] > 1.0e-10)
      v43 = 1;
    v44 = v43 || v39.f64[1] > 1.0e-10 || v17.f64[0] > 1.0e-10;
    if (v18 > 0xB)
    {
      if (v18 > 0xD)
      {
        if (!v44)
          goto LABEL_73;
        goto LABEL_71;
      }
    }
    else if (v18 > 9)
    {
      if (!v44)
        goto LABEL_73;
      goto LABEL_71;
    }
LABEL_54:
    if (!v44)
      goto LABEL_73;
LABEL_71:
    *(_QWORD *)&v33.f64[1] = v36;
    *(float64_t *)&v64 = v19.f64[0];
    *((_QWORD *)&v64 + 1) = v26;
    *(float64_t *)&v65 = v34.f64[0];
    *((_QWORD *)&v65 + 1) = v37;
    *(_QWORD *)&v66 = v35.i64[0];
    *((double *)&v66 + 1) = v38;
    *(_OWORD *)v14 = v66;
    *(_OWORD *)(v14 + 16) = v65;
    *(_OWORD *)(v14 + 32) = v64;
    *(float64x2_t *)(v14 + 48) = v33;
    v30 = *(double *)v35.i64 * v19.f64[0];
    *(float64_t *)(v14 + 64) = v16.f64[0];
    *(double *)(v14 + 72) = 1.0 / *(double *)v35.i64;
    *(double *)(v14 + 80) = -v38 / (*(double *)v35.i64 * v19.f64[0]);
    v31 = v19.f64[0] * v34.f64[0];
    v32 = v38 * *(double *)&v26;
    goto LABEL_72;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_502;
  }
  v18 = *(_DWORD *)(v14 + 992);
  if (v18 > 7)
    goto LABEL_22;
LABEL_14:
  if (v18 > 3)
  {
    v16.f64[0] = *(float64_t *)(a3 + 64);
    v19 = *(float64x2_t *)(a3 + 32);
    v33 = *(float64x2_t *)(a3 + 48);
    v35 = *(int8x16_t *)a3;
    v34 = *(float64x2_t *)(a3 + 16);
    v36 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
    v26 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    v37 = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    *(_QWORD *)&v38 = vextq_s8(v35, v35, 8uLL).u64[0];
    v17.f64[0] = *(float64_t *)(v14 + 64);
    *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vabdq_f64(v16, v17);
    v45 = vabdq_f64(v33, *(float64x2_t *)(v14 + 48));
    v46 = vabdq_f64(v19, *(float64x2_t *)(v14 + 32));
    v47 = vabdq_f64(v34, *(float64x2_t *)(v14 + 16));
    v48 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v14);
    v49 = v48.f64[0] > 1.0e-10;
    if (v48.f64[1] > 1.0e-10)
      v49 = 1;
    if (v47.f64[0] > 1.0e-10)
      v49 = 1;
    if (v47.f64[1] > 1.0e-10)
      v49 = 1;
    if (v46.f64[0] > 1.0e-10)
      v49 = 1;
    if (v46.f64[1] > 1.0e-10)
      v49 = 1;
    if (v45.f64[0] > 1.0e-10)
      v49 = 1;
    v44 = v49 || v45.f64[1] > 1.0e-10 || v17.f64[0] > 1.0e-10;
    if (v18 > 5)
    {
      if (!v44)
        goto LABEL_73;
      goto LABEL_71;
    }
    goto LABEL_54;
  }
  if (v18 <= 1)
  {
    if (v18)
    {
      v15.f64[0] = *(float64_t *)(a3 + 64);
      v19 = *(float64x2_t *)(a3 + 32);
      v20 = *(float64x2_t *)(a3 + 48);
      v22 = *(int8x16_t *)a3;
      v21 = *(float64x2_t *)(a3 + 16);
      v23 = (int8x16_t)vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v14);
      v24 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      v25 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v24, (float64x2_t)vextq_s8(v23, v23, 8uLL)), (int32x4_t)vcgeq_f64(v24, vabdq_f64(v21, *(float64x2_t *)(v14 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v24, vabdq_f64(v19, *(float64x2_t *)(v14 + 32))), (int32x4_t)vcgeq_f64(v24, vabdq_f64(v20, *(float64x2_t *)(v14 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v25)) & 1) != 0
        || (v25.f64[0] = *(float64_t *)(v14 + 64), vabdq_f64(v15, v25).f64[0] > 1.0e-10))
      {
        COERCE_DOUBLE(v26 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).i64[0]);
        *(_QWORD *)&v20.f64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
        *(_QWORD *)&v27 = *(_QWORD *)(a3 + 32);
        *((_QWORD *)&v27 + 1) = v26;
        *(_QWORD *)&v28 = *(_QWORD *)(a3 + 16);
        *((_QWORD *)&v28 + 1) = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
        *(_QWORD *)&v29 = *(_QWORD *)a3;
        *((double *)&v29 + 1) = *(double *)vextq_s8(v22, v22, 8uLL).i64;
        *(_OWORD *)v14 = v29;
        *(_OWORD *)(v14 + 16) = v28;
        *(_OWORD *)(v14 + 32) = v27;
        *(float64x2_t *)(v14 + 48) = v20;
        v30 = *(double *)v22.i64 * v19.f64[0];
        *(float64_t *)(v14 + 64) = v15.f64[0];
        *(double *)(v14 + 72) = 1.0 / *(double *)v22.i64;
        *(double *)(v14 + 80) = -*((double *)&v29 + 1) / (*(double *)v22.i64 * v19.f64[0]);
        v31 = v19.f64[0] * v21.f64[0];
        v32 = *((double *)&v29 + 1) * *(double *)&v26;
LABEL_72:
        *(double *)(v14 + 88) = -(v31 - v32) / v30;
        *(_QWORD *)(v14 + 96) = 0;
        *(double *)(v14 + 104) = 1.0 / v19.f64[0];
        *(double *)(v14 + 112) = -*(double *)&v26 / v19.f64[0];
        *(_QWORD *)(v14 + 120) = 0;
        *(_QWORD *)(v14 + 128) = 0;
        *(_OWORD *)(v14 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v14 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v14 + 160) = 0;
        goto LABEL_73;
      }
      goto LABEL_73;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_502:
    abort();
  }
  v15.f64[0] = *(float64_t *)(a3 + 64);
  v19 = *(float64x2_t *)(a3 + 32);
  v50 = *(float64x2_t *)(a3 + 48);
  v52 = *(int8x16_t *)a3;
  v51 = *(float64x2_t *)(a3 + 16);
  v53 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  v26 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  v54 = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  *(_QWORD *)&v55 = vextq_s8(v52, v52, 8uLL).u64[0];
  v17.f64[0] = *(float64_t *)(v14 + 64);
  *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vabdq_f64(v15, v17);
  v56 = vabdq_f64(v50, *(float64x2_t *)(v14 + 48));
  v57 = vabdq_f64(v19, *(float64x2_t *)(v14 + 32));
  v58 = vabdq_f64(v51, *(float64x2_t *)(v14 + 16));
  v59 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v14);
  v60 = v59.f64[0] > 1.0e-10;
  if (v59.f64[1] > 1.0e-10)
    v60 = 1;
  if (v58.f64[0] > 1.0e-10)
    v60 = 1;
  if (v58.f64[1] > 1.0e-10)
    v60 = 1;
  if (v57.f64[0] > 1.0e-10)
    v60 = 1;
  if (v57.f64[1] > 1.0e-10)
    v60 = 1;
  if (v56.f64[0] > 1.0e-10)
    v60 = 1;
  if (v60 || v56.f64[1] > 1.0e-10 || v17.f64[0] > 1.0e-10)
  {
    *(_QWORD *)&v50.f64[1] = v53;
    *(_QWORD *)&v61 = *(_QWORD *)(a3 + 32);
    *((_QWORD *)&v61 + 1) = v26;
    *(_QWORD *)&v62 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)&v62 + 1) = v54;
    *(_QWORD *)&v63 = *(_QWORD *)a3;
    *((double *)&v63 + 1) = v55;
    *(_OWORD *)v14 = v63;
    *(_OWORD *)(v14 + 16) = v62;
    *(_OWORD *)(v14 + 32) = v61;
    *(float64x2_t *)(v14 + 48) = v50;
    v30 = *(double *)v52.i64 * v19.f64[0];
    *(float64_t *)(v14 + 64) = v15.f64[0];
    *(double *)(v14 + 72) = 1.0 / *(double *)v52.i64;
    *(double *)(v14 + 80) = -v55 / (*(double *)v52.i64 * v19.f64[0]);
    v31 = v19.f64[0] * v51.f64[0];
    v32 = v55 * *(double *)&v26;
    goto LABEL_72;
  }
LABEL_73:
  v67 = (uint64_t)(a4[1] - *a4) >> 4;
  *(_QWORD *)v478 = 0;
  v441 = (_QWORD *)(v12 + 72);
  sub_20F172580(v12 + 72, v67, (const double *)v478);
  v68 = (unsigned __int8 **)(v12 + 144);
  v478[0] = 0;
  sub_20F1727A8((uint64_t)v68, v67, v478);
  v69 = v11 + (v451 << 8);
  v70 = *(unsigned __int8 **)(v69 + 152);
  v445 = (unsigned __int8 **)(v69 + 152);
  v71 = v70 - *v68;
  if (v70 != *v68)
  {
    v72 = 0;
    do
    {
      if (*(_DWORD *)(a4[13] + 4 * v72) == -1)
        (*v68)[v72] = 1;
      ++v72;
    }
    while (v71 != v72);
  }
  v442 = v67;
  v440 = v11;
  v456 = a4;
  if (v455[10] > 1uLL)
  {
    if (a4[1] - *a4 != a4[4] - a4[3]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 194, (uint64_t)"observations.size() == calibrated_observations.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v74 = (int *)a4[6];
    v73 = (int *)a4[7];
    if (v74 != v73)
    {
      v75 = v456 + 13;
      v76 = v455[2] + (v451 << 8);
      __src = (_QWORD *)(v76 + 72);
      v77 = (_QWORD *)(v76 + 48);
      v78 = (_QWORD *)(v76 + 144);
      v79 = (_DWORD *)(v76 + 216);
      do
      {
        *(_BYTE *)(*v78 + *v74) = 1;
        v80 = *v74;
        if (*(_DWORD *)(*v75 + 4 * v80) != -1)
        {
          v81 = v74[1];
          v82 = *(_QWORD **)(*v77 + 8 * v81);
          if (v82)
          {
            sub_20F17C564(*(_DWORD **)(*v77 + 8 * v81), v77, v74, v75);
            v83 = *v74;
            v84 = *v456;
            *(_OWORD *)v478 = *(_OWORD *)(v456[3] + 16 * v83);
            sub_20F17C82C(v82, a2, (_OWORD *)(v84 + 16 * v83), v478, *(double *)(v456[20] + 8 * v83), *(double *)(v456[23] + 8 * v83));
            *(_QWORD *)(*__src + 8 * *v74) = v82;
            ++*v79;
          }
          else
          {
            v85 = v455[2] + (v451 << 8);
            v86 = *(_QWORD *)(v85 + 168);
            if (v86 != *(_QWORD *)(v85 + 176) && *(_DWORD *)(v86 + 4 * v81) != -1)
              *(_BYTE *)(*v78 + v80) = 0;
          }
        }
        v74 += 2;
      }
      while (v74 != v73);
    }
  }
  v87 = (int8x16_t *)*v68;
  v88 = *v445;
  if (*v68 == *v445)
  {
    v91 = v455;
    v90 = v456;
    v455[16] = v455[15];
    __srca = (void **)(v455 + 15);
    v455[19] = v455[18];
    goto LABEL_190;
  }
  v89 = v88 - (unsigned __int8 *)v87;
  v91 = v455;
  v90 = v456;
  if ((unint64_t)(v88 - (unsigned __int8 *)v87) < 8)
  {
    v92 = 0;
    v93 = (unsigned __int8 *)v87;
    goto LABEL_105;
  }
  if (v89 >= 0x20)
  {
    v95 = 0uLL;
    v96 = (int8x16_t)vdupq_n_s64(1uLL);
    v97 = 0uLL;
    v94 = v89 & 0xFFFFFFFFFFFFFFE0;
    v98 = 0uLL;
    v99 = v87 + 1;
    v100 = 0uLL;
    v101 = v89 & 0xFFFFFFFFFFFFFFE0;
    v102 = 0uLL;
    v103 = 0uLL;
    v104 = 0uLL;
    v105 = 0uLL;
    v106 = 0uLL;
    v107 = 0uLL;
    v108 = 0uLL;
    v109 = 0uLL;
    v110 = 0uLL;
    v111 = 0uLL;
    v112 = 0uLL;
    v113 = 0uLL;
    do
    {
      v114 = (uint8x16_t)vceqzq_s8(v99[-1]);
      v115 = vmovl_u8(*(uint8x8_t *)v114.i8);
      v116 = vmovl_high_u8(v114);
      v117 = vmovl_high_u16(v116);
      v118.i64[0] = v117.u32[2];
      v118.i64[1] = v117.u32[3];
      v105 = vaddq_s64(v105, (int64x2_t)vandq_s8(v118, v96));
      v119 = vmovl_high_u16(v115);
      v120 = vmovl_u16(*(uint16x4_t *)v116.i8);
      v118.i64[0] = v117.u32[0];
      v118.i64[1] = v117.u32[1];
      v104 = vaddq_s64(v104, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v120.u32[2];
      v118.i64[1] = v120.u32[3];
      v103 = vaddq_s64(v103, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v119.u32[2];
      v118.i64[1] = v119.u32[3];
      v100 = vaddq_s64(v100, (int64x2_t)vandq_s8(v118, v96));
      v121 = *v99;
      v99 += 2;
      v122 = vmovl_u16(*(uint16x4_t *)v115.i8);
      v118.i64[0] = v120.u32[0];
      v118.i64[1] = v120.u32[1];
      v102 = vaddq_s64(v102, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v122.u32[0];
      v118.i64[1] = v122.u32[1];
      v123 = (int64x2_t)vandq_s8(v118, v96);
      v118.i64[0] = v122.u32[2];
      v118.i64[1] = v122.u32[3];
      v124 = (int64x2_t)vandq_s8(v118, v96);
      v118.i64[0] = v119.u32[0];
      v118.i64[1] = v119.u32[1];
      v125 = (uint8x16_t)vceqzq_s8(v121);
      v98 = vaddq_s64(v98, (int64x2_t)vandq_s8(v118, v96));
      v126 = vmovl_u8(*(uint8x8_t *)v125.i8);
      v127 = vmovl_high_u8(v125);
      v97 = vaddq_s64(v97, v124);
      v128 = vmovl_high_u16(v127);
      v95 = vaddq_s64(v95, v123);
      v118.i64[0] = v128.u32[2];
      v118.i64[1] = v128.u32[3];
      v113 = vaddq_s64(v113, (int64x2_t)vandq_s8(v118, v96));
      v129 = vmovl_high_u16(v126);
      v130 = vmovl_u16(*(uint16x4_t *)v127.i8);
      v118.i64[0] = v128.u32[0];
      v118.i64[1] = v128.u32[1];
      v112 = vaddq_s64(v112, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v130.u32[2];
      v118.i64[1] = v130.u32[3];
      v111 = vaddq_s64(v111, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v129.u32[2];
      v118.i64[1] = v129.u32[3];
      v109 = vaddq_s64(v109, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v130.u32[0];
      v118.i64[1] = v130.u32[1];
      v110 = vaddq_s64(v110, (int64x2_t)vandq_s8(v118, v96));
      v131 = vmovl_u16(*(uint16x4_t *)v126.i8);
      v118.i64[0] = v129.u32[0];
      v118.i64[1] = v129.u32[1];
      v108 = vaddq_s64(v108, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v131.u32[2];
      v118.i64[1] = v131.u32[3];
      v107 = vaddq_s64(v107, (int64x2_t)vandq_s8(v118, v96));
      v118.i64[0] = v131.u32[0];
      v118.i64[1] = v131.u32[1];
      v106 = vaddq_s64(v106, (int64x2_t)vandq_s8(v118, v96));
      v101 -= 32;
    }
    while (v101);
    v92 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v106, v95), vaddq_s64(v110, v102)), vaddq_s64(vaddq_s64(v108, v98), vaddq_s64(v112, v104))), vaddq_s64(vaddq_s64(vaddq_s64(v107, v97), vaddq_s64(v111, v103)), vaddq_s64(vaddq_s64(v109, v100), vaddq_s64(v113, v105)))));
    if (v89 == v94)
      goto LABEL_108;
    if ((v89 & 0x18) == 0)
    {
      v93 = &v87->u8[v94];
      goto LABEL_105;
    }
  }
  else
  {
    v92 = 0;
    v94 = 0;
  }
  v93 = &v87->u8[v89 & 0xFFFFFFFFFFFFFFF8];
  v132 = 0uLL;
  v133 = (int64x2_t)v92;
  v134 = (int8x8_t *)&v87->i8[v94];
  v135 = v94 - (v89 & 0xFFFFFFFFFFFFFFF8);
  v136 = (int8x16_t)vdupq_n_s64(1uLL);
  v137 = 0uLL;
  v138 = 0uLL;
  do
  {
    v139 = *v134++;
    v140 = vmovl_u8((uint8x8_t)vceqz_s8(v139));
    v141 = vmovl_u16(*(uint16x4_t *)v140.i8);
    v142.i64[0] = v141.u32[0];
    v142.i64[1] = v141.u32[1];
    v143 = (int64x2_t)vandq_s8(v142, v136);
    v142.i64[0] = v141.u32[2];
    v142.i64[1] = v141.u32[3];
    v144 = (int64x2_t)vandq_s8(v142, v136);
    v145 = vmovl_high_u16(v140);
    v142.i64[0] = v145.u32[0];
    v142.i64[1] = v145.u32[1];
    v146 = (int64x2_t)vandq_s8(v142, v136);
    v142.i64[0] = v145.u32[2];
    v142.i64[1] = v145.u32[3];
    v138 = vaddq_s64(v138, (int64x2_t)vandq_s8(v142, v136));
    v137 = vaddq_s64(v137, v146);
    v132 = vaddq_s64(v132, v144);
    v133 = vaddq_s64(v133, v143);
    v135 += 8;
  }
  while (v135);
  v92 = vaddvq_s64(vaddq_s64(vaddq_s64(v133, v137), vaddq_s64(v132, v138)));
  if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8))
  {
    do
    {
LABEL_105:
      if (!*v93++)
        ++v92;
    }
    while (v93 != v88);
  }
LABEL_108:
  v148 = (void *)v455[15];
  v455[16] = v148;
  __srca = (void **)(v455 + 15);
  v455[19] = v455[18];
  if (v92)
  {
    if (v92 > (uint64_t)(v455[17] - (_QWORD)v148) >> 3)
    {
      if (v92 >> 61)
LABEL_489:
        sub_20E867F44();
      v149 = (char *)operator new(8 * v92);
      v91 = v455;
      v90 = v456;
      v455[15] = v149;
      v455[16] = v149;
      v455[17] = &v149[8 * v92];
      if (v148)
        operator delete(v148);
    }
    v150 = *((unsigned int *)v91 + 3);
    if (v91[10] >= v150)
    {
      v152 = v91[9];
      v153 = v152 >= v150;
      v154 = v152 - v150;
      v151 = v91[5];
      if (!v153)
        v154 += 0x6DB6DB6DB6DB6DB7 * ((v91[6] - v151) >> 3);
      v446 = *(unsigned int *)(v151 + 56 * v154);
    }
    else
    {
      v446 = 0;
      v151 = v91[5];
    }
    v155 = v91[2] + (v451 << 8);
    v158 = *(_QWORD *)(v155 + 8);
    v157 = (uint64_t *)(v155 + 8);
    v156 = v158;
    if (v157[1] != v158)
    {
      v159 = 0;
      v160 = *(_DWORD *)(v151 + 56 * v91[8]);
      v443 = v160;
      do
      {
        v162 = (_QWORD *)(v156 + (v159 << 7));
        v163 = v162 + 3;
        v164 = v162[8];
        if (v164)
        {
          v165 = v162[7];
          if (v165)
            v166 = v165 - 1;
          else
            v166 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v156 + (v159 << 7) + 32) - *v163) >> 4) - 1;
          v167 = *(_DWORD *)(*v163 + 208 * v166 + 192);
          if (v167 < v160)
            goto LABEL_141;
        }
        else
        {
          v167 = -1;
          if (v160 > -1)
            goto LABEL_141;
        }
        if (*((_BYTE *)v91 + 9))
          v168 = v164 == 1;
        else
          v168 = 0;
        if (!v168 || v446 <= v167)
        {
          if (v164)
          {
            v170 = v156 + (v159 << 7);
            v171 = *(_QWORD *)(v170 + 56);
            v172 = *v163;
            if (!v171)
              v171 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v170 + 32) - v172) >> 4);
            v196 = *(int *)(v172 + 208 * v171 - 16);
            v197 = v455;
            v199 = (char *)v455[19];
            v198 = v455[20];
            if ((unint64_t)v199 >= v198)
            {
LABEL_172:
              v200 = (char *)v197[18];
              v201 = (v199 - v200) >> 4;
              v202 = v201 + 1;
              if ((unint64_t)(v201 + 1) >> 60)
                sub_20E867F44();
              v203 = v198 - (_QWORD)v200;
              if (v203 >> 3 > v202)
                v202 = v203 >> 3;
              if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0)
                v204 = 0xFFFFFFFFFFFFFFFLL;
              else
                v204 = v202;
              if (v204)
              {
                if (v204 >> 60)
LABEL_490:
                  sub_20E877A38();
                v205 = (char *)operator new(16 * v204);
                v206 = (uint64_t)&v205[16 * v201];
                *(_QWORD *)v206 = v196;
                *(_DWORD *)(v206 + 8) = v159;
                v207 = v206;
                if (v199 != v200)
                {
LABEL_181:
                  v91 = v455;
                  do
                  {
                    v208 = *((_QWORD *)v199 - 2);
                    v199 -= 16;
                    v209 = *((_DWORD *)v199 + 2);
                    *(_QWORD *)(v207 - 16) = v208;
                    v207 -= 16;
                    *(_DWORD *)(v207 + 8) = v209;
                  }
                  while (v199 != v200);
                  v199 = (char *)v455[18];
                  v161 = (_DWORD *)(v206 + 16);
                  v455[18] = v207;
                  v455[19] = v206 + 16;
                  v455[20] = &v205[16 * v204];
                  if (v199)
LABEL_184:
                    operator delete(v199);
LABEL_185:
                  v90 = v456;
                  v160 = v443;
LABEL_121:
                  v91[19] = v161;
                  goto LABEL_122;
                }
              }
              else
              {
                v205 = 0;
                v206 = 16 * v201;
                *(_QWORD *)v206 = v196;
                *(_DWORD *)(v206 + 8) = v159;
                v207 = 16 * v201;
                if (v199 != v200)
                  goto LABEL_181;
              }
              v91 = v455;
              v161 = (_DWORD *)(v206 + 16);
              v455[18] = v207;
              v455[19] = v206 + 16;
              v455[20] = &v205[16 * v204];
              if (v199)
                goto LABEL_184;
              goto LABEL_185;
            }
          }
          else
          {
            v196 = -1;
            v197 = v455;
            v199 = (char *)v455[19];
            v198 = v455[20];
            if ((unint64_t)v199 >= v198)
              goto LABEL_172;
          }
          *(_QWORD *)v199 = v196;
          *((_DWORD *)v199 + 2) = v159;
          v161 = v199 + 16;
          v91 = v197;
          goto LABEL_121;
        }
LABEL_141:
        v174 = (unint64_t *)v91[16];
        v173 = v91[17];
        if ((unint64_t)v174 < v173)
        {
          *v174 = v159;
          v175 = (uint64_t)(v174 + 1);
          v91[16] = v174 + 1;
          v176 = *v157 + (v159 << 7);
          if (*(_DWORD *)v176 == -1)
            goto LABEL_164;
          goto LABEL_165;
        }
        v177 = (unint64_t *)*__srca;
        v178 = (char *)v174 - (_BYTE *)*__srca;
        v179 = v178 >> 3;
        v180 = (v178 >> 3) + 1;
        if (v180 >> 61)
          goto LABEL_489;
        v181 = v173 - (_QWORD)v177;
        if (v181 >> 2 > v180)
          v180 = v181 >> 2;
        if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
          v182 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v182 = v180;
        if (!v182)
        {
          v183 = 0;
          v184 = (unint64_t *)(8 * v179);
          *(_QWORD *)(8 * v179) = v159;
          v175 = 8 * v179 + 8;
          v185 = (char *)v174 - (char *)v177;
          if (v174 == v177)
            goto LABEL_161;
LABEL_155:
          v186 = v185 - 8;
          if (v186 < 0x58)
            goto LABEL_505;
          if ((unint64_t)((char *)v174 - v183 - v178) < 0x20)
            goto LABEL_505;
          v187 = (v186 >> 3) + 1;
          v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
          v189 = &v174[v188 / 0xFFFFFFFFFFFFFFF8];
          v184 = (unint64_t *)((char *)v184 - v188);
          v190 = &v183[8 * v179 - 16];
          v191 = v174 - 2;
          v192 = v187 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            *v190 = v193;
            v190 -= 2;
            v191 -= 4;
            v192 -= 4;
          }
          while (v192);
          v174 = v189;
          if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_505:
            do
            {
              v194 = *--v174;
              *--v184 = v194;
            }
            while (v174 != v177);
          }
          goto LABEL_161;
        }
        if (v182 >> 61)
          goto LABEL_490;
        v183 = operator new(8 * v182);
        v184 = (unint64_t *)&v183[8 * v179];
        *v184 = v159;
        v175 = (uint64_t)(v184 + 1);
        v185 = (char *)v174 - (char *)v177;
        if (v174 != v177)
          goto LABEL_155;
LABEL_161:
        v195 = &v183[8 * v182];
        v91 = v455;
        v455[15] = v184;
        v455[16] = v175;
        v455[17] = v195;
        if (v177)
          operator delete(v177);
        v90 = v456;
        v160 = v443;
        v455[16] = v175;
        v176 = *v157 + (v159 << 7);
        if (*(_DWORD *)v176 == -1)
        {
LABEL_164:
          if (!*(_QWORD *)(v176 + 64))
            goto LABEL_166;
        }
LABEL_165:
        *(_QWORD *)v176 = -1;
        *(_QWORD *)(v176 + 56) = 0;
        *(_QWORD *)(v176 + 64) = 0;
        *(_QWORD *)(v176 + 48) = 0;
        *(_QWORD *)(v176 + 104) = 0;
        *(_QWORD *)(v176 + 112) = 0;
        *(_QWORD *)(v176 + 96) = 0;
        v175 = v91[16];
LABEL_166:
        if (v92 <= (v175 - (uint64_t)*__srca) >> 3)
          break;
LABEL_122:
        ++v159;
        v156 = *v157;
      }
      while (v159 < (v157[1] - *v157) >> 7);
    }
    v210 = v92 - ((uint64_t)(v91[16] - v91[15]) >> 3);
    if (v210)
    {
      v237 = (uint64_t *)v91[18];
      v236 = (uint64_t *)v91[19];
      v238 = &v237[2 * v210];
      if (v238 == v236)
        goto LABEL_461;
      while (1)
      {
        v239 = ((char *)v236 - (char *)v237) >> 4;
        if (v239 < 2)
          goto LABEL_461;
        if (v239 == 3)
        {
          v393 = v237 + 2;
          v394 = v237[2];
          v396 = *(v236 - 2);
          v391 = v236 - 2;
          v395 = v396;
          if (v394 >= *v237)
          {
            if (v395 < v394)
            {
              *(_OWORD *)v478 = *(_OWORD *)v393;
              v408 = *v391;
              *((_DWORD *)v237 + 6) = *((_DWORD *)v391 + 2);
              *v393 = v408;
              v409 = *(_QWORD *)v478;
              *((_DWORD *)v391 + 2) = *(_DWORD *)&v478[8];
              *v391 = v409;
              if (v237[2] < *v237)
              {
                *(_OWORD *)v478 = *(_OWORD *)v237;
                *v237 = *v393;
                *((_DWORD *)v237 + 2) = *((_DWORD *)v237 + 6);
                *v393 = *(_QWORD *)v478;
                *((_DWORD *)v237 + 6) = *(_DWORD *)&v478[8];
              }
            }
            goto LABEL_461;
          }
          if (v395 >= v394)
          {
            *(_OWORD *)v478 = *(_OWORD *)v237;
            *v237 = *v393;
            *((_DWORD *)v237 + 2) = *((_DWORD *)v237 + 6);
            *v393 = *(_QWORD *)v478;
            *((_DWORD *)v237 + 6) = *(_DWORD *)&v478[8];
            if (*v391 >= v237[2])
              goto LABEL_461;
            *(_OWORD *)v478 = *(_OWORD *)v393;
            v410 = *v391;
            *((_DWORD *)v393 + 2) = *((_DWORD *)v391 + 2);
            *v393 = v410;
          }
          else
          {
LABEL_443:
            *(_OWORD *)v478 = *(_OWORD *)v237;
            v397 = *v391;
            *((_DWORD *)v237 + 2) = *((_DWORD *)v391 + 2);
            *v237 = v397;
          }
          v398 = *(_QWORD *)v478;
          *((_DWORD *)v391 + 2) = *(_DWORD *)&v478[8];
          *v391 = v398;
          goto LABEL_461;
        }
        if (v239 == 2)
        {
          v392 = *(v236 - 2);
          v391 = v236 - 2;
          if (v392 >= *v237)
            goto LABEL_461;
          goto LABEL_443;
        }
        if ((char *)v236 - (char *)v237 <= 127)
        {
          while (v237 != v236 - 2)
          {
            v399 = v237;
            v237 += 2;
            if (v399 != v236 && v237 != v236)
            {
              v400 = *v399;
              v401 = v237;
              v402 = v399;
              v403 = v237;
              do
              {
                v405 = *v403;
                v403 += 2;
                v404 = v405;
                if (v405 < v400)
                {
                  v400 = v404;
                  v402 = v401;
                }
                v401 = v403;
              }
              while (v403 != v236);
              if (v402 != v399)
              {
                *(_OWORD *)v478 = *(_OWORD *)v399;
                v406 = *v402;
                *((_DWORD *)v399 + 2) = *((_DWORD *)v402 + 2);
                *v399 = v406;
                v407 = *(_QWORD *)v478;
                *((_DWORD *)v402 + 2) = *(_DWORD *)&v478[8];
                *v402 = v407;
              }
            }
          }
          goto LABEL_461;
        }
        v240 = (unint64_t)&v237[2 * (v239 >> 1)];
        v241 = v236 - 2;
        v242 = *(v236 - 2);
        v243 = *(_QWORD *)v240;
        if (*(_QWORD *)v240 >= *v237)
        {
          if (v242 >= v243)
          {
            v246 = 0;
            v247 = *v237;
            v248 = *(_QWORD *)v240;
            if (*v237 < *(_QWORD *)v240)
              goto LABEL_218;
            goto LABEL_236;
          }
          *(_OWORD *)v478 = *(_OWORD *)v240;
          v258 = *v241;
          *(_DWORD *)(v240 + 8) = *((_DWORD *)v236 - 2);
          *(_QWORD *)v240 = v258;
          v259 = *(_QWORD *)v478;
          *((_DWORD *)v236 - 2) = *(_DWORD *)&v478[8];
          *v241 = v259;
          if (*(_QWORD *)v240 < *v237)
          {
            *(_OWORD *)v478 = *(_OWORD *)v237;
            v260 = *(_QWORD *)v240;
            *((_DWORD *)v237 + 2) = *(_DWORD *)(v240 + 8);
            *v237 = v260;
            v261 = *(_QWORD *)v478;
            *(_DWORD *)(v240 + 8) = *(_DWORD *)&v478[8];
            *(_QWORD *)v240 = v261;
            goto LABEL_233;
          }
        }
        else
        {
          if (v242 < v243)
          {
            *(_OWORD *)v478 = *(_OWORD *)v237;
            v244 = *v241;
            *((_DWORD *)v237 + 2) = *((_DWORD *)v236 - 2);
            *v237 = v244;
            v245 = *(_QWORD *)v478;
            *((_DWORD *)v236 - 2) = *(_DWORD *)&v478[8];
            *v241 = v245;
            v246 = 1;
            v247 = *v237;
            v248 = *(_QWORD *)v240;
            if (*v237 < *(_QWORD *)v240)
              goto LABEL_218;
            goto LABEL_236;
          }
          *(_OWORD *)v478 = *(_OWORD *)v237;
          v262 = *(_QWORD *)v240;
          *((_DWORD *)v237 + 2) = *(_DWORD *)(v240 + 8);
          *v237 = v262;
          v263 = *(_QWORD *)v478;
          *(_DWORD *)(v240 + 8) = *(_DWORD *)&v478[8];
          *(_QWORD *)v240 = v263;
          if (*v241 < *(_QWORD *)v240)
          {
            *(_OWORD *)v478 = *(_OWORD *)v240;
            v264 = *v241;
            *(_DWORD *)(v240 + 8) = *((_DWORD *)v236 - 2);
            *(_QWORD *)v240 = v264;
            v265 = *(_QWORD *)v478;
            *((_DWORD *)v236 - 2) = *(_DWORD *)&v478[8];
            *v241 = v265;
LABEL_233:
            v246 = 2;
            v247 = *v237;
            v248 = *(_QWORD *)v240;
            if (*v237 < *(_QWORD *)v240)
              goto LABEL_218;
            goto LABEL_236;
          }
        }
        v246 = 1;
        v247 = *v237;
        v248 = *(_QWORD *)v240;
        if (*v237 < *(_QWORD *)v240)
        {
LABEL_218:
          v249 = (unint64_t)(v236 - 2);
          v250 = v237 + 2;
          if (v237 + 2 >= v236 - 2)
            goto LABEL_240;
          goto LABEL_219;
        }
LABEL_236:
        v249 = (unint64_t)(v236 - 2);
        while (1)
        {
          v249 -= 16;
          if ((uint64_t *)v249 == v237)
            break;
          if (*(_QWORD *)v249 < v248)
          {
            *(_OWORD *)v478 = *(_OWORD *)v237;
            v266 = *(_QWORD *)v249;
            *((_DWORD *)v237 + 2) = *(_DWORD *)(v249 + 8);
            *v237 = v266;
            v267 = *(_QWORD *)v478;
            *(_DWORD *)(v249 + 8) = *(_DWORD *)&v478[8];
            *(_QWORD *)v249 = v267;
            ++v246;
            v250 = v237 + 2;
            if ((unint64_t)(v237 + 2) >= v249)
            {
LABEL_240:
              v253 = v250;
              goto LABEL_241;
            }
LABEL_219:
            v251 = v250;
            while (1)
            {
              v252 = *(_QWORD *)v240;
              v253 = v251 - 2;
              do
              {
                v254 = v253[2];
                v253 += 2;
              }
              while (v254 < v252);
              v251 = v253 + 2;
              do
              {
                v255 = *(_QWORD *)(v249 - 16);
                v249 -= 16;
              }
              while (v255 >= v252);
              if ((unint64_t)v253 >= v249)
                break;
              *(_OWORD *)v478 = *(_OWORD *)v253;
              v256 = *(_QWORD *)v249;
              *((_DWORD *)v253 + 2) = *(_DWORD *)(v249 + 8);
              *v253 = v256;
              v257 = *(_QWORD *)v478;
              *(_DWORD *)(v249 + 8) = *(_DWORD *)&v478[8];
              *(_QWORD *)v249 = v257;
              ++v246;
              if (v253 == (uint64_t *)v240)
                v240 = v249;
            }
LABEL_241:
            if (v253 != (uint64_t *)v240 && *(_QWORD *)v240 < *v253)
            {
              *(_OWORD *)v478 = *(_OWORD *)v253;
              v268 = *(_QWORD *)v240;
              *((_DWORD *)v253 + 2) = *(_DWORD *)(v240 + 8);
              *v253 = v268;
              v269 = *(_QWORD *)v478;
              *(_DWORD *)(v240 + 8) = *(_DWORD *)&v478[8];
              *(_QWORD *)v240 = v269;
              ++v246;
            }
            if (v253 != v238)
            {
              if (v246)
              {
LABEL_246:
                if (v253 <= v238)
                {
                  v270 = v253 + 2;
                }
                else
                {
                  v236 = v253;
                  v270 = v237;
                }
                goto LABEL_273;
              }
              if (v253 <= v238)
              {
                v274 = v253 + 2;
                while (v274 != v236)
                {
                  v275 = *v274;
                  v276 = *(v274 - 2);
                  v274 += 2;
                  if (v275 < v276)
                    goto LABEL_246;
                }
              }
              else
              {
                while (v250 != v253)
                {
                  v271 = *v250;
                  v272 = *(v250 - 2);
                  v250 += 2;
                  if (v271 < v272)
                    goto LABEL_246;
                }
              }
            }
            goto LABEL_461;
          }
        }
        v273 = v237 + 2;
        if (v247 >= *v241)
        {
          if (v273 == v241)
            goto LABEL_461;
          while (v247 >= *v273)
          {
            v273 += 2;
            if (v273 == v241)
              goto LABEL_461;
          }
          *(_OWORD *)v478 = *(_OWORD *)v273;
          v277 = *v241;
          *((_DWORD *)v273 + 2) = *((_DWORD *)v236 - 2);
          *v273 = v277;
          v273 += 2;
          v278 = *(_QWORD *)v478;
          *((_DWORD *)v236 - 2) = *(_DWORD *)&v478[8];
          *v241 = v278;
        }
        if (v273 == v241)
          goto LABEL_461;
        while (1)
        {
          v279 = *v237;
          v270 = v273 - 2;
          do
          {
            v280 = v270[2];
            v270 += 2;
          }
          while (v279 >= v280);
          v273 = v270 + 2;
          do
          {
            v281 = *(v241 - 2);
            v241 -= 2;
          }
          while (v279 < v281);
          if (v270 >= v241)
            break;
          *(_OWORD *)v478 = *(_OWORD *)v270;
          v282 = *v241;
          *((_DWORD *)v270 + 2) = *((_DWORD *)v241 + 2);
          *v270 = v282;
          v283 = *(_QWORD *)v478;
          *((_DWORD *)v241 + 2) = *(_DWORD *)&v478[8];
          *v241 = v283;
        }
        if (v270 > v238)
        {
LABEL_461:
          v411 = 0;
          while (1)
          {
            v412 = *(int *)(v91[18] + 16 * v411 + 8);
            v413 = v91;
            v414 = (char *)v91[16];
            v415 = v413[17];
            if ((unint64_t)v414 >= v415)
              break;
            *(_QWORD *)v414 = v412;
            v416 = (uint64_t)(v414 + 8);
            v91 = v455;
LABEL_486:
            v91[16] = v416;
            v435 = (_QWORD *)(*v157 + ((uint64_t)*(int *)(v91[18] + 16 * v411 + 8) << 7));
            if (*(_DWORD *)v435 != -1 || v435[8])
            {
              *v435 = -1;
              v435[7] = 0;
              v435[8] = 0;
              v435[6] = 0;
              v435[13] = 0;
              v435[14] = 0;
              v435[12] = 0;
            }
            if (++v411 == v210)
              goto LABEL_190;
          }
          v417 = (char *)*__srca;
          v418 = v414 - (_BYTE *)*__srca;
          v419 = v418 >> 3;
          v420 = (v418 >> 3) + 1;
          if (v420 >> 61)
            goto LABEL_489;
          v421 = v415 - (_QWORD)v417;
          if (v421 >> 2 > v420)
            v420 = v421 >> 2;
          if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFF8)
            v422 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v422 = v420;
          if (v422)
          {
            if (v422 >> 61)
              goto LABEL_490;
            v423 = operator new(8 * v422);
            v424 = &v423[8 * v419];
            *v424 = v412;
            v416 = (uint64_t)(v424 + 1);
            v425 = v414 - v417;
            if (v414 == v417)
              goto LABEL_483;
LABEL_477:
            v426 = v425 - 8;
            if (v426 < 0x58)
              goto LABEL_506;
            if ((unint64_t)(v414 - v423 - v418) < 0x20)
              goto LABEL_506;
            v427 = (v426 >> 3) + 1;
            v428 = 8 * (v427 & 0x3FFFFFFFFFFFFFFCLL);
            v429 = &v414[-v428];
            v424 = (_QWORD *)((char *)v424 - v428);
            v430 = &v423[8 * v419 - 16];
            v431 = v414 - 16;
            v432 = v427 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v433 = *(_OWORD *)v431;
              *(v430 - 1) = *((_OWORD *)v431 - 1);
              *v430 = v433;
              v430 -= 2;
              v431 -= 32;
              v432 -= 4;
            }
            while (v432);
            v414 = v429;
            if (v427 != (v427 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_506:
              do
              {
                v434 = *((_QWORD *)v414 - 1);
                v414 -= 8;
                *--v424 = v434;
              }
              while (v414 != v417);
            }
          }
          else
          {
            v423 = 0;
            v424 = (_QWORD *)(8 * v419);
            *(_QWORD *)(8 * v419) = v412;
            v416 = 8 * v419 + 8;
            v425 = v414 - v417;
            if (v414 != v417)
              goto LABEL_477;
          }
LABEL_483:
          v91 = v455;
          v455[15] = v424;
          v455[16] = v416;
          v455[17] = &v423[8 * v422];
          if (v417)
            operator delete(v417);
          v90 = v456;
          goto LABEL_486;
        }
LABEL_273:
        v237 = v270;
        if (v236 == v238)
          goto LABEL_461;
      }
    }
  }
LABEL_190:
  v211 = v91[2];
  v213 = *v90;
  v212 = v90[1];
  v214 = v212 - *v90;
  if (v214 != v90[4] - v90[3])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 533, (uint64_t)"observations.size() == calibrated_observations.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_491;
    }
    v213 = *v90;
    v212 = v90[1];
    v214 = v212 - *v90;
  }
  if (v214 >> 4 != (uint64_t)(v90[24] - v90[23]) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 534, (uint64_t)"observations.size() == distorted_to_calibrated_scale_vec.size()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_491;
    }
    v213 = *v90;
    v212 = v90[1];
  }
  if (v212 == v213)
  {
    v216 = 0;
  }
  else
  {
    v215 = 0;
    v216 = 0;
    v217 = 0;
    v218 = v211 + (v451 << 8);
    v219 = (_QWORD *)(v218 + 72);
    v220 = (_QWORD *)(v218 + 144);
    v221 = (_QWORD *)(v218 + 8);
    v222 = (_DWORD *)(v218 + 224);
    do
    {
      if (!*(_BYTE *)(*v220 + v217))
      {
        *(_OWORD *)v478 = *(_OWORD *)(v90[3] + v215);
        v223 = *(double *)(v90[23] + 8 * v217);
        v224 = (_QWORD *)(*v221 + (*((_QWORD *)*__srca + v216) << 7));
        *v224 = -1;
        v224[7] = 0;
        v224[8] = 0;
        v224[6] = 0;
        v224[13] = 0;
        v224[14] = 0;
        v224[12] = 0;
        *(_DWORD *)v224 = *(_DWORD *)(v456[13] + 4 * v217);
        sub_20F17C82C(v224, a2, (_OWORD *)(v213 + v215), v478, *(double *)(v456[20] + 8 * v217), v223);
        *(_QWORD *)(*v219 + 8 * v217) = v224;
        v90 = v456;
        ++v216;
        ++*v222;
        v213 = *v456;
        v212 = v456[1];
      }
      ++v217;
      v215 += 16;
    }
    while (v217 < (v212 - v213) >> 4);
  }
  v225 = v455[16];
  if (v216 >= (v225 - v455[15]) >> 3)
    goto LABEL_322;
  v226 = v455[2];
  v227 = v226 + (v451 << 8);
  v230 = *(_QWORD *)(v227 + 8);
  v229 = (_QWORD *)(v227 + 8);
  v228 = v230;
  v231 = *(_QWORD *)(v225 - 8);
  v232 = (v229[1] - v230) >> 7;
  if (v231 + 1 >= v232 || !*(_QWORD *)(v228 + ((v231 + 1) << 7) + 64))
    goto LABEL_276;
  v233 = (uint64_t *)(v228 + (v231 << 7) + 320);
  v234 = v231;
  while (v232 - 2 != v234)
  {
    v235 = *v233;
    v233 += 16;
    ++v234;
    if (!v235)
    {
      if (!v234)
        goto LABEL_276;
      goto LABEL_280;
    }
  }
  v234 = v232 - 1;
  if (v232 != 1)
    goto LABEL_280;
LABEL_276:
  v284 = (uint64_t *)(v228 + (v231 << 7) - 64);
  do
  {
    if (!v231)
      goto LABEL_282;
    --v231;
    v285 = *v284;
    v284 -= 16;
  }
  while (!v285);
  v234 = v231;
  if (v231)
  {
LABEL_280:
    if (v234 >= v232)
      goto LABEL_287;
  }
  else
  {
LABEL_282:
    if (!*(_QWORD *)(v228 + 64))
      goto LABEL_322;
    v234 = 0;
    if (!v232)
      goto LABEL_287;
  }
  if (*(_QWORD *)(v228 + (v234 << 7) + 64))
  {
    if (v234 >= v232)
      goto LABEL_291;
    goto LABEL_290;
  }
LABEL_287:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VisualSlidingWindow.h", 761, (uint64_t)"last_valid_element < elements.size() && predicate(elements[last_valid_element]) > 0", 83, (uint64_t)"Make sure last_valid_element points to a valid element", 54, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_491;
  }
  if (v234 == -1)
    goto LABEL_322;
  v228 = *v229;
  if (v234 >= (uint64_t)(v229[1] - *v229) >> 7)
    goto LABEL_291;
LABEL_290:
  if (*(_QWORD *)(v228 + (v234 << 7) + 64))
    goto LABEL_292;
LABEL_291:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 652, (uint64_t)"last_track_used == static_cast<size_t>(-1) || (last_track_used < tracks.size() && !tracks[last_track_used].empty())", 115, (uint64_t)"Make sure last_track_used points to a valid track.", 50, (void (*)(void **))sub_21023DDB0))
  {
LABEL_491:
    abort();
  }
LABEL_292:
  v286 = (uint64_t)(v455[16] - v455[15]) >> 3;
  if (v286 > v216)
  {
    v287 = (_QWORD **)(v229 + 8);
    v288 = (_QWORD **)(v229 + 5);
    v289 = v226 + (v451 << 8);
    v449 = (_QWORD *)(v289 + 80);
    v290 = (_QWORD *)(v289 + 56);
    do
    {
      v291 = *((_QWORD *)*__srca + v216);
      if (v291 >= v234)
        break;
      v292 = *v287;
      v293 = (_QWORD *)*v449;
      v294 = *v229;
      if (*v287 != (_QWORD *)*v449)
      {
        while (*v292 != v294 + (v234 << 7))
        {
          if (++v292 == v293)
          {
            v292 = (_QWORD *)*v449;
            break;
          }
        }
      }
      if (v292 != v293)
      {
        *v292 = v294 + (v291 << 7);
        v294 = *v229;
      }
      v295 = (_QWORD *)*v290;
      if (*v288 != (_QWORD *)*v290)
      {
        v296 = *v288;
        while (*v296 != v294 + (v234 << 7))
        {
          if (++v296 == v295)
          {
            v296 = (_QWORD *)*v290;
            break;
          }
        }
        if (v296 != v295)
        {
          v297 = *v288;
          while (*v297 != v294 + (v291 << 7))
          {
            if (++v297 == v295)
            {
              v297 = (_QWORD *)*v290;
              break;
            }
          }
          if (v297 != v295)
          {
            *v297 = 0;
            v294 = *v229;
          }
          *v296 = v294 + (v291 << 7);
          v294 = *v229;
        }
      }
      v298 = (_QWORD *)(v294 + (v291 << 7));
      *v298 = -1;
      v298[7] = 0;
      v298[8] = 0;
      v298[6] = 0;
      v298[13] = 0;
      v298[14] = 0;
      v298[12] = 0;
      v299 = *v229;
      *(_DWORD *)(v299 + (v291 << 7)) = -1;
      if (!*(_QWORD *)(v299 + (v234 << 7) + 64))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 703, (uint64_t)"!tracks[last_track_used].empty()", 32, (uint64_t)"Attempting to backfill an empty track.", 38, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_491;
        }
        v299 = *v229;
      }
      sub_20F18C5D4((uint64_t *)(v299 + (v291 << 7)), (uint64_t *)(v299 + (v234 << 7)));
      v300 = 1 - v234;
      v301 = (v234 << 7) - 64;
      do
      {
        v302 = v300++;
        if (v300 == 1)
          break;
        v303 = *(_QWORD *)(*v229 + v301);
        v301 -= 128;
      }
      while (!v303);
      ++v216;
      v234 = -(uint64_t)v302;
    }
    while (v216 != v286);
  }
LABEL_322:
  sub_20F1729F0(&v464);
  v304 = v442;
  if (**(int **)(v464 + 56) > 3)
    goto LABEL_429;
  v305 = *(unsigned __int8 *)(v464 + 72);
  v306 = sub_20E8C31DC(v464, "OSLogSurrogateAppender", 1, 0);
  v307 = v306;
  if (!v305 && v306 == 0)
    goto LABEL_429;
  v457[0] = &v464;
  v457[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v457[2] = std::chrono::system_clock::now().__d_.__rep_;
  v458 = 3;
  v459 = "unknown file";
  v460 = 967;
  v462 = 0;
  v463 = 0;
  v461 = "unknown function";
  v309 = "Secondary";
  if (!v436)
    v309 = "Primary";
  __srcb = v309;
  v310 = *(_QWORD *)v457[0];
  if (*(char *)(*(_QWORD *)v457[0] + 39) < 0)
  {
    v312 = *(const char **)(v310 + 16);
    v311 = *(_QWORD *)(v310 + 24);
    v444 = *(_QWORD *)v457[0] + 16;
    v447 = *(_QWORD *)v457[0];
    v450 = v305;
    v314 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v314 & 1) != 0)
      goto LABEL_333;
  }
  else
  {
    v311 = *(unsigned __int8 *)(*(_QWORD *)v457[0] + 39);
    v312 = (const char *)(*(_QWORD *)v457[0] + 16);
    v444 = (uint64_t)v312;
    v447 = *(_QWORD *)v457[0];
    v450 = v305;
    v313 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v313 & 1) != 0)
      goto LABEL_333;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v478);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v478);
    if (v478[24] && (v478[23] & 0x80000000) != 0)
      operator delete(*(void **)v478);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
    v90 = v456;
    v304 = v442;
  }
LABEL_333:
  if (byte_254A4A4F8[23] >= 0)
    v315 = byte_254A4A4F8;
  else
    v315 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v316 = byte_254A4A4F8[23];
  else
    v316 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v478 = os_log_create(v315, v312);
  v317 = &v478[8];
  if (v316 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v316 >= 0x17)
  {
    v318 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v316 | 7) != 0x17)
      v318 = v316 | 7;
    v319 = v318 + 1;
    v317 = operator new(v318 + 1);
    *(_QWORD *)&v478[16] = v316;
    *(_QWORD *)&v478[24] = v319 | 0x8000000000000000;
    *(_QWORD *)&v478[8] = v317;
    goto LABEL_346;
  }
  v478[31] = v316;
  if (v316)
LABEL_346:
    memmove(v317, v315, v316);
  v317[v316] = 0;
  v478[32] = 1;
  v320 = &v478[40];
  if (v311 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v311 >= 0x17)
  {
    v322 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v311 | 7) != 0x17)
      v322 = v311 | 7;
    v323 = v322 + 1;
    v320 = operator new(v322 + 1);
    v479 = v311;
    v480 = v323 | 0x8000000000000000;
    *(_QWORD *)&v478[40] = v320;
  }
  else
  {
    HIBYTE(v480) = v311;
    if (!v311)
    {
      v478[40] = 0;
      v481 = 1;
      v321 = *(NSObject **)v478;
      if ((SHIBYTE(v480) & 0x80000000) == 0)
        goto LABEL_351;
      goto LABEL_357;
    }
  }
  memmove(v320, v312, v311);
  v320[v311] = 0;
  v481 = 1;
  v321 = *(NSObject **)v478;
  if ((SHIBYTE(v480) & 0x80000000) == 0)
  {
LABEL_351:
    if (!v478[32])
      goto LABEL_360;
    goto LABEL_358;
  }
LABEL_357:
  operator delete(*(void **)&v478[40]);
  if (!v478[32])
    goto LABEL_360;
LABEL_358:
  if ((v478[31] & 0x80000000) != 0)
    operator delete(*(void **)&v478[8]);
LABEL_360:
  if (*(_QWORD *)v478)
    os_release(*(void **)v478);
  if (v307 && *(_QWORD *)(v307 + 24))
  {
    v324 = _os_log_pack_size();
    v325 = (std::__shared_weak_count_vtbl *)operator new(v324, (std::align_val_t)8uLL);
    v326 = (std::__shared_weak_count *)operator new();
    v326->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v326->__shared_owners_;
    v326->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v326->__shared_weak_owners_ = 0;
    v326[1].__vftable = v325;
    v470 = v325;
    v471 = v325;
    v473 = 0;
    v474 = 0;
    v472 = v326;
    if (v436)
      v328 = 9;
    else
      v328 = 7;
    v477 = v328;
    memcpy(&__dst, __srcb, v328);
    v476[v328 - 8] = 0;
    *(_QWORD *)&v478[8] = __dst;
    *(_QWORD *)&v478[16] = *(_QWORD *)v476;
    *(_QWORD *)&v478[23] = *(_QWORD *)&v476[7];
    *(_QWORD *)v478 = off_24C9F98D8;
    v478[31] = v477;
    *(_QWORD *)&v478[32] = 0x746E696F70;
    HIBYTE(v479) = 5;
    v329 = (char *)operator new(0x58uLL);
    v330 = (std::__shared_weak_count *)v329;
    *((_QWORD *)v329 + 1) = 0;
    v331 = (unint64_t *)(v329 + 8);
    *((_QWORD *)v329 + 2) = 0;
    *((_QWORD *)v329 + 3) = off_24C9F98D8;
    *(_QWORD *)v329 = &off_24C9F9888;
    *((_OWORD *)v329 + 2) = *(_OWORD *)&v478[8];
    *((_QWORD *)v329 + 6) = *(_QWORD *)&v478[24];
    *(_OWORD *)(v329 + 56) = *(_OWORD *)&v478[32];
    *((_QWORD *)v329 + 9) = v479;
    v473 = v329 + 24;
    v474 = v329;
    v466 = v325;
    *(_QWORD *)&v467 = v325;
    *((_QWORD *)&v467 + 1) = v326;
    do
      v332 = __ldxr(p_shared_owners);
    while (__stxr(v332 + 1, p_shared_owners));
    *(_QWORD *)&v468 = v329 + 24;
    *((_QWORD *)&v468 + 1) = v329;
    do
      v333 = __ldxr(v331);
    while (__stxr(v333 + 1, v331));
    v469 = v329 + 24;
    do
      v334 = __ldaxr(v331);
    while (__stlxr(v334 - 1, v331));
    if (!v334)
    {
      (*(void (**)(char *))(*(_QWORD *)v329 + 16))(v329);
      std::__shared_weak_count::__release_weak(v330);
    }
    v335 = v472;
    if (v472)
    {
      v336 = (unint64_t *)&v472->__shared_owners_;
      do
        v337 = __ldaxr(v336);
      while (__stlxr(v337 - 1, v336));
      if (!v337)
      {
        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
        std::__shared_weak_count::__release_weak(v335);
      }
    }
    v338 = v466;
    if (v469[31] >= 0)
      v339 = v469 + 8;
    else
      v339 = (char *)*((_QWORD *)v469 + 1);
    if (v469[55] >= 0)
      v340 = v469 + 32;
    else
      v340 = (char *)*((_QWORD *)v469 + 4);
    v341 = _os_log_pack_fill();
    v342 = *v438;
    v343 = *v437;
    v344 = *v439;
    *(_DWORD *)v341 = 136316162;
    *(_QWORD *)(v341 + 4) = v339;
    *(_WORD *)(v341 + 12) = 2080;
    *(_QWORD *)(v341 + 14) = v340;
    *(_WORD *)(v341 + 22) = 1024;
    *(_DWORD *)(v341 + 24) = v342;
    *(_WORD *)(v341 + 28) = 1024;
    *(_DWORD *)(v341 + 30) = v343;
    *(_WORD *)(v341 + 34) = 1024;
    *(_DWORD *)(v341 + 36) = v344;
    v345 = operator new();
    v346 = *(unsigned __int8 *)(v447 + 39);
    v347 = v444;
    if ((v346 & 0x80u) != 0)
    {
      v347 = *(_QWORD *)(v447 + 16);
      v346 = *(_QWORD *)(v447 + 24);
    }
    *(_QWORD *)v345 = v338;
    *(_OWORD *)(v345 + 8) = v467;
    v467 = 0uLL;
    *(_OWORD *)(v345 + 24) = v468;
    v468 = 0uLL;
    *(_QWORD *)(v345 + 40) = v347;
    *(_QWORD *)(v345 + 48) = v346;
    *(_BYTE *)(v345 + 56) = 1;
    v470 = 0;
    *(_QWORD *)v478 = v345;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v307 + 24) + 40))(*(_QWORD *)(v307 + 24), v478);
    v90 = v456;
    v348 = v450;
    v349 = *(_QWORD *)v478;
    *(_QWORD *)v478 = 0;
    v304 = v442;
    if (v349)
    {
      v350 = *(std::__shared_weak_count **)(v349 + 32);
      if (v350)
      {
        v351 = (unint64_t *)&v350->__shared_owners_;
        do
          v352 = __ldaxr(v351);
        while (__stlxr(v352 - 1, v351));
        if (!v352)
        {
          ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
          std::__shared_weak_count::__release_weak(v350);
        }
      }
      v353 = *(std::__shared_weak_count **)(v349 + 16);
      if (v353)
      {
        v354 = (unint64_t *)&v353->__shared_owners_;
        do
          v355 = __ldaxr(v354);
        while (__stlxr(v355 - 1, v354));
        if (!v355)
        {
          ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
          std::__shared_weak_count::__release_weak(v353);
        }
      }
      MEMORY[0x212BC6398](v349, 0x10F0C40B62ED6C6);
      v356 = v470;
      v470 = 0;
      if (v356)
      {
        on_zero_shared_weak = (std::__shared_weak_count *)v356->__on_zero_shared_weak;
        if (on_zero_shared_weak)
        {
          v358 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
          do
            v359 = __ldaxr(v358);
          while (__stlxr(v359 - 1, v358));
          if (!v359)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
            std::__shared_weak_count::__release_weak(on_zero_shared_weak);
          }
        }
        on_zero_shared = (std::__shared_weak_count *)v356->__on_zero_shared;
        if (on_zero_shared)
        {
          v361 = (unint64_t *)&on_zero_shared->__shared_owners_;
          do
            v362 = __ldaxr(v361);
          while (__stlxr(v362 - 1, v361));
          if (!v362)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
            std::__shared_weak_count::__release_weak(on_zero_shared);
          }
        }
        MEMORY[0x212BC6398](v356, 0x10F0C40B62ED6C6);
      }
    }
    v363 = (std::__shared_weak_count *)*((_QWORD *)&v468 + 1);
    if (*((_QWORD *)&v468 + 1))
    {
      v364 = (unint64_t *)(*((_QWORD *)&v468 + 1) + 8);
      do
        v365 = __ldaxr(v364);
      while (__stlxr(v365 - 1, v364));
      if (!v365)
      {
        ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
        std::__shared_weak_count::__release_weak(v363);
      }
    }
    v366 = (std::__shared_weak_count *)*((_QWORD *)&v467 + 1);
    if (*((_QWORD *)&v467 + 1))
    {
      v367 = (unint64_t *)(*((_QWORD *)&v467 + 1) + 8);
      do
        v368 = __ldaxr(v367);
      while (__stlxr(v368 - 1, v367));
      if (!v368)
      {
        ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
        std::__shared_weak_count::__release_weak(v366);
      }
    }
  }
  else
  {
    os_log_type_enabled(v321, OS_LOG_TYPE_INFO);
    v369 = *v438;
    v370 = *v437;
    v371 = *v439;
    *(_DWORD *)v478 = 136316162;
    *(_QWORD *)&v478[4] = __srcb;
    *(_WORD *)&v478[12] = 2080;
    *(_QWORD *)&v478[14] = "point";
    *(_WORD *)&v478[22] = 1024;
    *(_DWORD *)&v478[24] = v369;
    *(_WORD *)&v478[28] = 1024;
    *(_DWORD *)&v478[30] = v370;
    *(_WORD *)&v478[34] = 1024;
    *(_DWORD *)&v478[36] = v371;
    v372 = (void *)_os_log_send_and_compose_impl();
    v348 = v450;
    if (v372)
      free(v372);
  }
  if (v348)
  {
    sub_20E8C003C((uint64_t)v457, "[%s] %s: Continued %d and created %d tracks (with %d invalid).", __srcb, "point", *v438, *v437, *v439);
    sub_20E863570((uint64_t)v457);
  }
  sub_20E863570((uint64_t)v457);
  v373 = v463;
  if (!v463)
    goto LABEL_429;
  v374 = (unint64_t *)&v463->__shared_owners_;
  do
    v375 = __ldaxr(v374);
  while (__stlxr(v375 - 1, v374));
  if (v375)
  {
LABEL_429:
    v376 = v455;
    v377 = v455[2];
    if (!*((_BYTE *)v90 + 96))
      goto LABEL_435;
    goto LABEL_430;
  }
  ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
  std::__shared_weak_count::__release_weak(v373);
  v376 = v455;
  v377 = v455[2];
  if (!*((_BYTE *)v90 + 96))
    goto LABEL_435;
LABEL_430:
  *(_DWORD *)v478 = -1;
  sub_20F172AE4(v377 + (v451 << 8) + 168, v304, (const float *)v478);
  v378 = (int *)v90[9];
  v379 = (int *)v90[10];
  v377 = v376[2];
  if (v378 != v379)
  {
    v380 = *(_QWORD *)(v377 + (v451 << 8) + 168);
    v381 = v440;
    v382 = v441;
    do
    {
      v384 = *v378;
      v383 = v378[1];
      v378 += 2;
      *(_DWORD *)(v380 + 4 * v384) = v383;
    }
    while (v378 != v379);
    goto LABEL_436;
  }
LABEL_435:
  v381 = v440;
  v382 = v441;
LABEL_436:
  v385 = (_QWORD *)(v377 + (v451 << 8));
  v386 = v385[6];
  v385[6] = *v382;
  *v382 = v386;
  v387 = v381 + (v451 << 8);
  v388 = v385[7];
  v385[7] = *(_QWORD *)(v387 + 80);
  *(_QWORD *)(v387 + 80) = v388;
  v389 = v385[8];
  v385[8] = *(_QWORD *)(v387 + 88);
  *(_QWORD *)(v387 + 88) = v389;
  v390 = v465;
  v465 = 0;
  if (v390)
    sub_20E8E931C((uint64_t)&v465, v390);
}

void sub_20F172288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v40;

  if (*(_BYTE *)(v38 - 152) && *(char *)(v38 - 153) < 0)
    operator delete(*(void **)(v38 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  v40 = a38;
  a38 = 0;
  if (v40)
    sub_20E8E931C((uint64_t)&a38, v40);
  _Unwind_Resume(a1);
}

void sub_20F1723F0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v5 = (char *)a1[5];
  v4 = a1[6];
  if ((unint64_t)v5 >= v4)
  {
    v10 = (char **)(a1 + 4);
    v11 = (char *)a1[4];
    v12 = 0x8E38E38E38E38E39 * ((v5 - v11) >> 3) + 1;
    if (v12 > 0x38E38E38E38E38ELL)
      sub_20EB849AC();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1C71C71C71C71C7)
      v14 = 0x38E38E38E38E38ELL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 > 0x38E38E38E38E38ELL)
        sub_20E877A38();
      v15 = (char *)operator new(72 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * ((v5 - v11) >> 3)];
    v17 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v16 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v16 + 3) = v17;
    *((_QWORD *)v16 + 8) = *(_QWORD *)(a2 + 64);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v18;
    v9 = v16 + 72;
    if (v5 != v11)
    {
      do
      {
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v5 - 72);
        v19 = *(_OWORD *)(v5 - 56);
        v20 = *(_OWORD *)(v5 - 40);
        v21 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v16 - 24) = v21;
        *(_OWORD *)(v16 - 40) = v20;
        *(_OWORD *)(v16 - 56) = v19;
        v16 -= 72;
        v5 -= 72;
      }
      while (v5 != v11);
      v5 = *v10;
    }
    a1[4] = v16;
    a1[5] = v9;
    a1[6] = &v15[72 * v14];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    *((_QWORD *)v5 + 8) = *(_QWORD *)(a2 + 64);
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 1) = v6;
    v9 = v5 + 72;
  }
  a1[5] = v9;
}

double *sub_20F172580(uint64_t a1, unint64_t a2, const double *a3)
{
  uint64_t v6;
  double *v7;
  double *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  double *v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t *v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(double **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 61)
      goto LABEL_38;
    v9 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
    v11 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 61)
LABEL_38:
      sub_20E867F44();
    v12 = v11;
    result = (double *)operator new(8 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = (uint64_t)&result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 3)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x3FFFFFFFFFFFFFFCLL];
    v18 = vdupq_n_s64(*(unint64_t *)&v14);
    v19 = (int64x2_t *)(result + 2);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != (double *)v13);
    }
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(a1 + 8) - (_QWORD)v7;
  v22 = v21 >> 3;
  if (v21 >> 3 >= a2)
    v23 = a2;
  else
    v23 = v21 >> 3;
  if (v23)
  {
    if (v23 < 8 || v7 < a3 + 1 && &v7[v23] > a3)
      goto LABEL_42;
    result = &v7[v23 & 0xFFFFFFFFFFFFFFFCLL];
    v24 = vld1q_dup_f64(a3);
    v25 = (float64x2_t *)(v7 + 2);
    v26 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v25[-1] = v24;
      *v25 = v24;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v27 = v23 == (v23 & 0xFFFFFFFFFFFFFFFCLL);
    v23 &= 3u;
    if (!v27)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v23;
      }
      while (v23);
    }
  }
  v10 = a2 >= v22;
  v28 = a2 - v22;
  if (v28 == 0 || !v10)
  {
    v13 = *(_QWORD *)a1 + 8 * a2;
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v29 = *(float64x2_t **)(a1 + 8);
  v30 = (float64x2_t *)((char *)v29 + 8 * v28);
  v31 = v21 & 0xFFFFFFFFFFFFFFF8;
  v32 = 8 * a2 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8;
  if (v32 < 0x98 || v29 < (float64x2_t *)(a3 + 1) && (char *)&v29->f64[a2] - v31 > (char *)a3)
    goto LABEL_43;
  v33 = (v32 >> 3) + 1;
  v34 = (float64x2_t *)((char *)v29 + 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL));
  v35 = vld1q_dup_f64(a3);
  v36 = v29 + 1;
  v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v36[-1] = v35;
    *v36 = v35;
    v36 += 2;
    v37 -= 4;
  }
  while (v37);
  v29 = v34;
  if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_43:
    do
    {
      v29->f64[0] = *a3;
      v29 = (float64x2_t *)((char *)v29 + 8);
    }
    while (v29 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

char *sub_20F1727A8(uint64_t a1, size_t a2, const char *a3)
{
  unint64_t v6;
  char *v7;
  char *result;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x8_t v20;
  int8x8_t *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  char *v25;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  unint64_t v30;
  char *v31;
  int8x8_t v32;
  int8x8_t *v33;
  unint64_t v34;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(char **)a1;
  result = v7;
  if (v6 - (unint64_t)v7 < a2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_55;
    v9 = 2 * v6;
    if (2 * v6 <= a2)
      v9 = a2;
    v10 = v6 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v9;
    if ((v10 & 0x8000000000000000) != 0)
LABEL_55:
      sub_20E867F44();
    v11 = (char *)operator new(v10);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = &v11[v10];
    result = (char *)memset(v11, *(unsigned __int8 *)a3, a2);
    v12 = &v11[a2];
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a1 + 8) - (_QWORD)v7;
  if (v13 >= a2)
    v14 = a2;
  else
    v14 = *(_QWORD *)(a1 + 8) - (_QWORD)v7;
  if (v14)
  {
    if (v14 < 8)
      goto LABEL_34;
    if (v7 < a3 + 1 && &v7[v14] > a3)
      goto LABEL_34;
    if (v14 >= 0x20)
    {
      v16 = v14 & 0xFFFFFFFFFFFFFFE0;
      v17 = vld1q_dup_s8(a3);
      v18 = (int8x16_t *)(v7 + 16);
      v19 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v18[-1] = v17;
        *v18 = v17;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      if (v14 == v16)
        goto LABEL_35;
      if ((v14 & 0x18) == 0)
      {
        v14 &= 0x1Fu;
        result = &v7[v16];
        do
        {
LABEL_34:
          *result++ = *a3;
          --v14;
        }
        while (v14);
        goto LABEL_35;
      }
    }
    else
    {
      v16 = 0;
    }
    result = &v7[v14 & 0xFFFFFFFFFFFFFFF8];
    v20 = vld1_dup_s8(a3);
    v21 = (int8x8_t *)&v7[v16];
    v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v21++ = v20;
      v22 += 8;
    }
    while (v22);
    v23 = v14 == (v14 & 0xFFFFFFFFFFFFFFF8);
    v14 &= 7u;
    if (!v23)
      goto LABEL_34;
  }
LABEL_35:
  v24 = a2 - v13;
  if (a2 > v13)
  {
    v25 = *(char **)(a1 + 8);
    v12 = &v25[v24];
    if (v24 >= 8 && (v25 >= a3 + 1 || v12 <= a3))
    {
      if (v24 < 0x20)
      {
        v27 = 0;
        goto LABEL_48;
      }
      v27 = v24 & 0xFFFFFFFFFFFFFFE0;
      v28 = vld1q_dup_s8(a3);
      v29 = (int8x16_t *)(v25 + 16);
      v30 = v24 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v24 == v27)
        goto LABEL_12;
      if ((v24 & 0x18) != 0)
      {
LABEL_48:
        v31 = &v25[v24 & 0xFFFFFFFFFFFFFFF8];
        v32 = vld1_dup_s8(a3);
        v33 = (int8x8_t *)&v25[v27];
        v34 = v27 - (v24 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v33++ = v32;
          v34 += 8;
        }
        while (v34);
        v25 = v31;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_12;
        goto LABEL_53;
      }
      v25 += v27;
    }
    do
LABEL_53:
      *v25++ = *a3;
    while (v25 != v12);
LABEL_12:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + a2;
  return result;
}

void sub_20F1729F0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A62320);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A62320))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A62318);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A62320);
  }
  *a1 = qword_254A62318;
}

void sub_20F172A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A62320);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A62320);
  _Unwind_Resume(a1);
}

float *sub_20F172AE4(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  float *v7;
  float *result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  int32x4_t v18;
  int32x4_t *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t *v36;
  uint64_t v37;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)a1;
  result = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 2)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_38;
    v9 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v9 = a2;
    v10 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL;
    v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 >> 62)
LABEL_38:
      sub_20EABADD4();
    v12 = v11;
    result = (float *)operator new(4 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *a3;
    v15 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 7)
      goto LABEL_41;
    v17 = v15 + 1;
    v16 = &result[v17 & 0x7FFFFFFFFFFFFFF8];
    v18 = vdupq_n_s32(LODWORD(v14));
    v19 = (int32x4_t *)(result + 4);
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_41:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_37;
  }
  v21 = *(float32x4_t **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = ((char *)v21 - (char *)v7) >> 2;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = ((char *)v21 - (char *)v7) >> 2;
  if (v24)
  {
    if (v24 < 8 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_42;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFF8];
    v25 = vld1q_dup_f32(a3);
    v26 = (float32x4_t *)(v7 + 4);
    v27 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF8);
    v24 &= 7u;
    if (!v28)
    {
LABEL_42:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_37:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = (float32x4_t *)((char *)v21 + 4 * v29);
  v31 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  v32 = 4 * a2 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4;
  if (v32 < 0x4C || v21 < (float32x4_t *)(a3 + 1) && (char *)&v21->f32[a2] - v31 > (char *)a3)
    goto LABEL_43;
  v33 = (v32 >> 2) + 1;
  v34 = (float32x4_t *)((char *)v21 + 4 * (v33 & 0x7FFFFFFFFFFFFFF8));
  v35 = vld1q_dup_f32(a3);
  v36 = v21 + 1;
  v37 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v36[-1] = v35;
    *v36 = v35;
    v36 += 2;
    v37 -= 8;
  }
  while (v37);
  v21 = v34;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_43:
    do
    {
      v21->f32[0] = *a3;
      v21 = (float32x4_t *)((char *)v21 + 4);
    }
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void sub_20F172D08(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  unsigned int v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  BOOL v41;
  BOOL v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  BOOL v47;
  float64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  unint64_t v51;
  unint64_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  BOOL v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (!*(_BYTE *)(a3 + 96)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 998, (uint64_t)"frame_sample.sec_to_pri_matches", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_74;
  }
  v8 = a1[9];
  v9 = a1[5];
  if (!v8)
    v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v9) >> 3);
  sub_20F1723F0((_QWORD *)(v9 + 56 * v8 - 56), a2);
  v10 = a1[2];
  if ((unint64_t)(a1[3] - v10) <= 0x100)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1005, (uint64_t)"track_info_.size() >= 2", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v10 = a1[2];
      goto LABEL_8;
    }
LABEL_74:
    abort();
  }
LABEL_8:
  v11 = *(_QWORD *)(v10 + 256);
  v12 = operator new();
  sub_20E972DB4(v12, v11);
  memcpy((void *)(v12 + 1000), (const void *)(v11 + 1000), 0x1B8uLL);
  v67 = v12;
  v16 = *(_DWORD *)(v12 + 992);
  if (v16 != -1)
  {
    if (v16 <= 7)
      goto LABEL_10;
LABEL_18:
    v14.f64[0] = *(float64_t *)(a2 + 64);
    v17 = *(float64x2_t *)(a2 + 32);
    v31 = *(float64x2_t *)(a2 + 48);
    v33 = *(int8x16_t *)a2;
    v32 = *(float64x2_t *)(a2 + 16);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(_QWORD *)&v36 = vextq_s8(v33, v33, 8uLL).u64[0];
    v15.f64[0] = *(float64_t *)(v12 + 64);
    *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
    v37 = vabdq_f64(v31, *(float64x2_t *)(v12 + 48));
    v38 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
    v39 = vabdq_f64(v32, *(float64x2_t *)(v12 + 16));
    v40 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
    v41 = v40.f64[0] > 1.0e-10;
    if (v40.f64[1] > 1.0e-10)
      v41 = 1;
    if (v39.f64[0] > 1.0e-10)
      v41 = 1;
    if (v39.f64[1] > 1.0e-10)
      v41 = 1;
    if (v38.f64[0] > 1.0e-10)
      v41 = 1;
    if (v38.f64[1] > 1.0e-10)
      v41 = 1;
    if (v37.f64[0] > 1.0e-10)
      v41 = 1;
    v42 = v41 || v37.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
    if (v16 > 0xB)
    {
      if (v16 > 0xD)
      {
        if (!v42)
          goto LABEL_69;
        goto LABEL_67;
      }
    }
    else if (v16 > 9)
    {
      if (!v42)
        goto LABEL_69;
      goto LABEL_67;
    }
LABEL_50:
    if (!v42)
      goto LABEL_69;
    goto LABEL_67;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  v16 = *(_DWORD *)(v12 + 992);
  if (v16 > 7)
    goto LABEL_18;
LABEL_10:
  if (v16 > 3)
  {
    v14.f64[0] = *(float64_t *)(a2 + 64);
    v17 = *(float64x2_t *)(a2 + 32);
    v31 = *(float64x2_t *)(a2 + 48);
    v33 = *(int8x16_t *)a2;
    v32 = *(float64x2_t *)(a2 + 16);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(_QWORD *)&v36 = vextq_s8(v33, v33, 8uLL).u64[0];
    v15.f64[0] = *(float64_t *)(v12 + 64);
    *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
    v43 = vabdq_f64(v31, *(float64x2_t *)(v12 + 48));
    v44 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
    v45 = vabdq_f64(v32, *(float64x2_t *)(v12 + 16));
    v46 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
    v47 = v46.f64[0] > 1.0e-10;
    if (v46.f64[1] > 1.0e-10)
      v47 = 1;
    if (v45.f64[0] > 1.0e-10)
      v47 = 1;
    if (v45.f64[1] > 1.0e-10)
      v47 = 1;
    if (v44.f64[0] > 1.0e-10)
      v47 = 1;
    if (v44.f64[1] > 1.0e-10)
      v47 = 1;
    if (v43.f64[0] > 1.0e-10)
      v47 = 1;
    v42 = v47 || v43.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
    if (v16 > 5)
    {
      if (!v42)
        goto LABEL_69;
LABEL_67:
      *(_QWORD *)&v31.f64[1] = v34;
      *(float64_t *)&v62 = v17.f64[0];
      *((_QWORD *)&v62 + 1) = v24;
      *(float64_t *)&v63 = v32.f64[0];
      *((_QWORD *)&v63 + 1) = v35;
      *(_QWORD *)&v64 = v33.i64[0];
      *((double *)&v64 + 1) = v36;
      *(_OWORD *)v12 = v64;
      *(_OWORD *)(v12 + 16) = v63;
      *(_OWORD *)(v12 + 32) = v62;
      *(float64x2_t *)(v12 + 48) = v31;
      v28 = *(double *)v33.i64 * v17.f64[0];
      *(float64_t *)(v12 + 64) = v14.f64[0];
      *(double *)(v12 + 72) = 1.0 / *(double *)v33.i64;
      *(double *)(v12 + 80) = -v36 / (*(double *)v33.i64 * v17.f64[0]);
      v29 = v17.f64[0] * v32.f64[0];
      v30 = v36 * *(double *)&v24;
      goto LABEL_68;
    }
    goto LABEL_50;
  }
  if (v16 <= 1)
  {
    if (v16)
    {
      v13.f64[0] = *(float64_t *)(a2 + 64);
      v17 = *(float64x2_t *)(a2 + 32);
      v18 = *(float64x2_t *)(a2 + 48);
      v20 = *(int8x16_t *)a2;
      v19 = *(float64x2_t *)(a2 + 16);
      v21 = (int8x16_t)vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
      v22 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      v23 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v22, (float64x2_t)vextq_s8(v21, v21, 8uLL)), (int32x4_t)vcgeq_f64(v22, vabdq_f64(v19, *(float64x2_t *)(v12 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v22, vabdq_f64(v17, *(float64x2_t *)(v12 + 32))), (int32x4_t)vcgeq_f64(v22, vabdq_f64(v18, *(float64x2_t *)(v12 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v23)) & 1) != 0
        || (v23.f64[0] = *(float64_t *)(v12 + 64), vabdq_f64(v13, v23).f64[0] > 1.0e-10))
      {
        COERCE_DOUBLE(v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).i64[0]);
        *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
        *(_QWORD *)&v25 = *(_QWORD *)(a2 + 32);
        *((_QWORD *)&v25 + 1) = v24;
        *(_QWORD *)&v26 = *(_QWORD *)(a2 + 16);
        *((_QWORD *)&v26 + 1) = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        *(_QWORD *)&v27 = *(_QWORD *)a2;
        *((double *)&v27 + 1) = *(double *)vextq_s8(v20, v20, 8uLL).i64;
        *(_OWORD *)v12 = v27;
        *(_OWORD *)(v12 + 16) = v26;
        *(_OWORD *)(v12 + 32) = v25;
        *(float64x2_t *)(v12 + 48) = v18;
        v28 = *(double *)v20.i64 * v17.f64[0];
        *(float64_t *)(v12 + 64) = v13.f64[0];
        *(double *)(v12 + 72) = 1.0 / *(double *)v20.i64;
        *(double *)(v12 + 80) = -*((double *)&v27 + 1) / (*(double *)v20.i64 * v17.f64[0]);
        v29 = v17.f64[0] * v19.f64[0];
        v30 = *((double *)&v27 + 1) * *(double *)&v24;
LABEL_68:
        *(double *)(v12 + 88) = -(v29 - v30) / v28;
        *(_QWORD *)(v12 + 96) = 0;
        *(double *)(v12 + 104) = 1.0 / v17.f64[0];
        *(double *)(v12 + 112) = -*(double *)&v24 / v17.f64[0];
        *(_QWORD *)(v12 + 120) = 0;
        *(_QWORD *)(v12 + 128) = 0;
        *(_OWORD *)(v12 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v12 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v12 + 160) = 0;
        goto LABEL_69;
      }
      goto LABEL_69;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_77:
    abort();
  }
  v13.f64[0] = *(float64_t *)(a2 + 64);
  v17 = *(float64x2_t *)(a2 + 32);
  v48 = *(float64x2_t *)(a2 + 48);
  v50 = *(int8x16_t *)a2;
  v49 = *(float64x2_t *)(a2 + 16);
  v51 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v52 = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  *(_QWORD *)&v53 = vextq_s8(v50, v50, 8uLL).u64[0];
  v15.f64[0] = *(float64_t *)(v12 + 64);
  *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v13, v15);
  v54 = vabdq_f64(v48, *(float64x2_t *)(v12 + 48));
  v55 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
  v56 = vabdq_f64(v49, *(float64x2_t *)(v12 + 16));
  v57 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
  v58 = v57.f64[0] > 1.0e-10;
  if (v57.f64[1] > 1.0e-10)
    v58 = 1;
  if (v56.f64[0] > 1.0e-10)
    v58 = 1;
  if (v56.f64[1] > 1.0e-10)
    v58 = 1;
  if (v55.f64[0] > 1.0e-10)
    v58 = 1;
  if (v55.f64[1] > 1.0e-10)
    v58 = 1;
  if (v54.f64[0] > 1.0e-10)
    v58 = 1;
  if (v58 || v54.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10)
  {
    *(_QWORD *)&v48.f64[1] = v51;
    *(_QWORD *)&v59 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)&v59 + 1) = v24;
    *(_QWORD *)&v60 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)&v60 + 1) = v52;
    *(_QWORD *)&v61 = *(_QWORD *)a2;
    *((double *)&v61 + 1) = v53;
    *(_OWORD *)v12 = v61;
    *(_OWORD *)(v12 + 16) = v60;
    *(_OWORD *)(v12 + 32) = v59;
    *(float64x2_t *)(v12 + 48) = v48;
    v28 = *(double *)v50.i64 * v17.f64[0];
    *(float64_t *)(v12 + 64) = v13.f64[0];
    *(double *)(v12 + 72) = 1.0 / *(double *)v50.i64;
    *(double *)(v12 + 80) = -v53 / (*(double *)v50.i64 * v17.f64[0]);
    v29 = v17.f64[0] * v49.f64[0];
    v30 = v53 * *(double *)&v24;
    goto LABEL_68;
  }
LABEL_69:
  v66 = a4 | 0x100000000;
  if (a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F1733B4((uint64_t)a1, (_QWORD *)a3, 0, v67, 1, &v66);
  v65 = v67;
  v67 = 0;
  if (v65)
    sub_20E8E931C((uint64_t)&v67, v65);
}

void sub_20F173364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (!v11)
    _Unwind_Resume(exception_object);
  sub_20E8E931C((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_20F1733B4(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  _BYTE *v33;
  char *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void **v45;
  char *v46;
  char *v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int *i;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char **v78;
  char **v79;
  char *v80;
  char *v81;
  char **v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v7 = a1;
  v8 = a3;
  v9 = *(_QWORD *)(a1 + 16) + ((unint64_t)a3 << 8);
  v10 = *(uint64_t **)(v9 + 48);
  v11 = *(uint64_t **)(v9 + 56);
  if (v10 != v11)
  {
    while (1)
    {
      v15 = *v10;
      if (*v10)
        break;
LABEL_5:
      if (++v10 == v11)
        goto LABEL_17;
    }
    v16 = *(_QWORD *)(v15 + 56);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 24);
      v18 = v17 + 208 * v16;
      v20 = *(_QWORD *)(v18 - 8);
      v19 = (_QWORD *)(v18 - 8);
      v21 = v20 + 1;
      *v19 = v20 + 1;
      v22 = *(_QWORD *)(v15 + 56);
      if (v22)
      {
LABEL_10:
        *(_OWORD *)(v17 + 208 * v22 + 16 * v21 - 208) = *(_OWORD *)(v15 + 8);
        v23 = *(_QWORD *)(v15 + 56);
        v24 = *(_QWORD *)(v15 + 24);
        if (!v23)
          v23 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 32) - v24) >> 4);
        *(_OWORD *)(v24 + 208 * v23 + 16 * *v19 - 144) = *(_OWORD *)(v15 + 8);
        v27 = *(_QWORD *)(v15 + 56);
        if (v27)
        {
          v12 = *(_QWORD *)(v15 + 24);
          v13 = v27 - 1;
        }
        else
        {
          v28 = v15 + 24;
          v12 = *(_QWORD *)(v15 + 24);
          v13 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v28 + 8) - v12) >> 4) - 1;
        }
        v14 = v12 + 208 * v13 + 8 * *v19;
        *(_QWORD *)(v14 + 128) = 0x7FF8000000000000;
        *(_QWORD *)(v14 + 160) = 0x7FF8000000000000;
        goto LABEL_5;
      }
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 24);
      v25 = v17 + 16 * ((*(_QWORD *)(v15 + 32) - v17) >> 4);
      v26 = *(_QWORD *)(v25 - 8);
      v19 = (_QWORD *)(v25 - 8);
      v21 = v26 + 1;
      *v19 = v26 + 1;
      v22 = *(_QWORD *)(v15 + 56);
      if (v22)
        goto LABEL_10;
    }
    v22 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v15 + 32) - v17) >> 4);
    goto LABEL_10;
  }
LABEL_17:
  v103 = v7;
  v104 = a3;
  if ((a5 & 1) != 0)
  {
    v29 = *(_QWORD *)(v7 + 16);
    v30 = (_QWORD *)(v29 + ((unint64_t)a3 << 8));
    v32 = v30 + 12;
    v31 = (char *)v30[12];
    v34 = (char *)v30[6];
    v33 = (_BYTE *)v30[7];
    v35 = v33 - v34;
    v36 = (v33 - v34) >> 3;
    v38 = v30 + 14;
    v37 = v30[14];
    if (v36 <= (v37 - (uint64_t)v31) >> 3)
    {
      v47 = (char *)v30[13];
      v45 = (void **)(v30 + 13);
      v46 = v47;
      v48 = v47 - v31;
      v49 = (v47 - v31) >> 3;
      if (v49 >= v36)
      {
        if (v33 != v34)
          memmove(v31, (const void *)*(v32 - 6), v33 - v34);
        v7 = v103;
        v8 = v104;
      }
      else
      {
        v50 = &v34[8 * v49];
        if (v46 != v31)
        {
          v51 = (_BYTE *)*(v32 - 5);
          memmove(v31, (const void *)*(v32 - 6), v48);
          v33 = v51;
          v31 = (char *)*v45;
        }
        v7 = v103;
        v8 = v104;
        v35 = v33 - v50;
        if (v33 != v50)
          memmove(v31, v50, v33 - v50);
      }
    }
    else
    {
      v100 = (char *)v30[7];
      if (v31)
      {
        *(_QWORD *)(v29 + ((unint64_t)a3 << 8) + 104) = v31;
        operator delete(v31);
        v37 = 0;
        *v32 = 0;
        v30[13] = 0;
        v30[14] = 0;
      }
      if ((v35 & 0x8000000000000000) != 0)
        goto LABEL_79;
      v39 = v37 >> 2;
      if (v37 >> 2 <= v36)
        v39 = v36;
      v40 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8;
      v41 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v40)
        v41 = v39;
      if (v41 >> 61)
LABEL_79:
        sub_20E867F44();
      v42 = 8 * v41;
      v43 = (char *)operator new(8 * v41);
      v31 = v43;
      *v32 = v43;
      v8 = v104;
      v44 = v29 + (v104 << 8);
      *(_QWORD *)(v44 + 104) = v43;
      v45 = (void **)(v44 + 104);
      *v38 = &v43[v42];
      if (v100 != v34)
        memcpy(v43, v34, v35);
      v7 = v103;
    }
    *v45 = &v31[v35];
  }
  v52 = a2[1] - *a2;
  if (v52 != a2[4] - a2[3])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 308, (uint64_t)"observations.size() == calibrated_observations.size()", 53, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v52 = a2[1] - *a2;
  }
  v101 = *(_QWORD *)(v7 + 16);
  v53 = v101 + (v8 << 8);
  v54 = (_QWORD *)(v53 + 96);
  v55 = (_QWORD *)(v53 + 120);
  v105 = 0;
  sub_20F172580(v53 + 120, v52 >> 4, (const double *)&v105);
  v57 = (int *)a2[9];
  for (i = (int *)a2[10]; v57 != i; v57 += 2)
  {
    v61 = v57[1];
    v62 = *(_QWORD **)(*v54 + 8 * v61);
    if (!v62)
      continue;
    sub_20F17C564(*(_DWORD **)(*v54 + 8 * v61), v54, v57, a2 + 16);
    v63 = *v57;
    v64 = *(_OWORD *)(a2[3] + 16 * v63);
    v65 = v62[7];
    v66 = v62[3];
    if (v65)
      v67 = v65 - 1;
    else
      v67 = 0x4EC4EC4EC4EC4EC5 * ((v62[4] - v66) >> 4) - 1;
    v68 = v66 + 208 * v67;
    v69 = *(_QWORD *)(a2[23] + 8 * v63);
    v70 = *(_QWORD *)(a2[20] + 8 * v63);
    v72 = *(_QWORD *)(v68 + 200);
    v71 = (_QWORD *)(v68 + 200);
    *(_OWORD *)(v66 + 208 * v67 + 16 * v72) = *(_OWORD *)(*a2 + 16 * v63);
    v73 = v62[7];
    if (v73)
    {
      *(_OWORD *)(v62[3] + 208 * v73 + 16 * *v71 - 144) = v64;
      v74 = v62[7];
      if (!v74)
        goto LABEL_55;
    }
    else
    {
      *(_OWORD *)(v62[3] + 16 * ((uint64_t)(v62[4] - v62[3]) >> 4) + 16 * *v71 - 144) = v64;
      v74 = v62[7];
      if (!v74)
      {
LABEL_55:
        v58 = v62[3];
        v59 = 0x4EC4EC4EC4EC4EC5 * ((v62[4] - v58) >> 4) - 1;
        goto LABEL_45;
      }
    }
    v58 = v62[3];
    v59 = v74 - 1;
LABEL_45:
    v60 = v58 + 208 * v59 + 8 * *v71;
    *(_QWORD *)(v60 + 128) = v70;
    *(_QWORD *)(v60 + 160) = v69;
    *(_QWORD *)(*v55 + 8 * *v57) = v62;
  }
  v75 = *(_OWORD *)v54;
  *(_OWORD *)v54 = *(_OWORD *)v55;
  *(_OWORD *)v55 = v75;
  v76 = v101 + (v104 << 8);
  v77 = *(_QWORD *)(v76 + 112);
  *(_QWORD *)(v76 + 112) = *(_QWORD *)(v76 + 136);
  *(_QWORD *)(v76 + 136) = v77;
  v78 = (char **)(*(_QWORD *)(v103 + 16) + (v104 << 8) + 248);
  v79 = (char **)(*(_QWORD *)(v103 + 16) + (v104 << 8) + 240);
  v80 = *v79;
  if (*v79 >= *v78)
  {
    v82 = (char **)(*(_QWORD *)(v103 + 16) + (v104 << 8) + 232);
    v83 = *v82;
    v84 = (v80 - *v82) >> 3;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 61)
      sub_20E92CED8();
    v86 = *v78 - v83;
    if (v86 >> 2 > v85)
      v85 = v86 >> 2;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
      v87 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    if (v87)
    {
      if (v87 >> 61)
        sub_20E877A38();
      v88 = (char *)operator new(8 * v87);
    }
    else
    {
      v88 = 0;
    }
    v89 = &v88[8 * v84];
    v90 = &v88[8 * v87];
    *(_QWORD *)v89 = *a6;
    v81 = v89 + 8;
    if (v80 != v83)
    {
      v91 = v80 - v83 - 8;
      if (v91 < 0x58)
        goto LABEL_85;
      if ((unint64_t)(v83 - v88) < 0x20)
        goto LABEL_85;
      v92 = (v91 >> 3) + 1;
      v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      v94 = &v80[-v93];
      v89 -= v93;
      v95 = &v88[8 * v84 - 16];
      v96 = v80 - 16;
      v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v98 = *(_OWORD *)v96;
        *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
        *(_OWORD *)v95 = v98;
        v95 -= 32;
        v96 -= 32;
        v97 -= 4;
      }
      while (v97);
      v80 = v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_85:
        do
        {
          v99 = *((_QWORD *)v80 - 1);
          v80 -= 8;
          *((_QWORD *)v89 - 1) = v99;
          v89 -= 8;
        }
        while (v80 != v83);
      }
      v80 = *v82;
    }
    *v82 = v89;
    *v79 = v81;
    *v78 = v90;
    if (v80)
      operator delete(v80);
  }
  else
  {
    *(_QWORD *)v80 = *a6;
    v81 = v80 + 8;
  }
  *v79 = v81;
}

uint64_t sub_20F1739E4(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  const char *v7;
  size_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int *v59;
  unint64_t v60;
  int *v61;
  int v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  unsigned int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _QWORD *v98;
  char *v99;
  uint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _BYTE *v134;
  unint64_t *v135;
  int64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _OWORD *v145;
  _OWORD *v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  _OWORD *v151;
  _OWORD *v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  _OWORD *v186;
  unint64_t *v187;
  uint64_t v188;
  __int128 v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unsigned int v194;
  _QWORD *v195;
  void *v196;
  char *v197;
  void *v198;
  void *v199;
  unsigned int v201;
  int v202;
  int v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  void *v209;
  _BYTE *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v211;
  int v212;
  const char *v213;
  int v214;
  const char *v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  uint64_t v218;
  _BYTE __p[48];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;

  sub_20F1729F0(&v218);
  v204 = a1;
  if (**(int **)(v218 + 56) > 3)
    goto LABEL_90;
  v2 = *(unsigned __int8 *)(v218 + 72);
  v3 = sub_20E8C31DC(v218, "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_90;
  v209 = &v218;
  rep = (_BYTE *)std::chrono::steady_clock::now().__d_.__rep_;
  v211 = std::chrono::system_clock::now().__d_.__rep_;
  v212 = 3;
  v213 = "unknown file";
  v214 = 1045;
  v216 = 0;
  v217 = 0;
  v215 = "unknown function";
  v6 = v218;
  v7 = (const char *)(v218 + 16);
  v208 = v218 + 16;
  if (*(char *)(v218 + 39) < 0)
  {
    v7 = *(const char **)(v218 + 16);
    v8 = *(_QWORD *)(v218 + 24);
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v218 + 39);
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__p);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v11 = byte_254A4A4F8;
  else
    v11 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8[23];
  else
    v12 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)__p = os_log_create(v11, v7);
  v13 = &__p[8];
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&__p[16] = v12;
    *(_QWORD *)&__p[24] = v15 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v13;
    a1 = v204;
    goto LABEL_23;
  }
  __p[31] = v12;
  if (v12)
LABEL_23:
    memmove(v13, v11, v12);
  v13[v12] = 0;
  __p[32] = 1;
  v16 = &__p[40];
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v18 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v18 = v8 | 7;
    v19 = v18 + 1;
    v16 = operator new(v18 + 1);
    *(_QWORD *)&v220 = v8;
    *((_QWORD *)&v220 + 1) = v19 | 0x8000000000000000;
    *(_QWORD *)&__p[40] = v16;
  }
  else
  {
    HIBYTE(v220) = v8;
    if (!v8)
    {
      __p[40] = 0;
      LOBYTE(v221) = 1;
      v17 = *(NSObject **)__p;
      if ((SHIBYTE(v220) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v16, v7, v8);
  v16[v8] = 0;
  LOBYTE(v221) = 1;
  v17 = *(NSObject **)__p;
  if ((SHIBYTE(v220) & 0x80000000) == 0)
  {
LABEL_28:
    if (!__p[32])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&__p[40]);
  if (!__p[32])
    goto LABEL_37;
LABEL_35:
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
LABEL_37:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v20 = _os_log_pack_size();
    v21 = (std::__shared_weak_count_vtbl *)operator new(v20, (std::align_val_t)8uLL);
    v22 = (std::__shared_weak_count *)operator new();
    v23 = v22;
    v22->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v22->__shared_weak_owners_ = 0;
    v22[1].__vftable = v21;
    *(_QWORD *)__p = v21;
    *(_QWORD *)&__p[8] = v21;
    *(_QWORD *)&__p[16] = v22;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
    memset(&__p[24], 0, 24);
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    v27 = *(_QWORD *)__p;
    *(_WORD *)_os_log_pack_fill() = 0;
    v28 = operator new();
    v29 = *(unsigned __int8 *)(v6 + 39);
    v30 = v208;
    if ((v29 & 0x80u) != 0)
    {
      v30 = *(_QWORD *)(v6 + 16);
      v29 = *(_QWORD *)(v6 + 24);
    }
    *(_QWORD *)v28 = v27;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v28 + 24) = *(_OWORD *)&__p[24];
    *(_OWORD *)&__p[24] = 0uLL;
    *(_QWORD *)(v28 + 40) = v30;
    *(_QWORD *)(v28 + 48) = v29;
    *(_BYTE *)(v28 + 56) = 1;
    v229 = 0;
    v230 = v28;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v230);
    v31 = v230;
    v230 = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 32);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v31 + 16);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      MEMORY[0x212BC6398](v31, 0x10F0C40B62ED6C6);
      v38 = v229;
      v229 = 0;
      if (v38)
      {
        v39 = *(std::__shared_weak_count **)(v38 + 32);
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = *(std::__shared_weak_count **)(v38 + 16);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
      }
    }
    v45 = *(std::__shared_weak_count **)&__p[32];
    if (*(_QWORD *)&__p[32])
    {
      v46 = (unint64_t *)(*(_QWORD *)&__p[32] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v49 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    os_log_type_enabled(v17, OS_LOG_TYPE_INFO);
    *(_WORD *)__p = 0;
    v51 = (void *)_os_log_send_and_compose_impl();
    if (v51)
      free(v51);
  }
  if (v2)
  {
    sub_20E8C003C((uint64_t)&v209, "Collapsing the previous frame.");
    sub_20E863570((uint64_t)&v209);
  }
  sub_20E863570((uint64_t)&v209);
  v52 = v217;
  if (v217)
  {
    v53 = (unint64_t *)&v217->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      v55 = a1[9];
      if (v55)
        goto LABEL_91;
LABEL_93:
      v56 = a1[5];
      v57 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v56) >> 3);
      v55 = v57;
      goto LABEL_94;
    }
  }
LABEL_90:
  v55 = a1[9];
  if (!v55)
    goto LABEL_93;
LABEL_91:
  v56 = a1[5];
  v57 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v56) >> 3);
LABEL_94:
  v58 = v55 - 1;
  v59 = (int *)(v56 + 56 * v58);
  v60 = (a1[10] + a1[8] - 2) % v57;
  v61 = (int *)(v56 + 56 * v60);
  v62 = *v59;
  v63 = *v61;
  v64 = *(_OWORD *)v59;
  *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v59 + 9);
  *(_OWORD *)v61 = v64;
  if (v60 != v58)
    sub_20EDB66F4((_QWORD *)(v56 + 56 * v60 + 32), *(char **)(v56 + 56 * v58 + 32), *(char **)(v56 + 56 * v58 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v56 + 56 * v58 + 40) - *(_QWORD *)(v56 + 56 * v58 + 32)) >> 3));
  v65 = a1[9];
  v66 = a1[5];
  if (!v65)
    v65 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v66) >> 3);
  v67 = v65 - 1;
  v68 = v66 + 56 * v67;
  *(_QWORD *)v68 = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v68 + 8) = _Q0;
  *(_BYTE *)(v68 + 24) = 0;
  v75 = *(void **)(v68 + 32);
  v74 = (_QWORD *)(v68 + 32);
  v73 = v75;
  if (v75)
  {
    *(_QWORD *)(v66 + 56 * v67 + 40) = v73;
    operator delete(v73);
  }
  *v74 = 0;
  v74[1] = 0;
  v74[2] = 0;
  v76 = a1[9];
  if (!v76)
    v76 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
  v77 = a1[10] - 1;
  a1[9] = v76 - 1;
  a1[10] = v77;
  sub_20EDFBD4C(&v209, (uint64_t)(a1[3] - a1[2]) >> 8);
  v79 = v209;
  v78 = rep;
  if (rep == v209)
  {
LABEL_177:
    if (a1[3] != a1[2])
    {
      v193 = 0;
      v194 = 0;
      do
      {
        sub_20F174C88((uint64_t)a1, v194++, (_QWORD *)v209 + 3 * v193);
        v193 = v194;
      }
      while (v194 < (unint64_t)((uint64_t)(a1[3] - a1[2]) >> 8));
    }
    v191 = 1;
    v192 = (char *)v209;
    if (v209)
      goto LABEL_181;
    return v191;
  }
  v80 = 0;
  v81 = 0;
  v82 = 0uLL;
  v202 = v63;
  v203 = v62;
  while (1)
  {
    v83 = a1[2] + (v80 << 8);
    v86 = *(_QWORD *)(v83 + 8);
    v85 = (_QWORD *)(v83 + 8);
    v84 = v86;
    v87 = v85 + 1;
    if (v85[1] != v86)
      break;
LABEL_105:
    v80 = ++v81;
    if (0xAAAAAAAAAAAAAAABLL * ((v78 - v79) >> 3) <= v81)
      goto LABEL_177;
  }
  v201 = v81;
  v88 = 0;
  v206 = v85 + 1;
  v207 = v85;
  v205 = v80;
  while (1)
  {
    v89 = (uint64_t *)(v84 + (v88 << 7));
    v90 = v89 + 8;
    v91 = v89[8];
    if (!v91)
    {
      if (v63 == -1)
        goto LABEL_175;
      goto LABEL_109;
    }
    v92 = v89 + 3;
    v93 = v89 + 7;
    v94 = v89[7];
    if (!v94)
      break;
    v95 = *v92;
    v96 = v94 - 1;
    v97 = *(_DWORD *)(*v92 + 208 * v96 + 192);
    if (v97 == v63)
      goto LABEL_113;
LABEL_117:
    v104 = v91 - 1;
    if (v91 == 1 || v97 != v62)
      goto LABEL_109;
    v106 = v91 - 2;
    if (v91 == 2)
    {
      v107 = (_QWORD *)(v84 + (v88 << 7));
      v227 = v82;
      v228 = v82;
      v225 = v82;
      v226 = v82;
      v223 = v82;
      v224 = v82;
      v221 = v82;
      v222 = v82;
      *(_OWORD *)&__p[32] = v82;
      v220 = v82;
      *(_OWORD *)__p = v82;
      *(_OWORD *)&__p[16] = v82;
      v108 = v95 + 208 * v107[6];
      *(_QWORD *)v108 = 0;
      *(_QWORD *)(v108 + 8) = 0;
      *(_OWORD *)(v108 + 16) = *(_OWORD *)&__p[16];
      *(_OWORD *)(v108 + 32) = *(_OWORD *)&__p[32];
      *(_OWORD *)(v108 + 48) = v220;
      *(_OWORD *)(v108 + 64) = v221;
      *(_OWORD *)(v108 + 80) = v222;
      *(_OWORD *)(v108 + 96) = v223;
      *(_OWORD *)(v108 + 112) = v224;
      v109 = v225;
      v110 = v226;
      v111 = v228;
      *(_OWORD *)(v108 + 160) = v227;
      *(_OWORD *)(v108 + 176) = v111;
      *(_OWORD *)(v108 + 128) = v109;
      *(_OWORD *)(v108 + 144) = v110;
      *(_DWORD *)(v108 + 192) = -1;
      *(_QWORD *)(v108 + 200) = 0;
      v112 = 0x4EC4EC4EC4EC4EC5 * ((v107[4] - *v92) >> 4);
      v113 = v107[6] + 1;
      if (v113 < v112)
        v112 = 0;
      v107[6] = v113 - v112;
      --*v90;
      *(_BYTE *)(v107[9] + v107[12]) = 0;
      v114 = v107[10] - v107[9];
      v115 = v107[12] + 1;
      if (v115 < v114)
        v114 = 0;
      v107[12] = v115 - v114;
      goto LABEL_174;
    }
    v138 = (_QWORD *)(v84 + (v88 << 7));
    v139 = v138 + 9;
    v140 = v138 + 10;
    *(_BYTE *)(v138[9] + (unint64_t)(v138[12] + v106) % (v138[10] - v138[9])) = *(_BYTE *)(v138[9]
                                                                                                + (unint64_t)(v138[12] + v104)
                                                                                                % (v138[10] - v138[9]));
    v142 = v138[4];
    v141 = v138 + 4;
    v143 = v141[2];
    v144 = 0x4EC4EC4EC4EC4EC5 * ((v142 - *v92) >> 4);
    v145 = (_OWORD *)(*v92 + 208 * ((v143 + v104) % v144));
    v146 = (_OWORD *)(*v92 + 208 * ((v143 + v106) % v144));
    v147 = v145[1];
    *v146 = *v145;
    v146[1] = v147;
    v148 = v145[3];
    v146[2] = v145[2];
    v146[3] = v148;
    v149 = v141[2];
    v150 = 0x4EC4EC4EC4EC4EC5 * ((*v141 - *v92) >> 4);
    v151 = (_OWORD *)(*v92 + 208 * ((v149 + v104) % v150));
    v152 = (_OWORD *)(*v92 + 208 * ((v149 + v106) % v150));
    v153 = v151[5];
    v152[4] = v151[4];
    v152[5] = v153;
    v154 = v151[7];
    v152[6] = v151[6];
    v152[7] = v154;
    v155 = v141[2];
    v156 = 0x4EC4EC4EC4EC4EC5 * ((*v141 - *v92) >> 4);
    v157 = *v92 + 208 * ((v155 + v104) % v156);
    v158 = *v92 + 208 * ((v155 + v106) % v156);
    v159 = *(_OWORD *)(v157 + 144);
    *(_OWORD *)(v158 + 128) = *(_OWORD *)(v157 + 128);
    *(_OWORD *)(v158 + 144) = v159;
    v160 = v141[2];
    v161 = 0x4EC4EC4EC4EC4EC5 * ((*v141 - *v92) >> 4);
    v162 = *v92 + 208 * ((v160 + v104) % v161);
    v163 = *v92 + 208 * ((v160 + v106) % v161);
    v164 = *(_OWORD *)(v162 + 176);
    *(_OWORD *)(v163 + 160) = *(_OWORD *)(v162 + 160);
    *(_OWORD *)(v163 + 176) = v164;
    v165 = v141[2];
    v166 = v165 + v104;
    v167 = *v92;
    v168 = 0x4EC4EC4EC4EC4EC5 * ((*v141 - *v92) >> 4);
    *(_DWORD *)(*v92 + 208 * ((v165 + v106) % v168) + 192) = *(_DWORD *)(*v92 + 208 * (v166 % v168) + 192);
    if (*v90)
    {
      v227 = v82;
      v228 = v82;
      v225 = v82;
      v226 = v82;
      v223 = v82;
      v224 = v82;
      v221 = v82;
      v222 = v82;
      *(_OWORD *)&__p[32] = v82;
      v220 = v82;
      *(_OWORD *)__p = v82;
      *(_OWORD *)&__p[16] = v82;
      v169 = *v93;
      if (!*v93)
        v169 = v168;
      v170 = v167 + 208 * v169;
      *(_QWORD *)(v170 - 208) = 0;
      *(_QWORD *)(v170 - 200) = 0;
      *(_OWORD *)(v170 - 192) = *(_OWORD *)&__p[16];
      *(_OWORD *)(v170 - 176) = *(_OWORD *)&__p[32];
      *(_OWORD *)(v170 - 160) = v220;
      *(_OWORD *)(v170 - 144) = v221;
      *(_OWORD *)(v170 - 128) = v222;
      *(_OWORD *)(v170 - 112) = v223;
      *(_OWORD *)(v170 - 96) = v224;
      v171 = v225;
      v172 = v226;
      v173 = v228;
      *(_OWORD *)(v170 - 48) = v227;
      *(_OWORD *)(v170 - 32) = v173;
      *(_OWORD *)(v170 - 80) = v171;
      *(_OWORD *)(v170 - 64) = v172;
      *(_DWORD *)(v170 - 16) = -1;
      *(_QWORD *)(v170 - 8) = 0;
      v174 = *v93;
      if (!*v93)
        v174 = 0x4EC4EC4EC4EC4EC5 * ((*v141 - *v92) >> 4);
      *v93 = v174 - 1;
      --*v90;
      v175 = v84 + (v88 << 7);
      v178 = *(_QWORD *)(v175 + 104);
      v176 = (uint64_t *)(v175 + 104);
      v177 = v178;
      v179 = *v139;
      if (v178)
      {
        *(_BYTE *)(v179 + v177 - 1) = 0;
        v180 = *v176;
        if (*v176)
          goto LABEL_151;
LABEL_172:
        v181 = ~*v139 + *v140;
      }
      else
      {
        *(_BYTE *)(v179 + *v140 + ~v179) = 0;
        v180 = *v176;
        if (!*v176)
          goto LABEL_172;
LABEL_151:
        v181 = v180 - 1;
      }
      *v176 = v181;
      v107 = (_QWORD *)(v84 + (v88 << 7));
LABEL_174:
      --v107[14];
    }
LABEL_109:
    ++v88;
    v84 = *v85;
    if (v88 >= (uint64_t)(*v87 - *v85) >> 7)
    {
      v79 = v209;
      v78 = rep;
      v81 = v201;
      goto LABEL_105;
    }
  }
  v95 = *v92;
  v96 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v84 + (v88 << 7) + 32) - *v92) >> 4) - 1;
  v97 = *(_DWORD *)(*v92 + 208 * v96 + 192);
  if (v97 != v63)
    goto LABEL_117;
LABEL_113:
  if (v91 == 1)
  {
    *v89 = -1;
    v98 = (_QWORD *)(v84 + (v88 << 7));
    v98[7] = 0;
    v98[8] = 0;
    v98[6] = 0;
    v98[13] = 0;
    v98[14] = 0;
    v98[12] = 0;
    v99 = (char *)v209 + 24 * v80;
    v100 = (uint64_t *)(v99 + 8);
    v101 = (unint64_t *)*((_QWORD *)v99 + 1);
    v102 = *((_QWORD *)v99 + 2);
    if ((unint64_t)v101 < v102)
    {
      *v101 = v88;
      v103 = (uint64_t)(v101 + 1);
LABEL_170:
      *v100 = v103;
      v87 = v206;
      v85 = v207;
      goto LABEL_109;
    }
    v128 = *(unint64_t **)v99;
    v129 = (uint64_t)v101 - *(_QWORD *)v99;
    v130 = v129 >> 3;
    v131 = (v129 >> 3) + 1;
    if (v131 >> 61)
      sub_20E867F44();
    v132 = v102 - (_QWORD)v128;
    if (v132 >> 2 > v131)
      v131 = v132 >> 2;
    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
      v133 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v133 = v131;
    if (v133)
    {
      if (v133 >> 61)
        sub_20E877A38();
      v134 = operator new(8 * v133);
      v82 = 0uLL;
      v135 = (unint64_t *)&v134[8 * v130];
      *v135 = v88;
      v103 = (uint64_t)(v135 + 1);
      v136 = (char *)v101 - (char *)v128;
      if (v101 != v128)
        goto LABEL_142;
    }
    else
    {
      v134 = 0;
      v135 = (unint64_t *)(8 * v130);
      *(_QWORD *)(8 * v130) = v88;
      v103 = 8 * v130 + 8;
      v136 = (char *)v101 - (char *)v128;
      if (v101 != v128)
      {
LABEL_142:
        v137 = v136 - 8;
        if (v137 >= 0x58)
        {
          v182 = (char *)v101 - v134 - v129;
          a1 = v204;
          if (v182 >= 0x20)
          {
            v183 = (v137 >> 3) + 1;
            v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
            v185 = &v101[v184 / 0xFFFFFFFFFFFFFFF8];
            v135 = (unint64_t *)((char *)v135 - v184);
            v186 = &v134[8 * v130 - 16];
            v187 = v101 - 2;
            v188 = v183 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v189 = *(_OWORD *)v187;
              *(v186 - 1) = *((_OWORD *)v187 - 1);
              *v186 = v189;
              v186 -= 2;
              v187 -= 4;
              v188 -= 4;
            }
            while (v188);
            v101 = v185;
            if (v183 == (v183 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_167;
          }
        }
        else
        {
          a1 = v204;
        }
        do
        {
          v190 = *--v101;
          *--v135 = v190;
        }
        while (v101 != v128);
LABEL_167:
        *(_QWORD *)v99 = v135;
        *v100 = v103;
        *((_QWORD *)v99 + 2) = &v134[8 * v133];
        if (v128)
        {
          operator delete(v128);
          v82 = 0uLL;
        }
        v63 = v202;
        v62 = v203;
        v80 = v205;
        goto LABEL_170;
      }
    }
    a1 = v204;
    goto LABEL_167;
  }
  v227 = v82;
  v228 = v82;
  v225 = v82;
  v226 = v82;
  v223 = v82;
  v224 = v82;
  v221 = v82;
  v222 = v82;
  *(_OWORD *)&__p[32] = v82;
  v220 = v82;
  *(_OWORD *)__p = v82;
  *(_OWORD *)&__p[16] = v82;
  v116 = v95 + 208 * v96;
  *(_QWORD *)v116 = 0;
  *(_QWORD *)(v116 + 8) = 0;
  *(_OWORD *)(v116 + 16) = *(_OWORD *)&__p[16];
  *(_OWORD *)(v116 + 32) = *(_OWORD *)&__p[32];
  *(_OWORD *)(v116 + 48) = v220;
  *(_OWORD *)(v116 + 64) = v221;
  *(_OWORD *)(v116 + 80) = v222;
  *(_OWORD *)(v116 + 96) = v223;
  *(_OWORD *)(v116 + 112) = v224;
  v117 = v225;
  v118 = v226;
  v119 = v228;
  *(_OWORD *)(v116 + 160) = v227;
  *(_OWORD *)(v116 + 176) = v119;
  *(_OWORD *)(v116 + 128) = v117;
  *(_OWORD *)(v116 + 144) = v118;
  *(_DWORD *)(v116 + 192) = -1;
  *(_QWORD *)(v116 + 200) = 0;
  v120 = *v93;
  if (!*v93)
    v120 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v84 + (v88 << 7) + 32) - *v92) >> 4);
  *v93 = v120 - 1;
  --*v90;
  v121 = v84 + (v88 << 7);
  v124 = *(_QWORD *)(v121 + 104);
  v122 = (uint64_t *)(v121 + 104);
  v123 = v124;
  v125 = v122 - 4;
  if (v124)
  {
    *(_BYTE *)(*v125 + v123 - 1) = 0;
    v126 = *v122;
    if (*v122)
      goto LABEL_132;
LABEL_153:
    v127 = ~*v125 + *(_QWORD *)(v84 + (v88 << 7) + 80);
  }
  else
  {
    *(_BYTE *)(*v125 + ~*v125 + *(_QWORD *)(v84 + (v88 << 7) + 80)) = 0;
    v126 = *v122;
    if (!*v122)
      goto LABEL_153;
LABEL_132:
    v127 = v126 - 1;
  }
  *v122 = v127;
  --*(_QWORD *)(v84 + (v88 << 7) + 112);
  if (!*v90)
    goto LABEL_175;
  if (*v93)
  {
    if (*(_DWORD *)(*v92 + 208 * *v93 - 16) == -1)
      goto LABEL_175;
    goto LABEL_109;
  }
  if (*(_DWORD *)(*v92 + 16 * ((*(_QWORD *)(v84 + (v88 << 7) + 32) - *v92) >> 4) - 16) != -1)
    goto LABEL_109;
LABEL_175:
  v191 = 0;
  v192 = (char *)v209;
  if (!v209)
    return v191;
LABEL_181:
  v195 = rep;
  v196 = v192;
  if (rep != v192)
  {
    v197 = rep;
    do
    {
      v199 = (void *)*((_QWORD *)v197 - 3);
      v197 -= 24;
      v198 = v199;
      if (v199)
      {
        *(v195 - 2) = v198;
        operator delete(v198);
      }
      v195 = v197;
    }
    while (v197 != v192);
    v196 = v209;
  }
  rep = v192;
  operator delete(v196);
  return v191;
}

void sub_20F174B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20F174B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_20E86E8C4((uint64_t *)(v35 - 96));
  sub_20E86E8C4((uint64_t *)(v35 - 104));
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20F174BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  MEMORY[0x212BC6398](v17, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F174BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F174BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F174C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *object,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a42 && a41 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20F174C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F174C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F174C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20E9DD680((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F174C88(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v3 = a3[1];
  if (v3 == *a3)
    return;
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 + ((unint64_t)a2 << 8);
  v10 = *(_QWORD *)(v7 + 8);
  v9 = (_QWORD *)(v7 + 8);
  v8 = v10;
  v11 = *(_QWORD *)(v3 - 8);
  v12 = (v9[1] - v10) >> 7;
  if (v11 + 1 >= v12 || !*(_QWORD *)(v8 + ((v11 + 1) << 7) + 64))
    goto LABEL_10;
  v13 = (uint64_t *)(v8 + (v11 << 7) + 320);
  v14 = v11;
  while (v12 - 2 != v14)
  {
    v15 = *v13;
    v13 += 16;
    ++v14;
    if (!v15)
    {
      if (!v14)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  v14 = v12 - 1;
  if (v12 != 1)
    goto LABEL_14;
LABEL_10:
  v16 = (uint64_t *)(v8 + (v11 << 7) - 64);
  do
  {
    if (!v11)
      goto LABEL_16;
    --v11;
    v17 = *v16;
    v16 -= 16;
  }
  while (!v17);
  v14 = v11;
  if (v11)
  {
LABEL_14:
    if (v14 >= v12)
      goto LABEL_21;
  }
  else
  {
LABEL_16:
    if (!*(_QWORD *)(v8 + 64))
      return;
    v14 = 0;
    if (!v12)
      goto LABEL_21;
  }
  if (*(_QWORD *)(v8 + (v14 << 7) + 64))
  {
    if (v14 >= v12)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_21:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VisualSlidingWindow.h", 761, (uint64_t)"last_valid_element < elements.size() && predicate(elements[last_valid_element]) > 0", 83, (uint64_t)"Make sure last_valid_element points to a valid element", 54, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_44;
  }
  if (v14 == -1)
    return;
  v8 = *v9;
  if (v14 >= (uint64_t)(v9[1] - *v9) >> 7)
    goto LABEL_25;
LABEL_24:
  if (*(_QWORD *)(v8 + (v14 << 7) + 64))
    goto LABEL_26;
LABEL_25:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 652, (uint64_t)"last_track_used == static_cast<size_t>(-1) || (last_track_used < tracks.size() && !tracks[last_track_used].empty())", 115, (uint64_t)"Make sure last_track_used points to a valid track.", 50, (void (*)(void **))sub_21023DDB0))
  {
LABEL_44:
    abort();
  }
LABEL_26:
  v18 = a3[1] - *a3;
  if (v18)
  {
    v19 = 0;
    v20 = (_QWORD **)(v9 + 5);
    v21 = v18 >> 3;
    v22 = (_QWORD *)(v6 + (v5 << 8) + 56);
    do
    {
      v23 = *(_QWORD *)(*a3 + 8 * v19);
      if (v23 >= v14)
        break;
      v24 = *v20;
      v25 = (_QWORD *)*v22;
      v26 = *v9;
      if (*v20 != (_QWORD *)*v22)
      {
        while (*v24 != v26 + (v14 << 7))
        {
          if (++v24 == v25)
          {
            v24 = (_QWORD *)*v22;
            break;
          }
        }
      }
      if (v24 != v25)
      {
        *v24 = v26 + (v23 << 7);
        v26 = *v9;
      }
      v27 = (_QWORD *)(v26 + (v23 << 7));
      *v27 = -1;
      v27[7] = 0;
      v27[8] = 0;
      v27[6] = 0;
      v27[13] = 0;
      v27[14] = 0;
      v27[12] = 0;
      v28 = *v9;
      *(_DWORD *)(v28 + (v23 << 7)) = -1;
      if (!*(_QWORD *)(v28 + (v14 << 7) + 64))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 703, (uint64_t)"!tracks[last_track_used].empty()", 32, (uint64_t)"Attempting to backfill an empty track.", 38, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_44;
        }
        v28 = *v9;
      }
      sub_20F18C5D4((uint64_t *)(v28 + (v23 << 7)), (uint64_t *)(v28 + (v14 << 7)));
      v29 = 1 - v14;
      v30 = (v14 << 7) - 64;
      do
      {
        v31 = v29++;
        if (v29 == 1)
          break;
        v32 = *(_QWORD *)(*v9 + v30);
        v30 -= 128;
      }
      while (!v32);
      ++v19;
      v14 = -(uint64_t)v31;
    }
    while (v19 != v21);
  }
}

uint64_t sub_20F174F70(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  std::string::size_type *p_size;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::value_type *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD **v86;
  _QWORD **v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t *v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  _OWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  char *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD **v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  unsigned int v149;
  unint64_t v150;
  char *v151;
  _QWORD *v152;
  void *v153;
  char *v154;
  void *v155;
  void *v156;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  void *v161;
  void *v162;
  int v163;
  _QWORD **v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  char v169;
  uint64_t v170;
  void *__dst[2];
  _BYTE v172[7];
  char v173;
  std::string v174;
  void *v175;
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v177;
  int v178;
  const char *v179;
  int v180;
  const char *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::string object[2];
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;

  sub_20F1729F0(&v184);
  v168 = a1;
  if (**(int **)(v184 + 56) > 3)
    goto LABEL_93;
  v2 = *(unsigned __int8 *)(v184 + 72);
  v3 = sub_20E8C31DC(v184, "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_93;
  v175 = &v184;
  rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
  v177 = std::chrono::system_clock::now().__d_.__rep_;
  v178 = 3;
  v179 = "unknown file";
  v180 = 1133;
  v182 = 0;
  v183 = 0;
  v181 = "unknown function";
  v6 = v184;
  v7 = v184 + 16;
  if (*(char *)(v184 + 39) < 0)
  {
    v9 = *(const char **)(v184 + 16);
    v8 = *(_QWORD *)(v184 + 24);
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v184 + 39);
    v9 = (const char *)(*(_QWORD *)v175 + 16);
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[1].__r_.__value_.__s.__data_[0] && SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(object[0].__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v12, v9);
  p_size = &object[0].__r_.__value_.__l.__size_;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v15 = v4;
    v16 = v9;
    v17 = v6;
    v18 = v2;
    v19 = v7;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    p_size = (std::string::size_type *)operator new(v20 + 1);
    object[0].__r_.__value_.__r.__words[2] = v13;
    object[1].__r_.__value_.__r.__words[0] = v21 | 0x8000000000000000;
    object[0].__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v7 = v19;
    v2 = v18;
    v6 = v17;
    v9 = v16;
    v4 = v15;
    goto LABEL_23;
  }
  object[1].__r_.__value_.__s.__data_[7] = v13;
  if (v13)
LABEL_23:
    memmove(p_size, v12, v13);
  *((_BYTE *)p_size + v13) = 0;
  object[1].__r_.__value_.__s.__data_[8] = 1;
  v22 = &object[1].__r_.__value_.__s.__data_[16];
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v24 = v8 | 7;
    v25 = v24 + 1;
    v22 = (std::string::value_type *)operator new(v24 + 1);
    *(_QWORD *)&v186 = v8;
    *((_QWORD *)&v186 + 1) = v25 | 0x8000000000000000;
    object[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  }
  else
  {
    HIBYTE(v186) = v8;
    if (!v8)
    {
      object[1].__r_.__value_.__s.__data_[16] = 0;
      LOBYTE(v187) = 1;
      v23 = object[0].__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v186) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v9, v8);
  v22[v8] = 0;
  LOBYTE(v187) = 1;
  v23 = object[0].__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v186) & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[1].__r_.__value_.__s.__data_[8])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete((void *)object[1].__r_.__value_.__r.__words[2]);
  if (!object[1].__r_.__value_.__s.__data_[8])
    goto LABEL_37;
LABEL_35:
  if (object[1].__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)object[0].__r_.__value_.__l.__size_);
LABEL_37:
  if (object[0].__r_.__value_.__r.__words[0])
    os_release(object[0].__r_.__value_.__l.__data_);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    object[0].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    object[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    memset(&object[1], 0, sizeof(std::string));
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = object[0].__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v6 + 39);
    if ((v35 & 0x80u) == 0)
      v36 = v7;
    else
      v36 = *(_QWORD *)(v6 + 16);
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)v34 = v33;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&object[0].__r_.__value_.__r.__words[1];
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)&object[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&object[1].__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v195 = 0;
    v174.__r_.__value_.__r.__words[0] = v34;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v174);
    v37 = v174.__r_.__value_.__r.__words[0];
    v174.__r_.__value_.__r.__words[0] = 0;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
      v44 = v195;
      v195 = 0;
      if (v44)
      {
        v45 = *(std::__shared_weak_count **)(v44 + 32);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = *(std::__shared_weak_count **)(v44 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
      }
    }
    size = (std::__shared_weak_count *)object[1].__r_.__value_.__l.__size_;
    a1 = v168;
    if (object[1].__r_.__value_.__l.__size_)
    {
      v52 = (unint64_t *)(object[1].__r_.__value_.__l.__size_ + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v54 = (std::__shared_weak_count *)object[0].__r_.__value_.__r.__words[2];
    if (object[0].__r_.__value_.__r.__words[2])
    {
      v55 = (unint64_t *)(object[0].__r_.__value_.__r.__words[2] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    LOWORD(object[0].__r_.__value_.__l.__data_) = 0;
    v57 = (void *)_os_log_send_and_compose_impl();
    a1 = v168;
    if (v57)
      free(v57);
  }
  if (v2)
  {
    sub_20E8C003C((uint64_t)&v175, "Collapsing the latest frame.");
    sub_20E863570((uint64_t)&v175);
  }
  sub_20E863570((uint64_t)&v175);
  v58 = v183;
  if (v183)
  {
    v59 = (unint64_t *)&v183->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v61 = a1[9];
      if (v61)
        goto LABEL_94;
LABEL_96:
      v62 = a1[5];
      v63 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v62) >> 3) - 1;
      goto LABEL_97;
    }
  }
LABEL_93:
  v61 = a1[9];
  if (!v61)
    goto LABEL_96;
LABEL_94:
  v62 = a1[5];
  v63 = v61 - 1;
LABEL_97:
  v64 = *(_DWORD *)(v62 + 56 * v63);
  v65 = v62 + 56 * v63;
  *(_QWORD *)v65 = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v65 + 8) = _Q0;
  *(_BYTE *)(v65 + 24) = 0;
  v72 = *(void **)(v65 + 32);
  v71 = (_QWORD *)(v65 + 32);
  v70 = v72;
  if (v72)
  {
    *(_QWORD *)(v62 + 56 * v63 + 40) = v70;
    operator delete(v70);
  }
  *v71 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v73 = a1[9];
  if (!v73)
    v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
  v74 = a1[10] - 1;
  a1[9] = v73 - 1;
  a1[10] = v74;
  v76 = a1[2];
  v75 = a1[3];
  if (v76 == v75)
  {
    v79 = a1[3];
  }
  else
  {
    do
    {
      v77 = *(_OWORD *)(v76 + 48);
      *(_OWORD *)(v76 + 48) = *(_OWORD *)(v76 + 72);
      *(_OWORD *)(v76 + 72) = v77;
      v78 = *(_QWORD *)(v76 + 64);
      *(_QWORD *)(v76 + 64) = *(_QWORD *)(v76 + 88);
      *(_QWORD *)(v76 + 88) = v78;
      v76 += 256;
    }
    while (v76 != v75);
    v75 = a1[2];
    v79 = a1[3];
  }
  sub_20EDFBD4C(&v175, (v79 - v75) >> 8);
  v80 = a1[3] - a1[2];
  if (v80)
  {
    v81 = 0;
    v82 = 0;
    v83 = v80 >> 8;
    v84 = (unint64_t)(v80 >> 8) <= 1 ? 1 : v80 >> 8;
    v166 = v84;
    v167 = v83;
    v165 = v64;
    do
    {
      v169 = v81;
      v85 = a1[2] + (v82 << 8);
      v87 = *(_QWORD ***)(v85 + 72);
      v86 = *(_QWORD ***)(v85 + 80);
      if (v87 != v86)
      {
        v170 = v82;
        do
        {
          v88 = *v87;
          if (!*v87)
            goto LABEL_114;
          v89 = v88[8];
          if (!v89)
          {
            if (v64 == -1)
              goto LABEL_161;
            goto LABEL_114;
          }
          v90 = v88[7];
          if (v90)
          {
            v91 = v88[3];
            if (*(_DWORD *)(v91 + 208 * v90 - 16) != v64)
              goto LABEL_114;
          }
          else
          {
            v91 = v88[3];
            if (*(_DWORD *)(v91 + 16 * ((v88[4] - v91) >> 4) - 16) != v64)
              goto LABEL_114;
          }
          if (v89 == 1)
          {
            *v88 = -1;
            v88[7] = 0;
            v88[8] = 0;
            v88[6] = 0;
            v88[13] = 0;
            v88[14] = 0;
            v88[12] = 0;
            v92 = ((uint64_t)v88 - *(_QWORD *)(a1[2] + (v82 << 8) + 8)) >> 7;
            v93 = (char *)v175 + 24 * v82;
            v94 = (uint64_t *)(v93 + 8);
            v95 = (uint64_t *)*((_QWORD *)v93 + 1);
            v97 = v93 + 16;
            v96 = *((_QWORD *)v93 + 2);
            if ((unint64_t)v95 < v96)
            {
              *v95 = v92;
              v98 = (uint64_t)(v95 + 1);
LABEL_160:
              *v94 = v98;
              goto LABEL_114;
            }
            v108 = *(uint64_t **)v93;
            v109 = (uint64_t)v95 - *(_QWORD *)v93;
            v110 = v109 >> 3;
            v111 = (v109 >> 3) + 1;
            if (v111 >> 61)
              sub_20E867F44();
            v112 = v96 - (_QWORD)v108;
            if (v112 >> 2 > v111)
              v111 = v112 >> 2;
            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
              v113 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v113 = v111;
            if (v113)
            {
              v164 = v86;
              if (v113 >> 61)
                sub_20E877A38();
              v114 = v93 + 8;
              v115 = (char *)v175 + 24 * v82;
              v116 = v113;
              v117 = operator new(8 * v113);
              v93 = v115;
              v113 = v116;
              v94 = (uint64_t *)v114;
              v86 = v164;
              v118 = (uint64_t *)&v117[8 * v110];
              *v118 = v92;
              v98 = (uint64_t)(v118 + 1);
              v119 = (char *)v95 - (char *)v108;
              if (v95 != v108)
              {
LABEL_140:
                v120 = v119 - 8;
                if (v120 < 0x58)
                {
                  v64 = v165;
                  goto LABEL_156;
                }
                v124 = (char *)v95 - v117 - v109;
                v64 = v165;
                if (v124 < 0x20)
                  goto LABEL_212;
                v125 = (v120 >> 3) + 1;
                v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
                v127 = &v95[v126 / 0xFFFFFFFFFFFFFFF8];
                v118 = (uint64_t *)((char *)v118 - v126);
                v128 = &v117[8 * v110 - 16];
                v129 = v95 - 2;
                v130 = v125 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v131 = *(_OWORD *)v129;
                  *(v128 - 1) = *((_OWORD *)v129 - 1);
                  *v128 = v131;
                  v128 -= 2;
                  v129 -= 4;
                  v130 -= 4;
                }
                while (v130);
                v95 = v127;
                if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_212:
                  do
                  {
LABEL_156:
                    v132 = *--v95;
                    *--v118 = v132;
                  }
                  while (v95 != v108);
                }
LABEL_157:
                *(_QWORD *)v93 = v118;
                *v94 = v98;
                *v97 = &v117[8 * v113];
                if (v108)
                  operator delete(v108);
                a1 = v168;
                v82 = v170;
                goto LABEL_160;
              }
            }
            else
            {
              v117 = 0;
              v118 = (uint64_t *)(8 * v110);
              *(_QWORD *)(8 * v110) = v92;
              v98 = 8 * v110 + 8;
              v119 = (char *)v95 - (char *)v108;
              if (v95 != v108)
                goto LABEL_140;
            }
            v64 = v165;
            goto LABEL_157;
          }
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          v189 = 0u;
          v190 = 0u;
          v187 = 0u;
          v188 = 0u;
          v186 = 0u;
          memset(object, 0, sizeof(object));
          if (!v90)
            v90 = 0x4EC4EC4EC4EC4EC5 * ((v88[4] - v91) >> 4);
          v99 = v91 + 208 * v90;
          *(_QWORD *)(v99 - 208) = 0;
          *(_QWORD *)(v99 - 200) = 0;
          *(_OWORD *)(v99 - 192) = *(_OWORD *)&object[0].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v99 - 176) = *(_OWORD *)&object[1].__r_.__value_.__r.__words[1];
          *(_OWORD *)(v99 - 160) = v186;
          *(_OWORD *)(v99 - 144) = v187;
          *(_OWORD *)(v99 - 128) = v188;
          *(_OWORD *)(v99 - 112) = v189;
          *(_OWORD *)(v99 - 96) = v190;
          v100 = v191;
          v101 = v192;
          v102 = v194;
          *(_OWORD *)(v99 - 48) = v193;
          *(_OWORD *)(v99 - 32) = v102;
          *(_OWORD *)(v99 - 80) = v100;
          *(_OWORD *)(v99 - 64) = v101;
          *(_DWORD *)(v99 - 16) = -1;
          *(_QWORD *)(v99 - 8) = 0;
          v103 = v88[7];
          if (v103)
          {
            v104 = v88[8] - 1;
            v88[7] = v103 - 1;
            v88[8] = v104;
            v105 = v88[13];
            if (v105)
              goto LABEL_128;
          }
          else
          {
            v121 = v88[8] - 1;
            v88[7] = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v88[4] - v88[3]) >> 4) - 1;
            v88[8] = v121;
            v105 = v88[13];
            if (v105)
            {
LABEL_128:
              *(_BYTE *)(v88[9] + v105 - 1) = 0;
              v106 = v88[13];
              if (v106)
                goto LABEL_129;
              goto LABEL_144;
            }
          }
          *(_BYTE *)(v88[9] + ~v88[9] + v88[10]) = 0;
          v106 = v88[13];
          if (v106)
          {
LABEL_129:
            v107 = v88[14] - 1;
            v88[13] = v106 - 1;
            v88[14] = v107;
            if (!v88[8])
              goto LABEL_161;
            goto LABEL_145;
          }
LABEL_144:
          v122 = v88[14] - 1;
          v88[13] = ~v88[9] + v88[10];
          v88[14] = v122;
          if (!v88[8])
            goto LABEL_161;
LABEL_145:
          v123 = v88[7];
          if (v123)
          {
            if (*(_DWORD *)(v88[3] + 208 * v123 - 16) == -1)
              goto LABEL_161;
          }
          else if (*(_DWORD *)(v88[3] + 16 * ((uint64_t)(v88[4] - v88[3]) >> 4) - 16) == -1)
          {
LABEL_161:
            v133 = v169;
            goto LABEL_181;
          }
LABEL_114:
          ++v87;
        }
        while (v87 != v86);
      }
      v81 = ++v82 >= v167;
    }
    while (v82 != v166);
    v135 = a1[2];
    v134 = a1[3];
    if (v134 != v135)
    {
      v136 = 0;
      v137 = 0;
      do
      {
        v139 = (char *)v175 + 24 * v136;
        v140 = *(_QWORD **)v139;
        v141 = (_QWORD *)*((_QWORD *)v139 + 1);
        if (v140 != v141)
        {
          v142 = v135 + (v136 << 8);
          v143 = (_QWORD **)(v142 + 48);
          v144 = (_QWORD *)(v142 + 8);
          v145 = (_QWORD *)(v142 + 56);
          do
          {
            v146 = *v143;
            v147 = (_QWORD *)*v145;
            if (*v143 != (_QWORD *)*v145)
            {
              while (*v146 != *v144 + (*v140 << 7))
              {
                if (++v146 == v147)
                {
                  v146 = (_QWORD *)*v145;
                  break;
                }
              }
            }
            if (v146 != v147)
              *v146 = 0;
            ++v140;
          }
          while (v140 != v141);
          v135 = a1[2];
          v134 = a1[3];
        }
        v138 = (v134 - v135) >> 8;
        v136 = ++v137;
      }
      while (v138 > v137);
      if (v134 != v135)
      {
        v148 = 0;
        v149 = 0;
        do
        {
          sub_20F174C88((uint64_t)a1, v149, (_QWORD *)v175 + 3 * v148);
          v138 = (uint64_t)(a1[3] - a1[2]) >> 8;
          v148 = ++v149;
        }
        while (v138 > v149);
      }
      if (v138)
      {
        v150 = 0;
        while (1)
        {
          while (1)
          {
            std::to_string(&v174, v150);
            v158 = std::string::insert(&v174, 0, "CollapseLatestFrame stream_id@", 0x1EuLL);
            v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
            object[0].__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
            *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v159;
            v158->__r_.__value_.__l.__size_ = 0;
            v158->__r_.__value_.__r.__words[2] = 0;
            v158->__r_.__value_.__r.__words[0] = 0;
            v160 = std::string::append(object, " ", 1uLL);
            v161 = (void *)v160->__r_.__value_.__r.__words[0];
            v162 = (void *)v160->__r_.__value_.__l.__size_;
            LODWORD(v195) = v160->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)&v195 + 3) = *(_DWORD *)((char *)&v160->__r_.__value_.__r.__words[2] + 3);
            v163 = SHIBYTE(v160->__r_.__value_.__r.__words[2]);
            v160->__r_.__value_.__l.__size_ = 0;
            v160->__r_.__value_.__r.__words[2] = 0;
            v160->__r_.__value_.__r.__words[0] = 0;
            if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              break;
            operator delete(object[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_190;
LABEL_196:
            if ((v163 & 0x80000000) == 0)
              goto LABEL_191;
LABEL_197:
            sub_20E860C04(__dst, v161, (unint64_t)v162);
            if (v173 < 0)
              operator delete(__dst[0]);
            operator delete(v161);
            ++v150;
            v133 = 1;
            if (v138 == v150)
              goto LABEL_181;
          }
          if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_196;
LABEL_190:
          operator delete(v174.__r_.__value_.__l.__data_);
          if (v163 < 0)
            goto LABEL_197;
LABEL_191:
          __dst[0] = v161;
          __dst[1] = v162;
          *(_DWORD *)v172 = v195;
          *(_DWORD *)&v172[3] = *(_DWORD *)((char *)&v195 + 3);
          v173 = v163;
          ++v150;
          v133 = 1;
          if (v138 == v150)
            goto LABEL_181;
        }
      }
    }
  }
  v133 = 1;
LABEL_181:
  v151 = (char *)v175;
  if (v175)
  {
    v152 = rep;
    v153 = v175;
    if (rep != v175)
    {
      v154 = (char *)rep;
      do
      {
        v156 = (void *)*((_QWORD *)v154 - 3);
        v154 -= 24;
        v155 = v156;
        if (v156)
        {
          *(v152 - 2) = v155;
          operator delete(v155);
        }
        v152 = v154;
      }
      while (v154 != v151);
      v153 = v175;
    }
    rep = v151;
    operator delete(v153);
  }
  return v133 & 1;
}

void sub_20F175E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  if (a49)
  {
    if (a48 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  sub_20E86E8C4(&a30);
  sub_20E86E8C4((uint64_t *)(v43 - 104));
  sub_20E86E658((uint64_t)&a43);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20E86E658((uint64_t)&a43);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MEMORY[0x212BC6398](v33, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;

  operator delete(v33);
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F175F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *object,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a50 && a49 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F175FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F175FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if ((a35 & 0x80000000) == 0)
  {
    sub_20E9DD680(&a36);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_20E9DD680(&a36);
  _Unwind_Resume(a1);
}

void sub_20F176050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F176064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F176078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_20F17608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, _QWORD *a6, unsigned __int8 a7, int a8, unsigned int a9, unsigned int a10, unsigned __int8 a11)
{
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v55;

  v11 = a8;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v51 = a5;
  if (a5)
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v52 = a7;
  if (a7)
    a6[1] = *a6;
  v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)a9 << 8);
  v14 = *(_QWORD *)(v13 + 48);
  v50 = (uint64_t *)(v13 + 48);
  v16 = (uint64_t *)(v13 + 56);
  v15 = *(_QWORD *)(v13 + 56);
  v49 = v16;
  if (v15 != v14)
  {
    v17 = 0;
    v18 = 0;
    v19 = a11;
    v48 = ~a8;
    while (1)
    {
      v20 = *(_QWORD **)(v14 + 8 * v17);
      if (v20)
      {
        v21 = v20[8];
        if ((int)v21 > v11
          && (!v19 || *(_BYTE *)(v20[9] + (unint64_t)(v20[12] + (int)v21 - 1) % (v20[10] - v20[9]))))
        {
          break;
        }
      }
LABEL_8:
      if (++v17 >= (unint64_t)((v15 - v14) >> 3))
        return v18;
    }
    v22 = v21 - 1;
    sub_20F176430(v20[3]+ 208 * ((v20[6] + v21 - 1) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v20[4] - v20[3]) >> 4)))+ 64, (char **)a2);
    v23 = (int)v21 + v48;
    sub_20F176430(v20[3]+ 208 * ((v20[6] + v23) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v20[4] - v20[3]) >> 4)))+ 64, (char **)a3);
    if (!v52)
    {
LABEL_37:
      if (v51)
        sub_20F176430(v20[3]+ 208 * ((v20[6] + v23) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v20[4] - v20[3]) >> 4)))+ 16 * a10+ 64, (char **)a4);
      v18 = (v18 + 1);
      v15 = *v49;
      v14 = *v50;
      goto LABEL_8;
    }
    v24 = *(_QWORD *)(v20[3]
                    + 208
                    * ((v20[6] + v22) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v20[4] - v20[3]) >> 4)))
                    + 160);
    v26 = (char *)a6[1];
    v25 = a6[2];
    v55 = v18;
    if ((unint64_t)v26 < v25)
    {
      *(_QWORD *)v26 = v24;
      v18 = (uint64_t)(v26 + 8);
LABEL_36:
      v19 = a11;
      a6[1] = v18;
      LODWORD(v18) = v55;
      goto LABEL_37;
    }
    v27 = (char *)*a6;
    v28 = (uint64_t)&v26[-*a6];
    v29 = v28 >> 3;
    v30 = (v28 >> 3) + 1;
    if (v30 >> 61)
      sub_20E867F44();
    v31 = v25 - (_QWORD)v27;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        sub_20E877A38();
      v33 = operator new(8 * v32);
      v34 = &v33[8 * v29];
      *v34 = v24;
      v18 = (uint64_t)(v34 + 1);
      v35 = v26 - v27;
      if (v26 == v27)
        goto LABEL_33;
    }
    else
    {
      v33 = 0;
      v34 = (_QWORD *)(8 * v29);
      *(_QWORD *)(8 * v29) = v24;
      v18 = 8 * v29 + 8;
      v35 = v26 - v27;
      if (v26 == v27)
      {
LABEL_33:
        *a6 = v34;
        a6[1] = v18;
        a6[2] = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        v11 = a8;
        goto LABEL_36;
      }
    }
    v36 = v35 - 8;
    if (v36 < 0x58)
      goto LABEL_45;
    if ((unint64_t)(v26 - v33 - v28) < 0x20)
      goto LABEL_45;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v27);
    }
    goto LABEL_33;
  }
  return 0;
}

double sub_20F176430(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  double result;

  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 < v4)
  {
    *(_QWORD *)v5 = 0;
    v7 = v5 + 8;
    goto LABEL_22;
  }
  v8 = *a2;
  v9 = v5 - *a2;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    goto LABEL_46;
  v12 = v4 - v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      goto LABEL_47;
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v4 = &v14[8 * v13];
    *(_QWORD *)v15 = 0;
    v7 = v15 + 8;
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v4 = 0;
  *(_QWORD *)(8 * v10) = 0;
  v7 = (char *)(8 * v10 + 8);
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_50;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_50;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v15 -= v19;
    v20 = &v14[8 * v10 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *a2 = v15;
  a2[1] = v7;
  a2[2] = v4;
  if (v8)
  {
    operator delete(v8);
    v4 = a2[2];
  }
LABEL_22:
  a2[1] = v7;
  if (v7 < v4)
  {
    *(_QWORD *)v7 = 0;
    v25 = (uint64_t)(v7 + 8);
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 3;
  v29 = (v27 >> 3) + 1;
  if (v29 >> 61)
LABEL_46:
    sub_20E867F44();
  v30 = v4 - v26;
  if (v30 >> 2 > v29)
    v29 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    v33 = (char *)(8 * v28);
    v34 = 0;
    *(_QWORD *)(8 * v28) = 0;
    v25 = 8 * v28 + 8;
    v35 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
    goto LABEL_35;
  }
  if (v31 >> 61)
LABEL_47:
    sub_20E877A38();
  v32 = operator new(8 * v31);
  v33 = &v32[8 * v28];
  v34 = &v32[8 * v31];
  *(_QWORD *)v33 = 0;
  v25 = (uint64_t)(v33 + 8);
  v35 = v7 - v26;
  if (v7 == v26)
    goto LABEL_43;
LABEL_35:
  v36 = v35 - 8;
  if (v36 < 0x58)
  {
    v37 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v37 = v7;
    do
    {
LABEL_42:
      v44 = *((_QWORD *)v37 - 1);
      v37 -= 8;
      *((_QWORD *)v33 - 1) = v44;
      v33 -= 8;
    }
    while (v37 != v26);
    goto LABEL_43;
  }
  v38 = (v36 >> 3) + 1;
  v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
  v37 = &v7[-v39];
  v33 -= v39;
  v40 = &v32[8 * v28 - 16];
  v41 = v7 - 16;
  v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 4;
  }
  while (v42);
  if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = (char *)v25;
  a2[2] = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  a2[1] = (char *)v25;
  *(_QWORD *)(v25 - 16) = *(_QWORD *)a1;
  result = *(double *)(a1 + 8);
  *(double *)(v25 - 8) = result;
  return result;
}

void sub_20F1766E8(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  unint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t i;
  _QWORD *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  const char *v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  const char *v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  const char *v86;
  size_t v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  size_t v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unsigned __int8 v140;
  const char *v141;
  size_t v142;
  _BYTE *v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  size_t v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  unint64_t *v187;
  _QWORD *v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t *v208;
  _QWORD *v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  _QWORD *v221;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  BOOL v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int *v249;
  int v250;
  unint64_t v251;
  char *v252;
  _QWORD *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  int *v262;
  char *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  _OWORD *v268;
  char *v269;
  uint64_t v270;
  __int128 v271;
  int v272;
  uint64_t v273;
  _QWORD *v274;
  int v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  size_t v280;
  const char *v281;
  unsigned __int8 v282;
  const char *v283;
  size_t v284;
  _BYTE *v285;
  unint64_t v286;
  const char *v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  NSObject *v294;
  uint64_t v295;
  uint64_t v296;
  size_t v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  void *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  int v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v337;
  const char *v338;
  size_t v339;
  unsigned __int8 v340;
  unsigned __int8 v341;
  const char *v342;
  size_t v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  NSObject *v348;
  uint64_t v349;
  uint64_t v350;
  size_t v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  char *v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  const char *v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  void *v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  char *v395;
  uint64_t v396;
  char *v397;
  int *v398;
  uint64_t v400;
  uint64_t v401;
  int v402;
  _QWORD *v403;
  int v404;
  const char *__src;
  int __srca;
  _QWORD *__srcb;
  unint64_t *v408;
  int v409;
  uint64_t *v410;
  int v411;
  unint64_t v412;
  _QWORD *v413;
  unint64_t v414;
  const char *v415;
  uint64_t *v416;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v418;
  int v419;
  const char *v420;
  int v421;
  const char *v422;
  uint64_t v423;
  std::__shared_weak_count *v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD v427[2];
  std::__shared_weak_count *v428;
  char *v429;
  char *v430;
  _BYTE v431[24];
  __int128 v432;
  char *v433;
  size_t v434;
  unint64_t v435;
  char v436;
  uint64_t v437;

  v437 = *MEMORY[0x24BDAC8D0];
  v10 = a1[8];
  v411 = a4;
  v11 = a1[5];
  v12 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v11) >> 3);
  v13 = *(unsigned int *)(v11 + 56 * ((v10 + a4) % v12));
  v409 = a5;
  v14 = *(unsigned int *)(v11 + 56 * ((v10 + a5) % v12));
  v15 = a5 - a4 + 1;
  v16 = (unint64_t)a7 << 8;
  v17 = a1[2] + v16;
  v19 = *(_QWORD *)(v17 + 8);
  v18 = (uint64_t *)(v17 + 8);
  v401 = a7;
  v20 = v18 + 1;
  v21 = (v18[1] - v19) >> 5;
  sub_20FD3540C((uint64_t)a2, 0, v15, 0);
  v410 = v18;
  v408 = a2;
  sub_20FD35B7C(a2, (v18[1] - *v18) >> 7, v15, v21);
  v413 = a1;
  v22 = a1[2] + v16;
  v23 = *(_QWORD *)(v22 + 232);
  v24 = *(_QWORD *)(v22 + 240);
  if (v23 != v24)
  {
    sub_20FD35918((uint64_t)a2, 0, (unint64_t)(v24 - v23) >> 3);
    sub_20FD363E4((uint64_t)a2, v21, (*(_QWORD *)(a1[2] + (v401 << 8) + 240) - *(_QWORD *)(a1[2] + (v401 << 8) + 232)) >> 3);
    v25 = a1[2] + (v401 << 8);
    v26 = *(uint64_t **)(v25 + 232);
    v27 = *(uint64_t **)(v25 + 240);
    if (v26 != v27)
    {
      v28 = 0;
      do
      {
        v29 = *v26++;
        a2[10 * v28++ + 37] = v29;
      }
      while (v26 != v27);
    }
  }
  v30 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v31 = *v20 - *v18;
  v32 = v31 >> 7;
  if (v31 >> 7 > (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v30) >> 2))
  {
    if (v31 < 0)
      sub_20EABADD4();
    v33 = (char *)operator new((unint64_t)v31 >> 5);
    *(_QWORD *)a3 = v33;
    *(_QWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 16) = &v33[4 * v32];
    if (v30)
      operator delete(v30);
  }
  v35 = (unint64_t **)(a1 + 11);
  v34 = (void *)v413[11];
  v413[12] = v34;
  v36 = *v20 - *v18;
  v37 = v36 >> 7;
  if (v36 >> 7 > (unint64_t)((uint64_t)(v413[13] - (_QWORD)v34) >> 4))
  {
    if (v36 < 0)
LABEL_538:
      sub_20E867F44();
    v38 = (char *)operator new((unint64_t)v36 >> 3);
    v413[11] = v38;
    v413[12] = v38;
    v413[13] = &v38[16 * v37];
    if (v34)
      operator delete(v34);
  }
  v400 = a3;
  v39 = *v20;
  v40 = *v18;
  v41 = v413;
  if (*v20 != *v18)
  {
    for (i = 0; i < (v39 - v40) >> 7; ++i)
    {
      if ((*(_DWORD *)(v40 + (i << 7)) & 0x80000000) != 0)
      {
        if (!*(_QWORD *)(v40 + (i << 7) + 64))
          break;
        continue;
      }
      v43 = (_QWORD *)(v40 + (i << 7));
      v44 = v43[8];
      if (!v44)
        break;
      v45 = v43 + 3;
      v46 = v43[7];
      if (v46)
      {
        v47 = *v45;
        if (*(_DWORD *)(v47 + 208 * v46 - 16) >= (int)v13)
          goto LABEL_23;
      }
      else
      {
        v47 = *v45;
        if (*(_DWORD *)(v47 + 16 * ((*(_QWORD *)(v40 + (i << 7) + 32) - v47) >> 4) - 16) >= (int)v13)
        {
LABEL_23:
          if (v44 < 2 || *(_DWORD *)(v47 + 208 * *(_QWORD *)(v40 + (i << 7) + 48) + 192) > (int)v14)
            continue;
          v49 = (unint64_t *)v41[12];
          v48 = v41[13];
          if ((unint64_t)v49 < v48)
          {
            *v49 = v44;
            v49[1] = i;
            v50 = v49 + 2;
LABEL_43:
            v413[12] = v50;
            v41 = v413;
            v39 = *v20;
            v40 = *v410;
            continue;
          }
          v51 = v13;
          v52 = v14;
          v53 = *v35;
          v54 = ((char *)v49 - (char *)*v35) >> 4;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 60)
            goto LABEL_538;
          v56 = v48 - (_QWORD)v53;
          if (v56 >> 3 > v55)
            v55 = v56 >> 3;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            if (v57 >> 60)
              sub_20E877A38();
            v58 = (char *)operator new(16 * v57);
            v59 = (unint64_t *)&v58[16 * v54];
            *v59 = v44;
            v59[1] = i;
            v60 = (uint64_t)v59;
            if (v49 == v53)
              goto LABEL_40;
            do
            {
LABEL_38:
              *(_OWORD *)(v60 - 16) = *((_OWORD *)v49 - 1);
              v60 -= 16;
              v49 -= 2;
            }
            while (v49 != v53);
            v49 = *v35;
          }
          else
          {
            v58 = 0;
            v59 = (unint64_t *)(16 * v54);
            *v59 = v44;
            v59[1] = i;
            v60 = 16 * v54;
            if (v49 != v53)
              goto LABEL_38;
          }
LABEL_40:
          v61 = &v58[16 * v57];
          v50 = v59 + 2;
          v413[11] = v60;
          v413[12] = v59 + 2;
          v413[13] = v61;
          v14 = v52;
          if (v49)
            operator delete(v49);
          v13 = v51;
          goto LABEL_43;
        }
      }
    }
  }
  v62 = v41[11];
  v63 = (char *)v41[12];
  v64 = 126 - 2 * __clz((uint64_t)&v63[-v62] >> 4);
  if (v63 == (char *)v62)
    v65 = 0;
  else
    v65 = v64;
  sub_20F18B1F8(v62, v63, v65, 1);
  if (v41[11] != v41[12])
  {
    sub_20F1729F0(&v425);
    v66 = v413;
    if (**(int **)(v425 + 56) > 2)
      goto LABEL_228;
    v67 = *(unsigned __int8 *)(v425 + 72);
    v68 = sub_20E8C31DC(v425, "OSLogSurrogateAppender", 1, 0);
    v69 = v68;
    if (!v67 && !v68)
      goto LABEL_228;
    v416 = &v425;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v418 = std::chrono::system_clock::now().__d_.__rep_;
    v419 = 2;
    v420 = "unknown file";
    v421 = 1813;
    v423 = 0;
    v424 = 0;
    v422 = "unknown function";
    v70 = v425;
    v71 = v425 + 16;
    if (*(char *)(v425 + 39) < 0)
    {
      v73 = *(const char **)(v425 + 16);
      v72 = *(_QWORD *)(v425 + 24);
      v75 = (_QWORD *)v413[11];
      v74 = v413[12];
      v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v85 & 1) != 0)
        goto LABEL_61;
    }
    else
    {
      v72 = *(unsigned __int8 *)(v425 + 39);
      v73 = (const char *)(*v416 + 16);
      v75 = (_QWORD *)v413[11];
      v74 = v413[12];
      v76 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v76 & 1) != 0)
        goto LABEL_61;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v431);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
      if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
        operator delete(*(void **)v431);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_61:
    if (byte_254A4A4F8[23] >= 0)
      v86 = byte_254A4A4F8;
    else
      v86 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v87 = byte_254A4A4F8[23];
    else
      v87 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v73;
    *(_QWORD *)v431 = os_log_create(v86, v73);
    v88 = &v431[8];
    if (v87 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v87 >= 0x17)
    {
      v403 = v75;
      v89 = v69;
      v90 = v70;
      v91 = v74;
      v92 = v71;
      v93 = v67;
      v94 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v94 = v87 | 7;
      v95 = v94 + 1;
      v88 = operator new(v94 + 1);
      *(_QWORD *)&v431[16] = v87;
      *(_QWORD *)&v432 = v95 | 0x8000000000000000;
      *(_QWORD *)&v431[8] = v88;
      v67 = v93;
      v71 = v92;
      v74 = v91;
      v70 = v90;
      v69 = v89;
      v75 = v403;
    }
    else
    {
      BYTE7(v432) = v87;
      if (!v87)
      {
LABEL_75:
        v88[v87] = 0;
        BYTE8(v432) = 1;
        v96 = (char *)&v433;
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v72 >= 0x17)
        {
          v97 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v97 = v72 | 7;
          v98 = v97 + 1;
          v96 = (char *)operator new(v97 + 1);
          v434 = v72;
          v435 = v98 | 0x8000000000000000;
          v433 = v96;
        }
        else
        {
          HIBYTE(v435) = v72;
          if (!v72)
            goto LABEL_83;
        }
        memmove(v96, __src, v72);
LABEL_83:
        v96[v72] = 0;
        v436 = 1;
        v99 = *(NSObject **)v431;
        if (SHIBYTE(v435) < 0)
          operator delete(v433);
        if (BYTE8(v432) && SBYTE7(v432) < 0)
          operator delete(*(void **)&v431[8]);
        if (*(_QWORD *)v431)
          os_release(*(void **)v431);
        if (v69 && *(_QWORD *)(v69 + 24))
        {
          __srca = v67;
          v100 = _os_log_pack_size();
          v101 = (std::__shared_weak_count_vtbl *)operator new(v100, (std::align_val_t)8uLL);
          v102 = (std::__shared_weak_count *)operator new();
          v103 = v102;
          v102->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v102->__shared_owners_;
          v102->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v102->__shared_weak_owners_ = 0;
          v102[1].__vftable = v101;
          *(_QWORD *)v431 = v101;
          *(_QWORD *)&v431[8] = v101;
          *(_QWORD *)&v431[16] = v102;
          do
            v105 = __ldxr(p_shared_owners);
          while (__stxr(v105 + 1, p_shared_owners));
          v432 = 0uLL;
          v433 = 0;
          do
            v106 = __ldaxr(p_shared_owners);
          while (__stlxr(v106 - 1, p_shared_owners));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v103);
          }
          v107 = *(_QWORD *)v431;
          v108 = _os_log_pack_fill();
          v109 = *v75;
          v110 = *(_QWORD *)(v74 - 16);
          *(_DWORD *)v108 = 134218496;
          *(_QWORD *)(v108 + 4) = (v74 - (uint64_t)v75) >> 4;
          *(_WORD *)(v108 + 12) = 2048;
          *(_QWORD *)(v108 + 14) = v109;
          *(_WORD *)(v108 + 22) = 2048;
          *(_QWORD *)(v108 + 24) = v110;
          v111 = operator new();
          v112 = *(unsigned __int8 *)(v70 + 39);
          if ((v112 & 0x80u) == 0)
            v113 = v71;
          else
            v113 = *(_QWORD *)(v70 + 16);
          if ((v112 & 0x80u) != 0)
            v112 = *(_QWORD *)(v70 + 24);
          *(_QWORD *)v111 = v107;
          *(_OWORD *)(v111 + 8) = *(_OWORD *)&v431[8];
          *(_QWORD *)&v431[8] = 0;
          *(_QWORD *)&v431[16] = 0;
          *(_OWORD *)(v111 + 24) = v432;
          v432 = 0uLL;
          *(_QWORD *)(v111 + 40) = v113;
          *(_QWORD *)(v111 + 48) = v112;
          *(_BYTE *)(v111 + 56) = 2;
          v426 = 0;
          v427[0] = v111;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), v427);
          v114 = v427[0];
          v427[0] = 0;
          v66 = v413;
          v67 = __srca;
          if (v114)
          {
            v115 = *(std::__shared_weak_count **)(v114 + 32);
            if (v115)
            {
              v116 = (unint64_t *)&v115->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v118 = *(std::__shared_weak_count **)(v114 + 16);
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            MEMORY[0x212BC6398](v114, 0x10F0C40B62ED6C6);
            v121 = v426;
            v426 = 0;
            if (v121)
            {
              v122 = *(std::__shared_weak_count **)(v121 + 32);
              if (v122)
              {
                v123 = (unint64_t *)&v122->__shared_owners_;
                do
                  v124 = __ldaxr(v123);
                while (__stlxr(v124 - 1, v123));
                if (!v124)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              v125 = *(std::__shared_weak_count **)(v121 + 16);
              if (v125)
              {
                v126 = (unint64_t *)&v125->__shared_owners_;
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              MEMORY[0x212BC6398](v121, 0x10F0C40B62ED6C6);
            }
          }
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
          if (*((_QWORD *)&v432 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          v131 = *(std::__shared_weak_count **)&v431[16];
          if (*(_QWORD *)&v431[16])
          {
            v132 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
        }
        else
        {
          os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG);
          v134 = *v75;
          v135 = *(_QWORD *)(v74 - 16);
          *(_DWORD *)v431 = 134218496;
          *(_QWORD *)&v431[4] = (v74 - (uint64_t)v75) >> 4;
          *(_WORD *)&v431[12] = 2048;
          *(_QWORD *)&v431[14] = v134;
          *(_WORD *)&v431[22] = 2048;
          *(_QWORD *)&v432 = v135;
          v136 = (void *)_os_log_send_and_compose_impl();
          v66 = v413;
          if (v136)
            free(v136);
        }
        if (v67)
        {
          sub_20E8C003C((uint64_t)&v416, "Tracks in range: %zu With lengths: %zu to %zu", (uint64_t)(v66[12] - v66[11]) >> 4, *(_QWORD *)v66[11], *(_QWORD *)(v66[12] - 16));
          sub_20E863570((uint64_t)&v416);
        }
        sub_20E863570((uint64_t)&v416);
        v137 = v424;
        if (!v424)
          goto LABEL_228;
        v138 = (unint64_t *)&v424->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        goto LABEL_227;
      }
    }
    memmove(v88, v86, v87);
    goto LABEL_75;
  }
  sub_20F1729F0(&v425);
  v66 = v413;
  if (**(int **)(v425 + 56) > 2)
    goto LABEL_228;
  v77 = *(unsigned __int8 *)(v425 + 72);
  v78 = sub_20E8C31DC(v425, "OSLogSurrogateAppender", 1, 0);
  v79 = v78;
  if (!v77 && !v78)
    goto LABEL_228;
  v416 = &v425;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v418 = std::chrono::system_clock::now().__d_.__rep_;
  v419 = 2;
  v420 = "unknown file";
  v421 = 1815;
  v423 = 0;
  v424 = 0;
  v422 = "unknown function";
  v80 = v425;
  v81 = v425 + 16;
  if (*(char *)(v425 + 39) < 0)
  {
    v83 = *(const char **)(v425 + 16);
    v82 = *(_QWORD *)(v425 + 24);
    v140 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v140 & 1) != 0)
      goto LABEL_145;
  }
  else
  {
    v82 = *(unsigned __int8 *)(v425 + 39);
    v83 = (const char *)(*v416 + 16);
    v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v84 & 1) != 0)
      goto LABEL_145;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v431);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
    if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_145:
  if (byte_254A4A4F8[23] >= 0)
    v141 = byte_254A4A4F8;
  else
    v141 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v142 = byte_254A4A4F8[23];
  else
    v142 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v431 = os_log_create(v141, v83);
  v143 = &v431[8];
  if (v142 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v142 >= 0x17)
  {
    v144 = v79;
    v145 = v80;
    v146 = v77;
    v147 = v81;
    v148 = v83;
    v149 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v142 | 7) != 0x17)
      v149 = v142 | 7;
    v150 = v149 + 1;
    v143 = operator new(v149 + 1);
    *(_QWORD *)&v431[16] = v142;
    *(_QWORD *)&v432 = v150 | 0x8000000000000000;
    *(_QWORD *)&v431[8] = v143;
    v83 = v148;
    v81 = v147;
    v77 = v146;
    v80 = v145;
    v79 = v144;
    goto LABEL_158;
  }
  BYTE7(v432) = v142;
  if (v142)
LABEL_158:
    memmove(v143, v141, v142);
  v143[v142] = 0;
  BYTE8(v432) = 1;
  v151 = (char *)&v433;
  if (v82 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v82 >= 0x17)
  {
    v152 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v82 | 7) != 0x17)
      v152 = v82 | 7;
    v153 = v152 + 1;
    v151 = (char *)operator new(v152 + 1);
    v434 = v82;
    v435 = v153 | 0x8000000000000000;
    v433 = v151;
  }
  else
  {
    HIBYTE(v435) = v82;
    if (!v82)
      goto LABEL_167;
  }
  memmove(v151, v83, v82);
LABEL_167:
  v151[v82] = 0;
  v436 = 1;
  v154 = *(NSObject **)v431;
  if (SHIBYTE(v435) < 0)
    operator delete(v433);
  if (BYTE8(v432) && SBYTE7(v432) < 0)
    operator delete(*(void **)&v431[8]);
  if (*(_QWORD *)v431)
    os_release(*(void **)v431);
  if (v79 && *(_QWORD *)(v79 + 24))
  {
    v155 = _os_log_pack_size();
    v156 = (std::__shared_weak_count_vtbl *)operator new(v155, (std::align_val_t)8uLL);
    v157 = (std::__shared_weak_count *)operator new();
    v158 = v157;
    v157->__shared_owners_ = 0;
    v159 = (unint64_t *)&v157->__shared_owners_;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v156;
    *(_QWORD *)v431 = v156;
    *(_QWORD *)&v431[8] = v156;
    *(_QWORD *)&v431[16] = v157;
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
    v432 = 0uLL;
    v433 = 0;
    do
      v161 = __ldaxr(v159);
    while (__stlxr(v161 - 1, v159));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v158);
    }
    v162 = *(_QWORD *)v431;
    *(_WORD *)_os_log_pack_fill() = 0;
    v163 = operator new();
    v164 = *(unsigned __int8 *)(v80 + 39);
    if ((v164 & 0x80u) == 0)
      v165 = v81;
    else
      v165 = *(_QWORD *)(v80 + 16);
    if ((v164 & 0x80u) != 0)
      v164 = *(_QWORD *)(v80 + 24);
    *(_QWORD *)v163 = v162;
    *(_OWORD *)(v163 + 8) = *(_OWORD *)&v431[8];
    *(_QWORD *)&v431[8] = 0;
    *(_QWORD *)&v431[16] = 0;
    *(_OWORD *)(v163 + 24) = v432;
    v432 = 0uLL;
    *(_QWORD *)(v163 + 40) = v165;
    *(_QWORD *)(v163 + 48) = v164;
    *(_BYTE *)(v163 + 56) = 2;
    v426 = 0;
    v427[0] = v163;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v79 + 24) + 40))(*(_QWORD *)(v79 + 24), v427);
    v66 = v413;
    v166 = v427[0];
    v427[0] = 0;
    if (v166)
    {
      v167 = *(std::__shared_weak_count **)(v166 + 32);
      if (v167)
      {
        v168 = (unint64_t *)&v167->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v170 = *(std::__shared_weak_count **)(v166 + 16);
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
      v173 = v426;
      v426 = 0;
      if (v173)
      {
        v174 = *(std::__shared_weak_count **)(v173 + 32);
        if (v174)
        {
          v175 = (unint64_t *)&v174->__shared_owners_;
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
        v177 = *(std::__shared_weak_count **)(v173 + 16);
        if (v177)
        {
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
        }
        MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
      }
    }
    v180 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v181 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (!v182)
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
      }
    }
    v183 = *(std::__shared_weak_count **)&v431[16];
    if (*(_QWORD *)&v431[16])
    {
      v184 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
  }
  else
  {
    os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG);
    *(_WORD *)v431 = 0;
    v186 = (void *)_os_log_send_and_compose_impl();
    v66 = v413;
    if (v186)
      free(v186);
  }
  if (v77)
  {
    sub_20E8C003C((uint64_t)&v416, "No tracks in supplied frame range.");
    sub_20E863570((uint64_t)&v416);
  }
  sub_20E863570((uint64_t)&v416);
  v137 = v424;
  if (!v424)
    goto LABEL_228;
  v187 = (unint64_t *)&v424->__shared_owners_;
  do
    v139 = __ldaxr(v187);
  while (__stlxr(v139 - 1, v187));
LABEL_227:
  if (!v139)
  {
    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
    std::__shared_weak_count::__release_weak(v137);
    v188 = (_QWORD *)v66[11];
    v189 = (_QWORD *)v66[12];
    if (v188 != v189)
      goto LABEL_229;
LABEL_345:
    v402 = 0;
    v404 = 0;
    goto LABEL_346;
  }
LABEL_228:
  v188 = (_QWORD *)v66[11];
  v189 = (_QWORD *)v66[12];
  if (v188 == v189)
    goto LABEL_345;
LABEL_229:
  v402 = 0;
  v404 = 0;
  v190 = v409;
  __srcb = v189;
  do
  {
    v191 = *v410;
    v192 = v413[10];
    while (1)
    {
      v195 = v188[1];
      if (*((_BYTE *)v413 + 8))
      {
        v196 = v191 + (v195 << 7);
        v197 = *(_QWORD *)(v196 + 64);
        if (v197 < v192)
        {
          if (v197)
          {
            v198 = (_QWORD *)(v196 + 24);
            v199 = v191 + (v195 << 7);
            v200 = *(_QWORD *)(v199 + 56);
            if (v200)
            {
              v201 = *(_DWORD *)(*v198 + 208 * v200 - 16);
              v202 = v413;
              v203 = v413[9];
              if (v203)
                goto LABEL_239;
              goto LABEL_278;
            }
            v201 = *(_DWORD *)(*v198 + 16 * ((uint64_t)(*(_QWORD *)(v199 + 32) - *v198) >> 4) - 16);
            v202 = v413;
            v203 = v413[9];
            if (!v203)
            {
LABEL_278:
              v224 = v202 + 5;
              v204 = v202[5];
              if (v201 == *(_DWORD *)(v204 + 8 * ((v224[1] - v204) >> 3) - 56))
                goto LABEL_233;
              goto LABEL_243;
            }
          }
          else
          {
            v201 = -1;
            v202 = v413;
            v203 = v413[9];
            if (!v203)
              goto LABEL_278;
          }
LABEL_239:
          v204 = v202[5];
          if (v201 == *(_DWORD *)(v204 + 56 * v203 - 56))
            goto LABEL_233;
          goto LABEL_243;
        }
      }
      if (v192)
      {
        v204 = v413[5];
        v197 = *(_QWORD *)(v191 + (v195 << 7) + 64);
LABEL_243:
        v205 = 0;
        v206 = (_QWORD *)(v191 + (v195 << 7));
        v207 = v206 + 3;
        v208 = v206 + 7;
        v209 = v206 + 4;
        while (1)
        {
          if (v197)
          {
            v210 = *v208;
            if (!*v208)
              v210 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v209 - *v207) >> 4);
            v211 = *(_DWORD *)(*v207 + 208 * v210 - 16);
          }
          else
          {
            v211 = -1;
          }
          if (*(_DWORD *)(v204
                         + 56 * ((v413[8] + v205) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v413[6] - v204) >> 3)))) == v211)
            goto LABEL_255;
          if (v192 == ++v205)
            goto LABEL_254;
        }
      }
      v197 = *(_QWORD *)(v191 + (v195 << 7) + 64);
LABEL_254:
      LODWORD(v205) = -1;
LABEL_255:
      v212 = v205 - v197 + 1;
      v213 = v212 > v411 ? v205 - v197 + 1 : v411;
      v214 = (int)v205 >= v190 ? v190 : v205;
      v215 = (uint64_t *)(v191 + (v195 << 7));
      v216 = v215 + 9;
      v193 = v215[14];
      v217 = v213 - v212;
      v218 = v214 - v213 + 1;
      v219 = v218 + v217;
      v220 = v215 + 12;
      v221 = v215 + 10;
      if (v218 + v217 == v193)
      {
        if (v193 == v217)
          goto LABEL_231;
        v219 = v213 - v212;
        while (!*(_BYTE *)(*v216 + (*v220 + v219) % (unint64_t)(*v221 - *v216)))
        {
          if (v193 == ++v219)
          {
            LODWORD(v219) = v215[14];
            if (v193 == v217)
              goto LABEL_231;
            goto LABEL_275;
          }
        }
      }
      else if (v193 == v217 || (_DWORD)v218 != 0)
      {
        v223 = *v221 - *v216;
        if (*(_BYTE *)(*v216 + (*v220 + v217) % v223))
        {
          v219 = v213 - v212;
          v190 = v409;
          if (v193 == v217)
            goto LABEL_268;
        }
        else
        {
          v225 = 1 - v218;
          v226 = v193 - 1;
          v227 = v213 - v212;
          do
          {
            v229 = v226 == v227;
            if (v226 != v227 && !v225)
            {
              v190 = v409;
              v189 = __srcb;
              goto LABEL_288;
            }
            v228 = *(unsigned __int8 *)(*v216 + (*v220 + 1 + v227) % v223);
            ++v225;
            ++v227;
          }
          while (!v228);
          v189 = __srcb;
          v219 = v227;
          v190 = v409;
          if (v229)
          {
LABEL_268:
            if (v193 == v217)
              goto LABEL_231;
LABEL_275:
            if (v212 >= v411)
            {
              v193 = -v193;
              goto LABEL_232;
            }
LABEL_293:
            LODWORD(v193) = v217 - v219;
            goto LABEL_232;
          }
        }
      }
LABEL_288:
      if (!v219 && v193 != v217 && v212 >= v411)
      {
LABEL_231:
        LODWORD(v193) = 0;
        goto LABEL_232;
      }
      if (v219 || v193 != v217)
        goto LABEL_293;
LABEL_232:
      v194 = v218 + v193;
      if ((int)v218 + (int)v193 >= 2)
        break;
LABEL_233:
      v188 += 2;
      if (v188 == v189)
        goto LABEL_346;
    }
    v230 = v217 - v193;
    v231 = *v220;
    v232 = *v216;
    v233 = *v221 - *v216;
    v234 = v230;
    v235 = (v214 + v193 - v213);
    if (!(_DWORD)v235)
    {
      v236 = 0;
      v237 = v230;
      goto LABEL_303;
    }
    v238 = 0;
    v239 = 0;
    v240 = v235 + 1;
    v235 = (v235 + 1) & 0x1FFFFFFFELL;
    v237 = v235 + v234;
    v241 = v231 + v234;
    v242 = v235;
    do
    {
      if (*(_BYTE *)(v232 + v241 % v233))
        ++v238;
      if (*(_BYTE *)(v232 + (v241 + 1) % v233))
        ++v239;
      v241 += 2;
      v242 -= 2;
    }
    while (v242);
    v236 = v239 + v238;
    if (v240 != v235)
    {
LABEL_303:
      v243 = v237 + v231;
      if ((int)v205 >= v190)
        v244 = v190;
      else
        v244 = v205;
      v245 = v244 - v235 + v193;
      v246 = v205 - v197;
      if (v246 + 1 > v411)
        v247 = v246 + 1;
      else
        v247 = v411;
      v248 = v245 - v247 + 1;
      do
      {
        if (*(_BYTE *)(v232 + v243 % v233))
          ++v236;
        ++v243;
        --v248;
      }
      while (v248);
    }
    if (v236 >= 2)
    {
      v249 = (int *)(v191 + (v195 << 7));
      v250 = v213 - (v411 + v193);
      v398 = v249;
      if (*(_QWORD *)(v413[2] + (v401 << 8) + 232) == *(_QWORD *)(v413[2] + (v401 << 8) + 240))
        sub_20F1794F8(v408, v249, v194, v234, v250);
      else
        sub_20F1791B8((uint64_t)v408, (uint64_t)v249, v194, v234, v250);
      v252 = *(char **)(v400 + 8);
      v251 = *(_QWORD *)(v400 + 16);
      if ((unint64_t)v252 < v251)
      {
        v253 = (_QWORD *)(v191 + (v195 << 7));
        *(_DWORD *)v252 = *v398;
        v254 = (uint64_t)(v252 + 4);
        v190 = v409;
        goto LABEL_339;
      }
      v255 = *(char **)v400;
      v256 = (uint64_t)&v252[-*(_QWORD *)v400];
      v257 = v256 >> 2;
      v258 = (v256 >> 2) + 1;
      if (v258 >> 62)
        sub_20EABADD4();
      v259 = v251 - (_QWORD)v255;
      if (v259 >> 1 > v258)
        v258 = v259 >> 1;
      if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL)
        v260 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v260 = v258;
      if (v260)
      {
        v395 = &v252[-*(_QWORD *)v400];
        v396 = v256 >> 2;
        v397 = *(char **)v400;
        if (v260 >> 62)
          sub_20E877A38();
        v394 = v260;
        v261 = operator new(4 * v260);
        v255 = v397;
        v260 = v394;
        v256 = (uint64_t)v395;
        v257 = v396;
        v262 = (int *)&v261[4 * v396];
        *v262 = *v398;
        v254 = (uint64_t)(v262 + 1);
        v263 = (char *)(v252 - v397);
        if (v252 == v397)
          goto LABEL_336;
LABEL_330:
        v264 = (unint64_t)(v263 - 4);
        if (v264 < 0x2C)
          goto LABEL_573;
        if ((unint64_t)(v252 - &v261[v256]) < 0x20)
          goto LABEL_573;
        v265 = (v264 >> 2) + 1;
        v266 = 4 * (v265 & 0x7FFFFFFFFFFFFFF8);
        v267 = &v252[-v266];
        v262 = (int *)((char *)v262 - v266);
        v268 = &v261[4 * v257 - 16];
        v269 = v252 - 16;
        v270 = v265 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v271 = *(_OWORD *)v269;
          *(v268 - 1) = *((_OWORD *)v269 - 1);
          *v268 = v271;
          v268 -= 2;
          v269 -= 32;
          v270 -= 8;
        }
        while (v270);
        v252 = v267;
        if (v265 != (v265 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_573:
          do
          {
            v272 = *((_DWORD *)v252 - 1);
            v252 -= 4;
            *--v262 = v272;
          }
          while (v252 != v255);
        }
      }
      else
      {
        v261 = 0;
        v262 = (int *)(4 * v257);
        *(_DWORD *)(4 * v257) = *v398;
        v254 = 4 * v257 + 4;
        v263 = (char *)(v252 - v255);
        if (v252 != v255)
          goto LABEL_330;
      }
LABEL_336:
      *(_QWORD *)v400 = v262;
      *(_QWORD *)(v400 + 8) = v254;
      *(_QWORD *)(v400 + 16) = &v261[4 * v260];
      if (v255)
      {
        v273 = v254;
        operator delete(v255);
        v254 = v273;
      }
      v190 = v409;
      v253 = (_QWORD *)(v191 + (v195 << 7));
LABEL_339:
      v402 += v236;
      *(_QWORD *)(v400 + 8) = v254;
      if (*((_BYTE *)v413 + 8))
      {
        *v253 = -1;
        v274 = (_QWORD *)(v191 + (v195 << 7));
        v274[7] = 0;
        v274[8] = 0;
        v274[6] = 0;
        v220[1] = 0;
        v220[2] = 0;
        *v220 = 0;
      }
    }
    v189 = __srcb;
    v404 += v194;
    if (*v408 >= a6)
      break;
    v188 += 2;
  }
  while (v188 != __srcb);
LABEL_346:
  sub_20F1729F0(&v425);
  if (**(int **)(v425 + 56) > 3)
    goto LABEL_437;
  v275 = *(unsigned __int8 *)(v425 + 72);
  v276 = sub_20E8C31DC(v425, "OSLogSurrogateAppender", 1, 0);
  v277 = v276;
  if (!v275 && !v276)
    goto LABEL_437;
  v416 = &v425;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v418 = std::chrono::system_clock::now().__d_.__rep_;
  v419 = 3;
  v420 = "unknown file";
  v421 = 1914;
  v423 = 0;
  v424 = 0;
  v422 = "unknown function";
  v278 = *v416;
  v279 = *v416 + 16;
  if (*(char *)(*v416 + 39) < 0)
  {
    v281 = *(const char **)(v278 + 16);
    v280 = *(_QWORD *)(v278 + 24);
  }
  else
  {
    v280 = *(unsigned __int8 *)(*v416 + 39);
    v281 = (const char *)(*v416 + 16);
  }
  v412 = v408[1];
  v414 = *v408;
  v282 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v282 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v431);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
    if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
      operator delete(*(void **)v431);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v283 = byte_254A4A4F8;
  else
    v283 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v284 = byte_254A4A4F8[23];
  else
    v284 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v431 = os_log_create(v283, v281);
  v285 = &v431[8];
  if (v284 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v284 >= 0x17)
  {
    v286 = v277;
    v287 = v281;
    v288 = v278;
    v289 = v275;
    v290 = v279;
    v291 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v284 | 7) != 0x17)
      v291 = v284 | 7;
    v292 = v291 + 1;
    v285 = operator new(v291 + 1);
    *(_QWORD *)&v431[16] = v284;
    *(_QWORD *)&v432 = v292 | 0x8000000000000000;
    *(_QWORD *)&v431[8] = v285;
    v279 = v290;
    v275 = v289;
    v278 = v288;
    v281 = v287;
    v277 = v286;
    goto LABEL_366;
  }
  BYTE7(v432) = v284;
  if (v284)
LABEL_366:
    memmove(v285, v283, v284);
  v285[v284] = 0;
  BYTE8(v432) = 1;
  v293 = (char *)&v433;
  if (v280 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v280 >= 0x17)
  {
    v295 = (v280 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v280 | 7) != 0x17)
      v295 = v280 | 7;
    v296 = v295 + 1;
    v293 = (char *)operator new(v295 + 1);
    v434 = v280;
    v435 = v296 | 0x8000000000000000;
    v433 = v293;
  }
  else
  {
    HIBYTE(v435) = v280;
    if (!v280)
    {
      LOBYTE(v433) = 0;
      v436 = 1;
      v294 = *(NSObject **)v431;
      if ((SHIBYTE(v435) & 0x80000000) == 0)
        goto LABEL_371;
LABEL_377:
      operator delete(v433);
      if (BYTE8(v432))
        goto LABEL_378;
      goto LABEL_380;
    }
  }
  memmove(v293, v281, v280);
  v293[v280] = 0;
  v436 = 1;
  v294 = *(NSObject **)v431;
  if (SHIBYTE(v435) < 0)
    goto LABEL_377;
LABEL_371:
  if (BYTE8(v432))
  {
LABEL_378:
    if (SBYTE7(v432) < 0)
      operator delete(*(void **)&v431[8]);
  }
LABEL_380:
  if (*(_QWORD *)v431)
    os_release(*(void **)v431);
  if (v277 && *(_QWORD *)(v277 + 24))
  {
    v297 = _os_log_pack_size();
    v298 = (std::__shared_weak_count_vtbl *)operator new(v297, (std::align_val_t)8uLL);
    v299 = (std::__shared_weak_count *)operator new();
    v300 = v299;
    v299->__shared_owners_ = 0;
    v301 = (unint64_t *)&v299->__shared_owners_;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v298;
    *(_QWORD *)v431 = v298;
    *(_QWORD *)&v431[8] = v298;
    *(_QWORD *)&v431[16] = v299;
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
    v432 = 0uLL;
    v433 = 0;
    do
      v303 = __ldaxr(v301);
    while (__stlxr(v303 - 1, v301));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v300);
    }
    v304 = *(_QWORD *)v431;
    v305 = _os_log_pack_fill();
    *(_DWORD *)v305 = 134218240;
    *(_QWORD *)(v305 + 4) = v412;
    *(_WORD *)(v305 + 12) = 2048;
    *(_QWORD *)(v305 + 14) = v414;
    v306 = operator new();
    v307 = *(unsigned __int8 *)(v278 + 39);
    if ((v307 & 0x80u) == 0)
      v308 = v279;
    else
      v308 = *(_QWORD *)(v278 + 16);
    if ((v307 & 0x80u) != 0)
      v307 = *(_QWORD *)(v278 + 24);
    *(_QWORD *)v306 = v304;
    *(_OWORD *)(v306 + 8) = *(_OWORD *)&v431[8];
    *(_QWORD *)&v431[8] = 0;
    *(_QWORD *)&v431[16] = 0;
    *(_OWORD *)(v306 + 24) = v432;
    v432 = 0uLL;
    *(_QWORD *)(v306 + 40) = v308;
    *(_QWORD *)(v306 + 48) = v307;
    *(_BYTE *)(v306 + 56) = 1;
    v426 = 0;
    v427[0] = v306;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v277 + 24) + 40))(*(_QWORD *)(v277 + 24), v427);
    v309 = v427[0];
    v427[0] = 0;
    if (v309)
    {
      v310 = *(std::__shared_weak_count **)(v309 + 32);
      if (v310)
      {
        v311 = (unint64_t *)&v310->__shared_owners_;
        do
          v312 = __ldaxr(v311);
        while (__stlxr(v312 - 1, v311));
        if (!v312)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
        }
      }
      v313 = *(std::__shared_weak_count **)(v309 + 16);
      if (v313)
      {
        v314 = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
        }
      }
      MEMORY[0x212BC6398](v309, 0x10F0C40B62ED6C6);
      v316 = v426;
      v426 = 0;
      if (v316)
      {
        v317 = *(std::__shared_weak_count **)(v316 + 32);
        if (v317)
        {
          v318 = (unint64_t *)&v317->__shared_owners_;
          do
            v319 = __ldaxr(v318);
          while (__stlxr(v319 - 1, v318));
          if (!v319)
          {
            ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
            std::__shared_weak_count::__release_weak(v317);
          }
        }
        v320 = *(std::__shared_weak_count **)(v316 + 16);
        if (v320)
        {
          v321 = (unint64_t *)&v320->__shared_owners_;
          do
            v322 = __ldaxr(v321);
          while (__stlxr(v322 - 1, v321));
          if (!v322)
          {
            ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
            std::__shared_weak_count::__release_weak(v320);
          }
        }
        MEMORY[0x212BC6398](v316, 0x10F0C40B62ED6C6);
      }
    }
    v323 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v324 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v325 = __ldaxr(v324);
      while (__stlxr(v325 - 1, v324));
      if (!v325)
      {
        ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
        std::__shared_weak_count::__release_weak(v323);
      }
    }
    v326 = *(std::__shared_weak_count **)&v431[16];
    if (*(_QWORD *)&v431[16])
    {
      v327 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
      do
        v328 = __ldaxr(v327);
      while (__stlxr(v328 - 1, v327));
      if (!v328)
      {
        ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
        std::__shared_weak_count::__release_weak(v326);
      }
    }
  }
  else
  {
    os_log_type_enabled(v294, OS_LOG_TYPE_INFO);
    *(_DWORD *)v431 = 134218240;
    *(_QWORD *)&v431[4] = v412;
    *(_WORD *)&v431[12] = 2048;
    *(_QWORD *)&v431[14] = v414;
    v329 = (void *)_os_log_send_and_compose_impl();
    if (v329)
      free(v329);
  }
  if (v275)
  {
    sub_20E8C003C((uint64_t)&v416, "Extracted vision measurements with %zu frames and %zu tracks", v408[1], *v408);
    sub_20E863570((uint64_t)&v416);
  }
  sub_20E863570((uint64_t)&v416);
  v330 = v424;
  if (v424)
  {
    v331 = (unint64_t *)&v424->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
LABEL_437:
  sub_20F1729F0(&v425);
  if (**(int **)(v425 + 56) > 3)
    return;
  v333 = *(unsigned __int8 *)(v425 + 72);
  v334 = sub_20E8C31DC(v425, "OSLogSurrogateAppender", 1, 0);
  v335 = v334;
  if (!v333 && v334 == 0)
    return;
  v416 = &v425;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v418 = std::chrono::system_clock::now().__d_.__rep_;
  v419 = 3;
  v420 = "unknown file";
  v421 = 1916;
  v423 = 0;
  v424 = 0;
  v422 = "unknown function";
  v337 = *v416;
  v338 = (const char *)(*v416 + 16);
  v415 = v338;
  if (*(char *)(*v416 + 39) < 0)
  {
    v338 = *(const char **)(v337 + 16);
    v339 = *(_QWORD *)(v337 + 24);
    v341 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v341 & 1) == 0)
    {
LABEL_548:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v431);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
        if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
          operator delete(*(void **)v431);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v339 = *(unsigned __int8 *)(*v416 + 39);
    v340 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v340 & 1) == 0)
      goto LABEL_548;
  }
  if (byte_254A4A4F8[23] >= 0)
    v342 = byte_254A4A4F8;
  else
    v342 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v343 = byte_254A4A4F8[23];
  else
    v343 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v431 = os_log_create(v342, v338);
  v344 = &v431[8];
  if (v343 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v343 >= 0x17)
  {
    v345 = (v343 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v343 | 7) != 0x17)
      v345 = v343 | 7;
    v346 = v345 + 1;
    v344 = operator new(v345 + 1);
    *(_QWORD *)&v431[16] = v343;
    *(_QWORD *)&v432 = v346 | 0x8000000000000000;
    *(_QWORD *)&v431[8] = v344;
    goto LABEL_459;
  }
  BYTE7(v432) = v343;
  if (v343)
LABEL_459:
    memmove(v344, v342, v343);
  v344[v343] = 0;
  BYTE8(v432) = 1;
  v347 = (char *)&v433;
  if (v339 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v339 >= 0x17)
  {
    v349 = (v339 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v339 | 7) != 0x17)
      v349 = v339 | 7;
    v350 = v349 + 1;
    v347 = (char *)operator new(v349 + 1);
    v434 = v339;
    v435 = v350 | 0x8000000000000000;
    v433 = v347;
  }
  else
  {
    HIBYTE(v435) = v339;
    if (!v339)
    {
      LOBYTE(v433) = 0;
      v436 = 1;
      v348 = *(NSObject **)v431;
      if ((SHIBYTE(v435) & 0x80000000) == 0)
        goto LABEL_464;
LABEL_470:
      operator delete(v433);
      if (BYTE8(v432))
        goto LABEL_471;
      goto LABEL_473;
    }
  }
  memmove(v347, v338, v339);
  v347[v339] = 0;
  v436 = 1;
  v348 = *(NSObject **)v431;
  if (SHIBYTE(v435) < 0)
    goto LABEL_470;
LABEL_464:
  if (BYTE8(v432))
  {
LABEL_471:
    if (SBYTE7(v432) < 0)
      operator delete(*(void **)&v431[8]);
  }
LABEL_473:
  if (*(_QWORD *)v431)
    os_release(*(void **)v431);
  if (v335 && *(_QWORD *)(v335 + 24))
  {
    v351 = _os_log_pack_size();
    v352 = (std::__shared_weak_count_vtbl *)operator new(v351, (std::align_val_t)8uLL);
    v353 = (std::__shared_weak_count *)operator new();
    v353->__shared_owners_ = 0;
    v354 = (unint64_t *)&v353->__shared_owners_;
    v353->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v353->__shared_weak_owners_ = 0;
    v353[1].__vftable = v352;
    v427[0] = v352;
    v427[1] = v352;
    v429 = 0;
    v430 = 0;
    v428 = v353;
    v355 = (char *)operator new(0x40uLL);
    v356 = (std::__shared_weak_count *)v355;
    *((_QWORD *)v355 + 1) = 0;
    v357 = (unint64_t *)(v355 + 8);
    *((_QWORD *)v355 + 2) = 0;
    *((_QWORD *)v355 + 3) = off_24C9F9148;
    *(_QWORD *)v355 = &off_24C9F90F8;
    *((_QWORD *)v355 + 4) = 0x746E696F70;
    v355[55] = 5;
    v429 = v355 + 24;
    v430 = v355;
    *(_QWORD *)v431 = v352;
    *(_QWORD *)&v431[8] = v352;
    *(_QWORD *)&v431[16] = v353;
    do
      v358 = __ldxr(v354);
    while (__stxr(v358 + 1, v354));
    *(_QWORD *)&v432 = v355 + 24;
    *((_QWORD *)&v432 + 1) = v355;
    do
      v359 = __ldxr(v357);
    while (__stxr(v359 + 1, v357));
    v433 = v355 + 24;
    do
      v360 = __ldaxr(v357);
    while (__stlxr(v360 - 1, v357));
    if (!v360)
    {
      (*(void (**)(char *))(*(_QWORD *)v355 + 16))(v355);
      std::__shared_weak_count::__release_weak(v356);
    }
    v361 = v428;
    if (v428)
    {
      v362 = (unint64_t *)&v428->__shared_owners_;
      do
        v363 = __ldaxr(v362);
      while (__stlxr(v363 - 1, v362));
      if (!v363)
      {
        ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
        std::__shared_weak_count::__release_weak(v361);
      }
    }
    v364 = *(_QWORD *)v431;
    if (v433[31] >= 0)
      v365 = v433 + 8;
    else
      v365 = (char *)*((_QWORD *)v433 + 1);
    v366 = _os_log_pack_fill();
    *(_DWORD *)v366 = 136315650;
    *(_QWORD *)(v366 + 4) = v365;
    *(_WORD *)(v366 + 12) = 1024;
    *(_DWORD *)(v366 + 14) = v402;
    *(_WORD *)(v366 + 18) = 1024;
    *(_DWORD *)(v366 + 20) = v404;
    v367 = operator new();
    v368 = *(unsigned __int8 *)(v337 + 39);
    v369 = v415;
    if ((v368 & 0x80u) != 0)
    {
      v369 = *(const char **)(v337 + 16);
      v368 = *(_QWORD *)(v337 + 24);
    }
    *(_QWORD *)v367 = v364;
    *(_OWORD *)(v367 + 8) = *(_OWORD *)&v431[8];
    *(_QWORD *)&v431[8] = 0;
    *(_QWORD *)&v431[16] = 0;
    *(_OWORD *)(v367 + 24) = v432;
    v432 = 0uLL;
    *(_QWORD *)(v367 + 40) = v369;
    *(_QWORD *)(v367 + 48) = v368;
    *(_BYTE *)(v367 + 56) = 1;
    v426 = 0;
    v427[0] = v367;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v335 + 24) + 40))(*(_QWORD *)(v335 + 24), v427);
    v370 = v427[0];
    v427[0] = 0;
    if (v370)
    {
      v371 = *(std::__shared_weak_count **)(v370 + 32);
      if (v371)
      {
        v372 = (unint64_t *)&v371->__shared_owners_;
        do
          v373 = __ldaxr(v372);
        while (__stlxr(v373 - 1, v372));
        if (!v373)
        {
          ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
          std::__shared_weak_count::__release_weak(v371);
        }
      }
      v374 = *(std::__shared_weak_count **)(v370 + 16);
      if (v374)
      {
        v375 = (unint64_t *)&v374->__shared_owners_;
        do
          v376 = __ldaxr(v375);
        while (__stlxr(v376 - 1, v375));
        if (!v376)
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
      v377 = v426;
      v426 = 0;
      if (v377)
      {
        v378 = *(std::__shared_weak_count **)(v377 + 32);
        if (v378)
        {
          v379 = (unint64_t *)&v378->__shared_owners_;
          do
            v380 = __ldaxr(v379);
          while (__stlxr(v380 - 1, v379));
          if (!v380)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
        }
        v381 = *(std::__shared_weak_count **)(v377 + 16);
        if (v381)
        {
          v382 = (unint64_t *)&v381->__shared_owners_;
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        MEMORY[0x212BC6398](v377, 0x10F0C40B62ED6C6);
      }
    }
    v384 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v385 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v386 = __ldaxr(v385);
      while (__stlxr(v386 - 1, v385));
      if (!v386)
      {
        ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
        std::__shared_weak_count::__release_weak(v384);
      }
    }
    v387 = *(std::__shared_weak_count **)&v431[16];
    if (*(_QWORD *)&v431[16])
    {
      v388 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
      do
        v389 = __ldaxr(v388);
      while (__stlxr(v389 - 1, v388));
      if (!v389)
      {
        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
        std::__shared_weak_count::__release_weak(v387);
      }
    }
  }
  else
  {
    os_log_type_enabled(v348, OS_LOG_TYPE_INFO);
    *(_DWORD *)v431 = 136315650;
    *(_QWORD *)&v431[4] = "point";
    *(_WORD *)&v431[12] = 1024;
    *(_DWORD *)&v431[14] = v402;
    *(_WORD *)&v431[18] = 1024;
    *(_DWORD *)&v431[20] = v404;
    v390 = (void *)_os_log_send_and_compose_impl();
    if (v390)
      free(v390);
  }
  if (v333)
  {
    sub_20E8C003C((uint64_t)&v416, "  %s: %d inlier measurements (of %d total).", "point", v402, v404);
    sub_20E863570((uint64_t)&v416);
  }
  sub_20E863570((uint64_t)&v416);
  v391 = v424;
  if (v424)
  {
    v392 = (unint64_t *)&v424->__shared_owners_;
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
}

void sub_20F178E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152))
  {
    if (*(char *)(v29 - 153) < 0)
      operator delete(*(void **)(v29 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F178ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20E86E8C4((uint64_t *)(v29 - 216));
  sub_20E86E8C4((uint64_t *)(v29 - 224));
  sub_20E86E658(v29 - 176);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F178FE8()
{
  JUMPOUT(0x20F178FF0);
}

void sub_20F179014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F179028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F17903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F179054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F179068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 144) && *(char *)(v29 - 145) < 0)
    operator delete(*(void **)(v29 - 168));
  v31 = *(void **)(v29 - 176);
  if (v31)
    os_release(v31);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F179194(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

float sub_20F1791B8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  float result;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float *v31;
  _OWORD *v32;
  float32x2_t *v33;
  BOOL *v34;
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[4];

  v37[3] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 64)
    && (unint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 208 * *(_QWORD *)(a2 + 48) + 200) + 1) >= 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1672, (uint64_t)"t.num_streams() <= kMaxNumStreamsPerTrack", 41, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v33 = 0;
  v34 = 0;
  memset(v37, 0, 24);
  v31 = 0;
  v32 = 0;
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  sub_20FD367E4(a1, a3, a5, *(_DWORD *)a2, &v33, v37, &v32, v36, &v31, v35, &v34);
  v10 = 0;
  v11 = 0;
  v12 = a4;
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = v33;
  do
  {
    *v16 = vcvt_f32_f64(*(float64x2_t *)(v14
                                       + 208
                                       * ((v12 + v13) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 4)))));
    *v32 = *(_OWORD *)(*(_QWORD *)(a2 + 24)
                     + 208
                     * ((*(_QWORD *)(a2 + 48) + v12)
                      % (unint64_t)(0x4EC4EC4EC4EC4EC5
                                         * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4)))
                     + 64);
    v22 = *(_QWORD *)(a2 + 48);
    v23 = *(_QWORD *)(a2 + 24);
    if (!*(_QWORD *)(a2 + 64))
    {
      v24 = -1;
LABEL_12:
      v25 = 0;
      v26 = *(_QWORD *)(a2 + 32);
      do
      {
        v27 = v25;
        v28 = v23 + 208 * ((v22 + v12) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v26 - v23) >> 4)));
        v29 = 16 * (v25 + 1);
        *(float32x2_t *)(v37[v27] + 8 * v10) = vcvt_f32_f64(*(float64x2_t *)(v28 + v29));
        *(_OWORD *)(v36[v27] + 16 * v10) = *(_OWORD *)(*(_QWORD *)(a2 + 24)
                                                     + 208
                                                     * ((*(_QWORD *)(a2 + 48) + v12)
                                                      % (unint64_t)(0x4EC4EC4EC4EC4EC5
                                                                         * ((uint64_t)(*(_QWORD *)(a2 + 32)
                                                                                    - *(_QWORD *)(a2 + 24)) >> 4)))
                                                     + v29
                                                     + 64);
        v22 = *(_QWORD *)(a2 + 48);
        v23 = *(_QWORD *)(a2 + 24);
        v26 = *(_QWORD *)(a2 + 32);
        v30 = *(double *)(v23
                        + 208 * ((v22 + v12) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v26 - v23) >> 4)))
                        + 8 * (v25 + 1)
                        + 128);
        *(float *)(v35[v27] + 4 * v10) = v30;
        ++v25;
      }
      while (v24 != v25);
      goto LABEL_5;
    }
    v24 = *(_QWORD *)(v23 + 208 * v22 + 200);
    if (v24)
      goto LABEL_12;
LABEL_5:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 72)
                             + (unint64_t)(*(_QWORD *)(a2 + 96) + v12)
                             % (*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)));
    v18 = v17 == 0;
    v19 = v17 != 0;
    if (!v18)
      ++v11;
    *v34 = v19;
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a2 + 32);
    result = *(double *)(v14 + 208 * ((v13 + v12) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v15 - v14) >> 4))) + 128);
    v21 = v31;
    *v31 = result;
    ++v34;
    v16 = v33 + 1;
    ++v32;
    ++v33;
    v31 = v21 + 1;
    ++v12;
    ++v10;
  }
  while (v10 != a3);
  return result;
}

float sub_20F1794F8(_QWORD *a1, int *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v6;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  float32x2_t *v14;
  _OWORD *v15;
  float *v16;
  BOOL *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float result;

  v6 = a3;
  v9 = a3;
  v10 = a5;
  v11 = *a2;
  v12 = a1[2];
  sub_20FD3540C((uint64_t)a1, *a1 + 1, a1[1], v12 + a3);
  *(_QWORD *)(a1[20] - 8) = a1[2];
  *(_QWORD *)(a1[17] - 8) = v10;
  if (v6)
  {
    memset((void *)(a1[10] + v12), 1, v9);
    memset((void *)(a1[13] + v12), 1, v9);
  }
  v13 = 0;
  v14 = (float32x2_t *)(a1[28] + 8 * v12);
  v15 = (_OWORD *)(a1[4] + 16 * v12);
  v16 = (float *)(a1[7] + 4 * v12);
  v17 = (BOOL *)(a1[10] + v12);
  *(_DWORD *)(a1[23] - 4) = v11;
  v18 = a4;
  v19 = *((_QWORD *)a2 + 6);
  v20 = *((_QWORD *)a2 + 3);
  v21 = *((_QWORD *)a2 + 4);
  do
  {
    *v14++ = vcvt_f32_f64(*(float64x2_t *)(v20
                                         + 208
                                         * ((v18 + v19) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v21 - v20) >> 4)))));
    *v15++ = *(_OWORD *)(*((_QWORD *)a2 + 3)
                       + 208
                       * ((v18 + *((_QWORD *)a2 + 6))
                        % (unint64_t)(0x4EC4EC4EC4EC4EC5
                                           * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4)))
                       + 64);
    v22 = *(unsigned __int8 *)(*((_QWORD *)a2 + 9)
                             + (unint64_t)(v18 + *((_QWORD *)a2 + 12))
                             % (*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)));
    *v17++ = v22 != 0;
    if (v22)
      ++v13;
    v19 = *((_QWORD *)a2 + 6);
    v20 = *((_QWORD *)a2 + 3);
    v21 = *((_QWORD *)a2 + 4);
    result = *(double *)(v20 + 208 * ((v18 + v19) % (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v21 - v20) >> 4))) + 128);
    *v16++ = result;
    ++v18;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20F1796A0(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  size_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  void *v51;
  unint64_t **v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t i;
  _QWORD *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  const char *v89;
  size_t v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned __int8 v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  const char *v98;
  size_t v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  _BYTE *v104;
  _QWORD *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unsigned __int8 v156;
  const char *v157;
  size_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  size_t v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  unint64_t *p_shared_owners;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  unint64_t *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  char *v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t *v218;
  _QWORD *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  _DWORD *v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t *v238;
  _BOOL4 v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL4 v248;
  int v249;
  int v250;
  char *v251;
  int v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unint64_t v259;
  int v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  __int128 v278;
  int v279;
  char *v280;
  uint64_t v281;
  uint64_t *v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  BOOL v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  int v295;
  int v296;
  _DWORD *v297;
  int v298;
  int v299;
  unint64_t v300;
  char *v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  _DWORD *v310;
  _BYTE *v311;
  _DWORD *v312;
  int64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  _OWORD *v318;
  char *v319;
  uint64_t v320;
  __int128 v321;
  int v322;
  _QWORD *v323;
  _QWORD *v324;
  int v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v329;
  uint64_t v330;
  size_t v331;
  const char *v332;
  unsigned __int8 v333;
  const char *v334;
  size_t v335;
  _BYTE *v336;
  unint64_t v337;
  const char *v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  NSObject *v345;
  uint64_t v346;
  uint64_t v347;
  size_t v348;
  std::__shared_weak_count_vtbl *v349;
  std::__shared_weak_count *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  int v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v388;
  const char *v389;
  size_t v390;
  unsigned __int8 v391;
  unsigned __int8 v392;
  const char *v393;
  size_t v394;
  _BYTE *v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  NSObject *v399;
  uint64_t v400;
  uint64_t v401;
  size_t v402;
  std::__shared_weak_count_vtbl *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  char *v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  const char *v420;
  uint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  void *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t v445;
  int v446;
  _DWORD *v447;
  uint64_t v448;
  int v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  int v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  _QWORD *v464;
  uint64_t v465;
  _QWORD *v466;
  uint64_t *v467;
  uint64_t v468;
  const char *v469;
  uint64_t *v470;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v472;
  int v473;
  const char *v474;
  int v475;
  const char *v476;
  uint64_t v477;
  std::__shared_weak_count *v478;
  uint64_t v479;
  uint64_t v480;
  _QWORD v481[2];
  std::__shared_weak_count *v482;
  char *v483;
  char *v484;
  _BYTE v485[24];
  __int128 v486;
  char *v487;
  size_t v488;
  unint64_t v489;
  char v490;
  uint64_t v491;

  v491 = *MEMORY[0x24BDAC8D0];
  v448 = a7;
  v10 = (unint64_t)a7 << 8;
  v11 = a1[2] + v10;
  v13 = *(_QWORD *)(v11 + 8);
  v12 = (uint64_t *)(v11 + 8);
  v14 = a1[8];
  v15 = a1[5];
  v16 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v15) >> 3);
  v17 = *(unsigned int *)(v15 + 56 * (v14 % v16));
  v18 = *(unsigned int *)(v15 + 56 * ((v14 + a5) % v16));
  v453 = a5;
  v19 = a5 + 1;
  v20 = v12 + 1;
  v21 = (v12[1] - v13) >> 5;
  sub_20FD3540C((uint64_t)a2, 0, a5 + 1, 0);
  v466 = a2;
  v467 = v12;
  sub_20FD35B7C(a2, (v12[1] - *v12) >> 7, v19, v21);
  v464 = a1;
  v22 = a1[2] + v10;
  v23 = *(_QWORD *)(v22 + 232);
  v24 = *(_QWORD *)(v22 + 240);
  if (v23 != v24)
  {
    sub_20FD35918((uint64_t)a2, 0, (unint64_t)(v24 - v23) >> 3);
    sub_20FD363E4((uint64_t)a2, v21, (*(_QWORD *)(a1[2] + (v448 << 8) + 240) - *(_QWORD *)(a1[2] + (v448 << 8) + 232)) >> 3);
    v25 = a1[2] + (v448 << 8);
    v26 = *(uint64_t **)(v25 + 232);
    v27 = *(uint64_t **)(v25 + 240);
    if (v26 != v27)
    {
      v28 = 0;
      do
      {
        v29 = *v26++;
        a2[10 * v28++ + 37] = v29;
      }
      while (v26 != v27);
    }
  }
  v30 = (*v20 - *v12) >> 7;
  if (v30 >= a6)
    LODWORD(v30) = a6;
  v31 = *(_BYTE **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (v30 > (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v31) >> 2))
  {
    v32 = 4 * v30;
    v33 = (char *)operator new(v32);
    *(_QWORD *)a3 = v33;
    *(_QWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 16) = &v33[v32];
    if (v31)
      operator delete(v31);
  }
  a2[26] = a2[25];
  v34 = *v20 - *v12;
  v35 = v34 >> 7;
  v36 = *(_BYTE **)a3;
  if (v34 >> 7 > (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 2))
  {
    if (v34 < 0)
      sub_20EABADD4();
    v37 = *(_BYTE **)(a3 + 8);
    v38 = (char *)operator new((unint64_t)v34 >> 5);
    v39 = v37 - v36;
    v40 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
    v41 = v40;
    if (v37 == v36)
      goto LABEL_20;
    if ((unint64_t)(v39 - 4) >= 0x2C)
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v37[-(v39 & 0xFFFFFFFFFFFFFFFCLL)] - v38) >= 0x20)
      {
        v42 = v39 >> 2;
        v43 = ((unint64_t)(v39 - 4) >> 2) + 1;
        v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
        v45 = &v37[-v44];
        v41 = &v40[-v44];
        v46 = &v38[4 * v42 - 16];
        v47 = (__int128 *)(v37 - 16);
        v48 = v43 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v49 = *v47;
          *((_OWORD *)v46 - 1) = *(v47 - 1);
          *(_OWORD *)v46 = v49;
          v46 -= 32;
          v47 -= 2;
          v48 -= 8;
        }
        while (v48);
        v37 = v45;
        if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          *(_QWORD *)a3 = v41;
          *(_QWORD *)(a3 + 8) = v40;
          *(_QWORD *)(a3 + 16) = &v38[4 * v35];
          if (v36)
            operator delete(v36);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v41 = &v38[(v37 - v36) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v50 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *((_DWORD *)v41 - 1) = v50;
      v41 -= 4;
    }
    while (v37 != v36);
    goto LABEL_20;
  }
LABEL_22:
  v52 = (unint64_t **)(a1 + 11);
  v51 = (void *)v464[11];
  v464[12] = v51;
  v53 = *v20 - *v12;
  v54 = v53 >> 7;
  if (v53 >> 7 > (unint64_t)((uint64_t)(v464[13] - (_QWORD)v51) >> 4))
  {
    if (v53 < 0)
LABEL_582:
      sub_20E867F44();
    v55 = (char *)operator new((unint64_t)v53 >> 3);
    v464[11] = v55;
    v464[12] = v55;
    v464[13] = &v55[16 * v54];
    if (v51)
      operator delete(v51);
  }
  v451 = a3;
  v56 = *v20;
  v57 = *v12;
  v58 = v464;
  if (*v20 != *v12)
  {
    for (i = 0; i < (v56 - v57) >> 7; ++i)
    {
      if ((*(_DWORD *)(v57 + (i << 7)) & 0x80000000) != 0)
      {
        if (!*(_QWORD *)(v57 + (i << 7) + 64))
          break;
        continue;
      }
      v60 = (_QWORD *)(v57 + (i << 7));
      v61 = v60[8];
      if (!v61)
        break;
      v62 = v60 + 3;
      v63 = v60[7];
      if (v63)
      {
        v64 = *v62;
        if (*(_DWORD *)(v64 + 208 * v63 - 16) >= (int)v17)
          goto LABEL_36;
      }
      else
      {
        v64 = *v62;
        if (*(_DWORD *)(v64 + 16 * ((*(_QWORD *)(v57 + (i << 7) + 32) - v64) >> 4) - 16) >= (int)v17)
        {
LABEL_36:
          if (v61 < 2 || *(_DWORD *)(v64 + 208 * *(_QWORD *)(v57 + (i << 7) + 48) + 192) > (int)v18)
            continue;
          v66 = (unint64_t *)v58[12];
          v65 = v58[13];
          if ((unint64_t)v66 < v65)
          {
            *v66 = v61;
            v66[1] = i;
            v67 = v66 + 2;
LABEL_56:
            v58 = v464;
            v464[12] = v67;
            v56 = *v20;
            v57 = *v467;
            continue;
          }
          v68 = v20;
          v69 = v17;
          v70 = v18;
          v71 = *v52;
          v72 = ((char *)v66 - (char *)*v52) >> 4;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60)
            goto LABEL_582;
          v74 = v65 - (_QWORD)v71;
          if (v74 >> 3 > v73)
            v73 = v74 >> 3;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
            v75 = 0xFFFFFFFFFFFFFFFLL;
          else
            v75 = v73;
          if (v75)
          {
            if (v75 >> 60)
              sub_20E877A38();
            v76 = (char *)operator new(16 * v75);
            v77 = (unint64_t *)&v76[16 * v72];
            *v77 = v61;
            v77[1] = i;
            v78 = (uint64_t)v77;
            if (v66 == v71)
              goto LABEL_53;
            do
            {
LABEL_51:
              *(_OWORD *)(v78 - 16) = *((_OWORD *)v66 - 1);
              v78 -= 16;
              v66 -= 2;
            }
            while (v66 != v71);
            v66 = *v52;
          }
          else
          {
            v76 = 0;
            v77 = (unint64_t *)(16 * v72);
            *v77 = v61;
            v77[1] = i;
            v78 = 16 * v72;
            if (v66 != v71)
              goto LABEL_51;
          }
LABEL_53:
          v79 = &v76[16 * v75];
          v67 = v77 + 2;
          v464[11] = v78;
          v464[12] = v77 + 2;
          v464[13] = v79;
          v18 = v70;
          if (v66)
            operator delete(v66);
          v17 = v69;
          v20 = v68;
          goto LABEL_56;
        }
      }
    }
  }
  v80 = v58[11];
  v81 = (char *)v58[12];
  v82 = 126 - 2 * __clz((uint64_t)&v81[-v80] >> 4);
  if (v81 == (char *)v80)
    v83 = 0;
  else
    v83 = v82;
  sub_20F18B1F8(v80, v81, v83, 1);
  if (v58[11] == v58[12])
  {
    sub_20F1729F0(&v479);
    v84 = v464;
    if (**(int **)(v479 + 56) > 2)
      goto LABEL_237;
    v94 = *(unsigned __int8 *)(v479 + 72);
    v95 = sub_20E8C31DC(v479, "OSLogSurrogateAppender", 1, 0);
    v96 = v95;
    if (!v94 && !v95)
      goto LABEL_237;
    v470 = &v479;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v472 = std::chrono::system_clock::now().__d_.__rep_;
    v473 = 2;
    v474 = "unknown file";
    v475 = 2001;
    v477 = 0;
    v478 = 0;
    v476 = "unknown function";
    v97 = v479;
    v98 = (const char *)(v479 + 16);
    v462 = v479 + 16;
    if (*(char *)(v479 + 39) < 0)
    {
      v98 = *(const char **)(v479 + 16);
      v99 = *(_QWORD *)(v479 + 24);
      v156 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v156 & 1) != 0)
        goto LABEL_155;
    }
    else
    {
      v99 = *(unsigned __int8 *)(v479 + 39);
      v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v100 & 1) != 0)
        goto LABEL_155;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v485);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v485);
      if ((_BYTE)v486 && (v485[23] & 0x80000000) != 0)
        operator delete(*(void **)v485);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_155:
    if (byte_254A4A4F8[23] >= 0)
      v157 = byte_254A4A4F8;
    else
      v157 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v158 = byte_254A4A4F8[23];
    else
      v158 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v485 = os_log_create(v157, v98);
    v159 = &v485[8];
    if (v158 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v158 >= 0x17)
    {
      v160 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v158 | 7) != 0x17)
        v160 = v158 | 7;
      v161 = v160 + 1;
      v159 = operator new(v160 + 1);
      *(_QWORD *)&v485[16] = v158;
      *(_QWORD *)&v486 = v161 | 0x8000000000000000;
      *(_QWORD *)&v485[8] = v159;
    }
    else
    {
      BYTE7(v486) = v158;
      if (!v158)
      {
LABEL_169:
        v159[v158] = 0;
        BYTE8(v486) = 1;
        v162 = (char *)&v487;
        if (v99 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v99 >= 0x17)
        {
          v163 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v99 | 7) != 0x17)
            v163 = v99 | 7;
          v164 = v163 + 1;
          v162 = (char *)operator new(v163 + 1);
          v488 = v99;
          v489 = v164 | 0x8000000000000000;
          v487 = v162;
        }
        else
        {
          HIBYTE(v489) = v99;
          if (!v99)
            goto LABEL_177;
        }
        memmove(v162, v98, v99);
LABEL_177:
        v162[v99] = 0;
        v490 = 1;
        v165 = *(NSObject **)v485;
        if (SHIBYTE(v489) < 0)
          operator delete(v487);
        if (BYTE8(v486) && SBYTE7(v486) < 0)
          operator delete(*(void **)&v485[8]);
        if (*(_QWORD *)v485)
          os_release(*(void **)v485);
        if (v96 && *(_QWORD *)(v96 + 24))
        {
          v166 = _os_log_pack_size();
          v167 = (std::__shared_weak_count_vtbl *)operator new(v166, (std::align_val_t)8uLL);
          v168 = (std::__shared_weak_count *)operator new();
          v169 = v168;
          v168->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v168->__shared_owners_;
          v168->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v168->__shared_weak_owners_ = 0;
          v168[1].__vftable = v167;
          *(_QWORD *)v485 = v167;
          *(_QWORD *)&v485[8] = v167;
          *(_QWORD *)&v485[16] = v168;
          do
            v171 = __ldxr(p_shared_owners);
          while (__stxr(v171 + 1, p_shared_owners));
          v486 = 0uLL;
          v487 = 0;
          do
            v172 = __ldaxr(p_shared_owners);
          while (__stlxr(v172 - 1, p_shared_owners));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v169);
          }
          v173 = *(_QWORD *)v485;
          *(_WORD *)_os_log_pack_fill() = 0;
          v174 = operator new();
          v175 = *(unsigned __int8 *)(v97 + 39);
          v176 = v462;
          if ((v175 & 0x80u) != 0)
          {
            v176 = *(_QWORD *)(v97 + 16);
            v175 = *(_QWORD *)(v97 + 24);
          }
          *(_QWORD *)v174 = v173;
          *(_OWORD *)(v174 + 8) = *(_OWORD *)&v485[8];
          *(_QWORD *)&v485[8] = 0;
          *(_QWORD *)&v485[16] = 0;
          *(_OWORD *)(v174 + 24) = v486;
          v486 = 0uLL;
          *(_QWORD *)(v174 + 40) = v176;
          *(_QWORD *)(v174 + 48) = v175;
          *(_BYTE *)(v174 + 56) = 2;
          v480 = 0;
          v481[0] = v174;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v96 + 24) + 40))(*(_QWORD *)(v96 + 24), v481);
          v177 = v481[0];
          v481[0] = 0;
          if (v177)
          {
            v178 = *(std::__shared_weak_count **)(v177 + 32);
            if (v178)
            {
              v179 = (unint64_t *)&v178->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            v181 = *(std::__shared_weak_count **)(v177 + 16);
            if (v181)
            {
              v182 = (unint64_t *)&v181->__shared_owners_;
              do
                v183 = __ldaxr(v182);
              while (__stlxr(v183 - 1, v182));
              if (!v183)
              {
                ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                std::__shared_weak_count::__release_weak(v181);
              }
            }
            MEMORY[0x212BC6398](v177, 0x10F0C40B62ED6C6);
            v184 = v480;
            v480 = 0;
            if (v184)
            {
              v185 = *(std::__shared_weak_count **)(v184 + 32);
              if (v185)
              {
                v186 = (unint64_t *)&v185->__shared_owners_;
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              v188 = *(std::__shared_weak_count **)(v184 + 16);
              if (v188)
              {
                v189 = (unint64_t *)&v188->__shared_owners_;
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              MEMORY[0x212BC6398](v184, 0x10F0C40B62ED6C6);
            }
          }
          v191 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
          if (*((_QWORD *)&v486 + 1))
          {
            v192 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
            do
              v193 = __ldaxr(v192);
            while (__stlxr(v193 - 1, v192));
            if (!v193)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
          v194 = *(std::__shared_weak_count **)&v485[16];
          if (*(_QWORD *)&v485[16])
          {
            v195 = (unint64_t *)(*(_QWORD *)&v485[16] + 8);
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 - 1, v195));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
        }
        else
        {
          os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG);
          *(_WORD *)v485 = 0;
          v197 = (void *)_os_log_send_and_compose_impl();
          if (v197)
            free(v197);
        }
        if (v94)
        {
          sub_20E8C003C((uint64_t)&v470, "No tracks in supplied frame range.");
          sub_20E863570((uint64_t)&v470);
        }
        sub_20E863570((uint64_t)&v470);
        v153 = v478;
        if (!v478)
          goto LABEL_236;
        v198 = (unint64_t *)&v478->__shared_owners_;
        do
          v155 = __ldaxr(v198);
        while (__stlxr(v155 - 1, v198));
        goto LABEL_234;
      }
    }
    memmove(v159, v157, v158);
    goto LABEL_169;
  }
  sub_20F1729F0(&v479);
  v84 = v464;
  if (**(int **)(v479 + 56) <= 2)
  {
    v85 = *(unsigned __int8 *)(v479 + 72);
    v86 = sub_20E8C31DC(v479, "OSLogSurrogateAppender", 1, 0);
    v87 = v86;
    if (v85 || v86)
    {
      v459 = v85;
      v470 = &v479;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v472 = std::chrono::system_clock::now().__d_.__rep_;
      v473 = 2;
      v474 = "unknown file";
      v475 = 1999;
      v477 = 0;
      v478 = 0;
      v476 = "unknown function";
      v88 = v479;
      v89 = (const char *)(v479 + 16);
      v455 = v479 + 16;
      if (*(char *)(v479 + 39) < 0)
      {
        v89 = *(const char **)(v479 + 16);
        v90 = *(_QWORD *)(v479 + 24);
        v461 = v87;
        v92 = (_QWORD *)v464[11];
        v91 = v464[12];
        v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v101 & 1) != 0)
          goto LABEL_74;
      }
      else
      {
        v90 = *(unsigned __int8 *)(v479 + 39);
        v461 = v87;
        v92 = (_QWORD *)v464[11];
        v91 = v464[12];
        v93 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v93 & 1) != 0)
          goto LABEL_74;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v485);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v485);
        if ((_BYTE)v486 && (v485[23] & 0x80000000) != 0)
          operator delete(*(void **)v485);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_74:
      if (byte_254A4A4F8[23] >= 0)
        v102 = byte_254A4A4F8;
      else
        v102 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v103 = byte_254A4A4F8[23];
      else
        v103 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v485 = os_log_create(v102, v89);
      v104 = &v485[8];
      if (v103 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v103 >= 0x17)
      {
        v105 = v92;
        v106 = v91;
        v107 = v89;
        v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v108 = v103 | 7;
        v109 = v108 + 1;
        v104 = operator new(v108 + 1);
        *(_QWORD *)&v485[16] = v103;
        *(_QWORD *)&v486 = v109 | 0x8000000000000000;
        *(_QWORD *)&v485[8] = v104;
        v89 = v107;
        v91 = v106;
        v92 = v105;
      }
      else
      {
        BYTE7(v486) = v103;
        if (!v103)
        {
LABEL_88:
          v104[v103] = 0;
          BYTE8(v486) = 1;
          v110 = (char *)&v487;
          if (v90 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v90 >= 0x17)
          {
            v111 = v89;
            v112 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v90 | 7) != 0x17)
              v112 = v90 | 7;
            v113 = v112 + 1;
            v110 = (char *)operator new(v112 + 1);
            v488 = v90;
            v489 = v113 | 0x8000000000000000;
            v487 = v110;
            v89 = v111;
          }
          else
          {
            HIBYTE(v489) = v90;
            if (!v90)
              goto LABEL_96;
          }
          memmove(v110, v89, v90);
LABEL_96:
          v110[v90] = 0;
          v490 = 1;
          v114 = *(NSObject **)v485;
          if (SHIBYTE(v489) < 0)
            operator delete(v487);
          if (BYTE8(v486) && SBYTE7(v486) < 0)
            operator delete(*(void **)&v485[8]);
          if (*(_QWORD *)v485)
            os_release(*(void **)v485);
          if (v461 && *(_QWORD *)(v461 + 24))
          {
            v115 = _os_log_pack_size();
            v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
            v117 = (std::__shared_weak_count *)operator new();
            v118 = v117;
            v117->__shared_owners_ = 0;
            v119 = (unint64_t *)&v117->__shared_owners_;
            v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v117->__shared_weak_owners_ = 0;
            v117[1].__vftable = v116;
            *(_QWORD *)v485 = v116;
            *(_QWORD *)&v485[8] = v116;
            *(_QWORD *)&v485[16] = v117;
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
            v486 = 0uLL;
            v487 = 0;
            do
              v121 = __ldaxr(v119);
            while (__stlxr(v121 - 1, v119));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v118);
            }
            v122 = *(_QWORD *)v485;
            v123 = _os_log_pack_fill();
            v124 = *v92;
            v125 = *(_QWORD *)(v91 - 16);
            *(_DWORD *)v123 = 134218496;
            *(_QWORD *)(v123 + 4) = (v91 - (uint64_t)v92) >> 4;
            *(_WORD *)(v123 + 12) = 2048;
            *(_QWORD *)(v123 + 14) = v124;
            *(_WORD *)(v123 + 22) = 2048;
            *(_QWORD *)(v123 + 24) = v125;
            v126 = operator new();
            v127 = *(unsigned __int8 *)(v88 + 39);
            v128 = v455;
            if ((v127 & 0x80u) != 0)
            {
              v128 = *(_QWORD *)(v88 + 16);
              v127 = *(_QWORD *)(v88 + 24);
            }
            *(_QWORD *)v126 = v122;
            *(_OWORD *)(v126 + 8) = *(_OWORD *)&v485[8];
            *(_QWORD *)&v485[8] = 0;
            *(_QWORD *)&v485[16] = 0;
            *(_OWORD *)(v126 + 24) = v486;
            v486 = 0uLL;
            *(_QWORD *)(v126 + 40) = v128;
            *(_QWORD *)(v126 + 48) = v127;
            *(_BYTE *)(v126 + 56) = 2;
            v480 = 0;
            v481[0] = v126;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v461 + 24) + 40))(*(_QWORD *)(v461 + 24), v481);
            v129 = v481[0];
            v481[0] = 0;
            v130 = v459;
            if (v129)
            {
              v131 = *(std::__shared_weak_count **)(v129 + 32);
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              v134 = *(std::__shared_weak_count **)(v129 + 16);
              if (v134)
              {
                v135 = (unint64_t *)&v134->__shared_owners_;
                do
                  v136 = __ldaxr(v135);
                while (__stlxr(v136 - 1, v135));
                if (!v136)
                {
                  ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                  std::__shared_weak_count::__release_weak(v134);
                }
              }
              MEMORY[0x212BC6398](v129, 0x10F0C40B62ED6C6);
              v137 = v480;
              v480 = 0;
              if (v137)
              {
                v138 = *(std::__shared_weak_count **)(v137 + 32);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                v141 = *(std::__shared_weak_count **)(v137 + 16);
                if (v141)
                {
                  v142 = (unint64_t *)&v141->__shared_owners_;
                  do
                    v143 = __ldaxr(v142);
                  while (__stlxr(v143 - 1, v142));
                  if (!v143)
                  {
                    ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                    std::__shared_weak_count::__release_weak(v141);
                  }
                }
                MEMORY[0x212BC6398](v137, 0x10F0C40B62ED6C6);
              }
            }
            v144 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
            if (*((_QWORD *)&v486 + 1))
            {
              v145 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            v147 = *(std::__shared_weak_count **)&v485[16];
            if (*(_QWORD *)&v485[16])
            {
              v148 = (unint64_t *)(*(_QWORD *)&v485[16] + 8);
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
          }
          else
          {
            os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG);
            v150 = *v92;
            v151 = *(_QWORD *)(v91 - 16);
            *(_DWORD *)v485 = 134218496;
            *(_QWORD *)&v485[4] = (v91 - (uint64_t)v92) >> 4;
            *(_WORD *)&v485[12] = 2048;
            *(_QWORD *)&v485[14] = v150;
            *(_WORD *)&v485[22] = 2048;
            *(_QWORD *)&v486 = v151;
            v152 = (void *)_os_log_send_and_compose_impl();
            v130 = v459;
            if (v152)
              free(v152);
          }
          if (v130)
          {
            sub_20E8C003C((uint64_t)&v470, "Tracks in range: %zu With lengths: %zu to %zu", (uint64_t)(v464[12] - v464[11]) >> 4, *(_QWORD *)v464[11], *(_QWORD *)(v464[12] - 16));
            sub_20E863570((uint64_t)&v470);
          }
          sub_20E863570((uint64_t)&v470);
          v153 = v478;
          if (!v478)
            goto LABEL_236;
          v154 = (unint64_t *)&v478->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
LABEL_234:
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
LABEL_236:
          v84 = v464;
          goto LABEL_237;
        }
      }
      memmove(v104, v102, v103);
      goto LABEL_88;
    }
  }
LABEL_237:
  v199 = v453;
  v200 = v84[11];
  v460 = v84[12];
  if (v200 != v460)
  {
    v449 = 0;
    v450 = 0;
    while (1)
    {
      v201 = *(_QWORD *)(v200 + 8);
      v202 = *v467;
      v203 = *v467 + (v201 << 7);
      if (!*((_BYTE *)v84 + 8))
        goto LABEL_250;
      v204 = *(_QWORD *)(v203 + 64);
      if (v204 >= v84[10])
        goto LABEL_250;
      if (v204)
      {
        v205 = v202 + (v201 << 7);
        v206 = (_QWORD *)(v205 + 24);
        v207 = *(_QWORD *)(v205 + 56);
        if (v207)
        {
          v208 = *(_DWORD *)(*v206 + 208 * v207 - 16);
          v209 = v84[9];
          if (!v209)
            goto LABEL_249;
        }
        else
        {
          v208 = *(_DWORD *)(*v206 + 16 * ((uint64_t)(*(_QWORD *)(v202 + (v201 << 7) + 32) - *v206) >> 4) - 16);
          v209 = v84[9];
          if (!v209)
          {
LABEL_249:
            if (v208 == *(_DWORD *)(v84[5] + 8 * ((uint64_t)(v84[6] - v84[5]) >> 3) - 56))
              goto LABEL_240;
            goto LABEL_250;
          }
        }
      }
      else
      {
        v208 = -1;
        v209 = v84[9];
        if (!v209)
          goto LABEL_249;
      }
      if (v208 == *(_DWORD *)(v84[5] + 56 * v209 - 56))
        goto LABEL_240;
LABEL_250:
      v211 = (char *)v466[25];
      v210 = (char *)v466[26];
      v212 = (v210 - v211) >> 2;
      if (v212 >= a6)
        goto LABEL_388;
      v213 = v84[10];
      if (v213)
      {
        v214 = 0;
        v215 = (_QWORD *)(v202 + (v201 << 7));
        v216 = v215 + 3;
        v217 = v215[8];
        v218 = v215 + 7;
        v219 = v215 + 4;
        while (1)
        {
          if (v217)
          {
            v220 = *v218;
            if (!*v218)
              v220 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*v219 - *v216) >> 4);
            v221 = *(_DWORD *)(*v216 + 208 * v220 - 16);
          }
          else
          {
            v221 = -1;
          }
          if (*(_DWORD *)(v84[5]
                         + 56
                         * ((v84[8] + v214)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v84[6] - v84[5]) >> 3)))) == v221)
            break;
          if (v213 == ++v214)
            goto LABEL_263;
        }
      }
      else
      {
        v217 = *(_QWORD *)(v202 + (v201 << 7) + 64);
LABEL_263:
        LODWORD(v214) = -1;
      }
      v222 = v202 + (v201 << 7);
      v225 = *(_DWORD *)(v222 + 4);
      v223 = (_DWORD *)(v222 + 4);
      v224 = v225;
      if (v225 < 0)
      {
        v228 = 0;
      }
      else
      {
        v226 = v84[9];
        v227 = v84[5];
        if (!v226)
          v226 = 0x6DB6DB6DB6DB6DB7 * ((v84[6] - v227) >> 3);
        if (v224 + 1 == *(_DWORD *)(v227 + 56 * v226 - 56))
          v228 = a4;
        else
          v228 = 0;
      }
      v229 = v214 - v217 + 1;
      if (v228 <= v229)
        v230 = v214 - v217 + 1;
      else
        v230 = v228;
      if ((int)v214 >= v199)
        v231 = v199;
      else
        v231 = v214;
      v232 = v231 - (v229 & ~(v229 >> 31));
      if ((int)v232 < 1)
        goto LABEL_240;
      v233 = (v232 + 1);
      v454 = *(_QWORD *)(v200 + 8);
      v234 = v202 + (v201 << 7);
      v237 = *(_QWORD *)(v234 + 112);
      v236 = (uint64_t *)(v234 + 112);
      v235 = v237;
      v238 = v236 - 5;
      v239 = v237 == 0;
      v240 = v236 - 2;
      v241 = v236 - 4;
      v463 = v236 - 2;
      if (v237 == v233)
      {
        if (!v235)
          goto LABEL_296;
        v242 = 0;
        while (!*(_BYTE *)(*v238 + (*v463 + v242) % (unint64_t)(*v241 - *v238)))
        {
          if (v235 == ++v242)
            goto LABEL_296;
        }
      }
      else
      {
        v243 = *v240;
        v244 = *v241 - *v238;
        if (*(_BYTE *)(*v238 + *v240 % v244))
        {
          LODWORD(v242) = 0;
          if (v239)
            goto LABEL_296;
        }
        else
        {
          v242 = 0;
          v245 = v243 + 1;
          v246 = v235 - 1;
          do
          {
            v248 = v246 == v242;
            if (v246 != v242 && v233 - 1 == v242)
            {
              LODWORD(v242) = v232 + 1;
              v241 = v236 - 4;
              goto LABEL_297;
            }
          }
          while (!*(unsigned __int8 *)(*v238 + (v245 + v242++) % v244));
          v241 = v236 - 4;
          if (v248)
LABEL_296:
            LODWORD(v242) = v235;
        }
      }
LABEL_297:
      if ((int)v233 < (int)v242 + 2)
        goto LABEL_240;
      v249 = 0;
      v250 = 0;
      v251 = (char *)v466[26];
      v252 = v231 - v230;
      v452 = (v231 - v230 + 1);
      v456 = v241;
      v253 = *v238;
      v254 = *v241 - *v238;
      v255 = (v232 + 1) & 0x1FFFFFFFELL;
      v256 = *v463 + (int)v242;
      v257 = v255;
      do
      {
        if (*(_BYTE *)(v253 + v256 % v254))
          ++v249;
        if (*(_BYTE *)(v253 + (v256 + 1) % v254))
          ++v250;
        v256 += 2;
        v257 -= 2;
      }
      while (v257);
      v258 = v250 + v249;
      if (v232 + 1 != v255)
      {
        v259 = *v463 + v255 + (int)v242;
        v260 = v232 - v255 + 1;
        do
        {
          if (*(_BYTE *)(v253 + v259 % v254))
            ++v258;
          ++v259;
          --v260;
        }
        while (v260);
      }
      v261 = v241;
      if (v258 >= 2)
      {
        v262 = v464[9];
        v263 = v464[5];
        if (!v262)
          v262 = 0x6DB6DB6DB6DB6DB7 * ((v464[6] - v263) >> 3);
        *v223 = *(_DWORD *)(v263 + 56 * v262 - 56);
        v264 = v466[27];
        if ((unint64_t)v210 < v264)
        {
          *(_DWORD *)v210 = *(_DWORD *)v203;
          v265 = (uint64_t)(v210 + 4);
LABEL_333:
          v466[26] = v265;
          goto LABEL_334;
        }
        v266 = v212 + 1;
        if ((v212 + 1) >> 62)
          sub_20EABADD4();
        v267 = v264 - (_QWORD)v211;
        if (v267 >> 1 > v266)
          v266 = v267 >> 1;
        if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
          v268 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v268 = v266;
        if (v268)
        {
          v446 = v252;
          v447 = (_DWORD *)v203;
          if (v268 >> 62)
            sub_20E877A38();
          v445 = v268;
          v269 = (char *)operator new(4 * v268);
          v203 = (uint64_t)v447;
          v238 = v236 - 5;
          v261 = v456;
          v252 = v446;
          v268 = v445;
          v270 = &v269[4 * v212];
          *(_DWORD *)v270 = *v447;
          v265 = (uint64_t)(v270 + 4);
          v271 = (char *)(v210 - v211);
          if (v210 == v211)
            goto LABEL_331;
LABEL_325:
          v272 = (unint64_t)(v271 - 4);
          if (v272 < 0x2C)
            goto LABEL_619;
          if ((unint64_t)(v211 - v269) < 0x20)
            goto LABEL_619;
          v273 = (v272 >> 2) + 1;
          v274 = 4 * (v273 & 0x7FFFFFFFFFFFFFF8);
          v251 = &v210[-v274];
          v270 -= v274;
          v275 = &v269[4 * v212 - 16];
          v276 = v210 - 16;
          v277 = v273 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v278 = *(_OWORD *)v276;
            *((_OWORD *)v275 - 1) = *((_OWORD *)v276 - 1);
            *(_OWORD *)v275 = v278;
            v275 -= 32;
            v276 -= 32;
            v277 -= 8;
          }
          while (v277);
          if (v273 != (v273 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_619:
            do
            {
              v279 = *((_DWORD *)v251 - 1);
              v251 -= 4;
              *((_DWORD *)v270 - 1) = v279;
              v270 -= 4;
            }
            while (v251 != v211);
          }
        }
        else
        {
          v269 = 0;
          v270 = (char *)(4 * v212);
          *(_DWORD *)(4 * v212) = *(_DWORD *)v203;
          v265 = 4 * v212 + 4;
          v271 = (char *)(v210 - v211);
          if (v210 != v211)
            goto LABEL_325;
        }
LABEL_331:
        v466[25] = v270;
        v466[26] = v265;
        v466[27] = &v269[4 * v268];
        if (v211)
        {
          v280 = v211;
          v281 = v203;
          v282 = v238;
          v283 = v252;
          v284 = v265;
          operator delete(v280);
          v265 = v284;
          v252 = v283;
          v261 = v456;
          v238 = v282;
          v203 = v281;
        }
        goto LABEL_333;
      }
LABEL_334:
      if (v252 < 0)
      {
        v199 = v453;
        v84 = v464;
        goto LABEL_240;
      }
      v285 = *v236;
      v286 = v230 - v229;
      v287 = *v236 == v286;
      v199 = v453;
      v288 = v452 + v286;
      v84 = v464;
      if (v452 + v286 == *v236)
      {
        if (v285 == v286)
        {
          LODWORD(v285) = 0;
          goto LABEL_359;
        }
        v288 = v230 - v229;
        while (!*(_BYTE *)(*v238 + (*v463 + v288) % (unint64_t)(*v261 - *v238)))
        {
          if (v285 == ++v288)
          {
            v288 = *v236;
            if (v285 == v286)
              goto LABEL_355;
            goto LABEL_346;
          }
        }
      }
      else
      {
        v289 = *v261 - *v238;
        v290 = v230 - v229;
        if (*(_BYTE *)(*v238 + (*v463 + v286) % v289))
        {
LABEL_337:
          v288 = v290;
          if (v287)
          {
            if (v285 == v286)
              goto LABEL_355;
LABEL_346:
            if (v229 >= v228)
            {
              v285 = -v285;
              goto LABEL_359;
            }
LABEL_358:
            LODWORD(v285) = v286 - v288;
            goto LABEL_359;
          }
        }
        else
        {
          v291 = 1 - v452;
          v292 = v285 - 1;
          v290 = v230 - v229;
          while (1)
          {
            v287 = v292 == v290;
            if (v292 != v290 && !v291)
              break;
            v293 = *(unsigned __int8 *)(*v238 + (*v463 + 1 + v290) % v289);
            ++v291;
            ++v290;
            if (v293)
              goto LABEL_337;
          }
        }
      }
      if (!v288 && v285 != v286 && v229 >= v228)
      {
LABEL_355:
        LODWORD(v285) = 0;
        goto LABEL_359;
      }
      if (v288 || v285 != v286)
        goto LABEL_358;
LABEL_359:
      v294 = v452 + v285;
      if ((int)v452 + (int)v285 >= 1)
      {
        v295 = v230 - v285;
        v296 = v286 - v285;
        v297 = (_DWORD *)v203;
        if (*(_QWORD *)(v464[2] + (v448 << 8) + 232) == *(_QWORD *)(v464[2] + (v448 << 8) + 240))
          sub_20F1794F8(v466, (int *)v203, v294, v296, v295);
        else
          sub_20F1791B8((uint64_t)v466, v203, v294, v296, v295);
        v299 = v298;
        v301 = *(char **)(v451 + 8);
        v300 = *(_QWORD *)(v451 + 16);
        v302 = v297;
        if ((unint64_t)v301 < v300)
        {
          *(_DWORD *)v301 = *v297;
          v303 = (uint64_t)(v301 + 4);
LABEL_384:
          v199 = v453;
          v84 = v464;
          *(_QWORD *)(v451 + 8) = v303;
          if (*((_BYTE *)v464 + 8))
          {
            *v302 = -1;
            v324 = (_QWORD *)(v202 + (v454 << 7));
            v324[7] = 0;
            v324[8] = 0;
            v324[6] = 0;
            v463[1] = 0;
            v463[2] = 0;
            *v463 = 0;
          }
          v450 += v299;
          v449 += v294;
          goto LABEL_240;
        }
        v304 = *(char **)v451;
        v305 = (uint64_t)&v301[-*(_QWORD *)v451];
        v306 = v305 >> 2;
        v307 = (v305 >> 2) + 1;
        if (v307 >> 62)
          sub_20EABADD4();
        v308 = v300 - (_QWORD)v304;
        if (v308 >> 1 > v307)
          v307 = v308 >> 1;
        if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL)
          v309 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v309 = v307;
        if (v309)
        {
          if (v309 >> 62)
            sub_20E877A38();
          v310 = v302;
          v311 = operator new(4 * v309);
          v302 = v310;
          v312 = &v311[4 * v306];
          *v312 = *v310;
          v303 = (uint64_t)(v312 + 1);
          v313 = v301 - v304;
          if (v301 == v304)
            goto LABEL_382;
LABEL_376:
          v314 = v313 - 4;
          if (v314 < 0x2C)
            goto LABEL_620;
          if ((unint64_t)(v301 - v311 - v305) < 0x20)
            goto LABEL_620;
          v315 = (v314 >> 2) + 1;
          v316 = 4 * (v315 & 0x7FFFFFFFFFFFFFF8);
          v317 = &v301[-v316];
          v312 = (_DWORD *)((char *)v312 - v316);
          v318 = &v311[4 * v306 - 16];
          v319 = v301 - 16;
          v320 = v315 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v321 = *(_OWORD *)v319;
            *(v318 - 1) = *((_OWORD *)v319 - 1);
            *v318 = v321;
            v318 -= 2;
            v319 -= 32;
            v320 -= 8;
          }
          while (v320);
          v301 = v317;
          if (v315 != (v315 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_620:
            do
            {
              v322 = *((_DWORD *)v301 - 1);
              v301 -= 4;
              *--v312 = v322;
            }
            while (v301 != v304);
          }
        }
        else
        {
          v311 = 0;
          v312 = (_DWORD *)(4 * v306);
          *(_DWORD *)(4 * v306) = *(_DWORD *)v302;
          v303 = 4 * v306 + 4;
          v313 = v301 - v304;
          if (v301 != v304)
            goto LABEL_376;
        }
LABEL_382:
        *(_QWORD *)v451 = v312;
        *(_QWORD *)(v451 + 8) = v303;
        *(_QWORD *)(v451 + 16) = &v311[4 * v309];
        if (v304)
        {
          v323 = v302;
          operator delete(v304);
          v302 = v323;
        }
        goto LABEL_384;
      }
LABEL_240:
      v200 += 16;
      if (v200 == v460)
        goto LABEL_388;
    }
  }
  v449 = 0;
  v450 = 0;
LABEL_388:
  sub_20F1729F0(&v479);
  if (**(int **)(v479 + 56) <= 3)
  {
    v325 = *(unsigned __int8 *)(v479 + 72);
    v326 = sub_20E8C31DC(v479, "OSLogSurrogateAppender", 1, 0);
    v327 = v326;
    if (v325 || v326 != 0)
    {
      v470 = &v479;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v472 = std::chrono::system_clock::now().__d_.__rep_;
      v473 = 3;
      v474 = "unknown file";
      v475 = 2137;
      v477 = 0;
      v478 = 0;
      v476 = "unknown function";
      v329 = *v470;
      v330 = *v470 + 16;
      if (*(char *)(*v470 + 39) < 0)
      {
        v332 = *(const char **)(v329 + 16);
        v331 = *(_QWORD *)(v329 + 24);
      }
      else
      {
        v331 = *(unsigned __int8 *)(*v470 + 39);
        v332 = (const char *)(*v470 + 16);
      }
      v465 = v466[1];
      v468 = *v466;
      v333 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v485);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v485);
        if ((_BYTE)v486 && (v485[23] & 0x80000000) != 0)
          operator delete(*(void **)v485);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v334 = byte_254A4A4F8;
      else
        v334 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v335 = byte_254A4A4F8[23];
      else
        v335 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v485 = os_log_create(v334, v332);
      v336 = &v485[8];
      if (v335 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v335 >= 0x17)
      {
        v337 = v327;
        v338 = v332;
        v339 = v329;
        v340 = v325;
        v341 = v330;
        v342 = (v335 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v335 | 7) != 0x17)
          v342 = v335 | 7;
        v343 = v342 + 1;
        v336 = operator new(v342 + 1);
        *(_QWORD *)&v485[16] = v335;
        *(_QWORD *)&v486 = v343 | 0x8000000000000000;
        *(_QWORD *)&v485[8] = v336;
        v330 = v341;
        v325 = v340;
        v329 = v339;
        v332 = v338;
        v327 = v337;
      }
      else
      {
        BYTE7(v486) = v335;
        if (!v335)
        {
LABEL_411:
          v336[v335] = 0;
          BYTE8(v486) = 1;
          v344 = (char *)&v487;
          if (v331 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v331 >= 0x17)
          {
            v346 = (v331 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v331 | 7) != 0x17)
              v346 = v331 | 7;
            v347 = v346 + 1;
            v344 = (char *)operator new(v346 + 1);
            v488 = v331;
            v489 = v347 | 0x8000000000000000;
            v487 = v344;
          }
          else
          {
            HIBYTE(v489) = v331;
            if (!v331)
            {
              LOBYTE(v487) = 0;
              v490 = 1;
              v345 = *(NSObject **)v485;
              if ((SHIBYTE(v489) & 0x80000000) == 0)
                goto LABEL_415;
              goto LABEL_421;
            }
          }
          memmove(v344, v332, v331);
          v344[v331] = 0;
          v490 = 1;
          v345 = *(NSObject **)v485;
          if ((SHIBYTE(v489) & 0x80000000) == 0)
          {
LABEL_415:
            if (!BYTE8(v486))
              goto LABEL_424;
            goto LABEL_422;
          }
LABEL_421:
          operator delete(v487);
          if (!BYTE8(v486))
          {
LABEL_424:
            if (*(_QWORD *)v485)
              os_release(*(void **)v485);
            if (v327 && *(_QWORD *)(v327 + 24))
            {
              v348 = _os_log_pack_size();
              v349 = (std::__shared_weak_count_vtbl *)operator new(v348, (std::align_val_t)8uLL);
              v350 = (std::__shared_weak_count *)operator new();
              v351 = v350;
              v350->__shared_owners_ = 0;
              v352 = (unint64_t *)&v350->__shared_owners_;
              v350->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v350->__shared_weak_owners_ = 0;
              v350[1].__vftable = v349;
              *(_QWORD *)v485 = v349;
              *(_QWORD *)&v485[8] = v349;
              *(_QWORD *)&v485[16] = v350;
              do
                v353 = __ldxr(v352);
              while (__stxr(v353 + 1, v352));
              v486 = 0uLL;
              v487 = 0;
              do
                v354 = __ldaxr(v352);
              while (__stlxr(v354 - 1, v352));
              if (!v354)
              {
                ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                std::__shared_weak_count::__release_weak(v351);
              }
              v355 = *(_QWORD *)v485;
              v356 = _os_log_pack_fill();
              *(_DWORD *)v356 = 134218240;
              *(_QWORD *)(v356 + 4) = v465;
              *(_WORD *)(v356 + 12) = 2048;
              *(_QWORD *)(v356 + 14) = v468;
              v357 = operator new();
              v358 = *(unsigned __int8 *)(v329 + 39);
              if ((v358 & 0x80u) == 0)
                v359 = v330;
              else
                v359 = *(_QWORD *)(v329 + 16);
              if ((v358 & 0x80u) != 0)
                v358 = *(_QWORD *)(v329 + 24);
              *(_QWORD *)v357 = v355;
              *(_OWORD *)(v357 + 8) = *(_OWORD *)&v485[8];
              *(_QWORD *)&v485[8] = 0;
              *(_QWORD *)&v485[16] = 0;
              *(_OWORD *)(v357 + 24) = v486;
              v486 = 0uLL;
              *(_QWORD *)(v357 + 40) = v359;
              *(_QWORD *)(v357 + 48) = v358;
              *(_BYTE *)(v357 + 56) = 1;
              v480 = 0;
              v481[0] = v357;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v327 + 24) + 40))(*(_QWORD *)(v327 + 24), v481);
              v360 = v481[0];
              v481[0] = 0;
              if (v360)
              {
                v361 = *(std::__shared_weak_count **)(v360 + 32);
                if (v361)
                {
                  v362 = (unint64_t *)&v361->__shared_owners_;
                  do
                    v363 = __ldaxr(v362);
                  while (__stlxr(v363 - 1, v362));
                  if (!v363)
                  {
                    ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                    std::__shared_weak_count::__release_weak(v361);
                  }
                }
                v364 = *(std::__shared_weak_count **)(v360 + 16);
                if (v364)
                {
                  v365 = (unint64_t *)&v364->__shared_owners_;
                  do
                    v366 = __ldaxr(v365);
                  while (__stlxr(v366 - 1, v365));
                  if (!v366)
                  {
                    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                    std::__shared_weak_count::__release_weak(v364);
                  }
                }
                MEMORY[0x212BC6398](v360, 0x10F0C40B62ED6C6);
                v367 = v480;
                v480 = 0;
                if (v367)
                {
                  v368 = *(std::__shared_weak_count **)(v367 + 32);
                  if (v368)
                  {
                    v369 = (unint64_t *)&v368->__shared_owners_;
                    do
                      v370 = __ldaxr(v369);
                    while (__stlxr(v370 - 1, v369));
                    if (!v370)
                    {
                      ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                      std::__shared_weak_count::__release_weak(v368);
                    }
                  }
                  v371 = *(std::__shared_weak_count **)(v367 + 16);
                  if (v371)
                  {
                    v372 = (unint64_t *)&v371->__shared_owners_;
                    do
                      v373 = __ldaxr(v372);
                    while (__stlxr(v373 - 1, v372));
                    if (!v373)
                    {
                      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                      std::__shared_weak_count::__release_weak(v371);
                    }
                  }
                  MEMORY[0x212BC6398](v367, 0x10F0C40B62ED6C6);
                }
              }
              v374 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
              if (*((_QWORD *)&v486 + 1))
              {
                v375 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
                do
                  v376 = __ldaxr(v375);
                while (__stlxr(v376 - 1, v375));
                if (!v376)
                {
                  ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                  std::__shared_weak_count::__release_weak(v374);
                }
              }
              v377 = *(std::__shared_weak_count **)&v485[16];
              if (*(_QWORD *)&v485[16])
              {
                v378 = (unint64_t *)(*(_QWORD *)&v485[16] + 8);
                do
                  v379 = __ldaxr(v378);
                while (__stlxr(v379 - 1, v378));
                if (!v379)
                {
                  ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                  std::__shared_weak_count::__release_weak(v377);
                }
              }
            }
            else
            {
              os_log_type_enabled(v345, OS_LOG_TYPE_INFO);
              *(_DWORD *)v485 = 134218240;
              *(_QWORD *)&v485[4] = v465;
              *(_WORD *)&v485[12] = 2048;
              *(_QWORD *)&v485[14] = v468;
              v380 = (void *)_os_log_send_and_compose_impl();
              if (v380)
                free(v380);
            }
            if (v325)
            {
              sub_20E8C003C((uint64_t)&v470, "Extracted vision measurements with %zu frames and %zu tracks", v466[1], *v466);
              sub_20E863570((uint64_t)&v470);
            }
            sub_20E863570((uint64_t)&v470);
            v381 = v478;
            if (v478)
            {
              v382 = (unint64_t *)&v478->__shared_owners_;
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
              }
            }
            goto LABEL_481;
          }
LABEL_422:
          if (SBYTE7(v486) < 0)
            operator delete(*(void **)&v485[8]);
          goto LABEL_424;
        }
      }
      memmove(v336, v334, v335);
      goto LABEL_411;
    }
  }
LABEL_481:
  sub_20F1729F0(&v479);
  if (**(int **)(v479 + 56) > 3)
    return;
  v384 = *(unsigned __int8 *)(v479 + 72);
  v385 = sub_20E8C31DC(v479, "OSLogSurrogateAppender", 1, 0);
  v386 = v385;
  if (!v384 && v385 == 0)
    return;
  v470 = &v479;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v472 = std::chrono::system_clock::now().__d_.__rep_;
  v473 = 3;
  v474 = "unknown file";
  v475 = 2139;
  v477 = 0;
  v478 = 0;
  v476 = "unknown function";
  v388 = *v470;
  v389 = (const char *)(*v470 + 16);
  v469 = v389;
  if (*(char *)(*v470 + 39) < 0)
  {
    v389 = *(const char **)(v388 + 16);
    v390 = *(_QWORD *)(v388 + 24);
    v392 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v392 & 1) != 0)
      goto LABEL_490;
  }
  else
  {
    v390 = *(unsigned __int8 *)(*v470 + 39);
    v391 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v391 & 1) != 0)
      goto LABEL_490;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v485);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v485);
    if ((_BYTE)v486 && (v485[23] & 0x80000000) != 0)
      operator delete(*(void **)v485);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_490:
  if (byte_254A4A4F8[23] >= 0)
    v393 = byte_254A4A4F8;
  else
    v393 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v394 = byte_254A4A4F8[23];
  else
    v394 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v485 = os_log_create(v393, v389);
  v395 = &v485[8];
  if (v394 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v394 >= 0x17)
  {
    v396 = (v394 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v394 | 7) != 0x17)
      v396 = v394 | 7;
    v397 = v396 + 1;
    v395 = operator new(v396 + 1);
    *(_QWORD *)&v485[16] = v394;
    *(_QWORD *)&v486 = v397 | 0x8000000000000000;
    *(_QWORD *)&v485[8] = v395;
    goto LABEL_503;
  }
  BYTE7(v486) = v394;
  if (v394)
LABEL_503:
    memmove(v395, v393, v394);
  v395[v394] = 0;
  BYTE8(v486) = 1;
  v398 = (char *)&v487;
  if (v390 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v390 >= 0x17)
  {
    v400 = (v390 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v390 | 7) != 0x17)
      v400 = v390 | 7;
    v401 = v400 + 1;
    v398 = (char *)operator new(v400 + 1);
    v488 = v390;
    v489 = v401 | 0x8000000000000000;
    v487 = v398;
  }
  else
  {
    HIBYTE(v489) = v390;
    if (!v390)
    {
      LOBYTE(v487) = 0;
      v490 = 1;
      v399 = *(NSObject **)v485;
      if ((SHIBYTE(v489) & 0x80000000) == 0)
        goto LABEL_508;
      goto LABEL_514;
    }
  }
  memmove(v398, v389, v390);
  v398[v390] = 0;
  v490 = 1;
  v399 = *(NSObject **)v485;
  if ((SHIBYTE(v489) & 0x80000000) == 0)
  {
LABEL_508:
    if (!BYTE8(v486))
      goto LABEL_517;
LABEL_515:
    if (SBYTE7(v486) < 0)
      operator delete(*(void **)&v485[8]);
    goto LABEL_517;
  }
LABEL_514:
  operator delete(v487);
  if (BYTE8(v486))
    goto LABEL_515;
LABEL_517:
  if (*(_QWORD *)v485)
    os_release(*(void **)v485);
  if (v386 && *(_QWORD *)(v386 + 24))
  {
    v402 = _os_log_pack_size();
    v403 = (std::__shared_weak_count_vtbl *)operator new(v402, (std::align_val_t)8uLL);
    v404 = (std::__shared_weak_count *)operator new();
    v404->__shared_owners_ = 0;
    v405 = (unint64_t *)&v404->__shared_owners_;
    v404->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v404->__shared_weak_owners_ = 0;
    v404[1].__vftable = v403;
    v481[0] = v403;
    v481[1] = v403;
    v483 = 0;
    v484 = 0;
    v482 = v404;
    v406 = (char *)operator new(0x40uLL);
    v407 = (std::__shared_weak_count *)v406;
    *((_QWORD *)v406 + 1) = 0;
    v408 = (unint64_t *)(v406 + 8);
    *((_QWORD *)v406 + 2) = 0;
    *((_QWORD *)v406 + 3) = off_24C9F9148;
    *(_QWORD *)v406 = &off_24C9F90F8;
    *((_QWORD *)v406 + 4) = 0x746E696F70;
    v406[55] = 5;
    v483 = v406 + 24;
    v484 = v406;
    *(_QWORD *)v485 = v403;
    *(_QWORD *)&v485[8] = v403;
    *(_QWORD *)&v485[16] = v404;
    do
      v409 = __ldxr(v405);
    while (__stxr(v409 + 1, v405));
    *(_QWORD *)&v486 = v406 + 24;
    *((_QWORD *)&v486 + 1) = v406;
    do
      v410 = __ldxr(v408);
    while (__stxr(v410 + 1, v408));
    v487 = v406 + 24;
    do
      v411 = __ldaxr(v408);
    while (__stlxr(v411 - 1, v408));
    if (!v411)
    {
      (*(void (**)(char *))(*(_QWORD *)v406 + 16))(v406);
      std::__shared_weak_count::__release_weak(v407);
    }
    v412 = v482;
    if (v482)
    {
      v413 = (unint64_t *)&v482->__shared_owners_;
      do
        v414 = __ldaxr(v413);
      while (__stlxr(v414 - 1, v413));
      if (!v414)
      {
        ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
        std::__shared_weak_count::__release_weak(v412);
      }
    }
    v415 = *(_QWORD *)v485;
    if (v487[31] >= 0)
      v416 = v487 + 8;
    else
      v416 = (char *)*((_QWORD *)v487 + 1);
    v417 = _os_log_pack_fill();
    *(_DWORD *)v417 = 136315650;
    *(_QWORD *)(v417 + 4) = v416;
    *(_WORD *)(v417 + 12) = 1024;
    *(_DWORD *)(v417 + 14) = v450;
    *(_WORD *)(v417 + 18) = 1024;
    *(_DWORD *)(v417 + 20) = v449;
    v418 = operator new();
    v419 = *(unsigned __int8 *)(v388 + 39);
    v420 = v469;
    if ((v419 & 0x80u) != 0)
    {
      v420 = *(const char **)(v388 + 16);
      v419 = *(_QWORD *)(v388 + 24);
    }
    *(_QWORD *)v418 = v415;
    *(_OWORD *)(v418 + 8) = *(_OWORD *)&v485[8];
    *(_QWORD *)&v485[8] = 0;
    *(_QWORD *)&v485[16] = 0;
    *(_OWORD *)(v418 + 24) = v486;
    v486 = 0uLL;
    *(_QWORD *)(v418 + 40) = v420;
    *(_QWORD *)(v418 + 48) = v419;
    *(_BYTE *)(v418 + 56) = 1;
    v480 = 0;
    v481[0] = v418;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v386 + 24) + 40))(*(_QWORD *)(v386 + 24), v481);
    v421 = v481[0];
    v481[0] = 0;
    if (v421)
    {
      v422 = *(std::__shared_weak_count **)(v421 + 32);
      if (v422)
      {
        v423 = (unint64_t *)&v422->__shared_owners_;
        do
          v424 = __ldaxr(v423);
        while (__stlxr(v424 - 1, v423));
        if (!v424)
        {
          ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
          std::__shared_weak_count::__release_weak(v422);
        }
      }
      v425 = *(std::__shared_weak_count **)(v421 + 16);
      if (v425)
      {
        v426 = (unint64_t *)&v425->__shared_owners_;
        do
          v427 = __ldaxr(v426);
        while (__stlxr(v427 - 1, v426));
        if (!v427)
        {
          ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
          std::__shared_weak_count::__release_weak(v425);
        }
      }
      MEMORY[0x212BC6398](v421, 0x10F0C40B62ED6C6);
      v428 = v480;
      v480 = 0;
      if (v428)
      {
        v429 = *(std::__shared_weak_count **)(v428 + 32);
        if (v429)
        {
          v430 = (unint64_t *)&v429->__shared_owners_;
          do
            v431 = __ldaxr(v430);
          while (__stlxr(v431 - 1, v430));
          if (!v431)
          {
            ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
            std::__shared_weak_count::__release_weak(v429);
          }
        }
        v432 = *(std::__shared_weak_count **)(v428 + 16);
        if (v432)
        {
          v433 = (unint64_t *)&v432->__shared_owners_;
          do
            v434 = __ldaxr(v433);
          while (__stlxr(v434 - 1, v433));
          if (!v434)
          {
            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
            std::__shared_weak_count::__release_weak(v432);
          }
        }
        MEMORY[0x212BC6398](v428, 0x10F0C40B62ED6C6);
      }
    }
    v435 = (std::__shared_weak_count *)*((_QWORD *)&v486 + 1);
    if (*((_QWORD *)&v486 + 1))
    {
      v436 = (unint64_t *)(*((_QWORD *)&v486 + 1) + 8);
      do
        v437 = __ldaxr(v436);
      while (__stlxr(v437 - 1, v436));
      if (!v437)
      {
        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
        std::__shared_weak_count::__release_weak(v435);
      }
    }
    v438 = *(std::__shared_weak_count **)&v485[16];
    if (*(_QWORD *)&v485[16])
    {
      v439 = (unint64_t *)(*(_QWORD *)&v485[16] + 8);
      do
        v440 = __ldaxr(v439);
      while (__stlxr(v440 - 1, v439));
      if (!v440)
      {
        ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
        std::__shared_weak_count::__release_weak(v438);
      }
    }
  }
  else
  {
    os_log_type_enabled(v399, OS_LOG_TYPE_INFO);
    *(_DWORD *)v485 = 136315650;
    *(_QWORD *)&v485[4] = "point";
    *(_WORD *)&v485[12] = 1024;
    *(_DWORD *)&v485[14] = v450;
    *(_WORD *)&v485[18] = 1024;
    *(_DWORD *)&v485[20] = v449;
    v441 = (void *)_os_log_send_and_compose_impl();
    if (v441)
      free(v441);
  }
  if (v384)
  {
    sub_20E8C003C((uint64_t)&v470, "  %s: %d inlier measurements (of %d total).", "point", v450, v449);
    sub_20E863570((uint64_t)&v470);
  }
  sub_20E863570((uint64_t)&v470);
  v442 = v478;
  if (v478)
  {
    v443 = (unint64_t *)&v478->__shared_owners_;
    do
      v444 = __ldaxr(v443);
    while (__stlxr(v444 - 1, v443));
    if (!v444)
    {
      ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
      std::__shared_weak_count::__release_weak(v442);
    }
  }
}

void sub_20F17C220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 152))
  {
    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E8C4((uint64_t *)(v33 - 216));
  sub_20E86E8C4((uint64_t *)(v33 - 224));
  sub_20E86E658(v33 - 176);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C394()
{
  JUMPOUT(0x20F17C39CLL);
}

void sub_20F17C3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (*(_BYTE *)(v33 - 144) && *(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  v35 = *(void **)(v33 - 176);
  if (v35)
    os_release(v35);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F17C540(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20F17C564(_DWORD *result, _QWORD *a2, int *a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[2];
  char v23;
  _DWORD v24[4];
  _QWORD v25[33];

  if (*result != -1)
  {
    v5 = *a3;
    if (v5 >= (uint64_t)(a4[1] - *a4) >> 2 || *result != *(_DWORD *)(*a4 + 4 * v5))
    {
      sub_20E863438((uint64_t)v24);
      v8 = *a3;
      if (v8 >= (uint64_t)(a4[1] - *a4) >> 2)
      {
        sub_20E86A980(v25, (uint64_t)"Bad match index: ", 17);
        v11 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v11, (uint64_t)" => ", 4);
        v12 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v12, (uint64_t)". track_ids size: ", 18);
        v13 = (_QWORD *)std::ostream::operator<<();
        sub_20E8C81A0(v13);
      }
      else
      {
        v9 = *(_DWORD *)(*a4 + 4 * v8);
        v10 = (_QWORD *)a2[1];
        if ((_QWORD *)*a2 == v10)
        {
          v21 = (_QWORD *)*a2;
        }
        else
        {
          v16 = (_QWORD *)*a2;
          while (!*v16 || *(_DWORD *)*v16 != v9)
          {
            if (++v16 == v10)
            {
              v21 = (_QWORD *)a2[1];
              goto LABEL_18;
            }
          }
          v21 = v16;
        }
LABEL_18:
        sub_20E86A980(v25, (uint64_t)"Track ID at track index: ", 25);
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v17, (uint64_t)" v.s. at match: ", 16);
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v18, (uint64_t)". Match index: ", 15);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v19, (uint64_t)" => ", 4);
        std::ostream::operator<<();
        if (v21 == (_QWORD *)a2[1])
        {
          sub_20E86A980(v25, (uint64_t)". Cannot find track of same ID in track index.\n", 47);
        }
        else
        {
          sub_20E86A980(v25, (uint64_t)". Find track of same ID in track index at index: ", 49);
          v20 = (_QWORD *)std::ostream::operator<<();
          sub_20E8C81A0(v20);
        }
      }
      v14 = (const char *)v22;
      sub_20E923E88(v24, v22);
      if (v23 < 0)
        v14 = (const char *)v22[0];
      v15 = strlen(v14);
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 411, (uint64_t)"", 0, (uint64_t)v14, v15, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
  return result;
}

void sub_20F17C7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F17C82C(_QWORD *result, int a2, _OWORD *a3, _OWORD *a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = result[3] + 208 * result[7];
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 192) = -1;
  *(_QWORD *)(v6 + 200) = 0;
  v7 = result[3];
  v8 = 0x4EC4EC4EC4EC4EC5 * ((result[4] - v7) >> 4);
  v9 = result[8];
  v10 = result[7] + 1;
  if (v10 >= v8)
    v11 = 0x4EC4EC4EC4EC4EC5 * ((result[4] - v7) >> 4);
  else
    v11 = 0;
  v12 = v10 - v11;
  result[7] = v10 - v11;
  if (v9 == v8)
  {
    v13 = result[6] + 1;
    if (v13 >= v8)
      v14 = v8;
    else
      v14 = 0;
    result[6] = v13 - v14;
  }
  else
  {
    result[8] = v9 + 1;
  }
  v15 = v10 == v11;
  if (v10 == v11)
    v16 = (_QWORD *)(v7 + 208 * v8 - 8);
  else
    v16 = (_QWORD *)(v7 + 208 * v12 - 8);
  if (!v15)
    v8 = v12;
  *(_OWORD *)(v7 + 208 * v8 + 16 * *v16 - 208) = *a3;
  v17 = result[7];
  v18 = result[3];
  if (!v17)
    v17 = 0x4EC4EC4EC4EC4EC5 * ((result[4] - v18) >> 4);
  *(_OWORD *)(v18 + 208 * v17 + 16 * *v16 - 144) = *a4;
  v19 = result[7];
  v20 = result[3];
  if (v19)
    v21 = v19 - 1;
  else
    v21 = 0x4EC4EC4EC4EC4EC5 * ((result[4] - v20) >> 4) - 1;
  v22 = v20 + 208 * v21 + 8 * *v16;
  *(double *)(v22 + 128) = a5;
  *(double *)(v22 + 160) = a6;
  *(_DWORD *)(v20 + 208 * v21 + 192) = a2;
  *(_BYTE *)(result[9] + result[13]) = 0;
  v23 = result[10] - result[9];
  v24 = result[14];
  v25 = result[13] + 1;
  if (v25 >= v23)
    v26 = result[10] - result[9];
  else
    v26 = 0;
  result[13] = v25 - v26;
  if (v24 == v23)
  {
    v27 = result[12] + 1;
    if (v27 < v23)
      v23 = 0;
    result[12] = v27 - v23;
  }
  else
  {
    result[14] = v24 + 1;
  }
  return result;
}

void sub_20F17CA3C(uint64_t a1, uint64_t **a2, int a3, unint64_t a4, char a5, char a6, int a7, double a8, double a9, double a10, double a11, int64x2_t a12, float64x2_t a13, float64x2_t a14)
{
  uint64_t *v17;
  uint64_t *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  unint64_t v109;
  char *v110;
  _BYTE *v111;
  char *v112;
  unint64_t v113;
  _OWORD *v114;
  __int128 *v115;
  unint64_t v116;
  __int128 v117;
  _QWORD *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char v123;
  _BYTE *v124;
  _BYTE *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  int v138;
  char *v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  void *v161;
  void *v162;
  char *v163;
  void *v164;
  void *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  int64x2_t v169;
  _BYTE *v170;
  char *v171;
  unint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  BOOL v180;
  _OWORD *v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _BYTE *v193;
  unint64_t v194;
  _BYTE *v195;
  void *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  char *v210;
  __int128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  int v225;
  uint64_t v227;
  int64x2_t v228;
  uint64_t *v229;
  uint64_t *v232;
  uint64_t __sz;
  _BYTE v235[32];
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  unsigned __int128 v250;
  int v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  void *__p[4];
  __int128 v256;
  __int128 v257;
  _OWORD v258[2];
  __int128 v259;
  _OWORD v260[2];
  __int128 v261;
  _OWORD v262[2];
  __int128 v263;
  __int128 v264;
  int v265;
  __int128 v266;
  uint64_t v267;

  v17 = *a2;
  v18 = a2[1];
  if (*a2 != v18)
  {
    while (!*v17)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1277, (uint64_t)"lens != nullptr", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_10;
      }
      if ((sub_20EA82D10(*v17, v19, v20, v21, v22, v23, v24, v25) & 1) == 0)
        goto LABEL_9;
LABEL_3:
      if (++v17 == v18)
        goto LABEL_11;
    }
    if ((sub_20EA82D10(*v17, a8, a9, a10, a11, a12, a13, a14) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1278, (uint64_t)"lens->validate()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_10:
      abort();
    }
    goto LABEL_3;
  }
LABEL_11:
  *(_QWORD *)a1 = a4;
  *(_BYTE *)(a1 + 8) = a5;
  v26 = a1;
  *(_BYTE *)(a1 + 9) = a6;
  *(_DWORD *)(a1 + 12) = a7;
  sub_20F16F924((void **)(a1 + 40), a4);
  v27 = (char *)a2[1] - (char *)*a2;
  v28 = v27 >> 3;
  v29 = *(_QWORD *)(a1 + 16);
  if (v27 >> 3 > (unint64_t)((*(_QWORD *)(a1 + 32) - v29) >> 8))
  {
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFF9)
      sub_20E867F44();
    v30 = *(_QWORD *)(a1 + 24);
    v31 = (char *)operator new(32 * v27);
    v32 = (uint64_t)&v31[v30 - v29];
    v33 = &v31[256 * v28];
    v34 = sub_20F18B088(v30, v30, v29, v29, v32, v32);
    v35 = *(uint64_t **)(a1 + 16);
    v36 = *(uint64_t **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v34;
    *(_QWORD *)(a1 + 24) = v32;
    v26 = a1;
    for (*(_QWORD *)(a1 + 32) = v33; v36 != v35; v36 = sub_20F114330(v36 - 32))
      ;
    if (v35)
      operator delete(v35);
  }
  v37 = *a2;
  v229 = a2[1];
  v38 = a3;
  if (*a2 != v229)
  {
    v228 = vdupq_n_s64(0x7FF8000000000000uLL);
    v227 = 144 * a3;
    __sz = 8 * a3;
    while (1)
    {
      v232 = v37;
      v42 = *v37;
      v266 = 0uLL;
      v267 = 0;
      memset(__p, 0, sizeof(__p));
      v256 = 0u;
      v257 = 0u;
      memset(v258, 0, sizeof(v258));
      v259 = 0u;
      memset(v260, 0, sizeof(v260));
      v261 = 0u;
      memset(v262, 0, sizeof(v262));
      v263 = 0u;
      v264 = 0u;
      v265 = 0;
      v43 = operator new();
      sub_20E972DB4(v43, v42);
      memcpy((void *)(v43 + 1000), (const void *)(v42 + 1000), 0x1B8uLL);
      v254 = 0;
      v44 = __p[0];
      __p[0] = (void *)v43;
      if (v44)
      {
        sub_20E8E931C((uint64_t)__p, (uint64_t)v44);
        v45 = v254;
        v254 = 0;
        if (v45)
          sub_20E8E931C((uint64_t)&v254, v45);
      }
      v46 = (_BYTE *)v257;
      if (a3 > (unint64_t)((uint64_t)(*(_QWORD *)&v258[0] - v257) >> 3))
        break;
LABEL_36:
      v61 = (_BYTE *)*((_QWORD *)&v258[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v258[1] + 1) - *((_QWORD *)&v258[0] + 1)) >> 3))
        goto LABEL_48;
      if (v38 < 0)
        goto LABEL_205;
      v62 = *(_BYTE **)&v258[1];
      v63 = (char *)operator new(__sz);
      v64 = v62 - v61;
      v65 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
      v66 = v65;
      if (v62 != v61)
      {
        if ((unint64_t)(v64 - 8) < 0x58)
        {
          v66 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_45:
            v75 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)v66 - 1) = v75;
            v66 -= 8;
          }
          while (v62 != v61);
          goto LABEL_46;
        }
        v66 = &v63[(v62 - v61) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v62 - &v63[v64 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_45;
        v67 = v64 >> 3;
        v68 = ((unint64_t)(v64 - 8) >> 3) + 1;
        v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v62[-v69];
        v66 = &v65[-v69];
        v71 = &v63[8 * v67 - 16];
        v72 = (__int128 *)(v62 - 16);
        v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = *v72;
          *((_OWORD *)v71 - 1) = *(v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 2;
          v73 -= 4;
        }
        while (v73);
        v62 = v70;
        if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_45;
      }
LABEL_46:
      *((_QWORD *)&v258[0] + 1) = v66;
      *(_QWORD *)&v258[1] = v65;
      *((_QWORD *)&v258[1] + 1) = &v63[8 * a3];
      if (v61)
        operator delete(v61);
LABEL_48:
      v76 = (_BYTE *)v259;
      if (a3 <= (unint64_t)((uint64_t)(*(_QWORD *)&v260[0] - v259) >> 3))
        goto LABEL_60;
      if (v38 < 0)
        goto LABEL_205;
      v77 = (_BYTE *)*((_QWORD *)&v259 + 1);
      v78 = (char *)operator new(__sz);
      v79 = v77 - v76;
      v80 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
      v81 = v80;
      if (v77 != v76)
      {
        if ((unint64_t)(v79 - 8) < 0x58)
        {
          v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_57:
            v90 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v81 - 1) = v90;
            v81 -= 8;
          }
          while (v77 != v76);
          goto LABEL_58;
        }
        v81 = &v78[(v77 - v76) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v77 - &v78[v79 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_57;
        v82 = v79 >> 3;
        v83 = ((unint64_t)(v79 - 8) >> 3) + 1;
        v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
        v85 = &v77[-v84];
        v81 = &v80[-v84];
        v86 = &v78[8 * v82 - 16];
        v87 = (__int128 *)(v77 - 16);
        v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v89 = *v87;
          *((_OWORD *)v86 - 1) = *(v87 - 1);
          *(_OWORD *)v86 = v89;
          v86 -= 32;
          v87 -= 2;
          v88 -= 4;
        }
        while (v88);
        v77 = v85;
        if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
      }
LABEL_58:
      *(_QWORD *)&v259 = v81;
      *((_QWORD *)&v259 + 1) = v80;
      *(_QWORD *)&v260[0] = &v78[8 * a3];
      if (v76)
        operator delete(v76);
LABEL_60:
      v91 = (_BYTE *)*((_QWORD *)&v260[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v260[1] + 1) - *((_QWORD *)&v260[0] + 1)) >> 3))
        goto LABEL_72;
      if (v38 < 0)
LABEL_205:
        sub_20E867F44();
      v92 = *(_BYTE **)&v260[1];
      v93 = (char *)operator new(__sz);
      v94 = v92 - v91;
      v95 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
      v96 = v95;
      if (v92 != v91)
      {
        if ((unint64_t)(v94 - 8) < 0x58)
        {
          v96 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
          do
          {
LABEL_69:
            v105 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *((_QWORD *)v96 - 1) = v105;
            v96 -= 8;
          }
          while (v92 != v91);
          goto LABEL_70;
        }
        v96 = &v93[(v92 - v91) & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(v92 - &v93[v94 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
          goto LABEL_69;
        v97 = v94 >> 3;
        v98 = ((unint64_t)(v94 - 8) >> 3) + 1;
        v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = &v92[-v99];
        v96 = &v95[-v99];
        v101 = &v93[8 * v97 - 16];
        v102 = (__int128 *)(v92 - 16);
        v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v104 = *v102;
          *((_OWORD *)v101 - 1) = *(v102 - 1);
          *(_OWORD *)v101 = v104;
          v101 -= 32;
          v102 -= 2;
          v103 -= 4;
        }
        while (v103);
        v92 = v100;
        if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_69;
      }
LABEL_70:
      *((_QWORD *)&v260[0] + 1) = v96;
      *(_QWORD *)&v260[1] = v95;
      *((_QWORD *)&v260[1] + 1) = &v93[8 * a3];
      if (v91)
        operator delete(v91);
LABEL_72:
      v106 = (_BYTE *)v261;
      if (*(_QWORD *)&v262[0] - (_QWORD)v261 >= (unint64_t)a3)
        goto LABEL_93;
      if (v38 < 0)
        sub_20E867F44();
      v107 = (_BYTE *)*((_QWORD *)&v261 + 1);
      v108 = operator new(a3);
      v109 = v107 - v106;
      v110 = &v108[v107 - v106];
      v111 = v110;
      if (v107 != v106)
      {
        v111 = v108;
        if (v109 < 8)
        {
          v112 = &v108[v107 - v106];
          goto LABEL_89;
        }
        v112 = &v108[v107 - v106];
        if ((unint64_t)(v106 - v108) < 0x20)
          goto LABEL_89;
        if (v109 >= 0x20)
        {
          v113 = v109 & 0xFFFFFFFFFFFFFFE0;
          v114 = &v108[v109 - 16];
          v115 = (__int128 *)(v107 - 16);
          v116 = v109 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v117 = *v115;
            *(v114 - 1) = *(v115 - 1);
            *v114 = v117;
            v114 -= 2;
            v115 -= 2;
            v116 -= 32;
          }
          while (v116);
          if (v109 == v113)
            goto LABEL_91;
          if ((v109 & 0x18) == 0)
          {
            v112 = &v110[-v113];
            v107 -= v113;
LABEL_89:
            v122 = v112 - 1;
            do
            {
              v123 = *--v107;
              *v122-- = v123;
            }
            while (v107 != v106);
            goto LABEL_91;
          }
        }
        else
        {
          v113 = 0;
        }
        v112 = &v110[-(v109 & 0xFFFFFFFFFFFFFFF8)];
        v118 = &v108[&v107[-v113] - v106 - 8];
        v119 = (uint64_t *)&v107[-v113 - 8];
        v120 = v113 - (v109 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v121 = *v119--;
          *v118-- = v121;
          v120 += 8;
        }
        while (v120);
        v107 -= v109 & 0xFFFFFFFFFFFFFFF8;
        if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_89;
      }
LABEL_91:
      *(_QWORD *)&v261 = v111;
      *((_QWORD *)&v261 + 1) = v110;
      *(_QWORD *)&v262[0] = &v108[a3];
      if (v106)
        operator delete(v106);
LABEL_93:
      v124 = (_BYTE *)*((_QWORD *)&v262[0] + 1);
      if (a3 <= (unint64_t)((uint64_t)(*((_QWORD *)&v262[1] + 1) - *((_QWORD *)&v262[0] + 1)) >> 2))
        goto LABEL_105;
      if (v38 < 0)
        sub_20EABADD4();
      v125 = *(_BYTE **)&v262[1];
      v126 = (char *)operator new(4 * a3);
      v127 = v125 - v124;
      v128 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
      v129 = v128;
      if (v125 != v124)
      {
        if ((unint64_t)(v127 - 4) < 0x2C)
        {
          v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
          do
          {
LABEL_102:
            v138 = *((_DWORD *)v125 - 1);
            v125 -= 4;
            *((_DWORD *)v129 - 1) = v138;
            v129 -= 4;
          }
          while (v125 != v124);
          goto LABEL_103;
        }
        v129 = &v126[(v125 - v124) & 0xFFFFFFFFFFFFFFFCLL];
        if ((unint64_t)(v125 - &v126[v127 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
          goto LABEL_102;
        v130 = v127 >> 2;
        v131 = ((unint64_t)(v127 - 4) >> 2) + 1;
        v132 = 4 * (v131 & 0x7FFFFFFFFFFFFFF8);
        v133 = &v125[-v132];
        v129 = &v128[-v132];
        v134 = &v126[4 * v130 - 16];
        v135 = (__int128 *)(v125 - 16);
        v136 = v131 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v137 = *v135;
          *((_OWORD *)v134 - 1) = *(v135 - 1);
          *(_OWORD *)v134 = v137;
          v134 -= 32;
          v135 -= 2;
          v136 -= 8;
        }
        while (v136);
        v125 = v133;
        if (v131 != (v131 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_102;
      }
LABEL_103:
      *((_QWORD *)&v262[0] + 1) = v129;
      *(_QWORD *)&v262[1] = v128;
      *((_QWORD *)&v262[1] + 1) = &v126[4 * a3];
      if (v124)
        operator delete(v124);
LABEL_105:
      v139 = (char *)__p[2];
      v140 = (char *)__p[1];
      v141 = 0x8E38E38E38E38E39 * (((char *)__p[2] - (char *)__p[1]) >> 4);
      v142 = a3 - v141;
      if (a3 > v141)
      {
        if (0x8E38E38E38E38E39 * (((char *)__p[3] - (char *)__p[2]) >> 4) >= v142)
        {
          v166 = (char *)__p[2] + 144 * v142;
          v167 = v227 - 16 * (((char *)__p[2] - (char *)__p[1]) >> 4);
          do
          {
            *(int64x2_t *)(v139 + 8) = v228;
            *(int64x2_t *)(v139 + 24) = v228;
            *(_OWORD *)(v139 + 56) = 0uLL;
            *(_OWORD *)(v139 + 72) = 0uLL;
            *(_OWORD *)(v139 + 104) = 0uLL;
            *(_OWORD *)(v139 + 120) = 0uLL;
            *(_OWORD *)(v139 + 40) = 0uLL;
            *(_OWORD *)(v139 + 88) = 0uLL;
            v139[136] = 0;
            *(_QWORD *)v139 = -1;
            *((_QWORD *)v139 + 8) = 0;
            *((_QWORD *)v139 + 9) = 0;
            *((_QWORD *)v139 + 10) = 0;
            *((_QWORD *)v139 + 14) = 0;
            *((_QWORD *)v139 + 15) = 0;
            *((_QWORD *)v139 + 16) = 0;
            v139 += 144;
            v167 -= 144;
          }
          while (v167);
          __p[2] = v166;
          v139 = v166;
          v168 = (char *)__p[1];
          if (__p[1] != v166)
            goto LABEL_149;
        }
        else
        {
          if (v38 < 0)
            sub_20E867F44();
          v143 = 0x1C71C71C71C71C72 * (((char *)__p[3] - (char *)__p[1]) >> 4);
          if (v143 <= a3)
            v143 = a3;
          if (0x8E38E38E38E38E39 * (((char *)__p[3] - (char *)__p[1]) >> 4) >= 0xE38E38E38E38E3)
            v144 = 0x1C71C71C71C71C7;
          else
            v144 = v143;
          if (v144 > 0x1C71C71C71C71C7)
            sub_20E877A38();
          v145 = (char *)operator new(144 * v144);
          v146 = &v145[144 * v141];
          v147 = v227 - 144 * v141;
          v148 = v146;
          do
          {
            *(int64x2_t *)(v148 + 8) = v228;
            *(int64x2_t *)(v148 + 24) = v228;
            *(_OWORD *)(v148 + 56) = 0uLL;
            *(_OWORD *)(v148 + 72) = 0uLL;
            *(_OWORD *)(v148 + 104) = 0uLL;
            *(_OWORD *)(v148 + 120) = 0uLL;
            *(_OWORD *)(v148 + 40) = 0uLL;
            *(_OWORD *)(v148 + 88) = 0uLL;
            v148[136] = 0;
            *(_QWORD *)v148 = -1;
            *((_QWORD *)v148 + 8) = 0;
            *((_QWORD *)v148 + 9) = 0;
            *((_QWORD *)v148 + 10) = 0;
            *((_QWORD *)v148 + 14) = 0;
            *((_QWORD *)v148 + 15) = 0;
            *((_QWORD *)v148 + 16) = 0;
            v148 += 144;
            v147 -= 144;
          }
          while (v147);
          v149 = &v145[144 * v144];
          if (v139 == v140)
          {
            __p[1] = &v145[144 * v141];
            __p[2] = &v145[144 * a3];
            __p[3] = &v145[144 * v144];
          }
          else
          {
            v150 = 0;
            do
            {
              v151 = &v139[v150];
              v152 = &v146[v150];
              *((_QWORD *)v152 - 18) = *(_QWORD *)&v139[v150 - 144];
              *(_OWORD *)(v152 - 136) = *(_OWORD *)&v139[v150 - 136];
              v153 = *(_OWORD *)&v139[v150 - 120];
              *((_QWORD *)v152 - 12) = 0;
              *((_QWORD *)v152 - 11) = 0;
              *(_OWORD *)(v152 - 120) = v153;
              *((_QWORD *)v152 - 13) = 0;
              *(_OWORD *)(v152 - 104) = *(_OWORD *)&v139[v150 - 104];
              *((_QWORD *)v152 - 11) = *(_QWORD *)&v139[v150 - 88];
              *((_QWORD *)v151 - 13) = 0;
              *((_QWORD *)v151 - 12) = 0;
              v154 = *(_QWORD *)&v139[v150 - 80];
              *((_QWORD *)v151 - 11) = 0;
              *((_QWORD *)v151 - 10) = 0;
              *((_QWORD *)v152 - 10) = v154;
              v155 = *(_QWORD *)&v139[v150 - 72];
              *((_QWORD *)v151 - 9) = 0;
              *((_QWORD *)v152 - 9) = v155;
              v156 = *(_QWORD *)&v139[v150 - 64];
              *((_QWORD *)v151 - 8) = 0;
              *((_QWORD *)v152 - 8) = v156;
              *((_QWORD *)v152 - 7) = 0;
              *((_QWORD *)v152 - 6) = 0;
              *((_QWORD *)v152 - 5) = 0;
              *(_OWORD *)(v152 - 56) = *(_OWORD *)&v139[v150 - 56];
              *((_QWORD *)v152 - 5) = *(_QWORD *)&v139[v150 - 40];
              *((_QWORD *)v151 - 7) = 0;
              *((_QWORD *)v151 - 6) = 0;
              v157 = *(_QWORD *)&v139[v150 - 32];
              *((_QWORD *)v151 - 5) = 0;
              *((_QWORD *)v151 - 4) = 0;
              *((_QWORD *)v152 - 4) = v157;
              v158 = *(_QWORD *)&v139[v150 - 24];
              *((_QWORD *)v151 - 3) = 0;
              *((_QWORD *)v152 - 3) = v158;
              v159 = *(_QWORD *)&v139[v150 - 16];
              *((_QWORD *)v151 - 2) = 0;
              *((_QWORD *)v152 - 2) = v159;
              *(v152 - 8) = v139[v150 - 8];
              v150 -= 144;
            }
            while (&v139[v150] != v140);
            v139 = (char *)__p[1];
            v160 = (char *)__p[2];
            __p[1] = &v146[v150];
            __p[2] = &v145[144 * a3];
            __p[3] = v149;
            while (v160 != v139)
            {
              v161 = (void *)*((_QWORD *)v160 - 7);
              if (v161)
              {
                *((_QWORD *)v160 - 6) = v161;
                operator delete(v161);
              }
              v162 = (void *)*((_QWORD *)v160 - 13);
              if (v162)
              {
                *((_QWORD *)v160 - 12) = v162;
                operator delete(v162);
              }
              v160 -= 144;
            }
          }
          if (v139)
            operator delete(v139);
          v139 = (char *)__p[2];
          v168 = (char *)__p[1];
          if (__p[1] != __p[2])
            goto LABEL_149;
        }
LABEL_140:
        v169 = vdupq_n_s64((unint64_t)v139);
        goto LABEL_185;
      }
      if (a3 < v141)
      {
        v163 = (char *)__p[1] + 144 * a3;
        while (v139 != v163)
        {
          v164 = (void *)*((_QWORD *)v139 - 7);
          if (v164)
          {
            *((_QWORD *)v139 - 6) = v164;
            operator delete(v164);
          }
          v165 = (void *)*((_QWORD *)v139 - 13);
          if (v165)
          {
            *((_QWORD *)v139 - 12) = v165;
            operator delete(v165);
          }
          v139 -= 144;
        }
        __p[2] = &v140[144 * a3];
        v139 = (char *)__p[2];
      }
      v168 = (char *)__p[1];
      if (__p[1] == v139)
        goto LABEL_140;
LABEL_149:
      while (2)
      {
        v171 = (char *)*((_QWORD *)v168 + 5);
        v172 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)v168 + 6) - (_QWORD)v171) >> 4);
        if (v172 == a4)
          goto LABEL_168;
        if (!(_DWORD)a4)
        {
          *((_QWORD *)v168 + 6) = v171;
          *((_QWORD *)v168 + 9) = 0;
          *((_QWORD *)v168 + 10) = 0;
          *((_QWORD *)v168 + 8) = 0;
          v170 = (_BYTE *)*((_QWORD *)v168 + 11);
          if (*((_BYTE **)v168 + 12) == v170)
            goto LABEL_148;
LABEL_147:
          *((_QWORD *)v168 + 12) = v170;
          *((_QWORD *)v168 + 15) = 0;
          *((_QWORD *)v168 + 16) = 0;
          *((_QWORD *)v168 + 14) = 0;
          goto LABEL_148;
        }
        v173 = operator new(336 * a4);
        v174 = v173;
        v175 = (char *)&v173[21 * a4];
        v176 = (char *)v173;
        do
        {
          *((_OWORD *)v176 + 18) = 0uLL;
          *((_OWORD *)v176 + 19) = 0uLL;
          *((_OWORD *)v176 + 16) = 0uLL;
          *((_OWORD *)v176 + 17) = 0uLL;
          *((_OWORD *)v176 + 14) = 0uLL;
          *((_OWORD *)v176 + 15) = 0uLL;
          *((_OWORD *)v176 + 12) = 0uLL;
          *((_OWORD *)v176 + 13) = 0uLL;
          *((_OWORD *)v176 + 10) = 0uLL;
          *((_OWORD *)v176 + 11) = 0uLL;
          *((_OWORD *)v176 + 8) = 0uLL;
          *((_OWORD *)v176 + 9) = 0uLL;
          *((_OWORD *)v176 + 6) = 0uLL;
          *((_OWORD *)v176 + 7) = 0uLL;
          *((_OWORD *)v176 + 4) = 0uLL;
          *((_OWORD *)v176 + 5) = 0uLL;
          *((_OWORD *)v176 + 2) = 0uLL;
          *((_OWORD *)v176 + 3) = 0uLL;
          *(_OWORD *)v176 = 0uLL;
          *((_OWORD *)v176 + 1) = 0uLL;
          *((_QWORD *)v176 + 40) = 0;
          *((_QWORD *)v176 + 41) = 0;
          *((_DWORD *)v176 + 80) = -1;
          v176 += 336;
        }
        while (v176 != v175);
        v177 = 0;
        v178 = *((_QWORD *)v168 + 10);
        if (v178 >= a4)
          v179 = a4;
        else
          v179 = *((_QWORD *)v168 + 10);
        v180 = v178 == 0;
        v181 = v173;
        while (v180)
        {
          if (v178 <= a4)
            goto LABEL_165;
LABEL_158:
          v182 = &v171[336 * ((v177 + *((_QWORD *)v168 + 8)) % v172)];
          *v181 = *(_OWORD *)v182;
          v181[1] = *((_OWORD *)v182 + 1);
          v181[2] = *((_OWORD *)v182 + 2);
          v181[3] = *((_OWORD *)v182 + 3);
          v181[4] = *((_OWORD *)v182 + 4);
          v181[5] = *((_OWORD *)v182 + 5);
          v181[6] = *((_OWORD *)v182 + 6);
          v181[7] = *((_OWORD *)v182 + 7);
          v181[8] = *((_OWORD *)v182 + 8);
          v181[9] = *((_OWORD *)v182 + 9);
          v181[10] = *((_OWORD *)v182 + 10);
          v181[11] = *((_OWORD *)v182 + 11);
          v181[12] = *((_OWORD *)v182 + 12);
          v181[13] = *((_OWORD *)v182 + 13);
          v181[14] = *((_OWORD *)v182 + 14);
          v181[15] = *((_OWORD *)v182 + 15);
          v181[16] = *((_OWORD *)v182 + 16);
          v183 = *((_OWORD *)v182 + 17);
          v184 = *((_OWORD *)v182 + 18);
          v185 = *((_OWORD *)v182 + 20);
          v181[19] = *((_OWORD *)v182 + 19);
          v181[20] = v185;
          v181[17] = v183;
          v181[18] = v184;
          v180 = v178 - 1 == v177++;
          v181 += 21;
        }
        if (v178 <= a4 || v179 != v177)
          goto LABEL_158;
LABEL_165:
        if (v171)
        {
          *((_QWORD *)v168 + 6) = v171;
          operator delete(v171);
        }
        *((_QWORD *)v168 + 5) = v174;
        *((_QWORD *)v168 + 6) = v175;
        *((_QWORD *)v168 + 7) = v175;
        *((_QWORD *)v168 + 8) = 0;
        *((_QWORD *)v168 + 9) = v179 % a4;
        *((_QWORD *)v168 + 10) = v179;
LABEL_168:
        v170 = (_BYTE *)*((_QWORD *)v168 + 11);
        v187 = *((_QWORD *)v168 + 12) - (_QWORD)v170;
        if (v187 == a4)
          goto LABEL_148;
        if (!(_DWORD)a4)
          goto LABEL_147;
        v188 = (char *)operator new(a4);
        bzero(v188, a4);
        v189 = *((_QWORD *)v168 + 16);
        if (v189 >= a4)
          v190 = a4;
        else
          v190 = *((_QWORD *)v168 + 16);
        if (v189 > a4)
        {
          v191 = *((_QWORD *)v168 + 14);
          v192 = v190;
          v193 = v188;
          do
          {
            *v193++ = v170[v191 % v187];
            ++v191;
            --v192;
          }
          while (v192);
          goto LABEL_182;
        }
        if (v189)
        {
          v194 = *((_QWORD *)v168 + 14);
          v195 = v188;
          do
          {
            *v195++ = v170[v194 % v187];
            ++v194;
            --v189;
          }
          while (v189);
LABEL_182:
          *((_QWORD *)v168 + 12) = v170;
          operator delete(v170);
        }
        else if (v170)
        {
          goto LABEL_182;
        }
        *((_QWORD *)v168 + 11) = v188;
        *((_QWORD *)v168 + 12) = &v188[a4];
        *((_QWORD *)v168 + 13) = &v188[a4];
        *((_QWORD *)v168 + 14) = 0;
        *((_QWORD *)v168 + 15) = v190 % a4;
        *((_QWORD *)v168 + 16) = v190;
LABEL_148:
        v168[136] = 1;
        v168 += 144;
        if (v168 != v139)
          continue;
        break;
      }
      v169 = *(int64x2_t *)&__p[1];
LABEL_185:
      v196 = __p[0];
      memset(__p, 0, sizeof(__p));
      *(_QWORD *)v235 = v196;
      *(int64x2_t *)&v235[8] = v169;
      *(void **)&v235[24] = __p[3];
      v236 = v256;
      v237 = v257;
      v238 = *(_QWORD *)&v258[0];
      memset(v258, 0, sizeof(v258));
      v257 = 0uLL;
      v239 = *(_OWORD *)((char *)v258 + 8);
      v240 = *((_QWORD *)&v258[1] + 1);
      v241 = v259;
      v242 = *(_QWORD *)&v260[0];
      v259 = 0uLL;
      memset(v260, 0, sizeof(v260));
      v243 = *(_OWORD *)((char *)v260 + 8);
      v244 = *((_QWORD *)&v260[1] + 1);
      v245 = v261;
      v261 = 0uLL;
      v197 = *(_QWORD *)&v262[0];
      memset(v262, 0, sizeof(v262));
      v247 = *(_OWORD *)((char *)v262 + 8);
      v246 = v197;
      v248 = *((_QWORD *)&v262[1] + 1);
      v249 = v263;
      v263 = 0uLL;
      v251 = v265;
      v198 = v264;
      *(_QWORD *)&v264 = 0;
      v252 = v266;
      v250 = __PAIR128__(*((unint64_t *)&v264 + 1), v198);
      v253 = v267;
      v266 = 0uLL;
      v267 = 0;
      sub_20F114330((uint64_t *)__p);
      v38 = a3;
      v26 = a1;
      v200 = *(_QWORD *)(a1 + 24);
      v199 = *(_QWORD *)(a1 + 32);
      if (v200 < v199)
      {
        *(_QWORD *)(v200 + 16) = 0;
        *(_QWORD *)(v200 + 24) = 0;
        *(_QWORD *)(v200 + 8) = 0;
        v39 = *(_OWORD *)v235;
        *(_QWORD *)v235 = 0;
        *(_OWORD *)v200 = v39;
        *(_OWORD *)(v200 + 16) = *(_OWORD *)&v235[16];
        memset(&v235[8], 0, 24);
        *(_OWORD *)(v200 + 32) = v236;
        *(_QWORD *)(v200 + 48) = 0;
        *(_QWORD *)(v200 + 56) = 0;
        *(_QWORD *)(v200 + 64) = 0;
        *(_QWORD *)(v200 + 72) = 0;
        *(_OWORD *)(v200 + 48) = v237;
        *(_QWORD *)(v200 + 64) = v238;
        v237 = 0uLL;
        v238 = 0;
        *(_QWORD *)(v200 + 80) = 0;
        *(_QWORD *)(v200 + 88) = 0;
        *(_OWORD *)(v200 + 72) = v239;
        v239 = 0uLL;
        *(_QWORD *)(v200 + 88) = v240;
        *(_QWORD *)(v200 + 96) = 0;
        v240 = 0;
        *(_QWORD *)(v200 + 104) = 0;
        *(_QWORD *)(v200 + 112) = 0;
        *(_OWORD *)(v200 + 96) = v241;
        v241 = 0uLL;
        *(_QWORD *)(v200 + 112) = v242;
        *(_QWORD *)(v200 + 120) = 0;
        v242 = 0;
        *(_QWORD *)(v200 + 128) = 0;
        *(_QWORD *)(v200 + 136) = 0;
        *(_OWORD *)(v200 + 120) = v243;
        v243 = 0uLL;
        *(_QWORD *)(v200 + 136) = v244;
        *(_QWORD *)(v200 + 144) = 0;
        v244 = 0;
        *(_QWORD *)(v200 + 152) = 0;
        *(_QWORD *)(v200 + 160) = 0;
        *(_OWORD *)(v200 + 144) = v245;
        v245 = 0uLL;
        *(_QWORD *)(v200 + 160) = v246;
        *(_QWORD *)(v200 + 168) = 0;
        v246 = 0;
        *(_QWORD *)(v200 + 176) = 0;
        *(_QWORD *)(v200 + 184) = 0;
        *(_OWORD *)(v200 + 168) = v247;
        v247 = 0uLL;
        *(_QWORD *)(v200 + 184) = v248;
        *(_QWORD *)(v200 + 192) = 0;
        v248 = 0;
        *(_QWORD *)(v200 + 200) = 0;
        *(_QWORD *)(v200 + 208) = 0;
        *(_OWORD *)(v200 + 192) = v249;
        *(_QWORD *)(v200 + 208) = v250;
        v249 = 0uLL;
        *(_QWORD *)&v250 = 0;
        v40 = *((_QWORD *)&v250 + 1);
        *(_DWORD *)(v200 + 224) = v251;
        *(_QWORD *)(v200 + 216) = v40;
        *(_QWORD *)(v200 + 232) = 0;
        *(_QWORD *)(v200 + 240) = 0;
        *(_QWORD *)(v200 + 248) = 0;
        *(_OWORD *)(v200 + 232) = v252;
        *(_QWORD *)(v200 + 248) = v253;
        v252 = 0uLL;
        v253 = 0;
        v41 = v200 + 256;
      }
      else
      {
        v201 = *(_QWORD *)(a1 + 16);
        v202 = (uint64_t)(v200 - v201) >> 8;
        v203 = v202 + 1;
        if ((unint64_t)(v202 + 1) >> 56)
          sub_20E867F44();
        v204 = v199 - v201;
        if (v204 >> 7 > v203)
          v203 = v204 >> 7;
        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFF00)
          v205 = 0xFFFFFFFFFFFFFFLL;
        else
          v205 = v203;
        if (HIBYTE(v205))
          sub_20E877A38();
        v206 = (char *)operator new(v205 << 8);
        v207 = (uint64_t)&v206[256 * v202];
        *(_QWORD *)(v207 + 16) = 0;
        *(_QWORD *)(v207 + 24) = 0;
        v208 = *(_OWORD *)v235;
        v209 = *(_OWORD *)&v235[16];
        v210 = &v206[256 * v205];
        *(_QWORD *)v235 = 0;
        *(_OWORD *)v207 = v208;
        *(_OWORD *)(v207 + 16) = v209;
        memset(&v235[8], 0, 24);
        v211 = v237;
        *(_OWORD *)(v207 + 32) = v236;
        *(_OWORD *)(v207 + 48) = v211;
        *(_QWORD *)(v207 + 64) = v238;
        v238 = 0;
        v237 = 0uLL;
        *(_QWORD *)(v207 + 80) = 0;
        *(_QWORD *)(v207 + 88) = 0;
        *(_OWORD *)(v207 + 72) = v239;
        *(_QWORD *)(v207 + 88) = v240;
        v239 = 0uLL;
        v240 = 0;
        *(_QWORD *)(v207 + 104) = 0;
        *(_QWORD *)(v207 + 112) = 0;
        *(_OWORD *)(v207 + 96) = v241;
        *(_QWORD *)(v207 + 112) = v242;
        v241 = 0uLL;
        v242 = 0;
        *(_QWORD *)(v207 + 128) = 0;
        *(_QWORD *)(v207 + 136) = 0;
        *(_OWORD *)(v207 + 120) = v243;
        *(_QWORD *)(v207 + 136) = v244;
        v243 = 0uLL;
        v244 = 0;
        *(_QWORD *)(v207 + 152) = 0;
        *(_QWORD *)(v207 + 160) = 0;
        *(_OWORD *)(v207 + 144) = v245;
        v212 = v248;
        *(_QWORD *)(v207 + 160) = v246;
        v245 = 0uLL;
        v246 = 0;
        *(_QWORD *)(v207 + 176) = 0;
        *(_QWORD *)(v207 + 184) = 0;
        *(_OWORD *)(v207 + 168) = v247;
        *(_QWORD *)(v207 + 184) = v212;
        v247 = 0uLL;
        v248 = 0;
        *(_QWORD *)(v207 + 200) = 0;
        *(_QWORD *)(v207 + 208) = 0;
        *(_OWORD *)(v207 + 192) = v249;
        v249 = 0uLL;
        v213 = v250;
        v214 = v253;
        *(_QWORD *)&v250 = 0;
        *(_DWORD *)(v207 + 224) = v251;
        v215 = *((_QWORD *)&v250 + 1);
        *(_QWORD *)(v207 + 208) = v213;
        *(_QWORD *)(v207 + 216) = v215;
        *(_QWORD *)(v207 + 240) = 0;
        *(_QWORD *)(v207 + 248) = 0;
        *(_OWORD *)(v207 + 232) = v252;
        *(_QWORD *)(v207 + 248) = v214;
        v252 = 0uLL;
        v41 = v207 + 256;
        v253 = 0;
        v216 = sub_20F18B088(v200, v200, v201, v201, v207, v207);
        v218 = *(uint64_t **)(a1 + 16);
        v217 = *(uint64_t **)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v216;
        *(_QWORD *)(a1 + 24) = v41;
        for (*(_QWORD *)(a1 + 32) = v210; v217 != v218; v217 = sub_20F114330(v217 - 32))
          ;
        if (v218)
          operator delete(v218);
      }
      *(_QWORD *)(a1 + 24) = v41;
      sub_20F114330((uint64_t *)v235);
      v37 = v232 + 1;
      if (v232 + 1 == v229)
        goto LABEL_197;
    }
    if (v38 < 0)
      goto LABEL_205;
    v47 = (_BYTE *)*((_QWORD *)&v257 + 1);
    v48 = (char *)operator new(__sz);
    v49 = v47 - v46;
    v50 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
    v51 = v50;
    if (v47 != v46)
    {
      if ((unint64_t)(v49 - 8) < 0x58)
      {
        v51 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_33:
          v60 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v51 - 1) = v60;
          v51 -= 8;
        }
        while (v47 != v46);
        goto LABEL_34;
      }
      v51 = &v48[(v47 - v46) & 0xFFFFFFFFFFFFFFF8];
      if (v47 - v48 - (v49 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_33;
      v52 = v49 >> 3;
      v53 = ((unint64_t)(v49 - 8) >> 3) + 1;
      v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v47[-v54];
      v51 = &v50[-v54];
      v56 = &v48[8 * v52 - 16];
      v57 = (__int128 *)(v47 - 16);
      v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *v57;
        *((_OWORD *)v56 - 1) = *(v57 - 1);
        *(_OWORD *)v56 = v59;
        v56 -= 32;
        v57 -= 2;
        v58 -= 4;
      }
      while (v58);
      v47 = v55;
      if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
    }
LABEL_34:
    *(_QWORD *)&v257 = v51;
    *((_QWORD *)&v257 + 1) = v50;
    *(_QWORD *)&v258[0] = &v48[8 * a3];
    if (v46)
      operator delete(v46);
    goto LABEL_36;
  }
LABEL_197:
  v219 = *(char **)(v26 + 144);
  if (a4 > (uint64_t)(*(_QWORD *)(v26 + 160) - (_QWORD)v219) >> 4)
  {
    if (a4 >> 60)
      sub_20E867F44();
    v220 = *(char **)(v26 + 152);
    v221 = (char *)operator new(16 * a4);
    v222 = &v221[v220 - v219];
    v223 = v222;
    if (v220 != v219)
    {
      v223 = &v221[v220 - v219];
      do
      {
        v224 = *((_QWORD *)v220 - 2);
        v220 -= 16;
        v225 = *((_DWORD *)v220 + 2);
        *((_QWORD *)v223 - 2) = v224;
        v223 -= 16;
        *((_DWORD *)v223 + 2) = v225;
      }
      while (v220 != v219);
    }
    *(_QWORD *)(v26 + 144) = v223;
    *(_QWORD *)(v26 + 152) = v222;
    *(_QWORD *)(v26 + 160) = &v221[16 * a4];
    if (v219)
      operator delete(v219);
  }
  *(_BYTE *)(v26 + 112) = 1;
}

void sub_20F17DEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_20F114330(&a43);
  _Unwind_Resume(a1);
}

void sub_20F17DF40(_Unwind_Exception *a1)
{
  sub_20F114330((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F17DF54(_Unwind_Exception *a1)
{
  sub_20F114330((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F17DF68(_Unwind_Exception *a1)
{
  sub_20F114330((uint64_t *)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_20F17DF7C(_QWORD *a1, int a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  unsigned int v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  int8x16_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  BOOL v42;
  BOOL v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  BOOL v48;
  float64x2_t v49;
  float64x2_t v50;
  int8x16_t v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  BOOL v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t *v66;
  unint64_t v67;
  unsigned __int8 **v68;
  int8x16_t v69;
  int64x2_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  int *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  double *v90;
  int8x16_t v91;
  double v92;
  int8x16_t v93;
  int32x4_t v94;
  int32x4_t v95;
  float64x2_t v96;
  float64x2_t v97;
  int v98;
  int8x16_t v99;
  double v100;
  int8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x16_t *v108;
  unsigned __int8 *v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int64x2_t v130;
  int8x16_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int8x16_t *v134;
  int64x2_t v135;
  unint64_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  uint8x16_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  uint32x4_t v152;
  int8x16_t v153;
  uint32x4_t v154;
  uint32x4_t v155;
  int8x16_t v156;
  uint32x4_t v157;
  int64x2_t v158;
  int64x2_t v159;
  uint8x16_t v160;
  uint16x8_t v161;
  uint16x8_t v162;
  uint32x4_t v163;
  uint32x4_t v164;
  uint32x4_t v165;
  uint32x4_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int8x8_t *v170;
  unint64_t v171;
  int8x8_t v172;
  uint16x8_t v173;
  uint32x4_t v174;
  int8x16_t v175;
  int64x2_t v176;
  uint32x4_t v177;
  int64x2_t v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD **v182;
  _QWORD **v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  const char *v204;
  uint64_t v205;
  const char *v206;
  size_t v207;
  unsigned __int8 v208;
  unsigned __int8 v209;
  const char *v210;
  size_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  NSObject *v216;
  uint64_t v217;
  uint64_t v218;
  size_t v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  unint64_t *p_shared_owners;
  size_t v223;
  char *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count_vtbl *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *on_zero_shared_weak;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *on_zero_shared;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  int v263;
  int v264;
  int v265;
  void *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  int *v274;
  int *v275;
  uint64_t v276;
  int v277;
  int v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v286;
  char *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  BOOL v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  int v299;
  _DWORD *v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  BOOL v307;
  unint64_t v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  _DWORD *v312;
  unint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _BYTE *v319;
  unint64_t *v320;
  int64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  int8x16_t *v330;
  int64x2_t *v331;
  uint64_t v332;
  unint64_t v333;
  _QWORD *v334;
  char *v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t *v353;
  uint64_t *v354;
  double *v355;
  double *v356;
  int v357;
  int8x16_t v358;
  double v359;
  int8x16_t v360;
  int32x4_t v361;
  int32x4_t v362;
  float64x2_t v363;
  float64x2_t v364;
  int8x16_t *v365;
  int8x16_t *v366;
  int8x16_t *v367;
  unint64_t v368;
  int8x16_t *v369;
  int8x16_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  int8x16_t *v379;
  int8x16_t *v380;
  uint64_t v381;
  int8x16_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int8x16_t *v399;
  uint64_t v400;
  uint64_t v401;
  int8x16_t *v402;
  int8x16_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int8x16_t *v413;
  uint64_t v414;
  int8x16_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int8x16_t *v421;
  uint64_t v422;
  uint64_t *v423;
  int8x16_t *v424;
  int8x16_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  unint64_t v436;
  char *v437;
  uint64_t v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  _BYTE *v446;
  _QWORD *v447;
  int64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  int8x16_t *v453;
  int64x2_t *v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  _QWORD *v459;
  unsigned int v460;
  _DWORD *v461;
  _DWORD *v462;
  _DWORD *v463;
  unint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  unsigned __int8 **v467;
  uint64_t v468;
  _DWORD *v469;
  _DWORD *v470;
  int v471;
  _DWORD *v472;
  _DWORD *v473;
  _QWORD *v474;
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v480;
  const char *v481;
  uint64_t v482;
  void **__src;
  const char *__srca;
  _QWORD *v485;
  _QWORD v487[3];
  int v488;
  const char *v489;
  int v490;
  const char *v491;
  uint64_t v492;
  std::__shared_weak_count *v493;
  uint64_t v494;
  uint64_t v495;
  std::__shared_weak_count_vtbl *v496;
  __int128 v497;
  __int128 v498;
  char *v499;
  std::__shared_weak_count_vtbl *v500;
  std::__shared_weak_count_vtbl *v501;
  std::__shared_weak_count *v502;
  char *v503;
  char *v504;
  uint64_t __dst;
  _BYTE v506[15];
  char v507;
  _BYTE v508[48];
  size_t v509;
  unint64_t v510;
  char v511;
  uint64_t v512;

  v512 = *MEMORY[0x24BDAC8D0];
  v8 = a1[9];
  if (a5)
  {
    if (v8)
    {
      if (*(_QWORD *)(a1[5] + 56 * v8 - 16) - *(_QWORD *)(a1[5] + 56 * v8 - 24) == 144)
        goto LABEL_12;
    }
    else if (*(_QWORD *)(a1[5] + 8 * ((uint64_t)(a1[6] - a1[5]) >> 3) - 16)
            - *(_QWORD *)(a1[5] + 8 * ((uint64_t)(a1[6] - a1[5]) >> 3) - 24) == 144)
    {
      goto LABEL_12;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 892, (uint64_t)"mFrames.back().intrinsic_matrices().size() == 2", 47, (uint64_t)"AddSecondaryMeasurements() must be called prior to AddSecondaryMonoMeasurements()", 81, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  else
  {
    v9 = a1[5];
    if (!v8)
      v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v9) >> 3);
    sub_20F1723F0((_QWORD *)(v9 + 56 * v8 - 56), a3);
  }
LABEL_12:
  v10 = a1[2];
  v482 = a5;
  v11 = v10 + ((unint64_t)a5 << 8);
  *(_DWORD *)(v11 + 216) = 0;
  v462 = (_DWORD *)(v11 + 216);
  *(_DWORD *)(v11 + 220) = 0;
  v463 = (_DWORD *)(v11 + 220);
  *(_DWORD *)(v11 + 224) = 0;
  v461 = (_DWORD *)(v11 + 224);
  v12 = *(_QWORD *)v11;
  v13 = operator new();
  sub_20E972DB4(v13, v12);
  memcpy((void *)(v13 + 1000), (const void *)(v12 + 1000), 0x1B8uLL);
  v495 = v13;
  v17 = *(_DWORD *)(v13 + 992);
  if (v17 != -1)
  {
    if (v17 <= 7)
      goto LABEL_14;
LABEL_22:
    v15.f64[0] = *(float64_t *)(a3 + 64);
    v18 = *(float64x2_t *)(a3 + 32);
    v32 = *(float64x2_t *)(a3 + 48);
    v34 = *(int8x16_t *)a3;
    v33 = *(float64x2_t *)(a3 + 16);
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v25 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    v36 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
    *(_QWORD *)&v37 = vextq_s8(v34, v34, 8uLL).u64[0];
    v16.f64[0] = *(float64_t *)(v13 + 64);
    *(_QWORD *)&v16.f64[0] = *(_OWORD *)&vabdq_f64(v15, v16);
    v38 = vabdq_f64(v32, *(float64x2_t *)(v13 + 48));
    v39 = vabdq_f64(v18, *(float64x2_t *)(v13 + 32));
    v40 = vabdq_f64(v33, *(float64x2_t *)(v13 + 16));
    v41 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v13);
    v42 = v41.f64[0] > 1.0e-10;
    if (v41.f64[1] > 1.0e-10)
      v42 = 1;
    if (v40.f64[0] > 1.0e-10)
      v42 = 1;
    if (v40.f64[1] > 1.0e-10)
      v42 = 1;
    if (v39.f64[0] > 1.0e-10)
      v42 = 1;
    if (v39.f64[1] > 1.0e-10)
      v42 = 1;
    if (v38.f64[0] > 1.0e-10)
      v42 = 1;
    v43 = v42 || v38.f64[1] > 1.0e-10 || v16.f64[0] > 1.0e-10;
    if (v17 > 0xB)
    {
      if (v17 > 0xD)
      {
        if (!v43)
          goto LABEL_73;
        goto LABEL_71;
      }
    }
    else if (v17 > 9)
    {
      if (!v43)
        goto LABEL_73;
      goto LABEL_71;
    }
LABEL_54:
    if (!v43)
      goto LABEL_73;
LABEL_71:
    *(_QWORD *)&v32.f64[1] = v35;
    *(float64_t *)&v63 = v18.f64[0];
    *((_QWORD *)&v63 + 1) = v25;
    *(float64_t *)&v64 = v33.f64[0];
    *((_QWORD *)&v64 + 1) = v36;
    *(_QWORD *)&v65 = v34.i64[0];
    *((double *)&v65 + 1) = v37;
    *(_OWORD *)v13 = v65;
    *(_OWORD *)(v13 + 16) = v64;
    *(_OWORD *)(v13 + 32) = v63;
    *(float64x2_t *)(v13 + 48) = v32;
    v29 = *(double *)v34.i64 * v18.f64[0];
    *(float64_t *)(v13 + 64) = v15.f64[0];
    *(double *)(v13 + 72) = 1.0 / *(double *)v34.i64;
    *(double *)(v13 + 80) = -v37 / (*(double *)v34.i64 * v18.f64[0]);
    v30 = v18.f64[0] * v33.f64[0];
    v31 = v37 * *(double *)&v25;
    goto LABEL_72;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_495;
  }
  v17 = *(_DWORD *)(v13 + 992);
  if (v17 > 7)
    goto LABEL_22;
LABEL_14:
  if (v17 > 3)
  {
    v15.f64[0] = *(float64_t *)(a3 + 64);
    v18 = *(float64x2_t *)(a3 + 32);
    v32 = *(float64x2_t *)(a3 + 48);
    v34 = *(int8x16_t *)a3;
    v33 = *(float64x2_t *)(a3 + 16);
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v25 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    v36 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
    *(_QWORD *)&v37 = vextq_s8(v34, v34, 8uLL).u64[0];
    v16.f64[0] = *(float64_t *)(v13 + 64);
    *(_QWORD *)&v16.f64[0] = *(_OWORD *)&vabdq_f64(v15, v16);
    v44 = vabdq_f64(v32, *(float64x2_t *)(v13 + 48));
    v45 = vabdq_f64(v18, *(float64x2_t *)(v13 + 32));
    v46 = vabdq_f64(v33, *(float64x2_t *)(v13 + 16));
    v47 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v13);
    v48 = v47.f64[0] > 1.0e-10;
    if (v47.f64[1] > 1.0e-10)
      v48 = 1;
    if (v46.f64[0] > 1.0e-10)
      v48 = 1;
    if (v46.f64[1] > 1.0e-10)
      v48 = 1;
    if (v45.f64[0] > 1.0e-10)
      v48 = 1;
    if (v45.f64[1] > 1.0e-10)
      v48 = 1;
    if (v44.f64[0] > 1.0e-10)
      v48 = 1;
    v43 = v48 || v44.f64[1] > 1.0e-10 || v16.f64[0] > 1.0e-10;
    if (v17 > 5)
    {
      if (!v43)
        goto LABEL_73;
      goto LABEL_71;
    }
    goto LABEL_54;
  }
  if (v17 <= 1)
  {
    if (v17)
    {
      v14.f64[0] = *(float64_t *)(a3 + 64);
      v18 = *(float64x2_t *)(a3 + 32);
      v19 = *(float64x2_t *)(a3 + 48);
      v21 = *(int8x16_t *)a3;
      v20 = *(float64x2_t *)(a3 + 16);
      v22 = (int8x16_t)vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v13);
      v23 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      v24 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v23, (float64x2_t)vextq_s8(v22, v22, 8uLL)), (int32x4_t)vcgeq_f64(v23, vabdq_f64(v20, *(float64x2_t *)(v13 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v23, vabdq_f64(v18, *(float64x2_t *)(v13 + 32))), (int32x4_t)vcgeq_f64(v23, vabdq_f64(v19, *(float64x2_t *)(v13 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v24)) & 1) != 0
        || (v24.f64[0] = *(float64_t *)(v13 + 64), vabdq_f64(v14, v24).f64[0] > 1.0e-10))
      {
        COERCE_DOUBLE(v25 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).i64[0]);
        *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        *(_QWORD *)&v26 = *(_QWORD *)(a3 + 32);
        *((_QWORD *)&v26 + 1) = v25;
        *(_QWORD *)&v27 = *(_QWORD *)(a3 + 16);
        *((_QWORD *)&v27 + 1) = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
        *(_QWORD *)&v28 = *(_QWORD *)a3;
        *((double *)&v28 + 1) = *(double *)vextq_s8(v21, v21, 8uLL).i64;
        *(_OWORD *)v13 = v28;
        *(_OWORD *)(v13 + 16) = v27;
        *(_OWORD *)(v13 + 32) = v26;
        *(float64x2_t *)(v13 + 48) = v19;
        v29 = *(double *)v21.i64 * v18.f64[0];
        *(float64_t *)(v13 + 64) = v14.f64[0];
        *(double *)(v13 + 72) = 1.0 / *(double *)v21.i64;
        *(double *)(v13 + 80) = -*((double *)&v28 + 1) / (*(double *)v21.i64 * v18.f64[0]);
        v30 = v18.f64[0] * v20.f64[0];
        v31 = *((double *)&v28 + 1) * *(double *)&v25;
LABEL_72:
        *(double *)(v13 + 88) = -(v30 - v31) / v29;
        *(_QWORD *)(v13 + 96) = 0;
        *(double *)(v13 + 104) = 1.0 / v18.f64[0];
        *(double *)(v13 + 112) = -*(double *)&v25 / v18.f64[0];
        *(_QWORD *)(v13 + 120) = 0;
        *(_QWORD *)(v13 + 128) = 0;
        *(_OWORD *)(v13 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v13 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v13 + 160) = 0;
        goto LABEL_73;
      }
      goto LABEL_73;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_495:
    abort();
  }
  v14.f64[0] = *(float64_t *)(a3 + 64);
  v18 = *(float64x2_t *)(a3 + 32);
  v49 = *(float64x2_t *)(a3 + 48);
  v51 = *(int8x16_t *)a3;
  v50 = *(float64x2_t *)(a3 + 16);
  v52 = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  v25 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  v53 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  *(_QWORD *)&v54 = vextq_s8(v51, v51, 8uLL).u64[0];
  v16.f64[0] = *(float64_t *)(v13 + 64);
  *(_QWORD *)&v16.f64[0] = *(_OWORD *)&vabdq_f64(v14, v16);
  v55 = vabdq_f64(v49, *(float64x2_t *)(v13 + 48));
  v56 = vabdq_f64(v18, *(float64x2_t *)(v13 + 32));
  v57 = vabdq_f64(v50, *(float64x2_t *)(v13 + 16));
  v58 = vabdq_f64(*(float64x2_t *)a3, *(float64x2_t *)v13);
  v59 = v58.f64[0] > 1.0e-10;
  if (v58.f64[1] > 1.0e-10)
    v59 = 1;
  if (v57.f64[0] > 1.0e-10)
    v59 = 1;
  if (v57.f64[1] > 1.0e-10)
    v59 = 1;
  if (v56.f64[0] > 1.0e-10)
    v59 = 1;
  if (v56.f64[1] > 1.0e-10)
    v59 = 1;
  if (v55.f64[0] > 1.0e-10)
    v59 = 1;
  if (v59 || v55.f64[1] > 1.0e-10 || v16.f64[0] > 1.0e-10)
  {
    *(_QWORD *)&v49.f64[1] = v52;
    *(_QWORD *)&v60 = *(_QWORD *)(a3 + 32);
    *((_QWORD *)&v60 + 1) = v25;
    *(_QWORD *)&v61 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)&v61 + 1) = v53;
    *(_QWORD *)&v62 = *(_QWORD *)a3;
    *((double *)&v62 + 1) = v54;
    *(_OWORD *)v13 = v62;
    *(_OWORD *)(v13 + 16) = v61;
    *(_OWORD *)(v13 + 32) = v60;
    *(float64x2_t *)(v13 + 48) = v49;
    v29 = *(double *)v51.i64 * v18.f64[0];
    *(float64_t *)(v13 + 64) = v14.f64[0];
    *(double *)(v13 + 72) = 1.0 / *(double *)v51.i64;
    *(double *)(v13 + 80) = -v54 / (*(double *)v51.i64 * v18.f64[0]);
    v30 = v18.f64[0] * v50.f64[0];
    v31 = v54 * *(double *)&v25;
    goto LABEL_72;
  }
LABEL_73:
  v66 = a4;
  v67 = (a4[1] - *a4) >> 5;
  *(_QWORD *)v508 = 0;
  sub_20F172580(v11 + 72, v67, (const double *)v508);
  v68 = (unsigned __int8 **)(v11 + 144);
  v508[0] = 0;
  sub_20F1727A8(v11 + 144, v67, v508);
  v76 = v10 + ((unint64_t)a5 << 8);
  v77 = *(_QWORD *)(v76 + 152);
  v467 = (unsigned __int8 **)(v76 + 152);
  v78 = v77 - *(_QWORD *)(v11 + 144);
  if (v77 != *(_QWORD *)(v11 + 144))
  {
    v79 = 0;
    do
    {
      if (*(_DWORD *)(a4[13] + 4 * v79) == -1)
        (*v68)[v79] = 1;
      ++v79;
    }
    while (v78 != v79);
  }
  v464 = v67;
  v465 = (_QWORD *)(v11 + 72);
  v460 = a5;
  v466 = v10;
  v485 = a1;
  if (a1[10] > 1uLL)
  {
    v81 = (int *)a4[6];
    v80 = (int *)a4[7];
    if (v81 != v80)
    {
      v82 = a4 + 13;
      v83 = v485[2] + (v482 << 8);
      v84 = v495;
      v85 = (_QWORD *)(v83 + 48);
      v86 = (_QWORD *)(v83 + 144);
      v473 = (_DWORD *)(v83 + 216);
      v476 = (_QWORD *)(v83 + 72);
      v470 = (_DWORD *)(v83 + 220);
      do
      {
        *(_BYTE *)(*v86 + *v81) = 1;
        v87 = *v81;
        if (*(_DWORD *)(*v82 + 4 * v87) != -1)
        {
          v88 = v81[1];
          v89 = *(_QWORD **)(*v85 + 8 * v88);
          if (v89)
          {
            sub_20F18A6B4(*(_DWORD **)(*v85 + 8 * v88), v85, v81, v82);
            v90 = (double *)(*a4 + 32 * *v81);
            v98 = sub_20F18ABD8(v84, v90, (uint64_t)v508, v91, v92, v93, v94, v95, v96, v97);
            if ((v98 & sub_20F18ABD8(v84, v90 + 2, (uint64_t)&v508[16], v99, v100, v101, v102, v103, v104, v105) & 1) != 0)
            {
              sub_20F18A97C(v89, a2, v90, v508, *(double *)(a4[20] + 8 * *v81));
              *(_QWORD *)(*v476 + 8 * *v81) = v89;
              v66 = a4;
              ++*v473;
            }
            else
            {
              ++*v470;
              v66 = a4;
            }
          }
          else
          {
            v66 = a4;
            v106 = v485[2] + (v482 << 8);
            v107 = *(_QWORD *)(v106 + 168);
            if (v107 != *(_QWORD *)(v106 + 176) && *(_DWORD *)(v107 + 4 * v88) != -1)
              *(_BYTE *)(*v86 + v87) = 0;
          }
        }
        v81 += 2;
      }
      while (v81 != v80);
    }
  }
  v108 = (int8x16_t *)*v68;
  v109 = *v467;
  if (*v68 == *v467)
  {
    v111 = v485;
    v485[16] = v485[15];
    __src = (void **)(v485 + 15);
    v485[19] = v485[18];
    v115 = *v66;
    v114 = v66[1];
    if (v114 != *v66)
      goto LABEL_360;
LABEL_94:
    v116 = 0;
    goto LABEL_95;
  }
  v110 = v109 - (unsigned __int8 *)v108;
  v111 = v485;
  if ((unint64_t)(v109 - (unsigned __int8 *)v108) < 8)
  {
    v112 = 0;
    v113 = *v68;
    goto LABEL_278;
  }
  if (v110 >= 0x20)
  {
    v130 = 0uLL;
    v131 = (int8x16_t)vdupq_n_s64(1uLL);
    v132 = 0uLL;
    v129 = v110 & 0xFFFFFFFFFFFFFFE0;
    v133 = 0uLL;
    v134 = v108 + 1;
    v135 = 0uLL;
    v136 = v110 & 0xFFFFFFFFFFFFFFE0;
    v137 = 0uLL;
    v138 = 0uLL;
    v139 = 0uLL;
    v140 = 0uLL;
    v141 = 0uLL;
    v142 = 0uLL;
    v143 = 0uLL;
    v144 = 0uLL;
    v145 = 0uLL;
    v146 = 0uLL;
    v147 = 0uLL;
    v148 = 0uLL;
    do
    {
      v149 = (uint8x16_t)vceqzq_s8(v134[-1]);
      v150 = vmovl_u8(*(uint8x8_t *)v149.i8);
      v151 = vmovl_high_u8(v149);
      v152 = vmovl_high_u16(v151);
      v153.i64[0] = v152.u32[2];
      v153.i64[1] = v152.u32[3];
      v140 = vaddq_s64(v140, (int64x2_t)vandq_s8(v153, v131));
      v154 = vmovl_high_u16(v150);
      v155 = vmovl_u16(*(uint16x4_t *)v151.i8);
      v153.i64[0] = v152.u32[0];
      v153.i64[1] = v152.u32[1];
      v139 = vaddq_s64(v139, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v155.u32[2];
      v153.i64[1] = v155.u32[3];
      v138 = vaddq_s64(v138, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v154.u32[2];
      v153.i64[1] = v154.u32[3];
      v135 = vaddq_s64(v135, (int64x2_t)vandq_s8(v153, v131));
      v156 = *v134;
      v134 += 2;
      v157 = vmovl_u16(*(uint16x4_t *)v150.i8);
      v153.i64[0] = v155.u32[0];
      v153.i64[1] = v155.u32[1];
      v137 = vaddq_s64(v137, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v157.u32[0];
      v153.i64[1] = v157.u32[1];
      v158 = (int64x2_t)vandq_s8(v153, v131);
      v153.i64[0] = v157.u32[2];
      v153.i64[1] = v157.u32[3];
      v159 = (int64x2_t)vandq_s8(v153, v131);
      v153.i64[0] = v154.u32[0];
      v153.i64[1] = v154.u32[1];
      v160 = (uint8x16_t)vceqzq_s8(v156);
      v133 = vaddq_s64(v133, (int64x2_t)vandq_s8(v153, v131));
      v161 = vmovl_u8(*(uint8x8_t *)v160.i8);
      v162 = vmovl_high_u8(v160);
      v132 = vaddq_s64(v132, v159);
      v163 = vmovl_high_u16(v162);
      v130 = vaddq_s64(v130, v158);
      v153.i64[0] = v163.u32[2];
      v153.i64[1] = v163.u32[3];
      v148 = vaddq_s64(v148, (int64x2_t)vandq_s8(v153, v131));
      v164 = vmovl_high_u16(v161);
      v165 = vmovl_u16(*(uint16x4_t *)v162.i8);
      v153.i64[0] = v163.u32[0];
      v153.i64[1] = v163.u32[1];
      v147 = vaddq_s64(v147, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v165.u32[2];
      v153.i64[1] = v165.u32[3];
      v146 = vaddq_s64(v146, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v164.u32[2];
      v153.i64[1] = v164.u32[3];
      v144 = vaddq_s64(v144, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v165.u32[0];
      v153.i64[1] = v165.u32[1];
      v145 = vaddq_s64(v145, (int64x2_t)vandq_s8(v153, v131));
      v166 = vmovl_u16(*(uint16x4_t *)v161.i8);
      v153.i64[0] = v164.u32[0];
      v153.i64[1] = v164.u32[1];
      v143 = vaddq_s64(v143, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v166.u32[2];
      v153.i64[1] = v166.u32[3];
      v142 = vaddq_s64(v142, (int64x2_t)vandq_s8(v153, v131));
      v153.i64[0] = v166.u32[0];
      v153.i64[1] = v166.u32[1];
      v141 = vaddq_s64(v141, (int64x2_t)vandq_s8(v153, v131));
      v136 -= 32;
    }
    while (v136);
    v72 = (int32x4_t)vaddq_s64(v144, v135);
    v73 = (int32x4_t)vaddq_s64(v142, v132);
    v75 = (float64x2_t)vaddq_s64(v146, v138);
    v74 = (float64x2_t)vaddq_s64(v147, v139);
    v167 = vaddq_s64(vaddq_s64(vaddq_s64(v141, v130), vaddq_s64(v145, v137)), vaddq_s64(vaddq_s64(v143, v133), (int64x2_t)v74));
    v71 = (int8x16_t)vaddq_s64((int64x2_t)v72, vaddq_s64(v148, v140));
    v70 = vaddq_s64(vaddq_s64((int64x2_t)v73, (int64x2_t)v75), (int64x2_t)v71);
    v69 = (int8x16_t)vaddq_s64(v167, v70);
    v69.i64[0] = vaddvq_s64((int64x2_t)v69);
    v112 = v69.i64[0];
    if (v110 == v129)
      goto LABEL_281;
    if ((v110 & 0x18) == 0)
    {
      v113 = &v108->u8[v129];
      goto LABEL_278;
    }
  }
  else
  {
    v112 = 0;
    v129 = 0;
  }
  v113 = &v108->u8[v110 & 0xFFFFFFFFFFFFFFF8];
  v168 = 0uLL;
  v169 = (int64x2_t)v112;
  v170 = (int8x8_t *)&v108->i8[v129];
  v171 = v129 - (v110 & 0xFFFFFFFFFFFFFFF8);
  v71 = (int8x16_t)vdupq_n_s64(1uLL);
  v72 = 0uLL;
  v73 = 0uLL;
  do
  {
    v172 = *v170++;
    v173 = vmovl_u8((uint8x8_t)vceqz_s8(v172));
    v174 = vmovl_u16(*(uint16x4_t *)v173.i8);
    v175.i64[0] = v174.u32[0];
    v175.i64[1] = v174.u32[1];
    v176 = (int64x2_t)vandq_s8(v175, v71);
    v175.i64[0] = v174.u32[2];
    v175.i64[1] = v174.u32[3];
    v75 = (float64x2_t)vandq_s8(v175, v71);
    v177 = vmovl_high_u16(v173);
    v175.i64[0] = v177.u32[0];
    v175.i64[1] = v177.u32[1];
    v178 = (int64x2_t)vandq_s8(v175, v71);
    v175.i64[0] = v177.u32[2];
    v175.i64[1] = v177.u32[3];
    v74 = (float64x2_t)vandq_s8(v175, v71);
    v73 = (int32x4_t)vaddq_s64((int64x2_t)v73, (int64x2_t)v74);
    v72 = (int32x4_t)vaddq_s64((int64x2_t)v72, v178);
    v168 = vaddq_s64(v168, (int64x2_t)v75);
    v169 = vaddq_s64(v169, v176);
    v171 += 8;
  }
  while (v171);
  v70 = vaddq_s64(v169, (int64x2_t)v72);
  v69 = (int8x16_t)vaddq_s64(v70, vaddq_s64(v168, (int64x2_t)v73));
  v69.i64[0] = vaddvq_s64((int64x2_t)v69);
  v112 = v69.i64[0];
  if (v110 != (v110 & 0xFFFFFFFFFFFFFFF8))
  {
    do
    {
LABEL_278:
      if (!*v113++)
        ++v112;
    }
    while (v113 != v109);
  }
LABEL_281:
  v286 = (void *)v485[15];
  v485[16] = v286;
  __src = (void **)(v485 + 15);
  v485[19] = v485[18];
  if (v112)
  {
    if (v112 > (uint64_t)(v485[17] - (_QWORD)v286) >> 3)
    {
      if (v112 >> 61)
LABEL_483:
        sub_20E867F44();
      v287 = (char *)operator new(8 * v112);
      v111 = v485;
      v485[15] = v287;
      v485[16] = v287;
      v485[17] = &v287[8 * v112];
      if (v286)
        operator delete(v286);
    }
    v288 = *((unsigned int *)v111 + 3);
    if (v111[10] >= v288)
    {
      v290 = v111[9];
      v291 = v290 >= v288;
      v292 = v290 - v288;
      v289 = v111[5];
      if (!v291)
        v292 += 0x6DB6DB6DB6DB6DB7 * ((v111[6] - v289) >> 3);
      v468 = *(unsigned int *)(v289 + 56 * v292);
    }
    else
    {
      v468 = 0;
      v289 = v111[5];
    }
    v293 = v111[2] + (v482 << 8);
    v296 = *(_QWORD *)(v293 + 8);
    v295 = (_QWORD *)(v293 + 8);
    v294 = v296;
    v297 = v295 + 1;
    v477 = v295;
    if (v295[1] != v296)
    {
      v298 = 0;
      v299 = *(_DWORD *)(v289 + 56 * v111[8]);
      v474 = v295 + 1;
      v471 = v299;
      do
      {
        v301 = v294 + 144 * v298;
        v302 = (_QWORD *)(v301 + 40);
        v303 = *(_QWORD *)(v301 + 80);
        if (v303)
        {
          v304 = *(_QWORD *)(v294 + 144 * v298 + 72);
          if (v304)
            v305 = v304 - 1;
          else
            v305 = -1 - 0x30C30C30C30C30C3 * ((uint64_t)(*(_QWORD *)(v294 + 144 * v298 + 48) - *v302) >> 4);
          v306 = *(_DWORD *)(*v302 + 336 * v305 + 320);
          if (v306 < v299)
            goto LABEL_308;
        }
        else
        {
          v306 = -1;
          if (v299 > -1)
            goto LABEL_308;
        }
        if (!*((_BYTE *)v111 + 9) || (v303 == 1 ? (v307 = v468 <= v306) : (v307 = 1), v307))
        {
          if (v303)
          {
            v322 = *(_QWORD *)(v294 + 144 * v298 + 72);
            if (v322)
            {
              v323 = *(int *)(*v302 + 336 * v322 - 16);
              v325 = (char *)v111[19];
              v324 = v111[20];
              if ((unint64_t)v325 >= v324)
              {
LABEL_342:
                v335 = (char *)v111[18];
                v336 = (v325 - v335) >> 4;
                v337 = v336 + 1;
                if ((unint64_t)(v336 + 1) >> 60)
                  sub_20E867F44();
                v338 = v324 - (_QWORD)v335;
                if (v338 >> 3 > v337)
                  v337 = v338 >> 3;
                if ((unint64_t)v338 >= 0x7FFFFFFFFFFFFFF0)
                  v339 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v339 = v337;
                if (v339)
                {
                  if (v339 >> 60)
LABEL_484:
                    sub_20E877A38();
                  v340 = (char *)operator new(16 * v339);
                  v111 = v485;
                  v295 = v477;
                  v341 = (uint64_t)&v340[16 * v336];
                  *(_QWORD *)v341 = v323;
                  *(_DWORD *)(v341 + 8) = v298;
                  v342 = v341;
                  if (v325 == v335)
                  {
LABEL_355:
                    v300 = (_DWORD *)(v341 + 16);
                    v111[18] = v342;
                    v111[19] = v341 + 16;
                    v111[20] = &v340[16 * v339];
                    if (v325)
                      operator delete(v325);
                    v297 = v474;
                    v299 = v471;
                    goto LABEL_294;
                  }
                }
                else
                {
                  v340 = 0;
                  v341 = 16 * v336;
                  *(_QWORD *)v341 = v323;
                  *(_DWORD *)(v341 + 8) = v298;
                  v342 = 16 * v336;
                  if (v325 == v335)
                    goto LABEL_355;
                }
                do
                {
                  v343 = *((_QWORD *)v325 - 2);
                  v325 -= 16;
                  v344 = *((_DWORD *)v325 + 2);
                  *(_QWORD *)(v342 - 16) = v343;
                  v342 -= 16;
                  *(_DWORD *)(v342 + 8) = v344;
                }
                while (v325 != v335);
                v325 = (char *)v111[18];
                goto LABEL_355;
              }
            }
            else
            {
              v323 = *(int *)(*v302 + 16 * ((uint64_t)(*(_QWORD *)(v294 + 144 * v298 + 48) - *v302) >> 4) - 16);
              v325 = (char *)v111[19];
              v324 = v111[20];
              if ((unint64_t)v325 >= v324)
                goto LABEL_342;
            }
          }
          else
          {
            v323 = -1;
            v325 = (char *)v111[19];
            v324 = v111[20];
            if ((unint64_t)v325 >= v324)
              goto LABEL_342;
          }
          *(_QWORD *)v325 = v323;
          *((_DWORD *)v325 + 2) = v298;
          v300 = v325 + 16;
LABEL_294:
          v111[19] = v300;
          goto LABEL_295;
        }
LABEL_308:
        v309 = (unint64_t *)v111[16];
        v308 = v111[17];
        if ((unint64_t)v309 < v308)
        {
          *v309 = v298;
          v310 = (uint64_t)(v309 + 1);
          v111[16] = v309 + 1;
          v311 = *v295;
          v312 = (_DWORD *)(*v295 + 144 * v298);
          if (*v312 == -1)
            goto LABEL_335;
          goto LABEL_336;
        }
        v313 = (unint64_t *)*__src;
        v314 = (char *)v309 - (_BYTE *)*__src;
        v315 = v314 >> 3;
        v316 = (v314 >> 3) + 1;
        if (v316 >> 61)
          goto LABEL_483;
        v317 = v308 - (_QWORD)v313;
        if (v317 >> 2 > v316)
          v316 = v317 >> 2;
        if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF8)
          v318 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v318 = v316;
        if (!v318)
        {
          v319 = 0;
          v295 = v477;
          v320 = (unint64_t *)(8 * v315);
          *(_QWORD *)(8 * v315) = v298;
          v310 = 8 * v315 + 8;
          v321 = (char *)v309 - (char *)v313;
          if (v309 == v313)
            goto LABEL_332;
LABEL_326:
          v326 = v321 - 8;
          if (v326 < 0x58)
            goto LABEL_498;
          if ((unint64_t)((char *)v309 - v319 - v314) < 0x20)
            goto LABEL_498;
          v327 = (v326 >> 3) + 1;
          v328 = 8 * (v327 & 0x3FFFFFFFFFFFFFFCLL);
          v329 = &v309[v328 / 0xFFFFFFFFFFFFFFF8];
          v320 = (unint64_t *)((char *)v320 - v328);
          v330 = (int8x16_t *)&v319[8 * v315 - 16];
          v331 = (int64x2_t *)(v309 - 2);
          v332 = v327 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v70 = v331[-1];
            v69 = *(int8x16_t *)v331;
            v330[-1] = (int8x16_t)v70;
            *v330 = v69;
            v330 -= 2;
            v331 -= 2;
            v332 -= 4;
          }
          while (v332);
          v309 = v329;
          if (v327 != (v327 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_498:
            do
            {
              v333 = *--v309;
              *--v320 = v333;
            }
            while (v309 != v313);
          }
          goto LABEL_332;
        }
        if (v318 >> 61)
          goto LABEL_484;
        v319 = operator new(8 * v318);
        v295 = v477;
        v320 = (unint64_t *)&v319[8 * v315];
        *v320 = v298;
        v310 = (uint64_t)(v320 + 1);
        v321 = (char *)v309 - (char *)v313;
        if (v309 != v313)
          goto LABEL_326;
LABEL_332:
        v111 = v485;
        v485[15] = v320;
        v485[16] = v310;
        v485[17] = &v319[8 * v318];
        if (v313)
          operator delete(v313);
        v297 = v474;
        v299 = v471;
        v485[16] = v310;
        v311 = *v295;
        v312 = (_DWORD *)(*v295 + 144 * v298);
        if (*v312 == -1)
        {
LABEL_335:
          if (!*(_QWORD *)(v311 + 144 * v298 + 80))
            goto LABEL_337;
        }
LABEL_336:
        v69.i64[0] = -1;
        v69.i64[1] = -1;
        *(_QWORD *)v312 = -1;
        v334 = (_QWORD *)(v311 + 144 * v298);
        v334[9] = 0;
        v334[10] = 0;
        v334[8] = 0;
        v334[15] = 0;
        v334[16] = 0;
        v334[14] = 0;
        v310 = v111[16];
LABEL_337:
        if (v112 <= (v310 - (uint64_t)*__src) >> 3)
          break;
LABEL_295:
        ++v298;
        v294 = *v295;
      }
      while (v298 < 0x8E38E38E38E38E39 * ((uint64_t)(*v297 - *v295) >> 4));
    }
    v345 = (uint64_t)(v111[16] - v111[15]) >> 3;
    v346 = v112 - v345;
    if (v112 != v345)
    {
      v366 = (int8x16_t *)v111[18];
      v365 = (int8x16_t *)v111[19];
      v367 = &v366[v346];
      if (v367 == v365)
        goto LABEL_455;
      while (1)
      {
        v368 = v365 - v366;
        if (v368 < 2)
          goto LABEL_455;
        if (v368 == 3)
        {
          v415 = v366 + 1;
          v416 = v366[1].i64[0];
          v418 = v365[-1].i64[0];
          v413 = v365 - 1;
          v417 = v418;
          if (v416 >= v366->i64[0])
          {
            if (v417 < v416)
            {
              v69 = *v415;
              *(int8x16_t *)v508 = *v415;
              v430 = v413->i64[0];
              v366[1].i32[2] = v413->i32[2];
              v415->i64[0] = v430;
              v431 = *(_QWORD *)v508;
              v413->i32[2] = *(_DWORD *)&v508[8];
              v413->i64[0] = v431;
              if (v366[1].i64[0] < v366->i64[0])
              {
                v69 = *v366;
                *(int8x16_t *)v508 = *v366;
                v366->i64[0] = v415->i64[0];
                v366->i32[2] = v366[1].i32[2];
                v415->i64[0] = *(_QWORD *)v508;
                v366[1].i32[2] = *(_DWORD *)&v508[8];
              }
            }
            goto LABEL_455;
          }
          if (v417 >= v416)
          {
            v69 = *v366;
            *(int8x16_t *)v508 = *v366;
            v366->i64[0] = v415->i64[0];
            v366->i32[2] = v366[1].i32[2];
            v415->i64[0] = *(_QWORD *)v508;
            v366[1].i32[2] = *(_DWORD *)&v508[8];
            if (v413->i64[0] >= v366[1].i64[0])
              goto LABEL_455;
            v69 = *v415;
            *(int8x16_t *)v508 = *v415;
            v432 = v413->i64[0];
            v415->i32[2] = v413->i32[2];
            v415->i64[0] = v432;
          }
          else
          {
LABEL_437:
            v69 = *v366;
            *(int8x16_t *)v508 = *v366;
            v419 = v413->i64[0];
            v366->i32[2] = v413->i32[2];
            v366->i64[0] = v419;
          }
          v420 = *(_QWORD *)v508;
          v413->i32[2] = *(_DWORD *)&v508[8];
          v413->i64[0] = v420;
          goto LABEL_455;
        }
        if (v368 == 2)
        {
          v414 = v365[-1].i64[0];
          v413 = v365 - 1;
          if (v414 >= v366->i64[0])
            goto LABEL_455;
          goto LABEL_437;
        }
        if ((char *)v365 - (char *)v366 <= 127)
        {
          while (v366 != &v365[-1])
          {
            v421 = v366++;
            if (v421 != v365 && v366 != v365)
            {
              v422 = v421->i64[0];
              v423 = (uint64_t *)v366;
              v424 = v421;
              v425 = v366;
              do
              {
                v427 = v425->i64[0];
                ++v425;
                v426 = v427;
                if (v427 < v422)
                {
                  v422 = v426;
                  v424 = (int8x16_t *)v423;
                }
                v423 = (uint64_t *)v425;
              }
              while (v425 != v365);
              if (v424 != v421)
              {
                v69 = *v421;
                *(int8x16_t *)v508 = *v421;
                v428 = v424->i64[0];
                v421->i32[2] = v424->i32[2];
                v421->i64[0] = v428;
                v429 = *(_QWORD *)v508;
                v424->i32[2] = *(_DWORD *)&v508[8];
                v424->i64[0] = v429;
              }
            }
          }
          goto LABEL_455;
        }
        v369 = &v366[v368 >> 1];
        v370 = v365 - 1;
        v371 = v365[-1].i64[0];
        v372 = v369->i64[0];
        if (v369->i64[0] >= v366->i64[0])
        {
          if (v371 >= v372)
          {
            v375 = 0;
            v376 = v366->i64[0];
            v377 = v369->i64[0];
            if (v366->i64[0] < v369->i64[0])
              goto LABEL_375;
            goto LABEL_393;
          }
          v69 = *v369;
          *(int8x16_t *)v508 = *v369;
          v387 = v370->i64[0];
          v369->i32[2] = v365[-1].i32[2];
          v369->i64[0] = v387;
          v388 = *(_QWORD *)v508;
          v365[-1].i32[2] = *(_DWORD *)&v508[8];
          v370->i64[0] = v388;
          if (v369->i64[0] < v366->i64[0])
          {
            v69 = *v366;
            *(int8x16_t *)v508 = *v366;
            v389 = v369->i64[0];
            v366->i32[2] = v369->i32[2];
            v366->i64[0] = v389;
            v390 = *(_QWORD *)v508;
            v369->i32[2] = *(_DWORD *)&v508[8];
            v369->i64[0] = v390;
            goto LABEL_390;
          }
        }
        else
        {
          if (v371 < v372)
          {
            v69 = *v366;
            *(int8x16_t *)v508 = *v366;
            v373 = v370->i64[0];
            v366->i32[2] = v365[-1].i32[2];
            v366->i64[0] = v373;
            v374 = *(_QWORD *)v508;
            v365[-1].i32[2] = *(_DWORD *)&v508[8];
            v370->i64[0] = v374;
            v375 = 1;
            v376 = v366->i64[0];
            v377 = v369->i64[0];
            if (v366->i64[0] < v369->i64[0])
              goto LABEL_375;
            goto LABEL_393;
          }
          v69 = *v366;
          *(int8x16_t *)v508 = *v366;
          v391 = v369->i64[0];
          v366->i32[2] = v369->i32[2];
          v366->i64[0] = v391;
          v392 = *(_QWORD *)v508;
          v369->i32[2] = *(_DWORD *)&v508[8];
          v369->i64[0] = v392;
          if (v370->i64[0] < v369->i64[0])
          {
            v69 = *v369;
            *(int8x16_t *)v508 = *v369;
            v393 = v370->i64[0];
            v369->i32[2] = v365[-1].i32[2];
            v369->i64[0] = v393;
            v394 = *(_QWORD *)v508;
            v365[-1].i32[2] = *(_DWORD *)&v508[8];
            v370->i64[0] = v394;
LABEL_390:
            v375 = 2;
            v376 = v366->i64[0];
            v377 = v369->i64[0];
            if (v366->i64[0] < v369->i64[0])
              goto LABEL_375;
            goto LABEL_393;
          }
        }
        v375 = 1;
        v376 = v366->i64[0];
        v377 = v369->i64[0];
        if (v366->i64[0] < v369->i64[0])
        {
LABEL_375:
          v378 = (unint64_t)&v365[-1];
          v379 = v366 + 1;
          if (&v366[1] >= &v365[-1])
            goto LABEL_397;
          goto LABEL_376;
        }
LABEL_393:
        v378 = (unint64_t)&v365[-1];
        while (1)
        {
          v378 -= 16;
          if ((int8x16_t *)v378 == v366)
            break;
          if (*(_QWORD *)v378 < v377)
          {
            v69 = *v366;
            *(int8x16_t *)v508 = *v366;
            v395 = *(_QWORD *)v378;
            v366->i32[2] = *(_DWORD *)(v378 + 8);
            v366->i64[0] = v395;
            v396 = *(_QWORD *)v508;
            *(_DWORD *)(v378 + 8) = *(_DWORD *)&v508[8];
            *(_QWORD *)v378 = v396;
            ++v375;
            v379 = v366 + 1;
            if ((unint64_t)&v366[1] >= v378)
            {
LABEL_397:
              v382 = v379;
              goto LABEL_398;
            }
LABEL_376:
            v380 = v379;
            while (1)
            {
              v381 = v369->i64[0];
              v382 = v380 - 1;
              do
              {
                v383 = v382[1].i64[0];
                ++v382;
              }
              while (v383 < v381);
              v380 = v382 + 1;
              do
              {
                v384 = *(_QWORD *)(v378 - 16);
                v378 -= 16;
              }
              while (v384 >= v381);
              if ((unint64_t)v382 >= v378)
                break;
              v69 = *v382;
              *(int8x16_t *)v508 = *v382;
              v385 = *(_QWORD *)v378;
              v382->i32[2] = *(_DWORD *)(v378 + 8);
              v382->i64[0] = v385;
              v386 = *(_QWORD *)v508;
              *(_DWORD *)(v378 + 8) = *(_DWORD *)&v508[8];
              *(_QWORD *)v378 = v386;
              ++v375;
              if (v382 == v369)
                v369 = (int8x16_t *)v378;
            }
LABEL_398:
            if (v382 != v369 && v369->i64[0] < v382->i64[0])
            {
              v69 = *v382;
              *(int8x16_t *)v508 = *v382;
              v397 = v369->i64[0];
              v382->i32[2] = v369->i32[2];
              v382->i64[0] = v397;
              v398 = *(_QWORD *)v508;
              v369->i32[2] = *(_DWORD *)&v508[8];
              v369->i64[0] = v398;
              ++v375;
            }
            if (v382 != v367)
            {
              if (v375)
              {
LABEL_403:
                if (v382 <= v367)
                {
                  v399 = v382 + 1;
                }
                else
                {
                  v365 = v382;
                  v399 = v366;
                }
                goto LABEL_431;
              }
              if (v382 <= v367)
              {
                v403 = v382 + 1;
                while (v403 != v365)
                {
                  v404 = v403->i64[0];
                  v405 = v403[-1].i64[0];
                  ++v403;
                  if (v404 < v405)
                    goto LABEL_403;
                }
              }
              else
              {
                while (v379 != v382)
                {
                  v400 = v379->i64[0];
                  v401 = v379[-1].i64[0];
                  ++v379;
                  if (v400 < v401)
                    goto LABEL_403;
                }
              }
            }
            goto LABEL_455;
          }
        }
        v402 = v366 + 1;
        if (v376 >= v370->i64[0])
        {
          if (v402 == v370)
            goto LABEL_455;
          while (v376 >= v402->i64[0])
          {
            if (++v402 == v370)
              goto LABEL_455;
          }
          v69 = *v402;
          *(int8x16_t *)v508 = *v402;
          v406 = v370->i64[0];
          v402->i32[2] = v365[-1].i32[2];
          v402->i64[0] = v406;
          ++v402;
          v407 = *(_QWORD *)v508;
          v365[-1].i32[2] = *(_DWORD *)&v508[8];
          v370->i64[0] = v407;
        }
        if (v402 == v370)
          goto LABEL_455;
        while (1)
        {
          v410 = v366->i64[0];
          v399 = v402 - 1;
          do
          {
            v411 = v399[1].i64[0];
            ++v399;
          }
          while (v410 >= v411);
          v402 = v399 + 1;
          do
          {
            v412 = v370[-1].i64[0];
            --v370;
          }
          while (v410 < v412);
          if (v399 >= v370)
            break;
          v69 = *v399;
          *(int8x16_t *)v508 = *v399;
          v408 = v370->i64[0];
          v399->i32[2] = v370->i32[2];
          v399->i64[0] = v408;
          v409 = *(_QWORD *)v508;
          v370->i32[2] = *(_DWORD *)&v508[8];
          v370->i64[0] = v409;
        }
        if (v399 > v367)
        {
LABEL_455:
          v433 = 0;
          while (1)
          {
            v435 = *(int *)(v111[18] + 16 * v433 + 8);
            v437 = (char *)v111[16];
            v436 = v111[17];
            if ((unint64_t)v437 >= v436)
              break;
            *(_QWORD *)v437 = v435;
            v438 = (uint64_t)(v437 + 8);
LABEL_480:
            v485[16] = v438;
            v111 = v485;
            v457 = *(_DWORD *)(v485[18] + 16 * v433 + 8);
            v458 = *v295;
            v459 = (_QWORD *)(*v295 + 144 * v457);
            if (*(_DWORD *)v459 != -1 || *(_QWORD *)(v458 + 144 * v457 + 80))
            {
              v69.i64[0] = -1;
              v69.i64[1] = -1;
              *v459 = -1;
              v434 = (_QWORD *)(v458 + 144 * v457);
              v434[9] = 0;
              v434[10] = 0;
              v434[8] = 0;
              v434[15] = 0;
              v434[16] = 0;
              v434[14] = 0;
            }
            if (++v433 == v346)
              goto LABEL_359;
          }
          v439 = (char *)*__src;
          v440 = v437 - (_BYTE *)*__src;
          v441 = v440 >> 3;
          v442 = (v440 >> 3) + 1;
          if (v442 >> 61)
            goto LABEL_483;
          v443 = v346;
          v444 = v436 - (_QWORD)v439;
          if (v444 >> 2 > v442)
            v442 = v444 >> 2;
          if ((unint64_t)v444 >= 0x7FFFFFFFFFFFFFF8)
            v445 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v445 = v442;
          if (v445)
          {
            if (v445 >> 61)
              goto LABEL_484;
            v446 = operator new(8 * v445);
            v447 = &v446[8 * v441];
            *v447 = v435;
            v438 = (uint64_t)(v447 + 1);
            v448 = v437 - v439;
            if (v437 == v439)
              goto LABEL_477;
LABEL_471:
            v449 = v448 - 8;
            if (v449 < 0x58)
              goto LABEL_499;
            if ((unint64_t)(v437 - v446 - v440) < 0x20)
              goto LABEL_499;
            v450 = (v449 >> 3) + 1;
            v451 = 8 * (v450 & 0x3FFFFFFFFFFFFFFCLL);
            v452 = &v437[-v451];
            v447 = (_QWORD *)((char *)v447 - v451);
            v453 = (int8x16_t *)&v446[8 * v441 - 16];
            v454 = (int64x2_t *)(v437 - 16);
            v455 = v450 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = v454[-1];
              v69 = *(int8x16_t *)v454;
              v453[-1] = (int8x16_t)v70;
              *v453 = v69;
              v453 -= 2;
              v454 -= 2;
              v455 -= 4;
            }
            while (v455);
            v437 = v452;
            if (v450 != (v450 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_499:
              do
              {
                v456 = *((_QWORD *)v437 - 1);
                v437 -= 8;
                *--v447 = v456;
              }
              while (v437 != v439);
            }
          }
          else
          {
            v446 = 0;
            v447 = (_QWORD *)(8 * v441);
            *(_QWORD *)(8 * v441) = v435;
            v438 = 8 * v441 + 8;
            v448 = v437 - v439;
            if (v437 != v439)
              goto LABEL_471;
          }
LABEL_477:
          v485[15] = v447;
          v485[16] = v438;
          v485[17] = &v446[8 * v445];
          if (v439)
            operator delete(v439);
          v346 = v443;
          v295 = v477;
          goto LABEL_480;
        }
LABEL_431:
        v366 = v399;
        if (v365 == v367)
          goto LABEL_455;
      }
    }
  }
LABEL_359:
  v115 = *a4;
  v114 = a4[1];
  if (v114 == *a4)
    goto LABEL_94;
LABEL_360:
  v116 = 0;
  v347 = 0;
  v348 = v495;
  v349 = v111[2] + (v482 << 8);
  v478 = (_QWORD *)(v349 + 72);
  v350 = (_QWORD *)(v349 + 144);
  v475 = (_QWORD *)(v349 + 8);
  v469 = (_DWORD *)(v349 + 224);
  v472 = (_DWORD *)(v349 + 220);
  v351 = 16;
  do
  {
    if (!*(_BYTE *)(*v350 + v347))
    {
      v355 = (double *)(v115 + v351);
      v356 = (double *)(v115 + v351 - 16);
      v357 = sub_20F18ABD8(v348, v356, (uint64_t)v508, v69, *(double *)v70.i64, v71, v72, v73, v74, v75);
      if ((v357 & sub_20F18ABD8(v348, v355, (uint64_t)&v508[16], v358, v359, v360, v361, v362, v363, v364) & 1) != 0)
      {
        v352 = (_QWORD *)(*v475 + 144 * *((_QWORD *)*__src + v116));
        *v352 = -1;
        v352[9] = 0;
        v352[10] = 0;
        v352[8] = 0;
        v352[15] = 0;
        v352[16] = 0;
        v352[14] = 0;
        *(_DWORD *)v352 = *(_DWORD *)(a4[13] + 4 * v347);
        sub_20F18A97C(v352, a2, v356, v508, *(double *)(a4[20] + 8 * v347));
        *(_QWORD *)(*v478 + 8 * v347) = v352;
        v353 = a4;
        ++v116;
        ++*v469;
      }
      else
      {
        ++*v472;
        v353 = a4;
      }
      v354 = v353;
      v115 = *v353;
      v114 = v354[1];
    }
    ++v347;
    v351 += 32;
  }
  while (v347 < (v114 - v115) >> 5);
LABEL_95:
  v117 = v485[16];
  if (v116 >= (v117 - v485[15]) >> 3)
    goto LABEL_160;
  v118 = v116;
  v119 = v485[2];
  v120 = v119 + (v482 << 8);
  v123 = *(_QWORD *)(v120 + 8);
  v122 = (_QWORD *)(v120 + 8);
  v121 = v123;
  v124 = *(_QWORD *)(v117 - 8);
  v125 = 0x8E38E38E38E38E39 * ((v122[1] - v123) >> 4);
  if (v124 + 1 >= v125 || !*(_QWORD *)(v121 + 144 * (v124 + 1) + 80))
    goto LABEL_114;
  v126 = (uint64_t *)(v121 + 144 * v124 + 368);
  v127 = v124;
  while (v125 - 2 != v127)
  {
    v128 = *v126;
    v126 += 18;
    ++v127;
    if (!v128)
    {
      if (!v127)
        goto LABEL_114;
      goto LABEL_118;
    }
  }
  v127 = v125 - 1;
  if (v125 != 1)
    goto LABEL_118;
LABEL_114:
  v179 = (uint64_t *)(144 * v124 + v121 - 64);
  do
  {
    if (!v124)
      goto LABEL_120;
    --v124;
    v180 = *v179;
    v179 -= 18;
  }
  while (!v180);
  v127 = v124;
  if (v124)
  {
LABEL_118:
    if (v127 >= v125)
      goto LABEL_125;
  }
  else
  {
LABEL_120:
    if (!*(_QWORD *)(v121 + 80))
      goto LABEL_160;
    v127 = 0;
    if (!v125)
      goto LABEL_125;
  }
  if (*(_QWORD *)(v121 + 144 * v127 + 80))
  {
    if (v127 >= v125)
      goto LABEL_129;
    goto LABEL_128;
  }
LABEL_125:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VisualSlidingWindow.h", 761, (uint64_t)"last_valid_element < elements.size() && predicate(elements[last_valid_element]) > 0", 83, (uint64_t)"Make sure last_valid_element points to a valid element", 54, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_485;
  }
  if (v127 == -1)
    goto LABEL_160;
  v121 = *v122;
  if (v127 >= 0x8E38E38E38E38E39 * ((uint64_t)(v122[1] - *v122) >> 4))
    goto LABEL_129;
LABEL_128:
  if (*(_QWORD *)(v121 + 144 * v127 + 80))
    goto LABEL_130;
LABEL_129:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 652, (uint64_t)"last_track_used == static_cast<size_t>(-1) || (last_track_used < tracks.size() && !tracks[last_track_used].empty())", 115, (uint64_t)"Make sure last_track_used points to a valid track.", 50, (void (*)(void **))sub_21023DDB0))
  {
LABEL_485:
    abort();
  }
LABEL_130:
  v181 = (uint64_t)(v485[16] - v485[15]) >> 3;
  if (v181 > v116)
  {
    v182 = (_QWORD **)(v122 + 8);
    v183 = (_QWORD **)(v122 + 5);
    v184 = v119 + (v482 << 8);
    v480 = (_QWORD *)(v184 + 80);
    v185 = (_QWORD *)(v184 + 56);
    do
    {
      v186 = *((_QWORD *)*__src + v118);
      if (v186 >= v127)
        break;
      v187 = *v182;
      v188 = (_QWORD *)*v480;
      v189 = *v122;
      if (*v182 != (_QWORD *)*v480)
      {
        while (*v187 != v189 + 144 * v127)
        {
          if (++v187 == v188)
          {
            v187 = (_QWORD *)*v480;
            break;
          }
        }
      }
      if (v187 != v188)
      {
        *v187 = v189 + 144 * v186;
        v189 = *v122;
      }
      v190 = (_QWORD *)*v185;
      if (*v183 != (_QWORD *)*v185)
      {
        v191 = *v183;
        while (*v191 != v189 + 144 * v127)
        {
          if (++v191 == v190)
          {
            v191 = (_QWORD *)*v185;
            break;
          }
        }
        if (v191 != v190)
        {
          v192 = *v183;
          while (*v192 != v189 + 144 * v186)
          {
            if (++v192 == v190)
            {
              v192 = (_QWORD *)*v185;
              break;
            }
          }
          if (v192 != v190)
          {
            *v192 = 0;
            v189 = *v122;
          }
          *v191 = v189 + 144 * v186;
          v189 = *v122;
        }
      }
      v193 = (_QWORD *)(v189 + 144 * v186);
      *v193 = -1;
      v193[9] = 0;
      v193[10] = 0;
      v193[8] = 0;
      v193[15] = 0;
      v193[16] = 0;
      v193[14] = 0;
      v194 = *v122;
      *(_DWORD *)(v194 + 144 * v186) = -1;
      if (!*(_QWORD *)(v194 + 144 * v127 + 80))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 703, (uint64_t)"!tracks[last_track_used].empty()", 32, (uint64_t)"Attempting to backfill an empty track.", 38, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_485;
        }
        v194 = *v122;
      }
      sub_20F18C774((uint64_t *)(v194 + 144 * v186), (uint64_t *)(v194 + 144 * v127));
      v195 = 1 - v127;
      v196 = 144 * v127 - 64;
      do
      {
        v197 = v195++;
        if (v195 == 1)
          break;
        v198 = *(_QWORD *)(*v122 + v196);
        v196 -= 144;
      }
      while (!v198);
      ++v118;
      v127 = -(uint64_t)v197;
    }
    while (v118 != v181);
  }
LABEL_160:
  sub_20F1729F0(&v494);
  v199 = a4;
  if (**(int **)(v494 + 56) > 3)
    goto LABEL_267;
  v200 = *(unsigned __int8 *)(v494 + 72);
  v201 = sub_20E8C31DC(v494, "OSLogSurrogateAppender", 1, 0);
  v202 = v201;
  if (!v200 && v201 == 0)
    goto LABEL_267;
  v487[0] = &v494;
  v487[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v487[2] = std::chrono::system_clock::now().__d_.__rep_;
  v488 = 3;
  v489 = "unknown file";
  v490 = 967;
  v492 = 0;
  v493 = 0;
  v491 = "unknown function";
  v204 = "Secondary";
  if (!v460)
    v204 = "Primary";
  __srca = v204;
  v205 = *(_QWORD *)v487[0];
  v206 = (const char *)(*(_QWORD *)v487[0] + 16);
  v481 = v206;
  if (*(char *)(*(_QWORD *)v487[0] + 39) < 0)
  {
    v206 = *(const char **)(v205 + 16);
    v207 = *(_QWORD *)(v205 + 24);
    v209 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v209 & 1) != 0)
      goto LABEL_171;
  }
  else
  {
    v207 = *(unsigned __int8 *)(*(_QWORD *)v487[0] + 39);
    v208 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v208 & 1) != 0)
      goto LABEL_171;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v508);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v508);
    if (v508[24] && (v508[23] & 0x80000000) != 0)
      operator delete(*(void **)v508);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_171:
  if (byte_254A4A4F8[23] >= 0)
    v210 = byte_254A4A4F8;
  else
    v210 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v211 = byte_254A4A4F8[23];
  else
    v211 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v508 = os_log_create(v210, v206);
  v212 = &v508[8];
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v211 >= 0x17)
  {
    v213 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v213 = v211 | 7;
    v214 = v213 + 1;
    v212 = operator new(v213 + 1);
    *(_QWORD *)&v508[16] = v211;
    *(_QWORD *)&v508[24] = v214 | 0x8000000000000000;
    *(_QWORD *)&v508[8] = v212;
    goto LABEL_184;
  }
  v508[31] = v211;
  if (v211)
LABEL_184:
    memmove(v212, v210, v211);
  v212[v211] = 0;
  v508[32] = 1;
  v215 = &v508[40];
  if (v207 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v199 = a4;
  if (v207 >= 0x17)
  {
    v217 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v217 = v207 | 7;
    v218 = v217 + 1;
    v215 = operator new(v217 + 1);
    v509 = v207;
    v510 = v218 | 0x8000000000000000;
    *(_QWORD *)&v508[40] = v215;
  }
  else
  {
    HIBYTE(v510) = v207;
    if (!v207)
    {
      v508[40] = 0;
      v511 = 1;
      v216 = *(NSObject **)v508;
      if ((SHIBYTE(v510) & 0x80000000) == 0)
        goto LABEL_189;
      goto LABEL_195;
    }
  }
  memmove(v215, v206, v207);
  v215[v207] = 0;
  v511 = 1;
  v216 = *(NSObject **)v508;
  if ((SHIBYTE(v510) & 0x80000000) == 0)
  {
LABEL_189:
    if (!v508[32])
      goto LABEL_198;
    goto LABEL_196;
  }
LABEL_195:
  operator delete(*(void **)&v508[40]);
  if (!v508[32])
    goto LABEL_198;
LABEL_196:
  if ((v508[31] & 0x80000000) != 0)
    operator delete(*(void **)&v508[8]);
LABEL_198:
  if (*(_QWORD *)v508)
    os_release(*(void **)v508);
  if (v202 && *(_QWORD *)(v202 + 24))
  {
    v219 = _os_log_pack_size();
    v220 = (std::__shared_weak_count_vtbl *)operator new(v219, (std::align_val_t)8uLL);
    v221 = (std::__shared_weak_count *)operator new();
    v221->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    v221->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v221->__shared_weak_owners_ = 0;
    v221[1].__vftable = v220;
    v500 = v220;
    v501 = v220;
    v503 = 0;
    v504 = 0;
    v502 = v221;
    if (v460)
      v223 = 9;
    else
      v223 = 7;
    v507 = v223;
    memcpy(&__dst, __srca, v223);
    v506[v223 - 8] = 0;
    *(_QWORD *)&v508[8] = __dst;
    *(_QWORD *)&v508[16] = *(_QWORD *)v506;
    *(_QWORD *)&v508[23] = *(_QWORD *)&v506[7];
    *(_QWORD *)v508 = off_24C9F98D8;
    v508[31] = v507;
    *(_QWORD *)&v508[32] = 1701734764;
    HIBYTE(v509) = 4;
    v224 = (char *)operator new(0x58uLL);
    v225 = (std::__shared_weak_count *)v224;
    *((_QWORD *)v224 + 1) = 0;
    v226 = (unint64_t *)(v224 + 8);
    *((_QWORD *)v224 + 2) = 0;
    *((_QWORD *)v224 + 3) = off_24C9F98D8;
    *(_QWORD *)v224 = &off_24C9F9888;
    *((_OWORD *)v224 + 2) = *(_OWORD *)&v508[8];
    *((_QWORD *)v224 + 6) = *(_QWORD *)&v508[24];
    *(_OWORD *)(v224 + 56) = *(_OWORD *)&v508[32];
    *((_QWORD *)v224 + 9) = v509;
    v503 = v224 + 24;
    v504 = v224;
    v496 = v220;
    *(_QWORD *)&v497 = v220;
    *((_QWORD *)&v497 + 1) = v221;
    do
      v227 = __ldxr(p_shared_owners);
    while (__stxr(v227 + 1, p_shared_owners));
    *(_QWORD *)&v498 = v224 + 24;
    *((_QWORD *)&v498 + 1) = v224;
    do
      v228 = __ldxr(v226);
    while (__stxr(v228 + 1, v226));
    v499 = v224 + 24;
    do
      v229 = __ldaxr(v226);
    while (__stlxr(v229 - 1, v226));
    if (!v229)
    {
      (*(void (**)(char *))(*(_QWORD *)v224 + 16))(v224);
      std::__shared_weak_count::__release_weak(v225);
    }
    v230 = v502;
    if (v502)
    {
      v231 = (unint64_t *)&v502->__shared_owners_;
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
    v233 = v496;
    if (v499[31] >= 0)
      v234 = v499 + 8;
    else
      v234 = (char *)*((_QWORD *)v499 + 1);
    if (v499[55] >= 0)
      v235 = v499 + 32;
    else
      v235 = (char *)*((_QWORD *)v499 + 4);
    v236 = _os_log_pack_fill();
    v237 = *v462;
    v238 = *v461;
    v239 = *v463;
    *(_DWORD *)v236 = 136316162;
    *(_QWORD *)(v236 + 4) = v234;
    *(_WORD *)(v236 + 12) = 2080;
    *(_QWORD *)(v236 + 14) = v235;
    *(_WORD *)(v236 + 22) = 1024;
    *(_DWORD *)(v236 + 24) = v237;
    *(_WORD *)(v236 + 28) = 1024;
    *(_DWORD *)(v236 + 30) = v238;
    *(_WORD *)(v236 + 34) = 1024;
    *(_DWORD *)(v236 + 36) = v239;
    v240 = operator new();
    v241 = *(unsigned __int8 *)(v205 + 39);
    v242 = v481;
    if ((v241 & 0x80u) != 0)
    {
      v242 = *(const char **)(v205 + 16);
      v241 = *(_QWORD *)(v205 + 24);
    }
    *(_QWORD *)v240 = v233;
    *(_OWORD *)(v240 + 8) = v497;
    v497 = 0uLL;
    *(_OWORD *)(v240 + 24) = v498;
    v498 = 0uLL;
    *(_QWORD *)(v240 + 40) = v242;
    *(_QWORD *)(v240 + 48) = v241;
    *(_BYTE *)(v240 + 56) = 1;
    v500 = 0;
    *(_QWORD *)v508 = v240;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v202 + 24) + 40))(*(_QWORD *)(v202 + 24), v508);
    v243 = *(_QWORD *)v508;
    *(_QWORD *)v508 = 0;
    if (v243)
    {
      v244 = *(std::__shared_weak_count **)(v243 + 32);
      if (v244)
      {
        v245 = (unint64_t *)&v244->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      v247 = *(std::__shared_weak_count **)(v243 + 16);
      if (v247)
      {
        v248 = (unint64_t *)&v247->__shared_owners_;
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      MEMORY[0x212BC6398](v243, 0x10F0C40B62ED6C6);
      v250 = v500;
      v500 = 0;
      if (v250)
      {
        on_zero_shared_weak = (std::__shared_weak_count *)v250->__on_zero_shared_weak;
        if (on_zero_shared_weak)
        {
          v252 = (unint64_t *)&on_zero_shared_weak->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared_weak->__on_zero_shared)(on_zero_shared_weak);
            std::__shared_weak_count::__release_weak(on_zero_shared_weak);
          }
        }
        on_zero_shared = (std::__shared_weak_count *)v250->__on_zero_shared;
        if (on_zero_shared)
        {
          v255 = (unint64_t *)&on_zero_shared->__shared_owners_;
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))on_zero_shared->__on_zero_shared)(on_zero_shared);
            std::__shared_weak_count::__release_weak(on_zero_shared);
          }
        }
        MEMORY[0x212BC6398](v250, 0x10F0C40B62ED6C6);
      }
    }
    v257 = (std::__shared_weak_count *)*((_QWORD *)&v498 + 1);
    v199 = a4;
    if (*((_QWORD *)&v498 + 1))
    {
      v258 = (unint64_t *)(*((_QWORD *)&v498 + 1) + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
    v260 = (std::__shared_weak_count *)*((_QWORD *)&v497 + 1);
    if (*((_QWORD *)&v497 + 1))
    {
      v261 = (unint64_t *)(*((_QWORD *)&v497 + 1) + 8);
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
  }
  else
  {
    os_log_type_enabled(v216, OS_LOG_TYPE_INFO);
    v263 = *v462;
    v264 = *v461;
    v265 = *v463;
    *(_DWORD *)v508 = 136316162;
    *(_QWORD *)&v508[4] = __srca;
    *(_WORD *)&v508[12] = 2080;
    *(_QWORD *)&v508[14] = "line";
    *(_WORD *)&v508[22] = 1024;
    *(_DWORD *)&v508[24] = v263;
    *(_WORD *)&v508[28] = 1024;
    *(_DWORD *)&v508[30] = v264;
    *(_WORD *)&v508[34] = 1024;
    *(_DWORD *)&v508[36] = v265;
    v266 = (void *)_os_log_send_and_compose_impl();
    if (v266)
      free(v266);
  }
  if (v200)
  {
    sub_20E8C003C((uint64_t)v487, "[%s] %s: Continued %d and created %d tracks (with %d invalid).", __srca, "line", *v462, *v461, *v463);
    sub_20E863570((uint64_t)v487);
  }
  sub_20E863570((uint64_t)v487);
  v267 = v493;
  if (!v493)
    goto LABEL_267;
  v268 = (unint64_t *)&v493->__shared_owners_;
  do
    v269 = __ldaxr(v268);
  while (__stlxr(v269 - 1, v268));
  if (v269)
  {
LABEL_267:
    v270 = v485;
    v271 = v485[2];
    if (*((_BYTE *)v199 + 96))
      goto LABEL_268;
LABEL_273:
    v273 = v465;
    v272 = v466;
    goto LABEL_274;
  }
  ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
  std::__shared_weak_count::__release_weak(v267);
  v270 = v485;
  v271 = v485[2];
  if (!*((_BYTE *)v199 + 96))
    goto LABEL_273;
LABEL_268:
  *(_DWORD *)v508 = -1;
  sub_20F172AE4(v271 + (v482 << 8) + 168, v464, (const float *)v508);
  v273 = v465;
  v272 = v466;
  v274 = (int *)v199[9];
  v275 = (int *)v199[10];
  v271 = v270[2];
  if (v274 != v275)
  {
    v276 = *(_QWORD *)(v271 + (v482 << 8) + 168);
    do
    {
      v278 = *v274;
      v277 = v274[1];
      v274 += 2;
      *(_DWORD *)(v276 + 4 * v278) = v277;
    }
    while (v274 != v275);
  }
LABEL_274:
  v279 = (_QWORD *)(v271 + (v482 << 8));
  v280 = v279[6];
  v279[6] = *v273;
  *v273 = v280;
  v281 = v272 + (v482 << 8);
  v282 = v279[7];
  v279[7] = *(_QWORD *)(v281 + 80);
  *(_QWORD *)(v281 + 80) = v282;
  v283 = v279[8];
  v279[8] = *(_QWORD *)(v281 + 88);
  *(_QWORD *)(v281 + 88) = v283;
  v284 = v495;
  v495 = 0;
  if (v284)
    sub_20E8E931C((uint64_t)&v495, v284);
}

void sub_20F180614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v42;

  if (*(_BYTE *)(v40 - 152) && *(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a30);
  v42 = a40;
  a40 = 0;
  if (v42)
    sub_20E8E931C((uint64_t)&a40, v42);
  _Unwind_Resume(a1);
}

void sub_20F18077C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  unsigned int v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  BOOL v41;
  BOOL v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  BOOL v47;
  float64x2_t v48;
  float64x2_t v49;
  int8x16_t v50;
  unint64_t v51;
  unint64_t v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  BOOL v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (!*(_BYTE *)(a3 + 96)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 998, (uint64_t)"frame_sample.sec_to_pri_matches", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_74;
  }
  v8 = a1[9];
  v9 = a1[5];
  if (!v8)
    v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v9) >> 3);
  sub_20F1723F0((_QWORD *)(v9 + 56 * v8 - 56), a2);
  v10 = a1[2];
  if ((unint64_t)(a1[3] - v10) <= 0x100)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1005, (uint64_t)"track_info_.size() >= 2", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      v10 = a1[2];
      goto LABEL_8;
    }
LABEL_74:
    abort();
  }
LABEL_8:
  v11 = *(_QWORD *)(v10 + 256);
  v12 = operator new();
  sub_20E972DB4(v12, v11);
  memcpy((void *)(v12 + 1000), (const void *)(v11 + 1000), 0x1B8uLL);
  v67 = v12;
  v16 = *(_DWORD *)(v12 + 992);
  if (v16 != -1)
  {
    if (v16 <= 7)
      goto LABEL_10;
LABEL_18:
    v14.f64[0] = *(float64_t *)(a2 + 64);
    v17 = *(float64x2_t *)(a2 + 32);
    v31 = *(float64x2_t *)(a2 + 48);
    v33 = *(int8x16_t *)a2;
    v32 = *(float64x2_t *)(a2 + 16);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(_QWORD *)&v36 = vextq_s8(v33, v33, 8uLL).u64[0];
    v15.f64[0] = *(float64_t *)(v12 + 64);
    *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
    v37 = vabdq_f64(v31, *(float64x2_t *)(v12 + 48));
    v38 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
    v39 = vabdq_f64(v32, *(float64x2_t *)(v12 + 16));
    v40 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
    v41 = v40.f64[0] > 1.0e-10;
    if (v40.f64[1] > 1.0e-10)
      v41 = 1;
    if (v39.f64[0] > 1.0e-10)
      v41 = 1;
    if (v39.f64[1] > 1.0e-10)
      v41 = 1;
    if (v38.f64[0] > 1.0e-10)
      v41 = 1;
    if (v38.f64[1] > 1.0e-10)
      v41 = 1;
    if (v37.f64[0] > 1.0e-10)
      v41 = 1;
    v42 = v41 || v37.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
    if (v16 > 0xB)
    {
      if (v16 > 0xD)
      {
        if (!v42)
          goto LABEL_69;
        goto LABEL_67;
      }
    }
    else if (v16 > 9)
    {
      if (!v42)
        goto LABEL_69;
      goto LABEL_67;
    }
LABEL_50:
    if (!v42)
      goto LABEL_69;
    goto LABEL_67;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_77;
  }
  v16 = *(_DWORD *)(v12 + 992);
  if (v16 > 7)
    goto LABEL_18;
LABEL_10:
  if (v16 > 3)
  {
    v14.f64[0] = *(float64_t *)(a2 + 64);
    v17 = *(float64x2_t *)(a2 + 32);
    v31 = *(float64x2_t *)(a2 + 48);
    v33 = *(int8x16_t *)a2;
    v32 = *(float64x2_t *)(a2 + 16);
    v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v35 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(_QWORD *)&v36 = vextq_s8(v33, v33, 8uLL).u64[0];
    v15.f64[0] = *(float64_t *)(v12 + 64);
    *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v14, v15);
    v43 = vabdq_f64(v31, *(float64x2_t *)(v12 + 48));
    v44 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
    v45 = vabdq_f64(v32, *(float64x2_t *)(v12 + 16));
    v46 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
    v47 = v46.f64[0] > 1.0e-10;
    if (v46.f64[1] > 1.0e-10)
      v47 = 1;
    if (v45.f64[0] > 1.0e-10)
      v47 = 1;
    if (v45.f64[1] > 1.0e-10)
      v47 = 1;
    if (v44.f64[0] > 1.0e-10)
      v47 = 1;
    if (v44.f64[1] > 1.0e-10)
      v47 = 1;
    if (v43.f64[0] > 1.0e-10)
      v47 = 1;
    v42 = v47 || v43.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10;
    if (v16 > 5)
    {
      if (!v42)
        goto LABEL_69;
LABEL_67:
      *(_QWORD *)&v31.f64[1] = v34;
      *(float64_t *)&v62 = v17.f64[0];
      *((_QWORD *)&v62 + 1) = v24;
      *(float64_t *)&v63 = v32.f64[0];
      *((_QWORD *)&v63 + 1) = v35;
      *(_QWORD *)&v64 = v33.i64[0];
      *((double *)&v64 + 1) = v36;
      *(_OWORD *)v12 = v64;
      *(_OWORD *)(v12 + 16) = v63;
      *(_OWORD *)(v12 + 32) = v62;
      *(float64x2_t *)(v12 + 48) = v31;
      v28 = *(double *)v33.i64 * v17.f64[0];
      *(float64_t *)(v12 + 64) = v14.f64[0];
      *(double *)(v12 + 72) = 1.0 / *(double *)v33.i64;
      *(double *)(v12 + 80) = -v36 / (*(double *)v33.i64 * v17.f64[0]);
      v29 = v17.f64[0] * v32.f64[0];
      v30 = v36 * *(double *)&v24;
      goto LABEL_68;
    }
    goto LABEL_50;
  }
  if (v16 <= 1)
  {
    if (v16)
    {
      v13.f64[0] = *(float64_t *)(a2 + 64);
      v17 = *(float64x2_t *)(a2 + 32);
      v18 = *(float64x2_t *)(a2 + 48);
      v20 = *(int8x16_t *)a2;
      v19 = *(float64x2_t *)(a2 + 16);
      v21 = (int8x16_t)vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
      v22 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
      v23 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v22, (float64x2_t)vextq_s8(v21, v21, 8uLL)), (int32x4_t)vcgeq_f64(v22, vabdq_f64(v19, *(float64x2_t *)(v12 + 16)))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v22, vabdq_f64(v17, *(float64x2_t *)(v12 + 32))), (int32x4_t)vcgeq_f64(v22, vabdq_f64(v18, *(float64x2_t *)(v12 + 48))))));
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v23)) & 1) != 0
        || (v23.f64[0] = *(float64_t *)(v12 + 64), vabdq_f64(v13, v23).f64[0] > 1.0e-10))
      {
        COERCE_DOUBLE(v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).i64[0]);
        *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
        *(_QWORD *)&v25 = *(_QWORD *)(a2 + 32);
        *((_QWORD *)&v25 + 1) = v24;
        *(_QWORD *)&v26 = *(_QWORD *)(a2 + 16);
        *((_QWORD *)&v26 + 1) = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        *(_QWORD *)&v27 = *(_QWORD *)a2;
        *((double *)&v27 + 1) = *(double *)vextq_s8(v20, v20, 8uLL).i64;
        *(_OWORD *)v12 = v27;
        *(_OWORD *)(v12 + 16) = v26;
        *(_OWORD *)(v12 + 32) = v25;
        *(float64x2_t *)(v12 + 48) = v18;
        v28 = *(double *)v20.i64 * v17.f64[0];
        *(float64_t *)(v12 + 64) = v13.f64[0];
        *(double *)(v12 + 72) = 1.0 / *(double *)v20.i64;
        *(double *)(v12 + 80) = -*((double *)&v27 + 1) / (*(double *)v20.i64 * v17.f64[0]);
        v29 = v17.f64[0] * v19.f64[0];
        v30 = *((double *)&v27 + 1) * *(double *)&v24;
LABEL_68:
        *(double *)(v12 + 88) = -(v29 - v30) / v28;
        *(_QWORD *)(v12 + 96) = 0;
        *(double *)(v12 + 104) = 1.0 / v17.f64[0];
        *(double *)(v12 + 112) = -*(double *)&v24 / v17.f64[0];
        *(_QWORD *)(v12 + 120) = 0;
        *(_QWORD *)(v12 + 128) = 0;
        *(_OWORD *)(v12 + 136) = xmmword_2102E3C70;
        *(_QWORD *)(v12 + 152) = 0x7FF8000000000000;
        *(_BYTE *)(v12 + 160) = 0;
        goto LABEL_69;
      }
      goto LABEL_69;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1728, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_77:
    abort();
  }
  v13.f64[0] = *(float64_t *)(a2 + 64);
  v17 = *(float64x2_t *)(a2 + 32);
  v48 = *(float64x2_t *)(a2 + 48);
  v50 = *(int8x16_t *)a2;
  v49 = *(float64x2_t *)(a2 + 16);
  v51 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v24 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v52 = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  *(_QWORD *)&v53 = vextq_s8(v50, v50, 8uLL).u64[0];
  v15.f64[0] = *(float64_t *)(v12 + 64);
  *(_QWORD *)&v15.f64[0] = *(_OWORD *)&vabdq_f64(v13, v15);
  v54 = vabdq_f64(v48, *(float64x2_t *)(v12 + 48));
  v55 = vabdq_f64(v17, *(float64x2_t *)(v12 + 32));
  v56 = vabdq_f64(v49, *(float64x2_t *)(v12 + 16));
  v57 = vabdq_f64(*(float64x2_t *)a2, *(float64x2_t *)v12);
  v58 = v57.f64[0] > 1.0e-10;
  if (v57.f64[1] > 1.0e-10)
    v58 = 1;
  if (v56.f64[0] > 1.0e-10)
    v58 = 1;
  if (v56.f64[1] > 1.0e-10)
    v58 = 1;
  if (v55.f64[0] > 1.0e-10)
    v58 = 1;
  if (v55.f64[1] > 1.0e-10)
    v58 = 1;
  if (v54.f64[0] > 1.0e-10)
    v58 = 1;
  if (v58 || v54.f64[1] > 1.0e-10 || v15.f64[0] > 1.0e-10)
  {
    *(_QWORD *)&v48.f64[1] = v51;
    *(_QWORD *)&v59 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)&v59 + 1) = v24;
    *(_QWORD *)&v60 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)&v60 + 1) = v52;
    *(_QWORD *)&v61 = *(_QWORD *)a2;
    *((double *)&v61 + 1) = v53;
    *(_OWORD *)v12 = v61;
    *(_OWORD *)(v12 + 16) = v60;
    *(_OWORD *)(v12 + 32) = v59;
    *(float64x2_t *)(v12 + 48) = v48;
    v28 = *(double *)v50.i64 * v17.f64[0];
    *(float64_t *)(v12 + 64) = v13.f64[0];
    *(double *)(v12 + 72) = 1.0 / *(double *)v50.i64;
    *(double *)(v12 + 80) = -v53 / (*(double *)v50.i64 * v17.f64[0]);
    v29 = v17.f64[0] * v49.f64[0];
    v30 = v53 * *(double *)&v24;
    goto LABEL_68;
  }
LABEL_69:
  v66 = a4 | 0x100000000;
  if (a4 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F180E28((uint64_t)a1, (_QWORD *)a3, 0, v67, 1, &v66);
  v65 = v67;
  v67 = 0;
  if (v65)
    sub_20E8E931C((uint64_t)&v67, v65);
}

void sub_20F180DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (!v11)
    _Unwind_Resume(exception_object);
  sub_20E8E931C((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

void sub_20F180E28(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char **v41;
  char *v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  int *i;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  double *v63;
  int8x16_t v64;
  double v65;
  int8x16_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int v71;
  int8x16_t v72;
  double v73;
  int8x16_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float64x2_t v77;
  float64x2_t v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _OWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  char **v96;
  char **v97;
  char *v98;
  char *v99;
  char **v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  __int128 v124;
  __int128 v125;

  v7 = a3;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v8 + ((unint64_t)a3 << 8);
  v10 = *(uint64_t **)(v9 + 48);
  v11 = *(uint64_t **)(v9 + 56);
  if (v10 != v11)
  {
    while (1)
    {
      v15 = *v10;
      if (*v10)
        break;
LABEL_5:
      if (++v10 == v11)
      {
        v8 = *(_QWORD *)(a1 + 16);
        goto LABEL_18;
      }
    }
    v16 = *(_QWORD *)(v15 + 72);
    if (v16)
    {
      v17 = *(_QWORD *)(v15 + 40);
      v18 = v17 + 336 * v16;
      v20 = *(_QWORD *)(v18 - 8);
      v19 = (uint64_t *)(v18 - 8);
      v21 = v20 + 1;
      *v19 = v20 + 1;
      v22 = *(_QWORD *)(v15 + 72);
      if (v22)
      {
LABEL_10:
        v23 = (_OWORD *)(v17 + 336 * v22 + 32 * v21 - 336);
        *v23 = *(_OWORD *)(v15 + 8);
        v23[1] = *(_OWORD *)(v15 + 24);
        v24 = *(_QWORD *)(v15 + 72);
        v25 = *(_QWORD *)(v15 + 40);
        if (!v24)
          v24 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v15 + 48) - v25) >> 4);
        v28 = v25 + 336 * v24 + 32 * *v19;
        *(_OWORD *)(v28 - 208) = *(_OWORD *)(v15 + 8);
        *(_OWORD *)(v28 - 192) = *(_OWORD *)(v15 + 24);
        v29 = *(_QWORD *)(v15 + 72);
        if (v29)
        {
          v12 = *(_QWORD *)(v15 + 40);
          v13 = v29 - 1;
        }
        else
        {
          v30 = v15 + 40;
          v12 = *(_QWORD *)(v15 + 40);
          v13 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v30 + 8) - v12) >> 4) - 1;
        }
        v14 = *v19;
        *(_QWORD *)(v12 + 336 * v13 + 8 * v14 + 256) = 0x7FF8000000000000;
        *(_QWORD *)(v12 + 336 * v13 + 8 * v14 + 288) = 0x7FF8000000000000;
        goto LABEL_5;
      }
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 40);
      v26 = v17 + 16 * ((*(_QWORD *)(v15 + 48) - v17) >> 4);
      v27 = *(_QWORD *)(v26 - 8);
      v19 = (uint64_t *)(v26 - 8);
      v21 = v27 + 1;
      *v19 = v27 + 1;
      v22 = *(_QWORD *)(v15 + 72);
      if (v22)
        goto LABEL_10;
    }
    v22 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v15 + 48) - v17) >> 4);
    goto LABEL_10;
  }
LABEL_18:
  if ((a5 & 1) != 0)
  {
    v31 = (_QWORD *)(v8 + ((unint64_t)a3 << 8));
    v32 = v31 + 12;
    v33 = (char *)v31[12];
    v35 = (char *)v31[6];
    v34 = (_BYTE *)v31[7];
    v36 = v34 - v35;
    v37 = (v34 - v35) >> 3;
    v38 = v31[14];
    if (v37 > (v38 - (uint64_t)v33) >> 3)
    {
      if (v33)
      {
        v39 = v8;
        *(_QWORD *)(v8 + ((unint64_t)a3 << 8) + 104) = v33;
        operator delete(v33);
        v38 = 0;
        *v32 = 0;
        v32[1] = 0;
        v32[2] = 0;
        if ((v36 & 0x8000000000000000) != 0)
          goto LABEL_80;
      }
      else
      {
        v39 = v8;
        if ((v36 & 0x8000000000000000) != 0)
          goto LABEL_80;
      }
      v48 = v38 >> 2;
      if (v38 >> 2 <= v37)
        v48 = (v34 - v35) >> 3;
      v49 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8;
      v50 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v49)
        v50 = v48;
      if (v50 >> 61)
LABEL_80:
        sub_20E867F44();
      v51 = 8 * v50;
      v52 = (char *)operator new(8 * v50);
      v33 = v52;
      *v32 = v52;
      v53 = v39 + (v7 << 8);
      *(_QWORD *)(v53 + 104) = v52;
      v41 = (char **)(v53 + 104);
      v32[2] = &v52[v51];
      if (v34 != v35)
        memcpy(v52, v35, v34 - v35);
      goto LABEL_39;
    }
    v42 = (char *)v31[13];
    v41 = (char **)(v31 + 13);
    v40 = v42;
    v43 = v42 - v33;
    v44 = (v42 - v33) >> 3;
    if (v44 >= v37)
    {
      if (v34 == v35)
      {
LABEL_39:
        *v41 = &v33[v36];
        v8 = *(_QWORD *)(a1 + 16);
        goto LABEL_40;
      }
      v46 = v33;
      v47 = (char *)*(v32 - 6);
    }
    else
    {
      v45 = &v35[8 * v44];
      if (v40 != v33)
      {
        memmove(v33, (const void *)*(v32 - 6), v43);
        v33 = *v41;
      }
      v36 = v34 - v45;
      if (v34 == v45)
        goto LABEL_39;
      v46 = v33;
      v47 = v45;
    }
    memmove(v46, v47, v36);
    goto LABEL_39;
  }
LABEL_40:
  v119 = v8;
  v120 = v7;
  v54 = v8 + (v7 << 8);
  v55 = (_QWORD *)(v54 + 96);
  v56 = (uint64_t)(a2[1] - *a2) >> 5;
  *(_QWORD *)&v124 = 0;
  v121 = (_QWORD *)(v54 + 120);
  sub_20F172580(v54 + 120, v56, (const double *)&v124);
  v58 = (int *)a2[9];
  for (i = (int *)a2[10]; v58 != i; v58 += 2)
  {
    v61 = v58[1];
    v62 = *(_QWORD **)(*v55 + 8 * v61);
    if (v62)
    {
      sub_20F18A6B4(*(_DWORD **)(*v55 + 8 * v61), v55, v58, a2 + 16);
      v63 = (double *)(*a2 + 32 * *v58);
      v71 = sub_20F18ABD8(a4, v63, (uint64_t)&v124, v64, v65, v66, v67, v68, v69, v70);
      v79 = sub_20F18ABD8(a4, v63 + 2, (uint64_t)&v125, v72, v73, v74, v75, v76, v77, v78);
      if (v71 && v79 != 0)
      {
        v81 = v62[9];
        v82 = v62[5];
        if (v81)
          v83 = v81 - 1;
        else
          v83 = -1 - 0x30C30C30C30C30C3 * ((v62[6] - v82) >> 4);
        v84 = (uint64_t *)(v82 + 336 * v83 + 328);
        v85 = *(_QWORD *)(a2[20] + 8 * *v58);
        v86 = (_OWORD *)(v82 + 336 * v83 + 32 * *v84);
        *v86 = *(_OWORD *)v63;
        v86[1] = *((_OWORD *)v63 + 1);
        v87 = v62[9];
        v88 = v62[5];
        if (!v87)
          v87 = 0xCF3CF3CF3CF3CF3DLL * ((v62[6] - v88) >> 4);
        v89 = v88 + 336 * v87 + 32 * *v84;
        v90 = v125;
        *(_OWORD *)(v89 - 208) = v124;
        *(_OWORD *)(v89 - 192) = v90;
        v91 = v62[9];
        v92 = v62[5];
        if (v91)
          v59 = v91 - 1;
        else
          v59 = -1 - 0x30C30C30C30C30C3 * ((v62[6] - v92) >> 4);
        v60 = *v84;
        *(_QWORD *)(v92 + 336 * v59 + 8 * v60 + 256) = v85;
        *(_QWORD *)(v92 + 336 * v59 + 8 * v60 + 288) = 0x3FF0000000000000;
        *(_QWORD *)(*v121 + 8 * *v58) = v62;
      }
    }
  }
  v93 = *(_OWORD *)v55;
  *(_OWORD *)v55 = *(_OWORD *)v121;
  *(_OWORD *)v121 = v93;
  v94 = v119 + (v120 << 8);
  v95 = *(_QWORD *)(v94 + 112);
  *(_QWORD *)(v94 + 112) = *(_QWORD *)(v94 + 136);
  *(_QWORD *)(v94 + 136) = v95;
  v96 = (char **)(*(_QWORD *)(a1 + 16) + (v120 << 8) + 248);
  v97 = (char **)(*(_QWORD *)(a1 + 16) + (v120 << 8) + 240);
  v98 = *v97;
  if (*v97 >= *v96)
  {
    v100 = (char **)(*(_QWORD *)(a1 + 16) + (v120 << 8) + 232);
    v101 = *v100;
    v102 = (v98 - *v100) >> 3;
    v103 = v102 + 1;
    if ((unint64_t)(v102 + 1) >> 61)
      sub_20E92CED8();
    v104 = *v96 - v101;
    if (v104 >> 2 > v103)
      v103 = v104 >> 2;
    if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v103;
    if (v105)
    {
      if (v105 >> 61)
        sub_20E877A38();
      v106 = (char *)operator new(8 * v105);
    }
    else
    {
      v106 = 0;
    }
    v107 = &v106[8 * v102];
    v108 = &v106[8 * v105];
    *(_QWORD *)v107 = *a6;
    v99 = v107 + 8;
    if (v98 != v101)
    {
      v109 = v98 - v101 - 8;
      if (v109 < 0x58)
        goto LABEL_85;
      if ((unint64_t)(v101 - v106) < 0x20)
        goto LABEL_85;
      v110 = (v109 >> 3) + 1;
      v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
      v112 = &v98[-v111];
      v107 -= v111;
      v113 = &v106[8 * v102 - 16];
      v114 = v98 - 16;
      v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v116 = *(_OWORD *)v114;
        *((_OWORD *)v113 - 1) = *((_OWORD *)v114 - 1);
        *(_OWORD *)v113 = v116;
        v113 -= 32;
        v114 -= 32;
        v115 -= 4;
      }
      while (v115);
      v98 = v112;
      if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_85:
        do
        {
          v117 = *((_QWORD *)v98 - 1);
          v98 -= 8;
          *((_QWORD *)v107 - 1) = v117;
          v107 -= 8;
        }
        while (v98 != v101);
      }
      v98 = *v100;
    }
    *v100 = v107;
    *v97 = v99;
    *v96 = v108;
    if (v98)
      operator delete(v98);
  }
  else
  {
    *(_QWORD *)v98 = *a6;
    v99 = v98 + 8;
  }
  *v97 = v99;
}

uint64_t sub_20F18146C(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 *v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  unsigned int v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  _QWORD *v106;
  char *v107;
  uint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  _BYTE *v141;
  unint64_t *v142;
  int64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _OWORD *v152;
  _OWORD *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v159;
  _OWORD *v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  _OWORD *v198;
  unint64_t *v199;
  uint64_t v200;
  __int128 v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unsigned int v206;
  _QWORD *v207;
  void *v208;
  char *v209;
  void *v210;
  void *v211;
  _QWORD *v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  void *v219;
  _BYTE *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v221;
  int v222;
  const char *v223;
  int v224;
  const char *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE object[48];
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;

  sub_20F1729F0(&v228);
  v213 = a1;
  if (**(int **)(v228 + 56) > 3)
    goto LABEL_93;
  v2 = *(unsigned __int8 *)(v228 + 72);
  v3 = sub_20E8C31DC(v228, "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_93;
  v219 = &v228;
  rep = (_BYTE *)std::chrono::steady_clock::now().__d_.__rep_;
  v221 = std::chrono::system_clock::now().__d_.__rep_;
  v222 = 3;
  v223 = "unknown file";
  v224 = 1045;
  v226 = 0;
  v227 = 0;
  v225 = "unknown function";
  v6 = v228;
  v7 = v228 + 16;
  if (*(char *)(v228 + 39) < 0)
  {
    v9 = *(const char **)(v228 + 16);
    v8 = *(_QWORD *)(v228 + 24);
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v228 + 39);
    v9 = (const char *)(*(_QWORD *)v219 + 16);
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v12, v9);
  v14 = &object[8];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v15 = v4;
    v16 = v9;
    v17 = v6;
    v18 = v2;
    v19 = v7;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    v14 = operator new(v20 + 1);
    *(_QWORD *)&object[16] = v13;
    *(_QWORD *)&object[24] = v21 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v14;
    v7 = v19;
    v2 = v18;
    v6 = v17;
    v9 = v16;
    v4 = v15;
    goto LABEL_23;
  }
  object[31] = v13;
  if (v13)
LABEL_23:
    memmove(v14, v12, v13);
  v14[v13] = 0;
  object[32] = 1;
  v22 = &object[40];
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v24 = v8 | 7;
    v25 = v24 + 1;
    v22 = operator new(v24 + 1);
    *(_QWORD *)&v232 = v8;
    *((_QWORD *)&v232 + 1) = v25 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v22;
  }
  else
  {
    HIBYTE(v232) = v8;
    if (!v8)
    {
      object[40] = 0;
      LOBYTE(v233) = 1;
      v23 = *(NSObject **)object;
      if ((SHIBYTE(v232) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v9, v8);
  v22[v8] = 0;
  LOBYTE(v233) = 1;
  v23 = *(NSObject **)object;
  if ((SHIBYTE(v232) & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[32])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)&object[40]);
  if (!object[32])
    goto LABEL_37;
LABEL_35:
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
LABEL_37:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    *(_QWORD *)object = v27;
    *(_QWORD *)&object[8] = v27;
    *(_QWORD *)&object[16] = v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    memset(&object[24], 0, 24);
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = *(_QWORD *)object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v6 + 39);
    if ((v35 & 0x80u) == 0)
      v36 = v7;
    else
      v36 = *(_QWORD *)(v6 + 16);
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)v34 = v33;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)&object[24];
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v229 = 0;
    v230 = v34;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v230);
    v37 = v230;
    v230 = 0;
    a1 = v213;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
      v44 = v229;
      v229 = 0;
      if (v44)
      {
        v45 = *(std::__shared_weak_count **)(v44 + 32);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = *(std::__shared_weak_count **)(v44 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
      }
    }
    v51 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v52 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v55 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    *(_WORD *)object = 0;
    v57 = (void *)_os_log_send_and_compose_impl();
    a1 = v213;
    if (v57)
      free(v57);
  }
  if (v2)
  {
    sub_20E8C003C((uint64_t)&v219, "Collapsing the previous frame.");
    sub_20E863570((uint64_t)&v219);
  }
  sub_20E863570((uint64_t)&v219);
  v58 = v227;
  if (v227)
  {
    v59 = (unint64_t *)&v227->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v61 = a1[9];
      if (v61)
        goto LABEL_94;
LABEL_96:
      v62 = a1[5];
      v63 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v62) >> 3);
      v61 = v63;
      goto LABEL_97;
    }
  }
LABEL_93:
  v61 = a1[9];
  if (!v61)
    goto LABEL_96;
LABEL_94:
  v62 = a1[5];
  v63 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v62) >> 3);
LABEL_97:
  v64 = v61 - 1;
  v65 = (__int128 *)(v62 + 56 * v64);
  v66 = (a1[10] + a1[8] - 2) % v63;
  v67 = (int *)(v62 + 56 * v66);
  v68 = *(unsigned int *)v65;
  v69 = *v67;
  v70 = *v65;
  *(_OWORD *)((char *)v67 + 9) = *(__int128 *)((char *)v65 + 9);
  *(_OWORD *)v67 = v70;
  if (v66 != v64)
    sub_20EDB66F4((_QWORD *)(v62 + 56 * v66 + 32), *(char **)(v62 + 56 * v64 + 32), *(char **)(v62 + 56 * v64 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v62 + 56 * v64 + 40) - *(_QWORD *)(v62 + 56 * v64 + 32)) >> 3));
  v71 = a1[9];
  v72 = a1[5];
  if (!v71)
    v71 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v72) >> 3);
  v73 = v71 - 1;
  v74 = v72 + 56 * v73;
  *(_QWORD *)v74 = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v74 + 8) = _Q0;
  *(_BYTE *)(v74 + 24) = 0;
  v81 = *(void **)(v74 + 32);
  v80 = (_QWORD *)(v74 + 32);
  v79 = v81;
  if (v81)
  {
    *(_QWORD *)(v72 + 56 * v73 + 40) = v79;
    operator delete(v79);
  }
  *v80 = 0;
  v80[1] = 0;
  v80[2] = 0;
  v82 = a1[9];
  if (!v82)
    v82 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
  v83 = a1[10] - 1;
  a1[9] = v82 - 1;
  a1[10] = v83;
  sub_20EDFBD4C(&v219, (uint64_t)(a1[3] - a1[2]) >> 8);
  v85 = v219;
  v84 = rep;
  if (rep == v219)
  {
LABEL_180:
    if (a1[3] != a1[2])
    {
      v205 = 0;
      v206 = 0;
      do
      {
        sub_20F182970((uint64_t)a1, v206++, (_QWORD *)v219 + 3 * v205);
        v205 = v206;
      }
      while (v206 < (unint64_t)((uint64_t)(a1[3] - a1[2]) >> 8));
    }
    v203 = 1;
    v204 = (char *)v219;
    if (v219)
      goto LABEL_184;
    return v203;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0uLL;
  v215 = v69;
  while (1)
  {
    v89 = a1[2] + (v86 << 8);
    v92 = *(_QWORD *)(v89 + 8);
    v90 = (_QWORD *)(v89 + 8);
    v91 = v92;
    v93 = v90 + 1;
    if (v90[1] != v92)
      break;
LABEL_108:
    v86 = ++v87;
    if (0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 3) <= v87)
      goto LABEL_180;
  }
  v214 = v87;
  v94 = 0;
  v217 = v90 + 1;
  v218 = v90;
  v216 = v86;
  while (1)
  {
    v95 = (_QWORD *)(v91 + 144 * v94);
    v96 = v95 + 10;
    v97 = v95[10];
    if (!v97)
    {
      if (v69 == -1)
        goto LABEL_178;
      goto LABEL_112;
    }
    v98 = v95 + 5;
    v99 = v91 + 144 * v94;
    v102 = *(_QWORD *)(v99 + 72);
    v100 = (unint64_t *)(v99 + 72);
    v101 = v102;
    if (!v102)
      break;
    v103 = *v98;
    v104 = v101 - 1;
    v105 = *(_DWORD *)(*v98 + 336 * v104 + 320);
    if (v105 == v69)
      goto LABEL_116;
LABEL_120:
    v113 = v97 - 1;
    if (v97 == 1 || v105 != (_DWORD)v68)
      goto LABEL_112;
    v115 = v97 - 2;
    if (v97 == 2)
    {
      v116 = (_QWORD *)(v91 + 144 * v94);
      v247 = v88;
      v248 = v88;
      v245 = v88;
      v246 = v88;
      v243 = v88;
      v244 = v88;
      v241 = v88;
      v242 = v88;
      v239 = v88;
      v240 = v88;
      v237 = v88;
      v238 = v88;
      v235 = v88;
      v236 = v88;
      v233 = v88;
      v234 = v88;
      *(_OWORD *)&object[32] = v88;
      v232 = v88;
      *(_OWORD *)object = v88;
      *(_OWORD *)&object[16] = v88;
      v117 = v103 + 336 * v116[8];
      *(_QWORD *)v117 = 0;
      *(_QWORD *)(v117 + 8) = 0;
      *(_OWORD *)(v117 + 16) = *(_OWORD *)&object[16];
      *(_OWORD *)(v117 + 32) = *(_OWORD *)&object[32];
      *(_OWORD *)(v117 + 48) = v232;
      *(_OWORD *)(v117 + 64) = v233;
      *(_OWORD *)(v117 + 80) = v234;
      *(_OWORD *)(v117 + 96) = v235;
      *(_OWORD *)(v117 + 112) = v236;
      *(_OWORD *)(v117 + 128) = v237;
      *(_OWORD *)(v117 + 144) = v238;
      *(_OWORD *)(v117 + 160) = v239;
      *(_OWORD *)(v117 + 176) = v240;
      *(_OWORD *)(v117 + 192) = v241;
      *(_OWORD *)(v117 + 208) = v242;
      *(_OWORD *)(v117 + 224) = v243;
      *(_OWORD *)(v117 + 240) = v244;
      *(_OWORD *)(v117 + 256) = v245;
      *(_OWORD *)(v117 + 272) = v246;
      *(_OWORD *)(v117 + 288) = v247;
      *(_OWORD *)(v117 + 304) = v248;
      *(_DWORD *)(v117 + 320) = -1;
      *(_QWORD *)(v117 + 328) = 0;
      v118 = 0xCF3CF3CF3CF3CF3DLL * ((v116[6] - *v98) >> 4);
      v119 = v116[8] + 1;
      if (v119 < v118)
        v118 = 0;
      v116[8] = v119 - v118;
      --*v96;
      *(_BYTE *)(v116[11] + v116[14]) = 0;
      v120 = v116[12] - v116[11];
      v121 = v116[14] + 1;
      if (v121 < v120)
        v120 = 0;
      v116[14] = v121 - v120;
      goto LABEL_177;
    }
    v145 = (_QWORD *)(v91 + 144 * v94);
    v146 = v145 + 11;
    v147 = v145 + 12;
    *(_BYTE *)(v145[11] + (unint64_t)(v145[14] + v115) % (v145[12] - v145[11])) = *(_BYTE *)(v145[11]
                                                                                                  + (unint64_t)(v145[14] + v113) % (v145[12] - v145[11]));
    v149 = v145[6];
    v148 = v145 + 6;
    v150 = v148[2];
    v151 = 0xCF3CF3CF3CF3CF3DLL * ((v149 - *v98) >> 4);
    v152 = (_OWORD *)(*v98 + 336 * ((v150 + v113) % v151));
    v153 = (_OWORD *)(*v98 + 336 * ((v150 + v115) % v151));
    v154 = v152[1];
    *v153 = *v152;
    v153[1] = v154;
    v155 = v152[3];
    v153[2] = v152[2];
    v153[3] = v155;
    v156 = v152[5];
    v153[4] = v152[4];
    v153[5] = v156;
    v157 = v152[7];
    v153[6] = v152[6];
    v153[7] = v157;
    v158 = v148[2];
    v159 = 0xCF3CF3CF3CF3CF3DLL * ((*v148 - *v98) >> 4);
    v160 = (_OWORD *)(*v98 + 336 * ((v158 + v113) % v159));
    v161 = (_OWORD *)(*v98 + 336 * ((v158 + v115) % v159));
    v162 = v160[9];
    v161[8] = v160[8];
    v161[9] = v162;
    v163 = v160[11];
    v161[10] = v160[10];
    v161[11] = v163;
    v164 = v160[13];
    v161[12] = v160[12];
    v161[13] = v164;
    v165 = v160[15];
    v161[14] = v160[14];
    v161[15] = v165;
    v166 = v148[2];
    v167 = 0xCF3CF3CF3CF3CF3DLL * ((*v148 - *v98) >> 4);
    v168 = *v98 + 336 * ((v166 + v113) % v167);
    v169 = *v98 + 336 * ((v166 + v115) % v167);
    v170 = *(_OWORD *)(v168 + 272);
    *(_OWORD *)(v169 + 256) = *(_OWORD *)(v168 + 256);
    *(_OWORD *)(v169 + 272) = v170;
    v171 = v148[2];
    v172 = 0xCF3CF3CF3CF3CF3DLL * ((*v148 - *v98) >> 4);
    v173 = *v98 + 336 * ((v171 + v113) % v172);
    v174 = *v98 + 336 * ((v171 + v115) % v172);
    v175 = *(_OWORD *)(v173 + 304);
    *(_OWORD *)(v174 + 288) = *(_OWORD *)(v173 + 288);
    *(_OWORD *)(v174 + 304) = v175;
    v176 = v148[2];
    v177 = v176 + v113;
    v178 = *v98;
    v179 = 0xCF3CF3CF3CF3CF3DLL * ((*v148 - *v98) >> 4);
    *(_DWORD *)(*v98 + 336 * ((v176 + v115) % v179) + 320) = *(_DWORD *)(*v98 + 336 * (v177 % v179) + 320);
    v93 = v217;
    v90 = v218;
    if (*v96)
    {
      v247 = v88;
      v248 = v88;
      v245 = v88;
      v246 = v88;
      v243 = v88;
      v244 = v88;
      v241 = v88;
      v242 = v88;
      v239 = v88;
      v240 = v88;
      v237 = v88;
      v238 = v88;
      v235 = v88;
      v236 = v88;
      v233 = v88;
      v234 = v88;
      *(_OWORD *)&object[32] = v88;
      v232 = v88;
      *(_OWORD *)object = v88;
      *(_OWORD *)&object[16] = v88;
      v180 = *v100;
      if (!*v100)
        v180 = v179;
      v181 = v178 + 336 * v180;
      v182 = v181 - 336;
      *(_QWORD *)v182 = 0;
      *(_QWORD *)(v182 + 8) = 0;
      *(_OWORD *)(v182 + 16) = *(_OWORD *)&object[16];
      *(_OWORD *)(v182 + 32) = *(_OWORD *)&object[32];
      *(_OWORD *)(v182 + 48) = v232;
      *(_OWORD *)(v182 + 64) = v233;
      *(_OWORD *)(v181 - 256) = v234;
      *(_OWORD *)(v181 - 240) = v235;
      *(_OWORD *)(v181 - 224) = v236;
      *(_OWORD *)(v181 - 208) = v237;
      *(_OWORD *)(v181 - 192) = v238;
      *(_OWORD *)(v181 - 176) = v239;
      *(_OWORD *)(v181 - 160) = v240;
      *(_OWORD *)(v181 - 144) = v241;
      *(_OWORD *)(v181 - 128) = v242;
      *(_OWORD *)(v181 - 112) = v243;
      *(_OWORD *)(v181 - 96) = v244;
      v183 = v245;
      v184 = v246;
      v185 = v248;
      *(_OWORD *)(v181 - 48) = v247;
      *(_OWORD *)(v181 - 32) = v185;
      *(_OWORD *)(v181 - 80) = v183;
      *(_OWORD *)(v181 - 64) = v184;
      *(_DWORD *)(v181 - 16) = -1;
      *(_QWORD *)(v181 - 8) = 0;
      v186 = *v100;
      if (!*v100)
        v186 = 0xCF3CF3CF3CF3CF3DLL * ((*v148 - *v98) >> 4);
      *v100 = v186 - 1;
      --*v96;
      v187 = v91 + 144 * v94;
      v190 = *(_QWORD *)(v187 + 120);
      v188 = (uint64_t *)(v187 + 120);
      v189 = v190;
      v191 = *v146;
      if (v190)
      {
        *(_BYTE *)(v191 + v189 - 1) = 0;
        v192 = *v188;
        if (*v188)
          goto LABEL_154;
LABEL_175:
        v193 = ~*v146 + *v147;
      }
      else
      {
        *(_BYTE *)(v191 + ~v191 + *v147) = 0;
        v192 = *v188;
        if (!*v188)
          goto LABEL_175;
LABEL_154:
        v193 = v192 - 1;
      }
      *v188 = v193;
      v116 = (_QWORD *)(v91 + 144 * v94);
LABEL_177:
      --v116[16];
    }
LABEL_112:
    ++v94;
    v91 = *v90;
    if (v94 >= 0x8E38E38E38E38E39 * ((uint64_t)(*v93 - *v90) >> 4))
    {
      v85 = v219;
      v84 = rep;
      a1 = v213;
      v87 = v214;
      goto LABEL_108;
    }
  }
  v103 = *v98;
  v104 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v91 + 144 * v94 + 48) - *v98) >> 4) - 1;
  v105 = *(_DWORD *)(*v98 + 336 * v104 + 320);
  if (v105 != v69)
    goto LABEL_120;
LABEL_116:
  if (v97 == 1)
  {
    *v95 = -1;
    v106 = (_QWORD *)(v91 + 144 * v94);
    v106[9] = 0;
    v106[10] = 0;
    v106[8] = 0;
    v106[15] = 0;
    v106[16] = 0;
    v106[14] = 0;
    v107 = (char *)v219 + 24 * v86;
    v108 = (uint64_t *)(v107 + 8);
    v109 = (unint64_t *)*((_QWORD *)v107 + 1);
    v111 = v107 + 16;
    v110 = *((_QWORD *)v107 + 2);
    if ((unint64_t)v109 < v110)
    {
      *v109 = v94;
      v112 = (uint64_t)(v109 + 1);
LABEL_173:
      *v108 = v112;
      goto LABEL_112;
    }
    v131 = v68;
    v132 = *(unint64_t **)v107;
    v133 = (uint64_t)v109 - *(_QWORD *)v107;
    v134 = v133 >> 3;
    v135 = (v133 >> 3) + 1;
    if (v135 >> 61)
      sub_20E867F44();
    v136 = v110 - (_QWORD)v132;
    if (v136 >> 2 > v135)
      v135 = v136 >> 2;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
      v137 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      if (v137 >> 61)
        sub_20E877A38();
      v138 = (char *)v219 + 24 * v86;
      v139 = v107 + 16;
      v140 = v137;
      v141 = operator new(8 * v137);
      v88 = 0uLL;
      v93 = v217;
      v90 = v218;
      v111 = v139;
      v137 = v140;
      v107 = v138;
      v142 = (unint64_t *)&v141[8 * v134];
      *v142 = v94;
      v112 = (uint64_t)(v142 + 1);
      v143 = (char *)v109 - (char *)v132;
      if (v109 != v132)
        goto LABEL_145;
    }
    else
    {
      v141 = 0;
      v142 = (unint64_t *)(8 * v134);
      *(_QWORD *)(8 * v134) = v94;
      v112 = 8 * v134 + 8;
      v143 = (char *)v109 - (char *)v132;
      if (v109 != v132)
      {
LABEL_145:
        v144 = v143 - 8;
        if (v144 >= 0x58)
        {
          v194 = (char *)v109 - &v141[v133];
          v68 = v131;
          v69 = v215;
          if (v194 >= 0x20)
          {
            v195 = (v144 >> 3) + 1;
            v196 = 8 * (v195 & 0x3FFFFFFFFFFFFFFCLL);
            v197 = &v109[v196 / 0xFFFFFFFFFFFFFFF8];
            v142 = (unint64_t *)((char *)v142 - v196);
            v198 = &v141[8 * v134 - 16];
            v199 = v109 - 2;
            v200 = v195 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v201 = *(_OWORD *)v199;
              *(v198 - 1) = *((_OWORD *)v199 - 1);
              *v198 = v201;
              v198 -= 2;
              v199 -= 4;
              v200 -= 4;
            }
            while (v200);
            v109 = v197;
            if (v195 == (v195 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_170;
          }
        }
        else
        {
          v68 = v131;
          v69 = v215;
        }
        do
        {
          v202 = *--v109;
          *--v142 = v202;
        }
        while (v109 != v132);
LABEL_170:
        *(_QWORD *)v107 = v142;
        *v108 = v112;
        *(_QWORD *)v111 = &v141[8 * v137];
        if (v132)
        {
          operator delete(v132);
          v93 = v217;
          v90 = v218;
          v88 = 0uLL;
        }
        v86 = v216;
        goto LABEL_173;
      }
    }
    v68 = v131;
    v69 = v215;
    goto LABEL_170;
  }
  v247 = v88;
  v248 = v88;
  v245 = v88;
  v246 = v88;
  v243 = v88;
  v244 = v88;
  v241 = v88;
  v242 = v88;
  v239 = v88;
  v240 = v88;
  v237 = v88;
  v238 = v88;
  v235 = v88;
  v236 = v88;
  v233 = v88;
  v234 = v88;
  *(_OWORD *)&object[32] = v88;
  v232 = v88;
  *(_OWORD *)object = v88;
  *(_OWORD *)&object[16] = v88;
  v122 = v103 + 336 * v104;
  *(_QWORD *)v122 = 0;
  *(_QWORD *)(v122 + 8) = 0;
  *(_OWORD *)(v122 + 16) = *(_OWORD *)&object[16];
  *(_OWORD *)(v122 + 32) = *(_OWORD *)&object[32];
  *(_OWORD *)(v122 + 48) = v232;
  *(_OWORD *)(v122 + 64) = v233;
  *(_OWORD *)(v122 + 80) = v234;
  *(_OWORD *)(v122 + 96) = v235;
  *(_OWORD *)(v122 + 112) = v236;
  *(_OWORD *)(v122 + 128) = v237;
  *(_OWORD *)(v122 + 144) = v238;
  *(_OWORD *)(v122 + 160) = v239;
  *(_OWORD *)(v122 + 176) = v240;
  *(_OWORD *)(v122 + 192) = v241;
  *(_OWORD *)(v122 + 208) = v242;
  *(_OWORD *)(v122 + 224) = v243;
  *(_OWORD *)(v122 + 240) = v244;
  *(_OWORD *)(v122 + 304) = v248;
  *(_OWORD *)(v122 + 288) = v247;
  *(_OWORD *)(v122 + 272) = v246;
  *(_OWORD *)(v122 + 256) = v245;
  *(_DWORD *)(v122 + 320) = -1;
  *(_QWORD *)(v122 + 328) = 0;
  v123 = *v100;
  if (!*v100)
    v123 = 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v91 + 144 * v94 + 48) - *v98) >> 4);
  *v100 = v123 - 1;
  --*v96;
  v124 = v91 + 144 * v94;
  v127 = *(_QWORD *)(v124 + 120);
  v125 = (uint64_t *)(v124 + 120);
  v126 = v127;
  v128 = v125 - 4;
  if (v127)
  {
    *(_BYTE *)(*v128 + v126 - 1) = 0;
    v129 = *v125;
    if (*v125)
      goto LABEL_135;
LABEL_156:
    v130 = ~*v128 + *(_QWORD *)(v91 + 144 * v94 + 96);
  }
  else
  {
    *(_BYTE *)(*v128 + ~*v128 + *(_QWORD *)(v91 + 144 * v94 + 96)) = 0;
    v129 = *v125;
    if (!*v125)
      goto LABEL_156;
LABEL_135:
    v130 = v129 - 1;
  }
  *v125 = v130;
  --*(_QWORD *)(v91 + 144 * v94 + 128);
  if (!*v96)
    goto LABEL_178;
  if (*v100)
  {
    if (*(_DWORD *)(*v98 + 336 * *v100 - 16) == -1)
      goto LABEL_178;
    goto LABEL_112;
  }
  if (*(_DWORD *)(*v98 + 16 * ((*(_QWORD *)(v91 + 144 * v94 + 48) - *v98) >> 4) - 16) != -1)
    goto LABEL_112;
LABEL_178:
  v203 = 0;
  v204 = (char *)v219;
  if (!v219)
    return v203;
LABEL_184:
  v207 = rep;
  v208 = v204;
  if (rep != v204)
  {
    v209 = rep;
    do
    {
      v211 = (void *)*((_QWORD *)v209 - 3);
      v209 -= 24;
      v210 = v211;
      if (v211)
      {
        *(v207 - 2) = v210;
        operator delete(v210);
      }
      v207 = v209;
    }
    while (v209 != v204);
    v208 = v219;
  }
  rep = v204;
  operator delete(v208);
  return v203;
}

void sub_20F18281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (a51)
  {
    if (a50 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E86E8C4(&a44);
  sub_20E86E8C4(&a43);
  sub_20E86E658((uint64_t)&a45);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F182890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MEMORY[0x212BC6398](v33, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F1828BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F1828D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F1828EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *object,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a52 && a51 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F182934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F182948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F18295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20E9DD680(&a33);
  _Unwind_Resume(a1);
}

void sub_20F182970(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v3 = a3[1];
  if (v3 == *a3)
    return;
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 + ((unint64_t)a2 << 8);
  v10 = *(_QWORD *)(v7 + 8);
  v9 = (_QWORD *)(v7 + 8);
  v8 = v10;
  v11 = *(_QWORD *)(v3 - 8);
  v12 = 0x8E38E38E38E38E39 * ((v9[1] - v10) >> 4);
  if (v11 + 1 >= v12 || !*(_QWORD *)(v8 + 144 * (v11 + 1) + 80))
    goto LABEL_10;
  v13 = (uint64_t *)(v8 + 144 * v11 + 368);
  v14 = v11;
  while (v12 - 2 != v14)
  {
    v15 = *v13;
    v13 += 18;
    ++v14;
    if (!v15)
    {
      if (!v14)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  v14 = v12 - 1;
  if (v12 != 1)
    goto LABEL_14;
LABEL_10:
  v16 = (uint64_t *)(144 * v11 + v8 - 64);
  do
  {
    if (!v11)
      goto LABEL_16;
    --v11;
    v17 = *v16;
    v16 -= 18;
  }
  while (!v17);
  v14 = v11;
  if (v11)
  {
LABEL_14:
    if (v14 >= v12)
      goto LABEL_21;
  }
  else
  {
LABEL_16:
    if (!*(_QWORD *)(v8 + 80))
      return;
    v14 = 0;
    if (!v12)
      goto LABEL_21;
  }
  if (*(_QWORD *)(v8 + 144 * v14 + 80))
  {
    if (v14 >= v12)
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_21:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/VisualSlidingWindow.h", 761, (uint64_t)"last_valid_element < elements.size() && predicate(elements[last_valid_element]) > 0", 83, (uint64_t)"Make sure last_valid_element points to a valid element", 54, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_44;
  }
  if (v14 == -1)
    return;
  v8 = *v9;
  if (v14 >= 0x8E38E38E38E38E39 * ((uint64_t)(v9[1] - *v9) >> 4))
    goto LABEL_25;
LABEL_24:
  if (*(_QWORD *)(v8 + 144 * v14 + 80))
    goto LABEL_26;
LABEL_25:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 652, (uint64_t)"last_track_used == static_cast<size_t>(-1) || (last_track_used < tracks.size() && !tracks[last_track_used].empty())", 115, (uint64_t)"Make sure last_track_used points to a valid track.", 50, (void (*)(void **))sub_21023DDB0))
  {
LABEL_44:
    abort();
  }
LABEL_26:
  v18 = a3[1] - *a3;
  if (v18)
  {
    v19 = 0;
    v20 = (_QWORD **)(v9 + 5);
    v21 = v18 >> 3;
    v22 = (_QWORD *)(v6 + (v5 << 8) + 56);
    do
    {
      v23 = *(_QWORD *)(*a3 + 8 * v19);
      if (v23 >= v14)
        break;
      v24 = *v20;
      v25 = (_QWORD *)*v22;
      v26 = *v9;
      if (*v20 != (_QWORD *)*v22)
      {
        while (*v24 != v26 + 144 * v14)
        {
          if (++v24 == v25)
          {
            v24 = (_QWORD *)*v22;
            break;
          }
        }
      }
      if (v24 != v25)
      {
        *v24 = v26 + 144 * v23;
        v26 = *v9;
      }
      v27 = (_QWORD *)(v26 + 144 * v23);
      *v27 = -1;
      v27[9] = 0;
      v27[10] = 0;
      v27[8] = 0;
      v27[15] = 0;
      v27[16] = 0;
      v27[14] = 0;
      v28 = *v9;
      *(_DWORD *)(v28 + 144 * v23) = -1;
      if (!*(_QWORD *)(v28 + 144 * v14 + 80))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 703, (uint64_t)"!tracks[last_track_used].empty()", 32, (uint64_t)"Attempting to backfill an empty track.", 38, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_44;
        }
        v28 = *v9;
      }
      sub_20F18C774((uint64_t *)(v28 + 144 * v23), (uint64_t *)(v28 + 144 * v14));
      v29 = 1 - v14;
      v30 = 144 * v14 - 64;
      do
      {
        v31 = v29++;
        if (v29 == 1)
          break;
        v32 = *(_QWORD *)(*v9 + v30);
        v30 -= 144;
      }
      while (!v32);
      ++v19;
      v14 = -(uint64_t)v31;
    }
    while (v19 != v21);
  }
}

uint64_t sub_20F182CAC(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  std::string::size_type *p_size;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string::value_type *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *size;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  void *v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD **v86;
  _QWORD **v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  unint64_t *v122;
  int64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  _OWORD *v134;
  unint64_t *v135;
  uint64_t v136;
  __int128 v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unint64_t v144;
  char *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD **v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  unsigned int v155;
  unint64_t v156;
  char *v157;
  _QWORD *v158;
  void *v159;
  char *v160;
  void *v161;
  void *v162;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  void *v167;
  void *v168;
  int v169;
  _QWORD **v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  char v175;
  uint64_t v176;
  void *__dst[2];
  _BYTE v178[7];
  char v179;
  std::string v180;
  void *v181;
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v183;
  int v184;
  const char *v185;
  int v186;
  const char *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::string object[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;

  sub_20F1729F0(&v190);
  v174 = a1;
  if (**(int **)(v190 + 56) > 3)
    goto LABEL_93;
  v2 = *(unsigned __int8 *)(v190 + 72);
  v3 = sub_20E8C31DC(v190, "OSLogSurrogateAppender", 1, 0);
  v4 = v3;
  if (!v2 && v3 == 0)
    goto LABEL_93;
  v181 = &v190;
  rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
  v183 = std::chrono::system_clock::now().__d_.__rep_;
  v184 = 3;
  v185 = "unknown file";
  v186 = 1133;
  v188 = 0;
  v189 = 0;
  v187 = "unknown function";
  v6 = v190;
  v7 = v190 + 16;
  if (*(char *)(v190 + 39) < 0)
  {
    v9 = *(const char **)(v190 + 16);
    v8 = *(_QWORD *)(v190 + 24);
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v190 + 39);
    v9 = (const char *)(*(_QWORD *)v181 + 16);
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_10;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[1].__r_.__value_.__s.__data_[0] && SHIBYTE(object[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(object[0].__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_10:
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v12, v9);
  p_size = &object[0].__r_.__value_.__l.__size_;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v15 = v4;
    v16 = v9;
    v17 = v6;
    v18 = v2;
    v19 = v7;
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    p_size = (std::string::size_type *)operator new(v20 + 1);
    object[0].__r_.__value_.__r.__words[2] = v13;
    object[1].__r_.__value_.__r.__words[0] = v21 | 0x8000000000000000;
    object[0].__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v7 = v19;
    v2 = v18;
    v6 = v17;
    v9 = v16;
    v4 = v15;
    goto LABEL_23;
  }
  object[1].__r_.__value_.__s.__data_[7] = v13;
  if (v13)
LABEL_23:
    memmove(p_size, v12, v13);
  *((_BYTE *)p_size + v13) = 0;
  object[1].__r_.__value_.__s.__data_[8] = 1;
  v22 = &object[1].__r_.__value_.__s.__data_[16];
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v24 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v24 = v8 | 7;
    v25 = v24 + 1;
    v22 = (std::string::value_type *)operator new(v24 + 1);
    *(_QWORD *)&v192 = v8;
    *((_QWORD *)&v192 + 1) = v25 | 0x8000000000000000;
    object[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  }
  else
  {
    HIBYTE(v192) = v8;
    if (!v8)
    {
      object[1].__r_.__value_.__s.__data_[16] = 0;
      LOBYTE(v193) = 1;
      v23 = object[0].__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v192) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v22, v9, v8);
  v22[v8] = 0;
  LOBYTE(v193) = 1;
  v23 = object[0].__r_.__value_.__r.__words[0];
  if ((SHIBYTE(v192) & 0x80000000) == 0)
  {
LABEL_28:
    if (!object[1].__r_.__value_.__s.__data_[8])
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete((void *)object[1].__r_.__value_.__r.__words[2]);
  if (!object[1].__r_.__value_.__s.__data_[8])
    goto LABEL_37;
LABEL_35:
  if (object[1].__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)object[0].__r_.__value_.__l.__size_);
LABEL_37:
  if (object[0].__r_.__value_.__r.__words[0])
    os_release(object[0].__r_.__value_.__l.__data_);
  if (v4 && *(_QWORD *)(v4 + 24))
  {
    v26 = _os_log_pack_size();
    v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
    v28 = (std::__shared_weak_count *)operator new();
    v29 = v28;
    v28->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v28->__shared_weak_owners_ = 0;
    v28[1].__vftable = v27;
    object[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    object[0].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    object[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
    do
      v31 = __ldxr(p_shared_owners);
    while (__stxr(v31 + 1, p_shared_owners));
    memset(&object[1], 0, sizeof(std::string));
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    v33 = object[0].__r_.__value_.__r.__words[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v34 = operator new();
    v35 = *(unsigned __int8 *)(v6 + 39);
    if ((v35 & 0x80u) == 0)
      v36 = v7;
    else
      v36 = *(_QWORD *)(v6 + 16);
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)v34 = v33;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)&object[0].__r_.__value_.__r.__words[1];
    *(_OWORD *)&object[0].__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)&object[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&object[1].__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)(v34 + 40) = v36;
    *(_QWORD *)(v34 + 48) = v35;
    *(_BYTE *)(v34 + 56) = 1;
    v209 = 0;
    v180.__r_.__value_.__r.__words[0] = v34;
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v180);
    v37 = v180.__r_.__value_.__r.__words[0];
    v180.__r_.__value_.__r.__words[0] = 0;
    if (v37)
    {
      v38 = *(std::__shared_weak_count **)(v37 + 32);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = *(std::__shared_weak_count **)(v37 + 16);
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      MEMORY[0x212BC6398](v37, 0x10F0C40B62ED6C6);
      v44 = v209;
      v209 = 0;
      if (v44)
      {
        v45 = *(std::__shared_weak_count **)(v44 + 32);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = *(std::__shared_weak_count **)(v44 + 16);
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
      }
    }
    size = (std::__shared_weak_count *)object[1].__r_.__value_.__l.__size_;
    a1 = v174;
    if (object[1].__r_.__value_.__l.__size_)
    {
      v52 = (unint64_t *)(object[1].__r_.__value_.__l.__size_ + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v54 = (std::__shared_weak_count *)object[0].__r_.__value_.__r.__words[2];
    if (object[0].__r_.__value_.__r.__words[2])
    {
      v55 = (unint64_t *)(object[0].__r_.__value_.__r.__words[2] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  else
  {
    os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
    LOWORD(object[0].__r_.__value_.__l.__data_) = 0;
    v57 = (void *)_os_log_send_and_compose_impl();
    a1 = v174;
    if (v57)
      free(v57);
  }
  if (v2)
  {
    sub_20E8C003C((uint64_t)&v181, "Collapsing the latest frame.");
    sub_20E863570((uint64_t)&v181);
  }
  sub_20E863570((uint64_t)&v181);
  v58 = v189;
  if (v189)
  {
    v59 = (unint64_t *)&v189->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v61 = a1[9];
      if (v61)
        goto LABEL_94;
LABEL_96:
      v62 = a1[5];
      v63 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v62) >> 3) - 1;
      goto LABEL_97;
    }
  }
LABEL_93:
  v61 = a1[9];
  if (!v61)
    goto LABEL_96;
LABEL_94:
  v62 = a1[5];
  v63 = v61 - 1;
LABEL_97:
  v64 = *(_DWORD *)(v62 + 56 * v63);
  v65 = v62 + 56 * v63;
  *(_QWORD *)v65 = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v65 + 8) = _Q0;
  *(_BYTE *)(v65 + 24) = 0;
  v72 = *(void **)(v65 + 32);
  v71 = (_QWORD *)(v65 + 32);
  v70 = v72;
  if (v72)
  {
    *(_QWORD *)(v62 + 56 * v63 + 40) = v70;
    operator delete(v70);
  }
  *v71 = 0;
  v71[1] = 0;
  v71[2] = 0;
  v73 = a1[9];
  if (!v73)
    v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
  v74 = a1[10] - 1;
  a1[9] = v73 - 1;
  a1[10] = v74;
  v76 = a1[2];
  v75 = a1[3];
  if (v76 == v75)
  {
    v79 = a1[3];
  }
  else
  {
    do
    {
      v77 = *(_OWORD *)(v76 + 48);
      *(_OWORD *)(v76 + 48) = *(_OWORD *)(v76 + 72);
      *(_OWORD *)(v76 + 72) = v77;
      v78 = *(_QWORD *)(v76 + 64);
      *(_QWORD *)(v76 + 64) = *(_QWORD *)(v76 + 88);
      *(_QWORD *)(v76 + 88) = v78;
      v76 += 256;
    }
    while (v76 != v75);
    v75 = a1[2];
    v79 = a1[3];
  }
  sub_20EDFBD4C(&v181, (v79 - v75) >> 8);
  v80 = a1[3] - a1[2];
  if (v80)
  {
    v81 = 0;
    v82 = 0;
    v83 = v80 >> 8;
    v84 = (unint64_t)(v80 >> 8) <= 1 ? 1 : v80 >> 8;
    v172 = v84;
    v173 = v83;
    v171 = v64;
    do
    {
      v175 = v81;
      v85 = a1[2] + (v82 << 8);
      v86 = *(_QWORD ***)(v85 + 72);
      v87 = *(_QWORD ***)(v85 + 80);
      if (v86 != v87)
      {
        v176 = v82;
        do
        {
          v88 = *v86;
          if (!*v86)
            goto LABEL_114;
          v89 = v88[10];
          if (!v89)
          {
            if (v64 == -1)
              goto LABEL_161;
            goto LABEL_114;
          }
          v90 = v88[9];
          if (v90)
          {
            v91 = v88[5];
            if (*(_DWORD *)(v91 + 336 * v90 - 16) != v64)
              goto LABEL_114;
          }
          else
          {
            v91 = v88[5];
            if (*(_DWORD *)(v91 + 16 * ((v88[6] - v91) >> 4) - 16) != v64)
              goto LABEL_114;
          }
          if (v89 == 1)
          {
            *v88 = -1;
            v88[9] = 0;
            v88[10] = 0;
            v88[8] = 0;
            v88[15] = 0;
            v88[16] = 0;
            v88[14] = 0;
            v92 = 0x8E38E38E38E38E39 * (((uint64_t)v88 - *(_QWORD *)(a1[2] + (v82 << 8) + 8)) >> 4);
            v93 = (char *)v181 + 24 * v82;
            v94 = (uint64_t *)(v93 + 8);
            v95 = (unint64_t *)*((_QWORD *)v93 + 1);
            v97 = v93 + 16;
            v96 = *((_QWORD *)v93 + 2);
            if ((unint64_t)v95 < v96)
            {
              *v95 = v92;
              v98 = (uint64_t)(v95 + 1);
LABEL_160:
              *v94 = v98;
              goto LABEL_114;
            }
            v109 = *(unint64_t **)v93;
            v110 = (uint64_t)v95 - *(_QWORD *)v93;
            v111 = v110 >> 3;
            v112 = (v110 >> 3) + 1;
            if (v112 >> 61)
              sub_20E867F44();
            v113 = v96 - (_QWORD)v109;
            if (v113 >> 2 > v112)
              v112 = v113 >> 2;
            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
              v114 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v114 = v112;
            if (v114)
            {
              v170 = v87;
              if (v114 >> 61)
                sub_20E877A38();
              v115 = v92;
              v116 = v93 + 8;
              v117 = v93 + 16;
              v118 = (char *)v181 + 24 * v82;
              v119 = v114;
              v120 = operator new(8 * v114);
              v93 = v118;
              v97 = v117;
              v114 = v119;
              v94 = (uint64_t *)v116;
              v121 = v115;
              v87 = v170;
              v122 = (unint64_t *)&v120[8 * v111];
              *v122 = v121;
              v98 = (uint64_t)(v122 + 1);
              v123 = (char *)v95 - (char *)v109;
              if (v95 != v109)
              {
LABEL_140:
                v124 = v123 - 8;
                if (v124 < 0x58)
                {
                  v64 = v171;
                  goto LABEL_156;
                }
                v128 = (char *)v95 - v120 - v110;
                v64 = v171;
                if (v128 < 0x20)
                  goto LABEL_212;
                v129 = v97;
                v130 = v93;
                v131 = (v124 >> 3) + 1;
                v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
                v133 = &v95[v132 / 0xFFFFFFFFFFFFFFF8];
                v122 = (unint64_t *)((char *)v122 - v132);
                v134 = &v120[8 * v111 - 16];
                v135 = v95 - 2;
                v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v137 = *(_OWORD *)v135;
                  *(v134 - 1) = *((_OWORD *)v135 - 1);
                  *v134 = v137;
                  v134 -= 2;
                  v135 -= 4;
                  v136 -= 4;
                }
                while (v136);
                v95 = v133;
                v93 = v130;
                v97 = v129;
                if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_212:
                  do
                  {
LABEL_156:
                    v138 = *--v95;
                    *--v122 = v138;
                  }
                  while (v95 != v109);
                }
LABEL_157:
                *(_QWORD *)v93 = v122;
                *v94 = v98;
                *(_QWORD *)v97 = &v120[8 * v114];
                if (v109)
                  operator delete(v109);
                a1 = v174;
                v82 = v176;
                goto LABEL_160;
              }
            }
            else
            {
              v120 = 0;
              v122 = (unint64_t *)(8 * v111);
              *(_QWORD *)(8 * v111) = v92;
              v98 = 8 * v111 + 8;
              v123 = (char *)v95 - (char *)v109;
              if (v95 != v109)
                goto LABEL_140;
            }
            v64 = v171;
            goto LABEL_157;
          }
          v207 = 0u;
          v208 = 0u;
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          v197 = 0u;
          v198 = 0u;
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v192 = 0u;
          memset(object, 0, sizeof(object));
          if (!v90)
            v90 = 0xCF3CF3CF3CF3CF3DLL * ((v88[6] - v91) >> 4);
          v99 = v91 + 336 * v90;
          v100 = v99 - 336;
          *(_QWORD *)v100 = 0;
          *(_QWORD *)(v100 + 8) = 0;
          *(_OWORD *)(v100 + 16) = *(_OWORD *)&object[0].__r_.__value_.__r.__words[2];
          *(_OWORD *)(v100 + 32) = *(_OWORD *)&object[1].__r_.__value_.__r.__words[1];
          *(_OWORD *)(v100 + 48) = v192;
          *(_OWORD *)(v100 + 64) = v193;
          *(_OWORD *)(v99 - 256) = v194;
          *(_OWORD *)(v99 - 240) = v195;
          *(_OWORD *)(v99 - 224) = v196;
          *(_OWORD *)(v99 - 208) = v197;
          *(_OWORD *)(v99 - 192) = v198;
          *(_OWORD *)(v99 - 176) = v199;
          *(_OWORD *)(v99 - 160) = v200;
          *(_OWORD *)(v99 - 144) = v201;
          *(_OWORD *)(v99 - 128) = v202;
          *(_OWORD *)(v99 - 112) = v203;
          *(_OWORD *)(v99 - 96) = v204;
          v101 = v205;
          v102 = v206;
          v103 = v208;
          *(_OWORD *)(v99 - 48) = v207;
          *(_OWORD *)(v99 - 32) = v103;
          *(_OWORD *)(v99 - 80) = v101;
          *(_OWORD *)(v99 - 64) = v102;
          *(_DWORD *)(v99 - 16) = -1;
          *(_QWORD *)(v99 - 8) = 0;
          v104 = v88[9];
          if (v104)
          {
            v105 = v88[10] - 1;
            v88[9] = v104 - 1;
            v88[10] = v105;
            v106 = v88[15];
            if (v106)
              goto LABEL_128;
          }
          else
          {
            v125 = v88[10] - 1;
            v88[9] = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v88[6] - v88[5]) >> 4) - 1;
            v88[10] = v125;
            v106 = v88[15];
            if (v106)
            {
LABEL_128:
              *(_BYTE *)(v88[11] + v106 - 1) = 0;
              v107 = v88[15];
              if (v107)
                goto LABEL_129;
              goto LABEL_144;
            }
          }
          *(_BYTE *)(v88[11] + ~v88[11] + v88[12]) = 0;
          v107 = v88[15];
          if (v107)
          {
LABEL_129:
            v108 = v88[16] - 1;
            v88[15] = v107 - 1;
            v88[16] = v108;
            if (!v88[10])
              goto LABEL_161;
            goto LABEL_145;
          }
LABEL_144:
          v126 = v88[16] - 1;
          v88[15] = ~v88[11] + v88[12];
          v88[16] = v126;
          if (!v88[10])
            goto LABEL_161;
LABEL_145:
          v127 = v88[9];
          if (v127)
          {
            if (*(_DWORD *)(v88[5] + 336 * v127 - 16) == -1)
              goto LABEL_161;
          }
          else if (*(_DWORD *)(v88[5] + 16 * ((uint64_t)(v88[6] - v88[5]) >> 4) - 16) == -1)
          {
LABEL_161:
            v139 = v175;
            goto LABEL_181;
          }
LABEL_114:
          ++v86;
        }
        while (v86 != v87);
      }
      v81 = ++v82 >= v173;
    }
    while (v82 != v172);
    v141 = a1[2];
    v140 = a1[3];
    if (v140 != v141)
    {
      v142 = 0;
      v143 = 0;
      do
      {
        v145 = (char *)v181 + 24 * v142;
        v146 = *(_QWORD **)v145;
        v147 = (_QWORD *)*((_QWORD *)v145 + 1);
        if (v146 != v147)
        {
          v148 = v141 + (v142 << 8);
          v149 = (_QWORD **)(v148 + 48);
          v150 = (_QWORD *)(v148 + 8);
          v151 = (_QWORD *)(v148 + 56);
          do
          {
            v152 = *v149;
            v153 = (_QWORD *)*v151;
            if (*v149 != (_QWORD *)*v151)
            {
              while (*v152 != *v150 + 144 * *v146)
              {
                if (++v152 == v153)
                {
                  v152 = (_QWORD *)*v151;
                  break;
                }
              }
            }
            if (v152 != v153)
              *v152 = 0;
            ++v146;
          }
          while (v146 != v147);
          v141 = a1[2];
          v140 = a1[3];
        }
        v144 = (v140 - v141) >> 8;
        v142 = ++v143;
      }
      while (v144 > v143);
      if (v140 != v141)
      {
        v154 = 0;
        v155 = 0;
        do
        {
          sub_20F182970((uint64_t)a1, v155, (_QWORD *)v181 + 3 * v154);
          v144 = (uint64_t)(a1[3] - a1[2]) >> 8;
          v154 = ++v155;
        }
        while (v144 > v155);
      }
      if (v144)
      {
        v156 = 0;
        while (1)
        {
          while (1)
          {
            std::to_string(&v180, v156);
            v164 = std::string::insert(&v180, 0, "CollapseLatestFrame stream_id@", 0x1EuLL);
            v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
            object[0].__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
            *(_OWORD *)&object[0].__r_.__value_.__l.__data_ = v165;
            v164->__r_.__value_.__l.__size_ = 0;
            v164->__r_.__value_.__r.__words[2] = 0;
            v164->__r_.__value_.__r.__words[0] = 0;
            v166 = std::string::append(object, " ", 1uLL);
            v167 = (void *)v166->__r_.__value_.__r.__words[0];
            v168 = (void *)v166->__r_.__value_.__l.__size_;
            LODWORD(v209) = v166->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)&v209 + 3) = *(_DWORD *)((char *)&v166->__r_.__value_.__r.__words[2] + 3);
            v169 = SHIBYTE(v166->__r_.__value_.__r.__words[2]);
            v166->__r_.__value_.__l.__size_ = 0;
            v166->__r_.__value_.__r.__words[2] = 0;
            v166->__r_.__value_.__r.__words[0] = 0;
            if ((SHIBYTE(object[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              break;
            operator delete(object[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_190;
LABEL_196:
            if ((v169 & 0x80000000) == 0)
              goto LABEL_191;
LABEL_197:
            sub_20E860C04(__dst, v167, (unint64_t)v168);
            if (v179 < 0)
              operator delete(__dst[0]);
            operator delete(v167);
            ++v156;
            v139 = 1;
            if (v144 == v156)
              goto LABEL_181;
          }
          if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_196;
LABEL_190:
          operator delete(v180.__r_.__value_.__l.__data_);
          if (v169 < 0)
            goto LABEL_197;
LABEL_191:
          __dst[0] = v167;
          __dst[1] = v168;
          *(_DWORD *)v178 = v209;
          *(_DWORD *)&v178[3] = *(_DWORD *)((char *)&v209 + 3);
          v179 = v169;
          ++v156;
          v139 = 1;
          if (v144 == v156)
            goto LABEL_181;
        }
      }
    }
  }
  v139 = 1;
LABEL_181:
  v157 = (char *)v181;
  if (v181)
  {
    v158 = rep;
    v159 = v181;
    if (rep != v181)
    {
      v160 = (char *)rep;
      do
      {
        v162 = (void *)*((_QWORD *)v160 - 3);
        v160 -= 24;
        v161 = v162;
        if (v162)
        {
          *(v158 - 2) = v161;
          operator delete(v161);
        }
        v158 = v160;
      }
      while (v160 != v157);
      v159 = v181;
    }
    rep = v157;
    operator delete(v159);
  }
  return v139 & 1;
}

void sub_20F183CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a57)
  {
    if (a56 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_20E86E8C4(&a38);
  sub_20E86E8C4((uint64_t *)(v51 - 104));
  sub_20E86E658((uint64_t)&a51);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_20E86E658((uint64_t)&a51);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  MEMORY[0x212BC6398](v41, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;

  operator delete(v41);
  sub_20E9DD680(&a41);
  _Unwind_Resume(a1);
}

void sub_20F183DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *object,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  if (a58 && a57 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_20F183DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_20E9DD680(&a41);
  _Unwind_Resume(a1);
}

void sub_20F183E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if ((a43 & 0x80000000) == 0)
  {
    sub_20E9DD680(&a44);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_20E9DD680(&a44);
  _Unwind_Resume(a1);
}

void sub_20F183E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_20E9DD680(&a41);
  _Unwind_Resume(a1);
}

void sub_20F183E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_20E9DD680(&a41);
  _Unwind_Resume(a1);
}

void sub_20F183E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  sub_20E9DD680(&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_20F183E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, _QWORD *a6, unsigned __int8 a7, int a8, unsigned int a9, unsigned int a10, unsigned __int8 a11)
{
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v55;

  v11 = a8;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v51 = a5;
  if (a5)
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v52 = a7;
  if (a7)
    a6[1] = *a6;
  v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)a9 << 8);
  v14 = *(_QWORD *)(v13 + 48);
  v50 = (uint64_t *)(v13 + 48);
  v16 = (uint64_t *)(v13 + 56);
  v15 = *(_QWORD *)(v13 + 56);
  v49 = v16;
  if (v15 != v14)
  {
    v17 = 0;
    v18 = 0;
    v19 = a11;
    v48 = ~a8;
    while (1)
    {
      v20 = *(_QWORD **)(v14 + 8 * v17);
      if (v20)
      {
        v21 = v20[10];
        if ((int)v21 > v11
          && (!v19 || *(_BYTE *)(v20[11] + (unint64_t)(v20[14] + (int)v21 - 1) % (v20[12] - v20[11]))))
        {
          break;
        }
      }
LABEL_8:
      if (++v17 >= (unint64_t)((v15 - v14) >> 3))
        return v18;
    }
    v22 = v21 - 1;
    sub_20F18423C(v20[5] + 336 * ((v20[8] + v21 - 1) % (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v20[6] - v20[5]) >> 4))) + 128, (char **)a2);
    v23 = (int)v21 + v48;
    sub_20F18423C(v20[5] + 336 * ((v20[8] + v23) % (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v20[6] - v20[5]) >> 4))) + 128, (char **)a3);
    if (!v52)
    {
LABEL_37:
      if (v51)
        sub_20F18423C(v20[5]+ 336 * ((v20[8] + v23) % (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v20[6] - v20[5]) >> 4)))+ 32 * a10+ 128, (char **)a4);
      v18 = (v18 + 1);
      v15 = *v49;
      v14 = *v50;
      goto LABEL_8;
    }
    v24 = *(_QWORD *)(v20[5] + 336 * ((v20[8] + v22) % (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v20[6] - v20[5]) >> 4))) + 288);
    v26 = (char *)a6[1];
    v25 = a6[2];
    v55 = v18;
    if ((unint64_t)v26 < v25)
    {
      *(_QWORD *)v26 = v24;
      v18 = (uint64_t)(v26 + 8);
LABEL_36:
      v19 = a11;
      a6[1] = v18;
      LODWORD(v18) = v55;
      goto LABEL_37;
    }
    v27 = (char *)*a6;
    v28 = (uint64_t)&v26[-*a6];
    v29 = v28 >> 3;
    v30 = (v28 >> 3) + 1;
    if (v30 >> 61)
      sub_20E867F44();
    v31 = v25 - (_QWORD)v27;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        sub_20E877A38();
      v33 = operator new(8 * v32);
      v34 = &v33[8 * v29];
      *v34 = v24;
      v18 = (uint64_t)(v34 + 1);
      v35 = v26 - v27;
      if (v26 == v27)
        goto LABEL_33;
    }
    else
    {
      v33 = 0;
      v34 = (_QWORD *)(8 * v29);
      *(_QWORD *)(8 * v29) = v24;
      v18 = 8 * v29 + 8;
      v35 = v26 - v27;
      if (v26 == v27)
      {
LABEL_33:
        *a6 = v34;
        a6[1] = v18;
        a6[2] = &v33[8 * v32];
        if (v27)
          operator delete(v27);
        v11 = a8;
        goto LABEL_36;
      }
    }
    v36 = v35 - 8;
    if (v36 < 0x58)
      goto LABEL_45;
    if ((unint64_t)(v26 - v33 - v28) < 0x20)
      goto LABEL_45;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v26[-v38];
    v34 = (_QWORD *)((char *)v34 - v38);
    v40 = &v33[8 * v29 - 16];
    v41 = v26 - 16;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    v26 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      do
      {
        v44 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v34 = v44;
      }
      while (v26 != v27);
    }
    goto LABEL_33;
  }
  return 0;
}

double sub_20F18423C(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  double result;

  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 < v4)
  {
    *(_QWORD *)v5 = 0;
    v7 = v5 + 8;
    goto LABEL_22;
  }
  v8 = *a2;
  v9 = v5 - *a2;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    goto LABEL_92;
  v12 = v4 - v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      goto LABEL_93;
    v14 = operator new(8 * v13);
    v15 = &v14[8 * v10];
    v4 = &v14[8 * v13];
    *(_QWORD *)v15 = 0;
    v7 = v15 + 8;
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v4 = 0;
  *(_QWORD *)(8 * v10) = 0;
  v7 = (char *)(8 * v10 + 8);
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_96;
    if ((unint64_t)(v5 - v14 - v9) < 0x20)
      goto LABEL_96;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v15 -= v19;
    v20 = &v14[8 * v10 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_96:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *a2 = v15;
  a2[1] = v7;
  a2[2] = v4;
  if (v8)
  {
    operator delete(v8);
    v4 = a2[2];
  }
LABEL_22:
  a2[1] = v7;
  if (v7 < v4)
  {
    *(_QWORD *)v7 = 0;
    v25 = v7 + 8;
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 3;
  v29 = (v27 >> 3) + 1;
  if (v29 >> 61)
    goto LABEL_92;
  v30 = v4 - v26;
  if (v30 >> 2 > v29)
    v29 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    if (v31 >> 61)
      goto LABEL_93;
    v32 = operator new(8 * v31);
    v33 = &v32[8 * v28];
    v4 = &v32[8 * v31];
    *(_QWORD *)v33 = 0;
    v25 = v33 + 8;
    v34 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
  }
  else
  {
    v32 = 0;
    v33 = (char *)(8 * v28);
    v4 = 0;
    *(_QWORD *)(8 * v28) = 0;
    v25 = (char *)(8 * v28 + 8);
    v34 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
  }
  v35 = v34 - 8;
  if (v35 < 0x58)
  {
    v36 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v36 = v7;
    do
    {
LABEL_42:
      v43 = *((_QWORD *)v36 - 1);
      v36 -= 8;
      *((_QWORD *)v33 - 1) = v43;
      v33 -= 8;
    }
    while (v36 != v26);
    goto LABEL_43;
  }
  v37 = (v35 >> 3) + 1;
  v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
  v36 = &v7[-v38];
  v33 -= v38;
  v39 = &v32[8 * v28 - 16];
  v40 = v7 - 16;
  v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v42 = *(_OWORD *)v40;
    *(v39 - 1) = *((_OWORD *)v40 - 1);
    *v39 = v42;
    v39 -= 2;
    v40 -= 32;
    v41 -= 4;
  }
  while (v41);
  if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = v25;
  a2[2] = v4;
  if (v26)
  {
    operator delete(v26);
    v4 = a2[2];
  }
LABEL_45:
  a2[1] = v25;
  if (v25 < v4)
  {
    *(_QWORD *)v25 = 0;
    v44 = v25 + 8;
    goto LABEL_68;
  }
  v45 = *a2;
  v46 = v25 - *a2;
  v47 = v46 >> 3;
  v48 = (v46 >> 3) + 1;
  if (v48 >> 61)
    goto LABEL_92;
  v49 = v4 - v45;
  if (v49 >> 2 > v48)
    v48 = v49 >> 2;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
    v50 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v50 = v48;
  if (v50)
  {
    if (v50 >> 61)
      goto LABEL_93;
    v51 = operator new(8 * v50);
    v52 = &v51[8 * v47];
    v4 = &v51[8 * v50];
    *(_QWORD *)v52 = 0;
    v44 = v52 + 8;
    v53 = v25 - v45;
    if (v25 == v45)
      goto LABEL_66;
  }
  else
  {
    v51 = 0;
    v52 = (char *)(8 * v47);
    v4 = 0;
    *(_QWORD *)(8 * v47) = 0;
    v44 = (char *)(8 * v47 + 8);
    v53 = v25 - v45;
    if (v25 == v45)
      goto LABEL_66;
  }
  v54 = v53 - 8;
  if (v54 < 0x58)
  {
    v55 = v25;
    goto LABEL_65;
  }
  if ((unint64_t)(v25 - &v51[v46]) < 0x20)
  {
    v55 = v25;
    do
    {
LABEL_65:
      v62 = *((_QWORD *)v55 - 1);
      v55 -= 8;
      *((_QWORD *)v52 - 1) = v62;
      v52 -= 8;
    }
    while (v55 != v45);
    goto LABEL_66;
  }
  v56 = (v54 >> 3) + 1;
  v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
  v55 = &v25[-v57];
  v52 -= v57;
  v58 = &v51[8 * v47 - 16];
  v59 = v25 - 16;
  v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v61 = *(_OWORD *)v59;
    *(v58 - 1) = *((_OWORD *)v59 - 1);
    *v58 = v61;
    v58 -= 2;
    v59 -= 32;
    v60 -= 4;
  }
  while (v60);
  if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_65;
LABEL_66:
  *a2 = v52;
  a2[1] = v44;
  a2[2] = v4;
  if (v45)
  {
    operator delete(v45);
    v4 = a2[2];
  }
LABEL_68:
  a2[1] = v44;
  if (v44 < v4)
  {
    *(_QWORD *)v44 = 0;
    v63 = (uint64_t)(v44 + 8);
    goto LABEL_91;
  }
  v64 = *a2;
  v65 = v44 - *a2;
  v66 = v65 >> 3;
  v67 = (v65 >> 3) + 1;
  if (v67 >> 61)
LABEL_92:
    sub_20E867F44();
  v68 = v4 - v64;
  if (v68 >> 2 > v67)
    v67 = v68 >> 2;
  if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
    v69 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v69 = v67;
  if (!v69)
  {
    v70 = 0;
    v71 = (char *)(8 * v66);
    v72 = 0;
    *(_QWORD *)(8 * v66) = 0;
    v63 = 8 * v66 + 8;
    v73 = v44 - v64;
    if (v44 == v64)
      goto LABEL_89;
    goto LABEL_81;
  }
  if (v69 >> 61)
LABEL_93:
    sub_20E877A38();
  v70 = operator new(8 * v69);
  v71 = &v70[8 * v66];
  v72 = &v70[8 * v69];
  *(_QWORD *)v71 = 0;
  v63 = (uint64_t)(v71 + 8);
  v73 = v44 - v64;
  if (v44 == v64)
    goto LABEL_89;
LABEL_81:
  v74 = v73 - 8;
  if (v74 < 0x58)
  {
    v75 = v44;
    goto LABEL_88;
  }
  if ((unint64_t)(v44 - &v70[v65]) < 0x20)
  {
    v75 = v44;
    do
    {
LABEL_88:
      v82 = *((_QWORD *)v75 - 1);
      v75 -= 8;
      *((_QWORD *)v71 - 1) = v82;
      v71 -= 8;
    }
    while (v75 != v64);
    goto LABEL_89;
  }
  v76 = (v74 >> 3) + 1;
  v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
  v75 = &v44[-v77];
  v71 -= v77;
  v78 = &v70[8 * v66 - 16];
  v79 = v44 - 16;
  v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v81 = *(_OWORD *)v79;
    *(v78 - 1) = *((_OWORD *)v79 - 1);
    *v78 = v81;
    v78 -= 2;
    v79 -= 32;
    v80 -= 4;
  }
  while (v80);
  if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_88;
LABEL_89:
  *a2 = v71;
  a2[1] = (char *)v63;
  a2[2] = v72;
  if (v64)
    operator delete(v64);
LABEL_91:
  a2[1] = (char *)v63;
  *(_QWORD *)(v63 - 32) = *(_QWORD *)a1;
  *(_QWORD *)(v63 - 24) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v63 - 16) = *(_QWORD *)(a1 + 16);
  result = *(double *)(a1 + 24);
  *(double *)(v63 - 8) = result;
  return result;
}

void sub_20F184774(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  _QWORD *v29;
  uint64_t *v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  void *v34;
  unint64_t **v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t i;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v51;
  unint64_t *v52;
  _QWORD *v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  const char *v75;
  uint64_t v76;
  unsigned __int8 v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  const char *v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  const char *v87;
  size_t v88;
  _BYTE *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  size_t v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unsigned __int8 v141;
  const char *v142;
  size_t v143;
  _BYTE *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  size_t v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count *v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t *v209;
  _QWORD *v210;
  unint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  _QWORD *v223;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  unint64_t v249;
  char *v250;
  _DWORD *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  _BYTE *v258;
  int *v259;
  _DWORD *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  _OWORD *v265;
  char *v266;
  uint64_t v267;
  __int128 v268;
  int v269;
  _QWORD *v270;
  int v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  size_t v276;
  const char *v277;
  unsigned __int8 v278;
  const char *v279;
  size_t v280;
  _BYTE *v281;
  unint64_t v282;
  const char *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  NSObject *v290;
  uint64_t v291;
  uint64_t v292;
  size_t v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  void *v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v333;
  const char *v334;
  size_t v335;
  unsigned __int8 v336;
  unsigned __int8 v337;
  const char *v338;
  size_t v339;
  _BYTE *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  NSObject *v344;
  uint64_t v345;
  uint64_t v346;
  size_t v347;
  std::__shared_weak_count_vtbl *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  char *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  void *v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  char *v391;
  uint64_t v392;
  char *v393;
  int *v394;
  uint64_t v395;
  uint64_t v397;
  int v398;
  int v399;
  int __src;
  const char *__srca;
  int __srcb;
  int __srcc;
  unint64_t *v404;
  uint64_t *v405;
  int v406;
  int v407;
  uint64_t *v408;
  uint64_t *v409;
  uint64_t v410;
  unint64_t v411;
  _QWORD *v412;
  unint64_t v413;
  const char *v414;
  uint64_t *v415;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v417;
  int v418;
  const char *v419;
  int v420;
  const char *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  uint64_t v424;
  uint64_t v425;
  _QWORD v426[2];
  std::__shared_weak_count *v427;
  char *v428;
  char *v429;
  _BYTE v430[24];
  __int128 v431;
  char *v432;
  size_t v433;
  unint64_t v434;
  char v435;
  uint64_t v436;

  v436 = *MEMORY[0x24BDAC8D0];
  v10 = a5 - a4 + 1;
  v11 = a1[8];
  v406 = a4;
  v407 = a5;
  v12 = a1[5];
  v13 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v12) >> 3);
  __src = *(_DWORD *)(v12 + 56 * ((v11 + a4) % v13));
  v398 = *(_DWORD *)(v12 + 56 * ((v11 + a5) % v13));
  v14 = a7;
  v15 = (unint64_t)a7 << 8;
  v16 = a1[2] + v15;
  v18 = *(_QWORD *)(v16 + 8);
  v17 = (uint64_t *)(v16 + 8);
  v19 = 0x38E38E38E38E38E4 * ((v17[1] - v18) >> 4);
  sub_20FD36960((uint64_t)a2, 0, v10, 0);
  v408 = v17 + 1;
  v404 = a2;
  sub_20FD37108(a2, 0x8E38E38E38E38E39 * ((v17[1] - *v17) >> 4), v10, v19);
  v412 = a1;
  v20 = a1[2] + v15;
  v21 = *(_QWORD *)(v20 + 232);
  v22 = *(_QWORD *)(v20 + 240);
  if (v21 != v22)
  {
    sub_20FD36E88((uint64_t)a2, 0, (unint64_t)(v22 - v21) >> 3);
    sub_20FD37948((uint64_t)a2, v19, (*(_QWORD *)(a1[2] + (v14 << 8) + 240) - *(_QWORD *)(a1[2] + (v14 << 8) + 232)) >> 3);
    v23 = a1[2] + (v14 << 8);
    v24 = *(uint64_t **)(v23 + 232);
    v25 = *(uint64_t **)(v23 + 240);
    if (v24 != v25)
    {
      v26 = 0;
      do
      {
        v27 = *v24++;
        a2[10 * v26++ + 37] = v27;
      }
      while (v24 != v25);
    }
  }
  v28 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v30 = v17 + 1;
  v29 = a1;
  v31 = 0x8E38E38E38E38E39 * ((*v408 - *v17) >> 4);
  if (v31 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v28) >> 2)
  {
    if (v31 >> 62)
      sub_20EABADD4();
    v32 = 0x38E38E38E38E38E4 * ((*v408 - *v17) >> 4);
    v33 = (char *)operator new(v32);
    *(_QWORD *)a3 = v33;
    *(_QWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 16) = &v33[v32];
    if (v28)
      operator delete(v28);
  }
  v35 = (unint64_t **)(a1 + 11);
  v34 = (void *)v412[11];
  v412[12] = v34;
  v36 = 0x8E38E38E38E38E39 * ((*v408 - *v17) >> 4);
  if (v36 > (uint64_t)(v412[13] - (_QWORD)v34) >> 4)
  {
    if (v36 >> 60)
LABEL_541:
      sub_20E867F44();
    v37 = 0xE38E38E38E38E390 * ((*v408 - *v17) >> 4);
    v38 = (char *)operator new(v37);
    v412[11] = v38;
    v412[12] = v38;
    v412[13] = &v38[v37];
    if (v34)
      operator delete(v34);
  }
  v395 = v14;
  v397 = a3;
  v39 = *v408;
  v405 = v17;
  v40 = *v17;
  v41 = __src;
  v42 = v398;
  if (*v408 != *v17)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v39 - v40) >> 4); ++i)
    {
      if ((*(_DWORD *)(v40 + 144 * i) & 0x80000000) != 0)
      {
        if (!*(_QWORD *)(v40 + 144 * i + 80))
          break;
        continue;
      }
      v44 = v40 + 144 * i;
      v45 = *(_QWORD *)(v44 + 80);
      if (!v45)
        break;
      v46 = (uint64_t *)(v44 + 40);
      v47 = *(_QWORD *)(v40 + 144 * i + 72);
      if (v47)
      {
        v48 = *v46;
        if (*(_DWORD *)(v48 + 336 * v47 - 16) >= v41)
          goto LABEL_23;
      }
      else
      {
        v48 = *v46;
        if (*(_DWORD *)(v48 + 16 * ((*(_QWORD *)(v40 + 144 * i + 48) - v48) >> 4) - 16) >= v41)
        {
LABEL_23:
          v49 = *(_DWORD *)(v48 + 336 * *(_QWORD *)(v40 + 144 * i + 64) + 320);
          if (v45 < 2 || v49 > v42)
            continue;
          v52 = (unint64_t *)v29[12];
          v51 = v29[13];
          if ((unint64_t)v52 < v51)
          {
            *v52 = v45;
            v52[1] = i;
            v53 = v52 + 2;
LABEL_46:
            v412[12] = v53;
            v29 = v412;
            v39 = *v30;
            v40 = *v17;
            continue;
          }
          v54 = *v35;
          v55 = ((char *)v52 - (char *)*v35) >> 4;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 60)
            goto LABEL_541;
          v57 = v51 - (_QWORD)v54;
          if (v57 >> 3 > v56)
            v56 = v57 >> 3;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
            v58 = 0xFFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            if (v58 >> 60)
              sub_20E877A38();
            v59 = (char *)operator new(16 * v58);
            v60 = (unint64_t *)&v59[16 * v55];
            *v60 = v45;
            v60[1] = i;
            v61 = (uint64_t)v60;
            if (v52 == v54)
              goto LABEL_43;
            do
            {
LABEL_41:
              *(_OWORD *)(v61 - 16) = *((_OWORD *)v52 - 1);
              v61 -= 16;
              v52 -= 2;
            }
            while (v52 != v54);
            v52 = *v35;
          }
          else
          {
            v59 = 0;
            v60 = (unint64_t *)(16 * v55);
            *v60 = v45;
            v60[1] = i;
            v61 = 16 * v55;
            if (v52 != v54)
              goto LABEL_41;
          }
LABEL_43:
          v62 = &v59[16 * v58];
          v53 = v60 + 2;
          v30 = v17 + 1;
          v412[11] = v61;
          v412[12] = v60 + 2;
          v412[13] = v62;
          if (v52)
            operator delete(v52);
          v41 = __src;
          v42 = v398;
          goto LABEL_46;
        }
      }
    }
  }
  v63 = v29[11];
  v64 = (char *)v29[12];
  v65 = 126 - 2 * __clz((uint64_t)&v64[-v63] >> 4);
  if (v64 == (char *)v63)
    v66 = 0;
  else
    v66 = v65;
  sub_20F18B1F8(v63, v64, v66, 1);
  if (v29[11] == v29[12])
  {
    sub_20F1729F0(&v424);
    v67 = v407;
    if (**(int **)(v424 + 56) > 2
      || (v78 = *(unsigned __int8 *)(v424 + 72),
          v79 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0),
          v80 = v79,
          !v78)
      && !v79)
    {
LABEL_233:
      v68 = v412;
      goto LABEL_234;
    }
    v415 = &v424;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v417 = std::chrono::system_clock::now().__d_.__rep_;
    v418 = 2;
    v419 = "unknown file";
    v420 = 1815;
    v422 = 0;
    v423 = 0;
    v421 = "unknown function";
    v81 = v424;
    v82 = v424 + 16;
    if (*(char *)(v424 + 39) < 0)
    {
      v84 = *(const char **)(v424 + 16);
      v83 = *(_QWORD *)(v424 + 24);
      v141 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v141 & 1) != 0)
        goto LABEL_149;
    }
    else
    {
      v83 = *(unsigned __int8 *)(v424 + 39);
      v84 = (const char *)(*v415 + 16);
      v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v85 & 1) != 0)
        goto LABEL_149;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v430);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
      if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
        operator delete(*(void **)v430);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_149:
    if (byte_254A4A4F8[23] >= 0)
      v142 = byte_254A4A4F8;
    else
      v142 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v143 = byte_254A4A4F8[23];
    else
      v143 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v430 = os_log_create(v142, v84);
    v144 = &v430[8];
    if (v143 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v143 >= 0x17)
    {
      v145 = v80;
      v146 = v81;
      v147 = v78;
      v148 = v82;
      v149 = v84;
      v150 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v143 | 7) != 0x17)
        v150 = v143 | 7;
      v151 = v150 + 1;
      v144 = operator new(v150 + 1);
      *(_QWORD *)&v430[16] = v143;
      *(_QWORD *)&v431 = v151 | 0x8000000000000000;
      *(_QWORD *)&v430[8] = v144;
      v84 = v149;
      v82 = v148;
      v78 = v147;
      v81 = v146;
      v80 = v145;
    }
    else
    {
      BYTE7(v431) = v143;
      if (!v143)
      {
LABEL_163:
        v144[v143] = 0;
        BYTE8(v431) = 1;
        v152 = (char *)&v432;
        if (v83 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v83 >= 0x17)
        {
          v153 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17)
            v153 = v83 | 7;
          v154 = v153 + 1;
          v152 = (char *)operator new(v153 + 1);
          v433 = v83;
          v434 = v154 | 0x8000000000000000;
          v432 = v152;
        }
        else
        {
          HIBYTE(v434) = v83;
          if (!v83)
            goto LABEL_171;
        }
        memmove(v152, v84, v83);
LABEL_171:
        v152[v83] = 0;
        v435 = 1;
        v155 = *(NSObject **)v430;
        if (SHIBYTE(v434) < 0)
          operator delete(v432);
        if (BYTE8(v431) && SBYTE7(v431) < 0)
          operator delete(*(void **)&v430[8]);
        if (*(_QWORD *)v430)
          os_release(*(void **)v430);
        if (v80 && *(_QWORD *)(v80 + 24))
        {
          v156 = _os_log_pack_size();
          v157 = (std::__shared_weak_count_vtbl *)operator new(v156, (std::align_val_t)8uLL);
          v158 = (std::__shared_weak_count *)operator new();
          v159 = v158;
          v158->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v158->__shared_owners_;
          v158->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v158->__shared_weak_owners_ = 0;
          v158[1].__vftable = v157;
          *(_QWORD *)v430 = v157;
          *(_QWORD *)&v430[8] = v157;
          *(_QWORD *)&v430[16] = v158;
          do
            v161 = __ldxr(p_shared_owners);
          while (__stxr(v161 + 1, p_shared_owners));
          v431 = 0uLL;
          v432 = 0;
          do
            v162 = __ldaxr(p_shared_owners);
          while (__stlxr(v162 - 1, p_shared_owners));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v159);
          }
          v163 = *(_QWORD *)v430;
          *(_WORD *)_os_log_pack_fill() = 0;
          v164 = operator new();
          v165 = *(unsigned __int8 *)(v81 + 39);
          if ((v165 & 0x80u) == 0)
            v166 = v82;
          else
            v166 = *(_QWORD *)(v81 + 16);
          if ((v165 & 0x80u) != 0)
            v165 = *(_QWORD *)(v81 + 24);
          *(_QWORD *)v164 = v163;
          *(_OWORD *)(v164 + 8) = *(_OWORD *)&v430[8];
          *(_QWORD *)&v430[8] = 0;
          *(_QWORD *)&v430[16] = 0;
          *(_OWORD *)(v164 + 24) = v431;
          v431 = 0uLL;
          *(_QWORD *)(v164 + 40) = v166;
          *(_QWORD *)(v164 + 48) = v165;
          *(_BYTE *)(v164 + 56) = 2;
          v425 = 0;
          v426[0] = v164;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v80 + 24) + 40))(*(_QWORD *)(v80 + 24), v426);
          v67 = v407;
          v167 = v426[0];
          v426[0] = 0;
          if (v167)
          {
            v168 = *(std::__shared_weak_count **)(v167 + 32);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            v171 = *(std::__shared_weak_count **)(v167 + 16);
            if (v171)
            {
              v172 = (unint64_t *)&v171->__shared_owners_;
              do
                v173 = __ldaxr(v172);
              while (__stlxr(v173 - 1, v172));
              if (!v173)
              {
                ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                std::__shared_weak_count::__release_weak(v171);
              }
            }
            MEMORY[0x212BC6398](v167, 0x10F0C40B62ED6C6);
            v174 = v425;
            v425 = 0;
            if (v174)
            {
              v175 = *(std::__shared_weak_count **)(v174 + 32);
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              v178 = *(std::__shared_weak_count **)(v174 + 16);
              if (v178)
              {
                v179 = (unint64_t *)&v178->__shared_owners_;
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
              MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
            }
          }
          v181 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
          if (*((_QWORD *)&v431 + 1))
          {
            v182 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          v184 = *(std::__shared_weak_count **)&v430[16];
          if (*(_QWORD *)&v430[16])
          {
            v185 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
        }
        else
        {
          os_log_type_enabled(v155, OS_LOG_TYPE_DEBUG);
          *(_WORD *)v430 = 0;
          v187 = (void *)_os_log_send_and_compose_impl();
          v67 = v407;
          if (v187)
            free(v187);
        }
        if (v78)
        {
          sub_20E8C003C((uint64_t)&v415, "No tracks in supplied frame range.");
          sub_20E863570((uint64_t)&v415);
        }
        sub_20E863570((uint64_t)&v415);
        v188 = v423;
        if (v423)
        {
          v189 = (unint64_t *)&v423->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        goto LABEL_233;
      }
    }
    memmove(v144, v142, v143);
    goto LABEL_163;
  }
  sub_20F1729F0(&v424);
  v67 = v407;
  v68 = v412;
  if (**(int **)(v424 + 56) <= 2)
  {
    v69 = *(unsigned __int8 *)(v424 + 72);
    v70 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
    v71 = v70;
    if (v69 || v70)
    {
      v415 = &v424;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v417 = std::chrono::system_clock::now().__d_.__rep_;
      v418 = 2;
      v419 = "unknown file";
      v420 = 1813;
      v422 = 0;
      v423 = 0;
      v421 = "unknown function";
      v72 = v424;
      v73 = v424 + 16;
      if (*(char *)(v424 + 39) < 0)
      {
        v75 = *(const char **)(v424 + 16);
        v74 = *(_QWORD *)(v424 + 24);
        v76 = v412[12];
        v409 = (uint64_t *)v412[11];
        v86 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v86 & 1) != 0)
          goto LABEL_64;
      }
      else
      {
        v74 = *(unsigned __int8 *)(v424 + 39);
        v75 = (const char *)(*v415 + 16);
        v76 = v412[12];
        v409 = (uint64_t *)v412[11];
        v77 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v77 & 1) != 0)
          goto LABEL_64;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v430);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
        if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
          operator delete(*(void **)v430);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_64:
      if (byte_254A4A4F8[23] >= 0)
        v87 = byte_254A4A4F8;
      else
        v87 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v88 = byte_254A4A4F8[23];
      else
        v88 = *(_QWORD *)&byte_254A4A4F8[8];
      __srca = v75;
      *(_QWORD *)v430 = os_log_create(v87, v75);
      v89 = &v430[8];
      if (v88 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v88 >= 0x17)
      {
        v90 = v71;
        v91 = v72;
        v92 = v76;
        v93 = v73;
        v94 = v69;
        v95 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v95 = v88 | 7;
        v96 = v95 + 1;
        v89 = operator new(v95 + 1);
        *(_QWORD *)&v430[16] = v88;
        *(_QWORD *)&v431 = v96 | 0x8000000000000000;
        *(_QWORD *)&v430[8] = v89;
        v69 = v94;
        v73 = v93;
        v76 = v92;
        v72 = v91;
        v71 = v90;
      }
      else
      {
        BYTE7(v431) = v88;
        if (!v88)
        {
LABEL_78:
          v89[v88] = 0;
          BYTE8(v431) = 1;
          v97 = (char *)&v432;
          if (v74 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v74 >= 0x17)
          {
            v98 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v74 | 7) != 0x17)
              v98 = v74 | 7;
            v99 = v98 + 1;
            v97 = (char *)operator new(v98 + 1);
            v433 = v74;
            v434 = v99 | 0x8000000000000000;
            v432 = v97;
          }
          else
          {
            HIBYTE(v434) = v74;
            if (!v74)
              goto LABEL_86;
          }
          memmove(v97, __srca, v74);
LABEL_86:
          v97[v74] = 0;
          v435 = 1;
          v100 = *(NSObject **)v430;
          if (SHIBYTE(v434) < 0)
            operator delete(v432);
          if (BYTE8(v431) && SBYTE7(v431) < 0)
            operator delete(*(void **)&v430[8]);
          if (*(_QWORD *)v430)
            os_release(*(void **)v430);
          if (v71 && *(_QWORD *)(v71 + 24))
          {
            __srcb = v69;
            v101 = _os_log_pack_size();
            v102 = (std::__shared_weak_count_vtbl *)operator new(v101, (std::align_val_t)8uLL);
            v103 = (std::__shared_weak_count *)operator new();
            v68 = v412;
            v104 = v103;
            v103->__shared_owners_ = 0;
            v105 = (unint64_t *)&v103->__shared_owners_;
            v103->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v103->__shared_weak_owners_ = 0;
            v103[1].__vftable = v102;
            *(_QWORD *)v430 = v102;
            *(_QWORD *)&v430[8] = v102;
            *(_QWORD *)&v430[16] = v103;
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
            v431 = 0uLL;
            v432 = 0;
            do
              v107 = __ldaxr(v105);
            while (__stlxr(v107 - 1, v105));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v104);
            }
            v108 = *(_QWORD *)v430;
            v109 = _os_log_pack_fill();
            v110 = *v409;
            v111 = *(_QWORD *)(v76 - 16);
            *(_DWORD *)v109 = 134218496;
            *(_QWORD *)(v109 + 4) = (v76 - (uint64_t)v409) >> 4;
            *(_WORD *)(v109 + 12) = 2048;
            *(_QWORD *)(v109 + 14) = v110;
            *(_WORD *)(v109 + 22) = 2048;
            *(_QWORD *)(v109 + 24) = v111;
            v112 = operator new();
            v113 = *(unsigned __int8 *)(v72 + 39);
            if ((v113 & 0x80u) == 0)
              v114 = v73;
            else
              v114 = *(_QWORD *)(v72 + 16);
            if ((v113 & 0x80u) != 0)
              v113 = *(_QWORD *)(v72 + 24);
            *(_QWORD *)v112 = v108;
            *(_OWORD *)(v112 + 8) = *(_OWORD *)&v430[8];
            *(_QWORD *)&v430[8] = 0;
            *(_QWORD *)&v430[16] = 0;
            *(_OWORD *)(v112 + 24) = v431;
            v431 = 0uLL;
            *(_QWORD *)(v112 + 40) = v114;
            *(_QWORD *)(v112 + 48) = v113;
            *(_BYTE *)(v112 + 56) = 2;
            v425 = 0;
            v426[0] = v112;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v71 + 24) + 40))(*(_QWORD *)(v71 + 24), v426);
            v115 = v426[0];
            v426[0] = 0;
            v67 = v407;
            v69 = __srcb;
            if (v115)
            {
              v116 = *(std::__shared_weak_count **)(v115 + 32);
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = *(std::__shared_weak_count **)(v115 + 16);
              if (v119)
              {
                v120 = (unint64_t *)&v119->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              MEMORY[0x212BC6398](v115, 0x10F0C40B62ED6C6);
              v122 = v425;
              v425 = 0;
              if (v122)
              {
                v123 = *(std::__shared_weak_count **)(v122 + 32);
                if (v123)
                {
                  v124 = (unint64_t *)&v123->__shared_owners_;
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = *(std::__shared_weak_count **)(v122 + 16);
                if (v126)
                {
                  v127 = (unint64_t *)&v126->__shared_owners_;
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                MEMORY[0x212BC6398](v122, 0x10F0C40B62ED6C6);
              }
            }
            v129 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
            if (*((_QWORD *)&v431 + 1))
            {
              v130 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)&v430[16];
            if (*(_QWORD *)&v430[16])
            {
              v133 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          else
          {
            os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG);
            v135 = *v409;
            v136 = *(_QWORD *)(v76 - 16);
            *(_DWORD *)v430 = 134218496;
            *(_QWORD *)&v430[4] = (v76 - (uint64_t)v409) >> 4;
            *(_WORD *)&v430[12] = 2048;
            *(_QWORD *)&v430[14] = v135;
            *(_WORD *)&v430[22] = 2048;
            *(_QWORD *)&v431 = v136;
            v137 = (void *)_os_log_send_and_compose_impl();
            v67 = v407;
            v68 = v412;
            if (v137)
              free(v137);
          }
          if (v69)
          {
            sub_20E8C003C((uint64_t)&v415, "Tracks in range: %zu With lengths: %zu to %zu", (uint64_t)(v68[12] - v68[11]) >> 4, *(_QWORD *)v68[11], *(_QWORD *)(v68[12] - 16));
            sub_20E863570((uint64_t)&v415);
          }
          sub_20E863570((uint64_t)&v415);
          v138 = v423;
          if (v423)
          {
            v139 = (unint64_t *)&v423->__shared_owners_;
            do
              v140 = __ldaxr(v139);
            while (__stlxr(v140 - 1, v139));
            if (!v140)
            {
              ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
              std::__shared_weak_count::__release_weak(v138);
            }
          }
          goto LABEL_234;
        }
      }
      memmove(v89, v87, v88);
      goto LABEL_78;
    }
  }
LABEL_234:
  v192 = v68[11];
  v191 = v68[12];
  v193 = v406;
  if (v192 == v191)
  {
    v399 = 0;
    __srcc = 0;
    goto LABEL_349;
  }
  v399 = 0;
  __srcc = 0;
  v410 = v68[12];
  do
  {
    v194 = *v405;
    v195 = *((unsigned __int8 *)v68 + 8);
    v196 = v68[10];
    while (1)
    {
      v199 = *(_QWORD *)(v192 + 8);
      if (v195)
      {
        v200 = *(_QWORD *)(v194 + 144 * v199 + 80);
        if (v200 < v196)
        {
          if (v200)
          {
            v201 = (_QWORD *)(v194 + 144 * v199 + 40);
            v202 = *(_QWORD *)(v194 + 144 * v199 + 72);
            if (v202)
            {
              v203 = *(_DWORD *)(*v201 + 336 * v202 - 16);
              v204 = v68[9];
              if (v204)
                goto LABEL_245;
              goto LABEL_285;
            }
            v203 = *(_DWORD *)(*v201 + 16 * ((uint64_t)(*(_QWORD *)(v194 + 144 * v199 + 48) - *v201) >> 4) - 16);
            v204 = v68[9];
            if (!v204)
            {
LABEL_285:
              v205 = v68[5];
              if (v203 == *(_DWORD *)(v205 + 8 * ((v68[6] - v205) >> 3) - 56))
                goto LABEL_239;
              goto LABEL_249;
            }
          }
          else
          {
            v203 = -1;
            v204 = v68[9];
            if (!v204)
              goto LABEL_285;
          }
LABEL_245:
          v205 = v68[5];
          if (v203 == *(_DWORD *)(v205 + 56 * v204 - 56))
            goto LABEL_239;
          goto LABEL_249;
        }
      }
      if (v196)
      {
        v205 = v68[5];
        v200 = *(_QWORD *)(v194 + 144 * v199 + 80);
LABEL_249:
        v206 = 0;
        v207 = (_QWORD *)(v194 + 144 * v199);
        v208 = v207 + 5;
        v209 = v207 + 9;
        v210 = v207 + 6;
        while (1)
        {
          if (v200)
          {
            v211 = *v209;
            if (!*v209)
              v211 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*v210 - *v208) >> 4);
            v212 = *(_DWORD *)(*v208 + 336 * v211 - 16);
          }
          else
          {
            v212 = -1;
          }
          if (*(_DWORD *)(v205
                         + 56 * ((v68[8] + v206) % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v68[6] - v205) >> 3)))) == v212)
            goto LABEL_261;
          if (v196 == ++v206)
            goto LABEL_260;
        }
      }
      v200 = *(_QWORD *)(v194 + 144 * v199 + 80);
LABEL_260:
      LODWORD(v206) = -1;
LABEL_261:
      v213 = v206 - v200 + 1;
      if (v213 > v193)
        v214 = v206 - v200 + 1;
      else
        v214 = v193;
      if ((int)v206 >= v67)
        v215 = v67;
      else
        v215 = v206;
      v216 = (uint64_t *)(v194 + 144 * v199);
      v217 = v216 + 11;
      v197 = v216[16];
      v218 = v214 - v213;
      v219 = v197 == v218;
      v220 = v215 - v214 + 1;
      v221 = v220 + v218;
      v222 = v216 + 14;
      v223 = v216 + 12;
      if (v220 + v218 == v197)
      {
        if (v197 == v218)
          goto LABEL_237;
        v221 = v214 - v213;
        do
        {
          if (*(_BYTE *)(*v217 + (*v222 + v221) % (unint64_t)(*v223 - *v217)))
          {
LABEL_278:
            v191 = v410;
            goto LABEL_294;
          }
          ++v221;
        }
        while (v197 != v221);
        LODWORD(v221) = v216[16];
        v191 = v410;
LABEL_291:
        if (v197 == v218)
          goto LABEL_237;
        if (v213 >= v193)
        {
          v197 = -v197;
          goto LABEL_238;
        }
LABEL_299:
        LODWORD(v197) = v218 - v221;
        goto LABEL_238;
      }
      if (v197 == v218 || (_DWORD)v220 != 0)
      {
        v225 = *v223 - *v217;
        v226 = v214 - v213;
        if (!*(_BYTE *)(*v217 + (*v222 + v218) % v225))
        {
          v227 = 1 - v220;
          v228 = v197 - 1;
          v226 = v214 - v213;
          do
          {
            v219 = v228 == v226;
            if (v228 != v226 && !v227)
            {
              v193 = v406;
              v67 = v407;
              v68 = v412;
              goto LABEL_278;
            }
            v229 = *(unsigned __int8 *)(*v217 + (*v222 + 1 + v226) % v225);
            ++v227;
            ++v226;
          }
          while (!v229);
          v193 = v406;
          v67 = v407;
        }
        v221 = v226;
        v191 = v410;
        v68 = v412;
        if (v219)
          goto LABEL_291;
      }
LABEL_294:
      if (!v221 && v197 != v218 && v213 >= v193)
      {
LABEL_237:
        LODWORD(v197) = 0;
        goto LABEL_238;
      }
      if (v221 || v197 != v218)
        goto LABEL_299;
LABEL_238:
      v198 = v220 + v197;
      if ((int)v220 + (int)v197 >= 3)
        break;
LABEL_239:
      v192 += 16;
      if (v192 == v191)
        goto LABEL_349;
    }
    v230 = v218 - v197;
    v231 = *v222;
    v232 = *v217;
    v233 = *v223 - *v217;
    v234 = v230;
    v235 = (v215 + v197 - v214);
    if (!(_DWORD)v235)
    {
      v236 = 0;
      v237 = v230;
      goto LABEL_309;
    }
    v238 = 0;
    v239 = 0;
    v240 = v235 + 1;
    v235 = (v235 + 1) & 0x1FFFFFFFELL;
    v237 = v235 + v234;
    v241 = v231 + v234;
    v242 = v235;
    do
    {
      if (*(_BYTE *)(v232 + v241 % v233))
        ++v238;
      if (*(_BYTE *)(v232 + (v241 + 1) % v233))
        ++v239;
      v241 += 2;
      v242 -= 2;
    }
    while (v242);
    v236 = v239 + v238;
    v191 = v410;
    if (v240 != v235)
    {
LABEL_309:
      v243 = v237 + v231;
      if ((int)v206 >= v407)
        v244 = v407;
      else
        v244 = v206;
      v245 = v244 - v235 + v197;
      v246 = v206 - v200;
      if (v246 + 1 > v193)
        v247 = v246 + 1;
      else
        v247 = v193;
      v248 = v245 - v247 + 1;
      do
      {
        if (*(_BYTE *)(v232 + v243 % v233))
          ++v236;
        ++v243;
        --v248;
      }
      while (v248);
    }
    if (v236 >= 3)
    {
      if (*(_QWORD *)(v68[2] + (v395 << 8) + 232) != *(_QWORD *)(v68[2] + (v395 << 8) + 240))
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1727, (uint64_t)"", 0, (uint64_t)"Not implemented for lines", 25, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v394 = (int *)(v194 + 144 * v199);
      sub_20F1872F0((uint64_t)v404, v394, v198, v234, v214 - (v193 + v197));
      v250 = *(char **)(v397 + 8);
      v249 = *(_QWORD *)(v397 + 16);
      if ((unint64_t)v250 < v249)
      {
        *(_DWORD *)v250 = *v394;
        v251 = v250 + 4;
        goto LABEL_342;
      }
      v252 = *(char **)v397;
      v253 = (uint64_t)&v250[-*(_QWORD *)v397];
      v254 = v253 >> 2;
      v255 = (v253 >> 2) + 1;
      if (v255 >> 62)
        sub_20EABADD4();
      v256 = v249 - (_QWORD)v252;
      if (v256 >> 1 > v255)
        v255 = v256 >> 1;
      if ((unint64_t)v256 >= 0x7FFFFFFFFFFFFFFCLL)
        v257 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v257 = v255;
      if (v257)
      {
        v391 = &v250[-*(_QWORD *)v397];
        v392 = v253 >> 2;
        v393 = *(char **)v397;
        if (v257 >> 62)
          sub_20E877A38();
        v390 = v257;
        v258 = operator new(4 * v257);
        v254 = v392;
        v252 = v393;
        v257 = v390;
        v253 = (uint64_t)v391;
      }
      else
      {
        v258 = 0;
      }
      v259 = (int *)&v258[4 * v254];
      *v259 = *v394;
      v260 = v259 + 1;
      if (v250 != v252)
      {
        v261 = v250 - v252 - 4;
        if (v261 < 0x2C)
          goto LABEL_577;
        if ((unint64_t)(v250 - v258 - v253) < 0x20)
          goto LABEL_577;
        v262 = (v261 >> 2) + 1;
        v263 = 4 * (v262 & 0x7FFFFFFFFFFFFFF8);
        v264 = &v250[-v263];
        v259 = (int *)((char *)v259 - v263);
        v265 = &v258[4 * v254 - 16];
        v266 = v250 - 16;
        v267 = v262 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v268 = *(_OWORD *)v266;
          *(v265 - 1) = *((_OWORD *)v266 - 1);
          *v265 = v268;
          v265 -= 2;
          v266 -= 32;
          v267 -= 8;
        }
        while (v267);
        v250 = v264;
        if (v262 != (v262 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_577:
          do
          {
            v269 = *((_DWORD *)v250 - 1);
            v250 -= 4;
            *--v259 = v269;
          }
          while (v250 != v252);
        }
      }
      *(_QWORD *)v397 = v259;
      *(_QWORD *)(v397 + 8) = v260;
      *(_QWORD *)(v397 + 16) = &v258[4 * v257];
      if (v252)
      {
        v251 = v260;
        operator delete(v252);
LABEL_342:
        v260 = v251;
      }
      v193 = v406;
      v191 = v410;
      v68 = v412;
      v399 += v236;
      *(_QWORD *)(v397 + 8) = v260;
      if (*((_BYTE *)v412 + 8))
      {
        *(_QWORD *)v394 = -1;
        v270 = (_QWORD *)(v194 + 144 * v199);
        v270[9] = 0;
        v270[10] = 0;
        v270[8] = 0;
        v222[1] = 0;
        v222[2] = 0;
        *v222 = 0;
      }
    }
    v67 = v407;
    __srcc += v198;
    if (*v404 >= a6)
      break;
    v192 += 16;
  }
  while (v192 != v191);
LABEL_349:
  sub_20F1729F0(&v424);
  if (**(int **)(v424 + 56) > 3)
    goto LABEL_440;
  v271 = *(unsigned __int8 *)(v424 + 72);
  v272 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
  v273 = v272;
  if (!v271 && !v272)
    goto LABEL_440;
  v415 = &v424;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v417 = std::chrono::system_clock::now().__d_.__rep_;
  v418 = 3;
  v419 = "unknown file";
  v420 = 1914;
  v422 = 0;
  v423 = 0;
  v421 = "unknown function";
  v274 = *v415;
  v275 = *v415 + 16;
  if (*(char *)(*v415 + 39) < 0)
  {
    v277 = *(const char **)(v274 + 16);
    v276 = *(_QWORD *)(v274 + 24);
  }
  else
  {
    v276 = *(unsigned __int8 *)(*v415 + 39);
    v277 = (const char *)(*v415 + 16);
  }
  v411 = v404[1];
  v413 = *v404;
  v278 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v278 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v430);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
    if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
      operator delete(*(void **)v430);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v279 = byte_254A4A4F8;
  else
    v279 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v280 = byte_254A4A4F8[23];
  else
    v280 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v430 = os_log_create(v279, v277);
  v281 = &v430[8];
  if (v280 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v280 >= 0x17)
  {
    v282 = v273;
    v283 = v277;
    v284 = v274;
    v285 = v271;
    v286 = v275;
    v287 = (v280 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v280 | 7) != 0x17)
      v287 = v280 | 7;
    v288 = v287 + 1;
    v281 = operator new(v287 + 1);
    *(_QWORD *)&v430[16] = v280;
    *(_QWORD *)&v431 = v288 | 0x8000000000000000;
    *(_QWORD *)&v430[8] = v281;
    v275 = v286;
    v271 = v285;
    v274 = v284;
    v277 = v283;
    v273 = v282;
    goto LABEL_369;
  }
  BYTE7(v431) = v280;
  if (v280)
LABEL_369:
    memmove(v281, v279, v280);
  v281[v280] = 0;
  BYTE8(v431) = 1;
  v289 = (char *)&v432;
  if (v276 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v276 >= 0x17)
  {
    v291 = (v276 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v276 | 7) != 0x17)
      v291 = v276 | 7;
    v292 = v291 + 1;
    v289 = (char *)operator new(v291 + 1);
    v433 = v276;
    v434 = v292 | 0x8000000000000000;
    v432 = v289;
  }
  else
  {
    HIBYTE(v434) = v276;
    if (!v276)
    {
      LOBYTE(v432) = 0;
      v435 = 1;
      v290 = *(NSObject **)v430;
      if ((SHIBYTE(v434) & 0x80000000) == 0)
        goto LABEL_374;
LABEL_380:
      operator delete(v432);
      if (BYTE8(v431))
        goto LABEL_381;
      goto LABEL_383;
    }
  }
  memmove(v289, v277, v276);
  v289[v276] = 0;
  v435 = 1;
  v290 = *(NSObject **)v430;
  if (SHIBYTE(v434) < 0)
    goto LABEL_380;
LABEL_374:
  if (BYTE8(v431))
  {
LABEL_381:
    if (SBYTE7(v431) < 0)
      operator delete(*(void **)&v430[8]);
  }
LABEL_383:
  if (*(_QWORD *)v430)
    os_release(*(void **)v430);
  if (v273 && *(_QWORD *)(v273 + 24))
  {
    v293 = _os_log_pack_size();
    v294 = (std::__shared_weak_count_vtbl *)operator new(v293, (std::align_val_t)8uLL);
    v295 = (std::__shared_weak_count *)operator new();
    v296 = v295;
    v295->__shared_owners_ = 0;
    v297 = (unint64_t *)&v295->__shared_owners_;
    v295->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v295->__shared_weak_owners_ = 0;
    v295[1].__vftable = v294;
    *(_QWORD *)v430 = v294;
    *(_QWORD *)&v430[8] = v294;
    *(_QWORD *)&v430[16] = v295;
    do
      v298 = __ldxr(v297);
    while (__stxr(v298 + 1, v297));
    v431 = 0uLL;
    v432 = 0;
    do
      v299 = __ldaxr(v297);
    while (__stlxr(v299 - 1, v297));
    if (!v299)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v296);
    }
    v300 = *(_QWORD *)v430;
    v301 = _os_log_pack_fill();
    *(_DWORD *)v301 = 134218240;
    *(_QWORD *)(v301 + 4) = v411;
    *(_WORD *)(v301 + 12) = 2048;
    *(_QWORD *)(v301 + 14) = v413;
    v302 = operator new();
    v303 = *(unsigned __int8 *)(v274 + 39);
    if ((v303 & 0x80u) == 0)
      v304 = v275;
    else
      v304 = *(_QWORD *)(v274 + 16);
    if ((v303 & 0x80u) != 0)
      v303 = *(_QWORD *)(v274 + 24);
    *(_QWORD *)v302 = v300;
    *(_OWORD *)(v302 + 8) = *(_OWORD *)&v430[8];
    *(_QWORD *)&v430[8] = 0;
    *(_QWORD *)&v430[16] = 0;
    *(_OWORD *)(v302 + 24) = v431;
    v431 = 0uLL;
    *(_QWORD *)(v302 + 40) = v304;
    *(_QWORD *)(v302 + 48) = v303;
    *(_BYTE *)(v302 + 56) = 1;
    v425 = 0;
    v426[0] = v302;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v273 + 24) + 40))(*(_QWORD *)(v273 + 24), v426);
    v305 = v426[0];
    v426[0] = 0;
    if (v305)
    {
      v306 = *(std::__shared_weak_count **)(v305 + 32);
      if (v306)
      {
        v307 = (unint64_t *)&v306->__shared_owners_;
        do
          v308 = __ldaxr(v307);
        while (__stlxr(v308 - 1, v307));
        if (!v308)
        {
          ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
          std::__shared_weak_count::__release_weak(v306);
        }
      }
      v309 = *(std::__shared_weak_count **)(v305 + 16);
      if (v309)
      {
        v310 = (unint64_t *)&v309->__shared_owners_;
        do
          v311 = __ldaxr(v310);
        while (__stlxr(v311 - 1, v310));
        if (!v311)
        {
          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
          std::__shared_weak_count::__release_weak(v309);
        }
      }
      MEMORY[0x212BC6398](v305, 0x10F0C40B62ED6C6);
      v312 = v425;
      v425 = 0;
      if (v312)
      {
        v313 = *(std::__shared_weak_count **)(v312 + 32);
        if (v313)
        {
          v314 = (unint64_t *)&v313->__shared_owners_;
          do
            v315 = __ldaxr(v314);
          while (__stlxr(v315 - 1, v314));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
            std::__shared_weak_count::__release_weak(v313);
          }
        }
        v316 = *(std::__shared_weak_count **)(v312 + 16);
        if (v316)
        {
          v317 = (unint64_t *)&v316->__shared_owners_;
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        MEMORY[0x212BC6398](v312, 0x10F0C40B62ED6C6);
      }
    }
    v319 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
    if (*((_QWORD *)&v431 + 1))
    {
      v320 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
        std::__shared_weak_count::__release_weak(v319);
      }
    }
    v322 = *(std::__shared_weak_count **)&v430[16];
    if (*(_QWORD *)&v430[16])
    {
      v323 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
        std::__shared_weak_count::__release_weak(v322);
      }
    }
  }
  else
  {
    os_log_type_enabled(v290, OS_LOG_TYPE_INFO);
    *(_DWORD *)v430 = 134218240;
    *(_QWORD *)&v430[4] = v411;
    *(_WORD *)&v430[12] = 2048;
    *(_QWORD *)&v430[14] = v413;
    v325 = (void *)_os_log_send_and_compose_impl();
    if (v325)
      free(v325);
  }
  if (v271)
  {
    sub_20E8C003C((uint64_t)&v415, "Extracted vision measurements with %zu frames and %zu tracks", v404[1], *v404);
    sub_20E863570((uint64_t)&v415);
  }
  sub_20E863570((uint64_t)&v415);
  v326 = v423;
  if (v423)
  {
    v327 = (unint64_t *)&v423->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
LABEL_440:
  sub_20F1729F0(&v424);
  if (**(int **)(v424 + 56) > 3)
    return;
  v329 = *(unsigned __int8 *)(v424 + 72);
  v330 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
  v331 = v330;
  if (!v329 && v330 == 0)
    return;
  v415 = &v424;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v417 = std::chrono::system_clock::now().__d_.__rep_;
  v418 = 3;
  v419 = "unknown file";
  v420 = 1916;
  v422 = 0;
  v423 = 0;
  v421 = "unknown function";
  v333 = *v415;
  v334 = (const char *)(*v415 + 16);
  v414 = v334;
  if (*(char *)(*v415 + 39) < 0)
  {
    v334 = *(const char **)(v333 + 16);
    v335 = *(_QWORD *)(v333 + 24);
    v337 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v337 & 1) == 0)
    {
LABEL_552:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v430);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v430);
        if ((_BYTE)v431 && (v430[23] & 0x80000000) != 0)
          operator delete(*(void **)v430);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v335 = *(unsigned __int8 *)(*v415 + 39);
    v336 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v336 & 1) == 0)
      goto LABEL_552;
  }
  if (byte_254A4A4F8[23] >= 0)
    v338 = byte_254A4A4F8;
  else
    v338 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v339 = byte_254A4A4F8[23];
  else
    v339 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v430 = os_log_create(v338, v334);
  v340 = &v430[8];
  if (v339 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v339 >= 0x17)
  {
    v341 = (v339 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v339 | 7) != 0x17)
      v341 = v339 | 7;
    v342 = v341 + 1;
    v340 = operator new(v341 + 1);
    *(_QWORD *)&v430[16] = v339;
    *(_QWORD *)&v431 = v342 | 0x8000000000000000;
    *(_QWORD *)&v430[8] = v340;
    goto LABEL_462;
  }
  BYTE7(v431) = v339;
  if (v339)
LABEL_462:
    memmove(v340, v338, v339);
  v340[v339] = 0;
  BYTE8(v431) = 1;
  v343 = (char *)&v432;
  if (v335 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v335 >= 0x17)
  {
    v345 = (v335 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v335 | 7) != 0x17)
      v345 = v335 | 7;
    v346 = v345 + 1;
    v343 = (char *)operator new(v345 + 1);
    v433 = v335;
    v434 = v346 | 0x8000000000000000;
    v432 = v343;
  }
  else
  {
    HIBYTE(v434) = v335;
    if (!v335)
    {
      LOBYTE(v432) = 0;
      v435 = 1;
      v344 = *(NSObject **)v430;
      if ((SHIBYTE(v434) & 0x80000000) == 0)
        goto LABEL_467;
LABEL_473:
      operator delete(v432);
      if (BYTE8(v431))
        goto LABEL_474;
      goto LABEL_476;
    }
  }
  memmove(v343, v334, v335);
  v343[v335] = 0;
  v435 = 1;
  v344 = *(NSObject **)v430;
  if (SHIBYTE(v434) < 0)
    goto LABEL_473;
LABEL_467:
  if (BYTE8(v431))
  {
LABEL_474:
    if (SBYTE7(v431) < 0)
      operator delete(*(void **)&v430[8]);
  }
LABEL_476:
  if (*(_QWORD *)v430)
    os_release(*(void **)v430);
  if (v331 && *(_QWORD *)(v331 + 24))
  {
    v347 = _os_log_pack_size();
    v348 = (std::__shared_weak_count_vtbl *)operator new(v347, (std::align_val_t)8uLL);
    v349 = (std::__shared_weak_count *)operator new();
    v349->__shared_owners_ = 0;
    v350 = (unint64_t *)&v349->__shared_owners_;
    v349->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v349->__shared_weak_owners_ = 0;
    v349[1].__vftable = v348;
    v426[0] = v348;
    v426[1] = v348;
    v428 = 0;
    v429 = 0;
    v427 = v349;
    v351 = (char *)operator new(0x40uLL);
    v352 = (std::__shared_weak_count *)v351;
    *((_QWORD *)v351 + 1) = 0;
    v353 = (unint64_t *)(v351 + 8);
    *((_QWORD *)v351 + 2) = 0;
    *((_QWORD *)v351 + 3) = off_24C9F9148;
    *(_QWORD *)v351 = &off_24C9F90F8;
    *((_QWORD *)v351 + 4) = 1701734764;
    v351[55] = 4;
    v428 = v351 + 24;
    v429 = v351;
    *(_QWORD *)v430 = v348;
    *(_QWORD *)&v430[8] = v348;
    *(_QWORD *)&v430[16] = v349;
    do
      v354 = __ldxr(v350);
    while (__stxr(v354 + 1, v350));
    *(_QWORD *)&v431 = v351 + 24;
    *((_QWORD *)&v431 + 1) = v351;
    do
      v355 = __ldxr(v353);
    while (__stxr(v355 + 1, v353));
    v432 = v351 + 24;
    do
      v356 = __ldaxr(v353);
    while (__stlxr(v356 - 1, v353));
    if (!v356)
    {
      (*(void (**)(char *))(*(_QWORD *)v351 + 16))(v351);
      std::__shared_weak_count::__release_weak(v352);
    }
    v357 = v427;
    if (v427)
    {
      v358 = (unint64_t *)&v427->__shared_owners_;
      do
        v359 = __ldaxr(v358);
      while (__stlxr(v359 - 1, v358));
      if (!v359)
      {
        ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
        std::__shared_weak_count::__release_weak(v357);
      }
    }
    v360 = *(_QWORD *)v430;
    if (v432[31] >= 0)
      v361 = v432 + 8;
    else
      v361 = (char *)*((_QWORD *)v432 + 1);
    v362 = _os_log_pack_fill();
    *(_DWORD *)v362 = 136315650;
    *(_QWORD *)(v362 + 4) = v361;
    *(_WORD *)(v362 + 12) = 1024;
    *(_DWORD *)(v362 + 14) = v399;
    *(_WORD *)(v362 + 18) = 1024;
    *(_DWORD *)(v362 + 20) = __srcc;
    v363 = operator new();
    v364 = *(unsigned __int8 *)(v333 + 39);
    v365 = v414;
    if ((v364 & 0x80u) != 0)
    {
      v365 = *(const char **)(v333 + 16);
      v364 = *(_QWORD *)(v333 + 24);
    }
    *(_QWORD *)v363 = v360;
    *(_OWORD *)(v363 + 8) = *(_OWORD *)&v430[8];
    *(_QWORD *)&v430[8] = 0;
    *(_QWORD *)&v430[16] = 0;
    *(_OWORD *)(v363 + 24) = v431;
    v431 = 0uLL;
    *(_QWORD *)(v363 + 40) = v365;
    *(_QWORD *)(v363 + 48) = v364;
    *(_BYTE *)(v363 + 56) = 1;
    v425 = 0;
    v426[0] = v363;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v331 + 24) + 40))(*(_QWORD *)(v331 + 24), v426);
    v366 = v426[0];
    v426[0] = 0;
    if (v366)
    {
      v367 = *(std::__shared_weak_count **)(v366 + 32);
      if (v367)
      {
        v368 = (unint64_t *)&v367->__shared_owners_;
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (!v369)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
      v370 = *(std::__shared_weak_count **)(v366 + 16);
      if (v370)
      {
        v371 = (unint64_t *)&v370->__shared_owners_;
        do
          v372 = __ldaxr(v371);
        while (__stlxr(v372 - 1, v371));
        if (!v372)
        {
          ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
          std::__shared_weak_count::__release_weak(v370);
        }
      }
      MEMORY[0x212BC6398](v366, 0x10F0C40B62ED6C6);
      v373 = v425;
      v425 = 0;
      if (v373)
      {
        v374 = *(std::__shared_weak_count **)(v373 + 32);
        if (v374)
        {
          v375 = (unint64_t *)&v374->__shared_owners_;
          do
            v376 = __ldaxr(v375);
          while (__stlxr(v376 - 1, v375));
          if (!v376)
          {
            ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
            std::__shared_weak_count::__release_weak(v374);
          }
        }
        v377 = *(std::__shared_weak_count **)(v373 + 16);
        if (v377)
        {
          v378 = (unint64_t *)&v377->__shared_owners_;
          do
            v379 = __ldaxr(v378);
          while (__stlxr(v379 - 1, v378));
          if (!v379)
          {
            ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
            std::__shared_weak_count::__release_weak(v377);
          }
        }
        MEMORY[0x212BC6398](v373, 0x10F0C40B62ED6C6);
      }
    }
    v380 = (std::__shared_weak_count *)*((_QWORD *)&v431 + 1);
    if (*((_QWORD *)&v431 + 1))
    {
      v381 = (unint64_t *)(*((_QWORD *)&v431 + 1) + 8);
      do
        v382 = __ldaxr(v381);
      while (__stlxr(v382 - 1, v381));
      if (!v382)
      {
        ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
        std::__shared_weak_count::__release_weak(v380);
      }
    }
    v383 = *(std::__shared_weak_count **)&v430[16];
    if (*(_QWORD *)&v430[16])
    {
      v384 = (unint64_t *)(*(_QWORD *)&v430[16] + 8);
      do
        v385 = __ldaxr(v384);
      while (__stlxr(v385 - 1, v384));
      if (!v385)
      {
        ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
        std::__shared_weak_count::__release_weak(v383);
      }
    }
  }
  else
  {
    os_log_type_enabled(v344, OS_LOG_TYPE_INFO);
    *(_DWORD *)v430 = 136315650;
    *(_QWORD *)&v430[4] = "line";
    *(_WORD *)&v430[12] = 1024;
    *(_DWORD *)&v430[14] = v399;
    *(_WORD *)&v430[18] = 1024;
    *(_DWORD *)&v430[20] = __srcc;
    v386 = (void *)_os_log_send_and_compose_impl();
    if (v386)
      free(v386);
  }
  if (v329)
  {
    sub_20E8C003C((uint64_t)&v415, "  %s: %d inlier measurements (of %d total).", "line", v399, __srcc);
    sub_20E863570((uint64_t)&v415);
  }
  sub_20E863570((uint64_t)&v415);
  v387 = v423;
  if (v423)
  {
    v388 = (unint64_t *)&v423->__shared_owners_;
    do
      v389 = __ldaxr(v388);
    while (__stlxr(v389 - 1, v388));
    if (!v389)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
  }
}

void sub_20F186FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152))
  {
    if (*(char *)(v29 - 153) < 0)
      operator delete(*(void **)(v29 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F187004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_20E86E8C4((uint64_t *)(v29 - 216));
  sub_20E86E8C4((uint64_t *)(v29 - 224));
  sub_20E86E658(v29 - 176);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F187120()
{
  JUMPOUT(0x20F187128);
}

void sub_20F18714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F187160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F187174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F18718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F1871A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 144) && *(char *)(v29 - 145) < 0)
    operator delete(*(void **)(v29 - 168));
  v31 = *(void **)(v29 - 176);
  if (v31)
    os_release(v31);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F1872CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1872F0(uint64_t a1, int *a2, unsigned int a3, int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  _OWORD *v16;
  float *v17;
  BOOL *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  int64x2_t v33;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int v37;
  float v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t *v42;
  _OWORD *v43;
  _DWORD *v44;
  BOOL *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t *v50;
  int64x2_t v54;
  int64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;

  LODWORD(v5) = a4;
  v6 = a3;
  v9 = a3;
  v10 = a5;
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 16);
  sub_20FD36960(a1, *(_QWORD *)a1 + 1, *(_QWORD *)(a1 + 8), v12 + a3);
  *(_QWORD *)(*(_QWORD *)(a1 + 160) - 8) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(a1 + 136) - 8) = v10;
  if (v6)
  {
    memset((void *)(*(_QWORD *)(a1 + 80) + v12), 1, v9);
    bzero((void *)(*(_QWORD *)(a1 + 104) + v12), v9);
  }
  LODWORD(v14) = 0;
  v15 = (float32x2_t *)(*(_QWORD *)(a1 + 224) + 12 * v12);
  v16 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v12);
  v17 = (float *)(*(_QWORD *)(a1 + 56) + 4 * v12);
  v18 = (BOOL *)(*(_QWORD *)(a1 + 80) + v12);
  *(_DWORD *)(*(_QWORD *)(a1 + 184) - 4) = v11;
  v5 = (int)v5;
  v19 = *((_QWORD *)a2 + 8);
  v21 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)a2 + 6);
  v22 = v6;
  v23 = (int)v5;
  do
  {
    v24 = (float64x2_t *)(v21 + 336 * ((v23 + v19) % (0xCF3CF3CF3CF3CF3DLL * ((v20 - v21) >> 4))));
    v25 = v24 + 8;
    if (*(_DWORD *)(a1 + 24) != 2)
      v25 = v24;
    _Q2 = vsubq_f64(v25[1], *v25);
    _D5 = _Q2.f64[1];
    __asm { FMLA            D4, D5, V2.D[1] }
    v33 = (int64x2_t)vmulq_n_f64(_Q2, 1.0 / sqrt(_D4));
    v34.i64[1] = v13;
    *(double *)v34.i64 = -*(double *)&v33.i64[1];
    v35 = (float64x2_t)vzip1q_s64(v34, v33);
    v36 = vmulq_f64((float64x2_t)v34, *v25);
    v36.f64[0] = vmlad_n_f64(v36.f64[0], v25->f64[1], *(double *)v33.i64);
    v13 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    *v15 = vcvt_f32_f64(v35);
    v15[1].i32[0] = vcvt_f32_f64(v36).u32[0];
    *v16++ = v24[8];
    v37 = *(unsigned __int8 *)(*((_QWORD *)a2 + 11)
                             + (unint64_t)(v23 + *((_QWORD *)a2 + 14))
                             % (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)));
    *v18++ = v37 != 0;
    if (v37)
      v14 = (v14 + 1);
    else
      v14 = v14;
    v19 = *((_QWORD *)a2 + 8);
    v21 = *((_QWORD *)a2 + 5);
    v20 = *((_QWORD *)a2 + 6);
    v38 = *(double *)(v21 + 336 * ((v23 + v19) % (0xCF3CF3CF3CF3CF3DLL * ((v20 - v21) >> 4))) + 256);
    *v17++ = v38;
    v15 = (float32x2_t *)((char *)v15 + 12);
    ++v23;
    --v22;
  }
  while (v22);
  v39 = *a2;
  v40 = *(_QWORD *)(a1 + 16);
  sub_20FD36960(a1, *(_QWORD *)a1 + 1, *(_QWORD *)(a1 + 8), v40 + v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 160) - 8) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(*(_QWORD *)(a1 + 136) - 8) = v10;
  memset((void *)(*(_QWORD *)(a1 + 80) + v40), 1, v9);
  bzero((void *)(*(_QWORD *)(a1 + 104) + v40), v9);
  v42 = (float32x2_t *)(*(_QWORD *)(a1 + 224) + 12 * v40);
  v43 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 16 * v40);
  v44 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v40);
  v45 = (BOOL *)(*(_QWORD *)(a1 + 80) + v40);
  *(_DWORD *)(*(_QWORD *)(a1 + 184) - 4) = v39;
  v46 = *((_QWORD *)a2 + 8);
  v47 = *((_QWORD *)a2 + 5);
  v48 = *((_QWORD *)a2 + 6);
  do
  {
    v49 = v47 + 336 * ((v5 + v46) % (0xCF3CF3CF3CF3CF3DLL * ((v48 - v47) >> 4)));
    v50 = (float64x2_t *)(v49 + 128);
    if (*(_DWORD *)(a1 + 24) != 2)
      v50 = (float64x2_t *)v49;
    _Q2 = vsubq_f64(v50[1], *v50);
    _D5 = _Q2.f64[1];
    __asm { FMLA            D4, D5, V2.D[1] }
    v54 = (int64x2_t)vmulq_n_f64(_Q2, 1.0 / sqrt(_D4));
    v55.i64[1] = v41;
    *(double *)v55.i64 = -*(double *)&v54.i64[1];
    v56 = (float64x2_t)vzip1q_s64(v55, v54);
    v57 = vmulq_f64((float64x2_t)v55, *v50);
    v57.f64[0] = vmlad_n_f64(v57.f64[0], v50->f64[1], *(double *)v54.i64);
    *v42 = vcvt_f32_f64(v56);
    v42[1].i32[0] = vcvt_f32_f64(v57).u32[0];
    *v43++ = *(_OWORD *)(v49 + 144);
    *v45++ = *(_BYTE *)(*((_QWORD *)a2 + 11)
                      + (unint64_t)(v5 + *((_QWORD *)a2 + 14)) % (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11))) != 0;
    v41 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
    v46 = *((_QWORD *)a2 + 8);
    v47 = *((_QWORD *)a2 + 5);
    v48 = *((_QWORD *)a2 + 6);
    *(float *)v54.i32 = *(double *)(v47 + 336 * ((v5 + v46) % (0xCF3CF3CF3CF3CF3DLL * ((v48 - v47) >> 4))) + 256);
    *v44++ = v54.i32[0];
    v42 = (float32x2_t *)((char *)v42 + 12);
    ++v5;
    --v6;
  }
  while (v6);
  return v14;
}

void sub_20F187678(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  size_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  void *v49;
  unint64_t **v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  unint64_t i;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  const char *v96;
  size_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t *v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  _BYTE *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  size_t v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unsigned __int8 v153;
  const char *v154;
  size_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  size_t v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  unint64_t *p_shared_owners;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  unint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int *v206;
  int *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t *v214;
  _QWORD *v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  _DWORD *v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  _BOOL4 v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  _BOOL4 v251;
  int v252;
  int v253;
  int *v254;
  int v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t *v262;
  int v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  _DWORD *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  _BYTE *v273;
  int *v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _OWORD *v278;
  int *v279;
  uint64_t v280;
  __int128 v281;
  int v282;
  int v283;
  _DWORD *v284;
  uint64_t v285;
  uint64_t v286;
  BOOL v287;
  uint64_t v288;
  unint64_t v289;
  int v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  BOOL v297;
  int v298;
  uint64_t *v299;
  int v300;
  unint64_t v301;
  int *v302;
  uint64_t v303;
  _DWORD *v304;
  int *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  _BYTE *v312;
  int *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int *v317;
  _OWORD *v318;
  int *v319;
  uint64_t v320;
  __int128 v321;
  int v322;
  _QWORD *v323;
  int v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v328;
  uint64_t v329;
  size_t v330;
  const char *v331;
  unsigned __int8 v332;
  const char *v333;
  size_t v334;
  _BYTE *v335;
  unint64_t v336;
  const char *v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  NSObject *v344;
  uint64_t v345;
  uint64_t v346;
  size_t v347;
  std::__shared_weak_count_vtbl *v348;
  std::__shared_weak_count *v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  std::__shared_weak_count *v370;
  unint64_t *v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  void *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  int v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v387;
  const char *v388;
  size_t v389;
  unsigned __int8 v390;
  unsigned __int8 v391;
  const char *v392;
  size_t v393;
  _BYTE *v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  NSObject *v398;
  uint64_t v399;
  uint64_t v400;
  size_t v401;
  std::__shared_weak_count_vtbl *v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  char *v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  unint64_t *v429;
  unint64_t v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  void *v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t v444;
  int v445;
  uint64_t *v446;
  uint64_t *v447;
  uint64_t v448;
  int v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  int v455;
  uint64_t v456;
  int *v457;
  int v460;
  int v461;
  int v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t *v467;
  _QWORD *v468;
  uint64_t v469;
  _QWORD *v470;
  uint64_t *v471;
  uint64_t v472;
  const char *v473;
  uint64_t *v474;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v476;
  int v477;
  const char *v478;
  int v479;
  const char *v480;
  uint64_t v481;
  std::__shared_weak_count *v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD v485[2];
  std::__shared_weak_count *v486;
  char *v487;
  char *v488;
  _BYTE v489[24];
  __int128 v490;
  char *v491;
  size_t v492;
  unint64_t v493;
  char v494;
  uint64_t v495;

  v495 = *MEMORY[0x24BDAC8D0];
  v448 = a7;
  v10 = (unint64_t)a7 << 8;
  v11 = a1[2] + v10;
  v13 = *(_QWORD *)(v11 + 8);
  v12 = (uint64_t *)(v11 + 8);
  v14 = a5 + 1;
  v15 = a1[8];
  v16 = a1[5];
  v17 = 0x6DB6DB6DB6DB6DB7 * ((a1[6] - v16) >> 3);
  v461 = *(_DWORD *)(v16 + 56 * (v15 % v17));
  v460 = a5;
  v455 = *(_DWORD *)(v16 + 56 * ((v15 + a5) % v17));
  v18 = 0x38E38E38E38E38E4 * ((v12[1] - v13) >> 4);
  sub_20FD36960((uint64_t)a2, 0, a5 + 1, 0);
  v464 = v12 + 1;
  v470 = a2;
  v471 = v12;
  sub_20FD37108(a2, 0x8E38E38E38E38E39 * ((v12[1] - *v12) >> 4), v14, v18);
  v468 = a1;
  v19 = a1[2] + v10;
  v20 = *(_QWORD *)(v19 + 232);
  v21 = *(_QWORD *)(v19 + 240);
  if (v20 != v21)
  {
    sub_20FD36E88((uint64_t)a2, 0, (unint64_t)(v21 - v20) >> 3);
    sub_20FD37948((uint64_t)a2, v18, (*(_QWORD *)(a1[2] + (v448 << 8) + 240) - *(_QWORD *)(a1[2] + (v448 << 8) + 232)) >> 3);
    v22 = a1[2] + (v448 << 8);
    v23 = *(uint64_t **)(v22 + 232);
    v24 = *(uint64_t **)(v22 + 240);
    if (v23 != v24)
    {
      v25 = 0;
      do
      {
        v26 = *v23++;
        a2[10 * v25++ + 37] = v26;
      }
      while (v23 != v24);
    }
  }
  v27 = v12 + 1;
  v28 = 0x8E38E38E38E38E39 * ((*v464 - *v12) >> 4);
  if (v28 >= a6)
    LODWORD(v28) = a6;
  v29 = *(_BYTE **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (v28 > (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v29) >> 2))
  {
    v30 = 4 * v28;
    v31 = (char *)operator new(v30);
    *(_QWORD *)a3 = v31;
    *(_QWORD *)(a3 + 8) = v31;
    *(_QWORD *)(a3 + 16) = &v31[v30];
    if (v29)
      operator delete(v29);
  }
  v470[26] = v470[25];
  v32 = 0x8E38E38E38E38E39 * ((*v464 - *v12) >> 4);
  v33 = *(_BYTE **)a3;
  if (v32 > (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)a3) >> 2)
  {
    if (v32 >> 62)
      sub_20EABADD4();
    v34 = *(_BYTE **)(a3 + 8);
    v35 = 0x38E38E38E38E38E4 * ((*v464 - *v12) >> 4);
    v36 = (char *)operator new(v35);
    v37 = v34 - v33;
    v38 = &v36[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
    v39 = v38;
    if (v34 == v33)
      goto LABEL_20;
    if ((unint64_t)(v37 - 4) >= 0x2C)
    {
      v39 = &v36[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v34[-(v37 & 0xFFFFFFFFFFFFFFFCLL)] - v36) >= 0x20)
      {
        v40 = v37 >> 2;
        v41 = ((unint64_t)(v37 - 4) >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v43 = &v34[-v42];
        v39 = &v38[-v42];
        v44 = &v36[4 * v40 - 16];
        v45 = (__int128 *)(v34 - 16);
        v46 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *v45;
          *((_OWORD *)v44 - 1) = *(v45 - 1);
          *(_OWORD *)v44 = v47;
          v44 -= 32;
          v45 -= 2;
          v46 -= 8;
        }
        while (v46);
        v34 = v43;
        if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_20:
          *(_QWORD *)a3 = v39;
          *(_QWORD *)(a3 + 8) = v38;
          *(_QWORD *)(a3 + 16) = &v36[v35];
          if (v33)
            operator delete(v33);
          goto LABEL_22;
        }
      }
    }
    else
    {
      v39 = &v36[(v34 - v33) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v48 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v39 - 1) = v48;
      v39 -= 4;
    }
    while (v34 != v33);
    goto LABEL_20;
  }
LABEL_22:
  v50 = (unint64_t **)(v468 + 11);
  v49 = (void *)v468[11];
  v468[12] = v49;
  v51 = 0x8E38E38E38E38E39 * ((*v464 - *v12) >> 4);
  if (v51 > (uint64_t)(v468[13] - (_QWORD)v49) >> 4)
  {
    if (v51 >> 60)
LABEL_587:
      sub_20E867F44();
    v52 = 0xE38E38E38E38E390 * ((*v464 - *v12) >> 4);
    v53 = (char *)operator new(v52);
    v468[11] = v53;
    v468[12] = v53;
    v468[13] = &v53[v52];
    if (v49)
      operator delete(v49);
  }
  v451 = a3;
  v54 = *v464;
  v55 = *v12;
  v56 = v468;
  v57 = v461;
  v58 = v455;
  if (*v464 != *v12)
  {
    for (i = 0; i < 0x8E38E38E38E38E39 * ((v54 - v55) >> 4); ++i)
    {
      if ((*(_DWORD *)(v55 + 144 * i) & 0x80000000) != 0)
      {
        if (!*(_QWORD *)(v55 + 144 * i + 80))
          break;
        continue;
      }
      v60 = v55 + 144 * i;
      v61 = *(_QWORD *)(v60 + 80);
      if (!v61)
        break;
      v62 = (uint64_t *)(v60 + 40);
      v63 = *(_QWORD *)(v55 + 144 * i + 72);
      if (v63)
      {
        v64 = *v62;
        if (*(_DWORD *)(v64 + 336 * v63 - 16) >= v57)
          goto LABEL_36;
      }
      else
      {
        v64 = *v62;
        if (*(_DWORD *)(v64 + 16 * ((*(_QWORD *)(v55 + 144 * i + 48) - v64) >> 4) - 16) >= v57)
        {
LABEL_36:
          v65 = *(_DWORD *)(v64 + 336 * *(_QWORD *)(v55 + 144 * i + 64) + 320);
          if (v61 < 2 || v65 > v58)
            continue;
          v68 = (unint64_t *)v56[12];
          v67 = v56[13];
          if ((unint64_t)v68 < v67)
          {
            *v68 = v61;
            v68[1] = i;
            v69 = v68 + 2;
LABEL_57:
            v56[12] = v69;
            v54 = *v27;
            v55 = *v471;
            continue;
          }
          v70 = *v50;
          v71 = ((char *)v68 - (char *)*v50) >> 4;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 60)
            goto LABEL_587;
          v73 = v67 - (_QWORD)v70;
          if (v73 >> 3 > v72)
            v72 = v73 >> 3;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
            v74 = 0xFFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            if (v74 >> 60)
              sub_20E877A38();
            v75 = (char *)operator new(16 * v74);
            v76 = (unint64_t *)&v75[16 * v71];
            *v76 = v61;
            v76[1] = i;
            v77 = (uint64_t)v76;
            if (v68 != v70)
            {
LABEL_52:
              v56 = v468;
              do
              {
                *(_OWORD *)(v77 - 16) = *((_OWORD *)v68 - 1);
                v77 -= 16;
                v68 -= 2;
              }
              while (v68 != v70);
              v68 = *v50;
              v78 = &v75[16 * v74];
              v69 = v76 + 2;
              v468[11] = v77;
              v468[12] = v76 + 2;
              v468[13] = v78;
              v27 = v464;
              if (v68)
LABEL_55:
                operator delete(v68);
LABEL_56:
              v57 = v461;
              v58 = v455;
              goto LABEL_57;
            }
          }
          else
          {
            v75 = 0;
            v76 = (unint64_t *)(16 * v71);
            *v76 = v61;
            v76[1] = i;
            v77 = 16 * v71;
            if (v68 != v70)
              goto LABEL_52;
          }
          v27 = v464;
          v56 = v468;
          v79 = &v75[16 * v74];
          v69 = v76 + 2;
          v468[11] = v77;
          v468[12] = v76 + 2;
          v468[13] = v79;
          if (v68)
            goto LABEL_55;
          goto LABEL_56;
        }
      }
    }
  }
  v80 = v56[11];
  v81 = (char *)v56[12];
  v82 = 126 - 2 * __clz((uint64_t)&v81[-v80] >> 4);
  if (v81 == (char *)v80)
    v83 = 0;
  else
    v83 = v82;
  sub_20F18B1F8(v80, v81, v83, 1);
  if (v56[11] == v56[12])
  {
    sub_20F1729F0(&v483);
    v84 = a6;
    v85 = v468;
    if (**(int **)(v483 + 56) > 2)
      goto LABEL_241;
    v92 = *(unsigned __int8 *)(v483 + 72);
    v93 = sub_20E8C31DC(v483, "OSLogSurrogateAppender", 1, 0);
    v94 = v93;
    if (!v92)
    {
      v84 = a6;
      if (!v93)
        goto LABEL_241;
    }
    v474 = &v483;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v476 = std::chrono::system_clock::now().__d_.__rep_;
    v477 = 2;
    v478 = "unknown file";
    v479 = 2001;
    v481 = 0;
    v482 = 0;
    v480 = "unknown function";
    v95 = v483;
    v96 = (const char *)(v483 + 16);
    v465 = v483 + 16;
    if (*(char *)(v483 + 39) < 0)
    {
      v96 = *(const char **)(v483 + 16);
      v97 = *(_QWORD *)(v483 + 24);
      v153 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v153 & 1) != 0)
        goto LABEL_159;
    }
    else
    {
      v97 = *(unsigned __int8 *)(v483 + 39);
      v98 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v98 & 1) != 0)
        goto LABEL_159;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v489);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v489);
      if ((_BYTE)v490 && (v489[23] & 0x80000000) != 0)
        operator delete(*(void **)v489);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_159:
    if (byte_254A4A4F8[23] >= 0)
      v154 = byte_254A4A4F8;
    else
      v154 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v155 = byte_254A4A4F8[23];
    else
      v155 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v489 = os_log_create(v154, v96);
    v156 = &v489[8];
    if (v155 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v155 >= 0x17)
    {
      v157 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v155 | 7) != 0x17)
        v157 = v155 | 7;
      v158 = v157 + 1;
      v156 = operator new(v157 + 1);
      *(_QWORD *)&v489[16] = v155;
      *(_QWORD *)&v490 = v158 | 0x8000000000000000;
      *(_QWORD *)&v489[8] = v156;
    }
    else
    {
      BYTE7(v490) = v155;
      if (!v155)
      {
LABEL_173:
        v156[v155] = 0;
        BYTE8(v490) = 1;
        v159 = (char *)&v491;
        if (v97 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v97 >= 0x17)
        {
          v160 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v97 | 7) != 0x17)
            v160 = v97 | 7;
          v161 = v160 + 1;
          v159 = (char *)operator new(v160 + 1);
          v492 = v97;
          v493 = v161 | 0x8000000000000000;
          v491 = v159;
        }
        else
        {
          HIBYTE(v493) = v97;
          if (!v97)
            goto LABEL_181;
        }
        memmove(v159, v96, v97);
LABEL_181:
        v159[v97] = 0;
        v494 = 1;
        v162 = *(NSObject **)v489;
        if (SHIBYTE(v493) < 0)
          operator delete(v491);
        if (BYTE8(v490) && SBYTE7(v490) < 0)
          operator delete(*(void **)&v489[8]);
        if (*(_QWORD *)v489)
          os_release(*(void **)v489);
        if (v94 && *(_QWORD *)(v94 + 24))
        {
          v163 = _os_log_pack_size();
          v164 = (std::__shared_weak_count_vtbl *)operator new(v163, (std::align_val_t)8uLL);
          v165 = (std::__shared_weak_count *)operator new();
          v166 = v165;
          v165->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v165->__shared_owners_;
          v165->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v165->__shared_weak_owners_ = 0;
          v165[1].__vftable = v164;
          *(_QWORD *)v489 = v164;
          *(_QWORD *)&v489[8] = v164;
          *(_QWORD *)&v489[16] = v165;
          do
            v168 = __ldxr(p_shared_owners);
          while (__stxr(v168 + 1, p_shared_owners));
          v490 = 0uLL;
          v491 = 0;
          do
            v169 = __ldaxr(p_shared_owners);
          while (__stlxr(v169 - 1, p_shared_owners));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v166);
          }
          v170 = *(_QWORD *)v489;
          *(_WORD *)_os_log_pack_fill() = 0;
          v171 = operator new();
          v172 = *(unsigned __int8 *)(v95 + 39);
          v173 = v465;
          if ((v172 & 0x80u) != 0)
          {
            v173 = *(_QWORD *)(v95 + 16);
            v172 = *(_QWORD *)(v95 + 24);
          }
          *(_QWORD *)v171 = v170;
          *(_OWORD *)(v171 + 8) = *(_OWORD *)&v489[8];
          *(_QWORD *)&v489[8] = 0;
          *(_QWORD *)&v489[16] = 0;
          *(_OWORD *)(v171 + 24) = v490;
          v490 = 0uLL;
          *(_QWORD *)(v171 + 40) = v173;
          *(_QWORD *)(v171 + 48) = v172;
          *(_BYTE *)(v171 + 56) = 2;
          v484 = 0;
          v485[0] = v171;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), v485);
          v174 = v485[0];
          v485[0] = 0;
          v85 = v468;
          if (v174)
          {
            v175 = *(std::__shared_weak_count **)(v174 + 32);
            if (v175)
            {
              v176 = (unint64_t *)&v175->__shared_owners_;
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            v178 = *(std::__shared_weak_count **)(v174 + 16);
            if (v178)
            {
              v179 = (unint64_t *)&v178->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            MEMORY[0x212BC6398](v174, 0x10F0C40B62ED6C6);
            v181 = v484;
            v484 = 0;
            if (v181)
            {
              v182 = *(std::__shared_weak_count **)(v181 + 32);
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              v185 = *(std::__shared_weak_count **)(v181 + 16);
              if (v185)
              {
                v186 = (unint64_t *)&v185->__shared_owners_;
                do
                  v187 = __ldaxr(v186);
                while (__stlxr(v187 - 1, v186));
                if (!v187)
                {
                  ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                  std::__shared_weak_count::__release_weak(v185);
                }
              }
              MEMORY[0x212BC6398](v181, 0x10F0C40B62ED6C6);
            }
          }
          v188 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
          if (*((_QWORD *)&v490 + 1))
          {
            v189 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 - 1, v189));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
              std::__shared_weak_count::__release_weak(v188);
            }
          }
          v191 = *(std::__shared_weak_count **)&v489[16];
          if (*(_QWORD *)&v489[16])
          {
            v192 = (unint64_t *)(*(_QWORD *)&v489[16] + 8);
            do
              v193 = __ldaxr(v192);
            while (__stlxr(v193 - 1, v192));
            if (!v193)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
        }
        else
        {
          os_log_type_enabled(v162, OS_LOG_TYPE_DEBUG);
          *(_WORD *)v489 = 0;
          v194 = (void *)_os_log_send_and_compose_impl();
          v85 = v468;
          if (v194)
            free(v194);
        }
        if (v92)
        {
          sub_20E8C003C((uint64_t)&v474, "No tracks in supplied frame range.");
          sub_20E863570((uint64_t)&v474);
        }
        sub_20E863570((uint64_t)&v474);
        v150 = v482;
        if (!v482)
          goto LABEL_240;
        v195 = (unint64_t *)&v482->__shared_owners_;
        do
          v152 = __ldaxr(v195);
        while (__stlxr(v152 - 1, v195));
        goto LABEL_238;
      }
    }
    memmove(v156, v154, v155);
    goto LABEL_173;
  }
  sub_20F1729F0(&v483);
  v84 = a6;
  v85 = v468;
  if (**(int **)(v483 + 56) <= 2)
  {
    v86 = *(unsigned __int8 *)(v483 + 72);
    v87 = sub_20E8C31DC(v483, "OSLogSurrogateAppender", 1, 0);
    v88 = v87;
    if (v86 || (v84 = a6, v87))
    {
      v474 = &v483;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v476 = std::chrono::system_clock::now().__d_.__rep_;
      v477 = 2;
      v478 = "unknown file";
      v479 = 1999;
      v481 = 0;
      v482 = 0;
      v480 = "unknown function";
      v89 = v483;
      v90 = (const char *)(v483 + 16);
      v456 = v483 + 16;
      if (*(char *)(v483 + 39) < 0)
      {
        v90 = *(const char **)(v483 + 16);
        v91 = *(_QWORD *)(v483 + 24);
      }
      else
      {
        v91 = *(unsigned __int8 *)(v483 + 39);
      }
      v462 = v86;
      v466 = v88;
      v100 = (uint64_t *)v468[11];
      v99 = v468[12];
      v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v489);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v489);
        if ((_BYTE)v490 && (v489[23] & 0x80000000) != 0)
          operator delete(*(void **)v489);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v102 = byte_254A4A4F8;
      else
        v102 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v103 = byte_254A4A4F8[23];
      else
        v103 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v489 = os_log_create(v102, v90);
      v104 = &v489[8];
      if (v103 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v103 >= 0x17)
      {
        v105 = v90;
        v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v103 | 7) != 0x17)
          v106 = v103 | 7;
        v107 = v106 + 1;
        v104 = operator new(v106 + 1);
        *(_QWORD *)&v489[16] = v103;
        *(_QWORD *)&v490 = v107 | 0x8000000000000000;
        *(_QWORD *)&v489[8] = v104;
        v90 = v105;
      }
      else
      {
        BYTE7(v490) = v103;
        if (!v103)
        {
LABEL_92:
          v104[v103] = 0;
          BYTE8(v490) = 1;
          v108 = (char *)&v491;
          if (v91 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v91 >= 0x17)
          {
            v109 = v90;
            v110 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v91 | 7) != 0x17)
              v110 = v91 | 7;
            v111 = v110 + 1;
            v108 = (char *)operator new(v110 + 1);
            v492 = v91;
            v493 = v111 | 0x8000000000000000;
            v491 = v108;
            v90 = v109;
          }
          else
          {
            HIBYTE(v493) = v91;
            if (!v91)
              goto LABEL_100;
          }
          memmove(v108, v90, v91);
LABEL_100:
          v108[v91] = 0;
          v494 = 1;
          v112 = *(NSObject **)v489;
          if (SHIBYTE(v493) < 0)
            operator delete(v491);
          if (BYTE8(v490) && SBYTE7(v490) < 0)
            operator delete(*(void **)&v489[8]);
          if (*(_QWORD *)v489)
            os_release(*(void **)v489);
          if (v466 && *(_QWORD *)(v466 + 24))
          {
            v113 = _os_log_pack_size();
            v114 = (std::__shared_weak_count_vtbl *)operator new(v113, (std::align_val_t)8uLL);
            v115 = (std::__shared_weak_count *)operator new();
            v85 = v468;
            v116 = v115;
            v115->__shared_owners_ = 0;
            v117 = (unint64_t *)&v115->__shared_owners_;
            v115->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v115->__shared_weak_owners_ = 0;
            v115[1].__vftable = v114;
            *(_QWORD *)v489 = v114;
            *(_QWORD *)&v489[8] = v114;
            *(_QWORD *)&v489[16] = v115;
            do
              v118 = __ldxr(v117);
            while (__stxr(v118 + 1, v117));
            v490 = 0uLL;
            v491 = 0;
            do
              v119 = __ldaxr(v117);
            while (__stlxr(v119 - 1, v117));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v116);
            }
            v120 = *(_QWORD *)v489;
            v121 = _os_log_pack_fill();
            v122 = *v100;
            v123 = *(_QWORD *)(v99 - 16);
            *(_DWORD *)v121 = 134218496;
            *(_QWORD *)(v121 + 4) = (v99 - (uint64_t)v100) >> 4;
            *(_WORD *)(v121 + 12) = 2048;
            *(_QWORD *)(v121 + 14) = v122;
            *(_WORD *)(v121 + 22) = 2048;
            *(_QWORD *)(v121 + 24) = v123;
            v124 = operator new();
            v125 = *(unsigned __int8 *)(v89 + 39);
            v126 = v456;
            if ((v125 & 0x80u) != 0)
            {
              v126 = *(_QWORD *)(v89 + 16);
              v125 = *(_QWORD *)(v89 + 24);
            }
            *(_QWORD *)v124 = v120;
            *(_OWORD *)(v124 + 8) = *(_OWORD *)&v489[8];
            *(_QWORD *)&v489[8] = 0;
            *(_QWORD *)&v489[16] = 0;
            *(_OWORD *)(v124 + 24) = v490;
            v490 = 0uLL;
            *(_QWORD *)(v124 + 40) = v126;
            *(_QWORD *)(v124 + 48) = v125;
            *(_BYTE *)(v124 + 56) = 2;
            v484 = 0;
            v485[0] = v124;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v466 + 24) + 40))(*(_QWORD *)(v466 + 24), v485);
            v127 = v485[0];
            v485[0] = 0;
            if (v127)
            {
              v128 = *(std::__shared_weak_count **)(v127 + 32);
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
              v131 = *(std::__shared_weak_count **)(v127 + 16);
              if (v131)
              {
                v132 = (unint64_t *)&v131->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                  std::__shared_weak_count::__release_weak(v131);
                }
              }
              MEMORY[0x212BC6398](v127, 0x10F0C40B62ED6C6);
              v134 = v484;
              v484 = 0;
              if (v134)
              {
                v135 = *(std::__shared_weak_count **)(v134 + 32);
                if (v135)
                {
                  v136 = (unint64_t *)&v135->__shared_owners_;
                  do
                    v137 = __ldaxr(v136);
                  while (__stlxr(v137 - 1, v136));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                }
                v138 = *(std::__shared_weak_count **)(v134 + 16);
                if (v138)
                {
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
                MEMORY[0x212BC6398](v134, 0x10F0C40B62ED6C6);
              }
            }
            v141 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
            if (*((_QWORD *)&v490 + 1))
            {
              v142 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                std::__shared_weak_count::__release_weak(v141);
              }
            }
            v144 = *(std::__shared_weak_count **)&v489[16];
            if (*(_QWORD *)&v489[16])
            {
              v145 = (unint64_t *)(*(_QWORD *)&v489[16] + 8);
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
          }
          else
          {
            os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG);
            v147 = *v100;
            v148 = *(_QWORD *)(v99 - 16);
            *(_DWORD *)v489 = 134218496;
            *(_QWORD *)&v489[4] = (v99 - (uint64_t)v100) >> 4;
            *(_WORD *)&v489[12] = 2048;
            *(_QWORD *)&v489[14] = v147;
            *(_WORD *)&v489[22] = 2048;
            *(_QWORD *)&v490 = v148;
            v149 = (void *)_os_log_send_and_compose_impl();
            v85 = v468;
            if (v149)
              free(v149);
          }
          if (v462)
          {
            sub_20E8C003C((uint64_t)&v474, "Tracks in range: %zu With lengths: %zu to %zu", (uint64_t)(v85[12] - v85[11]) >> 4, *(_QWORD *)v85[11], *(_QWORD *)(v85[12] - 16));
            sub_20E863570((uint64_t)&v474);
          }
          sub_20E863570((uint64_t)&v474);
          v150 = v482;
          if (!v482)
            goto LABEL_240;
          v151 = (unint64_t *)&v482->__shared_owners_;
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
LABEL_238:
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
LABEL_240:
          v84 = a6;
          goto LABEL_241;
        }
      }
      memmove(v104, v102, v103);
      goto LABEL_92;
    }
  }
LABEL_241:
  v196 = v85[11];
  v197 = v85[12];
  v198 = v460;
  if (v196 != v197)
  {
    v449 = 0;
    v450 = 0;
    v453 = v85[12];
    while (1)
    {
      v199 = *(_QWORD *)(v196 + 8);
      v200 = *v471;
      if (!*((_BYTE *)v85 + 8))
        goto LABEL_254;
      v201 = *(_QWORD *)(v200 + 144 * v199 + 80);
      if (v201 >= v85[10])
        goto LABEL_254;
      if (v201)
      {
        v202 = (_QWORD *)(v200 + 144 * v199 + 40);
        v203 = *(_QWORD *)(v200 + 144 * v199 + 72);
        if (v203)
        {
          v204 = *(_DWORD *)(*v202 + 336 * v203 - 16);
          v205 = v85[9];
          if (!v205)
            goto LABEL_253;
        }
        else
        {
          v204 = *(_DWORD *)(*v202 + 16 * ((uint64_t)(*(_QWORD *)(v200 + 144 * v199 + 48) - *v202) >> 4) - 16);
          v205 = v85[9];
          if (!v205)
          {
LABEL_253:
            if (v204 == *(_DWORD *)(v85[5] + 8 * ((uint64_t)(v85[6] - v85[5]) >> 3) - 56))
              goto LABEL_244;
            goto LABEL_254;
          }
        }
      }
      else
      {
        v204 = -1;
        v205 = v85[9];
        if (!v205)
          goto LABEL_253;
      }
      if (v204 == *(_DWORD *)(v85[5] + 56 * v205 - 56))
        goto LABEL_244;
LABEL_254:
      v207 = (int *)v470[25];
      v206 = (int *)v470[26];
      v208 = v206 - v207;
      if (v208 >= v84)
        goto LABEL_393;
      v209 = v85[10];
      if (v209)
      {
        v210 = 0;
        v211 = (_QWORD *)(v200 + 144 * v199);
        v212 = v211 + 5;
        v213 = v211[10];
        v214 = v211 + 9;
        v215 = v211 + 6;
        while (1)
        {
          if (v213)
          {
            v216 = *v214;
            if (!*v214)
              v216 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*v215 - *v212) >> 4);
            v217 = *(_DWORD *)(*v212 + 336 * v216 - 16);
          }
          else
          {
            v217 = -1;
          }
          if (*(_DWORD *)(v85[5]
                         + 56
                         * ((v85[8] + v210)
                          % (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v85[6] - v85[5]) >> 3)))) == v217)
            break;
          if (v209 == ++v210)
          {
            LODWORD(v210) = -1;
            break;
          }
        }
        v199 = *(_QWORD *)(v196 + 8);
        v218 = v200 + 144 * v199;
        v221 = *(_DWORD *)(v218 + 4);
        v219 = (_DWORD *)(v218 + 4);
        v220 = v221;
        if (v221 < 0)
        {
LABEL_270:
          v226 = 0;
          goto LABEL_275;
        }
      }
      else
      {
        v213 = *(_QWORD *)(v200 + 144 * v199 + 80);
        LODWORD(v210) = -1;
        v224 = v200 + 144 * v199;
        v225 = *(_DWORD *)(v224 + 4);
        v219 = (_DWORD *)(v224 + 4);
        v220 = v225;
        if (v225 < 0)
          goto LABEL_270;
      }
      v222 = v85[9];
      v223 = v85[5];
      if (!v222)
        v222 = 0x6DB6DB6DB6DB6DB7 * ((v85[6] - v223) >> 3);
      if (v220 + 1 == *(_DWORD *)(v223 + 56 * v222 - 56))
        v226 = a4;
      else
        v226 = 0;
LABEL_275:
      v227 = v210 - v213 + 1;
      if (v226 <= v227)
        v228 = v210 - v213 + 1;
      else
        v228 = v226;
      if ((int)v210 >= v198)
        v229 = v198;
      else
        v229 = v210;
      v230 = v229 - (v227 & ~(v227 >> 31));
      if ((int)v230 < 2)
        goto LABEL_244;
      v231 = (v230 + 1);
      v463 = v199;
      v232 = v200 + 144 * v199;
      v235 = *(_QWORD *)(v232 + 128);
      v234 = (uint64_t *)(v232 + 128);
      v233 = v235;
      v236 = v235 == 0;
      v237 = v234 - 2;
      v238 = v234 - 4;
      v467 = v234 - 5;
      if (v235 == v231)
      {
        v239 = v234 - 4;
        v240 = v234 - 2;
        if (!v233)
          goto LABEL_299;
        v241 = 0;
        v242 = *v238 - *v467;
        while (!*(_BYTE *)(*v467 + (*v240 + v241) % v242))
        {
          if (v233 == ++v241)
            goto LABEL_299;
        }
      }
      else
      {
        v240 = v234 - 2;
        v243 = *v237;
        v239 = v234 - 4;
        v244 = *(v234 - 5);
        v245 = *v238 - v244;
        if (*(_BYTE *)(v244 + *v237 % v245))
        {
          LODWORD(v241) = 0;
          if (v236)
            goto LABEL_299;
        }
        else
        {
          v246 = v197;
          v247 = v228;
          v241 = 0;
          v248 = v243 + 1;
          v249 = v233 - 1;
          do
          {
            v251 = v249 == v241;
            if (v249 != v241 && v231 - 1 == v241)
            {
              LODWORD(v241) = v230 + 1;
              v228 = v247;
              v197 = v246;
              goto LABEL_300;
            }
          }
          while (!*(unsigned __int8 *)(v244 + (v248 + v241++) % v245));
          v228 = v247;
          v197 = v246;
          if (v251)
LABEL_299:
            LODWORD(v241) = v233;
        }
      }
LABEL_300:
      if ((int)v231 >= (int)v241 + 3)
      {
        v252 = 0;
        v253 = 0;
        v457 = (int *)(v200 + 144 * v463);
        v254 = (int *)v470[26];
        v454 = v228;
        v255 = v229 - v228;
        v452 = (v229 - v228 + 1);
        v256 = *v467;
        v257 = *v239 - *v467;
        v258 = (v230 + 1) & 0x1FFFFFFFELL;
        v259 = *v240 + (int)v241;
        v260 = v258;
        do
        {
          if (*(_BYTE *)(v256 + v259 % v257))
            ++v252;
          if (*(_BYTE *)(v256 + (v259 + 1) % v257))
            ++v253;
          v259 += 2;
          v260 -= 2;
        }
        while (v260);
        v261 = v253 + v252;
        if (v230 + 1 == v258)
        {
          v262 = v240;
          v263 = v454;
        }
        else
        {
          v264 = *v240 + v258 + (int)v241;
          v265 = v230 - v258 + 1;
          v262 = v240;
          v263 = v454;
          do
          {
            if (*(_BYTE *)(v256 + v264 % v257))
              ++v261;
            ++v264;
            --v265;
          }
          while (v265);
        }
        v198 = v460;
        if (v261 >= 3)
        {
          v266 = v468[9];
          v267 = v468[5];
          if (!v266)
            v266 = 0x6DB6DB6DB6DB6DB7 * ((v468[6] - v267) >> 3);
          *v219 = *(_DWORD *)(v267 + 56 * v266 - 56);
          v268 = v470[27];
          if ((unint64_t)v206 >= v268)
          {
            v270 = v208 + 1;
            if ((v208 + 1) >> 62)
              sub_20EABADD4();
            v271 = v268 - (_QWORD)v207;
            if (v271 >> 1 > v270)
              v270 = v271 >> 1;
            if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFFCLL)
              v272 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v272 = v270;
            v446 = v239;
            v447 = v262;
            if (v272)
            {
              v445 = v255;
              if (v272 >> 62)
                sub_20E877A38();
              v444 = v272;
              v273 = operator new(4 * v272);
              v198 = v460;
              v263 = v454;
              v255 = v445;
              v272 = v444;
            }
            else
            {
              v273 = 0;
            }
            v274 = (int *)&v273[4 * v208];
            *v274 = *v457;
            v269 = v274 + 1;
            if (v206 != v207)
            {
              v275 = (char *)v206 - (char *)v207 - 4;
              if (v275 < 0x2C)
                goto LABEL_625;
              if ((unint64_t)((char *)v207 - v273) < 0x20)
                goto LABEL_625;
              v276 = (v275 >> 2) + 1;
              v277 = 4 * (v276 & 0x7FFFFFFFFFFFFFF8);
              v254 = &v206[v277 / 0xFFFFFFFFFFFFFFFCLL];
              v274 = (int *)((char *)v274 - v277);
              v278 = &v273[4 * v208 - 16];
              v279 = v206 - 4;
              v280 = v276 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v281 = *(_OWORD *)v279;
                *(v278 - 1) = *((_OWORD *)v279 - 1);
                *v278 = v281;
                v278 -= 2;
                v279 -= 8;
                v280 -= 8;
              }
              while (v280);
              if (v276 != (v276 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_625:
                do
                {
                  v282 = *--v254;
                  *--v274 = v282;
                }
                while (v254 != v207);
              }
            }
            v470[25] = v274;
            v470[26] = v269;
            v470[27] = &v273[4 * v272];
            if (v207)
            {
              v283 = v255;
              v284 = v269;
              operator delete(v207);
              v269 = v284;
              v255 = v283;
              v263 = v454;
              v198 = v460;
            }
            v239 = v446;
            v262 = v447;
          }
          else
          {
            *v206 = *v457;
            v269 = v206 + 1;
          }
          v470[26] = v269;
        }
        if ((v255 & 0x80000000) == 0)
        {
          v285 = *v234;
          v286 = v263 - v227;
          v287 = *v234 == v286;
          v197 = v453;
          v288 = v452 + v286;
          v84 = a6;
          if (v452 + v286 == *v234)
          {
            v85 = v468;
            if (v285 != v286)
            {
              v288 = v263 - v227;
              while (!*(_BYTE *)(*v467 + (*v262 + v288) % (unint64_t)(*v239 - *v467)))
              {
                if (v285 == ++v288)
                {
                  LODWORD(v288) = v285;
                  if (v285 == v286)
                    goto LABEL_363;
                  goto LABEL_352;
                }
              }
              goto LABEL_360;
            }
LABEL_363:
            LODWORD(v285) = 0;
          }
          else
          {
            v85 = v468;
            v289 = *v239 - *v467;
            if (*(_BYTE *)(*v467 + (*v262 + v286) % v289))
            {
              v288 = v263 - v227;
              if (v287)
                goto LABEL_344;
LABEL_360:
              if (!v288 && v285 != v286 && v227 >= v226)
                goto LABEL_363;
              if (v288 || v285 != v286)
LABEL_366:
                LODWORD(v285) = v286 - v288;
            }
            else
            {
              v290 = v198;
              v291 = v262;
              v292 = *v262 + 1;
              v293 = 1 - v452;
              v294 = v285 - 1;
              v295 = v263 - v227;
              do
              {
                v297 = v294 == v295;
                if (v294 != v295 && !v293)
                {
                  v262 = v291;
                  v263 = v454;
                  v198 = v290;
                  goto LABEL_360;
                }
                v296 = *(unsigned __int8 *)(*v467 + (v292 + v295) % v289);
                ++v293;
                ++v295;
              }
              while (!v296);
              v262 = v291;
              v263 = v454;
              v198 = v290;
              v288 = v295;
              if (!v297)
                goto LABEL_360;
LABEL_344:
              if (v285 == v286)
                goto LABEL_363;
LABEL_352:
              if (v227 < v226)
                goto LABEL_366;
              v285 = -v285;
            }
          }
          v298 = v452 + v285;
          if ((int)v452 + (int)v285 >= 1)
          {
            if (*(_QWORD *)(v85[2] + (v448 << 8) + 232) != *(_QWORD *)(v85[2] + (v448 << 8) + 240))
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 1727, (uint64_t)"", 0, (uint64_t)"Not implemented for lines", 25, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v299 = v262;
            v300 = sub_20F1872F0((uint64_t)v470, v457, (int)v452 + (int)v285, (int)v286 - (int)v285, v263 - (int)v285);
            v302 = *(int **)(v451 + 8);
            v301 = *(_QWORD *)(v451 + 16);
            v303 = v463;
            if ((unint64_t)v302 >= v301)
            {
              v305 = *(int **)v451;
              v306 = (uint64_t)v302 - *(_QWORD *)v451;
              v307 = v306 >> 2;
              v308 = (v306 >> 2) + 1;
              if (v308 >> 62)
                sub_20EABADD4();
              v309 = v301 - (_QWORD)v305;
              if (v309 >> 1 > v308)
                v308 = v309 >> 1;
              if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFFCLL)
                v310 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v310 = v308;
              if (v310)
              {
                if (v310 >> 62)
                  sub_20E877A38();
                v311 = v310;
                v312 = operator new(4 * v310);
                v303 = v463;
                v310 = v311;
              }
              else
              {
                v312 = 0;
              }
              v313 = (int *)&v312[4 * v307];
              *v313 = *v457;
              v304 = v313 + 1;
              if (v302 != v305)
              {
                v314 = (char *)v302 - (char *)v305 - 4;
                if (v314 < 0x2C)
                  goto LABEL_626;
                if ((unint64_t)((char *)v302 - v312 - v306) < 0x20)
                  goto LABEL_626;
                v315 = (v314 >> 2) + 1;
                v316 = 4 * (v315 & 0x7FFFFFFFFFFFFFF8);
                v317 = &v302[v316 / 0xFFFFFFFFFFFFFFFCLL];
                v313 = (int *)((char *)v313 - v316);
                v318 = &v312[4 * v307 - 16];
                v319 = v302 - 4;
                v320 = v315 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v321 = *(_OWORD *)v319;
                  *(v318 - 1) = *((_OWORD *)v319 - 1);
                  *v318 = v321;
                  v318 -= 2;
                  v319 -= 8;
                  v320 -= 8;
                }
                while (v320);
                v302 = v317;
                if (v315 != (v315 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_626:
                  do
                  {
                    v322 = *--v302;
                    *--v313 = v322;
                  }
                  while (v302 != v305);
                }
              }
              *(_QWORD *)v451 = v313;
              *(_QWORD *)(v451 + 8) = v304;
              *(_QWORD *)(v451 + 16) = &v312[4 * v310];
              if (v305)
              {
                operator delete(v305);
                v303 = v463;
              }
            }
            else
            {
              *v302 = *v457;
              v304 = v302 + 1;
            }
            v198 = v460;
            v85 = v468;
            v197 = v453;
            *(_QWORD *)(v451 + 8) = v304;
            v84 = a6;
            if (*((_BYTE *)v468 + 8))
            {
              *(_QWORD *)v457 = -1;
              v323 = (_QWORD *)(v200 + 144 * v303);
              v323[9] = 0;
              v323[10] = 0;
              v323[8] = 0;
              v299[1] = 0;
              v299[2] = 0;
              *v299 = 0;
            }
            v450 += v300;
            v449 += v298;
          }
          goto LABEL_244;
        }
        v84 = a6;
        v85 = v468;
        v197 = v453;
      }
      else
      {
        v85 = v468;
        v198 = v460;
      }
LABEL_244:
      v196 += 16;
      if (v196 == v197)
        goto LABEL_393;
    }
  }
  v449 = 0;
  v450 = 0;
LABEL_393:
  sub_20F1729F0(&v483);
  if (**(int **)(v483 + 56) <= 3)
  {
    v324 = *(unsigned __int8 *)(v483 + 72);
    v325 = sub_20E8C31DC(v483, "OSLogSurrogateAppender", 1, 0);
    v326 = v325;
    if (v324 || v325 != 0)
    {
      v474 = &v483;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v476 = std::chrono::system_clock::now().__d_.__rep_;
      v477 = 3;
      v478 = "unknown file";
      v479 = 2137;
      v481 = 0;
      v482 = 0;
      v480 = "unknown function";
      v328 = *v474;
      v329 = *v474 + 16;
      if (*(char *)(*v474 + 39) < 0)
      {
        v331 = *(const char **)(v328 + 16);
        v330 = *(_QWORD *)(v328 + 24);
      }
      else
      {
        v330 = *(unsigned __int8 *)(*v474 + 39);
        v331 = (const char *)(*v474 + 16);
      }
      v469 = v470[1];
      v472 = *v470;
      v332 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v332 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v489);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v489);
        if ((_BYTE)v490 && (v489[23] & 0x80000000) != 0)
          operator delete(*(void **)v489);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v333 = byte_254A4A4F8;
      else
        v333 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v334 = byte_254A4A4F8[23];
      else
        v334 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v489 = os_log_create(v333, v331);
      v335 = &v489[8];
      if (v334 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v334 >= 0x17)
      {
        v336 = v326;
        v337 = v331;
        v338 = v328;
        v339 = v324;
        v340 = v329;
        v341 = (v334 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v334 | 7) != 0x17)
          v341 = v334 | 7;
        v342 = v341 + 1;
        v335 = operator new(v341 + 1);
        *(_QWORD *)&v489[16] = v334;
        *(_QWORD *)&v490 = v342 | 0x8000000000000000;
        *(_QWORD *)&v489[8] = v335;
        v329 = v340;
        v324 = v339;
        v328 = v338;
        v331 = v337;
        v326 = v336;
      }
      else
      {
        BYTE7(v490) = v334;
        if (!v334)
        {
LABEL_416:
          v335[v334] = 0;
          BYTE8(v490) = 1;
          v343 = (char *)&v491;
          if (v330 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v330 >= 0x17)
          {
            v345 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v330 | 7) != 0x17)
              v345 = v330 | 7;
            v346 = v345 + 1;
            v343 = (char *)operator new(v345 + 1);
            v492 = v330;
            v493 = v346 | 0x8000000000000000;
            v491 = v343;
          }
          else
          {
            HIBYTE(v493) = v330;
            if (!v330)
            {
              LOBYTE(v491) = 0;
              v494 = 1;
              v344 = *(NSObject **)v489;
              if ((SHIBYTE(v493) & 0x80000000) == 0)
                goto LABEL_420;
              goto LABEL_426;
            }
          }
          memmove(v343, v331, v330);
          v343[v330] = 0;
          v494 = 1;
          v344 = *(NSObject **)v489;
          if ((SHIBYTE(v493) & 0x80000000) == 0)
          {
LABEL_420:
            if (!BYTE8(v490))
              goto LABEL_429;
            goto LABEL_427;
          }
LABEL_426:
          operator delete(v491);
          if (!BYTE8(v490))
          {
LABEL_429:
            if (*(_QWORD *)v489)
              os_release(*(void **)v489);
            if (v326 && *(_QWORD *)(v326 + 24))
            {
              v347 = _os_log_pack_size();
              v348 = (std::__shared_weak_count_vtbl *)operator new(v347, (std::align_val_t)8uLL);
              v349 = (std::__shared_weak_count *)operator new();
              v350 = v349;
              v349->__shared_owners_ = 0;
              v351 = (unint64_t *)&v349->__shared_owners_;
              v349->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v349->__shared_weak_owners_ = 0;
              v349[1].__vftable = v348;
              *(_QWORD *)v489 = v348;
              *(_QWORD *)&v489[8] = v348;
              *(_QWORD *)&v489[16] = v349;
              do
                v352 = __ldxr(v351);
              while (__stxr(v352 + 1, v351));
              v490 = 0uLL;
              v491 = 0;
              do
                v353 = __ldaxr(v351);
              while (__stlxr(v353 - 1, v351));
              if (!v353)
              {
                ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                std::__shared_weak_count::__release_weak(v350);
              }
              v354 = *(_QWORD *)v489;
              v355 = _os_log_pack_fill();
              *(_DWORD *)v355 = 134218240;
              *(_QWORD *)(v355 + 4) = v469;
              *(_WORD *)(v355 + 12) = 2048;
              *(_QWORD *)(v355 + 14) = v472;
              v356 = operator new();
              v357 = *(unsigned __int8 *)(v328 + 39);
              if ((v357 & 0x80u) == 0)
                v358 = v329;
              else
                v358 = *(_QWORD *)(v328 + 16);
              if ((v357 & 0x80u) != 0)
                v357 = *(_QWORD *)(v328 + 24);
              *(_QWORD *)v356 = v354;
              *(_OWORD *)(v356 + 8) = *(_OWORD *)&v489[8];
              *(_QWORD *)&v489[8] = 0;
              *(_QWORD *)&v489[16] = 0;
              *(_OWORD *)(v356 + 24) = v490;
              v490 = 0uLL;
              *(_QWORD *)(v356 + 40) = v358;
              *(_QWORD *)(v356 + 48) = v357;
              *(_BYTE *)(v356 + 56) = 1;
              v484 = 0;
              v485[0] = v356;
              (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v326 + 24) + 40))(*(_QWORD *)(v326 + 24), v485);
              v359 = v485[0];
              v485[0] = 0;
              if (v359)
              {
                v360 = *(std::__shared_weak_count **)(v359 + 32);
                if (v360)
                {
                  v361 = (unint64_t *)&v360->__shared_owners_;
                  do
                    v362 = __ldaxr(v361);
                  while (__stlxr(v362 - 1, v361));
                  if (!v362)
                  {
                    ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                    std::__shared_weak_count::__release_weak(v360);
                  }
                }
                v363 = *(std::__shared_weak_count **)(v359 + 16);
                if (v363)
                {
                  v364 = (unint64_t *)&v363->__shared_owners_;
                  do
                    v365 = __ldaxr(v364);
                  while (__stlxr(v365 - 1, v364));
                  if (!v365)
                  {
                    ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
                    std::__shared_weak_count::__release_weak(v363);
                  }
                }
                MEMORY[0x212BC6398](v359, 0x10F0C40B62ED6C6);
                v366 = v484;
                v484 = 0;
                if (v366)
                {
                  v367 = *(std::__shared_weak_count **)(v366 + 32);
                  if (v367)
                  {
                    v368 = (unint64_t *)&v367->__shared_owners_;
                    do
                      v369 = __ldaxr(v368);
                    while (__stlxr(v369 - 1, v368));
                    if (!v369)
                    {
                      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                      std::__shared_weak_count::__release_weak(v367);
                    }
                  }
                  v370 = *(std::__shared_weak_count **)(v366 + 16);
                  if (v370)
                  {
                    v371 = (unint64_t *)&v370->__shared_owners_;
                    do
                      v372 = __ldaxr(v371);
                    while (__stlxr(v372 - 1, v371));
                    if (!v372)
                    {
                      ((void (*)(std::__shared_weak_count *))v370->__on_zero_shared)(v370);
                      std::__shared_weak_count::__release_weak(v370);
                    }
                  }
                  MEMORY[0x212BC6398](v366, 0x10F0C40B62ED6C6);
                }
              }
              v373 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
              if (*((_QWORD *)&v490 + 1))
              {
                v374 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
                do
                  v375 = __ldaxr(v374);
                while (__stlxr(v375 - 1, v374));
                if (!v375)
                {
                  ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
                  std::__shared_weak_count::__release_weak(v373);
                }
              }
              v376 = *(std::__shared_weak_count **)&v489[16];
              if (*(_QWORD *)&v489[16])
              {
                v377 = (unint64_t *)(*(_QWORD *)&v489[16] + 8);
                do
                  v378 = __ldaxr(v377);
                while (__stlxr(v378 - 1, v377));
                if (!v378)
                {
                  ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                  std::__shared_weak_count::__release_weak(v376);
                }
              }
            }
            else
            {
              os_log_type_enabled(v344, OS_LOG_TYPE_INFO);
              *(_DWORD *)v489 = 134218240;
              *(_QWORD *)&v489[4] = v469;
              *(_WORD *)&v489[12] = 2048;
              *(_QWORD *)&v489[14] = v472;
              v379 = (void *)_os_log_send_and_compose_impl();
              if (v379)
                free(v379);
            }
            if (v324)
            {
              sub_20E8C003C((uint64_t)&v474, "Extracted vision measurements with %zu frames and %zu tracks", v470[1], *v470);
              sub_20E863570((uint64_t)&v474);
            }
            sub_20E863570((uint64_t)&v474);
            v380 = v482;
            if (v482)
            {
              v381 = (unint64_t *)&v482->__shared_owners_;
              do
                v382 = __ldaxr(v381);
              while (__stlxr(v382 - 1, v381));
              if (!v382)
              {
                ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                std::__shared_weak_count::__release_weak(v380);
              }
            }
            goto LABEL_486;
          }
LABEL_427:
          if (SBYTE7(v490) < 0)
            operator delete(*(void **)&v489[8]);
          goto LABEL_429;
        }
      }
      memmove(v335, v333, v334);
      goto LABEL_416;
    }
  }
LABEL_486:
  sub_20F1729F0(&v483);
  if (**(int **)(v483 + 56) > 3)
    return;
  v383 = *(unsigned __int8 *)(v483 + 72);
  v384 = sub_20E8C31DC(v483, "OSLogSurrogateAppender", 1, 0);
  v385 = v384;
  if (!v383 && v384 == 0)
    return;
  v474 = &v483;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v476 = std::chrono::system_clock::now().__d_.__rep_;
  v477 = 3;
  v478 = "unknown file";
  v479 = 2139;
  v481 = 0;
  v482 = 0;
  v480 = "unknown function";
  v387 = *v474;
  v388 = (const char *)(*v474 + 16);
  v473 = v388;
  if (*(char *)(*v474 + 39) < 0)
  {
    v388 = *(const char **)(v387 + 16);
    v389 = *(_QWORD *)(v387 + 24);
    v391 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v391 & 1) != 0)
      goto LABEL_495;
  }
  else
  {
    v389 = *(unsigned __int8 *)(*v474 + 39);
    v390 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v390 & 1) != 0)
      goto LABEL_495;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v489);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v489);
    if ((_BYTE)v490 && (v489[23] & 0x80000000) != 0)
      operator delete(*(void **)v489);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_495:
  if (byte_254A4A4F8[23] >= 0)
    v392 = byte_254A4A4F8;
  else
    v392 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v393 = byte_254A4A4F8[23];
  else
    v393 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v489 = os_log_create(v392, v388);
  v394 = &v489[8];
  if (v393 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v393 >= 0x17)
  {
    v395 = (v393 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v393 | 7) != 0x17)
      v395 = v393 | 7;
    v396 = v395 + 1;
    v394 = operator new(v395 + 1);
    *(_QWORD *)&v489[16] = v393;
    *(_QWORD *)&v490 = v396 | 0x8000000000000000;
    *(_QWORD *)&v489[8] = v394;
    goto LABEL_508;
  }
  BYTE7(v490) = v393;
  if (v393)
LABEL_508:
    memmove(v394, v392, v393);
  v394[v393] = 0;
  BYTE8(v490) = 1;
  v397 = (char *)&v491;
  if (v389 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v389 >= 0x17)
  {
    v399 = (v389 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v389 | 7) != 0x17)
      v399 = v389 | 7;
    v400 = v399 + 1;
    v397 = (char *)operator new(v399 + 1);
    v492 = v389;
    v493 = v400 | 0x8000000000000000;
    v491 = v397;
  }
  else
  {
    HIBYTE(v493) = v389;
    if (!v389)
    {
      LOBYTE(v491) = 0;
      v494 = 1;
      v398 = *(NSObject **)v489;
      if ((SHIBYTE(v493) & 0x80000000) == 0)
        goto LABEL_513;
      goto LABEL_519;
    }
  }
  memmove(v397, v388, v389);
  v397[v389] = 0;
  v494 = 1;
  v398 = *(NSObject **)v489;
  if ((SHIBYTE(v493) & 0x80000000) == 0)
  {
LABEL_513:
    if (!BYTE8(v490))
      goto LABEL_522;
LABEL_520:
    if (SBYTE7(v490) < 0)
      operator delete(*(void **)&v489[8]);
    goto LABEL_522;
  }
LABEL_519:
  operator delete(v491);
  if (BYTE8(v490))
    goto LABEL_520;
LABEL_522:
  if (*(_QWORD *)v489)
    os_release(*(void **)v489);
  if (v385 && *(_QWORD *)(v385 + 24))
  {
    v401 = _os_log_pack_size();
    v402 = (std::__shared_weak_count_vtbl *)operator new(v401, (std::align_val_t)8uLL);
    v403 = (std::__shared_weak_count *)operator new();
    v403->__shared_owners_ = 0;
    v404 = (unint64_t *)&v403->__shared_owners_;
    v403->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v403->__shared_weak_owners_ = 0;
    v403[1].__vftable = v402;
    v485[0] = v402;
    v485[1] = v402;
    v487 = 0;
    v488 = 0;
    v486 = v403;
    v405 = (char *)operator new(0x40uLL);
    v406 = (std::__shared_weak_count *)v405;
    *((_QWORD *)v405 + 1) = 0;
    v407 = (unint64_t *)(v405 + 8);
    *((_QWORD *)v405 + 2) = 0;
    *((_QWORD *)v405 + 3) = off_24C9F9148;
    *(_QWORD *)v405 = &off_24C9F90F8;
    *((_QWORD *)v405 + 4) = 1701734764;
    v405[55] = 4;
    v487 = v405 + 24;
    v488 = v405;
    *(_QWORD *)v489 = v402;
    *(_QWORD *)&v489[8] = v402;
    *(_QWORD *)&v489[16] = v403;
    do
      v408 = __ldxr(v404);
    while (__stxr(v408 + 1, v404));
    *(_QWORD *)&v490 = v405 + 24;
    *((_QWORD *)&v490 + 1) = v405;
    do
      v409 = __ldxr(v407);
    while (__stxr(v409 + 1, v407));
    v491 = v405 + 24;
    do
      v410 = __ldaxr(v407);
    while (__stlxr(v410 - 1, v407));
    if (!v410)
    {
      (*(void (**)(char *))(*(_QWORD *)v405 + 16))(v405);
      std::__shared_weak_count::__release_weak(v406);
    }
    v411 = v486;
    if (v486)
    {
      v412 = (unint64_t *)&v486->__shared_owners_;
      do
        v413 = __ldaxr(v412);
      while (__stlxr(v413 - 1, v412));
      if (!v413)
      {
        ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
        std::__shared_weak_count::__release_weak(v411);
      }
    }
    v414 = *(_QWORD *)v489;
    if (v491[31] >= 0)
      v415 = v491 + 8;
    else
      v415 = (char *)*((_QWORD *)v491 + 1);
    v416 = _os_log_pack_fill();
    *(_DWORD *)v416 = 136315650;
    *(_QWORD *)(v416 + 4) = v415;
    *(_WORD *)(v416 + 12) = 1024;
    *(_DWORD *)(v416 + 14) = v450;
    *(_WORD *)(v416 + 18) = 1024;
    *(_DWORD *)(v416 + 20) = v449;
    v417 = operator new();
    v418 = *(unsigned __int8 *)(v387 + 39);
    v419 = v473;
    if ((v418 & 0x80u) != 0)
    {
      v419 = *(const char **)(v387 + 16);
      v418 = *(_QWORD *)(v387 + 24);
    }
    *(_QWORD *)v417 = v414;
    *(_OWORD *)(v417 + 8) = *(_OWORD *)&v489[8];
    *(_QWORD *)&v489[8] = 0;
    *(_QWORD *)&v489[16] = 0;
    *(_OWORD *)(v417 + 24) = v490;
    v490 = 0uLL;
    *(_QWORD *)(v417 + 40) = v419;
    *(_QWORD *)(v417 + 48) = v418;
    *(_BYTE *)(v417 + 56) = 1;
    v484 = 0;
    v485[0] = v417;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v385 + 24) + 40))(*(_QWORD *)(v385 + 24), v485);
    v420 = v485[0];
    v485[0] = 0;
    if (v420)
    {
      v421 = *(std::__shared_weak_count **)(v420 + 32);
      if (v421)
      {
        v422 = (unint64_t *)&v421->__shared_owners_;
        do
          v423 = __ldaxr(v422);
        while (__stlxr(v423 - 1, v422));
        if (!v423)
        {
          ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
          std::__shared_weak_count::__release_weak(v421);
        }
      }
      v424 = *(std::__shared_weak_count **)(v420 + 16);
      if (v424)
      {
        v425 = (unint64_t *)&v424->__shared_owners_;
        do
          v426 = __ldaxr(v425);
        while (__stlxr(v426 - 1, v425));
        if (!v426)
        {
          ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
          std::__shared_weak_count::__release_weak(v424);
        }
      }
      MEMORY[0x212BC6398](v420, 0x10F0C40B62ED6C6);
      v427 = v484;
      v484 = 0;
      if (v427)
      {
        v428 = *(std::__shared_weak_count **)(v427 + 32);
        if (v428)
        {
          v429 = (unint64_t *)&v428->__shared_owners_;
          do
            v430 = __ldaxr(v429);
          while (__stlxr(v430 - 1, v429));
          if (!v430)
          {
            ((void (*)(std::__shared_weak_count *))v428->__on_zero_shared)(v428);
            std::__shared_weak_count::__release_weak(v428);
          }
        }
        v431 = *(std::__shared_weak_count **)(v427 + 16);
        if (v431)
        {
          v432 = (unint64_t *)&v431->__shared_owners_;
          do
            v433 = __ldaxr(v432);
          while (__stlxr(v433 - 1, v432));
          if (!v433)
          {
            ((void (*)(std::__shared_weak_count *))v431->__on_zero_shared)(v431);
            std::__shared_weak_count::__release_weak(v431);
          }
        }
        MEMORY[0x212BC6398](v427, 0x10F0C40B62ED6C6);
      }
    }
    v434 = (std::__shared_weak_count *)*((_QWORD *)&v490 + 1);
    if (*((_QWORD *)&v490 + 1))
    {
      v435 = (unint64_t *)(*((_QWORD *)&v490 + 1) + 8);
      do
        v436 = __ldaxr(v435);
      while (__stlxr(v436 - 1, v435));
      if (!v436)
      {
        ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
        std::__shared_weak_count::__release_weak(v434);
      }
    }
    v437 = *(std::__shared_weak_count **)&v489[16];
    if (*(_QWORD *)&v489[16])
    {
      v438 = (unint64_t *)(*(_QWORD *)&v489[16] + 8);
      do
        v439 = __ldaxr(v438);
      while (__stlxr(v439 - 1, v438));
      if (!v439)
      {
        ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
        std::__shared_weak_count::__release_weak(v437);
      }
    }
  }
  else
  {
    os_log_type_enabled(v398, OS_LOG_TYPE_INFO);
    *(_DWORD *)v489 = 136315650;
    *(_QWORD *)&v489[4] = "line";
    *(_WORD *)&v489[12] = 1024;
    *(_DWORD *)&v489[14] = v450;
    *(_WORD *)&v489[18] = 1024;
    *(_DWORD *)&v489[20] = v449;
    v440 = (void *)_os_log_send_and_compose_impl();
    if (v440)
      free(v440);
  }
  if (v383)
  {
    sub_20E8C003C((uint64_t)&v474, "  %s: %d inlier measurements (of %d total).", "line", v450, v449);
    sub_20E863570((uint64_t)&v474);
  }
  sub_20E863570((uint64_t)&v474);
  v441 = v482;
  if (v482)
  {
    v442 = (unint64_t *)&v482->__shared_owners_;
    do
      v443 = __ldaxr(v442);
    while (__stlxr(v443 - 1, v442));
    if (!v443)
    {
      ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
      std::__shared_weak_count::__release_weak(v441);
    }
  }
}

void sub_20F18A370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 152))
  {
    if (*(char *)(v33 - 153) < 0)
      operator delete(*(void **)(v33 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  sub_20E86E8C4((uint64_t *)(v33 - 216));
  sub_20E86E8C4((uint64_t *)(v33 - 224));
  sub_20E86E658(v33 - 176);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A4E4()
{
  JUMPOUT(0x20F18A4ECLL);
}

void sub_20F18A510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (*(_BYTE *)(v33 - 144) && *(char *)(v33 - 145) < 0)
    operator delete(*(void **)(v33 - 168));
  v35 = *(void **)(v33 - 176);
  if (v35)
    os_release(v35);
  sub_20E863714((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_20F18A690(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20F18A6B4(_DWORD *result, _QWORD *a2, int *a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[2];
  char v23;
  _DWORD v24[4];
  _QWORD v25[33];

  if (*result != -1)
  {
    v5 = *a3;
    if (v5 >= (uint64_t)(a4[1] - *a4) >> 2 || *result != *(_DWORD *)(*a4 + 4 * v5))
    {
      sub_20E863438((uint64_t)v24);
      v8 = *a3;
      if (v8 >= (uint64_t)(a4[1] - *a4) >> 2)
      {
        sub_20E86A980(v25, (uint64_t)"Bad match index: ", 17);
        v11 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v11, (uint64_t)" => ", 4);
        v12 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v12, (uint64_t)". track_ids size: ", 18);
        v13 = (_QWORD *)std::ostream::operator<<();
        sub_20E8C81A0(v13);
      }
      else
      {
        v9 = *(_DWORD *)(*a4 + 4 * v8);
        v10 = (_QWORD *)a2[1];
        if ((_QWORD *)*a2 == v10)
        {
          v21 = (_QWORD *)*a2;
        }
        else
        {
          v16 = (_QWORD *)*a2;
          while (!*v16 || *(_DWORD *)*v16 != v9)
          {
            if (++v16 == v10)
            {
              v21 = (_QWORD *)a2[1];
              goto LABEL_18;
            }
          }
          v21 = v16;
        }
LABEL_18:
        sub_20E86A980(v25, (uint64_t)"Track ID at track index: ", 25);
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v17, (uint64_t)" v.s. at match: ", 16);
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v18, (uint64_t)". Match index: ", 15);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v19, (uint64_t)" => ", 4);
        std::ostream::operator<<();
        if (v21 == (_QWORD *)a2[1])
        {
          sub_20E86A980(v25, (uint64_t)". Cannot find track of same ID in track index.\n", 47);
        }
        else
        {
          sub_20E86A980(v25, (uint64_t)". Find track of same ID in track index at index: ", 49);
          v20 = (_QWORD *)std::ostream::operator<<();
          sub_20E8C81A0(v20);
        }
      }
      v14 = (const char *)v22;
      sub_20E923E88(v24, v22);
      if (v23 < 0)
        v14 = (const char *)v22[0];
      v15 = strlen(v14);
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VisualSlidingWindow.cpp", 411, (uint64_t)"", 0, (uint64_t)v14, v15, (void (*)(void **))sub_21023DDB0);
      abort();
    }
  }
  return result;
}

void sub_20F18A91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F18A97C(_QWORD *result, int a2, _OWORD *a3, _OWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v5 = result[5] + 336 * result[9];
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_DWORD *)(v5 + 320) = -1;
  *(_QWORD *)(v5 + 328) = 0;
  v6 = result[5];
  v7 = 0xCF3CF3CF3CF3CF3DLL * ((result[6] - v6) >> 4);
  v8 = result[10];
  v9 = result[9] + 1;
  if (v9 >= v7)
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((result[6] - v6) >> 4);
  else
    v10 = 0;
  result[9] = v9 - v10;
  if (v8 == v7)
  {
    v11 = result[8] + 1;
    if (v11 >= v7)
      v12 = v7;
    else
      v12 = 0;
    result[8] = v11 - v12;
  }
  else
  {
    result[10] = v8 + 1;
  }
  if (v9 != v10)
    v7 = v9 - v10;
  v13 = v6 + 336 * v7;
  v14 = (_QWORD *)(v13 - 8);
  v15 = (_OWORD *)(v13 + 32 * *(_QWORD *)(v13 - 8) - 336);
  *v15 = *a3;
  v15[1] = a3[1];
  v16 = result[9];
  v17 = result[5];
  if (!v16)
    v16 = 0xCF3CF3CF3CF3CF3DLL * ((result[6] - v17) >> 4);
  v18 = v17 + 336 * v16 + 32 * *v14;
  *(_OWORD *)(v18 - 208) = *a4;
  *(_OWORD *)(v18 - 192) = a4[1];
  v19 = result[9];
  v20 = result[5];
  if (v19)
    v21 = v19 - 1;
  else
    v21 = 0xCF3CF3CF3CF3CF3DLL * ((result[6] - v20) >> 4) - 1;
  v22 = v20 + 336 * v21 + 8 * *v14;
  *(double *)(v22 + 256) = a5;
  *(_QWORD *)(v22 + 288) = 0x3FF0000000000000;
  *(_DWORD *)(v20 + 336 * v21 + 320) = a2;
  *(_BYTE *)(result[11] + result[15]) = 0;
  v23 = result[12] - result[11];
  v24 = result[16];
  v25 = result[15] + 1;
  if (v25 >= v23)
    v26 = result[12] - result[11];
  else
    v26 = 0;
  result[15] = v25 - v26;
  if (v24 == v23)
  {
    v27 = result[14] + 1;
    if (v27 < v23)
      v23 = 0;
    result[14] = v27 - v23;
  }
  else
  {
    result[16] = v24 + 1;
  }
  return result;
}

uint64_t sub_20F18ABD8(uint64_t a1, double *a2, uint64_t a3, int8x16_t a4, double a5, int8x16_t a6, int32x4_t a7, int32x4_t a8, float64x2_t a9, float64x2_t a10)
{
  unsigned int v13;
  double v14;
  double v15;
  char v16;
  double v17;
  uint64_t result;
  float64x2_t v19;
  double v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 992);
  if (v13 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v13 = *(_DWORD *)(a1 + 992);
    if (v13 <= 7)
      goto LABEL_3;
  }
  else if (v13 <= 7)
  {
LABEL_3:
    if (!v13)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    goto LABEL_8;
  }
  if (v13 <= 0xD)
  {
LABEL_8:
    v14 = a2[1];
    *(double *)a7.i64 = *(double *)(a1 + 88) + *(double *)(a1 + 72) * *a2 + *(double *)(a1 + 80) * v14;
    v15 = *(double *)(a1 + 104);
    a6.i64[0] = *(_QWORD *)(a1 + 112);
    *(double *)a4.i64 = v14 * v15 + *(double *)a6.i64;
    *(_QWORD *)&v26.f64[0] = a7.i64[0];
    *(_QWORD *)&v26.f64[1] = a4.i64[0];
    goto LABEL_9;
  }
  a7.i64[0] = (uint64_t)a2[1];
  *(double *)a4.i64 = *(double *)(a1 + 88) + *(double *)(a1 + 72) * *a2 + *(double *)(a1 + 80) * *(double *)a7.i64;
  a6.i64[0] = *(_QWORD *)(a1 + 112);
  v15 = *(double *)a7.i64 * *(double *)(a1 + 104) + *(double *)a6.i64;
  v26.f64[0] = *(double *)a4.i64;
  v26.f64[1] = v15;
  if (v13 == 14)
  {
LABEL_9:
    v21 = &v19;
    v22 = &v26;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    if (v13 <= 7)
      goto LABEL_10;
    goto LABEL_21;
  }
  v21 = &v19;
  v22 = &v26;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  if (v13 != -1)
    goto LABEL_38;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *(_DWORD *)(a1 + 992);
  if (v13 > 7)
  {
LABEL_21:
    if (v13 <= 0xB)
    {
      if (v13 > 9)
      {
        if (v13 == 10)
          v16 = sub_20EB24F38((uint64_t)&v19, (uint64_t)&v26, a1 + 168, (double *)(a1 + 280), 0x14u, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5);
        else
          v16 = sub_20EB38E20(a1, (uint64_t)&v19, &v26, 0, 0, 0);
      }
      else if (v13 == 9)
      {
        v16 = sub_20EB35004(a1, (uint64_t)&v19, &v26, 0, 0, 0, *(double *)a4.i64, v15, *(double *)a6.i64, a7, a8);
      }
      else
      {
        v17 = sqrt(v26.f64[0] * v26.f64[0] + v26.f64[1] * v26.f64[1]);
        v16 = sub_20EB24018((uint64_t)&v19, v26.f64, (double *)(a1 + 168), 20, v17, v17, *(double *)a6.i64, a7, a8);
      }
      goto LABEL_45;
    }
    if (v13 <= 0xD)
    {
      if (v13 != 13)
        goto LABEL_48;
      v16 = sub_20EB43734((double *)a1, (uint64_t)&v19, (uint64_t)&v26, 0, 0, 0);
      goto LABEL_45;
    }
    if (v13 == 14)
    {
      if (!sub_20EB253A0((uint64_t)&v19, (uint64_t)&v26, (double *)(a1 + 168), (double *)(a1 + 392), 0x14u, (*(double *)a1 + *(double *)(a1 + 32)) * 0.5))goto LABEL_48;
      goto LABEL_46;
    }
LABEL_38:
    v16 = sub_20EB3CED8(a1, (uint64_t)&v19, &v26, 0, 0, 0);
    goto LABEL_45;
  }
LABEL_10:
  if (v13 > 3)
  {
    if (v13 > 5)
    {
      if (v13 == 6)
        v16 = sub_20EB41C58((double *)a1, (uint64_t)&v19, v26.f64, 0, 0, 0);
      else
        v16 = sub_20EB306CC(a1, (uint64_t)&v19, &v26, 0, 0, 0, *(double *)a4.i64, v15, a6, (int8x16_t)a7, *(double *)a8.i64, a9.f64[0], a10);
    }
    else if (v13 == 5)
    {
      v16 = sub_20EB2886C((uint64_t)&v19, v26.f64, a1 + 168, 5);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 468))
      {
        a4.i64[0] = sub_20EB27C0C(a1 + 204, (double *)(a1 + 168), 0x32uLL, a4, v15, a6, (int8x16_t)a7).u64[0];
        *(_BYTE *)(a1 + 468) = 1;
      }
      v16 = sub_20EA8D684((uint64_t)&v19, (uint64_t)&v26, (int64x2_t *)(a1 + 168), (float *)(a1 + 204), 0, 5, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, *(double *)a8.i64, a9.f64[0], a10);
    }
LABEL_45:
    if ((v16 & 1) == 0)
      goto LABEL_48;
    goto LABEL_46;
  }
  if (v13 > 1)
  {
    if (v13 == 2)
      v16 = sub_20EA8D22C((uint64_t)&v21, a1);
    else
      v16 = sub_20EB23DF0((uint64_t)&v19, v26.f64, (int64x2_t *)(a1 + 168), 20, *(double *)a4.i64, v15, *(double *)a6.i64, *(double *)a7.i64, (int64x2_t)a8, a9);
    goto LABEL_45;
  }
  if (!v13)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v19 = v26;
  v20 = 1.0;
LABEL_46:
  if (v20 > 0.00000001)
  {
    *(float64x2_t *)a3 = vmulq_n_f64(v19, 1.0 / v20);
    return 1;
  }
LABEL_48:
  result = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_20F18B088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  result = a6;
  if (a2 != a4)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      v9 = a6 + v7;
      v10 = *(_QWORD *)(a2 + v7 - 256);
      *(_QWORD *)(v8 - 256) = 0;
      *(_QWORD *)(v9 - 240) = 0;
      *(_QWORD *)(v9 - 232) = 0;
      *(_QWORD *)(v9 - 256) = v10;
      *(_QWORD *)(v9 - 248) = 0;
      *(_OWORD *)(v9 - 248) = *(_OWORD *)(a2 + v7 - 248);
      *(_QWORD *)(v9 - 232) = *(_QWORD *)(a2 + v7 - 232);
      *(_QWORD *)(v8 - 240) = 0;
      *(_QWORD *)(v8 - 232) = 0;
      *(_QWORD *)(v8 - 248) = 0;
      v11 = *(_OWORD *)(a2 + v7 - 224);
      *(_QWORD *)(v9 - 200) = 0;
      *(_QWORD *)(v9 - 192) = 0;
      *(_QWORD *)(v9 - 208) = 0;
      *(_OWORD *)(v9 - 224) = v11;
      *(_OWORD *)(v9 - 208) = *(_OWORD *)(a2 + v7 - 208);
      *(_QWORD *)(v9 - 192) = *(_QWORD *)(a2 + v7 - 192);
      *(_QWORD *)(v8 - 208) = 0;
      *(_QWORD *)(v8 - 200) = 0;
      *(_QWORD *)(v8 - 192) = 0;
      *(_QWORD *)(v9 - 184) = 0;
      *(_QWORD *)(v9 - 176) = 0;
      *(_QWORD *)(v9 - 168) = 0;
      *(_OWORD *)(v9 - 184) = *(_OWORD *)(a2 + v7 - 184);
      *(_QWORD *)(v9 - 168) = *(_QWORD *)(a2 + v7 - 168);
      *(_QWORD *)(v8 - 184) = 0;
      *(_QWORD *)(v8 - 176) = 0;
      *(_QWORD *)(v8 - 168) = 0;
      *(_QWORD *)(v9 - 160) = 0;
      *(_QWORD *)(v9 - 152) = 0;
      *(_QWORD *)(v9 - 144) = 0;
      *(_OWORD *)(v9 - 160) = *(_OWORD *)(a2 + v7 - 160);
      *(_QWORD *)(v9 - 144) = *(_QWORD *)(a2 + v7 - 144);
      *(_QWORD *)(v8 - 160) = 0;
      *(_QWORD *)(v8 - 152) = 0;
      *(_QWORD *)(v8 - 144) = 0;
      *(_QWORD *)(v9 - 136) = 0;
      *(_QWORD *)(v9 - 128) = 0;
      *(_QWORD *)(v9 - 120) = 0;
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(a2 + v7 - 136);
      *(_QWORD *)(v9 - 120) = *(_QWORD *)(a2 + v7 - 120);
      *(_QWORD *)(v8 - 136) = 0;
      *(_QWORD *)(v8 - 128) = 0;
      *(_QWORD *)(v8 - 120) = 0;
      *(_QWORD *)(v9 - 112) = 0;
      *(_QWORD *)(v9 - 104) = 0;
      *(_QWORD *)(v9 - 96) = 0;
      *(_OWORD *)(v9 - 112) = *(_OWORD *)(a2 + v7 - 112);
      *(_QWORD *)(v9 - 96) = *(_QWORD *)(a2 + v7 - 96);
      *(_QWORD *)(v8 - 112) = 0;
      *(_QWORD *)(v8 - 104) = 0;
      *(_QWORD *)(v8 - 96) = 0;
      *(_QWORD *)(v9 - 88) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      *(_QWORD *)(v9 - 72) = 0;
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(a2 + v7 - 88);
      *(_QWORD *)(v9 - 72) = *(_QWORD *)(a2 + v7 - 72);
      *(_QWORD *)(v8 - 88) = 0;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a2 + v7 - 64);
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(a2 + v7 - 48);
      *(_QWORD *)(v8 - 64) = 0;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      v12 = *(_QWORD *)(a2 + v7 - 40);
      *(_DWORD *)(v9 - 32) = *(_DWORD *)(a2 + v7 - 32);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 40) = v12;
      *(_QWORD *)(v9 - 24) = 0;
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a2 + v7 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a2 + v7 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 256;
    }
    while (a2 + v7 != a4);
    return a6 + v7;
  }
  return result;
}

unint64_t sub_20F18B1F8(unint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  unint64_t v40;
  BOOL v41;
  int v42;
  unint64_t v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  int v50;
  unint64_t v51;
  BOOL v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  unint64_t v62;
  BOOL v63;
  unint64_t *v64;
  unint64_t v65;
  BOOL v66;
  int v67;
  unint64_t v68;
  BOOL v69;
  unint64_t *v70;
  int v71;
  unint64_t v72;
  BOOL v73;
  unint64_t *v74;
  unint64_t *v75;
  int v76;
  unint64_t v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  BOOL v84;
  int v85;
  unint64_t v86;
  BOOL v87;
  unint64_t *v88;
  int v89;
  unint64_t v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t *v99;
  BOOL v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  BOOL v119;
  int64_t v120;
  int64_t v121;
  int64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  BOOL v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  unint64_t *v131;
  unint64_t v132;
  int v133;
  unint64_t v134;
  unint64_t v135;
  BOOL v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  int v145;
  unint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  BOOL v157;
  int v158;
  unint64_t *v159;
  BOOL v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  BOOL v169;
  unint64_t v170;
  unint64_t *v171;
  int v172;
  unint64_t v173;
  BOOL v174;
  unint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  BOOL v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  BOOL v189;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = (unint64_t *)(a2 - 16);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - (char *)v9;
    v11 = (a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v92 = *((_QWORD *)a2 - 2);
        v93 = *v9;
        if (v92 < *v9)
          v94 = -16777216;
        else
          v94 = 0x1000000;
        if (v92 != *v9
          || ((v95 = *((_QWORD *)a2 - 1), v96 = v9[1], v97 = v95 == v96, v95 < v96)
            ? (v94 = -16777216)
            : (v94 = 0x1000000),
              !v97))
        {
          if (v94 >= 1)
          {
            *v9 = v92;
            *((_QWORD *)a2 - 2) = v93;
            v98 = v9[1];
            v9[1] = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v98;
          }
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_20F18BCB0(v9, v9 + 2, v8);
      case 4uLL:
        return (unint64_t)sub_20F18C068(v9, v9 + 2, v9 + 4, v8);
      case 5uLL:
        return (unint64_t)sub_20F18C178(v9, v9 + 2, v9 + 4, v9 + 6, v8);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (v9 == (unint64_t *)a2)
              return result;
            v120 = (v11 - 2) >> 1;
            v121 = v120;
            while (1)
            {
              v122 = v121;
              if (v120 >= v121)
                break;
LABEL_226:
              v121 = v122 - 1;
              if (!v122)
              {
                v148 = (unint64_t)v10 >> 4;
                do
                {
                  if (v148 >= 2)
                  {
                    v150 = 0;
                    v151 = *v9;
                    v152 = v9[1];
                    v153 = v9;
                    do
                    {
                      v154 = v153;
                      result = v150 + 1;
                      v153 += 2 * v150 + 2;
                      v155 = 2 * v150;
                      v150 = (2 * v150) | 1;
                      if (v155 + 2 < v148)
                      {
                        v156 = v153[2];
                        v157 = *v153 == v156;
                        v158 = *v153 < v156 ? -16777216 : 0x1000000;
                        if (!v157
                          || ((result = v154[2 * result + 1],
                               v159 = (unint64_t *)v153[3],
                               v160 = result == (_QWORD)v159,
                               result < (unint64_t)v159)
                            ? (v158 = -16777216)
                            : (v158 = 0x1000000),
                              !v160))
                        {
                          if (v158 > 0)
                          {
                            v153 += 2;
                            v150 = v155 + 2;
                          }
                        }
                      }
                      *v154 = *v153;
                      v154[1] = v153[1];
                    }
                    while (v150 <= (uint64_t)((unint64_t)(v148 - 2) >> 1));
                    if (v153 == (unint64_t *)(a2 - 16))
                    {
                      *v153 = v151;
                      v153[1] = v152;
                    }
                    else
                    {
                      *v153 = *((_QWORD *)a2 - 2);
                      v153[1] = *((_QWORD *)a2 - 1);
                      *((_QWORD *)a2 - 2) = v151;
                      *((_QWORD *)a2 - 1) = v152;
                      v161 = (char *)v153 - (char *)v9 + 16;
                      if (v161 >= 17)
                      {
                        v162 = (((unint64_t)v161 >> 4) - 2) >> 1;
                        v163 = &v9[2 * v162];
                        v164 = *v163;
                        v165 = *v153;
                        v166 = *v163 < *v153 ? -16777216 : 0x1000000;
                        if (*v163 != *v153
                          || ((v167 = v163[1], v168 = v153[1], v169 = v167 == v168, v167 < v168)
                            ? (v166 = -16777216)
                            : (v166 = 0x1000000),
                              !v169))
                        {
                          if (v166 >= 1)
                          {
                            v170 = v153[1];
                            do
                            {
                              v171 = v153;
                              v153 = v163;
                              *v171 = v164;
                              v171[1] = v163[1];
                              if (!v162)
                                break;
                              v162 = (v162 - 1) >> 1;
                              v163 = &v9[2 * v162];
                              v164 = *v163;
                              v172 = *v163 < v165 ? -16777216 : 0x1000000;
                              if (*v163 == v165)
                              {
                                v173 = v163[1];
                                v174 = v173 == v170;
                                v172 = v173 < v170 ? -16777216 : 0x1000000;
                                if (v174)
                                  break;
                              }
                            }
                            while (v172 > 0);
                            *v153 = v165;
                            v153[1] = v170;
                          }
                        }
                      }
                    }
                  }
                  a2 -= 16;
                }
                while ((unint64_t)v148-- > 2);
                return result;
              }
            }
            v123 = (2 * v121) | 1;
            v124 = &v9[2 * v123];
            if (2 * v122 + 2 < (uint64_t)v11)
            {
              v125 = v124[2];
              v126 = *v124 == v125;
              v127 = *v124 < v125 ? -16777216 : 0x1000000;
              if (!v126
                || ((v128 = v9[2 * v123 + 1], v129 = v124[3], v130 = v128 == v129, v128 < v129)
                  ? (v127 = -16777216)
                  : (v127 = 0x1000000),
                    !v130))
              {
                if (v127 > 0)
                {
                  v124 += 2;
                  v123 = 2 * v122 + 2;
                }
              }
            }
            v131 = &v9[2 * v122];
            result = *v124;
            v132 = *v131;
            if (*v124 < *v131)
              v133 = -16777216;
            else
              v133 = 0x1000000;
            if (*v124 != *v131
              || ((v134 = v124[1], v135 = v9[2 * v122 + 1], v136 = v134 == v135, v134 < v135)
                ? (v133 = -16777216)
                : (v133 = 0x1000000),
                  !v136))
            {
              if (v133 <= 0)
              {
                v134 = v131[1];
                goto LABEL_251;
              }
              goto LABEL_226;
            }
            while (1)
            {
LABEL_251:
              v137 = v131;
              v131 = v124;
              *v137 = result;
              v137[1] = v124[1];
              if (v120 < v123)
              {
LABEL_225:
                *v131 = v132;
                v131[1] = v134;
                goto LABEL_226;
              }
              v138 = (2 * v123) | 1;
              v124 = &v9[2 * v138];
              v139 = 2 * v123 + 2;
              if (v139 >= (uint64_t)v11)
              {
                v123 = (2 * v123) | 1;
                result = *v124;
                if (*v124 < v132)
                  v145 = -16777216;
                else
                  v145 = 0x1000000;
                if (*v124 == v132)
                {
LABEL_279:
                  v146 = v124[1];
                  v147 = v146 == v134;
                  if (v146 < v134)
                    v145 = -16777216;
                  else
                    v145 = 0x1000000;
                  if (v147)
                    v145 = 0;
                }
              }
              else
              {
                v140 = v124[2];
                if (*v124 < v140)
                  v141 = -16777216;
                else
                  v141 = 0x1000000;
                if (*v124 == v140
                  && ((v142 = v9[2 * v138 + 1], v143 = v124[3], v123 = v138, v144 = v142 == v143, v142 < v143)
                    ? (v141 = -16777216)
                    : (v141 = 0x1000000),
                      v144))
                {
                  result = *v124;
                  if (*v124 < v132)
                    v145 = -16777216;
                  else
                    v145 = 0x1000000;
                  if (*v124 == v132)
                    goto LABEL_279;
                }
                else
                {
                  if (v141 <= 0)
                  {
                    v123 = v138;
                  }
                  else
                  {
                    v124 += 2;
                    v123 = v139;
                  }
                  result = *v124;
                  if (*v124 < v132)
                    v145 = -16777216;
                  else
                    v145 = 0x1000000;
                  if (*v124 == v132)
                    goto LABEL_279;
                }
              }
              if (v145 >= 1)
                goto LABEL_225;
            }
          }
          v12 = v11 >> 1;
          v13 = &v9[2 * (v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (unint64_t)sub_20F18BCB0(&v7[2 * (v11 >> 1)], v7, v8);
            --a3;
            v16 = *v7;
            if ((a4 & 1) != 0)
              goto LABEL_19;
          }
          else
          {
            sub_20F18BCB0(v7, &v7[2 * (v11 >> 1)], v8);
            v14 = &v7[2 * v12];
            sub_20F18BCB0(v7 + 2, v14 - 2, (unint64_t *)a2 - 4);
            sub_20F18BCB0(v7 + 4, &v7[2 * v12 + 2], (unint64_t *)a2 - 6);
            result = (unint64_t)sub_20F18BCB0(v14 - 2, v13, &v7[2 * v12 + 2]);
            v15 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v14;
            *(_OWORD *)v14 = v15;
            v8 = (unint64_t *)(a2 - 16);
            --a3;
            v16 = *v7;
            if ((a4 & 1) != 0)
              goto LABEL_19;
          }
          v17 = *(v7 - 2);
          if (v17 < v16)
            v18 = -16777216;
          else
            v18 = 0x1000000;
          if (v17 == v16)
          {
            v19 = *(v7 - 1);
            v20 = v7[1];
            v21 = v19 == v20;
            v18 = v19 < v20 ? -16777216 : 0x1000000;
            if (v21)
            {
LABEL_94:
              if (v16 < *v8)
                v61 = -16777216;
              else
                v61 = 0x1000000;
              if (v16 == *v8
                && ((v62 = *((_QWORD *)a2 - 1), v63 = v19 == v62, v19 < v62) ? (v61 = -16777216) : (v61 = 0x1000000), v63)
                || v61 < 1)
              {
                v70 = v7 + 2;
                do
                {
                  v9 = v70;
                  if (v70 >= (unint64_t *)a2)
                    break;
                  if (v16 < *v70)
                    v71 = -16777216;
                  else
                    v71 = 0x1000000;
                  if (v16 == *v70)
                  {
                    v72 = v70[1];
                    v73 = v19 == v72;
                    v71 = v19 < v72 ? -16777216 : 0x1000000;
                    if (v73)
                      v71 = 0;
                  }
                  v70 += 2;
                }
                while (v71 < 1);
              }
              else
              {
                v64 = v7;
                v9 = v7;
                do
                {
                  v65 = v9[2];
                  v9 += 2;
                  v66 = v16 == v65;
                  if (v16 < v65)
                    v67 = -16777216;
                  else
                    v67 = 0x1000000;
                  if (v66)
                  {
                    v68 = v64[3];
                    v69 = v19 == v68;
                    v67 = v19 < v68 ? -16777216 : 0x1000000;
                    if (v69)
                      v67 = 0;
                  }
                  v64 = v9;
                }
                while (v67 <= 0);
              }
              v74 = (unint64_t *)a2;
              if (v9 < (unint64_t *)a2)
              {
                v75 = v8;
                do
                {
                  v74 = v75;
                  if (v16 < *v75)
                    v76 = -16777216;
                  else
                    v76 = 0x1000000;
                  if (v16 == *v75)
                  {
                    v77 = v75[1];
                    v78 = v19 == v77;
                    v76 = v19 < v77 ? -16777216 : 0x1000000;
                    if (v78)
                      break;
                  }
                  v75 -= 2;
                }
                while (v76 > 0);
              }
              if (v9 < v74)
              {
                v79 = *v9;
                v80 = *v74;
                do
                {
                  *v9 = v80;
                  *v74 = v79;
                  v81 = v9[1];
                  v9[1] = v74[1];
                  v74[1] = v81;
                  v82 = v9;
                  do
                  {
                    v83 = v9[2];
                    v9 += 2;
                    v79 = v83;
                    v84 = v16 == v83;
                    if (v16 < v83)
                      v85 = -16777216;
                    else
                      v85 = 0x1000000;
                    if (v84)
                    {
                      v86 = v82[3];
                      v87 = v19 == v86;
                      v85 = v19 < v86 ? -16777216 : 0x1000000;
                      if (v87)
                        v85 = 0;
                    }
                    v82 = v9;
                  }
                  while (v85 < 1);
                  v88 = v74 - 2;
                  while (1)
                  {
                    v74 = v88;
                    v80 = *v88;
                    v89 = v16 < *v88 ? -16777216 : 0x1000000;
                    if (v16 == *v88)
                    {
                      v90 = v88[1];
                      v91 = v19 == v90;
                      v89 = v19 < v90 ? -16777216 : 0x1000000;
                      if (v91)
                        break;
                    }
                    v88 -= 2;
                    if (v89 <= 0)
                      goto LABEL_143;
                  }
                  v80 = v16;
LABEL_143:
                  ;
                }
                while (v9 < v74);
              }
              if (v9 - 2 != v7)
              {
                *v7 = *(v9 - 2);
                v7[1] = *(v9 - 1);
              }
              a4 = 0;
              *(v9 - 2) = v16;
              *(v9 - 1) = v19;
              continue;
            }
          }
          if (v18 <= 0)
          {
            v19 = v7[1];
            goto LABEL_94;
          }
LABEL_19:
          v22 = 0;
          v23 = v7[1];
          do
          {
            v24 = v22;
            v25 = (char *)v7 + v22;
            v26 = *((_QWORD *)v25 + 2);
            if (v26 < v16)
              v27 = -16777216;
            else
              v27 = 0x1000000;
            if (v26 == v16)
            {
              v28 = *((_QWORD *)v25 + 3);
              v29 = v28 == v23;
              v27 = v28 < v23 ? -16777216 : 0x1000000;
              if (v29)
                break;
            }
            v22 = v24 + 16;
          }
          while (v27 > 0);
          v30 = (unint64_t)v7 + v24 + 16;
          v31 = a2;
          if (v24)
          {
            do
            {
              v33 = v31 - 16;
              v34 = *((_QWORD *)v31 - 2);
              v35 = v34 == v16;
              if (v34 < v16)
                v36 = -16777216;
              else
                v36 = 0x1000000;
              if (v35)
              {
                v37 = *((_QWORD *)v31 - 1);
                v38 = v37 == v23;
                if (v37 < v23)
                  v39 = -16777216;
                else
                  v39 = 0x1000000;
                if (v38)
                  v36 = 0;
                else
                  v36 = v39;
              }
              v31 = v33;
            }
            while (v36 < 1);
          }
          else
          {
            v32 = a2;
            while (v30 < (unint64_t)v32)
            {
              v33 = v32 - 16;
              v40 = *((_QWORD *)v32 - 2);
              v41 = v40 == v16;
              if (v40 < v16)
                v42 = -16777216;
              else
                v42 = 0x1000000;
              if (v41)
              {
                v43 = *((_QWORD *)v32 - 1);
                v44 = v43 == v23;
                if (v43 < v23)
                  v45 = -16777216;
                else
                  v45 = 0x1000000;
                if (v44)
                  v42 = 0;
                else
                  v42 = v45;
              }
              v32 = v33;
              if (v42 > 0)
                goto LABEL_58;
            }
            v33 = v32;
          }
LABEL_58:
          if (v30 >= (unint64_t)v33)
          {
            v9 = (unint64_t *)v30;
          }
          else
          {
            v46 = *(_QWORD *)v33;
            v9 = (unint64_t *)v30;
            v47 = (unint64_t *)v33;
            do
            {
              *v9 = v46;
              *v47 = v26;
              v48 = v9[1];
              v9[1] = v47[1];
              v47[1] = v48;
              v49 = v9 + 2;
              while (1)
              {
                v9 = v49;
                v26 = *v49;
                v50 = *v49 < v16 ? -16777216 : 0x1000000;
                if (*v49 == v16)
                {
                  v51 = v49[1];
                  v52 = v51 == v23;
                  v50 = v51 < v23 ? -16777216 : 0x1000000;
                  if (v52)
                    break;
                }
                v49 += 2;
                if (v50 <= 0)
                  goto LABEL_73;
              }
              v26 = v16;
LABEL_73:
              v53 = v47;
              do
              {
                v54 = *(v53 - 2);
                v53 -= 2;
                v46 = v54;
                v55 = v54 == v16;
                if (v54 < v16)
                  v56 = -16777216;
                else
                  v56 = 0x1000000;
                if (v55)
                {
                  v57 = *(v47 - 1);
                  v58 = v57 == v23;
                  if (v57 < v23)
                    v59 = -16777216;
                  else
                    v59 = 0x1000000;
                  if (v58)
                    v56 = 0;
                  else
                    v56 = v59;
                }
                v47 = v53;
              }
              while (v56 < 1);
              v47 = v53;
            }
            while (v9 < v53);
          }
          if (v9 - 2 != v7)
          {
            *v7 = *(v9 - 2);
            v7[1] = *(v9 - 1);
          }
          *(v9 - 2) = v16;
          *(v9 - 1) = v23;
          if (v30 < (unint64_t)v33)
            goto LABEL_92;
          v60 = sub_20F18BE18(v7, (char *)v9 - 16);
          result = sub_20F18BE18(v9, a2);
          if (!(_DWORD)result)
          {
            if (v60)
              continue;
LABEL_92:
            result = sub_20F18B1F8(v7, v9 - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (char *)(v9 - 2);
          if (v60)
            return result;
          goto LABEL_2;
        }
        v99 = v9 + 2;
        v101 = v9 == (unint64_t *)a2 || v99 == (unint64_t *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v101)
          {
            v102 = 0;
            v103 = v9;
            do
            {
              v105 = v103;
              v103 = v99;
              v106 = v105[2];
              v107 = *v105;
              if (v106 < *v105)
                v108 = -16777216;
              else
                v108 = 0x1000000;
              if (v106 != *v105
                || ((v109 = v105[3], v110 = v105[1], v111 = v109 == v110, v109 < v110)
                  ? (v108 = -16777216)
                  : (v108 = 0x1000000),
                    !v111))
              {
                if (v108 >= 1)
                {
                  v112 = v105[3];
                  v113 = v102;
                  do
                  {
                    v114 = v113;
                    v115 = (char *)v9 + v113;
                    v116 = *(unint64_t *)((char *)v9 + v113 + 8);
                    *((_QWORD *)v115 + 2) = v107;
                    *((_QWORD *)v115 + 3) = v116;
                    if (!v114)
                    {
                      v104 = v9;
                      goto LABEL_199;
                    }
                    v107 = *((_QWORD *)v115 - 2);
                    if (v106 < v107)
                      v117 = -16777216;
                    else
                      v117 = 0x1000000;
                    if (v106 == v107)
                    {
                      v118 = *(unint64_t *)((char *)v9 + v114 - 8);
                      v119 = v112 == v118;
                      v117 = v112 < v118 ? -16777216 : 0x1000000;
                      if (v119)
                        break;
                    }
                    v113 = v114 - 16;
                  }
                  while (v117 > 0);
                  v104 = (unint64_t *)((char *)v9 + v114);
LABEL_199:
                  *v104 = v106;
                  v104[1] = v112;
                }
              }
              v99 = v103 + 2;
              v102 += 16;
            }
            while (v103 + 2 != (unint64_t *)a2);
          }
        }
        else if (!v101)
        {
          v175 = v9 + 1;
          do
          {
            v176 = v7;
            v7 = v99;
            v177 = v176[2];
            v178 = *v176;
            if (v177 < *v176)
              v179 = -16777216;
            else
              v179 = 0x1000000;
            if (v177 != *v176
              || ((v180 = v176[3], v181 = v176[1], v182 = v180 == v181, v180 < v181)
                ? (v179 = -16777216)
                : (v179 = 0x1000000),
                  !v182))
            {
              if (v179 >= 1)
              {
                v183 = v176[3];
                v184 = v175;
                do
                {
                  v185 = v184;
                  v186 = *v184;
                  v184[1] = v178;
                  v184[2] = v186;
                  v178 = *(v184 - 3);
                  if (v177 < v178)
                    v187 = -16777216;
                  else
                    v187 = 0x1000000;
                  if (v177 == v178)
                  {
                    v188 = *(v184 - 2);
                    v189 = v183 == v188;
                    v187 = v183 < v188 ? -16777216 : 0x1000000;
                    if (v189)
                      break;
                  }
                  v184 -= 2;
                }
                while (v187 > 0);
                *(v185 - 1) = v177;
                *v185 = v183;
              }
            }
            v99 = v7 + 2;
            v175 += 2;
          }
          while (v7 + 2 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

unint64_t *sub_20F18BCB0(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;

  v3 = *a2;
  v4 = *result;
  if (*a2 < *result)
    v5 = -16777216;
  else
    v5 = 0x1000000;
  if (*a2 == *result
    && ((v6 = a2[1], v7 = result[1], v8 = v6 == v7, v6 < v7) ? (v5 = -16777216) : (v5 = 0x1000000), v8)
    || v5 <= 0)
  {
    if (*a3 < v3)
      v14 = -16777216;
    else
      v14 = 0x1000000;
    if (*a3 != v3
      || ((v15 = a3[1], v16 = a2[1], v17 = v15 == v16, v15 < v16) ? (v14 = -16777216) : (v14 = 0x1000000), !v17))
    {
      if (v14 >= 1)
      {
        *a2 = *a3;
        *a3 = v3;
        v18 = a2 + 1;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *result;
        v21 = *a2 < *result ? -16777216 : 0x1000000;
        if (*a2 != *result || ((v22 = result[1], *v18 < v22) ? (v21 = -16777216) : (v21 = 0x1000000), *v18 != v22))
        {
          if (v21 >= 1)
          {
            *result++ = *a2;
            *a2 = v20;
LABEL_50:
            v28 = *result;
            *result = *v18;
            *v18 = v28;
          }
        }
      }
    }
  }
  else
  {
    if (*a3 < v3)
      v9 = -16777216;
    else
      v9 = 0x1000000;
    if (*a3 != v3
      || ((v10 = a3[1], v11 = a2[1], v12 = v10 == v11, v10 < v11) ? (v9 = -16777216) : (v9 = 0x1000000), !v12))
    {
      if (v9 >= 1)
      {
        *result++ = *a3;
        *a3 = v4;
        v13 = a3 + 1;
LABEL_49:
        v18 = v13;
        goto LABEL_50;
      }
    }
    *result = v3;
    *a2 = v4;
    v23 = result[1];
    result[1] = a2[1];
    a2[1] = v23;
    v24 = *a2;
    if (*a3 < *a2)
      v25 = -16777216;
    else
      v25 = 0x1000000;
    if (*a3 != *a2 || ((v26 = a3[1], v27 = v26 == v23, v26 < v23) ? (v25 = -16777216) : (v25 = 0x1000000), !v27))
    {
      if (v25 >= 1)
      {
        *a2 = *a3;
        *a3 = v24;
        v13 = a3 + 1;
        result = a2 + 1;
        goto LABEL_49;
      }
    }
  }
  return result;
}

BOOL sub_20F18BE18(unint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v25 = *((_QWORD *)a2 - 2);
      v26 = *a1;
      if (v25 < *a1)
        v27 = -16777216;
      else
        v27 = 0x1000000;
      if (v25 != *a1
        || ((v28 = *((_QWORD *)a2 - 1), v29 = a1[1], v30 = v28 == v29, v28 < v29)
          ? (v27 = -16777216)
          : (v27 = 0x1000000),
            !v30))
      {
        if (v27 >= 1)
        {
          *a1 = v25;
          *((_QWORD *)a2 - 2) = v26;
          v31 = a1[1];
          a1[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v31;
        }
      }
      break;
    case 3:
      sub_20F18BCB0(a1, a1 + 2, (unint64_t *)a2 - 2);
      result = 1;
      break;
    case 4:
      sub_20F18C068(a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      result = 1;
      break;
    case 5:
      sub_20F18C178(a1, a1 + 2, a1 + 4, a1 + 6, (unint64_t *)a2 - 2);
      result = 1;
      break;
    default:
      v6 = a1 + 4;
      sub_20F18BCB0(a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (a1 + 6 == (unint64_t *)a2)
      {
LABEL_30:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          v11 = *v6;
          v12 = *v7 < *v6 ? -16777216 : 0x1000000;
          if (*v7 != *v6
            || ((v13 = v7[1], v14 = v6[1], v15 = v13 == v14, v13 < v14) ? (v12 = -16777216) : (v12 = 0x1000000), !v15))
          {
            if (v12 >= 1)
              break;
          }
LABEL_29:
          v6 = v7;
          v8 += 16;
          v7 += 2;
          if (v7 == (unint64_t *)a2)
            goto LABEL_30;
        }
        v16 = v7[1];
        v17 = v8;
        do
        {
          v18 = v17;
          v19 = (unint64_t *)((char *)a1 + v17);
          v20 = *(unint64_t *)((char *)a1 + v17 + 40);
          v19[6] = v11;
          v19[7] = v20;
          if (v18 == -32)
          {
            *a1 = v10;
            a1[1] = v16;
            if (++v9 != 8)
              goto LABEL_29;
            goto LABEL_44;
          }
          v11 = v19[2];
          if (v10 < v11)
            v21 = -16777216;
          else
            v21 = 0x1000000;
          if (v10 == v11)
          {
            v22 = *(unint64_t *)((char *)a1 + v18 + 24);
            v23 = v16 == v22;
            v21 = v16 < v22 ? -16777216 : 0x1000000;
            if (v23)
              break;
          }
          v17 = v18 - 16;
        }
        while (v21 > 0);
        v24 = (char *)a1 + v18;
        *((_QWORD *)v24 + 4) = v10;
        *((_QWORD *)v24 + 5) = v16;
        if (++v9 != 8)
          goto LABEL_29;
LABEL_44:
        result = v7 + 2 == (unint64_t *)a2;
      }
      break;
  }
  return result;
}

unint64_t *sub_20F18C068(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;

  result = sub_20F18BCB0(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
    v10 = -16777216;
  else
    v10 = 0x1000000;
  if (*a4 != *a3
    || ((v11 = a4[1], v12 = a3[1], v13 = v11 == v12, v11 < v12) ? (v10 = -16777216) : (v10 = 0x1000000), !v13))
  {
    if (v10 >= 1)
    {
      *a3 = *a4;
      *a4 = v9;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      v15 = *a2;
      v16 = *a3 < *a2 ? -16777216 : 0x1000000;
      if (*a3 != *a2
        || ((v17 = a3[1], v18 = a2[1], v19 = v17 == v18, v17 < v18) ? (v16 = -16777216) : (v16 = 0x1000000), !v19))
      {
        if (v16 >= 1)
        {
          *a2 = *a3;
          *a3 = v15;
          v20 = a2[1];
          a2[1] = a3[1];
          a3[1] = v20;
          v21 = *a1;
          v22 = *a2 < *a1 ? -16777216 : 0x1000000;
          if (*a2 != *a1
            || ((v23 = a2[1], v24 = a1[1], v25 = v23 == v24, v23 < v24) ? (v22 = -16777216) : (v22 = 0x1000000), !v25))
          {
            if (v22 >= 1)
            {
              *a1 = *a2;
              *a2 = v21;
              v26 = a1[1];
              a1[1] = a2[1];
              a2[1] = v26;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t *sub_20F18C178(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;

  result = sub_20F18C068(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
    v12 = -16777216;
  else
    v12 = 0x1000000;
  if (*a5 != *a4
    || ((v13 = a5[1], v14 = a4[1], v15 = v13 == v14, v13 < v14) ? (v12 = -16777216) : (v12 = 0x1000000), !v15))
  {
    if (v12 >= 1)
    {
      *a4 = *a5;
      *a5 = v11;
      v16 = a4[1];
      a4[1] = a5[1];
      a5[1] = v16;
      v17 = *a3;
      v18 = *a4 < *a3 ? -16777216 : 0x1000000;
      if (*a4 != *a3
        || ((v19 = a4[1], v20 = a3[1], v21 = v19 == v20, v19 < v20) ? (v18 = -16777216) : (v18 = 0x1000000), !v21))
      {
        if (v18 >= 1)
        {
          *a3 = *a4;
          *a4 = v17;
          v22 = a3[1];
          a3[1] = a4[1];
          a4[1] = v22;
          v23 = *a2;
          v24 = *a3 < *a2 ? -16777216 : 0x1000000;
          if (*a3 != *a2
            || ((v25 = a3[1], v26 = a2[1], v27 = v25 == v26, v25 < v26) ? (v24 = -16777216) : (v24 = 0x1000000), !v27))
          {
            if (v24 >= 1)
            {
              *a2 = *a3;
              *a3 = v23;
              v28 = a2[1];
              a2[1] = a3[1];
              a3[1] = v28;
              v29 = *a1;
              v30 = *a2 < *a1 ? -16777216 : 0x1000000;
              if (*a2 != *a1
                || ((v31 = a2[1], v32 = a1[1], v33 = v31 == v32, v31 < v32) ? (v30 = -16777216) : (v30 = 0x1000000), !v33))
              {
                if (v30 >= 1)
                {
                  *a1 = *a2;
                  *a2 = v29;
                  v34 = a1[1];
                  a1[1] = a2[1];
                  a2[1] = v34;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_20F18C2DC(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a1[4];
  v5 = *a1;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (0x8E38E38E38E38E39 * (v8 >> 3) >= 0x38E38E38E38E38FLL)
      sub_20EB849AC();
    v9 = operator new(v8);
    v10 = (unint64_t)v9 + 8 * (v8 >> 3);
    memcpy(v9, v7, v8);
  }
  v11 = v5 + 56 * v4;
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(v11 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(v11 + 16) = v13;
  *(_OWORD *)v11 = v12;
  v15 = (_QWORD *)(v11 + 32);
  v14 = *(void **)(v11 + 32);
  if (v14)
  {
    *(_QWORD *)(v5 + 56 * v4 + 40) = v14;
    operator delete(v14);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  *v15 = v9;
  *(int64x2_t *)(v5 + 56 * v4 + 40) = vdupq_n_s64(v10);
  v16 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v17 = a1[5];
  v18 = a1[4] + 1;
  if (v18 >= v16)
    v19 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  else
    v19 = 0;
  a1[4] = v18 - v19;
  if (v17 == v16)
  {
    v20 = a1[3] + 1;
    if (v20 < v16)
      v16 = 0;
    a1[3] = v20 - v16;
  }
  else
  {
    a1[5] = v17 + 1;
  }
}

void sub_20F18C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F18C490(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20F18C4E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F18C4F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F9888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F18C528(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 32));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_5;
}

void sub_20F18C578(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x212BC6398);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

__n128 sub_20F18C5D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *a1;
  v5 = *(_OWORD *)(a1 + 1);
  v6 = *(_OWORD *)(a1 + 3);
  v7 = a1[5];
  a1[3] = 0;
  v23 = *((_OWORD *)a1 + 3);
  v24 = v6;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  v8 = a1[8];
  v9 = a1 + 9;
  v26 = *(_OWORD *)(a1 + 9);
  v27 = v5;
  v10 = a1[11];
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  v25 = *((__n128 *)a1 + 6);
  *((_OWORD *)a1 + 6) = 0u;
  v11 = a1[14];
  a1[14] = 0;
  v12 = *((_BYTE *)a1 + 120);
  *a1 = *a2;
  v13 = a2 + 1;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v14 = a2[6];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  *(_OWORD *)(a2 + 3) = 0u;
  *(_OWORD *)(a2 + 5) = 0u;
  a1[6] = v14;
  v15 = a2[7];
  a2[7] = 0;
  a1[7] = v15;
  v16 = a2[8];
  a2[8] = 0;
  a1[8] = v16;
  v17 = (void *)a1[9];
  if (v17)
  {
    a1[10] = (uint64_t)v17;
    operator delete(v17);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  a1[11] = a2[11];
  a2[9] = 0;
  a2[10] = 0;
  v18 = a2[12];
  a2[11] = 0;
  a2[12] = 0;
  a1[12] = v18;
  v19 = a2[13];
  a2[13] = 0;
  a1[13] = v19;
  v20 = a2[14];
  a2[14] = 0;
  a1[14] = v20;
  *((_BYTE *)a1 + 120) = *((_BYTE *)a2 + 120);
  *a2 = v4;
  *v13 = v27;
  v21 = (void *)a2[3];
  if (v21)
  {
    a2[4] = (uint64_t)v21;
    operator delete(v21);
    v21 = (void *)a2[9];
  }
  *(_OWORD *)(a2 + 3) = v24;
  a2[5] = v7;
  *((_OWORD *)a2 + 3) = v23;
  a2[8] = v8;
  if (v21)
  {
    a2[10] = (uint64_t)v21;
    operator delete(v21);
  }
  *(_OWORD *)(a2 + 9) = v26;
  a2[11] = v10;
  result = v25;
  *((__n128 *)a2 + 6) = v25;
  a2[14] = v11;
  *((_BYTE *)a2 + 120) = v12;
  return result;
}

__n128 sub_20F18C774(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __n128 result;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *a1;
  v27 = *(_OWORD *)(a1 + 3);
  v28 = *(_OWORD *)(a1 + 1);
  v5 = *(_OWORD *)(a1 + 5);
  v6 = a1[7];
  a1[5] = 0;
  v22 = *((_OWORD *)a1 + 4);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  v7 = a1[10];
  a1[10] = 0;
  v8 = a1 + 11;
  v26 = *(_OWORD *)(a1 + 11);
  v25 = a1[13];
  a1[13] = 0;
  *(_OWORD *)(a1 + 11) = 0u;
  v23 = *((__n128 *)a1 + 7);
  v24 = v5;
  *((_OWORD *)a1 + 7) = 0u;
  v9 = a1[16];
  a1[16] = 0;
  v10 = *((_BYTE *)a1 + 136);
  *a1 = *a2;
  v11 = a2 + 1;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v12 = a2 + 3;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v13 = a2[8];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  *(_OWORD *)(a2 + 5) = 0u;
  *(_OWORD *)(a2 + 7) = 0u;
  a1[8] = v13;
  v14 = a2[9];
  a2[9] = 0;
  a1[9] = v14;
  v15 = a2[10];
  a2[10] = 0;
  a1[10] = v15;
  v16 = (void *)a1[11];
  if (v16)
  {
    a1[12] = (uint64_t)v16;
    operator delete(v16);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  a1[13] = a2[13];
  a2[11] = 0;
  a2[12] = 0;
  v17 = a2[14];
  a2[13] = 0;
  a2[14] = 0;
  a1[14] = v17;
  v18 = a2[15];
  a2[15] = 0;
  a1[15] = v18;
  v19 = a2[16];
  a2[16] = 0;
  a1[16] = v19;
  *((_BYTE *)a1 + 136) = *((_BYTE *)a2 + 136);
  *a2 = v4;
  *v11 = v28;
  *v12 = v27;
  v20 = (void *)a2[5];
  if (v20)
  {
    a2[6] = (uint64_t)v20;
    operator delete(v20);
    v20 = (void *)a2[11];
  }
  *(_OWORD *)(a2 + 5) = v24;
  a2[7] = v6;
  *((_OWORD *)a2 + 4) = v22;
  a2[10] = v7;
  if (v20)
  {
    a2[12] = (uint64_t)v20;
    operator delete(v20);
  }
  *(_OWORD *)(a2 + 11) = v26;
  a2[13] = v25;
  result = v23;
  *((__n128 *)a2 + 7) = v23;
  a2[16] = v9;
  *((_BYTE *)a2 + 136) = v10;
  return result;
}

void sub_20F18C940(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *p_p;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15[2];
  __int128 v16[2];
  void *__p;
  __int128 v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23[4];
  __int128 __dst;
  uint64_t v25;
  uint64_t v26;

  __p = operator new(0x28uLL);
  v18 = xmmword_2102DBA80;
  strcpy((char *)__p, "IMUExtrapolationConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v26 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v25 = *((_QWORD *)a2 + 2);
  }
  strcpy((char *)v23, "imu_extrapolation_mode");
  HIBYTE(v23[2]) = 22;
  sub_2101050B4((const void **)&__dst, (uint64_t)v23, (uint64_t)&__p);
  v6 = SHIBYTE(v18);
  v7 = (char *)__p;
  v8 = operator new();
  *(_QWORD *)(v8 + 109) = 0;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)v8 = &off_24C9F9910;
  *(_QWORD *)(v8 + 8) = &unk_24C9F9988;
  *(_QWORD *)(v8 + 152) = &unk_24C9F99B0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 120) = (char *)off_24C9F9B28 + 1;
  *(_QWORD *)(v8 + 128) = a1;
  v9 = operator new();
  *(_QWORD *)v9 = &off_24C9F9AF0;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)a1;
  *(_QWORD *)(v8 + 160) = v9;
  *(_QWORD *)(v8 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v8 + 191) = 7;
  if (v6 >= 0)
    p_p = (char *)&__p;
  else
    p_p = v7;
  sub_20E8B2F9C(&v26, p_p, v8, "IMU Extrapolation mode. See IMUExtrapolationMode.");
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v23[0]);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(__p);
  if (SHIBYTE(v23[2]) < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v26 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v21, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v21 = *a2;
    v22 = *((_QWORD *)a2 + 2);
  }
  v19 = operator new(0x20uLL);
  v20 = xmmword_2102DB480;
  strcpy((char *)v19, "rls_est_sample_period_gain");
  sub_2101050B4((const void **)&v21, (uint64_t)&v19, (uint64_t)&__p);
  v11 = SHIBYTE(v18);
  v12 = (char *)__p;
  v13 = sub_20EA9DB90((double *)(a1 + 312));
  if (v11 >= 0)
    v14 = (char *)&__p;
  else
    v14 = v12;
  sub_20E8B2F9C(&v26, v14, v13, "Sample Period Estimation Gain (0,1]");
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_30:
    operator delete(v19);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
  operator delete(__p);
  if (SHIBYTE(v20) < 0)
    goto LABEL_30;
LABEL_23:
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_31:
  operator delete((void *)v21);
LABEL_24:
  BYTE7(v16[1]) = 18;
  strcpy((char *)v16, "gyro_filter_config");
  sub_20F198D0C(a1 + 8, v16, &__p);
  sub_20E8B32F0(a3, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SBYTE7(v16[1]) < 0)
    operator delete(*(void **)&v16[0]);
  BYTE7(v15[1]) = 19;
  strcpy((char *)v15, "accel_filter_config");
  sub_20F198D0C(a1 + 160, v15, &__p);
  sub_20E8B32F0(a3, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SBYTE7(v15[1]) < 0)
    operator delete(*(void **)&v15[0]);
}

void sub_20F18CCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  sub_20E869298(v44);
  _Unwind_Resume(a1);
}

void sub_20F18CE44(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F18D354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F18D458(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F18D478(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F18D498(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F18D4A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F18D4A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F18D500(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor20IMUExtrapolationModeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor20IMUExtrapolationModeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_665;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F18D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F18D60C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9910;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9988;
  *(_QWORD *)(a1 + 152) = &unk_24C9F99B0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F18DE50(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F18DE50(a1);
}

void sub_20F18D674(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9910;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9988;
  *(_QWORD *)(a1 + 152) = &unk_24C9F99B0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F18DE50(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F18D6F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  int data;
  int v21;
  char v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t v30;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v34;
  std::bad_cast v35;
  void *v36;
  std::ios_base v37;
  uint64_t v38;
  int v39;
  _QWORD __sb[8];
  std::string v41;
  std::string v42;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v34 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v34);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v36 = 0;
  v37.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v35.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v37, __sb);
  v38 = 0;
  v39 = -1;
  v15 = (std::ios_base *)((char *)&v35 + (unint64_t)v35.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v35.__vftable;
  *(_DWORD *)((char *)&v35 + (unint64_t)v35.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v37.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v42, *(_QWORD **)((char *)&v37.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42.__r_.__value_.__l.__size_;
  if (size != 11)
  {
    if (size != 8)
    {
      if (size != 5)
        goto LABEL_48;
      v18 = (void *)v42.__r_.__value_.__r.__words[0];
      v19 = &v42;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v42.__r_.__value_.__r.__words[0];
      data = (int)v19->__r_.__value_.__l.__data_;
      v21 = v19->__r_.__value_.__s.__data_[4];
      if (data != 1702390086 || v21 != 100)
        goto LABEL_48;
      v23 = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_29;
      goto LABEL_30;
    }
    v18 = (void *)v42.__r_.__value_.__r.__words[0];
    v24 = &v42;
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if (v24->__r_.__value_.__r.__words[0] == 0x6576697470616441)
    {
      v23 = 1;
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
LABEL_48:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v41);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v18 = (void *)v42.__r_.__value_.__r.__words[0];
  v28 = &v42;
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
  v29 = v28->__r_.__value_.__r.__words[0];
  v30 = *(std::string::size_type *)((char *)v28->__r_.__value_.__r.__words + 3);
  if (v29 != 0x6576697470616441 || v30 != 0x534C526576697470)
    goto LABEL_48;
  v23 = 2;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
LABEL_29:
    operator delete(v18);
LABEL_30:
  if ((*((_BYTE *)&v37.__precision_ + (unint64_t)v35.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_38;
  }
  v27 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v27)
  {
LABEL_38:
    std::bad_cast::bad_cast(&v35);
    v35.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v36 = &unk_24C9AB9F0;
    v37.__vftable = (std::ios_base_vtbl *)&unk_24C9F9AD0;
    sub_20EA9F254((uint64_t)&v35);
  }
  v25 = operator new();
  *(_QWORD *)v25 = &off_24C9F9AF0;
  *(_BYTE *)(v25 + 8) = v23;
  v26 = *a2;
  *a2 = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
}

void sub_20F18DACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F18D934);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F18DBB4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F18DBCCLL);
}

void *sub_20F18DBE8()
{
  return &unk_24C9F9AD0;
}

uint64_t sub_20F18DBF4(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F18DBFC()
{
  return &unk_24C9F9AD0;
}

uint64_t sub_20F18DC08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9910;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9988;
  *(_QWORD *)(a1 + 144) = &unk_24C9F99B0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F18DE50(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F18DE50(v2);
}

void sub_20F18DC78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9910;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9988;
  *(_QWORD *)(a1 + 144) = &unk_24C9F99B0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F18DE50(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F18DCFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9910;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9988;
  *(_QWORD *)a1 = &unk_24C9F99B0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F18DE50(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F18DE50(v2);
}

void sub_20F18DD6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9910;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9988;
  *(_QWORD *)a1 = &unk_24C9F99B0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F18DE50(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F18DDF0(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F18DDFC(uint64_t a1)
{
  sub_20F18DE50(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F18DE20(uint64_t a1)
{
  return sub_20F18DE50(a1 - 8);
}

void sub_20F18DE28(uint64_t a1)
{
  sub_20F18DE50(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F18DE50(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F9A48;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9AB8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F18DF20()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F18DF34()
{
  return &unk_24C9F9AD0;
}

uint64_t sub_20F18DF40(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F9AF0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20F18DF88(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F9B38;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor20IMUExtrapo"
                                      "lationModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor20IMUExtrapolationModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20F18E034(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F18E044(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  void **v12;
  void **v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  size_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  size_t v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  unint64_t v60;
  size_t v61;
  unsigned int v62;
  unsigned int v64;
  unint64_t v65;
  BOOL v66;
  unsigned int v68;
  uint64_t v69;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 152) = 0u;
  v11 = (void **)(a1 + 152);
  *(_QWORD *)(a1 + 248) = 0;
  v12 = (void **)(a1 + 248);
  v13 = (void **)(a1 + 272);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 320) = 12345;
  *(_QWORD *)(a1 + 328) = 0xBFFBB645A1CAC083;
  *(_OWORD *)(a1 + 336) = xmmword_21039D950;
  *(_QWORD *)(a1 + 352) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 368) = 0;
  _NF = *(double *)a1 < 0.0;
  *(_QWORD *)(a1 + 376) = 0;
  if (_NF
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 40, (uint64_t)"ls_pred_cfg_.filter_reg_eps >= 0.0", 34, (uint64_t)"Filter regularization needs to be >= 0.", 39, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 8) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 42, (uint64_t)"ls_pred_cfg_.filter_max_L2_norm >= 0.0", 38, (uint64_t)"Filter max coefficient norm limit needs to be >= 0.", 51, (void (*)(void **))sub_21023DDB0)|| (*(_QWORD *)(a1 + 16) > 0x64uLL || !*(_QWORD *)(a2 + 16))&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp",
         44,
         (uint64_t)"ls_pred_cfg_.num_taps <= 100 && filter_config.num_taps > 0",
         58,
         (uint64_t)"Filter number of taps needs tp be in range of [1,100].",
         54,
         (void (*)(void **))sub_21023DDB0)
    || (!*(_QWORD *)(a1 + 24) || *(_QWORD *)(a2 + 24) >= 0x29uLL)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 46, (uint64_t)"ls_pred_cfg_.max_pred_samples > 0 && filter_config.max_pred_samples <= 40", 73, (uint64_t)"Filter max prediction samples needs to be in range of [1,40].", 61, (void (*)(void **))sub_21023DDB0)|| ((v14 = *(double *)(a1 + 64), v14 > 1.0) || v14 < 0.5)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 49, (uint64_t)"ls_pred_cfg_.rls_forgetting_factor <= 1.0 && ls_pred_cfg_.rls_forgetting_factor >= 0.5", 86, (uint64_t)"Filter RLS forgetting factor needs tp be in range of [0.5,1].", 61, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(a1 + 32) <= 0xAuLL&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp",
         51,
         (uint64_t)"ls_pred_cfg_.training_samples > 10",
         34,
         (uint64_t)"Filter LS training samples needs to be > 10.",
         44,
         (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 56) != 1)
    return a1;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 168) == (_DWORD)v15)
  {
    v17 = *(void **)(a1 + 152);
    if (*(_DWORD *)(a1 + 172) == (_DWORD)v16)
      goto LABEL_26;
  }
  else
  {
    v17 = *v11;
  }
  *(_DWORD *)(a1 + 168) = v15;
  *(_DWORD *)(a1 + 172) = v16;
  v18 = v16 * (unint64_t)v15;
  if (*(_QWORD *)(a1 + 160) < v18)
  {
    if (v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
    v19 = (8 * v18 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = v19 >> 3;
    v17 = operator new(v19, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 152) = v17;
    LODWORD(v15) = *(_DWORD *)(a1 + 168);
    LODWORD(v16) = *(_DWORD *)(a1 + 172);
  }
LABEL_26:
  v20 = v15 * v16;
  if (v20)
    bzero(v17, 8 * v20);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 216) == (_DWORD)v21)
  {
    v23 = *(_OWORD **)(a1 + 200);
    if (*(_DWORD *)(a1 + 220) == (_DWORD)v22)
      goto LABEL_36;
  }
  else
  {
    v23 = *(_OWORD **)(a1 + 200);
  }
  *(_DWORD *)(a1 + 216) = v21;
  *(_DWORD *)(a1 + 220) = v22;
  v24 = v22 * (unint64_t)v21;
  if (*(_QWORD *)(a1 + 208) < v24)
  {
    if (v23)
      MEMORY[0x212BC6368](v23, 0x1000C8000313F17);
    v25 = (8 * v24 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = v25 >> 3;
    v23 = operator new(v25, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 200) = v23;
    LODWORD(v21) = *(_DWORD *)(a1 + 216);
    LODWORD(v22) = *(_DWORD *)(a1 + 220);
  }
LABEL_36:
  if ((_DWORD)v21 * (_DWORD)v22)
    bzero(v23, 8 * (v21 * v22));
  if ((_DWORD)v22)
  {
    v26 = 0;
    if (v22 < 4)
      goto LABEL_44;
    if ((_DWORD)v21 != 1)
      goto LABEL_44;
    v26 = v22 & 0xFFFFFFFC;
    v27 = v23 + 1;
    __asm { FMOV            V0.2D, #1.0 }
    v32 = v26;
    do
    {
      *(v27 - 1) = _Q0;
      *v27 = _Q0;
      v27 += 2;
      v32 -= 4;
    }
    while (v32);
    if (v26 != v22)
    {
LABEL_44:
      v33 = v22 - v26;
      v34 = v21 * v26;
      do
      {
        *((_QWORD *)v23 + v34) = 0x3FF0000000000000;
        v34 += v21;
        --v33;
      }
      while (v33);
    }
  }
  v35 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 192) == (_DWORD)v35 && *(_DWORD *)(a1 + 196) == (_DWORD)v35)
  {
    v36 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    *(_DWORD *)(a1 + 192) = v35;
    *(_DWORD *)(a1 + 196) = v35;
    v37 = v35 * (unint64_t)v35;
    LODWORD(v36) = v35;
    if (*(_QWORD *)(a1 + 184) < v37)
    {
      v38 = *(_QWORD *)(a1 + 176);
      if (v38)
        MEMORY[0x212BC6368](v38, 0x1000C8000313F17);
      v39 = (8 * v37 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = v39 >> 3;
      *(_QWORD *)(a1 + 176) = operator new(v39, (std::align_val_t)0x20uLL);
      LODWORD(v36) = *(_DWORD *)(a1 + 192);
      LODWORD(v35) = *(_DWORD *)(a1 + 196);
    }
  }
  if ((_DWORD)v36 * (_DWORD)v35)
    bzero(*(void **)(a1 + 176), 8 * (v36 * v35));
  if (v35 >= v36)
    v40 = v36;
  else
    v40 = v35;
  if ((_DWORD)v40)
  {
    v41 = v36 + 1;
    v42 = *(_QWORD *)(a1 + 176);
    if ((_DWORD)v40 == 1)
    {
      v43 = 0;
LABEL_61:
      v44 = v40 - v43;
      v45 = v41 * v43;
      do
      {
        *(_QWORD *)(v42 + 8 * v45) = 0x3FF0000000000000;
        v45 += v41;
        --v44;
      }
      while (v44);
      goto LABEL_63;
    }
    v43 = 0;
    if (v41 < 0)
      v64 = ~(_DWORD)v36;
    else
      v64 = v36 + 1;
    v65 = (v40 - 1) * (unint64_t)v64;
    v66 = (_DWORD)v36 != -1 && (unint64_t)(v40 - 1) >> 32 != 0;
    if ((_DWORD)v65)
      _NF = v41 < 0;
    else
      _NF = 0;
    if (_NF)
      goto LABEL_61;
    if ((v65 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_61;
    if (v66)
      goto LABEL_61;
    v68 = 0;
    v43 = v40 & 0xFFFFFFFE;
    v69 = v43;
    do
    {
      *(_QWORD *)(v42 + 8 * v68) = 0x3FF0000000000000;
      *(_QWORD *)(v42 + 8 * (v41 + v68)) = 0x3FF0000000000000;
      v68 += 2 * v36 + 2;
      v69 -= 2;
    }
    while (v69);
    if (v43 != v40)
      goto LABEL_61;
  }
LABEL_63:
  v46 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 16) - 1);
  if ((_DWORD)v46 == *(_DWORD *)(a1 + 240))
  {
    v47 = *(void **)(a1 + 224);
  }
  else
  {
    *(_DWORD *)(a1 + 240) = v46;
    v47 = *(void **)(a1 + 224);
    if (*(_QWORD *)(a1 + 232) < v46)
    {
      if (v47)
        MEMORY[0x212BC6368](v47, 0x1000C8000313F17);
      v48 = (8 * v46 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 224) = 0;
      *(_QWORD *)(a1 + 232) = v48 >> 3;
      v47 = operator new(v48, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 224) = v47;
      LODWORD(v46) = *(_DWORD *)(a1 + 240);
    }
  }
  if ((_DWORD)v46)
    bzero(v47, 8 * v46);
  v49 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 264) == (_DWORD)v49)
  {
    v50 = *v12;
  }
  else
  {
    v51 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 264) = v49;
    v50 = *(void **)(a1 + 248);
    if (*(_QWORD *)(a1 + 256) < (unint64_t)v49)
    {
      if (v50)
        MEMORY[0x212BC6368](v50, 0x1000C8000313F17);
      v52 = (8 * v51 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 248) = 0;
      *(_QWORD *)(a1 + 256) = v52 >> 3;
      v50 = operator new(v52, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 248) = v50;
      LODWORD(v49) = *(_DWORD *)(a1 + 264);
    }
  }
  if ((_DWORD)v49)
    bzero(v50, 8 * v49);
  v53 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 288) == (_DWORD)v53)
  {
    v54 = *(void **)(a1 + 272);
    if (*(_DWORD *)(a1 + 292) == (_DWORD)v53)
    {
LABEL_88:
      v57 = v53 * v53;
      if (!v57)
        goto LABEL_90;
      goto LABEL_89;
    }
  }
  else
  {
    v54 = *v13;
  }
  *(_DWORD *)(a1 + 288) = v53;
  *(_DWORD *)(a1 + 292) = v53;
  v55 = v53 * (unint64_t)v53;
  if (*(_QWORD *)(a1 + 280) >= v55)
    goto LABEL_88;
  if (v54)
    MEMORY[0x212BC6368](v54, 0x1000C8000313F17);
  v56 = (8 * v55 + 31) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = v56 >> 3;
  v54 = operator new(v56, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 272) = v54;
  v57 = *(_DWORD *)(a1 + 288) * *(_DWORD *)(a1 + 292);
  if (v57)
LABEL_89:
    bzero(v54, 8 * v57);
LABEL_90:
  v58 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 312) == (_DWORD)v58)
  {
    v59 = *(void **)(a1 + 296);
    if (*(_DWORD *)(a1 + 316) == (_DWORD)v58)
      goto LABEL_99;
  }
  else
  {
    v59 = *(void **)(a1 + 296);
  }
  *(_DWORD *)(a1 + 312) = v58;
  *(_DWORD *)(a1 + 316) = v58;
  v60 = v58 * (unint64_t)v58;
  if (*(_QWORD *)(a1 + 304) < v60)
  {
    if (v59)
      MEMORY[0x212BC6368](v59, 0x1000C8000313F17);
    v61 = (8 * v60 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = v61 >> 3;
    v59 = operator new(v61, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 296) = v59;
    v62 = *(_DWORD *)(a1 + 312) * *(_DWORD *)(a1 + 316);
    if (v62)
      goto LABEL_100;
    return a1;
  }
LABEL_99:
  v62 = v58 * v58;
  if (v62)
LABEL_100:
    bzero(v59, 8 * v62);
  return a1;
}

void sub_20F18E7E8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = v1[37];
  if (v6)
  {
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = *v3;
  if (!*v3)
  {
LABEL_4:
    v9 = v1[28];
    if (!v9)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = v1[28];
  if (!v9)
  {
LABEL_5:
    v10 = v1[25];
    if (!v10)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  v10 = v1[25];
  if (!v10)
  {
LABEL_6:
    v11 = v1[22];
    if (!v11)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  v11 = v1[22];
  if (!v11)
  {
LABEL_7:
    v12 = *v2;
    if (!*v2)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  v12 = *v2;
  if (!*v2)
LABEL_8:
    _Unwind_Resume(exception_object);
LABEL_15:
  MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F18E90C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if (*(_BYTE *)(a1 + 56) != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 84, (uint64_t)"ls_pred_cfg_.ls_update_mode == LeastSquaresPredictionUpdateMode::RLS", 68, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = *(_DWORD *)(a1 + 172);
  if (v2 * *(_DWORD *)(a1 + 168))
    bzero(*(void **)(a1 + 152), 8 * (v2 * *(_DWORD *)(a1 + 168)));
  v3 = *(_DWORD *)(a1 + 216);
  v4 = *(unsigned int *)(a1 + 220);
  if ((_DWORD)v4 * v3)
    bzero(*(void **)(a1 + 200), 8 * (v4 * v3));
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 200);
    if (v4 < 4)
      goto LABEL_13;
    if (v3 != 1)
      goto LABEL_13;
    v5 = v4 & 0xFFFFFFFC;
    v7 = (_OWORD *)(v6 + 16);
    __asm { FMOV            V0.2D, #1.0 }
    v12 = v5;
    do
    {
      *(v7 - 1) = _Q0;
      *v7 = _Q0;
      v7 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v5 != v4)
    {
LABEL_13:
      v13 = v4 - v5;
      v14 = v3 * v5;
      do
      {
        *(_QWORD *)(v6 + 8 * v14) = 0x3FF0000000000000;
        v14 += v3;
        --v13;
      }
      while (v13);
    }
  }
  v15 = *(_DWORD *)(a1 + 192);
  v16 = *(_DWORD *)(a1 + 196);
  v17 = *(_QWORD *)(a1 + 176);
  if (v16 * v15)
    bzero(*(void **)(a1 + 176), 8 * v16 * v15);
  if (v16 >= v15)
    v18 = v15;
  else
    v18 = v16;
  if ((_DWORD)v18)
  {
    v19 = v15 + 1;
    if ((_DWORD)v18 == 1)
    {
      v20 = 0;
LABEL_38:
      v27 = v18 - v20;
      v28 = v19 * v20;
      do
      {
        *(_QWORD *)(v17 + 8 * v28) = 0x3FF0000000000000;
        v28 += v19;
        --v27;
      }
      while (v27);
      goto LABEL_40;
    }
    v20 = 0;
    if (v19 < 0)
      v21 = ~v15;
    else
      v21 = v15 + 1;
    v22 = (v18 - 1) * (unint64_t)v21;
    v23 = v15 != -1 && (unint64_t)(v18 - 1) >> 32 != 0;
    if ((_DWORD)v22)
      _NF = v19 < 0;
    else
      _NF = 0;
    if (_NF)
      goto LABEL_38;
    if ((v22 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_38;
    if (v23)
      goto LABEL_38;
    v25 = 0;
    v20 = v18 & 0xFFFFFFFE;
    v26 = v20;
    do
    {
      *(_QWORD *)(v17 + 8 * v25) = 0x3FF0000000000000;
      *(_QWORD *)(v17 + 8 * (v19 + v25)) = 0x3FF0000000000000;
      v25 += 2 * v15 + 2;
      v26 -= 2;
    }
    while (v26);
    if (v20 != v18)
      goto LABEL_38;
  }
LABEL_40:
  v29 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v29)
    bzero(*(void **)(a1 + 224), 8 * v29);
  v30 = *(unsigned int *)(a1 + 264);
  if ((_DWORD)v30)
    bzero(*(void **)(a1 + 248), 8 * v30);
  v31 = *(_DWORD *)(a1 + 292);
  if (v31 * *(_DWORD *)(a1 + 288))
    bzero(*(void **)(a1 + 272), 8 * (v31 * *(_DWORD *)(a1 + 288)));
}

void sub_20F18EB24(uint64_t a1, float64x2_t a2, double a3, float64x2_t a4, float64x2_t a5, double a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  double v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  double v31;
  double v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  double v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  double v45;
  double v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  double v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  double v69;
  unint64_t i;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  BOOL v75;
  unint64_t v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t *v80;
  float64x2_t v81;
  uint64_t v82;
  double *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double *v87;
  uint64_t v88;
  float64x2_t *v89;
  unint64_t v90;
  double *v91;
  unint64_t v92;
  unint64_t v94;
  uint64_t v95;
  float64x2_t *v96;
  float64x2_t *v97;
  uint64_t v98;
  float64x2_t v99;
  double v100;
  unint64_t v101;
  uint64_t v102;
  float64x2_t *v103;
  float64x2_t *v104;
  uint64_t v105;
  float64x2_t v106;
  double v107;
  unint64_t v108;
  double *v109;
  double *v110;
  unint64_t v111;
  uint64_t v112;
  float64x2_t *v113;
  float64x2_t *v114;
  uint64_t v115;
  float64x2_t v116;
  double v117;
  int v118;
  double *v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  double *v123;
  uint64_t v124;
  double *v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  __int128 *v137;
  __int128 v138;
  __int128 v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  float64x2_t *v143;
  uint64_t v144;
  float64x2_t *v145;
  float64x2_t *v146;
  char *v147;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t *v151;
  float64x2_t v152;
  float64x2_t v153;
  char *v154;
  float64x2_t *v156;
  double v157;
  float64x2_t v160;
  float64x2_t v161;
  uint64_t v166;
  float64x2_t *v167;
  float64x2_t *v168;
  unint64_t v169;
  double v170;
  uint64_t v171;
  float64x2_t v172;
  float64x2_t v173;
  uint64_t v174;
  float64x2_t *v175;
  float64x2_t *v176;
  unint64_t v177;
  double v178;
  float64x2_t *v179;
  float64x2_t *v180;
  unint64_t v181;
  float64x2_t v182;
  float64x2_t *v183;
  float64x2_t *v184;
  unint64_t v185;
  float64x2_t v186;
  float64x2_t v187;
  uint64_t v188;
  uint64_t v189;
  double *v190;
  __int128 v191;
  double *v192;
  double v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  uint64_t v198;
  uint64_t v199;
  double *v200;
  double *v201;
  double *v202;
  double *v203;
  float64x2_t *v204;
  float64x2_t *v205;
  uint64_t v206;
  float64x2_t v207;
  int v208;
  double v209;
  uint64_t v210;
  float64x2_t *v211;
  float64x2_t *v212;
  float64x2_t *v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64_t v217;
  float64x2_t v218;
  float64x2_t v219;
  double v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t *v227;
  float64x2_t *v228;
  float64x2_t *v229;
  float64x2_t *v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  float64x2_t *v235;
  uint64_t v236;
  float64x2_t *v237;
  float64x2_t v238;
  char *v239;
  float64x2_t *v242;
  float64x2_t *v245;
  float64x2_t *v247;
  float64x2_t *v249;
  float64x2_t *v251;
  float64x2_t v253;
  float64x2_t v255;
  float64x2_t v257;
  float64x2_t v259;
  float64x2_t *v261;
  float64x2_t v262;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v281;
  float64x2_t *v282;
  float64x2_t v283;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  double v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  uint64_t v297;
  float64x2_t *v298;
  float64x2_t *v299;
  float64x2_t *v300;
  float64x2_t *v301;
  float64x2_t *v302;
  double v303;
  uint64_t v304;
  float64x2_t *v305;
  uint64_t v306;
  float64x2_t *v307;
  float64x2_t *v308;
  float64x2_t *v309;
  float64x2_t *v310;
  float64x2_t *v311;
  float64x2_t v312;
  float64x2_t *v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t *v316;
  float64x2_t *v317;
  float64x2_t *v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  uint64_t v328;
  unint64_t v329;
  double *v330;
  unint64_t v331;
  double *v332;
  unint64_t v333;
  uint64_t v334;
  double *v335;
  float64x2_t *v336;
  float64x2_t *v337;
  uint64_t v338;
  float64x2_t v339;
  double *v340;
  double v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  _DWORD v345[2];
  uint64_t v346;
  uint64_t v347;
  int v348;
  _DWORD *v349;
  int v350;
  uint64_t v351;
  int v352;
  char v353[8];
  int *v354;
  _QWORD *v355;
  uint64_t v356;
  uint64_t v357;

  v11 = a2.f64[0];
  v357 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 56) != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 97, (uint64_t)"ls_pred_cfg_.ls_update_mode == LeastSquaresPredictionUpdateMode::RLS", 68, (uint64_t)"Function can only be used in LS RLS update mode", 47, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*(_BYTE *)(a1 + 72))
    return;
  v13 = *(_QWORD *)(a1 + 376) + 1;
  *(_QWORD *)(a1 + 376) = v13;
  if (v13 % *(_QWORD *)(a1 + 80))
    return;
  if (*(_BYTE *)(a1 + 57) == 1)
  {
    v17 = *(double *)a1;
    v18 = *(_DWORD *)(a1 + 320);
    v19 = v18 / 0xADC8;
    v20 = 48271 * (v18 % 0xADC8);
    v19 *= 3399;
    _CF = v20 >= v19;
    v21 = v20 - v19;
    if (_CF)
      v22 = 0;
    else
      v22 = 0x7FFFFFFF;
    v23 = v22 + v21;
    v24 = (double)(v23 - 1);
    v25 = *(double *)(a1 + 328);
    v26 = v23 / 0xADC8;
    v27 = 48271 * (v23 % 0xADC8);
    v26 *= 3399;
    _CF = v27 >= v26;
    v28 = v27 - v26;
    if (_CF)
      v29 = 0;
    else
      v29 = 0x7FFFFFFF;
    v30 = v29 + v28;
    v31 = *(double *)(a1 + 336) - v25;
    *(_DWORD *)(a1 + 320) = v30;
    v32 = v17 * (v25 + v31 * (((double)(v30 - 1) * 2147483650.0 + v24) / 4.61168601e18));
  }
  else
  {
    if (*(_BYTE *)(a1 + 57))
      goto LABEL_34;
    v14 = *(double *)a1;
    v15 = *(double *)(a1 + 344);
    v16 = *(double *)(a1 + 352);
    if (*(_BYTE *)(a1 + 368))
    {
      *(_BYTE *)(a1 + 368) = 0;
      a2.f64[0] = *(float64_t *)(a1 + 360);
    }
    else
    {
      v33 = *(_DWORD *)(a1 + 320);
      do
      {
        v34 = v33 / 0xADC8;
        v35 = 48271 * (v33 % 0xADC8);
        v34 *= 3399;
        _CF = v35 >= v34;
        v36 = v35 - v34;
        if (_CF)
          v37 = 0;
        else
          v37 = 0x7FFFFFFF;
        v38 = v37 + v36;
        v39 = (double)(v38 - 1);
        v40 = v38 / 0xADC8;
        v41 = 48271 * (v38 % 0xADC8);
        v40 *= 3399;
        _CF = v41 >= v40;
        v42 = v41 - v40;
        if (_CF)
          v43 = 0;
        else
          v43 = 0x7FFFFFFF;
        v44 = v43 + v42;
        v45 = ((double)(v44 - 1) * 2147483650.0 + v39) / 4.61168601e18;
        v46 = v45 + v45 + -1.0;
        v47 = v44 / 0xADC8;
        v48 = 48271 * (v44 % 0xADC8);
        v47 *= 3399;
        _CF = v48 >= v47;
        v49 = v48 - v47;
        if (_CF)
          v50 = 0;
        else
          v50 = 0x7FFFFFFF;
        v51 = v50 + v49;
        v52 = (double)(v51 - 1);
        v53 = v51 / 0xADC8;
        v54 = 48271 * (v51 % 0xADC8);
        v53 *= 3399;
        _CF = v54 >= v53;
        v55 = v54 - v53;
        if (_CF)
          v56 = 0;
        else
          v56 = 0x7FFFFFFF;
        v33 = v56 + v55;
        v57 = ((double)(v33 - 1) * 2147483650.0 + v52) / 4.61168601e18
            + ((double)(v33 - 1) * 2147483650.0 + v52) / 4.61168601e18
            + -1.0;
        v58 = v46 * v46 + v57 * v57;
      }
      while (v58 > 1.0 || v58 == 0.0);
      *(_DWORD *)(a1 + 320) = v33;
      a2.f64[0] = sqrt(log(v46 * v46 + v57 * v57) * -2.0 / v58);
      *(double *)(a1 + 360) = v57 * a2.f64[0];
      *(_BYTE *)(a1 + 368) = 1;
      a2.f64[0] = v46 * a2.f64[0];
    }
    v32 = v14 * (v15 + v16 * a2.f64[0]);
  }
  v11 = v32 + v11;
LABEL_34:
  v59 = *(_QWORD *)(a1 + 24);
  if (v59)
  {
    v60 = 0;
    v342 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v64 = *(_QWORD *)(a1 + 16);
      v65 = *(unsigned int *)(a1 + 216);
      if (!v64)
      {
        v71 = *(_DWORD *)(a1 + 168);
        v72 = *(_QWORD *)(a1 + 152);
        v67 = v65 * v60;
        a8.f64[0] = v11;
        v68 = *(_QWORD *)(a1 + 200);
        goto LABEL_56;
      }
      v66 = *(_QWORD *)(a1 + 224);
      v67 = v65 * v60;
      v68 = *(_QWORD *)(a1 + 200);
      v69 = 0.0;
      if (v64 < 0xA)
        break;
      i = 0;
      v73 = v64 - 1;
      v74 = __CFADD__((_DWORD)v60, v64 - 1);
      v75 = __CFADD__(v67, (_DWORD)v73);
      if (v74)
        goto LABEL_54;
      if (v75)
        goto LABEL_54;
      v76 = HIDWORD(v73);
      if (v76)
        goto LABEL_54;
      i = v64 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v77 = (float64x2_t *)(v66 + 8 * (v60 + v76));
        v78 = *v77;
        v79 = v77[1];
        v80 = (float64x2_t *)(v68 + 8 * (v65 * v60 + v76));
        a5 = *v80;
        v81 = vmulq_f64(v78, *v80);
        a4 = vmulq_f64(v79, v80[1]);
        v69 = v69 + v81.f64[0] + v81.f64[1] + a4.f64[0] + a4.f64[1];
        v76 += 4;
      }
      while (i != v76);
      if (v64 != i)
        goto LABEL_54;
LABEL_55:
      a8.f64[0] = v11 - v69;
      v71 = *(_DWORD *)(a1 + 168);
      v72 = *(_QWORD *)(a1 + 152);
      if (v64 == 5)
      {
        v61 = (float64x2_t *)(v72 + 8 * v71 * v60);
        v62 = (float64x2_t *)(v68 + 8 * v67);
        a4.f64[0] = v62[2].f64[0];
        a5.f64[0] = v61[2].f64[0];
        a4 = vmlaq_f64(a4, a8, a5);
        v63 = vmlaq_n_f64(v62[1], v61[1], a8.f64[0]);
        a2 = vmlaq_n_f64(*v62, *v61, a8.f64[0]);
        *v62 = a2;
        v62[1] = v63;
        v62[2].f64[0] = a4.f64[0];
        goto LABEL_37;
      }
LABEL_56:
      v82 = v71 * v60;
      v83 = (double *)(v72 + 8 * v82);
      v84 = v67;
      v85 = v68 + 8 * v67;
      if (v72 == v68)
      {
        v343 = v67;
        v88 = 8 * v71;
        v344 = a8.f64[0];
        v89 = (float64x2_t *)operator new((v88 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        if (v71)
        {
          v90 = (v71 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v90 < 5)
          {
            v91 = (double *)v89;
            goto LABEL_77;
          }
          v91 = (double *)v89;
          if ((unint64_t)v89 - v72 + -8 * v82 < 0x20)
            goto LABEL_180;
          v101 = v90 + 1;
          v102 = v101 & 0x3FFFFFFFFFFFFFFCLL;
          v91 = &v89->f64[v102];
          v83 = (double *)((char *)v83 + v102 * 8);
          v103 = (float64x2_t *)(v72 + 8 * v82 + 16);
          v104 = v89 + 1;
          v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v106 = vmulq_n_f64(*v103, v344);
            v104[-1] = vmulq_n_f64(v103[-1], v344);
            *v104 = v106;
            v103 += 2;
            v104 += 2;
            v105 -= 4;
          }
          while (v105);
          if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_180:
            do
            {
LABEL_77:
              v107 = *v83++;
              *v91++ = v344 * v107;
            }
            while (v91 != (double *)((char *)v89 + v88));
          }
        }
        if ((_DWORD)v65)
        {
          v108 = (v65 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          if (v108 < 0xB)
          {
            v109 = (double *)v89;
            v110 = (double *)v85;
            goto LABEL_86;
          }
          if (v85 < (unint64_t)&v89->f64[v65])
          {
            v109 = (double *)v89;
            v110 = (double *)v85;
            if ((unint64_t)v89 < v68 + 8 * (v65 + v343))
              goto LABEL_181;
          }
          v111 = v108 + 1;
          v112 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          v109 = &v89->f64[v112];
          v110 = (double *)(v85 + v112 * 8);
          v113 = (float64x2_t *)(v68 + 8 * v343 + 16);
          v114 = v89 + 1;
          v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = vaddq_f64(*v114, *v113);
            v113[-1] = vaddq_f64(v114[-1], v113[-1]);
            *v113 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_181:
            do
            {
LABEL_86:
              v117 = *v109++;
              *v110 = v117 + *v110;
              ++v110;
            }
            while (v110 != (double *)(v85 + 8 * v65));
          }
        }
        MEMORY[0x212BC6368](v89, 0x1000C8000313F17);
        v59 = v342;
        goto LABEL_37;
      }
      if ((_DWORD)v65)
      {
        v86 = (v65 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v86 >= 0xB)
        {
          v92 = v68 + 8 * (v65 + v67);
          _CF = v85 >= v72 + 8 * (v65 + v82) || (unint64_t)v83 >= v92;
          v87 = (double *)v85;
          if (_CF)
          {
            v94 = v86 + 1;
            v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
            v87 = (double *)(v85 + v95);
            v83 = (double *)((char *)v83 + v95);
            v96 = (float64x2_t *)(v72 + 8 * v82 + 16);
            v97 = (float64x2_t *)(v68 + 8 * v84 + 16);
            v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              a4 = v97[-1];
              a5 = *v97;
              a2 = vaddq_f64(vmulq_n_f64(v96[-1], a8.f64[0]), a4);
              v99 = vaddq_f64(vmulq_n_f64(*v96, a8.f64[0]), *v97);
              v97[-1] = a2;
              *v97 = v99;
              v96 += 2;
              v97 += 2;
              v98 -= 4;
            }
            while (v98);
            if (v94 == (v94 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
        }
        else
        {
          v87 = (double *)(v68 + 8 * v67);
        }
        do
        {
          v100 = *v83++;
          *v87 = a8.f64[0] * v100 + *v87;
          ++v87;
        }
        while (v87 != (double *)(v85 + 8 * v65));
      }
LABEL_37:
      if (++v60 == v59)
        goto LABEL_88;
    }
    for (i = 0; i != v64; ++i)
LABEL_54:
      v69 = v69
          + *(double *)(v66 + 8 * (v60 + i)) * *(double *)(v68 + 8 * (v65 * v60 + i));
    goto LABEL_55;
  }
LABEL_88:
  v118 = *(_DWORD *)(a1 + 240);
  v119 = *(double **)(a1 + 224);
  v120 = (v118 - 1);
  if (v118 != 1)
  {
    if (v120 < 0x2E)
      goto LABEL_105;
    v121 = v120 - 1;
    v122 = v118 - 2;
    v123 = &v119[v120];
    v124 = 8 * (v120 - 1);
    v125 = &v119[v122];
    v126 = &v125[v124 / 0xFFFFFFFFFFFFFFF8] > v125 || &v123[v124 / 0xFFFFFFFFFFFFFFF8] > v123;
    v127 = !v126 && v120 >= v121;
    v128 = v127 && v122 >= v121;
    v129 = HIDWORD(v121);
    _ZF = v128 && v129 == 0;
    if (!_ZF || (unint64_t)((char *)v125 - (char *)v123) < 0x20)
    {
LABEL_105:
      v131 = v120;
      do
      {
LABEL_106:
        v119[v131] = v119[(v131 - 1)];
        --v131;
      }
      while (v131);
      goto LABEL_107;
    }
    v131 = v120 & 3;
    v188 = v120;
    v189 = v120 & 0xFFFFFFFC;
    do
    {
      v190 = &v119[(v188 - 1)];
      a2 = *(float64x2_t *)(v190 - 1);
      v191 = *(_OWORD *)(v190 - 3);
      v192 = &v119[v188];
      *(float64x2_t *)(v192 - 1) = a2;
      *(_OWORD *)(v192 - 3) = v191;
      v188 -= 4;
      v189 -= 4;
    }
    while (v189);
    if ((v120 & 0xFFFFFFFC) != v120)
      goto LABEL_106;
  }
LABEL_107:
  *v119 = v11;
  v132 = *(_QWORD *)(a1 + 24);
  v133 = v132 - 1;
  if (*(_QWORD *)(a1 + 16) == 5)
  {
    if (v132 != 1)
    {
      do
      {
        v134 = *(_DWORD *)(a1 + 168);
        v135 = *(_QWORD *)(a1 + 152);
        v136 = v135 + 8 * (v134 * v133);
        v137 = (__int128 *)(v135 + 8 * ((v133 - 1) * v134));
        v138 = *v137;
        v139 = v137[1];
        *(_QWORD *)(v136 + 32) = *((_QWORD *)v137 + 4);
        *(_OWORD *)v136 = v138;
        *(_OWORD *)(v136 + 16) = v139;
        --v133;
      }
      while (v133);
    }
  }
  else if (v132 != 1)
  {
    v140 = *(_DWORD *)(a1 + 168);
    if (v140)
    {
      v141 = v132 - 2;
      v142 = v132 - 1;
LABEL_114:
      memmove((void *)(*(_QWORD *)(a1 + 152) + 8 * v140 * v142), (const void *)(*(_QWORD *)(a1 + 152) + 8 * (v142 - 1) * v140), 8 * v140);
      while (v141)
      {
        v140 = *(_DWORD *)(a1 + 168);
        --v141;
        --v142;
        if (v140)
          goto LABEL_114;
      }
    }
  }
  if (*(_QWORD *)(a1 + 16) == 5)
  {
    v143 = *(float64x2_t **)(a1 + 248);
    v144 = *(unsigned int *)(a1 + 192);
    v145 = *(float64x2_t **)(a1 + 176);
    v146 = *(float64x2_t **)(a1 + 224);
    v147 = (char *)&v145->f64[v144];
    _D3 = *((_QWORD *)v147 + 4);
    v150 = *(float64x2_t *)v147;
    v149 = *((float64x2_t *)v147 + 1);
    v151 = &v145[v144];
    v153 = *v151;
    v152 = v151[1];
    v154 = (char *)v145 + 24 * v144;
    _D17 = *((_QWORD *)v154 + 4);
    v156 = &v145[2 * v144];
    v157 = v146[2].f64[0];
    _Q25 = *v146;
    _Q24 = v146[1];
    v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v145, v146->f64[0]), v150, *v146, 1), v153, _Q24.f64[0]), *(float64x2_t *)v154, _Q24, 1), *v156, v157);
    v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v145[1], v146->f64[0]), v149, *v146, 1), v152, _Q24.f64[0]), *((float64x2_t *)v154 + 1), _Q24, 1), v156[1], v157);
    __asm
    {
      FMLA            D0, D3, V25.D[1]
      FMLA            D0, D17, V24.D[1]
    }
    v143[2].f64[0] = _D0 + v156[2].f64[0] * v157;
    *v143 = v160;
    v143[1] = v161;
    v166 = *(_QWORD *)(a1 + 16);
    if (v166)
    {
      v167 = *(float64x2_t **)(a1 + 248);
      v168 = *(float64x2_t **)(a1 + 224);
      if ((unint64_t)(v166 - 0x100000001) >= 0xFFFFFFFF00000003)
      {
        v169 = v166 & 0xFFFFFFFFFFFFFFFCLL;
        v179 = v168 + 1;
        v180 = v167 + 1;
        v170 = 0.0;
        v181 = v166 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v161 = vmulq_f64(v180[-1], v179[-1]);
          v182 = vmulq_f64(*v180, *v179);
          v170 = v170 + v161.f64[0] + v161.f64[1] + v182.f64[0] + v182.f64[1];
          v179 += 2;
          v180 += 2;
          v181 -= 4;
        }
        while (v181);
        goto LABEL_139;
      }
      v169 = 0;
      v170 = 0.0;
      do
      {
        v170 = v170 + v167->f64[v169] * v168->f64[v169];
        ++v169;
LABEL_139:
        ;
      }
      while (v166 != v169);
    }
    else
    {
      v170 = 0.0;
    }
    v193 = v170 + *(double *)(a1 + 64);
    if (v193 == 0.0)
      a2.f64[0] = 1.0;
    else
      a2.f64[0] = 1.0 / v193;
    v194 = *(_QWORD *)(a1 + 152);
    v161.f64[0] = v143[2].f64[0];
    v195 = *(_OWORD *)&vmulq_f64(v161, a2);
    v173 = vmulq_n_f64(*v143, a2.f64[0]);
    v172 = vmulq_n_f64(v143[1], a2.f64[0]);
    *(float64x2_t *)v194 = v173;
    *(float64x2_t *)(v194 + 16) = v172;
    *(_QWORD *)(v194 + 32) = v195;
    v174 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v171 = *(_QWORD *)(a1 + 224);
    v345[0] = *(_QWORD *)(a1 + 16);
    v346 = v171;
    LODWORD(v347) = 0;
    v354 = (int *)(a1 + 176);
    v355 = v345;
    v356 = 0x3FF0000000000000;
    sub_20F197B20(a1 + 248, (uint64_t)v353);
    v174 = *(_QWORD *)(a1 + 16);
    if (v174)
    {
      v175 = *(float64x2_t **)(a1 + 248);
      v176 = *(float64x2_t **)(a1 + 224);
      if ((unint64_t)(v174 - 0x100000001) >= 0xFFFFFFFF00000003)
      {
        v177 = v174 & 0xFFFFFFFFFFFFFFFCLL;
        v183 = v176 + 1;
        v184 = v175 + 1;
        v178 = 0.0;
        v185 = v174 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v173 = v183[-1];
          v186 = vmulq_f64(v184[-1], v173);
          v187 = vmulq_f64(*v184, *v183);
          v178 = v178 + v186.f64[0] + v186.f64[1] + v187.f64[0] + v187.f64[1];
          v183 += 2;
          v184 += 2;
          v185 -= 4;
        }
        while (v185);
        goto LABEL_145;
      }
      v177 = 0;
      v178 = 0.0;
      do
      {
        v178 = v178 + v175->f64[v177] * v176->f64[v177];
        ++v177;
LABEL_145:
        ;
      }
      while (v174 != v177);
    }
    else
    {
      v178 = 0.0;
    }
    v196 = v178 + *(double *)(a1 + 64);
    if (v196 == 0.0)
      v197 = 1.0;
    else
      v197 = 1.0 / v196;
    v198 = *(unsigned int *)(a1 + 264);
    if ((_DWORD)v198)
    {
      LODWORD(v199) = 0;
      v200 = *(double **)(a1 + 152);
      v201 = *(double **)(a1 + 248);
      if (v198 < 4)
        goto LABEL_155;
      if ((unint64_t)((char *)v200 - (char *)v201) < 0x20)
        goto LABEL_155;
      v199 = v198 & 0xFFFFFFFC;
      v202 = &v200[v199];
      v203 = &v201[v199];
      v204 = (float64x2_t *)(v201 + 2);
      v205 = (float64x2_t *)(v200 + 2);
      v206 = v199;
      do
      {
        v207 = vmulq_n_f64(*v204, v197);
        v205[-1] = vmulq_n_f64(v204[-1], v197);
        *v205 = v207;
        v204 += 2;
        v205 += 2;
        v206 -= 4;
      }
      while (v206);
      v200 = v202;
      v201 = v203;
      if (v199 != v198)
      {
LABEL_155:
        v208 = v198 - v199;
        do
        {
          v209 = *v201++;
          *v200++ = v197 * v209;
          --v208;
        }
        while (v208);
      }
    }
  }
  if (v174 == 5)
  {
    v210 = *(unsigned int *)(a1 + 288);
    v211 = *(float64x2_t **)(a1 + 272);
    v212 = *(float64x2_t **)(a1 + 152);
    v213 = *(float64x2_t **)(a1 + 224);
    v172.f64[0] = v212[2].f64[0];
    v214 = v212[1];
    v173.f64[0] = v213[2].f64[0];
    v215 = v213[1];
    v216 = vmulq_n_f64(v214, v213->f64[0]);
    v217 = v172.f64[0] * v213->f64[0];
    v218 = vmulq_laneq_f64(*v212, *v213, 1);
    v219 = vmulq_laneq_f64(v214, *v213, 1);
    v220 = vmuld_lane_f64(v172.f64[0], *v213, 1);
    v221 = vmulq_n_f64(*v212, v215.f64[0]);
    v222 = vmulq_n_f64(v214, v215.f64[0]);
    v223 = vmulq_laneq_f64(*v212, v215, 1);
    v224 = vmulq_laneq_f64(v214, v215, 1);
    v225 = vmulq_n_f64(*v212, v173.f64[0]);
    v226 = vmulq_n_f64(v214, v173.f64[0]);
    *v211 = vmulq_n_f64(*v212, v213->f64[0]);
    v211[1] = v216;
    v211[2].f64[0] = v217;
    v227 = (float64x2_t *)((char *)v211 + 8 * v210);
    v227[2].f64[0] = v220;
    *v227 = v218;
    v227[1] = v219;
    v228 = &v211[v210];
    v228[2].f64[0] = v172.f64[0] * v215.f64[0];
    *v228 = v221;
    v228[1] = v222;
    v229 = (float64x2_t *)((char *)v211 + 24 * v210);
    v229[2].f64[0] = vmuld_lane_f64(v172.f64[0], v215, 1);
    *v229 = v223;
    v229[1] = v224;
    v230 = &v211[2 * v210];
    *(_QWORD *)&v230[2].f64[0] = *(_OWORD *)&vmulq_f64(v172, v173);
    *v230 = v225;
    v230[1] = v226;
  }
  else
  {
    v231 = *(_QWORD *)(a1 + 152);
    v350 = *(_DWORD *)(a1 + 168);
    v351 = v231;
    v352 = 0;
    v232 = *(_DWORD *)(a1 + 240);
    v233 = *(_QWORD *)(a1 + 224);
    v345[0] = v174;
    v345[1] = 1;
    LODWORD(v346) = v232;
    v347 = v233;
    v348 = 0;
    v349 = v345;
    v354 = &v350;
    v355 = &v349;
    v356 = 0x3FF0000000000000;
    sub_20F197C70(a1 + 272, (uint64_t)v353);
  }
  if (*(_QWORD *)(a1 + 16) == 5)
  {
    v234 = *(unsigned int *)(a1 + 288);
    v235 = *(float64x2_t **)(a1 + 272);
    v236 = *(unsigned int *)(a1 + 192);
    v237 = *(float64x2_t **)(a1 + 176);
    v238 = v235[1];
    v239 = (char *)&v235->f64[v234];
    _D2 = *((_QWORD *)v239 + 4);
    _Q5 = *((float64x2_t *)v239 + 1);
    v242 = &v235[v234];
    _Q18 = *v237;
    _Q7 = v237[1];
    v245 = (float64x2_t *)((char *)v237 + 8 * v236);
    _Q22 = *v245;
    v247 = &v237[v236];
    _Q26 = *v247;
    v249 = (float64x2_t *)((char *)v237 + 24 * v236);
    _Q23 = *v249;
    v251 = &v237[2 * v236];
    _Q21 = *v251;
    v253 = vmlaq_laneq_f64(vmulq_n_f64(v238, v237->f64[0]), _Q5, *v237, 1);
    __asm { FMLA            D19, D2, V18.D[1] }
    v255 = vmlaq_laneq_f64(vmulq_n_f64(v238, v245->f64[0]), _Q5, *v245, 1);
    __asm { FMLA            D24, D2, V22.D[1] }
    v257 = vmlaq_laneq_f64(vmulq_n_f64(v238, v247->f64[0]), _Q5, *v247, 1);
    __asm { FMLA            D27, D2, V26.D[1] }
    v259 = vmlaq_laneq_f64(vmulq_n_f64(v238, v249->f64[0]), _Q5, *v249, 1);
    __asm { FMLA            D29, D2, V23.D[1] }
    v294 = *v242;
    v288 = v242[1];
    v261 = (float64x2_t *)((char *)v235 + 24 * v234);
    v262 = vmlaq_laneq_f64(vmulq_n_f64(v238, v251->f64[0]), _Q5, *v251, 1);
    _Q5.f64[0] = v261[2].f64[0];
    __asm { FMLA            D1, D2, V21.D[1] }
    v264 = v261[1];
    v265 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v235, v237->f64[0]), *(float64x2_t *)v239, *v237, 1), v294, _Q7.f64[0]), *v261, _Q7, 1);
    v266 = vmlaq_laneq_f64(vmlaq_n_f64(v253, v288, _Q7.f64[0]), v264, _Q7, 1);
    __asm { FMLA            D19, D5, V7.D[1] }
    _Q7 = v245[1];
    v269 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v235, v245->f64[0]), *(float64x2_t *)v239, *v245, 1), v294, _Q7.f64[0]), *v261, _Q7, 1);
    v270 = vmlaq_laneq_f64(vmlaq_n_f64(v255, v288, _Q7.f64[0]), v264, _Q7, 1);
    __asm { FMLA            D24, D5, V7.D[1] }
    _Q7 = v247[1];
    v273 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v235, v247->f64[0]), *(float64x2_t *)v239, *v247, 1), v294, _Q7.f64[0]), *v261, _Q7, 1);
    v274 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v288, _Q7.f64[0]), v264, _Q7, 1);
    __asm { FMLA            D27, D5, V7.D[1] }
    _Q7 = v249[1];
    v277 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v235, v249->f64[0]), *(float64x2_t *)v239, *v249, 1), v294, _Q7.f64[0]), *v261, _Q7, 1);
    v278 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v288, _Q7.f64[0]), v264, _Q7, 1);
    __asm { FMLA            D29, D5, V7.D[1] }
    _Q7 = v251[1];
    v281 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v235, v251->f64[0]), *(float64x2_t *)v239, *v251, 1), v294, _Q7.f64[0]), *v261, _Q7, 1);
    v282 = &v235[2 * v234];
    v283 = vmlaq_laneq_f64(vmlaq_n_f64(v262, v288, _Q7.f64[0]), v264, _Q7, 1);
    v264.f64[0] = v282[2].f64[0];
    __asm { FMLA            D1, D5, V7.D[1] }
    v285 = v282[1];
    _Q7.f64[0] = v237[2].f64[0];
    v286 = vmlaq_n_f64(v265, *v282, _Q7.f64[0]);
    v287 = vmlaq_n_f64(v266, v285, _Q7.f64[0]);
    _Q7.f64[0] = _D19 + v264.f64[0] * _Q7.f64[0];
    v288.f64[0] = v245[2].f64[0];
    v289 = vmlaq_n_f64(v269, *v282, v288.f64[0]);
    v290 = vmlaq_n_f64(v270, v285, v288.f64[0]);
    v291 = v247[2].f64[0];
    v292 = vmlaq_n_f64(v273, *v282, v291);
    _Q21.f64[0] = v249[2].f64[0];
    v293 = vmlaq_n_f64(v277, *v282, _Q21.f64[0]);
    v294.f64[0] = v251[2].f64[0];
    v295 = vmlaq_n_f64(v281, *v282, v294.f64[0]);
    v296 = vmlaq_n_f64(v283, v285, v294.f64[0]);
    v297 = *(unsigned int *)(a1 + 312);
    v298 = *(float64x2_t **)(a1 + 296);
    v298[2].f64[0] = _Q7.f64[0];
    *v298 = v286;
    v298[1] = v287;
    v299 = (float64x2_t *)((char *)v298 + 8 * v297);
    *v299 = v289;
    v299[1] = v290;
    v299[2].f64[0] = _D24 + v264.f64[0] * v288.f64[0];
    v300 = &v298[v297];
    v300[2].f64[0] = _D27 + v264.f64[0] * v291;
    *v300 = v292;
    v300[1] = vmlaq_n_f64(v274, v285, v291);
    v301 = (float64x2_t *)((char *)v298 + 24 * v297);
    v301[2].f64[0] = _D29 + v264.f64[0] * _Q21.f64[0];
    *v301 = v293;
    v301[1] = vmlaq_n_f64(v278, v285, _Q21.f64[0]);
    v302 = &v298[2 * v297];
    v302[2].f64[0] = _D1 + v264.f64[0] * v294.f64[0];
    *v302 = v295;
    v302[1] = v296;
  }
  else
  {
    v354 = (int *)(a1 + 272);
    v355 = (_QWORD *)(a1 + 176);
    v356 = 0x3FF0000000000000;
    sub_20F197DE0(a1 + 296, (uint64_t)v353);
  }
  v303 = *(double *)(a1 + 64);
  if (v303 == 0.0)
    v285.f64[0] = 1.0;
  else
    v285.f64[0] = 1.0 / v303;
  if (*(_QWORD *)(a1 + 16) == 5)
  {
    v304 = *(unsigned int *)(a1 + 192);
    v305 = *(float64x2_t **)(a1 + 176);
    v306 = *(unsigned int *)(a1 + 312);
    v307 = *(float64x2_t **)(a1 + 296);
    v226.f64[0] = v305[2].f64[0];
    v308 = (float64x2_t *)((char *)v305 + 8 * v304);
    v296.f64[0] = v308[2].f64[0];
    v309 = &v305[v304];
    v288.f64[0] = v309[2].f64[0];
    v310 = (float64x2_t *)((char *)v305 + 24 * v304);
    v290.f64[0] = v310[2].f64[0];
    v311 = &v305[2 * v304];
    v294.f64[0] = v311[2].f64[0];
    _Q24.f64[0] = v307[2].f64[0];
    v312 = *v307;
    v313 = (float64x2_t *)((char *)v307 + 8 * v306);
    v10.f64[0] = v313[2].f64[0];
    v314 = *v313;
    v315 = v313[1];
    v316 = &v307[v306];
    v8.f64[0] = v316[2].f64[0];
    v317 = (float64x2_t *)((char *)v307 + 24 * v306);
    v318 = &v307[2 * v306];
    v9.f64[0] = v317[2].f64[0];
    v312.f64[0] = v318[2].f64[0];
    v319 = vmulq_n_f64(vsubq_f64(v305[1], v307[1]), v285.f64[0]);
    v320 = vmulq_n_f64(vsubq_f64(*v308, v314), v285.f64[0]);
    v321 = vmulq_n_f64(vsubq_f64(v308[1], v315), v285.f64[0]);
    v322 = vmulq_n_f64(vsubq_f64(*v309, *v316), v285.f64[0]);
    v323 = vmulq_n_f64(vsubq_f64(v309[1], v316[1]), v285.f64[0]);
    v324 = vmulq_n_f64(vsubq_f64(*v310, *v317), v285.f64[0]);
    v325 = vmulq_n_f64(vsubq_f64(v310[1], v317[1]), v285.f64[0]);
    v326 = vmulq_n_f64(vsubq_f64(*v311, *v318), v285.f64[0]);
    v327 = vmulq_n_f64(vsubq_f64(v311[1], v318[1]), v285.f64[0]);
    *v305 = vmulq_n_f64(vsubq_f64(*v305, *v307), v285.f64[0]);
    v305[1] = v319;
    *(_QWORD *)&v305[2].f64[0] = *(_OWORD *)&vmulq_f64(v285, vsubq_f64(v226, _Q24));
    *v308 = v320;
    v308[1] = v321;
    *(_QWORD *)&v308[2].f64[0] = *(_OWORD *)&vmulq_f64(v285, vsubq_f64(v296, v10));
    *(_QWORD *)&v309[2].f64[0] = *(_OWORD *)&vmulq_f64(v285, vsubq_f64(v288, v8));
    *v309 = v322;
    v309[1] = v323;
    *(_QWORD *)&v310[2].f64[0] = *(_OWORD *)&vmulq_f64(v285, vsubq_f64(v290, v9));
    *v310 = v324;
    v310[1] = v325;
    *(_QWORD *)&v311[2].f64[0] = *(_OWORD *)&vmulq_f64(v285, vsubq_f64(v294, v312));
    *v311 = v326;
    v311[1] = v327;
    return;
  }
  v328 = (*(_DWORD *)(a1 + 196) * *(_DWORD *)(a1 + 192));
  if ((_DWORD)v328)
  {
    v329 = *(_QWORD *)(a1 + 176);
    v330 = *(double **)(a1 + 296);
    v331 = (v328 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v331 < 7)
    {
      v332 = *(double **)(a1 + 176);
LABEL_176:
      v340 = (double *)(v329 + 8 * v328);
      do
      {
        v341 = *v330++;
        *v332 = v285.f64[0] * (*v332 - v341);
        ++v332;
      }
      while (v332 != v340);
      return;
    }
    if (v329 < (unint64_t)&v330[v328])
    {
      v332 = *(double **)(a1 + 176);
      if ((unint64_t)v330 < v329 + 8 * v328)
        goto LABEL_176;
    }
    v333 = v331 + 1;
    v334 = v333 & 0x3FFFFFFFFFFFFFFCLL;
    v332 = (double *)(v329 + v334 * 8);
    v335 = &v330[v334];
    v336 = (float64x2_t *)(v330 + 2);
    v337 = (float64x2_t *)(v329 + 16);
    v338 = v333 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v339 = vmulq_n_f64(vsubq_f64(*v337, *v336), v285.f64[0]);
      v337[-1] = vmulq_n_f64(vsubq_f64(v337[-1], v336[-1]), v285.f64[0]);
      *v337 = v339;
      v336 += 2;
      v337 += 2;
      v338 -= 4;
    }
    while (v338);
    v330 = v335;
    if (v333 != (v333 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_176;
  }
}

void sub_20F18FBAC(uint64_t a1)
{
  float64x2_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  double *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  unsigned int v31;
  unint64_t v32;
  float64x2_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  unint64_t v38;
  double *v39;
  unint64_t v40;
  unint64_t v41;
  float64x2_t *v42;
  uint64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double *v46;
  double v47;
  uint64_t v48;
  unint64_t v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  uint64_t *v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  uint64_t *v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  float64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  double *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  double v131;
  unint64_t j;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  float64x2_t *v136;
  float64x2_t *v137;
  float64x2_t v138;
  float64x2_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  unsigned __int8 v144;
  double *v145;
  double *v146;
  double *v147;
  double v148;
  uint64_t v149;
  double *v150;
  uint64_t v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  float64x2_t *v155;
  uint64_t v156;
  float64x2_t v157;
  double v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  float64x2_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  double *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  double v210;
  unint64_t k;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  float64x2_t *v215;
  float64x2_t *v216;
  float64x2_t v217;
  float64x2_t v218;
  unint64_t i;
  _OWORD *v220;
  unint64_t v221;
  unint64_t v222;
  __int128 *v223;
  unint64_t v224;
  __int128 *v225;
  uint64_t v226;
  unint64_t v227;
  _OWORD *v228;
  int64x2_t *v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t *v267;
  int64x2_t *v268;
  int64x2_t *v269;
  int64x2_t *v270;
  int64x2_t *v271;
  int64x2_t *v272;
  __int128 *v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t *v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int64x2_t v294;
  int64x2_t v295;
  int64x2_t v296;
  int64x2_t v297;
  int64x2_t v298;
  unint64_t v299;
  __int128 *v300;
  __int128 *v301;
  int64x2_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t v315;
  __int128 v316;
  int64x2_t v317;
  int64x2_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  __int128 v323;
  unint64_t v324;
  __int128 *v325;
  unint64_t v326;
  __int128 *v327;
  uint64_t v328;
  unint64_t v329;
  _OWORD *v330;
  int64x2_t *v331;
  int64x2_t v332;
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int64x2_t v358;
  int64x2_t v359;
  int64x2_t v360;
  int64x2_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int64x2_t v365;
  int64x2_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int64x2_t *v369;
  int64x2_t *v370;
  int64x2_t *v371;
  int64x2_t *v372;
  int64x2_t *v373;
  int64x2_t *v374;
  __int128 *v375;
  int64x2_t v376;
  int64x2_t v377;
  int64x2_t v378;
  int64x2_t v379;
  int64x2_t *v380;
  int64x2_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int64x2_t v384;
  int64x2_t v385;
  int64x2_t v386;
  int64x2_t v387;
  int64x2_t v388;
  int64x2_t v389;
  int64x2_t v390;
  int64x2_t v391;
  int64x2_t v392;
  int64x2_t v393;
  int64x2_t v394;
  int64x2_t v395;
  int64x2_t v396;
  int64x2_t v397;
  int64x2_t v398;
  int64x2_t v399;
  int64x2_t v400;
  unint64_t v401;
  __int128 *v402;
  __int128 *v403;
  int64x2_t v404;
  int64x2_t v405;
  int64x2_t v406;
  int64x2_t v407;
  int64x2_t v408;
  int64x2_t v409;
  int64x2_t v410;
  int64x2_t v411;
  int64x2_t v412;
  int64x2_t v413;
  int64x2_t v414;
  int64x2_t v415;
  int64x2_t v416;
  int64x2_t v417;
  __int128 v418;
  int64x2_t v419;
  int64x2_t v420;
  int64x2_t v421;
  int64x2_t v422;
  int64x2_t v423;
  int64x2_t v424;
  __int128 v425;
  unint64_t v426;
  __int128 *v427;
  unint64_t v428;
  __int128 *v429;
  uint64_t v430;
  unint64_t v431;
  _OWORD *v432;
  int64x2_t *v433;
  int64x2_t v434;
  int64x2_t v435;
  int64x2_t v436;
  int64x2_t v437;
  int64x2_t v438;
  int64x2_t v439;
  int64x2_t v440;
  int64x2_t v441;
  int64x2_t v442;
  int64x2_t v443;
  int64x2_t v444;
  int64x2_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int64x2_t v458;
  int64x2_t v459;
  int64x2_t v460;
  int64x2_t v461;
  int64x2_t v462;
  int64x2_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int64x2_t v467;
  int64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t *v471;
  int64x2_t *v472;
  int64x2_t *v473;
  int64x2_t *v474;
  int64x2_t *v475;
  int64x2_t *v476;
  __int128 *v477;
  int64x2_t v478;
  int64x2_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t *v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  int64x2_t v486;
  int64x2_t v487;
  int64x2_t v488;
  int64x2_t v489;
  int64x2_t v490;
  int64x2_t v491;
  int64x2_t v492;
  int64x2_t v493;
  int64x2_t v494;
  int64x2_t v495;
  int64x2_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int64x2_t v499;
  int64x2_t v500;
  int64x2_t v501;
  int64x2_t v502;
  unint64_t v503;
  __int128 *v504;
  __int128 *v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int64x2_t v511;
  int64x2_t v512;
  int64x2_t v513;
  int64x2_t v514;
  int64x2_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  __int128 v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  __int128 v527;
  unint64_t v528;
  __int128 *v529;
  unint64_t v530;
  __int128 *v531;
  uint64_t v532;
  unint64_t v533;
  _OWORD *v534;
  int64x2_t *v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int64x2_t v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t v545;
  int64x2_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int64x2_t v561;
  int64x2_t v562;
  int64x2_t v563;
  int64x2_t v564;
  int64x2_t v565;
  int64x2_t v566;
  int64x2_t v567;
  int64x2_t v568;
  int64x2_t v569;
  int64x2_t v570;
  int64x2_t v571;
  int64x2_t v572;
  int64x2_t *v573;
  int64x2_t *v574;
  int64x2_t *v575;
  int64x2_t *v576;
  int64x2_t *v577;
  int64x2_t *v578;
  __int128 *v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  int64x2_t v583;
  int64x2_t *v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t v594;
  int64x2_t v595;
  int64x2_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int64x2_t v599;
  int64x2_t v600;
  int64x2_t v601;
  int64x2_t v602;
  int64x2_t v603;
  int64x2_t v604;
  unint64_t v605;
  __int128 *v606;
  __int128 *v607;
  int64x2_t v608;
  int64x2_t v609;
  int64x2_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  int64x2_t v619;
  int64x2_t v620;
  int64x2_t v621;
  __int128 v622;
  int64x2_t v623;
  int64x2_t v624;
  int64x2_t v625;
  int64x2_t v626;
  int64x2_t v627;
  int64x2_t v628;
  __int128 v629;
  unint64_t v630;
  __int128 *v631;
  unint64_t v632;
  __int128 *v633;
  uint64_t v634;
  unint64_t v635;
  _OWORD *v636;
  int64x2_t *v637;
  int64x2_t v638;
  int64x2_t v639;
  int64x2_t v640;
  int64x2_t v641;
  int64x2_t v642;
  int64x2_t v643;
  int64x2_t v644;
  int64x2_t v645;
  int64x2_t v646;
  int64x2_t v647;
  int64x2_t v648;
  int64x2_t v649;
  int64x2_t v650;
  int64x2_t v651;
  int64x2_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t v674;
  int64x2_t *v675;
  int64x2_t *v676;
  int64x2_t *v677;
  int64x2_t *v678;
  int64x2_t *v679;
  int64x2_t *v680;
  __int128 *v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  int64x2_t v685;
  int64x2_t *v686;
  int64x2_t v687;
  int64x2_t v688;
  int64x2_t v689;
  int64x2_t v690;
  int64x2_t v691;
  int64x2_t v692;
  int64x2_t v693;
  int64x2_t v694;
  int64x2_t v695;
  int64x2_t v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  int64x2_t v700;
  int64x2_t v701;
  int64x2_t v702;
  int64x2_t v703;
  int64x2_t v704;
  int64x2_t v705;
  int64x2_t v706;
  unint64_t v707;
  __int128 *v708;
  __int128 *v709;
  int64x2_t v710;
  int64x2_t v711;
  int64x2_t v712;
  int64x2_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int64x2_t v717;
  int64x2_t v718;
  int64x2_t v719;
  int64x2_t v720;
  int64x2_t v721;
  int64x2_t v722;
  int64x2_t v723;
  __int128 v724;
  int64x2_t v725;
  int64x2_t v726;
  int64x2_t v727;
  int64x2_t v728;
  int64x2_t v729;
  int64x2_t v730;
  __int128 v731;
  unint64_t v732;
  __int128 *v733;
  unint64_t v734;
  __int128 *v735;
  uint64_t v736;
  unint64_t v737;
  _OWORD *v738;
  int64x2_t *v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int64x2_t v749;
  int64x2_t v750;
  int64x2_t v751;
  int64x2_t v752;
  int64x2_t v753;
  int64x2_t v754;
  int64x2_t v755;
  int64x2_t v756;
  int64x2_t v757;
  int64x2_t v758;
  int64x2_t v759;
  int64x2_t v760;
  int64x2_t v761;
  int64x2_t v762;
  int64x2_t v763;
  int64x2_t v764;
  int64x2_t v765;
  int64x2_t v766;
  int64x2_t v767;
  int64x2_t v768;
  int64x2_t v769;
  int64x2_t v770;
  int64x2_t v771;
  int64x2_t v772;
  int64x2_t v773;
  int64x2_t v774;
  int64x2_t v775;
  int64x2_t v776;
  int64x2_t *v777;
  int64x2_t *v778;
  int64x2_t *v779;
  int64x2_t *v780;
  int64x2_t *v781;
  int64x2_t *v782;
  __int128 *v783;
  int64x2_t v784;
  int64x2_t v785;
  int64x2_t v786;
  int64x2_t v787;
  int64x2_t *v788;
  int64x2_t v789;
  int64x2_t v790;
  int64x2_t v791;
  int64x2_t v792;
  int64x2_t v793;
  int64x2_t v794;
  int64x2_t v795;
  int64x2_t v796;
  int64x2_t v797;
  int64x2_t v798;
  int64x2_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int64x2_t v806;
  int64x2_t v807;
  int64x2_t v808;
  unint64_t v809;
  __int128 *v810;
  __int128 *v811;
  int64x2_t v812;
  int64x2_t v813;
  int64x2_t v814;
  int64x2_t v815;
  int64x2_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int64x2_t v823;
  int64x2_t v824;
  int64x2_t v825;
  __int128 v826;
  int64x2_t v827;
  int64x2_t v828;
  int64x2_t v829;
  int64x2_t v830;
  int64x2_t v831;
  int64x2_t v832;
  __int128 v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int8x16_t v840;
  int8x16_t v841;
  int8x16_t v842;
  int8x16_t v843;
  int8x16_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  int8x16_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  int8x16_t v864;
  int8x16_t v865;
  int8x16_t v866;
  int8x16_t v867;
  int8x16_t v868;
  int8x16_t v869;
  int8x16_t v870;
  int8x16_t v871;
  float64x2_t v872;
  int64x2_t v873;
  int64x2_t v874;
  int64x2_t v875;
  int64x2_t v876;
  int64x2_t v877;
  int64x2_t v878;
  int8x16_t v879;
  int64x2_t v880;
  int64x2_t v881;
  int64x2_t v882;
  int64x2_t v883;
  int64x2_t v884;
  int64x2_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int64x2_t v888;
  int64x2_t v889;
  int64x2_t v890;
  int64x2_t v891;
  int64x2_t v892;
  int64x2_t v893;
  _BYTE __dst[4800];
  _BYTE v895[4800];
  _BYTE v896[4800];
  _OWORD v897[300];

  v2 = MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  if (*(_BYTE *)(v11 + 56) != 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 220, (uint64_t)"ls_pred_cfg_.ls_update_mode == LeastSquaresPredictionUpdateMode::RLS", 68, (uint64_t)"Function can only be used in RLS update mode.", 45, (void (*)(void **))sub_21023DDB0)|| v8 - 1 >= *(_QWORD *)(v12 + 24)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 222, (uint64_t)"num_pred_smpls <= ls_pred_cfg_.max_pred_samples && num_pred_smpls > 0u", 70, (uint64_t)"num_pred_smpls must be in in [1,max_pred_samples] range.", 56, (void (*)(void **))sub_21023DDB0)|| *(_QWORD *)(v12 + 16) > (unint64_t)*((unsigned int *)v10 + 4)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp",
         224,
         (uint64_t)"input_delay_line.rows() >= ls_pred_cfg_.num_taps",
         48,
         (uint64_t)"input_delay_line length must be longer than num_taps.",
         53,
         (void (*)(void **))sub_21023DDB0)
    || *(unsigned int *)(v6 + 16) < v8
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 226, (uint64_t)"filter_output.rows() >= num_pred_smpls", 38, (uint64_t)"filter_output length must be equal to num_pred_smpls.", 53, (void (*)(void **))sub_21023DDB0))
  {
LABEL_151:
    abort();
  }
  switch(*(_BYTE *)(v12 + 72))
  {
    case 0:
      if (!v8)
        return;
      v13 = *(char **)v6;
      v14 = *(_QWORD *)(v12 + 16);
      if (v14)
      {
        v15 = 0;
        v16 = 0;
        v17 = (double *)*v10;
        v18 = *(_DWORD *)(v12 + 216);
        v19 = *v10 + 8 * v14;
        v20 = *(_QWORD *)(v12 + 200);
        v21 = *v10 + 16;
        while (1)
        {
          *(_QWORD *)&v13[8 * v16] = 0;
          v22 = 0.0;
          if (v14 >= 0xC)
          {
            v23 = 0;
            if (!__CFADD__(v18 * v16, v14 - 1) && !((v14 - 1) >> 32))
            {
              v23 = 0;
              v24 = 8 * v16;
              v25 = (unint64_t)&v13[v24];
              v26 = (double *)&v13[v24 + 8];
              v27 = 8 * (v18 * v16);
              v28 = v25 >= v20 + 8 * v14 + v27 || v20 + v27 >= (unint64_t)v26;
              v29 = !v28;
              if ((v17 >= v26 || v25 >= v19) && !v29)
              {
                v31 = v15;
                v32 = v14 & 0xFFFFFFFFFFFFFFFCLL;
                v33 = (float64x2_t *)v21;
                do
                {
                  v34 = (float64x2_t *)(v20 + 8 * v31);
                  v35 = vmulq_f64(v33[-1], *v34);
                  v36 = vmulq_f64(*v33, v34[1]);
                  v22 = v22 + v35.f64[0] + v35.f64[1] + v36.f64[0] + v36.f64[1];
                  v33 += 2;
                  v31 += 4;
                  v32 -= 4;
                }
                while (v32);
                *(double *)&v13[8 * v16] = v22;
                v23 = v14 & 0xFFFFFFFFFFFFFFFCLL;
                if (v14 == (v14 & 0xFFFFFFFFFFFFFFFCLL))
                  goto LABEL_33;
              }
            }
          }
          else
          {
            v23 = 0;
          }
          do
          {
            v22 = v22 + v17[v23] * *(double *)(v20 + 8 * (v15 + v23));
            *(double *)&v13[8 * v16] = v22;
            ++v23;
          }
          while (v14 != v23);
LABEL_33:
          ++v16;
          v15 += v18;
          if (v16 == v8)
            return;
        }
      }
      if (v8 - 0x100000001 < 0xFFFFFFFF00000003)
      {
        for (i = 0; i != v8; ++i)
LABEL_149:
          *(_QWORD *)&v13[8 * i] = 0;
        return;
      }
      i = v8 & 0xFFFFFFFFFFFFFFFCLL;
      v220 = v13 + 16;
      v221 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        *(v220 - 1) = 0uLL;
        *v220 = 0uLL;
        v220 += 2;
        v221 -= 4;
      }
      while (v221);
      if (i != v8)
        goto LABEL_149;
      return;
    case 1:
      v37 = *((unsigned int *)v10 + 4);
      if ((_DWORD)v37)
      {
        v38 = *v10;
        v1.f64[0] = *(double *)*v10 * *(double *)*v10;
        if ((_DWORD)v37 != 1)
        {
          v39 = (double *)(v38 + 8);
          v40 = (v37 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v40 < 3)
            goto LABEL_41;
          v41 = v40 + 1;
          v39 += v41 & 0x3FFFFFFFFFFFFFFCLL;
          v42 = (float64x2_t *)(v38 + 24);
          v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = vmulq_f64(v42[-1], v42[-1]);
            v45 = vmulq_f64(*v42, *v42);
            v1.f64[0] = v1.f64[0] + v44.f64[0] + v44.f64[1] + v45.f64[0] + v45.f64[1];
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_41:
            v46 = (double *)(v38 + 8 * v37);
            do
            {
              v47 = *v39++;
              v1.f64[0] = v1.f64[0] + v47 * v47;
            }
            while (v39 != v46);
          }
        }
      }
      else
      {
        v1.f64[0] = 0.0;
      }
      v79.i64[0] = 0x401C79085F4A1273;
      v80.i64[1] = 0x40124392E1EF73C1;
      v81.i64[0] = 0x4013ED3804534BD7;
      v82.i64[1] = 0x4001AAFF6D330942;
      v83.i64[0] = 0x4006DE8F6CEFED63;
      v84.i64[0] = vdupq_laneq_s64(unk_21039E9F0, 1).u64[0];
      v84.i64[1] = unk_21039EA98;
      v85.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8B0, 1).u64[0];
      v85.i64[1] = unk_21039E958;
      v86.i64[1] = 0x400C29B499D0203ELL;
      v86.i64[0] = 0x3FB58FF759685122;
      v83.i64[1] = 0xBFEF944028E4FB98;
      v87.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E9E0, 1).u64[0];
      v87.i64[1] = 0x3FA9E44FA05143BFLL;
      v88.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8A0, 1).u64[0];
      v88.i64[1] = 0xBFD908D08919EF95;
      v82.i64[0] = 0xBF75AD106EE30CAALL;
      v89.i64[0] = vdupq_laneq_s64(unk_21039EA10, 1).u64[0];
      v89.i64[1] = unk_21039EAB8;
      v854 = v89;
      v90.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8D0, 1).u64[0];
      v90.i64[1] = 0xBFF37CDDD6E04C06;
      v91.i64[1] = 0x4015A69B5A63F9A5;
      v91.i64[0] = 0xBFD91A1986B9C305;
      v81.i64[1] = 0xC00323FEE2C98E54;
      v847 = v81;
      v92.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA00, 1).u64[0];
      v92.i64[1] = 0xBFD128D434A01ABDLL;
      v80.i64[0] = 0xBFB8FE47991BC558;
      v93.i64[0] = vdupq_laneq_s64(unk_21039EA30, 1).u64[0];
      v93.i64[1] = 0x3F9C6A7EF9DB22D1;
      v834 = v93;
      v94.i64[1] = 0x401F2CA1059EA572;
      v94.i64[0] = 0xBFC5784662BAE03BLL;
      v95.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA20, 1).u64[0];
      v95.i64[1] = 0xBFD4D5C31593E5FBLL;
      v93.i64[1] = 0x4019F86CA89FC6DALL;
      v93.i64[0] = 0xBFDA9CB252CE032ELL;
      v886 = v93;
      v96.i64[0] = vdupq_laneq_s64(unk_21039EA50, 1).u64[0];
      v96.i64[1] = 0x3FE55E99E94AB1D5;
      v861 = v96;
      v97.i64[1] = 0x402264B09E98DCDBLL;
      v98.i64[0] = unk_21039E870;
      v99.i64[1] = unk_21039E878;
      v99.i64[0] = 0x3FE093836A832B99;
      v100.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA40, 1).u64[0];
      v100.i64[1] = 0x3FD7CB89D6ADF71FLL;
      v97.i64[0] = 0x3FCB56C0D6F544BBLL;
      v81.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8C0, 1).u64[0];
      v81.i64[1] = 0xBFF0CAB4FA48301ALL;
      v79.i64[1] = 0xC00B69491F2DC2B1;
      v101.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8F0, 1).u64[0];
      v101.i64[1] = 0xC000EC14C660A201;
      v89.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8E0, 1).u64[0];
      v836 = v79;
      v89.i64[1] = 0xBFF972C5197A2489;
      v98.i64[1] = 0xC0147C18B502ABACLL;
      v102.i64[0] = vdupq_laneq_s64(qword_21039E910, 1).u64[0];
      v102.i64[1] = 0xC0090D573647BAAALL;
      v103.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E900, 1).u64[0];
      v103.i64[1] = 0xC0055F03D145D851;
      v79.i64[0] = 0x3FEA75F0B28522EALL;
      v104.i64[0] = 0x3FF3D055B8993922;
      v104.i64[1] = 0x4029C5BD512EC6BDLL;
      v79.i64[1] = 0x40275153586CA8A0;
      v105 = (float64x2_t)vzip1q_s64((int64x2_t)xmmword_21039E880, (int64x2_t)xmmword_21039E920);
      v841 = (int8x16_t)v105;
      v1.f64[0] = sqrt(v1.f64[0]);
      v105.f64[0] = 0.223606798;
      v106 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v105, v1)).i64[0], 0);
      v107.i64[1] = 0x4001ACFC829CFDD2;
      v107.i64[0] = 0xBF75A8DEB0FADF2FLL;
      v871 = vbslq_s8(v106, v82, v107);
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4A0, 1).u64[0];
      v107.i64[1] = 0xBFD9154434E3369CLL;
      v869 = vbslq_s8(v106, v88, v107);
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E5E0, 1).u64[0];
      v107.i64[1] = 0x3FAAAB25B317EFE1;
      v867 = vbslq_s8(v106, v87, v107);
      v107.i64[1] = 0x4002974A3400B88DLL;
      v96.i64[0] = 0x40049BBB62413DB8;
      v96.i64[1] = 0xBFEADDCC63F14120;
      v865 = vbslq_s8(v106, v83, v96);
      v107.i64[0] = 0xBFC840639D5E4A38;
      v863 = vbslq_s8(v106, v86, v107);
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4B0, 1).u64[0];
      v107.i64[1] = 0xBFCEE21101B00368;
      v860 = vbslq_s8(v106, v85, v107);
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E5F0, 1).u64[0];
      v107.i64[1] = 0xBFE2EE653868FD1ALL;
      v858 = vbslq_s8(v106, v84, v107);
      v107.i64[1] = 0x4001FB9496249A13;
      v107.i64[0] = 0xBFE507E9D94D0DD0;
      v855 = vbslq_s8(v106, v80, v107);
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4C0, 1).u64[0];
      v107.i64[1] = 0xBFC7620EE8D10F52;
      *(_QWORD *)&v105.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E600, 1).u64[0];
      v853 = vbslq_s8(v106, v81, v107);
      v105.f64[1] = -0.68339;
      v850 = vbslq_s8(v106, v92, (int8x16_t)v105);
      v107.i64[1] = 0x4001CD9B5E95B78DLL;
      v96.i64[0] = 0x4001DDEACC92146ALL;
      v96.i64[1] = 0xBFE4C4E93E1C9B41;
      v848 = vbslq_s8(v106, v847, v96);
      v107.i64[0] = 0xBFE6400DA1A93294;
      v842 = vbslq_s8(v106, v91, v107);
      *(_QWORD *)&v105.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4D0, 1).u64[0];
      v105.f64[1] = -0.169151;
      v96.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E610, 1).u64[0];
      v839 = vbslq_s8(v106, v90, (int8x16_t)v105);
      v96.i64[1] = 0xBFE6667D77FAE361;
      v105.f64[1] = 2.222018;
      v105.f64[0] = -0.701089;
      v108 = vbslq_s8(v106, v886, (int8x16_t)v105);
      *(_QWORD *)&v105.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4E0, 1).u64[0];
      v105.f64[1] = -0.168304;
      v81.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E620, 1).u64[0];
      v81.i64[1] = 0xBFE6671AC14C660ALL;
      v109 = vbslq_s8(v106, v89, (int8x16_t)v105);
      v89.i64[1] = 0x4001CDACABC51548;
      v110.i64[0] = 0x4001C9203A322AF5;
      v110.i64[1] = 0xBFE45F00ABF76A2FLL;
      v111 = vbslq_s8(v106, v95, v81);
      v112 = vbslq_s8(v106, v836, v110);
      v89.i64[0] = 0xBFE654562E09FE87;
      v113 = vbslq_s8(v106, v94, v89);
      v89.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4F0, 1).u64[0];
      v89.i64[1] = 0xBFC5E878FABDA0E0;
      v107.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E630, 1).u64[0];
      v107.i64[1] = 0xBFE63E27179BFDF8;
      v114 = vbslq_s8(v106, v101, v89);
      v115 = vbslq_s8(v106, v834, v107);
      v107.i64[1] = 0x4001D799E518F3EDLL;
      v107.i64[0] = 0xBFE62C3009B30729;
      v116 = vbslq_s8(v106, v97, v107);
      *(_QWORD *)&v105.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E500, 1).u64[0];
      v105.f64[1] = -0.173968;
      v117 = vbslq_s8(v106, v103, (int8x16_t)v105);
      v97.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E640, 1).u64[0];
      v97.i64[1] = 0xBFE6209246BF0132;
      v118 = vbslq_s8(v106, v100, v97);
      v97.i64[1] = 0x4001DD199BB2788ELL;
      v119.i64[0] = 0x4001DAC929AA1D75;
      v119.i64[1] = 0xBFE497E132B55EF2;
      v97.i64[0] = 0xBFE617A89331A08CLL;
      v120 = vbslq_s8(v106, v99, v97);
      v103.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E510, 1).u64[0];
      v103.i64[1] = 0xBFC66B26BF8769ECLL;
      v99.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E650, 1).u64[0];
      v99.i64[1] = 0xBFE60F4D7ADD15F0;
      v107.i64[0] = 0xBFE6074EA8DA7F3DLL;
      v107.i64[1] = 0x4001E15A07B352A8;
      v121 = vbslq_s8(v106, v79, v107);
      v107.i64[0] = 0xBFE5EF049A9973DALL;
      v107.i64[1] = 0x4001E76D117B5287;
      v897[49] = vbslq_s8(v106, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039EA70, (int64x2_t)xmmword_21039EB10), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E670, (int64x2_t)xmmword_21039E710));
      v897[48] = vbslq_s8(v106, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E930, (int64x2_t)xmmword_21039E9D0), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E530, unk_21039E5D0));
      v897[47] = vbslq_s8(v106, v104, v107);
      v897[46] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9D0, (int64x2_t)xmmword_21039EA70), (int8x16_t)vzip1q_s64(unk_21039E5D0, (int64x2_t)xmmword_21039E670));
      v897[45] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E890, (int64x2_t)xmmword_21039E930), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E490, (int64x2_t)xmmword_21039E530));
      v897[44] = vbslq_s8(v106, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039EA60, (int64x2_t)xmmword_21039EB00), (int8x16_t)vzip2q_s64(unk_21039E660, (int64x2_t)xmmword_21039E700));
      v897[43] = vbslq_s8(v106, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E920, (int64x2_t)xmmword_21039E9C0), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E520, (int64x2_t)xmmword_21039E5C0));
      v897[42] = v121;
      v897[41] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9C0, (int64x2_t)xmmword_21039EA60), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5C0, unk_21039E660));
      v897[40] = vbslq_s8(v106, v841, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E480, (int64x2_t)xmmword_21039E520));
      v897[39] = vbslq_s8(v106, v861, v99);
      v897[38] = vbslq_s8(v106, v102, v103);
      v897[37] = v120;
      v897[36] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9B0, unk_21039EA50), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5B0, (int64x2_t)xmmword_21039E650));
      v897[35] = vbslq_s8(v106, v98, v119);
      v897[34] = v118;
      v897[33] = v117;
      v897[32] = v116;
      v897[31] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9A0, (int64x2_t)xmmword_21039EA40), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5A0, (int64x2_t)xmmword_21039E640));
      v897[30] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E860, (int64x2_t)xmmword_21039E900), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E460, (int64x2_t)xmmword_21039E500));
      v897[29] = v115;
      v897[28] = v114;
      v897[27] = v113;
      v897[26] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E990, unk_21039EA30), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E590, (int64x2_t)xmmword_21039E630));
      v897[25] = v112;
      v897[24] = v111;
      v897[23] = v109;
      v897[22] = v108;
      v897[21] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E980, (int64x2_t)xmmword_21039EA20), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E580, (int64x2_t)xmmword_21039E620));
      v897[20] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E840, (int64x2_t)xmmword_21039E8E0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E440, (int64x2_t)xmmword_21039E4E0));
      v897[19] = vbslq_s8(v106, v854, v96);
      v897[18] = v839;
      v897[17] = v842;
      v897[16] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E970, unk_21039EA10), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E570, (int64x2_t)xmmword_21039E610));
      v897[15] = v848;
      v897[14] = v850;
      v897[13] = v853;
      v897[12] = v855;
      v897[11] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E960, (int64x2_t)xmmword_21039EA00), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E560, (int64x2_t)xmmword_21039E600));
      v897[10] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E820, (int64x2_t)xmmword_21039E8C0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E420, (int64x2_t)xmmword_21039E4C0));
      v897[9] = v858;
      v897[8] = v860;
      v897[7] = v863;
      v897[6] = vbslq_s8(v106, (int8x16_t)vzip1q_s64(unk_21039E950, unk_21039E9F0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E550, (int64x2_t)xmmword_21039E5F0));
      v897[5] = v865;
      v897[4] = v867;
      v897[3] = v869;
      v897[2] = v871;
      v897[1] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E940, (int64x2_t)xmmword_21039E9E0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E540, (int64x2_t)xmmword_21039E5E0));
      v897[0] = vbslq_s8(v106, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E800, (int64x2_t)xmmword_21039E8A0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E400, (int64x2_t)xmmword_21039E4A0));
      if ((*(_QWORD *)(v12 + 16) != 5 || *(_QWORD *)(v12 + 24) != 20)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 583, (uint64_t)"cfs.rows() == ls_pred_cfg_.num_taps && cfs.columns() == ls_pred_cfg_.max_pred_samples", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_151;
      }
      v122 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v122)
        bzero(*(void **)v6, 8 * v122);
      if (!v8)
        return;
      v123 = *(_QWORD *)(v12 + 16);
      if (!v123)
        return;
      v124 = 0;
      v125 = 0;
      v126 = *v10;
      v127 = *(double **)v6;
      v128 = *(_QWORD *)v6 + 8;
      v129 = *v10 + 8 * v123;
      v130 = *v10 + 16;
      while (1)
      {
        v131 = v127[v125];
        if (v123 >= 8)
        {
          j = 0;
          if (__CFADD__(5 * v125, v123 - 1) || (v123 - 1) >> 32)
            goto LABEL_99;
          v133 = v125;
          if ((unint64_t)&v127[v133] >= v129 || v126 >= v128 + v133 * 8)
          {
            v134 = v123 & 0xFFFFFFFFFFFFFFFCLL;
            v135 = v124;
            v136 = (float64x2_t *)v130;
            do
            {
              v137 = (float64x2_t *)((char *)v897 + 8 * v135);
              v138 = vmulq_f64(v136[-1], *v137);
              v139 = vmulq_f64(*v136, v137[1]);
              v131 = v131 + v138.f64[0] + v138.f64[1] + v139.f64[0] + v139.f64[1];
              v136 += 2;
              v135 += 4;
              v134 -= 4;
            }
            while (v134);
            v127[v125] = v131;
            j = v123 & 0xFFFFFFFFFFFFFFFCLL;
            if (v123 == (v123 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_100;
            goto LABEL_99;
          }
        }
        for (j = 0; j != v123; ++j)
        {
LABEL_99:
          v131 = v131 + *(double *)(v126 + 8 * j) * *((double *)v897 + (v124 + j));
          v127[v125] = v131;
        }
LABEL_100:
        ++v125;
        v124 += 5;
        if (v125 == v8)
          return;
      }
    case 2:
      v48 = *((unsigned int *)v10 + 4);
      if ((_DWORD)v48)
      {
        v49 = *v10;
        v1.f64[0] = *(float64_t *)*v10;
        if ((_DWORD)v48 == 1)
        {
          v50 = v1.f64[0] * v1.f64[0];
        }
        else
        {
          v145 = (double *)(v49 + 8 * v48);
          v146 = (double *)(v49 + 8);
          v147 = (double *)(v49 + 8);
          v148 = *(double *)*v10;
          if (((v48 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) == 0)
            goto LABEL_214;
          v149 = ((v48 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) + 1;
          v147 = &v146[v149 & 0x3FFFFFFFFFFFFFFELL];
          v150 = (double *)(v49 + 16);
          v151 = v149 & 0x3FFFFFFFFFFFFFFELL;
          v148 = *(double *)*v10;
          do
          {
            v148 = v148 + *(v150 - 1) + *v150;
            v150 += 2;
            v151 -= 2;
          }
          while (v151);
          if (v149 != (v149 & 0x3FFFFFFFFFFFFFFELL))
          {
LABEL_214:
            do
            {
              v152 = *v147++;
              v148 = v148 + v152;
            }
            while (v147 != v145);
          }
          v50 = v1.f64[0] * v1.f64[0];
          v153 = (v48 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v153 < 3)
            goto LABEL_215;
          v154 = v153 + 1;
          v146 += v154 & 0x3FFFFFFFFFFFFFFCLL;
          v155 = (float64x2_t *)(v49 + 24);
          v156 = v154 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v1 = vmulq_f64(v155[-1], v155[-1]);
            v157 = vmulq_f64(*v155, *v155);
            v50 = v50 + v1.f64[0] + v1.f64[1] + v157.f64[0] + v157.f64[1];
            v155 += 2;
            v156 -= 4;
          }
          while (v156);
          if (v154 != (v154 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_215:
            do
            {
              v158 = *v146++;
              v50 = v50 + v158 * v158;
            }
            while (v146 != v145);
          }
          v1.f64[0] = v148 / (double)v48;
        }
      }
      else
      {
        v50 = 0.0;
        v1.f64[0] = NAN;
      }
      v159.i64[0] = 0x4013ED3804534BD7;
      v1.f64[0] = v50 - v1.f64[0] * v1.f64[0];
      v872 = v1;
      v161.i64[0] = 0x4006DE8F6CEFED63;
      v160.i64[1] = 0x40124392E1EF73C1;
      v162.i64[1] = 0x4001AAFF6D330942;
      v163.i64[0] = vdupq_laneq_s64(unk_21039E9F0, 1).u64[0];
      v163.i64[1] = unk_21039EA98;
      v164.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8B0, 1).u64[0];
      v164.i64[1] = unk_21039E958;
      v165.i64[1] = 0x400C29B499D0203ELL;
      v165.i64[0] = 0x3FB58FF759685122;
      v161.i64[1] = 0xBFEF944028E4FB98;
      v166.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E9E0, 1).u64[0];
      v166.i64[1] = 0x3FA9E44FA05143BFLL;
      v167.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8A0, 1).u64[0];
      v167.i64[1] = 0xBFD908D08919EF95;
      v162.i64[0] = 0xBF75AD106EE30CAALL;
      v168.i64[0] = vdupq_laneq_s64(unk_21039EA10, 1).u64[0];
      v168.i64[1] = unk_21039EAB8;
      v169.i64[1] = 0x4015A69B5A63F9A5;
      v169.i64[0] = 0xBFD91A1986B9C305;
      v170.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8D0, 1).u64[0];
      v170.i64[1] = 0xBFF37CDDD6E04C06;
      v159.i64[1] = 0xC00323FEE2C98E54;
      v843 = v159;
      v159.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA00, 1).u64[0];
      v159.i64[1] = 0xBFD128D434A01ABDLL;
      v171.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8C0, 1).u64[0];
      v171.i64[1] = 0xBFF0CAB4FA48301ALL;
      v160.i64[0] = 0xBFB8FE47991BC558;
      v851 = v160;
      v172.i64[0] = vdupq_laneq_s64(unk_21039EA30, 1).u64[0];
      v172.i64[1] = 0x3F9C6A7EF9DB22D1;
      v835 = v172;
      v172.i64[0] = 0x401C79085F4A1273;
      v173.i64[1] = 0x401F2CA1059EA572;
      v173.i64[0] = 0xBFC5784662BAE03BLL;
      v174.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8F0, 1).u64[0];
      v174.i64[1] = 0xC000EC14C660A201;
      v172.i64[1] = 0xC00B69491F2DC2B1;
      v887 = v172;
      v175.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E8E0, 1).u64[0];
      v175.i64[1] = 0xBFF972C5197A2489;
      v176.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA20, 1).u64[0];
      v176.i64[1] = 0xBFD4D5C31593E5FBLL;
      v172.i64[1] = 0x4019F86CA89FC6DALL;
      v172.i64[0] = 0xBFDA9CB252CE032ELL;
      v879 = v172;
      v172.i64[0] = vdupq_laneq_s64(unk_21039EA50, 1).u64[0];
      v172.i64[1] = 0x3FE55E99E94AB1D5;
      v857 = v172;
      v177.i64[1] = 0x402264B09E98DCDBLL;
      v178.i64[0] = unk_21039E870;
      v179.i64[1] = unk_21039E878;
      v179.i64[0] = 0x3FE093836A832B99;
      v180.i64[0] = vdupq_laneq_s64(qword_21039E910, 1).u64[0];
      v180.i64[1] = 0xC0090D573647BAAALL;
      v178.i64[1] = 0xC0147C18B502ABACLL;
      v181.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E900, 1).u64[0];
      v181.i64[1] = 0xC0055F03D145D851;
      v182.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039EA40, 1).u64[0];
      v182.i64[1] = 0x3FD7CB89D6ADF71FLL;
      v177.i64[0] = 0x3FCB56C0D6F544BBLL;
      v183.i64[0] = 0x3FF3D055B8993922;
      v183.i64[1] = 0x4029C5BD512EC6BDLL;
      v184.i64[0] = 0x3FEA75F0B28522EALL;
      v184.i64[1] = 0x40275153586CA8A0;
      v185 = (float64x2_t)vzip1q_s64((int64x2_t)xmmword_21039E880, (int64x2_t)xmmword_21039E920);
      v845 = (int8x16_t)v185;
      v185.f64[0] = 0.447213595;
      v186 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v185, v872)).i64[0], 0);
      v185.f64[1] = 2.209466;
      v185.f64[0] = -0.005288;
      v870 = vbslq_s8(v186, v162, (int8x16_t)v185);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4A0, 1).u64[0];
      v185.f64[1] = -0.391923;
      v868 = vbslq_s8(v186, v167, (int8x16_t)v185);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E5E0, 1).u64[0];
      v185.f64[1] = 0.052087;
      v866 = vbslq_s8(v186, v166, (int8x16_t)v185);
      v185.f64[1] = 2.323872;
      v187.i64[0] = 0x40049BBB62413DB8;
      v187.i64[1] = 0xBFEADDCC63F14120;
      v864 = vbslq_s8(v186, v161, v187);
      v185.f64[0] = -0.189465;
      v862 = vbslq_s8(v186, v165, (int8x16_t)v185);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4B0, 1).u64[0];
      v185.f64[1] = -0.241274;
      v859 = vbslq_s8(v186, v164, (int8x16_t)v185);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E5F0, 1).u64[0];
      v185.f64[1] = -0.591601;
      v856 = vbslq_s8(v186, v163, (int8x16_t)v185);
      v185.f64[1] = 2.247842;
      v185.f64[0] = -0.657216;
      v852 = vbslq_s8(v186, v851, (int8x16_t)v185);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4C0, 1).u64[0];
      v185.f64[1] = -0.18268;
      v172.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E600, 1).u64[0];
      v849 = vbslq_s8(v186, v171, (int8x16_t)v185);
      v172.i64[1] = 0xBFE5DE54B48D3AE7;
      v846 = vbslq_s8(v186, v159, v172);
      v172.i64[1] = 0x4001CD9B5E95B78DLL;
      v185.f64[0] = 2.233358;
      v185.f64[1] = -0.649037;
      v844 = vbslq_s8(v186, v843, (int8x16_t)v185);
      v172.i64[0] = 0xBFE6400DA1A93294;
      v840 = vbslq_s8(v186, v169, v172);
      v172.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4D0, 1).u64[0];
      v172.i64[1] = 0xBFC5A6BD6E8AF816;
      v187.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E610, 1).u64[0];
      v838 = vbslq_s8(v186, v170, v172);
      v187.i64[1] = 0xBFE6667D77FAE361;
      v837 = vbslq_s8(v186, v168, v187);
      v166.i64[1] = 0x4001C6B15F88FC93;
      v166.i64[0] = 0xBFE66F5232D2BB23;
      v188 = vbslq_s8(v186, v879, v166);
      v166.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4E0, 1).u64[0];
      v166.i64[1] = 0xBFC58AFC47E49B20;
      v189.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E620, 1).u64[0];
      v189.i64[1] = 0xBFE6671AC14C660ALL;
      v190 = vbslq_s8(v186, v175, v166);
      v191.i64[1] = 0x4001CDACABC51548;
      v161.i64[0] = 0x4001C9203A322AF5;
      v161.i64[1] = 0xBFE45F00ABF76A2FLL;
      v192 = vbslq_s8(v186, v176, v189);
      v191.i64[0] = 0xBFE654562E09FE87;
      v193 = vbslq_s8(v186, v173, v191);
      v191.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E4F0, 1).u64[0];
      v191.i64[1] = 0xBFC5E878FABDA0E0;
      v176.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E630, 1).u64[0];
      v176.i64[1] = 0xBFE63E27179BFDF8;
      v194 = vbslq_s8(v186, v174, v191);
      v195 = vbslq_s8(v186, v835, v176);
      v176.i64[1] = 0x4001D799E518F3EDLL;
      v176.i64[0] = 0xBFE62C3009B30729;
      v196 = vbslq_s8(v186, v177, v176);
      v176.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E500, 1).u64[0];
      v176.i64[1] = 0xBFC644955B4677B4;
      v197 = vbslq_s8(v186, v181, v176);
      *(_QWORD *)&v185.f64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E640, 1).u64[0];
      v185.f64[1] = -0.691476;
      v198 = vbslq_s8(v186, v182, (int8x16_t)v185);
      v181.i64[1] = 0x4001DD199BB2788ELL;
      v191.i64[0] = 0x4001DAC929AA1D75;
      v191.i64[1] = 0xBFE497E132B55EF2;
      v181.i64[0] = 0xBFE617A89331A08CLL;
      v182.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E510, 1).u64[0];
      v182.i64[1] = 0xBFC66B26BF8769ECLL;
      v199 = vbslq_s8(v186, v180, v182);
      v180.i64[0] = vdupq_laneq_s64((int64x2_t)xmmword_21039E650, 1).u64[0];
      v180.i64[1] = 0xBFE60F4D7ADD15F0;
      v185.f64[0] = -0.688392;
      v185.f64[1] = 2.235035;
      v200 = vbslq_s8(v186, v184, (int8x16_t)v185);
      v185.f64[0] = -0.685427;
      v185.f64[1] = 2.238001;
      v897[49] = vbslq_s8(v186, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039EA70, (int64x2_t)xmmword_21039EB10), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E670, (int64x2_t)xmmword_21039E710));
      v897[48] = vbslq_s8(v186, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E930, (int64x2_t)xmmword_21039E9D0), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E530, unk_21039E5D0));
      v897[47] = vbslq_s8(v186, v183, (int8x16_t)v185);
      v897[46] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9D0, (int64x2_t)xmmword_21039EA70), (int8x16_t)vzip1q_s64(unk_21039E5D0, (int64x2_t)xmmword_21039E670));
      v897[45] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E890, (int64x2_t)xmmword_21039E930), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E490, (int64x2_t)xmmword_21039E530));
      v897[44] = vbslq_s8(v186, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039EA60, (int64x2_t)xmmword_21039EB00), (int8x16_t)vzip2q_s64(unk_21039E660, (int64x2_t)xmmword_21039E700));
      v897[43] = vbslq_s8(v186, (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E920, (int64x2_t)xmmword_21039E9C0), (int8x16_t)vzip2q_s64((int64x2_t)xmmword_21039E520, (int64x2_t)xmmword_21039E5C0));
      v897[42] = v200;
      v897[41] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9C0, (int64x2_t)xmmword_21039EA60), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5C0, unk_21039E660));
      v897[40] = vbslq_s8(v186, v845, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E480, (int64x2_t)xmmword_21039E520));
      v897[39] = vbslq_s8(v186, v857, v180);
      v897[38] = v199;
      v897[37] = vbslq_s8(v186, v179, v181);
      v897[36] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9B0, unk_21039EA50), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5B0, (int64x2_t)xmmword_21039E650));
      v897[35] = vbslq_s8(v186, v178, v191);
      v897[34] = v198;
      v897[33] = v197;
      v897[32] = v196;
      v897[31] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E9A0, (int64x2_t)xmmword_21039EA40), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E5A0, (int64x2_t)xmmword_21039E640));
      v897[30] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E860, (int64x2_t)xmmword_21039E900), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E460, (int64x2_t)xmmword_21039E500));
      v897[29] = v195;
      v897[28] = v194;
      v897[27] = v193;
      v897[26] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E990, unk_21039EA30), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E590, (int64x2_t)xmmword_21039E630));
      v897[25] = vbslq_s8(v186, v887, v161);
      v897[24] = v192;
      v897[23] = v190;
      v897[22] = v188;
      v897[21] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E980, (int64x2_t)xmmword_21039EA20), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E580, (int64x2_t)xmmword_21039E620));
      v897[20] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E840, (int64x2_t)xmmword_21039E8E0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E440, (int64x2_t)xmmword_21039E4E0));
      v897[19] = v837;
      v897[18] = v838;
      v897[17] = v840;
      v897[16] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E970, unk_21039EA10), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E570, (int64x2_t)xmmword_21039E610));
      v897[15] = v844;
      v897[14] = v846;
      v897[13] = v849;
      v897[12] = v852;
      v897[11] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E960, (int64x2_t)xmmword_21039EA00), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E560, (int64x2_t)xmmword_21039E600));
      v897[10] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E820, (int64x2_t)xmmword_21039E8C0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E420, (int64x2_t)xmmword_21039E4C0));
      v897[9] = v856;
      v897[8] = v859;
      v897[7] = v862;
      v897[6] = vbslq_s8(v186, (int8x16_t)vzip1q_s64(unk_21039E950, unk_21039E9F0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E550, (int64x2_t)xmmword_21039E5F0));
      v897[5] = v864;
      v897[4] = v866;
      v897[3] = v868;
      v897[2] = v870;
      v897[1] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E940, (int64x2_t)xmmword_21039E9E0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E540, (int64x2_t)xmmword_21039E5E0));
      v897[0] = vbslq_s8(v186, (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E800, (int64x2_t)xmmword_21039E8A0), (int8x16_t)vzip1q_s64((int64x2_t)xmmword_21039E400, (int64x2_t)xmmword_21039E4A0));
      if ((*(_QWORD *)(v12 + 16) != 5 || *(_QWORD *)(v12 + 24) != 20)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 640, (uint64_t)"cfs.rows() == ls_pred_cfg_.num_taps && cfs.columns() == ls_pred_cfg_.max_pred_samples", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_151;
      }
      v201 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v201)
        bzero(*(void **)v6, 8 * v201);
      if (!v8)
        return;
      v202 = *(_QWORD *)(v12 + 16);
      if (!v202)
        return;
      v203 = 0;
      v204 = 0;
      v205 = (_QWORD *)*v10;
      v206 = *(double **)v6;
      v207 = *(_QWORD *)v6 + 8;
      v208 = *v10 + 8 * v202;
      v209 = *v10 + 16;
      break;
    case 3:
      v52 = *(_QWORD *)(v12 + 136);
      v51 = *(_QWORD *)(v12 + 144);
      v53 = atomic_load((unsigned __int8 *)&qword_254A68100);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A68100))
      {
        sub_20F197680((uint64_t)&unk_254A65B68);
        __cxa_guard_release(&qword_254A68100);
      }
      memcpy(v897, &unk_254A65B68, sizeof(v897));
      if ((*(_QWORD *)(v12 + 16) != 30 || *(_QWORD *)(v12 + 24) != 20)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 658, (uint64_t)"accel_cfs.rows() == ls_pred_cfg_.num_taps && accel_cfs.columns() == ls_pred_cfg_.max_pred_samples", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !v51&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 659, (uint64_t)"repeat_output_starting_index > 0", 32, (uint64_t)"Repeat Sample must be > 0", 25, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_151;
      }
      v54 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v54)
        bzero(*(void **)v6, 8 * v54);
      if (!v8)
        return;
      v55 = 0;
      v56 = 0;
      v57 = *(_QWORD **)v6;
      v58 = (_QWORD *)*v10;
      v59 = *(_QWORD *)v6 + 8;
      v60 = *v10 + 16;
      while (1)
      {
        if (v56 >= v51 || v56 % (v52 + 1))
        {
          v57[v56] = v57[(v56 - 1)];
        }
        else
        {
          v61 = *(_QWORD *)(v12 + 16);
          if (v61)
          {
            v62 = *(double *)&v57[v56];
            if (v61 < 0xA)
              goto LABEL_63;
            v63 = 0;
            if (!__CFADD__(30 * v56, v61 - 1) && !((v61 - 1) >> 32))
            {
              v64 = v56;
              if (&v57[v64] >= &v58[v61] || (unint64_t)v58 >= v59 + v64 * 8)
              {
                v63 = v61 & 0xFFFFFFFFFFFFFFFCLL;
                v65 = v61 & 0xFFFFFFFFFFFFFFFCLL;
                v66 = v55;
                v67 = (float64x2_t *)v60;
                do
                {
                  v68 = (float64x2_t *)((char *)v897 + 8 * (v66 & 0xFFFFFFFE));
                  v69 = vmulq_f64(v67[-1], *v68);
                  v70 = vmulq_f64(*v67, v68[1]);
                  v62 = v62 + v69.f64[0] + v69.f64[1] + v70.f64[0] + v70.f64[1];
                  v67 += 2;
                  v66 += 4;
                  v65 -= 4;
                }
                while (v65);
                *(double *)&v57[v56] = v62;
                goto LABEL_72;
              }
LABEL_63:
              v63 = 0;
              goto LABEL_71;
            }
            do
            {
LABEL_71:
              v62 = v62 + *(double *)&v58[v63] * *((double *)v897 + (v55 + v63));
              *(double *)&v57[v56] = v62;
              ++v63;
LABEL_72:
              ;
            }
            while (v61 != v63);
          }
        }
        ++v56;
        v55 += 30;
        if (v56 == v8)
          return;
      }
    case 4:
      if (*(_BYTE *)(v4 + 152))
      {
        v71 = atomic_load((unsigned __int8 *)&qword_254A680E8);
        if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_254A680E8))
        {
          v222 = 0;
          v223 = &xmmword_254A629B8;
          v224 = 8;
          v225 = xmmword_21039EB20;
          do
          {
            v226 = 30 * v222;
            v227 = -8;
            v228 = v223;
            v229 = (int64x2_t *)v225;
            do
            {
              v230 = v229[2];
              v873 = v229[3];
              v231 = v229[1];
              v233 = v229[12];
              v232 = v229[13];
              v235 = v229[10];
              v234 = v229[11];
              v237 = v229[22];
              v236 = v229[23];
              v239 = v229[20];
              v238 = v229[21];
              v241 = v229[42];
              v240 = v229[43];
              v243 = v229[40];
              v242 = v229[41];
              v245 = v229[62];
              v244 = v229[63];
              v247 = v229[60];
              v246 = v229[61];
              v880 = vzip1q_s64(*v229, v235);
              v888 = vzip2q_s64(*v229, v235);
              v248 = vzip1q_s64(v239, v229[30]);
              v239.i64[0] = vdupq_laneq_s64(v239, 1).u64[0];
              v239.i64[1] = v229[30].i64[1];
              v249.i64[0] = vdupq_laneq_s64(v243, 1).u64[0];
              v249.i64[1] = v229[50].i64[1];
              v250 = vzip1q_s64(v247, v229[70]);
              v247.i64[0] = vdupq_laneq_s64(v247, 1).u64[0];
              v247.i64[1] = v229[70].i64[1];
              v251.i64[0] = vdupq_laneq_s64(v238, 1).u64[0];
              v251.i64[1] = v229[31].i64[1];
              v252 = vzip1q_s64(v238, v229[31]);
              v253 = vzip1q_s64(v242, v229[51]);
              v242.i64[0] = vdupq_laneq_s64(v242, 1).u64[0];
              v242.i64[1] = v229[51].i64[1];
              v254 = vzip1q_s64(v246, v229[71]);
              v246.i64[0] = vdupq_laneq_s64(v246, 1).u64[0];
              v246.i64[1] = v229[71].i64[1];
              v255 = vzip1q_s64(v231, v234);
              v256 = vzip2q_s64(v231, v234);
              v257 = vzip1q_s64(v237, v229[32]);
              v237.i64[0] = vdupq_laneq_s64(v237, 1).u64[0];
              v237.i64[1] = v229[32].i64[1];
              v258 = vzip1q_s64(v241, v229[52]);
              v241.i64[0] = vdupq_laneq_s64(v241, 1).u64[0];
              v241.i64[1] = v229[52].i64[1];
              v259 = vzip1q_s64(v230, v233);
              v260 = vzip2q_s64(v230, v233);
              v261 = vzip1q_s64(v245, v229[72]);
              v245.i64[0] = vdupq_laneq_s64(v245, 1).u64[0];
              v245.i64[1] = v229[72].i64[1];
              v262 = vzip1q_s64(v236, v229[33]);
              v236.i64[0] = vdupq_laneq_s64(v236, 1).u64[0];
              v236.i64[1] = v229[33].i64[1];
              v263 = vzip1q_s64(v873, v232);
              v264 = vzip2q_s64(v873, v232);
              v265 = vzip1q_s64(v240, v229[53]);
              v240.i64[0] = vdupq_laneq_s64(v240, 1).u64[0];
              v240.i64[1] = v229[53].i64[1];
              v266 = vzip1q_s64(v244, v229[73]);
              v244.i64[0] = vdupq_laneq_s64(v244, 1).u64[0];
              v244.i64[1] = v229[73].i64[1];
              v267 = (int64x2_t *)(v228 - 105);
              v267[2] = vzip1q_s64(v243, v229[50]);
              v267[3] = v250;
              v267[1] = v248;
              *v267 = v880;
              v268 = (int64x2_t *)(v228 - 90);
              v268[2] = v249;
              v268[3] = v247;
              *v268 = v888;
              v268[1] = v239;
              v269 = (int64x2_t *)(v228 - 75);
              v269[2] = v253;
              v269[3] = v254;
              *v269 = v255;
              v269[1] = v252;
              v270 = (int64x2_t *)(v228 - 60);
              v270[2] = v242;
              v270[3] = v246;
              *v270 = v256;
              v270[1] = v251;
              v271 = (int64x2_t *)(v228 - 45);
              v271[2] = v258;
              v271[3] = v261;
              *v271 = v259;
              v271[1] = v257;
              v272 = (int64x2_t *)(v228 - 30);
              v272[2] = v241;
              v272[3] = v245;
              *v272 = v260;
              v272[1] = v237;
              *(v228 - 13) = v265;
              *(v228 - 12) = v266;
              *(v228 - 15) = v263;
              *(v228 - 14) = v262;
              v228[2] = v240;
              v228[3] = v244;
              *v228 = v264;
              v228[1] = v236;
              v228 += 4;
              v227 += 8;
              v229 += 80;
            }
            while (v227 < 0xF);
            v273 = &xmmword_21039EB20[v222 / 2];
            v274 = (int64x2_t)v273[243];
            v275 = (int64x2_t)v273[242];
            v222 += 8;
            v276 = (int64x2_t)v273[241];
            v277 = (int64x2_t)v273[240];
            v278 = (int64x2_t *)((char *)&unk_254A62328 + 8 * v226);
            v279 = (int64x2_t)v273[253];
            v280 = (int64x2_t)v273[252];
            v281 = (int64x2_t)v273[251];
            v282 = (int64x2_t)v273[250];
            v283 = (int64x2_t)v273[263];
            v284 = (int64x2_t)v273[262];
            v285 = (int64x2_t)v273[261];
            v286 = (int64x2_t)v273[260];
            v287 = (int64x2_t)v273[273];
            v288 = (int64x2_t)v273[272];
            v289 = (int64x2_t)v273[271];
            v290 = (int64x2_t)v273[270];
            v291 = (int64x2_t)v273[283];
            v292 = (int64x2_t)v273[282];
            v293 = (int64x2_t)v273[281];
            v294 = (int64x2_t)v273[280];
            v295 = (int64x2_t)v273[293];
            v296 = (int64x2_t)v273[292];
            v297 = (int64x2_t)v273[291];
            v298 = (int64x2_t)v273[290];
            v278[13] = vzip1q_s64(v286, v290);
            v278[14] = vzip1q_s64(v294, v298);
            v278[12] = vzip1q_s64(v277, v282);
            v278[28] = vzip2q_s64(v286, v290);
            v278[29] = vzip2q_s64(v294, v298);
            v278[27] = vzip2q_s64(v277, v282);
            v278[43] = vzip1q_s64(v285, v289);
            v278[44] = vzip1q_s64(v293, v297);
            v278[42] = vzip1q_s64(v276, v281);
            v278[58] = vzip2q_s64(v285, v289);
            v278[59] = vzip2q_s64(v293, v297);
            v278[57] = vzip2q_s64(v276, v281);
            v278[74] = vzip1q_s64(v292, v296);
            v278[73] = vzip1q_s64(v284, v288);
            v278[72] = vzip1q_s64(v275, v280);
            v278[89] = vzip2q_s64(v292, v296);
            v278[88] = vzip2q_s64(v284, v288);
            v278[87] = vzip2q_s64(v275, v280);
            v278[104] = vzip1q_s64(v291, v295);
            v278[103] = vzip1q_s64(v283, v287);
            v278[102] = vzip1q_s64(v274, v279);
            v278[119] = vzip2q_s64(v291, v295);
            v225 += 4;
            v223 += 120;
            v278[118] = vzip2q_s64(v283, v287);
            v278[117] = vzip2q_s64(v274, v279);
            v28 = v224 >= 0xD;
            v224 += 8;
          }
          while (!v28);
          v299 = -8;
          v300 = &xmmword_254A63228;
          v301 = xmmword_21039EB20;
          do
          {
            v303 = (int64x2_t)v301[8];
            v302 = (int64x2_t)v301[9];
            v305 = (int64x2_t)v301[18];
            v304 = (int64x2_t)v301[19];
            v307 = (int64x2_t)v301[28];
            v306 = (int64x2_t)v301[29];
            v309 = (int64x2_t)v301[48];
            v308 = (int64x2_t)v301[49];
            v310 = (int64x2_t)v301[69];
            v311 = (int64x2_t)v301[68];
            v312 = vzip1q_s64(v303, v305);
            v313 = vzip1q_s64(v307, *((int64x2_t *)v301 + 38));
            v314 = vzip1q_s64(v309, *((int64x2_t *)v301 + 58));
            v315 = vzip1q_s64(v311, *((int64x2_t *)v301 + 78));
            v307.i64[0] = vdupq_laneq_s64(v307, 1).u64[0];
            v307.i64[1] = *((_QWORD *)v301 + 77);
            *(_QWORD *)&v316 = vdupq_laneq_s64(v309, 1).u64[0];
            *((_QWORD *)&v316 + 1) = *((_QWORD *)v301 + 117);
            v317 = vzip2q_s64(v303, v305);
            v305.i64[0] = vdupq_laneq_s64(v311, 1).u64[0];
            v305.i64[1] = *((_QWORD *)v301 + 157);
            v318 = vzip1q_s64(v302, v304);
            v319 = vzip1q_s64(v306, *((int64x2_t *)v301 + 39));
            v320 = vzip1q_s64(v308, *((int64x2_t *)v301 + 59));
            v321 = vzip1q_s64(v310, *((int64x2_t *)v301 + 79));
            v322 = vzip2q_s64(v302, v304);
            v304.i64[0] = vdupq_laneq_s64(v306, 1).u64[0];
            v304.i64[1] = *((_QWORD *)v301 + 79);
            v306.i64[0] = vdupq_laneq_s64(v308, 1).u64[0];
            v306.i64[1] = *((_QWORD *)v301 + 119);
            *(_QWORD *)&v323 = vdupq_laneq_s64(v310, 1).u64[0];
            *((_QWORD *)&v323 + 1) = *((_QWORD *)v301 + 159);
            v300[2] = (__int128)v314;
            v300[3] = (__int128)v315;
            *v300 = (__int128)v312;
            v300[1] = (__int128)v313;
            v300[17] = v316;
            v300[18] = (__int128)v305;
            v300[15] = (__int128)v317;
            v300[16] = (__int128)v307;
            v300[32] = (__int128)v320;
            v300[33] = (__int128)v321;
            v300[30] = (__int128)v318;
            v300[31] = (__int128)v319;
            v300[47] = (__int128)v306;
            v300[48] = v323;
            v299 += 8;
            v300[45] = (__int128)v322;
            v300[46] = (__int128)v304;
            v300 += 4;
            v301 += 80;
          }
          while (v299 < 0xF);
          xmmword_254A632F8 = xmmword_21039DAF0;
          unk_254A63308 = xmmword_21039DAE0;
          xmmword_254A632E8 = xmmword_21039DB00;
          xmmword_254A633E8 = xmmword_21039DB20;
          unk_254A633F8 = xmmword_21039DB10;
          xmmword_254A633D8 = xmmword_21039DB30;
          xmmword_254A634D8 = xmmword_21039DB50;
          unk_254A634E8 = xmmword_21039DB40;
          xmmword_254A634C8 = xmmword_21039DB60;
          xmmword_254A635C8 = xmmword_21039DB80;
          unk_254A635D8 = xmmword_21039DB70;
          xmmword_254A635B8 = xmmword_21039DB90;
          __cxa_guard_release(&qword_254A680E8);
        }
        memcpy(v897, &unk_254A62328, sizeof(v897));
        v72 = atomic_load((unsigned __int8 *)&qword_254A680E8);
        if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A680E8))
        {
          v324 = 0;
          v325 = &xmmword_254A629B8;
          v326 = 8;
          v327 = xmmword_21039EB20;
          do
          {
            v328 = 30 * v324;
            v329 = -8;
            v330 = v325;
            v331 = (int64x2_t *)v327;
            do
            {
              v332 = v331[2];
              v874 = v331[3];
              v333 = v331[1];
              v335 = v331[12];
              v334 = v331[13];
              v337 = v331[10];
              v336 = v331[11];
              v339 = v331[22];
              v338 = v331[23];
              v341 = v331[20];
              v340 = v331[21];
              v343 = v331[42];
              v342 = v331[43];
              v345 = v331[40];
              v344 = v331[41];
              v347 = v331[62];
              v346 = v331[63];
              v349 = v331[60];
              v348 = v331[61];
              v881 = vzip1q_s64(*v331, v337);
              v889 = vzip2q_s64(*v331, v337);
              v350 = vzip1q_s64(v341, v331[30]);
              v341.i64[0] = vdupq_laneq_s64(v341, 1).u64[0];
              v341.i64[1] = v331[30].i64[1];
              v351.i64[0] = vdupq_laneq_s64(v345, 1).u64[0];
              v351.i64[1] = v331[50].i64[1];
              v352 = vzip1q_s64(v349, v331[70]);
              v349.i64[0] = vdupq_laneq_s64(v349, 1).u64[0];
              v349.i64[1] = v331[70].i64[1];
              v353.i64[0] = vdupq_laneq_s64(v340, 1).u64[0];
              v353.i64[1] = v331[31].i64[1];
              v354 = vzip1q_s64(v340, v331[31]);
              v355 = vzip1q_s64(v344, v331[51]);
              v344.i64[0] = vdupq_laneq_s64(v344, 1).u64[0];
              v344.i64[1] = v331[51].i64[1];
              v356 = vzip1q_s64(v348, v331[71]);
              v348.i64[0] = vdupq_laneq_s64(v348, 1).u64[0];
              v348.i64[1] = v331[71].i64[1];
              v357 = vzip1q_s64(v333, v336);
              v358 = vzip2q_s64(v333, v336);
              v359 = vzip1q_s64(v339, v331[32]);
              v339.i64[0] = vdupq_laneq_s64(v339, 1).u64[0];
              v339.i64[1] = v331[32].i64[1];
              v360 = vzip1q_s64(v343, v331[52]);
              v343.i64[0] = vdupq_laneq_s64(v343, 1).u64[0];
              v343.i64[1] = v331[52].i64[1];
              v361 = vzip1q_s64(v332, v335);
              v362 = vzip2q_s64(v332, v335);
              v363 = vzip1q_s64(v347, v331[72]);
              v347.i64[0] = vdupq_laneq_s64(v347, 1).u64[0];
              v347.i64[1] = v331[72].i64[1];
              v364 = vzip1q_s64(v338, v331[33]);
              v338.i64[0] = vdupq_laneq_s64(v338, 1).u64[0];
              v338.i64[1] = v331[33].i64[1];
              v365 = vzip1q_s64(v874, v334);
              v366 = vzip2q_s64(v874, v334);
              v367 = vzip1q_s64(v342, v331[53]);
              v342.i64[0] = vdupq_laneq_s64(v342, 1).u64[0];
              v342.i64[1] = v331[53].i64[1];
              v368 = vzip1q_s64(v346, v331[73]);
              v346.i64[0] = vdupq_laneq_s64(v346, 1).u64[0];
              v346.i64[1] = v331[73].i64[1];
              v369 = (int64x2_t *)(v330 - 105);
              v369[2] = vzip1q_s64(v345, v331[50]);
              v369[3] = v352;
              v369[1] = v350;
              *v369 = v881;
              v370 = (int64x2_t *)(v330 - 90);
              v370[2] = v351;
              v370[3] = v349;
              *v370 = v889;
              v370[1] = v341;
              v371 = (int64x2_t *)(v330 - 75);
              v371[2] = v355;
              v371[3] = v356;
              *v371 = v357;
              v371[1] = v354;
              v372 = (int64x2_t *)(v330 - 60);
              v372[2] = v344;
              v372[3] = v348;
              *v372 = v358;
              v372[1] = v353;
              v373 = (int64x2_t *)(v330 - 45);
              v373[2] = v360;
              v373[3] = v363;
              *v373 = v361;
              v373[1] = v359;
              v374 = (int64x2_t *)(v330 - 30);
              v374[2] = v343;
              v374[3] = v347;
              *v374 = v362;
              v374[1] = v339;
              *(v330 - 13) = v367;
              *(v330 - 12) = v368;
              *(v330 - 15) = v365;
              *(v330 - 14) = v364;
              v330[2] = v342;
              v330[3] = v346;
              *v330 = v366;
              v330[1] = v338;
              v330 += 4;
              v329 += 8;
              v331 += 80;
            }
            while (v329 < 0xF);
            v375 = &xmmword_21039EB20[v324 / 2];
            v376 = (int64x2_t)v375[243];
            v377 = (int64x2_t)v375[242];
            v324 += 8;
            v378 = (int64x2_t)v375[241];
            v379 = (int64x2_t)v375[240];
            v380 = (int64x2_t *)((char *)&unk_254A62328 + 8 * v328);
            v381 = (int64x2_t)v375[253];
            v382 = (int64x2_t)v375[252];
            v383 = (int64x2_t)v375[251];
            v384 = (int64x2_t)v375[250];
            v385 = (int64x2_t)v375[263];
            v386 = (int64x2_t)v375[262];
            v387 = (int64x2_t)v375[261];
            v388 = (int64x2_t)v375[260];
            v389 = (int64x2_t)v375[273];
            v390 = (int64x2_t)v375[272];
            v391 = (int64x2_t)v375[271];
            v392 = (int64x2_t)v375[270];
            v393 = (int64x2_t)v375[283];
            v394 = (int64x2_t)v375[282];
            v395 = (int64x2_t)v375[281];
            v396 = (int64x2_t)v375[280];
            v397 = (int64x2_t)v375[293];
            v398 = (int64x2_t)v375[292];
            v399 = (int64x2_t)v375[291];
            v400 = (int64x2_t)v375[290];
            v380[13] = vzip1q_s64(v388, v392);
            v380[14] = vzip1q_s64(v396, v400);
            v380[12] = vzip1q_s64(v379, v384);
            v380[28] = vzip2q_s64(v388, v392);
            v380[29] = vzip2q_s64(v396, v400);
            v380[27] = vzip2q_s64(v379, v384);
            v380[43] = vzip1q_s64(v387, v391);
            v380[44] = vzip1q_s64(v395, v399);
            v380[42] = vzip1q_s64(v378, v383);
            v380[58] = vzip2q_s64(v387, v391);
            v380[59] = vzip2q_s64(v395, v399);
            v380[57] = vzip2q_s64(v378, v383);
            v380[74] = vzip1q_s64(v394, v398);
            v380[73] = vzip1q_s64(v386, v390);
            v380[72] = vzip1q_s64(v377, v382);
            v380[89] = vzip2q_s64(v394, v398);
            v380[88] = vzip2q_s64(v386, v390);
            v380[87] = vzip2q_s64(v377, v382);
            v380[104] = vzip1q_s64(v393, v397);
            v380[103] = vzip1q_s64(v385, v389);
            v380[102] = vzip1q_s64(v376, v381);
            v380[119] = vzip2q_s64(v393, v397);
            v327 += 4;
            v325 += 120;
            v380[118] = vzip2q_s64(v385, v389);
            v380[117] = vzip2q_s64(v376, v381);
            v28 = v326 >= 0xD;
            v326 += 8;
          }
          while (!v28);
          v401 = -8;
          v402 = &xmmword_254A63228;
          v403 = xmmword_21039EB20;
          do
          {
            v405 = (int64x2_t)v403[8];
            v404 = (int64x2_t)v403[9];
            v407 = (int64x2_t)v403[18];
            v406 = (int64x2_t)v403[19];
            v409 = (int64x2_t)v403[28];
            v408 = (int64x2_t)v403[29];
            v411 = (int64x2_t)v403[48];
            v410 = (int64x2_t)v403[49];
            v412 = (int64x2_t)v403[69];
            v413 = (int64x2_t)v403[68];
            v414 = vzip1q_s64(v405, v407);
            v415 = vzip1q_s64(v409, *((int64x2_t *)v403 + 38));
            v416 = vzip1q_s64(v411, *((int64x2_t *)v403 + 58));
            v417 = vzip1q_s64(v413, *((int64x2_t *)v403 + 78));
            v409.i64[0] = vdupq_laneq_s64(v409, 1).u64[0];
            v409.i64[1] = *((_QWORD *)v403 + 77);
            *(_QWORD *)&v418 = vdupq_laneq_s64(v411, 1).u64[0];
            *((_QWORD *)&v418 + 1) = *((_QWORD *)v403 + 117);
            v419 = vzip2q_s64(v405, v407);
            v407.i64[0] = vdupq_laneq_s64(v413, 1).u64[0];
            v407.i64[1] = *((_QWORD *)v403 + 157);
            v420 = vzip1q_s64(v404, v406);
            v421 = vzip1q_s64(v408, *((int64x2_t *)v403 + 39));
            v422 = vzip1q_s64(v410, *((int64x2_t *)v403 + 59));
            v423 = vzip1q_s64(v412, *((int64x2_t *)v403 + 79));
            v424 = vzip2q_s64(v404, v406);
            v406.i64[0] = vdupq_laneq_s64(v408, 1).u64[0];
            v406.i64[1] = *((_QWORD *)v403 + 79);
            v408.i64[0] = vdupq_laneq_s64(v410, 1).u64[0];
            v408.i64[1] = *((_QWORD *)v403 + 119);
            *(_QWORD *)&v425 = vdupq_laneq_s64(v412, 1).u64[0];
            *((_QWORD *)&v425 + 1) = *((_QWORD *)v403 + 159);
            v402[2] = (__int128)v416;
            v402[3] = (__int128)v417;
            *v402 = (__int128)v414;
            v402[1] = (__int128)v415;
            v402[17] = v418;
            v402[18] = (__int128)v407;
            v402[15] = (__int128)v419;
            v402[16] = (__int128)v409;
            v402[32] = (__int128)v422;
            v402[33] = (__int128)v423;
            v402[30] = (__int128)v420;
            v402[31] = (__int128)v421;
            v402[47] = (__int128)v408;
            v402[48] = v425;
            v401 += 8;
            v402[45] = (__int128)v424;
            v402[46] = (__int128)v406;
            v402 += 4;
            v403 += 80;
          }
          while (v401 < 0xF);
          xmmword_254A632F8 = xmmword_21039DAF0;
          unk_254A63308 = xmmword_21039DAE0;
          xmmword_254A632E8 = xmmword_21039DB00;
          xmmword_254A633E8 = xmmword_21039DB20;
          unk_254A633F8 = xmmword_21039DB10;
          xmmword_254A633D8 = xmmword_21039DB30;
          xmmword_254A634D8 = xmmword_21039DB50;
          unk_254A634E8 = xmmword_21039DB40;
          xmmword_254A634C8 = xmmword_21039DB60;
          xmmword_254A635C8 = xmmword_21039DB80;
          unk_254A635D8 = xmmword_21039DB70;
          xmmword_254A635B8 = xmmword_21039DB90;
          __cxa_guard_release(&qword_254A680E8);
        }
        v73 = (uint64_t *)(v4 + 104);
        memcpy(v896, &unk_254A62328, sizeof(v896));
        v74 = atomic_load((unsigned __int8 *)&qword_254A680F0);
        if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_254A680F0))
        {
          v426 = 0;
          v427 = &xmmword_254A63C78;
          v428 = 8;
          v429 = xmmword_21039FDE0;
          do
          {
            v430 = 30 * v426;
            v431 = -8;
            v432 = v427;
            v433 = (int64x2_t *)v429;
            do
            {
              v434 = v433[2];
              v875 = v433[3];
              v435 = v433[1];
              v437 = v433[12];
              v436 = v433[13];
              v439 = v433[10];
              v438 = v433[11];
              v441 = v433[22];
              v440 = v433[23];
              v443 = v433[20];
              v442 = v433[21];
              v445 = v433[42];
              v444 = v433[43];
              v447 = v433[40];
              v446 = v433[41];
              v449 = v433[62];
              v448 = v433[63];
              v451 = v433[60];
              v450 = v433[61];
              v882 = vzip1q_s64(*v433, v439);
              v890 = vzip2q_s64(*v433, v439);
              v452 = vzip1q_s64(v443, v433[30]);
              v443.i64[0] = vdupq_laneq_s64(v443, 1).u64[0];
              v443.i64[1] = v433[30].i64[1];
              v453.i64[0] = vdupq_laneq_s64(v447, 1).u64[0];
              v453.i64[1] = v433[50].i64[1];
              v454 = vzip1q_s64(v451, v433[70]);
              v451.i64[0] = vdupq_laneq_s64(v451, 1).u64[0];
              v451.i64[1] = v433[70].i64[1];
              v455.i64[0] = vdupq_laneq_s64(v442, 1).u64[0];
              v455.i64[1] = v433[31].i64[1];
              v456 = vzip1q_s64(v442, v433[31]);
              v457 = vzip1q_s64(v446, v433[51]);
              v446.i64[0] = vdupq_laneq_s64(v446, 1).u64[0];
              v446.i64[1] = v433[51].i64[1];
              v458 = vzip1q_s64(v450, v433[71]);
              v450.i64[0] = vdupq_laneq_s64(v450, 1).u64[0];
              v450.i64[1] = v433[71].i64[1];
              v459 = vzip1q_s64(v435, v438);
              v460 = vzip2q_s64(v435, v438);
              v461 = vzip1q_s64(v441, v433[32]);
              v441.i64[0] = vdupq_laneq_s64(v441, 1).u64[0];
              v441.i64[1] = v433[32].i64[1];
              v462 = vzip1q_s64(v445, v433[52]);
              v445.i64[0] = vdupq_laneq_s64(v445, 1).u64[0];
              v445.i64[1] = v433[52].i64[1];
              v463 = vzip1q_s64(v434, v437);
              v464 = vzip2q_s64(v434, v437);
              v465 = vzip1q_s64(v449, v433[72]);
              v449.i64[0] = vdupq_laneq_s64(v449, 1).u64[0];
              v449.i64[1] = v433[72].i64[1];
              v466 = vzip1q_s64(v440, v433[33]);
              v440.i64[0] = vdupq_laneq_s64(v440, 1).u64[0];
              v440.i64[1] = v433[33].i64[1];
              v467 = vzip1q_s64(v875, v436);
              v468 = vzip2q_s64(v875, v436);
              v469 = vzip1q_s64(v444, v433[53]);
              v444.i64[0] = vdupq_laneq_s64(v444, 1).u64[0];
              v444.i64[1] = v433[53].i64[1];
              v470 = vzip1q_s64(v448, v433[73]);
              v448.i64[0] = vdupq_laneq_s64(v448, 1).u64[0];
              v448.i64[1] = v433[73].i64[1];
              v471 = (int64x2_t *)(v432 - 105);
              v471[2] = vzip1q_s64(v447, v433[50]);
              v471[3] = v454;
              v471[1] = v452;
              *v471 = v882;
              v472 = (int64x2_t *)(v432 - 90);
              v472[2] = v453;
              v472[3] = v451;
              *v472 = v890;
              v472[1] = v443;
              v473 = (int64x2_t *)(v432 - 75);
              v473[2] = v457;
              v473[3] = v458;
              *v473 = v459;
              v473[1] = v456;
              v474 = (int64x2_t *)(v432 - 60);
              v474[2] = v446;
              v474[3] = v450;
              *v474 = v460;
              v474[1] = v455;
              v475 = (int64x2_t *)(v432 - 45);
              v475[2] = v462;
              v475[3] = v465;
              *v475 = v463;
              v475[1] = v461;
              v476 = (int64x2_t *)(v432 - 30);
              v476[2] = v445;
              v476[3] = v449;
              *v476 = v464;
              v476[1] = v441;
              *(v432 - 13) = v469;
              *(v432 - 12) = v470;
              *(v432 - 15) = v467;
              *(v432 - 14) = v466;
              v432[2] = v444;
              v432[3] = v448;
              *v432 = v468;
              v432[1] = v440;
              v432 += 4;
              v431 += 8;
              v433 += 80;
            }
            while (v431 < 0xF);
            v477 = &xmmword_21039FDE0[v426 / 2];
            v478 = (int64x2_t)v477[243];
            v479 = (int64x2_t)v477[242];
            v426 += 8;
            v480 = (int64x2_t)v477[241];
            v481 = (int64x2_t)v477[240];
            v482 = (int64x2_t *)((char *)&unk_254A635E8 + 8 * v430);
            v483 = (int64x2_t)v477[253];
            v484 = (int64x2_t)v477[252];
            v485 = (int64x2_t)v477[251];
            v486 = (int64x2_t)v477[250];
            v487 = (int64x2_t)v477[263];
            v488 = (int64x2_t)v477[262];
            v489 = (int64x2_t)v477[261];
            v490 = (int64x2_t)v477[260];
            v491 = (int64x2_t)v477[273];
            v492 = (int64x2_t)v477[272];
            v493 = (int64x2_t)v477[271];
            v494 = (int64x2_t)v477[270];
            v495 = (int64x2_t)v477[283];
            v496 = (int64x2_t)v477[282];
            v497 = (int64x2_t)v477[281];
            v498 = (int64x2_t)v477[280];
            v499 = (int64x2_t)v477[293];
            v500 = (int64x2_t)v477[292];
            v501 = (int64x2_t)v477[291];
            v502 = (int64x2_t)v477[290];
            v482[13] = vzip1q_s64(v490, v494);
            v482[14] = vzip1q_s64(v498, v502);
            v482[12] = vzip1q_s64(v481, v486);
            v482[28] = vzip2q_s64(v490, v494);
            v482[29] = vzip2q_s64(v498, v502);
            v482[27] = vzip2q_s64(v481, v486);
            v482[43] = vzip1q_s64(v489, v493);
            v482[44] = vzip1q_s64(v497, v501);
            v482[42] = vzip1q_s64(v480, v485);
            v482[58] = vzip2q_s64(v489, v493);
            v482[59] = vzip2q_s64(v497, v501);
            v482[57] = vzip2q_s64(v480, v485);
            v482[74] = vzip1q_s64(v496, v500);
            v482[73] = vzip1q_s64(v488, v492);
            v482[72] = vzip1q_s64(v479, v484);
            v482[89] = vzip2q_s64(v496, v500);
            v482[88] = vzip2q_s64(v488, v492);
            v482[87] = vzip2q_s64(v479, v484);
            v482[104] = vzip1q_s64(v495, v499);
            v482[103] = vzip1q_s64(v487, v491);
            v482[102] = vzip1q_s64(v478, v483);
            v482[119] = vzip2q_s64(v495, v499);
            v429 += 4;
            v427 += 120;
            v482[118] = vzip2q_s64(v487, v491);
            v482[117] = vzip2q_s64(v478, v483);
            v28 = v428 >= 0xD;
            v428 += 8;
          }
          while (!v28);
          v503 = -8;
          v504 = &xmmword_254A644E8;
          v505 = xmmword_21039FDE0;
          do
          {
            v507 = (int64x2_t)v505[8];
            v506 = (int64x2_t)v505[9];
            v509 = (int64x2_t)v505[18];
            v508 = (int64x2_t)v505[19];
            v511 = (int64x2_t)v505[28];
            v510 = (int64x2_t)v505[29];
            v513 = (int64x2_t)v505[48];
            v512 = (int64x2_t)v505[49];
            v514 = (int64x2_t)v505[69];
            v515 = (int64x2_t)v505[68];
            v516 = vzip1q_s64(v507, v509);
            v517 = vzip1q_s64(v511, *((int64x2_t *)v505 + 38));
            v518 = vzip1q_s64(v513, *((int64x2_t *)v505 + 58));
            v519 = vzip1q_s64(v515, *((int64x2_t *)v505 + 78));
            v511.i64[0] = vdupq_laneq_s64(v511, 1).u64[0];
            v511.i64[1] = *((_QWORD *)v505 + 77);
            *(_QWORD *)&v520 = vdupq_laneq_s64(v513, 1).u64[0];
            *((_QWORD *)&v520 + 1) = *((_QWORD *)v505 + 117);
            v521 = vzip2q_s64(v507, v509);
            v509.i64[0] = vdupq_laneq_s64(v515, 1).u64[0];
            v509.i64[1] = *((_QWORD *)v505 + 157);
            v522 = vzip1q_s64(v506, v508);
            v523 = vzip1q_s64(v510, *((int64x2_t *)v505 + 39));
            v524 = vzip1q_s64(v512, *((int64x2_t *)v505 + 59));
            v525 = vzip1q_s64(v514, *((int64x2_t *)v505 + 79));
            v526 = vzip2q_s64(v506, v508);
            v508.i64[0] = vdupq_laneq_s64(v510, 1).u64[0];
            v508.i64[1] = *((_QWORD *)v505 + 79);
            v510.i64[0] = vdupq_laneq_s64(v512, 1).u64[0];
            v510.i64[1] = *((_QWORD *)v505 + 119);
            *(_QWORD *)&v527 = vdupq_laneq_s64(v514, 1).u64[0];
            *((_QWORD *)&v527 + 1) = *((_QWORD *)v505 + 159);
            v504[2] = (__int128)v518;
            v504[3] = (__int128)v519;
            *v504 = (__int128)v516;
            v504[1] = (__int128)v517;
            v504[17] = v520;
            v504[18] = (__int128)v509;
            v504[15] = (__int128)v521;
            v504[16] = (__int128)v511;
            v504[32] = (__int128)v524;
            v504[33] = (__int128)v525;
            v504[30] = (__int128)v522;
            v504[31] = (__int128)v523;
            v504[47] = (__int128)v510;
            v504[48] = v527;
            v503 += 8;
            v504[45] = (__int128)v526;
            v504[46] = (__int128)v508;
            v504 += 4;
            v505 += 80;
          }
          while (v503 < 0xF);
          xmmword_254A645B8 = xmmword_21039DA30;
          unk_254A645C8 = xmmword_21039DA20;
          xmmword_254A645A8 = xmmword_21039DA40;
          xmmword_254A646A8 = xmmword_21039DA60;
          unk_254A646B8 = xmmword_21039DA50;
          xmmword_254A64698 = xmmword_21039DA70;
          xmmword_254A64798 = xmmword_21039DA90;
          unk_254A647A8 = xmmword_21039DA80;
          xmmword_254A64788 = xmmword_21039DAA0;
          xmmword_254A64888 = xmmword_21039DAC0;
          unk_254A64898 = xmmword_21039DAB0;
          xmmword_254A64878 = xmmword_21039DAD0;
          __cxa_guard_release(&qword_254A680F0);
        }
        memcpy(v895, &unk_254A635E8, sizeof(v895));
        v75 = atomic_load((unsigned __int8 *)&qword_254A680F8);
        if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A680F8))
        {
          v528 = 0;
          v529 = &xmmword_254A64F38;
          v530 = 8;
          v531 = xmmword_2103A10A0;
          do
          {
            v532 = 30 * v528;
            v533 = -8;
            v534 = v529;
            v535 = (int64x2_t *)v531;
            do
            {
              v536 = v535[2];
              v876 = v535[3];
              v537 = v535[1];
              v539 = v535[12];
              v538 = v535[13];
              v541 = v535[10];
              v540 = v535[11];
              v543 = v535[22];
              v542 = v535[23];
              v545 = v535[20];
              v544 = v535[21];
              v547 = v535[42];
              v546 = v535[43];
              v549 = v535[40];
              v548 = v535[41];
              v551 = v535[62];
              v550 = v535[63];
              v553 = v535[60];
              v552 = v535[61];
              v883 = vzip1q_s64(*v535, v541);
              v891 = vzip2q_s64(*v535, v541);
              v554 = vzip1q_s64(v545, v535[30]);
              v545.i64[0] = vdupq_laneq_s64(v545, 1).u64[0];
              v545.i64[1] = v535[30].i64[1];
              v555.i64[0] = vdupq_laneq_s64(v549, 1).u64[0];
              v555.i64[1] = v535[50].i64[1];
              v556 = vzip1q_s64(v553, v535[70]);
              v553.i64[0] = vdupq_laneq_s64(v553, 1).u64[0];
              v553.i64[1] = v535[70].i64[1];
              v557.i64[0] = vdupq_laneq_s64(v544, 1).u64[0];
              v557.i64[1] = v535[31].i64[1];
              v558 = vzip1q_s64(v544, v535[31]);
              v559 = vzip1q_s64(v548, v535[51]);
              v548.i64[0] = vdupq_laneq_s64(v548, 1).u64[0];
              v548.i64[1] = v535[51].i64[1];
              v560 = vzip1q_s64(v552, v535[71]);
              v552.i64[0] = vdupq_laneq_s64(v552, 1).u64[0];
              v552.i64[1] = v535[71].i64[1];
              v561 = vzip1q_s64(v537, v540);
              v562 = vzip2q_s64(v537, v540);
              v563 = vzip1q_s64(v543, v535[32]);
              v543.i64[0] = vdupq_laneq_s64(v543, 1).u64[0];
              v543.i64[1] = v535[32].i64[1];
              v564 = vzip1q_s64(v547, v535[52]);
              v547.i64[0] = vdupq_laneq_s64(v547, 1).u64[0];
              v547.i64[1] = v535[52].i64[1];
              v565 = vzip1q_s64(v536, v539);
              v566 = vzip2q_s64(v536, v539);
              v567 = vzip1q_s64(v551, v535[72]);
              v551.i64[0] = vdupq_laneq_s64(v551, 1).u64[0];
              v551.i64[1] = v535[72].i64[1];
              v568 = vzip1q_s64(v542, v535[33]);
              v542.i64[0] = vdupq_laneq_s64(v542, 1).u64[0];
              v542.i64[1] = v535[33].i64[1];
              v569 = vzip1q_s64(v876, v538);
              v570 = vzip2q_s64(v876, v538);
              v571 = vzip1q_s64(v546, v535[53]);
              v546.i64[0] = vdupq_laneq_s64(v546, 1).u64[0];
              v546.i64[1] = v535[53].i64[1];
              v572 = vzip1q_s64(v550, v535[73]);
              v550.i64[0] = vdupq_laneq_s64(v550, 1).u64[0];
              v550.i64[1] = v535[73].i64[1];
              v573 = (int64x2_t *)(v534 - 105);
              v573[2] = vzip1q_s64(v549, v535[50]);
              v573[3] = v556;
              v573[1] = v554;
              *v573 = v883;
              v574 = (int64x2_t *)(v534 - 90);
              v574[2] = v555;
              v574[3] = v553;
              *v574 = v891;
              v574[1] = v545;
              v575 = (int64x2_t *)(v534 - 75);
              v575[2] = v559;
              v575[3] = v560;
              *v575 = v561;
              v575[1] = v558;
              v576 = (int64x2_t *)(v534 - 60);
              v576[2] = v548;
              v576[3] = v552;
              *v576 = v562;
              v576[1] = v557;
              v577 = (int64x2_t *)(v534 - 45);
              v577[2] = v564;
              v577[3] = v567;
              *v577 = v565;
              v577[1] = v563;
              v578 = (int64x2_t *)(v534 - 30);
              v578[2] = v547;
              v578[3] = v551;
              *v578 = v566;
              v578[1] = v543;
              *(v534 - 13) = v571;
              *(v534 - 12) = v572;
              *(v534 - 15) = v569;
              *(v534 - 14) = v568;
              v534[2] = v546;
              v534[3] = v550;
              *v534 = v570;
              v534[1] = v542;
              v534 += 4;
              v533 += 8;
              v535 += 80;
            }
            while (v533 < 0xF);
            v579 = &xmmword_2103A10A0[v528 / 2];
            v580 = (int64x2_t)v579[243];
            v581 = (int64x2_t)v579[242];
            v528 += 8;
            v582 = (int64x2_t)v579[241];
            v583 = (int64x2_t)v579[240];
            v584 = (int64x2_t *)((char *)&unk_254A648A8 + 8 * v532);
            v585 = (int64x2_t)v579[253];
            v586 = (int64x2_t)v579[252];
            v587 = (int64x2_t)v579[251];
            v588 = (int64x2_t)v579[250];
            v589 = (int64x2_t)v579[263];
            v590 = (int64x2_t)v579[262];
            v591 = (int64x2_t)v579[261];
            v592 = (int64x2_t)v579[260];
            v593 = (int64x2_t)v579[273];
            v594 = (int64x2_t)v579[272];
            v595 = (int64x2_t)v579[271];
            v596 = (int64x2_t)v579[270];
            v597 = (int64x2_t)v579[283];
            v598 = (int64x2_t)v579[282];
            v599 = (int64x2_t)v579[281];
            v600 = (int64x2_t)v579[280];
            v601 = (int64x2_t)v579[293];
            v602 = (int64x2_t)v579[292];
            v603 = (int64x2_t)v579[291];
            v604 = (int64x2_t)v579[290];
            v584[13] = vzip1q_s64(v592, v596);
            v584[14] = vzip1q_s64(v600, v604);
            v584[12] = vzip1q_s64(v583, v588);
            v584[28] = vzip2q_s64(v592, v596);
            v584[29] = vzip2q_s64(v600, v604);
            v584[27] = vzip2q_s64(v583, v588);
            v584[43] = vzip1q_s64(v591, v595);
            v584[44] = vzip1q_s64(v599, v603);
            v584[42] = vzip1q_s64(v582, v587);
            v584[58] = vzip2q_s64(v591, v595);
            v584[59] = vzip2q_s64(v599, v603);
            v584[57] = vzip2q_s64(v582, v587);
            v584[74] = vzip1q_s64(v598, v602);
            v584[73] = vzip1q_s64(v590, v594);
            v584[72] = vzip1q_s64(v581, v586);
            v584[89] = vzip2q_s64(v598, v602);
            v584[88] = vzip2q_s64(v590, v594);
            v584[87] = vzip2q_s64(v581, v586);
            v584[104] = vzip1q_s64(v597, v601);
            v584[103] = vzip1q_s64(v589, v593);
            v584[102] = vzip1q_s64(v580, v585);
            v584[119] = vzip2q_s64(v597, v601);
            v531 += 4;
            v529 += 120;
            v584[118] = vzip2q_s64(v589, v593);
            v584[117] = vzip2q_s64(v580, v585);
            v28 = v530 >= 0xD;
            v530 += 8;
          }
          while (!v28);
          v605 = -8;
          v606 = &xmmword_254A657A8;
          v607 = xmmword_2103A10A0;
          do
          {
            v609 = (int64x2_t)v607[8];
            v608 = (int64x2_t)v607[9];
            v611 = (int64x2_t)v607[18];
            v610 = (int64x2_t)v607[19];
            v613 = (int64x2_t)v607[28];
            v612 = (int64x2_t)v607[29];
            v615 = (int64x2_t)v607[48];
            v614 = (int64x2_t)v607[49];
            v616 = (int64x2_t)v607[69];
            v617 = (int64x2_t)v607[68];
            v618 = vzip1q_s64(v609, v611);
            v619 = vzip1q_s64(v613, *((int64x2_t *)v607 + 38));
            v620 = vzip1q_s64(v615, *((int64x2_t *)v607 + 58));
            v621 = vzip1q_s64(v617, *((int64x2_t *)v607 + 78));
            v613.i64[0] = vdupq_laneq_s64(v613, 1).u64[0];
            v613.i64[1] = *((_QWORD *)v607 + 77);
            *(_QWORD *)&v622 = vdupq_laneq_s64(v615, 1).u64[0];
            *((_QWORD *)&v622 + 1) = *((_QWORD *)v607 + 117);
            v623 = vzip2q_s64(v609, v611);
            v611.i64[0] = vdupq_laneq_s64(v617, 1).u64[0];
            v611.i64[1] = *((_QWORD *)v607 + 157);
            v624 = vzip1q_s64(v608, v610);
            v625 = vzip1q_s64(v612, *((int64x2_t *)v607 + 39));
            v626 = vzip1q_s64(v614, *((int64x2_t *)v607 + 59));
            v627 = vzip1q_s64(v616, *((int64x2_t *)v607 + 79));
            v628 = vzip2q_s64(v608, v610);
            v610.i64[0] = vdupq_laneq_s64(v612, 1).u64[0];
            v610.i64[1] = *((_QWORD *)v607 + 79);
            v612.i64[0] = vdupq_laneq_s64(v614, 1).u64[0];
            v612.i64[1] = *((_QWORD *)v607 + 119);
            *(_QWORD *)&v629 = vdupq_laneq_s64(v616, 1).u64[0];
            *((_QWORD *)&v629 + 1) = *((_QWORD *)v607 + 159);
            v606[2] = (__int128)v620;
            v606[3] = (__int128)v621;
            *v606 = (__int128)v618;
            v606[1] = (__int128)v619;
            v606[17] = v622;
            v606[18] = (__int128)v611;
            v606[15] = (__int128)v623;
            v606[16] = (__int128)v613;
            v606[32] = (__int128)v626;
            v606[33] = (__int128)v627;
            v606[30] = (__int128)v624;
            v606[31] = (__int128)v625;
            v606[47] = (__int128)v612;
            v606[48] = v629;
            v605 += 8;
            v606[45] = (__int128)v628;
            v606[46] = (__int128)v610;
            v606 += 4;
            v607 += 80;
          }
          while (v605 < 0xF);
          xmmword_254A65878 = xmmword_21039DBB0;
          unk_254A65888 = xmmword_21039DBA0;
          xmmword_254A65868 = xmmword_21039DBC0;
          xmmword_254A65968 = xmmword_21039DBE0;
          unk_254A65978 = xmmword_21039DBD0;
          xmmword_254A65958 = xmmword_21039DBF0;
          xmmword_254A65A58 = xmmword_21039DC10;
          unk_254A65A68 = xmmword_21039DC00;
          xmmword_254A65A48 = xmmword_21039DC20;
          xmmword_254A65B48 = xmmword_21039DC40;
          unk_254A65B58 = xmmword_21039DC30;
          xmmword_254A65B38 = xmmword_21039DC50;
          __cxa_guard_release(&qword_254A680F8);
        }
        memcpy(__dst, &unk_254A648A8, sizeof(__dst));
        sub_20F197060((_QWORD *)v12, v10, v8, v6, v73, (uint64_t)v897, (uint64_t)v896, (uint64_t)v895, v2, (uint64_t)__dst);
        return;
      }
      v140 = atomic_load((unsigned __int8 *)&qword_254A680E8);
      if ((v140 & 1) == 0 && __cxa_guard_acquire(&qword_254A680E8))
      {
        sub_20F197680((uint64_t)&unk_254A62328);
        __cxa_guard_release(&qword_254A680E8);
      }
      v141 = *(_QWORD *)(v12 + 88);
      v142 = *(_QWORD *)(v12 + 96);
      v143 = &unk_254A62328;
      goto LABEL_111;
    case 5:
      if (*(_BYTE *)(v4 + 152))
      {
        v76 = (uint64_t *)(v4 + 104);
        v77 = atomic_load((unsigned __int8 *)&qword_254A68108);
        if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254A68108))
        {
          v630 = 0;
          v631 = &xmmword_254A674B8;
          v632 = 8;
          v633 = xmmword_2103A3620;
          do
          {
            v634 = 30 * v630;
            v635 = -8;
            v636 = v631;
            v637 = (int64x2_t *)v633;
            do
            {
              v638 = v637[2];
              v877 = v637[3];
              v639 = v637[1];
              v641 = v637[12];
              v640 = v637[13];
              v643 = v637[10];
              v642 = v637[11];
              v645 = v637[22];
              v644 = v637[23];
              v647 = v637[20];
              v646 = v637[21];
              v649 = v637[42];
              v648 = v637[43];
              v651 = v637[40];
              v650 = v637[41];
              v653 = v637[62];
              v652 = v637[63];
              v655 = v637[60];
              v654 = v637[61];
              v884 = vzip1q_s64(*v637, v643);
              v892 = vzip2q_s64(*v637, v643);
              v656 = vzip1q_s64(v647, v637[30]);
              v647.i64[0] = vdupq_laneq_s64(v647, 1).u64[0];
              v647.i64[1] = v637[30].i64[1];
              v657.i64[0] = vdupq_laneq_s64(v651, 1).u64[0];
              v657.i64[1] = v637[50].i64[1];
              v658 = vzip1q_s64(v655, v637[70]);
              v655.i64[0] = vdupq_laneq_s64(v655, 1).u64[0];
              v655.i64[1] = v637[70].i64[1];
              v659.i64[0] = vdupq_laneq_s64(v646, 1).u64[0];
              v659.i64[1] = v637[31].i64[1];
              v660 = vzip1q_s64(v646, v637[31]);
              v661 = vzip1q_s64(v650, v637[51]);
              v650.i64[0] = vdupq_laneq_s64(v650, 1).u64[0];
              v650.i64[1] = v637[51].i64[1];
              v662 = vzip1q_s64(v654, v637[71]);
              v654.i64[0] = vdupq_laneq_s64(v654, 1).u64[0];
              v654.i64[1] = v637[71].i64[1];
              v663 = vzip1q_s64(v639, v642);
              v664 = vzip2q_s64(v639, v642);
              v665 = vzip1q_s64(v645, v637[32]);
              v645.i64[0] = vdupq_laneq_s64(v645, 1).u64[0];
              v645.i64[1] = v637[32].i64[1];
              v666 = vzip1q_s64(v649, v637[52]);
              v649.i64[0] = vdupq_laneq_s64(v649, 1).u64[0];
              v649.i64[1] = v637[52].i64[1];
              v667 = vzip1q_s64(v638, v641);
              v668 = vzip2q_s64(v638, v641);
              v669 = vzip1q_s64(v653, v637[72]);
              v653.i64[0] = vdupq_laneq_s64(v653, 1).u64[0];
              v653.i64[1] = v637[72].i64[1];
              v670 = vzip1q_s64(v644, v637[33]);
              v644.i64[0] = vdupq_laneq_s64(v644, 1).u64[0];
              v644.i64[1] = v637[33].i64[1];
              v671 = vzip1q_s64(v877, v640);
              v672 = vzip2q_s64(v877, v640);
              v673 = vzip1q_s64(v648, v637[53]);
              v648.i64[0] = vdupq_laneq_s64(v648, 1).u64[0];
              v648.i64[1] = v637[53].i64[1];
              v674 = vzip1q_s64(v652, v637[73]);
              v652.i64[0] = vdupq_laneq_s64(v652, 1).u64[0];
              v652.i64[1] = v637[73].i64[1];
              v675 = (int64x2_t *)(v636 - 105);
              v675[2] = vzip1q_s64(v651, v637[50]);
              v675[3] = v658;
              v675[1] = v656;
              *v675 = v884;
              v676 = (int64x2_t *)(v636 - 90);
              v676[2] = v657;
              v676[3] = v655;
              *v676 = v892;
              v676[1] = v647;
              v677 = (int64x2_t *)(v636 - 75);
              v677[2] = v661;
              v677[3] = v662;
              *v677 = v663;
              v677[1] = v660;
              v678 = (int64x2_t *)(v636 - 60);
              v678[2] = v650;
              v678[3] = v654;
              *v678 = v664;
              v678[1] = v659;
              v679 = (int64x2_t *)(v636 - 45);
              v679[2] = v666;
              v679[3] = v669;
              *v679 = v667;
              v679[1] = v665;
              v680 = (int64x2_t *)(v636 - 30);
              v680[2] = v649;
              v680[3] = v653;
              *v680 = v668;
              v680[1] = v645;
              *(v636 - 13) = v673;
              *(v636 - 12) = v674;
              *(v636 - 15) = v671;
              *(v636 - 14) = v670;
              v636[2] = v648;
              v636[3] = v652;
              *v636 = v672;
              v636[1] = v644;
              v636 += 4;
              v635 += 8;
              v637 += 80;
            }
            while (v635 < 0xF);
            v681 = &xmmword_2103A3620[v630 / 2];
            v682 = (int64x2_t)v681[243];
            v683 = (int64x2_t)v681[242];
            v630 += 8;
            v684 = (int64x2_t)v681[241];
            v685 = (int64x2_t)v681[240];
            v686 = (int64x2_t *)((char *)&unk_254A66E28 + 8 * v634);
            v687 = (int64x2_t)v681[253];
            v688 = (int64x2_t)v681[252];
            v689 = (int64x2_t)v681[251];
            v690 = (int64x2_t)v681[250];
            v691 = (int64x2_t)v681[263];
            v692 = (int64x2_t)v681[262];
            v693 = (int64x2_t)v681[261];
            v694 = (int64x2_t)v681[260];
            v695 = (int64x2_t)v681[273];
            v696 = (int64x2_t)v681[272];
            v697 = (int64x2_t)v681[271];
            v698 = (int64x2_t)v681[270];
            v699 = (int64x2_t)v681[283];
            v700 = (int64x2_t)v681[282];
            v701 = (int64x2_t)v681[281];
            v702 = (int64x2_t)v681[280];
            v703 = (int64x2_t)v681[293];
            v704 = (int64x2_t)v681[292];
            v705 = (int64x2_t)v681[291];
            v706 = (int64x2_t)v681[290];
            v686[13] = vzip1q_s64(v694, v698);
            v686[14] = vzip1q_s64(v702, v706);
            v686[12] = vzip1q_s64(v685, v690);
            v686[28] = vzip2q_s64(v694, v698);
            v686[29] = vzip2q_s64(v702, v706);
            v686[27] = vzip2q_s64(v685, v690);
            v686[43] = vzip1q_s64(v693, v697);
            v686[44] = vzip1q_s64(v701, v705);
            v686[42] = vzip1q_s64(v684, v689);
            v686[58] = vzip2q_s64(v693, v697);
            v686[59] = vzip2q_s64(v701, v705);
            v686[57] = vzip2q_s64(v684, v689);
            v686[74] = vzip1q_s64(v700, v704);
            v686[73] = vzip1q_s64(v692, v696);
            v686[72] = vzip1q_s64(v683, v688);
            v686[89] = vzip2q_s64(v700, v704);
            v686[88] = vzip2q_s64(v692, v696);
            v686[87] = vzip2q_s64(v683, v688);
            v686[104] = vzip1q_s64(v699, v703);
            v686[103] = vzip1q_s64(v691, v695);
            v686[102] = vzip1q_s64(v682, v687);
            v686[119] = vzip2q_s64(v699, v703);
            v633 += 4;
            v631 += 120;
            v686[118] = vzip2q_s64(v691, v695);
            v686[117] = vzip2q_s64(v682, v687);
            v28 = v632 >= 0xD;
            v632 += 8;
          }
          while (!v28);
          v707 = -8;
          v708 = &xmmword_254A67D28;
          v709 = xmmword_2103A3620;
          do
          {
            v711 = (int64x2_t)v709[8];
            v710 = (int64x2_t)v709[9];
            v713 = (int64x2_t)v709[18];
            v712 = (int64x2_t)v709[19];
            v715 = (int64x2_t)v709[28];
            v714 = (int64x2_t)v709[29];
            v717 = (int64x2_t)v709[48];
            v716 = (int64x2_t)v709[49];
            v718 = (int64x2_t)v709[69];
            v719 = (int64x2_t)v709[68];
            v720 = vzip1q_s64(v711, v713);
            v721 = vzip1q_s64(v715, *((int64x2_t *)v709 + 38));
            v722 = vzip1q_s64(v717, *((int64x2_t *)v709 + 58));
            v723 = vzip1q_s64(v719, *((int64x2_t *)v709 + 78));
            v715.i64[0] = vdupq_laneq_s64(v715, 1).u64[0];
            v715.i64[1] = *((_QWORD *)v709 + 77);
            *(_QWORD *)&v724 = vdupq_laneq_s64(v717, 1).u64[0];
            *((_QWORD *)&v724 + 1) = *((_QWORD *)v709 + 117);
            v725 = vzip2q_s64(v711, v713);
            v713.i64[0] = vdupq_laneq_s64(v719, 1).u64[0];
            v713.i64[1] = *((_QWORD *)v709 + 157);
            v726 = vzip1q_s64(v710, v712);
            v727 = vzip1q_s64(v714, *((int64x2_t *)v709 + 39));
            v728 = vzip1q_s64(v716, *((int64x2_t *)v709 + 59));
            v729 = vzip1q_s64(v718, *((int64x2_t *)v709 + 79));
            v730 = vzip2q_s64(v710, v712);
            v712.i64[0] = vdupq_laneq_s64(v714, 1).u64[0];
            v712.i64[1] = *((_QWORD *)v709 + 79);
            v714.i64[0] = vdupq_laneq_s64(v716, 1).u64[0];
            v714.i64[1] = *((_QWORD *)v709 + 119);
            *(_QWORD *)&v731 = vdupq_laneq_s64(v718, 1).u64[0];
            *((_QWORD *)&v731 + 1) = *((_QWORD *)v709 + 159);
            v708[2] = (__int128)v722;
            v708[3] = (__int128)v723;
            *v708 = (__int128)v720;
            v708[1] = (__int128)v721;
            v708[17] = v724;
            v708[18] = (__int128)v713;
            v708[15] = (__int128)v725;
            v708[16] = (__int128)v715;
            v708[32] = (__int128)v728;
            v708[33] = (__int128)v729;
            v708[30] = (__int128)v726;
            v708[31] = (__int128)v727;
            v708[47] = (__int128)v714;
            v708[48] = v731;
            v707 += 8;
            v708[45] = (__int128)v730;
            v708[46] = (__int128)v712;
            v708 += 4;
            v709 += 80;
          }
          while (v707 < 0xF);
          xmmword_254A67DF8 = xmmword_21039D970;
          unk_254A67E08 = xmmword_21039D960;
          xmmword_254A67DE8 = xmmword_21039D980;
          xmmword_254A67EE8 = xmmword_21039D9A0;
          unk_254A67EF8 = xmmword_21039D990;
          xmmword_254A67ED8 = xmmword_21039D9B0;
          xmmword_254A67FD8 = xmmword_21039D9D0;
          unk_254A67FE8 = xmmword_21039D9C0;
          xmmword_254A67FC8 = xmmword_21039D9E0;
          xmmword_254A680C8 = xmmword_21039DA00;
          unk_254A680D8 = xmmword_21039D9F0;
          xmmword_254A680B8 = xmmword_21039DA10;
          __cxa_guard_release(&qword_254A68108);
        }
        memcpy(v897, &unk_254A66E28, sizeof(v897));
        memcpy(v896, &unk_254A66E28, sizeof(v896));
        v78 = atomic_load((unsigned __int8 *)&qword_254A680F0);
        if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A680F0))
        {
          v732 = 0;
          v733 = &xmmword_254A63C78;
          v734 = 8;
          v735 = xmmword_21039FDE0;
          do
          {
            v736 = 30 * v732;
            v737 = -8;
            v738 = v733;
            v739 = (int64x2_t *)v735;
            do
            {
              v740 = v739[2];
              v878 = v739[3];
              v741 = v739[1];
              v743 = v739[12];
              v742 = v739[13];
              v745 = v739[10];
              v744 = v739[11];
              v747 = v739[22];
              v746 = v739[23];
              v749 = v739[20];
              v748 = v739[21];
              v751 = v739[42];
              v750 = v739[43];
              v753 = v739[40];
              v752 = v739[41];
              v755 = v739[62];
              v754 = v739[63];
              v757 = v739[60];
              v756 = v739[61];
              v885 = vzip1q_s64(*v739, v745);
              v893 = vzip2q_s64(*v739, v745);
              v758 = vzip1q_s64(v749, v739[30]);
              v749.i64[0] = vdupq_laneq_s64(v749, 1).u64[0];
              v749.i64[1] = v739[30].i64[1];
              v759.i64[0] = vdupq_laneq_s64(v753, 1).u64[0];
              v759.i64[1] = v739[50].i64[1];
              v760 = vzip1q_s64(v757, v739[70]);
              v757.i64[0] = vdupq_laneq_s64(v757, 1).u64[0];
              v757.i64[1] = v739[70].i64[1];
              v761.i64[0] = vdupq_laneq_s64(v748, 1).u64[0];
              v761.i64[1] = v739[31].i64[1];
              v762 = vzip1q_s64(v748, v739[31]);
              v763 = vzip1q_s64(v752, v739[51]);
              v752.i64[0] = vdupq_laneq_s64(v752, 1).u64[0];
              v752.i64[1] = v739[51].i64[1];
              v764 = vzip1q_s64(v756, v739[71]);
              v756.i64[0] = vdupq_laneq_s64(v756, 1).u64[0];
              v756.i64[1] = v739[71].i64[1];
              v765 = vzip1q_s64(v741, v744);
              v766 = vzip2q_s64(v741, v744);
              v767 = vzip1q_s64(v747, v739[32]);
              v747.i64[0] = vdupq_laneq_s64(v747, 1).u64[0];
              v747.i64[1] = v739[32].i64[1];
              v768 = vzip1q_s64(v751, v739[52]);
              v751.i64[0] = vdupq_laneq_s64(v751, 1).u64[0];
              v751.i64[1] = v739[52].i64[1];
              v769 = vzip1q_s64(v740, v743);
              v770 = vzip2q_s64(v740, v743);
              v771 = vzip1q_s64(v755, v739[72]);
              v755.i64[0] = vdupq_laneq_s64(v755, 1).u64[0];
              v755.i64[1] = v739[72].i64[1];
              v772 = vzip1q_s64(v746, v739[33]);
              v746.i64[0] = vdupq_laneq_s64(v746, 1).u64[0];
              v746.i64[1] = v739[33].i64[1];
              v773 = vzip1q_s64(v878, v742);
              v774 = vzip2q_s64(v878, v742);
              v775 = vzip1q_s64(v750, v739[53]);
              v750.i64[0] = vdupq_laneq_s64(v750, 1).u64[0];
              v750.i64[1] = v739[53].i64[1];
              v776 = vzip1q_s64(v754, v739[73]);
              v754.i64[0] = vdupq_laneq_s64(v754, 1).u64[0];
              v754.i64[1] = v739[73].i64[1];
              v777 = (int64x2_t *)(v738 - 105);
              v777[2] = vzip1q_s64(v753, v739[50]);
              v777[3] = v760;
              v777[1] = v758;
              *v777 = v885;
              v778 = (int64x2_t *)(v738 - 90);
              v778[2] = v759;
              v778[3] = v757;
              *v778 = v893;
              v778[1] = v749;
              v779 = (int64x2_t *)(v738 - 75);
              v779[2] = v763;
              v779[3] = v764;
              *v779 = v765;
              v779[1] = v762;
              v780 = (int64x2_t *)(v738 - 60);
              v780[2] = v752;
              v780[3] = v756;
              *v780 = v766;
              v780[1] = v761;
              v781 = (int64x2_t *)(v738 - 45);
              v781[2] = v768;
              v781[3] = v771;
              *v781 = v769;
              v781[1] = v767;
              v782 = (int64x2_t *)(v738 - 30);
              v782[2] = v751;
              v782[3] = v755;
              *v782 = v770;
              v782[1] = v747;
              *(v738 - 13) = v775;
              *(v738 - 12) = v776;
              *(v738 - 15) = v773;
              *(v738 - 14) = v772;
              v738[2] = v750;
              v738[3] = v754;
              *v738 = v774;
              v738[1] = v746;
              v738 += 4;
              v737 += 8;
              v739 += 80;
            }
            while (v737 < 0xF);
            v783 = &xmmword_21039FDE0[v732 / 2];
            v784 = (int64x2_t)v783[243];
            v785 = (int64x2_t)v783[242];
            v732 += 8;
            v786 = (int64x2_t)v783[241];
            v787 = (int64x2_t)v783[240];
            v788 = (int64x2_t *)((char *)&unk_254A635E8 + 8 * v736);
            v789 = (int64x2_t)v783[253];
            v790 = (int64x2_t)v783[252];
            v791 = (int64x2_t)v783[251];
            v792 = (int64x2_t)v783[250];
            v793 = (int64x2_t)v783[263];
            v794 = (int64x2_t)v783[262];
            v795 = (int64x2_t)v783[261];
            v796 = (int64x2_t)v783[260];
            v797 = (int64x2_t)v783[273];
            v798 = (int64x2_t)v783[272];
            v799 = (int64x2_t)v783[271];
            v800 = (int64x2_t)v783[270];
            v801 = (int64x2_t)v783[283];
            v802 = (int64x2_t)v783[282];
            v803 = (int64x2_t)v783[281];
            v804 = (int64x2_t)v783[280];
            v805 = (int64x2_t)v783[293];
            v806 = (int64x2_t)v783[292];
            v807 = (int64x2_t)v783[291];
            v808 = (int64x2_t)v783[290];
            v788[13] = vzip1q_s64(v796, v800);
            v788[14] = vzip1q_s64(v804, v808);
            v788[12] = vzip1q_s64(v787, v792);
            v788[28] = vzip2q_s64(v796, v800);
            v788[29] = vzip2q_s64(v804, v808);
            v788[27] = vzip2q_s64(v787, v792);
            v788[43] = vzip1q_s64(v795, v799);
            v788[44] = vzip1q_s64(v803, v807);
            v788[42] = vzip1q_s64(v786, v791);
            v788[58] = vzip2q_s64(v795, v799);
            v788[59] = vzip2q_s64(v803, v807);
            v788[57] = vzip2q_s64(v786, v791);
            v788[74] = vzip1q_s64(v802, v806);
            v788[73] = vzip1q_s64(v794, v798);
            v788[72] = vzip1q_s64(v785, v790);
            v788[89] = vzip2q_s64(v802, v806);
            v788[88] = vzip2q_s64(v794, v798);
            v788[87] = vzip2q_s64(v785, v790);
            v788[104] = vzip1q_s64(v801, v805);
            v788[103] = vzip1q_s64(v793, v797);
            v788[102] = vzip1q_s64(v784, v789);
            v788[119] = vzip2q_s64(v801, v805);
            v735 += 4;
            v733 += 120;
            v788[118] = vzip2q_s64(v793, v797);
            v788[117] = vzip2q_s64(v784, v789);
            v28 = v734 >= 0xD;
            v734 += 8;
          }
          while (!v28);
          v809 = -8;
          v810 = &xmmword_254A644E8;
          v811 = xmmword_21039FDE0;
          do
          {
            v813 = (int64x2_t)v811[8];
            v812 = (int64x2_t)v811[9];
            v815 = (int64x2_t)v811[18];
            v814 = (int64x2_t)v811[19];
            v817 = (int64x2_t)v811[28];
            v816 = (int64x2_t)v811[29];
            v819 = (int64x2_t)v811[48];
            v818 = (int64x2_t)v811[49];
            v820 = (int64x2_t)v811[69];
            v821 = (int64x2_t)v811[68];
            v822 = vzip1q_s64(v813, v815);
            v823 = vzip1q_s64(v817, *((int64x2_t *)v811 + 38));
            v824 = vzip1q_s64(v819, *((int64x2_t *)v811 + 58));
            v825 = vzip1q_s64(v821, *((int64x2_t *)v811 + 78));
            v817.i64[0] = vdupq_laneq_s64(v817, 1).u64[0];
            v817.i64[1] = *((_QWORD *)v811 + 77);
            *(_QWORD *)&v826 = vdupq_laneq_s64(v819, 1).u64[0];
            *((_QWORD *)&v826 + 1) = *((_QWORD *)v811 + 117);
            v827 = vzip2q_s64(v813, v815);
            v815.i64[0] = vdupq_laneq_s64(v821, 1).u64[0];
            v815.i64[1] = *((_QWORD *)v811 + 157);
            v828 = vzip1q_s64(v812, v814);
            v829 = vzip1q_s64(v816, *((int64x2_t *)v811 + 39));
            v830 = vzip1q_s64(v818, *((int64x2_t *)v811 + 59));
            v831 = vzip1q_s64(v820, *((int64x2_t *)v811 + 79));
            v832 = vzip2q_s64(v812, v814);
            v814.i64[0] = vdupq_laneq_s64(v816, 1).u64[0];
            v814.i64[1] = *((_QWORD *)v811 + 79);
            v816.i64[0] = vdupq_laneq_s64(v818, 1).u64[0];
            v816.i64[1] = *((_QWORD *)v811 + 119);
            *(_QWORD *)&v833 = vdupq_laneq_s64(v820, 1).u64[0];
            *((_QWORD *)&v833 + 1) = *((_QWORD *)v811 + 159);
            v810[2] = (__int128)v824;
            v810[3] = (__int128)v825;
            *v810 = (__int128)v822;
            v810[1] = (__int128)v823;
            v810[17] = v826;
            v810[18] = (__int128)v815;
            v810[15] = (__int128)v827;
            v810[16] = (__int128)v817;
            v810[32] = (__int128)v830;
            v810[33] = (__int128)v831;
            v810[30] = (__int128)v828;
            v810[31] = (__int128)v829;
            v810[47] = (__int128)v816;
            v810[48] = v833;
            v809 += 8;
            v810[45] = (__int128)v832;
            v810[46] = (__int128)v814;
            v810 += 4;
            v811 += 80;
          }
          while (v809 < 0xF);
          xmmword_254A645B8 = xmmword_21039DA30;
          unk_254A645C8 = xmmword_21039DA20;
          xmmword_254A645A8 = xmmword_21039DA40;
          xmmword_254A646A8 = xmmword_21039DA60;
          unk_254A646B8 = xmmword_21039DA50;
          xmmword_254A64698 = xmmword_21039DA70;
          xmmword_254A64798 = xmmword_21039DA90;
          unk_254A647A8 = xmmword_21039DA80;
          xmmword_254A64788 = xmmword_21039DAA0;
          xmmword_254A64888 = xmmword_21039DAC0;
          unk_254A64898 = xmmword_21039DAB0;
          xmmword_254A64878 = xmmword_21039DAD0;
          __cxa_guard_release(&qword_254A680F0);
        }
        memcpy(v895, &unk_254A635E8, sizeof(v895));
        memcpy(__dst, &unk_254A635E8, sizeof(__dst));
        sub_20F197060((_QWORD *)v12, v10, v8, v6, v76, (uint64_t)v897, (uint64_t)v896, (uint64_t)v895, v2, (uint64_t)__dst);
      }
      else
      {
        v144 = atomic_load((unsigned __int8 *)&qword_254A68108);
        if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_254A68108))
        {
          sub_20F197680((uint64_t)&unk_254A66E28);
          __cxa_guard_release(&qword_254A68108);
        }
        v141 = *(_QWORD *)(v12 + 88);
        v142 = *(_QWORD *)(v12 + 96);
        v143 = &unk_254A66E28;
LABEL_111:
        sub_20F192FD0(v12, v10, v8, v6, (uint64_t)v143, v141, v142);
      }
      return;
    default:
      return;
  }
  while (1)
  {
    v210 = v206[v204];
    if (v202 >= 8)
    {
      k = 0;
      if (__CFADD__(5 * v204, v202 - 1) || (v202 - 1) >> 32)
        goto LABEL_137;
      v212 = v204;
      if ((unint64_t)&v206[v212] >= v208 || (unint64_t)v205 >= v207 + v212 * 8)
      {
        v213 = v202 & 0xFFFFFFFFFFFFFFFCLL;
        v214 = v203;
        v215 = (float64x2_t *)v209;
        do
        {
          v216 = (float64x2_t *)((char *)v897 + 8 * v214);
          v217 = vmulq_f64(v215[-1], *v216);
          v218 = vmulq_f64(*v215, v216[1]);
          v210 = v210 + v217.f64[0] + v217.f64[1] + v218.f64[0] + v218.f64[1];
          v215 += 2;
          v214 += 4;
          v213 -= 4;
        }
        while (v213);
        v206[v204] = v210;
        k = v202 & 0xFFFFFFFFFFFFFFFCLL;
        if (v202 == (v202 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_138;
        goto LABEL_137;
      }
    }
    for (k = 0; k != v202; ++k)
    {
LABEL_137:
      v210 = v210 + *(double *)&v205[k] * *((double *)v897 + (v203 + k));
      v206[v204] = v210;
    }
LABEL_138:
    ++v204;
    v203 += 5;
    if (v204 == v8)
      return;
  }
}

void sub_20F192FD0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;

  if ((*(_QWORD *)(a1 + 16) != 30 || *(_QWORD *)(a1 + 24) != 20)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 901, (uint64_t)"cfs.rows() == ls_pred_cfg_.num_taps && cfs.columns() == ls_pred_cfg_.max_pred_samples", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !a7&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 902, (uint64_t)"repeat_output_starting_index > 0", 32, (uint64_t)"Repeat Sample must be > 0", 25, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v14)
    bzero(*(void **)a4, 8 * v14);
  if (a3)
  {
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD **)a4;
    v18 = *a2;
    v19 = *(_QWORD *)a4 + 8;
    v20 = *a2 + 16;
    do
    {
      if (v16 >= a7 || v16 % (a6 + 1))
      {
        v17[v16] = v17[(v16 - 1)];
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 16);
        if (v21)
        {
          v22 = *(double *)&v17[v16];
          if (v21 < 0xE)
          {
            v23 = 0;
            goto LABEL_34;
          }
          v23 = 0;
          if (!__CFADD__(30 * v16, v21 - 1) && !((v21 - 1) >> 32))
          {
            v23 = 0;
            v24 = v16;
            v25 = (unint64_t)&v17[v24];
            v26 = v19 + v24 * 8;
            v27 = (unint64_t)&v17[v24] >= a5 + ((240 * v16) & 0x7FFFFFFF0) + 8 * v21
               || a5 + ((240 * v16) & 0x7FFFFFFF0) >= v26;
            v28 = !v27;
            v29 = v18 >= v26 || v25 >= v18 + 8 * v21;
            if (v29 && !v28)
            {
              v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
              v30 = v21 & 0xFFFFFFFFFFFFFFFCLL;
              v31 = v15;
              v32 = (float64x2_t *)v20;
              do
              {
                v33 = (float64x2_t *)(a5 + 8 * (v31 & 0xFFFFFFFE));
                v34 = vmulq_f64(v32[-1], *v33);
                v35 = vmulq_f64(*v32, v33[1]);
                v22 = v22 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
                v32 += 2;
                v31 += 4;
                v30 -= 4;
              }
              while (v30);
              *(double *)&v17[v16] = v22;
              goto LABEL_35;
            }
          }
          do
          {
LABEL_34:
            v22 = v22 + *(double *)(v18 + 8 * v23) * *(double *)(a5 + 8 * (v15 + v23));
            *(double *)&v17[v16] = v22;
            ++v23;
LABEL_35:
            ;
          }
          while (v21 != v23);
        }
      }
      ++v16;
      v15 += 30;
    }
    while (v16 != a3);
  }
}

void sub_20F193218(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  unint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float64x2_t *v32;
  double *v33;
  int v34;
  uint64_t v35;
  int v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  float64x2_t *v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  unsigned int v46;
  unint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;

  v8 = *a3;
  v9 = (uint64_t *)a3[1];
  if (*a3 == (unint64_t *)v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 317, (uint64_t)"!pred_samples.empty()", 21, (uint64_t)"RLSPredict failed: Need to specify prediction indices", 53, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_62;
    }
    v8 = *a3;
    v9 = (uint64_t *)a3[1];
    v10 = (uint64_t)(*a3 + 1);
    v11 = **a3;
    if (*a3 == (unint64_t *)v9 || v10 == (_QWORD)v9)
    {
LABEL_3:
      v12 = v11;
      if (*(_BYTE *)(a1 + 56) == 1)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else
  {
    v10 = (uint64_t)(v8 + 1);
    v11 = *v8;
    if (v8 + 1 == (unint64_t *)v9)
      goto LABEL_3;
  }
  v14 = v11;
  v15 = (unint64_t *)v10;
  v16 = v8;
  v17 = (unint64_t *)v10;
  do
  {
    v19 = *v17++;
    v18 = v19;
    v20 = v14 >= v19;
    if (v14 <= v19)
      v14 = v18;
    if (!v20)
      v16 = v15;
    v15 = v17;
  }
  while (v17 != (unint64_t *)v9);
  v12 = *v16;
  v21 = (unint64_t *)v10;
  do
  {
    v23 = *v21++;
    v22 = v23;
    if (v23 < v11)
    {
      v11 = v22;
      v8 = (unint64_t *)v10;
    }
    v10 = (uint64_t)v21;
  }
  while (v21 != (unint64_t *)v9);
  v11 = *v8;
  if (*(_BYTE *)(a1 + 56) == 1)
    goto LABEL_22;
LABEL_21:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 323, (uint64_t)"ls_pred_cfg_.ls_update_mode == LeastSquaresPredictionUpdateMode::RLS", 68, (uint64_t)"Function can only be used in LS RLS update mode.", 48, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_62;
  }
LABEL_22:
  if (*(_QWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 325, (uint64_t)"input_delay_line.rows() == ls_pred_cfg_.num_taps", 48, (uint64_t)"input_delay_line length must be equal to num_taps.", 50, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_62;
  }
  v24 = v12 > *(_QWORD *)(a1 + 24) || v11 == 0;
  if (v24
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 328, (uint64_t)"max_pred_idx <= ls_pred_cfg_.max_pred_samples && min_pred_idx > 0u", 66, (uint64_t)"RLSPredict failed: prediction indices must be in in [1,max_pred_samples] range.", 79, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_62;
  }
  v25 = *(unsigned int *)(a4 + 16);
  if (v25 >= a3[1] - *a3)
    goto LABEL_33;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 330, (uint64_t)"filter_output.rows() >= pred_samples.size()", 43, (uint64_t)"filter_output length must be equal to pred_samples size.", 56, (void (*)(void **))sub_21023DDB0))
  {
LABEL_62:
    abort();
  }
  LODWORD(v25) = *(_DWORD *)(a4 + 16);
LABEL_33:
  if ((_DWORD)v25)
    bzero(*(void **)a4, 8 * v25);
  v26 = *a3;
  v27 = (uint64_t *)a3[1];
  v28 = (char *)v27 - (char *)*a3;
  if (v27 != (uint64_t *)*a3)
  {
    v29 = *(_QWORD *)(a1 + 16);
    if (v29)
    {
      v30 = 0;
      v31 = v28 >> 3;
      v32 = *(float64x2_t **)a2;
      v33 = *(double **)a4;
      v34 = *(_DWORD *)(a1 + 216);
      if (v31 <= 1)
        v31 = 1;
      v35 = *(_QWORD *)(a1 + 200);
      do
      {
        v36 = (LODWORD(v26[v30]) - 1) * v34;
        v37 = v33[v30];
        if (v29 >= 0xC)
        {
          v38 = 0;
          if (!__CFADD__(v36, v29 - 1) && !((v29 - 1) >> 32))
          {
            v38 = 0;
            v39 = (8 * v30) & 0x7FFFFFFF8;
            v40 = (unint64_t)v33 + v39;
            v41 = (float64x2_t *)((char *)v33 + v39 + 8);
            v42 = 8 * ((LODWORD(v26[v30]) - 1) * v34);
            v43 = v40 >= v35 + 8 * v29 + v42 || v35 + v42 >= (unint64_t)v41;
            v44 = !v43;
            if ((v32 >= v41 || v40 >= (unint64_t)&v32->f64[v29]) && !v44)
            {
              v46 = (LODWORD(v26[v30]) - 1) * v34;
              v47 = v29 & 0xFFFFFFFFFFFFFFFCLL;
              v48 = v32 + 1;
              do
              {
                v49 = (float64x2_t *)(v35 + 8 * v46);
                v50 = vmulq_f64(v48[-1], *v49);
                v51 = vmulq_f64(*v48, v49[1]);
                v37 = v37 + v50.f64[0] + v50.f64[1] + v51.f64[0] + v51.f64[1];
                v48 += 2;
                v46 += 4;
                v47 -= 4;
              }
              while (v47);
              v33[v30] = v37;
              v38 = v29 & 0xFFFFFFFFFFFFFFFCLL;
              if (v29 == (v29 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_60;
            }
          }
        }
        else
        {
          v38 = 0;
        }
        do
        {
          v37 = v37 + v32->f64[v38] * *(double *)(v35 + 8 * (v36 + v38));
          v33[v30] = v37;
          ++v38;
        }
        while (v29 != v38);
LABEL_60:
        ++v30;
      }
      while (v30 != v31);
    }
  }
}

uint64_t sub_20F193598(uint64_t a1, unint64_t **a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v7;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  unsigned int v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  __int128 *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  size_t v67;
  NSObject *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  os_log_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  __int128 *v114;
  uint64_t *v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  __int128 *v121;
  __int128 v122;
  char *v123;
  unint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _QWORD *v131;
  int v132;
  uint64_t v133;
  size_t v134;
  char *v135;
  int v136;
  uint64_t v137;
  size_t v138;
  double *v139;
  double *v140;
  double v141;
  double *v142;
  unint64_t v143;
  unint64_t v144;
  float64x2_t *v145;
  uint64_t v146;
  float64x2_t v147;
  float64x2_t v148;
  double v149;
  double v150;
  double v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  size_t v155;
  double *v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  double v160;
  uint64_t v161;
  double *v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  _QWORD *v170;
  unsigned int v171;
  double v172;
  unsigned int v173;
  unsigned int v174;
  double *v175;
  double *v176;
  uint64_t v177;
  double v178;
  double *v179;
  uint64_t v180;
  double v181;
  unsigned int v182;
  size_t v183;
  double v184;
  uint64_t v185;
  size_t v186;
  void *v187;
  uint64_t v188;
  int64x2_t *v189;
  int64x2_t *v190;
  char *v191;
  uint64_t v192;
  int64x2_t v193;
  int64x2_t *v194;
  uint64_t v195;
  float64x2_t *v196;
  float64x2_t *v197;
  double *v198;
  unint64_t v199;
  double *v200;
  unint64_t v201;
  uint64_t v202;
  double *v203;
  float64x2_t *v204;
  float64x2_t *v205;
  uint64_t v206;
  float64x2_t v207;
  size_t v208;
  double v209;
  unsigned int v210;
  size_t v211;
  uint64_t v212;
  double *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  double v217;
  double v218;
  double *v219;
  uint64_t v220;
  double *v221;
  double v222;
  double v223;
  unint64_t v224;
  unint64_t v225;
  float64x2_t *v226;
  uint64_t v227;
  float64x2_t v228;
  float64x2_t v229;
  double v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  uint64_t v234;
  float64x2_t *v235;
  int8x16_t *v236;
  uint64_t v237;
  float64x2_t v238;
  float64x2_t v239;
  uint64_t v240;
  double *v241;
  double *v242;
  double v243;
  double v244;
  double v245;
  size_t v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v251;
  size_t v252;
  const char *v253;
  unsigned __int8 v254;
  const char *v255;
  size_t v256;
  __int128 *v257;
  unint64_t v258;
  const char *v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void **v265;
  uint64_t v266;
  uint64_t v267;
  NSObject *v268;
  size_t v269;
  NSObject *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  unint64_t *p_shared_owners;
  unint64_t v274;
  unint64_t v275;
  os_log_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  void *v300;
  unint64_t *v301;
  int v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  size_t v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  __int128 *v311;
  __int128 v312;
  char *v313;
  unsigned __int8 v314;
  const char *v315;
  size_t v316;
  __int128 *v317;
  unint64_t v318;
  const char *v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  void **v324;
  uint64_t v325;
  uint64_t v326;
  NSObject *v327;
  size_t v328;
  NSObject *v329;
  std::__shared_weak_count *v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t v334;
  os_log_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  _QWORD *v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  void *v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unsigned __int8 v363;
  const char *v364;
  size_t v365;
  __int128 *v366;
  unint64_t v367;
  const char *v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  void **v373;
  uint64_t v374;
  uint64_t v375;
  NSObject *v376;
  size_t v377;
  NSObject *v378;
  std::__shared_weak_count *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  unint64_t v383;
  os_log_t v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  _QWORD *v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  void *v408;
  unint64_t *v409;
  int v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v414;
  const char *v415;
  size_t v416;
  unsigned __int8 v417;
  const char *v418;
  size_t v419;
  __int128 *v420;
  uint64_t v421;
  uint64_t v422;
  void **v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  NSObject *v427;
  size_t v428;
  NSObject *v429;
  std::__shared_weak_count *v430;
  std::__shared_weak_count *v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t v434;
  os_log_t v435;
  char *v436;
  uint64_t v437;
  const char *v438;
  void *v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  _QWORD *v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  int v454;
  unint64_t *v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  void *v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  float64x2_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  unint64_t **v470;
  unint64_t __sz;
  size_t v472;
  _QWORD *v473;
  uint64_t v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  _QWORD v480[2];
  int v481;
  _QWORD v482[2];
  int v483;
  int v484;
  double *v485;
  float64x2_t *v486;
  unsigned int v487;
  _QWORD *v488;
  _DWORD *v489;
  _QWORD v490[2];
  _QWORD v491[2];
  _QWORD *v492;
  _QWORD v493[2];
  unsigned int v494;
  int v495;
  uint64_t v496[2];
  unsigned int v497;
  unsigned int v498;
  _QWORD *v499;
  size_t v500;
  unsigned int v501;
  _DWORD v502[2];
  uint64_t v503;
  uint64_t *v504;
  float64x2_t *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  const char *v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  os_log_t v513;
  __int128 v514;
  __int128 v515;
  void *v516;
  size_t v517;
  unint64_t v518;
  char v519;
  _QWORD *v520;
  double v521;
  os_log_t *v522;
  uint64_t v523;
  uint64_t v524;

  v524 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    sub_20F196B60(v496);
    if (**(int **)(v496[0] + 56) > 2)
      return 0;
    v34 = *(unsigned __int8 *)(v496[0] + 72);
    v35 = sub_20E8C31DC(v496[0], "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (!v34 && v35 == 0)
      return 0;
    v504 = v496;
    rep = (float64x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v506 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v507) = 2;
    v508 = (uint64_t)"unknown file";
    v509 = 347;
    v512 = 0;
    v510 = "unknown function";
    v511 = 0;
    v38 = *v504;
    v39 = *v504 + 16;
    if (*(char *)(*v504 + 39) < 0)
    {
      v41 = *(const char **)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      v254 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v254 & 1) != 0)
        goto LABEL_278;
    }
    else
    {
      v40 = *(unsigned __int8 *)(*v504 + 39);
      v41 = (const char *)(*v504 + 16);
      v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v42 & 1) != 0)
        goto LABEL_278;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v513);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v513);
      if ((_BYTE)v515 && SHIBYTE(v514) < 0)
        operator delete(v513);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_278:
    if (byte_254A4A4F8[23] >= 0)
      v255 = byte_254A4A4F8;
    else
      v255 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v256 = byte_254A4A4F8[23];
    else
      v256 = *(_QWORD *)&byte_254A4A4F8[8];
    v513 = os_log_create(v255, v41);
    v257 = &v514;
    if (v256 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v256 >= 0x17)
    {
      v258 = v36;
      v259 = v41;
      v260 = v38;
      v261 = v34;
      v262 = v39;
      v263 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v256 | 7) != 0x17)
        v263 = v256 | 7;
      v264 = v263 + 1;
      v257 = (__int128 *)operator new(v263 + 1);
      *((_QWORD *)&v514 + 1) = v256;
      *(_QWORD *)&v515 = v264 | 0x8000000000000000;
      *(_QWORD *)&v514 = v257;
      v39 = v262;
      v34 = v261;
      v38 = v260;
      v41 = v259;
      v36 = v258;
    }
    else
    {
      BYTE7(v515) = v256;
      if (!v256)
      {
LABEL_292:
        *((_BYTE *)v257 + v256) = 0;
        BYTE8(v515) = 1;
        v265 = &v516;
        if (v40 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v40 >= 0x17)
        {
          v266 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v40 | 7) != 0x17)
            v266 = v40 | 7;
          v267 = v266 + 1;
          v265 = (void **)operator new(v266 + 1);
          v517 = v40;
          v518 = v267 | 0x8000000000000000;
          v516 = v265;
        }
        else
        {
          HIBYTE(v518) = v40;
          if (!v40)
            goto LABEL_300;
        }
        memmove(v265, v41, v40);
LABEL_300:
        *((_BYTE *)v265 + v40) = 0;
        v519 = 1;
        v268 = v513;
        if (SHIBYTE(v518) < 0)
          operator delete(v516);
        if (BYTE8(v515) && SBYTE7(v515) < 0)
          operator delete((void *)v514);
        if (v513)
          os_release(v513);
        if (v36 && *(_QWORD *)(v36 + 24))
        {
          v269 = _os_log_pack_size();
          v270 = operator new(v269, (std::align_val_t)8uLL);
          v271 = (std::__shared_weak_count *)operator new();
          v272 = v271;
          v271->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v271->__shared_owners_;
          v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v271->__shared_weak_owners_ = 0;
          v271[1].__vftable = (std::__shared_weak_count_vtbl *)v270;
          v513 = v270;
          *(_QWORD *)&v514 = v270;
          *((_QWORD *)&v514 + 1) = v271;
          do
            v274 = __ldxr(p_shared_owners);
          while (__stxr(v274 + 1, p_shared_owners));
          v515 = 0uLL;
          v516 = 0;
          do
            v275 = __ldaxr(p_shared_owners);
          while (__stlxr(v275 - 1, p_shared_owners));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
            std::__shared_weak_count::__release_weak(v272);
          }
          v276 = v513;
          *(_WORD *)_os_log_pack_fill() = 0;
          v277 = (char *)operator new();
          v278 = *(unsigned __int8 *)(v38 + 39);
          if ((v278 & 0x80u) == 0)
            v279 = v39;
          else
            v279 = *(_QWORD *)(v38 + 16);
          if ((v278 & 0x80u) != 0)
            v278 = *(_QWORD *)(v38 + 24);
          *(_QWORD *)v277 = v276;
          *(_OWORD *)(v277 + 8) = v514;
          v514 = 0uLL;
          *(_OWORD *)(v277 + 24) = v515;
          v515 = 0uLL;
          *((_QWORD *)v277 + 5) = v279;
          *((_QWORD *)v277 + 6) = v278;
          v277[56] = 2;
          v499 = 0;
          v520 = v277;
          (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), &v520);
          v280 = v520;
          v520 = 0;
          if (v280)
          {
            v281 = (std::__shared_weak_count *)*((_QWORD *)v280 + 4);
            if (v281)
            {
              v282 = (unint64_t *)&v281->__shared_owners_;
              do
                v283 = __ldaxr(v282);
              while (__stlxr(v283 - 1, v282));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v284 = (std::__shared_weak_count *)*((_QWORD *)v280 + 2);
            if (v284)
            {
              v285 = (unint64_t *)&v284->__shared_owners_;
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            MEMORY[0x212BC6398](v280, 0x10F0C40B62ED6C6);
            v287 = v499;
            v499 = 0;
            if (v287)
            {
              v288 = (std::__shared_weak_count *)v287[4];
              if (v288)
              {
                v289 = (unint64_t *)&v288->__shared_owners_;
                do
                  v290 = __ldaxr(v289);
                while (__stlxr(v290 - 1, v289));
                if (!v290)
                {
                  ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                  std::__shared_weak_count::__release_weak(v288);
                }
              }
              v291 = (std::__shared_weak_count *)v287[2];
              if (v291)
              {
                v292 = (unint64_t *)&v291->__shared_owners_;
                do
                  v293 = __ldaxr(v292);
                while (__stlxr(v293 - 1, v292));
                if (!v293)
                {
                  ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                  std::__shared_weak_count::__release_weak(v291);
                }
              }
              MEMORY[0x212BC6398](v287, 0x10F0C40B62ED6C6);
            }
          }
          v294 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
          if (*((_QWORD *)&v515 + 1))
          {
            v295 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
            do
              v296 = __ldaxr(v295);
            while (__stlxr(v296 - 1, v295));
            if (!v296)
            {
              ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
              std::__shared_weak_count::__release_weak(v294);
            }
          }
          v297 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
          if (*((_QWORD *)&v514 + 1))
          {
            v298 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
            }
          }
        }
        else
        {
          os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG);
          LOWORD(v513) = 0;
          v300 = (void *)_os_log_send_and_compose_impl();
          if (v300)
            free(v300);
        }
        if (v34)
        {
          sub_20E8C003C((uint64_t)&v504, "AddPredictiveMeasurement failed: Needs to specify prediction time");
          sub_20E863570((uint64_t)&v504);
        }
        sub_20E863570((uint64_t)&v504);
        v99 = v512;
        if (!v512)
          return 0;
        v301 = (unint64_t *)&v512->__shared_owners_;
        do
          v101 = __ldaxr(v301);
        while (__stlxr(v101 - 1, v301));
LABEL_360:
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
        return 0;
      }
    }
    memmove(v257, v255, v256);
    goto LABEL_292;
  }
  v7 = a3;
  v11 = v4 + 1;
  v10 = *v4;
  v12 = *v4;
  if (v4 + 1 != v5)
  {
    v13 = v4 + 1;
    v14 = *a2;
    v15 = v4 + 1;
    do
    {
      v17 = *v15++;
      v16 = v17;
      _CF = v12 >= v17;
      if (v12 <= v17)
        v12 = v16;
      if (!_CF)
        v14 = v13;
      v13 = v15;
    }
    while (v15 != v5);
    v12 = *v14;
    v19 = *a2;
    v20 = v4 + 1;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v22 < v10)
      {
        v10 = v21;
        v19 = v11;
      }
      v11 = v20;
    }
    while (v20 != v5);
    v10 = *v19;
  }
  v23 = (uint64_t)(a3[1] - *a3) >> 3;
  _ZF = v23 < *(_QWORD *)(a1 + 16) + v12 || v10 == 0;
  if (_ZF || v12 > *(_QWORD *)(a1 + 24))
  {
    sub_20F196B60(v496);
    if (**(int **)(v496[0] + 56) > 2)
      return 0;
    v25 = *(unsigned __int8 *)(v496[0] + 72);
    v26 = sub_20E8C31DC(v496[0], "OSLogSurrogateAppender", 1, 0);
    v27 = v26;
    if (!v25 && v26 == 0)
      return 0;
    v504 = v496;
    rep = (float64x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v506 = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v507) = 2;
    v508 = (uint64_t)"unknown file";
    v509 = 357;
    v512 = 0;
    v510 = "unknown function";
    v511 = 0;
    v29 = *v504;
    v30 = *v504 + 16;
    if (*(char *)(*v504 + 39) < 0)
    {
      v32 = *(const char **)(v29 + 16);
      v31 = *(_QWORD *)(v29 + 24);
      v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v52 & 1) != 0)
        goto LABEL_49;
    }
    else
    {
      v31 = *(unsigned __int8 *)(*v504 + 39);
      v32 = (const char *)(*v504 + 16);
      v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v33 & 1) != 0)
        goto LABEL_49;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v513);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v513);
      if ((_BYTE)v515 && SHIBYTE(v514) < 0)
        operator delete(v513);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_49:
    if (byte_254A4A4F8[23] >= 0)
      v53 = byte_254A4A4F8;
    else
      v53 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v54 = byte_254A4A4F8[23];
    else
      v54 = *(_QWORD *)&byte_254A4A4F8[8];
    v513 = os_log_create(v53, v32);
    v55 = &v514;
    if (v54 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v54 >= 0x17)
    {
      v56 = v27;
      v57 = v32;
      v58 = v29;
      v59 = v25;
      v60 = v30;
      v61 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v61 = v54 | 7;
      v62 = v61 + 1;
      v55 = (__int128 *)operator new(v61 + 1);
      *((_QWORD *)&v514 + 1) = v54;
      *(_QWORD *)&v515 = v62 | 0x8000000000000000;
      *(_QWORD *)&v514 = v55;
      v30 = v60;
      v25 = v59;
      v29 = v58;
      v32 = v57;
      v27 = v56;
    }
    else
    {
      BYTE7(v515) = v54;
      if (!v54)
      {
LABEL_63:
        *((_BYTE *)v55 + v54) = 0;
        BYTE8(v515) = 1;
        v63 = &v516;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v31 >= 0x17)
        {
          v64 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v64 = v31 | 7;
          v65 = v64 + 1;
          v63 = (void **)operator new(v64 + 1);
          v517 = v31;
          v518 = v65 | 0x8000000000000000;
          v516 = v63;
        }
        else
        {
          HIBYTE(v518) = v31;
          if (!v31)
            goto LABEL_71;
        }
        memmove(v63, v32, v31);
LABEL_71:
        *((_BYTE *)v63 + v31) = 0;
        v519 = 1;
        v66 = v513;
        if (SHIBYTE(v518) < 0)
          operator delete(v516);
        if (BYTE8(v515) && SBYTE7(v515) < 0)
          operator delete((void *)v514);
        if (v513)
          os_release(v513);
        if (v27 && *(_QWORD *)(v27 + 24))
        {
          v67 = _os_log_pack_size();
          v68 = operator new(v67, (std::align_val_t)8uLL);
          v69 = (std::__shared_weak_count *)operator new();
          v70 = v69;
          v69->__shared_owners_ = 0;
          v71 = (unint64_t *)&v69->__shared_owners_;
          v69->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v69->__shared_weak_owners_ = 0;
          v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
          v513 = v68;
          *(_QWORD *)&v514 = v68;
          *((_QWORD *)&v514 + 1) = v69;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          v515 = 0uLL;
          v516 = 0;
          do
            v73 = __ldaxr(v71);
          while (__stlxr(v73 - 1, v71));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v70);
          }
          v74 = v513;
          *(_WORD *)_os_log_pack_fill() = 0;
          v75 = (char *)operator new();
          v76 = *(unsigned __int8 *)(v29 + 39);
          if ((v76 & 0x80u) == 0)
            v77 = v30;
          else
            v77 = *(_QWORD *)(v29 + 16);
          if ((v76 & 0x80u) != 0)
            v76 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)v75 = v74;
          *(_OWORD *)(v75 + 8) = v514;
          v514 = 0uLL;
          *(_OWORD *)(v75 + 24) = v515;
          v515 = 0uLL;
          *((_QWORD *)v75 + 5) = v77;
          *((_QWORD *)v75 + 6) = v76;
          v75[56] = 2;
          v499 = 0;
          v520 = v75;
          (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), &v520);
          v78 = v520;
          v520 = 0;
          if (v78)
          {
            v79 = (std::__shared_weak_count *)*((_QWORD *)v78 + 4);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v82 = (std::__shared_weak_count *)*((_QWORD *)v78 + 2);
            if (v82)
            {
              v83 = (unint64_t *)&v82->__shared_owners_;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
            v85 = v499;
            v499 = 0;
            if (v85)
            {
              v86 = (std::__shared_weak_count *)v85[4];
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              v89 = (std::__shared_weak_count *)v85[2];
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
            }
          }
          v92 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
          if (*((_QWORD *)&v515 + 1))
          {
            v93 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v95 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
          if (*((_QWORD *)&v514 + 1))
          {
            v96 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
        }
        else
        {
          os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG);
          LOWORD(v513) = 0;
          v98 = (void *)_os_log_send_and_compose_impl();
          if (v98)
            free(v98);
        }
        if (v25)
        {
          sub_20E8C003C((uint64_t)&v504, "AddPredictiveMeasurement Failed: Cannot compute prediction filter");
          sub_20E863570((uint64_t)&v504);
        }
        sub_20E863570((uint64_t)&v504);
        v99 = v512;
        if (!v512)
          return 0;
        v100 = (unint64_t *)&v512->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        goto LABEL_360;
      }
    }
    memmove(v55, v53, v54);
    goto LABEL_63;
  }
  v43 = v5 - v4;
  v44 = (uint64_t)(a4[1] - *a4) >> 3;
  if (v43 <= v44)
  {
    if (v43 < v44)
      a4[1] = *a4 + 8 * v43;
  }
  else
  {
    sub_20E93D8FC((uint64_t)a4, v43 - v44);
  }
  if (*(_QWORD *)(a1 + 32) >= v23)
    v45 = v23;
  else
    v45 = *(_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 16);
  v47 = v45 - v46;
  if ((_DWORD)v45 == (_DWORD)v46)
  {
    v48 = 0;
    if (!(_DWORD)v46)
    {
      LODWORD(v476) = 0;
      v50 = 0;
      goto LABEL_135;
    }
    v476 = *(_QWORD *)(a1 + 16);
    v49 = v46 * (unint64_t)v47;
    if (v49)
      goto LABEL_133;
  }
  else
  {
    v48 = (char *)operator new((8 * (v45 - v46) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    bzero(v48, 8 * (v45 - v46));
    LODWORD(v476) = v46;
    v49 = v46 * (unint64_t)v47;
    if (v49)
    {
LABEL_133:
      v50 = (char *)operator new((8 * v49 + 31) & 0xFFFFFFFFFFFFFFE0, (std::align_val_t)0x20uLL);
      v51 = v476 * v47;
      if (!((_DWORD)v476 * (_DWORD)v47))
        goto LABEL_135;
      goto LABEL_134;
    }
  }
  v50 = 0;
  v51 = v476 * v47;
  if ((_DWORD)v476 * (_DWORD)v47)
LABEL_134:
    bzero(v50, 8 * v51);
LABEL_135:
  v102 = (uint64_t *)v7[1];
  v103 = &v102[-v45];
  v104 = &v103[v46];
  v105 = 8 * v45;
  if (v104 != v102)
  {
    v106 = v105 - 8 * v46 - 8;
    if (v106 >= 0x88
      && (unint64_t)(v105 - 8 * v46 - 8) <= 0x7FFFFFFF8
      && v48 - (char *)&v102[v46] + 8 * v45 >= 0x20)
    {
      v309 = 0;
      v310 = (v106 >> 3) + 1;
      v107 = v310 & 0x3FFFFFFFFFFFFFFCLL;
      v104 += v310 & 0x3FFFFFFFFFFFFFFCLL;
      v311 = (__int128 *)((char *)v102 + 8 * v46 - v105 + 16);
      do
      {
        v312 = *v311;
        v313 = &v48[8 * (v309 & 0xFFFFFFFC)];
        *(_OWORD *)v313 = *(v311 - 1);
        *((_OWORD *)v313 + 1) = v312;
        v309 += 4;
        v311 += 2;
      }
      while (v107 != v309);
      if (v310 == v107)
        goto LABEL_141;
    }
    else
    {
      v107 = 0;
    }
    do
    {
      v108 = *v104++;
      *(_QWORD *)&v48[8 * v107++] = v108;
    }
    while (v104 != v102);
  }
LABEL_141:
  if (v46 && v45 != v46)
  {
    v109 = 0;
    v110 = 0;
    v111 = v105 - 8 * v46 - 8;
    v112 = &v102[v105 / 0xFFFFFFFFFFFFFFF8];
    v113 = (v111 >> 3) + 1;
    v114 = (__int128 *)(v112 + 2);
    do
    {
      v115 = &v103[v110];
      if (v111 >= 0x48)
      {
        v116 = 0;
        if (!__CFADD__(v47 * v110, (v111 >> 3))
          && v111 <= 0x7FFFFFFF8
          && (unint64_t)(&v50[8 * (v47 * v110)] - (char *)&v112[v110]) >= 0x20)
        {
          v115 += v113 & 0x3FFFFFFFFFFFFFFCLL;
          v119 = v109;
          v120 = v113 & 0x3FFFFFFFFFFFFFFCLL;
          v121 = v114;
          do
          {
            v122 = *v121;
            v123 = &v50[8 * v119];
            *(_OWORD *)v123 = *(v121 - 1);
            *((_OWORD *)v123 + 1) = v122;
            v121 += 2;
            v119 += 4;
            v120 -= 4;
          }
          while (v120);
          v116 = v113 & 0xFFFFFFFC;
          if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_144;
        }
      }
      else
      {
        v116 = 0;
      }
      v117 = v116 + v109;
      do
      {
        v118 = *v115++;
        *(_QWORD *)&v50[8 * v117++] = v118;
      }
      while (v115 != &v103[v47 + v110]);
LABEL_144:
      ++v110;
      v114 = (__int128 *)((char *)v114 + 8);
      v109 += v47;
    }
    while (v110 != v46);
  }
  v124 = *a2;
  v125 = 1;
  if (a2[1] == *a2)
    goto LABEL_633;
  v469 = v48;
  v470 = a2;
  v126 = 0;
  v127 = v476;
  v472 = (8 * (v127 * v127) + 31) & 0xFFFFFFFE0;
  v468 = 8 * v476;
  __sz = (v468 + 31) & 0xFFFFFFFE0;
  v466 = (v476 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v465 = (v466 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v464 = _Q0;
  v473 = a4;
  while (1)
  {
    v131 = v7;
    v474 = v126;
    v132 = v124[v126] - 1;
    v133 = (v47 - v132);
    v134 = (8 * (v133 * v127) + 31) & 0xFFFFFFFE0;
    v482[1] = v134 >> 3;
    v135 = (char *)operator new(v134, (std::align_val_t)0x20uLL);
    v482[0] = v135;
    v483 = v47 - v132;
    v484 = v127;
    if (v127 && (_DWORD)v47 != v132)
    {
      v136 = 0;
      v137 = v476;
      do
      {
        memmove(v135, &v50[8 * v136], 8 * (v47 - v132));
        v136 += v47;
        v135 += 8 * (v47 - v132);
        --v137;
      }
      while (v137);
    }
    v138 = (8 * (v47 - v132) + 31) & 0xFFFFFFFE0;
    v480[1] = v138 >> 3;
    v139 = (double *)operator new(v138, (std::align_val_t)0x20uLL);
    v140 = v139;
    v480[0] = v139;
    v481 = v47 - v132;
    v141 = 0.0;
    if ((_DWORD)v47 != v132)
    {
      memmove(v139, &v469[8 * v132], 8 * (v47 - v132));
      v141 = *v140 * *v140;
      if ((_DWORD)v133 != 1)
      {
        v142 = v140 + 1;
        v143 = (v133 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v143 < 3)
          goto LABEL_675;
        v144 = v143 + 1;
        v142 += v144 & 0x3FFFFFFFFFFFFFFCLL;
        v145 = (float64x2_t *)(v140 + 3);
        v146 = v144 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v147 = vmulq_f64(v145[-1], v145[-1]);
          v148 = vmulq_f64(*v145, *v145);
          v141 = v141 + v147.f64[0] + v147.f64[1] + v148.f64[0] + v148.f64[1];
          v145 += 2;
          v146 -= 4;
        }
        while (v146);
        if (v144 != (v144 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_675:
          do
          {
            v149 = *v142++;
            v141 = v141 + v149 * v149;
          }
          while (v142 != &v140[v133]);
        }
      }
    }
    v150 = sqrt(v141);
    v499 = v482;
    v151 = v150 * *(double *)a1;
    LODWORD(v520) = v476;
    HIDWORD(v520) = v476;
    v521 = v150 * v151;
    *((_QWORD *)&v514 + 1) = v472 >> 3;
    *(_QWORD *)&v514 = operator new(v472, (std::align_val_t)0x20uLL);
    LODWORD(v515) = v476;
    DWORD1(v515) = v476;
    rep = (float64x2_t *)&v499;
    v506 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v482;
    v507 = 0x3FF0000000000000;
    sub_20F197F40((uint64_t)&v514, (uint64_t)&v504);
    v7 = v131;
    *((_QWORD *)&v515 + 1) = &v520;
    v152 = v515;
    v153 = DWORD1(v515);
    v154 = (DWORD1(v515) * v515);
    v155 = (8 * v154 + 31) & 0xFFFFFFFE0;
    v496[0] = 0;
    v496[1] = v155 >> 3;
    v156 = (double *)operator new(v155, (std::align_val_t)0x20uLL);
    v496[0] = (uint64_t)v156;
    v497 = v152;
    v498 = v153;
    v157 = v514;
    if ((_DWORD)v154)
    {
      v158 = 0;
      v159 = (int)v520;
      v160 = v521;
      v161 = 8 * v154;
      v162 = (double *)v514;
      do
      {
        v163 = *v162++;
        v164 = v163;
        if ((_DWORD)v158 == HIDWORD(v158))
          v165 = v160;
        else
          v165 = 0.0;
        *v156++ = v164 + v165;
        v166 = (v158 + 1);
        v167 = v158 & 0xFFFFFFFF00000000;
        v168 = v167 | v166;
        v158 = v167 + 0x100000000;
        if (v159 > (int)v166)
          v158 = v168;
        v161 -= 8;
      }
      while (v161);
    }
    if (v157)
    {
      MEMORY[0x212BC6368](v157, 0x1000C8000313F17);
      v152 = v497;
      v153 = v498;
    }
    if (v153 >= v152)
      v169 = v152;
    else
      v169 = v153;
    v170 = v473;
    v171 = v476;
    if (!v169)
      goto LABEL_189;
    v172 = *(double *)v496[0];
    v173 = v169 - 1;
    if (v173)
    {
      v174 = v152 + 1;
      do
      {
        v172 = v172 + *(double *)(v496[0] + 8 * v174);
        v174 += v152 + 1;
        --v173;
      }
      while (v173);
    }
    if (v172 == 0.0)
    {
LABEL_189:
      v486 = (float64x2_t *)(__sz >> 3);
      v175 = (double *)operator new(__sz, (std::align_val_t)0x20uLL);
      v176 = v175;
      v485 = v175;
      v487 = v476;
      if ((_DWORD)v476)
        bzero(v175, v468);
      goto LABEL_239;
    }
    v485 = 0;
    v486 = 0;
    v487 = 0;
    sub_20F196C54((uint64_t)v496);
    if (*(_BYTE *)(a1 + 40))
    {
      v177 = v495 * v494;
      if ((_DWORD)v177)
      {
        v178 = *(double *)v493[0];
        if ((_DWORD)v177 != 1)
        {
          v179 = (double *)(v493[0] + 8);
          v180 = 8 * v177 - 8;
          do
          {
            v181 = *v179++;
            v178 = v178 + v181;
            v180 -= 8;
          }
          while (v180);
        }
      }
      else
      {
        v178 = 0.0;
      }
      v502[0] = v476;
      v502[1] = 1;
      v503 = 0x3FF0000000000000;
      v488 = v482;
      v489 = v502;
      v490[0] = &v489;
      v490[1] = v493;
      if (v178 == 0.0)
        v184 = 1.0;
      else
        v184 = 1.0 / v178;
      v467 = *(_QWORD *)&v184;
      v491[0] = v490;
      v491[1] = &v488;
      v492 = v482;
      v506 = 4;
      rep = (float64x2_t *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
      LODWORD(v507) = 1;
      v521 = COERCE_DOUBLE(v491);
      v522 = (os_log_t *)v480;
      v523 = 0x3FF0000000000000;
      sub_20F1980A4((uint64_t)&rep, (uint64_t)&v520);
      v508 = 0x3FF0000000000000;
      v185 = *((unsigned int *)v492 + 5);
      v186 = (8 * v185 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)&v514 = 0;
      *((_QWORD *)&v514 + 1) = v186 >> 3;
      *(_QWORD *)&v514 = operator new(v186, (std::align_val_t)0x20uLL);
      LODWORD(v515) = v185;
      v521 = COERCE_DOUBLE(&v492);
      v522 = (os_log_t *)v480;
      v523 = 0x3FF0000000000000;
      sub_20EB2AEFC((uint64_t)&v514, (uint64_t)&v520);
      *((_QWORD *)&v515 + 1) = 0;
      v516 = (void *)(__sz >> 3);
      v187 = operator new(__sz, (std::align_val_t)0x20uLL);
      *((_QWORD *)&v515 + 1) = v187;
      LODWORD(v517) = v476;
      if (!(_DWORD)v476)
      {
LABEL_223:
        v210 = v494;
        if (v494)
        {
          if (!v493[0])
          {
            v246 = (8 * v494 + 31) & 0xFFFFFFFE0;
            v500 = v246 >> 3;
            v499 = operator new(v246, (std::align_val_t)0x20uLL);
            v501 = v210;
            v521 = COERCE_DOUBLE(v493);
            v522 = &v513;
            v523 = 0x3FF0000000000000;
            sub_20F198738((uint64_t)&v499, (uint64_t)&v520);
            v485 = (double *)v499;
            v486 = (float64x2_t *)v500;
            v487 = v501;
            v212 = *((_QWORD *)&v515 + 1);
            if (!*((_QWORD *)&v515 + 1))
              goto LABEL_228;
            goto LABEL_227;
          }
          v487 = v494;
          v211 = (8 * v494 + 31) & 0xFFFFFFFE0;
          v485 = 0;
          v486 = (float64x2_t *)(v211 >> 3);
          v485 = (double *)operator new(v211, (std::align_val_t)0x20uLL);
        }
        v521 = COERCE_DOUBLE(v493);
        v522 = &v513;
        v523 = 0x3FF0000000000000;
        sub_20F198738((uint64_t)&v485, (uint64_t)&v520);
        v212 = *((_QWORD *)&v515 + 1);
        if (!*((_QWORD *)&v515 + 1))
        {
LABEL_228:
          if ((_QWORD)v514)
            MEMORY[0x212BC6368](v514, 0x1000C8000313F17);
          if (rep)
            MEMORY[0x212BC6368](rep, 0x1000C8000313F17);
          goto LABEL_232;
        }
LABEL_227:
        MEMORY[0x212BC6368](v212, 0x1000C8000313F17);
        goto LABEL_228;
      }
      v188 = v507;
      if (!(_DWORD)v507)
      {
        bzero(v187, v468);
        goto LABEL_223;
      }
      v189 = (int64x2_t *)operator new(__sz, (std::align_val_t)0x20uLL);
      v190 = v189;
      v191 = (char *)v189;
      v192 = v467;
      if (v466 < 3)
        goto LABEL_676;
      v191 = &v189->i8[8 * v465];
      v193 = vdupq_lane_s64(v467, 0);
      v194 = v189 + 1;
      v195 = (v466 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v194[-1] = v193;
        *v194 = v193;
        v194 += 2;
        v195 -= 4;
      }
      while (v195);
      v192 = v467;
      if (v466 + 1 != v465)
      {
LABEL_676:
        do
        {
          *(_QWORD *)v191 = v192;
          v191 += 8;
        }
        while (v191 != (char *)v189 + 8 * v476);
      }
      v196 = (float64x2_t *)operator new((8 * v188 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v197 = v196;
      v198 = (double *)rep;
      v199 = (v188 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v199 < 3)
      {
        v200 = (double *)v196;
      }
      else
      {
        v200 = (double *)v196;
        if ((unint64_t)((char *)v196 - (char *)rep) >= 0x20)
        {
          v201 = v199 + 1;
          v202 = v201 & 0x3FFFFFFFFFFFFFFCLL;
          v200 = &v196->f64[v202];
          v203 = &rep->f64[v202];
          v204 = rep + 1;
          v205 = v196 + 1;
          v206 = v201 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v207 = vaddq_f64(*v204, v464);
            v205[-1] = vaddq_f64(v204[-1], v464);
            *v205 = v207;
            v204 += 2;
            v205 += 2;
            v206 -= 4;
          }
          while (v206);
          v198 = v203;
          if (v201 == (v201 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_222;
        }
      }
      do
      {
        v209 = *v198++;
        *v200++ = v209 + -1.0;
      }
      while (v200 != &v196->f64[v188]);
LABEL_222:
      sub_20E8BE6CC();
      MEMORY[0x212BC6368](v197, 0x1000C8000313F17);
      MEMORY[0x212BC6368](v190, 0x1000C8000313F17);
      goto LABEL_223;
    }
    v499 = v482;
    v520 = v493;
    v521 = COERCE_DOUBLE(&v499);
    v182 = v494;
    if (!v494)
      goto LABEL_200;
    if (v480[0])
    {
      v487 = v494;
      v183 = (8 * v494 + 31) & 0xFFFFFFFE0;
      v485 = 0;
      v486 = (float64x2_t *)(v183 >> 3);
      v485 = (double *)operator new(v183, (std::align_val_t)0x20uLL);
LABEL_200:
      *(_QWORD *)&v514 = &v520;
      *((_QWORD *)&v514 + 1) = v480;
      *(_QWORD *)&v515 = 0x3FF0000000000000;
      sub_20F1989A8((uint64_t)&v485, (uint64_t)&v513);
      goto LABEL_232;
    }
    v208 = (8 * v494 + 31) & 0xFFFFFFFE0;
    rep = (float64x2_t *)(v208 >> 3);
    v504 = (uint64_t *)operator new(v208, (std::align_val_t)0x20uLL);
    LODWORD(v506) = v182;
    *(_QWORD *)&v514 = &v520;
    *((_QWORD *)&v514 + 1) = v480;
    *(_QWORD *)&v515 = 0x3FF0000000000000;
    sub_20F1989A8((uint64_t)&v504, (uint64_t)&v513);
    v485 = (double *)v504;
    v486 = rep;
    v487 = v506;
LABEL_232:
    v176 = v485;
    v171 = v487;
    if (v487)
    {
      v213 = &v485[v487 - 1];
      if (v213 > v485)
      {
        v214 = (char *)(v485 + 1);
        do
        {
          v215 = *((_QWORD *)v214 - 1);
          *((double *)v214 - 1) = *v213;
          *(_QWORD *)v213-- = v215;
          _CF = v214 >= (char *)v213;
          v214 += 8;
        }
        while (!_CF);
      }
    }
    if (v493[0])
      MEMORY[0x212BC6368](v493[0], 0x1000C8000313F17);
LABEL_239:
    if (v496[0])
      MEMORY[0x212BC6368](v496[0], 0x1000C8000313F17);
    if (v480[0])
      MEMORY[0x212BC6368](v480[0], 0x1000C8000313F17);
    if (v482[0])
      MEMORY[0x212BC6368](v482[0], 0x1000C8000313F17);
    if (!v171)
      break;
    v216 = v171;
    v217 = *v176;
    if (v171 == 1)
    {
      if (fabs(v217 + -1.0) > 0.1)
        break;
      v218 = v217 * v217;
    }
    else
    {
      v219 = v176 + 1;
      v220 = 8 * v171 - 8;
      v221 = v176 + 1;
      v222 = *v176;
      do
      {
        v223 = *v221++;
        v222 = v222 + v223;
        v220 -= 8;
      }
      while (v220);
      if (fabs(v222 + -1.0) > 0.1)
        break;
      v218 = v217 * v217;
      v224 = (v171 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      if (v224 < 3)
        goto LABEL_677;
      v225 = v224 + 1;
      v219 += v225 & 0x3FFFFFFFFFFFFFFCLL;
      v226 = (float64x2_t *)(v176 + 3);
      v227 = v225 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v228 = vmulq_f64(v226[-1], v226[-1]);
        v229 = vmulq_f64(*v226, *v226);
        v218 = v218 + v228.f64[0] + v228.f64[1] + v229.f64[0] + v229.f64[1];
        v226 += 2;
        v227 -= 4;
      }
      while (v227);
      if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_677:
        do
        {
          v230 = *v219++;
          v218 = v218 + v230 * v230;
        }
        while (v219 != &v176[v171]);
      }
    }
    if (sqrt(v218) > *(double *)(a1 + 8))
    {
      sub_20F196B60(v496);
      v48 = v469;
      if (**(int **)(v496[0] + 56) > 2)
        goto LABEL_540;
      v303 = *(unsigned __int8 *)(v496[0] + 72);
      v304 = sub_20E8C31DC(v496[0], "OSLogSurrogateAppender", 1, 0);
      v305 = v304;
      if (!v303 && !v304)
        goto LABEL_540;
      v504 = v496;
      rep = (float64x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v506 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v507) = 2;
      v508 = (uint64_t)"unknown file";
      v509 = 507;
      v510 = "unknown function";
      v511 = 0;
      v512 = 0;
      v306 = *v504;
      if (*(char *)(*v504 + 39) < 0)
      {
        v308 = *(const char **)(v306 + 16);
        v307 = *(_QWORD *)(v306 + 24);
      }
      else
      {
        v307 = *(unsigned __int8 *)(*v504 + 39);
        v308 = (const char *)(*v504 + 16);
      }
      v478 = *v504 + 16;
      v363 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v363 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v520);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v520);
        if ((_BYTE)v523 && SHIBYTE(v522) < 0)
          operator delete(v520);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v364 = byte_254A4A4F8;
      else
        v364 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v365 = byte_254A4A4F8[23];
      else
        v365 = *(_QWORD *)&byte_254A4A4F8[8];
      v513 = os_log_create(v364, v308);
      if (v365 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v365 >= 0x17)
      {
        v367 = v305;
        v368 = v308;
        v369 = v306;
        v370 = v303;
        v371 = (v365 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v365 | 7) != 0x17)
          v371 = v365 | 7;
        v372 = v371 + 1;
        v366 = (__int128 *)operator new(v371 + 1);
        *((_QWORD *)&v514 + 1) = v365;
        *(_QWORD *)&v515 = v372 | 0x8000000000000000;
        *(_QWORD *)&v514 = v366;
        v303 = v370;
        v306 = v369;
        v308 = v368;
        v305 = v367;
      }
      else
      {
        BYTE7(v515) = v365;
        v366 = &v514;
        if (!v365)
        {
LABEL_473:
          *((_BYTE *)v366 + v365) = 0;
          BYTE8(v515) = 1;
          if (v307 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v48 = v469;
          if (v307 >= 0x17)
          {
            v374 = (v307 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v307 | 7) != 0x17)
              v374 = v307 | 7;
            v375 = v374 + 1;
            v373 = (void **)operator new(v374 + 1);
            v517 = v307;
            v518 = v375 | 0x8000000000000000;
            v516 = v373;
          }
          else
          {
            HIBYTE(v518) = v307;
            v373 = &v516;
            if (!v307)
            {
LABEL_481:
              *((_BYTE *)v373 + v307) = 0;
              v519 = 1;
              v376 = v513;
              if (SHIBYTE(v518) < 0)
                operator delete(v516);
              v170 = v473;
              if (BYTE8(v515) && SBYTE7(v515) < 0)
                operator delete((void *)v514);
              if (v513)
                os_release(v513);
              if (v305 && *(_QWORD *)(v305 + 24))
              {
                v377 = _os_log_pack_size();
                v378 = operator new(v377, (std::align_val_t)8uLL);
                v379 = (std::__shared_weak_count *)operator new();
                v380 = v379;
                v379->__shared_owners_ = 0;
                v381 = (unint64_t *)&v379->__shared_owners_;
                v379->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v379->__shared_weak_owners_ = 0;
                v379[1].__vftable = (std::__shared_weak_count_vtbl *)v378;
                v513 = v378;
                *(_QWORD *)&v514 = v378;
                *((_QWORD *)&v514 + 1) = v379;
                do
                  v382 = __ldxr(v381);
                while (__stxr(v382 + 1, v381));
                v515 = 0uLL;
                v516 = 0;
                do
                  v383 = __ldaxr(v381);
                while (__stlxr(v383 - 1, v381));
                if (!v383)
                {
                  ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                  std::__shared_weak_count::__release_weak(v380);
                }
                v384 = v513;
                *(_WORD *)_os_log_pack_fill() = 0;
                v385 = (char *)operator new();
                v386 = *(unsigned __int8 *)(v306 + 39);
                v387 = v478;
                if ((v386 & 0x80u) != 0)
                {
                  v387 = *(_QWORD *)(v306 + 16);
                  v386 = *(_QWORD *)(v306 + 24);
                }
                *(_QWORD *)v385 = v384;
                *(_OWORD *)(v385 + 8) = v514;
                v514 = 0uLL;
                *(_OWORD *)(v385 + 24) = v515;
                v515 = 0uLL;
                *((_QWORD *)v385 + 5) = v387;
                *((_QWORD *)v385 + 6) = v386;
                v385[56] = 2;
                v499 = 0;
                v520 = v385;
                (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v305 + 24) + 40))(*(_QWORD *)(v305 + 24), &v520);
                v388 = v520;
                v520 = 0;
                if (v388)
                {
                  v389 = (std::__shared_weak_count *)*((_QWORD *)v388 + 4);
                  if (v389)
                  {
                    v390 = (unint64_t *)&v389->__shared_owners_;
                    do
                      v391 = __ldaxr(v390);
                    while (__stlxr(v391 - 1, v390));
                    if (!v391)
                    {
                      ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                      std::__shared_weak_count::__release_weak(v389);
                    }
                  }
                  v392 = (std::__shared_weak_count *)*((_QWORD *)v388 + 2);
                  if (v392)
                  {
                    v393 = (unint64_t *)&v392->__shared_owners_;
                    do
                      v394 = __ldaxr(v393);
                    while (__stlxr(v394 - 1, v393));
                    if (!v394)
                    {
                      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                      std::__shared_weak_count::__release_weak(v392);
                    }
                  }
                  MEMORY[0x212BC6398](v388, 0x10F0C40B62ED6C6);
                  v395 = v499;
                  v499 = 0;
                  if (v395)
                  {
                    v396 = (std::__shared_weak_count *)v395[4];
                    if (v396)
                    {
                      v397 = (unint64_t *)&v396->__shared_owners_;
                      do
                        v398 = __ldaxr(v397);
                      while (__stlxr(v398 - 1, v397));
                      if (!v398)
                      {
                        ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
                        std::__shared_weak_count::__release_weak(v396);
                      }
                    }
                    v399 = (std::__shared_weak_count *)v395[2];
                    if (v399)
                    {
                      v400 = (unint64_t *)&v399->__shared_owners_;
                      do
                        v401 = __ldaxr(v400);
                      while (__stlxr(v401 - 1, v400));
                      if (!v401)
                      {
                        ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                        std::__shared_weak_count::__release_weak(v399);
                      }
                    }
                    MEMORY[0x212BC6398](v395, 0x10F0C40B62ED6C6);
                  }
                }
                v402 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
                if (*((_QWORD *)&v515 + 1))
                {
                  v403 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
                  do
                    v404 = __ldaxr(v403);
                  while (__stlxr(v404 - 1, v403));
                  if (!v404)
                  {
                    ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
                    std::__shared_weak_count::__release_weak(v402);
                  }
                }
                v405 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
                if (*((_QWORD *)&v514 + 1))
                {
                  v406 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
                  do
                    v407 = __ldaxr(v406);
                  while (__stlxr(v407 - 1, v406));
                  if (!v407)
                  {
                    ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
                    std::__shared_weak_count::__release_weak(v405);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v376, OS_LOG_TYPE_DEBUG);
                LOWORD(v513) = 0;
                v408 = (void *)_os_log_send_and_compose_impl();
                if (v408)
                  free(v408);
              }
              if (v303)
              {
                sub_20E8C003C((uint64_t)&v504, "LeastSquaresPredictionFilter: Filter taps norm too large check failed");
                sub_20E863570((uint64_t)&v504);
              }
              sub_20E863570((uint64_t)&v504);
              v360 = v512;
              if (v512)
              {
                v409 = (unint64_t *)&v512->__shared_owners_;
                do
                  v362 = __ldaxr(v409);
                while (__stlxr(v362 - 1, v409));
                goto LABEL_538;
              }
              goto LABEL_540;
            }
          }
          memmove(v373, v308, v307);
          goto LABEL_481;
        }
      }
      memmove(v366, v364, v365);
      goto LABEL_473;
    }
    if (v171 > (unint64_t)((uint64_t)(v7[1] - *v7) >> 3)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 395, (uint64_t)"filter_data.size() >= filter_taps.rows()", 40, (uint64_t)"FilterData data length less than filter length", 46, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v231 = v7[1];
    if (v171 >= 4)
    {
      v232 = v171 & 0xFFFFFFFC;
      v234 = v231 - 8 * v232;
      v235 = (float64x2_t *)(v176 + 2);
      v236 = (int8x16_t *)(v231 - 16);
      v233 = 0.0;
      v237 = v232;
      v127 = v476;
      do
      {
        v238 = vmulq_f64(v235[-1], (float64x2_t)vextq_s8(*v236, *v236, 8uLL));
        v239 = vmulq_f64(*v235, (float64x2_t)vextq_s8(v236[-1], v236[-1], 8uLL));
        v233 = v233 + v238.f64[0] + v238.f64[1] + v239.f64[0] + v239.f64[1];
        v235 += 2;
        v236 -= 2;
        v237 -= 4;
      }
      while (v237);
      if (v232 == v216)
        goto LABEL_159;
    }
    else
    {
      v232 = 0;
      v233 = 0.0;
      v234 = v7[1];
      v127 = v476;
    }
    v240 = v216 - v232;
    v241 = &v176[v232];
    v242 = (double *)(v234 - 8);
    do
    {
      v243 = *v241++;
      v244 = v243;
      v245 = *v242--;
      v233 = v233 + v244 * v245;
      --v240;
    }
    while (v240);
LABEL_159:
    *(double *)(*v473 + 8 * v474) = v233;
    MEMORY[0x212BC6368](v176, 0x1000C8000313F17);
    v126 = v474 + 1;
    v124 = *v470;
    if (v474 + 1 >= (unint64_t)(v470[1] - *v470))
    {
      v125 = 1;
      v48 = v469;
      goto LABEL_633;
    }
  }
  sub_20F196B60(v496);
  v48 = v469;
  if (**(int **)(v496[0] + 56) > 2)
    goto LABEL_540;
  v247 = *(unsigned __int8 *)(v496[0] + 72);
  v248 = sub_20E8C31DC(v496[0], "OSLogSurrogateAppender", 1, 0);
  v249 = v248;
  if (!v247 && v248 == 0)
    goto LABEL_540;
  v504 = v496;
  rep = (float64x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
  v506 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v507) = 2;
  v508 = (uint64_t)"unknown file";
  v509 = 501;
  v510 = "unknown function";
  v511 = 0;
  v512 = 0;
  v251 = *v504;
  if (*(char *)(*v504 + 39) < 0)
  {
    v253 = *(const char **)(v251 + 16);
    v252 = *(_QWORD *)(v251 + 24);
  }
  else
  {
    v252 = *(unsigned __int8 *)(*v504 + 39);
    v253 = (const char *)(*v504 + 16);
  }
  v477 = *v504 + 16;
  v314 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v520);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v520);
    if ((_BYTE)v523 && SHIBYTE(v522) < 0)
      operator delete(v520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v315 = byte_254A4A4F8;
  else
    v315 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v316 = byte_254A4A4F8[23];
  else
    v316 = *(_QWORD *)&byte_254A4A4F8[8];
  v513 = os_log_create(v315, v253);
  if (v316 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v316 >= 0x17)
  {
    v318 = v249;
    v319 = v253;
    v320 = v251;
    v321 = v247;
    v322 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v316 | 7) != 0x17)
      v322 = v316 | 7;
    v323 = v322 + 1;
    v317 = (__int128 *)operator new(v322 + 1);
    *((_QWORD *)&v514 + 1) = v316;
    *(_QWORD *)&v515 = v323 | 0x8000000000000000;
    *(_QWORD *)&v514 = v317;
    v247 = v321;
    v251 = v320;
    v253 = v319;
    v249 = v318;
    goto LABEL_390;
  }
  BYTE7(v515) = v316;
  v317 = &v514;
  if (v316)
LABEL_390:
    memmove(v317, v315, v316);
  *((_BYTE *)v317 + v316) = 0;
  BYTE8(v515) = 1;
  if (v252 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v48 = v469;
  if (v252 >= 0x17)
  {
    v325 = (v252 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v252 | 7) != 0x17)
      v325 = v252 | 7;
    v326 = v325 + 1;
    v324 = (void **)operator new(v325 + 1);
    v517 = v252;
    v518 = v326 | 0x8000000000000000;
    v516 = v324;
    goto LABEL_398;
  }
  HIBYTE(v518) = v252;
  v324 = &v516;
  if (v252)
LABEL_398:
    memmove(v324, v253, v252);
  *((_BYTE *)v324 + v252) = 0;
  v519 = 1;
  v327 = v513;
  if (SHIBYTE(v518) < 0)
    operator delete(v516);
  v170 = v473;
  if (BYTE8(v515) && SBYTE7(v515) < 0)
    operator delete((void *)v514);
  if (v513)
    os_release(v513);
  if (v249 && *(_QWORD *)(v249 + 24))
  {
    v328 = _os_log_pack_size();
    v329 = operator new(v328, (std::align_val_t)8uLL);
    v330 = (std::__shared_weak_count *)operator new();
    v331 = v330;
    v330->__shared_owners_ = 0;
    v332 = (unint64_t *)&v330->__shared_owners_;
    v330->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v330->__shared_weak_owners_ = 0;
    v330[1].__vftable = (std::__shared_weak_count_vtbl *)v329;
    v513 = v329;
    *(_QWORD *)&v514 = v329;
    *((_QWORD *)&v514 + 1) = v330;
    do
      v333 = __ldxr(v332);
    while (__stxr(v333 + 1, v332));
    v515 = 0uLL;
    v516 = 0;
    do
      v334 = __ldaxr(v332);
    while (__stlxr(v334 - 1, v332));
    if (!v334)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v331);
    }
    v335 = v513;
    *(_WORD *)_os_log_pack_fill() = 0;
    v336 = (char *)operator new();
    v337 = *(unsigned __int8 *)(v251 + 39);
    v338 = v477;
    if ((v337 & 0x80u) != 0)
    {
      v338 = *(_QWORD *)(v251 + 16);
      v337 = *(_QWORD *)(v251 + 24);
    }
    *(_QWORD *)v336 = v335;
    *(_OWORD *)(v336 + 8) = v514;
    v514 = 0uLL;
    *(_OWORD *)(v336 + 24) = v515;
    v515 = 0uLL;
    *((_QWORD *)v336 + 5) = v338;
    *((_QWORD *)v336 + 6) = v337;
    v336[56] = 2;
    v499 = 0;
    v520 = v336;
    (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v249 + 24) + 40))(*(_QWORD *)(v249 + 24), &v520);
    v339 = v520;
    v520 = 0;
    if (v339)
    {
      v340 = (std::__shared_weak_count *)*((_QWORD *)v339 + 4);
      if (v340)
      {
        v341 = (unint64_t *)&v340->__shared_owners_;
        do
          v342 = __ldaxr(v341);
        while (__stlxr(v342 - 1, v341));
        if (!v342)
        {
          ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
          std::__shared_weak_count::__release_weak(v340);
        }
      }
      v343 = (std::__shared_weak_count *)*((_QWORD *)v339 + 2);
      if (v343)
      {
        v344 = (unint64_t *)&v343->__shared_owners_;
        do
          v345 = __ldaxr(v344);
        while (__stlxr(v345 - 1, v344));
        if (!v345)
        {
          ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
          std::__shared_weak_count::__release_weak(v343);
        }
      }
      MEMORY[0x212BC6398](v339, 0x10F0C40B62ED6C6);
      v346 = v499;
      v499 = 0;
      if (v346)
      {
        v347 = (std::__shared_weak_count *)v346[4];
        if (v347)
        {
          v348 = (unint64_t *)&v347->__shared_owners_;
          do
            v349 = __ldaxr(v348);
          while (__stlxr(v349 - 1, v348));
          if (!v349)
          {
            ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
            std::__shared_weak_count::__release_weak(v347);
          }
        }
        v350 = (std::__shared_weak_count *)v346[2];
        if (v350)
        {
          v351 = (unint64_t *)&v350->__shared_owners_;
          do
            v352 = __ldaxr(v351);
          while (__stlxr(v352 - 1, v351));
          if (!v352)
          {
            ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
            std::__shared_weak_count::__release_weak(v350);
          }
        }
        MEMORY[0x212BC6398](v346, 0x10F0C40B62ED6C6);
      }
    }
    v353 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
    if (*((_QWORD *)&v515 + 1))
    {
      v354 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
      do
        v355 = __ldaxr(v354);
      while (__stlxr(v355 - 1, v354));
      if (!v355)
      {
        ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
        std::__shared_weak_count::__release_weak(v353);
      }
    }
    v356 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
    if (*((_QWORD *)&v514 + 1))
    {
      v357 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
      do
        v358 = __ldaxr(v357);
      while (__stlxr(v358 - 1, v357));
      if (!v358)
      {
        ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
        std::__shared_weak_count::__release_weak(v356);
      }
    }
  }
  else
  {
    os_log_type_enabled(v327, OS_LOG_TYPE_DEBUG);
    LOWORD(v513) = 0;
    v359 = (void *)_os_log_send_and_compose_impl();
    if (v359)
      free(v359);
  }
  if (v247)
  {
    sub_20E8C003C((uint64_t)&v504, "LeastSquaresPredictionFilter: Sum of filter coefficieents not close to 1.");
    sub_20E863570((uint64_t)&v504);
  }
  sub_20E863570((uint64_t)&v504);
  v360 = v512;
  if (v512)
  {
    v361 = (unint64_t *)&v512->__shared_owners_;
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
LABEL_538:
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
LABEL_540:
  v170[1] = *v170;
  sub_20F196B60(v496);
  if (**(int **)(v496[0] + 56) <= 2)
  {
    v410 = *(unsigned __int8 *)(v496[0] + 72);
    v411 = sub_20E8C31DC(v496[0], "OSLogSurrogateAppender", 1, 0);
    v412 = v411;
    if (v410 || v411 != 0)
    {
      v479 = v410;
      v504 = v496;
      rep = (float64x2_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v506 = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v507) = 2;
      v508 = (uint64_t)"unknown file";
      v509 = 380;
      v510 = "unknown function";
      v511 = 0;
      v512 = 0;
      v414 = *v504;
      v415 = (const char *)(*v504 + 16);
      v475 = v415;
      if (*(char *)(*v504 + 39) < 0)
      {
        v415 = *(const char **)(v414 + 16);
        v416 = *(_QWORD *)(v414 + 24);
      }
      else
      {
        v416 = *(unsigned __int8 *)(*v504 + 39);
      }
      v417 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v417 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v520);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v520);
        if ((_BYTE)v523 && SHIBYTE(v522) < 0)
          operator delete(v520);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v48 = v469;
      }
      if (byte_254A4A4F8[23] >= 0)
        v418 = byte_254A4A4F8;
      else
        v418 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v419 = byte_254A4A4F8[23];
      else
        v419 = *(_QWORD *)&byte_254A4A4F8[8];
      v513 = os_log_create(v418, v415);
      if (v419 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v419 >= 0x17)
      {
        v421 = (v419 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v419 | 7) != 0x17)
          v421 = v419 | 7;
        v422 = v421 + 1;
        v420 = (__int128 *)operator new(v421 + 1);
        *((_QWORD *)&v514 + 1) = v419;
        *(_QWORD *)&v515 = v422 | 0x8000000000000000;
        *(_QWORD *)&v514 = v420;
        v48 = v469;
      }
      else
      {
        BYTE7(v515) = v419;
        v420 = &v514;
        if (!v419)
        {
LABEL_563:
          *((_BYTE *)v420 + v419) = 0;
          BYTE8(v515) = 1;
          if (v416 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v423 = &v516;
          if (v416 >= 0x17)
          {
            v424 = (v416 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v416 | 7) != 0x17)
              v424 = v416 | 7;
            v425 = v424 + 1;
            v426 = operator new(v424 + 1);
            v517 = v416;
            v518 = v425 | 0x8000000000000000;
            v516 = v426;
            v423 = (void **)v426;
          }
          else
          {
            HIBYTE(v518) = v416;
            if (!v416)
            {
LABEL_571:
              *((_BYTE *)v423 + v416) = 0;
              v519 = 1;
              v427 = v513;
              if (SHIBYTE(v518) < 0)
                operator delete(v516);
              if (BYTE8(v515) && SBYTE7(v515) < 0)
                operator delete((void *)v514);
              if (v513)
                os_release(v513);
              if (v412 && *(_QWORD *)(v412 + 24))
              {
                v428 = _os_log_pack_size();
                v429 = operator new(v428, (std::align_val_t)8uLL);
                v430 = (std::__shared_weak_count *)operator new();
                v431 = v430;
                v430->__shared_owners_ = 0;
                v432 = (unint64_t *)&v430->__shared_owners_;
                v430->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v430->__shared_weak_owners_ = 0;
                v430[1].__vftable = (std::__shared_weak_count_vtbl *)v429;
                v513 = v429;
                *(_QWORD *)&v514 = v429;
                *((_QWORD *)&v514 + 1) = v430;
                do
                  v433 = __ldxr(v432);
                while (__stxr(v433 + 1, v432));
                v515 = 0uLL;
                v516 = 0;
                do
                  v434 = __ldaxr(v432);
                while (__stlxr(v434 - 1, v432));
                if (!v434)
                {
                  ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                  std::__shared_weak_count::__release_weak(v431);
                }
                v435 = v513;
                *(_WORD *)_os_log_pack_fill() = 0;
                v436 = (char *)operator new();
                v437 = *(unsigned __int8 *)(v414 + 39);
                v438 = v475;
                if ((v437 & 0x80u) != 0)
                {
                  v438 = *(const char **)(v414 + 16);
                  v437 = *(_QWORD *)(v414 + 24);
                }
                *(_QWORD *)v436 = v435;
                *(_OWORD *)(v436 + 8) = v514;
                v514 = 0uLL;
                *(_OWORD *)(v436 + 24) = v515;
                v515 = 0uLL;
                *((_QWORD *)v436 + 5) = v438;
                *((_QWORD *)v436 + 6) = v437;
                v436[56] = 2;
                v499 = 0;
                v520 = v436;
                (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v412 + 24) + 40))(*(_QWORD *)(v412 + 24), &v520);
                v439 = v520;
                v520 = 0;
                if (v439)
                {
                  v440 = (std::__shared_weak_count *)*((_QWORD *)v439 + 4);
                  if (v440)
                  {
                    v441 = (unint64_t *)&v440->__shared_owners_;
                    do
                      v442 = __ldaxr(v441);
                    while (__stlxr(v442 - 1, v441));
                    if (!v442)
                    {
                      ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                      std::__shared_weak_count::__release_weak(v440);
                    }
                  }
                  v443 = (std::__shared_weak_count *)*((_QWORD *)v439 + 2);
                  if (v443)
                  {
                    v444 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v445 = __ldaxr(v444);
                    while (__stlxr(v445 - 1, v444));
                    if (!v445)
                    {
                      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                      std::__shared_weak_count::__release_weak(v443);
                    }
                  }
                  MEMORY[0x212BC6398](v439, 0x10F0C40B62ED6C6);
                  v446 = v499;
                  v499 = 0;
                  if (v446)
                  {
                    v447 = (std::__shared_weak_count *)v446[4];
                    if (v447)
                    {
                      v448 = (unint64_t *)&v447->__shared_owners_;
                      do
                        v449 = __ldaxr(v448);
                      while (__stlxr(v449 - 1, v448));
                      if (!v449)
                      {
                        ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
                        std::__shared_weak_count::__release_weak(v447);
                      }
                    }
                    v450 = (std::__shared_weak_count *)v446[2];
                    if (v450)
                    {
                      v451 = (unint64_t *)&v450->__shared_owners_;
                      do
                        v452 = __ldaxr(v451);
                      while (__stlxr(v452 - 1, v451));
                      if (!v452)
                      {
                        ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                        std::__shared_weak_count::__release_weak(v450);
                      }
                    }
                    MEMORY[0x212BC6398](v446, 0x10F0C40B62ED6C6);
                  }
                }
                v453 = (std::__shared_weak_count *)*((_QWORD *)&v515 + 1);
                v454 = v479;
                if (*((_QWORD *)&v515 + 1))
                {
                  v455 = (unint64_t *)(*((_QWORD *)&v515 + 1) + 8);
                  do
                    v456 = __ldaxr(v455);
                  while (__stlxr(v456 - 1, v455));
                  if (!v456)
                  {
                    ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                    std::__shared_weak_count::__release_weak(v453);
                  }
                }
                v457 = (std::__shared_weak_count *)*((_QWORD *)&v514 + 1);
                if (*((_QWORD *)&v514 + 1))
                {
                  v458 = (unint64_t *)(*((_QWORD *)&v514 + 1) + 8);
                  do
                    v459 = __ldaxr(v458);
                  while (__stlxr(v459 - 1, v458));
                  if (!v459)
                  {
                    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                    std::__shared_weak_count::__release_weak(v457);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v427, OS_LOG_TYPE_DEBUG);
                LOWORD(v513) = 0;
                v460 = (void *)_os_log_send_and_compose_impl();
                v454 = v479;
                if (v460)
                  free(v460);
              }
              if (v454)
              {
                sub_20E8C003C((uint64_t)&v504, "AddPredictiveMeasurement Failed: Filter taps not valid.");
                sub_20E863570((uint64_t)&v504);
              }
              sub_20E863570((uint64_t)&v504);
              v461 = v512;
              if (v512)
              {
                v462 = (unint64_t *)&v512->__shared_owners_;
                do
                  v463 = __ldaxr(v462);
                while (__stlxr(v463 - 1, v462));
                if (!v463)
                {
                  ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                  std::__shared_weak_count::__release_weak(v461);
                }
              }
              goto LABEL_630;
            }
          }
          memmove(v423, v415, v416);
          goto LABEL_571;
        }
      }
      memmove(v420, v418, v419);
      goto LABEL_563;
    }
  }
LABEL_630:
  if (v485)
    MEMORY[0x212BC6368](v485, 0x1000C8000313F17);
  v125 = 0;
LABEL_633:
  if (v48)
    MEMORY[0x212BC6368](v48, 0x1000C8000313F17);
  if (v50)
    MEMORY[0x212BC6368](v50, 0x1000C8000313F17);
  return v125;
}

void sub_20F196568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;
  uint64_t v67;

  if (*(_BYTE *)(v67 - 144) && *(char *)(v67 - 145) < 0)
    operator delete(*(void **)(v67 - 168));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a66);
  if (a44)
    MEMORY[0x212BC6368](a44, 0x1000C8000313F17);
  if (a28)
    MEMORY[0x212BC6368](a28, 0x1000C8000313F17);
  if (v66)
  {
    MEMORY[0x212BC6368](v66, 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F196B60(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68118))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68110);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68118);
  }
  *a1 = qword_254A68110;
}

void sub_20F196BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68118);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68118);
  _Unwind_Resume(a1);
}

char *sub_20F196C54(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v8;
  size_t v9;
  char *result;
  uint64_t *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  size_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v3 = v1;
  v4 = *(unsigned int *)(v2 + 16);
  v5 = *(_DWORD *)(v2 + 20);
  if ((_DWORD)v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6 || (_DWORD)v4 != v5)
  {
    v8 = (v5 * v4);
    v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
    *v1 = 0;
    v1[1] = v9 >> 3;
    result = (char *)operator new(v9, (std::align_val_t)0x20uLL);
    *v3 = result;
    *((_DWORD *)v3 + 4) = v4;
    *((_DWORD *)v3 + 5) = v5;
    if (!(_DWORD)v8)
      return result;
    v11 = *(uint64_t **)v2;
    v12 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 < 3)
    {
      v13 = result;
    }
    else
    {
      v13 = result;
      if ((unint64_t)(result - (char *)v11) >= 0x20)
      {
        v14 = v12 + 1;
        v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        v16 = &v11[v15];
        v13 = &result[v15 * 8];
        v17 = result + 16;
        v18 = (__int128 *)(v11 + 2);
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v20 = *v18;
          *(v17 - 1) = *(v18 - 1);
          *v17 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
        v11 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          return result;
      }
    }
    do
    {
      v25 = *v11++;
      *(_QWORD *)v13 = v25;
      v13 += 8;
    }
    while (v13 != &result[8 * v8]);
    return result;
  }
  v21 = (8 * (v4 * v4) + 31) & 0xFFFFFFFE0;
  v22 = operator new(v21, (std::align_val_t)0x20uLL);
  v23 = v22;
  if ((_DWORD)v4 * (_DWORD)v4)
    memcpy(v22, *(const void **)v2, 8 * (v4 * v4));
  v24 = operator new((4 * v4 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  sub_20E8BED80();
  sub_20E8BEDB0();
  if ((int)0.0 > 0x400)
  {
    v26 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    sub_20E8BED80();
    MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
  }
  else
  {
    sub_20E8BED80();
  }
  *v3 = v23;
  v3[1] = v21 >> 3;
  v3[2] = v4 | (v4 << 32);
  return (char *)MEMORY[0x212BC6368](v24, 0x1000C8052888210);
}

void sub_20F196F98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  MEMORY[0x212BC6368](v2, 0x1000C8052888210);
  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F197008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  return a1;
}

void sub_20F197060(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[23];

  v10 = a5[5];
  if (!v10)
    goto LABEL_8;
  v12 = 0;
  v13 = 0;
  v14 = a5[3];
  v15 = *a5;
  v16 = 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3);
  v17 = a5[5];
  do
  {
    v18 = v17 >> 1;
    v19 = (v17 >> 1) + v13;
    if (*(double *)(v15 + 88 * ((v19 + v14) % v16) + 56) <= a9)
    {
      v13 = v19 + 1;
      v12 = v19 + 1 == v10;
      v18 = v17 + ~v18;
    }
    v17 = v18;
  }
  while (v18);
  if (v12 || v13)
  {
    v23 = (unsigned __int8 *)(v15 + 88 * ((v14 + v13 - 1) % v16));
    v24 = *v23;
    v32 = *(_OWORD *)(v23 + 33);
    v33 = *(_OWORD *)(v23 + 49);
    *(_OWORD *)v34 = *(_OWORD *)(v23 + 65);
    *(_QWORD *)&v34[15] = *((_QWORD *)v23 + 10);
    v30 = *(_OWORD *)(v23 + 1);
    v31 = *(_OWORD *)(v23 + 17);
    v29 = v24;
    switch(v24)
    {
      case 0:
        goto LABEL_8;
      case 1:
        v22 = a1[13];
        v20 = a1[14];
        a6 = a8;
        goto LABEL_9;
      case 2:
        v22 = a1[13];
        v20 = a1[14];
        a6 = a10;
        goto LABEL_9;
      case 3:
        sub_20F197240((uint64_t)a1, a2, a3, a4, a8, a7, (double *)&v29, a1[15], a9, a1[16]);
        return;
      case 4:
      case 5:
        sub_20F197240((uint64_t)a1, a2, a3, a4, a7, a8, (double *)&v29, a1[15], a9, a1[16]);
        return;
      case 6:
        v25 = a1[15];
        v28 = a1[16];
        v26 = a8;
        v27 = a10;
        goto LABEL_17;
      case 7:
        v25 = a1[15];
        v28 = a1[16];
        v26 = a10;
        v27 = a8;
LABEL_17:
        sub_20F197240((uint64_t)a1, a2, a3, a4, v26, v27, (double *)&v29, v25, a9, v28);
        break;
      default:
        return;
    }
  }
  else
  {
LABEL_8:
    v20 = a1[12];
    v22 = a1[11];
LABEL_9:
    sub_20F192FD0((uint64_t)a1, a2, a3, a4, a6, v22, v20);
  }
}

void sub_20F197240(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double a9, unint64_t a10)
{
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  double v58;

  if ((*(_QWORD *)(a1 + 16) != 30 || *(_QWORD *)(a1 + 24) != 20)
    && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 852, (uint64_t)"cfs_start.rows() == ls_pred_cfg_.num_taps && cfs_start.columns() == ls_pred_cfg_.max_pred_samples", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (*(_QWORD *)(a1 + 16) != 30 || *(_QWORD *)(a1 + 24) != 20)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 855, (uint64_t)"cfs_end.rows() == ls_pred_cfg_.num_taps && cfs_end.columns() == ls_pred_cfg_.max_pred_samples", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))|| !a10&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp",
         857,
         (uint64_t)"repeat_output_starting_index > 0",
         32,
         (uint64_t)"Repeat Sample must be > 0",
         25,
         (void (*)(void **))sub_21023DDB0)
    || a7[8] < a7[7]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 859, (uint64_t)"filter_status.state_timestamp_end >= filter_status.state_timestamp_start", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a7[10] <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 860, (uint64_t)"filter_status.state_timestamp_wgt_gain > 0.0", 44, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_61:
    abort();
  }
  v19 = a7[7];
  if (v19 >= a9)
  {
    v25 = (v19 - a7[9]) * a7[10];
    v58 = v25;
    if (v25 > 1.001)
      goto LABEL_21;
  }
  else
  {
    v20 = a7[8];
    v21 = a7[9];
    v22 = a7[10];
    v23 = v20 > a9;
    v24 = (v20 - v21) * v22;
    if (v23)
      v25 = (a9 - v21) * v22;
    else
      v25 = v24;
    v58 = v25;
    if (v25 > 1.001)
      goto LABEL_21;
  }
  if (v25 >= -0.001)
    goto LABEL_22;
LABEL_21:
  v26 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/LeastSquaredPredictionFilter.cpp", 880, (uint64_t)"moving_filter_wgt <= (1 + 1e-3) && moving_filter_wgt >= (0.0 - 1e-3)", 68, (uint64_t)"Wrong filter weight", 19, (void (*)(void **))sub_21023DDB0);
  v25 = v58;
  if (v26)
    goto LABEL_61;
LABEL_22:
  v27 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v27)
  {
    bzero(*(void **)a4, 8 * v27);
    v25 = v58;
  }
  if (a3)
  {
    v28 = 0;
    v29 = 0;
    v30 = *(_QWORD **)a4;
    v31 = *a2;
    v32 = 1.0 - v25;
    v33 = *(_QWORD *)a4 + 8;
    v34 = *a2 + 16;
    do
    {
      if (v29 >= a10 || v29 % (a8 + 1))
      {
        v30[v29] = v30[(v29 - 1)];
      }
      else
      {
        v35 = *(_QWORD *)(a1 + 16);
        if (v35)
        {
          v36 = *(double *)&v30[v29];
          if (v35 < 0xA)
          {
            v37 = 0;
            goto LABEL_57;
          }
          v37 = 0;
          if (!__CFADD__(30 * v29, v35 - 1) && !((v35 - 1) >> 32))
          {
            v37 = 0;
            v38 = v29;
            v39 = (unint64_t)&v30[v38];
            v40 = v33 + v38 * 8;
            v41 = (240 * v29) & 0x7FFFFFFF0;
            v42 = 8 * v35 + v41;
            v43 = a6 + v41;
            v44 = v39 >= a5 + v42 || a5 + v41 >= v40;
            v45 = !v44;
            v46 = v39 >= a6 + v42 || v43 >= v40;
            v47 = !v46;
            v48 = v31 >= v40 || v39 >= v31 + 8 * v35;
            if (v48 && !v45 && !v47)
            {
              v37 = v35 & 0xFFFFFFFFFFFFFFFCLL;
              v49 = v35 & 0xFFFFFFFFFFFFFFFCLL;
              v50 = v28;
              v51 = (float64x2_t *)v34;
              do
              {
                v52 = (8 * v50) & 0x7FFFFFFF0;
                v53 = vmulq_n_f64(*(float64x2_t *)(a5 + v52), v32);
                v54 = vmulq_n_f64(*(float64x2_t *)(a5 + v52 + 16), v32);
                v55 = (float64x2_t *)(a6 + v52);
                v56 = vmulq_f64(v51[-1], vaddq_f64(v53, vmulq_n_f64(*v55, v25)));
                v57 = vmulq_f64(*v51, vaddq_f64(v54, vmulq_n_f64(v55[1], v25)));
                v36 = v36 + v56.f64[0] + v56.f64[1] + v57.f64[0] + v57.f64[1];
                v51 += 2;
                v50 += 4;
                v49 -= 4;
              }
              while (v49);
              *(double *)&v30[v29] = v36;
              goto LABEL_58;
            }
          }
          do
          {
LABEL_57:
            v36 = v36
                + *(double *)(v31 + 8 * v37)
                * (v32 * *(double *)(a5 + 8 * (v28 + v37))
                 + v25 * *(double *)(a6 + 8 * (v28 + v37)));
            *(double *)&v30[v29] = v36;
            ++v37;
LABEL_58:
            ;
          }
          while (v35 != v37);
        }
      }
      ++v29;
      v28 += 30;
    }
    while (v29 != a3);
  }
}

int64x2_t sub_20F197680(uint64_t a1)
{
  int64x2_t *v1;
  int64x2_t *v2;
  int64x2_t *v3;
  const void *v4;
  unint64_t v5;
  unint64_t v6;
  int64x2_t *v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  int64x2_t *v56;
  int64x2_t *v57;
  int64x2_t *v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t *v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  BOOL v84;
  uint64_t v85;
  int64x2_t *v86;
  unint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t result;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t __dst[300];

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v3 = v1 + 105;
  memcpy(__dst, v4, sizeof(__dst));
  v5 = 0;
  v6 = 8;
  v7 = v3;
  v8 = __dst;
  do
  {
    v9 = 15 * v5;
    v10 = -8;
    v11 = v7;
    v12 = v8;
    do
    {
      v14 = v12[2];
      v13 = v12[3];
      v15 = v12[1];
      v17 = v12[12];
      v16 = v12[13];
      v19 = v12[10];
      v18 = v12[11];
      v21 = v12[22];
      v20 = v12[23];
      v23 = v12[20];
      v22 = v12[21];
      v25 = v12[42];
      v24 = v12[43];
      v27 = v12[40];
      v26 = v12[41];
      v29 = v12[62];
      v28 = v12[63];
      v31 = v12[60];
      v30 = v12[61];
      v32 = vzip1q_s64(*v12, v19);
      v121 = vzip2q_s64(*v12, v19);
      v33 = vzip1q_s64(v23, v12[30]);
      v23.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
      v23.i64[1] = v12[30].i64[1];
      v34.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
      v34.i64[1] = v12[50].i64[1];
      v35 = vzip1q_s64(v31, v12[70]);
      v31.i64[0] = vdupq_laneq_s64(v31, 1).u64[0];
      v31.i64[1] = v12[70].i64[1];
      v36.i64[0] = vdupq_laneq_s64(v22, 1).u64[0];
      v36.i64[1] = v12[31].i64[1];
      v37 = vzip1q_s64(v22, v12[31]);
      v38 = vzip1q_s64(v26, v12[51]);
      v26.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
      v26.i64[1] = v12[51].i64[1];
      v39 = vzip1q_s64(v30, v12[71]);
      v30.i64[0] = vdupq_laneq_s64(v30, 1).u64[0];
      v30.i64[1] = v12[71].i64[1];
      v40 = vzip1q_s64(v15, v18);
      v41 = vzip2q_s64(v15, v18);
      v42 = vzip1q_s64(v21, v12[32]);
      v21.i64[0] = vdupq_laneq_s64(v21, 1).u64[0];
      v21.i64[1] = v12[32].i64[1];
      v43 = vzip1q_s64(v25, v12[52]);
      v25.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
      v25.i64[1] = v12[52].i64[1];
      v44 = vzip1q_s64(v14, v17);
      v45 = vzip2q_s64(v14, v17);
      v46 = vzip1q_s64(v29, v12[72]);
      v29.i64[0] = vdupq_laneq_s64(v29, 1).u64[0];
      v29.i64[1] = v12[72].i64[1];
      v47 = vzip1q_s64(v20, v12[33]);
      v20.i64[0] = vdupq_laneq_s64(v20, 1).u64[0];
      v20.i64[1] = v12[33].i64[1];
      v48 = vzip1q_s64(v13, v16);
      v49 = vzip2q_s64(v13, v16);
      v50 = vzip1q_s64(v24, v12[53]);
      v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
      v24.i64[1] = v12[53].i64[1];
      v51 = vzip1q_s64(v28, v12[73]);
      v28.i64[0] = vdupq_laneq_s64(v28, 1).u64[0];
      v28.i64[1] = v12[73].i64[1];
      v52 = v11 - 105;
      v52[2] = vzip1q_s64(v27, v12[50]);
      v52[3] = v35;
      *v52 = v32;
      v52[1] = v33;
      v53 = v11 - 90;
      v53[2] = v34;
      v53[3] = v31;
      *v53 = v121;
      v53[1] = v23;
      v54 = v11 - 75;
      v54[2] = v38;
      v54[3] = v39;
      *v54 = v40;
      v54[1] = v37;
      v55 = v11 - 60;
      v55[2] = v26;
      v55[3] = v30;
      *v55 = v41;
      v55[1] = v36;
      v56 = v11 - 45;
      v56[2] = v43;
      v56[3] = v46;
      *v56 = v44;
      v56[1] = v42;
      v57 = v11 - 30;
      v57[2] = v25;
      v57[3] = v29;
      *v57 = v45;
      v57[1] = v21;
      v11[-13] = v50;
      v11[-12] = v51;
      v11[-15] = v48;
      v11[-14] = v47;
      v11[2] = v24;
      v11[3] = v28;
      *v11 = v49;
      v11[1] = v20;
      v11 += 4;
      v10 += 8;
      v12 += 80;
    }
    while (v10 < 0xF);
    v58 = &__dst[v5 / 2];
    v59 = v58[243];
    v60 = v58[242];
    v5 += 8;
    v61 = v58[241];
    v62 = v58[240];
    v63 = &v2[v9];
    v64 = v58[253];
    v65 = v58[252];
    v66 = v58[251];
    v67 = v58[250];
    v68 = v58[263];
    v69 = v58[262];
    v70 = v58[261];
    v71 = v58[260];
    v72 = v58[273];
    v73 = v58[272];
    v74 = v58[271];
    v75 = v58[270];
    v76 = v58[283];
    v77 = v58[282];
    v78 = v58[281];
    v79 = v58[280];
    v80 = v58[293];
    v81 = v58[292];
    v82 = v58[291];
    v83 = v58[290];
    v63[13] = vzip1q_s64(v71, v75);
    v63[14] = vzip1q_s64(v79, v83);
    v63[12] = vzip1q_s64(v62, v67);
    v63[28] = vzip2q_s64(v71, v75);
    v63[29] = vzip2q_s64(v79, v83);
    v63[27] = vzip2q_s64(v62, v67);
    v63[43] = vzip1q_s64(v70, v74);
    v63[44] = vzip1q_s64(v78, v82);
    v63[42] = vzip1q_s64(v61, v66);
    v63[58] = vzip2q_s64(v70, v74);
    v63[59] = vzip2q_s64(v78, v82);
    v63[57] = vzip2q_s64(v61, v66);
    v63[74] = vzip1q_s64(v77, v81);
    v63[73] = vzip1q_s64(v69, v73);
    v63[72] = vzip1q_s64(v60, v65);
    v63[89] = vzip2q_s64(v77, v81);
    v63[88] = vzip2q_s64(v69, v73);
    v63[87] = vzip2q_s64(v60, v65);
    v63[104] = vzip1q_s64(v76, v80);
    v63[103] = vzip1q_s64(v68, v72);
    v63[102] = vzip1q_s64(v59, v64);
    v63[119] = vzip2q_s64(v76, v80);
    v8 += 4;
    v7 += 120;
    v63[118] = vzip2q_s64(v68, v72);
    v63[117] = vzip2q_s64(v59, v64);
    v84 = v6 >= 0xD;
    v6 += 8;
  }
  while (!v84);
  v85 = 0;
  v86 = v2 + 240;
  v87 = -8;
  do
  {
    v89 = __dst[v85 + 8];
    v88 = __dst[v85 + 9];
    v91 = __dst[v85 + 18];
    v90 = __dst[v85 + 19];
    v93 = __dst[v85 + 28];
    v92 = __dst[v85 + 29];
    v95 = __dst[v85 + 48];
    v94 = __dst[v85 + 49];
    v96 = __dst[v85 + 69];
    v97 = __dst[v85 + 68];
    v98 = vzip1q_s64(v89, v91);
    v99 = vzip1q_s64(v93, __dst[v85 + 38]);
    v100 = vzip1q_s64(v95, __dst[v85 + 58]);
    v101 = vzip1q_s64(v97, __dst[v85 + 78]);
    v93.i64[0] = vdupq_laneq_s64(v93, 1).u64[0];
    v93.i64[1] = __dst[v85 + 38].i64[1];
    v102.i64[0] = vdupq_laneq_s64(v95, 1).u64[0];
    v102.i64[1] = __dst[v85 + 58].i64[1];
    v103 = vzip2q_s64(v89, v91);
    v91.i64[0] = vdupq_laneq_s64(v97, 1).u64[0];
    v91.i64[1] = __dst[v85 + 78].i64[1];
    v104 = vzip1q_s64(v88, v90);
    v105 = vzip1q_s64(v92, __dst[v85 + 39]);
    v106 = vzip1q_s64(v94, __dst[v85 + 59]);
    v107 = vzip1q_s64(v96, __dst[v85 + 79]);
    v108 = vzip2q_s64(v88, v90);
    v90.i64[0] = vdupq_laneq_s64(v92, 1).u64[0];
    v90.i64[1] = __dst[v85 + 39].i64[1];
    v92.i64[0] = vdupq_laneq_s64(v94, 1).u64[0];
    v92.i64[1] = __dst[v85 + 59].i64[1];
    v109.i64[0] = vdupq_laneq_s64(v96, 1).u64[0];
    v109.i64[1] = __dst[v85 + 79].i64[1];
    v86[2] = v100;
    v86[3] = v101;
    *v86 = v98;
    v86[1] = v99;
    v86[17] = v102;
    v86[18] = v91;
    v86[15] = v103;
    v86[16] = v93;
    v86[32] = v106;
    v86[33] = v107;
    v86[30] = v104;
    v86[31] = v105;
    v86[47] = v92;
    v86[48] = v109;
    v87 += 8;
    v86[45] = v108;
    v86[46] = v90;
    v86 += 4;
    v85 += 80;
  }
  while (v87 < 0xF);
  v110 = vzip1q_s64(__dst[248], __dst[258]);
  v111 = vzip1q_s64(__dst[268], __dst[278]);
  v112 = vzip2q_s64(__dst[248], __dst[258]);
  v113.i64[0] = vdupq_laneq_s64(__dst[268], 1).u64[0];
  v113.i64[1] = __dst[278].i64[1];
  v114.i64[0] = vdupq_laneq_s64(__dst[288], 1).u64[0];
  v114.i64[1] = __dst[298].i64[1];
  v115 = vzip1q_s64(__dst[249], __dst[259]);
  v116 = vzip1q_s64(__dst[269], __dst[279]);
  v117 = vzip1q_s64(__dst[289], __dst[299]);
  result = vzip2q_s64(__dst[249], __dst[259]);
  v119.i64[0] = vdupq_laneq_s64(__dst[269], 1).u64[0];
  v119.i64[1] = __dst[279].i64[1];
  v120.i64[0] = vdupq_laneq_s64(__dst[289], 1).u64[0];
  v120.i64[1] = __dst[299].i64[1];
  v3[149] = vzip1q_s64(__dst[288], __dst[298]);
  v3[148] = v111;
  v3[147] = v110;
  v3[162] = v112;
  v3[164] = v114;
  v3[163] = v113;
  v3[179] = v117;
  v3[178] = v116;
  v3[177] = v115;
  v3[192] = result;
  v3[194] = v120;
  v3[193] = v119;
  return result;
}

void sub_20F197B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  int v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1
    || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(v5 + 8) - 8 * *(unsigned int *)(v5 + 16) == *(_QWORD *)a1))
  {
    v6 = *(unsigned int *)(v4 + 16);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    v12 = v7 >> 3;
    v11 = operator new(v7, (std::align_val_t)0x20uLL);
    v13 = v6;
    sub_20F197B20(&v11, a2);
    v8 = *(void **)a1;
    v9 = v12;
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = v13;
    if (v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16) && *(_DWORD *)v5)
  {
    sub_20E8BE6CC();
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(*(void **)a1, 8 * v10);
  }
}

void sub_20F197C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x212BC6368](a10, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F197C70(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  const double *v6;
  uint64_t v7;
  double *v8;
  int v9;
  int v10;
  size_t v11;
  double *v12;
  size_t v13;
  int v14;
  void *v15;
  size_t v16;
  unint64_t v17;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(const double **)(v5 + 8);
  v7 = **(_QWORD **)(a2 + 16);
  if (&v6[-*(unsigned int *)(v5 + 16)] == v4 || (v8 = *(double **)(v7 + 16), &v8[-*(unsigned int *)(v7 + 24)] == v4))
  {
    v9 = *(_DWORD *)v5;
    v10 = *(_DWORD *)v7;
    v11 = (8 * (*(_DWORD *)v7 * *(_DWORD *)v5) + 31) & 0xFFFFFFFE0;
    v16 = v11 >> 3;
    v15 = operator new(v11, (std::align_val_t)0x20uLL);
    v17 = __PAIR64__(v10, v9);
    sub_20F197C70(&v15, a2);
    v12 = *(double **)a1;
    v13 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v17;
    if (v12)
      MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  }
  else if (*(_DWORD *)v5 && *(_DWORD *)v7 * *(_DWORD *)(v7 + 4))
  {
    sub_20E8BE654(0, 1, *(_DWORD *)v5, *(_DWORD *)v7, 1, v6, *(_DWORD *)v5, v8, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v7 + 8), v4, *(_DWORD *)(a1 + 16));
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 20);
    if (v14 * *(_DWORD *)(a1 + 16))
      bzero(v4, 8 * (v14 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20F197DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F197DE0(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  double *v15;
  size_t v16;
  size_t v17;
  int v18;
  void *v19;
  size_t v20;
  unint64_t v21;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(const double **)v5;
  if (*(double **)v5 == v4 || *(double **)v6 == v4)
  {
    v12 = *(_DWORD *)(v5 + 16);
    v13 = *(_DWORD *)(v6 + 20);
    v14 = (8 * v13 * v12 + 31) & 0xFFFFFFFE0;
    v20 = v14 >> 3;
    v19 = operator new(v14, (std::align_val_t)0x20uLL);
    v21 = __PAIR64__(v13, v12);
    sub_20F197DE0(&v19, a2);
    v15 = *(double **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = v20;
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v17;
    v19 = v15;
    v20 = v16;
    *(_QWORD *)(a1 + 16) = v21;
    v21 = 0;
    if (v15)
      MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 16);
    v9 = *(_DWORD *)(v5 + 20);
    if (v9 * v8 && (v11 = *(_DWORD *)(v6 + 16), v10 = *(_DWORD *)(v6 + 20), v10 * v11))
    {
      sub_20E8BE654(0, 0, v8, v10, v9, v7, v8, *(double **)v6, *(double *)(a2 + 24), 0.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v18 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F197F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F197F40(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  double *v15;
  size_t v16;
  size_t v17;
  int v18;
  void *v19;
  size_t v20;
  unint64_t v21;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v12 = *(_DWORD *)(v6 + 20);
    v13 = *(_DWORD *)(v5 + 20);
    v14 = (8 * v13 * v12 + 31) & 0xFFFFFFFE0;
    v20 = v14 >> 3;
    v19 = operator new(v14, (std::align_val_t)0x20uLL);
    v21 = __PAIR64__(v13, v12);
    sub_20F197F40(&v19, a2);
    v15 = *(double **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = v20;
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v17;
    v19 = v15;
    v20 = v16;
    *(_QWORD *)(a1 + 16) = v21;
    v21 = 0;
    if (v15)
      MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 20);
    if (v9 * v8 && (v11 = *(_DWORD *)(v5 + 16), v10 = *(_DWORD *)(v5 + 20), v10 * v11))
    {
      sub_20E8BE654(1, 0, v8, v10, v9, v7, v9, *(double **)v5, *(double *)(a2 + 24), 0.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v18 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F19807C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F1980A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  _QWORD v18[2];
  int v19;
  int v20;
  void *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v15 = *(unsigned int *)(****(_QWORD ****)(a2 + 8) + 4);
    v16 = (8 * v15 + 31) & 0xFFFFFFFE0;
    v22 = v16 >> 3;
    v21 = operator new(v16, (std::align_val_t)0x20uLL);
    LODWORD(v23) = v15;
    sub_20F1980A4(&v21, a2);
    v13 = *(void **)a1;
    v17 = v22;
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 16) = v23;
    if (!v13)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(**(_QWORD **)*v6 + 4);
  v10 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  if (v10 * v9 && *(_DWORD *)(v4 + 16))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v18[1] = v11 >> 3;
    v18[0] = operator new(v11, (std::align_val_t)0x20uLL);
    v19 = v9;
    v20 = v10;
    v22 = v7;
    v23 = v8;
    v24 = 0x3FF0000000000000;
    sub_20F1982BC((uint64_t)v18, (uint64_t)&v21);
    v12 = (void *)v18[0];
    sub_20E8BE6CC();
    if (!v12)
      return;
    v13 = v12;
LABEL_9:
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
    return;
  }
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
    bzero(v5, 8 * v14);
}

void sub_20F198274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F1982BC(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  int v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  const double *v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  int v21[2];
  size_t v22;
  int __lda;
  int v24;
  void *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v17 = *(_DWORD *)(***(_QWORD ***)(a2 + 8) + 4);
    v18 = *(_DWORD *)(v5 + 16);
    v19 = (8 * v18 * v17 + 31) & 0xFFFFFFFE0;
    v26 = v19 >> 3;
    v25 = operator new(v19, (std::align_val_t)0x20uLL);
    v27 = __PAIR64__(v18, v17);
    sub_20F1982BC(&v25, a2);
    v16 = *(void **)a1;
    v20 = v26;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = v27;
    if (!v16)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*(_QWORD *)*v6 + 4);
  v10 = *(_DWORD *)(v8 + 20);
  if (v10 * v9 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v22 = v11 >> 3;
    *(_QWORD *)v21 = operator new(v11, (std::align_val_t)0x20uLL);
    __lda = v9;
    v24 = v10;
    v26 = v7;
    v27 = v8;
    v28 = 0x3FF0000000000000;
    sub_20F1984F8((uint64_t)v21, (uint64_t)&v25);
    v12 = *(_QWORD **)(a2 + 8);
    v13 = **(_QWORD **)(a2 + 16);
    v14 = *(double *)(a2 + 24);
    v15 = *(const double **)v21;
    sub_20E8BE654(0, 1, *(_DWORD *)(*(_QWORD *)*v12 + 4), *(_DWORD *)(v13 + 16), *(_DWORD *)(v12[1] + 20), *(const double **)v21, __lda, *(double **)v13, v14, 0.0, *(_DWORD *)(v13 + 16), *(double **)a1, *(_DWORD *)(a1 + 16));
    if (!v15)
      return;
    v16 = (void *)v15;
LABEL_9:
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
    return;
  }
  if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16))
    bzero(v4, 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
}

void sub_20F1984B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F1984F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  int **v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const double *v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  size_t v25;
  double *v26;
  size_t v27;
  int v28;
  void *v29;
  size_t v30;
  unint64_t v31;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(double **)a1;
  v6 = *(double **)v4;
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v23 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 4);
    v24 = *(_DWORD *)(v4 + 20);
    v25 = (8 * v24 * v23 + 31) & 0xFFFFFFFE0;
    v30 = v25 >> 3;
    v29 = operator new(v25, (std::align_val_t)0x20uLL);
    v31 = __PAIR64__(v24, v23);
    sub_20F1984F8(&v29, a2);
    v26 = *(double **)a1;
    v27 = v30;
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = v31;
    if (v26)
      MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(int ***)(a2 + 8);
    v8 = *v7;
    v9 = **v7;
    v10 = (*v7)[1];
    v11 = (v9 * v10);
    if ((_DWORD)v11 && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
    {
      v28 = *(_DWORD *)(v4 + 16);
      v12 = (v9 * v10);
      v13 = *(_DWORD *)(v4 + 20);
      v14 = (const double *)operator new((v12 * 8 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v15 = *((_QWORD *)v8 + 1);
      v16 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v17 = (double *)v14;
      if (v16 < 3)
        goto LABEL_18;
      v18 = v16 + 1;
      v17 = (double *)&v14[v18 & 0x3FFFFFFFFFFFFFFCLL];
      v19 = vdupq_lane_s64(v15, 0);
      v20 = (int64x2_t *)(v14 + 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_18:
        do
          *(_QWORD *)v17++ = v15;
        while (v17 != &v14[v12]);
      }
      sub_20E8BE654(1, 0, v10, v13, v9, v14, v9, v6, *(double *)(a2 + 24), 0.0, v28, v5, *(_DWORD *)(a1 + 16));
      JUMPOUT(0x212BC6368);
    }
    v22 = *(_DWORD *)(a1 + 20);
    if (v22 * *(_DWORD *)(a1 + 16))
      bzero(*(void **)a1, 8 * (v22 * *(_DWORD *)(a1 + 16)));
  }
}

void sub_20F198704(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F198738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  double *v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t v28;
  void *v29;
  size_t v30;
  int v31;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v16 = *(unsigned int *)(v4 + 16);
    v17 = (8 * v16 + 31) & 0xFFFFFFFE0;
    v30 = v17 >> 3;
    v29 = operator new(v17, (std::align_val_t)0x20uLL);
    v31 = v16;
    sub_20F198738(&v29, a2);
    v18 = *(void **)a1;
    v19 = v30;
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = v19;
    *(_DWORD *)(a1 + 16) = v31;
    if (v18)
      MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  }
  else
  {
    if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v6)
      {
        v7 = (float64x2_t *)operator new((8 * v6 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v8 = *(double **)(v5 + 32);
        v9 = *(double **)(v5 + 8);
        v10 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v10 < 7 || (unint64_t)((char *)v7 - (char *)v9) < 0x20)
        {
          v11 = (double *)v7;
        }
        else
        {
          v11 = (double *)v7;
          if ((unint64_t)((char *)v7 - (char *)v8) >= 0x20)
          {
            v20 = v10 + 1;
            v21 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            v11 = &v7->f64[v21];
            v22 = &v8[v21];
            v23 = &v9[v21];
            v24 = (float64x2_t *)(v9 + 2);
            v25 = (float64x2_t *)(v8 + 2);
            v26 = v7 + 1;
            v27 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v28 = vsubq_f64(*v24, *v25);
              v26[-1] = vsubq_f64(v24[-1], v25[-1]);
              *v26 = v28;
              v24 += 2;
              v25 += 2;
              v26 += 2;
              v27 -= 4;
            }
            while (v27);
            v8 = v22;
            v9 = v23;
            if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_7:
              sub_20E8BE6CC();
              JUMPOUT(0x212BC6368);
            }
          }
        }
        do
        {
          v12 = *v9++;
          v13 = v12;
          v14 = *v8++;
          *v11++ = v13 - v14;
        }
        while (v11 != &v7->f64[v6]);
        goto LABEL_7;
      }
    }
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
      bzero(*(void **)a1, 8 * v15);
  }
}

void sub_20F198974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F1989A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  size_t *v6;
  size_t v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  _QWORD v18[2];
  int v19;
  int v20;
  void *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(void **)a1;
  if (*(void **)v4 == v5)
  {
    v15 = *(unsigned int *)(**(_QWORD **)(a2 + 8) + 16);
    v16 = (8 * v15 + 31) & 0xFFFFFFFE0;
    v22 = v16 >> 3;
    v21 = operator new(v16, (std::align_val_t)0x20uLL);
    LODWORD(v23) = v15;
    sub_20F1989A8(&v21, a2);
    v13 = *(void **)a1;
    v17 = v22;
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 16) = v23;
    if (!v13)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = *v6;
  v8 = v6[1];
  v9 = *(_DWORD *)(*v6 + 16);
  v10 = *(_DWORD *)(*(_QWORD *)v8 + 16);
  if (v10 * v9 && *(_DWORD *)(v4 + 16))
  {
    v11 = (8 * (v10 * v9) + 31) & 0xFFFFFFFE0;
    v18[1] = v11 >> 3;
    v18[0] = operator new(v11, (std::align_val_t)0x20uLL);
    v19 = v9;
    v20 = v10;
    v22 = v7;
    v23 = v8;
    v24 = 0x3FF0000000000000;
    sub_20F198BB0((uint64_t)v18, (uint64_t)&v21);
    v12 = (void *)v18[0];
    sub_20E8BE6CC();
    if (!v12)
      return;
    v13 = v12;
LABEL_9:
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
    return;
  }
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
    bzero(v5, 8 * v14);
}

void sub_20F198B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F198BB0(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  double *v13;
  size_t v14;
  int v15;
  void *v16;
  size_t v17;
  unint64_t v18;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4 || *(double **)v6 == v4)
  {
    v10 = *(_DWORD *)(v5 + 16);
    v11 = *(_DWORD *)(v6 + 16);
    v12 = (8 * v11 * v10 + 31) & 0xFFFFFFFE0;
    v17 = v12 >> 3;
    v16 = operator new(v12, (std::align_val_t)0x20uLL);
    v18 = __PAIR64__(v11, v10);
    sub_20F198BB0(&v16, a2);
    v13 = *(double **)a1;
    v14 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v18;
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(_DWORD *)(v5 + 20);
    if (v8 * v7 && (v9 = *(_DWORD *)(v6 + 16), v9 * *(_DWORD *)(v6 + 20)))
    {
      sub_20E8BE654(0, 1, v7, v9, v8, *(const double **)v5, v7, *(double **)v6, *(double *)(a2 + 24), 0.0, v9, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 20);
      if (v15 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v15 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F198CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F198D0C(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43[4];
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  char v47;
  void *v48[2];
  uint64_t v49;
  void *v50;
  __int128 v51;
  void *v52[2];
  uint64_t v53;
  void *v54[4];
  void *v55[2];
  uint64_t v56;
  void *v57[4];
  void *v58[2];
  uint64_t v59;
  void *v60[4];
  void *v61[2];
  uint64_t v62;
  void *__p[2];
  char v64;
  __int128 v65;
  uint64_t v66;
  void *v67[4];
  __int128 v68;
  uint64_t v69;
  void *v70[2];
  char v71;
  __int128 __dst;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;

  v75 = (char *)operator new(0x30uLL);
  v76 = xmmword_2102E3F60;
  strcpy(v75, "LeastSquaresPredictionFilterConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&v75, 80, 40);
  if (SHIBYTE(v76) < 0)
    operator delete(v75);
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v73 = *((_QWORD *)a2 + 2);
  }
  v71 = 14;
  strcpy((char *)v70, "filter_reg_eps");
  sub_2101050B4((const void **)&__dst, (uint64_t)v70, (uint64_t)&v75);
  v6 = SHIBYTE(v76);
  v7 = v75;
  v8 = sub_20EA9DB90((double *)a1);
  if (v6 >= 0)
    v9 = (char *)&v75;
  else
    v9 = v7;
  sub_20E8B2F9C(&v74, v9, v8, "Least squares solution regularization parameter");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((v71 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v70[0]);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(v75);
  if (v71 < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v73) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v68, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v68 = *a2;
    v69 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v67[2]) = 18;
  strcpy((char *)v67, "filter_max_L2_norm");
  sub_2101050B4((const void **)&v68, (uint64_t)v67, (uint64_t)&v75);
  v10 = SHIBYTE(v76);
  v11 = v75;
  v12 = sub_20EA9DB90((double *)(a1 + 8));
  if (v10 >= 0)
    v13 = (char *)&v75;
  else
    v13 = v11;
  sub_20E8B2F9C(&v74, v13, v12, "[Ls mode] Maximum filter norm bound");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_27:
    operator delete(v67[0]);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_28;
  }
  operator delete(v75);
  if (SHIBYTE(v67[2]) < 0)
    goto LABEL_27;
LABEL_23:
  if ((SHIBYTE(v69) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_28:
  operator delete((void *)v68);
LABEL_24:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v65, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v65 = *a2;
    v66 = *((_QWORD *)a2 + 2);
  }
  v64 = 8;
  strcpy((char *)__p, "num_taps");
  sub_2101050B4((const void **)&v65, (uint64_t)__p, (uint64_t)&v75);
  v14 = SHIBYTE(v76);
  v15 = v75;
  v16 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  if (v14 >= 0)
    v17 = (char *)&v75;
  else
    v17 = v15;
  sub_20E8B2F9C(&v74, v17, v16, "Number of filter coefficients");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((v64 & 0x80000000) == 0)
      goto LABEL_35;
LABEL_39:
    operator delete(__p[0]);
    if ((SHIBYTE(v66) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  operator delete(v75);
  if (v64 < 0)
    goto LABEL_39;
LABEL_35:
  if ((SHIBYTE(v66) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  operator delete((void *)v65);
LABEL_36:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v61, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v61 = *a2;
    v62 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v60[2]) = 16;
  strcpy((char *)v60, "max_pred_samples");
  sub_2101050B4((const void **)v61, (uint64_t)v60, (uint64_t)&v75);
  v18 = SHIBYTE(v76);
  v19 = v75;
  v20 = sub_20EAA1CB0((unint64_t *)(a1 + 24));
  if (v18 >= 0)
    v21 = (char *)&v75;
  else
    v21 = v19;
  sub_20E8B2F9C(&v74, v21, v20, "Maximum amount of samples to predict the pose in the future");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_51:
    operator delete(v60[0]);
    if ((SHIBYTE(v62) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_52;
  }
  operator delete(v75);
  if (SHIBYTE(v60[2]) < 0)
    goto LABEL_51;
LABEL_47:
  if ((SHIBYTE(v62) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_52:
  operator delete(v61[0]);
LABEL_48:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v58, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v58 = *a2;
    v59 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v57[2]) = 16;
  strcpy((char *)v57, "training_samples");
  sub_2101050B4((const void **)v58, (uint64_t)v57, (uint64_t)&v75);
  v22 = SHIBYTE(v76);
  v23 = v75;
  v24 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  if (v22 >= 0)
    v25 = (char *)&v75;
  else
    v25 = v23;
  sub_20E8B2F9C(&v74, v25, v24, "[LS mode] Number of training samples to solve for prediction filter");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v57[2]) & 0x80000000) == 0)
      goto LABEL_59;
LABEL_63:
    operator delete(v57[0]);
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_64;
  }
  operator delete(v75);
  if (SHIBYTE(v57[2]) < 0)
    goto LABEL_63;
LABEL_59:
  if ((SHIBYTE(v59) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_64:
  operator delete(v58[0]);
LABEL_60:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v55, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v55 = *a2;
    v56 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v54[2]) = 21;
  strcpy((char *)v54, "force_mean_constraint");
  sub_2101050B4((const void **)v55, (uint64_t)v54, (uint64_t)&v75);
  v26 = SHIBYTE(v76);
  v27 = v75;
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 40));
  if (v26 >= 0)
    v29 = (char *)&v75;
  else
    v29 = v27;
  sub_20E8B2F9C(&v74, v29, v28, "[LS mode] Flag to force filter mean to be equal to 1");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
      goto LABEL_71;
LABEL_75:
    operator delete(v54[0]);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_76;
  }
  operator delete(v75);
  if (SHIBYTE(v54[2]) < 0)
    goto LABEL_75;
LABEL_71:
  if ((SHIBYTE(v56) & 0x80000000) == 0)
    goto LABEL_72;
LABEL_76:
  operator delete(v55[0]);
LABEL_72:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v52, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v52 = *a2;
    v53 = *((_QWORD *)a2 + 2);
  }
  v50 = operator new(0x20uLL);
  v51 = xmmword_2102DBFF0;
  strcpy((char *)v50, "ls_pred_sampling_error_fraction");
  sub_2101050B4((const void **)v52, (uint64_t)&v50, (uint64_t)&v75);
  v30 = SHIBYTE(v76);
  v31 = v75;
  v32 = sub_20EA9DB90((double *)(a1 + 48));
  if (v30 >= 0)
    v33 = (char *)&v75;
  else
    v33 = v31;
  sub_20E8B2F9C(&v74, v33, v32, "LS Filter fractional sampling error bound (Block LS/RLS mode)");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_83;
LABEL_87:
    operator delete(v50);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_88;
  }
  operator delete(v75);
  if (SHIBYTE(v51) < 0)
    goto LABEL_87;
LABEL_83:
  if ((SHIBYTE(v53) & 0x80000000) == 0)
    goto LABEL_84;
LABEL_88:
  operator delete(v52[0]);
LABEL_84:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v48, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v48 = *a2;
    v49 = *((_QWORD *)a2 + 2);
  }
  v47 = 14;
  strcpy((char *)v46, "ls_update_mode");
  sub_2101050B4((const void **)v48, (uint64_t)v46, (uint64_t)&v75);
  v34 = SHIBYTE(v76);
  v35 = v75;
  v36 = operator new();
  *(_QWORD *)(v36 + 109) = 0;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 96) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_QWORD *)v36 = &off_24C9F9B68;
  *(_QWORD *)(v36 + 8) = &unk_24C9F9BE0;
  *(_QWORD *)(v36 + 152) = &unk_24C9F9C08;
  *(_QWORD *)(v36 + 176) = 0;
  *(_QWORD *)(v36 + 184) = 0;
  *(_QWORD *)(v36 + 120) = (char *)off_24C9F9D80 + 1;
  *(_QWORD *)(v36 + 128) = a1 + 56;
  v37 = operator new();
  *(_QWORD *)v37 = &off_24C9F9D48;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(v36 + 160) = v37;
  *(_QWORD *)(v36 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v36 + 191) = 7;
  if (v34 >= 0)
    v38 = (char *)&v75;
  else
    v38 = v35;
  sub_20E8B2F9C(&v74, v38, v36, "LS filter update mode: block or recusrive");
  if ((SHIBYTE(v76) & 0x80000000) == 0)
  {
    if ((v47 & 0x80000000) == 0)
      goto LABEL_95;
LABEL_99:
    operator delete(v46[0]);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_100;
  }
  operator delete(v75);
  if (v47 < 0)
    goto LABEL_99;
LABEL_95:
  if ((SHIBYTE(v49) & 0x80000000) == 0)
    goto LABEL_96;
LABEL_100:
  operator delete(v48[0]);
LABEL_96:
  v74 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v44, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v44 = *a2;
    v45 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v43[2]) = 21;
  strcpy((char *)v43, "rls_forgetting_factor");
  sub_2101050B4((const void **)v44, (uint64_t)v43, (uint64_t)&v75);
  v39 = SHIBYTE(v76);
  v40 = v75;
  v41 = sub_20EA9DB90((double *)(a1 + 64));
  if (v39 >= 0)
    v42 = (char *)&v75;
  else
    v42 = v40;
  sub_20E8B2F9C(&v74, v42, v41, "[RLS mode] filter adaptation forgetting factor");
  if (SHIBYTE(v76) < 0)
  {
    operator delete(v75);
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v45) & 0x80000000) == 0)
        return;
LABEL_111:
      operator delete(v44[0]);
      return;
    }
  }
  else if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
  {
    goto LABEL_107;
  }
  operator delete(v43[0]);
  if (SHIBYTE(v45) < 0)
    goto LABEL_111;
}

void sub_20F19960C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869298(v1);
  _Unwind_Resume(a1);
}

void sub_20F1999F0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F199F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F19A004(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F19A024(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F19A044(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F19A04C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F19A054(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F19A0AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor32LeastSquaresPredictionUpdateModeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor32LeastSquaresPredictionUpdateModeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_667;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F19A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F19A1B8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9B68;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9BE0;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9C08;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F19A9A4(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F19A9A4(a1);
}

void sub_20F19A220(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9B68;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9BE0;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9C08;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F19A9A4(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F19A29C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  int data;
  int v21;
  char v23;
  std::string *v24;
  int data_low;
  int v26;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v33;
  std::bad_cast v34;
  void *v35;
  std::ios_base v36;
  uint64_t v37;
  int v38;
  _QWORD __sb[8];
  std::string v40;
  std::string v41;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v33 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v33);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v35 = 0;
  v36.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v34.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v36, __sb);
  v37 = 0;
  v38 = -1;
  v15 = (std::ios_base *)((char *)&v34 + (unint64_t)v34.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v34.__vftable;
  *(_DWORD *)((char *)&v34 + (unint64_t)v34.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v36.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v41, *(_QWORD **)((char *)&v36.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v41.__r_.__value_.__l.__size_;
  if (size == 3)
  {
    v18 = (void *)v41.__r_.__value_.__r.__words[0];
    v24 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
    data_low = LOWORD(v24->__r_.__value_.__l.__data_);
    v26 = v24->__r_.__value_.__s.__data_[2];
    if (data_low != 19538 || v26 != 83)
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v40);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v23 = 1;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
  }
  else
  {
    if (size != 5)
      goto LABEL_42;
    v18 = (void *)v41.__r_.__value_.__r.__words[0];
    v19 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v41.__r_.__value_.__r.__words[0];
    data = (int)v19->__r_.__value_.__l.__data_;
    v21 = v19->__r_.__value_.__s.__data_[4];
    if (data != 1668246594 || v21 != 107)
      goto LABEL_42;
    v23 = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
      operator delete(v18);
  }
  if ((*((_BYTE *)&v36.__precision_ + (unint64_t)v34.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_41;
  }
  v30 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v30)
  {
LABEL_41:
    std::bad_cast::bad_cast(&v34);
    v34.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v35 = &unk_24C9AB9F0;
    v36.__vftable = (std::ios_base_vtbl *)&unk_24C9F9D28;
    sub_20EA9F254((uint64_t)&v34);
  }
  v28 = operator new();
  *(_QWORD *)v28 = &off_24C9F9D48;
  *(_BYTE *)(v28 + 8) = v23;
  v29 = *a2;
  *a2 = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
}

void sub_20F19A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F19A4D8);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F19A708(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F19A720);
}

void *sub_20F19A73C()
{
  return &unk_24C9F9D28;
}

uint64_t sub_20F19A748(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F19A750()
{
  return &unk_24C9F9D28;
}

uint64_t sub_20F19A75C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9B68;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9BE0;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9C08;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F19A9A4(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F19A9A4(v2);
}

void sub_20F19A7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9B68;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9BE0;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9C08;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F19A9A4(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F19A850(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9B68;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9BE0;
  *(_QWORD *)a1 = &unk_24C9F9C08;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F19A9A4(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F19A9A4(v2);
}

void sub_20F19A8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9B68;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9BE0;
  *(_QWORD *)a1 = &unk_24C9F9C08;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F19A9A4(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F19A944(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F19A950(uint64_t a1)
{
  sub_20F19A9A4(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F19A974(uint64_t a1)
{
  return sub_20F19A9A4(a1 - 8);
}

void sub_20F19A97C(uint64_t a1)
{
  sub_20F19A9A4(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F19A9A4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F9CA0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9D10;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F19AA74()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F19AA88()
{
  return &unk_24C9F9D28;
}

uint64_t sub_20F19AA94(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F9D48;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20F19AADC(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F9D90;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor32LeastSquar"
                                      "esPredictionUpdateModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor32LeastSquaresPredictionUpdateModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20F19AB88(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

void sub_20F19AB98(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  __int128 v35;
  void *v36[2];
  uint64_t v37;
  void *v38;
  __int128 v39;
  void *v40[2];
  uint64_t v41;
  void *v42;
  __int128 v43;
  void *v44[2];
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void *__p;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 __dst;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;

  v59 = (char *)operator new(0x20uLL);
  v60 = xmmword_2102DBFF0;
  strcpy(v59, "PosePredictionConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&v59, 180, 160);
  if (SHIBYTE(v60) < 0)
    operator delete(v59);
  v58 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v57 = *((_QWORD *)a2 + 2);
  }
  v54 = (char *)operator new(0x28uLL);
  v55 = xmmword_2102E0950;
  strcpy(v54, "enable_ml_predictor_for_regular_slam");
  sub_2101050B4((const void **)&__dst, (uint64_t)&v54, (uint64_t)&v59);
  v6 = SHIBYTE(v60);
  v7 = v59;
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  if (v6 >= 0)
    v9 = (char *)&v59;
  else
    v9 = v7;
  sub_20E8B2F9C(&v58, v9, v8, "Enable MLPosePredictor for RegularSLAM.");
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v54);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(v59);
  if (SHIBYTE(v55) < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v57) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v58 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v52, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v52 = *a2;
    v53 = *((_QWORD *)a2 + 2);
  }
  __p = operator new(0x28uLL);
  v51 = xmmword_2102DCA10;
  strcpy((char *)__p, "enable_ml_predictor_for_visual_slam");
  sub_2101050B4((const void **)&v52, (uint64_t)&__p, (uint64_t)&v59);
  v10 = SHIBYTE(v60);
  v11 = v59;
  v12 = sub_20EAA14D8((_BYTE *)a1);
  if (v10 >= 0)
    v13 = (char *)&v59;
  else
    v13 = v11;
  sub_20E8B2F9C(&v58, v13, v12, "Enable MLPosePredictor for VisualSLAM.");
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_27:
    operator delete(__p);
    if ((SHIBYTE(v53) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_28;
  }
  operator delete(v59);
  if (SHIBYTE(v51) < 0)
    goto LABEL_27;
LABEL_23:
  if ((SHIBYTE(v53) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_28:
  operator delete((void *)v52);
LABEL_24:
  v58 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v48, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v48 = *a2;
    v49 = *((_QWORD *)a2 + 2);
  }
  v46 = operator new(0x20uLL);
  v47 = xmmword_2102DBFB0;
  strcpy((char *)v46, "ml_model_for_visual_slam");
  sub_2101050B4((const void **)&v48, (uint64_t)&v46, (uint64_t)&v59);
  v14 = SHIBYTE(v60);
  v15 = v59;
  v16 = operator new();
  *(_QWORD *)(v16 + 109) = 0;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_QWORD *)v16 = &off_24C9F9DB0;
  *(_QWORD *)(v16 + 8) = &unk_24C9F9E28;
  *(_QWORD *)(v16 + 152) = &unk_24C9F9E50;
  *(_QWORD *)(v16 + 176) = 0;
  *(_QWORD *)(v16 + 184) = 0;
  *(_QWORD *)(v16 + 120) = (char *)off_24C9F9FC8 + 1;
  *(_QWORD *)(v16 + 128) = a1 + 4;
  v17 = operator new();
  *(_QWORD *)v17 = &off_24C9F9F90;
  *(_DWORD *)(v17 + 8) = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(v16 + 160) = v17;
  *(_QWORD *)(v16 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v16 + 191) = 7;
  if (v14 >= 0)
    v18 = (char *)&v59;
  else
    v18 = v15;
  sub_20E8B2F9C(&v58, v18, v16, "MLModel selection for VisualSLAM.");
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    v19 = a3;
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_39:
    operator delete(v46);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  operator delete(v59);
  v19 = a3;
  if (SHIBYTE(v47) < 0)
    goto LABEL_39;
LABEL_35:
  if ((SHIBYTE(v49) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  operator delete((void *)v48);
LABEL_36:
  v58 = nullsub_1(v19);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v44, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v44 = *a2;
    v45 = *((_QWORD *)a2 + 2);
  }
  v42 = operator new(0x20uLL);
  v43 = xmmword_2102DBFE0;
  strcpy((char *)v42, "ml_model_for_regular_slam");
  sub_2101050B4((const void **)v44, (uint64_t)&v42, (uint64_t)&v59);
  v20 = SHIBYTE(v60);
  v21 = v59;
  v22 = operator new();
  *(_QWORD *)(v22 + 109) = 0;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_QWORD *)v22 = &off_24C9F9DB0;
  *(_QWORD *)(v22 + 8) = &unk_24C9F9E28;
  *(_QWORD *)(v22 + 152) = &unk_24C9F9E50;
  *(_QWORD *)(v22 + 176) = 0;
  *(_QWORD *)(v22 + 184) = 0;
  *(_QWORD *)(v22 + 120) = (char *)off_24C9F9FC8 + 1;
  *(_QWORD *)(v22 + 128) = a1 + 8;
  v23 = operator new();
  *(_QWORD *)v23 = &off_24C9F9F90;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(v22 + 160) = v23;
  *(_QWORD *)(v22 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v22 + 191) = 7;
  if (v20 >= 0)
    v24 = (char *)&v59;
  else
    v24 = v21;
  sub_20E8B2F9C(&v58, v24, v22, "MLModel selection for RegularSLAM.");
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    v25 = a3;
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_51:
    operator delete(v42);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_52;
  }
  operator delete(v59);
  v25 = a3;
  if (SHIBYTE(v43) < 0)
    goto LABEL_51;
LABEL_47:
  if ((SHIBYTE(v45) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_52:
  operator delete(v44[0]);
LABEL_48:
  v58 = nullsub_1(v25);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v40, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v40 = *a2;
    v41 = *((_QWORD *)a2 + 2);
  }
  v38 = operator new(0x28uLL);
  v39 = xmmword_2102DC8F0;
  strcpy((char *)v38, "use_ml_orientation_for_visual_slam");
  sub_2101050B4((const void **)v40, (uint64_t)&v38, (uint64_t)&v59);
  v26 = SHIBYTE(v60);
  v27 = v59;
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 12));
  if (v26 >= 0)
    v29 = (char *)&v59;
  else
    v29 = v27;
  sub_20E8B2F9C(&v58, v29, v28, "Use orientation from MLPosePredictor for VisualSLAM.");
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_59;
LABEL_63:
    operator delete(v38);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_64;
  }
  operator delete(v59);
  if (SHIBYTE(v39) < 0)
    goto LABEL_63;
LABEL_59:
  if ((SHIBYTE(v41) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_64:
  operator delete(v40[0]);
LABEL_60:
  v58 = nullsub_1(v25);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v36, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v36 = *a2;
    v37 = *((_QWORD *)a2 + 2);
  }
  v34 = operator new(0x28uLL);
  v35 = xmmword_2102DCA10;
  strcpy((char *)v34, "use_ml_orientation_for_regular_slam");
  sub_2101050B4((const void **)v36, (uint64_t)&v34, (uint64_t)&v59);
  v30 = SHIBYTE(v60);
  v31 = v59;
  v32 = sub_20EAA14D8((_BYTE *)(a1 + 13));
  if (v30 >= 0)
    v33 = (char *)&v59;
  else
    v33 = v31;
  sub_20E8B2F9C(&v58, v33, v32, "Use orientation from MLPosePredictor for RegularSLAM.");
  if (SHIBYTE(v60) < 0)
  {
    operator delete(v59);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        return;
LABEL_75:
      operator delete(v36[0]);
      return;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v34);
  if (SHIBYTE(v37) < 0)
    goto LABEL_75;
}

void sub_20F19B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20E869298(a11);
  _Unwind_Resume(a1);
}

void sub_20F19B5FC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F19BB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F19BC10(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F19BC30(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F19BC50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F19BC58(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F19BC60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F19BCB8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor21MLPosePredictionModelE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor21MLPosePredictionModelE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_669;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F19BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F19BDC4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9DB0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9E28;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9E50;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F19C668(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F19C668(a1);
}

void sub_20F19BE2C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F9DB0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9E28;
  *(_QWORD *)(a1 + 152) = &unk_24C9F9E50;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F19C668(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F19BEA8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  uint64_t v17;
  char v18;
  void **v19;
  void *v21;
  int v22;
  int v24;
  void **v25;
  void *v26;
  uint64_t v27;
  void **v29;
  void *v30;
  uint64_t v31;
  void **v33;
  void *v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *__p[2];
  uint64_t v41;
  std::bad_cast v42;
  void *v43;
  std::ios_base v44;
  uint64_t v45;
  int v46;
  _QWORD __sb[8];
  void **v48;
  uint64_t v49;
  uint64_t v50;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v41 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v41);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v43 = 0;
  v44.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v42.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v44, __sb);
  v45 = 0;
  v46 = -1;
  v15 = (std::ios_base *)((char *)&v42 + (unint64_t)v42.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v42.__vftable;
  *(_DWORD *)((char *)&v42 + (unint64_t)v42.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v44.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  sub_20EA94AF4((uint64_t *)&v42, (uint64_t)&v48);
  v17 = HIBYTE(v50);
  v18 = HIBYTE(v50);
  if (v50 < 0)
    v17 = v49;
  switch(v17)
  {
    case 10:
      v19 = v48;
      if (v50 >= 0)
        v19 = (void **)&v48;
      if (*v19 == (void *)0x30395F6E6F727947 && *((_WORD *)v19 + 4) == 31304)
      {
        v24 = 1;
      }
      else
      {
        v21 = *v19;
        v22 = *((unsigned __int16 *)v19 + 4);
        if (v21 != (void *)0x3030315F50504E41 || v22 != 31304)
          goto LABEL_48;
        v24 = 3;
      }
      break;
    case 13:
      v29 = v48;
      if (v50 >= 0)
        v29 = (void **)&v48;
      v30 = *v29;
      v31 = *(uint64_t *)((char *)v29 + 5);
      if (v30 != (void *)0x79445F6E6F727947 || v31 != 0x63696D616E79445FLL)
        goto LABEL_48;
      v24 = 2;
      break;
    case 14:
      v25 = v48;
      if (v50 >= 0)
        v25 = (void **)&v48;
      v26 = *v25;
      v27 = *(uint64_t *)((char *)v25 + 6);
      if (v26 != (void *)0x3030315F50504E41 || v27 != 0x444F4F5F7A483030)
        goto LABEL_48;
      v24 = 4;
      break;
    case 16:
      v33 = v48;
      if (v50 >= 0)
        v33 = (void **)&v48;
      v35 = *v33;
      v34 = v33[1];
      if (v35 != (void *)0x6E79445F50504E41 || v34 != (void *)0x444F4F5F63696D61)
        goto LABEL_48;
      v24 = 6;
      break;
    default:
LABEL_48:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictionConfigUtil.cpp", 163, (uint64_t)"false", 5, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v24 = 0;
      v18 = HIBYTE(v50);
      break;
  }
  if (v18 < 0)
    operator delete(v48);
  if ((*((_BYTE *)&v44.__precision_ + (unint64_t)v42.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_60;
  }
  v39 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v39)
  {
LABEL_60:
    std::bad_cast::bad_cast(&v42);
    v42.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v43 = &unk_24C9AB9F0;
    v44.__vftable = (std::ios_base_vtbl *)&unk_24C9F9F70;
    sub_20EA9F254((uint64_t)&v42);
  }
  v37 = operator new();
  *(_QWORD *)v37 = &off_24C9F9F90;
  *(_DWORD *)(v37 + 8) = v24;
  v38 = *a2;
  *a2 = v37;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
}

void sub_20F19C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x20F19C200);
  }
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a16, &__p);
    sub_20EA9ED20((uint64_t)&a16);
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F19C31C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13)
{
  std::exception::~exception(&a13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(&a13, &a9);
    sub_20EA9ED20((uint64_t)&a13);
  }
  JUMPOUT(0x20F19C3ACLL);
}

void sub_20F19C330()
{
  JUMPOUT(0x20F19C338);
}

void sub_20F19C344()
{
  uint64_t v0;

  MEMORY[0x212BC6290](v0);
  JUMPOUT(0x20F19C358);
}

void sub_20F19C364()
{
  JUMPOUT(0x20F19C36CLL);
}

void sub_20F19C394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F19C3ACLL);
}

void sub_20F19C3C8()
{
  uint64_t v0;

  if (*(char *)(v0 - 49) < 0)
    operator delete(*(void **)(v0 - 72));
  JUMPOUT(0x20F19C3E4);
}

void *sub_20F19C400()
{
  return &unk_24C9F9F70;
}

uint64_t sub_20F19C40C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F19C414()
{
  return &unk_24C9F9F70;
}

uint64_t sub_20F19C420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9DB0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9E28;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9E50;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F19C668(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F19C668(v2);
}

void sub_20F19C490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F9DB0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F9E28;
  *(_QWORD *)(a1 + 144) = &unk_24C9F9E50;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F19C668(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F19C514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9DB0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9E28;
  *(_QWORD *)a1 = &unk_24C9F9E50;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F19C668(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F19C668(v2);
}

void sub_20F19C584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F9DB0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F9E28;
  *(_QWORD *)a1 = &unk_24C9F9E50;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F19C668(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F19C608(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F19C614(uint64_t a1)
{
  sub_20F19C668(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F19C638(uint64_t a1)
{
  return sub_20F19C668(a1 - 8);
}

void sub_20F19C640(uint64_t a1)
{
  sub_20F19C668(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F19C668(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F9EE8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F9F58;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F19C738()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F19C74C()
{
  return &unk_24C9F9F70;
}

uint64_t sub_20F19C758(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F9F90;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F19C7A0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F9FD8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor21MLPosePred"
                                      "ictionModelEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor21MLPosePredictionModelEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F19C84C(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

void sub_20F19C85C(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  size_t v44;
  size_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  unint64_t v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  double v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  const char *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  _QWORD v164[3];
  int v165;
  const char *v166;
  int v167;
  const char *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void *__dst[2];
  int64_t v172;
  uint64_t v173[5];
  __int128 v174;
  std::__shared_weak_count *v175;
  char *v176;
  std::__shared_weak_count *v177;
  uint64_t *v178;
  __int128 v179;
  _BYTE object[24];
  __int128 v181;
  void *__p[2];
  unint64_t v183;
  char v184;
  unint64_t v185;
  void *v186;
  char v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  _BYTE v191[24];
  __int128 v192;
  char *v193;
  const char *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  _QWORD v197[5];

  v197[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  kdebug_trace();
  v4 = *a2;
  v5 = *(double *)(a1 + 2072);
  if (*a2 > v5)
  {
    if (v5 <= 0.0 || v4 <= v5 + 0.015)
    {
LABEL_196:
      v118 = *(_QWORD *)(a1 + 1856) + 32 * *(_QWORD *)(a1 + 1888);
      v119 = *((_QWORD *)a2 + 3);
      v120 = *(_OWORD *)(a2 + 1);
      *(double *)v118 = v4;
      *(_OWORD *)(v118 + 8) = v120;
      *(_QWORD *)(v118 + 24) = v119;
      v121 = (uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 5;
      v122 = *(_QWORD *)(a1 + 1888) + 1;
      if (v122 >= v121)
        v123 = (uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 5;
      else
        v123 = 0;
      *(_QWORD *)(a1 + 1888) = v122 - v123;
      v124 = *(_QWORD *)(a1 + 1896);
      if (v124 == v121)
      {
        v125 = *(_QWORD *)(a1 + 1880) + 1;
        if (v125 < v121)
          v121 = 0;
        *(_QWORD *)(a1 + 1880) = v125 - v121;
      }
      else
      {
        *(_QWORD *)(a1 + 1896) = v124 + 1;
      }
      *(double *)(a1 + 2072) = *a2;
      return;
    }
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688)
      || (sub_20F1A6D2C(&v178), *(int *)v178[7] > 4)
      || (v7 = *((unsigned __int8 *)v178 + 72),
          v8 = sub_20E8C31DC((uint64_t)v178, "OSLogSurrogateAppender", 1, 0),
          v9 = v8,
          !v7)
      && !v8)
    {
LABEL_177:
      *(_QWORD *)(a1 + 1888) = 0;
      *(_QWORD *)(a1 + 1880) = 0;
      *(_QWORD *)(a1 + 1896) = 0;
      v115 = **(_QWORD **)(a1 + 2104);
      if (*(_BYTE *)(v115 + 1904))
        *(_BYTE *)(v115 + 1904) = 0;
      if (*(_BYTE *)(v115 + 2040))
        *(_BYTE *)(v115 + 2040) = 0;
      if (*(_BYTE *)(v115 + 2176))
        *(_BYTE *)(v115 + 2176) = 0;
      if (*(_BYTE *)(v115 + 2208))
        *(_BYTE *)(v115 + 2208) = 0;
      *(_OWORD *)(v115 + 2320) = 0u;
      *(_OWORD *)(v115 + 2304) = 0u;
      *(_OWORD *)(v115 + 2288) = 0u;
      *(_OWORD *)(v115 + 2352) = 0u;
      if (*(_BYTE *)(v115 + 2224))
        *(_BYTE *)(v115 + 2224) = 0;
      if (*(_BYTE *)(v115 + 2280))
        *(_BYTE *)(v115 + 2280) = 0;
      if (*(_BYTE *)(v115 + 2344))
        *(_BYTE *)(v115 + 2344) = 0;
      *(_DWORD *)(v115 + 2368) = 0;
      v116 = *(void **)(v115 + 1816);
      v117 = *(_QWORD *)(v115 + 1824) - (_QWORD)v116;
      if (v117 >= 1)
        bzero(v116, 4 * (((unint64_t)v117 >> 2) - ((unint64_t)v117 > 3)) + 4);
      *(_QWORD *)(v115 + 1848) = *(_QWORD *)(v115 + 1840);
      *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 2136) = 0;
      *(_BYTE *)(a1 + 2144) = 0;
      *(_BYTE *)(a1 + 2112) = 0;
      *(_BYTE *)(a1 + 2120) = 0;
      if (*(_BYTE *)(a1 + 2336))
        *(_BYTE *)(a1 + 2336) = 0;
      *(_DWORD *)(a1 + 2152) = 0;
      *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
      *(_QWORD *)(a1 + 2016) = 0;
      *(_QWORD *)(a1 + 2008) = 0;
      *(_QWORD *)(a1 + 2000) = 0;
      *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 2048) = 0;
      *(_QWORD *)(a1 + 2064) = 0;
      *(_QWORD *)(a1 + 2056) = 0;
      v4 = *a2;
      goto LABEL_196;
    }
    *(_QWORD *)v191 = &v178;
    *(std::chrono::steady_clock::time_point *)&v191[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v191[16] = std::chrono::system_clock::now();
    LODWORD(v192) = 4;
    *((_QWORD *)&v192 + 1) = "unknown file";
    LODWORD(v193) = 157;
    v195 = 0;
    v196 = 0;
    v194 = "unknown function";
    v10 = **(_QWORD **)v191;
    v162 = **(_QWORD **)v191;
    if (*(char *)(**(_QWORD **)v191 + 39) < 0)
    {
      v12 = *(const char **)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
    }
    else
    {
      v11 = *(unsigned __int8 *)(**(_QWORD **)v191 + 39);
      v12 = (const char *)(v10 + 16);
    }
    v161 = v10 + 16;
    v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v181 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v65 = byte_254A4A4F8;
    else
      v65 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v66 = byte_254A4A4F8[23];
    else
      v66 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v65, v12);
    v67 = &object[8];
    if (v66 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v66 >= 0x17)
    {
      v68 = v9;
      v69 = v12;
      v70 = v7;
      v71 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v71 = v66 | 7;
      v72 = v71 + 1;
      v67 = operator new(v71 + 1);
      *(_QWORD *)&object[16] = v66;
      *(_QWORD *)&v181 = v72 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v67;
      v7 = v70;
      v12 = v69;
      v9 = v68;
    }
    else
    {
      BYTE7(v181) = v66;
      if (!v66)
      {
LABEL_110:
        v67[v66] = 0;
        BYTE8(v181) = 1;
        v73 = __p;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v11 >= 0x17)
        {
          v74 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v74 = v11 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          __p[1] = (void *)v11;
          v183 = v75 | 0x8000000000000000;
          __p[0] = v73;
        }
        else
        {
          HIBYTE(v183) = v11;
          if (!v11)
            goto LABEL_118;
        }
        memmove(v73, v12, v11);
LABEL_118:
        *((_BYTE *)v73 + v11) = 0;
        v184 = 1;
        v76 = *(NSObject **)object;
        if (SHIBYTE(v183) < 0)
          operator delete(__p[0]);
        if (BYTE8(v181) && SBYTE7(v181) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v9 && *(_QWORD *)(v9 + 24))
        {
          v77 = _os_log_pack_size();
          v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
          v79 = (std::__shared_weak_count *)operator new();
          v80 = v79;
          v79->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v79->__shared_weak_owners_ = 0;
          v79[1].__vftable = v78;
          *(_QWORD *)object = v78;
          *(_QWORD *)&object[8] = v78;
          *(_QWORD *)&object[16] = v79;
          do
            v82 = __ldxr(p_shared_owners);
          while (__stxr(v82 + 1, p_shared_owners));
          v181 = 0uLL;
          __p[0] = 0;
          do
            v83 = __ldaxr(p_shared_owners);
          while (__stlxr(v83 - 1, p_shared_owners));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v80);
          }
          v84 = *(_QWORD *)object;
          v85 = _os_log_pack_fill();
          v86 = *a2;
          *(_DWORD *)v85 = 134217984;
          *(double *)(v85 + 4) = v86;
          v87 = operator new();
          v88 = *(unsigned __int8 *)(v162 + 39);
          v89 = v161;
          if ((v88 & 0x80u) != 0)
          {
            v89 = *(_QWORD *)(v162 + 16);
            v88 = *(_QWORD *)(v162 + 24);
          }
          *(_QWORD *)v87 = v84;
          *(_OWORD *)(v87 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v87 + 24) = v181;
          v181 = 0uLL;
          *(_QWORD *)(v87 + 40) = v89;
          *(_QWORD *)(v87 + 48) = v88;
          *(_BYTE *)(v87 + 56) = 16;
          *(_QWORD *)&v174 = 0;
          v164[0] = v87;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v164);
          v90 = v164[0];
          v164[0] = 0;
          if (v90)
          {
            v91 = *(std::__shared_weak_count **)(v90 + 32);
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = *(std::__shared_weak_count **)(v90 + 16);
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
            v97 = v174;
            *(_QWORD *)&v174 = 0;
            if (v97)
            {
              v98 = *(std::__shared_weak_count **)(v97 + 32);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = *(std::__shared_weak_count **)(v97 + 16);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
            }
          }
          v104 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
          if (*((_QWORD *)&v181 + 1))
          {
            v105 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v108 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
        }
        else
        {
          os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
          v110 = *a2;
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = v110;
          v111 = (void *)_os_log_send_and_compose_impl();
          if (v111)
            free(v111);
        }
        if (v7)
        {
          sub_20E8C003C((uint64_t)v191, "[MLPosePredictor] Reset MLFilter due to gyro drop at %.6f.", *a2);
          sub_20E863570((uint64_t)v191);
        }
        sub_20E863570((uint64_t)v191);
        v112 = v196;
        if (v196)
        {
          v113 = (unint64_t *)&v196->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        goto LABEL_177;
      }
    }
    memmove(v67, v65, v66);
    goto LABEL_110;
  }
  if (!*(_BYTE *)(a1 + 1688))
    return;
  sub_20F1A6D2C(v173);
  if (**(int **)(v173[0] + 56) > 4)
    return;
  v13 = *(unsigned __int8 *)(v173[0] + 72);
  v14 = sub_20E8C31DC(v173[0], "OSLogSurrogateAppender", 1, 0);
  v15 = v14;
  if (!v13 && !v14)
    return;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"[MLPosePredictor] Gyro timestamp does not move foward.", 54);
  if ((v189 & 0x10) != 0)
  {
    v18 = v188;
    if (v188 < v185)
    {
      v188 = v185;
      v18 = v185;
    }
    v19 = (void **)&v184;
  }
  else
  {
    if ((v189 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v172) = 0;
      v17 = __dst;
      goto LABEL_31;
    }
    v19 = __p;
    v18 = v183;
  }
  v20 = *v19;
  v16 = v18 - (_QWORD)*v19;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    v17 = (void **)operator new(v21 + 1);
    __dst[1] = (void *)v16;
    v172 = v22 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_30;
  }
  HIBYTE(v172) = v18 - *(_BYTE *)v19;
  v17 = __dst;
  if (v16)
LABEL_30:
    memmove(v17, v20, v16);
LABEL_31:
  *((_BYTE *)v17 + v16) = 0;
  v164[0] = v173;
  v164[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v164[2] = std::chrono::system_clock::now().__d_.__rep_;
  v165 = 4;
  v166 = "unknown file";
  v167 = 150;
  v169 = 0;
  v170 = 0;
  v168 = "unknown function";
  if (v172 >= 0)
    v23 = (const char *)__dst;
  else
    v23 = (const char *)__dst[0];
  v24 = *(_QWORD *)v164[0];
  v25 = (const char *)(*(_QWORD *)v164[0] + 16);
  v163 = v25;
  if (*(char *)(*(_QWORD *)v164[0] + 39) < 0)
  {
    v25 = *(const char **)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
  }
  else
  {
    v26 = *(unsigned __int8 *)(*(_QWORD *)v164[0] + 39);
  }
  v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v191);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v191);
    if ((_BYTE)v192 && (v191[23] & 0x80000000) != 0)
      operator delete(*(void **)v191);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v28 = byte_254A4A4F8;
  else
    v28 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v29 = byte_254A4A4F8[23];
  else
    v29 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v191 = os_log_create(v28, v25);
  v30 = &v191[8];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v160 = v25;
    v31 = v24;
    v32 = v15;
    v33 = v23;
    v34 = v13;
    v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v35 = v29 | 7;
    v36 = v35 + 1;
    v30 = operator new(v35 + 1);
    *(_QWORD *)&v191[16] = v29;
    *(_QWORD *)&v192 = v36 | 0x8000000000000000;
    *(_QWORD *)&v191[8] = v30;
    v13 = v34;
    v23 = v33;
    v15 = v32;
    v24 = v31;
    v25 = v160;
    goto LABEL_51;
  }
  BYTE7(v192) = v29;
  if (v29)
LABEL_51:
    memmove(v30, v28, v29);
  v30[v29] = 0;
  BYTE8(v192) = 1;
  v37 = (char *)&v193;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v38 = v26 | 7;
    v39 = v38 + 1;
    v37 = (char *)operator new(v38 + 1);
    v194 = (const char *)v26;
    v195 = v39 | 0x8000000000000000;
    v193 = v37;
    goto LABEL_59;
  }
  HIBYTE(v195) = v26;
  if (v26)
LABEL_59:
    memmove(v37, v25, v26);
  v37[v26] = 0;
  LOBYTE(v196) = 1;
  v40 = *(NSObject **)v191;
  if (SHIBYTE(v195) < 0)
    operator delete(v193);
  if (BYTE8(v192) && SBYTE7(v192) < 0)
    operator delete(*(void **)&v191[8]);
  if (*(_QWORD *)v191)
    os_release(*(void **)v191);
  if (!v15 || !*(_QWORD *)(v15 + 24))
  {
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v191 = 136315138;
    *(_QWORD *)&v191[4] = v23;
    v47 = (void *)_os_log_send_and_compose_impl();
    if (v47)
      free(v47);
    goto LABEL_250;
  }
  v41 = _os_log_pack_size();
  v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
  v43 = (std::__shared_weak_count *)operator new();
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = v42;
  *(_QWORD *)&v174 = v42;
  *((_QWORD *)&v174 + 1) = v42;
  v176 = 0;
  v177 = 0;
  v175 = v43;
  v44 = strlen(v23);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v46 = (uint64_t *)operator new(v48 + 1);
    *(_QWORD *)&v179 = v45;
    *((_QWORD *)&v179 + 1) = v49 | 0x8000000000000000;
    v178 = v46;
    goto LABEL_78;
  }
  HIBYTE(v179) = v44;
  v46 = (uint64_t *)&v178;
  if (v44)
LABEL_78:
    memcpy(v46, v23, v45);
  *((_BYTE *)v46 + v45) = 0;
  v50 = (uint64_t)v178;
  v197[0] = v179;
  *(_QWORD *)((char *)v197 + 7) = *(_QWORD *)((char *)&v179 + 7);
  v51 = HIBYTE(v179);
  v52 = operator new(0x38uLL);
  v52[1] = 0;
  v52[2] = 0;
  v52[3] = off_24C9ABC20;
  *v52 = &off_24C9ABBD0;
  v53 = v197[0];
  v52[4] = v50;
  v52[5] = v53;
  *(_QWORD *)((char *)v52 + 47) = *(_QWORD *)((char *)v197 + 7);
  *((_BYTE *)v52 + 55) = v51;
  v197[0] = 0;
  *(_QWORD *)((char *)v197 + 7) = 0;
  v54 = v177;
  v176 = (char *)(v52 + 3);
  v177 = (std::__shared_weak_count *)v52;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_OWORD *)v191 = v174;
  v57 = v176;
  *(_QWORD *)&v191[16] = v175;
  if (v175)
  {
    v58 = (unint64_t *)&v175->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = v177;
  *(_QWORD *)&v192 = v57;
  *((_QWORD *)&v192 + 1) = v177;
  if (v177)
  {
    v61 = (unint64_t *)&v177->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v193 = v57;
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  else
  {
    v193 = v57;
  }
  v126 = v175;
  if (v175)
  {
    v127 = (unint64_t *)&v175->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(_QWORD *)v191;
  if (v193[31] >= 0)
    v130 = v193 + 8;
  else
    v130 = (char *)*((_QWORD *)v193 + 1);
  v131 = _os_log_pack_fill();
  *(_DWORD *)v131 = 136315138;
  *(_QWORD *)(v131 + 4) = v130;
  v132 = operator new();
  v133 = *(unsigned __int8 *)(v24 + 39);
  v134 = v163;
  if ((v133 & 0x80u) != 0)
  {
    v134 = *(const char **)(v24 + 16);
    v133 = *(_QWORD *)(v24 + 24);
  }
  *(_QWORD *)v132 = v129;
  *(_OWORD *)(v132 + 8) = *(_OWORD *)&v191[8];
  *(_QWORD *)&v191[8] = 0;
  *(_QWORD *)&v191[16] = 0;
  *(_OWORD *)(v132 + 24) = v192;
  v192 = 0uLL;
  *(_QWORD *)(v132 + 40) = v134;
  *(_QWORD *)(v132 + 48) = v133;
  *(_BYTE *)(v132 + 56) = 16;
  v178 = 0;
  *(_QWORD *)&v174 = v132;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v174);
  v135 = v174;
  *(_QWORD *)&v174 = 0;
  if (v135)
  {
    v136 = *(std::__shared_weak_count **)(v135 + 32);
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v139 = *(std::__shared_weak_count **)(v135 + 16);
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
    v142 = (uint64_t)v178;
    v178 = 0;
    if (v142)
    {
      v143 = *(std::__shared_weak_count **)(v142 + 32);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = *(std::__shared_weak_count **)(v142 + 16);
      if (v146)
      {
        v147 = (unint64_t *)&v146->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      MEMORY[0x212BC6398](v142, 0x10F0C40B62ED6C6);
    }
  }
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = *(std::__shared_weak_count **)&v191[16];
  if (*(_QWORD *)&v191[16])
  {
    v153 = (unint64_t *)(*(_QWORD *)&v191[16] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
LABEL_250:
  if (v13)
  {
    v155 = (const char *)__dst;
    if (v172 < 0)
      v155 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v164, "%s", v155);
    sub_20E863570((uint64_t)v164);
  }
  sub_20E863570((uint64_t)v164);
  v156 = v170;
  if (v170)
  {
    v157 = (unint64_t *)&v170->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v172) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v159 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v159;
  *(_QWORD *)&v181 = MEMORY[0x24BEDB848] + 16;
  if (v187 < 0)
    operator delete(v186);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v190);
}

